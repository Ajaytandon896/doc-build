import{S as E8t,i as C8t,s as w8t,e as a,k as l,w as m,t as o,M as A8t,c as n,d as t,m as i,a as s,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p,v as y8t}from"../../chunks/vendor-6b77c823.js";import{T as Jqr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function L8t(Vm){let oe,co,fe,Ae,io,pe,Ce,Xo,zi,Xm,ma,Qi,Wi,z6,zm,Se,mo,Hi,On,Q6,Vn,Xn,W6,Ui,zn,H6,Ji,Qm,Da;return{c(){oe=a("p"),co=o("If your "),fe=a("code"),Ae=o("NewModelConfig"),io=o(" is a subclass of "),pe=a("code"),Ce=o("PretrainedConfig"),Xo=o(`, make sure its
`),zi=a("code"),Xm=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),Qi=a("code"),Wi=o('"new-model"'),z6=o(")."),zm=l(),Se=a("p"),mo=o("Likewise, if your "),Hi=a("code"),On=o("NewModel"),Q6=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),W6=o(`, make sure its
`),Ui=a("code"),zn=o("config_class"),H6=o(` attribute is set to the same class you use when registering the model (here
`),Ji=a("code"),Qm=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){oe=n(fo,"P",{});var ve=s(oe);co=r(ve,"If your "),fe=n(ve,"CODE",{});var z9=s(fe);Ae=r(z9,"NewModelConfig"),z9.forEach(t),io=r(ve," is a subclass of "),pe=n(ve,"CODE",{});var Yi=s(pe);Ce=r(Yi,"PretrainedConfig"),Yi.forEach(t),Xo=r(ve,`, make sure its
`),zi=n(ve,"CODE",{});var Q9=s(zi);Xm=r(Q9,"model_type"),Q9.forEach(t),ma=r(ve," attribute is set to the same key you use when registering the config (here "),Qi=n(ve,"CODE",{});var W9=s(Qi);Wi=r(W9,'"new-model"'),W9.forEach(t),z6=r(ve,")."),ve.forEach(t),zm=i(fo),Se=n(fo,"P",{});var zo=s(Se);mo=r(zo,"Likewise, if your "),Hi=n(zo,"CODE",{});var Ga=s(Hi);On=r(Ga,"NewModel"),Ga.forEach(t),Q6=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var H9=s(Vn);Xn=r(H9,"PreTrainedModel"),H9.forEach(t),W6=r(zo,`, make sure its
`),Ui=n(zo,"CODE",{});var Wm=s(Ui);zn=r(Wm,"config_class"),Wm.forEach(t),H6=r(zo,` attribute is set to the same class you use when registering the model (here
`),Ji=n(zo,"CODE",{});var U9=s(Ji);Qm=r(U9,"NewModelConfig"),U9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ve){b(fo,oe,ve),e(oe,co),e(oe,fe),e(fe,Ae),e(oe,io),e(oe,pe),e(pe,Ce),e(oe,Xo),e(oe,zi),e(zi,Xm),e(oe,ma),e(oe,Qi),e(Qi,Wi),e(oe,z6),b(fo,zm,ve),b(fo,Se,ve),e(Se,mo),e(Se,Hi),e(Hi,On),e(Se,Q6),e(Se,Vn),e(Vn,Xn),e(Se,W6),e(Se,Ui),e(Ui,zn),e(Se,H6),e(Se,Ji),e(Ji,Qm),e(Se,Da)},d(fo){fo&&t(oe),fo&&t(zm),fo&&t(Se)}}}function x8t(Vm){let oe,co,fe,Ae,io;return{c(){oe=a("p"),co=o("Passing "),fe=a("code"),Ae=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(pe){oe=n(pe,"P",{});var Ce=s(oe);co=r(Ce,"Passing "),fe=n(Ce,"CODE",{});var Xo=s(fe);Ae=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(pe,Ce){b(pe,oe,Ce),e(oe,co),e(oe,fe),e(fe,Ae),e(oe,io)},d(pe){pe&&t(oe)}}}function k8t(Vm){let oe,co,fe,Ae,io;return{c(){oe=a("p"),co=o("Passing "),fe=a("code"),Ae=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(pe){oe=n(pe,"P",{});var Ce=s(oe);co=r(Ce,"Passing "),fe=n(Ce,"CODE",{});var Xo=s(fe);Ae=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(pe,Ce){b(pe,oe,Ce),e(oe,co),e(oe,fe),e(fe,Ae),e(oe,io)},d(pe){pe&&t(oe)}}}function S8t(Vm){let oe,co,fe,Ae,io,pe,Ce,Xo,zi,Xm,ma,Qi,Wi,z6,zm,Se,mo,Hi,On,Q6,Vn,Xn,W6,Ui,zn,H6,Ji,Qm,Da,fo,ve,z9,Yi,Q9,W9,zo,Ga,H9,Wm,U9,fNe,ZBe,Ki,Hm,nK,U6,gNe,sK,hNe,ePe,Qn,uNe,lK,pNe,_Ne,iK,bNe,vNe,oPe,J6,rPe,J9,FNe,tPe,Um,aPe,Zi,Jm,dK,Y6,TNe,cK,MNe,nPe,Qo,K6,ENe,Z6,CNe,Y9,wNe,ANe,yNe,ew,LNe,mK,xNe,kNe,SNe,go,ow,RNe,fK,BNe,PNe,ed,$Ne,gK,INe,qNe,hK,NNe,jNe,DNe,v,Ym,uK,GNe,ONe,K9,VNe,XNe,zNe,Km,pK,QNe,WNe,Z9,HNe,UNe,JNe,Zm,_K,YNe,KNe,ex,ZNe,eje,oje,ef,bK,rje,tje,ox,aje,nje,sje,of,vK,lje,ije,rx,dje,cje,mje,rf,FK,fje,gje,tx,hje,uje,pje,tf,TK,_je,bje,ax,vje,Fje,Tje,af,MK,Mje,Eje,nx,Cje,wje,Aje,nf,EK,yje,Lje,sx,xje,kje,Sje,sf,CK,Rje,Bje,lx,Pje,$je,Ije,lf,wK,qje,Nje,ix,jje,Dje,Gje,df,AK,Oje,Vje,dx,Xje,zje,Qje,cf,yK,Wje,Hje,cx,Uje,Jje,Yje,mf,LK,Kje,Zje,mx,eDe,oDe,rDe,ff,xK,tDe,aDe,fx,nDe,sDe,lDe,gf,kK,iDe,dDe,gx,cDe,mDe,fDe,hf,SK,gDe,hDe,hx,uDe,pDe,_De,uf,RK,bDe,vDe,ux,FDe,TDe,MDe,pf,BK,EDe,CDe,px,wDe,ADe,yDe,_f,PK,LDe,xDe,_x,kDe,SDe,RDe,bf,$K,BDe,PDe,bx,$De,IDe,qDe,vf,IK,NDe,jDe,vx,DDe,GDe,ODe,Ff,qK,VDe,XDe,Fx,zDe,QDe,WDe,Tf,NK,HDe,UDe,Tx,JDe,YDe,KDe,Mf,jK,ZDe,eGe,Mx,oGe,rGe,tGe,Ef,DK,aGe,nGe,Ex,sGe,lGe,iGe,Cf,GK,dGe,cGe,Cx,mGe,fGe,gGe,wf,OK,hGe,uGe,wx,pGe,_Ge,bGe,Af,VK,vGe,FGe,Ax,TGe,MGe,EGe,yf,XK,CGe,wGe,yx,AGe,yGe,LGe,Lf,zK,xGe,kGe,Lx,SGe,RGe,BGe,xf,QK,PGe,$Ge,xx,IGe,qGe,NGe,kf,WK,jGe,DGe,kx,GGe,OGe,VGe,Sf,HK,XGe,zGe,Sx,QGe,WGe,HGe,Rf,UK,UGe,JGe,Rx,YGe,KGe,ZGe,Bf,JK,eOe,oOe,Bx,rOe,tOe,aOe,Pf,YK,nOe,sOe,Px,lOe,iOe,dOe,$f,KK,cOe,mOe,$x,fOe,gOe,hOe,If,ZK,uOe,pOe,Ix,_Oe,bOe,vOe,qf,eZ,FOe,TOe,qx,MOe,EOe,COe,Nf,oZ,wOe,AOe,Nx,yOe,LOe,xOe,jf,rZ,kOe,SOe,jx,ROe,BOe,POe,Df,tZ,$Oe,IOe,Dx,qOe,NOe,jOe,Gf,aZ,DOe,GOe,Gx,OOe,VOe,XOe,Of,nZ,zOe,QOe,Ox,WOe,HOe,UOe,Vf,sZ,JOe,YOe,Vx,KOe,ZOe,eVe,Xf,lZ,oVe,rVe,Xx,tVe,aVe,nVe,zf,iZ,sVe,lVe,zx,iVe,dVe,cVe,Qf,dZ,mVe,fVe,Qx,gVe,hVe,uVe,Wf,cZ,pVe,_Ve,Wx,bVe,vVe,FVe,Hf,mZ,TVe,MVe,Hx,EVe,CVe,wVe,Uf,fZ,AVe,yVe,Ux,LVe,xVe,kVe,Jf,gZ,SVe,RVe,Jx,BVe,PVe,$Ve,Yf,hZ,IVe,qVe,Yx,NVe,jVe,DVe,Kf,uZ,GVe,OVe,Kx,VVe,XVe,zVe,Zf,pZ,QVe,WVe,Zx,HVe,UVe,JVe,eg,_Z,YVe,KVe,ek,ZVe,eXe,oXe,og,bZ,rXe,tXe,ok,aXe,nXe,sXe,rg,vZ,lXe,iXe,rk,dXe,cXe,mXe,tg,FZ,fXe,gXe,tk,hXe,uXe,pXe,ag,TZ,_Xe,bXe,ak,vXe,FXe,TXe,ng,MZ,MXe,EXe,nk,CXe,wXe,AXe,sg,EZ,yXe,LXe,sk,xXe,kXe,SXe,lg,CZ,RXe,BXe,lk,PXe,$Xe,IXe,ig,wZ,qXe,NXe,ik,jXe,DXe,GXe,dg,AZ,OXe,VXe,dk,XXe,zXe,QXe,cg,yZ,WXe,HXe,ck,UXe,JXe,YXe,mg,LZ,KXe,ZXe,mk,eze,oze,rze,fg,xZ,tze,aze,fk,nze,sze,lze,gg,kZ,ize,dze,gk,cze,mze,fze,hg,SZ,gze,hze,hk,uze,pze,_ze,ug,RZ,bze,vze,uk,Fze,Tze,Mze,pg,BZ,Eze,Cze,pk,wze,Aze,yze,_g,PZ,Lze,xze,_k,kze,Sze,Rze,bg,$Z,Bze,Pze,bk,$ze,Ize,qze,vg,IZ,Nze,jze,vk,Dze,Gze,Oze,Fg,qZ,Vze,Xze,Fk,zze,Qze,Wze,Tg,NZ,Hze,Uze,Tk,Jze,Yze,Kze,Mg,jZ,Zze,eQe,Mk,oQe,rQe,tQe,Eg,DZ,aQe,nQe,Ek,sQe,lQe,iQe,Cg,GZ,dQe,cQe,Ck,mQe,fQe,gQe,wg,OZ,hQe,uQe,wk,pQe,_Qe,bQe,Ag,VZ,vQe,FQe,Ak,TQe,MQe,EQe,yg,XZ,CQe,wQe,yk,AQe,yQe,LQe,Lg,zZ,xQe,kQe,Lk,SQe,RQe,BQe,xg,QZ,PQe,$Qe,xk,IQe,qQe,NQe,kg,WZ,jQe,DQe,kk,GQe,OQe,VQe,Sg,HZ,XQe,zQe,Sk,QQe,WQe,HQe,Rg,UZ,UQe,JQe,Rk,YQe,KQe,ZQe,Bg,JZ,eWe,oWe,Bk,rWe,tWe,aWe,Pg,YZ,nWe,sWe,Pk,lWe,iWe,dWe,$g,KZ,cWe,mWe,$k,fWe,gWe,hWe,Ig,ZZ,uWe,pWe,Ik,_We,bWe,vWe,qg,eee,FWe,TWe,qk,MWe,EWe,CWe,Ng,oee,wWe,AWe,Nk,yWe,LWe,xWe,jg,ree,kWe,SWe,jk,RWe,BWe,PWe,Dg,tee,$We,IWe,Dk,qWe,NWe,jWe,Gg,aee,DWe,GWe,Gk,OWe,VWe,XWe,Og,nee,zWe,QWe,Ok,WWe,HWe,UWe,Vg,see,JWe,YWe,Vk,KWe,ZWe,eHe,Xg,lee,oHe,rHe,Xk,tHe,aHe,nHe,zg,iee,sHe,lHe,zk,iHe,dHe,cHe,dee,mHe,fHe,rw,gHe,Qg,tw,hHe,cee,uHe,sPe,od,Wg,mee,aw,pHe,fee,_He,lPe,Wo,nw,bHe,sw,vHe,Qk,FHe,THe,MHe,lw,EHe,gee,CHe,wHe,AHe,ho,iw,yHe,hee,LHe,xHe,Oa,kHe,uee,SHe,RHe,pee,BHe,PHe,_ee,$He,IHe,qHe,E,Wn,bee,NHe,jHe,Wk,DHe,GHe,Hk,OHe,VHe,XHe,Hn,vee,zHe,QHe,Uk,WHe,HHe,Jk,UHe,JHe,YHe,Un,Fee,KHe,ZHe,Yk,eUe,oUe,Kk,rUe,tUe,aUe,Hg,Tee,nUe,sUe,Zk,lUe,iUe,dUe,Jn,Mee,cUe,mUe,eS,fUe,gUe,oS,hUe,uUe,pUe,Ug,Eee,_Ue,bUe,rS,vUe,FUe,TUe,Jg,Cee,MUe,EUe,tS,CUe,wUe,AUe,Yg,wee,yUe,LUe,aS,xUe,kUe,SUe,Yn,Aee,RUe,BUe,nS,PUe,$Ue,sS,IUe,qUe,NUe,Kn,yee,jUe,DUe,lS,GUe,OUe,iS,VUe,XUe,zUe,Zn,Lee,QUe,WUe,dS,HUe,UUe,cS,JUe,YUe,KUe,Kg,xee,ZUe,eJe,mS,oJe,rJe,tJe,Zg,kee,aJe,nJe,fS,sJe,lJe,iJe,es,See,dJe,cJe,gS,mJe,fJe,hS,gJe,hJe,uJe,eh,Ree,pJe,_Je,uS,bJe,vJe,FJe,os,Bee,TJe,MJe,pS,EJe,CJe,_S,wJe,AJe,yJe,rs,Pee,LJe,xJe,bS,kJe,SJe,vS,RJe,BJe,PJe,ts,$ee,$Je,IJe,FS,qJe,NJe,Iee,jJe,DJe,GJe,oh,qee,OJe,VJe,TS,XJe,zJe,QJe,as,Nee,WJe,HJe,MS,UJe,JJe,ES,YJe,KJe,ZJe,ns,jee,eYe,oYe,CS,rYe,tYe,wS,aYe,nYe,sYe,ss,Dee,lYe,iYe,AS,dYe,cYe,yS,mYe,fYe,gYe,ls,Gee,hYe,uYe,LS,pYe,_Ye,xS,bYe,vYe,FYe,is,Oee,TYe,MYe,kS,EYe,CYe,SS,wYe,AYe,yYe,ds,Vee,LYe,xYe,RS,kYe,SYe,BS,RYe,BYe,PYe,rh,Xee,$Ye,IYe,PS,qYe,NYe,jYe,cs,zee,DYe,GYe,$S,OYe,VYe,IS,XYe,zYe,QYe,th,Qee,WYe,HYe,qS,UYe,JYe,YYe,ms,Wee,KYe,ZYe,NS,eKe,oKe,jS,rKe,tKe,aKe,fs,Hee,nKe,sKe,DS,lKe,iKe,GS,dKe,cKe,mKe,gs,Uee,fKe,gKe,OS,hKe,uKe,VS,pKe,_Ke,bKe,hs,Jee,vKe,FKe,XS,TKe,MKe,zS,EKe,CKe,wKe,us,Yee,AKe,yKe,QS,LKe,xKe,WS,kKe,SKe,RKe,ah,Kee,BKe,PKe,HS,$Ke,IKe,qKe,ps,Zee,NKe,jKe,US,DKe,GKe,JS,OKe,VKe,XKe,_s,eoe,zKe,QKe,YS,WKe,HKe,KS,UKe,JKe,YKe,bs,ooe,KKe,ZKe,ZS,eZe,oZe,eR,rZe,tZe,aZe,vs,roe,nZe,sZe,oR,lZe,iZe,rR,dZe,cZe,mZe,Fs,toe,fZe,gZe,tR,hZe,uZe,aR,pZe,_Ze,bZe,Ts,aoe,vZe,FZe,nR,TZe,MZe,sR,EZe,CZe,wZe,nh,noe,AZe,yZe,lR,LZe,xZe,kZe,Ms,soe,SZe,RZe,iR,BZe,PZe,dR,$Ze,IZe,qZe,sh,loe,NZe,jZe,cR,DZe,GZe,OZe,lh,ioe,VZe,XZe,mR,zZe,QZe,WZe,Es,doe,HZe,UZe,fR,JZe,YZe,gR,KZe,ZZe,eeo,Cs,coe,oeo,reo,hR,teo,aeo,uR,neo,seo,leo,ws,moe,ieo,deo,pR,ceo,meo,_R,feo,geo,heo,ih,foe,ueo,peo,bR,_eo,beo,veo,As,goe,Feo,Teo,vR,Meo,Eeo,FR,Ceo,weo,Aeo,ys,hoe,yeo,Leo,TR,xeo,keo,MR,Seo,Reo,Beo,Ls,uoe,Peo,$eo,ER,Ieo,qeo,CR,Neo,jeo,Deo,xs,poe,Geo,Oeo,wR,Veo,Xeo,AR,zeo,Qeo,Weo,ks,_oe,Heo,Ueo,yR,Jeo,Yeo,LR,Keo,Zeo,eoo,Ss,boe,ooo,roo,xR,too,aoo,kR,noo,soo,loo,dh,voe,ioo,doo,SR,coo,moo,foo,ch,Foe,goo,hoo,RR,uoo,poo,_oo,mh,Toe,boo,voo,BR,Foo,Too,Moo,fh,Moe,Eoo,Coo,PR,woo,Aoo,yoo,Rs,Eoe,Loo,xoo,$R,koo,Soo,IR,Roo,Boo,Poo,gh,Coe,$oo,Ioo,qR,qoo,Noo,joo,Bs,woe,Doo,Goo,NR,Ooo,Voo,jR,Xoo,zoo,Qoo,Ps,Aoe,Woo,Hoo,DR,Uoo,Joo,GR,Yoo,Koo,Zoo,$s,yoe,ero,oro,OR,rro,tro,VR,aro,nro,sro,Is,Loe,lro,iro,XR,dro,cro,zR,mro,fro,gro,qs,xoe,hro,uro,QR,pro,_ro,WR,bro,vro,Fro,Ns,koe,Tro,Mro,HR,Ero,Cro,UR,wro,Aro,yro,hh,Soe,Lro,xro,JR,kro,Sro,Rro,uh,Roe,Bro,Pro,YR,$ro,Iro,qro,js,Boe,Nro,jro,KR,Dro,Gro,ZR,Oro,Vro,Xro,Ds,Poe,zro,Qro,eB,Wro,Hro,oB,Uro,Jro,Yro,Gs,$oe,Kro,Zro,rB,eto,oto,tB,rto,tto,ato,ph,Ioe,nto,sto,aB,lto,ito,dto,_h,qoe,cto,mto,nB,fto,gto,hto,bh,Noe,uto,pto,sB,_to,bto,vto,Os,joe,Fto,Tto,lB,Mto,Eto,iB,Cto,wto,Ato,vh,Doe,yto,Lto,dB,xto,kto,Sto,Fh,Goe,Rto,Bto,cB,Pto,$to,Ito,Vs,Ooe,qto,Nto,mB,jto,Dto,fB,Gto,Oto,Vto,Th,Voe,Xto,zto,gB,Qto,Wto,Hto,Mh,Xoe,Uto,Jto,hB,Yto,Kto,Zto,Xs,zoe,eao,oao,uB,rao,tao,pB,aao,nao,sao,zs,Qoe,lao,iao,_B,dao,cao,bB,mao,fao,gao,Qs,Woe,hao,uao,vB,pao,_ao,FB,bao,vao,Fao,Ws,Hoe,Tao,Mao,TB,Eao,Cao,MB,wao,Aao,yao,Uoe,Lao,xao,dw,kao,Eh,cw,Sao,Joe,Rao,iPe,rd,Ch,Yoe,mw,Bao,Koe,Pao,dPe,Ho,fw,$ao,gw,Iao,EB,qao,Nao,jao,hw,Dao,Zoe,Gao,Oao,Vao,Ie,uw,Xao,ere,zao,Qao,Va,Wao,ore,Hao,Uao,rre,Jao,Yao,tre,Kao,Zao,eno,H,wh,are,ono,rno,CB,tno,ano,nno,Ah,nre,sno,lno,wB,ino,dno,cno,yh,sre,mno,fno,AB,gno,hno,uno,Lh,lre,pno,_no,yB,bno,vno,Fno,xh,ire,Tno,Mno,LB,Eno,Cno,wno,kh,dre,Ano,yno,xB,Lno,xno,kno,Sh,cre,Sno,Rno,kB,Bno,Pno,$no,Rh,mre,Ino,qno,SB,Nno,jno,Dno,Bh,fre,Gno,Ono,RB,Vno,Xno,zno,Ph,gre,Qno,Wno,BB,Hno,Uno,Jno,$h,hre,Yno,Kno,PB,Zno,eso,oso,Ih,ure,rso,tso,$B,aso,nso,sso,qh,pre,lso,iso,IB,dso,cso,mso,Nh,_re,fso,gso,qB,hso,uso,pso,jh,bre,_so,bso,NB,vso,Fso,Tso,Dh,vre,Mso,Eso,jB,Cso,wso,Aso,Gh,Fre,yso,Lso,DB,xso,kso,Sso,Oh,Tre,Rso,Bso,GB,Pso,$so,Iso,Vh,Mre,qso,Nso,OB,jso,Dso,Gso,Xh,Ere,Oso,Vso,VB,Xso,zso,Qso,zh,Cre,Wso,Hso,XB,Uso,Jso,Yso,Qh,wre,Kso,Zso,zB,elo,olo,rlo,Wh,Are,tlo,alo,QB,nlo,slo,llo,Hh,ilo,yre,dlo,clo,pw,mlo,Uh,_w,flo,Lre,glo,cPe,td,Jh,xre,bw,hlo,kre,ulo,mPe,Uo,vw,plo,Fw,_lo,WB,blo,vlo,Flo,Tw,Tlo,Sre,Mlo,Elo,Clo,qe,Mw,wlo,Rre,Alo,ylo,ad,Llo,Bre,xlo,klo,Pre,Slo,Rlo,Blo,de,Yh,$re,Plo,$lo,HB,Ilo,qlo,Nlo,Kh,Ire,jlo,Dlo,UB,Glo,Olo,Vlo,Zh,qre,Xlo,zlo,JB,Qlo,Wlo,Hlo,eu,Nre,Ulo,Jlo,YB,Ylo,Klo,Zlo,ou,jre,eio,oio,KB,rio,tio,aio,ru,Dre,nio,sio,ZB,lio,iio,dio,tu,Gre,cio,mio,eP,fio,gio,hio,au,Ore,uio,pio,oP,_io,bio,vio,nu,Vre,Fio,Tio,rP,Mio,Eio,Cio,su,Xre,wio,Aio,tP,yio,Lio,xio,lu,zre,kio,Sio,aP,Rio,Bio,Pio,iu,Qre,$io,Iio,nP,qio,Nio,jio,du,Wre,Dio,Gio,sP,Oio,Vio,Xio,cu,Hre,zio,Qio,lP,Wio,Hio,Uio,mu,Jio,Ure,Yio,Kio,Ew,Zio,fu,Cw,edo,Jre,odo,fPe,nd,gu,Yre,ww,rdo,Kre,tdo,gPe,Jo,Aw,ado,sd,ndo,iP,sdo,ldo,dP,ido,ddo,cdo,yw,mdo,Zre,fdo,gdo,hdo,Xr,Lw,udo,ete,pdo,_do,ld,bdo,ote,vdo,Fdo,cP,Tdo,Mdo,Edo,rte,Cdo,wdo,xw,Ado,Ne,kw,ydo,tte,Ldo,xdo,Xa,kdo,ate,Sdo,Rdo,nte,Bdo,Pdo,ste,$do,Ido,qdo,T,hu,lte,Ndo,jdo,mP,Ddo,Gdo,Odo,uu,ite,Vdo,Xdo,fP,zdo,Qdo,Wdo,pu,dte,Hdo,Udo,gP,Jdo,Ydo,Kdo,_u,cte,Zdo,eco,hP,oco,rco,tco,bu,mte,aco,nco,uP,sco,lco,ico,vu,fte,dco,cco,pP,mco,fco,gco,Fu,gte,hco,uco,_P,pco,_co,bco,Tu,hte,vco,Fco,bP,Tco,Mco,Eco,Mu,ute,Cco,wco,vP,Aco,yco,Lco,Eu,pte,xco,kco,FP,Sco,Rco,Bco,Cu,_te,Pco,$co,TP,Ico,qco,Nco,wu,bte,jco,Dco,MP,Gco,Oco,Vco,Au,vte,Xco,zco,EP,Qco,Wco,Hco,yu,Fte,Uco,Jco,CP,Yco,Kco,Zco,Lu,Tte,emo,omo,wP,rmo,tmo,amo,xu,Mte,nmo,smo,AP,lmo,imo,dmo,ku,Ete,cmo,mmo,yP,fmo,gmo,hmo,Su,Cte,umo,pmo,LP,_mo,bmo,vmo,Ru,wte,Fmo,Tmo,xP,Mmo,Emo,Cmo,Bu,Ate,wmo,Amo,kP,ymo,Lmo,xmo,Pu,yte,kmo,Smo,SP,Rmo,Bmo,Pmo,$u,Lte,$mo,Imo,RP,qmo,Nmo,jmo,Iu,xte,Dmo,Gmo,BP,Omo,Vmo,Xmo,qu,kte,zmo,Qmo,PP,Wmo,Hmo,Umo,Nu,Ste,Jmo,Ymo,$P,Kmo,Zmo,efo,ju,Rte,ofo,rfo,IP,tfo,afo,nfo,Du,Bte,sfo,lfo,qP,ifo,dfo,cfo,Gu,Pte,mfo,ffo,NP,gfo,hfo,ufo,Ou,$te,pfo,_fo,jP,bfo,vfo,Ffo,Vu,Ite,Tfo,Mfo,DP,Efo,Cfo,wfo,Hs,qte,Afo,yfo,GP,Lfo,xfo,OP,kfo,Sfo,Rfo,Xu,Nte,Bfo,Pfo,VP,$fo,Ifo,qfo,zu,jte,Nfo,jfo,XP,Dfo,Gfo,Ofo,Qu,Dte,Vfo,Xfo,zP,zfo,Qfo,Wfo,Wu,Gte,Hfo,Ufo,QP,Jfo,Yfo,Kfo,Hu,Ote,Zfo,ego,WP,ogo,rgo,tgo,Uu,Vte,ago,ngo,HP,sgo,lgo,igo,Ju,Xte,dgo,cgo,UP,mgo,fgo,ggo,Yu,zte,hgo,ugo,JP,pgo,_go,bgo,Ku,Qte,vgo,Fgo,YP,Tgo,Mgo,Ego,Zu,Wte,Cgo,wgo,KP,Ago,ygo,Lgo,ep,Hte,xgo,kgo,ZP,Sgo,Rgo,Bgo,op,Ute,Pgo,$go,e$,Igo,qgo,Ngo,rp,Jte,jgo,Dgo,o$,Ggo,Ogo,Vgo,tp,Yte,Xgo,zgo,r$,Qgo,Wgo,Hgo,ap,Kte,Ugo,Jgo,t$,Ygo,Kgo,Zgo,np,Zte,eho,oho,a$,rho,tho,aho,sp,eae,nho,sho,n$,lho,iho,dho,lp,oae,cho,mho,s$,fho,gho,hho,ip,rae,uho,pho,l$,_ho,bho,vho,dp,tae,Fho,Tho,i$,Mho,Eho,Cho,cp,aae,who,Aho,d$,yho,Lho,xho,mp,nae,kho,Sho,c$,Rho,Bho,Pho,fp,sae,$ho,Iho,m$,qho,Nho,jho,gp,lae,Dho,Gho,f$,Oho,Vho,Xho,hp,iae,zho,Qho,g$,Who,Hho,Uho,up,dae,Jho,Yho,h$,Kho,Zho,euo,pp,cae,ouo,ruo,u$,tuo,auo,nuo,_p,mae,suo,luo,p$,iuo,duo,cuo,bp,fae,muo,fuo,_$,guo,huo,uuo,vp,gae,puo,_uo,b$,buo,vuo,Fuo,Fp,hae,Tuo,Muo,v$,Euo,Cuo,wuo,Tp,uae,Auo,yuo,F$,Luo,xuo,kuo,Mp,pae,Suo,Ruo,T$,Buo,Puo,$uo,Ep,_ae,Iuo,quo,M$,Nuo,juo,Duo,Cp,bae,Guo,Ouo,E$,Vuo,Xuo,zuo,wp,vae,Quo,Wuo,C$,Huo,Uuo,Juo,Ap,Fae,Yuo,Kuo,w$,Zuo,epo,opo,yp,Tae,rpo,tpo,A$,apo,npo,spo,Lp,Mae,lpo,ipo,y$,dpo,cpo,mpo,xp,Eae,fpo,gpo,L$,hpo,upo,ppo,kp,Cae,_po,bpo,x$,vpo,Fpo,Tpo,Sp,wae,Mpo,Epo,k$,Cpo,wpo,Apo,Rp,Aae,ypo,Lpo,S$,xpo,kpo,Spo,Bp,yae,Rpo,Bpo,R$,Ppo,$po,Ipo,Pp,Lae,qpo,Npo,B$,jpo,Dpo,Gpo,$p,xae,Opo,Vpo,P$,Xpo,zpo,Qpo,Ip,kae,Wpo,Hpo,$$,Upo,Jpo,Ypo,qp,Sae,Kpo,Zpo,I$,e_o,o_o,r_o,Np,Rae,t_o,a_o,q$,n_o,s_o,l_o,jp,Bae,i_o,d_o,N$,c_o,m_o,f_o,Dp,Pae,g_o,h_o,j$,u_o,p_o,__o,Gp,$ae,b_o,v_o,D$,F_o,T_o,M_o,Op,Iae,E_o,C_o,G$,w_o,A_o,y_o,Vp,qae,L_o,x_o,O$,k_o,S_o,R_o,Xp,Nae,B_o,P_o,V$,$_o,I_o,q_o,zp,jae,N_o,j_o,X$,D_o,G_o,O_o,Qp,Dae,V_o,X_o,z$,z_o,Q_o,W_o,Wp,Gae,H_o,U_o,Q$,J_o,Y_o,K_o,Hp,Oae,Z_o,ebo,W$,obo,rbo,tbo,Up,Vae,abo,nbo,H$,sbo,lbo,ibo,Jp,Xae,dbo,cbo,U$,mbo,fbo,gbo,Yp,zae,hbo,ubo,J$,pbo,_bo,bbo,Kp,Qae,vbo,Fbo,Y$,Tbo,Mbo,Ebo,Zp,Cbo,Wae,wbo,Abo,Hae,ybo,Lbo,Uae,xbo,kbo,Sw,hPe,id,e_,Jae,Rw,Sbo,Yae,Rbo,uPe,Yo,Bw,Bbo,dd,Pbo,K$,$bo,Ibo,Z$,qbo,Nbo,jbo,Pw,Dbo,Kae,Gbo,Obo,Vbo,zr,$w,Xbo,Zae,zbo,Qbo,cd,Wbo,ene,Hbo,Ubo,eI,Jbo,Ybo,Kbo,one,Zbo,e2o,Iw,o2o,je,qw,r2o,rne,t2o,a2o,za,n2o,tne,s2o,l2o,ane,i2o,d2o,nne,c2o,m2o,f2o,S,o_,sne,g2o,h2o,oI,u2o,p2o,_2o,r_,lne,b2o,v2o,rI,F2o,T2o,M2o,t_,ine,E2o,C2o,tI,w2o,A2o,y2o,a_,dne,L2o,x2o,aI,k2o,S2o,R2o,n_,cne,B2o,P2o,nI,$2o,I2o,q2o,s_,mne,N2o,j2o,sI,D2o,G2o,O2o,l_,fne,V2o,X2o,lI,z2o,Q2o,W2o,i_,gne,H2o,U2o,iI,J2o,Y2o,K2o,d_,hne,Z2o,evo,dI,ovo,rvo,tvo,c_,une,avo,nvo,cI,svo,lvo,ivo,m_,pne,dvo,cvo,mI,mvo,fvo,gvo,f_,_ne,hvo,uvo,fI,pvo,_vo,bvo,g_,bne,vvo,Fvo,gI,Tvo,Mvo,Evo,h_,vne,Cvo,wvo,hI,Avo,yvo,Lvo,u_,Fne,xvo,kvo,uI,Svo,Rvo,Bvo,p_,Tne,Pvo,$vo,pI,Ivo,qvo,Nvo,__,Mne,jvo,Dvo,_I,Gvo,Ovo,Vvo,b_,Ene,Xvo,zvo,bI,Qvo,Wvo,Hvo,v_,Cne,Uvo,Jvo,vI,Yvo,Kvo,Zvo,F_,wne,eFo,oFo,FI,rFo,tFo,aFo,T_,Ane,nFo,sFo,TI,lFo,iFo,dFo,M_,yne,cFo,mFo,MI,fFo,gFo,hFo,E_,Lne,uFo,pFo,EI,_Fo,bFo,vFo,C_,xne,FFo,TFo,CI,MFo,EFo,CFo,w_,kne,wFo,AFo,wI,yFo,LFo,xFo,A_,Sne,kFo,SFo,AI,RFo,BFo,PFo,y_,Rne,$Fo,IFo,yI,qFo,NFo,jFo,L_,Bne,DFo,GFo,LI,OFo,VFo,XFo,x_,Pne,zFo,QFo,xI,WFo,HFo,UFo,k_,$ne,JFo,YFo,kI,KFo,ZFo,e1o,S_,Ine,o1o,r1o,SI,t1o,a1o,n1o,R_,qne,s1o,l1o,RI,i1o,d1o,c1o,B_,Nne,m1o,f1o,BI,g1o,h1o,u1o,P_,jne,p1o,_1o,PI,b1o,v1o,F1o,$_,Dne,T1o,M1o,$I,E1o,C1o,w1o,I_,Gne,A1o,y1o,II,L1o,x1o,k1o,q_,One,S1o,R1o,qI,B1o,P1o,$1o,N_,Vne,I1o,q1o,NI,N1o,j1o,D1o,j_,Xne,G1o,O1o,jI,V1o,X1o,z1o,D_,Q1o,zne,W1o,H1o,Qne,U1o,J1o,Wne,Y1o,K1o,Nw,pPe,md,G_,Hne,jw,Z1o,Une,eTo,_Pe,Ko,Dw,oTo,fd,rTo,DI,tTo,aTo,GI,nTo,sTo,lTo,Gw,iTo,Jne,dTo,cTo,mTo,Qr,Ow,fTo,Yne,gTo,hTo,gd,uTo,Kne,pTo,_To,OI,bTo,vTo,FTo,Zne,TTo,MTo,Vw,ETo,De,Xw,CTo,ese,wTo,ATo,Qa,yTo,ose,LTo,xTo,rse,kTo,STo,tse,RTo,BTo,PTo,$,O_,ase,$To,ITo,VI,qTo,NTo,jTo,V_,nse,DTo,GTo,XI,OTo,VTo,XTo,X_,sse,zTo,QTo,zI,WTo,HTo,UTo,z_,lse,JTo,YTo,QI,KTo,ZTo,eMo,Q_,ise,oMo,rMo,WI,tMo,aMo,nMo,W_,dse,sMo,lMo,HI,iMo,dMo,cMo,H_,cse,mMo,fMo,UI,gMo,hMo,uMo,U_,mse,pMo,_Mo,JI,bMo,vMo,FMo,J_,fse,TMo,MMo,YI,EMo,CMo,wMo,Y_,gse,AMo,yMo,KI,LMo,xMo,kMo,K_,hse,SMo,RMo,ZI,BMo,PMo,$Mo,Z_,use,IMo,qMo,eq,NMo,jMo,DMo,eb,pse,GMo,OMo,oq,VMo,XMo,zMo,ob,_se,QMo,WMo,rq,HMo,UMo,JMo,rb,bse,YMo,KMo,tq,ZMo,e4o,o4o,tb,vse,r4o,t4o,aq,a4o,n4o,s4o,ab,Fse,l4o,i4o,nq,d4o,c4o,m4o,nb,Tse,f4o,g4o,sq,h4o,u4o,p4o,sb,Mse,_4o,b4o,lq,v4o,F4o,T4o,lb,Ese,M4o,E4o,iq,C4o,w4o,A4o,ib,Cse,y4o,L4o,dq,x4o,k4o,S4o,db,wse,R4o,B4o,cq,P4o,$4o,I4o,cb,Ase,q4o,N4o,mq,j4o,D4o,G4o,mb,yse,O4o,V4o,fq,X4o,z4o,Q4o,fb,Lse,W4o,H4o,gq,U4o,J4o,Y4o,gb,xse,K4o,Z4o,hq,eEo,oEo,rEo,hb,kse,tEo,aEo,uq,nEo,sEo,lEo,ub,Sse,iEo,dEo,pq,cEo,mEo,fEo,pb,Rse,gEo,hEo,_q,uEo,pEo,_Eo,_b,Bse,bEo,vEo,bq,FEo,TEo,MEo,bb,Pse,EEo,CEo,vq,wEo,AEo,yEo,vb,$se,LEo,xEo,Fq,kEo,SEo,REo,Fb,Ise,BEo,PEo,Tq,$Eo,IEo,qEo,Tb,qse,NEo,jEo,Mq,DEo,GEo,OEo,Mb,Nse,VEo,XEo,Eq,zEo,QEo,WEo,Eb,HEo,jse,UEo,JEo,Dse,YEo,KEo,Gse,ZEo,e5o,zw,bPe,hd,Cb,Ose,Qw,o5o,Vse,r5o,vPe,Zo,Ww,t5o,ud,a5o,Cq,n5o,s5o,wq,l5o,i5o,d5o,Hw,c5o,Xse,m5o,f5o,g5o,Wr,Uw,h5o,zse,u5o,p5o,pd,_5o,Qse,b5o,v5o,Aq,F5o,T5o,M5o,Wse,E5o,C5o,Jw,w5o,Ge,Yw,A5o,Hse,y5o,L5o,Wa,x5o,Use,k5o,S5o,Jse,R5o,B5o,Yse,P5o,$5o,I5o,I,wb,Kse,q5o,N5o,yq,j5o,D5o,G5o,Ab,Zse,O5o,V5o,Lq,X5o,z5o,Q5o,yb,ele,W5o,H5o,xq,U5o,J5o,Y5o,Lb,ole,K5o,Z5o,kq,e3o,o3o,r3o,xb,rle,t3o,a3o,Sq,n3o,s3o,l3o,kb,tle,i3o,d3o,Rq,c3o,m3o,f3o,Sb,ale,g3o,h3o,Bq,u3o,p3o,_3o,Rb,nle,b3o,v3o,Pq,F3o,T3o,M3o,Bb,sle,E3o,C3o,$q,w3o,A3o,y3o,Pb,lle,L3o,x3o,Iq,k3o,S3o,R3o,$b,ile,B3o,P3o,qq,$3o,I3o,q3o,Ib,dle,N3o,j3o,Nq,D3o,G3o,O3o,qb,cle,V3o,X3o,jq,z3o,Q3o,W3o,Nb,mle,H3o,U3o,Dq,J3o,Y3o,K3o,jb,fle,Z3o,eCo,Gq,oCo,rCo,tCo,Db,gle,aCo,nCo,Oq,sCo,lCo,iCo,Gb,hle,dCo,cCo,Vq,mCo,fCo,gCo,Ob,ule,hCo,uCo,Xq,pCo,_Co,bCo,Vb,ple,vCo,FCo,zq,TCo,MCo,ECo,Xb,_le,CCo,wCo,Qq,ACo,yCo,LCo,zb,ble,xCo,kCo,Wq,SCo,RCo,BCo,Qb,vle,PCo,$Co,Hq,ICo,qCo,NCo,Wb,Fle,jCo,DCo,Uq,GCo,OCo,VCo,Hb,Tle,XCo,zCo,Jq,QCo,WCo,HCo,Ub,Mle,UCo,JCo,Yq,YCo,KCo,ZCo,Jb,Ele,e6o,o6o,Kq,r6o,t6o,a6o,Yb,Cle,n6o,s6o,Zq,l6o,i6o,d6o,Kb,wle,c6o,m6o,eN,f6o,g6o,h6o,Zb,Ale,u6o,p6o,oN,_6o,b6o,v6o,e2,yle,F6o,T6o,rN,M6o,E6o,C6o,o2,Lle,w6o,A6o,xle,y6o,L6o,x6o,r2,kle,k6o,S6o,tN,R6o,B6o,P6o,t2,Sle,$6o,I6o,aN,q6o,N6o,j6o,a2,Rle,D6o,G6o,nN,O6o,V6o,X6o,n2,Ble,z6o,Q6o,sN,W6o,H6o,U6o,s2,J6o,Ple,Y6o,K6o,$le,Z6o,ewo,Ile,owo,rwo,Kw,FPe,_d,l2,qle,Zw,two,Nle,awo,TPe,er,eA,nwo,bd,swo,lN,lwo,iwo,iN,dwo,cwo,mwo,oA,fwo,jle,gwo,hwo,uwo,Hr,rA,pwo,Dle,_wo,bwo,vd,vwo,Gle,Fwo,Two,dN,Mwo,Ewo,Cwo,Ole,wwo,Awo,tA,ywo,Oe,aA,Lwo,Vle,xwo,kwo,Ha,Swo,Xle,Rwo,Bwo,zle,Pwo,$wo,Qle,Iwo,qwo,Nwo,ne,i2,Wle,jwo,Dwo,cN,Gwo,Owo,Vwo,d2,Hle,Xwo,zwo,mN,Qwo,Wwo,Hwo,c2,Ule,Uwo,Jwo,fN,Ywo,Kwo,Zwo,m2,Jle,eAo,oAo,gN,rAo,tAo,aAo,f2,Yle,nAo,sAo,hN,lAo,iAo,dAo,g2,Kle,cAo,mAo,uN,fAo,gAo,hAo,h2,Zle,uAo,pAo,pN,_Ao,bAo,vAo,u2,eie,FAo,TAo,_N,MAo,EAo,CAo,p2,oie,wAo,AAo,bN,yAo,LAo,xAo,_2,rie,kAo,SAo,vN,RAo,BAo,PAo,b2,tie,$Ao,IAo,FN,qAo,NAo,jAo,v2,aie,DAo,GAo,TN,OAo,VAo,XAo,F2,nie,zAo,QAo,MN,WAo,HAo,UAo,T2,sie,JAo,YAo,EN,KAo,ZAo,e0o,M2,lie,o0o,r0o,CN,t0o,a0o,n0o,E2,iie,s0o,l0o,wN,i0o,d0o,c0o,C2,die,m0o,f0o,AN,g0o,h0o,u0o,w2,p0o,cie,_0o,b0o,mie,v0o,F0o,fie,T0o,M0o,nA,MPe,Fd,A2,gie,sA,E0o,hie,C0o,EPe,or,lA,w0o,Td,A0o,yN,y0o,L0o,LN,x0o,k0o,S0o,iA,R0o,uie,B0o,P0o,$0o,Ur,dA,I0o,pie,q0o,N0o,Md,j0o,_ie,D0o,G0o,xN,O0o,V0o,X0o,bie,z0o,Q0o,cA,W0o,Ve,mA,H0o,vie,U0o,J0o,Ua,Y0o,Fie,K0o,Z0o,Tie,eyo,oyo,Mie,ryo,tyo,ayo,y,y2,Eie,nyo,syo,kN,lyo,iyo,dyo,L2,Cie,cyo,myo,SN,fyo,gyo,hyo,x2,wie,uyo,pyo,RN,_yo,byo,vyo,k2,Aie,Fyo,Tyo,BN,Myo,Eyo,Cyo,S2,yie,wyo,Ayo,PN,yyo,Lyo,xyo,R2,Lie,kyo,Syo,$N,Ryo,Byo,Pyo,B2,xie,$yo,Iyo,IN,qyo,Nyo,jyo,P2,kie,Dyo,Gyo,qN,Oyo,Vyo,Xyo,$2,Sie,zyo,Qyo,NN,Wyo,Hyo,Uyo,I2,Rie,Jyo,Yyo,jN,Kyo,Zyo,e8o,q2,Bie,o8o,r8o,DN,t8o,a8o,n8o,N2,Pie,s8o,l8o,GN,i8o,d8o,c8o,j2,$ie,m8o,f8o,ON,g8o,h8o,u8o,D2,Iie,p8o,_8o,VN,b8o,v8o,F8o,G2,qie,T8o,M8o,XN,E8o,C8o,w8o,O2,Nie,A8o,y8o,zN,L8o,x8o,k8o,V2,jie,S8o,R8o,QN,B8o,P8o,$8o,X2,Die,I8o,q8o,WN,N8o,j8o,D8o,z2,Gie,G8o,O8o,HN,V8o,X8o,z8o,Q2,Oie,Q8o,W8o,UN,H8o,U8o,J8o,W2,Vie,Y8o,K8o,JN,Z8o,eLo,oLo,H2,Xie,rLo,tLo,YN,aLo,nLo,sLo,U2,zie,lLo,iLo,KN,dLo,cLo,mLo,J2,Qie,fLo,gLo,ZN,hLo,uLo,pLo,Y2,Wie,_Lo,bLo,ej,vLo,FLo,TLo,K2,Hie,MLo,ELo,oj,CLo,wLo,ALo,Z2,Uie,yLo,LLo,rj,xLo,kLo,SLo,ev,Jie,RLo,BLo,tj,PLo,$Lo,ILo,ov,Yie,qLo,NLo,aj,jLo,DLo,GLo,rv,Kie,OLo,VLo,nj,XLo,zLo,QLo,tv,Zie,WLo,HLo,sj,ULo,JLo,YLo,av,ede,KLo,ZLo,lj,e7o,o7o,r7o,nv,ode,t7o,a7o,ij,n7o,s7o,l7o,sv,rde,i7o,d7o,dj,c7o,m7o,f7o,lv,tde,g7o,h7o,cj,u7o,p7o,_7o,iv,ade,b7o,v7o,mj,F7o,T7o,M7o,dv,nde,E7o,C7o,fj,w7o,A7o,y7o,cv,sde,L7o,x7o,gj,k7o,S7o,R7o,mv,lde,B7o,P7o,hj,$7o,I7o,q7o,fv,ide,N7o,j7o,uj,D7o,G7o,O7o,gv,dde,V7o,X7o,pj,z7o,Q7o,W7o,hv,cde,H7o,U7o,_j,J7o,Y7o,K7o,uv,mde,Z7o,e9o,bj,o9o,r9o,t9o,pv,fde,a9o,n9o,vj,s9o,l9o,i9o,_v,gde,d9o,c9o,Fj,m9o,f9o,g9o,bv,hde,h9o,u9o,Tj,p9o,_9o,b9o,vv,ude,v9o,F9o,Mj,T9o,M9o,E9o,Fv,C9o,pde,w9o,A9o,_de,y9o,L9o,bde,x9o,k9o,fA,CPe,Ed,Tv,vde,gA,S9o,Fde,R9o,wPe,rr,hA,B9o,Cd,P9o,Ej,$9o,I9o,Cj,q9o,N9o,j9o,uA,D9o,Tde,G9o,O9o,V9o,Jr,pA,X9o,Mde,z9o,Q9o,wd,W9o,Ede,H9o,U9o,wj,J9o,Y9o,K9o,Cde,Z9o,exo,_A,oxo,Xe,bA,rxo,wde,txo,axo,Ja,nxo,Ade,sxo,lxo,yde,ixo,dxo,Lde,cxo,mxo,fxo,G,Mv,xde,gxo,hxo,Aj,uxo,pxo,_xo,Ev,kde,bxo,vxo,yj,Fxo,Txo,Mxo,Cv,Sde,Exo,Cxo,Lj,wxo,Axo,yxo,wv,Rde,Lxo,xxo,xj,kxo,Sxo,Rxo,Av,Bde,Bxo,Pxo,kj,$xo,Ixo,qxo,yv,Pde,Nxo,jxo,Sj,Dxo,Gxo,Oxo,Lv,$de,Vxo,Xxo,Rj,zxo,Qxo,Wxo,xv,Ide,Hxo,Uxo,Bj,Jxo,Yxo,Kxo,kv,qde,Zxo,eko,Pj,oko,rko,tko,Sv,Nde,ako,nko,$j,sko,lko,iko,Rv,jde,dko,cko,Ij,mko,fko,gko,Bv,Dde,hko,uko,qj,pko,_ko,bko,Pv,Gde,vko,Fko,Nj,Tko,Mko,Eko,$v,Ode,Cko,wko,jj,Ako,yko,Lko,Iv,Vde,xko,kko,Dj,Sko,Rko,Bko,qv,Xde,Pko,$ko,Gj,Iko,qko,Nko,Nv,zde,jko,Dko,Oj,Gko,Oko,Vko,jv,Qde,Xko,zko,Vj,Qko,Wko,Hko,Dv,Wde,Uko,Jko,Xj,Yko,Kko,Zko,Gv,Hde,eSo,oSo,zj,rSo,tSo,aSo,Ov,Ude,nSo,sSo,Qj,lSo,iSo,dSo,Vv,Jde,cSo,mSo,Wj,fSo,gSo,hSo,Xv,Yde,uSo,pSo,Hj,_So,bSo,vSo,zv,Kde,FSo,TSo,Uj,MSo,ESo,CSo,Qv,Zde,wSo,ASo,Jj,ySo,LSo,xSo,Wv,ece,kSo,SSo,Yj,RSo,BSo,PSo,Hv,oce,$So,ISo,Kj,qSo,NSo,jSo,Uv,rce,DSo,GSo,Zj,OSo,VSo,XSo,Jv,zSo,tce,QSo,WSo,ace,HSo,USo,nce,JSo,YSo,vA,APe,Ad,Yv,sce,FA,KSo,lce,ZSo,yPe,tr,TA,eRo,yd,oRo,eD,rRo,tRo,oD,aRo,nRo,sRo,MA,lRo,ice,iRo,dRo,cRo,Yr,EA,mRo,dce,fRo,gRo,Ld,hRo,cce,uRo,pRo,rD,_Ro,bRo,vRo,mce,FRo,TRo,CA,MRo,ze,wA,ERo,fce,CRo,wRo,Ya,ARo,gce,yRo,LRo,hce,xRo,kRo,uce,SRo,RRo,BRo,da,Kv,pce,PRo,$Ro,tD,IRo,qRo,NRo,Zv,_ce,jRo,DRo,aD,GRo,ORo,VRo,eF,bce,XRo,zRo,nD,QRo,WRo,HRo,oF,vce,URo,JRo,sD,YRo,KRo,ZRo,rF,Fce,eBo,oBo,lD,rBo,tBo,aBo,tF,nBo,Tce,sBo,lBo,Mce,iBo,dBo,Ece,cBo,mBo,AA,LPe,xd,aF,Cce,yA,fBo,wce,gBo,xPe,ar,LA,hBo,kd,uBo,iD,pBo,_Bo,dD,bBo,vBo,FBo,xA,TBo,Ace,MBo,EBo,CBo,Kr,kA,wBo,yce,ABo,yBo,Sd,LBo,Lce,xBo,kBo,cD,SBo,RBo,BBo,xce,PBo,$Bo,SA,IBo,Qe,RA,qBo,kce,NBo,jBo,Ka,DBo,Sce,GBo,OBo,Rce,VBo,XBo,Bce,zBo,QBo,WBo,j,nF,Pce,HBo,UBo,mD,JBo,YBo,KBo,sF,$ce,ZBo,ePo,fD,oPo,rPo,tPo,lF,Ice,aPo,nPo,gD,sPo,lPo,iPo,iF,qce,dPo,cPo,hD,mPo,fPo,gPo,dF,Nce,hPo,uPo,uD,pPo,_Po,bPo,cF,jce,vPo,FPo,pD,TPo,MPo,EPo,mF,Dce,CPo,wPo,_D,APo,yPo,LPo,fF,Gce,xPo,kPo,bD,SPo,RPo,BPo,gF,Oce,PPo,$Po,vD,IPo,qPo,NPo,hF,Vce,jPo,DPo,FD,GPo,OPo,VPo,uF,Xce,XPo,zPo,TD,QPo,WPo,HPo,pF,zce,UPo,JPo,MD,YPo,KPo,ZPo,_F,Qce,e$o,o$o,ED,r$o,t$o,a$o,bF,Wce,n$o,s$o,CD,l$o,i$o,d$o,vF,Hce,c$o,m$o,wD,f$o,g$o,h$o,FF,Uce,u$o,p$o,AD,_$o,b$o,v$o,TF,Jce,F$o,T$o,yD,M$o,E$o,C$o,MF,Yce,w$o,A$o,LD,y$o,L$o,x$o,EF,Kce,k$o,S$o,xD,R$o,B$o,P$o,CF,Zce,$$o,I$o,kD,q$o,N$o,j$o,wF,eme,D$o,G$o,SD,O$o,V$o,X$o,AF,ome,z$o,Q$o,RD,W$o,H$o,U$o,yF,rme,J$o,Y$o,BD,K$o,Z$o,eIo,LF,tme,oIo,rIo,PD,tIo,aIo,nIo,xF,ame,sIo,lIo,$D,iIo,dIo,cIo,kF,nme,mIo,fIo,ID,gIo,hIo,uIo,SF,sme,pIo,_Io,qD,bIo,vIo,FIo,RF,lme,TIo,MIo,ND,EIo,CIo,wIo,BF,ime,AIo,yIo,jD,LIo,xIo,kIo,PF,dme,SIo,RIo,DD,BIo,PIo,$Io,$F,cme,IIo,qIo,GD,NIo,jIo,DIo,IF,mme,GIo,OIo,OD,VIo,XIo,zIo,qF,fme,QIo,WIo,VD,HIo,UIo,JIo,NF,YIo,gme,KIo,ZIo,hme,eqo,oqo,ume,rqo,tqo,BA,kPe,Rd,jF,pme,PA,aqo,_me,nqo,SPe,nr,$A,sqo,Bd,lqo,XD,iqo,dqo,zD,cqo,mqo,fqo,IA,gqo,bme,hqo,uqo,pqo,Zr,qA,_qo,vme,bqo,vqo,Pd,Fqo,Fme,Tqo,Mqo,QD,Eqo,Cqo,wqo,Tme,Aqo,yqo,NA,Lqo,We,jA,xqo,Mme,kqo,Sqo,Za,Rqo,Eme,Bqo,Pqo,Cme,$qo,Iqo,wme,qqo,Nqo,jqo,R,DF,Ame,Dqo,Gqo,WD,Oqo,Vqo,Xqo,GF,yme,zqo,Qqo,HD,Wqo,Hqo,Uqo,OF,Lme,Jqo,Yqo,UD,Kqo,Zqo,eNo,VF,xme,oNo,rNo,JD,tNo,aNo,nNo,XF,kme,sNo,lNo,YD,iNo,dNo,cNo,zF,Sme,mNo,fNo,KD,gNo,hNo,uNo,QF,Rme,pNo,_No,ZD,bNo,vNo,FNo,WF,Bme,TNo,MNo,eG,ENo,CNo,wNo,HF,Pme,ANo,yNo,oG,LNo,xNo,kNo,UF,$me,SNo,RNo,rG,BNo,PNo,$No,JF,Ime,INo,qNo,tG,NNo,jNo,DNo,YF,qme,GNo,ONo,aG,VNo,XNo,zNo,KF,Nme,QNo,WNo,nG,HNo,UNo,JNo,ZF,jme,YNo,KNo,sG,ZNo,ejo,ojo,e1,Dme,rjo,tjo,lG,ajo,njo,sjo,o1,Gme,ljo,ijo,iG,djo,cjo,mjo,r1,Ome,fjo,gjo,dG,hjo,ujo,pjo,t1,Vme,_jo,bjo,cG,vjo,Fjo,Tjo,a1,Xme,Mjo,Ejo,mG,Cjo,wjo,Ajo,n1,zme,yjo,Ljo,fG,xjo,kjo,Sjo,s1,Qme,Rjo,Bjo,gG,Pjo,$jo,Ijo,l1,Wme,qjo,Njo,hG,jjo,Djo,Gjo,i1,Hme,Ojo,Vjo,uG,Xjo,zjo,Qjo,d1,Ume,Wjo,Hjo,pG,Ujo,Jjo,Yjo,c1,Jme,Kjo,Zjo,_G,eDo,oDo,rDo,m1,Yme,tDo,aDo,bG,nDo,sDo,lDo,f1,Kme,iDo,dDo,vG,cDo,mDo,fDo,g1,Zme,gDo,hDo,FG,uDo,pDo,_Do,h1,efe,bDo,vDo,TG,FDo,TDo,MDo,u1,ofe,EDo,CDo,MG,wDo,ADo,yDo,p1,rfe,LDo,xDo,EG,kDo,SDo,RDo,_1,tfe,BDo,PDo,CG,$Do,IDo,qDo,b1,afe,NDo,jDo,wG,DDo,GDo,ODo,v1,nfe,VDo,XDo,AG,zDo,QDo,WDo,F1,sfe,HDo,UDo,yG,JDo,YDo,KDo,T1,lfe,ZDo,eGo,LG,oGo,rGo,tGo,M1,ife,aGo,nGo,xG,sGo,lGo,iGo,E1,dfe,dGo,cGo,kG,mGo,fGo,gGo,C1,cfe,hGo,uGo,SG,pGo,_Go,bGo,w1,vGo,mfe,FGo,TGo,ffe,MGo,EGo,gfe,CGo,wGo,DA,RPe,$d,A1,hfe,GA,AGo,ufe,yGo,BPe,sr,OA,LGo,Id,xGo,RG,kGo,SGo,BG,RGo,BGo,PGo,VA,$Go,pfe,IGo,qGo,NGo,et,XA,jGo,_fe,DGo,GGo,qd,OGo,bfe,VGo,XGo,PG,zGo,QGo,WGo,vfe,HGo,UGo,zA,JGo,He,QA,YGo,Ffe,KGo,ZGo,en,eOo,Tfe,oOo,rOo,Mfe,tOo,aOo,Efe,nOo,sOo,lOo,Cfe,y1,wfe,iOo,dOo,$G,cOo,mOo,fOo,L1,gOo,Afe,hOo,uOo,yfe,pOo,_Oo,Lfe,bOo,vOo,WA,PPe,Nd,x1,xfe,HA,FOo,kfe,TOo,$Pe,lr,UA,MOo,jd,EOo,IG,COo,wOo,qG,AOo,yOo,LOo,JA,xOo,Sfe,kOo,SOo,ROo,ot,YA,BOo,Rfe,POo,$Oo,Dd,IOo,Bfe,qOo,NOo,NG,jOo,DOo,GOo,Pfe,OOo,VOo,KA,XOo,Ue,ZA,zOo,$fe,QOo,WOo,on,HOo,Ife,UOo,JOo,qfe,YOo,KOo,Nfe,ZOo,eVo,oVo,ce,k1,jfe,rVo,tVo,jG,aVo,nVo,sVo,S1,Dfe,lVo,iVo,DG,dVo,cVo,mVo,R1,Gfe,fVo,gVo,GG,hVo,uVo,pVo,Us,Ofe,_Vo,bVo,OG,vVo,FVo,VG,TVo,MVo,EVo,B1,Vfe,CVo,wVo,XG,AVo,yVo,LVo,fa,Xfe,xVo,kVo,zG,SVo,RVo,QG,BVo,PVo,WG,$Vo,IVo,qVo,P1,zfe,NVo,jVo,HG,DVo,GVo,OVo,$1,Qfe,VVo,XVo,UG,zVo,QVo,WVo,I1,Wfe,HVo,UVo,JG,JVo,YVo,KVo,q1,Hfe,ZVo,eXo,YG,oXo,rXo,tXo,N1,Ufe,aXo,nXo,KG,sXo,lXo,iXo,j1,Jfe,dXo,cXo,ZG,mXo,fXo,gXo,D1,Yfe,hXo,uXo,eO,pXo,_Xo,bXo,G1,vXo,Kfe,FXo,TXo,Zfe,MXo,EXo,ege,CXo,wXo,e0,IPe,Gd,O1,oge,o0,AXo,rge,yXo,qPe,ir,r0,LXo,Od,xXo,oO,kXo,SXo,rO,RXo,BXo,PXo,t0,$Xo,tge,IXo,qXo,NXo,rt,a0,jXo,age,DXo,GXo,Vd,OXo,nge,VXo,XXo,tO,zXo,QXo,WXo,sge,HXo,UXo,n0,JXo,Je,s0,YXo,lge,KXo,ZXo,rn,ezo,ige,ozo,rzo,dge,tzo,azo,cge,nzo,szo,lzo,mge,V1,fge,izo,dzo,aO,czo,mzo,fzo,X1,gzo,gge,hzo,uzo,hge,pzo,_zo,uge,bzo,vzo,l0,NPe,Xd,z1,pge,i0,Fzo,_ge,Tzo,jPe,dr,d0,Mzo,zd,Ezo,nO,Czo,wzo,sO,Azo,yzo,Lzo,c0,xzo,bge,kzo,Szo,Rzo,tt,m0,Bzo,vge,Pzo,$zo,Qd,Izo,Fge,qzo,Nzo,lO,jzo,Dzo,Gzo,Tge,Ozo,Vzo,f0,Xzo,Ye,g0,zzo,Mge,Qzo,Wzo,tn,Hzo,Ege,Uzo,Jzo,Cge,Yzo,Kzo,wge,Zzo,eQo,oQo,Re,Q1,Age,rQo,tQo,iO,aQo,nQo,sQo,W1,yge,lQo,iQo,dO,dQo,cQo,mQo,H1,Lge,fQo,gQo,cO,hQo,uQo,pQo,U1,xge,_Qo,bQo,mO,vQo,FQo,TQo,J1,kge,MQo,EQo,fO,CQo,wQo,AQo,Y1,Sge,yQo,LQo,gO,xQo,kQo,SQo,K1,Rge,RQo,BQo,hO,PQo,$Qo,IQo,Z1,Bge,qQo,NQo,uO,jQo,DQo,GQo,eT,OQo,Pge,VQo,XQo,$ge,zQo,QQo,Ige,WQo,HQo,h0,DPe,Wd,oT,qge,u0,UQo,Nge,JQo,GPe,cr,p0,YQo,Hd,KQo,pO,ZQo,eWo,_O,oWo,rWo,tWo,_0,aWo,jge,nWo,sWo,lWo,at,b0,iWo,Dge,dWo,cWo,Ud,mWo,Gge,fWo,gWo,bO,hWo,uWo,pWo,Oge,_Wo,bWo,v0,vWo,Ke,F0,FWo,Vge,TWo,MWo,an,EWo,Xge,CWo,wWo,zge,AWo,yWo,Qge,LWo,xWo,kWo,nn,rT,Wge,SWo,RWo,vO,BWo,PWo,$Wo,tT,Hge,IWo,qWo,FO,NWo,jWo,DWo,aT,Uge,GWo,OWo,TO,VWo,XWo,zWo,nT,Jge,QWo,WWo,MO,HWo,UWo,JWo,sT,YWo,Yge,KWo,ZWo,Kge,eHo,oHo,Zge,rHo,tHo,T0,OPe,Jd,lT,ehe,M0,aHo,ohe,nHo,VPe,mr,E0,sHo,Yd,lHo,EO,iHo,dHo,CO,cHo,mHo,fHo,C0,gHo,rhe,hHo,uHo,pHo,nt,w0,_Ho,the,bHo,vHo,Kd,FHo,ahe,THo,MHo,wO,EHo,CHo,wHo,nhe,AHo,yHo,A0,LHo,Ze,y0,xHo,she,kHo,SHo,sn,RHo,lhe,BHo,PHo,ihe,$Ho,IHo,dhe,qHo,NHo,jHo,Be,iT,che,DHo,GHo,AO,OHo,VHo,XHo,dT,mhe,zHo,QHo,yO,WHo,HHo,UHo,cT,fhe,JHo,YHo,LO,KHo,ZHo,eUo,mT,ghe,oUo,rUo,xO,tUo,aUo,nUo,fT,hhe,sUo,lUo,kO,iUo,dUo,cUo,gT,uhe,mUo,fUo,SO,gUo,hUo,uUo,hT,phe,pUo,_Uo,RO,bUo,vUo,FUo,uT,_he,TUo,MUo,BO,EUo,CUo,wUo,pT,AUo,bhe,yUo,LUo,vhe,xUo,kUo,Fhe,SUo,RUo,L0,XPe,Zd,_T,The,x0,BUo,Mhe,PUo,zPe,fr,k0,$Uo,ec,IUo,PO,qUo,NUo,$O,jUo,DUo,GUo,S0,OUo,Ehe,VUo,XUo,zUo,st,R0,QUo,Che,WUo,HUo,oc,UUo,whe,JUo,YUo,IO,KUo,ZUo,eJo,Ahe,oJo,rJo,B0,tJo,eo,P0,aJo,yhe,nJo,sJo,ln,lJo,Lhe,iJo,dJo,xhe,cJo,mJo,khe,fJo,gJo,hJo,$0,bT,She,uJo,pJo,qO,_Jo,bJo,vJo,vT,Rhe,FJo,TJo,NO,MJo,EJo,CJo,FT,wJo,Bhe,AJo,yJo,Phe,LJo,xJo,$he,kJo,SJo,I0,QPe,rc,TT,Ihe,q0,RJo,qhe,BJo,WPe,gr,N0,PJo,tc,$Jo,jO,IJo,qJo,DO,NJo,jJo,DJo,j0,GJo,Nhe,OJo,VJo,XJo,lt,D0,zJo,jhe,QJo,WJo,ac,HJo,Dhe,UJo,JJo,GO,YJo,KJo,ZJo,Ghe,eYo,oYo,G0,rYo,oo,O0,tYo,Ohe,aYo,nYo,dn,sYo,Vhe,lYo,iYo,Xhe,dYo,cYo,zhe,mYo,fYo,gYo,cn,MT,Qhe,hYo,uYo,OO,pYo,_Yo,bYo,ET,Whe,vYo,FYo,VO,TYo,MYo,EYo,CT,Hhe,CYo,wYo,XO,AYo,yYo,LYo,wT,Uhe,xYo,kYo,zO,SYo,RYo,BYo,AT,PYo,Jhe,$Yo,IYo,Yhe,qYo,NYo,Khe,jYo,DYo,V0,HPe,nc,yT,Zhe,X0,GYo,eue,OYo,UPe,hr,z0,VYo,sc,XYo,QO,zYo,QYo,WO,WYo,HYo,UYo,Q0,JYo,oue,YYo,KYo,ZYo,it,W0,eKo,rue,oKo,rKo,lc,tKo,tue,aKo,nKo,HO,sKo,lKo,iKo,aue,dKo,cKo,H0,mKo,ro,U0,fKo,nue,gKo,hKo,mn,uKo,sue,pKo,_Ko,lue,bKo,vKo,iue,FKo,TKo,MKo,ic,LT,due,EKo,CKo,UO,wKo,AKo,yKo,xT,cue,LKo,xKo,JO,kKo,SKo,RKo,kT,mue,BKo,PKo,YO,$Ko,IKo,qKo,ST,NKo,fue,jKo,DKo,gue,GKo,OKo,hue,VKo,XKo,J0,JPe,dc,RT,uue,Y0,zKo,pue,QKo,YPe,ur,K0,WKo,cc,HKo,KO,UKo,JKo,ZO,YKo,KKo,ZKo,Z0,eZo,_ue,oZo,rZo,tZo,dt,ey,aZo,bue,nZo,sZo,mc,lZo,vue,iZo,dZo,eV,cZo,mZo,fZo,Fue,gZo,hZo,oy,uZo,to,ry,pZo,Tue,_Zo,bZo,fn,vZo,Mue,FZo,TZo,Eue,MZo,EZo,Cue,CZo,wZo,AZo,wue,BT,Aue,yZo,LZo,oV,xZo,kZo,SZo,PT,RZo,yue,BZo,PZo,Lue,$Zo,IZo,xue,qZo,NZo,ty,KPe,fc,$T,kue,ay,jZo,Sue,DZo,ZPe,pr,ny,GZo,gc,OZo,rV,VZo,XZo,tV,zZo,QZo,WZo,sy,HZo,Rue,UZo,JZo,YZo,ct,ly,KZo,Bue,ZZo,eer,hc,oer,Pue,rer,ter,aV,aer,ner,ser,$ue,ler,ier,iy,der,ao,dy,cer,Iue,mer,fer,gn,ger,que,her,uer,Nue,per,_er,jue,ber,ver,Fer,Due,IT,Gue,Ter,Mer,nV,Eer,Cer,wer,qT,Aer,Oue,yer,Ler,Vue,xer,ker,Xue,Ser,Rer,cy,e$e,uc,NT,zue,my,Ber,Que,Per,o$e,_r,fy,$er,pc,Ier,sV,qer,Ner,lV,jer,Der,Ger,gy,Oer,Wue,Ver,Xer,zer,mt,hy,Qer,Hue,Wer,Her,_c,Uer,Uue,Jer,Yer,iV,Ker,Zer,eor,Jue,oor,ror,uy,tor,no,py,aor,Yue,nor,sor,hn,lor,Kue,ior,dor,Zue,cor,mor,epe,gor,hor,uor,un,jT,ope,por,_or,dV,bor,vor,For,DT,rpe,Tor,Mor,cV,Eor,Cor,wor,GT,tpe,Aor,yor,mV,Lor,xor,kor,OT,ape,Sor,Ror,fV,Bor,Por,$or,VT,Ior,npe,qor,Nor,spe,jor,Dor,lpe,Gor,Oor,_y,r$e,bc,XT,ipe,by,Vor,dpe,Xor,t$e,br,vy,zor,vc,Qor,gV,Wor,Hor,hV,Uor,Jor,Yor,Fy,Kor,cpe,Zor,err,orr,ft,Ty,rrr,mpe,trr,arr,Fc,nrr,fpe,srr,lrr,uV,irr,drr,crr,gpe,mrr,frr,My,grr,so,Ey,hrr,hpe,urr,prr,pn,_rr,upe,brr,vrr,ppe,Frr,Trr,_pe,Mrr,Err,Crr,bpe,zT,vpe,wrr,Arr,pV,yrr,Lrr,xrr,QT,krr,Fpe,Srr,Rrr,Tpe,Brr,Prr,Mpe,$rr,Irr,Cy,a$e,Tc,WT,Epe,wy,qrr,Cpe,Nrr,n$e,vr,Ay,jrr,Mc,Drr,_V,Grr,Orr,bV,Vrr,Xrr,zrr,yy,Qrr,wpe,Wrr,Hrr,Urr,gt,Ly,Jrr,Ape,Yrr,Krr,Ec,Zrr,ype,etr,otr,vV,rtr,ttr,atr,Lpe,ntr,str,xy,ltr,uo,ky,itr,xpe,dtr,ctr,_n,mtr,kpe,ftr,gtr,Spe,htr,utr,Rpe,ptr,_tr,btr,x,HT,Bpe,vtr,Ftr,FV,Ttr,Mtr,Etr,UT,Ppe,Ctr,wtr,TV,Atr,ytr,Ltr,JT,$pe,xtr,ktr,MV,Str,Rtr,Btr,YT,Ipe,Ptr,$tr,EV,Itr,qtr,Ntr,KT,qpe,jtr,Dtr,CV,Gtr,Otr,Vtr,ZT,Npe,Xtr,ztr,wV,Qtr,Wtr,Htr,eM,jpe,Utr,Jtr,AV,Ytr,Ktr,Ztr,oM,Dpe,ear,oar,yV,rar,tar,aar,rM,Gpe,nar,sar,LV,lar,iar,dar,tM,Ope,car,mar,xV,far,gar,har,aM,Vpe,uar,par,kV,_ar,bar,Far,nM,Xpe,Tar,Mar,SV,Ear,Car,war,sM,zpe,Aar,yar,RV,Lar,xar,kar,lM,Qpe,Sar,Rar,BV,Bar,Par,$ar,iM,Wpe,Iar,qar,PV,Nar,jar,Dar,dM,Hpe,Gar,Oar,$V,Var,Xar,zar,Js,Upe,Qar,War,IV,Har,Uar,qV,Jar,Yar,Kar,cM,Jpe,Zar,enr,NV,onr,rnr,tnr,mM,Ype,anr,nnr,jV,snr,lnr,inr,fM,Kpe,dnr,cnr,DV,mnr,fnr,gnr,gM,Zpe,hnr,unr,GV,pnr,_nr,bnr,hM,e_e,vnr,Fnr,OV,Tnr,Mnr,Enr,uM,o_e,Cnr,wnr,VV,Anr,ynr,Lnr,pM,r_e,xnr,knr,XV,Snr,Rnr,Bnr,_M,t_e,Pnr,$nr,zV,Inr,qnr,Nnr,bM,a_e,jnr,Dnr,QV,Gnr,Onr,Vnr,vM,n_e,Xnr,znr,WV,Qnr,Wnr,Hnr,FM,s_e,Unr,Jnr,HV,Ynr,Knr,Znr,TM,l_e,esr,osr,UV,rsr,tsr,asr,MM,i_e,nsr,ssr,JV,lsr,isr,dsr,EM,d_e,csr,msr,YV,fsr,gsr,hsr,CM,c_e,usr,psr,KV,_sr,bsr,vsr,wM,m_e,Fsr,Tsr,ZV,Msr,Esr,Csr,AM,f_e,wsr,Asr,eX,ysr,Lsr,xsr,yM,g_e,ksr,Ssr,oX,Rsr,Bsr,Psr,LM,h_e,$sr,Isr,rX,qsr,Nsr,jsr,xM,u_e,Dsr,Gsr,tX,Osr,Vsr,Xsr,kM,p_e,zsr,Qsr,aX,Wsr,Hsr,Usr,SM,__e,Jsr,Ysr,nX,Ksr,Zsr,elr,RM,b_e,olr,rlr,sX,tlr,alr,nlr,BM,v_e,slr,llr,lX,ilr,dlr,clr,PM,F_e,mlr,flr,iX,glr,hlr,ulr,$M,T_e,plr,_lr,dX,blr,vlr,Flr,IM,M_e,Tlr,Mlr,cX,Elr,Clr,wlr,E_e,Alr,ylr,Sy,s$e,Cc,qM,C_e,Ry,Llr,w_e,xlr,l$e,Fr,By,klr,wc,Slr,mX,Rlr,Blr,fX,Plr,$lr,Ilr,Py,qlr,A_e,Nlr,jlr,Dlr,ht,$y,Glr,y_e,Olr,Vlr,Ac,Xlr,L_e,zlr,Qlr,gX,Wlr,Hlr,Ulr,x_e,Jlr,Ylr,Iy,Klr,po,qy,Zlr,k_e,eir,oir,bn,rir,S_e,tir,air,R_e,nir,sir,B_e,lir,iir,dir,U,NM,P_e,cir,mir,hX,fir,gir,hir,jM,$_e,uir,pir,uX,_ir,bir,vir,DM,I_e,Fir,Tir,pX,Mir,Eir,Cir,GM,q_e,wir,Air,_X,yir,Lir,xir,OM,N_e,kir,Sir,bX,Rir,Bir,Pir,VM,j_e,$ir,Iir,vX,qir,Nir,jir,XM,D_e,Dir,Gir,FX,Oir,Vir,Xir,zM,G_e,zir,Qir,TX,Wir,Hir,Uir,QM,O_e,Jir,Yir,MX,Kir,Zir,edr,WM,V_e,odr,rdr,EX,tdr,adr,ndr,HM,X_e,sdr,ldr,CX,idr,ddr,cdr,UM,z_e,mdr,fdr,wX,gdr,hdr,udr,JM,Q_e,pdr,_dr,AX,bdr,vdr,Fdr,YM,W_e,Tdr,Mdr,yX,Edr,Cdr,wdr,KM,H_e,Adr,ydr,LX,Ldr,xdr,kdr,ZM,U_e,Sdr,Rdr,xX,Bdr,Pdr,$dr,e4,J_e,Idr,qdr,kX,Ndr,jdr,Ddr,o4,Y_e,Gdr,Odr,SX,Vdr,Xdr,zdr,r4,K_e,Qdr,Wdr,RX,Hdr,Udr,Jdr,t4,Z_e,Ydr,Kdr,BX,Zdr,ecr,ocr,a4,ebe,rcr,tcr,PX,acr,ncr,scr,n4,obe,lcr,icr,$X,dcr,ccr,mcr,s4,rbe,fcr,gcr,IX,hcr,ucr,pcr,tbe,_cr,bcr,Ny,i$e,yc,l4,abe,jy,vcr,nbe,Fcr,d$e,Tr,Dy,Tcr,Lc,Mcr,qX,Ecr,Ccr,NX,wcr,Acr,ycr,Gy,Lcr,sbe,xcr,kcr,Scr,ut,Oy,Rcr,lbe,Bcr,Pcr,xc,$cr,ibe,Icr,qcr,jX,Ncr,jcr,Dcr,dbe,Gcr,Ocr,Vy,Vcr,_o,Xy,Xcr,cbe,zcr,Qcr,vn,Wcr,mbe,Hcr,Ucr,fbe,Jcr,Ycr,gbe,Kcr,Zcr,emr,ge,i4,hbe,omr,rmr,DX,tmr,amr,nmr,d4,ube,smr,lmr,GX,imr,dmr,cmr,c4,pbe,mmr,fmr,OX,gmr,hmr,umr,m4,_be,pmr,_mr,VX,bmr,vmr,Fmr,f4,bbe,Tmr,Mmr,XX,Emr,Cmr,wmr,g4,vbe,Amr,ymr,zX,Lmr,xmr,kmr,h4,Fbe,Smr,Rmr,QX,Bmr,Pmr,$mr,u4,Tbe,Imr,qmr,WX,Nmr,jmr,Dmr,p4,Mbe,Gmr,Omr,HX,Vmr,Xmr,zmr,_4,Ebe,Qmr,Wmr,UX,Hmr,Umr,Jmr,b4,Cbe,Ymr,Kmr,JX,Zmr,efr,ofr,v4,wbe,rfr,tfr,YX,afr,nfr,sfr,Abe,lfr,ifr,zy,c$e,kc,F4,ybe,Qy,dfr,Lbe,cfr,m$e,Mr,Wy,mfr,Sc,ffr,KX,gfr,hfr,ZX,ufr,pfr,_fr,Hy,bfr,xbe,vfr,Ffr,Tfr,pt,Uy,Mfr,kbe,Efr,Cfr,Rc,wfr,Sbe,Afr,yfr,ez,Lfr,xfr,kfr,Rbe,Sfr,Rfr,Jy,Bfr,bo,Yy,Pfr,Bbe,$fr,Ifr,Fn,qfr,Pbe,Nfr,jfr,$be,Dfr,Gfr,Ibe,Ofr,Vfr,Xfr,Ky,T4,qbe,zfr,Qfr,oz,Wfr,Hfr,Ufr,M4,Nbe,Jfr,Yfr,rz,Kfr,Zfr,egr,jbe,ogr,rgr,Zy,f$e,Bc,E4,Dbe,e8,tgr,Gbe,agr,g$e,Er,o8,ngr,Pc,sgr,tz,lgr,igr,az,dgr,cgr,mgr,r8,fgr,Obe,ggr,hgr,ugr,_t,t8,pgr,Vbe,_gr,bgr,$c,vgr,Xbe,Fgr,Tgr,nz,Mgr,Egr,Cgr,zbe,wgr,Agr,a8,ygr,vo,n8,Lgr,Qbe,xgr,kgr,Tn,Sgr,Wbe,Rgr,Bgr,Hbe,Pgr,$gr,Ube,Igr,qgr,Ngr,K,C4,Jbe,jgr,Dgr,sz,Ggr,Ogr,Vgr,w4,Ybe,Xgr,zgr,lz,Qgr,Wgr,Hgr,A4,Kbe,Ugr,Jgr,iz,Ygr,Kgr,Zgr,y4,Zbe,ehr,ohr,dz,rhr,thr,ahr,L4,e2e,nhr,shr,cz,lhr,ihr,dhr,x4,o2e,chr,mhr,mz,fhr,ghr,hhr,k4,r2e,uhr,phr,fz,_hr,bhr,vhr,S4,t2e,Fhr,Thr,gz,Mhr,Ehr,Chr,R4,a2e,whr,Ahr,hz,yhr,Lhr,xhr,B4,n2e,khr,Shr,uz,Rhr,Bhr,Phr,P4,s2e,$hr,Ihr,pz,qhr,Nhr,jhr,$4,l2e,Dhr,Ghr,_z,Ohr,Vhr,Xhr,I4,i2e,zhr,Qhr,bz,Whr,Hhr,Uhr,q4,d2e,Jhr,Yhr,vz,Khr,Zhr,eur,N4,c2e,our,rur,Fz,tur,aur,nur,j4,m2e,sur,lur,Tz,iur,dur,cur,D4,f2e,mur,fur,Mz,gur,hur,uur,G4,g2e,pur,_ur,Ez,bur,vur,Fur,O4,h2e,Tur,Mur,Cz,Eur,Cur,wur,V4,u2e,Aur,yur,wz,Lur,xur,kur,p2e,Sur,Rur,s8,h$e,Ic,X4,_2e,l8,Bur,b2e,Pur,u$e,Cr,i8,$ur,qc,Iur,Az,qur,Nur,yz,jur,Dur,Gur,d8,Our,v2e,Vur,Xur,zur,bt,c8,Qur,F2e,Wur,Hur,Nc,Uur,T2e,Jur,Yur,Lz,Kur,Zur,epr,M2e,opr,rpr,m8,tpr,Fo,f8,apr,E2e,npr,spr,Mn,lpr,C2e,ipr,dpr,w2e,cpr,mpr,A2e,fpr,gpr,hpr,Fe,z4,y2e,upr,ppr,xz,_pr,bpr,vpr,Q4,L2e,Fpr,Tpr,kz,Mpr,Epr,Cpr,W4,x2e,wpr,Apr,Sz,ypr,Lpr,xpr,H4,k2e,kpr,Spr,Rz,Rpr,Bpr,Ppr,U4,S2e,$pr,Ipr,Bz,qpr,Npr,jpr,J4,R2e,Dpr,Gpr,Pz,Opr,Vpr,Xpr,Y4,B2e,zpr,Qpr,$z,Wpr,Hpr,Upr,K4,P2e,Jpr,Ypr,Iz,Kpr,Zpr,e_r,Z4,$2e,o_r,r_r,qz,t_r,a_r,n_r,eE,I2e,s_r,l_r,Nz,i_r,d_r,c_r,q2e,m_r,f_r,g8,p$e,jc,oE,N2e,h8,g_r,j2e,h_r,_$e,wr,u8,u_r,Dc,p_r,jz,__r,b_r,Dz,v_r,F_r,T_r,p8,M_r,D2e,E_r,C_r,w_r,vt,_8,A_r,G2e,y_r,L_r,Gc,x_r,O2e,k_r,S_r,Gz,R_r,B_r,P_r,V2e,$_r,I_r,b8,q_r,To,v8,N_r,X2e,j_r,D_r,En,G_r,z2e,O_r,V_r,Q2e,X_r,z_r,W2e,Q_r,W_r,H_r,V,rE,H2e,U_r,J_r,Oz,Y_r,K_r,Z_r,tE,U2e,ebr,obr,Vz,rbr,tbr,abr,aE,J2e,nbr,sbr,Xz,lbr,ibr,dbr,nE,Y2e,cbr,mbr,zz,fbr,gbr,hbr,sE,K2e,ubr,pbr,Qz,_br,bbr,vbr,lE,Z2e,Fbr,Tbr,Wz,Mbr,Ebr,Cbr,iE,eve,wbr,Abr,Hz,ybr,Lbr,xbr,dE,ove,kbr,Sbr,Uz,Rbr,Bbr,Pbr,cE,rve,$br,Ibr,Jz,qbr,Nbr,jbr,mE,tve,Dbr,Gbr,Yz,Obr,Vbr,Xbr,fE,ave,zbr,Qbr,Kz,Wbr,Hbr,Ubr,gE,nve,Jbr,Ybr,Zz,Kbr,Zbr,e2r,hE,sve,o2r,r2r,eQ,t2r,a2r,n2r,uE,lve,s2r,l2r,oQ,i2r,d2r,c2r,pE,ive,m2r,f2r,rQ,g2r,h2r,u2r,_E,dve,p2r,_2r,tQ,b2r,v2r,F2r,bE,cve,T2r,M2r,aQ,E2r,C2r,w2r,vE,mve,A2r,y2r,nQ,L2r,x2r,k2r,FE,fve,S2r,R2r,sQ,B2r,P2r,$2r,TE,gve,I2r,q2r,lQ,N2r,j2r,D2r,ME,hve,G2r,O2r,iQ,V2r,X2r,z2r,EE,uve,Q2r,W2r,dQ,H2r,U2r,J2r,CE,pve,Y2r,K2r,cQ,Z2r,evr,ovr,wE,_ve,rvr,tvr,mQ,avr,nvr,svr,AE,bve,lvr,ivr,fQ,dvr,cvr,mvr,yE,vve,fvr,gvr,gQ,hvr,uvr,pvr,Fve,_vr,bvr,F8,b$e,Oc,LE,Tve,T8,vvr,Mve,Fvr,v$e,Ar,M8,Tvr,Vc,Mvr,hQ,Evr,Cvr,uQ,wvr,Avr,yvr,E8,Lvr,Eve,xvr,kvr,Svr,Ft,C8,Rvr,Cve,Bvr,Pvr,Xc,$vr,wve,Ivr,qvr,pQ,Nvr,jvr,Dvr,Ave,Gvr,Ovr,w8,Vvr,Mo,A8,Xvr,yve,zvr,Qvr,Cn,Wvr,Lve,Hvr,Uvr,xve,Jvr,Yvr,kve,Kvr,Zvr,eFr,se,xE,Sve,oFr,rFr,_Q,tFr,aFr,nFr,kE,Rve,sFr,lFr,bQ,iFr,dFr,cFr,SE,Bve,mFr,fFr,vQ,gFr,hFr,uFr,RE,Pve,pFr,_Fr,FQ,bFr,vFr,FFr,BE,$ve,TFr,MFr,TQ,EFr,CFr,wFr,PE,Ive,AFr,yFr,MQ,LFr,xFr,kFr,$E,qve,SFr,RFr,EQ,BFr,PFr,$Fr,IE,Nve,IFr,qFr,CQ,NFr,jFr,DFr,qE,jve,GFr,OFr,wQ,VFr,XFr,zFr,NE,Dve,QFr,WFr,AQ,HFr,UFr,JFr,jE,Gve,YFr,KFr,yQ,ZFr,e1r,o1r,DE,Ove,r1r,t1r,LQ,a1r,n1r,s1r,GE,Vve,l1r,i1r,xQ,d1r,c1r,m1r,OE,Xve,f1r,g1r,kQ,h1r,u1r,p1r,VE,zve,_1r,b1r,SQ,v1r,F1r,T1r,XE,Qve,M1r,E1r,RQ,C1r,w1r,A1r,zE,Wve,y1r,L1r,BQ,x1r,k1r,S1r,Hve,R1r,B1r,y8,F$e,zc,QE,Uve,L8,P1r,Jve,$1r,T$e,yr,x8,I1r,Qc,q1r,PQ,N1r,j1r,$Q,D1r,G1r,O1r,k8,V1r,Yve,X1r,z1r,Q1r,Tt,S8,W1r,Kve,H1r,U1r,Wc,J1r,Zve,Y1r,K1r,IQ,Z1r,eTr,oTr,eFe,rTr,tTr,R8,aTr,Eo,B8,nTr,oFe,sTr,lTr,wn,iTr,rFe,dTr,cTr,tFe,mTr,fTr,aFe,gTr,hTr,uTr,nFe,WE,sFe,pTr,_Tr,qQ,bTr,vTr,FTr,lFe,TTr,MTr,P8,M$e,Hc,HE,iFe,$8,ETr,dFe,CTr,E$e,Lr,I8,wTr,Uc,ATr,NQ,yTr,LTr,jQ,xTr,kTr,STr,q8,RTr,cFe,BTr,PTr,$Tr,Mt,N8,ITr,mFe,qTr,NTr,Jc,jTr,fFe,DTr,GTr,DQ,OTr,VTr,XTr,gFe,zTr,QTr,j8,WTr,Co,D8,HTr,hFe,UTr,JTr,An,YTr,uFe,KTr,ZTr,pFe,eMr,oMr,_Fe,rMr,tMr,aMr,Z,UE,bFe,nMr,sMr,GQ,lMr,iMr,dMr,JE,vFe,cMr,mMr,OQ,fMr,gMr,hMr,YE,FFe,uMr,pMr,VQ,_Mr,bMr,vMr,KE,TFe,FMr,TMr,XQ,MMr,EMr,CMr,ZE,MFe,wMr,AMr,zQ,yMr,LMr,xMr,e5,EFe,kMr,SMr,QQ,RMr,BMr,PMr,o5,CFe,$Mr,IMr,WQ,qMr,NMr,jMr,r5,wFe,DMr,GMr,HQ,OMr,VMr,XMr,t5,AFe,zMr,QMr,UQ,WMr,HMr,UMr,a5,yFe,JMr,YMr,JQ,KMr,ZMr,e4r,n5,LFe,o4r,r4r,YQ,t4r,a4r,n4r,s5,xFe,s4r,l4r,KQ,i4r,d4r,c4r,l5,kFe,m4r,f4r,ZQ,g4r,h4r,u4r,i5,SFe,p4r,_4r,eW,b4r,v4r,F4r,d5,RFe,T4r,M4r,oW,E4r,C4r,w4r,c5,BFe,A4r,y4r,rW,L4r,x4r,k4r,m5,PFe,S4r,R4r,tW,B4r,P4r,$4r,f5,$Fe,I4r,q4r,aW,N4r,j4r,D4r,g5,IFe,G4r,O4r,nW,V4r,X4r,z4r,h5,qFe,Q4r,W4r,sW,H4r,U4r,J4r,NFe,Y4r,K4r,G8,C$e,Yc,u5,jFe,O8,Z4r,DFe,eEr,w$e,xr,V8,oEr,Kc,rEr,lW,tEr,aEr,iW,nEr,sEr,lEr,X8,iEr,GFe,dEr,cEr,mEr,Et,z8,fEr,OFe,gEr,hEr,Zc,uEr,VFe,pEr,_Er,dW,bEr,vEr,FEr,XFe,TEr,MEr,Q8,EEr,wo,W8,CEr,zFe,wEr,AEr,yn,yEr,QFe,LEr,xEr,WFe,kEr,SEr,HFe,REr,BEr,PEr,ee,p5,UFe,$Er,IEr,cW,qEr,NEr,jEr,_5,JFe,DEr,GEr,mW,OEr,VEr,XEr,b5,YFe,zEr,QEr,fW,WEr,HEr,UEr,v5,KFe,JEr,YEr,gW,KEr,ZEr,e5r,F5,ZFe,o5r,r5r,hW,t5r,a5r,n5r,T5,e1e,s5r,l5r,uW,i5r,d5r,c5r,M5,o1e,m5r,f5r,pW,g5r,h5r,u5r,E5,r1e,p5r,_5r,_W,b5r,v5r,F5r,C5,t1e,T5r,M5r,bW,E5r,C5r,w5r,w5,a1e,A5r,y5r,vW,L5r,x5r,k5r,A5,n1e,S5r,R5r,FW,B5r,P5r,$5r,y5,s1e,I5r,q5r,TW,N5r,j5r,D5r,L5,l1e,G5r,O5r,MW,V5r,X5r,z5r,x5,i1e,Q5r,W5r,EW,H5r,U5r,J5r,k5,d1e,Y5r,K5r,CW,Z5r,e3r,o3r,S5,c1e,r3r,t3r,wW,a3r,n3r,s3r,R5,m1e,l3r,i3r,AW,d3r,c3r,m3r,B5,f1e,f3r,g3r,yW,h3r,u3r,p3r,P5,g1e,_3r,b3r,LW,v3r,F3r,T3r,$5,h1e,M3r,E3r,xW,C3r,w3r,A3r,u1e,y3r,L3r,H8,A$e,em,I5,p1e,U8,x3r,_1e,k3r,y$e,kr,J8,S3r,om,R3r,kW,B3r,P3r,SW,$3r,I3r,q3r,Y8,N3r,b1e,j3r,D3r,G3r,Ct,K8,O3r,v1e,V3r,X3r,rm,z3r,F1e,Q3r,W3r,RW,H3r,U3r,J3r,T1e,Y3r,K3r,Z8,Z3r,Ao,eL,eCr,M1e,oCr,rCr,Ln,tCr,E1e,aCr,nCr,C1e,sCr,lCr,w1e,iCr,dCr,cCr,A1e,q5,y1e,mCr,fCr,BW,gCr,hCr,uCr,L1e,pCr,_Cr,oL,L$e,tm,N5,x1e,rL,bCr,k1e,vCr,x$e,Sr,tL,FCr,am,TCr,PW,MCr,ECr,$W,CCr,wCr,ACr,aL,yCr,S1e,LCr,xCr,kCr,wt,nL,SCr,R1e,RCr,BCr,nm,PCr,B1e,$Cr,ICr,IW,qCr,NCr,jCr,P1e,DCr,GCr,sL,OCr,yo,lL,VCr,$1e,XCr,zCr,xn,QCr,I1e,WCr,HCr,q1e,UCr,JCr,N1e,YCr,KCr,ZCr,j1e,j5,D1e,e6r,o6r,qW,r6r,t6r,a6r,G1e,n6r,s6r,iL,k$e,sm,D5,O1e,dL,l6r,V1e,i6r,S$e,Rr,cL,d6r,lm,c6r,NW,m6r,f6r,jW,g6r,h6r,u6r,mL,p6r,X1e,_6r,b6r,v6r,At,fL,F6r,z1e,T6r,M6r,im,E6r,Q1e,C6r,w6r,DW,A6r,y6r,L6r,W1e,x6r,k6r,gL,S6r,Lo,hL,R6r,H1e,B6r,P6r,kn,$6r,U1e,I6r,q6r,J1e,N6r,j6r,Y1e,D6r,G6r,O6r,z,G5,K1e,V6r,X6r,GW,z6r,Q6r,W6r,O5,Z1e,H6r,U6r,OW,J6r,Y6r,K6r,V5,eTe,Z6r,ewr,VW,owr,rwr,twr,X5,oTe,awr,nwr,XW,swr,lwr,iwr,z5,rTe,dwr,cwr,zW,mwr,fwr,gwr,Q5,tTe,hwr,uwr,QW,pwr,_wr,bwr,W5,aTe,vwr,Fwr,WW,Twr,Mwr,Ewr,H5,nTe,Cwr,wwr,HW,Awr,ywr,Lwr,U5,sTe,xwr,kwr,UW,Swr,Rwr,Bwr,J5,lTe,Pwr,$wr,JW,Iwr,qwr,Nwr,Y5,iTe,jwr,Dwr,YW,Gwr,Owr,Vwr,K5,dTe,Xwr,zwr,KW,Qwr,Wwr,Hwr,Z5,cTe,Uwr,Jwr,ZW,Ywr,Kwr,Zwr,e3,mTe,eAr,oAr,eH,rAr,tAr,aAr,o3,fTe,nAr,sAr,oH,lAr,iAr,dAr,r3,gTe,cAr,mAr,rH,fAr,gAr,hAr,t3,hTe,uAr,pAr,tH,_Ar,bAr,vAr,a3,uTe,FAr,TAr,aH,MAr,EAr,CAr,n3,pTe,wAr,AAr,nH,yAr,LAr,xAr,s3,_Te,kAr,SAr,sH,RAr,BAr,PAr,l3,bTe,$Ar,IAr,lH,qAr,NAr,jAr,i3,vTe,DAr,GAr,iH,OAr,VAr,XAr,d3,FTe,zAr,QAr,dH,WAr,HAr,UAr,c3,TTe,JAr,YAr,cH,KAr,ZAr,e0r,m3,MTe,o0r,r0r,mH,t0r,a0r,n0r,ETe,s0r,l0r,uL,R$e,dm,f3,CTe,pL,i0r,wTe,d0r,B$e,Br,_L,c0r,cm,m0r,fH,f0r,g0r,gH,h0r,u0r,p0r,bL,_0r,ATe,b0r,v0r,F0r,yt,vL,T0r,yTe,M0r,E0r,mm,C0r,LTe,w0r,A0r,hH,y0r,L0r,x0r,xTe,k0r,S0r,FL,R0r,xo,TL,B0r,kTe,P0r,$0r,Sn,I0r,STe,q0r,N0r,RTe,j0r,D0r,BTe,G0r,O0r,V0r,ca,g3,PTe,X0r,z0r,uH,Q0r,W0r,H0r,h3,$Te,U0r,J0r,pH,Y0r,K0r,Z0r,u3,ITe,eyr,oyr,_H,ryr,tyr,ayr,p3,qTe,nyr,syr,bH,lyr,iyr,dyr,_3,NTe,cyr,myr,vH,fyr,gyr,hyr,jTe,uyr,pyr,ML,P$e,fm,b3,DTe,EL,_yr,GTe,byr,$$e,Pr,CL,vyr,gm,Fyr,FH,Tyr,Myr,TH,Eyr,Cyr,wyr,wL,Ayr,OTe,yyr,Lyr,xyr,Lt,AL,kyr,VTe,Syr,Ryr,hm,Byr,XTe,Pyr,$yr,MH,Iyr,qyr,Nyr,zTe,jyr,Dyr,yL,Gyr,ko,LL,Oyr,QTe,Vyr,Xyr,Rn,zyr,WTe,Qyr,Wyr,HTe,Hyr,Uyr,UTe,Jyr,Yyr,Kyr,he,v3,JTe,Zyr,e8r,EH,o8r,r8r,t8r,F3,YTe,a8r,n8r,CH,s8r,l8r,i8r,T3,KTe,d8r,c8r,wH,m8r,f8r,g8r,M3,ZTe,h8r,u8r,AH,p8r,_8r,b8r,E3,eMe,v8r,F8r,yH,T8r,M8r,E8r,C3,oMe,C8r,w8r,LH,A8r,y8r,L8r,w3,rMe,x8r,k8r,xH,S8r,R8r,B8r,A3,tMe,P8r,$8r,kH,I8r,q8r,N8r,y3,aMe,j8r,D8r,SH,G8r,O8r,V8r,L3,nMe,X8r,z8r,RH,Q8r,W8r,H8r,x3,sMe,U8r,J8r,BH,Y8r,K8r,Z8r,k3,lMe,eLr,oLr,PH,rLr,tLr,aLr,iMe,nLr,sLr,xL,I$e,um,S3,dMe,kL,lLr,cMe,iLr,q$e,$r,SL,dLr,pm,cLr,$H,mLr,fLr,IH,gLr,hLr,uLr,RL,pLr,mMe,_Lr,bLr,vLr,xt,BL,FLr,fMe,TLr,MLr,_m,ELr,gMe,CLr,wLr,qH,ALr,yLr,LLr,hMe,xLr,kLr,PL,SLr,So,$L,RLr,uMe,BLr,PLr,Bn,$Lr,pMe,ILr,qLr,_Me,NLr,jLr,bMe,DLr,GLr,OLr,Te,R3,vMe,VLr,XLr,NH,zLr,QLr,WLr,B3,FMe,HLr,ULr,jH,JLr,YLr,KLr,P3,TMe,ZLr,e7r,DH,o7r,r7r,t7r,$3,MMe,a7r,n7r,GH,s7r,l7r,i7r,I3,EMe,d7r,c7r,OH,m7r,f7r,g7r,q3,CMe,h7r,u7r,VH,p7r,_7r,b7r,N3,wMe,v7r,F7r,XH,T7r,M7r,E7r,j3,AMe,C7r,w7r,zH,A7r,y7r,L7r,D3,yMe,x7r,k7r,QH,S7r,R7r,B7r,G3,LMe,P7r,$7r,WH,I7r,q7r,N7r,xMe,j7r,D7r,IL,N$e,bm,O3,kMe,qL,G7r,SMe,O7r,j$e,Ir,NL,V7r,vm,X7r,HH,z7r,Q7r,UH,W7r,H7r,U7r,jL,J7r,RMe,Y7r,K7r,Z7r,kt,DL,e9r,BMe,o9r,r9r,Fm,t9r,PMe,a9r,n9r,JH,s9r,l9r,i9r,$Me,d9r,c9r,GL,m9r,Ro,OL,f9r,IMe,g9r,h9r,Pn,u9r,qMe,p9r,_9r,NMe,b9r,v9r,jMe,F9r,T9r,M9r,we,V3,DMe,E9r,C9r,YH,w9r,A9r,y9r,X3,GMe,L9r,x9r,KH,k9r,S9r,R9r,z3,OMe,B9r,P9r,ZH,$9r,I9r,q9r,Q3,VMe,N9r,j9r,eU,D9r,G9r,O9r,W3,XMe,V9r,X9r,oU,z9r,Q9r,W9r,H3,zMe,H9r,U9r,rU,J9r,Y9r,K9r,U3,QMe,Z9r,exr,tU,oxr,rxr,txr,J3,WMe,axr,nxr,aU,sxr,lxr,ixr,Y3,HMe,dxr,cxr,nU,mxr,fxr,gxr,UMe,hxr,uxr,VL,D$e,Tm,K3,JMe,XL,pxr,YMe,_xr,G$e,qr,zL,bxr,Mm,vxr,sU,Fxr,Txr,lU,Mxr,Exr,Cxr,QL,wxr,KMe,Axr,yxr,Lxr,St,WL,xxr,ZMe,kxr,Sxr,Em,Rxr,e4e,Bxr,Pxr,iU,$xr,Ixr,qxr,o4e,Nxr,jxr,HL,Dxr,Bo,UL,Gxr,r4e,Oxr,Vxr,$n,Xxr,t4e,zxr,Qxr,a4e,Wxr,Hxr,n4e,Uxr,Jxr,Yxr,Me,Z3,s4e,Kxr,Zxr,dU,ekr,okr,rkr,eC,l4e,tkr,akr,cU,nkr,skr,lkr,oC,i4e,ikr,dkr,mU,ckr,mkr,fkr,rC,d4e,gkr,hkr,fU,ukr,pkr,_kr,tC,c4e,bkr,vkr,gU,Fkr,Tkr,Mkr,aC,m4e,Ekr,Ckr,hU,wkr,Akr,ykr,nC,f4e,Lkr,xkr,uU,kkr,Skr,Rkr,sC,g4e,Bkr,Pkr,pU,$kr,Ikr,qkr,lC,h4e,Nkr,jkr,_U,Dkr,Gkr,Okr,iC,u4e,Vkr,Xkr,bU,zkr,Qkr,Wkr,p4e,Hkr,Ukr,JL,O$e,Cm,dC,_4e,YL,Jkr,b4e,Ykr,V$e,Nr,KL,Kkr,wm,Zkr,vU,eSr,oSr,FU,rSr,tSr,aSr,ZL,nSr,v4e,sSr,lSr,iSr,Rt,e7,dSr,F4e,cSr,mSr,Am,fSr,T4e,gSr,hSr,TU,uSr,pSr,_Sr,M4e,bSr,vSr,o7,FSr,Po,r7,TSr,E4e,MSr,ESr,In,CSr,C4e,wSr,ASr,w4e,ySr,LSr,A4e,xSr,kSr,SSr,Ee,cC,y4e,RSr,BSr,MU,PSr,$Sr,ISr,mC,L4e,qSr,NSr,EU,jSr,DSr,GSr,fC,x4e,OSr,VSr,CU,XSr,zSr,QSr,gC,k4e,WSr,HSr,wU,USr,JSr,YSr,hC,S4e,KSr,ZSr,AU,eRr,oRr,rRr,uC,R4e,tRr,aRr,yU,nRr,sRr,lRr,pC,B4e,iRr,dRr,LU,cRr,mRr,fRr,_C,P4e,gRr,hRr,xU,uRr,pRr,_Rr,bC,$4e,bRr,vRr,kU,FRr,TRr,MRr,vC,I4e,ERr,CRr,SU,wRr,ARr,yRr,q4e,LRr,xRr,t7,X$e,ym,FC,N4e,a7,kRr,j4e,SRr,z$e,jr,n7,RRr,Lm,BRr,RU,PRr,$Rr,BU,IRr,qRr,NRr,s7,jRr,D4e,DRr,GRr,ORr,Bt,l7,VRr,G4e,XRr,zRr,xm,QRr,O4e,WRr,HRr,PU,URr,JRr,YRr,V4e,KRr,ZRr,i7,eBr,$o,d7,oBr,X4e,rBr,tBr,qn,aBr,z4e,nBr,sBr,Q4e,lBr,iBr,W4e,dBr,cBr,mBr,Pe,TC,H4e,fBr,gBr,$U,hBr,uBr,pBr,MC,U4e,_Br,bBr,IU,vBr,FBr,TBr,EC,J4e,MBr,EBr,qU,CBr,wBr,ABr,CC,Y4e,yBr,LBr,NU,xBr,kBr,SBr,wC,K4e,RBr,BBr,jU,PBr,$Br,IBr,AC,Z4e,qBr,NBr,DU,jBr,DBr,GBr,yC,eEe,OBr,VBr,GU,XBr,zBr,QBr,LC,oEe,WBr,HBr,OU,UBr,JBr,YBr,rEe,KBr,ZBr,c7,Q$e,km,xC,tEe,m7,ePr,aEe,oPr,W$e,Dr,f7,rPr,Sm,tPr,VU,aPr,nPr,XU,sPr,lPr,iPr,g7,dPr,nEe,cPr,mPr,fPr,Pt,h7,gPr,sEe,hPr,uPr,Rm,pPr,lEe,_Pr,bPr,zU,vPr,FPr,TPr,iEe,MPr,EPr,u7,CPr,Io,p7,wPr,dEe,APr,yPr,Nn,LPr,cEe,xPr,kPr,mEe,SPr,RPr,fEe,BPr,PPr,$Pr,$e,kC,gEe,IPr,qPr,QU,NPr,jPr,DPr,SC,hEe,GPr,OPr,WU,VPr,XPr,zPr,RC,uEe,QPr,WPr,HU,HPr,UPr,JPr,BC,pEe,YPr,KPr,UU,ZPr,e$r,o$r,PC,_Ee,r$r,t$r,JU,a$r,n$r,s$r,$C,bEe,l$r,i$r,YU,d$r,c$r,m$r,IC,vEe,f$r,g$r,KU,h$r,u$r,p$r,qC,FEe,_$r,b$r,ZU,v$r,F$r,T$r,TEe,M$r,E$r,_7,H$e,Bm,NC,MEe,b7,C$r,EEe,w$r,U$e,Gr,v7,A$r,Pm,y$r,eJ,L$r,x$r,oJ,k$r,S$r,R$r,F7,B$r,CEe,P$r,$$r,I$r,$t,T7,q$r,wEe,N$r,j$r,$m,D$r,AEe,G$r,O$r,rJ,V$r,X$r,z$r,yEe,Q$r,W$r,M7,H$r,qo,E7,U$r,LEe,J$r,Y$r,jn,K$r,xEe,Z$r,eIr,kEe,oIr,rIr,SEe,tIr,aIr,nIr,REe,jC,BEe,sIr,lIr,tJ,iIr,dIr,cIr,PEe,mIr,fIr,C7,J$e,Im,DC,$Ee,w7,gIr,IEe,hIr,Y$e,Or,A7,uIr,qm,pIr,aJ,_Ir,bIr,nJ,vIr,FIr,TIr,y7,MIr,qEe,EIr,CIr,wIr,It,L7,AIr,NEe,yIr,LIr,Nm,xIr,jEe,kIr,SIr,sJ,RIr,BIr,PIr,DEe,$Ir,IIr,x7,qIr,No,k7,NIr,GEe,jIr,DIr,Dn,GIr,OEe,OIr,VIr,VEe,XIr,zIr,XEe,QIr,WIr,HIr,S7,GC,zEe,UIr,JIr,lJ,YIr,KIr,ZIr,OC,QEe,eqr,oqr,iJ,rqr,tqr,aqr,WEe,nqr,sqr,R7,K$e,jm,VC,HEe,B7,lqr,UEe,iqr,Z$e,Vr,P7,dqr,Dm,cqr,dJ,mqr,fqr,cJ,gqr,hqr,uqr,$7,pqr,JEe,_qr,bqr,vqr,qt,I7,Fqr,YEe,Tqr,Mqr,Gm,Eqr,KEe,Cqr,wqr,mJ,Aqr,yqr,Lqr,ZEe,xqr,kqr,q7,Sqr,jo,N7,Rqr,e5e,Bqr,Pqr,Gn,$qr,o5e,Iqr,qqr,r5e,Nqr,jqr,t5e,Dqr,Gqr,Oqr,a5e,XC,n5e,Vqr,Xqr,fJ,zqr,Qqr,Wqr,s5e,Hqr,Uqr,j7,eIe;return pe=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),U6=new X({}),J6=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Um=new Jqr({props:{warning:!0,$$slots:{default:[L8t]},$$scope:{ctx:Vm}}}),Y6=new X({}),K6=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L560"}}),ow=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L583"}}),rw=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),tw=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L705"}}),aw=new X({}),nw=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L377"}}),iw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L391"}}),dw=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),cw=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L587"}}),mw=new X({}),fw=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),uw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),Hh=new Jqr({props:{$$slots:{default:[x8t]},$$scope:{ctx:Vm}}}),pw=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),_w=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),bw=new X({}),vw=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L76"}}),Mw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),mu=new Jqr({props:{$$slots:{default:[k8t]},$$scope:{ctx:Vm}}}),Ew=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Cw=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L243"}}),ww=new X({}),Aw=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L714"}}),Lw=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),kw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new X({}),Bw=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L721"}}),$w=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),qw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L736"}}),Ow=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Xw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Ww=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L743"}}),Uw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Yw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new X({}),eA=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L750"}}),rA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),aA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new X({}),lA=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L759"}}),dA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),mA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new X({}),hA=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),pA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),bA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new X({}),TA=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L800"}}),EA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),wA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),LA=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L786"}}),kA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),RA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PA=new X({}),$A=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L768"}}),qA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),jA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GA=new X({}),OA=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L775"}}),XA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),QA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HA=new X({}),UA=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L809"}}),YA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),ZA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o0=new X({}),r0=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L848"}}),a0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),s0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i0=new X({}),d0=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L855"}}),m0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),g0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),p0=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),b0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),F0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M0=new X({}),E0=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),w0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),y0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x0=new X({}),k0=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),R0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),P0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q0=new X({}),N0=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L887"}}),D0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),O0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new X({}),z0=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),W0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),U0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y0=new X({}),K0=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L841"}}),ey=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oy=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),ry=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ty=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),ly=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iy=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),dy=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cy=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new X({}),fy=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),hy=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uy=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),py=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_y=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),vy=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),Ty=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),My=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Ey=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Cy=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new X({}),Ay=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Ly=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),ky=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),By=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),$y=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),qy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jy=new X({}),Dy=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Oy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Xy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Wy=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Uy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Yy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e8=new X({}),o8=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),t8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),n8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l8=new X({}),i8=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),c8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),f8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h8=new X({}),u8=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),_8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),v8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T8=new X({}),M8=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),C8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),A8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L8=new X({}),x8=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),S8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),B8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$8=new X({}),I8=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),N8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),D8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O8=new X({}),V8=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),z8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),W8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U8=new X({}),J8=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),K8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),eL=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new X({}),tL=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),nL=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),lL=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new X({}),cL=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),fL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),hL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new X({}),_L=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),vL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),TL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ML=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EL=new X({}),CL=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),AL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),LL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kL=new X({}),SL=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),BL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),$L=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new X({}),NL=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),DL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),OL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XL=new X({}),zL=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),WL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),UL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YL=new X({}),KL=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),e7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),r7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a7=new X({}),n7=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),l7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),d7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m7=new X({}),f7=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),h7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),p7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b7=new X({}),v7=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),T7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),E7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w7=new X({}),A7=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),L7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),k7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B7=new X({}),P7=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),I7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),N7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){oe=a("meta"),co=l(),fe=a("h1"),Ae=a("a"),io=a("span"),m(pe.$$.fragment),Ce=l(),Xo=a("span"),zi=o("Auto Classes"),Xm=l(),ma=a("p"),Qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=a("code"),z6=o("from_pretrained()"),zm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Se=l(),mo=a("p"),Hi=o("Instantiating one of "),On=a("a"),Q6=o("AutoConfig"),Vn=o(", "),Xn=a("a"),W6=o("AutoModel"),Ui=o(`, and
`),zn=a("a"),H6=o("AutoTokenizer"),Ji=o(" will directly create a class of the relevant architecture. For instance"),Qm=l(),m(Da.$$.fragment),fo=l(),ve=a("p"),z9=o("will create a model that is an instance of "),Yi=a("a"),Q9=o("BertModel"),W9=o("."),zo=l(),Ga=a("p"),H9=o("There is one class of "),Wm=a("code"),U9=o("AutoModel"),fNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZBe=l(),Ki=a("h2"),Hm=a("a"),nK=a("span"),m(U6.$$.fragment),gNe=l(),sK=a("span"),hNe=o("Extending the Auto Classes"),ePe=l(),Qn=a("p"),uNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lK=a("code"),pNe=o("NewModel"),_Ne=o(", make sure you have a "),iK=a("code"),bNe=o("NewModelConfig"),vNe=o(` then you can add those to the auto
classes like this:`),oPe=l(),m(J6.$$.fragment),rPe=l(),J9=a("p"),FNe=o("You will then be able to use the auto classes like you would usually do!"),tPe=l(),m(Um.$$.fragment),aPe=l(),Zi=a("h2"),Jm=a("a"),dK=a("span"),m(Y6.$$.fragment),TNe=l(),cK=a("span"),MNe=o("AutoConfig"),nPe=l(),Qo=a("div"),m(K6.$$.fragment),ENe=l(),Z6=a("p"),CNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y9=a("a"),wNe=o("from_pretrained()"),ANe=o(" class method."),yNe=l(),ew=a("p"),LNe=o("This class cannot be instantiated directly using "),mK=a("code"),xNe=o("__init__()"),kNe=o(" (throws an error)."),SNe=l(),go=a("div"),m(ow.$$.fragment),RNe=l(),fK=a("p"),BNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PNe=l(),ed=a("p"),$Ne=o("The configuration class to instantiate is selected based on the "),gK=a("code"),INe=o("model_type"),qNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hK=a("code"),NNe=o("pretrained_model_name_or_path"),jNe=o(":"),DNe=l(),v=a("ul"),Ym=a("li"),uK=a("strong"),GNe=o("albert"),ONe=o(" \u2014 "),K9=a("a"),VNe=o("AlbertConfig"),XNe=o(" (ALBERT model)"),zNe=l(),Km=a("li"),pK=a("strong"),QNe=o("bart"),WNe=o(" \u2014 "),Z9=a("a"),HNe=o("BartConfig"),UNe=o(" (BART model)"),JNe=l(),Zm=a("li"),_K=a("strong"),YNe=o("beit"),KNe=o(" \u2014 "),ex=a("a"),ZNe=o("BeitConfig"),eje=o(" (BEiT model)"),oje=l(),ef=a("li"),bK=a("strong"),rje=o("bert"),tje=o(" \u2014 "),ox=a("a"),aje=o("BertConfig"),nje=o(" (BERT model)"),sje=l(),of=a("li"),vK=a("strong"),lje=o("bert-generation"),ije=o(" \u2014 "),rx=a("a"),dje=o("BertGenerationConfig"),cje=o(" (Bert Generation model)"),mje=l(),rf=a("li"),FK=a("strong"),fje=o("big_bird"),gje=o(" \u2014 "),tx=a("a"),hje=o("BigBirdConfig"),uje=o(" (BigBird model)"),pje=l(),tf=a("li"),TK=a("strong"),_je=o("bigbird_pegasus"),bje=o(" \u2014 "),ax=a("a"),vje=o("BigBirdPegasusConfig"),Fje=o(" (BigBirdPegasus model)"),Tje=l(),af=a("li"),MK=a("strong"),Mje=o("blenderbot"),Eje=o(" \u2014 "),nx=a("a"),Cje=o("BlenderbotConfig"),wje=o(" (Blenderbot model)"),Aje=l(),nf=a("li"),EK=a("strong"),yje=o("blenderbot-small"),Lje=o(" \u2014 "),sx=a("a"),xje=o("BlenderbotSmallConfig"),kje=o(" (BlenderbotSmall model)"),Sje=l(),sf=a("li"),CK=a("strong"),Rje=o("camembert"),Bje=o(" \u2014 "),lx=a("a"),Pje=o("CamembertConfig"),$je=o(" (CamemBERT model)"),Ije=l(),lf=a("li"),wK=a("strong"),qje=o("canine"),Nje=o(" \u2014 "),ix=a("a"),jje=o("CanineConfig"),Dje=o(" (Canine model)"),Gje=l(),df=a("li"),AK=a("strong"),Oje=o("clip"),Vje=o(" \u2014 "),dx=a("a"),Xje=o("CLIPConfig"),zje=o(" (CLIP model)"),Qje=l(),cf=a("li"),yK=a("strong"),Wje=o("convbert"),Hje=o(" \u2014 "),cx=a("a"),Uje=o("ConvBertConfig"),Jje=o(" (ConvBERT model)"),Yje=l(),mf=a("li"),LK=a("strong"),Kje=o("convnext"),Zje=o(" \u2014 "),mx=a("a"),eDe=o("ConvNextConfig"),oDe=o(" (ConvNext model)"),rDe=l(),ff=a("li"),xK=a("strong"),tDe=o("ctrl"),aDe=o(" \u2014 "),fx=a("a"),nDe=o("CTRLConfig"),sDe=o(" (CTRL model)"),lDe=l(),gf=a("li"),kK=a("strong"),iDe=o("data2vec-audio"),dDe=o(" \u2014 "),gx=a("a"),cDe=o("Data2VecAudioConfig"),mDe=o(" (Data2VecAudio model)"),fDe=l(),hf=a("li"),SK=a("strong"),gDe=o("data2vec-text"),hDe=o(" \u2014 "),hx=a("a"),uDe=o("Data2VecTextConfig"),pDe=o(" (Data2VecText model)"),_De=l(),uf=a("li"),RK=a("strong"),bDe=o("data2vec-vision"),vDe=o(" \u2014 "),ux=a("a"),FDe=o("Data2VecVisionConfig"),TDe=o(" (Data2VecVision model)"),MDe=l(),pf=a("li"),BK=a("strong"),EDe=o("deberta"),CDe=o(" \u2014 "),px=a("a"),wDe=o("DebertaConfig"),ADe=o(" (DeBERTa model)"),yDe=l(),_f=a("li"),PK=a("strong"),LDe=o("deberta-v2"),xDe=o(" \u2014 "),_x=a("a"),kDe=o("DebertaV2Config"),SDe=o(" (DeBERTa-v2 model)"),RDe=l(),bf=a("li"),$K=a("strong"),BDe=o("decision_transformer"),PDe=o(" \u2014 "),bx=a("a"),$De=o("DecisionTransformerConfig"),IDe=o(" (Decision Transformer model)"),qDe=l(),vf=a("li"),IK=a("strong"),NDe=o("deit"),jDe=o(" \u2014 "),vx=a("a"),DDe=o("DeiTConfig"),GDe=o(" (DeiT model)"),ODe=l(),Ff=a("li"),qK=a("strong"),VDe=o("detr"),XDe=o(" \u2014 "),Fx=a("a"),zDe=o("DetrConfig"),QDe=o(" (DETR model)"),WDe=l(),Tf=a("li"),NK=a("strong"),HDe=o("distilbert"),UDe=o(" \u2014 "),Tx=a("a"),JDe=o("DistilBertConfig"),YDe=o(" (DistilBERT model)"),KDe=l(),Mf=a("li"),jK=a("strong"),ZDe=o("dpr"),eGe=o(" \u2014 "),Mx=a("a"),oGe=o("DPRConfig"),rGe=o(" (DPR model)"),tGe=l(),Ef=a("li"),DK=a("strong"),aGe=o("dpt"),nGe=o(" \u2014 "),Ex=a("a"),sGe=o("DPTConfig"),lGe=o(" (DPT model)"),iGe=l(),Cf=a("li"),GK=a("strong"),dGe=o("electra"),cGe=o(" \u2014 "),Cx=a("a"),mGe=o("ElectraConfig"),fGe=o(" (ELECTRA model)"),gGe=l(),wf=a("li"),OK=a("strong"),hGe=o("encoder-decoder"),uGe=o(" \u2014 "),wx=a("a"),pGe=o("EncoderDecoderConfig"),_Ge=o(" (Encoder decoder model)"),bGe=l(),Af=a("li"),VK=a("strong"),vGe=o("flaubert"),FGe=o(" \u2014 "),Ax=a("a"),TGe=o("FlaubertConfig"),MGe=o(" (FlauBERT model)"),EGe=l(),yf=a("li"),XK=a("strong"),CGe=o("fnet"),wGe=o(" \u2014 "),yx=a("a"),AGe=o("FNetConfig"),yGe=o(" (FNet model)"),LGe=l(),Lf=a("li"),zK=a("strong"),xGe=o("fsmt"),kGe=o(" \u2014 "),Lx=a("a"),SGe=o("FSMTConfig"),RGe=o(" (FairSeq Machine-Translation model)"),BGe=l(),xf=a("li"),QK=a("strong"),PGe=o("funnel"),$Ge=o(" \u2014 "),xx=a("a"),IGe=o("FunnelConfig"),qGe=o(" (Funnel Transformer model)"),NGe=l(),kf=a("li"),WK=a("strong"),jGe=o("glpn"),DGe=o(" \u2014 "),kx=a("a"),GGe=o("GLPNConfig"),OGe=o(" (GLPN model)"),VGe=l(),Sf=a("li"),HK=a("strong"),XGe=o("gpt2"),zGe=o(" \u2014 "),Sx=a("a"),QGe=o("GPT2Config"),WGe=o(" (OpenAI GPT-2 model)"),HGe=l(),Rf=a("li"),UK=a("strong"),UGe=o("gpt_neo"),JGe=o(" \u2014 "),Rx=a("a"),YGe=o("GPTNeoConfig"),KGe=o(" (GPT Neo model)"),ZGe=l(),Bf=a("li"),JK=a("strong"),eOe=o("gptj"),oOe=o(" \u2014 "),Bx=a("a"),rOe=o("GPTJConfig"),tOe=o(" (GPT-J model)"),aOe=l(),Pf=a("li"),YK=a("strong"),nOe=o("hubert"),sOe=o(" \u2014 "),Px=a("a"),lOe=o("HubertConfig"),iOe=o(" (Hubert model)"),dOe=l(),$f=a("li"),KK=a("strong"),cOe=o("ibert"),mOe=o(" \u2014 "),$x=a("a"),fOe=o("IBertConfig"),gOe=o(" (I-BERT model)"),hOe=l(),If=a("li"),ZK=a("strong"),uOe=o("imagegpt"),pOe=o(" \u2014 "),Ix=a("a"),_Oe=o("ImageGPTConfig"),bOe=o(" (ImageGPT model)"),vOe=l(),qf=a("li"),eZ=a("strong"),FOe=o("layoutlm"),TOe=o(" \u2014 "),qx=a("a"),MOe=o("LayoutLMConfig"),EOe=o(" (LayoutLM model)"),COe=l(),Nf=a("li"),oZ=a("strong"),wOe=o("layoutlmv2"),AOe=o(" \u2014 "),Nx=a("a"),yOe=o("LayoutLMv2Config"),LOe=o(" (LayoutLMv2 model)"),xOe=l(),jf=a("li"),rZ=a("strong"),kOe=o("led"),SOe=o(" \u2014 "),jx=a("a"),ROe=o("LEDConfig"),BOe=o(" (LED model)"),POe=l(),Df=a("li"),tZ=a("strong"),$Oe=o("longformer"),IOe=o(" \u2014 "),Dx=a("a"),qOe=o("LongformerConfig"),NOe=o(" (Longformer model)"),jOe=l(),Gf=a("li"),aZ=a("strong"),DOe=o("luke"),GOe=o(" \u2014 "),Gx=a("a"),OOe=o("LukeConfig"),VOe=o(" (LUKE model)"),XOe=l(),Of=a("li"),nZ=a("strong"),zOe=o("lxmert"),QOe=o(" \u2014 "),Ox=a("a"),WOe=o("LxmertConfig"),HOe=o(" (LXMERT model)"),UOe=l(),Vf=a("li"),sZ=a("strong"),JOe=o("m2m_100"),YOe=o(" \u2014 "),Vx=a("a"),KOe=o("M2M100Config"),ZOe=o(" (M2M100 model)"),eVe=l(),Xf=a("li"),lZ=a("strong"),oVe=o("marian"),rVe=o(" \u2014 "),Xx=a("a"),tVe=o("MarianConfig"),aVe=o(" (Marian model)"),nVe=l(),zf=a("li"),iZ=a("strong"),sVe=o("maskformer"),lVe=o(" \u2014 "),zx=a("a"),iVe=o("MaskFormerConfig"),dVe=o(" (MaskFormer model)"),cVe=l(),Qf=a("li"),dZ=a("strong"),mVe=o("mbart"),fVe=o(" \u2014 "),Qx=a("a"),gVe=o("MBartConfig"),hVe=o(" (mBART model)"),uVe=l(),Wf=a("li"),cZ=a("strong"),pVe=o("megatron-bert"),_Ve=o(" \u2014 "),Wx=a("a"),bVe=o("MegatronBertConfig"),vVe=o(" (MegatronBert model)"),FVe=l(),Hf=a("li"),mZ=a("strong"),TVe=o("mobilebert"),MVe=o(" \u2014 "),Hx=a("a"),EVe=o("MobileBertConfig"),CVe=o(" (MobileBERT model)"),wVe=l(),Uf=a("li"),fZ=a("strong"),AVe=o("mpnet"),yVe=o(" \u2014 "),Ux=a("a"),LVe=o("MPNetConfig"),xVe=o(" (MPNet model)"),kVe=l(),Jf=a("li"),gZ=a("strong"),SVe=o("mt5"),RVe=o(" \u2014 "),Jx=a("a"),BVe=o("MT5Config"),PVe=o(" (mT5 model)"),$Ve=l(),Yf=a("li"),hZ=a("strong"),IVe=o("nystromformer"),qVe=o(" \u2014 "),Yx=a("a"),NVe=o("NystromformerConfig"),jVe=o(" (Nystromformer model)"),DVe=l(),Kf=a("li"),uZ=a("strong"),GVe=o("openai-gpt"),OVe=o(" \u2014 "),Kx=a("a"),VVe=o("OpenAIGPTConfig"),XVe=o(" (OpenAI GPT model)"),zVe=l(),Zf=a("li"),pZ=a("strong"),QVe=o("pegasus"),WVe=o(" \u2014 "),Zx=a("a"),HVe=o("PegasusConfig"),UVe=o(" (Pegasus model)"),JVe=l(),eg=a("li"),_Z=a("strong"),YVe=o("perceiver"),KVe=o(" \u2014 "),ek=a("a"),ZVe=o("PerceiverConfig"),eXe=o(" (Perceiver model)"),oXe=l(),og=a("li"),bZ=a("strong"),rXe=o("plbart"),tXe=o(" \u2014 "),ok=a("a"),aXe=o("PLBartConfig"),nXe=o(" (PLBart model)"),sXe=l(),rg=a("li"),vZ=a("strong"),lXe=o("poolformer"),iXe=o(" \u2014 "),rk=a("a"),dXe=o("PoolFormerConfig"),cXe=o(" (PoolFormer model)"),mXe=l(),tg=a("li"),FZ=a("strong"),fXe=o("prophetnet"),gXe=o(" \u2014 "),tk=a("a"),hXe=o("ProphetNetConfig"),uXe=o(" (ProphetNet model)"),pXe=l(),ag=a("li"),TZ=a("strong"),_Xe=o("qdqbert"),bXe=o(" \u2014 "),ak=a("a"),vXe=o("QDQBertConfig"),FXe=o(" (QDQBert model)"),TXe=l(),ng=a("li"),MZ=a("strong"),MXe=o("rag"),EXe=o(" \u2014 "),nk=a("a"),CXe=o("RagConfig"),wXe=o(" (RAG model)"),AXe=l(),sg=a("li"),EZ=a("strong"),yXe=o("realm"),LXe=o(" \u2014 "),sk=a("a"),xXe=o("RealmConfig"),kXe=o(" (Realm model)"),SXe=l(),lg=a("li"),CZ=a("strong"),RXe=o("reformer"),BXe=o(" \u2014 "),lk=a("a"),PXe=o("ReformerConfig"),$Xe=o(" (Reformer model)"),IXe=l(),ig=a("li"),wZ=a("strong"),qXe=o("regnet"),NXe=o(" \u2014 "),ik=a("a"),jXe=o("RegNetConfig"),DXe=o(" (RegNet model)"),GXe=l(),dg=a("li"),AZ=a("strong"),OXe=o("rembert"),VXe=o(" \u2014 "),dk=a("a"),XXe=o("RemBertConfig"),zXe=o(" (RemBERT model)"),QXe=l(),cg=a("li"),yZ=a("strong"),WXe=o("resnet"),HXe=o(" \u2014 "),ck=a("a"),UXe=o("ResNetConfig"),JXe=o(" (ResNet model)"),YXe=l(),mg=a("li"),LZ=a("strong"),KXe=o("retribert"),ZXe=o(" \u2014 "),mk=a("a"),eze=o("RetriBertConfig"),oze=o(" (RetriBERT model)"),rze=l(),fg=a("li"),xZ=a("strong"),tze=o("roberta"),aze=o(" \u2014 "),fk=a("a"),nze=o("RobertaConfig"),sze=o(" (RoBERTa model)"),lze=l(),gg=a("li"),kZ=a("strong"),ize=o("roformer"),dze=o(" \u2014 "),gk=a("a"),cze=o("RoFormerConfig"),mze=o(" (RoFormer model)"),fze=l(),hg=a("li"),SZ=a("strong"),gze=o("segformer"),hze=o(" \u2014 "),hk=a("a"),uze=o("SegformerConfig"),pze=o(" (SegFormer model)"),_ze=l(),ug=a("li"),RZ=a("strong"),bze=o("sew"),vze=o(" \u2014 "),uk=a("a"),Fze=o("SEWConfig"),Tze=o(" (SEW model)"),Mze=l(),pg=a("li"),BZ=a("strong"),Eze=o("sew-d"),Cze=o(" \u2014 "),pk=a("a"),wze=o("SEWDConfig"),Aze=o(" (SEW-D model)"),yze=l(),_g=a("li"),PZ=a("strong"),Lze=o("speech-encoder-decoder"),xze=o(" \u2014 "),_k=a("a"),kze=o("SpeechEncoderDecoderConfig"),Sze=o(" (Speech Encoder decoder model)"),Rze=l(),bg=a("li"),$Z=a("strong"),Bze=o("speech_to_text"),Pze=o(" \u2014 "),bk=a("a"),$ze=o("Speech2TextConfig"),Ize=o(" (Speech2Text model)"),qze=l(),vg=a("li"),IZ=a("strong"),Nze=o("speech_to_text_2"),jze=o(" \u2014 "),vk=a("a"),Dze=o("Speech2Text2Config"),Gze=o(" (Speech2Text2 model)"),Oze=l(),Fg=a("li"),qZ=a("strong"),Vze=o("splinter"),Xze=o(" \u2014 "),Fk=a("a"),zze=o("SplinterConfig"),Qze=o(" (Splinter model)"),Wze=l(),Tg=a("li"),NZ=a("strong"),Hze=o("squeezebert"),Uze=o(" \u2014 "),Tk=a("a"),Jze=o("SqueezeBertConfig"),Yze=o(" (SqueezeBERT model)"),Kze=l(),Mg=a("li"),jZ=a("strong"),Zze=o("swin"),eQe=o(" \u2014 "),Mk=a("a"),oQe=o("SwinConfig"),rQe=o(" (Swin model)"),tQe=l(),Eg=a("li"),DZ=a("strong"),aQe=o("t5"),nQe=o(" \u2014 "),Ek=a("a"),sQe=o("T5Config"),lQe=o(" (T5 model)"),iQe=l(),Cg=a("li"),GZ=a("strong"),dQe=o("tapas"),cQe=o(" \u2014 "),Ck=a("a"),mQe=o("TapasConfig"),fQe=o(" (TAPAS model)"),gQe=l(),wg=a("li"),OZ=a("strong"),hQe=o("tapex"),uQe=o(" \u2014 "),wk=a("a"),pQe=o("BartConfig"),_Qe=o(" (TAPEX model)"),bQe=l(),Ag=a("li"),VZ=a("strong"),vQe=o("transfo-xl"),FQe=o(" \u2014 "),Ak=a("a"),TQe=o("TransfoXLConfig"),MQe=o(" (Transformer-XL model)"),EQe=l(),yg=a("li"),XZ=a("strong"),CQe=o("trocr"),wQe=o(" \u2014 "),yk=a("a"),AQe=o("TrOCRConfig"),yQe=o(" (TrOCR model)"),LQe=l(),Lg=a("li"),zZ=a("strong"),xQe=o("unispeech"),kQe=o(" \u2014 "),Lk=a("a"),SQe=o("UniSpeechConfig"),RQe=o(" (UniSpeech model)"),BQe=l(),xg=a("li"),QZ=a("strong"),PQe=o("unispeech-sat"),$Qe=o(" \u2014 "),xk=a("a"),IQe=o("UniSpeechSatConfig"),qQe=o(" (UniSpeechSat model)"),NQe=l(),kg=a("li"),WZ=a("strong"),jQe=o("van"),DQe=o(" \u2014 "),kk=a("a"),GQe=o("VanConfig"),OQe=o(" (VAN model)"),VQe=l(),Sg=a("li"),HZ=a("strong"),XQe=o("vilt"),zQe=o(" \u2014 "),Sk=a("a"),QQe=o("ViltConfig"),WQe=o(" (ViLT model)"),HQe=l(),Rg=a("li"),UZ=a("strong"),UQe=o("vision-encoder-decoder"),JQe=o(" \u2014 "),Rk=a("a"),YQe=o("VisionEncoderDecoderConfig"),KQe=o(" (Vision Encoder decoder model)"),ZQe=l(),Bg=a("li"),JZ=a("strong"),eWe=o("vision-text-dual-encoder"),oWe=o(" \u2014 "),Bk=a("a"),rWe=o("VisionTextDualEncoderConfig"),tWe=o(" (VisionTextDualEncoder model)"),aWe=l(),Pg=a("li"),YZ=a("strong"),nWe=o("visual_bert"),sWe=o(" \u2014 "),Pk=a("a"),lWe=o("VisualBertConfig"),iWe=o(" (VisualBert model)"),dWe=l(),$g=a("li"),KZ=a("strong"),cWe=o("vit"),mWe=o(" \u2014 "),$k=a("a"),fWe=o("ViTConfig"),gWe=o(" (ViT model)"),hWe=l(),Ig=a("li"),ZZ=a("strong"),uWe=o("vit_mae"),pWe=o(" \u2014 "),Ik=a("a"),_We=o("ViTMAEConfig"),bWe=o(" (ViTMAE model)"),vWe=l(),qg=a("li"),eee=a("strong"),FWe=o("wav2vec2"),TWe=o(" \u2014 "),qk=a("a"),MWe=o("Wav2Vec2Config"),EWe=o(" (Wav2Vec2 model)"),CWe=l(),Ng=a("li"),oee=a("strong"),wWe=o("wavlm"),AWe=o(" \u2014 "),Nk=a("a"),yWe=o("WavLMConfig"),LWe=o(" (WavLM model)"),xWe=l(),jg=a("li"),ree=a("strong"),kWe=o("xglm"),SWe=o(" \u2014 "),jk=a("a"),RWe=o("XGLMConfig"),BWe=o(" (XGLM model)"),PWe=l(),Dg=a("li"),tee=a("strong"),$We=o("xlm"),IWe=o(" \u2014 "),Dk=a("a"),qWe=o("XLMConfig"),NWe=o(" (XLM model)"),jWe=l(),Gg=a("li"),aee=a("strong"),DWe=o("xlm-prophetnet"),GWe=o(" \u2014 "),Gk=a("a"),OWe=o("XLMProphetNetConfig"),VWe=o(" (XLMProphetNet model)"),XWe=l(),Og=a("li"),nee=a("strong"),zWe=o("xlm-roberta"),QWe=o(" \u2014 "),Ok=a("a"),WWe=o("XLMRobertaConfig"),HWe=o(" (XLM-RoBERTa model)"),UWe=l(),Vg=a("li"),see=a("strong"),JWe=o("xlm-roberta-xl"),YWe=o(" \u2014 "),Vk=a("a"),KWe=o("XLMRobertaXLConfig"),ZWe=o(" (XLM-RoBERTa-XL model)"),eHe=l(),Xg=a("li"),lee=a("strong"),oHe=o("xlnet"),rHe=o(" \u2014 "),Xk=a("a"),tHe=o("XLNetConfig"),aHe=o(" (XLNet model)"),nHe=l(),zg=a("li"),iee=a("strong"),sHe=o("yoso"),lHe=o(" \u2014 "),zk=a("a"),iHe=o("YosoConfig"),dHe=o(" (YOSO model)"),cHe=l(),dee=a("p"),mHe=o("Examples:"),fHe=l(),m(rw.$$.fragment),gHe=l(),Qg=a("div"),m(tw.$$.fragment),hHe=l(),cee=a("p"),uHe=o("Register a new configuration for this class."),sPe=l(),od=a("h2"),Wg=a("a"),mee=a("span"),m(aw.$$.fragment),pHe=l(),fee=a("span"),_He=o("AutoTokenizer"),lPe=l(),Wo=a("div"),m(nw.$$.fragment),bHe=l(),sw=a("p"),vHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Qk=a("a"),FHe=o("AutoTokenizer.from_pretrained()"),THe=o(" class method."),MHe=l(),lw=a("p"),EHe=o("This class cannot be instantiated directly using "),gee=a("code"),CHe=o("__init__()"),wHe=o(" (throws an error)."),AHe=l(),ho=a("div"),m(iw.$$.fragment),yHe=l(),hee=a("p"),LHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xHe=l(),Oa=a("p"),kHe=o("The tokenizer class to instantiate is selected based on the "),uee=a("code"),SHe=o("model_type"),RHe=o(` property of the config object (either
passed as an argument or loaded from `),pee=a("code"),BHe=o("pretrained_model_name_or_path"),PHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ee=a("code"),$He=o("pretrained_model_name_or_path"),IHe=o(":"),qHe=l(),E=a("ul"),Wn=a("li"),bee=a("strong"),NHe=o("albert"),jHe=o(" \u2014 "),Wk=a("a"),DHe=o("AlbertTokenizer"),GHe=o(" or "),Hk=a("a"),OHe=o("AlbertTokenizerFast"),VHe=o(" (ALBERT model)"),XHe=l(),Hn=a("li"),vee=a("strong"),zHe=o("bart"),QHe=o(" \u2014 "),Uk=a("a"),WHe=o("BartTokenizer"),HHe=o(" or "),Jk=a("a"),UHe=o("BartTokenizerFast"),JHe=o(" (BART model)"),YHe=l(),Un=a("li"),Fee=a("strong"),KHe=o("barthez"),ZHe=o(" \u2014 "),Yk=a("a"),eUe=o("BarthezTokenizer"),oUe=o(" or "),Kk=a("a"),rUe=o("BarthezTokenizerFast"),tUe=o(" (BARThez model)"),aUe=l(),Hg=a("li"),Tee=a("strong"),nUe=o("bartpho"),sUe=o(" \u2014 "),Zk=a("a"),lUe=o("BartphoTokenizer"),iUe=o(" (BARTpho model)"),dUe=l(),Jn=a("li"),Mee=a("strong"),cUe=o("bert"),mUe=o(" \u2014 "),eS=a("a"),fUe=o("BertTokenizer"),gUe=o(" or "),oS=a("a"),hUe=o("BertTokenizerFast"),uUe=o(" (BERT model)"),pUe=l(),Ug=a("li"),Eee=a("strong"),_Ue=o("bert-generation"),bUe=o(" \u2014 "),rS=a("a"),vUe=o("BertGenerationTokenizer"),FUe=o(" (Bert Generation model)"),TUe=l(),Jg=a("li"),Cee=a("strong"),MUe=o("bert-japanese"),EUe=o(" \u2014 "),tS=a("a"),CUe=o("BertJapaneseTokenizer"),wUe=o(" (BertJapanese model)"),AUe=l(),Yg=a("li"),wee=a("strong"),yUe=o("bertweet"),LUe=o(" \u2014 "),aS=a("a"),xUe=o("BertweetTokenizer"),kUe=o(" (Bertweet model)"),SUe=l(),Yn=a("li"),Aee=a("strong"),RUe=o("big_bird"),BUe=o(" \u2014 "),nS=a("a"),PUe=o("BigBirdTokenizer"),$Ue=o(" or "),sS=a("a"),IUe=o("BigBirdTokenizerFast"),qUe=o(" (BigBird model)"),NUe=l(),Kn=a("li"),yee=a("strong"),jUe=o("bigbird_pegasus"),DUe=o(" \u2014 "),lS=a("a"),GUe=o("PegasusTokenizer"),OUe=o(" or "),iS=a("a"),VUe=o("PegasusTokenizerFast"),XUe=o(" (BigBirdPegasus model)"),zUe=l(),Zn=a("li"),Lee=a("strong"),QUe=o("blenderbot"),WUe=o(" \u2014 "),dS=a("a"),HUe=o("BlenderbotTokenizer"),UUe=o(" or "),cS=a("a"),JUe=o("BlenderbotTokenizerFast"),YUe=o(" (Blenderbot model)"),KUe=l(),Kg=a("li"),xee=a("strong"),ZUe=o("blenderbot-small"),eJe=o(" \u2014 "),mS=a("a"),oJe=o("BlenderbotSmallTokenizer"),rJe=o(" (BlenderbotSmall model)"),tJe=l(),Zg=a("li"),kee=a("strong"),aJe=o("byt5"),nJe=o(" \u2014 "),fS=a("a"),sJe=o("ByT5Tokenizer"),lJe=o(" (ByT5 model)"),iJe=l(),es=a("li"),See=a("strong"),dJe=o("camembert"),cJe=o(" \u2014 "),gS=a("a"),mJe=o("CamembertTokenizer"),fJe=o(" or "),hS=a("a"),gJe=o("CamembertTokenizerFast"),hJe=o(" (CamemBERT model)"),uJe=l(),eh=a("li"),Ree=a("strong"),pJe=o("canine"),_Je=o(" \u2014 "),uS=a("a"),bJe=o("CanineTokenizer"),vJe=o(" (Canine model)"),FJe=l(),os=a("li"),Bee=a("strong"),TJe=o("clip"),MJe=o(" \u2014 "),pS=a("a"),EJe=o("CLIPTokenizer"),CJe=o(" or "),_S=a("a"),wJe=o("CLIPTokenizerFast"),AJe=o(" (CLIP model)"),yJe=l(),rs=a("li"),Pee=a("strong"),LJe=o("convbert"),xJe=o(" \u2014 "),bS=a("a"),kJe=o("ConvBertTokenizer"),SJe=o(" or "),vS=a("a"),RJe=o("ConvBertTokenizerFast"),BJe=o(" (ConvBERT model)"),PJe=l(),ts=a("li"),$ee=a("strong"),$Je=o("cpm"),IJe=o(" \u2014 "),FS=a("a"),qJe=o("CpmTokenizer"),NJe=o(" or "),Iee=a("code"),jJe=o("CpmTokenizerFast"),DJe=o(" (CPM model)"),GJe=l(),oh=a("li"),qee=a("strong"),OJe=o("ctrl"),VJe=o(" \u2014 "),TS=a("a"),XJe=o("CTRLTokenizer"),zJe=o(" (CTRL model)"),QJe=l(),as=a("li"),Nee=a("strong"),WJe=o("data2vec-text"),HJe=o(" \u2014 "),MS=a("a"),UJe=o("RobertaTokenizer"),JJe=o(" or "),ES=a("a"),YJe=o("RobertaTokenizerFast"),KJe=o(" (Data2VecText model)"),ZJe=l(),ns=a("li"),jee=a("strong"),eYe=o("deberta"),oYe=o(" \u2014 "),CS=a("a"),rYe=o("DebertaTokenizer"),tYe=o(" or "),wS=a("a"),aYe=o("DebertaTokenizerFast"),nYe=o(" (DeBERTa model)"),sYe=l(),ss=a("li"),Dee=a("strong"),lYe=o("deberta-v2"),iYe=o(" \u2014 "),AS=a("a"),dYe=o("DebertaV2Tokenizer"),cYe=o(" or "),yS=a("a"),mYe=o("DebertaV2TokenizerFast"),fYe=o(" (DeBERTa-v2 model)"),gYe=l(),ls=a("li"),Gee=a("strong"),hYe=o("distilbert"),uYe=o(" \u2014 "),LS=a("a"),pYe=o("DistilBertTokenizer"),_Ye=o(" or "),xS=a("a"),bYe=o("DistilBertTokenizerFast"),vYe=o(" (DistilBERT model)"),FYe=l(),is=a("li"),Oee=a("strong"),TYe=o("dpr"),MYe=o(" \u2014 "),kS=a("a"),EYe=o("DPRQuestionEncoderTokenizer"),CYe=o(" or "),SS=a("a"),wYe=o("DPRQuestionEncoderTokenizerFast"),AYe=o(" (DPR model)"),yYe=l(),ds=a("li"),Vee=a("strong"),LYe=o("electra"),xYe=o(" \u2014 "),RS=a("a"),kYe=o("ElectraTokenizer"),SYe=o(" or "),BS=a("a"),RYe=o("ElectraTokenizerFast"),BYe=o(" (ELECTRA model)"),PYe=l(),rh=a("li"),Xee=a("strong"),$Ye=o("flaubert"),IYe=o(" \u2014 "),PS=a("a"),qYe=o("FlaubertTokenizer"),NYe=o(" (FlauBERT model)"),jYe=l(),cs=a("li"),zee=a("strong"),DYe=o("fnet"),GYe=o(" \u2014 "),$S=a("a"),OYe=o("FNetTokenizer"),VYe=o(" or "),IS=a("a"),XYe=o("FNetTokenizerFast"),zYe=o(" (FNet model)"),QYe=l(),th=a("li"),Qee=a("strong"),WYe=o("fsmt"),HYe=o(" \u2014 "),qS=a("a"),UYe=o("FSMTTokenizer"),JYe=o(" (FairSeq Machine-Translation model)"),YYe=l(),ms=a("li"),Wee=a("strong"),KYe=o("funnel"),ZYe=o(" \u2014 "),NS=a("a"),eKe=o("FunnelTokenizer"),oKe=o(" or "),jS=a("a"),rKe=o("FunnelTokenizerFast"),tKe=o(" (Funnel Transformer model)"),aKe=l(),fs=a("li"),Hee=a("strong"),nKe=o("gpt2"),sKe=o(" \u2014 "),DS=a("a"),lKe=o("GPT2Tokenizer"),iKe=o(" or "),GS=a("a"),dKe=o("GPT2TokenizerFast"),cKe=o(" (OpenAI GPT-2 model)"),mKe=l(),gs=a("li"),Uee=a("strong"),fKe=o("gpt_neo"),gKe=o(" \u2014 "),OS=a("a"),hKe=o("GPT2Tokenizer"),uKe=o(" or "),VS=a("a"),pKe=o("GPT2TokenizerFast"),_Ke=o(" (GPT Neo model)"),bKe=l(),hs=a("li"),Jee=a("strong"),vKe=o("gptj"),FKe=o(" \u2014 "),XS=a("a"),TKe=o("GPT2Tokenizer"),MKe=o(" or "),zS=a("a"),EKe=o("GPT2TokenizerFast"),CKe=o(" (GPT-J model)"),wKe=l(),us=a("li"),Yee=a("strong"),AKe=o("herbert"),yKe=o(" \u2014 "),QS=a("a"),LKe=o("HerbertTokenizer"),xKe=o(" or "),WS=a("a"),kKe=o("HerbertTokenizerFast"),SKe=o(" (HerBERT model)"),RKe=l(),ah=a("li"),Kee=a("strong"),BKe=o("hubert"),PKe=o(" \u2014 "),HS=a("a"),$Ke=o("Wav2Vec2CTCTokenizer"),IKe=o(" (Hubert model)"),qKe=l(),ps=a("li"),Zee=a("strong"),NKe=o("ibert"),jKe=o(" \u2014 "),US=a("a"),DKe=o("RobertaTokenizer"),GKe=o(" or "),JS=a("a"),OKe=o("RobertaTokenizerFast"),VKe=o(" (I-BERT model)"),XKe=l(),_s=a("li"),eoe=a("strong"),zKe=o("layoutlm"),QKe=o(" \u2014 "),YS=a("a"),WKe=o("LayoutLMTokenizer"),HKe=o(" or "),KS=a("a"),UKe=o("LayoutLMTokenizerFast"),JKe=o(" (LayoutLM model)"),YKe=l(),bs=a("li"),ooe=a("strong"),KKe=o("layoutlmv2"),ZKe=o(" \u2014 "),ZS=a("a"),eZe=o("LayoutLMv2Tokenizer"),oZe=o(" or "),eR=a("a"),rZe=o("LayoutLMv2TokenizerFast"),tZe=o(" (LayoutLMv2 model)"),aZe=l(),vs=a("li"),roe=a("strong"),nZe=o("layoutxlm"),sZe=o(" \u2014 "),oR=a("a"),lZe=o("LayoutXLMTokenizer"),iZe=o(" or "),rR=a("a"),dZe=o("LayoutXLMTokenizerFast"),cZe=o(" (LayoutXLM model)"),mZe=l(),Fs=a("li"),toe=a("strong"),fZe=o("led"),gZe=o(" \u2014 "),tR=a("a"),hZe=o("LEDTokenizer"),uZe=o(" or "),aR=a("a"),pZe=o("LEDTokenizerFast"),_Ze=o(" (LED model)"),bZe=l(),Ts=a("li"),aoe=a("strong"),vZe=o("longformer"),FZe=o(" \u2014 "),nR=a("a"),TZe=o("LongformerTokenizer"),MZe=o(" or "),sR=a("a"),EZe=o("LongformerTokenizerFast"),CZe=o(" (Longformer model)"),wZe=l(),nh=a("li"),noe=a("strong"),AZe=o("luke"),yZe=o(" \u2014 "),lR=a("a"),LZe=o("LukeTokenizer"),xZe=o(" (LUKE model)"),kZe=l(),Ms=a("li"),soe=a("strong"),SZe=o("lxmert"),RZe=o(" \u2014 "),iR=a("a"),BZe=o("LxmertTokenizer"),PZe=o(" or "),dR=a("a"),$Ze=o("LxmertTokenizerFast"),IZe=o(" (LXMERT model)"),qZe=l(),sh=a("li"),loe=a("strong"),NZe=o("m2m_100"),jZe=o(" \u2014 "),cR=a("a"),DZe=o("M2M100Tokenizer"),GZe=o(" (M2M100 model)"),OZe=l(),lh=a("li"),ioe=a("strong"),VZe=o("marian"),XZe=o(" \u2014 "),mR=a("a"),zZe=o("MarianTokenizer"),QZe=o(" (Marian model)"),WZe=l(),Es=a("li"),doe=a("strong"),HZe=o("mbart"),UZe=o(" \u2014 "),fR=a("a"),JZe=o("MBartTokenizer"),YZe=o(" or "),gR=a("a"),KZe=o("MBartTokenizerFast"),ZZe=o(" (mBART model)"),eeo=l(),Cs=a("li"),coe=a("strong"),oeo=o("mbart50"),reo=o(" \u2014 "),hR=a("a"),teo=o("MBart50Tokenizer"),aeo=o(" or "),uR=a("a"),neo=o("MBart50TokenizerFast"),seo=o(" (mBART-50 model)"),leo=l(),ws=a("li"),moe=a("strong"),ieo=o("megatron-bert"),deo=o(" \u2014 "),pR=a("a"),ceo=o("BertTokenizer"),meo=o(" or "),_R=a("a"),feo=o("BertTokenizerFast"),geo=o(" (MegatronBert model)"),heo=l(),ih=a("li"),foe=a("strong"),ueo=o("mluke"),peo=o(" \u2014 "),bR=a("a"),_eo=o("MLukeTokenizer"),beo=o(" (mLUKE model)"),veo=l(),As=a("li"),goe=a("strong"),Feo=o("mobilebert"),Teo=o(" \u2014 "),vR=a("a"),Meo=o("MobileBertTokenizer"),Eeo=o(" or "),FR=a("a"),Ceo=o("MobileBertTokenizerFast"),weo=o(" (MobileBERT model)"),Aeo=l(),ys=a("li"),hoe=a("strong"),yeo=o("mpnet"),Leo=o(" \u2014 "),TR=a("a"),xeo=o("MPNetTokenizer"),keo=o(" or "),MR=a("a"),Seo=o("MPNetTokenizerFast"),Reo=o(" (MPNet model)"),Beo=l(),Ls=a("li"),uoe=a("strong"),Peo=o("mt5"),$eo=o(" \u2014 "),ER=a("a"),Ieo=o("MT5Tokenizer"),qeo=o(" or "),CR=a("a"),Neo=o("MT5TokenizerFast"),jeo=o(" (mT5 model)"),Deo=l(),xs=a("li"),poe=a("strong"),Geo=o("nystromformer"),Oeo=o(" \u2014 "),wR=a("a"),Veo=o("AlbertTokenizer"),Xeo=o(" or "),AR=a("a"),zeo=o("AlbertTokenizerFast"),Qeo=o(" (Nystromformer model)"),Weo=l(),ks=a("li"),_oe=a("strong"),Heo=o("openai-gpt"),Ueo=o(" \u2014 "),yR=a("a"),Jeo=o("OpenAIGPTTokenizer"),Yeo=o(" or "),LR=a("a"),Keo=o("OpenAIGPTTokenizerFast"),Zeo=o(" (OpenAI GPT model)"),eoo=l(),Ss=a("li"),boe=a("strong"),ooo=o("pegasus"),roo=o(" \u2014 "),xR=a("a"),too=o("PegasusTokenizer"),aoo=o(" or "),kR=a("a"),noo=o("PegasusTokenizerFast"),soo=o(" (Pegasus model)"),loo=l(),dh=a("li"),voe=a("strong"),ioo=o("perceiver"),doo=o(" \u2014 "),SR=a("a"),coo=o("PerceiverTokenizer"),moo=o(" (Perceiver model)"),foo=l(),ch=a("li"),Foe=a("strong"),goo=o("phobert"),hoo=o(" \u2014 "),RR=a("a"),uoo=o("PhobertTokenizer"),poo=o(" (PhoBERT model)"),_oo=l(),mh=a("li"),Toe=a("strong"),boo=o("plbart"),voo=o(" \u2014 "),BR=a("a"),Foo=o("PLBartTokenizer"),Too=o(" (PLBart model)"),Moo=l(),fh=a("li"),Moe=a("strong"),Eoo=o("prophetnet"),Coo=o(" \u2014 "),PR=a("a"),woo=o("ProphetNetTokenizer"),Aoo=o(" (ProphetNet model)"),yoo=l(),Rs=a("li"),Eoe=a("strong"),Loo=o("qdqbert"),xoo=o(" \u2014 "),$R=a("a"),koo=o("BertTokenizer"),Soo=o(" or "),IR=a("a"),Roo=o("BertTokenizerFast"),Boo=o(" (QDQBert model)"),Poo=l(),gh=a("li"),Coe=a("strong"),$oo=o("rag"),Ioo=o(" \u2014 "),qR=a("a"),qoo=o("RagTokenizer"),Noo=o(" (RAG model)"),joo=l(),Bs=a("li"),woe=a("strong"),Doo=o("realm"),Goo=o(" \u2014 "),NR=a("a"),Ooo=o("RealmTokenizer"),Voo=o(" or "),jR=a("a"),Xoo=o("RealmTokenizerFast"),zoo=o(" (Realm model)"),Qoo=l(),Ps=a("li"),Aoe=a("strong"),Woo=o("reformer"),Hoo=o(" \u2014 "),DR=a("a"),Uoo=o("ReformerTokenizer"),Joo=o(" or "),GR=a("a"),Yoo=o("ReformerTokenizerFast"),Koo=o(" (Reformer model)"),Zoo=l(),$s=a("li"),yoe=a("strong"),ero=o("rembert"),oro=o(" \u2014 "),OR=a("a"),rro=o("RemBertTokenizer"),tro=o(" or "),VR=a("a"),aro=o("RemBertTokenizerFast"),nro=o(" (RemBERT model)"),sro=l(),Is=a("li"),Loe=a("strong"),lro=o("retribert"),iro=o(" \u2014 "),XR=a("a"),dro=o("RetriBertTokenizer"),cro=o(" or "),zR=a("a"),mro=o("RetriBertTokenizerFast"),fro=o(" (RetriBERT model)"),gro=l(),qs=a("li"),xoe=a("strong"),hro=o("roberta"),uro=o(" \u2014 "),QR=a("a"),pro=o("RobertaTokenizer"),_ro=o(" or "),WR=a("a"),bro=o("RobertaTokenizerFast"),vro=o(" (RoBERTa model)"),Fro=l(),Ns=a("li"),koe=a("strong"),Tro=o("roformer"),Mro=o(" \u2014 "),HR=a("a"),Ero=o("RoFormerTokenizer"),Cro=o(" or "),UR=a("a"),wro=o("RoFormerTokenizerFast"),Aro=o(" (RoFormer model)"),yro=l(),hh=a("li"),Soe=a("strong"),Lro=o("speech_to_text"),xro=o(" \u2014 "),JR=a("a"),kro=o("Speech2TextTokenizer"),Sro=o(" (Speech2Text model)"),Rro=l(),uh=a("li"),Roe=a("strong"),Bro=o("speech_to_text_2"),Pro=o(" \u2014 "),YR=a("a"),$ro=o("Speech2Text2Tokenizer"),Iro=o(" (Speech2Text2 model)"),qro=l(),js=a("li"),Boe=a("strong"),Nro=o("splinter"),jro=o(" \u2014 "),KR=a("a"),Dro=o("SplinterTokenizer"),Gro=o(" or "),ZR=a("a"),Oro=o("SplinterTokenizerFast"),Vro=o(" (Splinter model)"),Xro=l(),Ds=a("li"),Poe=a("strong"),zro=o("squeezebert"),Qro=o(" \u2014 "),eB=a("a"),Wro=o("SqueezeBertTokenizer"),Hro=o(" or "),oB=a("a"),Uro=o("SqueezeBertTokenizerFast"),Jro=o(" (SqueezeBERT model)"),Yro=l(),Gs=a("li"),$oe=a("strong"),Kro=o("t5"),Zro=o(" \u2014 "),rB=a("a"),eto=o("T5Tokenizer"),oto=o(" or "),tB=a("a"),rto=o("T5TokenizerFast"),tto=o(" (T5 model)"),ato=l(),ph=a("li"),Ioe=a("strong"),nto=o("tapas"),sto=o(" \u2014 "),aB=a("a"),lto=o("TapasTokenizer"),ito=o(" (TAPAS model)"),dto=l(),_h=a("li"),qoe=a("strong"),cto=o("tapex"),mto=o(" \u2014 "),nB=a("a"),fto=o("TapexTokenizer"),gto=o(" (TAPEX model)"),hto=l(),bh=a("li"),Noe=a("strong"),uto=o("transfo-xl"),pto=o(" \u2014 "),sB=a("a"),_to=o("TransfoXLTokenizer"),bto=o(" (Transformer-XL model)"),vto=l(),Os=a("li"),joe=a("strong"),Fto=o("visual_bert"),Tto=o(" \u2014 "),lB=a("a"),Mto=o("BertTokenizer"),Eto=o(" or "),iB=a("a"),Cto=o("BertTokenizerFast"),wto=o(" (VisualBert model)"),Ato=l(),vh=a("li"),Doe=a("strong"),yto=o("wav2vec2"),Lto=o(" \u2014 "),dB=a("a"),xto=o("Wav2Vec2CTCTokenizer"),kto=o(" (Wav2Vec2 model)"),Sto=l(),Fh=a("li"),Goe=a("strong"),Rto=o("wav2vec2_phoneme"),Bto=o(" \u2014 "),cB=a("a"),Pto=o("Wav2Vec2PhonemeCTCTokenizer"),$to=o(" (Wav2Vec2Phoneme model)"),Ito=l(),Vs=a("li"),Ooe=a("strong"),qto=o("xglm"),Nto=o(" \u2014 "),mB=a("a"),jto=o("XGLMTokenizer"),Dto=o(" or "),fB=a("a"),Gto=o("XGLMTokenizerFast"),Oto=o(" (XGLM model)"),Vto=l(),Th=a("li"),Voe=a("strong"),Xto=o("xlm"),zto=o(" \u2014 "),gB=a("a"),Qto=o("XLMTokenizer"),Wto=o(" (XLM model)"),Hto=l(),Mh=a("li"),Xoe=a("strong"),Uto=o("xlm-prophetnet"),Jto=o(" \u2014 "),hB=a("a"),Yto=o("XLMProphetNetTokenizer"),Kto=o(" (XLMProphetNet model)"),Zto=l(),Xs=a("li"),zoe=a("strong"),eao=o("xlm-roberta"),oao=o(" \u2014 "),uB=a("a"),rao=o("XLMRobertaTokenizer"),tao=o(" or "),pB=a("a"),aao=o("XLMRobertaTokenizerFast"),nao=o(" (XLM-RoBERTa model)"),sao=l(),zs=a("li"),Qoe=a("strong"),lao=o("xlm-roberta-xl"),iao=o(" \u2014 "),_B=a("a"),dao=o("RobertaTokenizer"),cao=o(" or "),bB=a("a"),mao=o("RobertaTokenizerFast"),fao=o(" (XLM-RoBERTa-XL model)"),gao=l(),Qs=a("li"),Woe=a("strong"),hao=o("xlnet"),uao=o(" \u2014 "),vB=a("a"),pao=o("XLNetTokenizer"),_ao=o(" or "),FB=a("a"),bao=o("XLNetTokenizerFast"),vao=o(" (XLNet model)"),Fao=l(),Ws=a("li"),Hoe=a("strong"),Tao=o("yoso"),Mao=o(" \u2014 "),TB=a("a"),Eao=o("AlbertTokenizer"),Cao=o(" or "),MB=a("a"),wao=o("AlbertTokenizerFast"),Aao=o(" (YOSO model)"),yao=l(),Uoe=a("p"),Lao=o("Examples:"),xao=l(),m(dw.$$.fragment),kao=l(),Eh=a("div"),m(cw.$$.fragment),Sao=l(),Joe=a("p"),Rao=o("Register a new tokenizer in this mapping."),iPe=l(),rd=a("h2"),Ch=a("a"),Yoe=a("span"),m(mw.$$.fragment),Bao=l(),Koe=a("span"),Pao=o("AutoFeatureExtractor"),dPe=l(),Ho=a("div"),m(fw.$$.fragment),$ao=l(),gw=a("p"),Iao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),EB=a("a"),qao=o("AutoFeatureExtractor.from_pretrained()"),Nao=o(" class method."),jao=l(),hw=a("p"),Dao=o("This class cannot be instantiated directly using "),Zoe=a("code"),Gao=o("__init__()"),Oao=o(" (throws an error)."),Vao=l(),Ie=a("div"),m(uw.$$.fragment),Xao=l(),ere=a("p"),zao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qao=l(),Va=a("p"),Wao=o("The feature extractor class to instantiate is selected based on the "),ore=a("code"),Hao=o("model_type"),Uao=o(` property of the config object
(either passed as an argument or loaded from `),rre=a("code"),Jao=o("pretrained_model_name_or_path"),Yao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tre=a("code"),Kao=o("pretrained_model_name_or_path"),Zao=o(":"),eno=l(),H=a("ul"),wh=a("li"),are=a("strong"),ono=o("beit"),rno=o(" \u2014 "),CB=a("a"),tno=o("BeitFeatureExtractor"),ano=o(" (BEiT model)"),nno=l(),Ah=a("li"),nre=a("strong"),sno=o("clip"),lno=o(" \u2014 "),wB=a("a"),ino=o("CLIPFeatureExtractor"),dno=o(" (CLIP model)"),cno=l(),yh=a("li"),sre=a("strong"),mno=o("convnext"),fno=o(" \u2014 "),AB=a("a"),gno=o("ConvNextFeatureExtractor"),hno=o(" (ConvNext model)"),uno=l(),Lh=a("li"),lre=a("strong"),pno=o("data2vec-audio"),_no=o(" \u2014 "),yB=a("a"),bno=o("Wav2Vec2FeatureExtractor"),vno=o(" (Data2VecAudio model)"),Fno=l(),xh=a("li"),ire=a("strong"),Tno=o("data2vec-vision"),Mno=o(" \u2014 "),LB=a("a"),Eno=o("BeitFeatureExtractor"),Cno=o(" (Data2VecVision model)"),wno=l(),kh=a("li"),dre=a("strong"),Ano=o("deit"),yno=o(" \u2014 "),xB=a("a"),Lno=o("DeiTFeatureExtractor"),xno=o(" (DeiT model)"),kno=l(),Sh=a("li"),cre=a("strong"),Sno=o("detr"),Rno=o(" \u2014 "),kB=a("a"),Bno=o("DetrFeatureExtractor"),Pno=o(" (DETR model)"),$no=l(),Rh=a("li"),mre=a("strong"),Ino=o("dpt"),qno=o(" \u2014 "),SB=a("a"),Nno=o("DPTFeatureExtractor"),jno=o(" (DPT model)"),Dno=l(),Bh=a("li"),fre=a("strong"),Gno=o("glpn"),Ono=o(" \u2014 "),RB=a("a"),Vno=o("GLPNFeatureExtractor"),Xno=o(" (GLPN model)"),zno=l(),Ph=a("li"),gre=a("strong"),Qno=o("hubert"),Wno=o(" \u2014 "),BB=a("a"),Hno=o("Wav2Vec2FeatureExtractor"),Uno=o(" (Hubert model)"),Jno=l(),$h=a("li"),hre=a("strong"),Yno=o("layoutlmv2"),Kno=o(" \u2014 "),PB=a("a"),Zno=o("LayoutLMv2FeatureExtractor"),eso=o(" (LayoutLMv2 model)"),oso=l(),Ih=a("li"),ure=a("strong"),rso=o("maskformer"),tso=o(" \u2014 "),$B=a("a"),aso=o("MaskFormerFeatureExtractor"),nso=o(" (MaskFormer model)"),sso=l(),qh=a("li"),pre=a("strong"),lso=o("perceiver"),iso=o(" \u2014 "),IB=a("a"),dso=o("PerceiverFeatureExtractor"),cso=o(" (Perceiver model)"),mso=l(),Nh=a("li"),_re=a("strong"),fso=o("poolformer"),gso=o(" \u2014 "),qB=a("a"),hso=o("PoolFormerFeatureExtractor"),uso=o(" (PoolFormer model)"),pso=l(),jh=a("li"),bre=a("strong"),_so=o("regnet"),bso=o(" \u2014 "),NB=a("a"),vso=o("ConvNextFeatureExtractor"),Fso=o(" (RegNet model)"),Tso=l(),Dh=a("li"),vre=a("strong"),Mso=o("resnet"),Eso=o(" \u2014 "),jB=a("a"),Cso=o("ConvNextFeatureExtractor"),wso=o(" (ResNet model)"),Aso=l(),Gh=a("li"),Fre=a("strong"),yso=o("segformer"),Lso=o(" \u2014 "),DB=a("a"),xso=o("SegformerFeatureExtractor"),kso=o(" (SegFormer model)"),Sso=l(),Oh=a("li"),Tre=a("strong"),Rso=o("speech_to_text"),Bso=o(" \u2014 "),GB=a("a"),Pso=o("Speech2TextFeatureExtractor"),$so=o(" (Speech2Text model)"),Iso=l(),Vh=a("li"),Mre=a("strong"),qso=o("swin"),Nso=o(" \u2014 "),OB=a("a"),jso=o("ViTFeatureExtractor"),Dso=o(" (Swin model)"),Gso=l(),Xh=a("li"),Ere=a("strong"),Oso=o("van"),Vso=o(" \u2014 "),VB=a("a"),Xso=o("ConvNextFeatureExtractor"),zso=o(" (VAN model)"),Qso=l(),zh=a("li"),Cre=a("strong"),Wso=o("vit"),Hso=o(" \u2014 "),XB=a("a"),Uso=o("ViTFeatureExtractor"),Jso=o(" (ViT model)"),Yso=l(),Qh=a("li"),wre=a("strong"),Kso=o("vit_mae"),Zso=o(" \u2014 "),zB=a("a"),elo=o("ViTFeatureExtractor"),olo=o(" (ViTMAE model)"),rlo=l(),Wh=a("li"),Are=a("strong"),tlo=o("wav2vec2"),alo=o(" \u2014 "),QB=a("a"),nlo=o("Wav2Vec2FeatureExtractor"),slo=o(" (Wav2Vec2 model)"),llo=l(),m(Hh.$$.fragment),ilo=l(),yre=a("p"),dlo=o("Examples:"),clo=l(),m(pw.$$.fragment),mlo=l(),Uh=a("div"),m(_w.$$.fragment),flo=l(),Lre=a("p"),glo=o("Register a new feature extractor for this class."),cPe=l(),td=a("h2"),Jh=a("a"),xre=a("span"),m(bw.$$.fragment),hlo=l(),kre=a("span"),ulo=o("AutoProcessor"),mPe=l(),Uo=a("div"),m(vw.$$.fragment),plo=l(),Fw=a("p"),_lo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WB=a("a"),blo=o("AutoProcessor.from_pretrained()"),vlo=o(" class method."),Flo=l(),Tw=a("p"),Tlo=o("This class cannot be instantiated directly using "),Sre=a("code"),Mlo=o("__init__()"),Elo=o(" (throws an error)."),Clo=l(),qe=a("div"),m(Mw.$$.fragment),wlo=l(),Rre=a("p"),Alo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ylo=l(),ad=a("p"),Llo=o("The processor class to instantiate is selected based on the "),Bre=a("code"),xlo=o("model_type"),klo=o(` property of the config object (either
passed as an argument or loaded from `),Pre=a("code"),Slo=o("pretrained_model_name_or_path"),Rlo=o(" if possible):"),Blo=l(),de=a("ul"),Yh=a("li"),$re=a("strong"),Plo=o("clip"),$lo=o(" \u2014 "),HB=a("a"),Ilo=o("CLIPProcessor"),qlo=o(" (CLIP model)"),Nlo=l(),Kh=a("li"),Ire=a("strong"),jlo=o("layoutlmv2"),Dlo=o(" \u2014 "),UB=a("a"),Glo=o("LayoutLMv2Processor"),Olo=o(" (LayoutLMv2 model)"),Vlo=l(),Zh=a("li"),qre=a("strong"),Xlo=o("layoutxlm"),zlo=o(" \u2014 "),JB=a("a"),Qlo=o("LayoutXLMProcessor"),Wlo=o(" (LayoutXLM model)"),Hlo=l(),eu=a("li"),Nre=a("strong"),Ulo=o("sew"),Jlo=o(" \u2014 "),YB=a("a"),Ylo=o("Wav2Vec2Processor"),Klo=o(" (SEW model)"),Zlo=l(),ou=a("li"),jre=a("strong"),eio=o("sew-d"),oio=o(" \u2014 "),KB=a("a"),rio=o("Wav2Vec2Processor"),tio=o(" (SEW-D model)"),aio=l(),ru=a("li"),Dre=a("strong"),nio=o("speech_to_text"),sio=o(" \u2014 "),ZB=a("a"),lio=o("Speech2TextProcessor"),iio=o(" (Speech2Text model)"),dio=l(),tu=a("li"),Gre=a("strong"),cio=o("speech_to_text_2"),mio=o(" \u2014 "),eP=a("a"),fio=o("Speech2Text2Processor"),gio=o(" (Speech2Text2 model)"),hio=l(),au=a("li"),Ore=a("strong"),uio=o("trocr"),pio=o(" \u2014 "),oP=a("a"),_io=o("TrOCRProcessor"),bio=o(" (TrOCR model)"),vio=l(),nu=a("li"),Vre=a("strong"),Fio=o("unispeech"),Tio=o(" \u2014 "),rP=a("a"),Mio=o("Wav2Vec2Processor"),Eio=o(" (UniSpeech model)"),Cio=l(),su=a("li"),Xre=a("strong"),wio=o("unispeech-sat"),Aio=o(" \u2014 "),tP=a("a"),yio=o("Wav2Vec2Processor"),Lio=o(" (UniSpeechSat model)"),xio=l(),lu=a("li"),zre=a("strong"),kio=o("vilt"),Sio=o(" \u2014 "),aP=a("a"),Rio=o("ViltProcessor"),Bio=o(" (ViLT model)"),Pio=l(),iu=a("li"),Qre=a("strong"),$io=o("vision-text-dual-encoder"),Iio=o(" \u2014 "),nP=a("a"),qio=o("VisionTextDualEncoderProcessor"),Nio=o(" (VisionTextDualEncoder model)"),jio=l(),du=a("li"),Wre=a("strong"),Dio=o("wav2vec2"),Gio=o(" \u2014 "),sP=a("a"),Oio=o("Wav2Vec2Processor"),Vio=o(" (Wav2Vec2 model)"),Xio=l(),cu=a("li"),Hre=a("strong"),zio=o("wavlm"),Qio=o(" \u2014 "),lP=a("a"),Wio=o("Wav2Vec2Processor"),Hio=o(" (WavLM model)"),Uio=l(),m(mu.$$.fragment),Jio=l(),Ure=a("p"),Yio=o("Examples:"),Kio=l(),m(Ew.$$.fragment),Zio=l(),fu=a("div"),m(Cw.$$.fragment),edo=l(),Jre=a("p"),odo=o("Register a new processor for this class."),fPe=l(),nd=a("h2"),gu=a("a"),Yre=a("span"),m(ww.$$.fragment),rdo=l(),Kre=a("span"),tdo=o("AutoModel"),gPe=l(),Jo=a("div"),m(Aw.$$.fragment),ado=l(),sd=a("p"),ndo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iP=a("a"),sdo=o("from_pretrained()"),ldo=o(" class method or the "),dP=a("a"),ido=o("from_config()"),ddo=o(` class
method.`),cdo=l(),yw=a("p"),mdo=o("This class cannot be instantiated directly using "),Zre=a("code"),fdo=o("__init__()"),gdo=o(" (throws an error)."),hdo=l(),Xr=a("div"),m(Lw.$$.fragment),udo=l(),ete=a("p"),pdo=o("Instantiates one of the base model classes of the library from a configuration."),_do=l(),ld=a("p"),bdo=o(`Note:
Loading a model from its configuration file does `),ote=a("strong"),vdo=o("not"),Fdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cP=a("a"),Tdo=o("from_pretrained()"),Mdo=o(" to load the model weights."),Edo=l(),rte=a("p"),Cdo=o("Examples:"),wdo=l(),m(xw.$$.fragment),Ado=l(),Ne=a("div"),m(kw.$$.fragment),ydo=l(),tte=a("p"),Ldo=o("Instantiate one of the base model classes of the library from a pretrained model."),xdo=l(),Xa=a("p"),kdo=o("The model class to instantiate is selected based on the "),ate=a("code"),Sdo=o("model_type"),Rdo=o(` property of the config object (either
passed as an argument or loaded from `),nte=a("code"),Bdo=o("pretrained_model_name_or_path"),Pdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ste=a("code"),$do=o("pretrained_model_name_or_path"),Ido=o(":"),qdo=l(),T=a("ul"),hu=a("li"),lte=a("strong"),Ndo=o("albert"),jdo=o(" \u2014 "),mP=a("a"),Ddo=o("AlbertModel"),Gdo=o(" (ALBERT model)"),Odo=l(),uu=a("li"),ite=a("strong"),Vdo=o("bart"),Xdo=o(" \u2014 "),fP=a("a"),zdo=o("BartModel"),Qdo=o(" (BART model)"),Wdo=l(),pu=a("li"),dte=a("strong"),Hdo=o("beit"),Udo=o(" \u2014 "),gP=a("a"),Jdo=o("BeitModel"),Ydo=o(" (BEiT model)"),Kdo=l(),_u=a("li"),cte=a("strong"),Zdo=o("bert"),eco=o(" \u2014 "),hP=a("a"),oco=o("BertModel"),rco=o(" (BERT model)"),tco=l(),bu=a("li"),mte=a("strong"),aco=o("bert-generation"),nco=o(" \u2014 "),uP=a("a"),sco=o("BertGenerationEncoder"),lco=o(" (Bert Generation model)"),ico=l(),vu=a("li"),fte=a("strong"),dco=o("big_bird"),cco=o(" \u2014 "),pP=a("a"),mco=o("BigBirdModel"),fco=o(" (BigBird model)"),gco=l(),Fu=a("li"),gte=a("strong"),hco=o("bigbird_pegasus"),uco=o(" \u2014 "),_P=a("a"),pco=o("BigBirdPegasusModel"),_co=o(" (BigBirdPegasus model)"),bco=l(),Tu=a("li"),hte=a("strong"),vco=o("blenderbot"),Fco=o(" \u2014 "),bP=a("a"),Tco=o("BlenderbotModel"),Mco=o(" (Blenderbot model)"),Eco=l(),Mu=a("li"),ute=a("strong"),Cco=o("blenderbot-small"),wco=o(" \u2014 "),vP=a("a"),Aco=o("BlenderbotSmallModel"),yco=o(" (BlenderbotSmall model)"),Lco=l(),Eu=a("li"),pte=a("strong"),xco=o("camembert"),kco=o(" \u2014 "),FP=a("a"),Sco=o("CamembertModel"),Rco=o(" (CamemBERT model)"),Bco=l(),Cu=a("li"),_te=a("strong"),Pco=o("canine"),$co=o(" \u2014 "),TP=a("a"),Ico=o("CanineModel"),qco=o(" (Canine model)"),Nco=l(),wu=a("li"),bte=a("strong"),jco=o("clip"),Dco=o(" \u2014 "),MP=a("a"),Gco=o("CLIPModel"),Oco=o(" (CLIP model)"),Vco=l(),Au=a("li"),vte=a("strong"),Xco=o("convbert"),zco=o(" \u2014 "),EP=a("a"),Qco=o("ConvBertModel"),Wco=o(" (ConvBERT model)"),Hco=l(),yu=a("li"),Fte=a("strong"),Uco=o("convnext"),Jco=o(" \u2014 "),CP=a("a"),Yco=o("ConvNextModel"),Kco=o(" (ConvNext model)"),Zco=l(),Lu=a("li"),Tte=a("strong"),emo=o("ctrl"),omo=o(" \u2014 "),wP=a("a"),rmo=o("CTRLModel"),tmo=o(" (CTRL model)"),amo=l(),xu=a("li"),Mte=a("strong"),nmo=o("data2vec-audio"),smo=o(" \u2014 "),AP=a("a"),lmo=o("Data2VecAudioModel"),imo=o(" (Data2VecAudio model)"),dmo=l(),ku=a("li"),Ete=a("strong"),cmo=o("data2vec-text"),mmo=o(" \u2014 "),yP=a("a"),fmo=o("Data2VecTextModel"),gmo=o(" (Data2VecText model)"),hmo=l(),Su=a("li"),Cte=a("strong"),umo=o("data2vec-vision"),pmo=o(" \u2014 "),LP=a("a"),_mo=o("Data2VecVisionModel"),bmo=o(" (Data2VecVision model)"),vmo=l(),Ru=a("li"),wte=a("strong"),Fmo=o("deberta"),Tmo=o(" \u2014 "),xP=a("a"),Mmo=o("DebertaModel"),Emo=o(" (DeBERTa model)"),Cmo=l(),Bu=a("li"),Ate=a("strong"),wmo=o("deberta-v2"),Amo=o(" \u2014 "),kP=a("a"),ymo=o("DebertaV2Model"),Lmo=o(" (DeBERTa-v2 model)"),xmo=l(),Pu=a("li"),yte=a("strong"),kmo=o("decision_transformer"),Smo=o(" \u2014 "),SP=a("a"),Rmo=o("DecisionTransformerModel"),Bmo=o(" (Decision Transformer model)"),Pmo=l(),$u=a("li"),Lte=a("strong"),$mo=o("deit"),Imo=o(" \u2014 "),RP=a("a"),qmo=o("DeiTModel"),Nmo=o(" (DeiT model)"),jmo=l(),Iu=a("li"),xte=a("strong"),Dmo=o("detr"),Gmo=o(" \u2014 "),BP=a("a"),Omo=o("DetrModel"),Vmo=o(" (DETR model)"),Xmo=l(),qu=a("li"),kte=a("strong"),zmo=o("distilbert"),Qmo=o(" \u2014 "),PP=a("a"),Wmo=o("DistilBertModel"),Hmo=o(" (DistilBERT model)"),Umo=l(),Nu=a("li"),Ste=a("strong"),Jmo=o("dpr"),Ymo=o(" \u2014 "),$P=a("a"),Kmo=o("DPRQuestionEncoder"),Zmo=o(" (DPR model)"),efo=l(),ju=a("li"),Rte=a("strong"),ofo=o("dpt"),rfo=o(" \u2014 "),IP=a("a"),tfo=o("DPTModel"),afo=o(" (DPT model)"),nfo=l(),Du=a("li"),Bte=a("strong"),sfo=o("electra"),lfo=o(" \u2014 "),qP=a("a"),ifo=o("ElectraModel"),dfo=o(" (ELECTRA model)"),cfo=l(),Gu=a("li"),Pte=a("strong"),mfo=o("flaubert"),ffo=o(" \u2014 "),NP=a("a"),gfo=o("FlaubertModel"),hfo=o(" (FlauBERT model)"),ufo=l(),Ou=a("li"),$te=a("strong"),pfo=o("fnet"),_fo=o(" \u2014 "),jP=a("a"),bfo=o("FNetModel"),vfo=o(" (FNet model)"),Ffo=l(),Vu=a("li"),Ite=a("strong"),Tfo=o("fsmt"),Mfo=o(" \u2014 "),DP=a("a"),Efo=o("FSMTModel"),Cfo=o(" (FairSeq Machine-Translation model)"),wfo=l(),Hs=a("li"),qte=a("strong"),Afo=o("funnel"),yfo=o(" \u2014 "),GP=a("a"),Lfo=o("FunnelModel"),xfo=o(" or "),OP=a("a"),kfo=o("FunnelBaseModel"),Sfo=o(" (Funnel Transformer model)"),Rfo=l(),Xu=a("li"),Nte=a("strong"),Bfo=o("glpn"),Pfo=o(" \u2014 "),VP=a("a"),$fo=o("GLPNModel"),Ifo=o(" (GLPN model)"),qfo=l(),zu=a("li"),jte=a("strong"),Nfo=o("gpt2"),jfo=o(" \u2014 "),XP=a("a"),Dfo=o("GPT2Model"),Gfo=o(" (OpenAI GPT-2 model)"),Ofo=l(),Qu=a("li"),Dte=a("strong"),Vfo=o("gpt_neo"),Xfo=o(" \u2014 "),zP=a("a"),zfo=o("GPTNeoModel"),Qfo=o(" (GPT Neo model)"),Wfo=l(),Wu=a("li"),Gte=a("strong"),Hfo=o("gptj"),Ufo=o(" \u2014 "),QP=a("a"),Jfo=o("GPTJModel"),Yfo=o(" (GPT-J model)"),Kfo=l(),Hu=a("li"),Ote=a("strong"),Zfo=o("hubert"),ego=o(" \u2014 "),WP=a("a"),ogo=o("HubertModel"),rgo=o(" (Hubert model)"),tgo=l(),Uu=a("li"),Vte=a("strong"),ago=o("ibert"),ngo=o(" \u2014 "),HP=a("a"),sgo=o("IBertModel"),lgo=o(" (I-BERT model)"),igo=l(),Ju=a("li"),Xte=a("strong"),dgo=o("imagegpt"),cgo=o(" \u2014 "),UP=a("a"),mgo=o("ImageGPTModel"),fgo=o(" (ImageGPT model)"),ggo=l(),Yu=a("li"),zte=a("strong"),hgo=o("layoutlm"),ugo=o(" \u2014 "),JP=a("a"),pgo=o("LayoutLMModel"),_go=o(" (LayoutLM model)"),bgo=l(),Ku=a("li"),Qte=a("strong"),vgo=o("layoutlmv2"),Fgo=o(" \u2014 "),YP=a("a"),Tgo=o("LayoutLMv2Model"),Mgo=o(" (LayoutLMv2 model)"),Ego=l(),Zu=a("li"),Wte=a("strong"),Cgo=o("led"),wgo=o(" \u2014 "),KP=a("a"),Ago=o("LEDModel"),ygo=o(" (LED model)"),Lgo=l(),ep=a("li"),Hte=a("strong"),xgo=o("longformer"),kgo=o(" \u2014 "),ZP=a("a"),Sgo=o("LongformerModel"),Rgo=o(" (Longformer model)"),Bgo=l(),op=a("li"),Ute=a("strong"),Pgo=o("luke"),$go=o(" \u2014 "),e$=a("a"),Igo=o("LukeModel"),qgo=o(" (LUKE model)"),Ngo=l(),rp=a("li"),Jte=a("strong"),jgo=o("lxmert"),Dgo=o(" \u2014 "),o$=a("a"),Ggo=o("LxmertModel"),Ogo=o(" (LXMERT model)"),Vgo=l(),tp=a("li"),Yte=a("strong"),Xgo=o("m2m_100"),zgo=o(" \u2014 "),r$=a("a"),Qgo=o("M2M100Model"),Wgo=o(" (M2M100 model)"),Hgo=l(),ap=a("li"),Kte=a("strong"),Ugo=o("marian"),Jgo=o(" \u2014 "),t$=a("a"),Ygo=o("MarianModel"),Kgo=o(" (Marian model)"),Zgo=l(),np=a("li"),Zte=a("strong"),eho=o("maskformer"),oho=o(" \u2014 "),a$=a("a"),rho=o("MaskFormerModel"),tho=o(" (MaskFormer model)"),aho=l(),sp=a("li"),eae=a("strong"),nho=o("mbart"),sho=o(" \u2014 "),n$=a("a"),lho=o("MBartModel"),iho=o(" (mBART model)"),dho=l(),lp=a("li"),oae=a("strong"),cho=o("megatron-bert"),mho=o(" \u2014 "),s$=a("a"),fho=o("MegatronBertModel"),gho=o(" (MegatronBert model)"),hho=l(),ip=a("li"),rae=a("strong"),uho=o("mobilebert"),pho=o(" \u2014 "),l$=a("a"),_ho=o("MobileBertModel"),bho=o(" (MobileBERT model)"),vho=l(),dp=a("li"),tae=a("strong"),Fho=o("mpnet"),Tho=o(" \u2014 "),i$=a("a"),Mho=o("MPNetModel"),Eho=o(" (MPNet model)"),Cho=l(),cp=a("li"),aae=a("strong"),who=o("mt5"),Aho=o(" \u2014 "),d$=a("a"),yho=o("MT5Model"),Lho=o(" (mT5 model)"),xho=l(),mp=a("li"),nae=a("strong"),kho=o("nystromformer"),Sho=o(" \u2014 "),c$=a("a"),Rho=o("NystromformerModel"),Bho=o(" (Nystromformer model)"),Pho=l(),fp=a("li"),sae=a("strong"),$ho=o("openai-gpt"),Iho=o(" \u2014 "),m$=a("a"),qho=o("OpenAIGPTModel"),Nho=o(" (OpenAI GPT model)"),jho=l(),gp=a("li"),lae=a("strong"),Dho=o("pegasus"),Gho=o(" \u2014 "),f$=a("a"),Oho=o("PegasusModel"),Vho=o(" (Pegasus model)"),Xho=l(),hp=a("li"),iae=a("strong"),zho=o("perceiver"),Qho=o(" \u2014 "),g$=a("a"),Who=o("PerceiverModel"),Hho=o(" (Perceiver model)"),Uho=l(),up=a("li"),dae=a("strong"),Jho=o("plbart"),Yho=o(" \u2014 "),h$=a("a"),Kho=o("PLBartModel"),Zho=o(" (PLBart model)"),euo=l(),pp=a("li"),cae=a("strong"),ouo=o("poolformer"),ruo=o(" \u2014 "),u$=a("a"),tuo=o("PoolFormerModel"),auo=o(" (PoolFormer model)"),nuo=l(),_p=a("li"),mae=a("strong"),suo=o("prophetnet"),luo=o(" \u2014 "),p$=a("a"),iuo=o("ProphetNetModel"),duo=o(" (ProphetNet model)"),cuo=l(),bp=a("li"),fae=a("strong"),muo=o("qdqbert"),fuo=o(" \u2014 "),_$=a("a"),guo=o("QDQBertModel"),huo=o(" (QDQBert model)"),uuo=l(),vp=a("li"),gae=a("strong"),puo=o("reformer"),_uo=o(" \u2014 "),b$=a("a"),buo=o("ReformerModel"),vuo=o(" (Reformer model)"),Fuo=l(),Fp=a("li"),hae=a("strong"),Tuo=o("regnet"),Muo=o(" \u2014 "),v$=a("a"),Euo=o("RegNetModel"),Cuo=o(" (RegNet model)"),wuo=l(),Tp=a("li"),uae=a("strong"),Auo=o("rembert"),yuo=o(" \u2014 "),F$=a("a"),Luo=o("RemBertModel"),xuo=o(" (RemBERT model)"),kuo=l(),Mp=a("li"),pae=a("strong"),Suo=o("resnet"),Ruo=o(" \u2014 "),T$=a("a"),Buo=o("ResNetModel"),Puo=o(" (ResNet model)"),$uo=l(),Ep=a("li"),_ae=a("strong"),Iuo=o("retribert"),quo=o(" \u2014 "),M$=a("a"),Nuo=o("RetriBertModel"),juo=o(" (RetriBERT model)"),Duo=l(),Cp=a("li"),bae=a("strong"),Guo=o("roberta"),Ouo=o(" \u2014 "),E$=a("a"),Vuo=o("RobertaModel"),Xuo=o(" (RoBERTa model)"),zuo=l(),wp=a("li"),vae=a("strong"),Quo=o("roformer"),Wuo=o(" \u2014 "),C$=a("a"),Huo=o("RoFormerModel"),Uuo=o(" (RoFormer model)"),Juo=l(),Ap=a("li"),Fae=a("strong"),Yuo=o("segformer"),Kuo=o(" \u2014 "),w$=a("a"),Zuo=o("SegformerModel"),epo=o(" (SegFormer model)"),opo=l(),yp=a("li"),Tae=a("strong"),rpo=o("sew"),tpo=o(" \u2014 "),A$=a("a"),apo=o("SEWModel"),npo=o(" (SEW model)"),spo=l(),Lp=a("li"),Mae=a("strong"),lpo=o("sew-d"),ipo=o(" \u2014 "),y$=a("a"),dpo=o("SEWDModel"),cpo=o(" (SEW-D model)"),mpo=l(),xp=a("li"),Eae=a("strong"),fpo=o("speech_to_text"),gpo=o(" \u2014 "),L$=a("a"),hpo=o("Speech2TextModel"),upo=o(" (Speech2Text model)"),ppo=l(),kp=a("li"),Cae=a("strong"),_po=o("splinter"),bpo=o(" \u2014 "),x$=a("a"),vpo=o("SplinterModel"),Fpo=o(" (Splinter model)"),Tpo=l(),Sp=a("li"),wae=a("strong"),Mpo=o("squeezebert"),Epo=o(" \u2014 "),k$=a("a"),Cpo=o("SqueezeBertModel"),wpo=o(" (SqueezeBERT model)"),Apo=l(),Rp=a("li"),Aae=a("strong"),ypo=o("swin"),Lpo=o(" \u2014 "),S$=a("a"),xpo=o("SwinModel"),kpo=o(" (Swin model)"),Spo=l(),Bp=a("li"),yae=a("strong"),Rpo=o("t5"),Bpo=o(" \u2014 "),R$=a("a"),Ppo=o("T5Model"),$po=o(" (T5 model)"),Ipo=l(),Pp=a("li"),Lae=a("strong"),qpo=o("tapas"),Npo=o(" \u2014 "),B$=a("a"),jpo=o("TapasModel"),Dpo=o(" (TAPAS model)"),Gpo=l(),$p=a("li"),xae=a("strong"),Opo=o("transfo-xl"),Vpo=o(" \u2014 "),P$=a("a"),Xpo=o("TransfoXLModel"),zpo=o(" (Transformer-XL model)"),Qpo=l(),Ip=a("li"),kae=a("strong"),Wpo=o("unispeech"),Hpo=o(" \u2014 "),$$=a("a"),Upo=o("UniSpeechModel"),Jpo=o(" (UniSpeech model)"),Ypo=l(),qp=a("li"),Sae=a("strong"),Kpo=o("unispeech-sat"),Zpo=o(" \u2014 "),I$=a("a"),e_o=o("UniSpeechSatModel"),o_o=o(" (UniSpeechSat model)"),r_o=l(),Np=a("li"),Rae=a("strong"),t_o=o("van"),a_o=o(" \u2014 "),q$=a("a"),n_o=o("VanModel"),s_o=o(" (VAN model)"),l_o=l(),jp=a("li"),Bae=a("strong"),i_o=o("vilt"),d_o=o(" \u2014 "),N$=a("a"),c_o=o("ViltModel"),m_o=o(" (ViLT model)"),f_o=l(),Dp=a("li"),Pae=a("strong"),g_o=o("vision-text-dual-encoder"),h_o=o(" \u2014 "),j$=a("a"),u_o=o("VisionTextDualEncoderModel"),p_o=o(" (VisionTextDualEncoder model)"),__o=l(),Gp=a("li"),$ae=a("strong"),b_o=o("visual_bert"),v_o=o(" \u2014 "),D$=a("a"),F_o=o("VisualBertModel"),T_o=o(" (VisualBert model)"),M_o=l(),Op=a("li"),Iae=a("strong"),E_o=o("vit"),C_o=o(" \u2014 "),G$=a("a"),w_o=o("ViTModel"),A_o=o(" (ViT model)"),y_o=l(),Vp=a("li"),qae=a("strong"),L_o=o("vit_mae"),x_o=o(" \u2014 "),O$=a("a"),k_o=o("ViTMAEModel"),S_o=o(" (ViTMAE model)"),R_o=l(),Xp=a("li"),Nae=a("strong"),B_o=o("wav2vec2"),P_o=o(" \u2014 "),V$=a("a"),$_o=o("Wav2Vec2Model"),I_o=o(" (Wav2Vec2 model)"),q_o=l(),zp=a("li"),jae=a("strong"),N_o=o("wavlm"),j_o=o(" \u2014 "),X$=a("a"),D_o=o("WavLMModel"),G_o=o(" (WavLM model)"),O_o=l(),Qp=a("li"),Dae=a("strong"),V_o=o("xglm"),X_o=o(" \u2014 "),z$=a("a"),z_o=o("XGLMModel"),Q_o=o(" (XGLM model)"),W_o=l(),Wp=a("li"),Gae=a("strong"),H_o=o("xlm"),U_o=o(" \u2014 "),Q$=a("a"),J_o=o("XLMModel"),Y_o=o(" (XLM model)"),K_o=l(),Hp=a("li"),Oae=a("strong"),Z_o=o("xlm-prophetnet"),ebo=o(" \u2014 "),W$=a("a"),obo=o("XLMProphetNetModel"),rbo=o(" (XLMProphetNet model)"),tbo=l(),Up=a("li"),Vae=a("strong"),abo=o("xlm-roberta"),nbo=o(" \u2014 "),H$=a("a"),sbo=o("XLMRobertaModel"),lbo=o(" (XLM-RoBERTa model)"),ibo=l(),Jp=a("li"),Xae=a("strong"),dbo=o("xlm-roberta-xl"),cbo=o(" \u2014 "),U$=a("a"),mbo=o("XLMRobertaXLModel"),fbo=o(" (XLM-RoBERTa-XL model)"),gbo=l(),Yp=a("li"),zae=a("strong"),hbo=o("xlnet"),ubo=o(" \u2014 "),J$=a("a"),pbo=o("XLNetModel"),_bo=o(" (XLNet model)"),bbo=l(),Kp=a("li"),Qae=a("strong"),vbo=o("yoso"),Fbo=o(" \u2014 "),Y$=a("a"),Tbo=o("YosoModel"),Mbo=o(" (YOSO model)"),Ebo=l(),Zp=a("p"),Cbo=o("The model is set in evaluation mode by default using "),Wae=a("code"),wbo=o("model.eval()"),Abo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=a("code"),ybo=o("model.train()"),Lbo=l(),Uae=a("p"),xbo=o("Examples:"),kbo=l(),m(Sw.$$.fragment),hPe=l(),id=a("h2"),e_=a("a"),Jae=a("span"),m(Rw.$$.fragment),Sbo=l(),Yae=a("span"),Rbo=o("AutoModelForPreTraining"),uPe=l(),Yo=a("div"),m(Bw.$$.fragment),Bbo=l(),dd=a("p"),Pbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),K$=a("a"),$bo=o("from_pretrained()"),Ibo=o(" class method or the "),Z$=a("a"),qbo=o("from_config()"),Nbo=o(` class
method.`),jbo=l(),Pw=a("p"),Dbo=o("This class cannot be instantiated directly using "),Kae=a("code"),Gbo=o("__init__()"),Obo=o(" (throws an error)."),Vbo=l(),zr=a("div"),m($w.$$.fragment),Xbo=l(),Zae=a("p"),zbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qbo=l(),cd=a("p"),Wbo=o(`Note:
Loading a model from its configuration file does `),ene=a("strong"),Hbo=o("not"),Ubo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=a("a"),Jbo=o("from_pretrained()"),Ybo=o(" to load the model weights."),Kbo=l(),one=a("p"),Zbo=o("Examples:"),e2o=l(),m(Iw.$$.fragment),o2o=l(),je=a("div"),m(qw.$$.fragment),r2o=l(),rne=a("p"),t2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),a2o=l(),za=a("p"),n2o=o("The model class to instantiate is selected based on the "),tne=a("code"),s2o=o("model_type"),l2o=o(` property of the config object (either
passed as an argument or loaded from `),ane=a("code"),i2o=o("pretrained_model_name_or_path"),d2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nne=a("code"),c2o=o("pretrained_model_name_or_path"),m2o=o(":"),f2o=l(),S=a("ul"),o_=a("li"),sne=a("strong"),g2o=o("albert"),h2o=o(" \u2014 "),oI=a("a"),u2o=o("AlbertForPreTraining"),p2o=o(" (ALBERT model)"),_2o=l(),r_=a("li"),lne=a("strong"),b2o=o("bart"),v2o=o(" \u2014 "),rI=a("a"),F2o=o("BartForConditionalGeneration"),T2o=o(" (BART model)"),M2o=l(),t_=a("li"),ine=a("strong"),E2o=o("bert"),C2o=o(" \u2014 "),tI=a("a"),w2o=o("BertForPreTraining"),A2o=o(" (BERT model)"),y2o=l(),a_=a("li"),dne=a("strong"),L2o=o("big_bird"),x2o=o(" \u2014 "),aI=a("a"),k2o=o("BigBirdForPreTraining"),S2o=o(" (BigBird model)"),R2o=l(),n_=a("li"),cne=a("strong"),B2o=o("camembert"),P2o=o(" \u2014 "),nI=a("a"),$2o=o("CamembertForMaskedLM"),I2o=o(" (CamemBERT model)"),q2o=l(),s_=a("li"),mne=a("strong"),N2o=o("ctrl"),j2o=o(" \u2014 "),sI=a("a"),D2o=o("CTRLLMHeadModel"),G2o=o(" (CTRL model)"),O2o=l(),l_=a("li"),fne=a("strong"),V2o=o("data2vec-text"),X2o=o(" \u2014 "),lI=a("a"),z2o=o("Data2VecTextForMaskedLM"),Q2o=o(" (Data2VecText model)"),W2o=l(),i_=a("li"),gne=a("strong"),H2o=o("deberta"),U2o=o(" \u2014 "),iI=a("a"),J2o=o("DebertaForMaskedLM"),Y2o=o(" (DeBERTa model)"),K2o=l(),d_=a("li"),hne=a("strong"),Z2o=o("deberta-v2"),evo=o(" \u2014 "),dI=a("a"),ovo=o("DebertaV2ForMaskedLM"),rvo=o(" (DeBERTa-v2 model)"),tvo=l(),c_=a("li"),une=a("strong"),avo=o("distilbert"),nvo=o(" \u2014 "),cI=a("a"),svo=o("DistilBertForMaskedLM"),lvo=o(" (DistilBERT model)"),ivo=l(),m_=a("li"),pne=a("strong"),dvo=o("electra"),cvo=o(" \u2014 "),mI=a("a"),mvo=o("ElectraForPreTraining"),fvo=o(" (ELECTRA model)"),gvo=l(),f_=a("li"),_ne=a("strong"),hvo=o("flaubert"),uvo=o(" \u2014 "),fI=a("a"),pvo=o("FlaubertWithLMHeadModel"),_vo=o(" (FlauBERT model)"),bvo=l(),g_=a("li"),bne=a("strong"),vvo=o("fnet"),Fvo=o(" \u2014 "),gI=a("a"),Tvo=o("FNetForPreTraining"),Mvo=o(" (FNet model)"),Evo=l(),h_=a("li"),vne=a("strong"),Cvo=o("fsmt"),wvo=o(" \u2014 "),hI=a("a"),Avo=o("FSMTForConditionalGeneration"),yvo=o(" (FairSeq Machine-Translation model)"),Lvo=l(),u_=a("li"),Fne=a("strong"),xvo=o("funnel"),kvo=o(" \u2014 "),uI=a("a"),Svo=o("FunnelForPreTraining"),Rvo=o(" (Funnel Transformer model)"),Bvo=l(),p_=a("li"),Tne=a("strong"),Pvo=o("gpt2"),$vo=o(" \u2014 "),pI=a("a"),Ivo=o("GPT2LMHeadModel"),qvo=o(" (OpenAI GPT-2 model)"),Nvo=l(),__=a("li"),Mne=a("strong"),jvo=o("ibert"),Dvo=o(" \u2014 "),_I=a("a"),Gvo=o("IBertForMaskedLM"),Ovo=o(" (I-BERT model)"),Vvo=l(),b_=a("li"),Ene=a("strong"),Xvo=o("layoutlm"),zvo=o(" \u2014 "),bI=a("a"),Qvo=o("LayoutLMForMaskedLM"),Wvo=o(" (LayoutLM model)"),Hvo=l(),v_=a("li"),Cne=a("strong"),Uvo=o("longformer"),Jvo=o(" \u2014 "),vI=a("a"),Yvo=o("LongformerForMaskedLM"),Kvo=o(" (Longformer model)"),Zvo=l(),F_=a("li"),wne=a("strong"),eFo=o("lxmert"),oFo=o(" \u2014 "),FI=a("a"),rFo=o("LxmertForPreTraining"),tFo=o(" (LXMERT model)"),aFo=l(),T_=a("li"),Ane=a("strong"),nFo=o("megatron-bert"),sFo=o(" \u2014 "),TI=a("a"),lFo=o("MegatronBertForPreTraining"),iFo=o(" (MegatronBert model)"),dFo=l(),M_=a("li"),yne=a("strong"),cFo=o("mobilebert"),mFo=o(" \u2014 "),MI=a("a"),fFo=o("MobileBertForPreTraining"),gFo=o(" (MobileBERT model)"),hFo=l(),E_=a("li"),Lne=a("strong"),uFo=o("mpnet"),pFo=o(" \u2014 "),EI=a("a"),_Fo=o("MPNetForMaskedLM"),bFo=o(" (MPNet model)"),vFo=l(),C_=a("li"),xne=a("strong"),FFo=o("openai-gpt"),TFo=o(" \u2014 "),CI=a("a"),MFo=o("OpenAIGPTLMHeadModel"),EFo=o(" (OpenAI GPT model)"),CFo=l(),w_=a("li"),kne=a("strong"),wFo=o("retribert"),AFo=o(" \u2014 "),wI=a("a"),yFo=o("RetriBertModel"),LFo=o(" (RetriBERT model)"),xFo=l(),A_=a("li"),Sne=a("strong"),kFo=o("roberta"),SFo=o(" \u2014 "),AI=a("a"),RFo=o("RobertaForMaskedLM"),BFo=o(" (RoBERTa model)"),PFo=l(),y_=a("li"),Rne=a("strong"),$Fo=o("squeezebert"),IFo=o(" \u2014 "),yI=a("a"),qFo=o("SqueezeBertForMaskedLM"),NFo=o(" (SqueezeBERT model)"),jFo=l(),L_=a("li"),Bne=a("strong"),DFo=o("t5"),GFo=o(" \u2014 "),LI=a("a"),OFo=o("T5ForConditionalGeneration"),VFo=o(" (T5 model)"),XFo=l(),x_=a("li"),Pne=a("strong"),zFo=o("tapas"),QFo=o(" \u2014 "),xI=a("a"),WFo=o("TapasForMaskedLM"),HFo=o(" (TAPAS model)"),UFo=l(),k_=a("li"),$ne=a("strong"),JFo=o("transfo-xl"),YFo=o(" \u2014 "),kI=a("a"),KFo=o("TransfoXLLMHeadModel"),ZFo=o(" (Transformer-XL model)"),e1o=l(),S_=a("li"),Ine=a("strong"),o1o=o("unispeech"),r1o=o(" \u2014 "),SI=a("a"),t1o=o("UniSpeechForPreTraining"),a1o=o(" (UniSpeech model)"),n1o=l(),R_=a("li"),qne=a("strong"),s1o=o("unispeech-sat"),l1o=o(" \u2014 "),RI=a("a"),i1o=o("UniSpeechSatForPreTraining"),d1o=o(" (UniSpeechSat model)"),c1o=l(),B_=a("li"),Nne=a("strong"),m1o=o("visual_bert"),f1o=o(" \u2014 "),BI=a("a"),g1o=o("VisualBertForPreTraining"),h1o=o(" (VisualBert model)"),u1o=l(),P_=a("li"),jne=a("strong"),p1o=o("vit_mae"),_1o=o(" \u2014 "),PI=a("a"),b1o=o("ViTMAEForPreTraining"),v1o=o(" (ViTMAE model)"),F1o=l(),$_=a("li"),Dne=a("strong"),T1o=o("wav2vec2"),M1o=o(" \u2014 "),$I=a("a"),E1o=o("Wav2Vec2ForPreTraining"),C1o=o(" (Wav2Vec2 model)"),w1o=l(),I_=a("li"),Gne=a("strong"),A1o=o("xlm"),y1o=o(" \u2014 "),II=a("a"),L1o=o("XLMWithLMHeadModel"),x1o=o(" (XLM model)"),k1o=l(),q_=a("li"),One=a("strong"),S1o=o("xlm-roberta"),R1o=o(" \u2014 "),qI=a("a"),B1o=o("XLMRobertaForMaskedLM"),P1o=o(" (XLM-RoBERTa model)"),$1o=l(),N_=a("li"),Vne=a("strong"),I1o=o("xlm-roberta-xl"),q1o=o(" \u2014 "),NI=a("a"),N1o=o("XLMRobertaXLForMaskedLM"),j1o=o(" (XLM-RoBERTa-XL model)"),D1o=l(),j_=a("li"),Xne=a("strong"),G1o=o("xlnet"),O1o=o(" \u2014 "),jI=a("a"),V1o=o("XLNetLMHeadModel"),X1o=o(" (XLNet model)"),z1o=l(),D_=a("p"),Q1o=o("The model is set in evaluation mode by default using "),zne=a("code"),W1o=o("model.eval()"),H1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=a("code"),U1o=o("model.train()"),J1o=l(),Wne=a("p"),Y1o=o("Examples:"),K1o=l(),m(Nw.$$.fragment),pPe=l(),md=a("h2"),G_=a("a"),Hne=a("span"),m(jw.$$.fragment),Z1o=l(),Une=a("span"),eTo=o("AutoModelForCausalLM"),_Pe=l(),Ko=a("div"),m(Dw.$$.fragment),oTo=l(),fd=a("p"),rTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DI=a("a"),tTo=o("from_pretrained()"),aTo=o(" class method or the "),GI=a("a"),nTo=o("from_config()"),sTo=o(` class
method.`),lTo=l(),Gw=a("p"),iTo=o("This class cannot be instantiated directly using "),Jne=a("code"),dTo=o("__init__()"),cTo=o(" (throws an error)."),mTo=l(),Qr=a("div"),m(Ow.$$.fragment),fTo=l(),Yne=a("p"),gTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hTo=l(),gd=a("p"),uTo=o(`Note:
Loading a model from its configuration file does `),Kne=a("strong"),pTo=o("not"),_To=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=a("a"),bTo=o("from_pretrained()"),vTo=o(" to load the model weights."),FTo=l(),Zne=a("p"),TTo=o("Examples:"),MTo=l(),m(Vw.$$.fragment),ETo=l(),De=a("div"),m(Xw.$$.fragment),CTo=l(),ese=a("p"),wTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ATo=l(),Qa=a("p"),yTo=o("The model class to instantiate is selected based on the "),ose=a("code"),LTo=o("model_type"),xTo=o(` property of the config object (either
passed as an argument or loaded from `),rse=a("code"),kTo=o("pretrained_model_name_or_path"),STo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tse=a("code"),RTo=o("pretrained_model_name_or_path"),BTo=o(":"),PTo=l(),$=a("ul"),O_=a("li"),ase=a("strong"),$To=o("bart"),ITo=o(" \u2014 "),VI=a("a"),qTo=o("BartForCausalLM"),NTo=o(" (BART model)"),jTo=l(),V_=a("li"),nse=a("strong"),DTo=o("bert"),GTo=o(" \u2014 "),XI=a("a"),OTo=o("BertLMHeadModel"),VTo=o(" (BERT model)"),XTo=l(),X_=a("li"),sse=a("strong"),zTo=o("bert-generation"),QTo=o(" \u2014 "),zI=a("a"),WTo=o("BertGenerationDecoder"),HTo=o(" (Bert Generation model)"),UTo=l(),z_=a("li"),lse=a("strong"),JTo=o("big_bird"),YTo=o(" \u2014 "),QI=a("a"),KTo=o("BigBirdForCausalLM"),ZTo=o(" (BigBird model)"),eMo=l(),Q_=a("li"),ise=a("strong"),oMo=o("bigbird_pegasus"),rMo=o(" \u2014 "),WI=a("a"),tMo=o("BigBirdPegasusForCausalLM"),aMo=o(" (BigBirdPegasus model)"),nMo=l(),W_=a("li"),dse=a("strong"),sMo=o("blenderbot"),lMo=o(" \u2014 "),HI=a("a"),iMo=o("BlenderbotForCausalLM"),dMo=o(" (Blenderbot model)"),cMo=l(),H_=a("li"),cse=a("strong"),mMo=o("blenderbot-small"),fMo=o(" \u2014 "),UI=a("a"),gMo=o("BlenderbotSmallForCausalLM"),hMo=o(" (BlenderbotSmall model)"),uMo=l(),U_=a("li"),mse=a("strong"),pMo=o("camembert"),_Mo=o(" \u2014 "),JI=a("a"),bMo=o("CamembertForCausalLM"),vMo=o(" (CamemBERT model)"),FMo=l(),J_=a("li"),fse=a("strong"),TMo=o("ctrl"),MMo=o(" \u2014 "),YI=a("a"),EMo=o("CTRLLMHeadModel"),CMo=o(" (CTRL model)"),wMo=l(),Y_=a("li"),gse=a("strong"),AMo=o("data2vec-text"),yMo=o(" \u2014 "),KI=a("a"),LMo=o("Data2VecTextForCausalLM"),xMo=o(" (Data2VecText model)"),kMo=l(),K_=a("li"),hse=a("strong"),SMo=o("electra"),RMo=o(" \u2014 "),ZI=a("a"),BMo=o("ElectraForCausalLM"),PMo=o(" (ELECTRA model)"),$Mo=l(),Z_=a("li"),use=a("strong"),IMo=o("gpt2"),qMo=o(" \u2014 "),eq=a("a"),NMo=o("GPT2LMHeadModel"),jMo=o(" (OpenAI GPT-2 model)"),DMo=l(),eb=a("li"),pse=a("strong"),GMo=o("gpt_neo"),OMo=o(" \u2014 "),oq=a("a"),VMo=o("GPTNeoForCausalLM"),XMo=o(" (GPT Neo model)"),zMo=l(),ob=a("li"),_se=a("strong"),QMo=o("gptj"),WMo=o(" \u2014 "),rq=a("a"),HMo=o("GPTJForCausalLM"),UMo=o(" (GPT-J model)"),JMo=l(),rb=a("li"),bse=a("strong"),YMo=o("marian"),KMo=o(" \u2014 "),tq=a("a"),ZMo=o("MarianForCausalLM"),e4o=o(" (Marian model)"),o4o=l(),tb=a("li"),vse=a("strong"),r4o=o("mbart"),t4o=o(" \u2014 "),aq=a("a"),a4o=o("MBartForCausalLM"),n4o=o(" (mBART model)"),s4o=l(),ab=a("li"),Fse=a("strong"),l4o=o("megatron-bert"),i4o=o(" \u2014 "),nq=a("a"),d4o=o("MegatronBertForCausalLM"),c4o=o(" (MegatronBert model)"),m4o=l(),nb=a("li"),Tse=a("strong"),f4o=o("openai-gpt"),g4o=o(" \u2014 "),sq=a("a"),h4o=o("OpenAIGPTLMHeadModel"),u4o=o(" (OpenAI GPT model)"),p4o=l(),sb=a("li"),Mse=a("strong"),_4o=o("pegasus"),b4o=o(" \u2014 "),lq=a("a"),v4o=o("PegasusForCausalLM"),F4o=o(" (Pegasus model)"),T4o=l(),lb=a("li"),Ese=a("strong"),M4o=o("plbart"),E4o=o(" \u2014 "),iq=a("a"),C4o=o("PLBartForCausalLM"),w4o=o(" (PLBart model)"),A4o=l(),ib=a("li"),Cse=a("strong"),y4o=o("prophetnet"),L4o=o(" \u2014 "),dq=a("a"),x4o=o("ProphetNetForCausalLM"),k4o=o(" (ProphetNet model)"),S4o=l(),db=a("li"),wse=a("strong"),R4o=o("qdqbert"),B4o=o(" \u2014 "),cq=a("a"),P4o=o("QDQBertLMHeadModel"),$4o=o(" (QDQBert model)"),I4o=l(),cb=a("li"),Ase=a("strong"),q4o=o("reformer"),N4o=o(" \u2014 "),mq=a("a"),j4o=o("ReformerModelWithLMHead"),D4o=o(" (Reformer model)"),G4o=l(),mb=a("li"),yse=a("strong"),O4o=o("rembert"),V4o=o(" \u2014 "),fq=a("a"),X4o=o("RemBertForCausalLM"),z4o=o(" (RemBERT model)"),Q4o=l(),fb=a("li"),Lse=a("strong"),W4o=o("roberta"),H4o=o(" \u2014 "),gq=a("a"),U4o=o("RobertaForCausalLM"),J4o=o(" (RoBERTa model)"),Y4o=l(),gb=a("li"),xse=a("strong"),K4o=o("roformer"),Z4o=o(" \u2014 "),hq=a("a"),eEo=o("RoFormerForCausalLM"),oEo=o(" (RoFormer model)"),rEo=l(),hb=a("li"),kse=a("strong"),tEo=o("speech_to_text_2"),aEo=o(" \u2014 "),uq=a("a"),nEo=o("Speech2Text2ForCausalLM"),sEo=o(" (Speech2Text2 model)"),lEo=l(),ub=a("li"),Sse=a("strong"),iEo=o("transfo-xl"),dEo=o(" \u2014 "),pq=a("a"),cEo=o("TransfoXLLMHeadModel"),mEo=o(" (Transformer-XL model)"),fEo=l(),pb=a("li"),Rse=a("strong"),gEo=o("trocr"),hEo=o(" \u2014 "),_q=a("a"),uEo=o("TrOCRForCausalLM"),pEo=o(" (TrOCR model)"),_Eo=l(),_b=a("li"),Bse=a("strong"),bEo=o("xglm"),vEo=o(" \u2014 "),bq=a("a"),FEo=o("XGLMForCausalLM"),TEo=o(" (XGLM model)"),MEo=l(),bb=a("li"),Pse=a("strong"),EEo=o("xlm"),CEo=o(" \u2014 "),vq=a("a"),wEo=o("XLMWithLMHeadModel"),AEo=o(" (XLM model)"),yEo=l(),vb=a("li"),$se=a("strong"),LEo=o("xlm-prophetnet"),xEo=o(" \u2014 "),Fq=a("a"),kEo=o("XLMProphetNetForCausalLM"),SEo=o(" (XLMProphetNet model)"),REo=l(),Fb=a("li"),Ise=a("strong"),BEo=o("xlm-roberta"),PEo=o(" \u2014 "),Tq=a("a"),$Eo=o("XLMRobertaForCausalLM"),IEo=o(" (XLM-RoBERTa model)"),qEo=l(),Tb=a("li"),qse=a("strong"),NEo=o("xlm-roberta-xl"),jEo=o(" \u2014 "),Mq=a("a"),DEo=o("XLMRobertaXLForCausalLM"),GEo=o(" (XLM-RoBERTa-XL model)"),OEo=l(),Mb=a("li"),Nse=a("strong"),VEo=o("xlnet"),XEo=o(" \u2014 "),Eq=a("a"),zEo=o("XLNetLMHeadModel"),QEo=o(" (XLNet model)"),WEo=l(),Eb=a("p"),HEo=o("The model is set in evaluation mode by default using "),jse=a("code"),UEo=o("model.eval()"),JEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dse=a("code"),YEo=o("model.train()"),KEo=l(),Gse=a("p"),ZEo=o("Examples:"),e5o=l(),m(zw.$$.fragment),bPe=l(),hd=a("h2"),Cb=a("a"),Ose=a("span"),m(Qw.$$.fragment),o5o=l(),Vse=a("span"),r5o=o("AutoModelForMaskedLM"),vPe=l(),Zo=a("div"),m(Ww.$$.fragment),t5o=l(),ud=a("p"),a5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cq=a("a"),n5o=o("from_pretrained()"),s5o=o(" class method or the "),wq=a("a"),l5o=o("from_config()"),i5o=o(` class
method.`),d5o=l(),Hw=a("p"),c5o=o("This class cannot be instantiated directly using "),Xse=a("code"),m5o=o("__init__()"),f5o=o(" (throws an error)."),g5o=l(),Wr=a("div"),m(Uw.$$.fragment),h5o=l(),zse=a("p"),u5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p5o=l(),pd=a("p"),_5o=o(`Note:
Loading a model from its configuration file does `),Qse=a("strong"),b5o=o("not"),v5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=a("a"),F5o=o("from_pretrained()"),T5o=o(" to load the model weights."),M5o=l(),Wse=a("p"),E5o=o("Examples:"),C5o=l(),m(Jw.$$.fragment),w5o=l(),Ge=a("div"),m(Yw.$$.fragment),A5o=l(),Hse=a("p"),y5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L5o=l(),Wa=a("p"),x5o=o("The model class to instantiate is selected based on the "),Use=a("code"),k5o=o("model_type"),S5o=o(` property of the config object (either
passed as an argument or loaded from `),Jse=a("code"),R5o=o("pretrained_model_name_or_path"),B5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=a("code"),P5o=o("pretrained_model_name_or_path"),$5o=o(":"),I5o=l(),I=a("ul"),wb=a("li"),Kse=a("strong"),q5o=o("albert"),N5o=o(" \u2014 "),yq=a("a"),j5o=o("AlbertForMaskedLM"),D5o=o(" (ALBERT model)"),G5o=l(),Ab=a("li"),Zse=a("strong"),O5o=o("bart"),V5o=o(" \u2014 "),Lq=a("a"),X5o=o("BartForConditionalGeneration"),z5o=o(" (BART model)"),Q5o=l(),yb=a("li"),ele=a("strong"),W5o=o("bert"),H5o=o(" \u2014 "),xq=a("a"),U5o=o("BertForMaskedLM"),J5o=o(" (BERT model)"),Y5o=l(),Lb=a("li"),ole=a("strong"),K5o=o("big_bird"),Z5o=o(" \u2014 "),kq=a("a"),e3o=o("BigBirdForMaskedLM"),o3o=o(" (BigBird model)"),r3o=l(),xb=a("li"),rle=a("strong"),t3o=o("camembert"),a3o=o(" \u2014 "),Sq=a("a"),n3o=o("CamembertForMaskedLM"),s3o=o(" (CamemBERT model)"),l3o=l(),kb=a("li"),tle=a("strong"),i3o=o("convbert"),d3o=o(" \u2014 "),Rq=a("a"),c3o=o("ConvBertForMaskedLM"),m3o=o(" (ConvBERT model)"),f3o=l(),Sb=a("li"),ale=a("strong"),g3o=o("data2vec-text"),h3o=o(" \u2014 "),Bq=a("a"),u3o=o("Data2VecTextForMaskedLM"),p3o=o(" (Data2VecText model)"),_3o=l(),Rb=a("li"),nle=a("strong"),b3o=o("deberta"),v3o=o(" \u2014 "),Pq=a("a"),F3o=o("DebertaForMaskedLM"),T3o=o(" (DeBERTa model)"),M3o=l(),Bb=a("li"),sle=a("strong"),E3o=o("deberta-v2"),C3o=o(" \u2014 "),$q=a("a"),w3o=o("DebertaV2ForMaskedLM"),A3o=o(" (DeBERTa-v2 model)"),y3o=l(),Pb=a("li"),lle=a("strong"),L3o=o("distilbert"),x3o=o(" \u2014 "),Iq=a("a"),k3o=o("DistilBertForMaskedLM"),S3o=o(" (DistilBERT model)"),R3o=l(),$b=a("li"),ile=a("strong"),B3o=o("electra"),P3o=o(" \u2014 "),qq=a("a"),$3o=o("ElectraForMaskedLM"),I3o=o(" (ELECTRA model)"),q3o=l(),Ib=a("li"),dle=a("strong"),N3o=o("flaubert"),j3o=o(" \u2014 "),Nq=a("a"),D3o=o("FlaubertWithLMHeadModel"),G3o=o(" (FlauBERT model)"),O3o=l(),qb=a("li"),cle=a("strong"),V3o=o("fnet"),X3o=o(" \u2014 "),jq=a("a"),z3o=o("FNetForMaskedLM"),Q3o=o(" (FNet model)"),W3o=l(),Nb=a("li"),mle=a("strong"),H3o=o("funnel"),U3o=o(" \u2014 "),Dq=a("a"),J3o=o("FunnelForMaskedLM"),Y3o=o(" (Funnel Transformer model)"),K3o=l(),jb=a("li"),fle=a("strong"),Z3o=o("ibert"),eCo=o(" \u2014 "),Gq=a("a"),oCo=o("IBertForMaskedLM"),rCo=o(" (I-BERT model)"),tCo=l(),Db=a("li"),gle=a("strong"),aCo=o("layoutlm"),nCo=o(" \u2014 "),Oq=a("a"),sCo=o("LayoutLMForMaskedLM"),lCo=o(" (LayoutLM model)"),iCo=l(),Gb=a("li"),hle=a("strong"),dCo=o("longformer"),cCo=o(" \u2014 "),Vq=a("a"),mCo=o("LongformerForMaskedLM"),fCo=o(" (Longformer model)"),gCo=l(),Ob=a("li"),ule=a("strong"),hCo=o("mbart"),uCo=o(" \u2014 "),Xq=a("a"),pCo=o("MBartForConditionalGeneration"),_Co=o(" (mBART model)"),bCo=l(),Vb=a("li"),ple=a("strong"),vCo=o("megatron-bert"),FCo=o(" \u2014 "),zq=a("a"),TCo=o("MegatronBertForMaskedLM"),MCo=o(" (MegatronBert model)"),ECo=l(),Xb=a("li"),_le=a("strong"),CCo=o("mobilebert"),wCo=o(" \u2014 "),Qq=a("a"),ACo=o("MobileBertForMaskedLM"),yCo=o(" (MobileBERT model)"),LCo=l(),zb=a("li"),ble=a("strong"),xCo=o("mpnet"),kCo=o(" \u2014 "),Wq=a("a"),SCo=o("MPNetForMaskedLM"),RCo=o(" (MPNet model)"),BCo=l(),Qb=a("li"),vle=a("strong"),PCo=o("nystromformer"),$Co=o(" \u2014 "),Hq=a("a"),ICo=o("NystromformerForMaskedLM"),qCo=o(" (Nystromformer model)"),NCo=l(),Wb=a("li"),Fle=a("strong"),jCo=o("perceiver"),DCo=o(" \u2014 "),Uq=a("a"),GCo=o("PerceiverForMaskedLM"),OCo=o(" (Perceiver model)"),VCo=l(),Hb=a("li"),Tle=a("strong"),XCo=o("qdqbert"),zCo=o(" \u2014 "),Jq=a("a"),QCo=o("QDQBertForMaskedLM"),WCo=o(" (QDQBert model)"),HCo=l(),Ub=a("li"),Mle=a("strong"),UCo=o("reformer"),JCo=o(" \u2014 "),Yq=a("a"),YCo=o("ReformerForMaskedLM"),KCo=o(" (Reformer model)"),ZCo=l(),Jb=a("li"),Ele=a("strong"),e6o=o("rembert"),o6o=o(" \u2014 "),Kq=a("a"),r6o=o("RemBertForMaskedLM"),t6o=o(" (RemBERT model)"),a6o=l(),Yb=a("li"),Cle=a("strong"),n6o=o("roberta"),s6o=o(" \u2014 "),Zq=a("a"),l6o=o("RobertaForMaskedLM"),i6o=o(" (RoBERTa model)"),d6o=l(),Kb=a("li"),wle=a("strong"),c6o=o("roformer"),m6o=o(" \u2014 "),eN=a("a"),f6o=o("RoFormerForMaskedLM"),g6o=o(" (RoFormer model)"),h6o=l(),Zb=a("li"),Ale=a("strong"),u6o=o("squeezebert"),p6o=o(" \u2014 "),oN=a("a"),_6o=o("SqueezeBertForMaskedLM"),b6o=o(" (SqueezeBERT model)"),v6o=l(),e2=a("li"),yle=a("strong"),F6o=o("tapas"),T6o=o(" \u2014 "),rN=a("a"),M6o=o("TapasForMaskedLM"),E6o=o(" (TAPAS model)"),C6o=l(),o2=a("li"),Lle=a("strong"),w6o=o("wav2vec2"),A6o=o(" \u2014 "),xle=a("code"),y6o=o("Wav2Vec2ForMaskedLM"),L6o=o(" (Wav2Vec2 model)"),x6o=l(),r2=a("li"),kle=a("strong"),k6o=o("xlm"),S6o=o(" \u2014 "),tN=a("a"),R6o=o("XLMWithLMHeadModel"),B6o=o(" (XLM model)"),P6o=l(),t2=a("li"),Sle=a("strong"),$6o=o("xlm-roberta"),I6o=o(" \u2014 "),aN=a("a"),q6o=o("XLMRobertaForMaskedLM"),N6o=o(" (XLM-RoBERTa model)"),j6o=l(),a2=a("li"),Rle=a("strong"),D6o=o("xlm-roberta-xl"),G6o=o(" \u2014 "),nN=a("a"),O6o=o("XLMRobertaXLForMaskedLM"),V6o=o(" (XLM-RoBERTa-XL model)"),X6o=l(),n2=a("li"),Ble=a("strong"),z6o=o("yoso"),Q6o=o(" \u2014 "),sN=a("a"),W6o=o("YosoForMaskedLM"),H6o=o(" (YOSO model)"),U6o=l(),s2=a("p"),J6o=o("The model is set in evaluation mode by default using "),Ple=a("code"),Y6o=o("model.eval()"),K6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=a("code"),Z6o=o("model.train()"),ewo=l(),Ile=a("p"),owo=o("Examples:"),rwo=l(),m(Kw.$$.fragment),FPe=l(),_d=a("h2"),l2=a("a"),qle=a("span"),m(Zw.$$.fragment),two=l(),Nle=a("span"),awo=o("AutoModelForSeq2SeqLM"),TPe=l(),er=a("div"),m(eA.$$.fragment),nwo=l(),bd=a("p"),swo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lN=a("a"),lwo=o("from_pretrained()"),iwo=o(" class method or the "),iN=a("a"),dwo=o("from_config()"),cwo=o(` class
method.`),mwo=l(),oA=a("p"),fwo=o("This class cannot be instantiated directly using "),jle=a("code"),gwo=o("__init__()"),hwo=o(" (throws an error)."),uwo=l(),Hr=a("div"),m(rA.$$.fragment),pwo=l(),Dle=a("p"),_wo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bwo=l(),vd=a("p"),vwo=o(`Note:
Loading a model from its configuration file does `),Gle=a("strong"),Fwo=o("not"),Two=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=a("a"),Mwo=o("from_pretrained()"),Ewo=o(" to load the model weights."),Cwo=l(),Ole=a("p"),wwo=o("Examples:"),Awo=l(),m(tA.$$.fragment),ywo=l(),Oe=a("div"),m(aA.$$.fragment),Lwo=l(),Vle=a("p"),xwo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kwo=l(),Ha=a("p"),Swo=o("The model class to instantiate is selected based on the "),Xle=a("code"),Rwo=o("model_type"),Bwo=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),Pwo=o("pretrained_model_name_or_path"),$wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qle=a("code"),Iwo=o("pretrained_model_name_or_path"),qwo=o(":"),Nwo=l(),ne=a("ul"),i2=a("li"),Wle=a("strong"),jwo=o("bart"),Dwo=o(" \u2014 "),cN=a("a"),Gwo=o("BartForConditionalGeneration"),Owo=o(" (BART model)"),Vwo=l(),d2=a("li"),Hle=a("strong"),Xwo=o("bigbird_pegasus"),zwo=o(" \u2014 "),mN=a("a"),Qwo=o("BigBirdPegasusForConditionalGeneration"),Wwo=o(" (BigBirdPegasus model)"),Hwo=l(),c2=a("li"),Ule=a("strong"),Uwo=o("blenderbot"),Jwo=o(" \u2014 "),fN=a("a"),Ywo=o("BlenderbotForConditionalGeneration"),Kwo=o(" (Blenderbot model)"),Zwo=l(),m2=a("li"),Jle=a("strong"),eAo=o("blenderbot-small"),oAo=o(" \u2014 "),gN=a("a"),rAo=o("BlenderbotSmallForConditionalGeneration"),tAo=o(" (BlenderbotSmall model)"),aAo=l(),f2=a("li"),Yle=a("strong"),nAo=o("encoder-decoder"),sAo=o(" \u2014 "),hN=a("a"),lAo=o("EncoderDecoderModel"),iAo=o(" (Encoder decoder model)"),dAo=l(),g2=a("li"),Kle=a("strong"),cAo=o("fsmt"),mAo=o(" \u2014 "),uN=a("a"),fAo=o("FSMTForConditionalGeneration"),gAo=o(" (FairSeq Machine-Translation model)"),hAo=l(),h2=a("li"),Zle=a("strong"),uAo=o("led"),pAo=o(" \u2014 "),pN=a("a"),_Ao=o("LEDForConditionalGeneration"),bAo=o(" (LED model)"),vAo=l(),u2=a("li"),eie=a("strong"),FAo=o("m2m_100"),TAo=o(" \u2014 "),_N=a("a"),MAo=o("M2M100ForConditionalGeneration"),EAo=o(" (M2M100 model)"),CAo=l(),p2=a("li"),oie=a("strong"),wAo=o("marian"),AAo=o(" \u2014 "),bN=a("a"),yAo=o("MarianMTModel"),LAo=o(" (Marian model)"),xAo=l(),_2=a("li"),rie=a("strong"),kAo=o("mbart"),SAo=o(" \u2014 "),vN=a("a"),RAo=o("MBartForConditionalGeneration"),BAo=o(" (mBART model)"),PAo=l(),b2=a("li"),tie=a("strong"),$Ao=o("mt5"),IAo=o(" \u2014 "),FN=a("a"),qAo=o("MT5ForConditionalGeneration"),NAo=o(" (mT5 model)"),jAo=l(),v2=a("li"),aie=a("strong"),DAo=o("pegasus"),GAo=o(" \u2014 "),TN=a("a"),OAo=o("PegasusForConditionalGeneration"),VAo=o(" (Pegasus model)"),XAo=l(),F2=a("li"),nie=a("strong"),zAo=o("plbart"),QAo=o(" \u2014 "),MN=a("a"),WAo=o("PLBartForConditionalGeneration"),HAo=o(" (PLBart model)"),UAo=l(),T2=a("li"),sie=a("strong"),JAo=o("prophetnet"),YAo=o(" \u2014 "),EN=a("a"),KAo=o("ProphetNetForConditionalGeneration"),ZAo=o(" (ProphetNet model)"),e0o=l(),M2=a("li"),lie=a("strong"),o0o=o("t5"),r0o=o(" \u2014 "),CN=a("a"),t0o=o("T5ForConditionalGeneration"),a0o=o(" (T5 model)"),n0o=l(),E2=a("li"),iie=a("strong"),s0o=o("tapex"),l0o=o(" \u2014 "),wN=a("a"),i0o=o("BartForConditionalGeneration"),d0o=o(" (TAPEX model)"),c0o=l(),C2=a("li"),die=a("strong"),m0o=o("xlm-prophetnet"),f0o=o(" \u2014 "),AN=a("a"),g0o=o("XLMProphetNetForConditionalGeneration"),h0o=o(" (XLMProphetNet model)"),u0o=l(),w2=a("p"),p0o=o("The model is set in evaluation mode by default using "),cie=a("code"),_0o=o("model.eval()"),b0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),v0o=o("model.train()"),F0o=l(),fie=a("p"),T0o=o("Examples:"),M0o=l(),m(nA.$$.fragment),MPe=l(),Fd=a("h2"),A2=a("a"),gie=a("span"),m(sA.$$.fragment),E0o=l(),hie=a("span"),C0o=o("AutoModelForSequenceClassification"),EPe=l(),or=a("div"),m(lA.$$.fragment),w0o=l(),Td=a("p"),A0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yN=a("a"),y0o=o("from_pretrained()"),L0o=o(" class method or the "),LN=a("a"),x0o=o("from_config()"),k0o=o(` class
method.`),S0o=l(),iA=a("p"),R0o=o("This class cannot be instantiated directly using "),uie=a("code"),B0o=o("__init__()"),P0o=o(" (throws an error)."),$0o=l(),Ur=a("div"),m(dA.$$.fragment),I0o=l(),pie=a("p"),q0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),N0o=l(),Md=a("p"),j0o=o(`Note:
Loading a model from its configuration file does `),_ie=a("strong"),D0o=o("not"),G0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=a("a"),O0o=o("from_pretrained()"),V0o=o(" to load the model weights."),X0o=l(),bie=a("p"),z0o=o("Examples:"),Q0o=l(),m(cA.$$.fragment),W0o=l(),Ve=a("div"),m(mA.$$.fragment),H0o=l(),vie=a("p"),U0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),J0o=l(),Ua=a("p"),Y0o=o("The model class to instantiate is selected based on the "),Fie=a("code"),K0o=o("model_type"),Z0o=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),eyo=o("pretrained_model_name_or_path"),oyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),ryo=o("pretrained_model_name_or_path"),tyo=o(":"),ayo=l(),y=a("ul"),y2=a("li"),Eie=a("strong"),nyo=o("albert"),syo=o(" \u2014 "),kN=a("a"),lyo=o("AlbertForSequenceClassification"),iyo=o(" (ALBERT model)"),dyo=l(),L2=a("li"),Cie=a("strong"),cyo=o("bart"),myo=o(" \u2014 "),SN=a("a"),fyo=o("BartForSequenceClassification"),gyo=o(" (BART model)"),hyo=l(),x2=a("li"),wie=a("strong"),uyo=o("bert"),pyo=o(" \u2014 "),RN=a("a"),_yo=o("BertForSequenceClassification"),byo=o(" (BERT model)"),vyo=l(),k2=a("li"),Aie=a("strong"),Fyo=o("big_bird"),Tyo=o(" \u2014 "),BN=a("a"),Myo=o("BigBirdForSequenceClassification"),Eyo=o(" (BigBird model)"),Cyo=l(),S2=a("li"),yie=a("strong"),wyo=o("bigbird_pegasus"),Ayo=o(" \u2014 "),PN=a("a"),yyo=o("BigBirdPegasusForSequenceClassification"),Lyo=o(" (BigBirdPegasus model)"),xyo=l(),R2=a("li"),Lie=a("strong"),kyo=o("camembert"),Syo=o(" \u2014 "),$N=a("a"),Ryo=o("CamembertForSequenceClassification"),Byo=o(" (CamemBERT model)"),Pyo=l(),B2=a("li"),xie=a("strong"),$yo=o("canine"),Iyo=o(" \u2014 "),IN=a("a"),qyo=o("CanineForSequenceClassification"),Nyo=o(" (Canine model)"),jyo=l(),P2=a("li"),kie=a("strong"),Dyo=o("convbert"),Gyo=o(" \u2014 "),qN=a("a"),Oyo=o("ConvBertForSequenceClassification"),Vyo=o(" (ConvBERT model)"),Xyo=l(),$2=a("li"),Sie=a("strong"),zyo=o("ctrl"),Qyo=o(" \u2014 "),NN=a("a"),Wyo=o("CTRLForSequenceClassification"),Hyo=o(" (CTRL model)"),Uyo=l(),I2=a("li"),Rie=a("strong"),Jyo=o("data2vec-text"),Yyo=o(" \u2014 "),jN=a("a"),Kyo=o("Data2VecTextForSequenceClassification"),Zyo=o(" (Data2VecText model)"),e8o=l(),q2=a("li"),Bie=a("strong"),o8o=o("deberta"),r8o=o(" \u2014 "),DN=a("a"),t8o=o("DebertaForSequenceClassification"),a8o=o(" (DeBERTa model)"),n8o=l(),N2=a("li"),Pie=a("strong"),s8o=o("deberta-v2"),l8o=o(" \u2014 "),GN=a("a"),i8o=o("DebertaV2ForSequenceClassification"),d8o=o(" (DeBERTa-v2 model)"),c8o=l(),j2=a("li"),$ie=a("strong"),m8o=o("distilbert"),f8o=o(" \u2014 "),ON=a("a"),g8o=o("DistilBertForSequenceClassification"),h8o=o(" (DistilBERT model)"),u8o=l(),D2=a("li"),Iie=a("strong"),p8o=o("electra"),_8o=o(" \u2014 "),VN=a("a"),b8o=o("ElectraForSequenceClassification"),v8o=o(" (ELECTRA model)"),F8o=l(),G2=a("li"),qie=a("strong"),T8o=o("flaubert"),M8o=o(" \u2014 "),XN=a("a"),E8o=o("FlaubertForSequenceClassification"),C8o=o(" (FlauBERT model)"),w8o=l(),O2=a("li"),Nie=a("strong"),A8o=o("fnet"),y8o=o(" \u2014 "),zN=a("a"),L8o=o("FNetForSequenceClassification"),x8o=o(" (FNet model)"),k8o=l(),V2=a("li"),jie=a("strong"),S8o=o("funnel"),R8o=o(" \u2014 "),QN=a("a"),B8o=o("FunnelForSequenceClassification"),P8o=o(" (Funnel Transformer model)"),$8o=l(),X2=a("li"),Die=a("strong"),I8o=o("gpt2"),q8o=o(" \u2014 "),WN=a("a"),N8o=o("GPT2ForSequenceClassification"),j8o=o(" (OpenAI GPT-2 model)"),D8o=l(),z2=a("li"),Gie=a("strong"),G8o=o("gpt_neo"),O8o=o(" \u2014 "),HN=a("a"),V8o=o("GPTNeoForSequenceClassification"),X8o=o(" (GPT Neo model)"),z8o=l(),Q2=a("li"),Oie=a("strong"),Q8o=o("gptj"),W8o=o(" \u2014 "),UN=a("a"),H8o=o("GPTJForSequenceClassification"),U8o=o(" (GPT-J model)"),J8o=l(),W2=a("li"),Vie=a("strong"),Y8o=o("ibert"),K8o=o(" \u2014 "),JN=a("a"),Z8o=o("IBertForSequenceClassification"),eLo=o(" (I-BERT model)"),oLo=l(),H2=a("li"),Xie=a("strong"),rLo=o("layoutlm"),tLo=o(" \u2014 "),YN=a("a"),aLo=o("LayoutLMForSequenceClassification"),nLo=o(" (LayoutLM model)"),sLo=l(),U2=a("li"),zie=a("strong"),lLo=o("layoutlmv2"),iLo=o(" \u2014 "),KN=a("a"),dLo=o("LayoutLMv2ForSequenceClassification"),cLo=o(" (LayoutLMv2 model)"),mLo=l(),J2=a("li"),Qie=a("strong"),fLo=o("led"),gLo=o(" \u2014 "),ZN=a("a"),hLo=o("LEDForSequenceClassification"),uLo=o(" (LED model)"),pLo=l(),Y2=a("li"),Wie=a("strong"),_Lo=o("longformer"),bLo=o(" \u2014 "),ej=a("a"),vLo=o("LongformerForSequenceClassification"),FLo=o(" (Longformer model)"),TLo=l(),K2=a("li"),Hie=a("strong"),MLo=o("mbart"),ELo=o(" \u2014 "),oj=a("a"),CLo=o("MBartForSequenceClassification"),wLo=o(" (mBART model)"),ALo=l(),Z2=a("li"),Uie=a("strong"),yLo=o("megatron-bert"),LLo=o(" \u2014 "),rj=a("a"),xLo=o("MegatronBertForSequenceClassification"),kLo=o(" (MegatronBert model)"),SLo=l(),ev=a("li"),Jie=a("strong"),RLo=o("mobilebert"),BLo=o(" \u2014 "),tj=a("a"),PLo=o("MobileBertForSequenceClassification"),$Lo=o(" (MobileBERT model)"),ILo=l(),ov=a("li"),Yie=a("strong"),qLo=o("mpnet"),NLo=o(" \u2014 "),aj=a("a"),jLo=o("MPNetForSequenceClassification"),DLo=o(" (MPNet model)"),GLo=l(),rv=a("li"),Kie=a("strong"),OLo=o("nystromformer"),VLo=o(" \u2014 "),nj=a("a"),XLo=o("NystromformerForSequenceClassification"),zLo=o(" (Nystromformer model)"),QLo=l(),tv=a("li"),Zie=a("strong"),WLo=o("openai-gpt"),HLo=o(" \u2014 "),sj=a("a"),ULo=o("OpenAIGPTForSequenceClassification"),JLo=o(" (OpenAI GPT model)"),YLo=l(),av=a("li"),ede=a("strong"),KLo=o("perceiver"),ZLo=o(" \u2014 "),lj=a("a"),e7o=o("PerceiverForSequenceClassification"),o7o=o(" (Perceiver model)"),r7o=l(),nv=a("li"),ode=a("strong"),t7o=o("plbart"),a7o=o(" \u2014 "),ij=a("a"),n7o=o("PLBartForSequenceClassification"),s7o=o(" (PLBart model)"),l7o=l(),sv=a("li"),rde=a("strong"),i7o=o("qdqbert"),d7o=o(" \u2014 "),dj=a("a"),c7o=o("QDQBertForSequenceClassification"),m7o=o(" (QDQBert model)"),f7o=l(),lv=a("li"),tde=a("strong"),g7o=o("reformer"),h7o=o(" \u2014 "),cj=a("a"),u7o=o("ReformerForSequenceClassification"),p7o=o(" (Reformer model)"),_7o=l(),iv=a("li"),ade=a("strong"),b7o=o("rembert"),v7o=o(" \u2014 "),mj=a("a"),F7o=o("RemBertForSequenceClassification"),T7o=o(" (RemBERT model)"),M7o=l(),dv=a("li"),nde=a("strong"),E7o=o("roberta"),C7o=o(" \u2014 "),fj=a("a"),w7o=o("RobertaForSequenceClassification"),A7o=o(" (RoBERTa model)"),y7o=l(),cv=a("li"),sde=a("strong"),L7o=o("roformer"),x7o=o(" \u2014 "),gj=a("a"),k7o=o("RoFormerForSequenceClassification"),S7o=o(" (RoFormer model)"),R7o=l(),mv=a("li"),lde=a("strong"),B7o=o("squeezebert"),P7o=o(" \u2014 "),hj=a("a"),$7o=o("SqueezeBertForSequenceClassification"),I7o=o(" (SqueezeBERT model)"),q7o=l(),fv=a("li"),ide=a("strong"),N7o=o("tapas"),j7o=o(" \u2014 "),uj=a("a"),D7o=o("TapasForSequenceClassification"),G7o=o(" (TAPAS model)"),O7o=l(),gv=a("li"),dde=a("strong"),V7o=o("tapex"),X7o=o(" \u2014 "),pj=a("a"),z7o=o("BartForSequenceClassification"),Q7o=o(" (TAPEX model)"),W7o=l(),hv=a("li"),cde=a("strong"),H7o=o("transfo-xl"),U7o=o(" \u2014 "),_j=a("a"),J7o=o("TransfoXLForSequenceClassification"),Y7o=o(" (Transformer-XL model)"),K7o=l(),uv=a("li"),mde=a("strong"),Z7o=o("xlm"),e9o=o(" \u2014 "),bj=a("a"),o9o=o("XLMForSequenceClassification"),r9o=o(" (XLM model)"),t9o=l(),pv=a("li"),fde=a("strong"),a9o=o("xlm-roberta"),n9o=o(" \u2014 "),vj=a("a"),s9o=o("XLMRobertaForSequenceClassification"),l9o=o(" (XLM-RoBERTa model)"),i9o=l(),_v=a("li"),gde=a("strong"),d9o=o("xlm-roberta-xl"),c9o=o(" \u2014 "),Fj=a("a"),m9o=o("XLMRobertaXLForSequenceClassification"),f9o=o(" (XLM-RoBERTa-XL model)"),g9o=l(),bv=a("li"),hde=a("strong"),h9o=o("xlnet"),u9o=o(" \u2014 "),Tj=a("a"),p9o=o("XLNetForSequenceClassification"),_9o=o(" (XLNet model)"),b9o=l(),vv=a("li"),ude=a("strong"),v9o=o("yoso"),F9o=o(" \u2014 "),Mj=a("a"),T9o=o("YosoForSequenceClassification"),M9o=o(" (YOSO model)"),E9o=l(),Fv=a("p"),C9o=o("The model is set in evaluation mode by default using "),pde=a("code"),w9o=o("model.eval()"),A9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),y9o=o("model.train()"),L9o=l(),bde=a("p"),x9o=o("Examples:"),k9o=l(),m(fA.$$.fragment),CPe=l(),Ed=a("h2"),Tv=a("a"),vde=a("span"),m(gA.$$.fragment),S9o=l(),Fde=a("span"),R9o=o("AutoModelForMultipleChoice"),wPe=l(),rr=a("div"),m(hA.$$.fragment),B9o=l(),Cd=a("p"),P9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ej=a("a"),$9o=o("from_pretrained()"),I9o=o(" class method or the "),Cj=a("a"),q9o=o("from_config()"),N9o=o(` class
method.`),j9o=l(),uA=a("p"),D9o=o("This class cannot be instantiated directly using "),Tde=a("code"),G9o=o("__init__()"),O9o=o(" (throws an error)."),V9o=l(),Jr=a("div"),m(pA.$$.fragment),X9o=l(),Mde=a("p"),z9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q9o=l(),wd=a("p"),W9o=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),H9o=o("not"),U9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=a("a"),J9o=o("from_pretrained()"),Y9o=o(" to load the model weights."),K9o=l(),Cde=a("p"),Z9o=o("Examples:"),exo=l(),m(_A.$$.fragment),oxo=l(),Xe=a("div"),m(bA.$$.fragment),rxo=l(),wde=a("p"),txo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),axo=l(),Ja=a("p"),nxo=o("The model class to instantiate is selected based on the "),Ade=a("code"),sxo=o("model_type"),lxo=o(` property of the config object (either
passed as an argument or loaded from `),yde=a("code"),ixo=o("pretrained_model_name_or_path"),dxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),cxo=o("pretrained_model_name_or_path"),mxo=o(":"),fxo=l(),G=a("ul"),Mv=a("li"),xde=a("strong"),gxo=o("albert"),hxo=o(" \u2014 "),Aj=a("a"),uxo=o("AlbertForMultipleChoice"),pxo=o(" (ALBERT model)"),_xo=l(),Ev=a("li"),kde=a("strong"),bxo=o("bert"),vxo=o(" \u2014 "),yj=a("a"),Fxo=o("BertForMultipleChoice"),Txo=o(" (BERT model)"),Mxo=l(),Cv=a("li"),Sde=a("strong"),Exo=o("big_bird"),Cxo=o(" \u2014 "),Lj=a("a"),wxo=o("BigBirdForMultipleChoice"),Axo=o(" (BigBird model)"),yxo=l(),wv=a("li"),Rde=a("strong"),Lxo=o("camembert"),xxo=o(" \u2014 "),xj=a("a"),kxo=o("CamembertForMultipleChoice"),Sxo=o(" (CamemBERT model)"),Rxo=l(),Av=a("li"),Bde=a("strong"),Bxo=o("canine"),Pxo=o(" \u2014 "),kj=a("a"),$xo=o("CanineForMultipleChoice"),Ixo=o(" (Canine model)"),qxo=l(),yv=a("li"),Pde=a("strong"),Nxo=o("convbert"),jxo=o(" \u2014 "),Sj=a("a"),Dxo=o("ConvBertForMultipleChoice"),Gxo=o(" (ConvBERT model)"),Oxo=l(),Lv=a("li"),$de=a("strong"),Vxo=o("data2vec-text"),Xxo=o(" \u2014 "),Rj=a("a"),zxo=o("Data2VecTextForMultipleChoice"),Qxo=o(" (Data2VecText model)"),Wxo=l(),xv=a("li"),Ide=a("strong"),Hxo=o("distilbert"),Uxo=o(" \u2014 "),Bj=a("a"),Jxo=o("DistilBertForMultipleChoice"),Yxo=o(" (DistilBERT model)"),Kxo=l(),kv=a("li"),qde=a("strong"),Zxo=o("electra"),eko=o(" \u2014 "),Pj=a("a"),oko=o("ElectraForMultipleChoice"),rko=o(" (ELECTRA model)"),tko=l(),Sv=a("li"),Nde=a("strong"),ako=o("flaubert"),nko=o(" \u2014 "),$j=a("a"),sko=o("FlaubertForMultipleChoice"),lko=o(" (FlauBERT model)"),iko=l(),Rv=a("li"),jde=a("strong"),dko=o("fnet"),cko=o(" \u2014 "),Ij=a("a"),mko=o("FNetForMultipleChoice"),fko=o(" (FNet model)"),gko=l(),Bv=a("li"),Dde=a("strong"),hko=o("funnel"),uko=o(" \u2014 "),qj=a("a"),pko=o("FunnelForMultipleChoice"),_ko=o(" (Funnel Transformer model)"),bko=l(),Pv=a("li"),Gde=a("strong"),vko=o("ibert"),Fko=o(" \u2014 "),Nj=a("a"),Tko=o("IBertForMultipleChoice"),Mko=o(" (I-BERT model)"),Eko=l(),$v=a("li"),Ode=a("strong"),Cko=o("longformer"),wko=o(" \u2014 "),jj=a("a"),Ako=o("LongformerForMultipleChoice"),yko=o(" (Longformer model)"),Lko=l(),Iv=a("li"),Vde=a("strong"),xko=o("megatron-bert"),kko=o(" \u2014 "),Dj=a("a"),Sko=o("MegatronBertForMultipleChoice"),Rko=o(" (MegatronBert model)"),Bko=l(),qv=a("li"),Xde=a("strong"),Pko=o("mobilebert"),$ko=o(" \u2014 "),Gj=a("a"),Iko=o("MobileBertForMultipleChoice"),qko=o(" (MobileBERT model)"),Nko=l(),Nv=a("li"),zde=a("strong"),jko=o("mpnet"),Dko=o(" \u2014 "),Oj=a("a"),Gko=o("MPNetForMultipleChoice"),Oko=o(" (MPNet model)"),Vko=l(),jv=a("li"),Qde=a("strong"),Xko=o("nystromformer"),zko=o(" \u2014 "),Vj=a("a"),Qko=o("NystromformerForMultipleChoice"),Wko=o(" (Nystromformer model)"),Hko=l(),Dv=a("li"),Wde=a("strong"),Uko=o("qdqbert"),Jko=o(" \u2014 "),Xj=a("a"),Yko=o("QDQBertForMultipleChoice"),Kko=o(" (QDQBert model)"),Zko=l(),Gv=a("li"),Hde=a("strong"),eSo=o("rembert"),oSo=o(" \u2014 "),zj=a("a"),rSo=o("RemBertForMultipleChoice"),tSo=o(" (RemBERT model)"),aSo=l(),Ov=a("li"),Ude=a("strong"),nSo=o("roberta"),sSo=o(" \u2014 "),Qj=a("a"),lSo=o("RobertaForMultipleChoice"),iSo=o(" (RoBERTa model)"),dSo=l(),Vv=a("li"),Jde=a("strong"),cSo=o("roformer"),mSo=o(" \u2014 "),Wj=a("a"),fSo=o("RoFormerForMultipleChoice"),gSo=o(" (RoFormer model)"),hSo=l(),Xv=a("li"),Yde=a("strong"),uSo=o("squeezebert"),pSo=o(" \u2014 "),Hj=a("a"),_So=o("SqueezeBertForMultipleChoice"),bSo=o(" (SqueezeBERT model)"),vSo=l(),zv=a("li"),Kde=a("strong"),FSo=o("xlm"),TSo=o(" \u2014 "),Uj=a("a"),MSo=o("XLMForMultipleChoice"),ESo=o(" (XLM model)"),CSo=l(),Qv=a("li"),Zde=a("strong"),wSo=o("xlm-roberta"),ASo=o(" \u2014 "),Jj=a("a"),ySo=o("XLMRobertaForMultipleChoice"),LSo=o(" (XLM-RoBERTa model)"),xSo=l(),Wv=a("li"),ece=a("strong"),kSo=o("xlm-roberta-xl"),SSo=o(" \u2014 "),Yj=a("a"),RSo=o("XLMRobertaXLForMultipleChoice"),BSo=o(" (XLM-RoBERTa-XL model)"),PSo=l(),Hv=a("li"),oce=a("strong"),$So=o("xlnet"),ISo=o(" \u2014 "),Kj=a("a"),qSo=o("XLNetForMultipleChoice"),NSo=o(" (XLNet model)"),jSo=l(),Uv=a("li"),rce=a("strong"),DSo=o("yoso"),GSo=o(" \u2014 "),Zj=a("a"),OSo=o("YosoForMultipleChoice"),VSo=o(" (YOSO model)"),XSo=l(),Jv=a("p"),zSo=o("The model is set in evaluation mode by default using "),tce=a("code"),QSo=o("model.eval()"),WSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),HSo=o("model.train()"),USo=l(),nce=a("p"),JSo=o("Examples:"),YSo=l(),m(vA.$$.fragment),APe=l(),Ad=a("h2"),Yv=a("a"),sce=a("span"),m(FA.$$.fragment),KSo=l(),lce=a("span"),ZSo=o("AutoModelForNextSentencePrediction"),yPe=l(),tr=a("div"),m(TA.$$.fragment),eRo=l(),yd=a("p"),oRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eD=a("a"),rRo=o("from_pretrained()"),tRo=o(" class method or the "),oD=a("a"),aRo=o("from_config()"),nRo=o(` class
method.`),sRo=l(),MA=a("p"),lRo=o("This class cannot be instantiated directly using "),ice=a("code"),iRo=o("__init__()"),dRo=o(" (throws an error)."),cRo=l(),Yr=a("div"),m(EA.$$.fragment),mRo=l(),dce=a("p"),fRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gRo=l(),Ld=a("p"),hRo=o(`Note:
Loading a model from its configuration file does `),cce=a("strong"),uRo=o("not"),pRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),_Ro=o("from_pretrained()"),bRo=o(" to load the model weights."),vRo=l(),mce=a("p"),FRo=o("Examples:"),TRo=l(),m(CA.$$.fragment),MRo=l(),ze=a("div"),m(wA.$$.fragment),ERo=l(),fce=a("p"),CRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wRo=l(),Ya=a("p"),ARo=o("The model class to instantiate is selected based on the "),gce=a("code"),yRo=o("model_type"),LRo=o(` property of the config object (either
passed as an argument or loaded from `),hce=a("code"),xRo=o("pretrained_model_name_or_path"),kRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=a("code"),SRo=o("pretrained_model_name_or_path"),RRo=o(":"),BRo=l(),da=a("ul"),Kv=a("li"),pce=a("strong"),PRo=o("bert"),$Ro=o(" \u2014 "),tD=a("a"),IRo=o("BertForNextSentencePrediction"),qRo=o(" (BERT model)"),NRo=l(),Zv=a("li"),_ce=a("strong"),jRo=o("fnet"),DRo=o(" \u2014 "),aD=a("a"),GRo=o("FNetForNextSentencePrediction"),ORo=o(" (FNet model)"),VRo=l(),eF=a("li"),bce=a("strong"),XRo=o("megatron-bert"),zRo=o(" \u2014 "),nD=a("a"),QRo=o("MegatronBertForNextSentencePrediction"),WRo=o(" (MegatronBert model)"),HRo=l(),oF=a("li"),vce=a("strong"),URo=o("mobilebert"),JRo=o(" \u2014 "),sD=a("a"),YRo=o("MobileBertForNextSentencePrediction"),KRo=o(" (MobileBERT model)"),ZRo=l(),rF=a("li"),Fce=a("strong"),eBo=o("qdqbert"),oBo=o(" \u2014 "),lD=a("a"),rBo=o("QDQBertForNextSentencePrediction"),tBo=o(" (QDQBert model)"),aBo=l(),tF=a("p"),nBo=o("The model is set in evaluation mode by default using "),Tce=a("code"),sBo=o("model.eval()"),lBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),iBo=o("model.train()"),dBo=l(),Ece=a("p"),cBo=o("Examples:"),mBo=l(),m(AA.$$.fragment),LPe=l(),xd=a("h2"),aF=a("a"),Cce=a("span"),m(yA.$$.fragment),fBo=l(),wce=a("span"),gBo=o("AutoModelForTokenClassification"),xPe=l(),ar=a("div"),m(LA.$$.fragment),hBo=l(),kd=a("p"),uBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iD=a("a"),pBo=o("from_pretrained()"),_Bo=o(" class method or the "),dD=a("a"),bBo=o("from_config()"),vBo=o(` class
method.`),FBo=l(),xA=a("p"),TBo=o("This class cannot be instantiated directly using "),Ace=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),CBo=l(),Kr=a("div"),m(kA.$$.fragment),wBo=l(),yce=a("p"),ABo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yBo=l(),Sd=a("p"),LBo=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),xBo=o("not"),kBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=a("a"),SBo=o("from_pretrained()"),RBo=o(" to load the model weights."),BBo=l(),xce=a("p"),PBo=o("Examples:"),$Bo=l(),m(SA.$$.fragment),IBo=l(),Qe=a("div"),m(RA.$$.fragment),qBo=l(),kce=a("p"),NBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jBo=l(),Ka=a("p"),DBo=o("The model class to instantiate is selected based on the "),Sce=a("code"),GBo=o("model_type"),OBo=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),zBo=o("pretrained_model_name_or_path"),QBo=o(":"),WBo=l(),j=a("ul"),nF=a("li"),Pce=a("strong"),HBo=o("albert"),UBo=o(" \u2014 "),mD=a("a"),JBo=o("AlbertForTokenClassification"),YBo=o(" (ALBERT model)"),KBo=l(),sF=a("li"),$ce=a("strong"),ZBo=o("bert"),ePo=o(" \u2014 "),fD=a("a"),oPo=o("BertForTokenClassification"),rPo=o(" (BERT model)"),tPo=l(),lF=a("li"),Ice=a("strong"),aPo=o("big_bird"),nPo=o(" \u2014 "),gD=a("a"),sPo=o("BigBirdForTokenClassification"),lPo=o(" (BigBird model)"),iPo=l(),iF=a("li"),qce=a("strong"),dPo=o("camembert"),cPo=o(" \u2014 "),hD=a("a"),mPo=o("CamembertForTokenClassification"),fPo=o(" (CamemBERT model)"),gPo=l(),dF=a("li"),Nce=a("strong"),hPo=o("canine"),uPo=o(" \u2014 "),uD=a("a"),pPo=o("CanineForTokenClassification"),_Po=o(" (Canine model)"),bPo=l(),cF=a("li"),jce=a("strong"),vPo=o("convbert"),FPo=o(" \u2014 "),pD=a("a"),TPo=o("ConvBertForTokenClassification"),MPo=o(" (ConvBERT model)"),EPo=l(),mF=a("li"),Dce=a("strong"),CPo=o("data2vec-text"),wPo=o(" \u2014 "),_D=a("a"),APo=o("Data2VecTextForTokenClassification"),yPo=o(" (Data2VecText model)"),LPo=l(),fF=a("li"),Gce=a("strong"),xPo=o("deberta"),kPo=o(" \u2014 "),bD=a("a"),SPo=o("DebertaForTokenClassification"),RPo=o(" (DeBERTa model)"),BPo=l(),gF=a("li"),Oce=a("strong"),PPo=o("deberta-v2"),$Po=o(" \u2014 "),vD=a("a"),IPo=o("DebertaV2ForTokenClassification"),qPo=o(" (DeBERTa-v2 model)"),NPo=l(),hF=a("li"),Vce=a("strong"),jPo=o("distilbert"),DPo=o(" \u2014 "),FD=a("a"),GPo=o("DistilBertForTokenClassification"),OPo=o(" (DistilBERT model)"),VPo=l(),uF=a("li"),Xce=a("strong"),XPo=o("electra"),zPo=o(" \u2014 "),TD=a("a"),QPo=o("ElectraForTokenClassification"),WPo=o(" (ELECTRA model)"),HPo=l(),pF=a("li"),zce=a("strong"),UPo=o("flaubert"),JPo=o(" \u2014 "),MD=a("a"),YPo=o("FlaubertForTokenClassification"),KPo=o(" (FlauBERT model)"),ZPo=l(),_F=a("li"),Qce=a("strong"),e$o=o("fnet"),o$o=o(" \u2014 "),ED=a("a"),r$o=o("FNetForTokenClassification"),t$o=o(" (FNet model)"),a$o=l(),bF=a("li"),Wce=a("strong"),n$o=o("funnel"),s$o=o(" \u2014 "),CD=a("a"),l$o=o("FunnelForTokenClassification"),i$o=o(" (Funnel Transformer model)"),d$o=l(),vF=a("li"),Hce=a("strong"),c$o=o("gpt2"),m$o=o(" \u2014 "),wD=a("a"),f$o=o("GPT2ForTokenClassification"),g$o=o(" (OpenAI GPT-2 model)"),h$o=l(),FF=a("li"),Uce=a("strong"),u$o=o("ibert"),p$o=o(" \u2014 "),AD=a("a"),_$o=o("IBertForTokenClassification"),b$o=o(" (I-BERT model)"),v$o=l(),TF=a("li"),Jce=a("strong"),F$o=o("layoutlm"),T$o=o(" \u2014 "),yD=a("a"),M$o=o("LayoutLMForTokenClassification"),E$o=o(" (LayoutLM model)"),C$o=l(),MF=a("li"),Yce=a("strong"),w$o=o("layoutlmv2"),A$o=o(" \u2014 "),LD=a("a"),y$o=o("LayoutLMv2ForTokenClassification"),L$o=o(" (LayoutLMv2 model)"),x$o=l(),EF=a("li"),Kce=a("strong"),k$o=o("longformer"),S$o=o(" \u2014 "),xD=a("a"),R$o=o("LongformerForTokenClassification"),B$o=o(" (Longformer model)"),P$o=l(),CF=a("li"),Zce=a("strong"),$$o=o("megatron-bert"),I$o=o(" \u2014 "),kD=a("a"),q$o=o("MegatronBertForTokenClassification"),N$o=o(" (MegatronBert model)"),j$o=l(),wF=a("li"),eme=a("strong"),D$o=o("mobilebert"),G$o=o(" \u2014 "),SD=a("a"),O$o=o("MobileBertForTokenClassification"),V$o=o(" (MobileBERT model)"),X$o=l(),AF=a("li"),ome=a("strong"),z$o=o("mpnet"),Q$o=o(" \u2014 "),RD=a("a"),W$o=o("MPNetForTokenClassification"),H$o=o(" (MPNet model)"),U$o=l(),yF=a("li"),rme=a("strong"),J$o=o("nystromformer"),Y$o=o(" \u2014 "),BD=a("a"),K$o=o("NystromformerForTokenClassification"),Z$o=o(" (Nystromformer model)"),eIo=l(),LF=a("li"),tme=a("strong"),oIo=o("qdqbert"),rIo=o(" \u2014 "),PD=a("a"),tIo=o("QDQBertForTokenClassification"),aIo=o(" (QDQBert model)"),nIo=l(),xF=a("li"),ame=a("strong"),sIo=o("rembert"),lIo=o(" \u2014 "),$D=a("a"),iIo=o("RemBertForTokenClassification"),dIo=o(" (RemBERT model)"),cIo=l(),kF=a("li"),nme=a("strong"),mIo=o("roberta"),fIo=o(" \u2014 "),ID=a("a"),gIo=o("RobertaForTokenClassification"),hIo=o(" (RoBERTa model)"),uIo=l(),SF=a("li"),sme=a("strong"),pIo=o("roformer"),_Io=o(" \u2014 "),qD=a("a"),bIo=o("RoFormerForTokenClassification"),vIo=o(" (RoFormer model)"),FIo=l(),RF=a("li"),lme=a("strong"),TIo=o("squeezebert"),MIo=o(" \u2014 "),ND=a("a"),EIo=o("SqueezeBertForTokenClassification"),CIo=o(" (SqueezeBERT model)"),wIo=l(),BF=a("li"),ime=a("strong"),AIo=o("xlm"),yIo=o(" \u2014 "),jD=a("a"),LIo=o("XLMForTokenClassification"),xIo=o(" (XLM model)"),kIo=l(),PF=a("li"),dme=a("strong"),SIo=o("xlm-roberta"),RIo=o(" \u2014 "),DD=a("a"),BIo=o("XLMRobertaForTokenClassification"),PIo=o(" (XLM-RoBERTa model)"),$Io=l(),$F=a("li"),cme=a("strong"),IIo=o("xlm-roberta-xl"),qIo=o(" \u2014 "),GD=a("a"),NIo=o("XLMRobertaXLForTokenClassification"),jIo=o(" (XLM-RoBERTa-XL model)"),DIo=l(),IF=a("li"),mme=a("strong"),GIo=o("xlnet"),OIo=o(" \u2014 "),OD=a("a"),VIo=o("XLNetForTokenClassification"),XIo=o(" (XLNet model)"),zIo=l(),qF=a("li"),fme=a("strong"),QIo=o("yoso"),WIo=o(" \u2014 "),VD=a("a"),HIo=o("YosoForTokenClassification"),UIo=o(" (YOSO model)"),JIo=l(),NF=a("p"),YIo=o("The model is set in evaluation mode by default using "),gme=a("code"),KIo=o("model.eval()"),ZIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=a("code"),eqo=o("model.train()"),oqo=l(),ume=a("p"),rqo=o("Examples:"),tqo=l(),m(BA.$$.fragment),kPe=l(),Rd=a("h2"),jF=a("a"),pme=a("span"),m(PA.$$.fragment),aqo=l(),_me=a("span"),nqo=o("AutoModelForQuestionAnswering"),SPe=l(),nr=a("div"),m($A.$$.fragment),sqo=l(),Bd=a("p"),lqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XD=a("a"),iqo=o("from_pretrained()"),dqo=o(" class method or the "),zD=a("a"),cqo=o("from_config()"),mqo=o(` class
method.`),fqo=l(),IA=a("p"),gqo=o("This class cannot be instantiated directly using "),bme=a("code"),hqo=o("__init__()"),uqo=o(" (throws an error)."),pqo=l(),Zr=a("div"),m(qA.$$.fragment),_qo=l(),vme=a("p"),bqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vqo=l(),Pd=a("p"),Fqo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),Tqo=o("not"),Mqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),Eqo=o("from_pretrained()"),Cqo=o(" to load the model weights."),wqo=l(),Tme=a("p"),Aqo=o("Examples:"),yqo=l(),m(NA.$$.fragment),Lqo=l(),We=a("div"),m(jA.$$.fragment),xqo=l(),Mme=a("p"),kqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sqo=l(),Za=a("p"),Rqo=o("The model class to instantiate is selected based on the "),Eme=a("code"),Bqo=o("model_type"),Pqo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),$qo=o("pretrained_model_name_or_path"),Iqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),qqo=o("pretrained_model_name_or_path"),Nqo=o(":"),jqo=l(),R=a("ul"),DF=a("li"),Ame=a("strong"),Dqo=o("albert"),Gqo=o(" \u2014 "),WD=a("a"),Oqo=o("AlbertForQuestionAnswering"),Vqo=o(" (ALBERT model)"),Xqo=l(),GF=a("li"),yme=a("strong"),zqo=o("bart"),Qqo=o(" \u2014 "),HD=a("a"),Wqo=o("BartForQuestionAnswering"),Hqo=o(" (BART model)"),Uqo=l(),OF=a("li"),Lme=a("strong"),Jqo=o("bert"),Yqo=o(" \u2014 "),UD=a("a"),Kqo=o("BertForQuestionAnswering"),Zqo=o(" (BERT model)"),eNo=l(),VF=a("li"),xme=a("strong"),oNo=o("big_bird"),rNo=o(" \u2014 "),JD=a("a"),tNo=o("BigBirdForQuestionAnswering"),aNo=o(" (BigBird model)"),nNo=l(),XF=a("li"),kme=a("strong"),sNo=o("bigbird_pegasus"),lNo=o(" \u2014 "),YD=a("a"),iNo=o("BigBirdPegasusForQuestionAnswering"),dNo=o(" (BigBirdPegasus model)"),cNo=l(),zF=a("li"),Sme=a("strong"),mNo=o("camembert"),fNo=o(" \u2014 "),KD=a("a"),gNo=o("CamembertForQuestionAnswering"),hNo=o(" (CamemBERT model)"),uNo=l(),QF=a("li"),Rme=a("strong"),pNo=o("canine"),_No=o(" \u2014 "),ZD=a("a"),bNo=o("CanineForQuestionAnswering"),vNo=o(" (Canine model)"),FNo=l(),WF=a("li"),Bme=a("strong"),TNo=o("convbert"),MNo=o(" \u2014 "),eG=a("a"),ENo=o("ConvBertForQuestionAnswering"),CNo=o(" (ConvBERT model)"),wNo=l(),HF=a("li"),Pme=a("strong"),ANo=o("data2vec-text"),yNo=o(" \u2014 "),oG=a("a"),LNo=o("Data2VecTextForQuestionAnswering"),xNo=o(" (Data2VecText model)"),kNo=l(),UF=a("li"),$me=a("strong"),SNo=o("deberta"),RNo=o(" \u2014 "),rG=a("a"),BNo=o("DebertaForQuestionAnswering"),PNo=o(" (DeBERTa model)"),$No=l(),JF=a("li"),Ime=a("strong"),INo=o("deberta-v2"),qNo=o(" \u2014 "),tG=a("a"),NNo=o("DebertaV2ForQuestionAnswering"),jNo=o(" (DeBERTa-v2 model)"),DNo=l(),YF=a("li"),qme=a("strong"),GNo=o("distilbert"),ONo=o(" \u2014 "),aG=a("a"),VNo=o("DistilBertForQuestionAnswering"),XNo=o(" (DistilBERT model)"),zNo=l(),KF=a("li"),Nme=a("strong"),QNo=o("electra"),WNo=o(" \u2014 "),nG=a("a"),HNo=o("ElectraForQuestionAnswering"),UNo=o(" (ELECTRA model)"),JNo=l(),ZF=a("li"),jme=a("strong"),YNo=o("flaubert"),KNo=o(" \u2014 "),sG=a("a"),ZNo=o("FlaubertForQuestionAnsweringSimple"),ejo=o(" (FlauBERT model)"),ojo=l(),e1=a("li"),Dme=a("strong"),rjo=o("fnet"),tjo=o(" \u2014 "),lG=a("a"),ajo=o("FNetForQuestionAnswering"),njo=o(" (FNet model)"),sjo=l(),o1=a("li"),Gme=a("strong"),ljo=o("funnel"),ijo=o(" \u2014 "),iG=a("a"),djo=o("FunnelForQuestionAnswering"),cjo=o(" (Funnel Transformer model)"),mjo=l(),r1=a("li"),Ome=a("strong"),fjo=o("gptj"),gjo=o(" \u2014 "),dG=a("a"),hjo=o("GPTJForQuestionAnswering"),ujo=o(" (GPT-J model)"),pjo=l(),t1=a("li"),Vme=a("strong"),_jo=o("ibert"),bjo=o(" \u2014 "),cG=a("a"),vjo=o("IBertForQuestionAnswering"),Fjo=o(" (I-BERT model)"),Tjo=l(),a1=a("li"),Xme=a("strong"),Mjo=o("layoutlmv2"),Ejo=o(" \u2014 "),mG=a("a"),Cjo=o("LayoutLMv2ForQuestionAnswering"),wjo=o(" (LayoutLMv2 model)"),Ajo=l(),n1=a("li"),zme=a("strong"),yjo=o("led"),Ljo=o(" \u2014 "),fG=a("a"),xjo=o("LEDForQuestionAnswering"),kjo=o(" (LED model)"),Sjo=l(),s1=a("li"),Qme=a("strong"),Rjo=o("longformer"),Bjo=o(" \u2014 "),gG=a("a"),Pjo=o("LongformerForQuestionAnswering"),$jo=o(" (Longformer model)"),Ijo=l(),l1=a("li"),Wme=a("strong"),qjo=o("lxmert"),Njo=o(" \u2014 "),hG=a("a"),jjo=o("LxmertForQuestionAnswering"),Djo=o(" (LXMERT model)"),Gjo=l(),i1=a("li"),Hme=a("strong"),Ojo=o("mbart"),Vjo=o(" \u2014 "),uG=a("a"),Xjo=o("MBartForQuestionAnswering"),zjo=o(" (mBART model)"),Qjo=l(),d1=a("li"),Ume=a("strong"),Wjo=o("megatron-bert"),Hjo=o(" \u2014 "),pG=a("a"),Ujo=o("MegatronBertForQuestionAnswering"),Jjo=o(" (MegatronBert model)"),Yjo=l(),c1=a("li"),Jme=a("strong"),Kjo=o("mobilebert"),Zjo=o(" \u2014 "),_G=a("a"),eDo=o("MobileBertForQuestionAnswering"),oDo=o(" (MobileBERT model)"),rDo=l(),m1=a("li"),Yme=a("strong"),tDo=o("mpnet"),aDo=o(" \u2014 "),bG=a("a"),nDo=o("MPNetForQuestionAnswering"),sDo=o(" (MPNet model)"),lDo=l(),f1=a("li"),Kme=a("strong"),iDo=o("nystromformer"),dDo=o(" \u2014 "),vG=a("a"),cDo=o("NystromformerForQuestionAnswering"),mDo=o(" (Nystromformer model)"),fDo=l(),g1=a("li"),Zme=a("strong"),gDo=o("qdqbert"),hDo=o(" \u2014 "),FG=a("a"),uDo=o("QDQBertForQuestionAnswering"),pDo=o(" (QDQBert model)"),_Do=l(),h1=a("li"),efe=a("strong"),bDo=o("reformer"),vDo=o(" \u2014 "),TG=a("a"),FDo=o("ReformerForQuestionAnswering"),TDo=o(" (Reformer model)"),MDo=l(),u1=a("li"),ofe=a("strong"),EDo=o("rembert"),CDo=o(" \u2014 "),MG=a("a"),wDo=o("RemBertForQuestionAnswering"),ADo=o(" (RemBERT model)"),yDo=l(),p1=a("li"),rfe=a("strong"),LDo=o("roberta"),xDo=o(" \u2014 "),EG=a("a"),kDo=o("RobertaForQuestionAnswering"),SDo=o(" (RoBERTa model)"),RDo=l(),_1=a("li"),tfe=a("strong"),BDo=o("roformer"),PDo=o(" \u2014 "),CG=a("a"),$Do=o("RoFormerForQuestionAnswering"),IDo=o(" (RoFormer model)"),qDo=l(),b1=a("li"),afe=a("strong"),NDo=o("splinter"),jDo=o(" \u2014 "),wG=a("a"),DDo=o("SplinterForQuestionAnswering"),GDo=o(" (Splinter model)"),ODo=l(),v1=a("li"),nfe=a("strong"),VDo=o("squeezebert"),XDo=o(" \u2014 "),AG=a("a"),zDo=o("SqueezeBertForQuestionAnswering"),QDo=o(" (SqueezeBERT model)"),WDo=l(),F1=a("li"),sfe=a("strong"),HDo=o("xlm"),UDo=o(" \u2014 "),yG=a("a"),JDo=o("XLMForQuestionAnsweringSimple"),YDo=o(" (XLM model)"),KDo=l(),T1=a("li"),lfe=a("strong"),ZDo=o("xlm-roberta"),eGo=o(" \u2014 "),LG=a("a"),oGo=o("XLMRobertaForQuestionAnswering"),rGo=o(" (XLM-RoBERTa model)"),tGo=l(),M1=a("li"),ife=a("strong"),aGo=o("xlm-roberta-xl"),nGo=o(" \u2014 "),xG=a("a"),sGo=o("XLMRobertaXLForQuestionAnswering"),lGo=o(" (XLM-RoBERTa-XL model)"),iGo=l(),E1=a("li"),dfe=a("strong"),dGo=o("xlnet"),cGo=o(" \u2014 "),kG=a("a"),mGo=o("XLNetForQuestionAnsweringSimple"),fGo=o(" (XLNet model)"),gGo=l(),C1=a("li"),cfe=a("strong"),hGo=o("yoso"),uGo=o(" \u2014 "),SG=a("a"),pGo=o("YosoForQuestionAnswering"),_Go=o(" (YOSO model)"),bGo=l(),w1=a("p"),vGo=o("The model is set in evaluation mode by default using "),mfe=a("code"),FGo=o("model.eval()"),TGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=a("code"),MGo=o("model.train()"),EGo=l(),gfe=a("p"),CGo=o("Examples:"),wGo=l(),m(DA.$$.fragment),RPe=l(),$d=a("h2"),A1=a("a"),hfe=a("span"),m(GA.$$.fragment),AGo=l(),ufe=a("span"),yGo=o("AutoModelForTableQuestionAnswering"),BPe=l(),sr=a("div"),m(OA.$$.fragment),LGo=l(),Id=a("p"),xGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RG=a("a"),kGo=o("from_pretrained()"),SGo=o(" class method or the "),BG=a("a"),RGo=o("from_config()"),BGo=o(` class
method.`),PGo=l(),VA=a("p"),$Go=o("This class cannot be instantiated directly using "),pfe=a("code"),IGo=o("__init__()"),qGo=o(" (throws an error)."),NGo=l(),et=a("div"),m(XA.$$.fragment),jGo=l(),_fe=a("p"),DGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GGo=l(),qd=a("p"),OGo=o(`Note:
Loading a model from its configuration file does `),bfe=a("strong"),VGo=o("not"),XGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),zGo=o("from_pretrained()"),QGo=o(" to load the model weights."),WGo=l(),vfe=a("p"),HGo=o("Examples:"),UGo=l(),m(zA.$$.fragment),JGo=l(),He=a("div"),m(QA.$$.fragment),YGo=l(),Ffe=a("p"),KGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZGo=l(),en=a("p"),eOo=o("The model class to instantiate is selected based on the "),Tfe=a("code"),oOo=o("model_type"),rOo=o(` property of the config object (either
passed as an argument or loaded from `),Mfe=a("code"),tOo=o("pretrained_model_name_or_path"),aOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Efe=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(":"),lOo=l(),Cfe=a("ul"),y1=a("li"),wfe=a("strong"),iOo=o("tapas"),dOo=o(" \u2014 "),$G=a("a"),cOo=o("TapasForQuestionAnswering"),mOo=o(" (TAPAS model)"),fOo=l(),L1=a("p"),gOo=o("The model is set in evaluation mode by default using "),Afe=a("code"),hOo=o("model.eval()"),uOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=a("code"),pOo=o("model.train()"),_Oo=l(),Lfe=a("p"),bOo=o("Examples:"),vOo=l(),m(WA.$$.fragment),PPe=l(),Nd=a("h2"),x1=a("a"),xfe=a("span"),m(HA.$$.fragment),FOo=l(),kfe=a("span"),TOo=o("AutoModelForImageClassification"),$Pe=l(),lr=a("div"),m(UA.$$.fragment),MOo=l(),jd=a("p"),EOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IG=a("a"),COo=o("from_pretrained()"),wOo=o(" class method or the "),qG=a("a"),AOo=o("from_config()"),yOo=o(` class
method.`),LOo=l(),JA=a("p"),xOo=o("This class cannot be instantiated directly using "),Sfe=a("code"),kOo=o("__init__()"),SOo=o(" (throws an error)."),ROo=l(),ot=a("div"),m(YA.$$.fragment),BOo=l(),Rfe=a("p"),POo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Oo=l(),Dd=a("p"),IOo=o(`Note:
Loading a model from its configuration file does `),Bfe=a("strong"),qOo=o("not"),NOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),jOo=o("from_pretrained()"),DOo=o(" to load the model weights."),GOo=l(),Pfe=a("p"),OOo=o("Examples:"),VOo=l(),m(KA.$$.fragment),XOo=l(),Ue=a("div"),m(ZA.$$.fragment),zOo=l(),$fe=a("p"),QOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WOo=l(),on=a("p"),HOo=o("The model class to instantiate is selected based on the "),Ife=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),qfe=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),ce=a("ul"),k1=a("li"),jfe=a("strong"),rVo=o("beit"),tVo=o(" \u2014 "),jG=a("a"),aVo=o("BeitForImageClassification"),nVo=o(" (BEiT model)"),sVo=l(),S1=a("li"),Dfe=a("strong"),lVo=o("convnext"),iVo=o(" \u2014 "),DG=a("a"),dVo=o("ConvNextForImageClassification"),cVo=o(" (ConvNext model)"),mVo=l(),R1=a("li"),Gfe=a("strong"),fVo=o("data2vec-vision"),gVo=o(" \u2014 "),GG=a("a"),hVo=o("Data2VecVisionForImageClassification"),uVo=o(" (Data2VecVision model)"),pVo=l(),Us=a("li"),Ofe=a("strong"),_Vo=o("deit"),bVo=o(" \u2014 "),OG=a("a"),vVo=o("DeiTForImageClassification"),FVo=o(" or "),VG=a("a"),TVo=o("DeiTForImageClassificationWithTeacher"),MVo=o(" (DeiT model)"),EVo=l(),B1=a("li"),Vfe=a("strong"),CVo=o("imagegpt"),wVo=o(" \u2014 "),XG=a("a"),AVo=o("ImageGPTForImageClassification"),yVo=o(" (ImageGPT model)"),LVo=l(),fa=a("li"),Xfe=a("strong"),xVo=o("perceiver"),kVo=o(" \u2014 "),zG=a("a"),SVo=o("PerceiverForImageClassificationLearned"),RVo=o(" or "),QG=a("a"),BVo=o("PerceiverForImageClassificationFourier"),PVo=o(" or "),WG=a("a"),$Vo=o("PerceiverForImageClassificationConvProcessing"),IVo=o(" (Perceiver model)"),qVo=l(),P1=a("li"),zfe=a("strong"),NVo=o("poolformer"),jVo=o(" \u2014 "),HG=a("a"),DVo=o("PoolFormerForImageClassification"),GVo=o(" (PoolFormer model)"),OVo=l(),$1=a("li"),Qfe=a("strong"),VVo=o("regnet"),XVo=o(" \u2014 "),UG=a("a"),zVo=o("RegNetForImageClassification"),QVo=o(" (RegNet model)"),WVo=l(),I1=a("li"),Wfe=a("strong"),HVo=o("resnet"),UVo=o(" \u2014 "),JG=a("a"),JVo=o("ResNetForImageClassification"),YVo=o(" (ResNet model)"),KVo=l(),q1=a("li"),Hfe=a("strong"),ZVo=o("segformer"),eXo=o(" \u2014 "),YG=a("a"),oXo=o("SegformerForImageClassification"),rXo=o(" (SegFormer model)"),tXo=l(),N1=a("li"),Ufe=a("strong"),aXo=o("swin"),nXo=o(" \u2014 "),KG=a("a"),sXo=o("SwinForImageClassification"),lXo=o(" (Swin model)"),iXo=l(),j1=a("li"),Jfe=a("strong"),dXo=o("van"),cXo=o(" \u2014 "),ZG=a("a"),mXo=o("VanForImageClassification"),fXo=o(" (VAN model)"),gXo=l(),D1=a("li"),Yfe=a("strong"),hXo=o("vit"),uXo=o(" \u2014 "),eO=a("a"),pXo=o("ViTForImageClassification"),_Xo=o(" (ViT model)"),bXo=l(),G1=a("p"),vXo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),FXo=o("model.eval()"),TXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),MXo=o("model.train()"),EXo=l(),ege=a("p"),CXo=o("Examples:"),wXo=l(),m(e0.$$.fragment),IPe=l(),Gd=a("h2"),O1=a("a"),oge=a("span"),m(o0.$$.fragment),AXo=l(),rge=a("span"),yXo=o("AutoModelForVision2Seq"),qPe=l(),ir=a("div"),m(r0.$$.fragment),LXo=l(),Od=a("p"),xXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oO=a("a"),kXo=o("from_pretrained()"),SXo=o(" class method or the "),rO=a("a"),RXo=o("from_config()"),BXo=o(` class
method.`),PXo=l(),t0=a("p"),$Xo=o("This class cannot be instantiated directly using "),tge=a("code"),IXo=o("__init__()"),qXo=o(" (throws an error)."),NXo=l(),rt=a("div"),m(a0.$$.fragment),jXo=l(),age=a("p"),DXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GXo=l(),Vd=a("p"),OXo=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),VXo=o("not"),XXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),zXo=o("from_pretrained()"),QXo=o(" to load the model weights."),WXo=l(),sge=a("p"),HXo=o("Examples:"),UXo=l(),m(n0.$$.fragment),JXo=l(),Je=a("div"),m(s0.$$.fragment),YXo=l(),lge=a("p"),KXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZXo=l(),rn=a("p"),ezo=o("The model class to instantiate is selected based on the "),ige=a("code"),ozo=o("model_type"),rzo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),nzo=o("pretrained_model_name_or_path"),szo=o(":"),lzo=l(),mge=a("ul"),V1=a("li"),fge=a("strong"),izo=o("vision-encoder-decoder"),dzo=o(" \u2014 "),aO=a("a"),czo=o("VisionEncoderDecoderModel"),mzo=o(" (Vision Encoder decoder model)"),fzo=l(),X1=a("p"),gzo=o("The model is set in evaluation mode by default using "),gge=a("code"),hzo=o("model.eval()"),uzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),pzo=o("model.train()"),_zo=l(),uge=a("p"),bzo=o("Examples:"),vzo=l(),m(l0.$$.fragment),NPe=l(),Xd=a("h2"),z1=a("a"),pge=a("span"),m(i0.$$.fragment),Fzo=l(),_ge=a("span"),Tzo=o("AutoModelForAudioClassification"),jPe=l(),dr=a("div"),m(d0.$$.fragment),Mzo=l(),zd=a("p"),Ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nO=a("a"),Czo=o("from_pretrained()"),wzo=o(" class method or the "),sO=a("a"),Azo=o("from_config()"),yzo=o(` class
method.`),Lzo=l(),c0=a("p"),xzo=o("This class cannot be instantiated directly using "),bge=a("code"),kzo=o("__init__()"),Szo=o(" (throws an error)."),Rzo=l(),tt=a("div"),m(m0.$$.fragment),Bzo=l(),vge=a("p"),Pzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$zo=l(),Qd=a("p"),Izo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),qzo=o("not"),Nzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),jzo=o("from_pretrained()"),Dzo=o(" to load the model weights."),Gzo=l(),Tge=a("p"),Ozo=o("Examples:"),Vzo=l(),m(f0.$$.fragment),Xzo=l(),Ye=a("div"),m(g0.$$.fragment),zzo=l(),Mge=a("p"),Qzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Wzo=l(),tn=a("p"),Hzo=o("The model class to instantiate is selected based on the "),Ege=a("code"),Uzo=o("model_type"),Jzo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(":"),oQo=l(),Re=a("ul"),Q1=a("li"),Age=a("strong"),rQo=o("data2vec-audio"),tQo=o(" \u2014 "),iO=a("a"),aQo=o("Data2VecAudioForSequenceClassification"),nQo=o(" (Data2VecAudio model)"),sQo=l(),W1=a("li"),yge=a("strong"),lQo=o("hubert"),iQo=o(" \u2014 "),dO=a("a"),dQo=o("HubertForSequenceClassification"),cQo=o(" (Hubert model)"),mQo=l(),H1=a("li"),Lge=a("strong"),fQo=o("sew"),gQo=o(" \u2014 "),cO=a("a"),hQo=o("SEWForSequenceClassification"),uQo=o(" (SEW model)"),pQo=l(),U1=a("li"),xge=a("strong"),_Qo=o("sew-d"),bQo=o(" \u2014 "),mO=a("a"),vQo=o("SEWDForSequenceClassification"),FQo=o(" (SEW-D model)"),TQo=l(),J1=a("li"),kge=a("strong"),MQo=o("unispeech"),EQo=o(" \u2014 "),fO=a("a"),CQo=o("UniSpeechForSequenceClassification"),wQo=o(" (UniSpeech model)"),AQo=l(),Y1=a("li"),Sge=a("strong"),yQo=o("unispeech-sat"),LQo=o(" \u2014 "),gO=a("a"),xQo=o("UniSpeechSatForSequenceClassification"),kQo=o(" (UniSpeechSat model)"),SQo=l(),K1=a("li"),Rge=a("strong"),RQo=o("wav2vec2"),BQo=o(" \u2014 "),hO=a("a"),PQo=o("Wav2Vec2ForSequenceClassification"),$Qo=o(" (Wav2Vec2 model)"),IQo=l(),Z1=a("li"),Bge=a("strong"),qQo=o("wavlm"),NQo=o(" \u2014 "),uO=a("a"),jQo=o("WavLMForSequenceClassification"),DQo=o(" (WavLM model)"),GQo=l(),eT=a("p"),OQo=o("The model is set in evaluation mode by default using "),Pge=a("code"),VQo=o("model.eval()"),XQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ge=a("code"),zQo=o("model.train()"),QQo=l(),Ige=a("p"),WQo=o("Examples:"),HQo=l(),m(h0.$$.fragment),DPe=l(),Wd=a("h2"),oT=a("a"),qge=a("span"),m(u0.$$.fragment),UQo=l(),Nge=a("span"),JQo=o("AutoModelForAudioFrameClassification"),GPe=l(),cr=a("div"),m(p0.$$.fragment),YQo=l(),Hd=a("p"),KQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pO=a("a"),ZQo=o("from_pretrained()"),eWo=o(" class method or the "),_O=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),_0=a("p"),aWo=o("This class cannot be instantiated directly using "),jge=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),at=a("div"),m(b0.$$.fragment),iWo=l(),Dge=a("p"),dWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cWo=l(),Ud=a("p"),mWo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),fWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),hWo=o("from_pretrained()"),uWo=o(" to load the model weights."),pWo=l(),Oge=a("p"),_Wo=o("Examples:"),bWo=l(),m(v0.$$.fragment),vWo=l(),Ke=a("div"),m(F0.$$.fragment),FWo=l(),Vge=a("p"),TWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MWo=l(),an=a("p"),EWo=o("The model class to instantiate is selected based on the "),Xge=a("code"),CWo=o("model_type"),wWo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),AWo=o("pretrained_model_name_or_path"),yWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),LWo=o("pretrained_model_name_or_path"),xWo=o(":"),kWo=l(),nn=a("ul"),rT=a("li"),Wge=a("strong"),SWo=o("data2vec-audio"),RWo=o(" \u2014 "),vO=a("a"),BWo=o("Data2VecAudioForAudioFrameClassification"),PWo=o(" (Data2VecAudio model)"),$Wo=l(),tT=a("li"),Hge=a("strong"),IWo=o("unispeech-sat"),qWo=o(" \u2014 "),FO=a("a"),NWo=o("UniSpeechSatForAudioFrameClassification"),jWo=o(" (UniSpeechSat model)"),DWo=l(),aT=a("li"),Uge=a("strong"),GWo=o("wav2vec2"),OWo=o(" \u2014 "),TO=a("a"),VWo=o("Wav2Vec2ForAudioFrameClassification"),XWo=o(" (Wav2Vec2 model)"),zWo=l(),nT=a("li"),Jge=a("strong"),QWo=o("wavlm"),WWo=o(" \u2014 "),MO=a("a"),HWo=o("WavLMForAudioFrameClassification"),UWo=o(" (WavLM model)"),JWo=l(),sT=a("p"),YWo=o("The model is set in evaluation mode by default using "),Yge=a("code"),KWo=o("model.eval()"),ZWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),eHo=o("model.train()"),oHo=l(),Zge=a("p"),rHo=o("Examples:"),tHo=l(),m(T0.$$.fragment),OPe=l(),Jd=a("h2"),lT=a("a"),ehe=a("span"),m(M0.$$.fragment),aHo=l(),ohe=a("span"),nHo=o("AutoModelForCTC"),VPe=l(),mr=a("div"),m(E0.$$.fragment),sHo=l(),Yd=a("p"),lHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EO=a("a"),iHo=o("from_pretrained()"),dHo=o(" class method or the "),CO=a("a"),cHo=o("from_config()"),mHo=o(` class
method.`),fHo=l(),C0=a("p"),gHo=o("This class cannot be instantiated directly using "),rhe=a("code"),hHo=o("__init__()"),uHo=o(" (throws an error)."),pHo=l(),nt=a("div"),m(w0.$$.fragment),_Ho=l(),the=a("p"),bHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vHo=l(),Kd=a("p"),FHo=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),THo=o("not"),MHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),EHo=o("from_pretrained()"),CHo=o(" to load the model weights."),wHo=l(),nhe=a("p"),AHo=o("Examples:"),yHo=l(),m(A0.$$.fragment),LHo=l(),Ze=a("div"),m(y0.$$.fragment),xHo=l(),she=a("p"),kHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),SHo=l(),sn=a("p"),RHo=o("The model class to instantiate is selected based on the "),lhe=a("code"),BHo=o("model_type"),PHo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),$Ho=o("pretrained_model_name_or_path"),IHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),qHo=o("pretrained_model_name_or_path"),NHo=o(":"),jHo=l(),Be=a("ul"),iT=a("li"),che=a("strong"),DHo=o("data2vec-audio"),GHo=o(" \u2014 "),AO=a("a"),OHo=o("Data2VecAudioForCTC"),VHo=o(" (Data2VecAudio model)"),XHo=l(),dT=a("li"),mhe=a("strong"),zHo=o("hubert"),QHo=o(" \u2014 "),yO=a("a"),WHo=o("HubertForCTC"),HHo=o(" (Hubert model)"),UHo=l(),cT=a("li"),fhe=a("strong"),JHo=o("sew"),YHo=o(" \u2014 "),LO=a("a"),KHo=o("SEWForCTC"),ZHo=o(" (SEW model)"),eUo=l(),mT=a("li"),ghe=a("strong"),oUo=o("sew-d"),rUo=o(" \u2014 "),xO=a("a"),tUo=o("SEWDForCTC"),aUo=o(" (SEW-D model)"),nUo=l(),fT=a("li"),hhe=a("strong"),sUo=o("unispeech"),lUo=o(" \u2014 "),kO=a("a"),iUo=o("UniSpeechForCTC"),dUo=o(" (UniSpeech model)"),cUo=l(),gT=a("li"),uhe=a("strong"),mUo=o("unispeech-sat"),fUo=o(" \u2014 "),SO=a("a"),gUo=o("UniSpeechSatForCTC"),hUo=o(" (UniSpeechSat model)"),uUo=l(),hT=a("li"),phe=a("strong"),pUo=o("wav2vec2"),_Uo=o(" \u2014 "),RO=a("a"),bUo=o("Wav2Vec2ForCTC"),vUo=o(" (Wav2Vec2 model)"),FUo=l(),uT=a("li"),_he=a("strong"),TUo=o("wavlm"),MUo=o(" \u2014 "),BO=a("a"),EUo=o("WavLMForCTC"),CUo=o(" (WavLM model)"),wUo=l(),pT=a("p"),AUo=o("The model is set in evaluation mode by default using "),bhe=a("code"),yUo=o("model.eval()"),LUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),xUo=o("model.train()"),kUo=l(),Fhe=a("p"),SUo=o("Examples:"),RUo=l(),m(L0.$$.fragment),XPe=l(),Zd=a("h2"),_T=a("a"),The=a("span"),m(x0.$$.fragment),BUo=l(),Mhe=a("span"),PUo=o("AutoModelForSpeechSeq2Seq"),zPe=l(),fr=a("div"),m(k0.$$.fragment),$Uo=l(),ec=a("p"),IUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PO=a("a"),qUo=o("from_pretrained()"),NUo=o(" class method or the "),$O=a("a"),jUo=o("from_config()"),DUo=o(` class
method.`),GUo=l(),S0=a("p"),OUo=o("This class cannot be instantiated directly using "),Ehe=a("code"),VUo=o("__init__()"),XUo=o(" (throws an error)."),zUo=l(),st=a("div"),m(R0.$$.fragment),QUo=l(),Che=a("p"),WUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HUo=l(),oc=a("p"),UUo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),JUo=o("not"),YUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),KUo=o("from_pretrained()"),ZUo=o(" to load the model weights."),eJo=l(),Ahe=a("p"),oJo=o("Examples:"),rJo=l(),m(B0.$$.fragment),tJo=l(),eo=a("div"),m(P0.$$.fragment),aJo=l(),yhe=a("p"),nJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sJo=l(),ln=a("p"),lJo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),iJo=o("model_type"),dJo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),cJo=o("pretrained_model_name_or_path"),mJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),fJo=o("pretrained_model_name_or_path"),gJo=o(":"),hJo=l(),$0=a("ul"),bT=a("li"),She=a("strong"),uJo=o("speech-encoder-decoder"),pJo=o(" \u2014 "),qO=a("a"),_Jo=o("SpeechEncoderDecoderModel"),bJo=o(" (Speech Encoder decoder model)"),vJo=l(),vT=a("li"),Rhe=a("strong"),FJo=o("speech_to_text"),TJo=o(" \u2014 "),NO=a("a"),MJo=o("Speech2TextForConditionalGeneration"),EJo=o(" (Speech2Text model)"),CJo=l(),FT=a("p"),wJo=o("The model is set in evaluation mode by default using "),Bhe=a("code"),AJo=o("model.eval()"),yJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),LJo=o("model.train()"),xJo=l(),$he=a("p"),kJo=o("Examples:"),SJo=l(),m(I0.$$.fragment),QPe=l(),rc=a("h2"),TT=a("a"),Ihe=a("span"),m(q0.$$.fragment),RJo=l(),qhe=a("span"),BJo=o("AutoModelForAudioXVector"),WPe=l(),gr=a("div"),m(N0.$$.fragment),PJo=l(),tc=a("p"),$Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jO=a("a"),IJo=o("from_pretrained()"),qJo=o(" class method or the "),DO=a("a"),NJo=o("from_config()"),jJo=o(` class
method.`),DJo=l(),j0=a("p"),GJo=o("This class cannot be instantiated directly using "),Nhe=a("code"),OJo=o("__init__()"),VJo=o(" (throws an error)."),XJo=l(),lt=a("div"),m(D0.$$.fragment),zJo=l(),jhe=a("p"),QJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),WJo=l(),ac=a("p"),HJo=o(`Note:
Loading a model from its configuration file does `),Dhe=a("strong"),UJo=o("not"),JJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),YJo=o("from_pretrained()"),KJo=o(" to load the model weights."),ZJo=l(),Ghe=a("p"),eYo=o("Examples:"),oYo=l(),m(G0.$$.fragment),rYo=l(),oo=a("div"),m(O0.$$.fragment),tYo=l(),Ohe=a("p"),aYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nYo=l(),dn=a("p"),sYo=o("The model class to instantiate is selected based on the "),Vhe=a("code"),lYo=o("model_type"),iYo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),mYo=o("pretrained_model_name_or_path"),fYo=o(":"),gYo=l(),cn=a("ul"),MT=a("li"),Qhe=a("strong"),hYo=o("data2vec-audio"),uYo=o(" \u2014 "),OO=a("a"),pYo=o("Data2VecAudioForXVector"),_Yo=o(" (Data2VecAudio model)"),bYo=l(),ET=a("li"),Whe=a("strong"),vYo=o("unispeech-sat"),FYo=o(" \u2014 "),VO=a("a"),TYo=o("UniSpeechSatForXVector"),MYo=o(" (UniSpeechSat model)"),EYo=l(),CT=a("li"),Hhe=a("strong"),CYo=o("wav2vec2"),wYo=o(" \u2014 "),XO=a("a"),AYo=o("Wav2Vec2ForXVector"),yYo=o(" (Wav2Vec2 model)"),LYo=l(),wT=a("li"),Uhe=a("strong"),xYo=o("wavlm"),kYo=o(" \u2014 "),zO=a("a"),SYo=o("WavLMForXVector"),RYo=o(" (WavLM model)"),BYo=l(),AT=a("p"),PYo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),$Yo=o("model.eval()"),IYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),qYo=o("model.train()"),NYo=l(),Khe=a("p"),jYo=o("Examples:"),DYo=l(),m(V0.$$.fragment),HPe=l(),nc=a("h2"),yT=a("a"),Zhe=a("span"),m(X0.$$.fragment),GYo=l(),eue=a("span"),OYo=o("AutoModelForMaskedImageModeling"),UPe=l(),hr=a("div"),m(z0.$$.fragment),VYo=l(),sc=a("p"),XYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QO=a("a"),zYo=o("from_pretrained()"),QYo=o(" class method or the "),WO=a("a"),WYo=o("from_config()"),HYo=o(` class
method.`),UYo=l(),Q0=a("p"),JYo=o("This class cannot be instantiated directly using "),oue=a("code"),YYo=o("__init__()"),KYo=o(" (throws an error)."),ZYo=l(),it=a("div"),m(W0.$$.fragment),eKo=l(),rue=a("p"),oKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rKo=l(),lc=a("p"),tKo=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),aKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),sKo=o("from_pretrained()"),lKo=o(" to load the model weights."),iKo=l(),aue=a("p"),dKo=o("Examples:"),cKo=l(),m(H0.$$.fragment),mKo=l(),ro=a("div"),m(U0.$$.fragment),fKo=l(),nue=a("p"),gKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hKo=l(),mn=a("p"),uKo=o("The model class to instantiate is selected based on the "),sue=a("code"),pKo=o("model_type"),_Ko=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),FKo=o("pretrained_model_name_or_path"),TKo=o(":"),MKo=l(),ic=a("ul"),LT=a("li"),due=a("strong"),EKo=o("deit"),CKo=o(" \u2014 "),UO=a("a"),wKo=o("DeiTForMaskedImageModeling"),AKo=o(" (DeiT model)"),yKo=l(),xT=a("li"),cue=a("strong"),LKo=o("swin"),xKo=o(" \u2014 "),JO=a("a"),kKo=o("SwinForMaskedImageModeling"),SKo=o(" (Swin model)"),RKo=l(),kT=a("li"),mue=a("strong"),BKo=o("vit"),PKo=o(" \u2014 "),YO=a("a"),$Ko=o("ViTForMaskedImageModeling"),IKo=o(" (ViT model)"),qKo=l(),ST=a("p"),NKo=o("The model is set in evaluation mode by default using "),fue=a("code"),jKo=o("model.eval()"),DKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),GKo=o("model.train()"),OKo=l(),hue=a("p"),VKo=o("Examples:"),XKo=l(),m(J0.$$.fragment),JPe=l(),dc=a("h2"),RT=a("a"),uue=a("span"),m(Y0.$$.fragment),zKo=l(),pue=a("span"),QKo=o("AutoModelForObjectDetection"),YPe=l(),ur=a("div"),m(K0.$$.fragment),WKo=l(),cc=a("p"),HKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KO=a("a"),UKo=o("from_pretrained()"),JKo=o(" class method or the "),ZO=a("a"),YKo=o("from_config()"),KKo=o(` class
method.`),ZKo=l(),Z0=a("p"),eZo=o("This class cannot be instantiated directly using "),_ue=a("code"),oZo=o("__init__()"),rZo=o(" (throws an error)."),tZo=l(),dt=a("div"),m(ey.$$.fragment),aZo=l(),bue=a("p"),nZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),sZo=l(),mc=a("p"),lZo=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),iZo=o("not"),dZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),cZo=o("from_pretrained()"),mZo=o(" to load the model weights."),fZo=l(),Fue=a("p"),gZo=o("Examples:"),hZo=l(),m(oy.$$.fragment),uZo=l(),to=a("div"),m(ry.$$.fragment),pZo=l(),Tue=a("p"),_Zo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bZo=l(),fn=a("p"),vZo=o("The model class to instantiate is selected based on the "),Mue=a("code"),FZo=o("model_type"),TZo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),MZo=o("pretrained_model_name_or_path"),EZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),CZo=o("pretrained_model_name_or_path"),wZo=o(":"),AZo=l(),wue=a("ul"),BT=a("li"),Aue=a("strong"),yZo=o("detr"),LZo=o(" \u2014 "),oV=a("a"),xZo=o("DetrForObjectDetection"),kZo=o(" (DETR model)"),SZo=l(),PT=a("p"),RZo=o("The model is set in evaluation mode by default using "),yue=a("code"),BZo=o("model.eval()"),PZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),$Zo=o("model.train()"),IZo=l(),xue=a("p"),qZo=o("Examples:"),NZo=l(),m(ty.$$.fragment),KPe=l(),fc=a("h2"),$T=a("a"),kue=a("span"),m(ay.$$.fragment),jZo=l(),Sue=a("span"),DZo=o("AutoModelForImageSegmentation"),ZPe=l(),pr=a("div"),m(ny.$$.fragment),GZo=l(),gc=a("p"),OZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rV=a("a"),VZo=o("from_pretrained()"),XZo=o(" class method or the "),tV=a("a"),zZo=o("from_config()"),QZo=o(` class
method.`),WZo=l(),sy=a("p"),HZo=o("This class cannot be instantiated directly using "),Rue=a("code"),UZo=o("__init__()"),JZo=o(" (throws an error)."),YZo=l(),ct=a("div"),m(ly.$$.fragment),KZo=l(),Bue=a("p"),ZZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),eer=l(),hc=a("p"),oer=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),rer=o("not"),ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),aer=o("from_pretrained()"),ner=o(" to load the model weights."),ser=l(),$ue=a("p"),ler=o("Examples:"),ier=l(),m(iy.$$.fragment),der=l(),ao=a("div"),m(dy.$$.fragment),cer=l(),Iue=a("p"),mer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fer=l(),gn=a("p"),ger=o("The model class to instantiate is selected based on the "),que=a("code"),her=o("model_type"),uer=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),per=o("pretrained_model_name_or_path"),_er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),ber=o("pretrained_model_name_or_path"),ver=o(":"),Fer=l(),Due=a("ul"),IT=a("li"),Gue=a("strong"),Ter=o("detr"),Mer=o(" \u2014 "),nV=a("a"),Eer=o("DetrForSegmentation"),Cer=o(" (DETR model)"),wer=l(),qT=a("p"),Aer=o("The model is set in evaluation mode by default using "),Oue=a("code"),yer=o("model.eval()"),Ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),xer=o("model.train()"),ker=l(),Xue=a("p"),Ser=o("Examples:"),Rer=l(),m(cy.$$.fragment),e$e=l(),uc=a("h2"),NT=a("a"),zue=a("span"),m(my.$$.fragment),Ber=l(),Que=a("span"),Per=o("AutoModelForSemanticSegmentation"),o$e=l(),_r=a("div"),m(fy.$$.fragment),$er=l(),pc=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sV=a("a"),qer=o("from_pretrained()"),Ner=o(" class method or the "),lV=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),gy=a("p"),Oer=o("This class cannot be instantiated directly using "),Wue=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),mt=a("div"),m(hy.$$.fragment),Qer=l(),Hue=a("p"),Wer=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Her=l(),_c=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),Jue=a("p"),oor=o("Examples:"),ror=l(),m(uy.$$.fragment),tor=l(),no=a("div"),m(py.$$.fragment),aor=l(),Yue=a("p"),nor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sor=l(),hn=a("p"),lor=o("The model class to instantiate is selected based on the "),Kue=a("code"),ior=o("model_type"),dor=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),gor=o("pretrained_model_name_or_path"),hor=o(":"),uor=l(),un=a("ul"),jT=a("li"),ope=a("strong"),por=o("beit"),_or=o(" \u2014 "),dV=a("a"),bor=o("BeitForSemanticSegmentation"),vor=o(" (BEiT model)"),For=l(),DT=a("li"),rpe=a("strong"),Tor=o("data2vec-vision"),Mor=o(" \u2014 "),cV=a("a"),Eor=o("Data2VecVisionForSemanticSegmentation"),Cor=o(" (Data2VecVision model)"),wor=l(),GT=a("li"),tpe=a("strong"),Aor=o("dpt"),yor=o(" \u2014 "),mV=a("a"),Lor=o("DPTForSemanticSegmentation"),xor=o(" (DPT model)"),kor=l(),OT=a("li"),ape=a("strong"),Sor=o("segformer"),Ror=o(" \u2014 "),fV=a("a"),Bor=o("SegformerForSemanticSegmentation"),Por=o(" (SegFormer model)"),$or=l(),VT=a("p"),Ior=o("The model is set in evaluation mode by default using "),npe=a("code"),qor=o("model.eval()"),Nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=a("code"),jor=o("model.train()"),Dor=l(),lpe=a("p"),Gor=o("Examples:"),Oor=l(),m(_y.$$.fragment),r$e=l(),bc=a("h2"),XT=a("a"),ipe=a("span"),m(by.$$.fragment),Vor=l(),dpe=a("span"),Xor=o("AutoModelForInstanceSegmentation"),t$e=l(),br=a("div"),m(vy.$$.fragment),zor=l(),vc=a("p"),Qor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gV=a("a"),Wor=o("from_pretrained()"),Hor=o(" class method or the "),hV=a("a"),Uor=o("from_config()"),Jor=o(` class
method.`),Yor=l(),Fy=a("p"),Kor=o("This class cannot be instantiated directly using "),cpe=a("code"),Zor=o("__init__()"),err=o(" (throws an error)."),orr=l(),ft=a("div"),m(Ty.$$.fragment),rrr=l(),mpe=a("p"),trr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),arr=l(),Fc=a("p"),nrr=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),srr=o("not"),lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),irr=o("from_pretrained()"),drr=o(" to load the model weights."),crr=l(),gpe=a("p"),mrr=o("Examples:"),frr=l(),m(My.$$.fragment),grr=l(),so=a("div"),m(Ey.$$.fragment),hrr=l(),hpe=a("p"),urr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),prr=l(),pn=a("p"),_rr=o("The model class to instantiate is selected based on the "),upe=a("code"),brr=o("model_type"),vrr=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),Frr=o("pretrained_model_name_or_path"),Trr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),Mrr=o("pretrained_model_name_or_path"),Err=o(":"),Crr=l(),bpe=a("ul"),zT=a("li"),vpe=a("strong"),wrr=o("maskformer"),Arr=o(" \u2014 "),pV=a("a"),yrr=o("MaskFormerForInstanceSegmentation"),Lrr=o(" (MaskFormer model)"),xrr=l(),QT=a("p"),krr=o("The model is set in evaluation mode by default using "),Fpe=a("code"),Srr=o("model.eval()"),Rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=a("code"),Brr=o("model.train()"),Prr=l(),Mpe=a("p"),$rr=o("Examples:"),Irr=l(),m(Cy.$$.fragment),a$e=l(),Tc=a("h2"),WT=a("a"),Epe=a("span"),m(wy.$$.fragment),qrr=l(),Cpe=a("span"),Nrr=o("TFAutoModel"),n$e=l(),vr=a("div"),m(Ay.$$.fragment),jrr=l(),Mc=a("p"),Drr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_V=a("a"),Grr=o("from_pretrained()"),Orr=o(" class method or the "),bV=a("a"),Vrr=o("from_config()"),Xrr=o(` class
method.`),zrr=l(),yy=a("p"),Qrr=o("This class cannot be instantiated directly using "),wpe=a("code"),Wrr=o("__init__()"),Hrr=o(" (throws an error)."),Urr=l(),gt=a("div"),m(Ly.$$.fragment),Jrr=l(),Ape=a("p"),Yrr=o("Instantiates one of the base model classes of the library from a configuration."),Krr=l(),Ec=a("p"),Zrr=o(`Note:
Loading a model from its configuration file does `),ype=a("strong"),etr=o("not"),otr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),rtr=o("from_pretrained()"),ttr=o(" to load the model weights."),atr=l(),Lpe=a("p"),ntr=o("Examples:"),str=l(),m(xy.$$.fragment),ltr=l(),uo=a("div"),m(ky.$$.fragment),itr=l(),xpe=a("p"),dtr=o("Instantiate one of the base model classes of the library from a pretrained model."),ctr=l(),_n=a("p"),mtr=o("The model class to instantiate is selected based on the "),kpe=a("code"),ftr=o("model_type"),gtr=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),htr=o("pretrained_model_name_or_path"),utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),ptr=o("pretrained_model_name_or_path"),_tr=o(":"),btr=l(),x=a("ul"),HT=a("li"),Bpe=a("strong"),vtr=o("albert"),Ftr=o(" \u2014 "),FV=a("a"),Ttr=o("TFAlbertModel"),Mtr=o(" (ALBERT model)"),Etr=l(),UT=a("li"),Ppe=a("strong"),Ctr=o("bart"),wtr=o(" \u2014 "),TV=a("a"),Atr=o("TFBartModel"),ytr=o(" (BART model)"),Ltr=l(),JT=a("li"),$pe=a("strong"),xtr=o("bert"),ktr=o(" \u2014 "),MV=a("a"),Str=o("TFBertModel"),Rtr=o(" (BERT model)"),Btr=l(),YT=a("li"),Ipe=a("strong"),Ptr=o("blenderbot"),$tr=o(" \u2014 "),EV=a("a"),Itr=o("TFBlenderbotModel"),qtr=o(" (Blenderbot model)"),Ntr=l(),KT=a("li"),qpe=a("strong"),jtr=o("blenderbot-small"),Dtr=o(" \u2014 "),CV=a("a"),Gtr=o("TFBlenderbotSmallModel"),Otr=o(" (BlenderbotSmall model)"),Vtr=l(),ZT=a("li"),Npe=a("strong"),Xtr=o("camembert"),ztr=o(" \u2014 "),wV=a("a"),Qtr=o("TFCamembertModel"),Wtr=o(" (CamemBERT model)"),Htr=l(),eM=a("li"),jpe=a("strong"),Utr=o("clip"),Jtr=o(" \u2014 "),AV=a("a"),Ytr=o("TFCLIPModel"),Ktr=o(" (CLIP model)"),Ztr=l(),oM=a("li"),Dpe=a("strong"),ear=o("convbert"),oar=o(" \u2014 "),yV=a("a"),rar=o("TFConvBertModel"),tar=o(" (ConvBERT model)"),aar=l(),rM=a("li"),Gpe=a("strong"),nar=o("convnext"),sar=o(" \u2014 "),LV=a("a"),lar=o("TFConvNextModel"),iar=o(" (ConvNext model)"),dar=l(),tM=a("li"),Ope=a("strong"),car=o("ctrl"),mar=o(" \u2014 "),xV=a("a"),far=o("TFCTRLModel"),gar=o(" (CTRL model)"),har=l(),aM=a("li"),Vpe=a("strong"),uar=o("deberta"),par=o(" \u2014 "),kV=a("a"),_ar=o("TFDebertaModel"),bar=o(" (DeBERTa model)"),Far=l(),nM=a("li"),Xpe=a("strong"),Tar=o("deberta-v2"),Mar=o(" \u2014 "),SV=a("a"),Ear=o("TFDebertaV2Model"),Car=o(" (DeBERTa-v2 model)"),war=l(),sM=a("li"),zpe=a("strong"),Aar=o("distilbert"),yar=o(" \u2014 "),RV=a("a"),Lar=o("TFDistilBertModel"),xar=o(" (DistilBERT model)"),kar=l(),lM=a("li"),Qpe=a("strong"),Sar=o("dpr"),Rar=o(" \u2014 "),BV=a("a"),Bar=o("TFDPRQuestionEncoder"),Par=o(" (DPR model)"),$ar=l(),iM=a("li"),Wpe=a("strong"),Iar=o("electra"),qar=o(" \u2014 "),PV=a("a"),Nar=o("TFElectraModel"),jar=o(" (ELECTRA model)"),Dar=l(),dM=a("li"),Hpe=a("strong"),Gar=o("flaubert"),Oar=o(" \u2014 "),$V=a("a"),Var=o("TFFlaubertModel"),Xar=o(" (FlauBERT model)"),zar=l(),Js=a("li"),Upe=a("strong"),Qar=o("funnel"),War=o(" \u2014 "),IV=a("a"),Har=o("TFFunnelModel"),Uar=o(" or "),qV=a("a"),Jar=o("TFFunnelBaseModel"),Yar=o(" (Funnel Transformer model)"),Kar=l(),cM=a("li"),Jpe=a("strong"),Zar=o("gpt2"),enr=o(" \u2014 "),NV=a("a"),onr=o("TFGPT2Model"),rnr=o(" (OpenAI GPT-2 model)"),tnr=l(),mM=a("li"),Ype=a("strong"),anr=o("gptj"),nnr=o(" \u2014 "),jV=a("a"),snr=o("TFGPTJModel"),lnr=o(" (GPT-J model)"),inr=l(),fM=a("li"),Kpe=a("strong"),dnr=o("hubert"),cnr=o(" \u2014 "),DV=a("a"),mnr=o("TFHubertModel"),fnr=o(" (Hubert model)"),gnr=l(),gM=a("li"),Zpe=a("strong"),hnr=o("layoutlm"),unr=o(" \u2014 "),GV=a("a"),pnr=o("TFLayoutLMModel"),_nr=o(" (LayoutLM model)"),bnr=l(),hM=a("li"),e_e=a("strong"),vnr=o("led"),Fnr=o(" \u2014 "),OV=a("a"),Tnr=o("TFLEDModel"),Mnr=o(" (LED model)"),Enr=l(),uM=a("li"),o_e=a("strong"),Cnr=o("longformer"),wnr=o(" \u2014 "),VV=a("a"),Anr=o("TFLongformerModel"),ynr=o(" (Longformer model)"),Lnr=l(),pM=a("li"),r_e=a("strong"),xnr=o("lxmert"),knr=o(" \u2014 "),XV=a("a"),Snr=o("TFLxmertModel"),Rnr=o(" (LXMERT model)"),Bnr=l(),_M=a("li"),t_e=a("strong"),Pnr=o("marian"),$nr=o(" \u2014 "),zV=a("a"),Inr=o("TFMarianModel"),qnr=o(" (Marian model)"),Nnr=l(),bM=a("li"),a_e=a("strong"),jnr=o("mbart"),Dnr=o(" \u2014 "),QV=a("a"),Gnr=o("TFMBartModel"),Onr=o(" (mBART model)"),Vnr=l(),vM=a("li"),n_e=a("strong"),Xnr=o("mobilebert"),znr=o(" \u2014 "),WV=a("a"),Qnr=o("TFMobileBertModel"),Wnr=o(" (MobileBERT model)"),Hnr=l(),FM=a("li"),s_e=a("strong"),Unr=o("mpnet"),Jnr=o(" \u2014 "),HV=a("a"),Ynr=o("TFMPNetModel"),Knr=o(" (MPNet model)"),Znr=l(),TM=a("li"),l_e=a("strong"),esr=o("mt5"),osr=o(" \u2014 "),UV=a("a"),rsr=o("TFMT5Model"),tsr=o(" (mT5 model)"),asr=l(),MM=a("li"),i_e=a("strong"),nsr=o("openai-gpt"),ssr=o(" \u2014 "),JV=a("a"),lsr=o("TFOpenAIGPTModel"),isr=o(" (OpenAI GPT model)"),dsr=l(),EM=a("li"),d_e=a("strong"),csr=o("pegasus"),msr=o(" \u2014 "),YV=a("a"),fsr=o("TFPegasusModel"),gsr=o(" (Pegasus model)"),hsr=l(),CM=a("li"),c_e=a("strong"),usr=o("rembert"),psr=o(" \u2014 "),KV=a("a"),_sr=o("TFRemBertModel"),bsr=o(" (RemBERT model)"),vsr=l(),wM=a("li"),m_e=a("strong"),Fsr=o("roberta"),Tsr=o(" \u2014 "),ZV=a("a"),Msr=o("TFRobertaModel"),Esr=o(" (RoBERTa model)"),Csr=l(),AM=a("li"),f_e=a("strong"),wsr=o("roformer"),Asr=o(" \u2014 "),eX=a("a"),ysr=o("TFRoFormerModel"),Lsr=o(" (RoFormer model)"),xsr=l(),yM=a("li"),g_e=a("strong"),ksr=o("speech_to_text"),Ssr=o(" \u2014 "),oX=a("a"),Rsr=o("TFSpeech2TextModel"),Bsr=o(" (Speech2Text model)"),Psr=l(),LM=a("li"),h_e=a("strong"),$sr=o("t5"),Isr=o(" \u2014 "),rX=a("a"),qsr=o("TFT5Model"),Nsr=o(" (T5 model)"),jsr=l(),xM=a("li"),u_e=a("strong"),Dsr=o("tapas"),Gsr=o(" \u2014 "),tX=a("a"),Osr=o("TFTapasModel"),Vsr=o(" (TAPAS model)"),Xsr=l(),kM=a("li"),p_e=a("strong"),zsr=o("transfo-xl"),Qsr=o(" \u2014 "),aX=a("a"),Wsr=o("TFTransfoXLModel"),Hsr=o(" (Transformer-XL model)"),Usr=l(),SM=a("li"),__e=a("strong"),Jsr=o("vit"),Ysr=o(" \u2014 "),nX=a("a"),Ksr=o("TFViTModel"),Zsr=o(" (ViT model)"),elr=l(),RM=a("li"),b_e=a("strong"),olr=o("vit_mae"),rlr=o(" \u2014 "),sX=a("a"),tlr=o("TFViTMAEModel"),alr=o(" (ViTMAE model)"),nlr=l(),BM=a("li"),v_e=a("strong"),slr=o("wav2vec2"),llr=o(" \u2014 "),lX=a("a"),ilr=o("TFWav2Vec2Model"),dlr=o(" (Wav2Vec2 model)"),clr=l(),PM=a("li"),F_e=a("strong"),mlr=o("xlm"),flr=o(" \u2014 "),iX=a("a"),glr=o("TFXLMModel"),hlr=o(" (XLM model)"),ulr=l(),$M=a("li"),T_e=a("strong"),plr=o("xlm-roberta"),_lr=o(" \u2014 "),dX=a("a"),blr=o("TFXLMRobertaModel"),vlr=o(" (XLM-RoBERTa model)"),Flr=l(),IM=a("li"),M_e=a("strong"),Tlr=o("xlnet"),Mlr=o(" \u2014 "),cX=a("a"),Elr=o("TFXLNetModel"),Clr=o(" (XLNet model)"),wlr=l(),E_e=a("p"),Alr=o("Examples:"),ylr=l(),m(Sy.$$.fragment),s$e=l(),Cc=a("h2"),qM=a("a"),C_e=a("span"),m(Ry.$$.fragment),Llr=l(),w_e=a("span"),xlr=o("TFAutoModelForPreTraining"),l$e=l(),Fr=a("div"),m(By.$$.fragment),klr=l(),wc=a("p"),Slr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mX=a("a"),Rlr=o("from_pretrained()"),Blr=o(" class method or the "),fX=a("a"),Plr=o("from_config()"),$lr=o(` class
method.`),Ilr=l(),Py=a("p"),qlr=o("This class cannot be instantiated directly using "),A_e=a("code"),Nlr=o("__init__()"),jlr=o(" (throws an error)."),Dlr=l(),ht=a("div"),m($y.$$.fragment),Glr=l(),y_e=a("p"),Olr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vlr=l(),Ac=a("p"),Xlr=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),zlr=o("not"),Qlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),Wlr=o("from_pretrained()"),Hlr=o(" to load the model weights."),Ulr=l(),x_e=a("p"),Jlr=o("Examples:"),Ylr=l(),m(Iy.$$.fragment),Klr=l(),po=a("div"),m(qy.$$.fragment),Zlr=l(),k_e=a("p"),eir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oir=l(),bn=a("p"),rir=o("The model class to instantiate is selected based on the "),S_e=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),U=a("ul"),NM=a("li"),P_e=a("strong"),cir=o("albert"),mir=o(" \u2014 "),hX=a("a"),fir=o("TFAlbertForPreTraining"),gir=o(" (ALBERT model)"),hir=l(),jM=a("li"),$_e=a("strong"),uir=o("bart"),pir=o(" \u2014 "),uX=a("a"),_ir=o("TFBartForConditionalGeneration"),bir=o(" (BART model)"),vir=l(),DM=a("li"),I_e=a("strong"),Fir=o("bert"),Tir=o(" \u2014 "),pX=a("a"),Mir=o("TFBertForPreTraining"),Eir=o(" (BERT model)"),Cir=l(),GM=a("li"),q_e=a("strong"),wir=o("camembert"),Air=o(" \u2014 "),_X=a("a"),yir=o("TFCamembertForMaskedLM"),Lir=o(" (CamemBERT model)"),xir=l(),OM=a("li"),N_e=a("strong"),kir=o("ctrl"),Sir=o(" \u2014 "),bX=a("a"),Rir=o("TFCTRLLMHeadModel"),Bir=o(" (CTRL model)"),Pir=l(),VM=a("li"),j_e=a("strong"),$ir=o("distilbert"),Iir=o(" \u2014 "),vX=a("a"),qir=o("TFDistilBertForMaskedLM"),Nir=o(" (DistilBERT model)"),jir=l(),XM=a("li"),D_e=a("strong"),Dir=o("electra"),Gir=o(" \u2014 "),FX=a("a"),Oir=o("TFElectraForPreTraining"),Vir=o(" (ELECTRA model)"),Xir=l(),zM=a("li"),G_e=a("strong"),zir=o("flaubert"),Qir=o(" \u2014 "),TX=a("a"),Wir=o("TFFlaubertWithLMHeadModel"),Hir=o(" (FlauBERT model)"),Uir=l(),QM=a("li"),O_e=a("strong"),Jir=o("funnel"),Yir=o(" \u2014 "),MX=a("a"),Kir=o("TFFunnelForPreTraining"),Zir=o(" (Funnel Transformer model)"),edr=l(),WM=a("li"),V_e=a("strong"),odr=o("gpt2"),rdr=o(" \u2014 "),EX=a("a"),tdr=o("TFGPT2LMHeadModel"),adr=o(" (OpenAI GPT-2 model)"),ndr=l(),HM=a("li"),X_e=a("strong"),sdr=o("layoutlm"),ldr=o(" \u2014 "),CX=a("a"),idr=o("TFLayoutLMForMaskedLM"),ddr=o(" (LayoutLM model)"),cdr=l(),UM=a("li"),z_e=a("strong"),mdr=o("lxmert"),fdr=o(" \u2014 "),wX=a("a"),gdr=o("TFLxmertForPreTraining"),hdr=o(" (LXMERT model)"),udr=l(),JM=a("li"),Q_e=a("strong"),pdr=o("mobilebert"),_dr=o(" \u2014 "),AX=a("a"),bdr=o("TFMobileBertForPreTraining"),vdr=o(" (MobileBERT model)"),Fdr=l(),YM=a("li"),W_e=a("strong"),Tdr=o("mpnet"),Mdr=o(" \u2014 "),yX=a("a"),Edr=o("TFMPNetForMaskedLM"),Cdr=o(" (MPNet model)"),wdr=l(),KM=a("li"),H_e=a("strong"),Adr=o("openai-gpt"),ydr=o(" \u2014 "),LX=a("a"),Ldr=o("TFOpenAIGPTLMHeadModel"),xdr=o(" (OpenAI GPT model)"),kdr=l(),ZM=a("li"),U_e=a("strong"),Sdr=o("roberta"),Rdr=o(" \u2014 "),xX=a("a"),Bdr=o("TFRobertaForMaskedLM"),Pdr=o(" (RoBERTa model)"),$dr=l(),e4=a("li"),J_e=a("strong"),Idr=o("t5"),qdr=o(" \u2014 "),kX=a("a"),Ndr=o("TFT5ForConditionalGeneration"),jdr=o(" (T5 model)"),Ddr=l(),o4=a("li"),Y_e=a("strong"),Gdr=o("tapas"),Odr=o(" \u2014 "),SX=a("a"),Vdr=o("TFTapasForMaskedLM"),Xdr=o(" (TAPAS model)"),zdr=l(),r4=a("li"),K_e=a("strong"),Qdr=o("transfo-xl"),Wdr=o(" \u2014 "),RX=a("a"),Hdr=o("TFTransfoXLLMHeadModel"),Udr=o(" (Transformer-XL model)"),Jdr=l(),t4=a("li"),Z_e=a("strong"),Ydr=o("vit_mae"),Kdr=o(" \u2014 "),BX=a("a"),Zdr=o("TFViTMAEForPreTraining"),ecr=o(" (ViTMAE model)"),ocr=l(),a4=a("li"),ebe=a("strong"),rcr=o("xlm"),tcr=o(" \u2014 "),PX=a("a"),acr=o("TFXLMWithLMHeadModel"),ncr=o(" (XLM model)"),scr=l(),n4=a("li"),obe=a("strong"),lcr=o("xlm-roberta"),icr=o(" \u2014 "),$X=a("a"),dcr=o("TFXLMRobertaForMaskedLM"),ccr=o(" (XLM-RoBERTa model)"),mcr=l(),s4=a("li"),rbe=a("strong"),fcr=o("xlnet"),gcr=o(" \u2014 "),IX=a("a"),hcr=o("TFXLNetLMHeadModel"),ucr=o(" (XLNet model)"),pcr=l(),tbe=a("p"),_cr=o("Examples:"),bcr=l(),m(Ny.$$.fragment),i$e=l(),yc=a("h2"),l4=a("a"),abe=a("span"),m(jy.$$.fragment),vcr=l(),nbe=a("span"),Fcr=o("TFAutoModelForCausalLM"),d$e=l(),Tr=a("div"),m(Dy.$$.fragment),Tcr=l(),Lc=a("p"),Mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qX=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" class method or the "),NX=a("a"),wcr=o("from_config()"),Acr=o(` class
method.`),ycr=l(),Gy=a("p"),Lcr=o("This class cannot be instantiated directly using "),sbe=a("code"),xcr=o("__init__()"),kcr=o(" (throws an error)."),Scr=l(),ut=a("div"),m(Oy.$$.fragment),Rcr=l(),lbe=a("p"),Bcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pcr=l(),xc=a("p"),$cr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),Icr=o("not"),qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Ncr=o("from_pretrained()"),jcr=o(" to load the model weights."),Dcr=l(),dbe=a("p"),Gcr=o("Examples:"),Ocr=l(),m(Vy.$$.fragment),Vcr=l(),_o=a("div"),m(Xy.$$.fragment),Xcr=l(),cbe=a("p"),zcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qcr=l(),vn=a("p"),Wcr=o("The model class to instantiate is selected based on the "),mbe=a("code"),Hcr=o("model_type"),Ucr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),Kcr=o("pretrained_model_name_or_path"),Zcr=o(":"),emr=l(),ge=a("ul"),i4=a("li"),hbe=a("strong"),omr=o("bert"),rmr=o(" \u2014 "),DX=a("a"),tmr=o("TFBertLMHeadModel"),amr=o(" (BERT model)"),nmr=l(),d4=a("li"),ube=a("strong"),smr=o("camembert"),lmr=o(" \u2014 "),GX=a("a"),imr=o("TFCamembertForCausalLM"),dmr=o(" (CamemBERT model)"),cmr=l(),c4=a("li"),pbe=a("strong"),mmr=o("ctrl"),fmr=o(" \u2014 "),OX=a("a"),gmr=o("TFCTRLLMHeadModel"),hmr=o(" (CTRL model)"),umr=l(),m4=a("li"),_be=a("strong"),pmr=o("gpt2"),_mr=o(" \u2014 "),VX=a("a"),bmr=o("TFGPT2LMHeadModel"),vmr=o(" (OpenAI GPT-2 model)"),Fmr=l(),f4=a("li"),bbe=a("strong"),Tmr=o("gptj"),Mmr=o(" \u2014 "),XX=a("a"),Emr=o("TFGPTJForCausalLM"),Cmr=o(" (GPT-J model)"),wmr=l(),g4=a("li"),vbe=a("strong"),Amr=o("openai-gpt"),ymr=o(" \u2014 "),zX=a("a"),Lmr=o("TFOpenAIGPTLMHeadModel"),xmr=o(" (OpenAI GPT model)"),kmr=l(),h4=a("li"),Fbe=a("strong"),Smr=o("rembert"),Rmr=o(" \u2014 "),QX=a("a"),Bmr=o("TFRemBertForCausalLM"),Pmr=o(" (RemBERT model)"),$mr=l(),u4=a("li"),Tbe=a("strong"),Imr=o("roberta"),qmr=o(" \u2014 "),WX=a("a"),Nmr=o("TFRobertaForCausalLM"),jmr=o(" (RoBERTa model)"),Dmr=l(),p4=a("li"),Mbe=a("strong"),Gmr=o("roformer"),Omr=o(" \u2014 "),HX=a("a"),Vmr=o("TFRoFormerForCausalLM"),Xmr=o(" (RoFormer model)"),zmr=l(),_4=a("li"),Ebe=a("strong"),Qmr=o("transfo-xl"),Wmr=o(" \u2014 "),UX=a("a"),Hmr=o("TFTransfoXLLMHeadModel"),Umr=o(" (Transformer-XL model)"),Jmr=l(),b4=a("li"),Cbe=a("strong"),Ymr=o("xlm"),Kmr=o(" \u2014 "),JX=a("a"),Zmr=o("TFXLMWithLMHeadModel"),efr=o(" (XLM model)"),ofr=l(),v4=a("li"),wbe=a("strong"),rfr=o("xlnet"),tfr=o(" \u2014 "),YX=a("a"),afr=o("TFXLNetLMHeadModel"),nfr=o(" (XLNet model)"),sfr=l(),Abe=a("p"),lfr=o("Examples:"),ifr=l(),m(zy.$$.fragment),c$e=l(),kc=a("h2"),F4=a("a"),ybe=a("span"),m(Qy.$$.fragment),dfr=l(),Lbe=a("span"),cfr=o("TFAutoModelForImageClassification"),m$e=l(),Mr=a("div"),m(Wy.$$.fragment),mfr=l(),Sc=a("p"),ffr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KX=a("a"),gfr=o("from_pretrained()"),hfr=o(" class method or the "),ZX=a("a"),ufr=o("from_config()"),pfr=o(` class
method.`),_fr=l(),Hy=a("p"),bfr=o("This class cannot be instantiated directly using "),xbe=a("code"),vfr=o("__init__()"),Ffr=o(" (throws an error)."),Tfr=l(),pt=a("div"),m(Uy.$$.fragment),Mfr=l(),kbe=a("p"),Efr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cfr=l(),Rc=a("p"),wfr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),Afr=o("not"),yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),Lfr=o("from_pretrained()"),xfr=o(" to load the model weights."),kfr=l(),Rbe=a("p"),Sfr=o("Examples:"),Rfr=l(),m(Jy.$$.fragment),Bfr=l(),bo=a("div"),m(Yy.$$.fragment),Pfr=l(),Bbe=a("p"),$fr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ifr=l(),Fn=a("p"),qfr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),Nfr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),Dfr=o("pretrained_model_name_or_path"),Gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),Ofr=o("pretrained_model_name_or_path"),Vfr=o(":"),Xfr=l(),Ky=a("ul"),T4=a("li"),qbe=a("strong"),zfr=o("convnext"),Qfr=o(" \u2014 "),oz=a("a"),Wfr=o("TFConvNextForImageClassification"),Hfr=o(" (ConvNext model)"),Ufr=l(),M4=a("li"),Nbe=a("strong"),Jfr=o("vit"),Yfr=o(" \u2014 "),rz=a("a"),Kfr=o("TFViTForImageClassification"),Zfr=o(" (ViT model)"),egr=l(),jbe=a("p"),ogr=o("Examples:"),rgr=l(),m(Zy.$$.fragment),f$e=l(),Bc=a("h2"),E4=a("a"),Dbe=a("span"),m(e8.$$.fragment),tgr=l(),Gbe=a("span"),agr=o("TFAutoModelForMaskedLM"),g$e=l(),Er=a("div"),m(o8.$$.fragment),ngr=l(),Pc=a("p"),sgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tz=a("a"),lgr=o("from_pretrained()"),igr=o(" class method or the "),az=a("a"),dgr=o("from_config()"),cgr=o(` class
method.`),mgr=l(),r8=a("p"),fgr=o("This class cannot be instantiated directly using "),Obe=a("code"),ggr=o("__init__()"),hgr=o(" (throws an error)."),ugr=l(),_t=a("div"),m(t8.$$.fragment),pgr=l(),Vbe=a("p"),_gr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bgr=l(),$c=a("p"),vgr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),Fgr=o("not"),Tgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),Mgr=o("from_pretrained()"),Egr=o(" to load the model weights."),Cgr=l(),zbe=a("p"),wgr=o("Examples:"),Agr=l(),m(a8.$$.fragment),ygr=l(),vo=a("div"),m(n8.$$.fragment),Lgr=l(),Qbe=a("p"),xgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kgr=l(),Tn=a("p"),Sgr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),Rgr=o("model_type"),Bgr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),Pgr=o("pretrained_model_name_or_path"),$gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),Igr=o("pretrained_model_name_or_path"),qgr=o(":"),Ngr=l(),K=a("ul"),C4=a("li"),Jbe=a("strong"),jgr=o("albert"),Dgr=o(" \u2014 "),sz=a("a"),Ggr=o("TFAlbertForMaskedLM"),Ogr=o(" (ALBERT model)"),Vgr=l(),w4=a("li"),Ybe=a("strong"),Xgr=o("bert"),zgr=o(" \u2014 "),lz=a("a"),Qgr=o("TFBertForMaskedLM"),Wgr=o(" (BERT model)"),Hgr=l(),A4=a("li"),Kbe=a("strong"),Ugr=o("camembert"),Jgr=o(" \u2014 "),iz=a("a"),Ygr=o("TFCamembertForMaskedLM"),Kgr=o(" (CamemBERT model)"),Zgr=l(),y4=a("li"),Zbe=a("strong"),ehr=o("convbert"),ohr=o(" \u2014 "),dz=a("a"),rhr=o("TFConvBertForMaskedLM"),thr=o(" (ConvBERT model)"),ahr=l(),L4=a("li"),e2e=a("strong"),nhr=o("deberta"),shr=o(" \u2014 "),cz=a("a"),lhr=o("TFDebertaForMaskedLM"),ihr=o(" (DeBERTa model)"),dhr=l(),x4=a("li"),o2e=a("strong"),chr=o("deberta-v2"),mhr=o(" \u2014 "),mz=a("a"),fhr=o("TFDebertaV2ForMaskedLM"),ghr=o(" (DeBERTa-v2 model)"),hhr=l(),k4=a("li"),r2e=a("strong"),uhr=o("distilbert"),phr=o(" \u2014 "),fz=a("a"),_hr=o("TFDistilBertForMaskedLM"),bhr=o(" (DistilBERT model)"),vhr=l(),S4=a("li"),t2e=a("strong"),Fhr=o("electra"),Thr=o(" \u2014 "),gz=a("a"),Mhr=o("TFElectraForMaskedLM"),Ehr=o(" (ELECTRA model)"),Chr=l(),R4=a("li"),a2e=a("strong"),whr=o("flaubert"),Ahr=o(" \u2014 "),hz=a("a"),yhr=o("TFFlaubertWithLMHeadModel"),Lhr=o(" (FlauBERT model)"),xhr=l(),B4=a("li"),n2e=a("strong"),khr=o("funnel"),Shr=o(" \u2014 "),uz=a("a"),Rhr=o("TFFunnelForMaskedLM"),Bhr=o(" (Funnel Transformer model)"),Phr=l(),P4=a("li"),s2e=a("strong"),$hr=o("layoutlm"),Ihr=o(" \u2014 "),pz=a("a"),qhr=o("TFLayoutLMForMaskedLM"),Nhr=o(" (LayoutLM model)"),jhr=l(),$4=a("li"),l2e=a("strong"),Dhr=o("longformer"),Ghr=o(" \u2014 "),_z=a("a"),Ohr=o("TFLongformerForMaskedLM"),Vhr=o(" (Longformer model)"),Xhr=l(),I4=a("li"),i2e=a("strong"),zhr=o("mobilebert"),Qhr=o(" \u2014 "),bz=a("a"),Whr=o("TFMobileBertForMaskedLM"),Hhr=o(" (MobileBERT model)"),Uhr=l(),q4=a("li"),d2e=a("strong"),Jhr=o("mpnet"),Yhr=o(" \u2014 "),vz=a("a"),Khr=o("TFMPNetForMaskedLM"),Zhr=o(" (MPNet model)"),eur=l(),N4=a("li"),c2e=a("strong"),our=o("rembert"),rur=o(" \u2014 "),Fz=a("a"),tur=o("TFRemBertForMaskedLM"),aur=o(" (RemBERT model)"),nur=l(),j4=a("li"),m2e=a("strong"),sur=o("roberta"),lur=o(" \u2014 "),Tz=a("a"),iur=o("TFRobertaForMaskedLM"),dur=o(" (RoBERTa model)"),cur=l(),D4=a("li"),f2e=a("strong"),mur=o("roformer"),fur=o(" \u2014 "),Mz=a("a"),gur=o("TFRoFormerForMaskedLM"),hur=o(" (RoFormer model)"),uur=l(),G4=a("li"),g2e=a("strong"),pur=o("tapas"),_ur=o(" \u2014 "),Ez=a("a"),bur=o("TFTapasForMaskedLM"),vur=o(" (TAPAS model)"),Fur=l(),O4=a("li"),h2e=a("strong"),Tur=o("xlm"),Mur=o(" \u2014 "),Cz=a("a"),Eur=o("TFXLMWithLMHeadModel"),Cur=o(" (XLM model)"),wur=l(),V4=a("li"),u2e=a("strong"),Aur=o("xlm-roberta"),yur=o(" \u2014 "),wz=a("a"),Lur=o("TFXLMRobertaForMaskedLM"),xur=o(" (XLM-RoBERTa model)"),kur=l(),p2e=a("p"),Sur=o("Examples:"),Rur=l(),m(s8.$$.fragment),h$e=l(),Ic=a("h2"),X4=a("a"),_2e=a("span"),m(l8.$$.fragment),Bur=l(),b2e=a("span"),Pur=o("TFAutoModelForSeq2SeqLM"),u$e=l(),Cr=a("div"),m(i8.$$.fragment),$ur=l(),qc=a("p"),Iur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Az=a("a"),qur=o("from_pretrained()"),Nur=o(" class method or the "),yz=a("a"),jur=o("from_config()"),Dur=o(` class
method.`),Gur=l(),d8=a("p"),Our=o("This class cannot be instantiated directly using "),v2e=a("code"),Vur=o("__init__()"),Xur=o(" (throws an error)."),zur=l(),bt=a("div"),m(c8.$$.fragment),Qur=l(),F2e=a("p"),Wur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hur=l(),Nc=a("p"),Uur=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),Jur=o("not"),Yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Kur=o("from_pretrained()"),Zur=o(" to load the model weights."),epr=l(),M2e=a("p"),opr=o("Examples:"),rpr=l(),m(m8.$$.fragment),tpr=l(),Fo=a("div"),m(f8.$$.fragment),apr=l(),E2e=a("p"),npr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),spr=l(),Mn=a("p"),lpr=o("The model class to instantiate is selected based on the "),C2e=a("code"),ipr=o("model_type"),dpr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),cpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),fpr=o("pretrained_model_name_or_path"),gpr=o(":"),hpr=l(),Fe=a("ul"),z4=a("li"),y2e=a("strong"),upr=o("bart"),ppr=o(" \u2014 "),xz=a("a"),_pr=o("TFBartForConditionalGeneration"),bpr=o(" (BART model)"),vpr=l(),Q4=a("li"),L2e=a("strong"),Fpr=o("blenderbot"),Tpr=o(" \u2014 "),kz=a("a"),Mpr=o("TFBlenderbotForConditionalGeneration"),Epr=o(" (Blenderbot model)"),Cpr=l(),W4=a("li"),x2e=a("strong"),wpr=o("blenderbot-small"),Apr=o(" \u2014 "),Sz=a("a"),ypr=o("TFBlenderbotSmallForConditionalGeneration"),Lpr=o(" (BlenderbotSmall model)"),xpr=l(),H4=a("li"),k2e=a("strong"),kpr=o("encoder-decoder"),Spr=o(" \u2014 "),Rz=a("a"),Rpr=o("TFEncoderDecoderModel"),Bpr=o(" (Encoder decoder model)"),Ppr=l(),U4=a("li"),S2e=a("strong"),$pr=o("led"),Ipr=o(" \u2014 "),Bz=a("a"),qpr=o("TFLEDForConditionalGeneration"),Npr=o(" (LED model)"),jpr=l(),J4=a("li"),R2e=a("strong"),Dpr=o("marian"),Gpr=o(" \u2014 "),Pz=a("a"),Opr=o("TFMarianMTModel"),Vpr=o(" (Marian model)"),Xpr=l(),Y4=a("li"),B2e=a("strong"),zpr=o("mbart"),Qpr=o(" \u2014 "),$z=a("a"),Wpr=o("TFMBartForConditionalGeneration"),Hpr=o(" (mBART model)"),Upr=l(),K4=a("li"),P2e=a("strong"),Jpr=o("mt5"),Ypr=o(" \u2014 "),Iz=a("a"),Kpr=o("TFMT5ForConditionalGeneration"),Zpr=o(" (mT5 model)"),e_r=l(),Z4=a("li"),$2e=a("strong"),o_r=o("pegasus"),r_r=o(" \u2014 "),qz=a("a"),t_r=o("TFPegasusForConditionalGeneration"),a_r=o(" (Pegasus model)"),n_r=l(),eE=a("li"),I2e=a("strong"),s_r=o("t5"),l_r=o(" \u2014 "),Nz=a("a"),i_r=o("TFT5ForConditionalGeneration"),d_r=o(" (T5 model)"),c_r=l(),q2e=a("p"),m_r=o("Examples:"),f_r=l(),m(g8.$$.fragment),p$e=l(),jc=a("h2"),oE=a("a"),N2e=a("span"),m(h8.$$.fragment),g_r=l(),j2e=a("span"),h_r=o("TFAutoModelForSequenceClassification"),_$e=l(),wr=a("div"),m(u8.$$.fragment),u_r=l(),Dc=a("p"),p_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jz=a("a"),__r=o("from_pretrained()"),b_r=o(" class method or the "),Dz=a("a"),v_r=o("from_config()"),F_r=o(` class
method.`),T_r=l(),p8=a("p"),M_r=o("This class cannot be instantiated directly using "),D2e=a("code"),E_r=o("__init__()"),C_r=o(" (throws an error)."),w_r=l(),vt=a("div"),m(_8.$$.fragment),A_r=l(),G2e=a("p"),y_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),L_r=l(),Gc=a("p"),x_r=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),k_r=o("not"),S_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),R_r=o("from_pretrained()"),B_r=o(" to load the model weights."),P_r=l(),V2e=a("p"),$_r=o("Examples:"),I_r=l(),m(b8.$$.fragment),q_r=l(),To=a("div"),m(v8.$$.fragment),N_r=l(),X2e=a("p"),j_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),D_r=l(),En=a("p"),G_r=o("The model class to instantiate is selected based on the "),z2e=a("code"),O_r=o("model_type"),V_r=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),X_r=o("pretrained_model_name_or_path"),z_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),Q_r=o("pretrained_model_name_or_path"),W_r=o(":"),H_r=l(),V=a("ul"),rE=a("li"),H2e=a("strong"),U_r=o("albert"),J_r=o(" \u2014 "),Oz=a("a"),Y_r=o("TFAlbertForSequenceClassification"),K_r=o(" (ALBERT model)"),Z_r=l(),tE=a("li"),U2e=a("strong"),ebr=o("bert"),obr=o(" \u2014 "),Vz=a("a"),rbr=o("TFBertForSequenceClassification"),tbr=o(" (BERT model)"),abr=l(),aE=a("li"),J2e=a("strong"),nbr=o("camembert"),sbr=o(" \u2014 "),Xz=a("a"),lbr=o("TFCamembertForSequenceClassification"),ibr=o(" (CamemBERT model)"),dbr=l(),nE=a("li"),Y2e=a("strong"),cbr=o("convbert"),mbr=o(" \u2014 "),zz=a("a"),fbr=o("TFConvBertForSequenceClassification"),gbr=o(" (ConvBERT model)"),hbr=l(),sE=a("li"),K2e=a("strong"),ubr=o("ctrl"),pbr=o(" \u2014 "),Qz=a("a"),_br=o("TFCTRLForSequenceClassification"),bbr=o(" (CTRL model)"),vbr=l(),lE=a("li"),Z2e=a("strong"),Fbr=o("deberta"),Tbr=o(" \u2014 "),Wz=a("a"),Mbr=o("TFDebertaForSequenceClassification"),Ebr=o(" (DeBERTa model)"),Cbr=l(),iE=a("li"),eve=a("strong"),wbr=o("deberta-v2"),Abr=o(" \u2014 "),Hz=a("a"),ybr=o("TFDebertaV2ForSequenceClassification"),Lbr=o(" (DeBERTa-v2 model)"),xbr=l(),dE=a("li"),ove=a("strong"),kbr=o("distilbert"),Sbr=o(" \u2014 "),Uz=a("a"),Rbr=o("TFDistilBertForSequenceClassification"),Bbr=o(" (DistilBERT model)"),Pbr=l(),cE=a("li"),rve=a("strong"),$br=o("electra"),Ibr=o(" \u2014 "),Jz=a("a"),qbr=o("TFElectraForSequenceClassification"),Nbr=o(" (ELECTRA model)"),jbr=l(),mE=a("li"),tve=a("strong"),Dbr=o("flaubert"),Gbr=o(" \u2014 "),Yz=a("a"),Obr=o("TFFlaubertForSequenceClassification"),Vbr=o(" (FlauBERT model)"),Xbr=l(),fE=a("li"),ave=a("strong"),zbr=o("funnel"),Qbr=o(" \u2014 "),Kz=a("a"),Wbr=o("TFFunnelForSequenceClassification"),Hbr=o(" (Funnel Transformer model)"),Ubr=l(),gE=a("li"),nve=a("strong"),Jbr=o("gpt2"),Ybr=o(" \u2014 "),Zz=a("a"),Kbr=o("TFGPT2ForSequenceClassification"),Zbr=o(" (OpenAI GPT-2 model)"),e2r=l(),hE=a("li"),sve=a("strong"),o2r=o("gptj"),r2r=o(" \u2014 "),eQ=a("a"),t2r=o("TFGPTJForSequenceClassification"),a2r=o(" (GPT-J model)"),n2r=l(),uE=a("li"),lve=a("strong"),s2r=o("layoutlm"),l2r=o(" \u2014 "),oQ=a("a"),i2r=o("TFLayoutLMForSequenceClassification"),d2r=o(" (LayoutLM model)"),c2r=l(),pE=a("li"),ive=a("strong"),m2r=o("longformer"),f2r=o(" \u2014 "),rQ=a("a"),g2r=o("TFLongformerForSequenceClassification"),h2r=o(" (Longformer model)"),u2r=l(),_E=a("li"),dve=a("strong"),p2r=o("mobilebert"),_2r=o(" \u2014 "),tQ=a("a"),b2r=o("TFMobileBertForSequenceClassification"),v2r=o(" (MobileBERT model)"),F2r=l(),bE=a("li"),cve=a("strong"),T2r=o("mpnet"),M2r=o(" \u2014 "),aQ=a("a"),E2r=o("TFMPNetForSequenceClassification"),C2r=o(" (MPNet model)"),w2r=l(),vE=a("li"),mve=a("strong"),A2r=o("openai-gpt"),y2r=o(" \u2014 "),nQ=a("a"),L2r=o("TFOpenAIGPTForSequenceClassification"),x2r=o(" (OpenAI GPT model)"),k2r=l(),FE=a("li"),fve=a("strong"),S2r=o("rembert"),R2r=o(" \u2014 "),sQ=a("a"),B2r=o("TFRemBertForSequenceClassification"),P2r=o(" (RemBERT model)"),$2r=l(),TE=a("li"),gve=a("strong"),I2r=o("roberta"),q2r=o(" \u2014 "),lQ=a("a"),N2r=o("TFRobertaForSequenceClassification"),j2r=o(" (RoBERTa model)"),D2r=l(),ME=a("li"),hve=a("strong"),G2r=o("roformer"),O2r=o(" \u2014 "),iQ=a("a"),V2r=o("TFRoFormerForSequenceClassification"),X2r=o(" (RoFormer model)"),z2r=l(),EE=a("li"),uve=a("strong"),Q2r=o("tapas"),W2r=o(" \u2014 "),dQ=a("a"),H2r=o("TFTapasForSequenceClassification"),U2r=o(" (TAPAS model)"),J2r=l(),CE=a("li"),pve=a("strong"),Y2r=o("transfo-xl"),K2r=o(" \u2014 "),cQ=a("a"),Z2r=o("TFTransfoXLForSequenceClassification"),evr=o(" (Transformer-XL model)"),ovr=l(),wE=a("li"),_ve=a("strong"),rvr=o("xlm"),tvr=o(" \u2014 "),mQ=a("a"),avr=o("TFXLMForSequenceClassification"),nvr=o(" (XLM model)"),svr=l(),AE=a("li"),bve=a("strong"),lvr=o("xlm-roberta"),ivr=o(" \u2014 "),fQ=a("a"),dvr=o("TFXLMRobertaForSequenceClassification"),cvr=o(" (XLM-RoBERTa model)"),mvr=l(),yE=a("li"),vve=a("strong"),fvr=o("xlnet"),gvr=o(" \u2014 "),gQ=a("a"),hvr=o("TFXLNetForSequenceClassification"),uvr=o(" (XLNet model)"),pvr=l(),Fve=a("p"),_vr=o("Examples:"),bvr=l(),m(F8.$$.fragment),b$e=l(),Oc=a("h2"),LE=a("a"),Tve=a("span"),m(T8.$$.fragment),vvr=l(),Mve=a("span"),Fvr=o("TFAutoModelForMultipleChoice"),v$e=l(),Ar=a("div"),m(M8.$$.fragment),Tvr=l(),Vc=a("p"),Mvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hQ=a("a"),Evr=o("from_pretrained()"),Cvr=o(" class method or the "),uQ=a("a"),wvr=o("from_config()"),Avr=o(` class
method.`),yvr=l(),E8=a("p"),Lvr=o("This class cannot be instantiated directly using "),Eve=a("code"),xvr=o("__init__()"),kvr=o(" (throws an error)."),Svr=l(),Ft=a("div"),m(C8.$$.fragment),Rvr=l(),Cve=a("p"),Bvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pvr=l(),Xc=a("p"),$vr=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),Ivr=o("not"),qvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Nvr=o("from_pretrained()"),jvr=o(" to load the model weights."),Dvr=l(),Ave=a("p"),Gvr=o("Examples:"),Ovr=l(),m(w8.$$.fragment),Vvr=l(),Mo=a("div"),m(A8.$$.fragment),Xvr=l(),yve=a("p"),zvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qvr=l(),Cn=a("p"),Wvr=o("The model class to instantiate is selected based on the "),Lve=a("code"),Hvr=o("model_type"),Uvr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(":"),eFr=l(),se=a("ul"),xE=a("li"),Sve=a("strong"),oFr=o("albert"),rFr=o(" \u2014 "),_Q=a("a"),tFr=o("TFAlbertForMultipleChoice"),aFr=o(" (ALBERT model)"),nFr=l(),kE=a("li"),Rve=a("strong"),sFr=o("bert"),lFr=o(" \u2014 "),bQ=a("a"),iFr=o("TFBertForMultipleChoice"),dFr=o(" (BERT model)"),cFr=l(),SE=a("li"),Bve=a("strong"),mFr=o("camembert"),fFr=o(" \u2014 "),vQ=a("a"),gFr=o("TFCamembertForMultipleChoice"),hFr=o(" (CamemBERT model)"),uFr=l(),RE=a("li"),Pve=a("strong"),pFr=o("convbert"),_Fr=o(" \u2014 "),FQ=a("a"),bFr=o("TFConvBertForMultipleChoice"),vFr=o(" (ConvBERT model)"),FFr=l(),BE=a("li"),$ve=a("strong"),TFr=o("distilbert"),MFr=o(" \u2014 "),TQ=a("a"),EFr=o("TFDistilBertForMultipleChoice"),CFr=o(" (DistilBERT model)"),wFr=l(),PE=a("li"),Ive=a("strong"),AFr=o("electra"),yFr=o(" \u2014 "),MQ=a("a"),LFr=o("TFElectraForMultipleChoice"),xFr=o(" (ELECTRA model)"),kFr=l(),$E=a("li"),qve=a("strong"),SFr=o("flaubert"),RFr=o(" \u2014 "),EQ=a("a"),BFr=o("TFFlaubertForMultipleChoice"),PFr=o(" (FlauBERT model)"),$Fr=l(),IE=a("li"),Nve=a("strong"),IFr=o("funnel"),qFr=o(" \u2014 "),CQ=a("a"),NFr=o("TFFunnelForMultipleChoice"),jFr=o(" (Funnel Transformer model)"),DFr=l(),qE=a("li"),jve=a("strong"),GFr=o("longformer"),OFr=o(" \u2014 "),wQ=a("a"),VFr=o("TFLongformerForMultipleChoice"),XFr=o(" (Longformer model)"),zFr=l(),NE=a("li"),Dve=a("strong"),QFr=o("mobilebert"),WFr=o(" \u2014 "),AQ=a("a"),HFr=o("TFMobileBertForMultipleChoice"),UFr=o(" (MobileBERT model)"),JFr=l(),jE=a("li"),Gve=a("strong"),YFr=o("mpnet"),KFr=o(" \u2014 "),yQ=a("a"),ZFr=o("TFMPNetForMultipleChoice"),e1r=o(" (MPNet model)"),o1r=l(),DE=a("li"),Ove=a("strong"),r1r=o("rembert"),t1r=o(" \u2014 "),LQ=a("a"),a1r=o("TFRemBertForMultipleChoice"),n1r=o(" (RemBERT model)"),s1r=l(),GE=a("li"),Vve=a("strong"),l1r=o("roberta"),i1r=o(" \u2014 "),xQ=a("a"),d1r=o("TFRobertaForMultipleChoice"),c1r=o(" (RoBERTa model)"),m1r=l(),OE=a("li"),Xve=a("strong"),f1r=o("roformer"),g1r=o(" \u2014 "),kQ=a("a"),h1r=o("TFRoFormerForMultipleChoice"),u1r=o(" (RoFormer model)"),p1r=l(),VE=a("li"),zve=a("strong"),_1r=o("xlm"),b1r=o(" \u2014 "),SQ=a("a"),v1r=o("TFXLMForMultipleChoice"),F1r=o(" (XLM model)"),T1r=l(),XE=a("li"),Qve=a("strong"),M1r=o("xlm-roberta"),E1r=o(" \u2014 "),RQ=a("a"),C1r=o("TFXLMRobertaForMultipleChoice"),w1r=o(" (XLM-RoBERTa model)"),A1r=l(),zE=a("li"),Wve=a("strong"),y1r=o("xlnet"),L1r=o(" \u2014 "),BQ=a("a"),x1r=o("TFXLNetForMultipleChoice"),k1r=o(" (XLNet model)"),S1r=l(),Hve=a("p"),R1r=o("Examples:"),B1r=l(),m(y8.$$.fragment),F$e=l(),zc=a("h2"),QE=a("a"),Uve=a("span"),m(L8.$$.fragment),P1r=l(),Jve=a("span"),$1r=o("TFAutoModelForTableQuestionAnswering"),T$e=l(),yr=a("div"),m(x8.$$.fragment),I1r=l(),Qc=a("p"),q1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PQ=a("a"),N1r=o("from_pretrained()"),j1r=o(" class method or the "),$Q=a("a"),D1r=o("from_config()"),G1r=o(` class
method.`),O1r=l(),k8=a("p"),V1r=o("This class cannot be instantiated directly using "),Yve=a("code"),X1r=o("__init__()"),z1r=o(" (throws an error)."),Q1r=l(),Tt=a("div"),m(S8.$$.fragment),W1r=l(),Kve=a("p"),H1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),U1r=l(),Wc=a("p"),J1r=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),Y1r=o("not"),K1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),Z1r=o("from_pretrained()"),eTr=o(" to load the model weights."),oTr=l(),eFe=a("p"),rTr=o("Examples:"),tTr=l(),m(R8.$$.fragment),aTr=l(),Eo=a("div"),m(B8.$$.fragment),nTr=l(),oFe=a("p"),sTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lTr=l(),wn=a("p"),iTr=o("The model class to instantiate is selected based on the "),rFe=a("code"),dTr=o("model_type"),cTr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),mTr=o("pretrained_model_name_or_path"),fTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),gTr=o("pretrained_model_name_or_path"),hTr=o(":"),uTr=l(),nFe=a("ul"),WE=a("li"),sFe=a("strong"),pTr=o("tapas"),_Tr=o(" \u2014 "),qQ=a("a"),bTr=o("TFTapasForQuestionAnswering"),vTr=o(" (TAPAS model)"),FTr=l(),lFe=a("p"),TTr=o("Examples:"),MTr=l(),m(P8.$$.fragment),M$e=l(),Hc=a("h2"),HE=a("a"),iFe=a("span"),m($8.$$.fragment),ETr=l(),dFe=a("span"),CTr=o("TFAutoModelForTokenClassification"),E$e=l(),Lr=a("div"),m(I8.$$.fragment),wTr=l(),Uc=a("p"),ATr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NQ=a("a"),yTr=o("from_pretrained()"),LTr=o(" class method or the "),jQ=a("a"),xTr=o("from_config()"),kTr=o(` class
method.`),STr=l(),q8=a("p"),RTr=o("This class cannot be instantiated directly using "),cFe=a("code"),BTr=o("__init__()"),PTr=o(" (throws an error)."),$Tr=l(),Mt=a("div"),m(N8.$$.fragment),ITr=l(),mFe=a("p"),qTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NTr=l(),Jc=a("p"),jTr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),DTr=o("not"),GTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),OTr=o("from_pretrained()"),VTr=o(" to load the model weights."),XTr=l(),gFe=a("p"),zTr=o("Examples:"),QTr=l(),m(j8.$$.fragment),WTr=l(),Co=a("div"),m(D8.$$.fragment),HTr=l(),hFe=a("p"),UTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JTr=l(),An=a("p"),YTr=o("The model class to instantiate is selected based on the "),uFe=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),Z=a("ul"),UE=a("li"),bFe=a("strong"),nMr=o("albert"),sMr=o(" \u2014 "),GQ=a("a"),lMr=o("TFAlbertForTokenClassification"),iMr=o(" (ALBERT model)"),dMr=l(),JE=a("li"),vFe=a("strong"),cMr=o("bert"),mMr=o(" \u2014 "),OQ=a("a"),fMr=o("TFBertForTokenClassification"),gMr=o(" (BERT model)"),hMr=l(),YE=a("li"),FFe=a("strong"),uMr=o("camembert"),pMr=o(" \u2014 "),VQ=a("a"),_Mr=o("TFCamembertForTokenClassification"),bMr=o(" (CamemBERT model)"),vMr=l(),KE=a("li"),TFe=a("strong"),FMr=o("convbert"),TMr=o(" \u2014 "),XQ=a("a"),MMr=o("TFConvBertForTokenClassification"),EMr=o(" (ConvBERT model)"),CMr=l(),ZE=a("li"),MFe=a("strong"),wMr=o("deberta"),AMr=o(" \u2014 "),zQ=a("a"),yMr=o("TFDebertaForTokenClassification"),LMr=o(" (DeBERTa model)"),xMr=l(),e5=a("li"),EFe=a("strong"),kMr=o("deberta-v2"),SMr=o(" \u2014 "),QQ=a("a"),RMr=o("TFDebertaV2ForTokenClassification"),BMr=o(" (DeBERTa-v2 model)"),PMr=l(),o5=a("li"),CFe=a("strong"),$Mr=o("distilbert"),IMr=o(" \u2014 "),WQ=a("a"),qMr=o("TFDistilBertForTokenClassification"),NMr=o(" (DistilBERT model)"),jMr=l(),r5=a("li"),wFe=a("strong"),DMr=o("electra"),GMr=o(" \u2014 "),HQ=a("a"),OMr=o("TFElectraForTokenClassification"),VMr=o(" (ELECTRA model)"),XMr=l(),t5=a("li"),AFe=a("strong"),zMr=o("flaubert"),QMr=o(" \u2014 "),UQ=a("a"),WMr=o("TFFlaubertForTokenClassification"),HMr=o(" (FlauBERT model)"),UMr=l(),a5=a("li"),yFe=a("strong"),JMr=o("funnel"),YMr=o(" \u2014 "),JQ=a("a"),KMr=o("TFFunnelForTokenClassification"),ZMr=o(" (Funnel Transformer model)"),e4r=l(),n5=a("li"),LFe=a("strong"),o4r=o("layoutlm"),r4r=o(" \u2014 "),YQ=a("a"),t4r=o("TFLayoutLMForTokenClassification"),a4r=o(" (LayoutLM model)"),n4r=l(),s5=a("li"),xFe=a("strong"),s4r=o("longformer"),l4r=o(" \u2014 "),KQ=a("a"),i4r=o("TFLongformerForTokenClassification"),d4r=o(" (Longformer model)"),c4r=l(),l5=a("li"),kFe=a("strong"),m4r=o("mobilebert"),f4r=o(" \u2014 "),ZQ=a("a"),g4r=o("TFMobileBertForTokenClassification"),h4r=o(" (MobileBERT model)"),u4r=l(),i5=a("li"),SFe=a("strong"),p4r=o("mpnet"),_4r=o(" \u2014 "),eW=a("a"),b4r=o("TFMPNetForTokenClassification"),v4r=o(" (MPNet model)"),F4r=l(),d5=a("li"),RFe=a("strong"),T4r=o("rembert"),M4r=o(" \u2014 "),oW=a("a"),E4r=o("TFRemBertForTokenClassification"),C4r=o(" (RemBERT model)"),w4r=l(),c5=a("li"),BFe=a("strong"),A4r=o("roberta"),y4r=o(" \u2014 "),rW=a("a"),L4r=o("TFRobertaForTokenClassification"),x4r=o(" (RoBERTa model)"),k4r=l(),m5=a("li"),PFe=a("strong"),S4r=o("roformer"),R4r=o(" \u2014 "),tW=a("a"),B4r=o("TFRoFormerForTokenClassification"),P4r=o(" (RoFormer model)"),$4r=l(),f5=a("li"),$Fe=a("strong"),I4r=o("xlm"),q4r=o(" \u2014 "),aW=a("a"),N4r=o("TFXLMForTokenClassification"),j4r=o(" (XLM model)"),D4r=l(),g5=a("li"),IFe=a("strong"),G4r=o("xlm-roberta"),O4r=o(" \u2014 "),nW=a("a"),V4r=o("TFXLMRobertaForTokenClassification"),X4r=o(" (XLM-RoBERTa model)"),z4r=l(),h5=a("li"),qFe=a("strong"),Q4r=o("xlnet"),W4r=o(" \u2014 "),sW=a("a"),H4r=o("TFXLNetForTokenClassification"),U4r=o(" (XLNet model)"),J4r=l(),NFe=a("p"),Y4r=o("Examples:"),K4r=l(),m(G8.$$.fragment),C$e=l(),Yc=a("h2"),u5=a("a"),jFe=a("span"),m(O8.$$.fragment),Z4r=l(),DFe=a("span"),eEr=o("TFAutoModelForQuestionAnswering"),w$e=l(),xr=a("div"),m(V8.$$.fragment),oEr=l(),Kc=a("p"),rEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lW=a("a"),tEr=o("from_pretrained()"),aEr=o(" class method or the "),iW=a("a"),nEr=o("from_config()"),sEr=o(` class
method.`),lEr=l(),X8=a("p"),iEr=o("This class cannot be instantiated directly using "),GFe=a("code"),dEr=o("__init__()"),cEr=o(" (throws an error)."),mEr=l(),Et=a("div"),m(z8.$$.fragment),fEr=l(),OFe=a("p"),gEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hEr=l(),Zc=a("p"),uEr=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),pEr=o("not"),_Er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),bEr=o("from_pretrained()"),vEr=o(" to load the model weights."),FEr=l(),XFe=a("p"),TEr=o("Examples:"),MEr=l(),m(Q8.$$.fragment),EEr=l(),wo=a("div"),m(W8.$$.fragment),CEr=l(),zFe=a("p"),wEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AEr=l(),yn=a("p"),yEr=o("The model class to instantiate is selected based on the "),QFe=a("code"),LEr=o("model_type"),xEr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),kEr=o("pretrained_model_name_or_path"),SEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),REr=o("pretrained_model_name_or_path"),BEr=o(":"),PEr=l(),ee=a("ul"),p5=a("li"),UFe=a("strong"),$Er=o("albert"),IEr=o(" \u2014 "),cW=a("a"),qEr=o("TFAlbertForQuestionAnswering"),NEr=o(" (ALBERT model)"),jEr=l(),_5=a("li"),JFe=a("strong"),DEr=o("bert"),GEr=o(" \u2014 "),mW=a("a"),OEr=o("TFBertForQuestionAnswering"),VEr=o(" (BERT model)"),XEr=l(),b5=a("li"),YFe=a("strong"),zEr=o("camembert"),QEr=o(" \u2014 "),fW=a("a"),WEr=o("TFCamembertForQuestionAnswering"),HEr=o(" (CamemBERT model)"),UEr=l(),v5=a("li"),KFe=a("strong"),JEr=o("convbert"),YEr=o(" \u2014 "),gW=a("a"),KEr=o("TFConvBertForQuestionAnswering"),ZEr=o(" (ConvBERT model)"),e5r=l(),F5=a("li"),ZFe=a("strong"),o5r=o("deberta"),r5r=o(" \u2014 "),hW=a("a"),t5r=o("TFDebertaForQuestionAnswering"),a5r=o(" (DeBERTa model)"),n5r=l(),T5=a("li"),e1e=a("strong"),s5r=o("deberta-v2"),l5r=o(" \u2014 "),uW=a("a"),i5r=o("TFDebertaV2ForQuestionAnswering"),d5r=o(" (DeBERTa-v2 model)"),c5r=l(),M5=a("li"),o1e=a("strong"),m5r=o("distilbert"),f5r=o(" \u2014 "),pW=a("a"),g5r=o("TFDistilBertForQuestionAnswering"),h5r=o(" (DistilBERT model)"),u5r=l(),E5=a("li"),r1e=a("strong"),p5r=o("electra"),_5r=o(" \u2014 "),_W=a("a"),b5r=o("TFElectraForQuestionAnswering"),v5r=o(" (ELECTRA model)"),F5r=l(),C5=a("li"),t1e=a("strong"),T5r=o("flaubert"),M5r=o(" \u2014 "),bW=a("a"),E5r=o("TFFlaubertForQuestionAnsweringSimple"),C5r=o(" (FlauBERT model)"),w5r=l(),w5=a("li"),a1e=a("strong"),A5r=o("funnel"),y5r=o(" \u2014 "),vW=a("a"),L5r=o("TFFunnelForQuestionAnswering"),x5r=o(" (Funnel Transformer model)"),k5r=l(),A5=a("li"),n1e=a("strong"),S5r=o("gptj"),R5r=o(" \u2014 "),FW=a("a"),B5r=o("TFGPTJForQuestionAnswering"),P5r=o(" (GPT-J model)"),$5r=l(),y5=a("li"),s1e=a("strong"),I5r=o("longformer"),q5r=o(" \u2014 "),TW=a("a"),N5r=o("TFLongformerForQuestionAnswering"),j5r=o(" (Longformer model)"),D5r=l(),L5=a("li"),l1e=a("strong"),G5r=o("mobilebert"),O5r=o(" \u2014 "),MW=a("a"),V5r=o("TFMobileBertForQuestionAnswering"),X5r=o(" (MobileBERT model)"),z5r=l(),x5=a("li"),i1e=a("strong"),Q5r=o("mpnet"),W5r=o(" \u2014 "),EW=a("a"),H5r=o("TFMPNetForQuestionAnswering"),U5r=o(" (MPNet model)"),J5r=l(),k5=a("li"),d1e=a("strong"),Y5r=o("rembert"),K5r=o(" \u2014 "),CW=a("a"),Z5r=o("TFRemBertForQuestionAnswering"),e3r=o(" (RemBERT model)"),o3r=l(),S5=a("li"),c1e=a("strong"),r3r=o("roberta"),t3r=o(" \u2014 "),wW=a("a"),a3r=o("TFRobertaForQuestionAnswering"),n3r=o(" (RoBERTa model)"),s3r=l(),R5=a("li"),m1e=a("strong"),l3r=o("roformer"),i3r=o(" \u2014 "),AW=a("a"),d3r=o("TFRoFormerForQuestionAnswering"),c3r=o(" (RoFormer model)"),m3r=l(),B5=a("li"),f1e=a("strong"),f3r=o("xlm"),g3r=o(" \u2014 "),yW=a("a"),h3r=o("TFXLMForQuestionAnsweringSimple"),u3r=o(" (XLM model)"),p3r=l(),P5=a("li"),g1e=a("strong"),_3r=o("xlm-roberta"),b3r=o(" \u2014 "),LW=a("a"),v3r=o("TFXLMRobertaForQuestionAnswering"),F3r=o(" (XLM-RoBERTa model)"),T3r=l(),$5=a("li"),h1e=a("strong"),M3r=o("xlnet"),E3r=o(" \u2014 "),xW=a("a"),C3r=o("TFXLNetForQuestionAnsweringSimple"),w3r=o(" (XLNet model)"),A3r=l(),u1e=a("p"),y3r=o("Examples:"),L3r=l(),m(H8.$$.fragment),A$e=l(),em=a("h2"),I5=a("a"),p1e=a("span"),m(U8.$$.fragment),x3r=l(),_1e=a("span"),k3r=o("TFAutoModelForVision2Seq"),y$e=l(),kr=a("div"),m(J8.$$.fragment),S3r=l(),om=a("p"),R3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=a("a"),B3r=o("from_pretrained()"),P3r=o(" class method or the "),SW=a("a"),$3r=o("from_config()"),I3r=o(` class
method.`),q3r=l(),Y8=a("p"),N3r=o("This class cannot be instantiated directly using "),b1e=a("code"),j3r=o("__init__()"),D3r=o(" (throws an error)."),G3r=l(),Ct=a("div"),m(K8.$$.fragment),O3r=l(),v1e=a("p"),V3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),X3r=l(),rm=a("p"),z3r=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Q3r=o("not"),W3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),H3r=o("from_pretrained()"),U3r=o(" to load the model weights."),J3r=l(),T1e=a("p"),Y3r=o("Examples:"),K3r=l(),m(Z8.$$.fragment),Z3r=l(),Ao=a("div"),m(eL.$$.fragment),eCr=l(),M1e=a("p"),oCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rCr=l(),Ln=a("p"),tCr=o("The model class to instantiate is selected based on the "),E1e=a("code"),aCr=o("model_type"),nCr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(":"),cCr=l(),A1e=a("ul"),q5=a("li"),y1e=a("strong"),mCr=o("vision-encoder-decoder"),fCr=o(" \u2014 "),BW=a("a"),gCr=o("TFVisionEncoderDecoderModel"),hCr=o(" (Vision Encoder decoder model)"),uCr=l(),L1e=a("p"),pCr=o("Examples:"),_Cr=l(),m(oL.$$.fragment),L$e=l(),tm=a("h2"),N5=a("a"),x1e=a("span"),m(rL.$$.fragment),bCr=l(),k1e=a("span"),vCr=o("TFAutoModelForSpeechSeq2Seq"),x$e=l(),Sr=a("div"),m(tL.$$.fragment),FCr=l(),am=a("p"),TCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PW=a("a"),MCr=o("from_pretrained()"),ECr=o(" class method or the "),$W=a("a"),CCr=o("from_config()"),wCr=o(` class
method.`),ACr=l(),aL=a("p"),yCr=o("This class cannot be instantiated directly using "),S1e=a("code"),LCr=o("__init__()"),xCr=o(" (throws an error)."),kCr=l(),wt=a("div"),m(nL.$$.fragment),SCr=l(),R1e=a("p"),RCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BCr=l(),nm=a("p"),PCr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),$Cr=o("not"),ICr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),qCr=o("from_pretrained()"),NCr=o(" to load the model weights."),jCr=l(),P1e=a("p"),DCr=o("Examples:"),GCr=l(),m(sL.$$.fragment),OCr=l(),yo=a("div"),m(lL.$$.fragment),VCr=l(),$1e=a("p"),XCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zCr=l(),xn=a("p"),QCr=o("The model class to instantiate is selected based on the "),I1e=a("code"),WCr=o("model_type"),HCr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),UCr=o("pretrained_model_name_or_path"),JCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(":"),ZCr=l(),j1e=a("ul"),j5=a("li"),D1e=a("strong"),e6r=o("speech_to_text"),o6r=o(" \u2014 "),qW=a("a"),r6r=o("TFSpeech2TextForConditionalGeneration"),t6r=o(" (Speech2Text model)"),a6r=l(),G1e=a("p"),n6r=o("Examples:"),s6r=l(),m(iL.$$.fragment),k$e=l(),sm=a("h2"),D5=a("a"),O1e=a("span"),m(dL.$$.fragment),l6r=l(),V1e=a("span"),i6r=o("FlaxAutoModel"),S$e=l(),Rr=a("div"),m(cL.$$.fragment),d6r=l(),lm=a("p"),c6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NW=a("a"),m6r=o("from_pretrained()"),f6r=o(" class method or the "),jW=a("a"),g6r=o("from_config()"),h6r=o(` class
method.`),u6r=l(),mL=a("p"),p6r=o("This class cannot be instantiated directly using "),X1e=a("code"),_6r=o("__init__()"),b6r=o(" (throws an error)."),v6r=l(),At=a("div"),m(fL.$$.fragment),F6r=l(),z1e=a("p"),T6r=o("Instantiates one of the base model classes of the library from a configuration."),M6r=l(),im=a("p"),E6r=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),C6r=o("not"),w6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),A6r=o("from_pretrained()"),y6r=o(" to load the model weights."),L6r=l(),W1e=a("p"),x6r=o("Examples:"),k6r=l(),m(gL.$$.fragment),S6r=l(),Lo=a("div"),m(hL.$$.fragment),R6r=l(),H1e=a("p"),B6r=o("Instantiate one of the base model classes of the library from a pretrained model."),P6r=l(),kn=a("p"),$6r=o("The model class to instantiate is selected based on the "),U1e=a("code"),I6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),N6r=o("pretrained_model_name_or_path"),j6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(":"),O6r=l(),z=a("ul"),G5=a("li"),K1e=a("strong"),V6r=o("albert"),X6r=o(" \u2014 "),GW=a("a"),z6r=o("FlaxAlbertModel"),Q6r=o(" (ALBERT model)"),W6r=l(),O5=a("li"),Z1e=a("strong"),H6r=o("bart"),U6r=o(" \u2014 "),OW=a("a"),J6r=o("FlaxBartModel"),Y6r=o(" (BART model)"),K6r=l(),V5=a("li"),eTe=a("strong"),Z6r=o("beit"),ewr=o(" \u2014 "),VW=a("a"),owr=o("FlaxBeitModel"),rwr=o(" (BEiT model)"),twr=l(),X5=a("li"),oTe=a("strong"),awr=o("bert"),nwr=o(" \u2014 "),XW=a("a"),swr=o("FlaxBertModel"),lwr=o(" (BERT model)"),iwr=l(),z5=a("li"),rTe=a("strong"),dwr=o("big_bird"),cwr=o(" \u2014 "),zW=a("a"),mwr=o("FlaxBigBirdModel"),fwr=o(" (BigBird model)"),gwr=l(),Q5=a("li"),tTe=a("strong"),hwr=o("blenderbot"),uwr=o(" \u2014 "),QW=a("a"),pwr=o("FlaxBlenderbotModel"),_wr=o(" (Blenderbot model)"),bwr=l(),W5=a("li"),aTe=a("strong"),vwr=o("blenderbot-small"),Fwr=o(" \u2014 "),WW=a("a"),Twr=o("FlaxBlenderbotSmallModel"),Mwr=o(" (BlenderbotSmall model)"),Ewr=l(),H5=a("li"),nTe=a("strong"),Cwr=o("clip"),wwr=o(" \u2014 "),HW=a("a"),Awr=o("FlaxCLIPModel"),ywr=o(" (CLIP model)"),Lwr=l(),U5=a("li"),sTe=a("strong"),xwr=o("distilbert"),kwr=o(" \u2014 "),UW=a("a"),Swr=o("FlaxDistilBertModel"),Rwr=o(" (DistilBERT model)"),Bwr=l(),J5=a("li"),lTe=a("strong"),Pwr=o("electra"),$wr=o(" \u2014 "),JW=a("a"),Iwr=o("FlaxElectraModel"),qwr=o(" (ELECTRA model)"),Nwr=l(),Y5=a("li"),iTe=a("strong"),jwr=o("gpt2"),Dwr=o(" \u2014 "),YW=a("a"),Gwr=o("FlaxGPT2Model"),Owr=o(" (OpenAI GPT-2 model)"),Vwr=l(),K5=a("li"),dTe=a("strong"),Xwr=o("gpt_neo"),zwr=o(" \u2014 "),KW=a("a"),Qwr=o("FlaxGPTNeoModel"),Wwr=o(" (GPT Neo model)"),Hwr=l(),Z5=a("li"),cTe=a("strong"),Uwr=o("gptj"),Jwr=o(" \u2014 "),ZW=a("a"),Ywr=o("FlaxGPTJModel"),Kwr=o(" (GPT-J model)"),Zwr=l(),e3=a("li"),mTe=a("strong"),eAr=o("marian"),oAr=o(" \u2014 "),eH=a("a"),rAr=o("FlaxMarianModel"),tAr=o(" (Marian model)"),aAr=l(),o3=a("li"),fTe=a("strong"),nAr=o("mbart"),sAr=o(" \u2014 "),oH=a("a"),lAr=o("FlaxMBartModel"),iAr=o(" (mBART model)"),dAr=l(),r3=a("li"),gTe=a("strong"),cAr=o("mt5"),mAr=o(" \u2014 "),rH=a("a"),fAr=o("FlaxMT5Model"),gAr=o(" (mT5 model)"),hAr=l(),t3=a("li"),hTe=a("strong"),uAr=o("pegasus"),pAr=o(" \u2014 "),tH=a("a"),_Ar=o("FlaxPegasusModel"),bAr=o(" (Pegasus model)"),vAr=l(),a3=a("li"),uTe=a("strong"),FAr=o("roberta"),TAr=o(" \u2014 "),aH=a("a"),MAr=o("FlaxRobertaModel"),EAr=o(" (RoBERTa model)"),CAr=l(),n3=a("li"),pTe=a("strong"),wAr=o("roformer"),AAr=o(" \u2014 "),nH=a("a"),yAr=o("FlaxRoFormerModel"),LAr=o(" (RoFormer model)"),xAr=l(),s3=a("li"),_Te=a("strong"),kAr=o("t5"),SAr=o(" \u2014 "),sH=a("a"),RAr=o("FlaxT5Model"),BAr=o(" (T5 model)"),PAr=l(),l3=a("li"),bTe=a("strong"),$Ar=o("vision-text-dual-encoder"),IAr=o(" \u2014 "),lH=a("a"),qAr=o("FlaxVisionTextDualEncoderModel"),NAr=o(" (VisionTextDualEncoder model)"),jAr=l(),i3=a("li"),vTe=a("strong"),DAr=o("vit"),GAr=o(" \u2014 "),iH=a("a"),OAr=o("FlaxViTModel"),VAr=o(" (ViT model)"),XAr=l(),d3=a("li"),FTe=a("strong"),zAr=o("wav2vec2"),QAr=o(" \u2014 "),dH=a("a"),WAr=o("FlaxWav2Vec2Model"),HAr=o(" (Wav2Vec2 model)"),UAr=l(),c3=a("li"),TTe=a("strong"),JAr=o("xglm"),YAr=o(" \u2014 "),cH=a("a"),KAr=o("FlaxXGLMModel"),ZAr=o(" (XGLM model)"),e0r=l(),m3=a("li"),MTe=a("strong"),o0r=o("xlm-roberta"),r0r=o(" \u2014 "),mH=a("a"),t0r=o("FlaxXLMRobertaModel"),a0r=o(" (XLM-RoBERTa model)"),n0r=l(),ETe=a("p"),s0r=o("Examples:"),l0r=l(),m(uL.$$.fragment),R$e=l(),dm=a("h2"),f3=a("a"),CTe=a("span"),m(pL.$$.fragment),i0r=l(),wTe=a("span"),d0r=o("FlaxAutoModelForCausalLM"),B$e=l(),Br=a("div"),m(_L.$$.fragment),c0r=l(),cm=a("p"),m0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fH=a("a"),f0r=o("from_pretrained()"),g0r=o(" class method or the "),gH=a("a"),h0r=o("from_config()"),u0r=o(` class
method.`),p0r=l(),bL=a("p"),_0r=o("This class cannot be instantiated directly using "),ATe=a("code"),b0r=o("__init__()"),v0r=o(" (throws an error)."),F0r=l(),yt=a("div"),m(vL.$$.fragment),T0r=l(),yTe=a("p"),M0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E0r=l(),mm=a("p"),C0r=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),w0r=o("not"),A0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),y0r=o("from_pretrained()"),L0r=o(" to load the model weights."),x0r=l(),xTe=a("p"),k0r=o("Examples:"),S0r=l(),m(FL.$$.fragment),R0r=l(),xo=a("div"),m(TL.$$.fragment),B0r=l(),kTe=a("p"),P0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$0r=l(),Sn=a("p"),I0r=o("The model class to instantiate is selected based on the "),STe=a("code"),q0r=o("model_type"),N0r=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),j0r=o("pretrained_model_name_or_path"),D0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(":"),V0r=l(),ca=a("ul"),g3=a("li"),PTe=a("strong"),X0r=o("bart"),z0r=o(" \u2014 "),uH=a("a"),Q0r=o("FlaxBartForCausalLM"),W0r=o(" (BART model)"),H0r=l(),h3=a("li"),$Te=a("strong"),U0r=o("gpt2"),J0r=o(" \u2014 "),pH=a("a"),Y0r=o("FlaxGPT2LMHeadModel"),K0r=o(" (OpenAI GPT-2 model)"),Z0r=l(),u3=a("li"),ITe=a("strong"),eyr=o("gpt_neo"),oyr=o(" \u2014 "),_H=a("a"),ryr=o("FlaxGPTNeoForCausalLM"),tyr=o(" (GPT Neo model)"),ayr=l(),p3=a("li"),qTe=a("strong"),nyr=o("gptj"),syr=o(" \u2014 "),bH=a("a"),lyr=o("FlaxGPTJForCausalLM"),iyr=o(" (GPT-J model)"),dyr=l(),_3=a("li"),NTe=a("strong"),cyr=o("xglm"),myr=o(" \u2014 "),vH=a("a"),fyr=o("FlaxXGLMForCausalLM"),gyr=o(" (XGLM model)"),hyr=l(),jTe=a("p"),uyr=o("Examples:"),pyr=l(),m(ML.$$.fragment),P$e=l(),fm=a("h2"),b3=a("a"),DTe=a("span"),m(EL.$$.fragment),_yr=l(),GTe=a("span"),byr=o("FlaxAutoModelForPreTraining"),$$e=l(),Pr=a("div"),m(CL.$$.fragment),vyr=l(),gm=a("p"),Fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FH=a("a"),Tyr=o("from_pretrained()"),Myr=o(" class method or the "),TH=a("a"),Eyr=o("from_config()"),Cyr=o(` class
method.`),wyr=l(),wL=a("p"),Ayr=o("This class cannot be instantiated directly using "),OTe=a("code"),yyr=o("__init__()"),Lyr=o(" (throws an error)."),xyr=l(),Lt=a("div"),m(AL.$$.fragment),kyr=l(),VTe=a("p"),Syr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ryr=l(),hm=a("p"),Byr=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),Pyr=o("not"),$yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),Iyr=o("from_pretrained()"),qyr=o(" to load the model weights."),Nyr=l(),zTe=a("p"),jyr=o("Examples:"),Dyr=l(),m(yL.$$.fragment),Gyr=l(),ko=a("div"),m(LL.$$.fragment),Oyr=l(),QTe=a("p"),Vyr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xyr=l(),Rn=a("p"),zyr=o("The model class to instantiate is selected based on the "),WTe=a("code"),Qyr=o("model_type"),Wyr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),Hyr=o("pretrained_model_name_or_path"),Uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(":"),Kyr=l(),he=a("ul"),v3=a("li"),JTe=a("strong"),Zyr=o("albert"),e8r=o(" \u2014 "),EH=a("a"),o8r=o("FlaxAlbertForPreTraining"),r8r=o(" (ALBERT model)"),t8r=l(),F3=a("li"),YTe=a("strong"),a8r=o("bart"),n8r=o(" \u2014 "),CH=a("a"),s8r=o("FlaxBartForConditionalGeneration"),l8r=o(" (BART model)"),i8r=l(),T3=a("li"),KTe=a("strong"),d8r=o("bert"),c8r=o(" \u2014 "),wH=a("a"),m8r=o("FlaxBertForPreTraining"),f8r=o(" (BERT model)"),g8r=l(),M3=a("li"),ZTe=a("strong"),h8r=o("big_bird"),u8r=o(" \u2014 "),AH=a("a"),p8r=o("FlaxBigBirdForPreTraining"),_8r=o(" (BigBird model)"),b8r=l(),E3=a("li"),eMe=a("strong"),v8r=o("electra"),F8r=o(" \u2014 "),yH=a("a"),T8r=o("FlaxElectraForPreTraining"),M8r=o(" (ELECTRA model)"),E8r=l(),C3=a("li"),oMe=a("strong"),C8r=o("mbart"),w8r=o(" \u2014 "),LH=a("a"),A8r=o("FlaxMBartForConditionalGeneration"),y8r=o(" (mBART model)"),L8r=l(),w3=a("li"),rMe=a("strong"),x8r=o("mt5"),k8r=o(" \u2014 "),xH=a("a"),S8r=o("FlaxMT5ForConditionalGeneration"),R8r=o(" (mT5 model)"),B8r=l(),A3=a("li"),tMe=a("strong"),P8r=o("roberta"),$8r=o(" \u2014 "),kH=a("a"),I8r=o("FlaxRobertaForMaskedLM"),q8r=o(" (RoBERTa model)"),N8r=l(),y3=a("li"),aMe=a("strong"),j8r=o("roformer"),D8r=o(" \u2014 "),SH=a("a"),G8r=o("FlaxRoFormerForMaskedLM"),O8r=o(" (RoFormer model)"),V8r=l(),L3=a("li"),nMe=a("strong"),X8r=o("t5"),z8r=o(" \u2014 "),RH=a("a"),Q8r=o("FlaxT5ForConditionalGeneration"),W8r=o(" (T5 model)"),H8r=l(),x3=a("li"),sMe=a("strong"),U8r=o("wav2vec2"),J8r=o(" \u2014 "),BH=a("a"),Y8r=o("FlaxWav2Vec2ForPreTraining"),K8r=o(" (Wav2Vec2 model)"),Z8r=l(),k3=a("li"),lMe=a("strong"),eLr=o("xlm-roberta"),oLr=o(" \u2014 "),PH=a("a"),rLr=o("FlaxXLMRobertaForMaskedLM"),tLr=o(" (XLM-RoBERTa model)"),aLr=l(),iMe=a("p"),nLr=o("Examples:"),sLr=l(),m(xL.$$.fragment),I$e=l(),um=a("h2"),S3=a("a"),dMe=a("span"),m(kL.$$.fragment),lLr=l(),cMe=a("span"),iLr=o("FlaxAutoModelForMaskedLM"),q$e=l(),$r=a("div"),m(SL.$$.fragment),dLr=l(),pm=a("p"),cLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$H=a("a"),mLr=o("from_pretrained()"),fLr=o(" class method or the "),IH=a("a"),gLr=o("from_config()"),hLr=o(` class
method.`),uLr=l(),RL=a("p"),pLr=o("This class cannot be instantiated directly using "),mMe=a("code"),_Lr=o("__init__()"),bLr=o(" (throws an error)."),vLr=l(),xt=a("div"),m(BL.$$.fragment),FLr=l(),fMe=a("p"),TLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MLr=l(),_m=a("p"),ELr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),CLr=o("not"),wLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),ALr=o("from_pretrained()"),yLr=o(" to load the model weights."),LLr=l(),hMe=a("p"),xLr=o("Examples:"),kLr=l(),m(PL.$$.fragment),SLr=l(),So=a("div"),m($L.$$.fragment),RLr=l(),uMe=a("p"),BLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PLr=l(),Bn=a("p"),$Lr=o("The model class to instantiate is selected based on the "),pMe=a("code"),ILr=o("model_type"),qLr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),NLr=o("pretrained_model_name_or_path"),jLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(":"),OLr=l(),Te=a("ul"),R3=a("li"),vMe=a("strong"),VLr=o("albert"),XLr=o(" \u2014 "),NH=a("a"),zLr=o("FlaxAlbertForMaskedLM"),QLr=o(" (ALBERT model)"),WLr=l(),B3=a("li"),FMe=a("strong"),HLr=o("bart"),ULr=o(" \u2014 "),jH=a("a"),JLr=o("FlaxBartForConditionalGeneration"),YLr=o(" (BART model)"),KLr=l(),P3=a("li"),TMe=a("strong"),ZLr=o("bert"),e7r=o(" \u2014 "),DH=a("a"),o7r=o("FlaxBertForMaskedLM"),r7r=o(" (BERT model)"),t7r=l(),$3=a("li"),MMe=a("strong"),a7r=o("big_bird"),n7r=o(" \u2014 "),GH=a("a"),s7r=o("FlaxBigBirdForMaskedLM"),l7r=o(" (BigBird model)"),i7r=l(),I3=a("li"),EMe=a("strong"),d7r=o("distilbert"),c7r=o(" \u2014 "),OH=a("a"),m7r=o("FlaxDistilBertForMaskedLM"),f7r=o(" (DistilBERT model)"),g7r=l(),q3=a("li"),CMe=a("strong"),h7r=o("electra"),u7r=o(" \u2014 "),VH=a("a"),p7r=o("FlaxElectraForMaskedLM"),_7r=o(" (ELECTRA model)"),b7r=l(),N3=a("li"),wMe=a("strong"),v7r=o("mbart"),F7r=o(" \u2014 "),XH=a("a"),T7r=o("FlaxMBartForConditionalGeneration"),M7r=o(" (mBART model)"),E7r=l(),j3=a("li"),AMe=a("strong"),C7r=o("roberta"),w7r=o(" \u2014 "),zH=a("a"),A7r=o("FlaxRobertaForMaskedLM"),y7r=o(" (RoBERTa model)"),L7r=l(),D3=a("li"),yMe=a("strong"),x7r=o("roformer"),k7r=o(" \u2014 "),QH=a("a"),S7r=o("FlaxRoFormerForMaskedLM"),R7r=o(" (RoFormer model)"),B7r=l(),G3=a("li"),LMe=a("strong"),P7r=o("xlm-roberta"),$7r=o(" \u2014 "),WH=a("a"),I7r=o("FlaxXLMRobertaForMaskedLM"),q7r=o(" (XLM-RoBERTa model)"),N7r=l(),xMe=a("p"),j7r=o("Examples:"),D7r=l(),m(IL.$$.fragment),N$e=l(),bm=a("h2"),O3=a("a"),kMe=a("span"),m(qL.$$.fragment),G7r=l(),SMe=a("span"),O7r=o("FlaxAutoModelForSeq2SeqLM"),j$e=l(),Ir=a("div"),m(NL.$$.fragment),V7r=l(),vm=a("p"),X7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HH=a("a"),z7r=o("from_pretrained()"),Q7r=o(" class method or the "),UH=a("a"),W7r=o("from_config()"),H7r=o(` class
method.`),U7r=l(),jL=a("p"),J7r=o("This class cannot be instantiated directly using "),RMe=a("code"),Y7r=o("__init__()"),K7r=o(" (throws an error)."),Z7r=l(),kt=a("div"),m(DL.$$.fragment),e9r=l(),BMe=a("p"),o9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r9r=l(),Fm=a("p"),t9r=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),a9r=o("not"),n9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),s9r=o("from_pretrained()"),l9r=o(" to load the model weights."),i9r=l(),$Me=a("p"),d9r=o("Examples:"),c9r=l(),m(GL.$$.fragment),m9r=l(),Ro=a("div"),m(OL.$$.fragment),f9r=l(),IMe=a("p"),g9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h9r=l(),Pn=a("p"),u9r=o("The model class to instantiate is selected based on the "),qMe=a("code"),p9r=o("model_type"),_9r=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(":"),M9r=l(),we=a("ul"),V3=a("li"),DMe=a("strong"),E9r=o("bart"),C9r=o(" \u2014 "),YH=a("a"),w9r=o("FlaxBartForConditionalGeneration"),A9r=o(" (BART model)"),y9r=l(),X3=a("li"),GMe=a("strong"),L9r=o("blenderbot"),x9r=o(" \u2014 "),KH=a("a"),k9r=o("FlaxBlenderbotForConditionalGeneration"),S9r=o(" (Blenderbot model)"),R9r=l(),z3=a("li"),OMe=a("strong"),B9r=o("blenderbot-small"),P9r=o(" \u2014 "),ZH=a("a"),$9r=o("FlaxBlenderbotSmallForConditionalGeneration"),I9r=o(" (BlenderbotSmall model)"),q9r=l(),Q3=a("li"),VMe=a("strong"),N9r=o("encoder-decoder"),j9r=o(" \u2014 "),eU=a("a"),D9r=o("FlaxEncoderDecoderModel"),G9r=o(" (Encoder decoder model)"),O9r=l(),W3=a("li"),XMe=a("strong"),V9r=o("marian"),X9r=o(" \u2014 "),oU=a("a"),z9r=o("FlaxMarianMTModel"),Q9r=o(" (Marian model)"),W9r=l(),H3=a("li"),zMe=a("strong"),H9r=o("mbart"),U9r=o(" \u2014 "),rU=a("a"),J9r=o("FlaxMBartForConditionalGeneration"),Y9r=o(" (mBART model)"),K9r=l(),U3=a("li"),QMe=a("strong"),Z9r=o("mt5"),exr=o(" \u2014 "),tU=a("a"),oxr=o("FlaxMT5ForConditionalGeneration"),rxr=o(" (mT5 model)"),txr=l(),J3=a("li"),WMe=a("strong"),axr=o("pegasus"),nxr=o(" \u2014 "),aU=a("a"),sxr=o("FlaxPegasusForConditionalGeneration"),lxr=o(" (Pegasus model)"),ixr=l(),Y3=a("li"),HMe=a("strong"),dxr=o("t5"),cxr=o(" \u2014 "),nU=a("a"),mxr=o("FlaxT5ForConditionalGeneration"),fxr=o(" (T5 model)"),gxr=l(),UMe=a("p"),hxr=o("Examples:"),uxr=l(),m(VL.$$.fragment),D$e=l(),Tm=a("h2"),K3=a("a"),JMe=a("span"),m(XL.$$.fragment),pxr=l(),YMe=a("span"),_xr=o("FlaxAutoModelForSequenceClassification"),G$e=l(),qr=a("div"),m(zL.$$.fragment),bxr=l(),Mm=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sU=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),lU=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),QL=a("p"),wxr=o("This class cannot be instantiated directly using "),KMe=a("code"),Axr=o("__init__()"),yxr=o(" (throws an error)."),Lxr=l(),St=a("div"),m(WL.$$.fragment),xxr=l(),ZMe=a("p"),kxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sxr=l(),Em=a("p"),Rxr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),Bxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),$xr=o("from_pretrained()"),Ixr=o(" to load the model weights."),qxr=l(),o4e=a("p"),Nxr=o("Examples:"),jxr=l(),m(HL.$$.fragment),Dxr=l(),Bo=a("div"),m(UL.$$.fragment),Gxr=l(),r4e=a("p"),Oxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vxr=l(),$n=a("p"),Xxr=o("The model class to instantiate is selected based on the "),t4e=a("code"),zxr=o("model_type"),Qxr=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),Wxr=o("pretrained_model_name_or_path"),Hxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),Uxr=o("pretrained_model_name_or_path"),Jxr=o(":"),Yxr=l(),Me=a("ul"),Z3=a("li"),s4e=a("strong"),Kxr=o("albert"),Zxr=o(" \u2014 "),dU=a("a"),ekr=o("FlaxAlbertForSequenceClassification"),okr=o(" (ALBERT model)"),rkr=l(),eC=a("li"),l4e=a("strong"),tkr=o("bart"),akr=o(" \u2014 "),cU=a("a"),nkr=o("FlaxBartForSequenceClassification"),skr=o(" (BART model)"),lkr=l(),oC=a("li"),i4e=a("strong"),ikr=o("bert"),dkr=o(" \u2014 "),mU=a("a"),ckr=o("FlaxBertForSequenceClassification"),mkr=o(" (BERT model)"),fkr=l(),rC=a("li"),d4e=a("strong"),gkr=o("big_bird"),hkr=o(" \u2014 "),fU=a("a"),ukr=o("FlaxBigBirdForSequenceClassification"),pkr=o(" (BigBird model)"),_kr=l(),tC=a("li"),c4e=a("strong"),bkr=o("distilbert"),vkr=o(" \u2014 "),gU=a("a"),Fkr=o("FlaxDistilBertForSequenceClassification"),Tkr=o(" (DistilBERT model)"),Mkr=l(),aC=a("li"),m4e=a("strong"),Ekr=o("electra"),Ckr=o(" \u2014 "),hU=a("a"),wkr=o("FlaxElectraForSequenceClassification"),Akr=o(" (ELECTRA model)"),ykr=l(),nC=a("li"),f4e=a("strong"),Lkr=o("mbart"),xkr=o(" \u2014 "),uU=a("a"),kkr=o("FlaxMBartForSequenceClassification"),Skr=o(" (mBART model)"),Rkr=l(),sC=a("li"),g4e=a("strong"),Bkr=o("roberta"),Pkr=o(" \u2014 "),pU=a("a"),$kr=o("FlaxRobertaForSequenceClassification"),Ikr=o(" (RoBERTa model)"),qkr=l(),lC=a("li"),h4e=a("strong"),Nkr=o("roformer"),jkr=o(" \u2014 "),_U=a("a"),Dkr=o("FlaxRoFormerForSequenceClassification"),Gkr=o(" (RoFormer model)"),Okr=l(),iC=a("li"),u4e=a("strong"),Vkr=o("xlm-roberta"),Xkr=o(" \u2014 "),bU=a("a"),zkr=o("FlaxXLMRobertaForSequenceClassification"),Qkr=o(" (XLM-RoBERTa model)"),Wkr=l(),p4e=a("p"),Hkr=o("Examples:"),Ukr=l(),m(JL.$$.fragment),O$e=l(),Cm=a("h2"),dC=a("a"),_4e=a("span"),m(YL.$$.fragment),Jkr=l(),b4e=a("span"),Ykr=o("FlaxAutoModelForQuestionAnswering"),V$e=l(),Nr=a("div"),m(KL.$$.fragment),Kkr=l(),wm=a("p"),Zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vU=a("a"),eSr=o("from_pretrained()"),oSr=o(" class method or the "),FU=a("a"),rSr=o("from_config()"),tSr=o(` class
method.`),aSr=l(),ZL=a("p"),nSr=o("This class cannot be instantiated directly using "),v4e=a("code"),sSr=o("__init__()"),lSr=o(" (throws an error)."),iSr=l(),Rt=a("div"),m(e7.$$.fragment),dSr=l(),F4e=a("p"),cSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mSr=l(),Am=a("p"),fSr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),gSr=o("not"),hSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),uSr=o("from_pretrained()"),pSr=o(" to load the model weights."),_Sr=l(),M4e=a("p"),bSr=o("Examples:"),vSr=l(),m(o7.$$.fragment),FSr=l(),Po=a("div"),m(r7.$$.fragment),TSr=l(),E4e=a("p"),MSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ESr=l(),In=a("p"),CSr=o("The model class to instantiate is selected based on the "),C4e=a("code"),wSr=o("model_type"),ASr=o(` property of the config object (either
passed as an argument or loaded from `),w4e=a("code"),ySr=o("pretrained_model_name_or_path"),LSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=a("code"),xSr=o("pretrained_model_name_or_path"),kSr=o(":"),SSr=l(),Ee=a("ul"),cC=a("li"),y4e=a("strong"),RSr=o("albert"),BSr=o(" \u2014 "),MU=a("a"),PSr=o("FlaxAlbertForQuestionAnswering"),$Sr=o(" (ALBERT model)"),ISr=l(),mC=a("li"),L4e=a("strong"),qSr=o("bart"),NSr=o(" \u2014 "),EU=a("a"),jSr=o("FlaxBartForQuestionAnswering"),DSr=o(" (BART model)"),GSr=l(),fC=a("li"),x4e=a("strong"),OSr=o("bert"),VSr=o(" \u2014 "),CU=a("a"),XSr=o("FlaxBertForQuestionAnswering"),zSr=o(" (BERT model)"),QSr=l(),gC=a("li"),k4e=a("strong"),WSr=o("big_bird"),HSr=o(" \u2014 "),wU=a("a"),USr=o("FlaxBigBirdForQuestionAnswering"),JSr=o(" (BigBird model)"),YSr=l(),hC=a("li"),S4e=a("strong"),KSr=o("distilbert"),ZSr=o(" \u2014 "),AU=a("a"),eRr=o("FlaxDistilBertForQuestionAnswering"),oRr=o(" (DistilBERT model)"),rRr=l(),uC=a("li"),R4e=a("strong"),tRr=o("electra"),aRr=o(" \u2014 "),yU=a("a"),nRr=o("FlaxElectraForQuestionAnswering"),sRr=o(" (ELECTRA model)"),lRr=l(),pC=a("li"),B4e=a("strong"),iRr=o("mbart"),dRr=o(" \u2014 "),LU=a("a"),cRr=o("FlaxMBartForQuestionAnswering"),mRr=o(" (mBART model)"),fRr=l(),_C=a("li"),P4e=a("strong"),gRr=o("roberta"),hRr=o(" \u2014 "),xU=a("a"),uRr=o("FlaxRobertaForQuestionAnswering"),pRr=o(" (RoBERTa model)"),_Rr=l(),bC=a("li"),$4e=a("strong"),bRr=o("roformer"),vRr=o(" \u2014 "),kU=a("a"),FRr=o("FlaxRoFormerForQuestionAnswering"),TRr=o(" (RoFormer model)"),MRr=l(),vC=a("li"),I4e=a("strong"),ERr=o("xlm-roberta"),CRr=o(" \u2014 "),SU=a("a"),wRr=o("FlaxXLMRobertaForQuestionAnswering"),ARr=o(" (XLM-RoBERTa model)"),yRr=l(),q4e=a("p"),LRr=o("Examples:"),xRr=l(),m(t7.$$.fragment),X$e=l(),ym=a("h2"),FC=a("a"),N4e=a("span"),m(a7.$$.fragment),kRr=l(),j4e=a("span"),SRr=o("FlaxAutoModelForTokenClassification"),z$e=l(),jr=a("div"),m(n7.$$.fragment),RRr=l(),Lm=a("p"),BRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RU=a("a"),PRr=o("from_pretrained()"),$Rr=o(" class method or the "),BU=a("a"),IRr=o("from_config()"),qRr=o(` class
method.`),NRr=l(),s7=a("p"),jRr=o("This class cannot be instantiated directly using "),D4e=a("code"),DRr=o("__init__()"),GRr=o(" (throws an error)."),ORr=l(),Bt=a("div"),m(l7.$$.fragment),VRr=l(),G4e=a("p"),XRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zRr=l(),xm=a("p"),QRr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),WRr=o("not"),HRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),URr=o("from_pretrained()"),JRr=o(" to load the model weights."),YRr=l(),V4e=a("p"),KRr=o("Examples:"),ZRr=l(),m(i7.$$.fragment),eBr=l(),$o=a("div"),m(d7.$$.fragment),oBr=l(),X4e=a("p"),rBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tBr=l(),qn=a("p"),aBr=o("The model class to instantiate is selected based on the "),z4e=a("code"),nBr=o("model_type"),sBr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),dBr=o("pretrained_model_name_or_path"),cBr=o(":"),mBr=l(),Pe=a("ul"),TC=a("li"),H4e=a("strong"),fBr=o("albert"),gBr=o(" \u2014 "),$U=a("a"),hBr=o("FlaxAlbertForTokenClassification"),uBr=o(" (ALBERT model)"),pBr=l(),MC=a("li"),U4e=a("strong"),_Br=o("bert"),bBr=o(" \u2014 "),IU=a("a"),vBr=o("FlaxBertForTokenClassification"),FBr=o(" (BERT model)"),TBr=l(),EC=a("li"),J4e=a("strong"),MBr=o("big_bird"),EBr=o(" \u2014 "),qU=a("a"),CBr=o("FlaxBigBirdForTokenClassification"),wBr=o(" (BigBird model)"),ABr=l(),CC=a("li"),Y4e=a("strong"),yBr=o("distilbert"),LBr=o(" \u2014 "),NU=a("a"),xBr=o("FlaxDistilBertForTokenClassification"),kBr=o(" (DistilBERT model)"),SBr=l(),wC=a("li"),K4e=a("strong"),RBr=o("electra"),BBr=o(" \u2014 "),jU=a("a"),PBr=o("FlaxElectraForTokenClassification"),$Br=o(" (ELECTRA model)"),IBr=l(),AC=a("li"),Z4e=a("strong"),qBr=o("roberta"),NBr=o(" \u2014 "),DU=a("a"),jBr=o("FlaxRobertaForTokenClassification"),DBr=o(" (RoBERTa model)"),GBr=l(),yC=a("li"),eEe=a("strong"),OBr=o("roformer"),VBr=o(" \u2014 "),GU=a("a"),XBr=o("FlaxRoFormerForTokenClassification"),zBr=o(" (RoFormer model)"),QBr=l(),LC=a("li"),oEe=a("strong"),WBr=o("xlm-roberta"),HBr=o(" \u2014 "),OU=a("a"),UBr=o("FlaxXLMRobertaForTokenClassification"),JBr=o(" (XLM-RoBERTa model)"),YBr=l(),rEe=a("p"),KBr=o("Examples:"),ZBr=l(),m(c7.$$.fragment),Q$e=l(),km=a("h2"),xC=a("a"),tEe=a("span"),m(m7.$$.fragment),ePr=l(),aEe=a("span"),oPr=o("FlaxAutoModelForMultipleChoice"),W$e=l(),Dr=a("div"),m(f7.$$.fragment),rPr=l(),Sm=a("p"),tPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VU=a("a"),aPr=o("from_pretrained()"),nPr=o(" class method or the "),XU=a("a"),sPr=o("from_config()"),lPr=o(` class
method.`),iPr=l(),g7=a("p"),dPr=o("This class cannot be instantiated directly using "),nEe=a("code"),cPr=o("__init__()"),mPr=o(" (throws an error)."),fPr=l(),Pt=a("div"),m(h7.$$.fragment),gPr=l(),sEe=a("p"),hPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uPr=l(),Rm=a("p"),pPr=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),_Pr=o("not"),bPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),vPr=o("from_pretrained()"),FPr=o(" to load the model weights."),TPr=l(),iEe=a("p"),MPr=o("Examples:"),EPr=l(),m(u7.$$.fragment),CPr=l(),Io=a("div"),m(p7.$$.fragment),wPr=l(),dEe=a("p"),APr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yPr=l(),Nn=a("p"),LPr=o("The model class to instantiate is selected based on the "),cEe=a("code"),xPr=o("model_type"),kPr=o(` property of the config object (either
passed as an argument or loaded from `),mEe=a("code"),SPr=o("pretrained_model_name_or_path"),RPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),BPr=o("pretrained_model_name_or_path"),PPr=o(":"),$Pr=l(),$e=a("ul"),kC=a("li"),gEe=a("strong"),IPr=o("albert"),qPr=o(" \u2014 "),QU=a("a"),NPr=o("FlaxAlbertForMultipleChoice"),jPr=o(" (ALBERT model)"),DPr=l(),SC=a("li"),hEe=a("strong"),GPr=o("bert"),OPr=o(" \u2014 "),WU=a("a"),VPr=o("FlaxBertForMultipleChoice"),XPr=o(" (BERT model)"),zPr=l(),RC=a("li"),uEe=a("strong"),QPr=o("big_bird"),WPr=o(" \u2014 "),HU=a("a"),HPr=o("FlaxBigBirdForMultipleChoice"),UPr=o(" (BigBird model)"),JPr=l(),BC=a("li"),pEe=a("strong"),YPr=o("distilbert"),KPr=o(" \u2014 "),UU=a("a"),ZPr=o("FlaxDistilBertForMultipleChoice"),e$r=o(" (DistilBERT model)"),o$r=l(),PC=a("li"),_Ee=a("strong"),r$r=o("electra"),t$r=o(" \u2014 "),JU=a("a"),a$r=o("FlaxElectraForMultipleChoice"),n$r=o(" (ELECTRA model)"),s$r=l(),$C=a("li"),bEe=a("strong"),l$r=o("roberta"),i$r=o(" \u2014 "),YU=a("a"),d$r=o("FlaxRobertaForMultipleChoice"),c$r=o(" (RoBERTa model)"),m$r=l(),IC=a("li"),vEe=a("strong"),f$r=o("roformer"),g$r=o(" \u2014 "),KU=a("a"),h$r=o("FlaxRoFormerForMultipleChoice"),u$r=o(" (RoFormer model)"),p$r=l(),qC=a("li"),FEe=a("strong"),_$r=o("xlm-roberta"),b$r=o(" \u2014 "),ZU=a("a"),v$r=o("FlaxXLMRobertaForMultipleChoice"),F$r=o(" (XLM-RoBERTa model)"),T$r=l(),TEe=a("p"),M$r=o("Examples:"),E$r=l(),m(_7.$$.fragment),H$e=l(),Bm=a("h2"),NC=a("a"),MEe=a("span"),m(b7.$$.fragment),C$r=l(),EEe=a("span"),w$r=o("FlaxAutoModelForNextSentencePrediction"),U$e=l(),Gr=a("div"),m(v7.$$.fragment),A$r=l(),Pm=a("p"),y$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=a("a"),L$r=o("from_pretrained()"),x$r=o(" class method or the "),oJ=a("a"),k$r=o("from_config()"),S$r=o(` class
method.`),R$r=l(),F7=a("p"),B$r=o("This class cannot be instantiated directly using "),CEe=a("code"),P$r=o("__init__()"),$$r=o(" (throws an error)."),I$r=l(),$t=a("div"),m(T7.$$.fragment),q$r=l(),wEe=a("p"),N$r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j$r=l(),$m=a("p"),D$r=o(`Note:
Loading a model from its configuration file does `),AEe=a("strong"),G$r=o("not"),O$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),V$r=o("from_pretrained()"),X$r=o(" to load the model weights."),z$r=l(),yEe=a("p"),Q$r=o("Examples:"),W$r=l(),m(M7.$$.fragment),H$r=l(),qo=a("div"),m(E7.$$.fragment),U$r=l(),LEe=a("p"),J$r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Y$r=l(),jn=a("p"),K$r=o("The model class to instantiate is selected based on the "),xEe=a("code"),Z$r=o("model_type"),eIr=o(` property of the config object (either
passed as an argument or loaded from `),kEe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=a("code"),tIr=o("pretrained_model_name_or_path"),aIr=o(":"),nIr=l(),REe=a("ul"),jC=a("li"),BEe=a("strong"),sIr=o("bert"),lIr=o(" \u2014 "),tJ=a("a"),iIr=o("FlaxBertForNextSentencePrediction"),dIr=o(" (BERT model)"),cIr=l(),PEe=a("p"),mIr=o("Examples:"),fIr=l(),m(C7.$$.fragment),J$e=l(),Im=a("h2"),DC=a("a"),$Ee=a("span"),m(w7.$$.fragment),gIr=l(),IEe=a("span"),hIr=o("FlaxAutoModelForImageClassification"),Y$e=l(),Or=a("div"),m(A7.$$.fragment),uIr=l(),qm=a("p"),pIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aJ=a("a"),_Ir=o("from_pretrained()"),bIr=o(" class method or the "),nJ=a("a"),vIr=o("from_config()"),FIr=o(` class
method.`),TIr=l(),y7=a("p"),MIr=o("This class cannot be instantiated directly using "),qEe=a("code"),EIr=o("__init__()"),CIr=o(" (throws an error)."),wIr=l(),It=a("div"),m(L7.$$.fragment),AIr=l(),NEe=a("p"),yIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LIr=l(),Nm=a("p"),xIr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),kIr=o("not"),SIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),RIr=o("from_pretrained()"),BIr=o(" to load the model weights."),PIr=l(),DEe=a("p"),$Ir=o("Examples:"),IIr=l(),m(x7.$$.fragment),qIr=l(),No=a("div"),m(k7.$$.fragment),NIr=l(),GEe=a("p"),jIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DIr=l(),Dn=a("p"),GIr=o("The model class to instantiate is selected based on the "),OEe=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),QIr=o("pretrained_model_name_or_path"),WIr=o(":"),HIr=l(),S7=a("ul"),GC=a("li"),zEe=a("strong"),UIr=o("beit"),JIr=o(" \u2014 "),lJ=a("a"),YIr=o("FlaxBeitForImageClassification"),KIr=o(" (BEiT model)"),ZIr=l(),OC=a("li"),QEe=a("strong"),eqr=o("vit"),oqr=o(" \u2014 "),iJ=a("a"),rqr=o("FlaxViTForImageClassification"),tqr=o(" (ViT model)"),aqr=l(),WEe=a("p"),nqr=o("Examples:"),sqr=l(),m(R7.$$.fragment),K$e=l(),jm=a("h2"),VC=a("a"),HEe=a("span"),m(B7.$$.fragment),lqr=l(),UEe=a("span"),iqr=o("FlaxAutoModelForVision2Seq"),Z$e=l(),Vr=a("div"),m(P7.$$.fragment),dqr=l(),Dm=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=a("a"),mqr=o("from_pretrained()"),fqr=o(" class method or the "),cJ=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),uqr=l(),$7=a("p"),pqr=o("This class cannot be instantiated directly using "),JEe=a("code"),_qr=o("__init__()"),bqr=o(" (throws an error)."),vqr=l(),qt=a("div"),m(I7.$$.fragment),Fqr=l(),YEe=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mqr=l(),Gm=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),KEe=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),Aqr=o("from_pretrained()"),yqr=o(" to load the model weights."),Lqr=l(),ZEe=a("p"),xqr=o("Examples:"),kqr=l(),m(q7.$$.fragment),Sqr=l(),jo=a("div"),m(N7.$$.fragment),Rqr=l(),e5e=a("p"),Bqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pqr=l(),Gn=a("p"),$qr=o("The model class to instantiate is selected based on the "),o5e=a("code"),Iqr=o("model_type"),qqr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),a5e=a("ul"),XC=a("li"),n5e=a("strong"),Vqr=o("vision-encoder-decoder"),Xqr=o(" \u2014 "),fJ=a("a"),zqr=o("FlaxVisionEncoderDecoderModel"),Qqr=o(" (Vision Encoder decoder model)"),Wqr=l(),s5e=a("p"),Hqr=o("Examples:"),Uqr=l(),m(j7.$$.fragment),this.h()},l(c){const _=A8t('[data-svelte="svelte-1phssyn"]',document.head);oe=n(_,"META",{name:!0,content:!0}),_.forEach(t),co=i(c),fe=n(c,"H1",{class:!0});var D7=s(fe);Ae=n(D7,"A",{id:!0,class:!0,href:!0});var l5e=s(Ae);io=n(l5e,"SPAN",{});var i5e=s(io);f(pe.$$.fragment,i5e),i5e.forEach(t),l5e.forEach(t),Ce=i(D7),Xo=n(D7,"SPAN",{});var Yqr=s(Xo);zi=r(Yqr,"Auto Classes"),Yqr.forEach(t),D7.forEach(t),Xm=i(c),ma=n(c,"P",{});var oIe=s(ma);Qi=r(oIe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=n(oIe,"CODE",{});var Kqr=s(Wi);z6=r(Kqr,"from_pretrained()"),Kqr.forEach(t),zm=r(oIe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),oIe.forEach(t),Se=i(c),mo=n(c,"P",{});var zC=s(mo);Hi=r(zC,"Instantiating one of "),On=n(zC,"A",{href:!0});var Zqr=s(On);Q6=r(Zqr,"AutoConfig"),Zqr.forEach(t),Vn=r(zC,", "),Xn=n(zC,"A",{href:!0});var eNr=s(Xn);W6=r(eNr,"AutoModel"),eNr.forEach(t),Ui=r(zC,`, and
`),zn=n(zC,"A",{href:!0});var oNr=s(zn);H6=r(oNr,"AutoTokenizer"),oNr.forEach(t),Ji=r(zC," will directly create a class of the relevant architecture. For instance"),zC.forEach(t),Qm=i(c),f(Da.$$.fragment,c),fo=i(c),ve=n(c,"P",{});var rIe=s(ve);z9=r(rIe,"will create a model that is an instance of "),Yi=n(rIe,"A",{href:!0});var rNr=s(Yi);Q9=r(rNr,"BertModel"),rNr.forEach(t),W9=r(rIe,"."),rIe.forEach(t),zo=i(c),Ga=n(c,"P",{});var tIe=s(Ga);H9=r(tIe,"There is one class of "),Wm=n(tIe,"CODE",{});var tNr=s(Wm);U9=r(tNr,"AutoModel"),tNr.forEach(t),fNe=r(tIe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tIe.forEach(t),ZBe=i(c),Ki=n(c,"H2",{class:!0});var aIe=s(Ki);Hm=n(aIe,"A",{id:!0,class:!0,href:!0});var aNr=s(Hm);nK=n(aNr,"SPAN",{});var nNr=s(nK);f(U6.$$.fragment,nNr),nNr.forEach(t),aNr.forEach(t),gNe=i(aIe),sK=n(aIe,"SPAN",{});var sNr=s(sK);hNe=r(sNr,"Extending the Auto Classes"),sNr.forEach(t),aIe.forEach(t),ePe=i(c),Qn=n(c,"P",{});var gJ=s(Qn);uNe=r(gJ,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lK=n(gJ,"CODE",{});var lNr=s(lK);pNe=r(lNr,"NewModel"),lNr.forEach(t),_Ne=r(gJ,", make sure you have a "),iK=n(gJ,"CODE",{});var iNr=s(iK);bNe=r(iNr,"NewModelConfig"),iNr.forEach(t),vNe=r(gJ,` then you can add those to the auto
classes like this:`),gJ.forEach(t),oPe=i(c),f(J6.$$.fragment,c),rPe=i(c),J9=n(c,"P",{});var dNr=s(J9);FNe=r(dNr,"You will then be able to use the auto classes like you would usually do!"),dNr.forEach(t),tPe=i(c),f(Um.$$.fragment,c),aPe=i(c),Zi=n(c,"H2",{class:!0});var nIe=s(Zi);Jm=n(nIe,"A",{id:!0,class:!0,href:!0});var cNr=s(Jm);dK=n(cNr,"SPAN",{});var mNr=s(dK);f(Y6.$$.fragment,mNr),mNr.forEach(t),cNr.forEach(t),TNe=i(nIe),cK=n(nIe,"SPAN",{});var fNr=s(cK);MNe=r(fNr,"AutoConfig"),fNr.forEach(t),nIe.forEach(t),nPe=i(c),Qo=n(c,"DIV",{class:!0});var Ys=s(Qo);f(K6.$$.fragment,Ys),ENe=i(Ys),Z6=n(Ys,"P",{});var sIe=s(Z6);CNe=r(sIe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y9=n(sIe,"A",{href:!0});var gNr=s(Y9);wNe=r(gNr,"from_pretrained()"),gNr.forEach(t),ANe=r(sIe," class method."),sIe.forEach(t),yNe=i(Ys),ew=n(Ys,"P",{});var lIe=s(ew);LNe=r(lIe,"This class cannot be instantiated directly using "),mK=n(lIe,"CODE",{});var hNr=s(mK);xNe=r(hNr,"__init__()"),hNr.forEach(t),kNe=r(lIe," (throws an error)."),lIe.forEach(t),SNe=i(Ys),go=n(Ys,"DIV",{class:!0});var ga=s(go);f(ow.$$.fragment,ga),RNe=i(ga),fK=n(ga,"P",{});var uNr=s(fK);BNe=r(uNr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),uNr.forEach(t),PNe=i(ga),ed=n(ga,"P",{});var hJ=s(ed);$Ne=r(hJ,"The configuration class to instantiate is selected based on the "),gK=n(hJ,"CODE",{});var pNr=s(gK);INe=r(pNr,"model_type"),pNr.forEach(t),qNe=r(hJ,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hK=n(hJ,"CODE",{});var _Nr=s(hK);NNe=r(_Nr,"pretrained_model_name_or_path"),_Nr.forEach(t),jNe=r(hJ,":"),hJ.forEach(t),DNe=i(ga),v=n(ga,"UL",{});var F=s(v);Ym=n(F,"LI",{});var d5e=s(Ym);uK=n(d5e,"STRONG",{});var bNr=s(uK);GNe=r(bNr,"albert"),bNr.forEach(t),ONe=r(d5e," \u2014 "),K9=n(d5e,"A",{href:!0});var vNr=s(K9);VNe=r(vNr,"AlbertConfig"),vNr.forEach(t),XNe=r(d5e," (ALBERT model)"),d5e.forEach(t),zNe=i(F),Km=n(F,"LI",{});var c5e=s(Km);pK=n(c5e,"STRONG",{});var FNr=s(pK);QNe=r(FNr,"bart"),FNr.forEach(t),WNe=r(c5e," \u2014 "),Z9=n(c5e,"A",{href:!0});var TNr=s(Z9);HNe=r(TNr,"BartConfig"),TNr.forEach(t),UNe=r(c5e," (BART model)"),c5e.forEach(t),JNe=i(F),Zm=n(F,"LI",{});var m5e=s(Zm);_K=n(m5e,"STRONG",{});var MNr=s(_K);YNe=r(MNr,"beit"),MNr.forEach(t),KNe=r(m5e," \u2014 "),ex=n(m5e,"A",{href:!0});var ENr=s(ex);ZNe=r(ENr,"BeitConfig"),ENr.forEach(t),eje=r(m5e," (BEiT model)"),m5e.forEach(t),oje=i(F),ef=n(F,"LI",{});var f5e=s(ef);bK=n(f5e,"STRONG",{});var CNr=s(bK);rje=r(CNr,"bert"),CNr.forEach(t),tje=r(f5e," \u2014 "),ox=n(f5e,"A",{href:!0});var wNr=s(ox);aje=r(wNr,"BertConfig"),wNr.forEach(t),nje=r(f5e," (BERT model)"),f5e.forEach(t),sje=i(F),of=n(F,"LI",{});var g5e=s(of);vK=n(g5e,"STRONG",{});var ANr=s(vK);lje=r(ANr,"bert-generation"),ANr.forEach(t),ije=r(g5e," \u2014 "),rx=n(g5e,"A",{href:!0});var yNr=s(rx);dje=r(yNr,"BertGenerationConfig"),yNr.forEach(t),cje=r(g5e," (Bert Generation model)"),g5e.forEach(t),mje=i(F),rf=n(F,"LI",{});var h5e=s(rf);FK=n(h5e,"STRONG",{});var LNr=s(FK);fje=r(LNr,"big_bird"),LNr.forEach(t),gje=r(h5e," \u2014 "),tx=n(h5e,"A",{href:!0});var xNr=s(tx);hje=r(xNr,"BigBirdConfig"),xNr.forEach(t),uje=r(h5e," (BigBird model)"),h5e.forEach(t),pje=i(F),tf=n(F,"LI",{});var u5e=s(tf);TK=n(u5e,"STRONG",{});var kNr=s(TK);_je=r(kNr,"bigbird_pegasus"),kNr.forEach(t),bje=r(u5e," \u2014 "),ax=n(u5e,"A",{href:!0});var SNr=s(ax);vje=r(SNr,"BigBirdPegasusConfig"),SNr.forEach(t),Fje=r(u5e," (BigBirdPegasus model)"),u5e.forEach(t),Tje=i(F),af=n(F,"LI",{});var p5e=s(af);MK=n(p5e,"STRONG",{});var RNr=s(MK);Mje=r(RNr,"blenderbot"),RNr.forEach(t),Eje=r(p5e," \u2014 "),nx=n(p5e,"A",{href:!0});var BNr=s(nx);Cje=r(BNr,"BlenderbotConfig"),BNr.forEach(t),wje=r(p5e," (Blenderbot model)"),p5e.forEach(t),Aje=i(F),nf=n(F,"LI",{});var _5e=s(nf);EK=n(_5e,"STRONG",{});var PNr=s(EK);yje=r(PNr,"blenderbot-small"),PNr.forEach(t),Lje=r(_5e," \u2014 "),sx=n(_5e,"A",{href:!0});var $Nr=s(sx);xje=r($Nr,"BlenderbotSmallConfig"),$Nr.forEach(t),kje=r(_5e," (BlenderbotSmall model)"),_5e.forEach(t),Sje=i(F),sf=n(F,"LI",{});var b5e=s(sf);CK=n(b5e,"STRONG",{});var INr=s(CK);Rje=r(INr,"camembert"),INr.forEach(t),Bje=r(b5e," \u2014 "),lx=n(b5e,"A",{href:!0});var qNr=s(lx);Pje=r(qNr,"CamembertConfig"),qNr.forEach(t),$je=r(b5e," (CamemBERT model)"),b5e.forEach(t),Ije=i(F),lf=n(F,"LI",{});var v5e=s(lf);wK=n(v5e,"STRONG",{});var NNr=s(wK);qje=r(NNr,"canine"),NNr.forEach(t),Nje=r(v5e," \u2014 "),ix=n(v5e,"A",{href:!0});var jNr=s(ix);jje=r(jNr,"CanineConfig"),jNr.forEach(t),Dje=r(v5e," (Canine model)"),v5e.forEach(t),Gje=i(F),df=n(F,"LI",{});var F5e=s(df);AK=n(F5e,"STRONG",{});var DNr=s(AK);Oje=r(DNr,"clip"),DNr.forEach(t),Vje=r(F5e," \u2014 "),dx=n(F5e,"A",{href:!0});var GNr=s(dx);Xje=r(GNr,"CLIPConfig"),GNr.forEach(t),zje=r(F5e," (CLIP model)"),F5e.forEach(t),Qje=i(F),cf=n(F,"LI",{});var T5e=s(cf);yK=n(T5e,"STRONG",{});var ONr=s(yK);Wje=r(ONr,"convbert"),ONr.forEach(t),Hje=r(T5e," \u2014 "),cx=n(T5e,"A",{href:!0});var VNr=s(cx);Uje=r(VNr,"ConvBertConfig"),VNr.forEach(t),Jje=r(T5e," (ConvBERT model)"),T5e.forEach(t),Yje=i(F),mf=n(F,"LI",{});var M5e=s(mf);LK=n(M5e,"STRONG",{});var XNr=s(LK);Kje=r(XNr,"convnext"),XNr.forEach(t),Zje=r(M5e," \u2014 "),mx=n(M5e,"A",{href:!0});var zNr=s(mx);eDe=r(zNr,"ConvNextConfig"),zNr.forEach(t),oDe=r(M5e," (ConvNext model)"),M5e.forEach(t),rDe=i(F),ff=n(F,"LI",{});var E5e=s(ff);xK=n(E5e,"STRONG",{});var QNr=s(xK);tDe=r(QNr,"ctrl"),QNr.forEach(t),aDe=r(E5e," \u2014 "),fx=n(E5e,"A",{href:!0});var WNr=s(fx);nDe=r(WNr,"CTRLConfig"),WNr.forEach(t),sDe=r(E5e," (CTRL model)"),E5e.forEach(t),lDe=i(F),gf=n(F,"LI",{});var C5e=s(gf);kK=n(C5e,"STRONG",{});var HNr=s(kK);iDe=r(HNr,"data2vec-audio"),HNr.forEach(t),dDe=r(C5e," \u2014 "),gx=n(C5e,"A",{href:!0});var UNr=s(gx);cDe=r(UNr,"Data2VecAudioConfig"),UNr.forEach(t),mDe=r(C5e," (Data2VecAudio model)"),C5e.forEach(t),fDe=i(F),hf=n(F,"LI",{});var w5e=s(hf);SK=n(w5e,"STRONG",{});var JNr=s(SK);gDe=r(JNr,"data2vec-text"),JNr.forEach(t),hDe=r(w5e," \u2014 "),hx=n(w5e,"A",{href:!0});var YNr=s(hx);uDe=r(YNr,"Data2VecTextConfig"),YNr.forEach(t),pDe=r(w5e," (Data2VecText model)"),w5e.forEach(t),_De=i(F),uf=n(F,"LI",{});var A5e=s(uf);RK=n(A5e,"STRONG",{});var KNr=s(RK);bDe=r(KNr,"data2vec-vision"),KNr.forEach(t),vDe=r(A5e," \u2014 "),ux=n(A5e,"A",{href:!0});var ZNr=s(ux);FDe=r(ZNr,"Data2VecVisionConfig"),ZNr.forEach(t),TDe=r(A5e," (Data2VecVision model)"),A5e.forEach(t),MDe=i(F),pf=n(F,"LI",{});var y5e=s(pf);BK=n(y5e,"STRONG",{});var ejr=s(BK);EDe=r(ejr,"deberta"),ejr.forEach(t),CDe=r(y5e," \u2014 "),px=n(y5e,"A",{href:!0});var ojr=s(px);wDe=r(ojr,"DebertaConfig"),ojr.forEach(t),ADe=r(y5e," (DeBERTa model)"),y5e.forEach(t),yDe=i(F),_f=n(F,"LI",{});var L5e=s(_f);PK=n(L5e,"STRONG",{});var rjr=s(PK);LDe=r(rjr,"deberta-v2"),rjr.forEach(t),xDe=r(L5e," \u2014 "),_x=n(L5e,"A",{href:!0});var tjr=s(_x);kDe=r(tjr,"DebertaV2Config"),tjr.forEach(t),SDe=r(L5e," (DeBERTa-v2 model)"),L5e.forEach(t),RDe=i(F),bf=n(F,"LI",{});var x5e=s(bf);$K=n(x5e,"STRONG",{});var ajr=s($K);BDe=r(ajr,"decision_transformer"),ajr.forEach(t),PDe=r(x5e," \u2014 "),bx=n(x5e,"A",{href:!0});var njr=s(bx);$De=r(njr,"DecisionTransformerConfig"),njr.forEach(t),IDe=r(x5e," (Decision Transformer model)"),x5e.forEach(t),qDe=i(F),vf=n(F,"LI",{});var k5e=s(vf);IK=n(k5e,"STRONG",{});var sjr=s(IK);NDe=r(sjr,"deit"),sjr.forEach(t),jDe=r(k5e," \u2014 "),vx=n(k5e,"A",{href:!0});var ljr=s(vx);DDe=r(ljr,"DeiTConfig"),ljr.forEach(t),GDe=r(k5e," (DeiT model)"),k5e.forEach(t),ODe=i(F),Ff=n(F,"LI",{});var S5e=s(Ff);qK=n(S5e,"STRONG",{});var ijr=s(qK);VDe=r(ijr,"detr"),ijr.forEach(t),XDe=r(S5e," \u2014 "),Fx=n(S5e,"A",{href:!0});var djr=s(Fx);zDe=r(djr,"DetrConfig"),djr.forEach(t),QDe=r(S5e," (DETR model)"),S5e.forEach(t),WDe=i(F),Tf=n(F,"LI",{});var R5e=s(Tf);NK=n(R5e,"STRONG",{});var cjr=s(NK);HDe=r(cjr,"distilbert"),cjr.forEach(t),UDe=r(R5e," \u2014 "),Tx=n(R5e,"A",{href:!0});var mjr=s(Tx);JDe=r(mjr,"DistilBertConfig"),mjr.forEach(t),YDe=r(R5e," (DistilBERT model)"),R5e.forEach(t),KDe=i(F),Mf=n(F,"LI",{});var B5e=s(Mf);jK=n(B5e,"STRONG",{});var fjr=s(jK);ZDe=r(fjr,"dpr"),fjr.forEach(t),eGe=r(B5e," \u2014 "),Mx=n(B5e,"A",{href:!0});var gjr=s(Mx);oGe=r(gjr,"DPRConfig"),gjr.forEach(t),rGe=r(B5e," (DPR model)"),B5e.forEach(t),tGe=i(F),Ef=n(F,"LI",{});var P5e=s(Ef);DK=n(P5e,"STRONG",{});var hjr=s(DK);aGe=r(hjr,"dpt"),hjr.forEach(t),nGe=r(P5e," \u2014 "),Ex=n(P5e,"A",{href:!0});var ujr=s(Ex);sGe=r(ujr,"DPTConfig"),ujr.forEach(t),lGe=r(P5e," (DPT model)"),P5e.forEach(t),iGe=i(F),Cf=n(F,"LI",{});var $5e=s(Cf);GK=n($5e,"STRONG",{});var pjr=s(GK);dGe=r(pjr,"electra"),pjr.forEach(t),cGe=r($5e," \u2014 "),Cx=n($5e,"A",{href:!0});var _jr=s(Cx);mGe=r(_jr,"ElectraConfig"),_jr.forEach(t),fGe=r($5e," (ELECTRA model)"),$5e.forEach(t),gGe=i(F),wf=n(F,"LI",{});var I5e=s(wf);OK=n(I5e,"STRONG",{});var bjr=s(OK);hGe=r(bjr,"encoder-decoder"),bjr.forEach(t),uGe=r(I5e," \u2014 "),wx=n(I5e,"A",{href:!0});var vjr=s(wx);pGe=r(vjr,"EncoderDecoderConfig"),vjr.forEach(t),_Ge=r(I5e," (Encoder decoder model)"),I5e.forEach(t),bGe=i(F),Af=n(F,"LI",{});var q5e=s(Af);VK=n(q5e,"STRONG",{});var Fjr=s(VK);vGe=r(Fjr,"flaubert"),Fjr.forEach(t),FGe=r(q5e," \u2014 "),Ax=n(q5e,"A",{href:!0});var Tjr=s(Ax);TGe=r(Tjr,"FlaubertConfig"),Tjr.forEach(t),MGe=r(q5e," (FlauBERT model)"),q5e.forEach(t),EGe=i(F),yf=n(F,"LI",{});var N5e=s(yf);XK=n(N5e,"STRONG",{});var Mjr=s(XK);CGe=r(Mjr,"fnet"),Mjr.forEach(t),wGe=r(N5e," \u2014 "),yx=n(N5e,"A",{href:!0});var Ejr=s(yx);AGe=r(Ejr,"FNetConfig"),Ejr.forEach(t),yGe=r(N5e," (FNet model)"),N5e.forEach(t),LGe=i(F),Lf=n(F,"LI",{});var j5e=s(Lf);zK=n(j5e,"STRONG",{});var Cjr=s(zK);xGe=r(Cjr,"fsmt"),Cjr.forEach(t),kGe=r(j5e," \u2014 "),Lx=n(j5e,"A",{href:!0});var wjr=s(Lx);SGe=r(wjr,"FSMTConfig"),wjr.forEach(t),RGe=r(j5e," (FairSeq Machine-Translation model)"),j5e.forEach(t),BGe=i(F),xf=n(F,"LI",{});var D5e=s(xf);QK=n(D5e,"STRONG",{});var Ajr=s(QK);PGe=r(Ajr,"funnel"),Ajr.forEach(t),$Ge=r(D5e," \u2014 "),xx=n(D5e,"A",{href:!0});var yjr=s(xx);IGe=r(yjr,"FunnelConfig"),yjr.forEach(t),qGe=r(D5e," (Funnel Transformer model)"),D5e.forEach(t),NGe=i(F),kf=n(F,"LI",{});var G5e=s(kf);WK=n(G5e,"STRONG",{});var Ljr=s(WK);jGe=r(Ljr,"glpn"),Ljr.forEach(t),DGe=r(G5e," \u2014 "),kx=n(G5e,"A",{href:!0});var xjr=s(kx);GGe=r(xjr,"GLPNConfig"),xjr.forEach(t),OGe=r(G5e," (GLPN model)"),G5e.forEach(t),VGe=i(F),Sf=n(F,"LI",{});var O5e=s(Sf);HK=n(O5e,"STRONG",{});var kjr=s(HK);XGe=r(kjr,"gpt2"),kjr.forEach(t),zGe=r(O5e," \u2014 "),Sx=n(O5e,"A",{href:!0});var Sjr=s(Sx);QGe=r(Sjr,"GPT2Config"),Sjr.forEach(t),WGe=r(O5e," (OpenAI GPT-2 model)"),O5e.forEach(t),HGe=i(F),Rf=n(F,"LI",{});var V5e=s(Rf);UK=n(V5e,"STRONG",{});var Rjr=s(UK);UGe=r(Rjr,"gpt_neo"),Rjr.forEach(t),JGe=r(V5e," \u2014 "),Rx=n(V5e,"A",{href:!0});var Bjr=s(Rx);YGe=r(Bjr,"GPTNeoConfig"),Bjr.forEach(t),KGe=r(V5e," (GPT Neo model)"),V5e.forEach(t),ZGe=i(F),Bf=n(F,"LI",{});var X5e=s(Bf);JK=n(X5e,"STRONG",{});var Pjr=s(JK);eOe=r(Pjr,"gptj"),Pjr.forEach(t),oOe=r(X5e," \u2014 "),Bx=n(X5e,"A",{href:!0});var $jr=s(Bx);rOe=r($jr,"GPTJConfig"),$jr.forEach(t),tOe=r(X5e," (GPT-J model)"),X5e.forEach(t),aOe=i(F),Pf=n(F,"LI",{});var z5e=s(Pf);YK=n(z5e,"STRONG",{});var Ijr=s(YK);nOe=r(Ijr,"hubert"),Ijr.forEach(t),sOe=r(z5e," \u2014 "),Px=n(z5e,"A",{href:!0});var qjr=s(Px);lOe=r(qjr,"HubertConfig"),qjr.forEach(t),iOe=r(z5e," (Hubert model)"),z5e.forEach(t),dOe=i(F),$f=n(F,"LI",{});var Q5e=s($f);KK=n(Q5e,"STRONG",{});var Njr=s(KK);cOe=r(Njr,"ibert"),Njr.forEach(t),mOe=r(Q5e," \u2014 "),$x=n(Q5e,"A",{href:!0});var jjr=s($x);fOe=r(jjr,"IBertConfig"),jjr.forEach(t),gOe=r(Q5e," (I-BERT model)"),Q5e.forEach(t),hOe=i(F),If=n(F,"LI",{});var W5e=s(If);ZK=n(W5e,"STRONG",{});var Djr=s(ZK);uOe=r(Djr,"imagegpt"),Djr.forEach(t),pOe=r(W5e," \u2014 "),Ix=n(W5e,"A",{href:!0});var Gjr=s(Ix);_Oe=r(Gjr,"ImageGPTConfig"),Gjr.forEach(t),bOe=r(W5e," (ImageGPT model)"),W5e.forEach(t),vOe=i(F),qf=n(F,"LI",{});var H5e=s(qf);eZ=n(H5e,"STRONG",{});var Ojr=s(eZ);FOe=r(Ojr,"layoutlm"),Ojr.forEach(t),TOe=r(H5e," \u2014 "),qx=n(H5e,"A",{href:!0});var Vjr=s(qx);MOe=r(Vjr,"LayoutLMConfig"),Vjr.forEach(t),EOe=r(H5e," (LayoutLM model)"),H5e.forEach(t),COe=i(F),Nf=n(F,"LI",{});var U5e=s(Nf);oZ=n(U5e,"STRONG",{});var Xjr=s(oZ);wOe=r(Xjr,"layoutlmv2"),Xjr.forEach(t),AOe=r(U5e," \u2014 "),Nx=n(U5e,"A",{href:!0});var zjr=s(Nx);yOe=r(zjr,"LayoutLMv2Config"),zjr.forEach(t),LOe=r(U5e," (LayoutLMv2 model)"),U5e.forEach(t),xOe=i(F),jf=n(F,"LI",{});var J5e=s(jf);rZ=n(J5e,"STRONG",{});var Qjr=s(rZ);kOe=r(Qjr,"led"),Qjr.forEach(t),SOe=r(J5e," \u2014 "),jx=n(J5e,"A",{href:!0});var Wjr=s(jx);ROe=r(Wjr,"LEDConfig"),Wjr.forEach(t),BOe=r(J5e," (LED model)"),J5e.forEach(t),POe=i(F),Df=n(F,"LI",{});var Y5e=s(Df);tZ=n(Y5e,"STRONG",{});var Hjr=s(tZ);$Oe=r(Hjr,"longformer"),Hjr.forEach(t),IOe=r(Y5e," \u2014 "),Dx=n(Y5e,"A",{href:!0});var Ujr=s(Dx);qOe=r(Ujr,"LongformerConfig"),Ujr.forEach(t),NOe=r(Y5e," (Longformer model)"),Y5e.forEach(t),jOe=i(F),Gf=n(F,"LI",{});var K5e=s(Gf);aZ=n(K5e,"STRONG",{});var Jjr=s(aZ);DOe=r(Jjr,"luke"),Jjr.forEach(t),GOe=r(K5e," \u2014 "),Gx=n(K5e,"A",{href:!0});var Yjr=s(Gx);OOe=r(Yjr,"LukeConfig"),Yjr.forEach(t),VOe=r(K5e," (LUKE model)"),K5e.forEach(t),XOe=i(F),Of=n(F,"LI",{});var Z5e=s(Of);nZ=n(Z5e,"STRONG",{});var Kjr=s(nZ);zOe=r(Kjr,"lxmert"),Kjr.forEach(t),QOe=r(Z5e," \u2014 "),Ox=n(Z5e,"A",{href:!0});var Zjr=s(Ox);WOe=r(Zjr,"LxmertConfig"),Zjr.forEach(t),HOe=r(Z5e," (LXMERT model)"),Z5e.forEach(t),UOe=i(F),Vf=n(F,"LI",{});var e3e=s(Vf);sZ=n(e3e,"STRONG",{});var eDr=s(sZ);JOe=r(eDr,"m2m_100"),eDr.forEach(t),YOe=r(e3e," \u2014 "),Vx=n(e3e,"A",{href:!0});var oDr=s(Vx);KOe=r(oDr,"M2M100Config"),oDr.forEach(t),ZOe=r(e3e," (M2M100 model)"),e3e.forEach(t),eVe=i(F),Xf=n(F,"LI",{});var o3e=s(Xf);lZ=n(o3e,"STRONG",{});var rDr=s(lZ);oVe=r(rDr,"marian"),rDr.forEach(t),rVe=r(o3e," \u2014 "),Xx=n(o3e,"A",{href:!0});var tDr=s(Xx);tVe=r(tDr,"MarianConfig"),tDr.forEach(t),aVe=r(o3e," (Marian model)"),o3e.forEach(t),nVe=i(F),zf=n(F,"LI",{});var r3e=s(zf);iZ=n(r3e,"STRONG",{});var aDr=s(iZ);sVe=r(aDr,"maskformer"),aDr.forEach(t),lVe=r(r3e," \u2014 "),zx=n(r3e,"A",{href:!0});var nDr=s(zx);iVe=r(nDr,"MaskFormerConfig"),nDr.forEach(t),dVe=r(r3e," (MaskFormer model)"),r3e.forEach(t),cVe=i(F),Qf=n(F,"LI",{});var t3e=s(Qf);dZ=n(t3e,"STRONG",{});var sDr=s(dZ);mVe=r(sDr,"mbart"),sDr.forEach(t),fVe=r(t3e," \u2014 "),Qx=n(t3e,"A",{href:!0});var lDr=s(Qx);gVe=r(lDr,"MBartConfig"),lDr.forEach(t),hVe=r(t3e," (mBART model)"),t3e.forEach(t),uVe=i(F),Wf=n(F,"LI",{});var a3e=s(Wf);cZ=n(a3e,"STRONG",{});var iDr=s(cZ);pVe=r(iDr,"megatron-bert"),iDr.forEach(t),_Ve=r(a3e," \u2014 "),Wx=n(a3e,"A",{href:!0});var dDr=s(Wx);bVe=r(dDr,"MegatronBertConfig"),dDr.forEach(t),vVe=r(a3e," (MegatronBert model)"),a3e.forEach(t),FVe=i(F),Hf=n(F,"LI",{});var n3e=s(Hf);mZ=n(n3e,"STRONG",{});var cDr=s(mZ);TVe=r(cDr,"mobilebert"),cDr.forEach(t),MVe=r(n3e," \u2014 "),Hx=n(n3e,"A",{href:!0});var mDr=s(Hx);EVe=r(mDr,"MobileBertConfig"),mDr.forEach(t),CVe=r(n3e," (MobileBERT model)"),n3e.forEach(t),wVe=i(F),Uf=n(F,"LI",{});var s3e=s(Uf);fZ=n(s3e,"STRONG",{});var fDr=s(fZ);AVe=r(fDr,"mpnet"),fDr.forEach(t),yVe=r(s3e," \u2014 "),Ux=n(s3e,"A",{href:!0});var gDr=s(Ux);LVe=r(gDr,"MPNetConfig"),gDr.forEach(t),xVe=r(s3e," (MPNet model)"),s3e.forEach(t),kVe=i(F),Jf=n(F,"LI",{});var l3e=s(Jf);gZ=n(l3e,"STRONG",{});var hDr=s(gZ);SVe=r(hDr,"mt5"),hDr.forEach(t),RVe=r(l3e," \u2014 "),Jx=n(l3e,"A",{href:!0});var uDr=s(Jx);BVe=r(uDr,"MT5Config"),uDr.forEach(t),PVe=r(l3e," (mT5 model)"),l3e.forEach(t),$Ve=i(F),Yf=n(F,"LI",{});var i3e=s(Yf);hZ=n(i3e,"STRONG",{});var pDr=s(hZ);IVe=r(pDr,"nystromformer"),pDr.forEach(t),qVe=r(i3e," \u2014 "),Yx=n(i3e,"A",{href:!0});var _Dr=s(Yx);NVe=r(_Dr,"NystromformerConfig"),_Dr.forEach(t),jVe=r(i3e," (Nystromformer model)"),i3e.forEach(t),DVe=i(F),Kf=n(F,"LI",{});var d3e=s(Kf);uZ=n(d3e,"STRONG",{});var bDr=s(uZ);GVe=r(bDr,"openai-gpt"),bDr.forEach(t),OVe=r(d3e," \u2014 "),Kx=n(d3e,"A",{href:!0});var vDr=s(Kx);VVe=r(vDr,"OpenAIGPTConfig"),vDr.forEach(t),XVe=r(d3e," (OpenAI GPT model)"),d3e.forEach(t),zVe=i(F),Zf=n(F,"LI",{});var c3e=s(Zf);pZ=n(c3e,"STRONG",{});var FDr=s(pZ);QVe=r(FDr,"pegasus"),FDr.forEach(t),WVe=r(c3e," \u2014 "),Zx=n(c3e,"A",{href:!0});var TDr=s(Zx);HVe=r(TDr,"PegasusConfig"),TDr.forEach(t),UVe=r(c3e," (Pegasus model)"),c3e.forEach(t),JVe=i(F),eg=n(F,"LI",{});var m3e=s(eg);_Z=n(m3e,"STRONG",{});var MDr=s(_Z);YVe=r(MDr,"perceiver"),MDr.forEach(t),KVe=r(m3e," \u2014 "),ek=n(m3e,"A",{href:!0});var EDr=s(ek);ZVe=r(EDr,"PerceiverConfig"),EDr.forEach(t),eXe=r(m3e," (Perceiver model)"),m3e.forEach(t),oXe=i(F),og=n(F,"LI",{});var f3e=s(og);bZ=n(f3e,"STRONG",{});var CDr=s(bZ);rXe=r(CDr,"plbart"),CDr.forEach(t),tXe=r(f3e," \u2014 "),ok=n(f3e,"A",{href:!0});var wDr=s(ok);aXe=r(wDr,"PLBartConfig"),wDr.forEach(t),nXe=r(f3e," (PLBart model)"),f3e.forEach(t),sXe=i(F),rg=n(F,"LI",{});var g3e=s(rg);vZ=n(g3e,"STRONG",{});var ADr=s(vZ);lXe=r(ADr,"poolformer"),ADr.forEach(t),iXe=r(g3e," \u2014 "),rk=n(g3e,"A",{href:!0});var yDr=s(rk);dXe=r(yDr,"PoolFormerConfig"),yDr.forEach(t),cXe=r(g3e," (PoolFormer model)"),g3e.forEach(t),mXe=i(F),tg=n(F,"LI",{});var h3e=s(tg);FZ=n(h3e,"STRONG",{});var LDr=s(FZ);fXe=r(LDr,"prophetnet"),LDr.forEach(t),gXe=r(h3e," \u2014 "),tk=n(h3e,"A",{href:!0});var xDr=s(tk);hXe=r(xDr,"ProphetNetConfig"),xDr.forEach(t),uXe=r(h3e," (ProphetNet model)"),h3e.forEach(t),pXe=i(F),ag=n(F,"LI",{});var u3e=s(ag);TZ=n(u3e,"STRONG",{});var kDr=s(TZ);_Xe=r(kDr,"qdqbert"),kDr.forEach(t),bXe=r(u3e," \u2014 "),ak=n(u3e,"A",{href:!0});var SDr=s(ak);vXe=r(SDr,"QDQBertConfig"),SDr.forEach(t),FXe=r(u3e," (QDQBert model)"),u3e.forEach(t),TXe=i(F),ng=n(F,"LI",{});var p3e=s(ng);MZ=n(p3e,"STRONG",{});var RDr=s(MZ);MXe=r(RDr,"rag"),RDr.forEach(t),EXe=r(p3e," \u2014 "),nk=n(p3e,"A",{href:!0});var BDr=s(nk);CXe=r(BDr,"RagConfig"),BDr.forEach(t),wXe=r(p3e," (RAG model)"),p3e.forEach(t),AXe=i(F),sg=n(F,"LI",{});var _3e=s(sg);EZ=n(_3e,"STRONG",{});var PDr=s(EZ);yXe=r(PDr,"realm"),PDr.forEach(t),LXe=r(_3e," \u2014 "),sk=n(_3e,"A",{href:!0});var $Dr=s(sk);xXe=r($Dr,"RealmConfig"),$Dr.forEach(t),kXe=r(_3e," (Realm model)"),_3e.forEach(t),SXe=i(F),lg=n(F,"LI",{});var b3e=s(lg);CZ=n(b3e,"STRONG",{});var IDr=s(CZ);RXe=r(IDr,"reformer"),IDr.forEach(t),BXe=r(b3e," \u2014 "),lk=n(b3e,"A",{href:!0});var qDr=s(lk);PXe=r(qDr,"ReformerConfig"),qDr.forEach(t),$Xe=r(b3e," (Reformer model)"),b3e.forEach(t),IXe=i(F),ig=n(F,"LI",{});var v3e=s(ig);wZ=n(v3e,"STRONG",{});var NDr=s(wZ);qXe=r(NDr,"regnet"),NDr.forEach(t),NXe=r(v3e," \u2014 "),ik=n(v3e,"A",{href:!0});var jDr=s(ik);jXe=r(jDr,"RegNetConfig"),jDr.forEach(t),DXe=r(v3e," (RegNet model)"),v3e.forEach(t),GXe=i(F),dg=n(F,"LI",{});var F3e=s(dg);AZ=n(F3e,"STRONG",{});var DDr=s(AZ);OXe=r(DDr,"rembert"),DDr.forEach(t),VXe=r(F3e," \u2014 "),dk=n(F3e,"A",{href:!0});var GDr=s(dk);XXe=r(GDr,"RemBertConfig"),GDr.forEach(t),zXe=r(F3e," (RemBERT model)"),F3e.forEach(t),QXe=i(F),cg=n(F,"LI",{});var T3e=s(cg);yZ=n(T3e,"STRONG",{});var ODr=s(yZ);WXe=r(ODr,"resnet"),ODr.forEach(t),HXe=r(T3e," \u2014 "),ck=n(T3e,"A",{href:!0});var VDr=s(ck);UXe=r(VDr,"ResNetConfig"),VDr.forEach(t),JXe=r(T3e," (ResNet model)"),T3e.forEach(t),YXe=i(F),mg=n(F,"LI",{});var M3e=s(mg);LZ=n(M3e,"STRONG",{});var XDr=s(LZ);KXe=r(XDr,"retribert"),XDr.forEach(t),ZXe=r(M3e," \u2014 "),mk=n(M3e,"A",{href:!0});var zDr=s(mk);eze=r(zDr,"RetriBertConfig"),zDr.forEach(t),oze=r(M3e," (RetriBERT model)"),M3e.forEach(t),rze=i(F),fg=n(F,"LI",{});var E3e=s(fg);xZ=n(E3e,"STRONG",{});var QDr=s(xZ);tze=r(QDr,"roberta"),QDr.forEach(t),aze=r(E3e," \u2014 "),fk=n(E3e,"A",{href:!0});var WDr=s(fk);nze=r(WDr,"RobertaConfig"),WDr.forEach(t),sze=r(E3e," (RoBERTa model)"),E3e.forEach(t),lze=i(F),gg=n(F,"LI",{});var C3e=s(gg);kZ=n(C3e,"STRONG",{});var HDr=s(kZ);ize=r(HDr,"roformer"),HDr.forEach(t),dze=r(C3e," \u2014 "),gk=n(C3e,"A",{href:!0});var UDr=s(gk);cze=r(UDr,"RoFormerConfig"),UDr.forEach(t),mze=r(C3e," (RoFormer model)"),C3e.forEach(t),fze=i(F),hg=n(F,"LI",{});var w3e=s(hg);SZ=n(w3e,"STRONG",{});var JDr=s(SZ);gze=r(JDr,"segformer"),JDr.forEach(t),hze=r(w3e," \u2014 "),hk=n(w3e,"A",{href:!0});var YDr=s(hk);uze=r(YDr,"SegformerConfig"),YDr.forEach(t),pze=r(w3e," (SegFormer model)"),w3e.forEach(t),_ze=i(F),ug=n(F,"LI",{});var A3e=s(ug);RZ=n(A3e,"STRONG",{});var KDr=s(RZ);bze=r(KDr,"sew"),KDr.forEach(t),vze=r(A3e," \u2014 "),uk=n(A3e,"A",{href:!0});var ZDr=s(uk);Fze=r(ZDr,"SEWConfig"),ZDr.forEach(t),Tze=r(A3e," (SEW model)"),A3e.forEach(t),Mze=i(F),pg=n(F,"LI",{});var y3e=s(pg);BZ=n(y3e,"STRONG",{});var eGr=s(BZ);Eze=r(eGr,"sew-d"),eGr.forEach(t),Cze=r(y3e," \u2014 "),pk=n(y3e,"A",{href:!0});var oGr=s(pk);wze=r(oGr,"SEWDConfig"),oGr.forEach(t),Aze=r(y3e," (SEW-D model)"),y3e.forEach(t),yze=i(F),_g=n(F,"LI",{});var L3e=s(_g);PZ=n(L3e,"STRONG",{});var rGr=s(PZ);Lze=r(rGr,"speech-encoder-decoder"),rGr.forEach(t),xze=r(L3e," \u2014 "),_k=n(L3e,"A",{href:!0});var tGr=s(_k);kze=r(tGr,"SpeechEncoderDecoderConfig"),tGr.forEach(t),Sze=r(L3e," (Speech Encoder decoder model)"),L3e.forEach(t),Rze=i(F),bg=n(F,"LI",{});var x3e=s(bg);$Z=n(x3e,"STRONG",{});var aGr=s($Z);Bze=r(aGr,"speech_to_text"),aGr.forEach(t),Pze=r(x3e," \u2014 "),bk=n(x3e,"A",{href:!0});var nGr=s(bk);$ze=r(nGr,"Speech2TextConfig"),nGr.forEach(t),Ize=r(x3e," (Speech2Text model)"),x3e.forEach(t),qze=i(F),vg=n(F,"LI",{});var k3e=s(vg);IZ=n(k3e,"STRONG",{});var sGr=s(IZ);Nze=r(sGr,"speech_to_text_2"),sGr.forEach(t),jze=r(k3e," \u2014 "),vk=n(k3e,"A",{href:!0});var lGr=s(vk);Dze=r(lGr,"Speech2Text2Config"),lGr.forEach(t),Gze=r(k3e," (Speech2Text2 model)"),k3e.forEach(t),Oze=i(F),Fg=n(F,"LI",{});var S3e=s(Fg);qZ=n(S3e,"STRONG",{});var iGr=s(qZ);Vze=r(iGr,"splinter"),iGr.forEach(t),Xze=r(S3e," \u2014 "),Fk=n(S3e,"A",{href:!0});var dGr=s(Fk);zze=r(dGr,"SplinterConfig"),dGr.forEach(t),Qze=r(S3e," (Splinter model)"),S3e.forEach(t),Wze=i(F),Tg=n(F,"LI",{});var R3e=s(Tg);NZ=n(R3e,"STRONG",{});var cGr=s(NZ);Hze=r(cGr,"squeezebert"),cGr.forEach(t),Uze=r(R3e," \u2014 "),Tk=n(R3e,"A",{href:!0});var mGr=s(Tk);Jze=r(mGr,"SqueezeBertConfig"),mGr.forEach(t),Yze=r(R3e," (SqueezeBERT model)"),R3e.forEach(t),Kze=i(F),Mg=n(F,"LI",{});var B3e=s(Mg);jZ=n(B3e,"STRONG",{});var fGr=s(jZ);Zze=r(fGr,"swin"),fGr.forEach(t),eQe=r(B3e," \u2014 "),Mk=n(B3e,"A",{href:!0});var gGr=s(Mk);oQe=r(gGr,"SwinConfig"),gGr.forEach(t),rQe=r(B3e," (Swin model)"),B3e.forEach(t),tQe=i(F),Eg=n(F,"LI",{});var P3e=s(Eg);DZ=n(P3e,"STRONG",{});var hGr=s(DZ);aQe=r(hGr,"t5"),hGr.forEach(t),nQe=r(P3e," \u2014 "),Ek=n(P3e,"A",{href:!0});var uGr=s(Ek);sQe=r(uGr,"T5Config"),uGr.forEach(t),lQe=r(P3e," (T5 model)"),P3e.forEach(t),iQe=i(F),Cg=n(F,"LI",{});var $3e=s(Cg);GZ=n($3e,"STRONG",{});var pGr=s(GZ);dQe=r(pGr,"tapas"),pGr.forEach(t),cQe=r($3e," \u2014 "),Ck=n($3e,"A",{href:!0});var _Gr=s(Ck);mQe=r(_Gr,"TapasConfig"),_Gr.forEach(t),fQe=r($3e," (TAPAS model)"),$3e.forEach(t),gQe=i(F),wg=n(F,"LI",{});var I3e=s(wg);OZ=n(I3e,"STRONG",{});var bGr=s(OZ);hQe=r(bGr,"tapex"),bGr.forEach(t),uQe=r(I3e," \u2014 "),wk=n(I3e,"A",{href:!0});var vGr=s(wk);pQe=r(vGr,"BartConfig"),vGr.forEach(t),_Qe=r(I3e," (TAPEX model)"),I3e.forEach(t),bQe=i(F),Ag=n(F,"LI",{});var q3e=s(Ag);VZ=n(q3e,"STRONG",{});var FGr=s(VZ);vQe=r(FGr,"transfo-xl"),FGr.forEach(t),FQe=r(q3e," \u2014 "),Ak=n(q3e,"A",{href:!0});var TGr=s(Ak);TQe=r(TGr,"TransfoXLConfig"),TGr.forEach(t),MQe=r(q3e," (Transformer-XL model)"),q3e.forEach(t),EQe=i(F),yg=n(F,"LI",{});var N3e=s(yg);XZ=n(N3e,"STRONG",{});var MGr=s(XZ);CQe=r(MGr,"trocr"),MGr.forEach(t),wQe=r(N3e," \u2014 "),yk=n(N3e,"A",{href:!0});var EGr=s(yk);AQe=r(EGr,"TrOCRConfig"),EGr.forEach(t),yQe=r(N3e," (TrOCR model)"),N3e.forEach(t),LQe=i(F),Lg=n(F,"LI",{});var j3e=s(Lg);zZ=n(j3e,"STRONG",{});var CGr=s(zZ);xQe=r(CGr,"unispeech"),CGr.forEach(t),kQe=r(j3e," \u2014 "),Lk=n(j3e,"A",{href:!0});var wGr=s(Lk);SQe=r(wGr,"UniSpeechConfig"),wGr.forEach(t),RQe=r(j3e," (UniSpeech model)"),j3e.forEach(t),BQe=i(F),xg=n(F,"LI",{});var D3e=s(xg);QZ=n(D3e,"STRONG",{});var AGr=s(QZ);PQe=r(AGr,"unispeech-sat"),AGr.forEach(t),$Qe=r(D3e," \u2014 "),xk=n(D3e,"A",{href:!0});var yGr=s(xk);IQe=r(yGr,"UniSpeechSatConfig"),yGr.forEach(t),qQe=r(D3e," (UniSpeechSat model)"),D3e.forEach(t),NQe=i(F),kg=n(F,"LI",{});var G3e=s(kg);WZ=n(G3e,"STRONG",{});var LGr=s(WZ);jQe=r(LGr,"van"),LGr.forEach(t),DQe=r(G3e," \u2014 "),kk=n(G3e,"A",{href:!0});var xGr=s(kk);GQe=r(xGr,"VanConfig"),xGr.forEach(t),OQe=r(G3e," (VAN model)"),G3e.forEach(t),VQe=i(F),Sg=n(F,"LI",{});var O3e=s(Sg);HZ=n(O3e,"STRONG",{});var kGr=s(HZ);XQe=r(kGr,"vilt"),kGr.forEach(t),zQe=r(O3e," \u2014 "),Sk=n(O3e,"A",{href:!0});var SGr=s(Sk);QQe=r(SGr,"ViltConfig"),SGr.forEach(t),WQe=r(O3e," (ViLT model)"),O3e.forEach(t),HQe=i(F),Rg=n(F,"LI",{});var V3e=s(Rg);UZ=n(V3e,"STRONG",{});var RGr=s(UZ);UQe=r(RGr,"vision-encoder-decoder"),RGr.forEach(t),JQe=r(V3e," \u2014 "),Rk=n(V3e,"A",{href:!0});var BGr=s(Rk);YQe=r(BGr,"VisionEncoderDecoderConfig"),BGr.forEach(t),KQe=r(V3e," (Vision Encoder decoder model)"),V3e.forEach(t),ZQe=i(F),Bg=n(F,"LI",{});var X3e=s(Bg);JZ=n(X3e,"STRONG",{});var PGr=s(JZ);eWe=r(PGr,"vision-text-dual-encoder"),PGr.forEach(t),oWe=r(X3e," \u2014 "),Bk=n(X3e,"A",{href:!0});var $Gr=s(Bk);rWe=r($Gr,"VisionTextDualEncoderConfig"),$Gr.forEach(t),tWe=r(X3e," (VisionTextDualEncoder model)"),X3e.forEach(t),aWe=i(F),Pg=n(F,"LI",{});var z3e=s(Pg);YZ=n(z3e,"STRONG",{});var IGr=s(YZ);nWe=r(IGr,"visual_bert"),IGr.forEach(t),sWe=r(z3e," \u2014 "),Pk=n(z3e,"A",{href:!0});var qGr=s(Pk);lWe=r(qGr,"VisualBertConfig"),qGr.forEach(t),iWe=r(z3e," (VisualBert model)"),z3e.forEach(t),dWe=i(F),$g=n(F,"LI",{});var Q3e=s($g);KZ=n(Q3e,"STRONG",{});var NGr=s(KZ);cWe=r(NGr,"vit"),NGr.forEach(t),mWe=r(Q3e," \u2014 "),$k=n(Q3e,"A",{href:!0});var jGr=s($k);fWe=r(jGr,"ViTConfig"),jGr.forEach(t),gWe=r(Q3e," (ViT model)"),Q3e.forEach(t),hWe=i(F),Ig=n(F,"LI",{});var W3e=s(Ig);ZZ=n(W3e,"STRONG",{});var DGr=s(ZZ);uWe=r(DGr,"vit_mae"),DGr.forEach(t),pWe=r(W3e," \u2014 "),Ik=n(W3e,"A",{href:!0});var GGr=s(Ik);_We=r(GGr,"ViTMAEConfig"),GGr.forEach(t),bWe=r(W3e," (ViTMAE model)"),W3e.forEach(t),vWe=i(F),qg=n(F,"LI",{});var H3e=s(qg);eee=n(H3e,"STRONG",{});var OGr=s(eee);FWe=r(OGr,"wav2vec2"),OGr.forEach(t),TWe=r(H3e," \u2014 "),qk=n(H3e,"A",{href:!0});var VGr=s(qk);MWe=r(VGr,"Wav2Vec2Config"),VGr.forEach(t),EWe=r(H3e," (Wav2Vec2 model)"),H3e.forEach(t),CWe=i(F),Ng=n(F,"LI",{});var U3e=s(Ng);oee=n(U3e,"STRONG",{});var XGr=s(oee);wWe=r(XGr,"wavlm"),XGr.forEach(t),AWe=r(U3e," \u2014 "),Nk=n(U3e,"A",{href:!0});var zGr=s(Nk);yWe=r(zGr,"WavLMConfig"),zGr.forEach(t),LWe=r(U3e," (WavLM model)"),U3e.forEach(t),xWe=i(F),jg=n(F,"LI",{});var J3e=s(jg);ree=n(J3e,"STRONG",{});var QGr=s(ree);kWe=r(QGr,"xglm"),QGr.forEach(t),SWe=r(J3e," \u2014 "),jk=n(J3e,"A",{href:!0});var WGr=s(jk);RWe=r(WGr,"XGLMConfig"),WGr.forEach(t),BWe=r(J3e," (XGLM model)"),J3e.forEach(t),PWe=i(F),Dg=n(F,"LI",{});var Y3e=s(Dg);tee=n(Y3e,"STRONG",{});var HGr=s(tee);$We=r(HGr,"xlm"),HGr.forEach(t),IWe=r(Y3e," \u2014 "),Dk=n(Y3e,"A",{href:!0});var UGr=s(Dk);qWe=r(UGr,"XLMConfig"),UGr.forEach(t),NWe=r(Y3e," (XLM model)"),Y3e.forEach(t),jWe=i(F),Gg=n(F,"LI",{});var K3e=s(Gg);aee=n(K3e,"STRONG",{});var JGr=s(aee);DWe=r(JGr,"xlm-prophetnet"),JGr.forEach(t),GWe=r(K3e," \u2014 "),Gk=n(K3e,"A",{href:!0});var YGr=s(Gk);OWe=r(YGr,"XLMProphetNetConfig"),YGr.forEach(t),VWe=r(K3e," (XLMProphetNet model)"),K3e.forEach(t),XWe=i(F),Og=n(F,"LI",{});var Z3e=s(Og);nee=n(Z3e,"STRONG",{});var KGr=s(nee);zWe=r(KGr,"xlm-roberta"),KGr.forEach(t),QWe=r(Z3e," \u2014 "),Ok=n(Z3e,"A",{href:!0});var ZGr=s(Ok);WWe=r(ZGr,"XLMRobertaConfig"),ZGr.forEach(t),HWe=r(Z3e," (XLM-RoBERTa model)"),Z3e.forEach(t),UWe=i(F),Vg=n(F,"LI",{});var eCe=s(Vg);see=n(eCe,"STRONG",{});var eOr=s(see);JWe=r(eOr,"xlm-roberta-xl"),eOr.forEach(t),YWe=r(eCe," \u2014 "),Vk=n(eCe,"A",{href:!0});var oOr=s(Vk);KWe=r(oOr,"XLMRobertaXLConfig"),oOr.forEach(t),ZWe=r(eCe," (XLM-RoBERTa-XL model)"),eCe.forEach(t),eHe=i(F),Xg=n(F,"LI",{});var oCe=s(Xg);lee=n(oCe,"STRONG",{});var rOr=s(lee);oHe=r(rOr,"xlnet"),rOr.forEach(t),rHe=r(oCe," \u2014 "),Xk=n(oCe,"A",{href:!0});var tOr=s(Xk);tHe=r(tOr,"XLNetConfig"),tOr.forEach(t),aHe=r(oCe," (XLNet model)"),oCe.forEach(t),nHe=i(F),zg=n(F,"LI",{});var rCe=s(zg);iee=n(rCe,"STRONG",{});var aOr=s(iee);sHe=r(aOr,"yoso"),aOr.forEach(t),lHe=r(rCe," \u2014 "),zk=n(rCe,"A",{href:!0});var nOr=s(zk);iHe=r(nOr,"YosoConfig"),nOr.forEach(t),dHe=r(rCe," (YOSO model)"),rCe.forEach(t),F.forEach(t),cHe=i(ga),dee=n(ga,"P",{});var sOr=s(dee);mHe=r(sOr,"Examples:"),sOr.forEach(t),fHe=i(ga),f(rw.$$.fragment,ga),ga.forEach(t),gHe=i(Ys),Qg=n(Ys,"DIV",{class:!0});var iIe=s(Qg);f(tw.$$.fragment,iIe),hHe=i(iIe),cee=n(iIe,"P",{});var lOr=s(cee);uHe=r(lOr,"Register a new configuration for this class."),lOr.forEach(t),iIe.forEach(t),Ys.forEach(t),sPe=i(c),od=n(c,"H2",{class:!0});var dIe=s(od);Wg=n(dIe,"A",{id:!0,class:!0,href:!0});var iOr=s(Wg);mee=n(iOr,"SPAN",{});var dOr=s(mee);f(aw.$$.fragment,dOr),dOr.forEach(t),iOr.forEach(t),pHe=i(dIe),fee=n(dIe,"SPAN",{});var cOr=s(fee);_He=r(cOr,"AutoTokenizer"),cOr.forEach(t),dIe.forEach(t),lPe=i(c),Wo=n(c,"DIV",{class:!0});var Ks=s(Wo);f(nw.$$.fragment,Ks),bHe=i(Ks),sw=n(Ks,"P",{});var cIe=s(sw);vHe=r(cIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Qk=n(cIe,"A",{href:!0});var mOr=s(Qk);FHe=r(mOr,"AutoTokenizer.from_pretrained()"),mOr.forEach(t),THe=r(cIe," class method."),cIe.forEach(t),MHe=i(Ks),lw=n(Ks,"P",{});var mIe=s(lw);EHe=r(mIe,"This class cannot be instantiated directly using "),gee=n(mIe,"CODE",{});var fOr=s(gee);CHe=r(fOr,"__init__()"),fOr.forEach(t),wHe=r(mIe," (throws an error)."),mIe.forEach(t),AHe=i(Ks),ho=n(Ks,"DIV",{class:!0});var ha=s(ho);f(iw.$$.fragment,ha),yHe=i(ha),hee=n(ha,"P",{});var gOr=s(hee);LHe=r(gOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gOr.forEach(t),xHe=i(ha),Oa=n(ha,"P",{});var QC=s(Oa);kHe=r(QC,"The tokenizer class to instantiate is selected based on the "),uee=n(QC,"CODE",{});var hOr=s(uee);SHe=r(hOr,"model_type"),hOr.forEach(t),RHe=r(QC,` property of the config object (either
passed as an argument or loaded from `),pee=n(QC,"CODE",{});var uOr=s(pee);BHe=r(uOr,"pretrained_model_name_or_path"),uOr.forEach(t),PHe=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ee=n(QC,"CODE",{});var pOr=s(_ee);$He=r(pOr,"pretrained_model_name_or_path"),pOr.forEach(t),IHe=r(QC,":"),QC.forEach(t),qHe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var G7=s(Wn);bee=n(G7,"STRONG",{});var _Or=s(bee);NHe=r(_Or,"albert"),_Or.forEach(t),jHe=r(G7," \u2014 "),Wk=n(G7,"A",{href:!0});var bOr=s(Wk);DHe=r(bOr,"AlbertTokenizer"),bOr.forEach(t),GHe=r(G7," or "),Hk=n(G7,"A",{href:!0});var vOr=s(Hk);OHe=r(vOr,"AlbertTokenizerFast"),vOr.forEach(t),VHe=r(G7," (ALBERT model)"),G7.forEach(t),XHe=i(C),Hn=n(C,"LI",{});var O7=s(Hn);vee=n(O7,"STRONG",{});var FOr=s(vee);zHe=r(FOr,"bart"),FOr.forEach(t),QHe=r(O7," \u2014 "),Uk=n(O7,"A",{href:!0});var TOr=s(Uk);WHe=r(TOr,"BartTokenizer"),TOr.forEach(t),HHe=r(O7," or "),Jk=n(O7,"A",{href:!0});var MOr=s(Jk);UHe=r(MOr,"BartTokenizerFast"),MOr.forEach(t),JHe=r(O7," (BART model)"),O7.forEach(t),YHe=i(C),Un=n(C,"LI",{});var V7=s(Un);Fee=n(V7,"STRONG",{});var EOr=s(Fee);KHe=r(EOr,"barthez"),EOr.forEach(t),ZHe=r(V7," \u2014 "),Yk=n(V7,"A",{href:!0});var COr=s(Yk);eUe=r(COr,"BarthezTokenizer"),COr.forEach(t),oUe=r(V7," or "),Kk=n(V7,"A",{href:!0});var wOr=s(Kk);rUe=r(wOr,"BarthezTokenizerFast"),wOr.forEach(t),tUe=r(V7," (BARThez model)"),V7.forEach(t),aUe=i(C),Hg=n(C,"LI",{});var tCe=s(Hg);Tee=n(tCe,"STRONG",{});var AOr=s(Tee);nUe=r(AOr,"bartpho"),AOr.forEach(t),sUe=r(tCe," \u2014 "),Zk=n(tCe,"A",{href:!0});var yOr=s(Zk);lUe=r(yOr,"BartphoTokenizer"),yOr.forEach(t),iUe=r(tCe," (BARTpho model)"),tCe.forEach(t),dUe=i(C),Jn=n(C,"LI",{});var X7=s(Jn);Mee=n(X7,"STRONG",{});var LOr=s(Mee);cUe=r(LOr,"bert"),LOr.forEach(t),mUe=r(X7," \u2014 "),eS=n(X7,"A",{href:!0});var xOr=s(eS);fUe=r(xOr,"BertTokenizer"),xOr.forEach(t),gUe=r(X7," or "),oS=n(X7,"A",{href:!0});var kOr=s(oS);hUe=r(kOr,"BertTokenizerFast"),kOr.forEach(t),uUe=r(X7," (BERT model)"),X7.forEach(t),pUe=i(C),Ug=n(C,"LI",{});var aCe=s(Ug);Eee=n(aCe,"STRONG",{});var SOr=s(Eee);_Ue=r(SOr,"bert-generation"),SOr.forEach(t),bUe=r(aCe," \u2014 "),rS=n(aCe,"A",{href:!0});var ROr=s(rS);vUe=r(ROr,"BertGenerationTokenizer"),ROr.forEach(t),FUe=r(aCe," (Bert Generation model)"),aCe.forEach(t),TUe=i(C),Jg=n(C,"LI",{});var nCe=s(Jg);Cee=n(nCe,"STRONG",{});var BOr=s(Cee);MUe=r(BOr,"bert-japanese"),BOr.forEach(t),EUe=r(nCe," \u2014 "),tS=n(nCe,"A",{href:!0});var POr=s(tS);CUe=r(POr,"BertJapaneseTokenizer"),POr.forEach(t),wUe=r(nCe," (BertJapanese model)"),nCe.forEach(t),AUe=i(C),Yg=n(C,"LI",{});var sCe=s(Yg);wee=n(sCe,"STRONG",{});var $Or=s(wee);yUe=r($Or,"bertweet"),$Or.forEach(t),LUe=r(sCe," \u2014 "),aS=n(sCe,"A",{href:!0});var IOr=s(aS);xUe=r(IOr,"BertweetTokenizer"),IOr.forEach(t),kUe=r(sCe," (Bertweet model)"),sCe.forEach(t),SUe=i(C),Yn=n(C,"LI",{});var z7=s(Yn);Aee=n(z7,"STRONG",{});var qOr=s(Aee);RUe=r(qOr,"big_bird"),qOr.forEach(t),BUe=r(z7," \u2014 "),nS=n(z7,"A",{href:!0});var NOr=s(nS);PUe=r(NOr,"BigBirdTokenizer"),NOr.forEach(t),$Ue=r(z7," or "),sS=n(z7,"A",{href:!0});var jOr=s(sS);IUe=r(jOr,"BigBirdTokenizerFast"),jOr.forEach(t),qUe=r(z7," (BigBird model)"),z7.forEach(t),NUe=i(C),Kn=n(C,"LI",{});var Q7=s(Kn);yee=n(Q7,"STRONG",{});var DOr=s(yee);jUe=r(DOr,"bigbird_pegasus"),DOr.forEach(t),DUe=r(Q7," \u2014 "),lS=n(Q7,"A",{href:!0});var GOr=s(lS);GUe=r(GOr,"PegasusTokenizer"),GOr.forEach(t),OUe=r(Q7," or "),iS=n(Q7,"A",{href:!0});var OOr=s(iS);VUe=r(OOr,"PegasusTokenizerFast"),OOr.forEach(t),XUe=r(Q7," (BigBirdPegasus model)"),Q7.forEach(t),zUe=i(C),Zn=n(C,"LI",{});var W7=s(Zn);Lee=n(W7,"STRONG",{});var VOr=s(Lee);QUe=r(VOr,"blenderbot"),VOr.forEach(t),WUe=r(W7," \u2014 "),dS=n(W7,"A",{href:!0});var XOr=s(dS);HUe=r(XOr,"BlenderbotTokenizer"),XOr.forEach(t),UUe=r(W7," or "),cS=n(W7,"A",{href:!0});var zOr=s(cS);JUe=r(zOr,"BlenderbotTokenizerFast"),zOr.forEach(t),YUe=r(W7," (Blenderbot model)"),W7.forEach(t),KUe=i(C),Kg=n(C,"LI",{});var lCe=s(Kg);xee=n(lCe,"STRONG",{});var QOr=s(xee);ZUe=r(QOr,"blenderbot-small"),QOr.forEach(t),eJe=r(lCe," \u2014 "),mS=n(lCe,"A",{href:!0});var WOr=s(mS);oJe=r(WOr,"BlenderbotSmallTokenizer"),WOr.forEach(t),rJe=r(lCe," (BlenderbotSmall model)"),lCe.forEach(t),tJe=i(C),Zg=n(C,"LI",{});var iCe=s(Zg);kee=n(iCe,"STRONG",{});var HOr=s(kee);aJe=r(HOr,"byt5"),HOr.forEach(t),nJe=r(iCe," \u2014 "),fS=n(iCe,"A",{href:!0});var UOr=s(fS);sJe=r(UOr,"ByT5Tokenizer"),UOr.forEach(t),lJe=r(iCe," (ByT5 model)"),iCe.forEach(t),iJe=i(C),es=n(C,"LI",{});var H7=s(es);See=n(H7,"STRONG",{});var JOr=s(See);dJe=r(JOr,"camembert"),JOr.forEach(t),cJe=r(H7," \u2014 "),gS=n(H7,"A",{href:!0});var YOr=s(gS);mJe=r(YOr,"CamembertTokenizer"),YOr.forEach(t),fJe=r(H7," or "),hS=n(H7,"A",{href:!0});var KOr=s(hS);gJe=r(KOr,"CamembertTokenizerFast"),KOr.forEach(t),hJe=r(H7," (CamemBERT model)"),H7.forEach(t),uJe=i(C),eh=n(C,"LI",{});var dCe=s(eh);Ree=n(dCe,"STRONG",{});var ZOr=s(Ree);pJe=r(ZOr,"canine"),ZOr.forEach(t),_Je=r(dCe," \u2014 "),uS=n(dCe,"A",{href:!0});var eVr=s(uS);bJe=r(eVr,"CanineTokenizer"),eVr.forEach(t),vJe=r(dCe," (Canine model)"),dCe.forEach(t),FJe=i(C),os=n(C,"LI",{});var U7=s(os);Bee=n(U7,"STRONG",{});var oVr=s(Bee);TJe=r(oVr,"clip"),oVr.forEach(t),MJe=r(U7," \u2014 "),pS=n(U7,"A",{href:!0});var rVr=s(pS);EJe=r(rVr,"CLIPTokenizer"),rVr.forEach(t),CJe=r(U7," or "),_S=n(U7,"A",{href:!0});var tVr=s(_S);wJe=r(tVr,"CLIPTokenizerFast"),tVr.forEach(t),AJe=r(U7," (CLIP model)"),U7.forEach(t),yJe=i(C),rs=n(C,"LI",{});var J7=s(rs);Pee=n(J7,"STRONG",{});var aVr=s(Pee);LJe=r(aVr,"convbert"),aVr.forEach(t),xJe=r(J7," \u2014 "),bS=n(J7,"A",{href:!0});var nVr=s(bS);kJe=r(nVr,"ConvBertTokenizer"),nVr.forEach(t),SJe=r(J7," or "),vS=n(J7,"A",{href:!0});var sVr=s(vS);RJe=r(sVr,"ConvBertTokenizerFast"),sVr.forEach(t),BJe=r(J7," (ConvBERT model)"),J7.forEach(t),PJe=i(C),ts=n(C,"LI",{});var Y7=s(ts);$ee=n(Y7,"STRONG",{});var lVr=s($ee);$Je=r(lVr,"cpm"),lVr.forEach(t),IJe=r(Y7," \u2014 "),FS=n(Y7,"A",{href:!0});var iVr=s(FS);qJe=r(iVr,"CpmTokenizer"),iVr.forEach(t),NJe=r(Y7," or "),Iee=n(Y7,"CODE",{});var dVr=s(Iee);jJe=r(dVr,"CpmTokenizerFast"),dVr.forEach(t),DJe=r(Y7," (CPM model)"),Y7.forEach(t),GJe=i(C),oh=n(C,"LI",{});var cCe=s(oh);qee=n(cCe,"STRONG",{});var cVr=s(qee);OJe=r(cVr,"ctrl"),cVr.forEach(t),VJe=r(cCe," \u2014 "),TS=n(cCe,"A",{href:!0});var mVr=s(TS);XJe=r(mVr,"CTRLTokenizer"),mVr.forEach(t),zJe=r(cCe," (CTRL model)"),cCe.forEach(t),QJe=i(C),as=n(C,"LI",{});var K7=s(as);Nee=n(K7,"STRONG",{});var fVr=s(Nee);WJe=r(fVr,"data2vec-text"),fVr.forEach(t),HJe=r(K7," \u2014 "),MS=n(K7,"A",{href:!0});var gVr=s(MS);UJe=r(gVr,"RobertaTokenizer"),gVr.forEach(t),JJe=r(K7," or "),ES=n(K7,"A",{href:!0});var hVr=s(ES);YJe=r(hVr,"RobertaTokenizerFast"),hVr.forEach(t),KJe=r(K7," (Data2VecText model)"),K7.forEach(t),ZJe=i(C),ns=n(C,"LI",{});var Z7=s(ns);jee=n(Z7,"STRONG",{});var uVr=s(jee);eYe=r(uVr,"deberta"),uVr.forEach(t),oYe=r(Z7," \u2014 "),CS=n(Z7,"A",{href:!0});var pVr=s(CS);rYe=r(pVr,"DebertaTokenizer"),pVr.forEach(t),tYe=r(Z7," or "),wS=n(Z7,"A",{href:!0});var _Vr=s(wS);aYe=r(_Vr,"DebertaTokenizerFast"),_Vr.forEach(t),nYe=r(Z7," (DeBERTa model)"),Z7.forEach(t),sYe=i(C),ss=n(C,"LI",{});var e9=s(ss);Dee=n(e9,"STRONG",{});var bVr=s(Dee);lYe=r(bVr,"deberta-v2"),bVr.forEach(t),iYe=r(e9," \u2014 "),AS=n(e9,"A",{href:!0});var vVr=s(AS);dYe=r(vVr,"DebertaV2Tokenizer"),vVr.forEach(t),cYe=r(e9," or "),yS=n(e9,"A",{href:!0});var FVr=s(yS);mYe=r(FVr,"DebertaV2TokenizerFast"),FVr.forEach(t),fYe=r(e9," (DeBERTa-v2 model)"),e9.forEach(t),gYe=i(C),ls=n(C,"LI",{});var o9=s(ls);Gee=n(o9,"STRONG",{});var TVr=s(Gee);hYe=r(TVr,"distilbert"),TVr.forEach(t),uYe=r(o9," \u2014 "),LS=n(o9,"A",{href:!0});var MVr=s(LS);pYe=r(MVr,"DistilBertTokenizer"),MVr.forEach(t),_Ye=r(o9," or "),xS=n(o9,"A",{href:!0});var EVr=s(xS);bYe=r(EVr,"DistilBertTokenizerFast"),EVr.forEach(t),vYe=r(o9," (DistilBERT model)"),o9.forEach(t),FYe=i(C),is=n(C,"LI",{});var r9=s(is);Oee=n(r9,"STRONG",{});var CVr=s(Oee);TYe=r(CVr,"dpr"),CVr.forEach(t),MYe=r(r9," \u2014 "),kS=n(r9,"A",{href:!0});var wVr=s(kS);EYe=r(wVr,"DPRQuestionEncoderTokenizer"),wVr.forEach(t),CYe=r(r9," or "),SS=n(r9,"A",{href:!0});var AVr=s(SS);wYe=r(AVr,"DPRQuestionEncoderTokenizerFast"),AVr.forEach(t),AYe=r(r9," (DPR model)"),r9.forEach(t),yYe=i(C),ds=n(C,"LI",{});var t9=s(ds);Vee=n(t9,"STRONG",{});var yVr=s(Vee);LYe=r(yVr,"electra"),yVr.forEach(t),xYe=r(t9," \u2014 "),RS=n(t9,"A",{href:!0});var LVr=s(RS);kYe=r(LVr,"ElectraTokenizer"),LVr.forEach(t),SYe=r(t9," or "),BS=n(t9,"A",{href:!0});var xVr=s(BS);RYe=r(xVr,"ElectraTokenizerFast"),xVr.forEach(t),BYe=r(t9," (ELECTRA model)"),t9.forEach(t),PYe=i(C),rh=n(C,"LI",{});var mCe=s(rh);Xee=n(mCe,"STRONG",{});var kVr=s(Xee);$Ye=r(kVr,"flaubert"),kVr.forEach(t),IYe=r(mCe," \u2014 "),PS=n(mCe,"A",{href:!0});var SVr=s(PS);qYe=r(SVr,"FlaubertTokenizer"),SVr.forEach(t),NYe=r(mCe," (FlauBERT model)"),mCe.forEach(t),jYe=i(C),cs=n(C,"LI",{});var a9=s(cs);zee=n(a9,"STRONG",{});var RVr=s(zee);DYe=r(RVr,"fnet"),RVr.forEach(t),GYe=r(a9," \u2014 "),$S=n(a9,"A",{href:!0});var BVr=s($S);OYe=r(BVr,"FNetTokenizer"),BVr.forEach(t),VYe=r(a9," or "),IS=n(a9,"A",{href:!0});var PVr=s(IS);XYe=r(PVr,"FNetTokenizerFast"),PVr.forEach(t),zYe=r(a9," (FNet model)"),a9.forEach(t),QYe=i(C),th=n(C,"LI",{});var fCe=s(th);Qee=n(fCe,"STRONG",{});var $Vr=s(Qee);WYe=r($Vr,"fsmt"),$Vr.forEach(t),HYe=r(fCe," \u2014 "),qS=n(fCe,"A",{href:!0});var IVr=s(qS);UYe=r(IVr,"FSMTTokenizer"),IVr.forEach(t),JYe=r(fCe," (FairSeq Machine-Translation model)"),fCe.forEach(t),YYe=i(C),ms=n(C,"LI",{});var n9=s(ms);Wee=n(n9,"STRONG",{});var qVr=s(Wee);KYe=r(qVr,"funnel"),qVr.forEach(t),ZYe=r(n9," \u2014 "),NS=n(n9,"A",{href:!0});var NVr=s(NS);eKe=r(NVr,"FunnelTokenizer"),NVr.forEach(t),oKe=r(n9," or "),jS=n(n9,"A",{href:!0});var jVr=s(jS);rKe=r(jVr,"FunnelTokenizerFast"),jVr.forEach(t),tKe=r(n9," (Funnel Transformer model)"),n9.forEach(t),aKe=i(C),fs=n(C,"LI",{});var s9=s(fs);Hee=n(s9,"STRONG",{});var DVr=s(Hee);nKe=r(DVr,"gpt2"),DVr.forEach(t),sKe=r(s9," \u2014 "),DS=n(s9,"A",{href:!0});var GVr=s(DS);lKe=r(GVr,"GPT2Tokenizer"),GVr.forEach(t),iKe=r(s9," or "),GS=n(s9,"A",{href:!0});var OVr=s(GS);dKe=r(OVr,"GPT2TokenizerFast"),OVr.forEach(t),cKe=r(s9," (OpenAI GPT-2 model)"),s9.forEach(t),mKe=i(C),gs=n(C,"LI",{});var l9=s(gs);Uee=n(l9,"STRONG",{});var VVr=s(Uee);fKe=r(VVr,"gpt_neo"),VVr.forEach(t),gKe=r(l9," \u2014 "),OS=n(l9,"A",{href:!0});var XVr=s(OS);hKe=r(XVr,"GPT2Tokenizer"),XVr.forEach(t),uKe=r(l9," or "),VS=n(l9,"A",{href:!0});var zVr=s(VS);pKe=r(zVr,"GPT2TokenizerFast"),zVr.forEach(t),_Ke=r(l9," (GPT Neo model)"),l9.forEach(t),bKe=i(C),hs=n(C,"LI",{});var i9=s(hs);Jee=n(i9,"STRONG",{});var QVr=s(Jee);vKe=r(QVr,"gptj"),QVr.forEach(t),FKe=r(i9," \u2014 "),XS=n(i9,"A",{href:!0});var WVr=s(XS);TKe=r(WVr,"GPT2Tokenizer"),WVr.forEach(t),MKe=r(i9," or "),zS=n(i9,"A",{href:!0});var HVr=s(zS);EKe=r(HVr,"GPT2TokenizerFast"),HVr.forEach(t),CKe=r(i9," (GPT-J model)"),i9.forEach(t),wKe=i(C),us=n(C,"LI",{});var d9=s(us);Yee=n(d9,"STRONG",{});var UVr=s(Yee);AKe=r(UVr,"herbert"),UVr.forEach(t),yKe=r(d9," \u2014 "),QS=n(d9,"A",{href:!0});var JVr=s(QS);LKe=r(JVr,"HerbertTokenizer"),JVr.forEach(t),xKe=r(d9," or "),WS=n(d9,"A",{href:!0});var YVr=s(WS);kKe=r(YVr,"HerbertTokenizerFast"),YVr.forEach(t),SKe=r(d9," (HerBERT model)"),d9.forEach(t),RKe=i(C),ah=n(C,"LI",{});var gCe=s(ah);Kee=n(gCe,"STRONG",{});var KVr=s(Kee);BKe=r(KVr,"hubert"),KVr.forEach(t),PKe=r(gCe," \u2014 "),HS=n(gCe,"A",{href:!0});var ZVr=s(HS);$Ke=r(ZVr,"Wav2Vec2CTCTokenizer"),ZVr.forEach(t),IKe=r(gCe," (Hubert model)"),gCe.forEach(t),qKe=i(C),ps=n(C,"LI",{});var c9=s(ps);Zee=n(c9,"STRONG",{});var eXr=s(Zee);NKe=r(eXr,"ibert"),eXr.forEach(t),jKe=r(c9," \u2014 "),US=n(c9,"A",{href:!0});var oXr=s(US);DKe=r(oXr,"RobertaTokenizer"),oXr.forEach(t),GKe=r(c9," or "),JS=n(c9,"A",{href:!0});var rXr=s(JS);OKe=r(rXr,"RobertaTokenizerFast"),rXr.forEach(t),VKe=r(c9," (I-BERT model)"),c9.forEach(t),XKe=i(C),_s=n(C,"LI",{});var m9=s(_s);eoe=n(m9,"STRONG",{});var tXr=s(eoe);zKe=r(tXr,"layoutlm"),tXr.forEach(t),QKe=r(m9," \u2014 "),YS=n(m9,"A",{href:!0});var aXr=s(YS);WKe=r(aXr,"LayoutLMTokenizer"),aXr.forEach(t),HKe=r(m9," or "),KS=n(m9,"A",{href:!0});var nXr=s(KS);UKe=r(nXr,"LayoutLMTokenizerFast"),nXr.forEach(t),JKe=r(m9," (LayoutLM model)"),m9.forEach(t),YKe=i(C),bs=n(C,"LI",{});var f9=s(bs);ooe=n(f9,"STRONG",{});var sXr=s(ooe);KKe=r(sXr,"layoutlmv2"),sXr.forEach(t),ZKe=r(f9," \u2014 "),ZS=n(f9,"A",{href:!0});var lXr=s(ZS);eZe=r(lXr,"LayoutLMv2Tokenizer"),lXr.forEach(t),oZe=r(f9," or "),eR=n(f9,"A",{href:!0});var iXr=s(eR);rZe=r(iXr,"LayoutLMv2TokenizerFast"),iXr.forEach(t),tZe=r(f9," (LayoutLMv2 model)"),f9.forEach(t),aZe=i(C),vs=n(C,"LI",{});var g9=s(vs);roe=n(g9,"STRONG",{});var dXr=s(roe);nZe=r(dXr,"layoutxlm"),dXr.forEach(t),sZe=r(g9," \u2014 "),oR=n(g9,"A",{href:!0});var cXr=s(oR);lZe=r(cXr,"LayoutXLMTokenizer"),cXr.forEach(t),iZe=r(g9," or "),rR=n(g9,"A",{href:!0});var mXr=s(rR);dZe=r(mXr,"LayoutXLMTokenizerFast"),mXr.forEach(t),cZe=r(g9," (LayoutXLM model)"),g9.forEach(t),mZe=i(C),Fs=n(C,"LI",{});var h9=s(Fs);toe=n(h9,"STRONG",{});var fXr=s(toe);fZe=r(fXr,"led"),fXr.forEach(t),gZe=r(h9," \u2014 "),tR=n(h9,"A",{href:!0});var gXr=s(tR);hZe=r(gXr,"LEDTokenizer"),gXr.forEach(t),uZe=r(h9," or "),aR=n(h9,"A",{href:!0});var hXr=s(aR);pZe=r(hXr,"LEDTokenizerFast"),hXr.forEach(t),_Ze=r(h9," (LED model)"),h9.forEach(t),bZe=i(C),Ts=n(C,"LI",{});var u9=s(Ts);aoe=n(u9,"STRONG",{});var uXr=s(aoe);vZe=r(uXr,"longformer"),uXr.forEach(t),FZe=r(u9," \u2014 "),nR=n(u9,"A",{href:!0});var pXr=s(nR);TZe=r(pXr,"LongformerTokenizer"),pXr.forEach(t),MZe=r(u9," or "),sR=n(u9,"A",{href:!0});var _Xr=s(sR);EZe=r(_Xr,"LongformerTokenizerFast"),_Xr.forEach(t),CZe=r(u9," (Longformer model)"),u9.forEach(t),wZe=i(C),nh=n(C,"LI",{});var hCe=s(nh);noe=n(hCe,"STRONG",{});var bXr=s(noe);AZe=r(bXr,"luke"),bXr.forEach(t),yZe=r(hCe," \u2014 "),lR=n(hCe,"A",{href:!0});var vXr=s(lR);LZe=r(vXr,"LukeTokenizer"),vXr.forEach(t),xZe=r(hCe," (LUKE model)"),hCe.forEach(t),kZe=i(C),Ms=n(C,"LI",{});var p9=s(Ms);soe=n(p9,"STRONG",{});var FXr=s(soe);SZe=r(FXr,"lxmert"),FXr.forEach(t),RZe=r(p9," \u2014 "),iR=n(p9,"A",{href:!0});var TXr=s(iR);BZe=r(TXr,"LxmertTokenizer"),TXr.forEach(t),PZe=r(p9," or "),dR=n(p9,"A",{href:!0});var MXr=s(dR);$Ze=r(MXr,"LxmertTokenizerFast"),MXr.forEach(t),IZe=r(p9," (LXMERT model)"),p9.forEach(t),qZe=i(C),sh=n(C,"LI",{});var uCe=s(sh);loe=n(uCe,"STRONG",{});var EXr=s(loe);NZe=r(EXr,"m2m_100"),EXr.forEach(t),jZe=r(uCe," \u2014 "),cR=n(uCe,"A",{href:!0});var CXr=s(cR);DZe=r(CXr,"M2M100Tokenizer"),CXr.forEach(t),GZe=r(uCe," (M2M100 model)"),uCe.forEach(t),OZe=i(C),lh=n(C,"LI",{});var pCe=s(lh);ioe=n(pCe,"STRONG",{});var wXr=s(ioe);VZe=r(wXr,"marian"),wXr.forEach(t),XZe=r(pCe," \u2014 "),mR=n(pCe,"A",{href:!0});var AXr=s(mR);zZe=r(AXr,"MarianTokenizer"),AXr.forEach(t),QZe=r(pCe," (Marian model)"),pCe.forEach(t),WZe=i(C),Es=n(C,"LI",{});var _9=s(Es);doe=n(_9,"STRONG",{});var yXr=s(doe);HZe=r(yXr,"mbart"),yXr.forEach(t),UZe=r(_9," \u2014 "),fR=n(_9,"A",{href:!0});var LXr=s(fR);JZe=r(LXr,"MBartTokenizer"),LXr.forEach(t),YZe=r(_9," or "),gR=n(_9,"A",{href:!0});var xXr=s(gR);KZe=r(xXr,"MBartTokenizerFast"),xXr.forEach(t),ZZe=r(_9," (mBART model)"),_9.forEach(t),eeo=i(C),Cs=n(C,"LI",{});var b9=s(Cs);coe=n(b9,"STRONG",{});var kXr=s(coe);oeo=r(kXr,"mbart50"),kXr.forEach(t),reo=r(b9," \u2014 "),hR=n(b9,"A",{href:!0});var SXr=s(hR);teo=r(SXr,"MBart50Tokenizer"),SXr.forEach(t),aeo=r(b9," or "),uR=n(b9,"A",{href:!0});var RXr=s(uR);neo=r(RXr,"MBart50TokenizerFast"),RXr.forEach(t),seo=r(b9," (mBART-50 model)"),b9.forEach(t),leo=i(C),ws=n(C,"LI",{});var v9=s(ws);moe=n(v9,"STRONG",{});var BXr=s(moe);ieo=r(BXr,"megatron-bert"),BXr.forEach(t),deo=r(v9," \u2014 "),pR=n(v9,"A",{href:!0});var PXr=s(pR);ceo=r(PXr,"BertTokenizer"),PXr.forEach(t),meo=r(v9," or "),_R=n(v9,"A",{href:!0});var $Xr=s(_R);feo=r($Xr,"BertTokenizerFast"),$Xr.forEach(t),geo=r(v9," (MegatronBert model)"),v9.forEach(t),heo=i(C),ih=n(C,"LI",{});var _Ce=s(ih);foe=n(_Ce,"STRONG",{});var IXr=s(foe);ueo=r(IXr,"mluke"),IXr.forEach(t),peo=r(_Ce," \u2014 "),bR=n(_Ce,"A",{href:!0});var qXr=s(bR);_eo=r(qXr,"MLukeTokenizer"),qXr.forEach(t),beo=r(_Ce," (mLUKE model)"),_Ce.forEach(t),veo=i(C),As=n(C,"LI",{});var F9=s(As);goe=n(F9,"STRONG",{});var NXr=s(goe);Feo=r(NXr,"mobilebert"),NXr.forEach(t),Teo=r(F9," \u2014 "),vR=n(F9,"A",{href:!0});var jXr=s(vR);Meo=r(jXr,"MobileBertTokenizer"),jXr.forEach(t),Eeo=r(F9," or "),FR=n(F9,"A",{href:!0});var DXr=s(FR);Ceo=r(DXr,"MobileBertTokenizerFast"),DXr.forEach(t),weo=r(F9," (MobileBERT model)"),F9.forEach(t),Aeo=i(C),ys=n(C,"LI",{});var T9=s(ys);hoe=n(T9,"STRONG",{});var GXr=s(hoe);yeo=r(GXr,"mpnet"),GXr.forEach(t),Leo=r(T9," \u2014 "),TR=n(T9,"A",{href:!0});var OXr=s(TR);xeo=r(OXr,"MPNetTokenizer"),OXr.forEach(t),keo=r(T9," or "),MR=n(T9,"A",{href:!0});var VXr=s(MR);Seo=r(VXr,"MPNetTokenizerFast"),VXr.forEach(t),Reo=r(T9," (MPNet model)"),T9.forEach(t),Beo=i(C),Ls=n(C,"LI",{});var M9=s(Ls);uoe=n(M9,"STRONG",{});var XXr=s(uoe);Peo=r(XXr,"mt5"),XXr.forEach(t),$eo=r(M9," \u2014 "),ER=n(M9,"A",{href:!0});var zXr=s(ER);Ieo=r(zXr,"MT5Tokenizer"),zXr.forEach(t),qeo=r(M9," or "),CR=n(M9,"A",{href:!0});var QXr=s(CR);Neo=r(QXr,"MT5TokenizerFast"),QXr.forEach(t),jeo=r(M9," (mT5 model)"),M9.forEach(t),Deo=i(C),xs=n(C,"LI",{});var E9=s(xs);poe=n(E9,"STRONG",{});var WXr=s(poe);Geo=r(WXr,"nystromformer"),WXr.forEach(t),Oeo=r(E9," \u2014 "),wR=n(E9,"A",{href:!0});var HXr=s(wR);Veo=r(HXr,"AlbertTokenizer"),HXr.forEach(t),Xeo=r(E9," or "),AR=n(E9,"A",{href:!0});var UXr=s(AR);zeo=r(UXr,"AlbertTokenizerFast"),UXr.forEach(t),Qeo=r(E9," (Nystromformer model)"),E9.forEach(t),Weo=i(C),ks=n(C,"LI",{});var C9=s(ks);_oe=n(C9,"STRONG",{});var JXr=s(_oe);Heo=r(JXr,"openai-gpt"),JXr.forEach(t),Ueo=r(C9," \u2014 "),yR=n(C9,"A",{href:!0});var YXr=s(yR);Jeo=r(YXr,"OpenAIGPTTokenizer"),YXr.forEach(t),Yeo=r(C9," or "),LR=n(C9,"A",{href:!0});var KXr=s(LR);Keo=r(KXr,"OpenAIGPTTokenizerFast"),KXr.forEach(t),Zeo=r(C9," (OpenAI GPT model)"),C9.forEach(t),eoo=i(C),Ss=n(C,"LI",{});var w9=s(Ss);boe=n(w9,"STRONG",{});var ZXr=s(boe);ooo=r(ZXr,"pegasus"),ZXr.forEach(t),roo=r(w9," \u2014 "),xR=n(w9,"A",{href:!0});var ezr=s(xR);too=r(ezr,"PegasusTokenizer"),ezr.forEach(t),aoo=r(w9," or "),kR=n(w9,"A",{href:!0});var ozr=s(kR);noo=r(ozr,"PegasusTokenizerFast"),ozr.forEach(t),soo=r(w9," (Pegasus model)"),w9.forEach(t),loo=i(C),dh=n(C,"LI",{});var bCe=s(dh);voe=n(bCe,"STRONG",{});var rzr=s(voe);ioo=r(rzr,"perceiver"),rzr.forEach(t),doo=r(bCe," \u2014 "),SR=n(bCe,"A",{href:!0});var tzr=s(SR);coo=r(tzr,"PerceiverTokenizer"),tzr.forEach(t),moo=r(bCe," (Perceiver model)"),bCe.forEach(t),foo=i(C),ch=n(C,"LI",{});var vCe=s(ch);Foe=n(vCe,"STRONG",{});var azr=s(Foe);goo=r(azr,"phobert"),azr.forEach(t),hoo=r(vCe," \u2014 "),RR=n(vCe,"A",{href:!0});var nzr=s(RR);uoo=r(nzr,"PhobertTokenizer"),nzr.forEach(t),poo=r(vCe," (PhoBERT model)"),vCe.forEach(t),_oo=i(C),mh=n(C,"LI",{});var FCe=s(mh);Toe=n(FCe,"STRONG",{});var szr=s(Toe);boo=r(szr,"plbart"),szr.forEach(t),voo=r(FCe," \u2014 "),BR=n(FCe,"A",{href:!0});var lzr=s(BR);Foo=r(lzr,"PLBartTokenizer"),lzr.forEach(t),Too=r(FCe," (PLBart model)"),FCe.forEach(t),Moo=i(C),fh=n(C,"LI",{});var TCe=s(fh);Moe=n(TCe,"STRONG",{});var izr=s(Moe);Eoo=r(izr,"prophetnet"),izr.forEach(t),Coo=r(TCe," \u2014 "),PR=n(TCe,"A",{href:!0});var dzr=s(PR);woo=r(dzr,"ProphetNetTokenizer"),dzr.forEach(t),Aoo=r(TCe," (ProphetNet model)"),TCe.forEach(t),yoo=i(C),Rs=n(C,"LI",{});var A9=s(Rs);Eoe=n(A9,"STRONG",{});var czr=s(Eoe);Loo=r(czr,"qdqbert"),czr.forEach(t),xoo=r(A9," \u2014 "),$R=n(A9,"A",{href:!0});var mzr=s($R);koo=r(mzr,"BertTokenizer"),mzr.forEach(t),Soo=r(A9," or "),IR=n(A9,"A",{href:!0});var fzr=s(IR);Roo=r(fzr,"BertTokenizerFast"),fzr.forEach(t),Boo=r(A9," (QDQBert model)"),A9.forEach(t),Poo=i(C),gh=n(C,"LI",{});var MCe=s(gh);Coe=n(MCe,"STRONG",{});var gzr=s(Coe);$oo=r(gzr,"rag"),gzr.forEach(t),Ioo=r(MCe," \u2014 "),qR=n(MCe,"A",{href:!0});var hzr=s(qR);qoo=r(hzr,"RagTokenizer"),hzr.forEach(t),Noo=r(MCe," (RAG model)"),MCe.forEach(t),joo=i(C),Bs=n(C,"LI",{});var y9=s(Bs);woe=n(y9,"STRONG",{});var uzr=s(woe);Doo=r(uzr,"realm"),uzr.forEach(t),Goo=r(y9," \u2014 "),NR=n(y9,"A",{href:!0});var pzr=s(NR);Ooo=r(pzr,"RealmTokenizer"),pzr.forEach(t),Voo=r(y9," or "),jR=n(y9,"A",{href:!0});var _zr=s(jR);Xoo=r(_zr,"RealmTokenizerFast"),_zr.forEach(t),zoo=r(y9," (Realm model)"),y9.forEach(t),Qoo=i(C),Ps=n(C,"LI",{});var L9=s(Ps);Aoe=n(L9,"STRONG",{});var bzr=s(Aoe);Woo=r(bzr,"reformer"),bzr.forEach(t),Hoo=r(L9," \u2014 "),DR=n(L9,"A",{href:!0});var vzr=s(DR);Uoo=r(vzr,"ReformerTokenizer"),vzr.forEach(t),Joo=r(L9," or "),GR=n(L9,"A",{href:!0});var Fzr=s(GR);Yoo=r(Fzr,"ReformerTokenizerFast"),Fzr.forEach(t),Koo=r(L9," (Reformer model)"),L9.forEach(t),Zoo=i(C),$s=n(C,"LI",{});var x9=s($s);yoe=n(x9,"STRONG",{});var Tzr=s(yoe);ero=r(Tzr,"rembert"),Tzr.forEach(t),oro=r(x9," \u2014 "),OR=n(x9,"A",{href:!0});var Mzr=s(OR);rro=r(Mzr,"RemBertTokenizer"),Mzr.forEach(t),tro=r(x9," or "),VR=n(x9,"A",{href:!0});var Ezr=s(VR);aro=r(Ezr,"RemBertTokenizerFast"),Ezr.forEach(t),nro=r(x9," (RemBERT model)"),x9.forEach(t),sro=i(C),Is=n(C,"LI",{});var k9=s(Is);Loe=n(k9,"STRONG",{});var Czr=s(Loe);lro=r(Czr,"retribert"),Czr.forEach(t),iro=r(k9," \u2014 "),XR=n(k9,"A",{href:!0});var wzr=s(XR);dro=r(wzr,"RetriBertTokenizer"),wzr.forEach(t),cro=r(k9," or "),zR=n(k9,"A",{href:!0});var Azr=s(zR);mro=r(Azr,"RetriBertTokenizerFast"),Azr.forEach(t),fro=r(k9," (RetriBERT model)"),k9.forEach(t),gro=i(C),qs=n(C,"LI",{});var S9=s(qs);xoe=n(S9,"STRONG",{});var yzr=s(xoe);hro=r(yzr,"roberta"),yzr.forEach(t),uro=r(S9," \u2014 "),QR=n(S9,"A",{href:!0});var Lzr=s(QR);pro=r(Lzr,"RobertaTokenizer"),Lzr.forEach(t),_ro=r(S9," or "),WR=n(S9,"A",{href:!0});var xzr=s(WR);bro=r(xzr,"RobertaTokenizerFast"),xzr.forEach(t),vro=r(S9," (RoBERTa model)"),S9.forEach(t),Fro=i(C),Ns=n(C,"LI",{});var R9=s(Ns);koe=n(R9,"STRONG",{});var kzr=s(koe);Tro=r(kzr,"roformer"),kzr.forEach(t),Mro=r(R9," \u2014 "),HR=n(R9,"A",{href:!0});var Szr=s(HR);Ero=r(Szr,"RoFormerTokenizer"),Szr.forEach(t),Cro=r(R9," or "),UR=n(R9,"A",{href:!0});var Rzr=s(UR);wro=r(Rzr,"RoFormerTokenizerFast"),Rzr.forEach(t),Aro=r(R9," (RoFormer model)"),R9.forEach(t),yro=i(C),hh=n(C,"LI",{});var ECe=s(hh);Soe=n(ECe,"STRONG",{});var Bzr=s(Soe);Lro=r(Bzr,"speech_to_text"),Bzr.forEach(t),xro=r(ECe," \u2014 "),JR=n(ECe,"A",{href:!0});var Pzr=s(JR);kro=r(Pzr,"Speech2TextTokenizer"),Pzr.forEach(t),Sro=r(ECe," (Speech2Text model)"),ECe.forEach(t),Rro=i(C),uh=n(C,"LI",{});var CCe=s(uh);Roe=n(CCe,"STRONG",{});var $zr=s(Roe);Bro=r($zr,"speech_to_text_2"),$zr.forEach(t),Pro=r(CCe," \u2014 "),YR=n(CCe,"A",{href:!0});var Izr=s(YR);$ro=r(Izr,"Speech2Text2Tokenizer"),Izr.forEach(t),Iro=r(CCe," (Speech2Text2 model)"),CCe.forEach(t),qro=i(C),js=n(C,"LI",{});var B9=s(js);Boe=n(B9,"STRONG",{});var qzr=s(Boe);Nro=r(qzr,"splinter"),qzr.forEach(t),jro=r(B9," \u2014 "),KR=n(B9,"A",{href:!0});var Nzr=s(KR);Dro=r(Nzr,"SplinterTokenizer"),Nzr.forEach(t),Gro=r(B9," or "),ZR=n(B9,"A",{href:!0});var jzr=s(ZR);Oro=r(jzr,"SplinterTokenizerFast"),jzr.forEach(t),Vro=r(B9," (Splinter model)"),B9.forEach(t),Xro=i(C),Ds=n(C,"LI",{});var P9=s(Ds);Poe=n(P9,"STRONG",{});var Dzr=s(Poe);zro=r(Dzr,"squeezebert"),Dzr.forEach(t),Qro=r(P9," \u2014 "),eB=n(P9,"A",{href:!0});var Gzr=s(eB);Wro=r(Gzr,"SqueezeBertTokenizer"),Gzr.forEach(t),Hro=r(P9," or "),oB=n(P9,"A",{href:!0});var Ozr=s(oB);Uro=r(Ozr,"SqueezeBertTokenizerFast"),Ozr.forEach(t),Jro=r(P9," (SqueezeBERT model)"),P9.forEach(t),Yro=i(C),Gs=n(C,"LI",{});var $9=s(Gs);$oe=n($9,"STRONG",{});var Vzr=s($oe);Kro=r(Vzr,"t5"),Vzr.forEach(t),Zro=r($9," \u2014 "),rB=n($9,"A",{href:!0});var Xzr=s(rB);eto=r(Xzr,"T5Tokenizer"),Xzr.forEach(t),oto=r($9," or "),tB=n($9,"A",{href:!0});var zzr=s(tB);rto=r(zzr,"T5TokenizerFast"),zzr.forEach(t),tto=r($9," (T5 model)"),$9.forEach(t),ato=i(C),ph=n(C,"LI",{});var wCe=s(ph);Ioe=n(wCe,"STRONG",{});var Qzr=s(Ioe);nto=r(Qzr,"tapas"),Qzr.forEach(t),sto=r(wCe," \u2014 "),aB=n(wCe,"A",{href:!0});var Wzr=s(aB);lto=r(Wzr,"TapasTokenizer"),Wzr.forEach(t),ito=r(wCe," (TAPAS model)"),wCe.forEach(t),dto=i(C),_h=n(C,"LI",{});var ACe=s(_h);qoe=n(ACe,"STRONG",{});var Hzr=s(qoe);cto=r(Hzr,"tapex"),Hzr.forEach(t),mto=r(ACe," \u2014 "),nB=n(ACe,"A",{href:!0});var Uzr=s(nB);fto=r(Uzr,"TapexTokenizer"),Uzr.forEach(t),gto=r(ACe," (TAPEX model)"),ACe.forEach(t),hto=i(C),bh=n(C,"LI",{});var yCe=s(bh);Noe=n(yCe,"STRONG",{});var Jzr=s(Noe);uto=r(Jzr,"transfo-xl"),Jzr.forEach(t),pto=r(yCe," \u2014 "),sB=n(yCe,"A",{href:!0});var Yzr=s(sB);_to=r(Yzr,"TransfoXLTokenizer"),Yzr.forEach(t),bto=r(yCe," (Transformer-XL model)"),yCe.forEach(t),vto=i(C),Os=n(C,"LI",{});var I9=s(Os);joe=n(I9,"STRONG",{});var Kzr=s(joe);Fto=r(Kzr,"visual_bert"),Kzr.forEach(t),Tto=r(I9," \u2014 "),lB=n(I9,"A",{href:!0});var Zzr=s(lB);Mto=r(Zzr,"BertTokenizer"),Zzr.forEach(t),Eto=r(I9," or "),iB=n(I9,"A",{href:!0});var eQr=s(iB);Cto=r(eQr,"BertTokenizerFast"),eQr.forEach(t),wto=r(I9," (VisualBert model)"),I9.forEach(t),Ato=i(C),vh=n(C,"LI",{});var LCe=s(vh);Doe=n(LCe,"STRONG",{});var oQr=s(Doe);yto=r(oQr,"wav2vec2"),oQr.forEach(t),Lto=r(LCe," \u2014 "),dB=n(LCe,"A",{href:!0});var rQr=s(dB);xto=r(rQr,"Wav2Vec2CTCTokenizer"),rQr.forEach(t),kto=r(LCe," (Wav2Vec2 model)"),LCe.forEach(t),Sto=i(C),Fh=n(C,"LI",{});var xCe=s(Fh);Goe=n(xCe,"STRONG",{});var tQr=s(Goe);Rto=r(tQr,"wav2vec2_phoneme"),tQr.forEach(t),Bto=r(xCe," \u2014 "),cB=n(xCe,"A",{href:!0});var aQr=s(cB);Pto=r(aQr,"Wav2Vec2PhonemeCTCTokenizer"),aQr.forEach(t),$to=r(xCe," (Wav2Vec2Phoneme model)"),xCe.forEach(t),Ito=i(C),Vs=n(C,"LI",{});var q9=s(Vs);Ooe=n(q9,"STRONG",{});var nQr=s(Ooe);qto=r(nQr,"xglm"),nQr.forEach(t),Nto=r(q9," \u2014 "),mB=n(q9,"A",{href:!0});var sQr=s(mB);jto=r(sQr,"XGLMTokenizer"),sQr.forEach(t),Dto=r(q9," or "),fB=n(q9,"A",{href:!0});var lQr=s(fB);Gto=r(lQr,"XGLMTokenizerFast"),lQr.forEach(t),Oto=r(q9," (XGLM model)"),q9.forEach(t),Vto=i(C),Th=n(C,"LI",{});var kCe=s(Th);Voe=n(kCe,"STRONG",{});var iQr=s(Voe);Xto=r(iQr,"xlm"),iQr.forEach(t),zto=r(kCe," \u2014 "),gB=n(kCe,"A",{href:!0});var dQr=s(gB);Qto=r(dQr,"XLMTokenizer"),dQr.forEach(t),Wto=r(kCe," (XLM model)"),kCe.forEach(t),Hto=i(C),Mh=n(C,"LI",{});var SCe=s(Mh);Xoe=n(SCe,"STRONG",{});var cQr=s(Xoe);Uto=r(cQr,"xlm-prophetnet"),cQr.forEach(t),Jto=r(SCe," \u2014 "),hB=n(SCe,"A",{href:!0});var mQr=s(hB);Yto=r(mQr,"XLMProphetNetTokenizer"),mQr.forEach(t),Kto=r(SCe," (XLMProphetNet model)"),SCe.forEach(t),Zto=i(C),Xs=n(C,"LI",{});var N9=s(Xs);zoe=n(N9,"STRONG",{});var fQr=s(zoe);eao=r(fQr,"xlm-roberta"),fQr.forEach(t),oao=r(N9," \u2014 "),uB=n(N9,"A",{href:!0});var gQr=s(uB);rao=r(gQr,"XLMRobertaTokenizer"),gQr.forEach(t),tao=r(N9," or "),pB=n(N9,"A",{href:!0});var hQr=s(pB);aao=r(hQr,"XLMRobertaTokenizerFast"),hQr.forEach(t),nao=r(N9," (XLM-RoBERTa model)"),N9.forEach(t),sao=i(C),zs=n(C,"LI",{});var j9=s(zs);Qoe=n(j9,"STRONG",{});var uQr=s(Qoe);lao=r(uQr,"xlm-roberta-xl"),uQr.forEach(t),iao=r(j9," \u2014 "),_B=n(j9,"A",{href:!0});var pQr=s(_B);dao=r(pQr,"RobertaTokenizer"),pQr.forEach(t),cao=r(j9," or "),bB=n(j9,"A",{href:!0});var _Qr=s(bB);mao=r(_Qr,"RobertaTokenizerFast"),_Qr.forEach(t),fao=r(j9," (XLM-RoBERTa-XL model)"),j9.forEach(t),gao=i(C),Qs=n(C,"LI",{});var D9=s(Qs);Woe=n(D9,"STRONG",{});var bQr=s(Woe);hao=r(bQr,"xlnet"),bQr.forEach(t),uao=r(D9," \u2014 "),vB=n(D9,"A",{href:!0});var vQr=s(vB);pao=r(vQr,"XLNetTokenizer"),vQr.forEach(t),_ao=r(D9," or "),FB=n(D9,"A",{href:!0});var FQr=s(FB);bao=r(FQr,"XLNetTokenizerFast"),FQr.forEach(t),vao=r(D9," (XLNet model)"),D9.forEach(t),Fao=i(C),Ws=n(C,"LI",{});var G9=s(Ws);Hoe=n(G9,"STRONG",{});var TQr=s(Hoe);Tao=r(TQr,"yoso"),TQr.forEach(t),Mao=r(G9," \u2014 "),TB=n(G9,"A",{href:!0});var MQr=s(TB);Eao=r(MQr,"AlbertTokenizer"),MQr.forEach(t),Cao=r(G9," or "),MB=n(G9,"A",{href:!0});var EQr=s(MB);wao=r(EQr,"AlbertTokenizerFast"),EQr.forEach(t),Aao=r(G9," (YOSO model)"),G9.forEach(t),C.forEach(t),yao=i(ha),Uoe=n(ha,"P",{});var CQr=s(Uoe);Lao=r(CQr,"Examples:"),CQr.forEach(t),xao=i(ha),f(dw.$$.fragment,ha),ha.forEach(t),kao=i(Ks),Eh=n(Ks,"DIV",{class:!0});var fIe=s(Eh);f(cw.$$.fragment,fIe),Sao=i(fIe),Joe=n(fIe,"P",{});var wQr=s(Joe);Rao=r(wQr,"Register a new tokenizer in this mapping."),wQr.forEach(t),fIe.forEach(t),Ks.forEach(t),iPe=i(c),rd=n(c,"H2",{class:!0});var gIe=s(rd);Ch=n(gIe,"A",{id:!0,class:!0,href:!0});var AQr=s(Ch);Yoe=n(AQr,"SPAN",{});var yQr=s(Yoe);f(mw.$$.fragment,yQr),yQr.forEach(t),AQr.forEach(t),Bao=i(gIe),Koe=n(gIe,"SPAN",{});var LQr=s(Koe);Pao=r(LQr,"AutoFeatureExtractor"),LQr.forEach(t),gIe.forEach(t),dPe=i(c),Ho=n(c,"DIV",{class:!0});var Zs=s(Ho);f(fw.$$.fragment,Zs),$ao=i(Zs),gw=n(Zs,"P",{});var hIe=s(gw);Iao=r(hIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),EB=n(hIe,"A",{href:!0});var xQr=s(EB);qao=r(xQr,"AutoFeatureExtractor.from_pretrained()"),xQr.forEach(t),Nao=r(hIe," class method."),hIe.forEach(t),jao=i(Zs),hw=n(Zs,"P",{});var uIe=s(hw);Dao=r(uIe,"This class cannot be instantiated directly using "),Zoe=n(uIe,"CODE",{});var kQr=s(Zoe);Gao=r(kQr,"__init__()"),kQr.forEach(t),Oao=r(uIe," (throws an error)."),uIe.forEach(t),Vao=i(Zs),Ie=n(Zs,"DIV",{class:!0});var Nt=s(Ie);f(uw.$$.fragment,Nt),Xao=i(Nt),ere=n(Nt,"P",{});var SQr=s(ere);zao=r(SQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SQr.forEach(t),Qao=i(Nt),Va=n(Nt,"P",{});var WC=s(Va);Wao=r(WC,"The feature extractor class to instantiate is selected based on the "),ore=n(WC,"CODE",{});var RQr=s(ore);Hao=r(RQr,"model_type"),RQr.forEach(t),Uao=r(WC,` property of the config object
(either passed as an argument or loaded from `),rre=n(WC,"CODE",{});var BQr=s(rre);Jao=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),Yao=r(WC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tre=n(WC,"CODE",{});var PQr=s(tre);Kao=r(PQr,"pretrained_model_name_or_path"),PQr.forEach(t),Zao=r(WC,":"),WC.forEach(t),eno=i(Nt),H=n(Nt,"UL",{});var J=s(H);wh=n(J,"LI",{});var RCe=s(wh);are=n(RCe,"STRONG",{});var $Qr=s(are);ono=r($Qr,"beit"),$Qr.forEach(t),rno=r(RCe," \u2014 "),CB=n(RCe,"A",{href:!0});var IQr=s(CB);tno=r(IQr,"BeitFeatureExtractor"),IQr.forEach(t),ano=r(RCe," (BEiT model)"),RCe.forEach(t),nno=i(J),Ah=n(J,"LI",{});var BCe=s(Ah);nre=n(BCe,"STRONG",{});var qQr=s(nre);sno=r(qQr,"clip"),qQr.forEach(t),lno=r(BCe," \u2014 "),wB=n(BCe,"A",{href:!0});var NQr=s(wB);ino=r(NQr,"CLIPFeatureExtractor"),NQr.forEach(t),dno=r(BCe," (CLIP model)"),BCe.forEach(t),cno=i(J),yh=n(J,"LI",{});var PCe=s(yh);sre=n(PCe,"STRONG",{});var jQr=s(sre);mno=r(jQr,"convnext"),jQr.forEach(t),fno=r(PCe," \u2014 "),AB=n(PCe,"A",{href:!0});var DQr=s(AB);gno=r(DQr,"ConvNextFeatureExtractor"),DQr.forEach(t),hno=r(PCe," (ConvNext model)"),PCe.forEach(t),uno=i(J),Lh=n(J,"LI",{});var $Ce=s(Lh);lre=n($Ce,"STRONG",{});var GQr=s(lre);pno=r(GQr,"data2vec-audio"),GQr.forEach(t),_no=r($Ce," \u2014 "),yB=n($Ce,"A",{href:!0});var OQr=s(yB);bno=r(OQr,"Wav2Vec2FeatureExtractor"),OQr.forEach(t),vno=r($Ce," (Data2VecAudio model)"),$Ce.forEach(t),Fno=i(J),xh=n(J,"LI",{});var ICe=s(xh);ire=n(ICe,"STRONG",{});var VQr=s(ire);Tno=r(VQr,"data2vec-vision"),VQr.forEach(t),Mno=r(ICe," \u2014 "),LB=n(ICe,"A",{href:!0});var XQr=s(LB);Eno=r(XQr,"BeitFeatureExtractor"),XQr.forEach(t),Cno=r(ICe," (Data2VecVision model)"),ICe.forEach(t),wno=i(J),kh=n(J,"LI",{});var qCe=s(kh);dre=n(qCe,"STRONG",{});var zQr=s(dre);Ano=r(zQr,"deit"),zQr.forEach(t),yno=r(qCe," \u2014 "),xB=n(qCe,"A",{href:!0});var QQr=s(xB);Lno=r(QQr,"DeiTFeatureExtractor"),QQr.forEach(t),xno=r(qCe," (DeiT model)"),qCe.forEach(t),kno=i(J),Sh=n(J,"LI",{});var NCe=s(Sh);cre=n(NCe,"STRONG",{});var WQr=s(cre);Sno=r(WQr,"detr"),WQr.forEach(t),Rno=r(NCe," \u2014 "),kB=n(NCe,"A",{href:!0});var HQr=s(kB);Bno=r(HQr,"DetrFeatureExtractor"),HQr.forEach(t),Pno=r(NCe," (DETR model)"),NCe.forEach(t),$no=i(J),Rh=n(J,"LI",{});var jCe=s(Rh);mre=n(jCe,"STRONG",{});var UQr=s(mre);Ino=r(UQr,"dpt"),UQr.forEach(t),qno=r(jCe," \u2014 "),SB=n(jCe,"A",{href:!0});var JQr=s(SB);Nno=r(JQr,"DPTFeatureExtractor"),JQr.forEach(t),jno=r(jCe," (DPT model)"),jCe.forEach(t),Dno=i(J),Bh=n(J,"LI",{});var DCe=s(Bh);fre=n(DCe,"STRONG",{});var YQr=s(fre);Gno=r(YQr,"glpn"),YQr.forEach(t),Ono=r(DCe," \u2014 "),RB=n(DCe,"A",{href:!0});var KQr=s(RB);Vno=r(KQr,"GLPNFeatureExtractor"),KQr.forEach(t),Xno=r(DCe," (GLPN model)"),DCe.forEach(t),zno=i(J),Ph=n(J,"LI",{});var GCe=s(Ph);gre=n(GCe,"STRONG",{});var ZQr=s(gre);Qno=r(ZQr,"hubert"),ZQr.forEach(t),Wno=r(GCe," \u2014 "),BB=n(GCe,"A",{href:!0});var eWr=s(BB);Hno=r(eWr,"Wav2Vec2FeatureExtractor"),eWr.forEach(t),Uno=r(GCe," (Hubert model)"),GCe.forEach(t),Jno=i(J),$h=n(J,"LI",{});var OCe=s($h);hre=n(OCe,"STRONG",{});var oWr=s(hre);Yno=r(oWr,"layoutlmv2"),oWr.forEach(t),Kno=r(OCe," \u2014 "),PB=n(OCe,"A",{href:!0});var rWr=s(PB);Zno=r(rWr,"LayoutLMv2FeatureExtractor"),rWr.forEach(t),eso=r(OCe," (LayoutLMv2 model)"),OCe.forEach(t),oso=i(J),Ih=n(J,"LI",{});var VCe=s(Ih);ure=n(VCe,"STRONG",{});var tWr=s(ure);rso=r(tWr,"maskformer"),tWr.forEach(t),tso=r(VCe," \u2014 "),$B=n(VCe,"A",{href:!0});var aWr=s($B);aso=r(aWr,"MaskFormerFeatureExtractor"),aWr.forEach(t),nso=r(VCe," (MaskFormer model)"),VCe.forEach(t),sso=i(J),qh=n(J,"LI",{});var XCe=s(qh);pre=n(XCe,"STRONG",{});var nWr=s(pre);lso=r(nWr,"perceiver"),nWr.forEach(t),iso=r(XCe," \u2014 "),IB=n(XCe,"A",{href:!0});var sWr=s(IB);dso=r(sWr,"PerceiverFeatureExtractor"),sWr.forEach(t),cso=r(XCe," (Perceiver model)"),XCe.forEach(t),mso=i(J),Nh=n(J,"LI",{});var zCe=s(Nh);_re=n(zCe,"STRONG",{});var lWr=s(_re);fso=r(lWr,"poolformer"),lWr.forEach(t),gso=r(zCe," \u2014 "),qB=n(zCe,"A",{href:!0});var iWr=s(qB);hso=r(iWr,"PoolFormerFeatureExtractor"),iWr.forEach(t),uso=r(zCe," (PoolFormer model)"),zCe.forEach(t),pso=i(J),jh=n(J,"LI",{});var QCe=s(jh);bre=n(QCe,"STRONG",{});var dWr=s(bre);_so=r(dWr,"regnet"),dWr.forEach(t),bso=r(QCe," \u2014 "),NB=n(QCe,"A",{href:!0});var cWr=s(NB);vso=r(cWr,"ConvNextFeatureExtractor"),cWr.forEach(t),Fso=r(QCe," (RegNet model)"),QCe.forEach(t),Tso=i(J),Dh=n(J,"LI",{});var WCe=s(Dh);vre=n(WCe,"STRONG",{});var mWr=s(vre);Mso=r(mWr,"resnet"),mWr.forEach(t),Eso=r(WCe," \u2014 "),jB=n(WCe,"A",{href:!0});var fWr=s(jB);Cso=r(fWr,"ConvNextFeatureExtractor"),fWr.forEach(t),wso=r(WCe," (ResNet model)"),WCe.forEach(t),Aso=i(J),Gh=n(J,"LI",{});var HCe=s(Gh);Fre=n(HCe,"STRONG",{});var gWr=s(Fre);yso=r(gWr,"segformer"),gWr.forEach(t),Lso=r(HCe," \u2014 "),DB=n(HCe,"A",{href:!0});var hWr=s(DB);xso=r(hWr,"SegformerFeatureExtractor"),hWr.forEach(t),kso=r(HCe," (SegFormer model)"),HCe.forEach(t),Sso=i(J),Oh=n(J,"LI",{});var UCe=s(Oh);Tre=n(UCe,"STRONG",{});var uWr=s(Tre);Rso=r(uWr,"speech_to_text"),uWr.forEach(t),Bso=r(UCe," \u2014 "),GB=n(UCe,"A",{href:!0});var pWr=s(GB);Pso=r(pWr,"Speech2TextFeatureExtractor"),pWr.forEach(t),$so=r(UCe," (Speech2Text model)"),UCe.forEach(t),Iso=i(J),Vh=n(J,"LI",{});var JCe=s(Vh);Mre=n(JCe,"STRONG",{});var _Wr=s(Mre);qso=r(_Wr,"swin"),_Wr.forEach(t),Nso=r(JCe," \u2014 "),OB=n(JCe,"A",{href:!0});var bWr=s(OB);jso=r(bWr,"ViTFeatureExtractor"),bWr.forEach(t),Dso=r(JCe," (Swin model)"),JCe.forEach(t),Gso=i(J),Xh=n(J,"LI",{});var YCe=s(Xh);Ere=n(YCe,"STRONG",{});var vWr=s(Ere);Oso=r(vWr,"van"),vWr.forEach(t),Vso=r(YCe," \u2014 "),VB=n(YCe,"A",{href:!0});var FWr=s(VB);Xso=r(FWr,"ConvNextFeatureExtractor"),FWr.forEach(t),zso=r(YCe," (VAN model)"),YCe.forEach(t),Qso=i(J),zh=n(J,"LI",{});var KCe=s(zh);Cre=n(KCe,"STRONG",{});var TWr=s(Cre);Wso=r(TWr,"vit"),TWr.forEach(t),Hso=r(KCe," \u2014 "),XB=n(KCe,"A",{href:!0});var MWr=s(XB);Uso=r(MWr,"ViTFeatureExtractor"),MWr.forEach(t),Jso=r(KCe," (ViT model)"),KCe.forEach(t),Yso=i(J),Qh=n(J,"LI",{});var ZCe=s(Qh);wre=n(ZCe,"STRONG",{});var EWr=s(wre);Kso=r(EWr,"vit_mae"),EWr.forEach(t),Zso=r(ZCe," \u2014 "),zB=n(ZCe,"A",{href:!0});var CWr=s(zB);elo=r(CWr,"ViTFeatureExtractor"),CWr.forEach(t),olo=r(ZCe," (ViTMAE model)"),ZCe.forEach(t),rlo=i(J),Wh=n(J,"LI",{});var e6e=s(Wh);Are=n(e6e,"STRONG",{});var wWr=s(Are);tlo=r(wWr,"wav2vec2"),wWr.forEach(t),alo=r(e6e," \u2014 "),QB=n(e6e,"A",{href:!0});var AWr=s(QB);nlo=r(AWr,"Wav2Vec2FeatureExtractor"),AWr.forEach(t),slo=r(e6e," (Wav2Vec2 model)"),e6e.forEach(t),J.forEach(t),llo=i(Nt),f(Hh.$$.fragment,Nt),ilo=i(Nt),yre=n(Nt,"P",{});var yWr=s(yre);dlo=r(yWr,"Examples:"),yWr.forEach(t),clo=i(Nt),f(pw.$$.fragment,Nt),Nt.forEach(t),mlo=i(Zs),Uh=n(Zs,"DIV",{class:!0});var pIe=s(Uh);f(_w.$$.fragment,pIe),flo=i(pIe),Lre=n(pIe,"P",{});var LWr=s(Lre);glo=r(LWr,"Register a new feature extractor for this class."),LWr.forEach(t),pIe.forEach(t),Zs.forEach(t),cPe=i(c),td=n(c,"H2",{class:!0});var _Ie=s(td);Jh=n(_Ie,"A",{id:!0,class:!0,href:!0});var xWr=s(Jh);xre=n(xWr,"SPAN",{});var kWr=s(xre);f(bw.$$.fragment,kWr),kWr.forEach(t),xWr.forEach(t),hlo=i(_Ie),kre=n(_Ie,"SPAN",{});var SWr=s(kre);ulo=r(SWr,"AutoProcessor"),SWr.forEach(t),_Ie.forEach(t),mPe=i(c),Uo=n(c,"DIV",{class:!0});var el=s(Uo);f(vw.$$.fragment,el),plo=i(el),Fw=n(el,"P",{});var bIe=s(Fw);_lo=r(bIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WB=n(bIe,"A",{href:!0});var RWr=s(WB);blo=r(RWr,"AutoProcessor.from_pretrained()"),RWr.forEach(t),vlo=r(bIe," class method."),bIe.forEach(t),Flo=i(el),Tw=n(el,"P",{});var vIe=s(Tw);Tlo=r(vIe,"This class cannot be instantiated directly using "),Sre=n(vIe,"CODE",{});var BWr=s(Sre);Mlo=r(BWr,"__init__()"),BWr.forEach(t),Elo=r(vIe," (throws an error)."),vIe.forEach(t),Clo=i(el),qe=n(el,"DIV",{class:!0});var jt=s(qe);f(Mw.$$.fragment,jt),wlo=i(jt),Rre=n(jt,"P",{});var PWr=s(Rre);Alo=r(PWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PWr.forEach(t),ylo=i(jt),ad=n(jt,"P",{});var uJ=s(ad);Llo=r(uJ,"The processor class to instantiate is selected based on the "),Bre=n(uJ,"CODE",{});var $Wr=s(Bre);xlo=r($Wr,"model_type"),$Wr.forEach(t),klo=r(uJ,` property of the config object (either
passed as an argument or loaded from `),Pre=n(uJ,"CODE",{});var IWr=s(Pre);Slo=r(IWr,"pretrained_model_name_or_path"),IWr.forEach(t),Rlo=r(uJ," if possible):"),uJ.forEach(t),Blo=i(jt),de=n(jt,"UL",{});var me=s(de);Yh=n(me,"LI",{});var o6e=s(Yh);$re=n(o6e,"STRONG",{});var qWr=s($re);Plo=r(qWr,"clip"),qWr.forEach(t),$lo=r(o6e," \u2014 "),HB=n(o6e,"A",{href:!0});var NWr=s(HB);Ilo=r(NWr,"CLIPProcessor"),NWr.forEach(t),qlo=r(o6e," (CLIP model)"),o6e.forEach(t),Nlo=i(me),Kh=n(me,"LI",{});var r6e=s(Kh);Ire=n(r6e,"STRONG",{});var jWr=s(Ire);jlo=r(jWr,"layoutlmv2"),jWr.forEach(t),Dlo=r(r6e," \u2014 "),UB=n(r6e,"A",{href:!0});var DWr=s(UB);Glo=r(DWr,"LayoutLMv2Processor"),DWr.forEach(t),Olo=r(r6e," (LayoutLMv2 model)"),r6e.forEach(t),Vlo=i(me),Zh=n(me,"LI",{});var t6e=s(Zh);qre=n(t6e,"STRONG",{});var GWr=s(qre);Xlo=r(GWr,"layoutxlm"),GWr.forEach(t),zlo=r(t6e," \u2014 "),JB=n(t6e,"A",{href:!0});var OWr=s(JB);Qlo=r(OWr,"LayoutXLMProcessor"),OWr.forEach(t),Wlo=r(t6e," (LayoutXLM model)"),t6e.forEach(t),Hlo=i(me),eu=n(me,"LI",{});var a6e=s(eu);Nre=n(a6e,"STRONG",{});var VWr=s(Nre);Ulo=r(VWr,"sew"),VWr.forEach(t),Jlo=r(a6e," \u2014 "),YB=n(a6e,"A",{href:!0});var XWr=s(YB);Ylo=r(XWr,"Wav2Vec2Processor"),XWr.forEach(t),Klo=r(a6e," (SEW model)"),a6e.forEach(t),Zlo=i(me),ou=n(me,"LI",{});var n6e=s(ou);jre=n(n6e,"STRONG",{});var zWr=s(jre);eio=r(zWr,"sew-d"),zWr.forEach(t),oio=r(n6e," \u2014 "),KB=n(n6e,"A",{href:!0});var QWr=s(KB);rio=r(QWr,"Wav2Vec2Processor"),QWr.forEach(t),tio=r(n6e," (SEW-D model)"),n6e.forEach(t),aio=i(me),ru=n(me,"LI",{});var s6e=s(ru);Dre=n(s6e,"STRONG",{});var WWr=s(Dre);nio=r(WWr,"speech_to_text"),WWr.forEach(t),sio=r(s6e," \u2014 "),ZB=n(s6e,"A",{href:!0});var HWr=s(ZB);lio=r(HWr,"Speech2TextProcessor"),HWr.forEach(t),iio=r(s6e," (Speech2Text model)"),s6e.forEach(t),dio=i(me),tu=n(me,"LI",{});var l6e=s(tu);Gre=n(l6e,"STRONG",{});var UWr=s(Gre);cio=r(UWr,"speech_to_text_2"),UWr.forEach(t),mio=r(l6e," \u2014 "),eP=n(l6e,"A",{href:!0});var JWr=s(eP);fio=r(JWr,"Speech2Text2Processor"),JWr.forEach(t),gio=r(l6e," (Speech2Text2 model)"),l6e.forEach(t),hio=i(me),au=n(me,"LI",{});var i6e=s(au);Ore=n(i6e,"STRONG",{});var YWr=s(Ore);uio=r(YWr,"trocr"),YWr.forEach(t),pio=r(i6e," \u2014 "),oP=n(i6e,"A",{href:!0});var KWr=s(oP);_io=r(KWr,"TrOCRProcessor"),KWr.forEach(t),bio=r(i6e," (TrOCR model)"),i6e.forEach(t),vio=i(me),nu=n(me,"LI",{});var d6e=s(nu);Vre=n(d6e,"STRONG",{});var ZWr=s(Vre);Fio=r(ZWr,"unispeech"),ZWr.forEach(t),Tio=r(d6e," \u2014 "),rP=n(d6e,"A",{href:!0});var eHr=s(rP);Mio=r(eHr,"Wav2Vec2Processor"),eHr.forEach(t),Eio=r(d6e," (UniSpeech model)"),d6e.forEach(t),Cio=i(me),su=n(me,"LI",{});var c6e=s(su);Xre=n(c6e,"STRONG",{});var oHr=s(Xre);wio=r(oHr,"unispeech-sat"),oHr.forEach(t),Aio=r(c6e," \u2014 "),tP=n(c6e,"A",{href:!0});var rHr=s(tP);yio=r(rHr,"Wav2Vec2Processor"),rHr.forEach(t),Lio=r(c6e," (UniSpeechSat model)"),c6e.forEach(t),xio=i(me),lu=n(me,"LI",{});var m6e=s(lu);zre=n(m6e,"STRONG",{});var tHr=s(zre);kio=r(tHr,"vilt"),tHr.forEach(t),Sio=r(m6e," \u2014 "),aP=n(m6e,"A",{href:!0});var aHr=s(aP);Rio=r(aHr,"ViltProcessor"),aHr.forEach(t),Bio=r(m6e," (ViLT model)"),m6e.forEach(t),Pio=i(me),iu=n(me,"LI",{});var f6e=s(iu);Qre=n(f6e,"STRONG",{});var nHr=s(Qre);$io=r(nHr,"vision-text-dual-encoder"),nHr.forEach(t),Iio=r(f6e," \u2014 "),nP=n(f6e,"A",{href:!0});var sHr=s(nP);qio=r(sHr,"VisionTextDualEncoderProcessor"),sHr.forEach(t),Nio=r(f6e," (VisionTextDualEncoder model)"),f6e.forEach(t),jio=i(me),du=n(me,"LI",{});var g6e=s(du);Wre=n(g6e,"STRONG",{});var lHr=s(Wre);Dio=r(lHr,"wav2vec2"),lHr.forEach(t),Gio=r(g6e," \u2014 "),sP=n(g6e,"A",{href:!0});var iHr=s(sP);Oio=r(iHr,"Wav2Vec2Processor"),iHr.forEach(t),Vio=r(g6e," (Wav2Vec2 model)"),g6e.forEach(t),Xio=i(me),cu=n(me,"LI",{});var h6e=s(cu);Hre=n(h6e,"STRONG",{});var dHr=s(Hre);zio=r(dHr,"wavlm"),dHr.forEach(t),Qio=r(h6e," \u2014 "),lP=n(h6e,"A",{href:!0});var cHr=s(lP);Wio=r(cHr,"Wav2Vec2Processor"),cHr.forEach(t),Hio=r(h6e," (WavLM model)"),h6e.forEach(t),me.forEach(t),Uio=i(jt),f(mu.$$.fragment,jt),Jio=i(jt),Ure=n(jt,"P",{});var mHr=s(Ure);Yio=r(mHr,"Examples:"),mHr.forEach(t),Kio=i(jt),f(Ew.$$.fragment,jt),jt.forEach(t),Zio=i(el),fu=n(el,"DIV",{class:!0});var FIe=s(fu);f(Cw.$$.fragment,FIe),edo=i(FIe),Jre=n(FIe,"P",{});var fHr=s(Jre);odo=r(fHr,"Register a new processor for this class."),fHr.forEach(t),FIe.forEach(t),el.forEach(t),fPe=i(c),nd=n(c,"H2",{class:!0});var TIe=s(nd);gu=n(TIe,"A",{id:!0,class:!0,href:!0});var gHr=s(gu);Yre=n(gHr,"SPAN",{});var hHr=s(Yre);f(ww.$$.fragment,hHr),hHr.forEach(t),gHr.forEach(t),rdo=i(TIe),Kre=n(TIe,"SPAN",{});var uHr=s(Kre);tdo=r(uHr,"AutoModel"),uHr.forEach(t),TIe.forEach(t),gPe=i(c),Jo=n(c,"DIV",{class:!0});var ol=s(Jo);f(Aw.$$.fragment,ol),ado=i(ol),sd=n(ol,"P",{});var pJ=s(sd);ndo=r(pJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iP=n(pJ,"A",{href:!0});var pHr=s(iP);sdo=r(pHr,"from_pretrained()"),pHr.forEach(t),ldo=r(pJ," class method or the "),dP=n(pJ,"A",{href:!0});var _Hr=s(dP);ido=r(_Hr,"from_config()"),_Hr.forEach(t),ddo=r(pJ,` class
method.`),pJ.forEach(t),cdo=i(ol),yw=n(ol,"P",{});var MIe=s(yw);mdo=r(MIe,"This class cannot be instantiated directly using "),Zre=n(MIe,"CODE",{});var bHr=s(Zre);fdo=r(bHr,"__init__()"),bHr.forEach(t),gdo=r(MIe," (throws an error)."),MIe.forEach(t),hdo=i(ol),Xr=n(ol,"DIV",{class:!0});var rl=s(Xr);f(Lw.$$.fragment,rl),udo=i(rl),ete=n(rl,"P",{});var vHr=s(ete);pdo=r(vHr,"Instantiates one of the base model classes of the library from a configuration."),vHr.forEach(t),_do=i(rl),ld=n(rl,"P",{});var _J=s(ld);bdo=r(_J,`Note:
Loading a model from its configuration file does `),ote=n(_J,"STRONG",{});var FHr=s(ote);vdo=r(FHr,"not"),FHr.forEach(t),Fdo=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),cP=n(_J,"A",{href:!0});var THr=s(cP);Tdo=r(THr,"from_pretrained()"),THr.forEach(t),Mdo=r(_J," to load the model weights."),_J.forEach(t),Edo=i(rl),rte=n(rl,"P",{});var MHr=s(rte);Cdo=r(MHr,"Examples:"),MHr.forEach(t),wdo=i(rl),f(xw.$$.fragment,rl),rl.forEach(t),Ado=i(ol),Ne=n(ol,"DIV",{class:!0});var Dt=s(Ne);f(kw.$$.fragment,Dt),ydo=i(Dt),tte=n(Dt,"P",{});var EHr=s(tte);Ldo=r(EHr,"Instantiate one of the base model classes of the library from a pretrained model."),EHr.forEach(t),xdo=i(Dt),Xa=n(Dt,"P",{});var HC=s(Xa);kdo=r(HC,"The model class to instantiate is selected based on the "),ate=n(HC,"CODE",{});var CHr=s(ate);Sdo=r(CHr,"model_type"),CHr.forEach(t),Rdo=r(HC,` property of the config object (either
passed as an argument or loaded from `),nte=n(HC,"CODE",{});var wHr=s(nte);Bdo=r(wHr,"pretrained_model_name_or_path"),wHr.forEach(t),Pdo=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ste=n(HC,"CODE",{});var AHr=s(ste);$do=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),Ido=r(HC,":"),HC.forEach(t),qdo=i(Dt),T=n(Dt,"UL",{});var M=s(T);hu=n(M,"LI",{});var u6e=s(hu);lte=n(u6e,"STRONG",{});var yHr=s(lte);Ndo=r(yHr,"albert"),yHr.forEach(t),jdo=r(u6e," \u2014 "),mP=n(u6e,"A",{href:!0});var LHr=s(mP);Ddo=r(LHr,"AlbertModel"),LHr.forEach(t),Gdo=r(u6e," (ALBERT model)"),u6e.forEach(t),Odo=i(M),uu=n(M,"LI",{});var p6e=s(uu);ite=n(p6e,"STRONG",{});var xHr=s(ite);Vdo=r(xHr,"bart"),xHr.forEach(t),Xdo=r(p6e," \u2014 "),fP=n(p6e,"A",{href:!0});var kHr=s(fP);zdo=r(kHr,"BartModel"),kHr.forEach(t),Qdo=r(p6e," (BART model)"),p6e.forEach(t),Wdo=i(M),pu=n(M,"LI",{});var _6e=s(pu);dte=n(_6e,"STRONG",{});var SHr=s(dte);Hdo=r(SHr,"beit"),SHr.forEach(t),Udo=r(_6e," \u2014 "),gP=n(_6e,"A",{href:!0});var RHr=s(gP);Jdo=r(RHr,"BeitModel"),RHr.forEach(t),Ydo=r(_6e," (BEiT model)"),_6e.forEach(t),Kdo=i(M),_u=n(M,"LI",{});var b6e=s(_u);cte=n(b6e,"STRONG",{});var BHr=s(cte);Zdo=r(BHr,"bert"),BHr.forEach(t),eco=r(b6e," \u2014 "),hP=n(b6e,"A",{href:!0});var PHr=s(hP);oco=r(PHr,"BertModel"),PHr.forEach(t),rco=r(b6e," (BERT model)"),b6e.forEach(t),tco=i(M),bu=n(M,"LI",{});var v6e=s(bu);mte=n(v6e,"STRONG",{});var $Hr=s(mte);aco=r($Hr,"bert-generation"),$Hr.forEach(t),nco=r(v6e," \u2014 "),uP=n(v6e,"A",{href:!0});var IHr=s(uP);sco=r(IHr,"BertGenerationEncoder"),IHr.forEach(t),lco=r(v6e," (Bert Generation model)"),v6e.forEach(t),ico=i(M),vu=n(M,"LI",{});var F6e=s(vu);fte=n(F6e,"STRONG",{});var qHr=s(fte);dco=r(qHr,"big_bird"),qHr.forEach(t),cco=r(F6e," \u2014 "),pP=n(F6e,"A",{href:!0});var NHr=s(pP);mco=r(NHr,"BigBirdModel"),NHr.forEach(t),fco=r(F6e," (BigBird model)"),F6e.forEach(t),gco=i(M),Fu=n(M,"LI",{});var T6e=s(Fu);gte=n(T6e,"STRONG",{});var jHr=s(gte);hco=r(jHr,"bigbird_pegasus"),jHr.forEach(t),uco=r(T6e," \u2014 "),_P=n(T6e,"A",{href:!0});var DHr=s(_P);pco=r(DHr,"BigBirdPegasusModel"),DHr.forEach(t),_co=r(T6e," (BigBirdPegasus model)"),T6e.forEach(t),bco=i(M),Tu=n(M,"LI",{});var M6e=s(Tu);hte=n(M6e,"STRONG",{});var GHr=s(hte);vco=r(GHr,"blenderbot"),GHr.forEach(t),Fco=r(M6e," \u2014 "),bP=n(M6e,"A",{href:!0});var OHr=s(bP);Tco=r(OHr,"BlenderbotModel"),OHr.forEach(t),Mco=r(M6e," (Blenderbot model)"),M6e.forEach(t),Eco=i(M),Mu=n(M,"LI",{});var E6e=s(Mu);ute=n(E6e,"STRONG",{});var VHr=s(ute);Cco=r(VHr,"blenderbot-small"),VHr.forEach(t),wco=r(E6e," \u2014 "),vP=n(E6e,"A",{href:!0});var XHr=s(vP);Aco=r(XHr,"BlenderbotSmallModel"),XHr.forEach(t),yco=r(E6e," (BlenderbotSmall model)"),E6e.forEach(t),Lco=i(M),Eu=n(M,"LI",{});var C6e=s(Eu);pte=n(C6e,"STRONG",{});var zHr=s(pte);xco=r(zHr,"camembert"),zHr.forEach(t),kco=r(C6e," \u2014 "),FP=n(C6e,"A",{href:!0});var QHr=s(FP);Sco=r(QHr,"CamembertModel"),QHr.forEach(t),Rco=r(C6e," (CamemBERT model)"),C6e.forEach(t),Bco=i(M),Cu=n(M,"LI",{});var w6e=s(Cu);_te=n(w6e,"STRONG",{});var WHr=s(_te);Pco=r(WHr,"canine"),WHr.forEach(t),$co=r(w6e," \u2014 "),TP=n(w6e,"A",{href:!0});var HHr=s(TP);Ico=r(HHr,"CanineModel"),HHr.forEach(t),qco=r(w6e," (Canine model)"),w6e.forEach(t),Nco=i(M),wu=n(M,"LI",{});var A6e=s(wu);bte=n(A6e,"STRONG",{});var UHr=s(bte);jco=r(UHr,"clip"),UHr.forEach(t),Dco=r(A6e," \u2014 "),MP=n(A6e,"A",{href:!0});var JHr=s(MP);Gco=r(JHr,"CLIPModel"),JHr.forEach(t),Oco=r(A6e," (CLIP model)"),A6e.forEach(t),Vco=i(M),Au=n(M,"LI",{});var y6e=s(Au);vte=n(y6e,"STRONG",{});var YHr=s(vte);Xco=r(YHr,"convbert"),YHr.forEach(t),zco=r(y6e," \u2014 "),EP=n(y6e,"A",{href:!0});var KHr=s(EP);Qco=r(KHr,"ConvBertModel"),KHr.forEach(t),Wco=r(y6e," (ConvBERT model)"),y6e.forEach(t),Hco=i(M),yu=n(M,"LI",{});var L6e=s(yu);Fte=n(L6e,"STRONG",{});var ZHr=s(Fte);Uco=r(ZHr,"convnext"),ZHr.forEach(t),Jco=r(L6e," \u2014 "),CP=n(L6e,"A",{href:!0});var eUr=s(CP);Yco=r(eUr,"ConvNextModel"),eUr.forEach(t),Kco=r(L6e," (ConvNext model)"),L6e.forEach(t),Zco=i(M),Lu=n(M,"LI",{});var x6e=s(Lu);Tte=n(x6e,"STRONG",{});var oUr=s(Tte);emo=r(oUr,"ctrl"),oUr.forEach(t),omo=r(x6e," \u2014 "),wP=n(x6e,"A",{href:!0});var rUr=s(wP);rmo=r(rUr,"CTRLModel"),rUr.forEach(t),tmo=r(x6e," (CTRL model)"),x6e.forEach(t),amo=i(M),xu=n(M,"LI",{});var k6e=s(xu);Mte=n(k6e,"STRONG",{});var tUr=s(Mte);nmo=r(tUr,"data2vec-audio"),tUr.forEach(t),smo=r(k6e," \u2014 "),AP=n(k6e,"A",{href:!0});var aUr=s(AP);lmo=r(aUr,"Data2VecAudioModel"),aUr.forEach(t),imo=r(k6e," (Data2VecAudio model)"),k6e.forEach(t),dmo=i(M),ku=n(M,"LI",{});var S6e=s(ku);Ete=n(S6e,"STRONG",{});var nUr=s(Ete);cmo=r(nUr,"data2vec-text"),nUr.forEach(t),mmo=r(S6e," \u2014 "),yP=n(S6e,"A",{href:!0});var sUr=s(yP);fmo=r(sUr,"Data2VecTextModel"),sUr.forEach(t),gmo=r(S6e," (Data2VecText model)"),S6e.forEach(t),hmo=i(M),Su=n(M,"LI",{});var R6e=s(Su);Cte=n(R6e,"STRONG",{});var lUr=s(Cte);umo=r(lUr,"data2vec-vision"),lUr.forEach(t),pmo=r(R6e," \u2014 "),LP=n(R6e,"A",{href:!0});var iUr=s(LP);_mo=r(iUr,"Data2VecVisionModel"),iUr.forEach(t),bmo=r(R6e," (Data2VecVision model)"),R6e.forEach(t),vmo=i(M),Ru=n(M,"LI",{});var B6e=s(Ru);wte=n(B6e,"STRONG",{});var dUr=s(wte);Fmo=r(dUr,"deberta"),dUr.forEach(t),Tmo=r(B6e," \u2014 "),xP=n(B6e,"A",{href:!0});var cUr=s(xP);Mmo=r(cUr,"DebertaModel"),cUr.forEach(t),Emo=r(B6e," (DeBERTa model)"),B6e.forEach(t),Cmo=i(M),Bu=n(M,"LI",{});var P6e=s(Bu);Ate=n(P6e,"STRONG",{});var mUr=s(Ate);wmo=r(mUr,"deberta-v2"),mUr.forEach(t),Amo=r(P6e," \u2014 "),kP=n(P6e,"A",{href:!0});var fUr=s(kP);ymo=r(fUr,"DebertaV2Model"),fUr.forEach(t),Lmo=r(P6e," (DeBERTa-v2 model)"),P6e.forEach(t),xmo=i(M),Pu=n(M,"LI",{});var $6e=s(Pu);yte=n($6e,"STRONG",{});var gUr=s(yte);kmo=r(gUr,"decision_transformer"),gUr.forEach(t),Smo=r($6e," \u2014 "),SP=n($6e,"A",{href:!0});var hUr=s(SP);Rmo=r(hUr,"DecisionTransformerModel"),hUr.forEach(t),Bmo=r($6e," (Decision Transformer model)"),$6e.forEach(t),Pmo=i(M),$u=n(M,"LI",{});var I6e=s($u);Lte=n(I6e,"STRONG",{});var uUr=s(Lte);$mo=r(uUr,"deit"),uUr.forEach(t),Imo=r(I6e," \u2014 "),RP=n(I6e,"A",{href:!0});var pUr=s(RP);qmo=r(pUr,"DeiTModel"),pUr.forEach(t),Nmo=r(I6e," (DeiT model)"),I6e.forEach(t),jmo=i(M),Iu=n(M,"LI",{});var q6e=s(Iu);xte=n(q6e,"STRONG",{});var _Ur=s(xte);Dmo=r(_Ur,"detr"),_Ur.forEach(t),Gmo=r(q6e," \u2014 "),BP=n(q6e,"A",{href:!0});var bUr=s(BP);Omo=r(bUr,"DetrModel"),bUr.forEach(t),Vmo=r(q6e," (DETR model)"),q6e.forEach(t),Xmo=i(M),qu=n(M,"LI",{});var N6e=s(qu);kte=n(N6e,"STRONG",{});var vUr=s(kte);zmo=r(vUr,"distilbert"),vUr.forEach(t),Qmo=r(N6e," \u2014 "),PP=n(N6e,"A",{href:!0});var FUr=s(PP);Wmo=r(FUr,"DistilBertModel"),FUr.forEach(t),Hmo=r(N6e," (DistilBERT model)"),N6e.forEach(t),Umo=i(M),Nu=n(M,"LI",{});var j6e=s(Nu);Ste=n(j6e,"STRONG",{});var TUr=s(Ste);Jmo=r(TUr,"dpr"),TUr.forEach(t),Ymo=r(j6e," \u2014 "),$P=n(j6e,"A",{href:!0});var MUr=s($P);Kmo=r(MUr,"DPRQuestionEncoder"),MUr.forEach(t),Zmo=r(j6e," (DPR model)"),j6e.forEach(t),efo=i(M),ju=n(M,"LI",{});var D6e=s(ju);Rte=n(D6e,"STRONG",{});var EUr=s(Rte);ofo=r(EUr,"dpt"),EUr.forEach(t),rfo=r(D6e," \u2014 "),IP=n(D6e,"A",{href:!0});var CUr=s(IP);tfo=r(CUr,"DPTModel"),CUr.forEach(t),afo=r(D6e," (DPT model)"),D6e.forEach(t),nfo=i(M),Du=n(M,"LI",{});var G6e=s(Du);Bte=n(G6e,"STRONG",{});var wUr=s(Bte);sfo=r(wUr,"electra"),wUr.forEach(t),lfo=r(G6e," \u2014 "),qP=n(G6e,"A",{href:!0});var AUr=s(qP);ifo=r(AUr,"ElectraModel"),AUr.forEach(t),dfo=r(G6e," (ELECTRA model)"),G6e.forEach(t),cfo=i(M),Gu=n(M,"LI",{});var O6e=s(Gu);Pte=n(O6e,"STRONG",{});var yUr=s(Pte);mfo=r(yUr,"flaubert"),yUr.forEach(t),ffo=r(O6e," \u2014 "),NP=n(O6e,"A",{href:!0});var LUr=s(NP);gfo=r(LUr,"FlaubertModel"),LUr.forEach(t),hfo=r(O6e," (FlauBERT model)"),O6e.forEach(t),ufo=i(M),Ou=n(M,"LI",{});var V6e=s(Ou);$te=n(V6e,"STRONG",{});var xUr=s($te);pfo=r(xUr,"fnet"),xUr.forEach(t),_fo=r(V6e," \u2014 "),jP=n(V6e,"A",{href:!0});var kUr=s(jP);bfo=r(kUr,"FNetModel"),kUr.forEach(t),vfo=r(V6e," (FNet model)"),V6e.forEach(t),Ffo=i(M),Vu=n(M,"LI",{});var X6e=s(Vu);Ite=n(X6e,"STRONG",{});var SUr=s(Ite);Tfo=r(SUr,"fsmt"),SUr.forEach(t),Mfo=r(X6e," \u2014 "),DP=n(X6e,"A",{href:!0});var RUr=s(DP);Efo=r(RUr,"FSMTModel"),RUr.forEach(t),Cfo=r(X6e," (FairSeq Machine-Translation model)"),X6e.forEach(t),wfo=i(M),Hs=n(M,"LI",{});var O9=s(Hs);qte=n(O9,"STRONG",{});var BUr=s(qte);Afo=r(BUr,"funnel"),BUr.forEach(t),yfo=r(O9," \u2014 "),GP=n(O9,"A",{href:!0});var PUr=s(GP);Lfo=r(PUr,"FunnelModel"),PUr.forEach(t),xfo=r(O9," or "),OP=n(O9,"A",{href:!0});var $Ur=s(OP);kfo=r($Ur,"FunnelBaseModel"),$Ur.forEach(t),Sfo=r(O9," (Funnel Transformer model)"),O9.forEach(t),Rfo=i(M),Xu=n(M,"LI",{});var z6e=s(Xu);Nte=n(z6e,"STRONG",{});var IUr=s(Nte);Bfo=r(IUr,"glpn"),IUr.forEach(t),Pfo=r(z6e," \u2014 "),VP=n(z6e,"A",{href:!0});var qUr=s(VP);$fo=r(qUr,"GLPNModel"),qUr.forEach(t),Ifo=r(z6e," (GLPN model)"),z6e.forEach(t),qfo=i(M),zu=n(M,"LI",{});var Q6e=s(zu);jte=n(Q6e,"STRONG",{});var NUr=s(jte);Nfo=r(NUr,"gpt2"),NUr.forEach(t),jfo=r(Q6e," \u2014 "),XP=n(Q6e,"A",{href:!0});var jUr=s(XP);Dfo=r(jUr,"GPT2Model"),jUr.forEach(t),Gfo=r(Q6e," (OpenAI GPT-2 model)"),Q6e.forEach(t),Ofo=i(M),Qu=n(M,"LI",{});var W6e=s(Qu);Dte=n(W6e,"STRONG",{});var DUr=s(Dte);Vfo=r(DUr,"gpt_neo"),DUr.forEach(t),Xfo=r(W6e," \u2014 "),zP=n(W6e,"A",{href:!0});var GUr=s(zP);zfo=r(GUr,"GPTNeoModel"),GUr.forEach(t),Qfo=r(W6e," (GPT Neo model)"),W6e.forEach(t),Wfo=i(M),Wu=n(M,"LI",{});var H6e=s(Wu);Gte=n(H6e,"STRONG",{});var OUr=s(Gte);Hfo=r(OUr,"gptj"),OUr.forEach(t),Ufo=r(H6e," \u2014 "),QP=n(H6e,"A",{href:!0});var VUr=s(QP);Jfo=r(VUr,"GPTJModel"),VUr.forEach(t),Yfo=r(H6e," (GPT-J model)"),H6e.forEach(t),Kfo=i(M),Hu=n(M,"LI",{});var U6e=s(Hu);Ote=n(U6e,"STRONG",{});var XUr=s(Ote);Zfo=r(XUr,"hubert"),XUr.forEach(t),ego=r(U6e," \u2014 "),WP=n(U6e,"A",{href:!0});var zUr=s(WP);ogo=r(zUr,"HubertModel"),zUr.forEach(t),rgo=r(U6e," (Hubert model)"),U6e.forEach(t),tgo=i(M),Uu=n(M,"LI",{});var J6e=s(Uu);Vte=n(J6e,"STRONG",{});var QUr=s(Vte);ago=r(QUr,"ibert"),QUr.forEach(t),ngo=r(J6e," \u2014 "),HP=n(J6e,"A",{href:!0});var WUr=s(HP);sgo=r(WUr,"IBertModel"),WUr.forEach(t),lgo=r(J6e," (I-BERT model)"),J6e.forEach(t),igo=i(M),Ju=n(M,"LI",{});var Y6e=s(Ju);Xte=n(Y6e,"STRONG",{});var HUr=s(Xte);dgo=r(HUr,"imagegpt"),HUr.forEach(t),cgo=r(Y6e," \u2014 "),UP=n(Y6e,"A",{href:!0});var UUr=s(UP);mgo=r(UUr,"ImageGPTModel"),UUr.forEach(t),fgo=r(Y6e," (ImageGPT model)"),Y6e.forEach(t),ggo=i(M),Yu=n(M,"LI",{});var K6e=s(Yu);zte=n(K6e,"STRONG",{});var JUr=s(zte);hgo=r(JUr,"layoutlm"),JUr.forEach(t),ugo=r(K6e," \u2014 "),JP=n(K6e,"A",{href:!0});var YUr=s(JP);pgo=r(YUr,"LayoutLMModel"),YUr.forEach(t),_go=r(K6e," (LayoutLM model)"),K6e.forEach(t),bgo=i(M),Ku=n(M,"LI",{});var Z6e=s(Ku);Qte=n(Z6e,"STRONG",{});var KUr=s(Qte);vgo=r(KUr,"layoutlmv2"),KUr.forEach(t),Fgo=r(Z6e," \u2014 "),YP=n(Z6e,"A",{href:!0});var ZUr=s(YP);Tgo=r(ZUr,"LayoutLMv2Model"),ZUr.forEach(t),Mgo=r(Z6e," (LayoutLMv2 model)"),Z6e.forEach(t),Ego=i(M),Zu=n(M,"LI",{});var ewe=s(Zu);Wte=n(ewe,"STRONG",{});var eJr=s(Wte);Cgo=r(eJr,"led"),eJr.forEach(t),wgo=r(ewe," \u2014 "),KP=n(ewe,"A",{href:!0});var oJr=s(KP);Ago=r(oJr,"LEDModel"),oJr.forEach(t),ygo=r(ewe," (LED model)"),ewe.forEach(t),Lgo=i(M),ep=n(M,"LI",{});var owe=s(ep);Hte=n(owe,"STRONG",{});var rJr=s(Hte);xgo=r(rJr,"longformer"),rJr.forEach(t),kgo=r(owe," \u2014 "),ZP=n(owe,"A",{href:!0});var tJr=s(ZP);Sgo=r(tJr,"LongformerModel"),tJr.forEach(t),Rgo=r(owe," (Longformer model)"),owe.forEach(t),Bgo=i(M),op=n(M,"LI",{});var rwe=s(op);Ute=n(rwe,"STRONG",{});var aJr=s(Ute);Pgo=r(aJr,"luke"),aJr.forEach(t),$go=r(rwe," \u2014 "),e$=n(rwe,"A",{href:!0});var nJr=s(e$);Igo=r(nJr,"LukeModel"),nJr.forEach(t),qgo=r(rwe," (LUKE model)"),rwe.forEach(t),Ngo=i(M),rp=n(M,"LI",{});var twe=s(rp);Jte=n(twe,"STRONG",{});var sJr=s(Jte);jgo=r(sJr,"lxmert"),sJr.forEach(t),Dgo=r(twe," \u2014 "),o$=n(twe,"A",{href:!0});var lJr=s(o$);Ggo=r(lJr,"LxmertModel"),lJr.forEach(t),Ogo=r(twe," (LXMERT model)"),twe.forEach(t),Vgo=i(M),tp=n(M,"LI",{});var awe=s(tp);Yte=n(awe,"STRONG",{});var iJr=s(Yte);Xgo=r(iJr,"m2m_100"),iJr.forEach(t),zgo=r(awe," \u2014 "),r$=n(awe,"A",{href:!0});var dJr=s(r$);Qgo=r(dJr,"M2M100Model"),dJr.forEach(t),Wgo=r(awe," (M2M100 model)"),awe.forEach(t),Hgo=i(M),ap=n(M,"LI",{});var nwe=s(ap);Kte=n(nwe,"STRONG",{});var cJr=s(Kte);Ugo=r(cJr,"marian"),cJr.forEach(t),Jgo=r(nwe," \u2014 "),t$=n(nwe,"A",{href:!0});var mJr=s(t$);Ygo=r(mJr,"MarianModel"),mJr.forEach(t),Kgo=r(nwe," (Marian model)"),nwe.forEach(t),Zgo=i(M),np=n(M,"LI",{});var swe=s(np);Zte=n(swe,"STRONG",{});var fJr=s(Zte);eho=r(fJr,"maskformer"),fJr.forEach(t),oho=r(swe," \u2014 "),a$=n(swe,"A",{href:!0});var gJr=s(a$);rho=r(gJr,"MaskFormerModel"),gJr.forEach(t),tho=r(swe," (MaskFormer model)"),swe.forEach(t),aho=i(M),sp=n(M,"LI",{});var lwe=s(sp);eae=n(lwe,"STRONG",{});var hJr=s(eae);nho=r(hJr,"mbart"),hJr.forEach(t),sho=r(lwe," \u2014 "),n$=n(lwe,"A",{href:!0});var uJr=s(n$);lho=r(uJr,"MBartModel"),uJr.forEach(t),iho=r(lwe," (mBART model)"),lwe.forEach(t),dho=i(M),lp=n(M,"LI",{});var iwe=s(lp);oae=n(iwe,"STRONG",{});var pJr=s(oae);cho=r(pJr,"megatron-bert"),pJr.forEach(t),mho=r(iwe," \u2014 "),s$=n(iwe,"A",{href:!0});var _Jr=s(s$);fho=r(_Jr,"MegatronBertModel"),_Jr.forEach(t),gho=r(iwe," (MegatronBert model)"),iwe.forEach(t),hho=i(M),ip=n(M,"LI",{});var dwe=s(ip);rae=n(dwe,"STRONG",{});var bJr=s(rae);uho=r(bJr,"mobilebert"),bJr.forEach(t),pho=r(dwe," \u2014 "),l$=n(dwe,"A",{href:!0});var vJr=s(l$);_ho=r(vJr,"MobileBertModel"),vJr.forEach(t),bho=r(dwe," (MobileBERT model)"),dwe.forEach(t),vho=i(M),dp=n(M,"LI",{});var cwe=s(dp);tae=n(cwe,"STRONG",{});var FJr=s(tae);Fho=r(FJr,"mpnet"),FJr.forEach(t),Tho=r(cwe," \u2014 "),i$=n(cwe,"A",{href:!0});var TJr=s(i$);Mho=r(TJr,"MPNetModel"),TJr.forEach(t),Eho=r(cwe," (MPNet model)"),cwe.forEach(t),Cho=i(M),cp=n(M,"LI",{});var mwe=s(cp);aae=n(mwe,"STRONG",{});var MJr=s(aae);who=r(MJr,"mt5"),MJr.forEach(t),Aho=r(mwe," \u2014 "),d$=n(mwe,"A",{href:!0});var EJr=s(d$);yho=r(EJr,"MT5Model"),EJr.forEach(t),Lho=r(mwe," (mT5 model)"),mwe.forEach(t),xho=i(M),mp=n(M,"LI",{});var fwe=s(mp);nae=n(fwe,"STRONG",{});var CJr=s(nae);kho=r(CJr,"nystromformer"),CJr.forEach(t),Sho=r(fwe," \u2014 "),c$=n(fwe,"A",{href:!0});var wJr=s(c$);Rho=r(wJr,"NystromformerModel"),wJr.forEach(t),Bho=r(fwe," (Nystromformer model)"),fwe.forEach(t),Pho=i(M),fp=n(M,"LI",{});var gwe=s(fp);sae=n(gwe,"STRONG",{});var AJr=s(sae);$ho=r(AJr,"openai-gpt"),AJr.forEach(t),Iho=r(gwe," \u2014 "),m$=n(gwe,"A",{href:!0});var yJr=s(m$);qho=r(yJr,"OpenAIGPTModel"),yJr.forEach(t),Nho=r(gwe," (OpenAI GPT model)"),gwe.forEach(t),jho=i(M),gp=n(M,"LI",{});var hwe=s(gp);lae=n(hwe,"STRONG",{});var LJr=s(lae);Dho=r(LJr,"pegasus"),LJr.forEach(t),Gho=r(hwe," \u2014 "),f$=n(hwe,"A",{href:!0});var xJr=s(f$);Oho=r(xJr,"PegasusModel"),xJr.forEach(t),Vho=r(hwe," (Pegasus model)"),hwe.forEach(t),Xho=i(M),hp=n(M,"LI",{});var uwe=s(hp);iae=n(uwe,"STRONG",{});var kJr=s(iae);zho=r(kJr,"perceiver"),kJr.forEach(t),Qho=r(uwe," \u2014 "),g$=n(uwe,"A",{href:!0});var SJr=s(g$);Who=r(SJr,"PerceiverModel"),SJr.forEach(t),Hho=r(uwe," (Perceiver model)"),uwe.forEach(t),Uho=i(M),up=n(M,"LI",{});var pwe=s(up);dae=n(pwe,"STRONG",{});var RJr=s(dae);Jho=r(RJr,"plbart"),RJr.forEach(t),Yho=r(pwe," \u2014 "),h$=n(pwe,"A",{href:!0});var BJr=s(h$);Kho=r(BJr,"PLBartModel"),BJr.forEach(t),Zho=r(pwe," (PLBart model)"),pwe.forEach(t),euo=i(M),pp=n(M,"LI",{});var _we=s(pp);cae=n(_we,"STRONG",{});var PJr=s(cae);ouo=r(PJr,"poolformer"),PJr.forEach(t),ruo=r(_we," \u2014 "),u$=n(_we,"A",{href:!0});var $Jr=s(u$);tuo=r($Jr,"PoolFormerModel"),$Jr.forEach(t),auo=r(_we," (PoolFormer model)"),_we.forEach(t),nuo=i(M),_p=n(M,"LI",{});var bwe=s(_p);mae=n(bwe,"STRONG",{});var IJr=s(mae);suo=r(IJr,"prophetnet"),IJr.forEach(t),luo=r(bwe," \u2014 "),p$=n(bwe,"A",{href:!0});var qJr=s(p$);iuo=r(qJr,"ProphetNetModel"),qJr.forEach(t),duo=r(bwe," (ProphetNet model)"),bwe.forEach(t),cuo=i(M),bp=n(M,"LI",{});var vwe=s(bp);fae=n(vwe,"STRONG",{});var NJr=s(fae);muo=r(NJr,"qdqbert"),NJr.forEach(t),fuo=r(vwe," \u2014 "),_$=n(vwe,"A",{href:!0});var jJr=s(_$);guo=r(jJr,"QDQBertModel"),jJr.forEach(t),huo=r(vwe," (QDQBert model)"),vwe.forEach(t),uuo=i(M),vp=n(M,"LI",{});var Fwe=s(vp);gae=n(Fwe,"STRONG",{});var DJr=s(gae);puo=r(DJr,"reformer"),DJr.forEach(t),_uo=r(Fwe," \u2014 "),b$=n(Fwe,"A",{href:!0});var GJr=s(b$);buo=r(GJr,"ReformerModel"),GJr.forEach(t),vuo=r(Fwe," (Reformer model)"),Fwe.forEach(t),Fuo=i(M),Fp=n(M,"LI",{});var Twe=s(Fp);hae=n(Twe,"STRONG",{});var OJr=s(hae);Tuo=r(OJr,"regnet"),OJr.forEach(t),Muo=r(Twe," \u2014 "),v$=n(Twe,"A",{href:!0});var VJr=s(v$);Euo=r(VJr,"RegNetModel"),VJr.forEach(t),Cuo=r(Twe," (RegNet model)"),Twe.forEach(t),wuo=i(M),Tp=n(M,"LI",{});var Mwe=s(Tp);uae=n(Mwe,"STRONG",{});var XJr=s(uae);Auo=r(XJr,"rembert"),XJr.forEach(t),yuo=r(Mwe," \u2014 "),F$=n(Mwe,"A",{href:!0});var zJr=s(F$);Luo=r(zJr,"RemBertModel"),zJr.forEach(t),xuo=r(Mwe," (RemBERT model)"),Mwe.forEach(t),kuo=i(M),Mp=n(M,"LI",{});var Ewe=s(Mp);pae=n(Ewe,"STRONG",{});var QJr=s(pae);Suo=r(QJr,"resnet"),QJr.forEach(t),Ruo=r(Ewe," \u2014 "),T$=n(Ewe,"A",{href:!0});var WJr=s(T$);Buo=r(WJr,"ResNetModel"),WJr.forEach(t),Puo=r(Ewe," (ResNet model)"),Ewe.forEach(t),$uo=i(M),Ep=n(M,"LI",{});var Cwe=s(Ep);_ae=n(Cwe,"STRONG",{});var HJr=s(_ae);Iuo=r(HJr,"retribert"),HJr.forEach(t),quo=r(Cwe," \u2014 "),M$=n(Cwe,"A",{href:!0});var UJr=s(M$);Nuo=r(UJr,"RetriBertModel"),UJr.forEach(t),juo=r(Cwe," (RetriBERT model)"),Cwe.forEach(t),Duo=i(M),Cp=n(M,"LI",{});var wwe=s(Cp);bae=n(wwe,"STRONG",{});var JJr=s(bae);Guo=r(JJr,"roberta"),JJr.forEach(t),Ouo=r(wwe," \u2014 "),E$=n(wwe,"A",{href:!0});var YJr=s(E$);Vuo=r(YJr,"RobertaModel"),YJr.forEach(t),Xuo=r(wwe," (RoBERTa model)"),wwe.forEach(t),zuo=i(M),wp=n(M,"LI",{});var Awe=s(wp);vae=n(Awe,"STRONG",{});var KJr=s(vae);Quo=r(KJr,"roformer"),KJr.forEach(t),Wuo=r(Awe," \u2014 "),C$=n(Awe,"A",{href:!0});var ZJr=s(C$);Huo=r(ZJr,"RoFormerModel"),ZJr.forEach(t),Uuo=r(Awe," (RoFormer model)"),Awe.forEach(t),Juo=i(M),Ap=n(M,"LI",{});var ywe=s(Ap);Fae=n(ywe,"STRONG",{});var eYr=s(Fae);Yuo=r(eYr,"segformer"),eYr.forEach(t),Kuo=r(ywe," \u2014 "),w$=n(ywe,"A",{href:!0});var oYr=s(w$);Zuo=r(oYr,"SegformerModel"),oYr.forEach(t),epo=r(ywe," (SegFormer model)"),ywe.forEach(t),opo=i(M),yp=n(M,"LI",{});var Lwe=s(yp);Tae=n(Lwe,"STRONG",{});var rYr=s(Tae);rpo=r(rYr,"sew"),rYr.forEach(t),tpo=r(Lwe," \u2014 "),A$=n(Lwe,"A",{href:!0});var tYr=s(A$);apo=r(tYr,"SEWModel"),tYr.forEach(t),npo=r(Lwe," (SEW model)"),Lwe.forEach(t),spo=i(M),Lp=n(M,"LI",{});var xwe=s(Lp);Mae=n(xwe,"STRONG",{});var aYr=s(Mae);lpo=r(aYr,"sew-d"),aYr.forEach(t),ipo=r(xwe," \u2014 "),y$=n(xwe,"A",{href:!0});var nYr=s(y$);dpo=r(nYr,"SEWDModel"),nYr.forEach(t),cpo=r(xwe," (SEW-D model)"),xwe.forEach(t),mpo=i(M),xp=n(M,"LI",{});var kwe=s(xp);Eae=n(kwe,"STRONG",{});var sYr=s(Eae);fpo=r(sYr,"speech_to_text"),sYr.forEach(t),gpo=r(kwe," \u2014 "),L$=n(kwe,"A",{href:!0});var lYr=s(L$);hpo=r(lYr,"Speech2TextModel"),lYr.forEach(t),upo=r(kwe," (Speech2Text model)"),kwe.forEach(t),ppo=i(M),kp=n(M,"LI",{});var Swe=s(kp);Cae=n(Swe,"STRONG",{});var iYr=s(Cae);_po=r(iYr,"splinter"),iYr.forEach(t),bpo=r(Swe," \u2014 "),x$=n(Swe,"A",{href:!0});var dYr=s(x$);vpo=r(dYr,"SplinterModel"),dYr.forEach(t),Fpo=r(Swe," (Splinter model)"),Swe.forEach(t),Tpo=i(M),Sp=n(M,"LI",{});var Rwe=s(Sp);wae=n(Rwe,"STRONG",{});var cYr=s(wae);Mpo=r(cYr,"squeezebert"),cYr.forEach(t),Epo=r(Rwe," \u2014 "),k$=n(Rwe,"A",{href:!0});var mYr=s(k$);Cpo=r(mYr,"SqueezeBertModel"),mYr.forEach(t),wpo=r(Rwe," (SqueezeBERT model)"),Rwe.forEach(t),Apo=i(M),Rp=n(M,"LI",{});var Bwe=s(Rp);Aae=n(Bwe,"STRONG",{});var fYr=s(Aae);ypo=r(fYr,"swin"),fYr.forEach(t),Lpo=r(Bwe," \u2014 "),S$=n(Bwe,"A",{href:!0});var gYr=s(S$);xpo=r(gYr,"SwinModel"),gYr.forEach(t),kpo=r(Bwe," (Swin model)"),Bwe.forEach(t),Spo=i(M),Bp=n(M,"LI",{});var Pwe=s(Bp);yae=n(Pwe,"STRONG",{});var hYr=s(yae);Rpo=r(hYr,"t5"),hYr.forEach(t),Bpo=r(Pwe," \u2014 "),R$=n(Pwe,"A",{href:!0});var uYr=s(R$);Ppo=r(uYr,"T5Model"),uYr.forEach(t),$po=r(Pwe," (T5 model)"),Pwe.forEach(t),Ipo=i(M),Pp=n(M,"LI",{});var $we=s(Pp);Lae=n($we,"STRONG",{});var pYr=s(Lae);qpo=r(pYr,"tapas"),pYr.forEach(t),Npo=r($we," \u2014 "),B$=n($we,"A",{href:!0});var _Yr=s(B$);jpo=r(_Yr,"TapasModel"),_Yr.forEach(t),Dpo=r($we," (TAPAS model)"),$we.forEach(t),Gpo=i(M),$p=n(M,"LI",{});var Iwe=s($p);xae=n(Iwe,"STRONG",{});var bYr=s(xae);Opo=r(bYr,"transfo-xl"),bYr.forEach(t),Vpo=r(Iwe," \u2014 "),P$=n(Iwe,"A",{href:!0});var vYr=s(P$);Xpo=r(vYr,"TransfoXLModel"),vYr.forEach(t),zpo=r(Iwe," (Transformer-XL model)"),Iwe.forEach(t),Qpo=i(M),Ip=n(M,"LI",{});var qwe=s(Ip);kae=n(qwe,"STRONG",{});var FYr=s(kae);Wpo=r(FYr,"unispeech"),FYr.forEach(t),Hpo=r(qwe," \u2014 "),$$=n(qwe,"A",{href:!0});var TYr=s($$);Upo=r(TYr,"UniSpeechModel"),TYr.forEach(t),Jpo=r(qwe," (UniSpeech model)"),qwe.forEach(t),Ypo=i(M),qp=n(M,"LI",{});var Nwe=s(qp);Sae=n(Nwe,"STRONG",{});var MYr=s(Sae);Kpo=r(MYr,"unispeech-sat"),MYr.forEach(t),Zpo=r(Nwe," \u2014 "),I$=n(Nwe,"A",{href:!0});var EYr=s(I$);e_o=r(EYr,"UniSpeechSatModel"),EYr.forEach(t),o_o=r(Nwe," (UniSpeechSat model)"),Nwe.forEach(t),r_o=i(M),Np=n(M,"LI",{});var jwe=s(Np);Rae=n(jwe,"STRONG",{});var CYr=s(Rae);t_o=r(CYr,"van"),CYr.forEach(t),a_o=r(jwe," \u2014 "),q$=n(jwe,"A",{href:!0});var wYr=s(q$);n_o=r(wYr,"VanModel"),wYr.forEach(t),s_o=r(jwe," (VAN model)"),jwe.forEach(t),l_o=i(M),jp=n(M,"LI",{});var Dwe=s(jp);Bae=n(Dwe,"STRONG",{});var AYr=s(Bae);i_o=r(AYr,"vilt"),AYr.forEach(t),d_o=r(Dwe," \u2014 "),N$=n(Dwe,"A",{href:!0});var yYr=s(N$);c_o=r(yYr,"ViltModel"),yYr.forEach(t),m_o=r(Dwe," (ViLT model)"),Dwe.forEach(t),f_o=i(M),Dp=n(M,"LI",{});var Gwe=s(Dp);Pae=n(Gwe,"STRONG",{});var LYr=s(Pae);g_o=r(LYr,"vision-text-dual-encoder"),LYr.forEach(t),h_o=r(Gwe," \u2014 "),j$=n(Gwe,"A",{href:!0});var xYr=s(j$);u_o=r(xYr,"VisionTextDualEncoderModel"),xYr.forEach(t),p_o=r(Gwe," (VisionTextDualEncoder model)"),Gwe.forEach(t),__o=i(M),Gp=n(M,"LI",{});var Owe=s(Gp);$ae=n(Owe,"STRONG",{});var kYr=s($ae);b_o=r(kYr,"visual_bert"),kYr.forEach(t),v_o=r(Owe," \u2014 "),D$=n(Owe,"A",{href:!0});var SYr=s(D$);F_o=r(SYr,"VisualBertModel"),SYr.forEach(t),T_o=r(Owe," (VisualBert model)"),Owe.forEach(t),M_o=i(M),Op=n(M,"LI",{});var Vwe=s(Op);Iae=n(Vwe,"STRONG",{});var RYr=s(Iae);E_o=r(RYr,"vit"),RYr.forEach(t),C_o=r(Vwe," \u2014 "),G$=n(Vwe,"A",{href:!0});var BYr=s(G$);w_o=r(BYr,"ViTModel"),BYr.forEach(t),A_o=r(Vwe," (ViT model)"),Vwe.forEach(t),y_o=i(M),Vp=n(M,"LI",{});var Xwe=s(Vp);qae=n(Xwe,"STRONG",{});var PYr=s(qae);L_o=r(PYr,"vit_mae"),PYr.forEach(t),x_o=r(Xwe," \u2014 "),O$=n(Xwe,"A",{href:!0});var $Yr=s(O$);k_o=r($Yr,"ViTMAEModel"),$Yr.forEach(t),S_o=r(Xwe," (ViTMAE model)"),Xwe.forEach(t),R_o=i(M),Xp=n(M,"LI",{});var zwe=s(Xp);Nae=n(zwe,"STRONG",{});var IYr=s(Nae);B_o=r(IYr,"wav2vec2"),IYr.forEach(t),P_o=r(zwe," \u2014 "),V$=n(zwe,"A",{href:!0});var qYr=s(V$);$_o=r(qYr,"Wav2Vec2Model"),qYr.forEach(t),I_o=r(zwe," (Wav2Vec2 model)"),zwe.forEach(t),q_o=i(M),zp=n(M,"LI",{});var Qwe=s(zp);jae=n(Qwe,"STRONG",{});var NYr=s(jae);N_o=r(NYr,"wavlm"),NYr.forEach(t),j_o=r(Qwe," \u2014 "),X$=n(Qwe,"A",{href:!0});var jYr=s(X$);D_o=r(jYr,"WavLMModel"),jYr.forEach(t),G_o=r(Qwe," (WavLM model)"),Qwe.forEach(t),O_o=i(M),Qp=n(M,"LI",{});var Wwe=s(Qp);Dae=n(Wwe,"STRONG",{});var DYr=s(Dae);V_o=r(DYr,"xglm"),DYr.forEach(t),X_o=r(Wwe," \u2014 "),z$=n(Wwe,"A",{href:!0});var GYr=s(z$);z_o=r(GYr,"XGLMModel"),GYr.forEach(t),Q_o=r(Wwe," (XGLM model)"),Wwe.forEach(t),W_o=i(M),Wp=n(M,"LI",{});var Hwe=s(Wp);Gae=n(Hwe,"STRONG",{});var OYr=s(Gae);H_o=r(OYr,"xlm"),OYr.forEach(t),U_o=r(Hwe," \u2014 "),Q$=n(Hwe,"A",{href:!0});var VYr=s(Q$);J_o=r(VYr,"XLMModel"),VYr.forEach(t),Y_o=r(Hwe," (XLM model)"),Hwe.forEach(t),K_o=i(M),Hp=n(M,"LI",{});var Uwe=s(Hp);Oae=n(Uwe,"STRONG",{});var XYr=s(Oae);Z_o=r(XYr,"xlm-prophetnet"),XYr.forEach(t),ebo=r(Uwe," \u2014 "),W$=n(Uwe,"A",{href:!0});var zYr=s(W$);obo=r(zYr,"XLMProphetNetModel"),zYr.forEach(t),rbo=r(Uwe," (XLMProphetNet model)"),Uwe.forEach(t),tbo=i(M),Up=n(M,"LI",{});var Jwe=s(Up);Vae=n(Jwe,"STRONG",{});var QYr=s(Vae);abo=r(QYr,"xlm-roberta"),QYr.forEach(t),nbo=r(Jwe," \u2014 "),H$=n(Jwe,"A",{href:!0});var WYr=s(H$);sbo=r(WYr,"XLMRobertaModel"),WYr.forEach(t),lbo=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),ibo=i(M),Jp=n(M,"LI",{});var Ywe=s(Jp);Xae=n(Ywe,"STRONG",{});var HYr=s(Xae);dbo=r(HYr,"xlm-roberta-xl"),HYr.forEach(t),cbo=r(Ywe," \u2014 "),U$=n(Ywe,"A",{href:!0});var UYr=s(U$);mbo=r(UYr,"XLMRobertaXLModel"),UYr.forEach(t),fbo=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),gbo=i(M),Yp=n(M,"LI",{});var Kwe=s(Yp);zae=n(Kwe,"STRONG",{});var JYr=s(zae);hbo=r(JYr,"xlnet"),JYr.forEach(t),ubo=r(Kwe," \u2014 "),J$=n(Kwe,"A",{href:!0});var YYr=s(J$);pbo=r(YYr,"XLNetModel"),YYr.forEach(t),_bo=r(Kwe," (XLNet model)"),Kwe.forEach(t),bbo=i(M),Kp=n(M,"LI",{});var Zwe=s(Kp);Qae=n(Zwe,"STRONG",{});var KYr=s(Qae);vbo=r(KYr,"yoso"),KYr.forEach(t),Fbo=r(Zwe," \u2014 "),Y$=n(Zwe,"A",{href:!0});var ZYr=s(Y$);Tbo=r(ZYr,"YosoModel"),ZYr.forEach(t),Mbo=r(Zwe," (YOSO model)"),Zwe.forEach(t),M.forEach(t),Ebo=i(Dt),Zp=n(Dt,"P",{});var eAe=s(Zp);Cbo=r(eAe,"The model is set in evaluation mode by default using "),Wae=n(eAe,"CODE",{});var eKr=s(Wae);wbo=r(eKr,"model.eval()"),eKr.forEach(t),Abo=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=n(eAe,"CODE",{});var oKr=s(Hae);ybo=r(oKr,"model.train()"),oKr.forEach(t),eAe.forEach(t),Lbo=i(Dt),Uae=n(Dt,"P",{});var rKr=s(Uae);xbo=r(rKr,"Examples:"),rKr.forEach(t),kbo=i(Dt),f(Sw.$$.fragment,Dt),Dt.forEach(t),ol.forEach(t),hPe=i(c),id=n(c,"H2",{class:!0});var EIe=s(id);e_=n(EIe,"A",{id:!0,class:!0,href:!0});var tKr=s(e_);Jae=n(tKr,"SPAN",{});var aKr=s(Jae);f(Rw.$$.fragment,aKr),aKr.forEach(t),tKr.forEach(t),Sbo=i(EIe),Yae=n(EIe,"SPAN",{});var nKr=s(Yae);Rbo=r(nKr,"AutoModelForPreTraining"),nKr.forEach(t),EIe.forEach(t),uPe=i(c),Yo=n(c,"DIV",{class:!0});var tl=s(Yo);f(Bw.$$.fragment,tl),Bbo=i(tl),dd=n(tl,"P",{});var bJ=s(dd);Pbo=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),K$=n(bJ,"A",{href:!0});var sKr=s(K$);$bo=r(sKr,"from_pretrained()"),sKr.forEach(t),Ibo=r(bJ," class method or the "),Z$=n(bJ,"A",{href:!0});var lKr=s(Z$);qbo=r(lKr,"from_config()"),lKr.forEach(t),Nbo=r(bJ,` class
method.`),bJ.forEach(t),jbo=i(tl),Pw=n(tl,"P",{});var CIe=s(Pw);Dbo=r(CIe,"This class cannot be instantiated directly using "),Kae=n(CIe,"CODE",{});var iKr=s(Kae);Gbo=r(iKr,"__init__()"),iKr.forEach(t),Obo=r(CIe," (throws an error)."),CIe.forEach(t),Vbo=i(tl),zr=n(tl,"DIV",{class:!0});var al=s(zr);f($w.$$.fragment,al),Xbo=i(al),Zae=n(al,"P",{});var dKr=s(Zae);zbo=r(dKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dKr.forEach(t),Qbo=i(al),cd=n(al,"P",{});var vJ=s(cd);Wbo=r(vJ,`Note:
Loading a model from its configuration file does `),ene=n(vJ,"STRONG",{});var cKr=s(ene);Hbo=r(cKr,"not"),cKr.forEach(t),Ubo=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=n(vJ,"A",{href:!0});var mKr=s(eI);Jbo=r(mKr,"from_pretrained()"),mKr.forEach(t),Ybo=r(vJ," to load the model weights."),vJ.forEach(t),Kbo=i(al),one=n(al,"P",{});var fKr=s(one);Zbo=r(fKr,"Examples:"),fKr.forEach(t),e2o=i(al),f(Iw.$$.fragment,al),al.forEach(t),o2o=i(tl),je=n(tl,"DIV",{class:!0});var Gt=s(je);f(qw.$$.fragment,Gt),r2o=i(Gt),rne=n(Gt,"P",{});var gKr=s(rne);t2o=r(gKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gKr.forEach(t),a2o=i(Gt),za=n(Gt,"P",{});var UC=s(za);n2o=r(UC,"The model class to instantiate is selected based on the "),tne=n(UC,"CODE",{});var hKr=s(tne);s2o=r(hKr,"model_type"),hKr.forEach(t),l2o=r(UC,` property of the config object (either
passed as an argument or loaded from `),ane=n(UC,"CODE",{});var uKr=s(ane);i2o=r(uKr,"pretrained_model_name_or_path"),uKr.forEach(t),d2o=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nne=n(UC,"CODE",{});var pKr=s(nne);c2o=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),m2o=r(UC,":"),UC.forEach(t),f2o=i(Gt),S=n(Gt,"UL",{});var B=s(S);o_=n(B,"LI",{});var oAe=s(o_);sne=n(oAe,"STRONG",{});var _Kr=s(sne);g2o=r(_Kr,"albert"),_Kr.forEach(t),h2o=r(oAe," \u2014 "),oI=n(oAe,"A",{href:!0});var bKr=s(oI);u2o=r(bKr,"AlbertForPreTraining"),bKr.forEach(t),p2o=r(oAe," (ALBERT model)"),oAe.forEach(t),_2o=i(B),r_=n(B,"LI",{});var rAe=s(r_);lne=n(rAe,"STRONG",{});var vKr=s(lne);b2o=r(vKr,"bart"),vKr.forEach(t),v2o=r(rAe," \u2014 "),rI=n(rAe,"A",{href:!0});var FKr=s(rI);F2o=r(FKr,"BartForConditionalGeneration"),FKr.forEach(t),T2o=r(rAe," (BART model)"),rAe.forEach(t),M2o=i(B),t_=n(B,"LI",{});var tAe=s(t_);ine=n(tAe,"STRONG",{});var TKr=s(ine);E2o=r(TKr,"bert"),TKr.forEach(t),C2o=r(tAe," \u2014 "),tI=n(tAe,"A",{href:!0});var MKr=s(tI);w2o=r(MKr,"BertForPreTraining"),MKr.forEach(t),A2o=r(tAe," (BERT model)"),tAe.forEach(t),y2o=i(B),a_=n(B,"LI",{});var aAe=s(a_);dne=n(aAe,"STRONG",{});var EKr=s(dne);L2o=r(EKr,"big_bird"),EKr.forEach(t),x2o=r(aAe," \u2014 "),aI=n(aAe,"A",{href:!0});var CKr=s(aI);k2o=r(CKr,"BigBirdForPreTraining"),CKr.forEach(t),S2o=r(aAe," (BigBird model)"),aAe.forEach(t),R2o=i(B),n_=n(B,"LI",{});var nAe=s(n_);cne=n(nAe,"STRONG",{});var wKr=s(cne);B2o=r(wKr,"camembert"),wKr.forEach(t),P2o=r(nAe," \u2014 "),nI=n(nAe,"A",{href:!0});var AKr=s(nI);$2o=r(AKr,"CamembertForMaskedLM"),AKr.forEach(t),I2o=r(nAe," (CamemBERT model)"),nAe.forEach(t),q2o=i(B),s_=n(B,"LI",{});var sAe=s(s_);mne=n(sAe,"STRONG",{});var yKr=s(mne);N2o=r(yKr,"ctrl"),yKr.forEach(t),j2o=r(sAe," \u2014 "),sI=n(sAe,"A",{href:!0});var LKr=s(sI);D2o=r(LKr,"CTRLLMHeadModel"),LKr.forEach(t),G2o=r(sAe," (CTRL model)"),sAe.forEach(t),O2o=i(B),l_=n(B,"LI",{});var lAe=s(l_);fne=n(lAe,"STRONG",{});var xKr=s(fne);V2o=r(xKr,"data2vec-text"),xKr.forEach(t),X2o=r(lAe," \u2014 "),lI=n(lAe,"A",{href:!0});var kKr=s(lI);z2o=r(kKr,"Data2VecTextForMaskedLM"),kKr.forEach(t),Q2o=r(lAe," (Data2VecText model)"),lAe.forEach(t),W2o=i(B),i_=n(B,"LI",{});var iAe=s(i_);gne=n(iAe,"STRONG",{});var SKr=s(gne);H2o=r(SKr,"deberta"),SKr.forEach(t),U2o=r(iAe," \u2014 "),iI=n(iAe,"A",{href:!0});var RKr=s(iI);J2o=r(RKr,"DebertaForMaskedLM"),RKr.forEach(t),Y2o=r(iAe," (DeBERTa model)"),iAe.forEach(t),K2o=i(B),d_=n(B,"LI",{});var dAe=s(d_);hne=n(dAe,"STRONG",{});var BKr=s(hne);Z2o=r(BKr,"deberta-v2"),BKr.forEach(t),evo=r(dAe," \u2014 "),dI=n(dAe,"A",{href:!0});var PKr=s(dI);ovo=r(PKr,"DebertaV2ForMaskedLM"),PKr.forEach(t),rvo=r(dAe," (DeBERTa-v2 model)"),dAe.forEach(t),tvo=i(B),c_=n(B,"LI",{});var cAe=s(c_);une=n(cAe,"STRONG",{});var $Kr=s(une);avo=r($Kr,"distilbert"),$Kr.forEach(t),nvo=r(cAe," \u2014 "),cI=n(cAe,"A",{href:!0});var IKr=s(cI);svo=r(IKr,"DistilBertForMaskedLM"),IKr.forEach(t),lvo=r(cAe," (DistilBERT model)"),cAe.forEach(t),ivo=i(B),m_=n(B,"LI",{});var mAe=s(m_);pne=n(mAe,"STRONG",{});var qKr=s(pne);dvo=r(qKr,"electra"),qKr.forEach(t),cvo=r(mAe," \u2014 "),mI=n(mAe,"A",{href:!0});var NKr=s(mI);mvo=r(NKr,"ElectraForPreTraining"),NKr.forEach(t),fvo=r(mAe," (ELECTRA model)"),mAe.forEach(t),gvo=i(B),f_=n(B,"LI",{});var fAe=s(f_);_ne=n(fAe,"STRONG",{});var jKr=s(_ne);hvo=r(jKr,"flaubert"),jKr.forEach(t),uvo=r(fAe," \u2014 "),fI=n(fAe,"A",{href:!0});var DKr=s(fI);pvo=r(DKr,"FlaubertWithLMHeadModel"),DKr.forEach(t),_vo=r(fAe," (FlauBERT model)"),fAe.forEach(t),bvo=i(B),g_=n(B,"LI",{});var gAe=s(g_);bne=n(gAe,"STRONG",{});var GKr=s(bne);vvo=r(GKr,"fnet"),GKr.forEach(t),Fvo=r(gAe," \u2014 "),gI=n(gAe,"A",{href:!0});var OKr=s(gI);Tvo=r(OKr,"FNetForPreTraining"),OKr.forEach(t),Mvo=r(gAe," (FNet model)"),gAe.forEach(t),Evo=i(B),h_=n(B,"LI",{});var hAe=s(h_);vne=n(hAe,"STRONG",{});var VKr=s(vne);Cvo=r(VKr,"fsmt"),VKr.forEach(t),wvo=r(hAe," \u2014 "),hI=n(hAe,"A",{href:!0});var XKr=s(hI);Avo=r(XKr,"FSMTForConditionalGeneration"),XKr.forEach(t),yvo=r(hAe," (FairSeq Machine-Translation model)"),hAe.forEach(t),Lvo=i(B),u_=n(B,"LI",{});var uAe=s(u_);Fne=n(uAe,"STRONG",{});var zKr=s(Fne);xvo=r(zKr,"funnel"),zKr.forEach(t),kvo=r(uAe," \u2014 "),uI=n(uAe,"A",{href:!0});var QKr=s(uI);Svo=r(QKr,"FunnelForPreTraining"),QKr.forEach(t),Rvo=r(uAe," (Funnel Transformer model)"),uAe.forEach(t),Bvo=i(B),p_=n(B,"LI",{});var pAe=s(p_);Tne=n(pAe,"STRONG",{});var WKr=s(Tne);Pvo=r(WKr,"gpt2"),WKr.forEach(t),$vo=r(pAe," \u2014 "),pI=n(pAe,"A",{href:!0});var HKr=s(pI);Ivo=r(HKr,"GPT2LMHeadModel"),HKr.forEach(t),qvo=r(pAe," (OpenAI GPT-2 model)"),pAe.forEach(t),Nvo=i(B),__=n(B,"LI",{});var _Ae=s(__);Mne=n(_Ae,"STRONG",{});var UKr=s(Mne);jvo=r(UKr,"ibert"),UKr.forEach(t),Dvo=r(_Ae," \u2014 "),_I=n(_Ae,"A",{href:!0});var JKr=s(_I);Gvo=r(JKr,"IBertForMaskedLM"),JKr.forEach(t),Ovo=r(_Ae," (I-BERT model)"),_Ae.forEach(t),Vvo=i(B),b_=n(B,"LI",{});var bAe=s(b_);Ene=n(bAe,"STRONG",{});var YKr=s(Ene);Xvo=r(YKr,"layoutlm"),YKr.forEach(t),zvo=r(bAe," \u2014 "),bI=n(bAe,"A",{href:!0});var KKr=s(bI);Qvo=r(KKr,"LayoutLMForMaskedLM"),KKr.forEach(t),Wvo=r(bAe," (LayoutLM model)"),bAe.forEach(t),Hvo=i(B),v_=n(B,"LI",{});var vAe=s(v_);Cne=n(vAe,"STRONG",{});var ZKr=s(Cne);Uvo=r(ZKr,"longformer"),ZKr.forEach(t),Jvo=r(vAe," \u2014 "),vI=n(vAe,"A",{href:!0});var eZr=s(vI);Yvo=r(eZr,"LongformerForMaskedLM"),eZr.forEach(t),Kvo=r(vAe," (Longformer model)"),vAe.forEach(t),Zvo=i(B),F_=n(B,"LI",{});var FAe=s(F_);wne=n(FAe,"STRONG",{});var oZr=s(wne);eFo=r(oZr,"lxmert"),oZr.forEach(t),oFo=r(FAe," \u2014 "),FI=n(FAe,"A",{href:!0});var rZr=s(FI);rFo=r(rZr,"LxmertForPreTraining"),rZr.forEach(t),tFo=r(FAe," (LXMERT model)"),FAe.forEach(t),aFo=i(B),T_=n(B,"LI",{});var TAe=s(T_);Ane=n(TAe,"STRONG",{});var tZr=s(Ane);nFo=r(tZr,"megatron-bert"),tZr.forEach(t),sFo=r(TAe," \u2014 "),TI=n(TAe,"A",{href:!0});var aZr=s(TI);lFo=r(aZr,"MegatronBertForPreTraining"),aZr.forEach(t),iFo=r(TAe," (MegatronBert model)"),TAe.forEach(t),dFo=i(B),M_=n(B,"LI",{});var MAe=s(M_);yne=n(MAe,"STRONG",{});var nZr=s(yne);cFo=r(nZr,"mobilebert"),nZr.forEach(t),mFo=r(MAe," \u2014 "),MI=n(MAe,"A",{href:!0});var sZr=s(MI);fFo=r(sZr,"MobileBertForPreTraining"),sZr.forEach(t),gFo=r(MAe," (MobileBERT model)"),MAe.forEach(t),hFo=i(B),E_=n(B,"LI",{});var EAe=s(E_);Lne=n(EAe,"STRONG",{});var lZr=s(Lne);uFo=r(lZr,"mpnet"),lZr.forEach(t),pFo=r(EAe," \u2014 "),EI=n(EAe,"A",{href:!0});var iZr=s(EI);_Fo=r(iZr,"MPNetForMaskedLM"),iZr.forEach(t),bFo=r(EAe," (MPNet model)"),EAe.forEach(t),vFo=i(B),C_=n(B,"LI",{});var CAe=s(C_);xne=n(CAe,"STRONG",{});var dZr=s(xne);FFo=r(dZr,"openai-gpt"),dZr.forEach(t),TFo=r(CAe," \u2014 "),CI=n(CAe,"A",{href:!0});var cZr=s(CI);MFo=r(cZr,"OpenAIGPTLMHeadModel"),cZr.forEach(t),EFo=r(CAe," (OpenAI GPT model)"),CAe.forEach(t),CFo=i(B),w_=n(B,"LI",{});var wAe=s(w_);kne=n(wAe,"STRONG",{});var mZr=s(kne);wFo=r(mZr,"retribert"),mZr.forEach(t),AFo=r(wAe," \u2014 "),wI=n(wAe,"A",{href:!0});var fZr=s(wI);yFo=r(fZr,"RetriBertModel"),fZr.forEach(t),LFo=r(wAe," (RetriBERT model)"),wAe.forEach(t),xFo=i(B),A_=n(B,"LI",{});var AAe=s(A_);Sne=n(AAe,"STRONG",{});var gZr=s(Sne);kFo=r(gZr,"roberta"),gZr.forEach(t),SFo=r(AAe," \u2014 "),AI=n(AAe,"A",{href:!0});var hZr=s(AI);RFo=r(hZr,"RobertaForMaskedLM"),hZr.forEach(t),BFo=r(AAe," (RoBERTa model)"),AAe.forEach(t),PFo=i(B),y_=n(B,"LI",{});var yAe=s(y_);Rne=n(yAe,"STRONG",{});var uZr=s(Rne);$Fo=r(uZr,"squeezebert"),uZr.forEach(t),IFo=r(yAe," \u2014 "),yI=n(yAe,"A",{href:!0});var pZr=s(yI);qFo=r(pZr,"SqueezeBertForMaskedLM"),pZr.forEach(t),NFo=r(yAe," (SqueezeBERT model)"),yAe.forEach(t),jFo=i(B),L_=n(B,"LI",{});var LAe=s(L_);Bne=n(LAe,"STRONG",{});var _Zr=s(Bne);DFo=r(_Zr,"t5"),_Zr.forEach(t),GFo=r(LAe," \u2014 "),LI=n(LAe,"A",{href:!0});var bZr=s(LI);OFo=r(bZr,"T5ForConditionalGeneration"),bZr.forEach(t),VFo=r(LAe," (T5 model)"),LAe.forEach(t),XFo=i(B),x_=n(B,"LI",{});var xAe=s(x_);Pne=n(xAe,"STRONG",{});var vZr=s(Pne);zFo=r(vZr,"tapas"),vZr.forEach(t),QFo=r(xAe," \u2014 "),xI=n(xAe,"A",{href:!0});var FZr=s(xI);WFo=r(FZr,"TapasForMaskedLM"),FZr.forEach(t),HFo=r(xAe," (TAPAS model)"),xAe.forEach(t),UFo=i(B),k_=n(B,"LI",{});var kAe=s(k_);$ne=n(kAe,"STRONG",{});var TZr=s($ne);JFo=r(TZr,"transfo-xl"),TZr.forEach(t),YFo=r(kAe," \u2014 "),kI=n(kAe,"A",{href:!0});var MZr=s(kI);KFo=r(MZr,"TransfoXLLMHeadModel"),MZr.forEach(t),ZFo=r(kAe," (Transformer-XL model)"),kAe.forEach(t),e1o=i(B),S_=n(B,"LI",{});var SAe=s(S_);Ine=n(SAe,"STRONG",{});var EZr=s(Ine);o1o=r(EZr,"unispeech"),EZr.forEach(t),r1o=r(SAe," \u2014 "),SI=n(SAe,"A",{href:!0});var CZr=s(SI);t1o=r(CZr,"UniSpeechForPreTraining"),CZr.forEach(t),a1o=r(SAe," (UniSpeech model)"),SAe.forEach(t),n1o=i(B),R_=n(B,"LI",{});var RAe=s(R_);qne=n(RAe,"STRONG",{});var wZr=s(qne);s1o=r(wZr,"unispeech-sat"),wZr.forEach(t),l1o=r(RAe," \u2014 "),RI=n(RAe,"A",{href:!0});var AZr=s(RI);i1o=r(AZr,"UniSpeechSatForPreTraining"),AZr.forEach(t),d1o=r(RAe," (UniSpeechSat model)"),RAe.forEach(t),c1o=i(B),B_=n(B,"LI",{});var BAe=s(B_);Nne=n(BAe,"STRONG",{});var yZr=s(Nne);m1o=r(yZr,"visual_bert"),yZr.forEach(t),f1o=r(BAe," \u2014 "),BI=n(BAe,"A",{href:!0});var LZr=s(BI);g1o=r(LZr,"VisualBertForPreTraining"),LZr.forEach(t),h1o=r(BAe," (VisualBert model)"),BAe.forEach(t),u1o=i(B),P_=n(B,"LI",{});var PAe=s(P_);jne=n(PAe,"STRONG",{});var xZr=s(jne);p1o=r(xZr,"vit_mae"),xZr.forEach(t),_1o=r(PAe," \u2014 "),PI=n(PAe,"A",{href:!0});var kZr=s(PI);b1o=r(kZr,"ViTMAEForPreTraining"),kZr.forEach(t),v1o=r(PAe," (ViTMAE model)"),PAe.forEach(t),F1o=i(B),$_=n(B,"LI",{});var $Ae=s($_);Dne=n($Ae,"STRONG",{});var SZr=s(Dne);T1o=r(SZr,"wav2vec2"),SZr.forEach(t),M1o=r($Ae," \u2014 "),$I=n($Ae,"A",{href:!0});var RZr=s($I);E1o=r(RZr,"Wav2Vec2ForPreTraining"),RZr.forEach(t),C1o=r($Ae," (Wav2Vec2 model)"),$Ae.forEach(t),w1o=i(B),I_=n(B,"LI",{});var IAe=s(I_);Gne=n(IAe,"STRONG",{});var BZr=s(Gne);A1o=r(BZr,"xlm"),BZr.forEach(t),y1o=r(IAe," \u2014 "),II=n(IAe,"A",{href:!0});var PZr=s(II);L1o=r(PZr,"XLMWithLMHeadModel"),PZr.forEach(t),x1o=r(IAe," (XLM model)"),IAe.forEach(t),k1o=i(B),q_=n(B,"LI",{});var qAe=s(q_);One=n(qAe,"STRONG",{});var $Zr=s(One);S1o=r($Zr,"xlm-roberta"),$Zr.forEach(t),R1o=r(qAe," \u2014 "),qI=n(qAe,"A",{href:!0});var IZr=s(qI);B1o=r(IZr,"XLMRobertaForMaskedLM"),IZr.forEach(t),P1o=r(qAe," (XLM-RoBERTa model)"),qAe.forEach(t),$1o=i(B),N_=n(B,"LI",{});var NAe=s(N_);Vne=n(NAe,"STRONG",{});var qZr=s(Vne);I1o=r(qZr,"xlm-roberta-xl"),qZr.forEach(t),q1o=r(NAe," \u2014 "),NI=n(NAe,"A",{href:!0});var NZr=s(NI);N1o=r(NZr,"XLMRobertaXLForMaskedLM"),NZr.forEach(t),j1o=r(NAe," (XLM-RoBERTa-XL model)"),NAe.forEach(t),D1o=i(B),j_=n(B,"LI",{});var jAe=s(j_);Xne=n(jAe,"STRONG",{});var jZr=s(Xne);G1o=r(jZr,"xlnet"),jZr.forEach(t),O1o=r(jAe," \u2014 "),jI=n(jAe,"A",{href:!0});var DZr=s(jI);V1o=r(DZr,"XLNetLMHeadModel"),DZr.forEach(t),X1o=r(jAe," (XLNet model)"),jAe.forEach(t),B.forEach(t),z1o=i(Gt),D_=n(Gt,"P",{});var DAe=s(D_);Q1o=r(DAe,"The model is set in evaluation mode by default using "),zne=n(DAe,"CODE",{});var GZr=s(zne);W1o=r(GZr,"model.eval()"),GZr.forEach(t),H1o=r(DAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=n(DAe,"CODE",{});var OZr=s(Qne);U1o=r(OZr,"model.train()"),OZr.forEach(t),DAe.forEach(t),J1o=i(Gt),Wne=n(Gt,"P",{});var VZr=s(Wne);Y1o=r(VZr,"Examples:"),VZr.forEach(t),K1o=i(Gt),f(Nw.$$.fragment,Gt),Gt.forEach(t),tl.forEach(t),pPe=i(c),md=n(c,"H2",{class:!0});var wIe=s(md);G_=n(wIe,"A",{id:!0,class:!0,href:!0});var XZr=s(G_);Hne=n(XZr,"SPAN",{});var zZr=s(Hne);f(jw.$$.fragment,zZr),zZr.forEach(t),XZr.forEach(t),Z1o=i(wIe),Une=n(wIe,"SPAN",{});var QZr=s(Une);eTo=r(QZr,"AutoModelForCausalLM"),QZr.forEach(t),wIe.forEach(t),_Pe=i(c),Ko=n(c,"DIV",{class:!0});var nl=s(Ko);f(Dw.$$.fragment,nl),oTo=i(nl),fd=n(nl,"P",{});var FJ=s(fd);rTo=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DI=n(FJ,"A",{href:!0});var WZr=s(DI);tTo=r(WZr,"from_pretrained()"),WZr.forEach(t),aTo=r(FJ," class method or the "),GI=n(FJ,"A",{href:!0});var HZr=s(GI);nTo=r(HZr,"from_config()"),HZr.forEach(t),sTo=r(FJ,` class
method.`),FJ.forEach(t),lTo=i(nl),Gw=n(nl,"P",{});var AIe=s(Gw);iTo=r(AIe,"This class cannot be instantiated directly using "),Jne=n(AIe,"CODE",{});var UZr=s(Jne);dTo=r(UZr,"__init__()"),UZr.forEach(t),cTo=r(AIe," (throws an error)."),AIe.forEach(t),mTo=i(nl),Qr=n(nl,"DIV",{class:!0});var sl=s(Qr);f(Ow.$$.fragment,sl),fTo=i(sl),Yne=n(sl,"P",{});var JZr=s(Yne);gTo=r(JZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JZr.forEach(t),hTo=i(sl),gd=n(sl,"P",{});var TJ=s(gd);uTo=r(TJ,`Note:
Loading a model from its configuration file does `),Kne=n(TJ,"STRONG",{});var YZr=s(Kne);pTo=r(YZr,"not"),YZr.forEach(t),_To=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=n(TJ,"A",{href:!0});var KZr=s(OI);bTo=r(KZr,"from_pretrained()"),KZr.forEach(t),vTo=r(TJ," to load the model weights."),TJ.forEach(t),FTo=i(sl),Zne=n(sl,"P",{});var ZZr=s(Zne);TTo=r(ZZr,"Examples:"),ZZr.forEach(t),MTo=i(sl),f(Vw.$$.fragment,sl),sl.forEach(t),ETo=i(nl),De=n(nl,"DIV",{class:!0});var Ot=s(De);f(Xw.$$.fragment,Ot),CTo=i(Ot),ese=n(Ot,"P",{});var eet=s(ese);wTo=r(eet,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eet.forEach(t),ATo=i(Ot),Qa=n(Ot,"P",{});var JC=s(Qa);yTo=r(JC,"The model class to instantiate is selected based on the "),ose=n(JC,"CODE",{});var oet=s(ose);LTo=r(oet,"model_type"),oet.forEach(t),xTo=r(JC,` property of the config object (either
passed as an argument or loaded from `),rse=n(JC,"CODE",{});var ret=s(rse);kTo=r(ret,"pretrained_model_name_or_path"),ret.forEach(t),STo=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tse=n(JC,"CODE",{});var tet=s(tse);RTo=r(tet,"pretrained_model_name_or_path"),tet.forEach(t),BTo=r(JC,":"),JC.forEach(t),PTo=i(Ot),$=n(Ot,"UL",{});var q=s($);O_=n(q,"LI",{});var GAe=s(O_);ase=n(GAe,"STRONG",{});var aet=s(ase);$To=r(aet,"bart"),aet.forEach(t),ITo=r(GAe," \u2014 "),VI=n(GAe,"A",{href:!0});var net=s(VI);qTo=r(net,"BartForCausalLM"),net.forEach(t),NTo=r(GAe," (BART model)"),GAe.forEach(t),jTo=i(q),V_=n(q,"LI",{});var OAe=s(V_);nse=n(OAe,"STRONG",{});var set=s(nse);DTo=r(set,"bert"),set.forEach(t),GTo=r(OAe," \u2014 "),XI=n(OAe,"A",{href:!0});var iet=s(XI);OTo=r(iet,"BertLMHeadModel"),iet.forEach(t),VTo=r(OAe," (BERT model)"),OAe.forEach(t),XTo=i(q),X_=n(q,"LI",{});var VAe=s(X_);sse=n(VAe,"STRONG",{});var det=s(sse);zTo=r(det,"bert-generation"),det.forEach(t),QTo=r(VAe," \u2014 "),zI=n(VAe,"A",{href:!0});var cet=s(zI);WTo=r(cet,"BertGenerationDecoder"),cet.forEach(t),HTo=r(VAe," (Bert Generation model)"),VAe.forEach(t),UTo=i(q),z_=n(q,"LI",{});var XAe=s(z_);lse=n(XAe,"STRONG",{});var met=s(lse);JTo=r(met,"big_bird"),met.forEach(t),YTo=r(XAe," \u2014 "),QI=n(XAe,"A",{href:!0});var fet=s(QI);KTo=r(fet,"BigBirdForCausalLM"),fet.forEach(t),ZTo=r(XAe," (BigBird model)"),XAe.forEach(t),eMo=i(q),Q_=n(q,"LI",{});var zAe=s(Q_);ise=n(zAe,"STRONG",{});var get=s(ise);oMo=r(get,"bigbird_pegasus"),get.forEach(t),rMo=r(zAe," \u2014 "),WI=n(zAe,"A",{href:!0});var het=s(WI);tMo=r(het,"BigBirdPegasusForCausalLM"),het.forEach(t),aMo=r(zAe," (BigBirdPegasus model)"),zAe.forEach(t),nMo=i(q),W_=n(q,"LI",{});var QAe=s(W_);dse=n(QAe,"STRONG",{});var uet=s(dse);sMo=r(uet,"blenderbot"),uet.forEach(t),lMo=r(QAe," \u2014 "),HI=n(QAe,"A",{href:!0});var pet=s(HI);iMo=r(pet,"BlenderbotForCausalLM"),pet.forEach(t),dMo=r(QAe," (Blenderbot model)"),QAe.forEach(t),cMo=i(q),H_=n(q,"LI",{});var WAe=s(H_);cse=n(WAe,"STRONG",{});var _et=s(cse);mMo=r(_et,"blenderbot-small"),_et.forEach(t),fMo=r(WAe," \u2014 "),UI=n(WAe,"A",{href:!0});var bet=s(UI);gMo=r(bet,"BlenderbotSmallForCausalLM"),bet.forEach(t),hMo=r(WAe," (BlenderbotSmall model)"),WAe.forEach(t),uMo=i(q),U_=n(q,"LI",{});var HAe=s(U_);mse=n(HAe,"STRONG",{});var vet=s(mse);pMo=r(vet,"camembert"),vet.forEach(t),_Mo=r(HAe," \u2014 "),JI=n(HAe,"A",{href:!0});var Fet=s(JI);bMo=r(Fet,"CamembertForCausalLM"),Fet.forEach(t),vMo=r(HAe," (CamemBERT model)"),HAe.forEach(t),FMo=i(q),J_=n(q,"LI",{});var UAe=s(J_);fse=n(UAe,"STRONG",{});var Tet=s(fse);TMo=r(Tet,"ctrl"),Tet.forEach(t),MMo=r(UAe," \u2014 "),YI=n(UAe,"A",{href:!0});var Met=s(YI);EMo=r(Met,"CTRLLMHeadModel"),Met.forEach(t),CMo=r(UAe," (CTRL model)"),UAe.forEach(t),wMo=i(q),Y_=n(q,"LI",{});var JAe=s(Y_);gse=n(JAe,"STRONG",{});var Eet=s(gse);AMo=r(Eet,"data2vec-text"),Eet.forEach(t),yMo=r(JAe," \u2014 "),KI=n(JAe,"A",{href:!0});var Cet=s(KI);LMo=r(Cet,"Data2VecTextForCausalLM"),Cet.forEach(t),xMo=r(JAe," (Data2VecText model)"),JAe.forEach(t),kMo=i(q),K_=n(q,"LI",{});var YAe=s(K_);hse=n(YAe,"STRONG",{});var wet=s(hse);SMo=r(wet,"electra"),wet.forEach(t),RMo=r(YAe," \u2014 "),ZI=n(YAe,"A",{href:!0});var Aet=s(ZI);BMo=r(Aet,"ElectraForCausalLM"),Aet.forEach(t),PMo=r(YAe," (ELECTRA model)"),YAe.forEach(t),$Mo=i(q),Z_=n(q,"LI",{});var KAe=s(Z_);use=n(KAe,"STRONG",{});var yet=s(use);IMo=r(yet,"gpt2"),yet.forEach(t),qMo=r(KAe," \u2014 "),eq=n(KAe,"A",{href:!0});var Let=s(eq);NMo=r(Let,"GPT2LMHeadModel"),Let.forEach(t),jMo=r(KAe," (OpenAI GPT-2 model)"),KAe.forEach(t),DMo=i(q),eb=n(q,"LI",{});var ZAe=s(eb);pse=n(ZAe,"STRONG",{});var xet=s(pse);GMo=r(xet,"gpt_neo"),xet.forEach(t),OMo=r(ZAe," \u2014 "),oq=n(ZAe,"A",{href:!0});var ket=s(oq);VMo=r(ket,"GPTNeoForCausalLM"),ket.forEach(t),XMo=r(ZAe," (GPT Neo model)"),ZAe.forEach(t),zMo=i(q),ob=n(q,"LI",{});var e0e=s(ob);_se=n(e0e,"STRONG",{});var Set=s(_se);QMo=r(Set,"gptj"),Set.forEach(t),WMo=r(e0e," \u2014 "),rq=n(e0e,"A",{href:!0});var Ret=s(rq);HMo=r(Ret,"GPTJForCausalLM"),Ret.forEach(t),UMo=r(e0e," (GPT-J model)"),e0e.forEach(t),JMo=i(q),rb=n(q,"LI",{});var o0e=s(rb);bse=n(o0e,"STRONG",{});var Bet=s(bse);YMo=r(Bet,"marian"),Bet.forEach(t),KMo=r(o0e," \u2014 "),tq=n(o0e,"A",{href:!0});var Pet=s(tq);ZMo=r(Pet,"MarianForCausalLM"),Pet.forEach(t),e4o=r(o0e," (Marian model)"),o0e.forEach(t),o4o=i(q),tb=n(q,"LI",{});var r0e=s(tb);vse=n(r0e,"STRONG",{});var $et=s(vse);r4o=r($et,"mbart"),$et.forEach(t),t4o=r(r0e," \u2014 "),aq=n(r0e,"A",{href:!0});var Iet=s(aq);a4o=r(Iet,"MBartForCausalLM"),Iet.forEach(t),n4o=r(r0e," (mBART model)"),r0e.forEach(t),s4o=i(q),ab=n(q,"LI",{});var t0e=s(ab);Fse=n(t0e,"STRONG",{});var qet=s(Fse);l4o=r(qet,"megatron-bert"),qet.forEach(t),i4o=r(t0e," \u2014 "),nq=n(t0e,"A",{href:!0});var Net=s(nq);d4o=r(Net,"MegatronBertForCausalLM"),Net.forEach(t),c4o=r(t0e," (MegatronBert model)"),t0e.forEach(t),m4o=i(q),nb=n(q,"LI",{});var a0e=s(nb);Tse=n(a0e,"STRONG",{});var jet=s(Tse);f4o=r(jet,"openai-gpt"),jet.forEach(t),g4o=r(a0e," \u2014 "),sq=n(a0e,"A",{href:!0});var Det=s(sq);h4o=r(Det,"OpenAIGPTLMHeadModel"),Det.forEach(t),u4o=r(a0e," (OpenAI GPT model)"),a0e.forEach(t),p4o=i(q),sb=n(q,"LI",{});var n0e=s(sb);Mse=n(n0e,"STRONG",{});var Get=s(Mse);_4o=r(Get,"pegasus"),Get.forEach(t),b4o=r(n0e," \u2014 "),lq=n(n0e,"A",{href:!0});var Oet=s(lq);v4o=r(Oet,"PegasusForCausalLM"),Oet.forEach(t),F4o=r(n0e," (Pegasus model)"),n0e.forEach(t),T4o=i(q),lb=n(q,"LI",{});var s0e=s(lb);Ese=n(s0e,"STRONG",{});var Vet=s(Ese);M4o=r(Vet,"plbart"),Vet.forEach(t),E4o=r(s0e," \u2014 "),iq=n(s0e,"A",{href:!0});var Xet=s(iq);C4o=r(Xet,"PLBartForCausalLM"),Xet.forEach(t),w4o=r(s0e," (PLBart model)"),s0e.forEach(t),A4o=i(q),ib=n(q,"LI",{});var l0e=s(ib);Cse=n(l0e,"STRONG",{});var zet=s(Cse);y4o=r(zet,"prophetnet"),zet.forEach(t),L4o=r(l0e," \u2014 "),dq=n(l0e,"A",{href:!0});var Qet=s(dq);x4o=r(Qet,"ProphetNetForCausalLM"),Qet.forEach(t),k4o=r(l0e," (ProphetNet model)"),l0e.forEach(t),S4o=i(q),db=n(q,"LI",{});var i0e=s(db);wse=n(i0e,"STRONG",{});var Wet=s(wse);R4o=r(Wet,"qdqbert"),Wet.forEach(t),B4o=r(i0e," \u2014 "),cq=n(i0e,"A",{href:!0});var Het=s(cq);P4o=r(Het,"QDQBertLMHeadModel"),Het.forEach(t),$4o=r(i0e," (QDQBert model)"),i0e.forEach(t),I4o=i(q),cb=n(q,"LI",{});var d0e=s(cb);Ase=n(d0e,"STRONG",{});var Uet=s(Ase);q4o=r(Uet,"reformer"),Uet.forEach(t),N4o=r(d0e," \u2014 "),mq=n(d0e,"A",{href:!0});var Jet=s(mq);j4o=r(Jet,"ReformerModelWithLMHead"),Jet.forEach(t),D4o=r(d0e," (Reformer model)"),d0e.forEach(t),G4o=i(q),mb=n(q,"LI",{});var c0e=s(mb);yse=n(c0e,"STRONG",{});var Yet=s(yse);O4o=r(Yet,"rembert"),Yet.forEach(t),V4o=r(c0e," \u2014 "),fq=n(c0e,"A",{href:!0});var Ket=s(fq);X4o=r(Ket,"RemBertForCausalLM"),Ket.forEach(t),z4o=r(c0e," (RemBERT model)"),c0e.forEach(t),Q4o=i(q),fb=n(q,"LI",{});var m0e=s(fb);Lse=n(m0e,"STRONG",{});var Zet=s(Lse);W4o=r(Zet,"roberta"),Zet.forEach(t),H4o=r(m0e," \u2014 "),gq=n(m0e,"A",{href:!0});var eot=s(gq);U4o=r(eot,"RobertaForCausalLM"),eot.forEach(t),J4o=r(m0e," (RoBERTa model)"),m0e.forEach(t),Y4o=i(q),gb=n(q,"LI",{});var f0e=s(gb);xse=n(f0e,"STRONG",{});var oot=s(xse);K4o=r(oot,"roformer"),oot.forEach(t),Z4o=r(f0e," \u2014 "),hq=n(f0e,"A",{href:!0});var rot=s(hq);eEo=r(rot,"RoFormerForCausalLM"),rot.forEach(t),oEo=r(f0e," (RoFormer model)"),f0e.forEach(t),rEo=i(q),hb=n(q,"LI",{});var g0e=s(hb);kse=n(g0e,"STRONG",{});var tot=s(kse);tEo=r(tot,"speech_to_text_2"),tot.forEach(t),aEo=r(g0e," \u2014 "),uq=n(g0e,"A",{href:!0});var aot=s(uq);nEo=r(aot,"Speech2Text2ForCausalLM"),aot.forEach(t),sEo=r(g0e," (Speech2Text2 model)"),g0e.forEach(t),lEo=i(q),ub=n(q,"LI",{});var h0e=s(ub);Sse=n(h0e,"STRONG",{});var not=s(Sse);iEo=r(not,"transfo-xl"),not.forEach(t),dEo=r(h0e," \u2014 "),pq=n(h0e,"A",{href:!0});var sot=s(pq);cEo=r(sot,"TransfoXLLMHeadModel"),sot.forEach(t),mEo=r(h0e," (Transformer-XL model)"),h0e.forEach(t),fEo=i(q),pb=n(q,"LI",{});var u0e=s(pb);Rse=n(u0e,"STRONG",{});var lot=s(Rse);gEo=r(lot,"trocr"),lot.forEach(t),hEo=r(u0e," \u2014 "),_q=n(u0e,"A",{href:!0});var iot=s(_q);uEo=r(iot,"TrOCRForCausalLM"),iot.forEach(t),pEo=r(u0e," (TrOCR model)"),u0e.forEach(t),_Eo=i(q),_b=n(q,"LI",{});var p0e=s(_b);Bse=n(p0e,"STRONG",{});var dot=s(Bse);bEo=r(dot,"xglm"),dot.forEach(t),vEo=r(p0e," \u2014 "),bq=n(p0e,"A",{href:!0});var cot=s(bq);FEo=r(cot,"XGLMForCausalLM"),cot.forEach(t),TEo=r(p0e," (XGLM model)"),p0e.forEach(t),MEo=i(q),bb=n(q,"LI",{});var _0e=s(bb);Pse=n(_0e,"STRONG",{});var mot=s(Pse);EEo=r(mot,"xlm"),mot.forEach(t),CEo=r(_0e," \u2014 "),vq=n(_0e,"A",{href:!0});var fot=s(vq);wEo=r(fot,"XLMWithLMHeadModel"),fot.forEach(t),AEo=r(_0e," (XLM model)"),_0e.forEach(t),yEo=i(q),vb=n(q,"LI",{});var b0e=s(vb);$se=n(b0e,"STRONG",{});var got=s($se);LEo=r(got,"xlm-prophetnet"),got.forEach(t),xEo=r(b0e," \u2014 "),Fq=n(b0e,"A",{href:!0});var hot=s(Fq);kEo=r(hot,"XLMProphetNetForCausalLM"),hot.forEach(t),SEo=r(b0e," (XLMProphetNet model)"),b0e.forEach(t),REo=i(q),Fb=n(q,"LI",{});var v0e=s(Fb);Ise=n(v0e,"STRONG",{});var uot=s(Ise);BEo=r(uot,"xlm-roberta"),uot.forEach(t),PEo=r(v0e," \u2014 "),Tq=n(v0e,"A",{href:!0});var pot=s(Tq);$Eo=r(pot,"XLMRobertaForCausalLM"),pot.forEach(t),IEo=r(v0e," (XLM-RoBERTa model)"),v0e.forEach(t),qEo=i(q),Tb=n(q,"LI",{});var F0e=s(Tb);qse=n(F0e,"STRONG",{});var _ot=s(qse);NEo=r(_ot,"xlm-roberta-xl"),_ot.forEach(t),jEo=r(F0e," \u2014 "),Mq=n(F0e,"A",{href:!0});var bot=s(Mq);DEo=r(bot,"XLMRobertaXLForCausalLM"),bot.forEach(t),GEo=r(F0e," (XLM-RoBERTa-XL model)"),F0e.forEach(t),OEo=i(q),Mb=n(q,"LI",{});var T0e=s(Mb);Nse=n(T0e,"STRONG",{});var vot=s(Nse);VEo=r(vot,"xlnet"),vot.forEach(t),XEo=r(T0e," \u2014 "),Eq=n(T0e,"A",{href:!0});var Fot=s(Eq);zEo=r(Fot,"XLNetLMHeadModel"),Fot.forEach(t),QEo=r(T0e," (XLNet model)"),T0e.forEach(t),q.forEach(t),WEo=i(Ot),Eb=n(Ot,"P",{});var M0e=s(Eb);HEo=r(M0e,"The model is set in evaluation mode by default using "),jse=n(M0e,"CODE",{});var Tot=s(jse);UEo=r(Tot,"model.eval()"),Tot.forEach(t),JEo=r(M0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dse=n(M0e,"CODE",{});var Mot=s(Dse);YEo=r(Mot,"model.train()"),Mot.forEach(t),M0e.forEach(t),KEo=i(Ot),Gse=n(Ot,"P",{});var Eot=s(Gse);ZEo=r(Eot,"Examples:"),Eot.forEach(t),e5o=i(Ot),f(zw.$$.fragment,Ot),Ot.forEach(t),nl.forEach(t),bPe=i(c),hd=n(c,"H2",{class:!0});var yIe=s(hd);Cb=n(yIe,"A",{id:!0,class:!0,href:!0});var Cot=s(Cb);Ose=n(Cot,"SPAN",{});var wot=s(Ose);f(Qw.$$.fragment,wot),wot.forEach(t),Cot.forEach(t),o5o=i(yIe),Vse=n(yIe,"SPAN",{});var Aot=s(Vse);r5o=r(Aot,"AutoModelForMaskedLM"),Aot.forEach(t),yIe.forEach(t),vPe=i(c),Zo=n(c,"DIV",{class:!0});var ll=s(Zo);f(Ww.$$.fragment,ll),t5o=i(ll),ud=n(ll,"P",{});var MJ=s(ud);a5o=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cq=n(MJ,"A",{href:!0});var yot=s(Cq);n5o=r(yot,"from_pretrained()"),yot.forEach(t),s5o=r(MJ," class method or the "),wq=n(MJ,"A",{href:!0});var Lot=s(wq);l5o=r(Lot,"from_config()"),Lot.forEach(t),i5o=r(MJ,` class
method.`),MJ.forEach(t),d5o=i(ll),Hw=n(ll,"P",{});var LIe=s(Hw);c5o=r(LIe,"This class cannot be instantiated directly using "),Xse=n(LIe,"CODE",{});var xot=s(Xse);m5o=r(xot,"__init__()"),xot.forEach(t),f5o=r(LIe," (throws an error)."),LIe.forEach(t),g5o=i(ll),Wr=n(ll,"DIV",{class:!0});var il=s(Wr);f(Uw.$$.fragment,il),h5o=i(il),zse=n(il,"P",{});var kot=s(zse);u5o=r(kot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kot.forEach(t),p5o=i(il),pd=n(il,"P",{});var EJ=s(pd);_5o=r(EJ,`Note:
Loading a model from its configuration file does `),Qse=n(EJ,"STRONG",{});var Sot=s(Qse);b5o=r(Sot,"not"),Sot.forEach(t),v5o=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=n(EJ,"A",{href:!0});var Rot=s(Aq);F5o=r(Rot,"from_pretrained()"),Rot.forEach(t),T5o=r(EJ," to load the model weights."),EJ.forEach(t),M5o=i(il),Wse=n(il,"P",{});var Bot=s(Wse);E5o=r(Bot,"Examples:"),Bot.forEach(t),C5o=i(il),f(Jw.$$.fragment,il),il.forEach(t),w5o=i(ll),Ge=n(ll,"DIV",{class:!0});var Vt=s(Ge);f(Yw.$$.fragment,Vt),A5o=i(Vt),Hse=n(Vt,"P",{});var Pot=s(Hse);y5o=r(Pot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pot.forEach(t),L5o=i(Vt),Wa=n(Vt,"P",{});var YC=s(Wa);x5o=r(YC,"The model class to instantiate is selected based on the "),Use=n(YC,"CODE",{});var $ot=s(Use);k5o=r($ot,"model_type"),$ot.forEach(t),S5o=r(YC,` property of the config object (either
passed as an argument or loaded from `),Jse=n(YC,"CODE",{});var Iot=s(Jse);R5o=r(Iot,"pretrained_model_name_or_path"),Iot.forEach(t),B5o=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=n(YC,"CODE",{});var qot=s(Yse);P5o=r(qot,"pretrained_model_name_or_path"),qot.forEach(t),$5o=r(YC,":"),YC.forEach(t),I5o=i(Vt),I=n(Vt,"UL",{});var N=s(I);wb=n(N,"LI",{});var E0e=s(wb);Kse=n(E0e,"STRONG",{});var Not=s(Kse);q5o=r(Not,"albert"),Not.forEach(t),N5o=r(E0e," \u2014 "),yq=n(E0e,"A",{href:!0});var jot=s(yq);j5o=r(jot,"AlbertForMaskedLM"),jot.forEach(t),D5o=r(E0e," (ALBERT model)"),E0e.forEach(t),G5o=i(N),Ab=n(N,"LI",{});var C0e=s(Ab);Zse=n(C0e,"STRONG",{});var Dot=s(Zse);O5o=r(Dot,"bart"),Dot.forEach(t),V5o=r(C0e," \u2014 "),Lq=n(C0e,"A",{href:!0});var Got=s(Lq);X5o=r(Got,"BartForConditionalGeneration"),Got.forEach(t),z5o=r(C0e," (BART model)"),C0e.forEach(t),Q5o=i(N),yb=n(N,"LI",{});var w0e=s(yb);ele=n(w0e,"STRONG",{});var Oot=s(ele);W5o=r(Oot,"bert"),Oot.forEach(t),H5o=r(w0e," \u2014 "),xq=n(w0e,"A",{href:!0});var Vot=s(xq);U5o=r(Vot,"BertForMaskedLM"),Vot.forEach(t),J5o=r(w0e," (BERT model)"),w0e.forEach(t),Y5o=i(N),Lb=n(N,"LI",{});var A0e=s(Lb);ole=n(A0e,"STRONG",{});var Xot=s(ole);K5o=r(Xot,"big_bird"),Xot.forEach(t),Z5o=r(A0e," \u2014 "),kq=n(A0e,"A",{href:!0});var zot=s(kq);e3o=r(zot,"BigBirdForMaskedLM"),zot.forEach(t),o3o=r(A0e," (BigBird model)"),A0e.forEach(t),r3o=i(N),xb=n(N,"LI",{});var y0e=s(xb);rle=n(y0e,"STRONG",{});var Qot=s(rle);t3o=r(Qot,"camembert"),Qot.forEach(t),a3o=r(y0e," \u2014 "),Sq=n(y0e,"A",{href:!0});var Wot=s(Sq);n3o=r(Wot,"CamembertForMaskedLM"),Wot.forEach(t),s3o=r(y0e," (CamemBERT model)"),y0e.forEach(t),l3o=i(N),kb=n(N,"LI",{});var L0e=s(kb);tle=n(L0e,"STRONG",{});var Hot=s(tle);i3o=r(Hot,"convbert"),Hot.forEach(t),d3o=r(L0e," \u2014 "),Rq=n(L0e,"A",{href:!0});var Uot=s(Rq);c3o=r(Uot,"ConvBertForMaskedLM"),Uot.forEach(t),m3o=r(L0e," (ConvBERT model)"),L0e.forEach(t),f3o=i(N),Sb=n(N,"LI",{});var x0e=s(Sb);ale=n(x0e,"STRONG",{});var Jot=s(ale);g3o=r(Jot,"data2vec-text"),Jot.forEach(t),h3o=r(x0e," \u2014 "),Bq=n(x0e,"A",{href:!0});var Yot=s(Bq);u3o=r(Yot,"Data2VecTextForMaskedLM"),Yot.forEach(t),p3o=r(x0e," (Data2VecText model)"),x0e.forEach(t),_3o=i(N),Rb=n(N,"LI",{});var k0e=s(Rb);nle=n(k0e,"STRONG",{});var Kot=s(nle);b3o=r(Kot,"deberta"),Kot.forEach(t),v3o=r(k0e," \u2014 "),Pq=n(k0e,"A",{href:!0});var Zot=s(Pq);F3o=r(Zot,"DebertaForMaskedLM"),Zot.forEach(t),T3o=r(k0e," (DeBERTa model)"),k0e.forEach(t),M3o=i(N),Bb=n(N,"LI",{});var S0e=s(Bb);sle=n(S0e,"STRONG",{});var ert=s(sle);E3o=r(ert,"deberta-v2"),ert.forEach(t),C3o=r(S0e," \u2014 "),$q=n(S0e,"A",{href:!0});var ort=s($q);w3o=r(ort,"DebertaV2ForMaskedLM"),ort.forEach(t),A3o=r(S0e," (DeBERTa-v2 model)"),S0e.forEach(t),y3o=i(N),Pb=n(N,"LI",{});var R0e=s(Pb);lle=n(R0e,"STRONG",{});var rrt=s(lle);L3o=r(rrt,"distilbert"),rrt.forEach(t),x3o=r(R0e," \u2014 "),Iq=n(R0e,"A",{href:!0});var trt=s(Iq);k3o=r(trt,"DistilBertForMaskedLM"),trt.forEach(t),S3o=r(R0e," (DistilBERT model)"),R0e.forEach(t),R3o=i(N),$b=n(N,"LI",{});var B0e=s($b);ile=n(B0e,"STRONG",{});var art=s(ile);B3o=r(art,"electra"),art.forEach(t),P3o=r(B0e," \u2014 "),qq=n(B0e,"A",{href:!0});var nrt=s(qq);$3o=r(nrt,"ElectraForMaskedLM"),nrt.forEach(t),I3o=r(B0e," (ELECTRA model)"),B0e.forEach(t),q3o=i(N),Ib=n(N,"LI",{});var P0e=s(Ib);dle=n(P0e,"STRONG",{});var srt=s(dle);N3o=r(srt,"flaubert"),srt.forEach(t),j3o=r(P0e," \u2014 "),Nq=n(P0e,"A",{href:!0});var lrt=s(Nq);D3o=r(lrt,"FlaubertWithLMHeadModel"),lrt.forEach(t),G3o=r(P0e," (FlauBERT model)"),P0e.forEach(t),O3o=i(N),qb=n(N,"LI",{});var $0e=s(qb);cle=n($0e,"STRONG",{});var irt=s(cle);V3o=r(irt,"fnet"),irt.forEach(t),X3o=r($0e," \u2014 "),jq=n($0e,"A",{href:!0});var drt=s(jq);z3o=r(drt,"FNetForMaskedLM"),drt.forEach(t),Q3o=r($0e," (FNet model)"),$0e.forEach(t),W3o=i(N),Nb=n(N,"LI",{});var I0e=s(Nb);mle=n(I0e,"STRONG",{});var crt=s(mle);H3o=r(crt,"funnel"),crt.forEach(t),U3o=r(I0e," \u2014 "),Dq=n(I0e,"A",{href:!0});var mrt=s(Dq);J3o=r(mrt,"FunnelForMaskedLM"),mrt.forEach(t),Y3o=r(I0e," (Funnel Transformer model)"),I0e.forEach(t),K3o=i(N),jb=n(N,"LI",{});var q0e=s(jb);fle=n(q0e,"STRONG",{});var frt=s(fle);Z3o=r(frt,"ibert"),frt.forEach(t),eCo=r(q0e," \u2014 "),Gq=n(q0e,"A",{href:!0});var grt=s(Gq);oCo=r(grt,"IBertForMaskedLM"),grt.forEach(t),rCo=r(q0e," (I-BERT model)"),q0e.forEach(t),tCo=i(N),Db=n(N,"LI",{});var N0e=s(Db);gle=n(N0e,"STRONG",{});var hrt=s(gle);aCo=r(hrt,"layoutlm"),hrt.forEach(t),nCo=r(N0e," \u2014 "),Oq=n(N0e,"A",{href:!0});var urt=s(Oq);sCo=r(urt,"LayoutLMForMaskedLM"),urt.forEach(t),lCo=r(N0e," (LayoutLM model)"),N0e.forEach(t),iCo=i(N),Gb=n(N,"LI",{});var j0e=s(Gb);hle=n(j0e,"STRONG",{});var prt=s(hle);dCo=r(prt,"longformer"),prt.forEach(t),cCo=r(j0e," \u2014 "),Vq=n(j0e,"A",{href:!0});var _rt=s(Vq);mCo=r(_rt,"LongformerForMaskedLM"),_rt.forEach(t),fCo=r(j0e," (Longformer model)"),j0e.forEach(t),gCo=i(N),Ob=n(N,"LI",{});var D0e=s(Ob);ule=n(D0e,"STRONG",{});var brt=s(ule);hCo=r(brt,"mbart"),brt.forEach(t),uCo=r(D0e," \u2014 "),Xq=n(D0e,"A",{href:!0});var vrt=s(Xq);pCo=r(vrt,"MBartForConditionalGeneration"),vrt.forEach(t),_Co=r(D0e," (mBART model)"),D0e.forEach(t),bCo=i(N),Vb=n(N,"LI",{});var G0e=s(Vb);ple=n(G0e,"STRONG",{});var Frt=s(ple);vCo=r(Frt,"megatron-bert"),Frt.forEach(t),FCo=r(G0e," \u2014 "),zq=n(G0e,"A",{href:!0});var Trt=s(zq);TCo=r(Trt,"MegatronBertForMaskedLM"),Trt.forEach(t),MCo=r(G0e," (MegatronBert model)"),G0e.forEach(t),ECo=i(N),Xb=n(N,"LI",{});var O0e=s(Xb);_le=n(O0e,"STRONG",{});var Mrt=s(_le);CCo=r(Mrt,"mobilebert"),Mrt.forEach(t),wCo=r(O0e," \u2014 "),Qq=n(O0e,"A",{href:!0});var Ert=s(Qq);ACo=r(Ert,"MobileBertForMaskedLM"),Ert.forEach(t),yCo=r(O0e," (MobileBERT model)"),O0e.forEach(t),LCo=i(N),zb=n(N,"LI",{});var V0e=s(zb);ble=n(V0e,"STRONG",{});var Crt=s(ble);xCo=r(Crt,"mpnet"),Crt.forEach(t),kCo=r(V0e," \u2014 "),Wq=n(V0e,"A",{href:!0});var wrt=s(Wq);SCo=r(wrt,"MPNetForMaskedLM"),wrt.forEach(t),RCo=r(V0e," (MPNet model)"),V0e.forEach(t),BCo=i(N),Qb=n(N,"LI",{});var X0e=s(Qb);vle=n(X0e,"STRONG",{});var Art=s(vle);PCo=r(Art,"nystromformer"),Art.forEach(t),$Co=r(X0e," \u2014 "),Hq=n(X0e,"A",{href:!0});var yrt=s(Hq);ICo=r(yrt,"NystromformerForMaskedLM"),yrt.forEach(t),qCo=r(X0e," (Nystromformer model)"),X0e.forEach(t),NCo=i(N),Wb=n(N,"LI",{});var z0e=s(Wb);Fle=n(z0e,"STRONG",{});var Lrt=s(Fle);jCo=r(Lrt,"perceiver"),Lrt.forEach(t),DCo=r(z0e," \u2014 "),Uq=n(z0e,"A",{href:!0});var xrt=s(Uq);GCo=r(xrt,"PerceiverForMaskedLM"),xrt.forEach(t),OCo=r(z0e," (Perceiver model)"),z0e.forEach(t),VCo=i(N),Hb=n(N,"LI",{});var Q0e=s(Hb);Tle=n(Q0e,"STRONG",{});var krt=s(Tle);XCo=r(krt,"qdqbert"),krt.forEach(t),zCo=r(Q0e," \u2014 "),Jq=n(Q0e,"A",{href:!0});var Srt=s(Jq);QCo=r(Srt,"QDQBertForMaskedLM"),Srt.forEach(t),WCo=r(Q0e," (QDQBert model)"),Q0e.forEach(t),HCo=i(N),Ub=n(N,"LI",{});var W0e=s(Ub);Mle=n(W0e,"STRONG",{});var Rrt=s(Mle);UCo=r(Rrt,"reformer"),Rrt.forEach(t),JCo=r(W0e," \u2014 "),Yq=n(W0e,"A",{href:!0});var Brt=s(Yq);YCo=r(Brt,"ReformerForMaskedLM"),Brt.forEach(t),KCo=r(W0e," (Reformer model)"),W0e.forEach(t),ZCo=i(N),Jb=n(N,"LI",{});var H0e=s(Jb);Ele=n(H0e,"STRONG",{});var Prt=s(Ele);e6o=r(Prt,"rembert"),Prt.forEach(t),o6o=r(H0e," \u2014 "),Kq=n(H0e,"A",{href:!0});var $rt=s(Kq);r6o=r($rt,"RemBertForMaskedLM"),$rt.forEach(t),t6o=r(H0e," (RemBERT model)"),H0e.forEach(t),a6o=i(N),Yb=n(N,"LI",{});var U0e=s(Yb);Cle=n(U0e,"STRONG",{});var Irt=s(Cle);n6o=r(Irt,"roberta"),Irt.forEach(t),s6o=r(U0e," \u2014 "),Zq=n(U0e,"A",{href:!0});var qrt=s(Zq);l6o=r(qrt,"RobertaForMaskedLM"),qrt.forEach(t),i6o=r(U0e," (RoBERTa model)"),U0e.forEach(t),d6o=i(N),Kb=n(N,"LI",{});var J0e=s(Kb);wle=n(J0e,"STRONG",{});var Nrt=s(wle);c6o=r(Nrt,"roformer"),Nrt.forEach(t),m6o=r(J0e," \u2014 "),eN=n(J0e,"A",{href:!0});var jrt=s(eN);f6o=r(jrt,"RoFormerForMaskedLM"),jrt.forEach(t),g6o=r(J0e," (RoFormer model)"),J0e.forEach(t),h6o=i(N),Zb=n(N,"LI",{});var Y0e=s(Zb);Ale=n(Y0e,"STRONG",{});var Drt=s(Ale);u6o=r(Drt,"squeezebert"),Drt.forEach(t),p6o=r(Y0e," \u2014 "),oN=n(Y0e,"A",{href:!0});var Grt=s(oN);_6o=r(Grt,"SqueezeBertForMaskedLM"),Grt.forEach(t),b6o=r(Y0e," (SqueezeBERT model)"),Y0e.forEach(t),v6o=i(N),e2=n(N,"LI",{});var K0e=s(e2);yle=n(K0e,"STRONG",{});var Ort=s(yle);F6o=r(Ort,"tapas"),Ort.forEach(t),T6o=r(K0e," \u2014 "),rN=n(K0e,"A",{href:!0});var Vrt=s(rN);M6o=r(Vrt,"TapasForMaskedLM"),Vrt.forEach(t),E6o=r(K0e," (TAPAS model)"),K0e.forEach(t),C6o=i(N),o2=n(N,"LI",{});var Z0e=s(o2);Lle=n(Z0e,"STRONG",{});var Xrt=s(Lle);w6o=r(Xrt,"wav2vec2"),Xrt.forEach(t),A6o=r(Z0e," \u2014 "),xle=n(Z0e,"CODE",{});var zrt=s(xle);y6o=r(zrt,"Wav2Vec2ForMaskedLM"),zrt.forEach(t),L6o=r(Z0e," (Wav2Vec2 model)"),Z0e.forEach(t),x6o=i(N),r2=n(N,"LI",{});var eye=s(r2);kle=n(eye,"STRONG",{});var Qrt=s(kle);k6o=r(Qrt,"xlm"),Qrt.forEach(t),S6o=r(eye," \u2014 "),tN=n(eye,"A",{href:!0});var Wrt=s(tN);R6o=r(Wrt,"XLMWithLMHeadModel"),Wrt.forEach(t),B6o=r(eye," (XLM model)"),eye.forEach(t),P6o=i(N),t2=n(N,"LI",{});var oye=s(t2);Sle=n(oye,"STRONG",{});var Hrt=s(Sle);$6o=r(Hrt,"xlm-roberta"),Hrt.forEach(t),I6o=r(oye," \u2014 "),aN=n(oye,"A",{href:!0});var Urt=s(aN);q6o=r(Urt,"XLMRobertaForMaskedLM"),Urt.forEach(t),N6o=r(oye," (XLM-RoBERTa model)"),oye.forEach(t),j6o=i(N),a2=n(N,"LI",{});var rye=s(a2);Rle=n(rye,"STRONG",{});var Jrt=s(Rle);D6o=r(Jrt,"xlm-roberta-xl"),Jrt.forEach(t),G6o=r(rye," \u2014 "),nN=n(rye,"A",{href:!0});var Yrt=s(nN);O6o=r(Yrt,"XLMRobertaXLForMaskedLM"),Yrt.forEach(t),V6o=r(rye," (XLM-RoBERTa-XL model)"),rye.forEach(t),X6o=i(N),n2=n(N,"LI",{});var tye=s(n2);Ble=n(tye,"STRONG",{});var Krt=s(Ble);z6o=r(Krt,"yoso"),Krt.forEach(t),Q6o=r(tye," \u2014 "),sN=n(tye,"A",{href:!0});var Zrt=s(sN);W6o=r(Zrt,"YosoForMaskedLM"),Zrt.forEach(t),H6o=r(tye," (YOSO model)"),tye.forEach(t),N.forEach(t),U6o=i(Vt),s2=n(Vt,"P",{});var aye=s(s2);J6o=r(aye,"The model is set in evaluation mode by default using "),Ple=n(aye,"CODE",{});var ett=s(Ple);Y6o=r(ett,"model.eval()"),ett.forEach(t),K6o=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=n(aye,"CODE",{});var ott=s($le);Z6o=r(ott,"model.train()"),ott.forEach(t),aye.forEach(t),ewo=i(Vt),Ile=n(Vt,"P",{});var rtt=s(Ile);owo=r(rtt,"Examples:"),rtt.forEach(t),rwo=i(Vt),f(Kw.$$.fragment,Vt),Vt.forEach(t),ll.forEach(t),FPe=i(c),_d=n(c,"H2",{class:!0});var xIe=s(_d);l2=n(xIe,"A",{id:!0,class:!0,href:!0});var ttt=s(l2);qle=n(ttt,"SPAN",{});var att=s(qle);f(Zw.$$.fragment,att),att.forEach(t),ttt.forEach(t),two=i(xIe),Nle=n(xIe,"SPAN",{});var ntt=s(Nle);awo=r(ntt,"AutoModelForSeq2SeqLM"),ntt.forEach(t),xIe.forEach(t),TPe=i(c),er=n(c,"DIV",{class:!0});var dl=s(er);f(eA.$$.fragment,dl),nwo=i(dl),bd=n(dl,"P",{});var CJ=s(bd);swo=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lN=n(CJ,"A",{href:!0});var stt=s(lN);lwo=r(stt,"from_pretrained()"),stt.forEach(t),iwo=r(CJ," class method or the "),iN=n(CJ,"A",{href:!0});var ltt=s(iN);dwo=r(ltt,"from_config()"),ltt.forEach(t),cwo=r(CJ,` class
method.`),CJ.forEach(t),mwo=i(dl),oA=n(dl,"P",{});var kIe=s(oA);fwo=r(kIe,"This class cannot be instantiated directly using "),jle=n(kIe,"CODE",{});var itt=s(jle);gwo=r(itt,"__init__()"),itt.forEach(t),hwo=r(kIe," (throws an error)."),kIe.forEach(t),uwo=i(dl),Hr=n(dl,"DIV",{class:!0});var cl=s(Hr);f(rA.$$.fragment,cl),pwo=i(cl),Dle=n(cl,"P",{});var dtt=s(Dle);_wo=r(dtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dtt.forEach(t),bwo=i(cl),vd=n(cl,"P",{});var wJ=s(vd);vwo=r(wJ,`Note:
Loading a model from its configuration file does `),Gle=n(wJ,"STRONG",{});var ctt=s(Gle);Fwo=r(ctt,"not"),ctt.forEach(t),Two=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=n(wJ,"A",{href:!0});var mtt=s(dN);Mwo=r(mtt,"from_pretrained()"),mtt.forEach(t),Ewo=r(wJ," to load the model weights."),wJ.forEach(t),Cwo=i(cl),Ole=n(cl,"P",{});var ftt=s(Ole);wwo=r(ftt,"Examples:"),ftt.forEach(t),Awo=i(cl),f(tA.$$.fragment,cl),cl.forEach(t),ywo=i(dl),Oe=n(dl,"DIV",{class:!0});var Xt=s(Oe);f(aA.$$.fragment,Xt),Lwo=i(Xt),Vle=n(Xt,"P",{});var gtt=s(Vle);xwo=r(gtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gtt.forEach(t),kwo=i(Xt),Ha=n(Xt,"P",{});var KC=s(Ha);Swo=r(KC,"The model class to instantiate is selected based on the "),Xle=n(KC,"CODE",{});var htt=s(Xle);Rwo=r(htt,"model_type"),htt.forEach(t),Bwo=r(KC,` property of the config object (either
passed as an argument or loaded from `),zle=n(KC,"CODE",{});var utt=s(zle);Pwo=r(utt,"pretrained_model_name_or_path"),utt.forEach(t),$wo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qle=n(KC,"CODE",{});var ptt=s(Qle);Iwo=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),qwo=r(KC,":"),KC.forEach(t),Nwo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);i2=n(le,"LI",{});var nye=s(i2);Wle=n(nye,"STRONG",{});var _tt=s(Wle);jwo=r(_tt,"bart"),_tt.forEach(t),Dwo=r(nye," \u2014 "),cN=n(nye,"A",{href:!0});var btt=s(cN);Gwo=r(btt,"BartForConditionalGeneration"),btt.forEach(t),Owo=r(nye," (BART model)"),nye.forEach(t),Vwo=i(le),d2=n(le,"LI",{});var sye=s(d2);Hle=n(sye,"STRONG",{});var vtt=s(Hle);Xwo=r(vtt,"bigbird_pegasus"),vtt.forEach(t),zwo=r(sye," \u2014 "),mN=n(sye,"A",{href:!0});var Ftt=s(mN);Qwo=r(Ftt,"BigBirdPegasusForConditionalGeneration"),Ftt.forEach(t),Wwo=r(sye," (BigBirdPegasus model)"),sye.forEach(t),Hwo=i(le),c2=n(le,"LI",{});var lye=s(c2);Ule=n(lye,"STRONG",{});var Ttt=s(Ule);Uwo=r(Ttt,"blenderbot"),Ttt.forEach(t),Jwo=r(lye," \u2014 "),fN=n(lye,"A",{href:!0});var Mtt=s(fN);Ywo=r(Mtt,"BlenderbotForConditionalGeneration"),Mtt.forEach(t),Kwo=r(lye," (Blenderbot model)"),lye.forEach(t),Zwo=i(le),m2=n(le,"LI",{});var iye=s(m2);Jle=n(iye,"STRONG",{});var Ett=s(Jle);eAo=r(Ett,"blenderbot-small"),Ett.forEach(t),oAo=r(iye," \u2014 "),gN=n(iye,"A",{href:!0});var Ctt=s(gN);rAo=r(Ctt,"BlenderbotSmallForConditionalGeneration"),Ctt.forEach(t),tAo=r(iye," (BlenderbotSmall model)"),iye.forEach(t),aAo=i(le),f2=n(le,"LI",{});var dye=s(f2);Yle=n(dye,"STRONG",{});var wtt=s(Yle);nAo=r(wtt,"encoder-decoder"),wtt.forEach(t),sAo=r(dye," \u2014 "),hN=n(dye,"A",{href:!0});var Att=s(hN);lAo=r(Att,"EncoderDecoderModel"),Att.forEach(t),iAo=r(dye," (Encoder decoder model)"),dye.forEach(t),dAo=i(le),g2=n(le,"LI",{});var cye=s(g2);Kle=n(cye,"STRONG",{});var ytt=s(Kle);cAo=r(ytt,"fsmt"),ytt.forEach(t),mAo=r(cye," \u2014 "),uN=n(cye,"A",{href:!0});var Ltt=s(uN);fAo=r(Ltt,"FSMTForConditionalGeneration"),Ltt.forEach(t),gAo=r(cye," (FairSeq Machine-Translation model)"),cye.forEach(t),hAo=i(le),h2=n(le,"LI",{});var mye=s(h2);Zle=n(mye,"STRONG",{});var xtt=s(Zle);uAo=r(xtt,"led"),xtt.forEach(t),pAo=r(mye," \u2014 "),pN=n(mye,"A",{href:!0});var ktt=s(pN);_Ao=r(ktt,"LEDForConditionalGeneration"),ktt.forEach(t),bAo=r(mye," (LED model)"),mye.forEach(t),vAo=i(le),u2=n(le,"LI",{});var fye=s(u2);eie=n(fye,"STRONG",{});var Stt=s(eie);FAo=r(Stt,"m2m_100"),Stt.forEach(t),TAo=r(fye," \u2014 "),_N=n(fye,"A",{href:!0});var Rtt=s(_N);MAo=r(Rtt,"M2M100ForConditionalGeneration"),Rtt.forEach(t),EAo=r(fye," (M2M100 model)"),fye.forEach(t),CAo=i(le),p2=n(le,"LI",{});var gye=s(p2);oie=n(gye,"STRONG",{});var Btt=s(oie);wAo=r(Btt,"marian"),Btt.forEach(t),AAo=r(gye," \u2014 "),bN=n(gye,"A",{href:!0});var Ptt=s(bN);yAo=r(Ptt,"MarianMTModel"),Ptt.forEach(t),LAo=r(gye," (Marian model)"),gye.forEach(t),xAo=i(le),_2=n(le,"LI",{});var hye=s(_2);rie=n(hye,"STRONG",{});var $tt=s(rie);kAo=r($tt,"mbart"),$tt.forEach(t),SAo=r(hye," \u2014 "),vN=n(hye,"A",{href:!0});var Itt=s(vN);RAo=r(Itt,"MBartForConditionalGeneration"),Itt.forEach(t),BAo=r(hye," (mBART model)"),hye.forEach(t),PAo=i(le),b2=n(le,"LI",{});var uye=s(b2);tie=n(uye,"STRONG",{});var qtt=s(tie);$Ao=r(qtt,"mt5"),qtt.forEach(t),IAo=r(uye," \u2014 "),FN=n(uye,"A",{href:!0});var Ntt=s(FN);qAo=r(Ntt,"MT5ForConditionalGeneration"),Ntt.forEach(t),NAo=r(uye," (mT5 model)"),uye.forEach(t),jAo=i(le),v2=n(le,"LI",{});var pye=s(v2);aie=n(pye,"STRONG",{});var jtt=s(aie);DAo=r(jtt,"pegasus"),jtt.forEach(t),GAo=r(pye," \u2014 "),TN=n(pye,"A",{href:!0});var Dtt=s(TN);OAo=r(Dtt,"PegasusForConditionalGeneration"),Dtt.forEach(t),VAo=r(pye," (Pegasus model)"),pye.forEach(t),XAo=i(le),F2=n(le,"LI",{});var _ye=s(F2);nie=n(_ye,"STRONG",{});var Gtt=s(nie);zAo=r(Gtt,"plbart"),Gtt.forEach(t),QAo=r(_ye," \u2014 "),MN=n(_ye,"A",{href:!0});var Ott=s(MN);WAo=r(Ott,"PLBartForConditionalGeneration"),Ott.forEach(t),HAo=r(_ye," (PLBart model)"),_ye.forEach(t),UAo=i(le),T2=n(le,"LI",{});var bye=s(T2);sie=n(bye,"STRONG",{});var Vtt=s(sie);JAo=r(Vtt,"prophetnet"),Vtt.forEach(t),YAo=r(bye," \u2014 "),EN=n(bye,"A",{href:!0});var Xtt=s(EN);KAo=r(Xtt,"ProphetNetForConditionalGeneration"),Xtt.forEach(t),ZAo=r(bye," (ProphetNet model)"),bye.forEach(t),e0o=i(le),M2=n(le,"LI",{});var vye=s(M2);lie=n(vye,"STRONG",{});var ztt=s(lie);o0o=r(ztt,"t5"),ztt.forEach(t),r0o=r(vye," \u2014 "),CN=n(vye,"A",{href:!0});var Qtt=s(CN);t0o=r(Qtt,"T5ForConditionalGeneration"),Qtt.forEach(t),a0o=r(vye," (T5 model)"),vye.forEach(t),n0o=i(le),E2=n(le,"LI",{});var Fye=s(E2);iie=n(Fye,"STRONG",{});var Wtt=s(iie);s0o=r(Wtt,"tapex"),Wtt.forEach(t),l0o=r(Fye," \u2014 "),wN=n(Fye,"A",{href:!0});var Htt=s(wN);i0o=r(Htt,"BartForConditionalGeneration"),Htt.forEach(t),d0o=r(Fye," (TAPEX model)"),Fye.forEach(t),c0o=i(le),C2=n(le,"LI",{});var Tye=s(C2);die=n(Tye,"STRONG",{});var Utt=s(die);m0o=r(Utt,"xlm-prophetnet"),Utt.forEach(t),f0o=r(Tye," \u2014 "),AN=n(Tye,"A",{href:!0});var Jtt=s(AN);g0o=r(Jtt,"XLMProphetNetForConditionalGeneration"),Jtt.forEach(t),h0o=r(Tye," (XLMProphetNet model)"),Tye.forEach(t),le.forEach(t),u0o=i(Xt),w2=n(Xt,"P",{});var Mye=s(w2);p0o=r(Mye,"The model is set in evaluation mode by default using "),cie=n(Mye,"CODE",{});var Ytt=s(cie);_0o=r(Ytt,"model.eval()"),Ytt.forEach(t),b0o=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(Mye,"CODE",{});var Ktt=s(mie);v0o=r(Ktt,"model.train()"),Ktt.forEach(t),Mye.forEach(t),F0o=i(Xt),fie=n(Xt,"P",{});var Ztt=s(fie);T0o=r(Ztt,"Examples:"),Ztt.forEach(t),M0o=i(Xt),f(nA.$$.fragment,Xt),Xt.forEach(t),dl.forEach(t),MPe=i(c),Fd=n(c,"H2",{class:!0});var SIe=s(Fd);A2=n(SIe,"A",{id:!0,class:!0,href:!0});var eat=s(A2);gie=n(eat,"SPAN",{});var oat=s(gie);f(sA.$$.fragment,oat),oat.forEach(t),eat.forEach(t),E0o=i(SIe),hie=n(SIe,"SPAN",{});var rat=s(hie);C0o=r(rat,"AutoModelForSequenceClassification"),rat.forEach(t),SIe.forEach(t),EPe=i(c),or=n(c,"DIV",{class:!0});var ml=s(or);f(lA.$$.fragment,ml),w0o=i(ml),Td=n(ml,"P",{});var AJ=s(Td);A0o=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yN=n(AJ,"A",{href:!0});var tat=s(yN);y0o=r(tat,"from_pretrained()"),tat.forEach(t),L0o=r(AJ," class method or the "),LN=n(AJ,"A",{href:!0});var aat=s(LN);x0o=r(aat,"from_config()"),aat.forEach(t),k0o=r(AJ,` class
method.`),AJ.forEach(t),S0o=i(ml),iA=n(ml,"P",{});var RIe=s(iA);R0o=r(RIe,"This class cannot be instantiated directly using "),uie=n(RIe,"CODE",{});var nat=s(uie);B0o=r(nat,"__init__()"),nat.forEach(t),P0o=r(RIe," (throws an error)."),RIe.forEach(t),$0o=i(ml),Ur=n(ml,"DIV",{class:!0});var fl=s(Ur);f(dA.$$.fragment,fl),I0o=i(fl),pie=n(fl,"P",{});var sat=s(pie);q0o=r(sat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sat.forEach(t),N0o=i(fl),Md=n(fl,"P",{});var yJ=s(Md);j0o=r(yJ,`Note:
Loading a model from its configuration file does `),_ie=n(yJ,"STRONG",{});var lat=s(_ie);D0o=r(lat,"not"),lat.forEach(t),G0o=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=n(yJ,"A",{href:!0});var iat=s(xN);O0o=r(iat,"from_pretrained()"),iat.forEach(t),V0o=r(yJ," to load the model weights."),yJ.forEach(t),X0o=i(fl),bie=n(fl,"P",{});var dat=s(bie);z0o=r(dat,"Examples:"),dat.forEach(t),Q0o=i(fl),f(cA.$$.fragment,fl),fl.forEach(t),W0o=i(ml),Ve=n(ml,"DIV",{class:!0});var zt=s(Ve);f(mA.$$.fragment,zt),H0o=i(zt),vie=n(zt,"P",{});var cat=s(vie);U0o=r(cat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cat.forEach(t),J0o=i(zt),Ua=n(zt,"P",{});var ZC=s(Ua);Y0o=r(ZC,"The model class to instantiate is selected based on the "),Fie=n(ZC,"CODE",{});var mat=s(Fie);K0o=r(mat,"model_type"),mat.forEach(t),Z0o=r(ZC,` property of the config object (either
passed as an argument or loaded from `),Tie=n(ZC,"CODE",{});var fat=s(Tie);eyo=r(fat,"pretrained_model_name_or_path"),fat.forEach(t),oyo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(ZC,"CODE",{});var gat=s(Mie);ryo=r(gat,"pretrained_model_name_or_path"),gat.forEach(t),tyo=r(ZC,":"),ZC.forEach(t),ayo=i(zt),y=n(zt,"UL",{});var L=s(y);y2=n(L,"LI",{});var Eye=s(y2);Eie=n(Eye,"STRONG",{});var hat=s(Eie);nyo=r(hat,"albert"),hat.forEach(t),syo=r(Eye," \u2014 "),kN=n(Eye,"A",{href:!0});var uat=s(kN);lyo=r(uat,"AlbertForSequenceClassification"),uat.forEach(t),iyo=r(Eye," (ALBERT model)"),Eye.forEach(t),dyo=i(L),L2=n(L,"LI",{});var Cye=s(L2);Cie=n(Cye,"STRONG",{});var pat=s(Cie);cyo=r(pat,"bart"),pat.forEach(t),myo=r(Cye," \u2014 "),SN=n(Cye,"A",{href:!0});var _at=s(SN);fyo=r(_at,"BartForSequenceClassification"),_at.forEach(t),gyo=r(Cye," (BART model)"),Cye.forEach(t),hyo=i(L),x2=n(L,"LI",{});var wye=s(x2);wie=n(wye,"STRONG",{});var bat=s(wie);uyo=r(bat,"bert"),bat.forEach(t),pyo=r(wye," \u2014 "),RN=n(wye,"A",{href:!0});var vat=s(RN);_yo=r(vat,"BertForSequenceClassification"),vat.forEach(t),byo=r(wye," (BERT model)"),wye.forEach(t),vyo=i(L),k2=n(L,"LI",{});var Aye=s(k2);Aie=n(Aye,"STRONG",{});var Fat=s(Aie);Fyo=r(Fat,"big_bird"),Fat.forEach(t),Tyo=r(Aye," \u2014 "),BN=n(Aye,"A",{href:!0});var Tat=s(BN);Myo=r(Tat,"BigBirdForSequenceClassification"),Tat.forEach(t),Eyo=r(Aye," (BigBird model)"),Aye.forEach(t),Cyo=i(L),S2=n(L,"LI",{});var yye=s(S2);yie=n(yye,"STRONG",{});var Mat=s(yie);wyo=r(Mat,"bigbird_pegasus"),Mat.forEach(t),Ayo=r(yye," \u2014 "),PN=n(yye,"A",{href:!0});var Eat=s(PN);yyo=r(Eat,"BigBirdPegasusForSequenceClassification"),Eat.forEach(t),Lyo=r(yye," (BigBirdPegasus model)"),yye.forEach(t),xyo=i(L),R2=n(L,"LI",{});var Lye=s(R2);Lie=n(Lye,"STRONG",{});var Cat=s(Lie);kyo=r(Cat,"camembert"),Cat.forEach(t),Syo=r(Lye," \u2014 "),$N=n(Lye,"A",{href:!0});var wat=s($N);Ryo=r(wat,"CamembertForSequenceClassification"),wat.forEach(t),Byo=r(Lye," (CamemBERT model)"),Lye.forEach(t),Pyo=i(L),B2=n(L,"LI",{});var xye=s(B2);xie=n(xye,"STRONG",{});var Aat=s(xie);$yo=r(Aat,"canine"),Aat.forEach(t),Iyo=r(xye," \u2014 "),IN=n(xye,"A",{href:!0});var yat=s(IN);qyo=r(yat,"CanineForSequenceClassification"),yat.forEach(t),Nyo=r(xye," (Canine model)"),xye.forEach(t),jyo=i(L),P2=n(L,"LI",{});var kye=s(P2);kie=n(kye,"STRONG",{});var Lat=s(kie);Dyo=r(Lat,"convbert"),Lat.forEach(t),Gyo=r(kye," \u2014 "),qN=n(kye,"A",{href:!0});var xat=s(qN);Oyo=r(xat,"ConvBertForSequenceClassification"),xat.forEach(t),Vyo=r(kye," (ConvBERT model)"),kye.forEach(t),Xyo=i(L),$2=n(L,"LI",{});var Sye=s($2);Sie=n(Sye,"STRONG",{});var kat=s(Sie);zyo=r(kat,"ctrl"),kat.forEach(t),Qyo=r(Sye," \u2014 "),NN=n(Sye,"A",{href:!0});var Sat=s(NN);Wyo=r(Sat,"CTRLForSequenceClassification"),Sat.forEach(t),Hyo=r(Sye," (CTRL model)"),Sye.forEach(t),Uyo=i(L),I2=n(L,"LI",{});var Rye=s(I2);Rie=n(Rye,"STRONG",{});var Rat=s(Rie);Jyo=r(Rat,"data2vec-text"),Rat.forEach(t),Yyo=r(Rye," \u2014 "),jN=n(Rye,"A",{href:!0});var Bat=s(jN);Kyo=r(Bat,"Data2VecTextForSequenceClassification"),Bat.forEach(t),Zyo=r(Rye," (Data2VecText model)"),Rye.forEach(t),e8o=i(L),q2=n(L,"LI",{});var Bye=s(q2);Bie=n(Bye,"STRONG",{});var Pat=s(Bie);o8o=r(Pat,"deberta"),Pat.forEach(t),r8o=r(Bye," \u2014 "),DN=n(Bye,"A",{href:!0});var $at=s(DN);t8o=r($at,"DebertaForSequenceClassification"),$at.forEach(t),a8o=r(Bye," (DeBERTa model)"),Bye.forEach(t),n8o=i(L),N2=n(L,"LI",{});var Pye=s(N2);Pie=n(Pye,"STRONG",{});var Iat=s(Pie);s8o=r(Iat,"deberta-v2"),Iat.forEach(t),l8o=r(Pye," \u2014 "),GN=n(Pye,"A",{href:!0});var qat=s(GN);i8o=r(qat,"DebertaV2ForSequenceClassification"),qat.forEach(t),d8o=r(Pye," (DeBERTa-v2 model)"),Pye.forEach(t),c8o=i(L),j2=n(L,"LI",{});var $ye=s(j2);$ie=n($ye,"STRONG",{});var Nat=s($ie);m8o=r(Nat,"distilbert"),Nat.forEach(t),f8o=r($ye," \u2014 "),ON=n($ye,"A",{href:!0});var jat=s(ON);g8o=r(jat,"DistilBertForSequenceClassification"),jat.forEach(t),h8o=r($ye," (DistilBERT model)"),$ye.forEach(t),u8o=i(L),D2=n(L,"LI",{});var Iye=s(D2);Iie=n(Iye,"STRONG",{});var Dat=s(Iie);p8o=r(Dat,"electra"),Dat.forEach(t),_8o=r(Iye," \u2014 "),VN=n(Iye,"A",{href:!0});var Gat=s(VN);b8o=r(Gat,"ElectraForSequenceClassification"),Gat.forEach(t),v8o=r(Iye," (ELECTRA model)"),Iye.forEach(t),F8o=i(L),G2=n(L,"LI",{});var qye=s(G2);qie=n(qye,"STRONG",{});var Oat=s(qie);T8o=r(Oat,"flaubert"),Oat.forEach(t),M8o=r(qye," \u2014 "),XN=n(qye,"A",{href:!0});var Vat=s(XN);E8o=r(Vat,"FlaubertForSequenceClassification"),Vat.forEach(t),C8o=r(qye," (FlauBERT model)"),qye.forEach(t),w8o=i(L),O2=n(L,"LI",{});var Nye=s(O2);Nie=n(Nye,"STRONG",{});var Xat=s(Nie);A8o=r(Xat,"fnet"),Xat.forEach(t),y8o=r(Nye," \u2014 "),zN=n(Nye,"A",{href:!0});var zat=s(zN);L8o=r(zat,"FNetForSequenceClassification"),zat.forEach(t),x8o=r(Nye," (FNet model)"),Nye.forEach(t),k8o=i(L),V2=n(L,"LI",{});var jye=s(V2);jie=n(jye,"STRONG",{});var Qat=s(jie);S8o=r(Qat,"funnel"),Qat.forEach(t),R8o=r(jye," \u2014 "),QN=n(jye,"A",{href:!0});var Wat=s(QN);B8o=r(Wat,"FunnelForSequenceClassification"),Wat.forEach(t),P8o=r(jye," (Funnel Transformer model)"),jye.forEach(t),$8o=i(L),X2=n(L,"LI",{});var Dye=s(X2);Die=n(Dye,"STRONG",{});var Hat=s(Die);I8o=r(Hat,"gpt2"),Hat.forEach(t),q8o=r(Dye," \u2014 "),WN=n(Dye,"A",{href:!0});var Uat=s(WN);N8o=r(Uat,"GPT2ForSequenceClassification"),Uat.forEach(t),j8o=r(Dye," (OpenAI GPT-2 model)"),Dye.forEach(t),D8o=i(L),z2=n(L,"LI",{});var Gye=s(z2);Gie=n(Gye,"STRONG",{});var Jat=s(Gie);G8o=r(Jat,"gpt_neo"),Jat.forEach(t),O8o=r(Gye," \u2014 "),HN=n(Gye,"A",{href:!0});var Yat=s(HN);V8o=r(Yat,"GPTNeoForSequenceClassification"),Yat.forEach(t),X8o=r(Gye," (GPT Neo model)"),Gye.forEach(t),z8o=i(L),Q2=n(L,"LI",{});var Oye=s(Q2);Oie=n(Oye,"STRONG",{});var Kat=s(Oie);Q8o=r(Kat,"gptj"),Kat.forEach(t),W8o=r(Oye," \u2014 "),UN=n(Oye,"A",{href:!0});var Zat=s(UN);H8o=r(Zat,"GPTJForSequenceClassification"),Zat.forEach(t),U8o=r(Oye," (GPT-J model)"),Oye.forEach(t),J8o=i(L),W2=n(L,"LI",{});var Vye=s(W2);Vie=n(Vye,"STRONG",{});var ent=s(Vie);Y8o=r(ent,"ibert"),ent.forEach(t),K8o=r(Vye," \u2014 "),JN=n(Vye,"A",{href:!0});var ont=s(JN);Z8o=r(ont,"IBertForSequenceClassification"),ont.forEach(t),eLo=r(Vye," (I-BERT model)"),Vye.forEach(t),oLo=i(L),H2=n(L,"LI",{});var Xye=s(H2);Xie=n(Xye,"STRONG",{});var rnt=s(Xie);rLo=r(rnt,"layoutlm"),rnt.forEach(t),tLo=r(Xye," \u2014 "),YN=n(Xye,"A",{href:!0});var tnt=s(YN);aLo=r(tnt,"LayoutLMForSequenceClassification"),tnt.forEach(t),nLo=r(Xye," (LayoutLM model)"),Xye.forEach(t),sLo=i(L),U2=n(L,"LI",{});var zye=s(U2);zie=n(zye,"STRONG",{});var ant=s(zie);lLo=r(ant,"layoutlmv2"),ant.forEach(t),iLo=r(zye," \u2014 "),KN=n(zye,"A",{href:!0});var nnt=s(KN);dLo=r(nnt,"LayoutLMv2ForSequenceClassification"),nnt.forEach(t),cLo=r(zye," (LayoutLMv2 model)"),zye.forEach(t),mLo=i(L),J2=n(L,"LI",{});var Qye=s(J2);Qie=n(Qye,"STRONG",{});var snt=s(Qie);fLo=r(snt,"led"),snt.forEach(t),gLo=r(Qye," \u2014 "),ZN=n(Qye,"A",{href:!0});var lnt=s(ZN);hLo=r(lnt,"LEDForSequenceClassification"),lnt.forEach(t),uLo=r(Qye," (LED model)"),Qye.forEach(t),pLo=i(L),Y2=n(L,"LI",{});var Wye=s(Y2);Wie=n(Wye,"STRONG",{});var int=s(Wie);_Lo=r(int,"longformer"),int.forEach(t),bLo=r(Wye," \u2014 "),ej=n(Wye,"A",{href:!0});var dnt=s(ej);vLo=r(dnt,"LongformerForSequenceClassification"),dnt.forEach(t),FLo=r(Wye," (Longformer model)"),Wye.forEach(t),TLo=i(L),K2=n(L,"LI",{});var Hye=s(K2);Hie=n(Hye,"STRONG",{});var cnt=s(Hie);MLo=r(cnt,"mbart"),cnt.forEach(t),ELo=r(Hye," \u2014 "),oj=n(Hye,"A",{href:!0});var mnt=s(oj);CLo=r(mnt,"MBartForSequenceClassification"),mnt.forEach(t),wLo=r(Hye," (mBART model)"),Hye.forEach(t),ALo=i(L),Z2=n(L,"LI",{});var Uye=s(Z2);Uie=n(Uye,"STRONG",{});var fnt=s(Uie);yLo=r(fnt,"megatron-bert"),fnt.forEach(t),LLo=r(Uye," \u2014 "),rj=n(Uye,"A",{href:!0});var gnt=s(rj);xLo=r(gnt,"MegatronBertForSequenceClassification"),gnt.forEach(t),kLo=r(Uye," (MegatronBert model)"),Uye.forEach(t),SLo=i(L),ev=n(L,"LI",{});var Jye=s(ev);Jie=n(Jye,"STRONG",{});var hnt=s(Jie);RLo=r(hnt,"mobilebert"),hnt.forEach(t),BLo=r(Jye," \u2014 "),tj=n(Jye,"A",{href:!0});var unt=s(tj);PLo=r(unt,"MobileBertForSequenceClassification"),unt.forEach(t),$Lo=r(Jye," (MobileBERT model)"),Jye.forEach(t),ILo=i(L),ov=n(L,"LI",{});var Yye=s(ov);Yie=n(Yye,"STRONG",{});var pnt=s(Yie);qLo=r(pnt,"mpnet"),pnt.forEach(t),NLo=r(Yye," \u2014 "),aj=n(Yye,"A",{href:!0});var _nt=s(aj);jLo=r(_nt,"MPNetForSequenceClassification"),_nt.forEach(t),DLo=r(Yye," (MPNet model)"),Yye.forEach(t),GLo=i(L),rv=n(L,"LI",{});var Kye=s(rv);Kie=n(Kye,"STRONG",{});var bnt=s(Kie);OLo=r(bnt,"nystromformer"),bnt.forEach(t),VLo=r(Kye," \u2014 "),nj=n(Kye,"A",{href:!0});var vnt=s(nj);XLo=r(vnt,"NystromformerForSequenceClassification"),vnt.forEach(t),zLo=r(Kye," (Nystromformer model)"),Kye.forEach(t),QLo=i(L),tv=n(L,"LI",{});var Zye=s(tv);Zie=n(Zye,"STRONG",{});var Fnt=s(Zie);WLo=r(Fnt,"openai-gpt"),Fnt.forEach(t),HLo=r(Zye," \u2014 "),sj=n(Zye,"A",{href:!0});var Tnt=s(sj);ULo=r(Tnt,"OpenAIGPTForSequenceClassification"),Tnt.forEach(t),JLo=r(Zye," (OpenAI GPT model)"),Zye.forEach(t),YLo=i(L),av=n(L,"LI",{});var e8e=s(av);ede=n(e8e,"STRONG",{});var Mnt=s(ede);KLo=r(Mnt,"perceiver"),Mnt.forEach(t),ZLo=r(e8e," \u2014 "),lj=n(e8e,"A",{href:!0});var Ent=s(lj);e7o=r(Ent,"PerceiverForSequenceClassification"),Ent.forEach(t),o7o=r(e8e," (Perceiver model)"),e8e.forEach(t),r7o=i(L),nv=n(L,"LI",{});var o8e=s(nv);ode=n(o8e,"STRONG",{});var Cnt=s(ode);t7o=r(Cnt,"plbart"),Cnt.forEach(t),a7o=r(o8e," \u2014 "),ij=n(o8e,"A",{href:!0});var wnt=s(ij);n7o=r(wnt,"PLBartForSequenceClassification"),wnt.forEach(t),s7o=r(o8e," (PLBart model)"),o8e.forEach(t),l7o=i(L),sv=n(L,"LI",{});var r8e=s(sv);rde=n(r8e,"STRONG",{});var Ant=s(rde);i7o=r(Ant,"qdqbert"),Ant.forEach(t),d7o=r(r8e," \u2014 "),dj=n(r8e,"A",{href:!0});var ynt=s(dj);c7o=r(ynt,"QDQBertForSequenceClassification"),ynt.forEach(t),m7o=r(r8e," (QDQBert model)"),r8e.forEach(t),f7o=i(L),lv=n(L,"LI",{});var t8e=s(lv);tde=n(t8e,"STRONG",{});var Lnt=s(tde);g7o=r(Lnt,"reformer"),Lnt.forEach(t),h7o=r(t8e," \u2014 "),cj=n(t8e,"A",{href:!0});var xnt=s(cj);u7o=r(xnt,"ReformerForSequenceClassification"),xnt.forEach(t),p7o=r(t8e," (Reformer model)"),t8e.forEach(t),_7o=i(L),iv=n(L,"LI",{});var a8e=s(iv);ade=n(a8e,"STRONG",{});var knt=s(ade);b7o=r(knt,"rembert"),knt.forEach(t),v7o=r(a8e," \u2014 "),mj=n(a8e,"A",{href:!0});var Snt=s(mj);F7o=r(Snt,"RemBertForSequenceClassification"),Snt.forEach(t),T7o=r(a8e," (RemBERT model)"),a8e.forEach(t),M7o=i(L),dv=n(L,"LI",{});var n8e=s(dv);nde=n(n8e,"STRONG",{});var Rnt=s(nde);E7o=r(Rnt,"roberta"),Rnt.forEach(t),C7o=r(n8e," \u2014 "),fj=n(n8e,"A",{href:!0});var Bnt=s(fj);w7o=r(Bnt,"RobertaForSequenceClassification"),Bnt.forEach(t),A7o=r(n8e," (RoBERTa model)"),n8e.forEach(t),y7o=i(L),cv=n(L,"LI",{});var s8e=s(cv);sde=n(s8e,"STRONG",{});var Pnt=s(sde);L7o=r(Pnt,"roformer"),Pnt.forEach(t),x7o=r(s8e," \u2014 "),gj=n(s8e,"A",{href:!0});var $nt=s(gj);k7o=r($nt,"RoFormerForSequenceClassification"),$nt.forEach(t),S7o=r(s8e," (RoFormer model)"),s8e.forEach(t),R7o=i(L),mv=n(L,"LI",{});var l8e=s(mv);lde=n(l8e,"STRONG",{});var Int=s(lde);B7o=r(Int,"squeezebert"),Int.forEach(t),P7o=r(l8e," \u2014 "),hj=n(l8e,"A",{href:!0});var qnt=s(hj);$7o=r(qnt,"SqueezeBertForSequenceClassification"),qnt.forEach(t),I7o=r(l8e," (SqueezeBERT model)"),l8e.forEach(t),q7o=i(L),fv=n(L,"LI",{});var i8e=s(fv);ide=n(i8e,"STRONG",{});var Nnt=s(ide);N7o=r(Nnt,"tapas"),Nnt.forEach(t),j7o=r(i8e," \u2014 "),uj=n(i8e,"A",{href:!0});var jnt=s(uj);D7o=r(jnt,"TapasForSequenceClassification"),jnt.forEach(t),G7o=r(i8e," (TAPAS model)"),i8e.forEach(t),O7o=i(L),gv=n(L,"LI",{});var d8e=s(gv);dde=n(d8e,"STRONG",{});var Dnt=s(dde);V7o=r(Dnt,"tapex"),Dnt.forEach(t),X7o=r(d8e," \u2014 "),pj=n(d8e,"A",{href:!0});var Gnt=s(pj);z7o=r(Gnt,"BartForSequenceClassification"),Gnt.forEach(t),Q7o=r(d8e," (TAPEX model)"),d8e.forEach(t),W7o=i(L),hv=n(L,"LI",{});var c8e=s(hv);cde=n(c8e,"STRONG",{});var Ont=s(cde);H7o=r(Ont,"transfo-xl"),Ont.forEach(t),U7o=r(c8e," \u2014 "),_j=n(c8e,"A",{href:!0});var Vnt=s(_j);J7o=r(Vnt,"TransfoXLForSequenceClassification"),Vnt.forEach(t),Y7o=r(c8e," (Transformer-XL model)"),c8e.forEach(t),K7o=i(L),uv=n(L,"LI",{});var m8e=s(uv);mde=n(m8e,"STRONG",{});var Xnt=s(mde);Z7o=r(Xnt,"xlm"),Xnt.forEach(t),e9o=r(m8e," \u2014 "),bj=n(m8e,"A",{href:!0});var znt=s(bj);o9o=r(znt,"XLMForSequenceClassification"),znt.forEach(t),r9o=r(m8e," (XLM model)"),m8e.forEach(t),t9o=i(L),pv=n(L,"LI",{});var f8e=s(pv);fde=n(f8e,"STRONG",{});var Qnt=s(fde);a9o=r(Qnt,"xlm-roberta"),Qnt.forEach(t),n9o=r(f8e," \u2014 "),vj=n(f8e,"A",{href:!0});var Wnt=s(vj);s9o=r(Wnt,"XLMRobertaForSequenceClassification"),Wnt.forEach(t),l9o=r(f8e," (XLM-RoBERTa model)"),f8e.forEach(t),i9o=i(L),_v=n(L,"LI",{});var g8e=s(_v);gde=n(g8e,"STRONG",{});var Hnt=s(gde);d9o=r(Hnt,"xlm-roberta-xl"),Hnt.forEach(t),c9o=r(g8e," \u2014 "),Fj=n(g8e,"A",{href:!0});var Unt=s(Fj);m9o=r(Unt,"XLMRobertaXLForSequenceClassification"),Unt.forEach(t),f9o=r(g8e," (XLM-RoBERTa-XL model)"),g8e.forEach(t),g9o=i(L),bv=n(L,"LI",{});var h8e=s(bv);hde=n(h8e,"STRONG",{});var Jnt=s(hde);h9o=r(Jnt,"xlnet"),Jnt.forEach(t),u9o=r(h8e," \u2014 "),Tj=n(h8e,"A",{href:!0});var Ynt=s(Tj);p9o=r(Ynt,"XLNetForSequenceClassification"),Ynt.forEach(t),_9o=r(h8e," (XLNet model)"),h8e.forEach(t),b9o=i(L),vv=n(L,"LI",{});var u8e=s(vv);ude=n(u8e,"STRONG",{});var Knt=s(ude);v9o=r(Knt,"yoso"),Knt.forEach(t),F9o=r(u8e," \u2014 "),Mj=n(u8e,"A",{href:!0});var Znt=s(Mj);T9o=r(Znt,"YosoForSequenceClassification"),Znt.forEach(t),M9o=r(u8e," (YOSO model)"),u8e.forEach(t),L.forEach(t),E9o=i(zt),Fv=n(zt,"P",{});var p8e=s(Fv);C9o=r(p8e,"The model is set in evaluation mode by default using "),pde=n(p8e,"CODE",{});var est=s(pde);w9o=r(est,"model.eval()"),est.forEach(t),A9o=r(p8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(p8e,"CODE",{});var ost=s(_de);y9o=r(ost,"model.train()"),ost.forEach(t),p8e.forEach(t),L9o=i(zt),bde=n(zt,"P",{});var rst=s(bde);x9o=r(rst,"Examples:"),rst.forEach(t),k9o=i(zt),f(fA.$$.fragment,zt),zt.forEach(t),ml.forEach(t),CPe=i(c),Ed=n(c,"H2",{class:!0});var BIe=s(Ed);Tv=n(BIe,"A",{id:!0,class:!0,href:!0});var tst=s(Tv);vde=n(tst,"SPAN",{});var ast=s(vde);f(gA.$$.fragment,ast),ast.forEach(t),tst.forEach(t),S9o=i(BIe),Fde=n(BIe,"SPAN",{});var nst=s(Fde);R9o=r(nst,"AutoModelForMultipleChoice"),nst.forEach(t),BIe.forEach(t),wPe=i(c),rr=n(c,"DIV",{class:!0});var gl=s(rr);f(hA.$$.fragment,gl),B9o=i(gl),Cd=n(gl,"P",{});var LJ=s(Cd);P9o=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ej=n(LJ,"A",{href:!0});var sst=s(Ej);$9o=r(sst,"from_pretrained()"),sst.forEach(t),I9o=r(LJ," class method or the "),Cj=n(LJ,"A",{href:!0});var lst=s(Cj);q9o=r(lst,"from_config()"),lst.forEach(t),N9o=r(LJ,` class
method.`),LJ.forEach(t),j9o=i(gl),uA=n(gl,"P",{});var PIe=s(uA);D9o=r(PIe,"This class cannot be instantiated directly using "),Tde=n(PIe,"CODE",{});var ist=s(Tde);G9o=r(ist,"__init__()"),ist.forEach(t),O9o=r(PIe," (throws an error)."),PIe.forEach(t),V9o=i(gl),Jr=n(gl,"DIV",{class:!0});var hl=s(Jr);f(pA.$$.fragment,hl),X9o=i(hl),Mde=n(hl,"P",{});var dst=s(Mde);z9o=r(dst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dst.forEach(t),Q9o=i(hl),wd=n(hl,"P",{});var xJ=s(wd);W9o=r(xJ,`Note:
Loading a model from its configuration file does `),Ede=n(xJ,"STRONG",{});var cst=s(Ede);H9o=r(cst,"not"),cst.forEach(t),U9o=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=n(xJ,"A",{href:!0});var mst=s(wj);J9o=r(mst,"from_pretrained()"),mst.forEach(t),Y9o=r(xJ," to load the model weights."),xJ.forEach(t),K9o=i(hl),Cde=n(hl,"P",{});var fst=s(Cde);Z9o=r(fst,"Examples:"),fst.forEach(t),exo=i(hl),f(_A.$$.fragment,hl),hl.forEach(t),oxo=i(gl),Xe=n(gl,"DIV",{class:!0});var Qt=s(Xe);f(bA.$$.fragment,Qt),rxo=i(Qt),wde=n(Qt,"P",{});var gst=s(wde);txo=r(gst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gst.forEach(t),axo=i(Qt),Ja=n(Qt,"P",{});var e6=s(Ja);nxo=r(e6,"The model class to instantiate is selected based on the "),Ade=n(e6,"CODE",{});var hst=s(Ade);sxo=r(hst,"model_type"),hst.forEach(t),lxo=r(e6,` property of the config object (either
passed as an argument or loaded from `),yde=n(e6,"CODE",{});var ust=s(yde);ixo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),dxo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(e6,"CODE",{});var pst=s(Lde);cxo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),mxo=r(e6,":"),e6.forEach(t),fxo=i(Qt),G=n(Qt,"UL",{});var O=s(G);Mv=n(O,"LI",{});var _8e=s(Mv);xde=n(_8e,"STRONG",{});var _st=s(xde);gxo=r(_st,"albert"),_st.forEach(t),hxo=r(_8e," \u2014 "),Aj=n(_8e,"A",{href:!0});var bst=s(Aj);uxo=r(bst,"AlbertForMultipleChoice"),bst.forEach(t),pxo=r(_8e," (ALBERT model)"),_8e.forEach(t),_xo=i(O),Ev=n(O,"LI",{});var b8e=s(Ev);kde=n(b8e,"STRONG",{});var vst=s(kde);bxo=r(vst,"bert"),vst.forEach(t),vxo=r(b8e," \u2014 "),yj=n(b8e,"A",{href:!0});var Fst=s(yj);Fxo=r(Fst,"BertForMultipleChoice"),Fst.forEach(t),Txo=r(b8e," (BERT model)"),b8e.forEach(t),Mxo=i(O),Cv=n(O,"LI",{});var v8e=s(Cv);Sde=n(v8e,"STRONG",{});var Tst=s(Sde);Exo=r(Tst,"big_bird"),Tst.forEach(t),Cxo=r(v8e," \u2014 "),Lj=n(v8e,"A",{href:!0});var Mst=s(Lj);wxo=r(Mst,"BigBirdForMultipleChoice"),Mst.forEach(t),Axo=r(v8e," (BigBird model)"),v8e.forEach(t),yxo=i(O),wv=n(O,"LI",{});var F8e=s(wv);Rde=n(F8e,"STRONG",{});var Est=s(Rde);Lxo=r(Est,"camembert"),Est.forEach(t),xxo=r(F8e," \u2014 "),xj=n(F8e,"A",{href:!0});var Cst=s(xj);kxo=r(Cst,"CamembertForMultipleChoice"),Cst.forEach(t),Sxo=r(F8e," (CamemBERT model)"),F8e.forEach(t),Rxo=i(O),Av=n(O,"LI",{});var T8e=s(Av);Bde=n(T8e,"STRONG",{});var wst=s(Bde);Bxo=r(wst,"canine"),wst.forEach(t),Pxo=r(T8e," \u2014 "),kj=n(T8e,"A",{href:!0});var Ast=s(kj);$xo=r(Ast,"CanineForMultipleChoice"),Ast.forEach(t),Ixo=r(T8e," (Canine model)"),T8e.forEach(t),qxo=i(O),yv=n(O,"LI",{});var M8e=s(yv);Pde=n(M8e,"STRONG",{});var yst=s(Pde);Nxo=r(yst,"convbert"),yst.forEach(t),jxo=r(M8e," \u2014 "),Sj=n(M8e,"A",{href:!0});var Lst=s(Sj);Dxo=r(Lst,"ConvBertForMultipleChoice"),Lst.forEach(t),Gxo=r(M8e," (ConvBERT model)"),M8e.forEach(t),Oxo=i(O),Lv=n(O,"LI",{});var E8e=s(Lv);$de=n(E8e,"STRONG",{});var xst=s($de);Vxo=r(xst,"data2vec-text"),xst.forEach(t),Xxo=r(E8e," \u2014 "),Rj=n(E8e,"A",{href:!0});var kst=s(Rj);zxo=r(kst,"Data2VecTextForMultipleChoice"),kst.forEach(t),Qxo=r(E8e," (Data2VecText model)"),E8e.forEach(t),Wxo=i(O),xv=n(O,"LI",{});var C8e=s(xv);Ide=n(C8e,"STRONG",{});var Sst=s(Ide);Hxo=r(Sst,"distilbert"),Sst.forEach(t),Uxo=r(C8e," \u2014 "),Bj=n(C8e,"A",{href:!0});var Rst=s(Bj);Jxo=r(Rst,"DistilBertForMultipleChoice"),Rst.forEach(t),Yxo=r(C8e," (DistilBERT model)"),C8e.forEach(t),Kxo=i(O),kv=n(O,"LI",{});var w8e=s(kv);qde=n(w8e,"STRONG",{});var Bst=s(qde);Zxo=r(Bst,"electra"),Bst.forEach(t),eko=r(w8e," \u2014 "),Pj=n(w8e,"A",{href:!0});var Pst=s(Pj);oko=r(Pst,"ElectraForMultipleChoice"),Pst.forEach(t),rko=r(w8e," (ELECTRA model)"),w8e.forEach(t),tko=i(O),Sv=n(O,"LI",{});var A8e=s(Sv);Nde=n(A8e,"STRONG",{});var $st=s(Nde);ako=r($st,"flaubert"),$st.forEach(t),nko=r(A8e," \u2014 "),$j=n(A8e,"A",{href:!0});var Ist=s($j);sko=r(Ist,"FlaubertForMultipleChoice"),Ist.forEach(t),lko=r(A8e," (FlauBERT model)"),A8e.forEach(t),iko=i(O),Rv=n(O,"LI",{});var y8e=s(Rv);jde=n(y8e,"STRONG",{});var qst=s(jde);dko=r(qst,"fnet"),qst.forEach(t),cko=r(y8e," \u2014 "),Ij=n(y8e,"A",{href:!0});var Nst=s(Ij);mko=r(Nst,"FNetForMultipleChoice"),Nst.forEach(t),fko=r(y8e," (FNet model)"),y8e.forEach(t),gko=i(O),Bv=n(O,"LI",{});var L8e=s(Bv);Dde=n(L8e,"STRONG",{});var jst=s(Dde);hko=r(jst,"funnel"),jst.forEach(t),uko=r(L8e," \u2014 "),qj=n(L8e,"A",{href:!0});var Dst=s(qj);pko=r(Dst,"FunnelForMultipleChoice"),Dst.forEach(t),_ko=r(L8e," (Funnel Transformer model)"),L8e.forEach(t),bko=i(O),Pv=n(O,"LI",{});var x8e=s(Pv);Gde=n(x8e,"STRONG",{});var Gst=s(Gde);vko=r(Gst,"ibert"),Gst.forEach(t),Fko=r(x8e," \u2014 "),Nj=n(x8e,"A",{href:!0});var Ost=s(Nj);Tko=r(Ost,"IBertForMultipleChoice"),Ost.forEach(t),Mko=r(x8e," (I-BERT model)"),x8e.forEach(t),Eko=i(O),$v=n(O,"LI",{});var k8e=s($v);Ode=n(k8e,"STRONG",{});var Vst=s(Ode);Cko=r(Vst,"longformer"),Vst.forEach(t),wko=r(k8e," \u2014 "),jj=n(k8e,"A",{href:!0});var Xst=s(jj);Ako=r(Xst,"LongformerForMultipleChoice"),Xst.forEach(t),yko=r(k8e," (Longformer model)"),k8e.forEach(t),Lko=i(O),Iv=n(O,"LI",{});var S8e=s(Iv);Vde=n(S8e,"STRONG",{});var zst=s(Vde);xko=r(zst,"megatron-bert"),zst.forEach(t),kko=r(S8e," \u2014 "),Dj=n(S8e,"A",{href:!0});var Qst=s(Dj);Sko=r(Qst,"MegatronBertForMultipleChoice"),Qst.forEach(t),Rko=r(S8e," (MegatronBert model)"),S8e.forEach(t),Bko=i(O),qv=n(O,"LI",{});var R8e=s(qv);Xde=n(R8e,"STRONG",{});var Wst=s(Xde);Pko=r(Wst,"mobilebert"),Wst.forEach(t),$ko=r(R8e," \u2014 "),Gj=n(R8e,"A",{href:!0});var Hst=s(Gj);Iko=r(Hst,"MobileBertForMultipleChoice"),Hst.forEach(t),qko=r(R8e," (MobileBERT model)"),R8e.forEach(t),Nko=i(O),Nv=n(O,"LI",{});var B8e=s(Nv);zde=n(B8e,"STRONG",{});var Ust=s(zde);jko=r(Ust,"mpnet"),Ust.forEach(t),Dko=r(B8e," \u2014 "),Oj=n(B8e,"A",{href:!0});var Jst=s(Oj);Gko=r(Jst,"MPNetForMultipleChoice"),Jst.forEach(t),Oko=r(B8e," (MPNet model)"),B8e.forEach(t),Vko=i(O),jv=n(O,"LI",{});var P8e=s(jv);Qde=n(P8e,"STRONG",{});var Yst=s(Qde);Xko=r(Yst,"nystromformer"),Yst.forEach(t),zko=r(P8e," \u2014 "),Vj=n(P8e,"A",{href:!0});var Kst=s(Vj);Qko=r(Kst,"NystromformerForMultipleChoice"),Kst.forEach(t),Wko=r(P8e," (Nystromformer model)"),P8e.forEach(t),Hko=i(O),Dv=n(O,"LI",{});var $8e=s(Dv);Wde=n($8e,"STRONG",{});var Zst=s(Wde);Uko=r(Zst,"qdqbert"),Zst.forEach(t),Jko=r($8e," \u2014 "),Xj=n($8e,"A",{href:!0});var elt=s(Xj);Yko=r(elt,"QDQBertForMultipleChoice"),elt.forEach(t),Kko=r($8e," (QDQBert model)"),$8e.forEach(t),Zko=i(O),Gv=n(O,"LI",{});var I8e=s(Gv);Hde=n(I8e,"STRONG",{});var olt=s(Hde);eSo=r(olt,"rembert"),olt.forEach(t),oSo=r(I8e," \u2014 "),zj=n(I8e,"A",{href:!0});var rlt=s(zj);rSo=r(rlt,"RemBertForMultipleChoice"),rlt.forEach(t),tSo=r(I8e," (RemBERT model)"),I8e.forEach(t),aSo=i(O),Ov=n(O,"LI",{});var q8e=s(Ov);Ude=n(q8e,"STRONG",{});var tlt=s(Ude);nSo=r(tlt,"roberta"),tlt.forEach(t),sSo=r(q8e," \u2014 "),Qj=n(q8e,"A",{href:!0});var alt=s(Qj);lSo=r(alt,"RobertaForMultipleChoice"),alt.forEach(t),iSo=r(q8e," (RoBERTa model)"),q8e.forEach(t),dSo=i(O),Vv=n(O,"LI",{});var N8e=s(Vv);Jde=n(N8e,"STRONG",{});var nlt=s(Jde);cSo=r(nlt,"roformer"),nlt.forEach(t),mSo=r(N8e," \u2014 "),Wj=n(N8e,"A",{href:!0});var slt=s(Wj);fSo=r(slt,"RoFormerForMultipleChoice"),slt.forEach(t),gSo=r(N8e," (RoFormer model)"),N8e.forEach(t),hSo=i(O),Xv=n(O,"LI",{});var j8e=s(Xv);Yde=n(j8e,"STRONG",{});var llt=s(Yde);uSo=r(llt,"squeezebert"),llt.forEach(t),pSo=r(j8e," \u2014 "),Hj=n(j8e,"A",{href:!0});var ilt=s(Hj);_So=r(ilt,"SqueezeBertForMultipleChoice"),ilt.forEach(t),bSo=r(j8e," (SqueezeBERT model)"),j8e.forEach(t),vSo=i(O),zv=n(O,"LI",{});var D8e=s(zv);Kde=n(D8e,"STRONG",{});var dlt=s(Kde);FSo=r(dlt,"xlm"),dlt.forEach(t),TSo=r(D8e," \u2014 "),Uj=n(D8e,"A",{href:!0});var clt=s(Uj);MSo=r(clt,"XLMForMultipleChoice"),clt.forEach(t),ESo=r(D8e," (XLM model)"),D8e.forEach(t),CSo=i(O),Qv=n(O,"LI",{});var G8e=s(Qv);Zde=n(G8e,"STRONG",{});var mlt=s(Zde);wSo=r(mlt,"xlm-roberta"),mlt.forEach(t),ASo=r(G8e," \u2014 "),Jj=n(G8e,"A",{href:!0});var flt=s(Jj);ySo=r(flt,"XLMRobertaForMultipleChoice"),flt.forEach(t),LSo=r(G8e," (XLM-RoBERTa model)"),G8e.forEach(t),xSo=i(O),Wv=n(O,"LI",{});var O8e=s(Wv);ece=n(O8e,"STRONG",{});var glt=s(ece);kSo=r(glt,"xlm-roberta-xl"),glt.forEach(t),SSo=r(O8e," \u2014 "),Yj=n(O8e,"A",{href:!0});var hlt=s(Yj);RSo=r(hlt,"XLMRobertaXLForMultipleChoice"),hlt.forEach(t),BSo=r(O8e," (XLM-RoBERTa-XL model)"),O8e.forEach(t),PSo=i(O),Hv=n(O,"LI",{});var V8e=s(Hv);oce=n(V8e,"STRONG",{});var ult=s(oce);$So=r(ult,"xlnet"),ult.forEach(t),ISo=r(V8e," \u2014 "),Kj=n(V8e,"A",{href:!0});var plt=s(Kj);qSo=r(plt,"XLNetForMultipleChoice"),plt.forEach(t),NSo=r(V8e," (XLNet model)"),V8e.forEach(t),jSo=i(O),Uv=n(O,"LI",{});var X8e=s(Uv);rce=n(X8e,"STRONG",{});var _lt=s(rce);DSo=r(_lt,"yoso"),_lt.forEach(t),GSo=r(X8e," \u2014 "),Zj=n(X8e,"A",{href:!0});var blt=s(Zj);OSo=r(blt,"YosoForMultipleChoice"),blt.forEach(t),VSo=r(X8e," (YOSO model)"),X8e.forEach(t),O.forEach(t),XSo=i(Qt),Jv=n(Qt,"P",{});var z8e=s(Jv);zSo=r(z8e,"The model is set in evaluation mode by default using "),tce=n(z8e,"CODE",{});var vlt=s(tce);QSo=r(vlt,"model.eval()"),vlt.forEach(t),WSo=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(z8e,"CODE",{});var Flt=s(ace);HSo=r(Flt,"model.train()"),Flt.forEach(t),z8e.forEach(t),USo=i(Qt),nce=n(Qt,"P",{});var Tlt=s(nce);JSo=r(Tlt,"Examples:"),Tlt.forEach(t),YSo=i(Qt),f(vA.$$.fragment,Qt),Qt.forEach(t),gl.forEach(t),APe=i(c),Ad=n(c,"H2",{class:!0});var $Ie=s(Ad);Yv=n($Ie,"A",{id:!0,class:!0,href:!0});var Mlt=s(Yv);sce=n(Mlt,"SPAN",{});var Elt=s(sce);f(FA.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),KSo=i($Ie),lce=n($Ie,"SPAN",{});var Clt=s(lce);ZSo=r(Clt,"AutoModelForNextSentencePrediction"),Clt.forEach(t),$Ie.forEach(t),yPe=i(c),tr=n(c,"DIV",{class:!0});var ul=s(tr);f(TA.$$.fragment,ul),eRo=i(ul),yd=n(ul,"P",{});var kJ=s(yd);oRo=r(kJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eD=n(kJ,"A",{href:!0});var wlt=s(eD);rRo=r(wlt,"from_pretrained()"),wlt.forEach(t),tRo=r(kJ," class method or the "),oD=n(kJ,"A",{href:!0});var Alt=s(oD);aRo=r(Alt,"from_config()"),Alt.forEach(t),nRo=r(kJ,` class
method.`),kJ.forEach(t),sRo=i(ul),MA=n(ul,"P",{});var IIe=s(MA);lRo=r(IIe,"This class cannot be instantiated directly using "),ice=n(IIe,"CODE",{});var ylt=s(ice);iRo=r(ylt,"__init__()"),ylt.forEach(t),dRo=r(IIe," (throws an error)."),IIe.forEach(t),cRo=i(ul),Yr=n(ul,"DIV",{class:!0});var pl=s(Yr);f(EA.$$.fragment,pl),mRo=i(pl),dce=n(pl,"P",{});var Llt=s(dce);fRo=r(Llt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Llt.forEach(t),gRo=i(pl),Ld=n(pl,"P",{});var SJ=s(Ld);hRo=r(SJ,`Note:
Loading a model from its configuration file does `),cce=n(SJ,"STRONG",{});var xlt=s(cce);uRo=r(xlt,"not"),xlt.forEach(t),pRo=r(SJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(SJ,"A",{href:!0});var klt=s(rD);_Ro=r(klt,"from_pretrained()"),klt.forEach(t),bRo=r(SJ," to load the model weights."),SJ.forEach(t),vRo=i(pl),mce=n(pl,"P",{});var Slt=s(mce);FRo=r(Slt,"Examples:"),Slt.forEach(t),TRo=i(pl),f(CA.$$.fragment,pl),pl.forEach(t),MRo=i(ul),ze=n(ul,"DIV",{class:!0});var Wt=s(ze);f(wA.$$.fragment,Wt),ERo=i(Wt),fce=n(Wt,"P",{});var Rlt=s(fce);CRo=r(Rlt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Rlt.forEach(t),wRo=i(Wt),Ya=n(Wt,"P",{});var o6=s(Ya);ARo=r(o6,"The model class to instantiate is selected based on the "),gce=n(o6,"CODE",{});var Blt=s(gce);yRo=r(Blt,"model_type"),Blt.forEach(t),LRo=r(o6,` property of the config object (either
passed as an argument or loaded from `),hce=n(o6,"CODE",{});var Plt=s(hce);xRo=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),kRo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=n(o6,"CODE",{});var $lt=s(uce);SRo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),RRo=r(o6,":"),o6.forEach(t),BRo=i(Wt),da=n(Wt,"UL",{});var _l=s(da);Kv=n(_l,"LI",{});var Q8e=s(Kv);pce=n(Q8e,"STRONG",{});var Ilt=s(pce);PRo=r(Ilt,"bert"),Ilt.forEach(t),$Ro=r(Q8e," \u2014 "),tD=n(Q8e,"A",{href:!0});var qlt=s(tD);IRo=r(qlt,"BertForNextSentencePrediction"),qlt.forEach(t),qRo=r(Q8e," (BERT model)"),Q8e.forEach(t),NRo=i(_l),Zv=n(_l,"LI",{});var W8e=s(Zv);_ce=n(W8e,"STRONG",{});var Nlt=s(_ce);jRo=r(Nlt,"fnet"),Nlt.forEach(t),DRo=r(W8e," \u2014 "),aD=n(W8e,"A",{href:!0});var jlt=s(aD);GRo=r(jlt,"FNetForNextSentencePrediction"),jlt.forEach(t),ORo=r(W8e," (FNet model)"),W8e.forEach(t),VRo=i(_l),eF=n(_l,"LI",{});var H8e=s(eF);bce=n(H8e,"STRONG",{});var Dlt=s(bce);XRo=r(Dlt,"megatron-bert"),Dlt.forEach(t),zRo=r(H8e," \u2014 "),nD=n(H8e,"A",{href:!0});var Glt=s(nD);QRo=r(Glt,"MegatronBertForNextSentencePrediction"),Glt.forEach(t),WRo=r(H8e," (MegatronBert model)"),H8e.forEach(t),HRo=i(_l),oF=n(_l,"LI",{});var U8e=s(oF);vce=n(U8e,"STRONG",{});var Olt=s(vce);URo=r(Olt,"mobilebert"),Olt.forEach(t),JRo=r(U8e," \u2014 "),sD=n(U8e,"A",{href:!0});var Vlt=s(sD);YRo=r(Vlt,"MobileBertForNextSentencePrediction"),Vlt.forEach(t),KRo=r(U8e," (MobileBERT model)"),U8e.forEach(t),ZRo=i(_l),rF=n(_l,"LI",{});var J8e=s(rF);Fce=n(J8e,"STRONG",{});var Xlt=s(Fce);eBo=r(Xlt,"qdqbert"),Xlt.forEach(t),oBo=r(J8e," \u2014 "),lD=n(J8e,"A",{href:!0});var zlt=s(lD);rBo=r(zlt,"QDQBertForNextSentencePrediction"),zlt.forEach(t),tBo=r(J8e," (QDQBert model)"),J8e.forEach(t),_l.forEach(t),aBo=i(Wt),tF=n(Wt,"P",{});var Y8e=s(tF);nBo=r(Y8e,"The model is set in evaluation mode by default using "),Tce=n(Y8e,"CODE",{});var Qlt=s(Tce);sBo=r(Qlt,"model.eval()"),Qlt.forEach(t),lBo=r(Y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(Y8e,"CODE",{});var Wlt=s(Mce);iBo=r(Wlt,"model.train()"),Wlt.forEach(t),Y8e.forEach(t),dBo=i(Wt),Ece=n(Wt,"P",{});var Hlt=s(Ece);cBo=r(Hlt,"Examples:"),Hlt.forEach(t),mBo=i(Wt),f(AA.$$.fragment,Wt),Wt.forEach(t),ul.forEach(t),LPe=i(c),xd=n(c,"H2",{class:!0});var qIe=s(xd);aF=n(qIe,"A",{id:!0,class:!0,href:!0});var Ult=s(aF);Cce=n(Ult,"SPAN",{});var Jlt=s(Cce);f(yA.$$.fragment,Jlt),Jlt.forEach(t),Ult.forEach(t),fBo=i(qIe),wce=n(qIe,"SPAN",{});var Ylt=s(wce);gBo=r(Ylt,"AutoModelForTokenClassification"),Ylt.forEach(t),qIe.forEach(t),xPe=i(c),ar=n(c,"DIV",{class:!0});var bl=s(ar);f(LA.$$.fragment,bl),hBo=i(bl),kd=n(bl,"P",{});var RJ=s(kd);uBo=r(RJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iD=n(RJ,"A",{href:!0});var Klt=s(iD);pBo=r(Klt,"from_pretrained()"),Klt.forEach(t),_Bo=r(RJ," class method or the "),dD=n(RJ,"A",{href:!0});var Zlt=s(dD);bBo=r(Zlt,"from_config()"),Zlt.forEach(t),vBo=r(RJ,` class
method.`),RJ.forEach(t),FBo=i(bl),xA=n(bl,"P",{});var NIe=s(xA);TBo=r(NIe,"This class cannot be instantiated directly using "),Ace=n(NIe,"CODE",{});var eit=s(Ace);MBo=r(eit,"__init__()"),eit.forEach(t),EBo=r(NIe," (throws an error)."),NIe.forEach(t),CBo=i(bl),Kr=n(bl,"DIV",{class:!0});var vl=s(Kr);f(kA.$$.fragment,vl),wBo=i(vl),yce=n(vl,"P",{});var oit=s(yce);ABo=r(oit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oit.forEach(t),yBo=i(vl),Sd=n(vl,"P",{});var BJ=s(Sd);LBo=r(BJ,`Note:
Loading a model from its configuration file does `),Lce=n(BJ,"STRONG",{});var rit=s(Lce);xBo=r(rit,"not"),rit.forEach(t),kBo=r(BJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=n(BJ,"A",{href:!0});var tit=s(cD);SBo=r(tit,"from_pretrained()"),tit.forEach(t),RBo=r(BJ," to load the model weights."),BJ.forEach(t),BBo=i(vl),xce=n(vl,"P",{});var ait=s(xce);PBo=r(ait,"Examples:"),ait.forEach(t),$Bo=i(vl),f(SA.$$.fragment,vl),vl.forEach(t),IBo=i(bl),Qe=n(bl,"DIV",{class:!0});var Ht=s(Qe);f(RA.$$.fragment,Ht),qBo=i(Ht),kce=n(Ht,"P",{});var nit=s(kce);NBo=r(nit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nit.forEach(t),jBo=i(Ht),Ka=n(Ht,"P",{});var r6=s(Ka);DBo=r(r6,"The model class to instantiate is selected based on the "),Sce=n(r6,"CODE",{});var sit=s(Sce);GBo=r(sit,"model_type"),sit.forEach(t),OBo=r(r6,` property of the config object (either
passed as an argument or loaded from `),Rce=n(r6,"CODE",{});var lit=s(Rce);VBo=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),XBo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(r6,"CODE",{});var iit=s(Bce);zBo=r(iit,"pretrained_model_name_or_path"),iit.forEach(t),QBo=r(r6,":"),r6.forEach(t),WBo=i(Ht),j=n(Ht,"UL",{});var D=s(j);nF=n(D,"LI",{});var K8e=s(nF);Pce=n(K8e,"STRONG",{});var dit=s(Pce);HBo=r(dit,"albert"),dit.forEach(t),UBo=r(K8e," \u2014 "),mD=n(K8e,"A",{href:!0});var cit=s(mD);JBo=r(cit,"AlbertForTokenClassification"),cit.forEach(t),YBo=r(K8e," (ALBERT model)"),K8e.forEach(t),KBo=i(D),sF=n(D,"LI",{});var Z8e=s(sF);$ce=n(Z8e,"STRONG",{});var mit=s($ce);ZBo=r(mit,"bert"),mit.forEach(t),ePo=r(Z8e," \u2014 "),fD=n(Z8e,"A",{href:!0});var fit=s(fD);oPo=r(fit,"BertForTokenClassification"),fit.forEach(t),rPo=r(Z8e," (BERT model)"),Z8e.forEach(t),tPo=i(D),lF=n(D,"LI",{});var eLe=s(lF);Ice=n(eLe,"STRONG",{});var git=s(Ice);aPo=r(git,"big_bird"),git.forEach(t),nPo=r(eLe," \u2014 "),gD=n(eLe,"A",{href:!0});var hit=s(gD);sPo=r(hit,"BigBirdForTokenClassification"),hit.forEach(t),lPo=r(eLe," (BigBird model)"),eLe.forEach(t),iPo=i(D),iF=n(D,"LI",{});var oLe=s(iF);qce=n(oLe,"STRONG",{});var uit=s(qce);dPo=r(uit,"camembert"),uit.forEach(t),cPo=r(oLe," \u2014 "),hD=n(oLe,"A",{href:!0});var pit=s(hD);mPo=r(pit,"CamembertForTokenClassification"),pit.forEach(t),fPo=r(oLe," (CamemBERT model)"),oLe.forEach(t),gPo=i(D),dF=n(D,"LI",{});var rLe=s(dF);Nce=n(rLe,"STRONG",{});var _it=s(Nce);hPo=r(_it,"canine"),_it.forEach(t),uPo=r(rLe," \u2014 "),uD=n(rLe,"A",{href:!0});var bit=s(uD);pPo=r(bit,"CanineForTokenClassification"),bit.forEach(t),_Po=r(rLe," (Canine model)"),rLe.forEach(t),bPo=i(D),cF=n(D,"LI",{});var tLe=s(cF);jce=n(tLe,"STRONG",{});var vit=s(jce);vPo=r(vit,"convbert"),vit.forEach(t),FPo=r(tLe," \u2014 "),pD=n(tLe,"A",{href:!0});var Fit=s(pD);TPo=r(Fit,"ConvBertForTokenClassification"),Fit.forEach(t),MPo=r(tLe," (ConvBERT model)"),tLe.forEach(t),EPo=i(D),mF=n(D,"LI",{});var aLe=s(mF);Dce=n(aLe,"STRONG",{});var Tit=s(Dce);CPo=r(Tit,"data2vec-text"),Tit.forEach(t),wPo=r(aLe," \u2014 "),_D=n(aLe,"A",{href:!0});var Mit=s(_D);APo=r(Mit,"Data2VecTextForTokenClassification"),Mit.forEach(t),yPo=r(aLe," (Data2VecText model)"),aLe.forEach(t),LPo=i(D),fF=n(D,"LI",{});var nLe=s(fF);Gce=n(nLe,"STRONG",{});var Eit=s(Gce);xPo=r(Eit,"deberta"),Eit.forEach(t),kPo=r(nLe," \u2014 "),bD=n(nLe,"A",{href:!0});var Cit=s(bD);SPo=r(Cit,"DebertaForTokenClassification"),Cit.forEach(t),RPo=r(nLe," (DeBERTa model)"),nLe.forEach(t),BPo=i(D),gF=n(D,"LI",{});var sLe=s(gF);Oce=n(sLe,"STRONG",{});var wit=s(Oce);PPo=r(wit,"deberta-v2"),wit.forEach(t),$Po=r(sLe," \u2014 "),vD=n(sLe,"A",{href:!0});var Ait=s(vD);IPo=r(Ait,"DebertaV2ForTokenClassification"),Ait.forEach(t),qPo=r(sLe," (DeBERTa-v2 model)"),sLe.forEach(t),NPo=i(D),hF=n(D,"LI",{});var lLe=s(hF);Vce=n(lLe,"STRONG",{});var yit=s(Vce);jPo=r(yit,"distilbert"),yit.forEach(t),DPo=r(lLe," \u2014 "),FD=n(lLe,"A",{href:!0});var Lit=s(FD);GPo=r(Lit,"DistilBertForTokenClassification"),Lit.forEach(t),OPo=r(lLe," (DistilBERT model)"),lLe.forEach(t),VPo=i(D),uF=n(D,"LI",{});var iLe=s(uF);Xce=n(iLe,"STRONG",{});var xit=s(Xce);XPo=r(xit,"electra"),xit.forEach(t),zPo=r(iLe," \u2014 "),TD=n(iLe,"A",{href:!0});var kit=s(TD);QPo=r(kit,"ElectraForTokenClassification"),kit.forEach(t),WPo=r(iLe," (ELECTRA model)"),iLe.forEach(t),HPo=i(D),pF=n(D,"LI",{});var dLe=s(pF);zce=n(dLe,"STRONG",{});var Sit=s(zce);UPo=r(Sit,"flaubert"),Sit.forEach(t),JPo=r(dLe," \u2014 "),MD=n(dLe,"A",{href:!0});var Rit=s(MD);YPo=r(Rit,"FlaubertForTokenClassification"),Rit.forEach(t),KPo=r(dLe," (FlauBERT model)"),dLe.forEach(t),ZPo=i(D),_F=n(D,"LI",{});var cLe=s(_F);Qce=n(cLe,"STRONG",{});var Bit=s(Qce);e$o=r(Bit,"fnet"),Bit.forEach(t),o$o=r(cLe," \u2014 "),ED=n(cLe,"A",{href:!0});var Pit=s(ED);r$o=r(Pit,"FNetForTokenClassification"),Pit.forEach(t),t$o=r(cLe," (FNet model)"),cLe.forEach(t),a$o=i(D),bF=n(D,"LI",{});var mLe=s(bF);Wce=n(mLe,"STRONG",{});var $it=s(Wce);n$o=r($it,"funnel"),$it.forEach(t),s$o=r(mLe," \u2014 "),CD=n(mLe,"A",{href:!0});var Iit=s(CD);l$o=r(Iit,"FunnelForTokenClassification"),Iit.forEach(t),i$o=r(mLe," (Funnel Transformer model)"),mLe.forEach(t),d$o=i(D),vF=n(D,"LI",{});var fLe=s(vF);Hce=n(fLe,"STRONG",{});var qit=s(Hce);c$o=r(qit,"gpt2"),qit.forEach(t),m$o=r(fLe," \u2014 "),wD=n(fLe,"A",{href:!0});var Nit=s(wD);f$o=r(Nit,"GPT2ForTokenClassification"),Nit.forEach(t),g$o=r(fLe," (OpenAI GPT-2 model)"),fLe.forEach(t),h$o=i(D),FF=n(D,"LI",{});var gLe=s(FF);Uce=n(gLe,"STRONG",{});var jit=s(Uce);u$o=r(jit,"ibert"),jit.forEach(t),p$o=r(gLe," \u2014 "),AD=n(gLe,"A",{href:!0});var Dit=s(AD);_$o=r(Dit,"IBertForTokenClassification"),Dit.forEach(t),b$o=r(gLe," (I-BERT model)"),gLe.forEach(t),v$o=i(D),TF=n(D,"LI",{});var hLe=s(TF);Jce=n(hLe,"STRONG",{});var Git=s(Jce);F$o=r(Git,"layoutlm"),Git.forEach(t),T$o=r(hLe," \u2014 "),yD=n(hLe,"A",{href:!0});var Oit=s(yD);M$o=r(Oit,"LayoutLMForTokenClassification"),Oit.forEach(t),E$o=r(hLe," (LayoutLM model)"),hLe.forEach(t),C$o=i(D),MF=n(D,"LI",{});var uLe=s(MF);Yce=n(uLe,"STRONG",{});var Vit=s(Yce);w$o=r(Vit,"layoutlmv2"),Vit.forEach(t),A$o=r(uLe," \u2014 "),LD=n(uLe,"A",{href:!0});var Xit=s(LD);y$o=r(Xit,"LayoutLMv2ForTokenClassification"),Xit.forEach(t),L$o=r(uLe," (LayoutLMv2 model)"),uLe.forEach(t),x$o=i(D),EF=n(D,"LI",{});var pLe=s(EF);Kce=n(pLe,"STRONG",{});var zit=s(Kce);k$o=r(zit,"longformer"),zit.forEach(t),S$o=r(pLe," \u2014 "),xD=n(pLe,"A",{href:!0});var Qit=s(xD);R$o=r(Qit,"LongformerForTokenClassification"),Qit.forEach(t),B$o=r(pLe," (Longformer model)"),pLe.forEach(t),P$o=i(D),CF=n(D,"LI",{});var _Le=s(CF);Zce=n(_Le,"STRONG",{});var Wit=s(Zce);$$o=r(Wit,"megatron-bert"),Wit.forEach(t),I$o=r(_Le," \u2014 "),kD=n(_Le,"A",{href:!0});var Hit=s(kD);q$o=r(Hit,"MegatronBertForTokenClassification"),Hit.forEach(t),N$o=r(_Le," (MegatronBert model)"),_Le.forEach(t),j$o=i(D),wF=n(D,"LI",{});var bLe=s(wF);eme=n(bLe,"STRONG",{});var Uit=s(eme);D$o=r(Uit,"mobilebert"),Uit.forEach(t),G$o=r(bLe," \u2014 "),SD=n(bLe,"A",{href:!0});var Jit=s(SD);O$o=r(Jit,"MobileBertForTokenClassification"),Jit.forEach(t),V$o=r(bLe," (MobileBERT model)"),bLe.forEach(t),X$o=i(D),AF=n(D,"LI",{});var vLe=s(AF);ome=n(vLe,"STRONG",{});var Yit=s(ome);z$o=r(Yit,"mpnet"),Yit.forEach(t),Q$o=r(vLe," \u2014 "),RD=n(vLe,"A",{href:!0});var Kit=s(RD);W$o=r(Kit,"MPNetForTokenClassification"),Kit.forEach(t),H$o=r(vLe," (MPNet model)"),vLe.forEach(t),U$o=i(D),yF=n(D,"LI",{});var FLe=s(yF);rme=n(FLe,"STRONG",{});var Zit=s(rme);J$o=r(Zit,"nystromformer"),Zit.forEach(t),Y$o=r(FLe," \u2014 "),BD=n(FLe,"A",{href:!0});var edt=s(BD);K$o=r(edt,"NystromformerForTokenClassification"),edt.forEach(t),Z$o=r(FLe," (Nystromformer model)"),FLe.forEach(t),eIo=i(D),LF=n(D,"LI",{});var TLe=s(LF);tme=n(TLe,"STRONG",{});var odt=s(tme);oIo=r(odt,"qdqbert"),odt.forEach(t),rIo=r(TLe," \u2014 "),PD=n(TLe,"A",{href:!0});var rdt=s(PD);tIo=r(rdt,"QDQBertForTokenClassification"),rdt.forEach(t),aIo=r(TLe," (QDQBert model)"),TLe.forEach(t),nIo=i(D),xF=n(D,"LI",{});var MLe=s(xF);ame=n(MLe,"STRONG",{});var tdt=s(ame);sIo=r(tdt,"rembert"),tdt.forEach(t),lIo=r(MLe," \u2014 "),$D=n(MLe,"A",{href:!0});var adt=s($D);iIo=r(adt,"RemBertForTokenClassification"),adt.forEach(t),dIo=r(MLe," (RemBERT model)"),MLe.forEach(t),cIo=i(D),kF=n(D,"LI",{});var ELe=s(kF);nme=n(ELe,"STRONG",{});var ndt=s(nme);mIo=r(ndt,"roberta"),ndt.forEach(t),fIo=r(ELe," \u2014 "),ID=n(ELe,"A",{href:!0});var sdt=s(ID);gIo=r(sdt,"RobertaForTokenClassification"),sdt.forEach(t),hIo=r(ELe," (RoBERTa model)"),ELe.forEach(t),uIo=i(D),SF=n(D,"LI",{});var CLe=s(SF);sme=n(CLe,"STRONG",{});var ldt=s(sme);pIo=r(ldt,"roformer"),ldt.forEach(t),_Io=r(CLe," \u2014 "),qD=n(CLe,"A",{href:!0});var idt=s(qD);bIo=r(idt,"RoFormerForTokenClassification"),idt.forEach(t),vIo=r(CLe," (RoFormer model)"),CLe.forEach(t),FIo=i(D),RF=n(D,"LI",{});var wLe=s(RF);lme=n(wLe,"STRONG",{});var ddt=s(lme);TIo=r(ddt,"squeezebert"),ddt.forEach(t),MIo=r(wLe," \u2014 "),ND=n(wLe,"A",{href:!0});var cdt=s(ND);EIo=r(cdt,"SqueezeBertForTokenClassification"),cdt.forEach(t),CIo=r(wLe," (SqueezeBERT model)"),wLe.forEach(t),wIo=i(D),BF=n(D,"LI",{});var ALe=s(BF);ime=n(ALe,"STRONG",{});var mdt=s(ime);AIo=r(mdt,"xlm"),mdt.forEach(t),yIo=r(ALe," \u2014 "),jD=n(ALe,"A",{href:!0});var fdt=s(jD);LIo=r(fdt,"XLMForTokenClassification"),fdt.forEach(t),xIo=r(ALe," (XLM model)"),ALe.forEach(t),kIo=i(D),PF=n(D,"LI",{});var yLe=s(PF);dme=n(yLe,"STRONG",{});var gdt=s(dme);SIo=r(gdt,"xlm-roberta"),gdt.forEach(t),RIo=r(yLe," \u2014 "),DD=n(yLe,"A",{href:!0});var hdt=s(DD);BIo=r(hdt,"XLMRobertaForTokenClassification"),hdt.forEach(t),PIo=r(yLe," (XLM-RoBERTa model)"),yLe.forEach(t),$Io=i(D),$F=n(D,"LI",{});var LLe=s($F);cme=n(LLe,"STRONG",{});var udt=s(cme);IIo=r(udt,"xlm-roberta-xl"),udt.forEach(t),qIo=r(LLe," \u2014 "),GD=n(LLe,"A",{href:!0});var pdt=s(GD);NIo=r(pdt,"XLMRobertaXLForTokenClassification"),pdt.forEach(t),jIo=r(LLe," (XLM-RoBERTa-XL model)"),LLe.forEach(t),DIo=i(D),IF=n(D,"LI",{});var xLe=s(IF);mme=n(xLe,"STRONG",{});var _dt=s(mme);GIo=r(_dt,"xlnet"),_dt.forEach(t),OIo=r(xLe," \u2014 "),OD=n(xLe,"A",{href:!0});var bdt=s(OD);VIo=r(bdt,"XLNetForTokenClassification"),bdt.forEach(t),XIo=r(xLe," (XLNet model)"),xLe.forEach(t),zIo=i(D),qF=n(D,"LI",{});var kLe=s(qF);fme=n(kLe,"STRONG",{});var vdt=s(fme);QIo=r(vdt,"yoso"),vdt.forEach(t),WIo=r(kLe," \u2014 "),VD=n(kLe,"A",{href:!0});var Fdt=s(VD);HIo=r(Fdt,"YosoForTokenClassification"),Fdt.forEach(t),UIo=r(kLe," (YOSO model)"),kLe.forEach(t),D.forEach(t),JIo=i(Ht),NF=n(Ht,"P",{});var SLe=s(NF);YIo=r(SLe,"The model is set in evaluation mode by default using "),gme=n(SLe,"CODE",{});var Tdt=s(gme);KIo=r(Tdt,"model.eval()"),Tdt.forEach(t),ZIo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=n(SLe,"CODE",{});var Mdt=s(hme);eqo=r(Mdt,"model.train()"),Mdt.forEach(t),SLe.forEach(t),oqo=i(Ht),ume=n(Ht,"P",{});var Edt=s(ume);rqo=r(Edt,"Examples:"),Edt.forEach(t),tqo=i(Ht),f(BA.$$.fragment,Ht),Ht.forEach(t),bl.forEach(t),kPe=i(c),Rd=n(c,"H2",{class:!0});var jIe=s(Rd);jF=n(jIe,"A",{id:!0,class:!0,href:!0});var Cdt=s(jF);pme=n(Cdt,"SPAN",{});var wdt=s(pme);f(PA.$$.fragment,wdt),wdt.forEach(t),Cdt.forEach(t),aqo=i(jIe),_me=n(jIe,"SPAN",{});var Adt=s(_me);nqo=r(Adt,"AutoModelForQuestionAnswering"),Adt.forEach(t),jIe.forEach(t),SPe=i(c),nr=n(c,"DIV",{class:!0});var Fl=s(nr);f($A.$$.fragment,Fl),sqo=i(Fl),Bd=n(Fl,"P",{});var PJ=s(Bd);lqo=r(PJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XD=n(PJ,"A",{href:!0});var ydt=s(XD);iqo=r(ydt,"from_pretrained()"),ydt.forEach(t),dqo=r(PJ," class method or the "),zD=n(PJ,"A",{href:!0});var Ldt=s(zD);cqo=r(Ldt,"from_config()"),Ldt.forEach(t),mqo=r(PJ,` class
method.`),PJ.forEach(t),fqo=i(Fl),IA=n(Fl,"P",{});var DIe=s(IA);gqo=r(DIe,"This class cannot be instantiated directly using "),bme=n(DIe,"CODE",{});var xdt=s(bme);hqo=r(xdt,"__init__()"),xdt.forEach(t),uqo=r(DIe," (throws an error)."),DIe.forEach(t),pqo=i(Fl),Zr=n(Fl,"DIV",{class:!0});var Tl=s(Zr);f(qA.$$.fragment,Tl),_qo=i(Tl),vme=n(Tl,"P",{});var kdt=s(vme);bqo=r(kdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kdt.forEach(t),vqo=i(Tl),Pd=n(Tl,"P",{});var $J=s(Pd);Fqo=r($J,`Note:
Loading a model from its configuration file does `),Fme=n($J,"STRONG",{});var Sdt=s(Fme);Tqo=r(Sdt,"not"),Sdt.forEach(t),Mqo=r($J,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n($J,"A",{href:!0});var Rdt=s(QD);Eqo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),Cqo=r($J," to load the model weights."),$J.forEach(t),wqo=i(Tl),Tme=n(Tl,"P",{});var Bdt=s(Tme);Aqo=r(Bdt,"Examples:"),Bdt.forEach(t),yqo=i(Tl),f(NA.$$.fragment,Tl),Tl.forEach(t),Lqo=i(Fl),We=n(Fl,"DIV",{class:!0});var Ut=s(We);f(jA.$$.fragment,Ut),xqo=i(Ut),Mme=n(Ut,"P",{});var Pdt=s(Mme);kqo=r(Pdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pdt.forEach(t),Sqo=i(Ut),Za=n(Ut,"P",{});var t6=s(Za);Rqo=r(t6,"The model class to instantiate is selected based on the "),Eme=n(t6,"CODE",{});var $dt=s(Eme);Bqo=r($dt,"model_type"),$dt.forEach(t),Pqo=r(t6,` property of the config object (either
passed as an argument or loaded from `),Cme=n(t6,"CODE",{});var Idt=s(Cme);$qo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),Iqo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(t6,"CODE",{});var qdt=s(wme);qqo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),Nqo=r(t6,":"),t6.forEach(t),jqo=i(Ut),R=n(Ut,"UL",{});var P=s(R);DF=n(P,"LI",{});var RLe=s(DF);Ame=n(RLe,"STRONG",{});var Ndt=s(Ame);Dqo=r(Ndt,"albert"),Ndt.forEach(t),Gqo=r(RLe," \u2014 "),WD=n(RLe,"A",{href:!0});var jdt=s(WD);Oqo=r(jdt,"AlbertForQuestionAnswering"),jdt.forEach(t),Vqo=r(RLe," (ALBERT model)"),RLe.forEach(t),Xqo=i(P),GF=n(P,"LI",{});var BLe=s(GF);yme=n(BLe,"STRONG",{});var Ddt=s(yme);zqo=r(Ddt,"bart"),Ddt.forEach(t),Qqo=r(BLe," \u2014 "),HD=n(BLe,"A",{href:!0});var Gdt=s(HD);Wqo=r(Gdt,"BartForQuestionAnswering"),Gdt.forEach(t),Hqo=r(BLe," (BART model)"),BLe.forEach(t),Uqo=i(P),OF=n(P,"LI",{});var PLe=s(OF);Lme=n(PLe,"STRONG",{});var Odt=s(Lme);Jqo=r(Odt,"bert"),Odt.forEach(t),Yqo=r(PLe," \u2014 "),UD=n(PLe,"A",{href:!0});var Vdt=s(UD);Kqo=r(Vdt,"BertForQuestionAnswering"),Vdt.forEach(t),Zqo=r(PLe," (BERT model)"),PLe.forEach(t),eNo=i(P),VF=n(P,"LI",{});var $Le=s(VF);xme=n($Le,"STRONG",{});var Xdt=s(xme);oNo=r(Xdt,"big_bird"),Xdt.forEach(t),rNo=r($Le," \u2014 "),JD=n($Le,"A",{href:!0});var zdt=s(JD);tNo=r(zdt,"BigBirdForQuestionAnswering"),zdt.forEach(t),aNo=r($Le," (BigBird model)"),$Le.forEach(t),nNo=i(P),XF=n(P,"LI",{});var ILe=s(XF);kme=n(ILe,"STRONG",{});var Qdt=s(kme);sNo=r(Qdt,"bigbird_pegasus"),Qdt.forEach(t),lNo=r(ILe," \u2014 "),YD=n(ILe,"A",{href:!0});var Wdt=s(YD);iNo=r(Wdt,"BigBirdPegasusForQuestionAnswering"),Wdt.forEach(t),dNo=r(ILe," (BigBirdPegasus model)"),ILe.forEach(t),cNo=i(P),zF=n(P,"LI",{});var qLe=s(zF);Sme=n(qLe,"STRONG",{});var Hdt=s(Sme);mNo=r(Hdt,"camembert"),Hdt.forEach(t),fNo=r(qLe," \u2014 "),KD=n(qLe,"A",{href:!0});var Udt=s(KD);gNo=r(Udt,"CamembertForQuestionAnswering"),Udt.forEach(t),hNo=r(qLe," (CamemBERT model)"),qLe.forEach(t),uNo=i(P),QF=n(P,"LI",{});var NLe=s(QF);Rme=n(NLe,"STRONG",{});var Jdt=s(Rme);pNo=r(Jdt,"canine"),Jdt.forEach(t),_No=r(NLe," \u2014 "),ZD=n(NLe,"A",{href:!0});var Ydt=s(ZD);bNo=r(Ydt,"CanineForQuestionAnswering"),Ydt.forEach(t),vNo=r(NLe," (Canine model)"),NLe.forEach(t),FNo=i(P),WF=n(P,"LI",{});var jLe=s(WF);Bme=n(jLe,"STRONG",{});var Kdt=s(Bme);TNo=r(Kdt,"convbert"),Kdt.forEach(t),MNo=r(jLe," \u2014 "),eG=n(jLe,"A",{href:!0});var Zdt=s(eG);ENo=r(Zdt,"ConvBertForQuestionAnswering"),Zdt.forEach(t),CNo=r(jLe," (ConvBERT model)"),jLe.forEach(t),wNo=i(P),HF=n(P,"LI",{});var DLe=s(HF);Pme=n(DLe,"STRONG",{});var ect=s(Pme);ANo=r(ect,"data2vec-text"),ect.forEach(t),yNo=r(DLe," \u2014 "),oG=n(DLe,"A",{href:!0});var oct=s(oG);LNo=r(oct,"Data2VecTextForQuestionAnswering"),oct.forEach(t),xNo=r(DLe," (Data2VecText model)"),DLe.forEach(t),kNo=i(P),UF=n(P,"LI",{});var GLe=s(UF);$me=n(GLe,"STRONG",{});var rct=s($me);SNo=r(rct,"deberta"),rct.forEach(t),RNo=r(GLe," \u2014 "),rG=n(GLe,"A",{href:!0});var tct=s(rG);BNo=r(tct,"DebertaForQuestionAnswering"),tct.forEach(t),PNo=r(GLe," (DeBERTa model)"),GLe.forEach(t),$No=i(P),JF=n(P,"LI",{});var OLe=s(JF);Ime=n(OLe,"STRONG",{});var act=s(Ime);INo=r(act,"deberta-v2"),act.forEach(t),qNo=r(OLe," \u2014 "),tG=n(OLe,"A",{href:!0});var nct=s(tG);NNo=r(nct,"DebertaV2ForQuestionAnswering"),nct.forEach(t),jNo=r(OLe," (DeBERTa-v2 model)"),OLe.forEach(t),DNo=i(P),YF=n(P,"LI",{});var VLe=s(YF);qme=n(VLe,"STRONG",{});var sct=s(qme);GNo=r(sct,"distilbert"),sct.forEach(t),ONo=r(VLe," \u2014 "),aG=n(VLe,"A",{href:!0});var lct=s(aG);VNo=r(lct,"DistilBertForQuestionAnswering"),lct.forEach(t),XNo=r(VLe," (DistilBERT model)"),VLe.forEach(t),zNo=i(P),KF=n(P,"LI",{});var XLe=s(KF);Nme=n(XLe,"STRONG",{});var ict=s(Nme);QNo=r(ict,"electra"),ict.forEach(t),WNo=r(XLe," \u2014 "),nG=n(XLe,"A",{href:!0});var dct=s(nG);HNo=r(dct,"ElectraForQuestionAnswering"),dct.forEach(t),UNo=r(XLe," (ELECTRA model)"),XLe.forEach(t),JNo=i(P),ZF=n(P,"LI",{});var zLe=s(ZF);jme=n(zLe,"STRONG",{});var cct=s(jme);YNo=r(cct,"flaubert"),cct.forEach(t),KNo=r(zLe," \u2014 "),sG=n(zLe,"A",{href:!0});var mct=s(sG);ZNo=r(mct,"FlaubertForQuestionAnsweringSimple"),mct.forEach(t),ejo=r(zLe," (FlauBERT model)"),zLe.forEach(t),ojo=i(P),e1=n(P,"LI",{});var QLe=s(e1);Dme=n(QLe,"STRONG",{});var fct=s(Dme);rjo=r(fct,"fnet"),fct.forEach(t),tjo=r(QLe," \u2014 "),lG=n(QLe,"A",{href:!0});var gct=s(lG);ajo=r(gct,"FNetForQuestionAnswering"),gct.forEach(t),njo=r(QLe," (FNet model)"),QLe.forEach(t),sjo=i(P),o1=n(P,"LI",{});var WLe=s(o1);Gme=n(WLe,"STRONG",{});var hct=s(Gme);ljo=r(hct,"funnel"),hct.forEach(t),ijo=r(WLe," \u2014 "),iG=n(WLe,"A",{href:!0});var uct=s(iG);djo=r(uct,"FunnelForQuestionAnswering"),uct.forEach(t),cjo=r(WLe," (Funnel Transformer model)"),WLe.forEach(t),mjo=i(P),r1=n(P,"LI",{});var HLe=s(r1);Ome=n(HLe,"STRONG",{});var pct=s(Ome);fjo=r(pct,"gptj"),pct.forEach(t),gjo=r(HLe," \u2014 "),dG=n(HLe,"A",{href:!0});var _ct=s(dG);hjo=r(_ct,"GPTJForQuestionAnswering"),_ct.forEach(t),ujo=r(HLe," (GPT-J model)"),HLe.forEach(t),pjo=i(P),t1=n(P,"LI",{});var ULe=s(t1);Vme=n(ULe,"STRONG",{});var bct=s(Vme);_jo=r(bct,"ibert"),bct.forEach(t),bjo=r(ULe," \u2014 "),cG=n(ULe,"A",{href:!0});var vct=s(cG);vjo=r(vct,"IBertForQuestionAnswering"),vct.forEach(t),Fjo=r(ULe," (I-BERT model)"),ULe.forEach(t),Tjo=i(P),a1=n(P,"LI",{});var JLe=s(a1);Xme=n(JLe,"STRONG",{});var Fct=s(Xme);Mjo=r(Fct,"layoutlmv2"),Fct.forEach(t),Ejo=r(JLe," \u2014 "),mG=n(JLe,"A",{href:!0});var Tct=s(mG);Cjo=r(Tct,"LayoutLMv2ForQuestionAnswering"),Tct.forEach(t),wjo=r(JLe," (LayoutLMv2 model)"),JLe.forEach(t),Ajo=i(P),n1=n(P,"LI",{});var YLe=s(n1);zme=n(YLe,"STRONG",{});var Mct=s(zme);yjo=r(Mct,"led"),Mct.forEach(t),Ljo=r(YLe," \u2014 "),fG=n(YLe,"A",{href:!0});var Ect=s(fG);xjo=r(Ect,"LEDForQuestionAnswering"),Ect.forEach(t),kjo=r(YLe," (LED model)"),YLe.forEach(t),Sjo=i(P),s1=n(P,"LI",{});var KLe=s(s1);Qme=n(KLe,"STRONG",{});var Cct=s(Qme);Rjo=r(Cct,"longformer"),Cct.forEach(t),Bjo=r(KLe," \u2014 "),gG=n(KLe,"A",{href:!0});var wct=s(gG);Pjo=r(wct,"LongformerForQuestionAnswering"),wct.forEach(t),$jo=r(KLe," (Longformer model)"),KLe.forEach(t),Ijo=i(P),l1=n(P,"LI",{});var ZLe=s(l1);Wme=n(ZLe,"STRONG",{});var Act=s(Wme);qjo=r(Act,"lxmert"),Act.forEach(t),Njo=r(ZLe," \u2014 "),hG=n(ZLe,"A",{href:!0});var yct=s(hG);jjo=r(yct,"LxmertForQuestionAnswering"),yct.forEach(t),Djo=r(ZLe," (LXMERT model)"),ZLe.forEach(t),Gjo=i(P),i1=n(P,"LI",{});var e7e=s(i1);Hme=n(e7e,"STRONG",{});var Lct=s(Hme);Ojo=r(Lct,"mbart"),Lct.forEach(t),Vjo=r(e7e," \u2014 "),uG=n(e7e,"A",{href:!0});var xct=s(uG);Xjo=r(xct,"MBartForQuestionAnswering"),xct.forEach(t),zjo=r(e7e," (mBART model)"),e7e.forEach(t),Qjo=i(P),d1=n(P,"LI",{});var o7e=s(d1);Ume=n(o7e,"STRONG",{});var kct=s(Ume);Wjo=r(kct,"megatron-bert"),kct.forEach(t),Hjo=r(o7e," \u2014 "),pG=n(o7e,"A",{href:!0});var Sct=s(pG);Ujo=r(Sct,"MegatronBertForQuestionAnswering"),Sct.forEach(t),Jjo=r(o7e," (MegatronBert model)"),o7e.forEach(t),Yjo=i(P),c1=n(P,"LI",{});var r7e=s(c1);Jme=n(r7e,"STRONG",{});var Rct=s(Jme);Kjo=r(Rct,"mobilebert"),Rct.forEach(t),Zjo=r(r7e," \u2014 "),_G=n(r7e,"A",{href:!0});var Bct=s(_G);eDo=r(Bct,"MobileBertForQuestionAnswering"),Bct.forEach(t),oDo=r(r7e," (MobileBERT model)"),r7e.forEach(t),rDo=i(P),m1=n(P,"LI",{});var t7e=s(m1);Yme=n(t7e,"STRONG",{});var Pct=s(Yme);tDo=r(Pct,"mpnet"),Pct.forEach(t),aDo=r(t7e," \u2014 "),bG=n(t7e,"A",{href:!0});var $ct=s(bG);nDo=r($ct,"MPNetForQuestionAnswering"),$ct.forEach(t),sDo=r(t7e," (MPNet model)"),t7e.forEach(t),lDo=i(P),f1=n(P,"LI",{});var a7e=s(f1);Kme=n(a7e,"STRONG",{});var Ict=s(Kme);iDo=r(Ict,"nystromformer"),Ict.forEach(t),dDo=r(a7e," \u2014 "),vG=n(a7e,"A",{href:!0});var qct=s(vG);cDo=r(qct,"NystromformerForQuestionAnswering"),qct.forEach(t),mDo=r(a7e," (Nystromformer model)"),a7e.forEach(t),fDo=i(P),g1=n(P,"LI",{});var n7e=s(g1);Zme=n(n7e,"STRONG",{});var Nct=s(Zme);gDo=r(Nct,"qdqbert"),Nct.forEach(t),hDo=r(n7e," \u2014 "),FG=n(n7e,"A",{href:!0});var jct=s(FG);uDo=r(jct,"QDQBertForQuestionAnswering"),jct.forEach(t),pDo=r(n7e," (QDQBert model)"),n7e.forEach(t),_Do=i(P),h1=n(P,"LI",{});var s7e=s(h1);efe=n(s7e,"STRONG",{});var Dct=s(efe);bDo=r(Dct,"reformer"),Dct.forEach(t),vDo=r(s7e," \u2014 "),TG=n(s7e,"A",{href:!0});var Gct=s(TG);FDo=r(Gct,"ReformerForQuestionAnswering"),Gct.forEach(t),TDo=r(s7e," (Reformer model)"),s7e.forEach(t),MDo=i(P),u1=n(P,"LI",{});var l7e=s(u1);ofe=n(l7e,"STRONG",{});var Oct=s(ofe);EDo=r(Oct,"rembert"),Oct.forEach(t),CDo=r(l7e," \u2014 "),MG=n(l7e,"A",{href:!0});var Vct=s(MG);wDo=r(Vct,"RemBertForQuestionAnswering"),Vct.forEach(t),ADo=r(l7e," (RemBERT model)"),l7e.forEach(t),yDo=i(P),p1=n(P,"LI",{});var i7e=s(p1);rfe=n(i7e,"STRONG",{});var Xct=s(rfe);LDo=r(Xct,"roberta"),Xct.forEach(t),xDo=r(i7e," \u2014 "),EG=n(i7e,"A",{href:!0});var zct=s(EG);kDo=r(zct,"RobertaForQuestionAnswering"),zct.forEach(t),SDo=r(i7e," (RoBERTa model)"),i7e.forEach(t),RDo=i(P),_1=n(P,"LI",{});var d7e=s(_1);tfe=n(d7e,"STRONG",{});var Qct=s(tfe);BDo=r(Qct,"roformer"),Qct.forEach(t),PDo=r(d7e," \u2014 "),CG=n(d7e,"A",{href:!0});var Wct=s(CG);$Do=r(Wct,"RoFormerForQuestionAnswering"),Wct.forEach(t),IDo=r(d7e," (RoFormer model)"),d7e.forEach(t),qDo=i(P),b1=n(P,"LI",{});var c7e=s(b1);afe=n(c7e,"STRONG",{});var Hct=s(afe);NDo=r(Hct,"splinter"),Hct.forEach(t),jDo=r(c7e," \u2014 "),wG=n(c7e,"A",{href:!0});var Uct=s(wG);DDo=r(Uct,"SplinterForQuestionAnswering"),Uct.forEach(t),GDo=r(c7e," (Splinter model)"),c7e.forEach(t),ODo=i(P),v1=n(P,"LI",{});var m7e=s(v1);nfe=n(m7e,"STRONG",{});var Jct=s(nfe);VDo=r(Jct,"squeezebert"),Jct.forEach(t),XDo=r(m7e," \u2014 "),AG=n(m7e,"A",{href:!0});var Yct=s(AG);zDo=r(Yct,"SqueezeBertForQuestionAnswering"),Yct.forEach(t),QDo=r(m7e," (SqueezeBERT model)"),m7e.forEach(t),WDo=i(P),F1=n(P,"LI",{});var f7e=s(F1);sfe=n(f7e,"STRONG",{});var Kct=s(sfe);HDo=r(Kct,"xlm"),Kct.forEach(t),UDo=r(f7e," \u2014 "),yG=n(f7e,"A",{href:!0});var Zct=s(yG);JDo=r(Zct,"XLMForQuestionAnsweringSimple"),Zct.forEach(t),YDo=r(f7e," (XLM model)"),f7e.forEach(t),KDo=i(P),T1=n(P,"LI",{});var g7e=s(T1);lfe=n(g7e,"STRONG",{});var emt=s(lfe);ZDo=r(emt,"xlm-roberta"),emt.forEach(t),eGo=r(g7e," \u2014 "),LG=n(g7e,"A",{href:!0});var omt=s(LG);oGo=r(omt,"XLMRobertaForQuestionAnswering"),omt.forEach(t),rGo=r(g7e," (XLM-RoBERTa model)"),g7e.forEach(t),tGo=i(P),M1=n(P,"LI",{});var h7e=s(M1);ife=n(h7e,"STRONG",{});var rmt=s(ife);aGo=r(rmt,"xlm-roberta-xl"),rmt.forEach(t),nGo=r(h7e," \u2014 "),xG=n(h7e,"A",{href:!0});var tmt=s(xG);sGo=r(tmt,"XLMRobertaXLForQuestionAnswering"),tmt.forEach(t),lGo=r(h7e," (XLM-RoBERTa-XL model)"),h7e.forEach(t),iGo=i(P),E1=n(P,"LI",{});var u7e=s(E1);dfe=n(u7e,"STRONG",{});var amt=s(dfe);dGo=r(amt,"xlnet"),amt.forEach(t),cGo=r(u7e," \u2014 "),kG=n(u7e,"A",{href:!0});var nmt=s(kG);mGo=r(nmt,"XLNetForQuestionAnsweringSimple"),nmt.forEach(t),fGo=r(u7e," (XLNet model)"),u7e.forEach(t),gGo=i(P),C1=n(P,"LI",{});var p7e=s(C1);cfe=n(p7e,"STRONG",{});var smt=s(cfe);hGo=r(smt,"yoso"),smt.forEach(t),uGo=r(p7e," \u2014 "),SG=n(p7e,"A",{href:!0});var lmt=s(SG);pGo=r(lmt,"YosoForQuestionAnswering"),lmt.forEach(t),_Go=r(p7e," (YOSO model)"),p7e.forEach(t),P.forEach(t),bGo=i(Ut),w1=n(Ut,"P",{});var _7e=s(w1);vGo=r(_7e,"The model is set in evaluation mode by default using "),mfe=n(_7e,"CODE",{});var imt=s(mfe);FGo=r(imt,"model.eval()"),imt.forEach(t),TGo=r(_7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=n(_7e,"CODE",{});var dmt=s(ffe);MGo=r(dmt,"model.train()"),dmt.forEach(t),_7e.forEach(t),EGo=i(Ut),gfe=n(Ut,"P",{});var cmt=s(gfe);CGo=r(cmt,"Examples:"),cmt.forEach(t),wGo=i(Ut),f(DA.$$.fragment,Ut),Ut.forEach(t),Fl.forEach(t),RPe=i(c),$d=n(c,"H2",{class:!0});var GIe=s($d);A1=n(GIe,"A",{id:!0,class:!0,href:!0});var mmt=s(A1);hfe=n(mmt,"SPAN",{});var fmt=s(hfe);f(GA.$$.fragment,fmt),fmt.forEach(t),mmt.forEach(t),AGo=i(GIe),ufe=n(GIe,"SPAN",{});var gmt=s(ufe);yGo=r(gmt,"AutoModelForTableQuestionAnswering"),gmt.forEach(t),GIe.forEach(t),BPe=i(c),sr=n(c,"DIV",{class:!0});var Ml=s(sr);f(OA.$$.fragment,Ml),LGo=i(Ml),Id=n(Ml,"P",{});var IJ=s(Id);xGo=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RG=n(IJ,"A",{href:!0});var hmt=s(RG);kGo=r(hmt,"from_pretrained()"),hmt.forEach(t),SGo=r(IJ," class method or the "),BG=n(IJ,"A",{href:!0});var umt=s(BG);RGo=r(umt,"from_config()"),umt.forEach(t),BGo=r(IJ,` class
method.`),IJ.forEach(t),PGo=i(Ml),VA=n(Ml,"P",{});var OIe=s(VA);$Go=r(OIe,"This class cannot be instantiated directly using "),pfe=n(OIe,"CODE",{});var pmt=s(pfe);IGo=r(pmt,"__init__()"),pmt.forEach(t),qGo=r(OIe," (throws an error)."),OIe.forEach(t),NGo=i(Ml),et=n(Ml,"DIV",{class:!0});var El=s(et);f(XA.$$.fragment,El),jGo=i(El),_fe=n(El,"P",{});var _mt=s(_fe);DGo=r(_mt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_mt.forEach(t),GGo=i(El),qd=n(El,"P",{});var qJ=s(qd);OGo=r(qJ,`Note:
Loading a model from its configuration file does `),bfe=n(qJ,"STRONG",{});var bmt=s(bfe);VGo=r(bmt,"not"),bmt.forEach(t),XGo=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(qJ,"A",{href:!0});var vmt=s(PG);zGo=r(vmt,"from_pretrained()"),vmt.forEach(t),QGo=r(qJ," to load the model weights."),qJ.forEach(t),WGo=i(El),vfe=n(El,"P",{});var Fmt=s(vfe);HGo=r(Fmt,"Examples:"),Fmt.forEach(t),UGo=i(El),f(zA.$$.fragment,El),El.forEach(t),JGo=i(Ml),He=n(Ml,"DIV",{class:!0});var Jt=s(He);f(QA.$$.fragment,Jt),YGo=i(Jt),Ffe=n(Jt,"P",{});var Tmt=s(Ffe);KGo=r(Tmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Tmt.forEach(t),ZGo=i(Jt),en=n(Jt,"P",{});var a6=s(en);eOo=r(a6,"The model class to instantiate is selected based on the "),Tfe=n(a6,"CODE",{});var Mmt=s(Tfe);oOo=r(Mmt,"model_type"),Mmt.forEach(t),rOo=r(a6,` property of the config object (either
passed as an argument or loaded from `),Mfe=n(a6,"CODE",{});var Emt=s(Mfe);tOo=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),aOo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Efe=n(a6,"CODE",{});var Cmt=s(Efe);nOo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),sOo=r(a6,":"),a6.forEach(t),lOo=i(Jt),Cfe=n(Jt,"UL",{});var wmt=s(Cfe);y1=n(wmt,"LI",{});var b7e=s(y1);wfe=n(b7e,"STRONG",{});var Amt=s(wfe);iOo=r(Amt,"tapas"),Amt.forEach(t),dOo=r(b7e," \u2014 "),$G=n(b7e,"A",{href:!0});var ymt=s($G);cOo=r(ymt,"TapasForQuestionAnswering"),ymt.forEach(t),mOo=r(b7e," (TAPAS model)"),b7e.forEach(t),wmt.forEach(t),fOo=i(Jt),L1=n(Jt,"P",{});var v7e=s(L1);gOo=r(v7e,"The model is set in evaluation mode by default using "),Afe=n(v7e,"CODE",{});var Lmt=s(Afe);hOo=r(Lmt,"model.eval()"),Lmt.forEach(t),uOo=r(v7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=n(v7e,"CODE",{});var xmt=s(yfe);pOo=r(xmt,"model.train()"),xmt.forEach(t),v7e.forEach(t),_Oo=i(Jt),Lfe=n(Jt,"P",{});var kmt=s(Lfe);bOo=r(kmt,"Examples:"),kmt.forEach(t),vOo=i(Jt),f(WA.$$.fragment,Jt),Jt.forEach(t),Ml.forEach(t),PPe=i(c),Nd=n(c,"H2",{class:!0});var VIe=s(Nd);x1=n(VIe,"A",{id:!0,class:!0,href:!0});var Smt=s(x1);xfe=n(Smt,"SPAN",{});var Rmt=s(xfe);f(HA.$$.fragment,Rmt),Rmt.forEach(t),Smt.forEach(t),FOo=i(VIe),kfe=n(VIe,"SPAN",{});var Bmt=s(kfe);TOo=r(Bmt,"AutoModelForImageClassification"),Bmt.forEach(t),VIe.forEach(t),$Pe=i(c),lr=n(c,"DIV",{class:!0});var Cl=s(lr);f(UA.$$.fragment,Cl),MOo=i(Cl),jd=n(Cl,"P",{});var NJ=s(jd);EOo=r(NJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IG=n(NJ,"A",{href:!0});var Pmt=s(IG);COo=r(Pmt,"from_pretrained()"),Pmt.forEach(t),wOo=r(NJ," class method or the "),qG=n(NJ,"A",{href:!0});var $mt=s(qG);AOo=r($mt,"from_config()"),$mt.forEach(t),yOo=r(NJ,` class
method.`),NJ.forEach(t),LOo=i(Cl),JA=n(Cl,"P",{});var XIe=s(JA);xOo=r(XIe,"This class cannot be instantiated directly using "),Sfe=n(XIe,"CODE",{});var Imt=s(Sfe);kOo=r(Imt,"__init__()"),Imt.forEach(t),SOo=r(XIe," (throws an error)."),XIe.forEach(t),ROo=i(Cl),ot=n(Cl,"DIV",{class:!0});var wl=s(ot);f(YA.$$.fragment,wl),BOo=i(wl),Rfe=n(wl,"P",{});var qmt=s(Rfe);POo=r(qmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qmt.forEach(t),$Oo=i(wl),Dd=n(wl,"P",{});var jJ=s(Dd);IOo=r(jJ,`Note:
Loading a model from its configuration file does `),Bfe=n(jJ,"STRONG",{});var Nmt=s(Bfe);qOo=r(Nmt,"not"),Nmt.forEach(t),NOo=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(jJ,"A",{href:!0});var jmt=s(NG);jOo=r(jmt,"from_pretrained()"),jmt.forEach(t),DOo=r(jJ," to load the model weights."),jJ.forEach(t),GOo=i(wl),Pfe=n(wl,"P",{});var Dmt=s(Pfe);OOo=r(Dmt,"Examples:"),Dmt.forEach(t),VOo=i(wl),f(KA.$$.fragment,wl),wl.forEach(t),XOo=i(Cl),Ue=n(Cl,"DIV",{class:!0});var Yt=s(Ue);f(ZA.$$.fragment,Yt),zOo=i(Yt),$fe=n(Yt,"P",{});var Gmt=s($fe);QOo=r(Gmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gmt.forEach(t),WOo=i(Yt),on=n(Yt,"P",{});var n6=s(on);HOo=r(n6,"The model class to instantiate is selected based on the "),Ife=n(n6,"CODE",{});var Omt=s(Ife);UOo=r(Omt,"model_type"),Omt.forEach(t),JOo=r(n6,` property of the config object (either
passed as an argument or loaded from `),qfe=n(n6,"CODE",{});var Vmt=s(qfe);YOo=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),KOo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=n(n6,"CODE",{});var Xmt=s(Nfe);ZOo=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),eVo=r(n6,":"),n6.forEach(t),oVo=i(Yt),ce=n(Yt,"UL",{});var ue=s(ce);k1=n(ue,"LI",{});var F7e=s(k1);jfe=n(F7e,"STRONG",{});var zmt=s(jfe);rVo=r(zmt,"beit"),zmt.forEach(t),tVo=r(F7e," \u2014 "),jG=n(F7e,"A",{href:!0});var Qmt=s(jG);aVo=r(Qmt,"BeitForImageClassification"),Qmt.forEach(t),nVo=r(F7e," (BEiT model)"),F7e.forEach(t),sVo=i(ue),S1=n(ue,"LI",{});var T7e=s(S1);Dfe=n(T7e,"STRONG",{});var Wmt=s(Dfe);lVo=r(Wmt,"convnext"),Wmt.forEach(t),iVo=r(T7e," \u2014 "),DG=n(T7e,"A",{href:!0});var Hmt=s(DG);dVo=r(Hmt,"ConvNextForImageClassification"),Hmt.forEach(t),cVo=r(T7e," (ConvNext model)"),T7e.forEach(t),mVo=i(ue),R1=n(ue,"LI",{});var M7e=s(R1);Gfe=n(M7e,"STRONG",{});var Umt=s(Gfe);fVo=r(Umt,"data2vec-vision"),Umt.forEach(t),gVo=r(M7e," \u2014 "),GG=n(M7e,"A",{href:!0});var Jmt=s(GG);hVo=r(Jmt,"Data2VecVisionForImageClassification"),Jmt.forEach(t),uVo=r(M7e," (Data2VecVision model)"),M7e.forEach(t),pVo=i(ue),Us=n(ue,"LI",{});var V9=s(Us);Ofe=n(V9,"STRONG",{});var Ymt=s(Ofe);_Vo=r(Ymt,"deit"),Ymt.forEach(t),bVo=r(V9," \u2014 "),OG=n(V9,"A",{href:!0});var Kmt=s(OG);vVo=r(Kmt,"DeiTForImageClassification"),Kmt.forEach(t),FVo=r(V9," or "),VG=n(V9,"A",{href:!0});var Zmt=s(VG);TVo=r(Zmt,"DeiTForImageClassificationWithTeacher"),Zmt.forEach(t),MVo=r(V9," (DeiT model)"),V9.forEach(t),EVo=i(ue),B1=n(ue,"LI",{});var E7e=s(B1);Vfe=n(E7e,"STRONG",{});var eft=s(Vfe);CVo=r(eft,"imagegpt"),eft.forEach(t),wVo=r(E7e," \u2014 "),XG=n(E7e,"A",{href:!0});var oft=s(XG);AVo=r(oft,"ImageGPTForImageClassification"),oft.forEach(t),yVo=r(E7e," (ImageGPT model)"),E7e.forEach(t),LVo=i(ue),fa=n(ue,"LI",{});var Om=s(fa);Xfe=n(Om,"STRONG",{});var rft=s(Xfe);xVo=r(rft,"perceiver"),rft.forEach(t),kVo=r(Om," \u2014 "),zG=n(Om,"A",{href:!0});var tft=s(zG);SVo=r(tft,"PerceiverForImageClassificationLearned"),tft.forEach(t),RVo=r(Om," or "),QG=n(Om,"A",{href:!0});var aft=s(QG);BVo=r(aft,"PerceiverForImageClassificationFourier"),aft.forEach(t),PVo=r(Om," or "),WG=n(Om,"A",{href:!0});var nft=s(WG);$Vo=r(nft,"PerceiverForImageClassificationConvProcessing"),nft.forEach(t),IVo=r(Om," (Perceiver model)"),Om.forEach(t),qVo=i(ue),P1=n(ue,"LI",{});var C7e=s(P1);zfe=n(C7e,"STRONG",{});var sft=s(zfe);NVo=r(sft,"poolformer"),sft.forEach(t),jVo=r(C7e," \u2014 "),HG=n(C7e,"A",{href:!0});var lft=s(HG);DVo=r(lft,"PoolFormerForImageClassification"),lft.forEach(t),GVo=r(C7e," (PoolFormer model)"),C7e.forEach(t),OVo=i(ue),$1=n(ue,"LI",{});var w7e=s($1);Qfe=n(w7e,"STRONG",{});var ift=s(Qfe);VVo=r(ift,"regnet"),ift.forEach(t),XVo=r(w7e," \u2014 "),UG=n(w7e,"A",{href:!0});var dft=s(UG);zVo=r(dft,"RegNetForImageClassification"),dft.forEach(t),QVo=r(w7e," (RegNet model)"),w7e.forEach(t),WVo=i(ue),I1=n(ue,"LI",{});var A7e=s(I1);Wfe=n(A7e,"STRONG",{});var cft=s(Wfe);HVo=r(cft,"resnet"),cft.forEach(t),UVo=r(A7e," \u2014 "),JG=n(A7e,"A",{href:!0});var mft=s(JG);JVo=r(mft,"ResNetForImageClassification"),mft.forEach(t),YVo=r(A7e," (ResNet model)"),A7e.forEach(t),KVo=i(ue),q1=n(ue,"LI",{});var y7e=s(q1);Hfe=n(y7e,"STRONG",{});var fft=s(Hfe);ZVo=r(fft,"segformer"),fft.forEach(t),eXo=r(y7e," \u2014 "),YG=n(y7e,"A",{href:!0});var gft=s(YG);oXo=r(gft,"SegformerForImageClassification"),gft.forEach(t),rXo=r(y7e," (SegFormer model)"),y7e.forEach(t),tXo=i(ue),N1=n(ue,"LI",{});var L7e=s(N1);Ufe=n(L7e,"STRONG",{});var hft=s(Ufe);aXo=r(hft,"swin"),hft.forEach(t),nXo=r(L7e," \u2014 "),KG=n(L7e,"A",{href:!0});var uft=s(KG);sXo=r(uft,"SwinForImageClassification"),uft.forEach(t),lXo=r(L7e," (Swin model)"),L7e.forEach(t),iXo=i(ue),j1=n(ue,"LI",{});var x7e=s(j1);Jfe=n(x7e,"STRONG",{});var pft=s(Jfe);dXo=r(pft,"van"),pft.forEach(t),cXo=r(x7e," \u2014 "),ZG=n(x7e,"A",{href:!0});var _ft=s(ZG);mXo=r(_ft,"VanForImageClassification"),_ft.forEach(t),fXo=r(x7e," (VAN model)"),x7e.forEach(t),gXo=i(ue),D1=n(ue,"LI",{});var k7e=s(D1);Yfe=n(k7e,"STRONG",{});var bft=s(Yfe);hXo=r(bft,"vit"),bft.forEach(t),uXo=r(k7e," \u2014 "),eO=n(k7e,"A",{href:!0});var vft=s(eO);pXo=r(vft,"ViTForImageClassification"),vft.forEach(t),_Xo=r(k7e," (ViT model)"),k7e.forEach(t),ue.forEach(t),bXo=i(Yt),G1=n(Yt,"P",{});var S7e=s(G1);vXo=r(S7e,"The model is set in evaluation mode by default using "),Kfe=n(S7e,"CODE",{});var Fft=s(Kfe);FXo=r(Fft,"model.eval()"),Fft.forEach(t),TXo=r(S7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(S7e,"CODE",{});var Tft=s(Zfe);MXo=r(Tft,"model.train()"),Tft.forEach(t),S7e.forEach(t),EXo=i(Yt),ege=n(Yt,"P",{});var Mft=s(ege);CXo=r(Mft,"Examples:"),Mft.forEach(t),wXo=i(Yt),f(e0.$$.fragment,Yt),Yt.forEach(t),Cl.forEach(t),IPe=i(c),Gd=n(c,"H2",{class:!0});var zIe=s(Gd);O1=n(zIe,"A",{id:!0,class:!0,href:!0});var Eft=s(O1);oge=n(Eft,"SPAN",{});var Cft=s(oge);f(o0.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),AXo=i(zIe),rge=n(zIe,"SPAN",{});var wft=s(rge);yXo=r(wft,"AutoModelForVision2Seq"),wft.forEach(t),zIe.forEach(t),qPe=i(c),ir=n(c,"DIV",{class:!0});var Al=s(ir);f(r0.$$.fragment,Al),LXo=i(Al),Od=n(Al,"P",{});var DJ=s(Od);xXo=r(DJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oO=n(DJ,"A",{href:!0});var Aft=s(oO);kXo=r(Aft,"from_pretrained()"),Aft.forEach(t),SXo=r(DJ," class method or the "),rO=n(DJ,"A",{href:!0});var yft=s(rO);RXo=r(yft,"from_config()"),yft.forEach(t),BXo=r(DJ,` class
method.`),DJ.forEach(t),PXo=i(Al),t0=n(Al,"P",{});var QIe=s(t0);$Xo=r(QIe,"This class cannot be instantiated directly using "),tge=n(QIe,"CODE",{});var Lft=s(tge);IXo=r(Lft,"__init__()"),Lft.forEach(t),qXo=r(QIe," (throws an error)."),QIe.forEach(t),NXo=i(Al),rt=n(Al,"DIV",{class:!0});var yl=s(rt);f(a0.$$.fragment,yl),jXo=i(yl),age=n(yl,"P",{});var xft=s(age);DXo=r(xft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xft.forEach(t),GXo=i(yl),Vd=n(yl,"P",{});var GJ=s(Vd);OXo=r(GJ,`Note:
Loading a model from its configuration file does `),nge=n(GJ,"STRONG",{});var kft=s(nge);VXo=r(kft,"not"),kft.forEach(t),XXo=r(GJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(GJ,"A",{href:!0});var Sft=s(tO);zXo=r(Sft,"from_pretrained()"),Sft.forEach(t),QXo=r(GJ," to load the model weights."),GJ.forEach(t),WXo=i(yl),sge=n(yl,"P",{});var Rft=s(sge);HXo=r(Rft,"Examples:"),Rft.forEach(t),UXo=i(yl),f(n0.$$.fragment,yl),yl.forEach(t),JXo=i(Al),Je=n(Al,"DIV",{class:!0});var Kt=s(Je);f(s0.$$.fragment,Kt),YXo=i(Kt),lge=n(Kt,"P",{});var Bft=s(lge);KXo=r(Bft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bft.forEach(t),ZXo=i(Kt),rn=n(Kt,"P",{});var s6=s(rn);ezo=r(s6,"The model class to instantiate is selected based on the "),ige=n(s6,"CODE",{});var Pft=s(ige);ozo=r(Pft,"model_type"),Pft.forEach(t),rzo=r(s6,` property of the config object (either
passed as an argument or loaded from `),dge=n(s6,"CODE",{});var $ft=s(dge);tzo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),azo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(s6,"CODE",{});var Ift=s(cge);nzo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),szo=r(s6,":"),s6.forEach(t),lzo=i(Kt),mge=n(Kt,"UL",{});var qft=s(mge);V1=n(qft,"LI",{});var R7e=s(V1);fge=n(R7e,"STRONG",{});var Nft=s(fge);izo=r(Nft,"vision-encoder-decoder"),Nft.forEach(t),dzo=r(R7e," \u2014 "),aO=n(R7e,"A",{href:!0});var jft=s(aO);czo=r(jft,"VisionEncoderDecoderModel"),jft.forEach(t),mzo=r(R7e," (Vision Encoder decoder model)"),R7e.forEach(t),qft.forEach(t),fzo=i(Kt),X1=n(Kt,"P",{});var B7e=s(X1);gzo=r(B7e,"The model is set in evaluation mode by default using "),gge=n(B7e,"CODE",{});var Dft=s(gge);hzo=r(Dft,"model.eval()"),Dft.forEach(t),uzo=r(B7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(B7e,"CODE",{});var Gft=s(hge);pzo=r(Gft,"model.train()"),Gft.forEach(t),B7e.forEach(t),_zo=i(Kt),uge=n(Kt,"P",{});var Oft=s(uge);bzo=r(Oft,"Examples:"),Oft.forEach(t),vzo=i(Kt),f(l0.$$.fragment,Kt),Kt.forEach(t),Al.forEach(t),NPe=i(c),Xd=n(c,"H2",{class:!0});var WIe=s(Xd);z1=n(WIe,"A",{id:!0,class:!0,href:!0});var Vft=s(z1);pge=n(Vft,"SPAN",{});var Xft=s(pge);f(i0.$$.fragment,Xft),Xft.forEach(t),Vft.forEach(t),Fzo=i(WIe),_ge=n(WIe,"SPAN",{});var zft=s(_ge);Tzo=r(zft,"AutoModelForAudioClassification"),zft.forEach(t),WIe.forEach(t),jPe=i(c),dr=n(c,"DIV",{class:!0});var Ll=s(dr);f(d0.$$.fragment,Ll),Mzo=i(Ll),zd=n(Ll,"P",{});var OJ=s(zd);Ezo=r(OJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nO=n(OJ,"A",{href:!0});var Qft=s(nO);Czo=r(Qft,"from_pretrained()"),Qft.forEach(t),wzo=r(OJ," class method or the "),sO=n(OJ,"A",{href:!0});var Wft=s(sO);Azo=r(Wft,"from_config()"),Wft.forEach(t),yzo=r(OJ,` class
method.`),OJ.forEach(t),Lzo=i(Ll),c0=n(Ll,"P",{});var HIe=s(c0);xzo=r(HIe,"This class cannot be instantiated directly using "),bge=n(HIe,"CODE",{});var Hft=s(bge);kzo=r(Hft,"__init__()"),Hft.forEach(t),Szo=r(HIe," (throws an error)."),HIe.forEach(t),Rzo=i(Ll),tt=n(Ll,"DIV",{class:!0});var xl=s(tt);f(m0.$$.fragment,xl),Bzo=i(xl),vge=n(xl,"P",{});var Uft=s(vge);Pzo=r(Uft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Uft.forEach(t),$zo=i(xl),Qd=n(xl,"P",{});var VJ=s(Qd);Izo=r(VJ,`Note:
Loading a model from its configuration file does `),Fge=n(VJ,"STRONG",{});var Jft=s(Fge);qzo=r(Jft,"not"),Jft.forEach(t),Nzo=r(VJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(VJ,"A",{href:!0});var Yft=s(lO);jzo=r(Yft,"from_pretrained()"),Yft.forEach(t),Dzo=r(VJ," to load the model weights."),VJ.forEach(t),Gzo=i(xl),Tge=n(xl,"P",{});var Kft=s(Tge);Ozo=r(Kft,"Examples:"),Kft.forEach(t),Vzo=i(xl),f(f0.$$.fragment,xl),xl.forEach(t),Xzo=i(Ll),Ye=n(Ll,"DIV",{class:!0});var Zt=s(Ye);f(g0.$$.fragment,Zt),zzo=i(Zt),Mge=n(Zt,"P",{});var Zft=s(Mge);Qzo=r(Zft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Zft.forEach(t),Wzo=i(Zt),tn=n(Zt,"P",{});var l6=s(tn);Hzo=r(l6,"The model class to instantiate is selected based on the "),Ege=n(l6,"CODE",{});var egt=s(Ege);Uzo=r(egt,"model_type"),egt.forEach(t),Jzo=r(l6,` property of the config object (either
passed as an argument or loaded from `),Cge=n(l6,"CODE",{});var ogt=s(Cge);Yzo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),Kzo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(l6,"CODE",{});var rgt=s(wge);Zzo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),eQo=r(l6,":"),l6.forEach(t),oQo=i(Zt),Re=n(Zt,"UL",{});var Do=s(Re);Q1=n(Do,"LI",{});var P7e=s(Q1);Age=n(P7e,"STRONG",{});var tgt=s(Age);rQo=r(tgt,"data2vec-audio"),tgt.forEach(t),tQo=r(P7e," \u2014 "),iO=n(P7e,"A",{href:!0});var agt=s(iO);aQo=r(agt,"Data2VecAudioForSequenceClassification"),agt.forEach(t),nQo=r(P7e," (Data2VecAudio model)"),P7e.forEach(t),sQo=i(Do),W1=n(Do,"LI",{});var $7e=s(W1);yge=n($7e,"STRONG",{});var ngt=s(yge);lQo=r(ngt,"hubert"),ngt.forEach(t),iQo=r($7e," \u2014 "),dO=n($7e,"A",{href:!0});var sgt=s(dO);dQo=r(sgt,"HubertForSequenceClassification"),sgt.forEach(t),cQo=r($7e," (Hubert model)"),$7e.forEach(t),mQo=i(Do),H1=n(Do,"LI",{});var I7e=s(H1);Lge=n(I7e,"STRONG",{});var lgt=s(Lge);fQo=r(lgt,"sew"),lgt.forEach(t),gQo=r(I7e," \u2014 "),cO=n(I7e,"A",{href:!0});var igt=s(cO);hQo=r(igt,"SEWForSequenceClassification"),igt.forEach(t),uQo=r(I7e," (SEW model)"),I7e.forEach(t),pQo=i(Do),U1=n(Do,"LI",{});var q7e=s(U1);xge=n(q7e,"STRONG",{});var dgt=s(xge);_Qo=r(dgt,"sew-d"),dgt.forEach(t),bQo=r(q7e," \u2014 "),mO=n(q7e,"A",{href:!0});var cgt=s(mO);vQo=r(cgt,"SEWDForSequenceClassification"),cgt.forEach(t),FQo=r(q7e," (SEW-D model)"),q7e.forEach(t),TQo=i(Do),J1=n(Do,"LI",{});var N7e=s(J1);kge=n(N7e,"STRONG",{});var mgt=s(kge);MQo=r(mgt,"unispeech"),mgt.forEach(t),EQo=r(N7e," \u2014 "),fO=n(N7e,"A",{href:!0});var fgt=s(fO);CQo=r(fgt,"UniSpeechForSequenceClassification"),fgt.forEach(t),wQo=r(N7e," (UniSpeech model)"),N7e.forEach(t),AQo=i(Do),Y1=n(Do,"LI",{});var j7e=s(Y1);Sge=n(j7e,"STRONG",{});var ggt=s(Sge);yQo=r(ggt,"unispeech-sat"),ggt.forEach(t),LQo=r(j7e," \u2014 "),gO=n(j7e,"A",{href:!0});var hgt=s(gO);xQo=r(hgt,"UniSpeechSatForSequenceClassification"),hgt.forEach(t),kQo=r(j7e," (UniSpeechSat model)"),j7e.forEach(t),SQo=i(Do),K1=n(Do,"LI",{});var D7e=s(K1);Rge=n(D7e,"STRONG",{});var ugt=s(Rge);RQo=r(ugt,"wav2vec2"),ugt.forEach(t),BQo=r(D7e," \u2014 "),hO=n(D7e,"A",{href:!0});var pgt=s(hO);PQo=r(pgt,"Wav2Vec2ForSequenceClassification"),pgt.forEach(t),$Qo=r(D7e," (Wav2Vec2 model)"),D7e.forEach(t),IQo=i(Do),Z1=n(Do,"LI",{});var G7e=s(Z1);Bge=n(G7e,"STRONG",{});var _gt=s(Bge);qQo=r(_gt,"wavlm"),_gt.forEach(t),NQo=r(G7e," \u2014 "),uO=n(G7e,"A",{href:!0});var bgt=s(uO);jQo=r(bgt,"WavLMForSequenceClassification"),bgt.forEach(t),DQo=r(G7e," (WavLM model)"),G7e.forEach(t),Do.forEach(t),GQo=i(Zt),eT=n(Zt,"P",{});var O7e=s(eT);OQo=r(O7e,"The model is set in evaluation mode by default using "),Pge=n(O7e,"CODE",{});var vgt=s(Pge);VQo=r(vgt,"model.eval()"),vgt.forEach(t),XQo=r(O7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ge=n(O7e,"CODE",{});var Fgt=s($ge);zQo=r(Fgt,"model.train()"),Fgt.forEach(t),O7e.forEach(t),QQo=i(Zt),Ige=n(Zt,"P",{});var Tgt=s(Ige);WQo=r(Tgt,"Examples:"),Tgt.forEach(t),HQo=i(Zt),f(h0.$$.fragment,Zt),Zt.forEach(t),Ll.forEach(t),DPe=i(c),Wd=n(c,"H2",{class:!0});var UIe=s(Wd);oT=n(UIe,"A",{id:!0,class:!0,href:!0});var Mgt=s(oT);qge=n(Mgt,"SPAN",{});var Egt=s(qge);f(u0.$$.fragment,Egt),Egt.forEach(t),Mgt.forEach(t),UQo=i(UIe),Nge=n(UIe,"SPAN",{});var Cgt=s(Nge);JQo=r(Cgt,"AutoModelForAudioFrameClassification"),Cgt.forEach(t),UIe.forEach(t),GPe=i(c),cr=n(c,"DIV",{class:!0});var kl=s(cr);f(p0.$$.fragment,kl),YQo=i(kl),Hd=n(kl,"P",{});var XJ=s(Hd);KQo=r(XJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pO=n(XJ,"A",{href:!0});var wgt=s(pO);ZQo=r(wgt,"from_pretrained()"),wgt.forEach(t),eWo=r(XJ," class method or the "),_O=n(XJ,"A",{href:!0});var Agt=s(_O);oWo=r(Agt,"from_config()"),Agt.forEach(t),rWo=r(XJ,` class
method.`),XJ.forEach(t),tWo=i(kl),_0=n(kl,"P",{});var JIe=s(_0);aWo=r(JIe,"This class cannot be instantiated directly using "),jge=n(JIe,"CODE",{});var ygt=s(jge);nWo=r(ygt,"__init__()"),ygt.forEach(t),sWo=r(JIe," (throws an error)."),JIe.forEach(t),lWo=i(kl),at=n(kl,"DIV",{class:!0});var Sl=s(at);f(b0.$$.fragment,Sl),iWo=i(Sl),Dge=n(Sl,"P",{});var Lgt=s(Dge);dWo=r(Lgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Lgt.forEach(t),cWo=i(Sl),Ud=n(Sl,"P",{});var zJ=s(Ud);mWo=r(zJ,`Note:
Loading a model from its configuration file does `),Gge=n(zJ,"STRONG",{});var xgt=s(Gge);fWo=r(xgt,"not"),xgt.forEach(t),gWo=r(zJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(zJ,"A",{href:!0});var kgt=s(bO);hWo=r(kgt,"from_pretrained()"),kgt.forEach(t),uWo=r(zJ," to load the model weights."),zJ.forEach(t),pWo=i(Sl),Oge=n(Sl,"P",{});var Sgt=s(Oge);_Wo=r(Sgt,"Examples:"),Sgt.forEach(t),bWo=i(Sl),f(v0.$$.fragment,Sl),Sl.forEach(t),vWo=i(kl),Ke=n(kl,"DIV",{class:!0});var ea=s(Ke);f(F0.$$.fragment,ea),FWo=i(ea),Vge=n(ea,"P",{});var Rgt=s(Vge);TWo=r(Rgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Rgt.forEach(t),MWo=i(ea),an=n(ea,"P",{});var i6=s(an);EWo=r(i6,"The model class to instantiate is selected based on the "),Xge=n(i6,"CODE",{});var Bgt=s(Xge);CWo=r(Bgt,"model_type"),Bgt.forEach(t),wWo=r(i6,` property of the config object (either
passed as an argument or loaded from `),zge=n(i6,"CODE",{});var Pgt=s(zge);AWo=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),yWo=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(i6,"CODE",{});var $gt=s(Qge);LWo=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),xWo=r(i6,":"),i6.forEach(t),kWo=i(ea),nn=n(ea,"UL",{});var d6=s(nn);rT=n(d6,"LI",{});var V7e=s(rT);Wge=n(V7e,"STRONG",{});var Igt=s(Wge);SWo=r(Igt,"data2vec-audio"),Igt.forEach(t),RWo=r(V7e," \u2014 "),vO=n(V7e,"A",{href:!0});var qgt=s(vO);BWo=r(qgt,"Data2VecAudioForAudioFrameClassification"),qgt.forEach(t),PWo=r(V7e," (Data2VecAudio model)"),V7e.forEach(t),$Wo=i(d6),tT=n(d6,"LI",{});var X7e=s(tT);Hge=n(X7e,"STRONG",{});var Ngt=s(Hge);IWo=r(Ngt,"unispeech-sat"),Ngt.forEach(t),qWo=r(X7e," \u2014 "),FO=n(X7e,"A",{href:!0});var jgt=s(FO);NWo=r(jgt,"UniSpeechSatForAudioFrameClassification"),jgt.forEach(t),jWo=r(X7e," (UniSpeechSat model)"),X7e.forEach(t),DWo=i(d6),aT=n(d6,"LI",{});var z7e=s(aT);Uge=n(z7e,"STRONG",{});var Dgt=s(Uge);GWo=r(Dgt,"wav2vec2"),Dgt.forEach(t),OWo=r(z7e," \u2014 "),TO=n(z7e,"A",{href:!0});var Ggt=s(TO);VWo=r(Ggt,"Wav2Vec2ForAudioFrameClassification"),Ggt.forEach(t),XWo=r(z7e," (Wav2Vec2 model)"),z7e.forEach(t),zWo=i(d6),nT=n(d6,"LI",{});var Q7e=s(nT);Jge=n(Q7e,"STRONG",{});var Ogt=s(Jge);QWo=r(Ogt,"wavlm"),Ogt.forEach(t),WWo=r(Q7e," \u2014 "),MO=n(Q7e,"A",{href:!0});var Vgt=s(MO);HWo=r(Vgt,"WavLMForAudioFrameClassification"),Vgt.forEach(t),UWo=r(Q7e," (WavLM model)"),Q7e.forEach(t),d6.forEach(t),JWo=i(ea),sT=n(ea,"P",{});var W7e=s(sT);YWo=r(W7e,"The model is set in evaluation mode by default using "),Yge=n(W7e,"CODE",{});var Xgt=s(Yge);KWo=r(Xgt,"model.eval()"),Xgt.forEach(t),ZWo=r(W7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(W7e,"CODE",{});var zgt=s(Kge);eHo=r(zgt,"model.train()"),zgt.forEach(t),W7e.forEach(t),oHo=i(ea),Zge=n(ea,"P",{});var Qgt=s(Zge);rHo=r(Qgt,"Examples:"),Qgt.forEach(t),tHo=i(ea),f(T0.$$.fragment,ea),ea.forEach(t),kl.forEach(t),OPe=i(c),Jd=n(c,"H2",{class:!0});var YIe=s(Jd);lT=n(YIe,"A",{id:!0,class:!0,href:!0});var Wgt=s(lT);ehe=n(Wgt,"SPAN",{});var Hgt=s(ehe);f(M0.$$.fragment,Hgt),Hgt.forEach(t),Wgt.forEach(t),aHo=i(YIe),ohe=n(YIe,"SPAN",{});var Ugt=s(ohe);nHo=r(Ugt,"AutoModelForCTC"),Ugt.forEach(t),YIe.forEach(t),VPe=i(c),mr=n(c,"DIV",{class:!0});var Rl=s(mr);f(E0.$$.fragment,Rl),sHo=i(Rl),Yd=n(Rl,"P",{});var QJ=s(Yd);lHo=r(QJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EO=n(QJ,"A",{href:!0});var Jgt=s(EO);iHo=r(Jgt,"from_pretrained()"),Jgt.forEach(t),dHo=r(QJ," class method or the "),CO=n(QJ,"A",{href:!0});var Ygt=s(CO);cHo=r(Ygt,"from_config()"),Ygt.forEach(t),mHo=r(QJ,` class
method.`),QJ.forEach(t),fHo=i(Rl),C0=n(Rl,"P",{});var KIe=s(C0);gHo=r(KIe,"This class cannot be instantiated directly using "),rhe=n(KIe,"CODE",{});var Kgt=s(rhe);hHo=r(Kgt,"__init__()"),Kgt.forEach(t),uHo=r(KIe," (throws an error)."),KIe.forEach(t),pHo=i(Rl),nt=n(Rl,"DIV",{class:!0});var Bl=s(nt);f(w0.$$.fragment,Bl),_Ho=i(Bl),the=n(Bl,"P",{});var Zgt=s(the);bHo=r(Zgt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Zgt.forEach(t),vHo=i(Bl),Kd=n(Bl,"P",{});var WJ=s(Kd);FHo=r(WJ,`Note:
Loading a model from its configuration file does `),ahe=n(WJ,"STRONG",{});var eht=s(ahe);THo=r(eht,"not"),eht.forEach(t),MHo=r(WJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(WJ,"A",{href:!0});var oht=s(wO);EHo=r(oht,"from_pretrained()"),oht.forEach(t),CHo=r(WJ," to load the model weights."),WJ.forEach(t),wHo=i(Bl),nhe=n(Bl,"P",{});var rht=s(nhe);AHo=r(rht,"Examples:"),rht.forEach(t),yHo=i(Bl),f(A0.$$.fragment,Bl),Bl.forEach(t),LHo=i(Rl),Ze=n(Rl,"DIV",{class:!0});var oa=s(Ze);f(y0.$$.fragment,oa),xHo=i(oa),she=n(oa,"P",{});var tht=s(she);kHo=r(tht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tht.forEach(t),SHo=i(oa),sn=n(oa,"P",{});var c6=s(sn);RHo=r(c6,"The model class to instantiate is selected based on the "),lhe=n(c6,"CODE",{});var aht=s(lhe);BHo=r(aht,"model_type"),aht.forEach(t),PHo=r(c6,` property of the config object (either
passed as an argument or loaded from `),ihe=n(c6,"CODE",{});var nht=s(ihe);$Ho=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),IHo=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(c6,"CODE",{});var sht=s(dhe);qHo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),NHo=r(c6,":"),c6.forEach(t),jHo=i(oa),Be=n(oa,"UL",{});var Go=s(Be);iT=n(Go,"LI",{});var H7e=s(iT);che=n(H7e,"STRONG",{});var lht=s(che);DHo=r(lht,"data2vec-audio"),lht.forEach(t),GHo=r(H7e," \u2014 "),AO=n(H7e,"A",{href:!0});var iht=s(AO);OHo=r(iht,"Data2VecAudioForCTC"),iht.forEach(t),VHo=r(H7e," (Data2VecAudio model)"),H7e.forEach(t),XHo=i(Go),dT=n(Go,"LI",{});var U7e=s(dT);mhe=n(U7e,"STRONG",{});var dht=s(mhe);zHo=r(dht,"hubert"),dht.forEach(t),QHo=r(U7e," \u2014 "),yO=n(U7e,"A",{href:!0});var cht=s(yO);WHo=r(cht,"HubertForCTC"),cht.forEach(t),HHo=r(U7e," (Hubert model)"),U7e.forEach(t),UHo=i(Go),cT=n(Go,"LI",{});var J7e=s(cT);fhe=n(J7e,"STRONG",{});var mht=s(fhe);JHo=r(mht,"sew"),mht.forEach(t),YHo=r(J7e," \u2014 "),LO=n(J7e,"A",{href:!0});var fht=s(LO);KHo=r(fht,"SEWForCTC"),fht.forEach(t),ZHo=r(J7e," (SEW model)"),J7e.forEach(t),eUo=i(Go),mT=n(Go,"LI",{});var Y7e=s(mT);ghe=n(Y7e,"STRONG",{});var ght=s(ghe);oUo=r(ght,"sew-d"),ght.forEach(t),rUo=r(Y7e," \u2014 "),xO=n(Y7e,"A",{href:!0});var hht=s(xO);tUo=r(hht,"SEWDForCTC"),hht.forEach(t),aUo=r(Y7e," (SEW-D model)"),Y7e.forEach(t),nUo=i(Go),fT=n(Go,"LI",{});var K7e=s(fT);hhe=n(K7e,"STRONG",{});var uht=s(hhe);sUo=r(uht,"unispeech"),uht.forEach(t),lUo=r(K7e," \u2014 "),kO=n(K7e,"A",{href:!0});var pht=s(kO);iUo=r(pht,"UniSpeechForCTC"),pht.forEach(t),dUo=r(K7e," (UniSpeech model)"),K7e.forEach(t),cUo=i(Go),gT=n(Go,"LI",{});var Z7e=s(gT);uhe=n(Z7e,"STRONG",{});var _ht=s(uhe);mUo=r(_ht,"unispeech-sat"),_ht.forEach(t),fUo=r(Z7e," \u2014 "),SO=n(Z7e,"A",{href:!0});var bht=s(SO);gUo=r(bht,"UniSpeechSatForCTC"),bht.forEach(t),hUo=r(Z7e," (UniSpeechSat model)"),Z7e.forEach(t),uUo=i(Go),hT=n(Go,"LI",{});var e9e=s(hT);phe=n(e9e,"STRONG",{});var vht=s(phe);pUo=r(vht,"wav2vec2"),vht.forEach(t),_Uo=r(e9e," \u2014 "),RO=n(e9e,"A",{href:!0});var Fht=s(RO);bUo=r(Fht,"Wav2Vec2ForCTC"),Fht.forEach(t),vUo=r(e9e," (Wav2Vec2 model)"),e9e.forEach(t),FUo=i(Go),uT=n(Go,"LI",{});var o9e=s(uT);_he=n(o9e,"STRONG",{});var Tht=s(_he);TUo=r(Tht,"wavlm"),Tht.forEach(t),MUo=r(o9e," \u2014 "),BO=n(o9e,"A",{href:!0});var Mht=s(BO);EUo=r(Mht,"WavLMForCTC"),Mht.forEach(t),CUo=r(o9e," (WavLM model)"),o9e.forEach(t),Go.forEach(t),wUo=i(oa),pT=n(oa,"P",{});var r9e=s(pT);AUo=r(r9e,"The model is set in evaluation mode by default using "),bhe=n(r9e,"CODE",{});var Eht=s(bhe);yUo=r(Eht,"model.eval()"),Eht.forEach(t),LUo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(r9e,"CODE",{});var Cht=s(vhe);xUo=r(Cht,"model.train()"),Cht.forEach(t),r9e.forEach(t),kUo=i(oa),Fhe=n(oa,"P",{});var wht=s(Fhe);SUo=r(wht,"Examples:"),wht.forEach(t),RUo=i(oa),f(L0.$$.fragment,oa),oa.forEach(t),Rl.forEach(t),XPe=i(c),Zd=n(c,"H2",{class:!0});var ZIe=s(Zd);_T=n(ZIe,"A",{id:!0,class:!0,href:!0});var Aht=s(_T);The=n(Aht,"SPAN",{});var yht=s(The);f(x0.$$.fragment,yht),yht.forEach(t),Aht.forEach(t),BUo=i(ZIe),Mhe=n(ZIe,"SPAN",{});var Lht=s(Mhe);PUo=r(Lht,"AutoModelForSpeechSeq2Seq"),Lht.forEach(t),ZIe.forEach(t),zPe=i(c),fr=n(c,"DIV",{class:!0});var Pl=s(fr);f(k0.$$.fragment,Pl),$Uo=i(Pl),ec=n(Pl,"P",{});var HJ=s(ec);IUo=r(HJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PO=n(HJ,"A",{href:!0});var xht=s(PO);qUo=r(xht,"from_pretrained()"),xht.forEach(t),NUo=r(HJ," class method or the "),$O=n(HJ,"A",{href:!0});var kht=s($O);jUo=r(kht,"from_config()"),kht.forEach(t),DUo=r(HJ,` class
method.`),HJ.forEach(t),GUo=i(Pl),S0=n(Pl,"P",{});var eqe=s(S0);OUo=r(eqe,"This class cannot be instantiated directly using "),Ehe=n(eqe,"CODE",{});var Sht=s(Ehe);VUo=r(Sht,"__init__()"),Sht.forEach(t),XUo=r(eqe," (throws an error)."),eqe.forEach(t),zUo=i(Pl),st=n(Pl,"DIV",{class:!0});var $l=s(st);f(R0.$$.fragment,$l),QUo=i($l),Che=n($l,"P",{});var Rht=s(Che);WUo=r(Rht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rht.forEach(t),HUo=i($l),oc=n($l,"P",{});var UJ=s(oc);UUo=r(UJ,`Note:
Loading a model from its configuration file does `),whe=n(UJ,"STRONG",{});var Bht=s(whe);JUo=r(Bht,"not"),Bht.forEach(t),YUo=r(UJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(UJ,"A",{href:!0});var Pht=s(IO);KUo=r(Pht,"from_pretrained()"),Pht.forEach(t),ZUo=r(UJ," to load the model weights."),UJ.forEach(t),eJo=i($l),Ahe=n($l,"P",{});var $ht=s(Ahe);oJo=r($ht,"Examples:"),$ht.forEach(t),rJo=i($l),f(B0.$$.fragment,$l),$l.forEach(t),tJo=i(Pl),eo=n(Pl,"DIV",{class:!0});var ra=s(eo);f(P0.$$.fragment,ra),aJo=i(ra),yhe=n(ra,"P",{});var Iht=s(yhe);nJo=r(Iht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Iht.forEach(t),sJo=i(ra),ln=n(ra,"P",{});var m6=s(ln);lJo=r(m6,"The model class to instantiate is selected based on the "),Lhe=n(m6,"CODE",{});var qht=s(Lhe);iJo=r(qht,"model_type"),qht.forEach(t),dJo=r(m6,` property of the config object (either
passed as an argument or loaded from `),xhe=n(m6,"CODE",{});var Nht=s(xhe);cJo=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),mJo=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(m6,"CODE",{});var jht=s(khe);fJo=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),gJo=r(m6,":"),m6.forEach(t),hJo=i(ra),$0=n(ra,"UL",{});var oqe=s($0);bT=n(oqe,"LI",{});var t9e=s(bT);She=n(t9e,"STRONG",{});var Dht=s(She);uJo=r(Dht,"speech-encoder-decoder"),Dht.forEach(t),pJo=r(t9e," \u2014 "),qO=n(t9e,"A",{href:!0});var Ght=s(qO);_Jo=r(Ght,"SpeechEncoderDecoderModel"),Ght.forEach(t),bJo=r(t9e," (Speech Encoder decoder model)"),t9e.forEach(t),vJo=i(oqe),vT=n(oqe,"LI",{});var a9e=s(vT);Rhe=n(a9e,"STRONG",{});var Oht=s(Rhe);FJo=r(Oht,"speech_to_text"),Oht.forEach(t),TJo=r(a9e," \u2014 "),NO=n(a9e,"A",{href:!0});var Vht=s(NO);MJo=r(Vht,"Speech2TextForConditionalGeneration"),Vht.forEach(t),EJo=r(a9e," (Speech2Text model)"),a9e.forEach(t),oqe.forEach(t),CJo=i(ra),FT=n(ra,"P",{});var n9e=s(FT);wJo=r(n9e,"The model is set in evaluation mode by default using "),Bhe=n(n9e,"CODE",{});var Xht=s(Bhe);AJo=r(Xht,"model.eval()"),Xht.forEach(t),yJo=r(n9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(n9e,"CODE",{});var zht=s(Phe);LJo=r(zht,"model.train()"),zht.forEach(t),n9e.forEach(t),xJo=i(ra),$he=n(ra,"P",{});var Qht=s($he);kJo=r(Qht,"Examples:"),Qht.forEach(t),SJo=i(ra),f(I0.$$.fragment,ra),ra.forEach(t),Pl.forEach(t),QPe=i(c),rc=n(c,"H2",{class:!0});var rqe=s(rc);TT=n(rqe,"A",{id:!0,class:!0,href:!0});var Wht=s(TT);Ihe=n(Wht,"SPAN",{});var Hht=s(Ihe);f(q0.$$.fragment,Hht),Hht.forEach(t),Wht.forEach(t),RJo=i(rqe),qhe=n(rqe,"SPAN",{});var Uht=s(qhe);BJo=r(Uht,"AutoModelForAudioXVector"),Uht.forEach(t),rqe.forEach(t),WPe=i(c),gr=n(c,"DIV",{class:!0});var Il=s(gr);f(N0.$$.fragment,Il),PJo=i(Il),tc=n(Il,"P",{});var JJ=s(tc);$Jo=r(JJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jO=n(JJ,"A",{href:!0});var Jht=s(jO);IJo=r(Jht,"from_pretrained()"),Jht.forEach(t),qJo=r(JJ," class method or the "),DO=n(JJ,"A",{href:!0});var Yht=s(DO);NJo=r(Yht,"from_config()"),Yht.forEach(t),jJo=r(JJ,` class
method.`),JJ.forEach(t),DJo=i(Il),j0=n(Il,"P",{});var tqe=s(j0);GJo=r(tqe,"This class cannot be instantiated directly using "),Nhe=n(tqe,"CODE",{});var Kht=s(Nhe);OJo=r(Kht,"__init__()"),Kht.forEach(t),VJo=r(tqe," (throws an error)."),tqe.forEach(t),XJo=i(Il),lt=n(Il,"DIV",{class:!0});var ql=s(lt);f(D0.$$.fragment,ql),zJo=i(ql),jhe=n(ql,"P",{});var Zht=s(jhe);QJo=r(Zht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Zht.forEach(t),WJo=i(ql),ac=n(ql,"P",{});var YJ=s(ac);HJo=r(YJ,`Note:
Loading a model from its configuration file does `),Dhe=n(YJ,"STRONG",{});var eut=s(Dhe);UJo=r(eut,"not"),eut.forEach(t),JJo=r(YJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(YJ,"A",{href:!0});var out=s(GO);YJo=r(out,"from_pretrained()"),out.forEach(t),KJo=r(YJ," to load the model weights."),YJ.forEach(t),ZJo=i(ql),Ghe=n(ql,"P",{});var rut=s(Ghe);eYo=r(rut,"Examples:"),rut.forEach(t),oYo=i(ql),f(G0.$$.fragment,ql),ql.forEach(t),rYo=i(Il),oo=n(Il,"DIV",{class:!0});var ta=s(oo);f(O0.$$.fragment,ta),tYo=i(ta),Ohe=n(ta,"P",{});var tut=s(Ohe);aYo=r(tut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tut.forEach(t),nYo=i(ta),dn=n(ta,"P",{});var f6=s(dn);sYo=r(f6,"The model class to instantiate is selected based on the "),Vhe=n(f6,"CODE",{});var aut=s(Vhe);lYo=r(aut,"model_type"),aut.forEach(t),iYo=r(f6,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(f6,"CODE",{});var nut=s(Xhe);dYo=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),cYo=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(f6,"CODE",{});var sut=s(zhe);mYo=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),fYo=r(f6,":"),f6.forEach(t),gYo=i(ta),cn=n(ta,"UL",{});var g6=s(cn);MT=n(g6,"LI",{});var s9e=s(MT);Qhe=n(s9e,"STRONG",{});var lut=s(Qhe);hYo=r(lut,"data2vec-audio"),lut.forEach(t),uYo=r(s9e," \u2014 "),OO=n(s9e,"A",{href:!0});var iut=s(OO);pYo=r(iut,"Data2VecAudioForXVector"),iut.forEach(t),_Yo=r(s9e," (Data2VecAudio model)"),s9e.forEach(t),bYo=i(g6),ET=n(g6,"LI",{});var l9e=s(ET);Whe=n(l9e,"STRONG",{});var dut=s(Whe);vYo=r(dut,"unispeech-sat"),dut.forEach(t),FYo=r(l9e," \u2014 "),VO=n(l9e,"A",{href:!0});var cut=s(VO);TYo=r(cut,"UniSpeechSatForXVector"),cut.forEach(t),MYo=r(l9e," (UniSpeechSat model)"),l9e.forEach(t),EYo=i(g6),CT=n(g6,"LI",{});var i9e=s(CT);Hhe=n(i9e,"STRONG",{});var mut=s(Hhe);CYo=r(mut,"wav2vec2"),mut.forEach(t),wYo=r(i9e," \u2014 "),XO=n(i9e,"A",{href:!0});var fut=s(XO);AYo=r(fut,"Wav2Vec2ForXVector"),fut.forEach(t),yYo=r(i9e," (Wav2Vec2 model)"),i9e.forEach(t),LYo=i(g6),wT=n(g6,"LI",{});var d9e=s(wT);Uhe=n(d9e,"STRONG",{});var gut=s(Uhe);xYo=r(gut,"wavlm"),gut.forEach(t),kYo=r(d9e," \u2014 "),zO=n(d9e,"A",{href:!0});var hut=s(zO);SYo=r(hut,"WavLMForXVector"),hut.forEach(t),RYo=r(d9e," (WavLM model)"),d9e.forEach(t),g6.forEach(t),BYo=i(ta),AT=n(ta,"P",{});var c9e=s(AT);PYo=r(c9e,"The model is set in evaluation mode by default using "),Jhe=n(c9e,"CODE",{});var uut=s(Jhe);$Yo=r(uut,"model.eval()"),uut.forEach(t),IYo=r(c9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(c9e,"CODE",{});var put=s(Yhe);qYo=r(put,"model.train()"),put.forEach(t),c9e.forEach(t),NYo=i(ta),Khe=n(ta,"P",{});var _ut=s(Khe);jYo=r(_ut,"Examples:"),_ut.forEach(t),DYo=i(ta),f(V0.$$.fragment,ta),ta.forEach(t),Il.forEach(t),HPe=i(c),nc=n(c,"H2",{class:!0});var aqe=s(nc);yT=n(aqe,"A",{id:!0,class:!0,href:!0});var but=s(yT);Zhe=n(but,"SPAN",{});var vut=s(Zhe);f(X0.$$.fragment,vut),vut.forEach(t),but.forEach(t),GYo=i(aqe),eue=n(aqe,"SPAN",{});var Fut=s(eue);OYo=r(Fut,"AutoModelForMaskedImageModeling"),Fut.forEach(t),aqe.forEach(t),UPe=i(c),hr=n(c,"DIV",{class:!0});var Nl=s(hr);f(z0.$$.fragment,Nl),VYo=i(Nl),sc=n(Nl,"P",{});var KJ=s(sc);XYo=r(KJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QO=n(KJ,"A",{href:!0});var Tut=s(QO);zYo=r(Tut,"from_pretrained()"),Tut.forEach(t),QYo=r(KJ," class method or the "),WO=n(KJ,"A",{href:!0});var Mut=s(WO);WYo=r(Mut,"from_config()"),Mut.forEach(t),HYo=r(KJ,` class
method.`),KJ.forEach(t),UYo=i(Nl),Q0=n(Nl,"P",{});var nqe=s(Q0);JYo=r(nqe,"This class cannot be instantiated directly using "),oue=n(nqe,"CODE",{});var Eut=s(oue);YYo=r(Eut,"__init__()"),Eut.forEach(t),KYo=r(nqe," (throws an error)."),nqe.forEach(t),ZYo=i(Nl),it=n(Nl,"DIV",{class:!0});var jl=s(it);f(W0.$$.fragment,jl),eKo=i(jl),rue=n(jl,"P",{});var Cut=s(rue);oKo=r(Cut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Cut.forEach(t),rKo=i(jl),lc=n(jl,"P",{});var ZJ=s(lc);tKo=r(ZJ,`Note:
Loading a model from its configuration file does `),tue=n(ZJ,"STRONG",{});var wut=s(tue);aKo=r(wut,"not"),wut.forEach(t),nKo=r(ZJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(ZJ,"A",{href:!0});var Aut=s(HO);sKo=r(Aut,"from_pretrained()"),Aut.forEach(t),lKo=r(ZJ," to load the model weights."),ZJ.forEach(t),iKo=i(jl),aue=n(jl,"P",{});var yut=s(aue);dKo=r(yut,"Examples:"),yut.forEach(t),cKo=i(jl),f(H0.$$.fragment,jl),jl.forEach(t),mKo=i(Nl),ro=n(Nl,"DIV",{class:!0});var aa=s(ro);f(U0.$$.fragment,aa),fKo=i(aa),nue=n(aa,"P",{});var Lut=s(nue);gKo=r(Lut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lut.forEach(t),hKo=i(aa),mn=n(aa,"P",{});var h6=s(mn);uKo=r(h6,"The model class to instantiate is selected based on the "),sue=n(h6,"CODE",{});var xut=s(sue);pKo=r(xut,"model_type"),xut.forEach(t),_Ko=r(h6,` property of the config object (either
passed as an argument or loaded from `),lue=n(h6,"CODE",{});var kut=s(lue);bKo=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),vKo=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(h6,"CODE",{});var Sut=s(iue);FKo=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),TKo=r(h6,":"),h6.forEach(t),MKo=i(aa),ic=n(aa,"UL",{});var eY=s(ic);LT=n(eY,"LI",{});var m9e=s(LT);due=n(m9e,"STRONG",{});var Rut=s(due);EKo=r(Rut,"deit"),Rut.forEach(t),CKo=r(m9e," \u2014 "),UO=n(m9e,"A",{href:!0});var But=s(UO);wKo=r(But,"DeiTForMaskedImageModeling"),But.forEach(t),AKo=r(m9e," (DeiT model)"),m9e.forEach(t),yKo=i(eY),xT=n(eY,"LI",{});var f9e=s(xT);cue=n(f9e,"STRONG",{});var Put=s(cue);LKo=r(Put,"swin"),Put.forEach(t),xKo=r(f9e," \u2014 "),JO=n(f9e,"A",{href:!0});var $ut=s(JO);kKo=r($ut,"SwinForMaskedImageModeling"),$ut.forEach(t),SKo=r(f9e," (Swin model)"),f9e.forEach(t),RKo=i(eY),kT=n(eY,"LI",{});var g9e=s(kT);mue=n(g9e,"STRONG",{});var Iut=s(mue);BKo=r(Iut,"vit"),Iut.forEach(t),PKo=r(g9e," \u2014 "),YO=n(g9e,"A",{href:!0});var qut=s(YO);$Ko=r(qut,"ViTForMaskedImageModeling"),qut.forEach(t),IKo=r(g9e," (ViT model)"),g9e.forEach(t),eY.forEach(t),qKo=i(aa),ST=n(aa,"P",{});var h9e=s(ST);NKo=r(h9e,"The model is set in evaluation mode by default using "),fue=n(h9e,"CODE",{});var Nut=s(fue);jKo=r(Nut,"model.eval()"),Nut.forEach(t),DKo=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(h9e,"CODE",{});var jut=s(gue);GKo=r(jut,"model.train()"),jut.forEach(t),h9e.forEach(t),OKo=i(aa),hue=n(aa,"P",{});var Dut=s(hue);VKo=r(Dut,"Examples:"),Dut.forEach(t),XKo=i(aa),f(J0.$$.fragment,aa),aa.forEach(t),Nl.forEach(t),JPe=i(c),dc=n(c,"H2",{class:!0});var sqe=s(dc);RT=n(sqe,"A",{id:!0,class:!0,href:!0});var Gut=s(RT);uue=n(Gut,"SPAN",{});var Out=s(uue);f(Y0.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),zKo=i(sqe),pue=n(sqe,"SPAN",{});var Vut=s(pue);QKo=r(Vut,"AutoModelForObjectDetection"),Vut.forEach(t),sqe.forEach(t),YPe=i(c),ur=n(c,"DIV",{class:!0});var Dl=s(ur);f(K0.$$.fragment,Dl),WKo=i(Dl),cc=n(Dl,"P",{});var oY=s(cc);HKo=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KO=n(oY,"A",{href:!0});var Xut=s(KO);UKo=r(Xut,"from_pretrained()"),Xut.forEach(t),JKo=r(oY," class method or the "),ZO=n(oY,"A",{href:!0});var zut=s(ZO);YKo=r(zut,"from_config()"),zut.forEach(t),KKo=r(oY,` class
method.`),oY.forEach(t),ZKo=i(Dl),Z0=n(Dl,"P",{});var lqe=s(Z0);eZo=r(lqe,"This class cannot be instantiated directly using "),_ue=n(lqe,"CODE",{});var Qut=s(_ue);oZo=r(Qut,"__init__()"),Qut.forEach(t),rZo=r(lqe," (throws an error)."),lqe.forEach(t),tZo=i(Dl),dt=n(Dl,"DIV",{class:!0});var Gl=s(dt);f(ey.$$.fragment,Gl),aZo=i(Gl),bue=n(Gl,"P",{});var Wut=s(bue);nZo=r(Wut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wut.forEach(t),sZo=i(Gl),mc=n(Gl,"P",{});var rY=s(mc);lZo=r(rY,`Note:
Loading a model from its configuration file does `),vue=n(rY,"STRONG",{});var Hut=s(vue);iZo=r(Hut,"not"),Hut.forEach(t),dZo=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(rY,"A",{href:!0});var Uut=s(eV);cZo=r(Uut,"from_pretrained()"),Uut.forEach(t),mZo=r(rY," to load the model weights."),rY.forEach(t),fZo=i(Gl),Fue=n(Gl,"P",{});var Jut=s(Fue);gZo=r(Jut,"Examples:"),Jut.forEach(t),hZo=i(Gl),f(oy.$$.fragment,Gl),Gl.forEach(t),uZo=i(Dl),to=n(Dl,"DIV",{class:!0});var na=s(to);f(ry.$$.fragment,na),pZo=i(na),Tue=n(na,"P",{});var Yut=s(Tue);_Zo=r(Yut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Yut.forEach(t),bZo=i(na),fn=n(na,"P",{});var u6=s(fn);vZo=r(u6,"The model class to instantiate is selected based on the "),Mue=n(u6,"CODE",{});var Kut=s(Mue);FZo=r(Kut,"model_type"),Kut.forEach(t),TZo=r(u6,` property of the config object (either
passed as an argument or loaded from `),Eue=n(u6,"CODE",{});var Zut=s(Eue);MZo=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),EZo=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(u6,"CODE",{});var ept=s(Cue);CZo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),wZo=r(u6,":"),u6.forEach(t),AZo=i(na),wue=n(na,"UL",{});var opt=s(wue);BT=n(opt,"LI",{});var u9e=s(BT);Aue=n(u9e,"STRONG",{});var rpt=s(Aue);yZo=r(rpt,"detr"),rpt.forEach(t),LZo=r(u9e," \u2014 "),oV=n(u9e,"A",{href:!0});var tpt=s(oV);xZo=r(tpt,"DetrForObjectDetection"),tpt.forEach(t),kZo=r(u9e," (DETR model)"),u9e.forEach(t),opt.forEach(t),SZo=i(na),PT=n(na,"P",{});var p9e=s(PT);RZo=r(p9e,"The model is set in evaluation mode by default using "),yue=n(p9e,"CODE",{});var apt=s(yue);BZo=r(apt,"model.eval()"),apt.forEach(t),PZo=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(p9e,"CODE",{});var npt=s(Lue);$Zo=r(npt,"model.train()"),npt.forEach(t),p9e.forEach(t),IZo=i(na),xue=n(na,"P",{});var spt=s(xue);qZo=r(spt,"Examples:"),spt.forEach(t),NZo=i(na),f(ty.$$.fragment,na),na.forEach(t),Dl.forEach(t),KPe=i(c),fc=n(c,"H2",{class:!0});var iqe=s(fc);$T=n(iqe,"A",{id:!0,class:!0,href:!0});var lpt=s($T);kue=n(lpt,"SPAN",{});var ipt=s(kue);f(ay.$$.fragment,ipt),ipt.forEach(t),lpt.forEach(t),jZo=i(iqe),Sue=n(iqe,"SPAN",{});var dpt=s(Sue);DZo=r(dpt,"AutoModelForImageSegmentation"),dpt.forEach(t),iqe.forEach(t),ZPe=i(c),pr=n(c,"DIV",{class:!0});var Ol=s(pr);f(ny.$$.fragment,Ol),GZo=i(Ol),gc=n(Ol,"P",{});var tY=s(gc);OZo=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rV=n(tY,"A",{href:!0});var cpt=s(rV);VZo=r(cpt,"from_pretrained()"),cpt.forEach(t),XZo=r(tY," class method or the "),tV=n(tY,"A",{href:!0});var mpt=s(tV);zZo=r(mpt,"from_config()"),mpt.forEach(t),QZo=r(tY,` class
method.`),tY.forEach(t),WZo=i(Ol),sy=n(Ol,"P",{});var dqe=s(sy);HZo=r(dqe,"This class cannot be instantiated directly using "),Rue=n(dqe,"CODE",{});var fpt=s(Rue);UZo=r(fpt,"__init__()"),fpt.forEach(t),JZo=r(dqe," (throws an error)."),dqe.forEach(t),YZo=i(Ol),ct=n(Ol,"DIV",{class:!0});var Vl=s(ct);f(ly.$$.fragment,Vl),KZo=i(Vl),Bue=n(Vl,"P",{});var gpt=s(Bue);ZZo=r(gpt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gpt.forEach(t),eer=i(Vl),hc=n(Vl,"P",{});var aY=s(hc);oer=r(aY,`Note:
Loading a model from its configuration file does `),Pue=n(aY,"STRONG",{});var hpt=s(Pue);rer=r(hpt,"not"),hpt.forEach(t),ter=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(aY,"A",{href:!0});var upt=s(aV);aer=r(upt,"from_pretrained()"),upt.forEach(t),ner=r(aY," to load the model weights."),aY.forEach(t),ser=i(Vl),$ue=n(Vl,"P",{});var ppt=s($ue);ler=r(ppt,"Examples:"),ppt.forEach(t),ier=i(Vl),f(iy.$$.fragment,Vl),Vl.forEach(t),der=i(Ol),ao=n(Ol,"DIV",{class:!0});var sa=s(ao);f(dy.$$.fragment,sa),cer=i(sa),Iue=n(sa,"P",{});var _pt=s(Iue);mer=r(_pt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_pt.forEach(t),fer=i(sa),gn=n(sa,"P",{});var p6=s(gn);ger=r(p6,"The model class to instantiate is selected based on the "),que=n(p6,"CODE",{});var bpt=s(que);her=r(bpt,"model_type"),bpt.forEach(t),uer=r(p6,` property of the config object (either
passed as an argument or loaded from `),Nue=n(p6,"CODE",{});var vpt=s(Nue);per=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),_er=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(p6,"CODE",{});var Fpt=s(jue);ber=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),ver=r(p6,":"),p6.forEach(t),Fer=i(sa),Due=n(sa,"UL",{});var Tpt=s(Due);IT=n(Tpt,"LI",{});var _9e=s(IT);Gue=n(_9e,"STRONG",{});var Mpt=s(Gue);Ter=r(Mpt,"detr"),Mpt.forEach(t),Mer=r(_9e," \u2014 "),nV=n(_9e,"A",{href:!0});var Ept=s(nV);Eer=r(Ept,"DetrForSegmentation"),Ept.forEach(t),Cer=r(_9e," (DETR model)"),_9e.forEach(t),Tpt.forEach(t),wer=i(sa),qT=n(sa,"P",{});var b9e=s(qT);Aer=r(b9e,"The model is set in evaluation mode by default using "),Oue=n(b9e,"CODE",{});var Cpt=s(Oue);yer=r(Cpt,"model.eval()"),Cpt.forEach(t),Ler=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(b9e,"CODE",{});var wpt=s(Vue);xer=r(wpt,"model.train()"),wpt.forEach(t),b9e.forEach(t),ker=i(sa),Xue=n(sa,"P",{});var Apt=s(Xue);Ser=r(Apt,"Examples:"),Apt.forEach(t),Rer=i(sa),f(cy.$$.fragment,sa),sa.forEach(t),Ol.forEach(t),e$e=i(c),uc=n(c,"H2",{class:!0});var cqe=s(uc);NT=n(cqe,"A",{id:!0,class:!0,href:!0});var ypt=s(NT);zue=n(ypt,"SPAN",{});var Lpt=s(zue);f(my.$$.fragment,Lpt),Lpt.forEach(t),ypt.forEach(t),Ber=i(cqe),Que=n(cqe,"SPAN",{});var xpt=s(Que);Per=r(xpt,"AutoModelForSemanticSegmentation"),xpt.forEach(t),cqe.forEach(t),o$e=i(c),_r=n(c,"DIV",{class:!0});var Xl=s(_r);f(fy.$$.fragment,Xl),$er=i(Xl),pc=n(Xl,"P",{});var nY=s(pc);Ier=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sV=n(nY,"A",{href:!0});var kpt=s(sV);qer=r(kpt,"from_pretrained()"),kpt.forEach(t),Ner=r(nY," class method or the "),lV=n(nY,"A",{href:!0});var Spt=s(lV);jer=r(Spt,"from_config()"),Spt.forEach(t),Der=r(nY,` class
method.`),nY.forEach(t),Ger=i(Xl),gy=n(Xl,"P",{});var mqe=s(gy);Oer=r(mqe,"This class cannot be instantiated directly using "),Wue=n(mqe,"CODE",{});var Rpt=s(Wue);Ver=r(Rpt,"__init__()"),Rpt.forEach(t),Xer=r(mqe," (throws an error)."),mqe.forEach(t),zer=i(Xl),mt=n(Xl,"DIV",{class:!0});var zl=s(mt);f(hy.$$.fragment,zl),Qer=i(zl),Hue=n(zl,"P",{});var Bpt=s(Hue);Wer=r(Bpt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Bpt.forEach(t),Her=i(zl),_c=n(zl,"P",{});var sY=s(_c);Uer=r(sY,`Note:
Loading a model from its configuration file does `),Uue=n(sY,"STRONG",{});var Ppt=s(Uue);Jer=r(Ppt,"not"),Ppt.forEach(t),Yer=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(sY,"A",{href:!0});var $pt=s(iV);Ker=r($pt,"from_pretrained()"),$pt.forEach(t),Zer=r(sY," to load the model weights."),sY.forEach(t),eor=i(zl),Jue=n(zl,"P",{});var Ipt=s(Jue);oor=r(Ipt,"Examples:"),Ipt.forEach(t),ror=i(zl),f(uy.$$.fragment,zl),zl.forEach(t),tor=i(Xl),no=n(Xl,"DIV",{class:!0});var la=s(no);f(py.$$.fragment,la),aor=i(la),Yue=n(la,"P",{});var qpt=s(Yue);nor=r(qpt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qpt.forEach(t),sor=i(la),hn=n(la,"P",{});var _6=s(hn);lor=r(_6,"The model class to instantiate is selected based on the "),Kue=n(_6,"CODE",{});var Npt=s(Kue);ior=r(Npt,"model_type"),Npt.forEach(t),dor=r(_6,` property of the config object (either
passed as an argument or loaded from `),Zue=n(_6,"CODE",{});var jpt=s(Zue);cor=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),mor=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(_6,"CODE",{});var Dpt=s(epe);gor=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),hor=r(_6,":"),_6.forEach(t),uor=i(la),un=n(la,"UL",{});var b6=s(un);jT=n(b6,"LI",{});var v9e=s(jT);ope=n(v9e,"STRONG",{});var Gpt=s(ope);por=r(Gpt,"beit"),Gpt.forEach(t),_or=r(v9e," \u2014 "),dV=n(v9e,"A",{href:!0});var Opt=s(dV);bor=r(Opt,"BeitForSemanticSegmentation"),Opt.forEach(t),vor=r(v9e," (BEiT model)"),v9e.forEach(t),For=i(b6),DT=n(b6,"LI",{});var F9e=s(DT);rpe=n(F9e,"STRONG",{});var Vpt=s(rpe);Tor=r(Vpt,"data2vec-vision"),Vpt.forEach(t),Mor=r(F9e," \u2014 "),cV=n(F9e,"A",{href:!0});var Xpt=s(cV);Eor=r(Xpt,"Data2VecVisionForSemanticSegmentation"),Xpt.forEach(t),Cor=r(F9e," (Data2VecVision model)"),F9e.forEach(t),wor=i(b6),GT=n(b6,"LI",{});var T9e=s(GT);tpe=n(T9e,"STRONG",{});var zpt=s(tpe);Aor=r(zpt,"dpt"),zpt.forEach(t),yor=r(T9e," \u2014 "),mV=n(T9e,"A",{href:!0});var Qpt=s(mV);Lor=r(Qpt,"DPTForSemanticSegmentation"),Qpt.forEach(t),xor=r(T9e," (DPT model)"),T9e.forEach(t),kor=i(b6),OT=n(b6,"LI",{});var M9e=s(OT);ape=n(M9e,"STRONG",{});var Wpt=s(ape);Sor=r(Wpt,"segformer"),Wpt.forEach(t),Ror=r(M9e," \u2014 "),fV=n(M9e,"A",{href:!0});var Hpt=s(fV);Bor=r(Hpt,"SegformerForSemanticSegmentation"),Hpt.forEach(t),Por=r(M9e," (SegFormer model)"),M9e.forEach(t),b6.forEach(t),$or=i(la),VT=n(la,"P",{});var E9e=s(VT);Ior=r(E9e,"The model is set in evaluation mode by default using "),npe=n(E9e,"CODE",{});var Upt=s(npe);qor=r(Upt,"model.eval()"),Upt.forEach(t),Nor=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=n(E9e,"CODE",{});var Jpt=s(spe);jor=r(Jpt,"model.train()"),Jpt.forEach(t),E9e.forEach(t),Dor=i(la),lpe=n(la,"P",{});var Ypt=s(lpe);Gor=r(Ypt,"Examples:"),Ypt.forEach(t),Oor=i(la),f(_y.$$.fragment,la),la.forEach(t),Xl.forEach(t),r$e=i(c),bc=n(c,"H2",{class:!0});var fqe=s(bc);XT=n(fqe,"A",{id:!0,class:!0,href:!0});var Kpt=s(XT);ipe=n(Kpt,"SPAN",{});var Zpt=s(ipe);f(by.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),Vor=i(fqe),dpe=n(fqe,"SPAN",{});var e_t=s(dpe);Xor=r(e_t,"AutoModelForInstanceSegmentation"),e_t.forEach(t),fqe.forEach(t),t$e=i(c),br=n(c,"DIV",{class:!0});var Ql=s(br);f(vy.$$.fragment,Ql),zor=i(Ql),vc=n(Ql,"P",{});var lY=s(vc);Qor=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gV=n(lY,"A",{href:!0});var o_t=s(gV);Wor=r(o_t,"from_pretrained()"),o_t.forEach(t),Hor=r(lY," class method or the "),hV=n(lY,"A",{href:!0});var r_t=s(hV);Uor=r(r_t,"from_config()"),r_t.forEach(t),Jor=r(lY,` class
method.`),lY.forEach(t),Yor=i(Ql),Fy=n(Ql,"P",{});var gqe=s(Fy);Kor=r(gqe,"This class cannot be instantiated directly using "),cpe=n(gqe,"CODE",{});var t_t=s(cpe);Zor=r(t_t,"__init__()"),t_t.forEach(t),err=r(gqe," (throws an error)."),gqe.forEach(t),orr=i(Ql),ft=n(Ql,"DIV",{class:!0});var Wl=s(ft);f(Ty.$$.fragment,Wl),rrr=i(Wl),mpe=n(Wl,"P",{});var a_t=s(mpe);trr=r(a_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),a_t.forEach(t),arr=i(Wl),Fc=n(Wl,"P",{});var iY=s(Fc);nrr=r(iY,`Note:
Loading a model from its configuration file does `),fpe=n(iY,"STRONG",{});var n_t=s(fpe);srr=r(n_t,"not"),n_t.forEach(t),lrr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(iY,"A",{href:!0});var s_t=s(uV);irr=r(s_t,"from_pretrained()"),s_t.forEach(t),drr=r(iY," to load the model weights."),iY.forEach(t),crr=i(Wl),gpe=n(Wl,"P",{});var l_t=s(gpe);mrr=r(l_t,"Examples:"),l_t.forEach(t),frr=i(Wl),f(My.$$.fragment,Wl),Wl.forEach(t),grr=i(Ql),so=n(Ql,"DIV",{class:!0});var ia=s(so);f(Ey.$$.fragment,ia),hrr=i(ia),hpe=n(ia,"P",{});var i_t=s(hpe);urr=r(i_t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),i_t.forEach(t),prr=i(ia),pn=n(ia,"P",{});var v6=s(pn);_rr=r(v6,"The model class to instantiate is selected based on the "),upe=n(v6,"CODE",{});var d_t=s(upe);brr=r(d_t,"model_type"),d_t.forEach(t),vrr=r(v6,` property of the config object (either
passed as an argument or loaded from `),ppe=n(v6,"CODE",{});var c_t=s(ppe);Frr=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),Trr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(v6,"CODE",{});var m_t=s(_pe);Mrr=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),Err=r(v6,":"),v6.forEach(t),Crr=i(ia),bpe=n(ia,"UL",{});var f_t=s(bpe);zT=n(f_t,"LI",{});var C9e=s(zT);vpe=n(C9e,"STRONG",{});var g_t=s(vpe);wrr=r(g_t,"maskformer"),g_t.forEach(t),Arr=r(C9e," \u2014 "),pV=n(C9e,"A",{href:!0});var h_t=s(pV);yrr=r(h_t,"MaskFormerForInstanceSegmentation"),h_t.forEach(t),Lrr=r(C9e," (MaskFormer model)"),C9e.forEach(t),f_t.forEach(t),xrr=i(ia),QT=n(ia,"P",{});var w9e=s(QT);krr=r(w9e,"The model is set in evaluation mode by default using "),Fpe=n(w9e,"CODE",{});var u_t=s(Fpe);Srr=r(u_t,"model.eval()"),u_t.forEach(t),Rrr=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=n(w9e,"CODE",{});var p_t=s(Tpe);Brr=r(p_t,"model.train()"),p_t.forEach(t),w9e.forEach(t),Prr=i(ia),Mpe=n(ia,"P",{});var __t=s(Mpe);$rr=r(__t,"Examples:"),__t.forEach(t),Irr=i(ia),f(Cy.$$.fragment,ia),ia.forEach(t),Ql.forEach(t),a$e=i(c),Tc=n(c,"H2",{class:!0});var hqe=s(Tc);WT=n(hqe,"A",{id:!0,class:!0,href:!0});var b_t=s(WT);Epe=n(b_t,"SPAN",{});var v_t=s(Epe);f(wy.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),qrr=i(hqe),Cpe=n(hqe,"SPAN",{});var F_t=s(Cpe);Nrr=r(F_t,"TFAutoModel"),F_t.forEach(t),hqe.forEach(t),n$e=i(c),vr=n(c,"DIV",{class:!0});var Hl=s(vr);f(Ay.$$.fragment,Hl),jrr=i(Hl),Mc=n(Hl,"P",{});var dY=s(Mc);Drr=r(dY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_V=n(dY,"A",{href:!0});var T_t=s(_V);Grr=r(T_t,"from_pretrained()"),T_t.forEach(t),Orr=r(dY," class method or the "),bV=n(dY,"A",{href:!0});var M_t=s(bV);Vrr=r(M_t,"from_config()"),M_t.forEach(t),Xrr=r(dY,` class
method.`),dY.forEach(t),zrr=i(Hl),yy=n(Hl,"P",{});var uqe=s(yy);Qrr=r(uqe,"This class cannot be instantiated directly using "),wpe=n(uqe,"CODE",{});var E_t=s(wpe);Wrr=r(E_t,"__init__()"),E_t.forEach(t),Hrr=r(uqe," (throws an error)."),uqe.forEach(t),Urr=i(Hl),gt=n(Hl,"DIV",{class:!0});var Ul=s(gt);f(Ly.$$.fragment,Ul),Jrr=i(Ul),Ape=n(Ul,"P",{});var C_t=s(Ape);Yrr=r(C_t,"Instantiates one of the base model classes of the library from a configuration."),C_t.forEach(t),Krr=i(Ul),Ec=n(Ul,"P",{});var cY=s(Ec);Zrr=r(cY,`Note:
Loading a model from its configuration file does `),ype=n(cY,"STRONG",{});var w_t=s(ype);etr=r(w_t,"not"),w_t.forEach(t),otr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(cY,"A",{href:!0});var A_t=s(vV);rtr=r(A_t,"from_pretrained()"),A_t.forEach(t),ttr=r(cY," to load the model weights."),cY.forEach(t),atr=i(Ul),Lpe=n(Ul,"P",{});var y_t=s(Lpe);ntr=r(y_t,"Examples:"),y_t.forEach(t),str=i(Ul),f(xy.$$.fragment,Ul),Ul.forEach(t),ltr=i(Hl),uo=n(Hl,"DIV",{class:!0});var ua=s(uo);f(ky.$$.fragment,ua),itr=i(ua),xpe=n(ua,"P",{});var L_t=s(xpe);dtr=r(L_t,"Instantiate one of the base model classes of the library from a pretrained model."),L_t.forEach(t),ctr=i(ua),_n=n(ua,"P",{});var F6=s(_n);mtr=r(F6,"The model class to instantiate is selected based on the "),kpe=n(F6,"CODE",{});var x_t=s(kpe);ftr=r(x_t,"model_type"),x_t.forEach(t),gtr=r(F6,` property of the config object (either
passed as an argument or loaded from `),Spe=n(F6,"CODE",{});var k_t=s(Spe);htr=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),utr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(F6,"CODE",{});var S_t=s(Rpe);ptr=r(S_t,"pretrained_model_name_or_path"),S_t.forEach(t),_tr=r(F6,":"),F6.forEach(t),btr=i(ua),x=n(ua,"UL",{});var k=s(x);HT=n(k,"LI",{});var A9e=s(HT);Bpe=n(A9e,"STRONG",{});var R_t=s(Bpe);vtr=r(R_t,"albert"),R_t.forEach(t),Ftr=r(A9e," \u2014 "),FV=n(A9e,"A",{href:!0});var B_t=s(FV);Ttr=r(B_t,"TFAlbertModel"),B_t.forEach(t),Mtr=r(A9e," (ALBERT model)"),A9e.forEach(t),Etr=i(k),UT=n(k,"LI",{});var y9e=s(UT);Ppe=n(y9e,"STRONG",{});var P_t=s(Ppe);Ctr=r(P_t,"bart"),P_t.forEach(t),wtr=r(y9e," \u2014 "),TV=n(y9e,"A",{href:!0});var $_t=s(TV);Atr=r($_t,"TFBartModel"),$_t.forEach(t),ytr=r(y9e," (BART model)"),y9e.forEach(t),Ltr=i(k),JT=n(k,"LI",{});var L9e=s(JT);$pe=n(L9e,"STRONG",{});var I_t=s($pe);xtr=r(I_t,"bert"),I_t.forEach(t),ktr=r(L9e," \u2014 "),MV=n(L9e,"A",{href:!0});var q_t=s(MV);Str=r(q_t,"TFBertModel"),q_t.forEach(t),Rtr=r(L9e," (BERT model)"),L9e.forEach(t),Btr=i(k),YT=n(k,"LI",{});var x9e=s(YT);Ipe=n(x9e,"STRONG",{});var N_t=s(Ipe);Ptr=r(N_t,"blenderbot"),N_t.forEach(t),$tr=r(x9e," \u2014 "),EV=n(x9e,"A",{href:!0});var j_t=s(EV);Itr=r(j_t,"TFBlenderbotModel"),j_t.forEach(t),qtr=r(x9e," (Blenderbot model)"),x9e.forEach(t),Ntr=i(k),KT=n(k,"LI",{});var k9e=s(KT);qpe=n(k9e,"STRONG",{});var D_t=s(qpe);jtr=r(D_t,"blenderbot-small"),D_t.forEach(t),Dtr=r(k9e," \u2014 "),CV=n(k9e,"A",{href:!0});var G_t=s(CV);Gtr=r(G_t,"TFBlenderbotSmallModel"),G_t.forEach(t),Otr=r(k9e," (BlenderbotSmall model)"),k9e.forEach(t),Vtr=i(k),ZT=n(k,"LI",{});var S9e=s(ZT);Npe=n(S9e,"STRONG",{});var O_t=s(Npe);Xtr=r(O_t,"camembert"),O_t.forEach(t),ztr=r(S9e," \u2014 "),wV=n(S9e,"A",{href:!0});var V_t=s(wV);Qtr=r(V_t,"TFCamembertModel"),V_t.forEach(t),Wtr=r(S9e," (CamemBERT model)"),S9e.forEach(t),Htr=i(k),eM=n(k,"LI",{});var R9e=s(eM);jpe=n(R9e,"STRONG",{});var X_t=s(jpe);Utr=r(X_t,"clip"),X_t.forEach(t),Jtr=r(R9e," \u2014 "),AV=n(R9e,"A",{href:!0});var z_t=s(AV);Ytr=r(z_t,"TFCLIPModel"),z_t.forEach(t),Ktr=r(R9e," (CLIP model)"),R9e.forEach(t),Ztr=i(k),oM=n(k,"LI",{});var B9e=s(oM);Dpe=n(B9e,"STRONG",{});var Q_t=s(Dpe);ear=r(Q_t,"convbert"),Q_t.forEach(t),oar=r(B9e," \u2014 "),yV=n(B9e,"A",{href:!0});var W_t=s(yV);rar=r(W_t,"TFConvBertModel"),W_t.forEach(t),tar=r(B9e," (ConvBERT model)"),B9e.forEach(t),aar=i(k),rM=n(k,"LI",{});var P9e=s(rM);Gpe=n(P9e,"STRONG",{});var H_t=s(Gpe);nar=r(H_t,"convnext"),H_t.forEach(t),sar=r(P9e," \u2014 "),LV=n(P9e,"A",{href:!0});var U_t=s(LV);lar=r(U_t,"TFConvNextModel"),U_t.forEach(t),iar=r(P9e," (ConvNext model)"),P9e.forEach(t),dar=i(k),tM=n(k,"LI",{});var $9e=s(tM);Ope=n($9e,"STRONG",{});var J_t=s(Ope);car=r(J_t,"ctrl"),J_t.forEach(t),mar=r($9e," \u2014 "),xV=n($9e,"A",{href:!0});var Y_t=s(xV);far=r(Y_t,"TFCTRLModel"),Y_t.forEach(t),gar=r($9e," (CTRL model)"),$9e.forEach(t),har=i(k),aM=n(k,"LI",{});var I9e=s(aM);Vpe=n(I9e,"STRONG",{});var K_t=s(Vpe);uar=r(K_t,"deberta"),K_t.forEach(t),par=r(I9e," \u2014 "),kV=n(I9e,"A",{href:!0});var Z_t=s(kV);_ar=r(Z_t,"TFDebertaModel"),Z_t.forEach(t),bar=r(I9e," (DeBERTa model)"),I9e.forEach(t),Far=i(k),nM=n(k,"LI",{});var q9e=s(nM);Xpe=n(q9e,"STRONG",{});var ebt=s(Xpe);Tar=r(ebt,"deberta-v2"),ebt.forEach(t),Mar=r(q9e," \u2014 "),SV=n(q9e,"A",{href:!0});var obt=s(SV);Ear=r(obt,"TFDebertaV2Model"),obt.forEach(t),Car=r(q9e," (DeBERTa-v2 model)"),q9e.forEach(t),war=i(k),sM=n(k,"LI",{});var N9e=s(sM);zpe=n(N9e,"STRONG",{});var rbt=s(zpe);Aar=r(rbt,"distilbert"),rbt.forEach(t),yar=r(N9e," \u2014 "),RV=n(N9e,"A",{href:!0});var tbt=s(RV);Lar=r(tbt,"TFDistilBertModel"),tbt.forEach(t),xar=r(N9e," (DistilBERT model)"),N9e.forEach(t),kar=i(k),lM=n(k,"LI",{});var j9e=s(lM);Qpe=n(j9e,"STRONG",{});var abt=s(Qpe);Sar=r(abt,"dpr"),abt.forEach(t),Rar=r(j9e," \u2014 "),BV=n(j9e,"A",{href:!0});var nbt=s(BV);Bar=r(nbt,"TFDPRQuestionEncoder"),nbt.forEach(t),Par=r(j9e," (DPR model)"),j9e.forEach(t),$ar=i(k),iM=n(k,"LI",{});var D9e=s(iM);Wpe=n(D9e,"STRONG",{});var sbt=s(Wpe);Iar=r(sbt,"electra"),sbt.forEach(t),qar=r(D9e," \u2014 "),PV=n(D9e,"A",{href:!0});var lbt=s(PV);Nar=r(lbt,"TFElectraModel"),lbt.forEach(t),jar=r(D9e," (ELECTRA model)"),D9e.forEach(t),Dar=i(k),dM=n(k,"LI",{});var G9e=s(dM);Hpe=n(G9e,"STRONG",{});var ibt=s(Hpe);Gar=r(ibt,"flaubert"),ibt.forEach(t),Oar=r(G9e," \u2014 "),$V=n(G9e,"A",{href:!0});var dbt=s($V);Var=r(dbt,"TFFlaubertModel"),dbt.forEach(t),Xar=r(G9e," (FlauBERT model)"),G9e.forEach(t),zar=i(k),Js=n(k,"LI",{});var X9=s(Js);Upe=n(X9,"STRONG",{});var cbt=s(Upe);Qar=r(cbt,"funnel"),cbt.forEach(t),War=r(X9," \u2014 "),IV=n(X9,"A",{href:!0});var mbt=s(IV);Har=r(mbt,"TFFunnelModel"),mbt.forEach(t),Uar=r(X9," or "),qV=n(X9,"A",{href:!0});var fbt=s(qV);Jar=r(fbt,"TFFunnelBaseModel"),fbt.forEach(t),Yar=r(X9," (Funnel Transformer model)"),X9.forEach(t),Kar=i(k),cM=n(k,"LI",{});var O9e=s(cM);Jpe=n(O9e,"STRONG",{});var gbt=s(Jpe);Zar=r(gbt,"gpt2"),gbt.forEach(t),enr=r(O9e," \u2014 "),NV=n(O9e,"A",{href:!0});var hbt=s(NV);onr=r(hbt,"TFGPT2Model"),hbt.forEach(t),rnr=r(O9e," (OpenAI GPT-2 model)"),O9e.forEach(t),tnr=i(k),mM=n(k,"LI",{});var V9e=s(mM);Ype=n(V9e,"STRONG",{});var ubt=s(Ype);anr=r(ubt,"gptj"),ubt.forEach(t),nnr=r(V9e," \u2014 "),jV=n(V9e,"A",{href:!0});var pbt=s(jV);snr=r(pbt,"TFGPTJModel"),pbt.forEach(t),lnr=r(V9e," (GPT-J model)"),V9e.forEach(t),inr=i(k),fM=n(k,"LI",{});var X9e=s(fM);Kpe=n(X9e,"STRONG",{});var _bt=s(Kpe);dnr=r(_bt,"hubert"),_bt.forEach(t),cnr=r(X9e," \u2014 "),DV=n(X9e,"A",{href:!0});var bbt=s(DV);mnr=r(bbt,"TFHubertModel"),bbt.forEach(t),fnr=r(X9e," (Hubert model)"),X9e.forEach(t),gnr=i(k),gM=n(k,"LI",{});var z9e=s(gM);Zpe=n(z9e,"STRONG",{});var vbt=s(Zpe);hnr=r(vbt,"layoutlm"),vbt.forEach(t),unr=r(z9e," \u2014 "),GV=n(z9e,"A",{href:!0});var Fbt=s(GV);pnr=r(Fbt,"TFLayoutLMModel"),Fbt.forEach(t),_nr=r(z9e," (LayoutLM model)"),z9e.forEach(t),bnr=i(k),hM=n(k,"LI",{});var Q9e=s(hM);e_e=n(Q9e,"STRONG",{});var Tbt=s(e_e);vnr=r(Tbt,"led"),Tbt.forEach(t),Fnr=r(Q9e," \u2014 "),OV=n(Q9e,"A",{href:!0});var Mbt=s(OV);Tnr=r(Mbt,"TFLEDModel"),Mbt.forEach(t),Mnr=r(Q9e," (LED model)"),Q9e.forEach(t),Enr=i(k),uM=n(k,"LI",{});var W9e=s(uM);o_e=n(W9e,"STRONG",{});var Ebt=s(o_e);Cnr=r(Ebt,"longformer"),Ebt.forEach(t),wnr=r(W9e," \u2014 "),VV=n(W9e,"A",{href:!0});var Cbt=s(VV);Anr=r(Cbt,"TFLongformerModel"),Cbt.forEach(t),ynr=r(W9e," (Longformer model)"),W9e.forEach(t),Lnr=i(k),pM=n(k,"LI",{});var H9e=s(pM);r_e=n(H9e,"STRONG",{});var wbt=s(r_e);xnr=r(wbt,"lxmert"),wbt.forEach(t),knr=r(H9e," \u2014 "),XV=n(H9e,"A",{href:!0});var Abt=s(XV);Snr=r(Abt,"TFLxmertModel"),Abt.forEach(t),Rnr=r(H9e," (LXMERT model)"),H9e.forEach(t),Bnr=i(k),_M=n(k,"LI",{});var U9e=s(_M);t_e=n(U9e,"STRONG",{});var ybt=s(t_e);Pnr=r(ybt,"marian"),ybt.forEach(t),$nr=r(U9e," \u2014 "),zV=n(U9e,"A",{href:!0});var Lbt=s(zV);Inr=r(Lbt,"TFMarianModel"),Lbt.forEach(t),qnr=r(U9e," (Marian model)"),U9e.forEach(t),Nnr=i(k),bM=n(k,"LI",{});var J9e=s(bM);a_e=n(J9e,"STRONG",{});var xbt=s(a_e);jnr=r(xbt,"mbart"),xbt.forEach(t),Dnr=r(J9e," \u2014 "),QV=n(J9e,"A",{href:!0});var kbt=s(QV);Gnr=r(kbt,"TFMBartModel"),kbt.forEach(t),Onr=r(J9e," (mBART model)"),J9e.forEach(t),Vnr=i(k),vM=n(k,"LI",{});var Y9e=s(vM);n_e=n(Y9e,"STRONG",{});var Sbt=s(n_e);Xnr=r(Sbt,"mobilebert"),Sbt.forEach(t),znr=r(Y9e," \u2014 "),WV=n(Y9e,"A",{href:!0});var Rbt=s(WV);Qnr=r(Rbt,"TFMobileBertModel"),Rbt.forEach(t),Wnr=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),Hnr=i(k),FM=n(k,"LI",{});var K9e=s(FM);s_e=n(K9e,"STRONG",{});var Bbt=s(s_e);Unr=r(Bbt,"mpnet"),Bbt.forEach(t),Jnr=r(K9e," \u2014 "),HV=n(K9e,"A",{href:!0});var Pbt=s(HV);Ynr=r(Pbt,"TFMPNetModel"),Pbt.forEach(t),Knr=r(K9e," (MPNet model)"),K9e.forEach(t),Znr=i(k),TM=n(k,"LI",{});var Z9e=s(TM);l_e=n(Z9e,"STRONG",{});var $bt=s(l_e);esr=r($bt,"mt5"),$bt.forEach(t),osr=r(Z9e," \u2014 "),UV=n(Z9e,"A",{href:!0});var Ibt=s(UV);rsr=r(Ibt,"TFMT5Model"),Ibt.forEach(t),tsr=r(Z9e," (mT5 model)"),Z9e.forEach(t),asr=i(k),MM=n(k,"LI",{});var exe=s(MM);i_e=n(exe,"STRONG",{});var qbt=s(i_e);nsr=r(qbt,"openai-gpt"),qbt.forEach(t),ssr=r(exe," \u2014 "),JV=n(exe,"A",{href:!0});var Nbt=s(JV);lsr=r(Nbt,"TFOpenAIGPTModel"),Nbt.forEach(t),isr=r(exe," (OpenAI GPT model)"),exe.forEach(t),dsr=i(k),EM=n(k,"LI",{});var oxe=s(EM);d_e=n(oxe,"STRONG",{});var jbt=s(d_e);csr=r(jbt,"pegasus"),jbt.forEach(t),msr=r(oxe," \u2014 "),YV=n(oxe,"A",{href:!0});var Dbt=s(YV);fsr=r(Dbt,"TFPegasusModel"),Dbt.forEach(t),gsr=r(oxe," (Pegasus model)"),oxe.forEach(t),hsr=i(k),CM=n(k,"LI",{});var rxe=s(CM);c_e=n(rxe,"STRONG",{});var Gbt=s(c_e);usr=r(Gbt,"rembert"),Gbt.forEach(t),psr=r(rxe," \u2014 "),KV=n(rxe,"A",{href:!0});var Obt=s(KV);_sr=r(Obt,"TFRemBertModel"),Obt.forEach(t),bsr=r(rxe," (RemBERT model)"),rxe.forEach(t),vsr=i(k),wM=n(k,"LI",{});var txe=s(wM);m_e=n(txe,"STRONG",{});var Vbt=s(m_e);Fsr=r(Vbt,"roberta"),Vbt.forEach(t),Tsr=r(txe," \u2014 "),ZV=n(txe,"A",{href:!0});var Xbt=s(ZV);Msr=r(Xbt,"TFRobertaModel"),Xbt.forEach(t),Esr=r(txe," (RoBERTa model)"),txe.forEach(t),Csr=i(k),AM=n(k,"LI",{});var axe=s(AM);f_e=n(axe,"STRONG",{});var zbt=s(f_e);wsr=r(zbt,"roformer"),zbt.forEach(t),Asr=r(axe," \u2014 "),eX=n(axe,"A",{href:!0});var Qbt=s(eX);ysr=r(Qbt,"TFRoFormerModel"),Qbt.forEach(t),Lsr=r(axe," (RoFormer model)"),axe.forEach(t),xsr=i(k),yM=n(k,"LI",{});var nxe=s(yM);g_e=n(nxe,"STRONG",{});var Wbt=s(g_e);ksr=r(Wbt,"speech_to_text"),Wbt.forEach(t),Ssr=r(nxe," \u2014 "),oX=n(nxe,"A",{href:!0});var Hbt=s(oX);Rsr=r(Hbt,"TFSpeech2TextModel"),Hbt.forEach(t),Bsr=r(nxe," (Speech2Text model)"),nxe.forEach(t),Psr=i(k),LM=n(k,"LI",{});var sxe=s(LM);h_e=n(sxe,"STRONG",{});var Ubt=s(h_e);$sr=r(Ubt,"t5"),Ubt.forEach(t),Isr=r(sxe," \u2014 "),rX=n(sxe,"A",{href:!0});var Jbt=s(rX);qsr=r(Jbt,"TFT5Model"),Jbt.forEach(t),Nsr=r(sxe," (T5 model)"),sxe.forEach(t),jsr=i(k),xM=n(k,"LI",{});var lxe=s(xM);u_e=n(lxe,"STRONG",{});var Ybt=s(u_e);Dsr=r(Ybt,"tapas"),Ybt.forEach(t),Gsr=r(lxe," \u2014 "),tX=n(lxe,"A",{href:!0});var Kbt=s(tX);Osr=r(Kbt,"TFTapasModel"),Kbt.forEach(t),Vsr=r(lxe," (TAPAS model)"),lxe.forEach(t),Xsr=i(k),kM=n(k,"LI",{});var ixe=s(kM);p_e=n(ixe,"STRONG",{});var Zbt=s(p_e);zsr=r(Zbt,"transfo-xl"),Zbt.forEach(t),Qsr=r(ixe," \u2014 "),aX=n(ixe,"A",{href:!0});var e2t=s(aX);Wsr=r(e2t,"TFTransfoXLModel"),e2t.forEach(t),Hsr=r(ixe," (Transformer-XL model)"),ixe.forEach(t),Usr=i(k),SM=n(k,"LI",{});var dxe=s(SM);__e=n(dxe,"STRONG",{});var o2t=s(__e);Jsr=r(o2t,"vit"),o2t.forEach(t),Ysr=r(dxe," \u2014 "),nX=n(dxe,"A",{href:!0});var r2t=s(nX);Ksr=r(r2t,"TFViTModel"),r2t.forEach(t),Zsr=r(dxe," (ViT model)"),dxe.forEach(t),elr=i(k),RM=n(k,"LI",{});var cxe=s(RM);b_e=n(cxe,"STRONG",{});var t2t=s(b_e);olr=r(t2t,"vit_mae"),t2t.forEach(t),rlr=r(cxe," \u2014 "),sX=n(cxe,"A",{href:!0});var a2t=s(sX);tlr=r(a2t,"TFViTMAEModel"),a2t.forEach(t),alr=r(cxe," (ViTMAE model)"),cxe.forEach(t),nlr=i(k),BM=n(k,"LI",{});var mxe=s(BM);v_e=n(mxe,"STRONG",{});var n2t=s(v_e);slr=r(n2t,"wav2vec2"),n2t.forEach(t),llr=r(mxe," \u2014 "),lX=n(mxe,"A",{href:!0});var s2t=s(lX);ilr=r(s2t,"TFWav2Vec2Model"),s2t.forEach(t),dlr=r(mxe," (Wav2Vec2 model)"),mxe.forEach(t),clr=i(k),PM=n(k,"LI",{});var fxe=s(PM);F_e=n(fxe,"STRONG",{});var l2t=s(F_e);mlr=r(l2t,"xlm"),l2t.forEach(t),flr=r(fxe," \u2014 "),iX=n(fxe,"A",{href:!0});var i2t=s(iX);glr=r(i2t,"TFXLMModel"),i2t.forEach(t),hlr=r(fxe," (XLM model)"),fxe.forEach(t),ulr=i(k),$M=n(k,"LI",{});var gxe=s($M);T_e=n(gxe,"STRONG",{});var d2t=s(T_e);plr=r(d2t,"xlm-roberta"),d2t.forEach(t),_lr=r(gxe," \u2014 "),dX=n(gxe,"A",{href:!0});var c2t=s(dX);blr=r(c2t,"TFXLMRobertaModel"),c2t.forEach(t),vlr=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),Flr=i(k),IM=n(k,"LI",{});var hxe=s(IM);M_e=n(hxe,"STRONG",{});var m2t=s(M_e);Tlr=r(m2t,"xlnet"),m2t.forEach(t),Mlr=r(hxe," \u2014 "),cX=n(hxe,"A",{href:!0});var f2t=s(cX);Elr=r(f2t,"TFXLNetModel"),f2t.forEach(t),Clr=r(hxe," (XLNet model)"),hxe.forEach(t),k.forEach(t),wlr=i(ua),E_e=n(ua,"P",{});var g2t=s(E_e);Alr=r(g2t,"Examples:"),g2t.forEach(t),ylr=i(ua),f(Sy.$$.fragment,ua),ua.forEach(t),Hl.forEach(t),s$e=i(c),Cc=n(c,"H2",{class:!0});var pqe=s(Cc);qM=n(pqe,"A",{id:!0,class:!0,href:!0});var h2t=s(qM);C_e=n(h2t,"SPAN",{});var u2t=s(C_e);f(Ry.$$.fragment,u2t),u2t.forEach(t),h2t.forEach(t),Llr=i(pqe),w_e=n(pqe,"SPAN",{});var p2t=s(w_e);xlr=r(p2t,"TFAutoModelForPreTraining"),p2t.forEach(t),pqe.forEach(t),l$e=i(c),Fr=n(c,"DIV",{class:!0});var Jl=s(Fr);f(By.$$.fragment,Jl),klr=i(Jl),wc=n(Jl,"P",{});var mY=s(wc);Slr=r(mY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mX=n(mY,"A",{href:!0});var _2t=s(mX);Rlr=r(_2t,"from_pretrained()"),_2t.forEach(t),Blr=r(mY," class method or the "),fX=n(mY,"A",{href:!0});var b2t=s(fX);Plr=r(b2t,"from_config()"),b2t.forEach(t),$lr=r(mY,` class
method.`),mY.forEach(t),Ilr=i(Jl),Py=n(Jl,"P",{});var _qe=s(Py);qlr=r(_qe,"This class cannot be instantiated directly using "),A_e=n(_qe,"CODE",{});var v2t=s(A_e);Nlr=r(v2t,"__init__()"),v2t.forEach(t),jlr=r(_qe," (throws an error)."),_qe.forEach(t),Dlr=i(Jl),ht=n(Jl,"DIV",{class:!0});var Yl=s(ht);f($y.$$.fragment,Yl),Glr=i(Yl),y_e=n(Yl,"P",{});var F2t=s(y_e);Olr=r(F2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),F2t.forEach(t),Vlr=i(Yl),Ac=n(Yl,"P",{});var fY=s(Ac);Xlr=r(fY,`Note:
Loading a model from its configuration file does `),L_e=n(fY,"STRONG",{});var T2t=s(L_e);zlr=r(T2t,"not"),T2t.forEach(t),Qlr=r(fY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(fY,"A",{href:!0});var M2t=s(gX);Wlr=r(M2t,"from_pretrained()"),M2t.forEach(t),Hlr=r(fY," to load the model weights."),fY.forEach(t),Ulr=i(Yl),x_e=n(Yl,"P",{});var E2t=s(x_e);Jlr=r(E2t,"Examples:"),E2t.forEach(t),Ylr=i(Yl),f(Iy.$$.fragment,Yl),Yl.forEach(t),Klr=i(Jl),po=n(Jl,"DIV",{class:!0});var pa=s(po);f(qy.$$.fragment,pa),Zlr=i(pa),k_e=n(pa,"P",{});var C2t=s(k_e);eir=r(C2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),C2t.forEach(t),oir=i(pa),bn=n(pa,"P",{});var T6=s(bn);rir=r(T6,"The model class to instantiate is selected based on the "),S_e=n(T6,"CODE",{});var w2t=s(S_e);tir=r(w2t,"model_type"),w2t.forEach(t),air=r(T6,` property of the config object (either
passed as an argument or loaded from `),R_e=n(T6,"CODE",{});var A2t=s(R_e);nir=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),sir=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(T6,"CODE",{});var y2t=s(B_e);lir=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),iir=r(T6,":"),T6.forEach(t),dir=i(pa),U=n(pa,"UL",{});var Y=s(U);NM=n(Y,"LI",{});var uxe=s(NM);P_e=n(uxe,"STRONG",{});var L2t=s(P_e);cir=r(L2t,"albert"),L2t.forEach(t),mir=r(uxe," \u2014 "),hX=n(uxe,"A",{href:!0});var x2t=s(hX);fir=r(x2t,"TFAlbertForPreTraining"),x2t.forEach(t),gir=r(uxe," (ALBERT model)"),uxe.forEach(t),hir=i(Y),jM=n(Y,"LI",{});var pxe=s(jM);$_e=n(pxe,"STRONG",{});var k2t=s($_e);uir=r(k2t,"bart"),k2t.forEach(t),pir=r(pxe," \u2014 "),uX=n(pxe,"A",{href:!0});var S2t=s(uX);_ir=r(S2t,"TFBartForConditionalGeneration"),S2t.forEach(t),bir=r(pxe," (BART model)"),pxe.forEach(t),vir=i(Y),DM=n(Y,"LI",{});var _xe=s(DM);I_e=n(_xe,"STRONG",{});var R2t=s(I_e);Fir=r(R2t,"bert"),R2t.forEach(t),Tir=r(_xe," \u2014 "),pX=n(_xe,"A",{href:!0});var B2t=s(pX);Mir=r(B2t,"TFBertForPreTraining"),B2t.forEach(t),Eir=r(_xe," (BERT model)"),_xe.forEach(t),Cir=i(Y),GM=n(Y,"LI",{});var bxe=s(GM);q_e=n(bxe,"STRONG",{});var P2t=s(q_e);wir=r(P2t,"camembert"),P2t.forEach(t),Air=r(bxe," \u2014 "),_X=n(bxe,"A",{href:!0});var $2t=s(_X);yir=r($2t,"TFCamembertForMaskedLM"),$2t.forEach(t),Lir=r(bxe," (CamemBERT model)"),bxe.forEach(t),xir=i(Y),OM=n(Y,"LI",{});var vxe=s(OM);N_e=n(vxe,"STRONG",{});var I2t=s(N_e);kir=r(I2t,"ctrl"),I2t.forEach(t),Sir=r(vxe," \u2014 "),bX=n(vxe,"A",{href:!0});var q2t=s(bX);Rir=r(q2t,"TFCTRLLMHeadModel"),q2t.forEach(t),Bir=r(vxe," (CTRL model)"),vxe.forEach(t),Pir=i(Y),VM=n(Y,"LI",{});var Fxe=s(VM);j_e=n(Fxe,"STRONG",{});var N2t=s(j_e);$ir=r(N2t,"distilbert"),N2t.forEach(t),Iir=r(Fxe," \u2014 "),vX=n(Fxe,"A",{href:!0});var j2t=s(vX);qir=r(j2t,"TFDistilBertForMaskedLM"),j2t.forEach(t),Nir=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),jir=i(Y),XM=n(Y,"LI",{});var Txe=s(XM);D_e=n(Txe,"STRONG",{});var D2t=s(D_e);Dir=r(D2t,"electra"),D2t.forEach(t),Gir=r(Txe," \u2014 "),FX=n(Txe,"A",{href:!0});var G2t=s(FX);Oir=r(G2t,"TFElectraForPreTraining"),G2t.forEach(t),Vir=r(Txe," (ELECTRA model)"),Txe.forEach(t),Xir=i(Y),zM=n(Y,"LI",{});var Mxe=s(zM);G_e=n(Mxe,"STRONG",{});var O2t=s(G_e);zir=r(O2t,"flaubert"),O2t.forEach(t),Qir=r(Mxe," \u2014 "),TX=n(Mxe,"A",{href:!0});var V2t=s(TX);Wir=r(V2t,"TFFlaubertWithLMHeadModel"),V2t.forEach(t),Hir=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),Uir=i(Y),QM=n(Y,"LI",{});var Exe=s(QM);O_e=n(Exe,"STRONG",{});var X2t=s(O_e);Jir=r(X2t,"funnel"),X2t.forEach(t),Yir=r(Exe," \u2014 "),MX=n(Exe,"A",{href:!0});var z2t=s(MX);Kir=r(z2t,"TFFunnelForPreTraining"),z2t.forEach(t),Zir=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),edr=i(Y),WM=n(Y,"LI",{});var Cxe=s(WM);V_e=n(Cxe,"STRONG",{});var Q2t=s(V_e);odr=r(Q2t,"gpt2"),Q2t.forEach(t),rdr=r(Cxe," \u2014 "),EX=n(Cxe,"A",{href:!0});var W2t=s(EX);tdr=r(W2t,"TFGPT2LMHeadModel"),W2t.forEach(t),adr=r(Cxe," (OpenAI GPT-2 model)"),Cxe.forEach(t),ndr=i(Y),HM=n(Y,"LI",{});var wxe=s(HM);X_e=n(wxe,"STRONG",{});var H2t=s(X_e);sdr=r(H2t,"layoutlm"),H2t.forEach(t),ldr=r(wxe," \u2014 "),CX=n(wxe,"A",{href:!0});var U2t=s(CX);idr=r(U2t,"TFLayoutLMForMaskedLM"),U2t.forEach(t),ddr=r(wxe," (LayoutLM model)"),wxe.forEach(t),cdr=i(Y),UM=n(Y,"LI",{});var Axe=s(UM);z_e=n(Axe,"STRONG",{});var J2t=s(z_e);mdr=r(J2t,"lxmert"),J2t.forEach(t),fdr=r(Axe," \u2014 "),wX=n(Axe,"A",{href:!0});var Y2t=s(wX);gdr=r(Y2t,"TFLxmertForPreTraining"),Y2t.forEach(t),hdr=r(Axe," (LXMERT model)"),Axe.forEach(t),udr=i(Y),JM=n(Y,"LI",{});var yxe=s(JM);Q_e=n(yxe,"STRONG",{});var K2t=s(Q_e);pdr=r(K2t,"mobilebert"),K2t.forEach(t),_dr=r(yxe," \u2014 "),AX=n(yxe,"A",{href:!0});var Z2t=s(AX);bdr=r(Z2t,"TFMobileBertForPreTraining"),Z2t.forEach(t),vdr=r(yxe," (MobileBERT model)"),yxe.forEach(t),Fdr=i(Y),YM=n(Y,"LI",{});var Lxe=s(YM);W_e=n(Lxe,"STRONG",{});var evt=s(W_e);Tdr=r(evt,"mpnet"),evt.forEach(t),Mdr=r(Lxe," \u2014 "),yX=n(Lxe,"A",{href:!0});var ovt=s(yX);Edr=r(ovt,"TFMPNetForMaskedLM"),ovt.forEach(t),Cdr=r(Lxe," (MPNet model)"),Lxe.forEach(t),wdr=i(Y),KM=n(Y,"LI",{});var xxe=s(KM);H_e=n(xxe,"STRONG",{});var rvt=s(H_e);Adr=r(rvt,"openai-gpt"),rvt.forEach(t),ydr=r(xxe," \u2014 "),LX=n(xxe,"A",{href:!0});var tvt=s(LX);Ldr=r(tvt,"TFOpenAIGPTLMHeadModel"),tvt.forEach(t),xdr=r(xxe," (OpenAI GPT model)"),xxe.forEach(t),kdr=i(Y),ZM=n(Y,"LI",{});var kxe=s(ZM);U_e=n(kxe,"STRONG",{});var avt=s(U_e);Sdr=r(avt,"roberta"),avt.forEach(t),Rdr=r(kxe," \u2014 "),xX=n(kxe,"A",{href:!0});var nvt=s(xX);Bdr=r(nvt,"TFRobertaForMaskedLM"),nvt.forEach(t),Pdr=r(kxe," (RoBERTa model)"),kxe.forEach(t),$dr=i(Y),e4=n(Y,"LI",{});var Sxe=s(e4);J_e=n(Sxe,"STRONG",{});var svt=s(J_e);Idr=r(svt,"t5"),svt.forEach(t),qdr=r(Sxe," \u2014 "),kX=n(Sxe,"A",{href:!0});var lvt=s(kX);Ndr=r(lvt,"TFT5ForConditionalGeneration"),lvt.forEach(t),jdr=r(Sxe," (T5 model)"),Sxe.forEach(t),Ddr=i(Y),o4=n(Y,"LI",{});var Rxe=s(o4);Y_e=n(Rxe,"STRONG",{});var ivt=s(Y_e);Gdr=r(ivt,"tapas"),ivt.forEach(t),Odr=r(Rxe," \u2014 "),SX=n(Rxe,"A",{href:!0});var dvt=s(SX);Vdr=r(dvt,"TFTapasForMaskedLM"),dvt.forEach(t),Xdr=r(Rxe," (TAPAS model)"),Rxe.forEach(t),zdr=i(Y),r4=n(Y,"LI",{});var Bxe=s(r4);K_e=n(Bxe,"STRONG",{});var cvt=s(K_e);Qdr=r(cvt,"transfo-xl"),cvt.forEach(t),Wdr=r(Bxe," \u2014 "),RX=n(Bxe,"A",{href:!0});var mvt=s(RX);Hdr=r(mvt,"TFTransfoXLLMHeadModel"),mvt.forEach(t),Udr=r(Bxe," (Transformer-XL model)"),Bxe.forEach(t),Jdr=i(Y),t4=n(Y,"LI",{});var Pxe=s(t4);Z_e=n(Pxe,"STRONG",{});var fvt=s(Z_e);Ydr=r(fvt,"vit_mae"),fvt.forEach(t),Kdr=r(Pxe," \u2014 "),BX=n(Pxe,"A",{href:!0});var gvt=s(BX);Zdr=r(gvt,"TFViTMAEForPreTraining"),gvt.forEach(t),ecr=r(Pxe," (ViTMAE model)"),Pxe.forEach(t),ocr=i(Y),a4=n(Y,"LI",{});var $xe=s(a4);ebe=n($xe,"STRONG",{});var hvt=s(ebe);rcr=r(hvt,"xlm"),hvt.forEach(t),tcr=r($xe," \u2014 "),PX=n($xe,"A",{href:!0});var uvt=s(PX);acr=r(uvt,"TFXLMWithLMHeadModel"),uvt.forEach(t),ncr=r($xe," (XLM model)"),$xe.forEach(t),scr=i(Y),n4=n(Y,"LI",{});var Ixe=s(n4);obe=n(Ixe,"STRONG",{});var pvt=s(obe);lcr=r(pvt,"xlm-roberta"),pvt.forEach(t),icr=r(Ixe," \u2014 "),$X=n(Ixe,"A",{href:!0});var _vt=s($X);dcr=r(_vt,"TFXLMRobertaForMaskedLM"),_vt.forEach(t),ccr=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),mcr=i(Y),s4=n(Y,"LI",{});var qxe=s(s4);rbe=n(qxe,"STRONG",{});var bvt=s(rbe);fcr=r(bvt,"xlnet"),bvt.forEach(t),gcr=r(qxe," \u2014 "),IX=n(qxe,"A",{href:!0});var vvt=s(IX);hcr=r(vvt,"TFXLNetLMHeadModel"),vvt.forEach(t),ucr=r(qxe," (XLNet model)"),qxe.forEach(t),Y.forEach(t),pcr=i(pa),tbe=n(pa,"P",{});var Fvt=s(tbe);_cr=r(Fvt,"Examples:"),Fvt.forEach(t),bcr=i(pa),f(Ny.$$.fragment,pa),pa.forEach(t),Jl.forEach(t),i$e=i(c),yc=n(c,"H2",{class:!0});var bqe=s(yc);l4=n(bqe,"A",{id:!0,class:!0,href:!0});var Tvt=s(l4);abe=n(Tvt,"SPAN",{});var Mvt=s(abe);f(jy.$$.fragment,Mvt),Mvt.forEach(t),Tvt.forEach(t),vcr=i(bqe),nbe=n(bqe,"SPAN",{});var Evt=s(nbe);Fcr=r(Evt,"TFAutoModelForCausalLM"),Evt.forEach(t),bqe.forEach(t),d$e=i(c),Tr=n(c,"DIV",{class:!0});var Kl=s(Tr);f(Dy.$$.fragment,Kl),Tcr=i(Kl),Lc=n(Kl,"P",{});var gY=s(Lc);Mcr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qX=n(gY,"A",{href:!0});var Cvt=s(qX);Ecr=r(Cvt,"from_pretrained()"),Cvt.forEach(t),Ccr=r(gY," class method or the "),NX=n(gY,"A",{href:!0});var wvt=s(NX);wcr=r(wvt,"from_config()"),wvt.forEach(t),Acr=r(gY,` class
method.`),gY.forEach(t),ycr=i(Kl),Gy=n(Kl,"P",{});var vqe=s(Gy);Lcr=r(vqe,"This class cannot be instantiated directly using "),sbe=n(vqe,"CODE",{});var Avt=s(sbe);xcr=r(Avt,"__init__()"),Avt.forEach(t),kcr=r(vqe," (throws an error)."),vqe.forEach(t),Scr=i(Kl),ut=n(Kl,"DIV",{class:!0});var Zl=s(ut);f(Oy.$$.fragment,Zl),Rcr=i(Zl),lbe=n(Zl,"P",{});var yvt=s(lbe);Bcr=r(yvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yvt.forEach(t),Pcr=i(Zl),xc=n(Zl,"P",{});var hY=s(xc);$cr=r(hY,`Note:
Loading a model from its configuration file does `),ibe=n(hY,"STRONG",{});var Lvt=s(ibe);Icr=r(Lvt,"not"),Lvt.forEach(t),qcr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(hY,"A",{href:!0});var xvt=s(jX);Ncr=r(xvt,"from_pretrained()"),xvt.forEach(t),jcr=r(hY," to load the model weights."),hY.forEach(t),Dcr=i(Zl),dbe=n(Zl,"P",{});var kvt=s(dbe);Gcr=r(kvt,"Examples:"),kvt.forEach(t),Ocr=i(Zl),f(Vy.$$.fragment,Zl),Zl.forEach(t),Vcr=i(Kl),_o=n(Kl,"DIV",{class:!0});var _a=s(_o);f(Xy.$$.fragment,_a),Xcr=i(_a),cbe=n(_a,"P",{});var Svt=s(cbe);zcr=r(Svt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Svt.forEach(t),Qcr=i(_a),vn=n(_a,"P",{});var M6=s(vn);Wcr=r(M6,"The model class to instantiate is selected based on the "),mbe=n(M6,"CODE",{});var Rvt=s(mbe);Hcr=r(Rvt,"model_type"),Rvt.forEach(t),Ucr=r(M6,` property of the config object (either
passed as an argument or loaded from `),fbe=n(M6,"CODE",{});var Bvt=s(fbe);Jcr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),Ycr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(M6,"CODE",{});var Pvt=s(gbe);Kcr=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),Zcr=r(M6,":"),M6.forEach(t),emr=i(_a),ge=n(_a,"UL",{});var _e=s(ge);i4=n(_e,"LI",{});var Nxe=s(i4);hbe=n(Nxe,"STRONG",{});var $vt=s(hbe);omr=r($vt,"bert"),$vt.forEach(t),rmr=r(Nxe," \u2014 "),DX=n(Nxe,"A",{href:!0});var Ivt=s(DX);tmr=r(Ivt,"TFBertLMHeadModel"),Ivt.forEach(t),amr=r(Nxe," (BERT model)"),Nxe.forEach(t),nmr=i(_e),d4=n(_e,"LI",{});var jxe=s(d4);ube=n(jxe,"STRONG",{});var qvt=s(ube);smr=r(qvt,"camembert"),qvt.forEach(t),lmr=r(jxe," \u2014 "),GX=n(jxe,"A",{href:!0});var Nvt=s(GX);imr=r(Nvt,"TFCamembertForCausalLM"),Nvt.forEach(t),dmr=r(jxe," (CamemBERT model)"),jxe.forEach(t),cmr=i(_e),c4=n(_e,"LI",{});var Dxe=s(c4);pbe=n(Dxe,"STRONG",{});var jvt=s(pbe);mmr=r(jvt,"ctrl"),jvt.forEach(t),fmr=r(Dxe," \u2014 "),OX=n(Dxe,"A",{href:!0});var Dvt=s(OX);gmr=r(Dvt,"TFCTRLLMHeadModel"),Dvt.forEach(t),hmr=r(Dxe," (CTRL model)"),Dxe.forEach(t),umr=i(_e),m4=n(_e,"LI",{});var Gxe=s(m4);_be=n(Gxe,"STRONG",{});var Gvt=s(_be);pmr=r(Gvt,"gpt2"),Gvt.forEach(t),_mr=r(Gxe," \u2014 "),VX=n(Gxe,"A",{href:!0});var Ovt=s(VX);bmr=r(Ovt,"TFGPT2LMHeadModel"),Ovt.forEach(t),vmr=r(Gxe," (OpenAI GPT-2 model)"),Gxe.forEach(t),Fmr=i(_e),f4=n(_e,"LI",{});var Oxe=s(f4);bbe=n(Oxe,"STRONG",{});var Vvt=s(bbe);Tmr=r(Vvt,"gptj"),Vvt.forEach(t),Mmr=r(Oxe," \u2014 "),XX=n(Oxe,"A",{href:!0});var Xvt=s(XX);Emr=r(Xvt,"TFGPTJForCausalLM"),Xvt.forEach(t),Cmr=r(Oxe," (GPT-J model)"),Oxe.forEach(t),wmr=i(_e),g4=n(_e,"LI",{});var Vxe=s(g4);vbe=n(Vxe,"STRONG",{});var zvt=s(vbe);Amr=r(zvt,"openai-gpt"),zvt.forEach(t),ymr=r(Vxe," \u2014 "),zX=n(Vxe,"A",{href:!0});var Qvt=s(zX);Lmr=r(Qvt,"TFOpenAIGPTLMHeadModel"),Qvt.forEach(t),xmr=r(Vxe," (OpenAI GPT model)"),Vxe.forEach(t),kmr=i(_e),h4=n(_e,"LI",{});var Xxe=s(h4);Fbe=n(Xxe,"STRONG",{});var Wvt=s(Fbe);Smr=r(Wvt,"rembert"),Wvt.forEach(t),Rmr=r(Xxe," \u2014 "),QX=n(Xxe,"A",{href:!0});var Hvt=s(QX);Bmr=r(Hvt,"TFRemBertForCausalLM"),Hvt.forEach(t),Pmr=r(Xxe," (RemBERT model)"),Xxe.forEach(t),$mr=i(_e),u4=n(_e,"LI",{});var zxe=s(u4);Tbe=n(zxe,"STRONG",{});var Uvt=s(Tbe);Imr=r(Uvt,"roberta"),Uvt.forEach(t),qmr=r(zxe," \u2014 "),WX=n(zxe,"A",{href:!0});var Jvt=s(WX);Nmr=r(Jvt,"TFRobertaForCausalLM"),Jvt.forEach(t),jmr=r(zxe," (RoBERTa model)"),zxe.forEach(t),Dmr=i(_e),p4=n(_e,"LI",{});var Qxe=s(p4);Mbe=n(Qxe,"STRONG",{});var Yvt=s(Mbe);Gmr=r(Yvt,"roformer"),Yvt.forEach(t),Omr=r(Qxe," \u2014 "),HX=n(Qxe,"A",{href:!0});var Kvt=s(HX);Vmr=r(Kvt,"TFRoFormerForCausalLM"),Kvt.forEach(t),Xmr=r(Qxe," (RoFormer model)"),Qxe.forEach(t),zmr=i(_e),_4=n(_e,"LI",{});var Wxe=s(_4);Ebe=n(Wxe,"STRONG",{});var Zvt=s(Ebe);Qmr=r(Zvt,"transfo-xl"),Zvt.forEach(t),Wmr=r(Wxe," \u2014 "),UX=n(Wxe,"A",{href:!0});var eFt=s(UX);Hmr=r(eFt,"TFTransfoXLLMHeadModel"),eFt.forEach(t),Umr=r(Wxe," (Transformer-XL model)"),Wxe.forEach(t),Jmr=i(_e),b4=n(_e,"LI",{});var Hxe=s(b4);Cbe=n(Hxe,"STRONG",{});var oFt=s(Cbe);Ymr=r(oFt,"xlm"),oFt.forEach(t),Kmr=r(Hxe," \u2014 "),JX=n(Hxe,"A",{href:!0});var rFt=s(JX);Zmr=r(rFt,"TFXLMWithLMHeadModel"),rFt.forEach(t),efr=r(Hxe," (XLM model)"),Hxe.forEach(t),ofr=i(_e),v4=n(_e,"LI",{});var Uxe=s(v4);wbe=n(Uxe,"STRONG",{});var tFt=s(wbe);rfr=r(tFt,"xlnet"),tFt.forEach(t),tfr=r(Uxe," \u2014 "),YX=n(Uxe,"A",{href:!0});var aFt=s(YX);afr=r(aFt,"TFXLNetLMHeadModel"),aFt.forEach(t),nfr=r(Uxe," (XLNet model)"),Uxe.forEach(t),_e.forEach(t),sfr=i(_a),Abe=n(_a,"P",{});var nFt=s(Abe);lfr=r(nFt,"Examples:"),nFt.forEach(t),ifr=i(_a),f(zy.$$.fragment,_a),_a.forEach(t),Kl.forEach(t),c$e=i(c),kc=n(c,"H2",{class:!0});var Fqe=s(kc);F4=n(Fqe,"A",{id:!0,class:!0,href:!0});var sFt=s(F4);ybe=n(sFt,"SPAN",{});var lFt=s(ybe);f(Qy.$$.fragment,lFt),lFt.forEach(t),sFt.forEach(t),dfr=i(Fqe),Lbe=n(Fqe,"SPAN",{});var iFt=s(Lbe);cfr=r(iFt,"TFAutoModelForImageClassification"),iFt.forEach(t),Fqe.forEach(t),m$e=i(c),Mr=n(c,"DIV",{class:!0});var ei=s(Mr);f(Wy.$$.fragment,ei),mfr=i(ei),Sc=n(ei,"P",{});var uY=s(Sc);ffr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KX=n(uY,"A",{href:!0});var dFt=s(KX);gfr=r(dFt,"from_pretrained()"),dFt.forEach(t),hfr=r(uY," class method or the "),ZX=n(uY,"A",{href:!0});var cFt=s(ZX);ufr=r(cFt,"from_config()"),cFt.forEach(t),pfr=r(uY,` class
method.`),uY.forEach(t),_fr=i(ei),Hy=n(ei,"P",{});var Tqe=s(Hy);bfr=r(Tqe,"This class cannot be instantiated directly using "),xbe=n(Tqe,"CODE",{});var mFt=s(xbe);vfr=r(mFt,"__init__()"),mFt.forEach(t),Ffr=r(Tqe," (throws an error)."),Tqe.forEach(t),Tfr=i(ei),pt=n(ei,"DIV",{class:!0});var oi=s(pt);f(Uy.$$.fragment,oi),Mfr=i(oi),kbe=n(oi,"P",{});var fFt=s(kbe);Efr=r(fFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fFt.forEach(t),Cfr=i(oi),Rc=n(oi,"P",{});var pY=s(Rc);wfr=r(pY,`Note:
Loading a model from its configuration file does `),Sbe=n(pY,"STRONG",{});var gFt=s(Sbe);Afr=r(gFt,"not"),gFt.forEach(t),yfr=r(pY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(pY,"A",{href:!0});var hFt=s(ez);Lfr=r(hFt,"from_pretrained()"),hFt.forEach(t),xfr=r(pY," to load the model weights."),pY.forEach(t),kfr=i(oi),Rbe=n(oi,"P",{});var uFt=s(Rbe);Sfr=r(uFt,"Examples:"),uFt.forEach(t),Rfr=i(oi),f(Jy.$$.fragment,oi),oi.forEach(t),Bfr=i(ei),bo=n(ei,"DIV",{class:!0});var ba=s(bo);f(Yy.$$.fragment,ba),Pfr=i(ba),Bbe=n(ba,"P",{});var pFt=s(Bbe);$fr=r(pFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pFt.forEach(t),Ifr=i(ba),Fn=n(ba,"P",{});var E6=s(Fn);qfr=r(E6,"The model class to instantiate is selected based on the "),Pbe=n(E6,"CODE",{});var _Ft=s(Pbe);Nfr=r(_Ft,"model_type"),_Ft.forEach(t),jfr=r(E6,` property of the config object (either
passed as an argument or loaded from `),$be=n(E6,"CODE",{});var bFt=s($be);Dfr=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),Gfr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(E6,"CODE",{});var vFt=s(Ibe);Ofr=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),Vfr=r(E6,":"),E6.forEach(t),Xfr=i(ba),Ky=n(ba,"UL",{});var Mqe=s(Ky);T4=n(Mqe,"LI",{});var Jxe=s(T4);qbe=n(Jxe,"STRONG",{});var FFt=s(qbe);zfr=r(FFt,"convnext"),FFt.forEach(t),Qfr=r(Jxe," \u2014 "),oz=n(Jxe,"A",{href:!0});var TFt=s(oz);Wfr=r(TFt,"TFConvNextForImageClassification"),TFt.forEach(t),Hfr=r(Jxe," (ConvNext model)"),Jxe.forEach(t),Ufr=i(Mqe),M4=n(Mqe,"LI",{});var Yxe=s(M4);Nbe=n(Yxe,"STRONG",{});var MFt=s(Nbe);Jfr=r(MFt,"vit"),MFt.forEach(t),Yfr=r(Yxe," \u2014 "),rz=n(Yxe,"A",{href:!0});var EFt=s(rz);Kfr=r(EFt,"TFViTForImageClassification"),EFt.forEach(t),Zfr=r(Yxe," (ViT model)"),Yxe.forEach(t),Mqe.forEach(t),egr=i(ba),jbe=n(ba,"P",{});var CFt=s(jbe);ogr=r(CFt,"Examples:"),CFt.forEach(t),rgr=i(ba),f(Zy.$$.fragment,ba),ba.forEach(t),ei.forEach(t),f$e=i(c),Bc=n(c,"H2",{class:!0});var Eqe=s(Bc);E4=n(Eqe,"A",{id:!0,class:!0,href:!0});var wFt=s(E4);Dbe=n(wFt,"SPAN",{});var AFt=s(Dbe);f(e8.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),tgr=i(Eqe),Gbe=n(Eqe,"SPAN",{});var yFt=s(Gbe);agr=r(yFt,"TFAutoModelForMaskedLM"),yFt.forEach(t),Eqe.forEach(t),g$e=i(c),Er=n(c,"DIV",{class:!0});var ri=s(Er);f(o8.$$.fragment,ri),ngr=i(ri),Pc=n(ri,"P",{});var _Y=s(Pc);sgr=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tz=n(_Y,"A",{href:!0});var LFt=s(tz);lgr=r(LFt,"from_pretrained()"),LFt.forEach(t),igr=r(_Y," class method or the "),az=n(_Y,"A",{href:!0});var xFt=s(az);dgr=r(xFt,"from_config()"),xFt.forEach(t),cgr=r(_Y,` class
method.`),_Y.forEach(t),mgr=i(ri),r8=n(ri,"P",{});var Cqe=s(r8);fgr=r(Cqe,"This class cannot be instantiated directly using "),Obe=n(Cqe,"CODE",{});var kFt=s(Obe);ggr=r(kFt,"__init__()"),kFt.forEach(t),hgr=r(Cqe," (throws an error)."),Cqe.forEach(t),ugr=i(ri),_t=n(ri,"DIV",{class:!0});var ti=s(_t);f(t8.$$.fragment,ti),pgr=i(ti),Vbe=n(ti,"P",{});var SFt=s(Vbe);_gr=r(SFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SFt.forEach(t),bgr=i(ti),$c=n(ti,"P",{});var bY=s($c);vgr=r(bY,`Note:
Loading a model from its configuration file does `),Xbe=n(bY,"STRONG",{});var RFt=s(Xbe);Fgr=r(RFt,"not"),RFt.forEach(t),Tgr=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(bY,"A",{href:!0});var BFt=s(nz);Mgr=r(BFt,"from_pretrained()"),BFt.forEach(t),Egr=r(bY," to load the model weights."),bY.forEach(t),Cgr=i(ti),zbe=n(ti,"P",{});var PFt=s(zbe);wgr=r(PFt,"Examples:"),PFt.forEach(t),Agr=i(ti),f(a8.$$.fragment,ti),ti.forEach(t),ygr=i(ri),vo=n(ri,"DIV",{class:!0});var va=s(vo);f(n8.$$.fragment,va),Lgr=i(va),Qbe=n(va,"P",{});var $Ft=s(Qbe);xgr=r($Ft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Ft.forEach(t),kgr=i(va),Tn=n(va,"P",{});var C6=s(Tn);Sgr=r(C6,"The model class to instantiate is selected based on the "),Wbe=n(C6,"CODE",{});var IFt=s(Wbe);Rgr=r(IFt,"model_type"),IFt.forEach(t),Bgr=r(C6,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(C6,"CODE",{});var qFt=s(Hbe);Pgr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),$gr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(C6,"CODE",{});var NFt=s(Ube);Igr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),qgr=r(C6,":"),C6.forEach(t),Ngr=i(va),K=n(va,"UL",{});var re=s(K);C4=n(re,"LI",{});var Kxe=s(C4);Jbe=n(Kxe,"STRONG",{});var jFt=s(Jbe);jgr=r(jFt,"albert"),jFt.forEach(t),Dgr=r(Kxe," \u2014 "),sz=n(Kxe,"A",{href:!0});var DFt=s(sz);Ggr=r(DFt,"TFAlbertForMaskedLM"),DFt.forEach(t),Ogr=r(Kxe," (ALBERT model)"),Kxe.forEach(t),Vgr=i(re),w4=n(re,"LI",{});var Zxe=s(w4);Ybe=n(Zxe,"STRONG",{});var GFt=s(Ybe);Xgr=r(GFt,"bert"),GFt.forEach(t),zgr=r(Zxe," \u2014 "),lz=n(Zxe,"A",{href:!0});var OFt=s(lz);Qgr=r(OFt,"TFBertForMaskedLM"),OFt.forEach(t),Wgr=r(Zxe," (BERT model)"),Zxe.forEach(t),Hgr=i(re),A4=n(re,"LI",{});var eke=s(A4);Kbe=n(eke,"STRONG",{});var VFt=s(Kbe);Ugr=r(VFt,"camembert"),VFt.forEach(t),Jgr=r(eke," \u2014 "),iz=n(eke,"A",{href:!0});var XFt=s(iz);Ygr=r(XFt,"TFCamembertForMaskedLM"),XFt.forEach(t),Kgr=r(eke," (CamemBERT model)"),eke.forEach(t),Zgr=i(re),y4=n(re,"LI",{});var oke=s(y4);Zbe=n(oke,"STRONG",{});var zFt=s(Zbe);ehr=r(zFt,"convbert"),zFt.forEach(t),ohr=r(oke," \u2014 "),dz=n(oke,"A",{href:!0});var QFt=s(dz);rhr=r(QFt,"TFConvBertForMaskedLM"),QFt.forEach(t),thr=r(oke," (ConvBERT model)"),oke.forEach(t),ahr=i(re),L4=n(re,"LI",{});var rke=s(L4);e2e=n(rke,"STRONG",{});var WFt=s(e2e);nhr=r(WFt,"deberta"),WFt.forEach(t),shr=r(rke," \u2014 "),cz=n(rke,"A",{href:!0});var HFt=s(cz);lhr=r(HFt,"TFDebertaForMaskedLM"),HFt.forEach(t),ihr=r(rke," (DeBERTa model)"),rke.forEach(t),dhr=i(re),x4=n(re,"LI",{});var tke=s(x4);o2e=n(tke,"STRONG",{});var UFt=s(o2e);chr=r(UFt,"deberta-v2"),UFt.forEach(t),mhr=r(tke," \u2014 "),mz=n(tke,"A",{href:!0});var JFt=s(mz);fhr=r(JFt,"TFDebertaV2ForMaskedLM"),JFt.forEach(t),ghr=r(tke," (DeBERTa-v2 model)"),tke.forEach(t),hhr=i(re),k4=n(re,"LI",{});var ake=s(k4);r2e=n(ake,"STRONG",{});var YFt=s(r2e);uhr=r(YFt,"distilbert"),YFt.forEach(t),phr=r(ake," \u2014 "),fz=n(ake,"A",{href:!0});var KFt=s(fz);_hr=r(KFt,"TFDistilBertForMaskedLM"),KFt.forEach(t),bhr=r(ake," (DistilBERT model)"),ake.forEach(t),vhr=i(re),S4=n(re,"LI",{});var nke=s(S4);t2e=n(nke,"STRONG",{});var ZFt=s(t2e);Fhr=r(ZFt,"electra"),ZFt.forEach(t),Thr=r(nke," \u2014 "),gz=n(nke,"A",{href:!0});var e1t=s(gz);Mhr=r(e1t,"TFElectraForMaskedLM"),e1t.forEach(t),Ehr=r(nke," (ELECTRA model)"),nke.forEach(t),Chr=i(re),R4=n(re,"LI",{});var ske=s(R4);a2e=n(ske,"STRONG",{});var o1t=s(a2e);whr=r(o1t,"flaubert"),o1t.forEach(t),Ahr=r(ske," \u2014 "),hz=n(ske,"A",{href:!0});var r1t=s(hz);yhr=r(r1t,"TFFlaubertWithLMHeadModel"),r1t.forEach(t),Lhr=r(ske," (FlauBERT model)"),ske.forEach(t),xhr=i(re),B4=n(re,"LI",{});var lke=s(B4);n2e=n(lke,"STRONG",{});var t1t=s(n2e);khr=r(t1t,"funnel"),t1t.forEach(t),Shr=r(lke," \u2014 "),uz=n(lke,"A",{href:!0});var a1t=s(uz);Rhr=r(a1t,"TFFunnelForMaskedLM"),a1t.forEach(t),Bhr=r(lke," (Funnel Transformer model)"),lke.forEach(t),Phr=i(re),P4=n(re,"LI",{});var ike=s(P4);s2e=n(ike,"STRONG",{});var n1t=s(s2e);$hr=r(n1t,"layoutlm"),n1t.forEach(t),Ihr=r(ike," \u2014 "),pz=n(ike,"A",{href:!0});var s1t=s(pz);qhr=r(s1t,"TFLayoutLMForMaskedLM"),s1t.forEach(t),Nhr=r(ike," (LayoutLM model)"),ike.forEach(t),jhr=i(re),$4=n(re,"LI",{});var dke=s($4);l2e=n(dke,"STRONG",{});var l1t=s(l2e);Dhr=r(l1t,"longformer"),l1t.forEach(t),Ghr=r(dke," \u2014 "),_z=n(dke,"A",{href:!0});var i1t=s(_z);Ohr=r(i1t,"TFLongformerForMaskedLM"),i1t.forEach(t),Vhr=r(dke," (Longformer model)"),dke.forEach(t),Xhr=i(re),I4=n(re,"LI",{});var cke=s(I4);i2e=n(cke,"STRONG",{});var d1t=s(i2e);zhr=r(d1t,"mobilebert"),d1t.forEach(t),Qhr=r(cke," \u2014 "),bz=n(cke,"A",{href:!0});var c1t=s(bz);Whr=r(c1t,"TFMobileBertForMaskedLM"),c1t.forEach(t),Hhr=r(cke," (MobileBERT model)"),cke.forEach(t),Uhr=i(re),q4=n(re,"LI",{});var mke=s(q4);d2e=n(mke,"STRONG",{});var m1t=s(d2e);Jhr=r(m1t,"mpnet"),m1t.forEach(t),Yhr=r(mke," \u2014 "),vz=n(mke,"A",{href:!0});var f1t=s(vz);Khr=r(f1t,"TFMPNetForMaskedLM"),f1t.forEach(t),Zhr=r(mke," (MPNet model)"),mke.forEach(t),eur=i(re),N4=n(re,"LI",{});var fke=s(N4);c2e=n(fke,"STRONG",{});var g1t=s(c2e);our=r(g1t,"rembert"),g1t.forEach(t),rur=r(fke," \u2014 "),Fz=n(fke,"A",{href:!0});var h1t=s(Fz);tur=r(h1t,"TFRemBertForMaskedLM"),h1t.forEach(t),aur=r(fke," (RemBERT model)"),fke.forEach(t),nur=i(re),j4=n(re,"LI",{});var gke=s(j4);m2e=n(gke,"STRONG",{});var u1t=s(m2e);sur=r(u1t,"roberta"),u1t.forEach(t),lur=r(gke," \u2014 "),Tz=n(gke,"A",{href:!0});var p1t=s(Tz);iur=r(p1t,"TFRobertaForMaskedLM"),p1t.forEach(t),dur=r(gke," (RoBERTa model)"),gke.forEach(t),cur=i(re),D4=n(re,"LI",{});var hke=s(D4);f2e=n(hke,"STRONG",{});var _1t=s(f2e);mur=r(_1t,"roformer"),_1t.forEach(t),fur=r(hke," \u2014 "),Mz=n(hke,"A",{href:!0});var b1t=s(Mz);gur=r(b1t,"TFRoFormerForMaskedLM"),b1t.forEach(t),hur=r(hke," (RoFormer model)"),hke.forEach(t),uur=i(re),G4=n(re,"LI",{});var uke=s(G4);g2e=n(uke,"STRONG",{});var v1t=s(g2e);pur=r(v1t,"tapas"),v1t.forEach(t),_ur=r(uke," \u2014 "),Ez=n(uke,"A",{href:!0});var F1t=s(Ez);bur=r(F1t,"TFTapasForMaskedLM"),F1t.forEach(t),vur=r(uke," (TAPAS model)"),uke.forEach(t),Fur=i(re),O4=n(re,"LI",{});var pke=s(O4);h2e=n(pke,"STRONG",{});var T1t=s(h2e);Tur=r(T1t,"xlm"),T1t.forEach(t),Mur=r(pke," \u2014 "),Cz=n(pke,"A",{href:!0});var M1t=s(Cz);Eur=r(M1t,"TFXLMWithLMHeadModel"),M1t.forEach(t),Cur=r(pke," (XLM model)"),pke.forEach(t),wur=i(re),V4=n(re,"LI",{});var _ke=s(V4);u2e=n(_ke,"STRONG",{});var E1t=s(u2e);Aur=r(E1t,"xlm-roberta"),E1t.forEach(t),yur=r(_ke," \u2014 "),wz=n(_ke,"A",{href:!0});var C1t=s(wz);Lur=r(C1t,"TFXLMRobertaForMaskedLM"),C1t.forEach(t),xur=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),re.forEach(t),kur=i(va),p2e=n(va,"P",{});var w1t=s(p2e);Sur=r(w1t,"Examples:"),w1t.forEach(t),Rur=i(va),f(s8.$$.fragment,va),va.forEach(t),ri.forEach(t),h$e=i(c),Ic=n(c,"H2",{class:!0});var wqe=s(Ic);X4=n(wqe,"A",{id:!0,class:!0,href:!0});var A1t=s(X4);_2e=n(A1t,"SPAN",{});var y1t=s(_2e);f(l8.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),Bur=i(wqe),b2e=n(wqe,"SPAN",{});var L1t=s(b2e);Pur=r(L1t,"TFAutoModelForSeq2SeqLM"),L1t.forEach(t),wqe.forEach(t),u$e=i(c),Cr=n(c,"DIV",{class:!0});var ai=s(Cr);f(i8.$$.fragment,ai),$ur=i(ai),qc=n(ai,"P",{});var vY=s(qc);Iur=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Az=n(vY,"A",{href:!0});var x1t=s(Az);qur=r(x1t,"from_pretrained()"),x1t.forEach(t),Nur=r(vY," class method or the "),yz=n(vY,"A",{href:!0});var k1t=s(yz);jur=r(k1t,"from_config()"),k1t.forEach(t),Dur=r(vY,` class
method.`),vY.forEach(t),Gur=i(ai),d8=n(ai,"P",{});var Aqe=s(d8);Our=r(Aqe,"This class cannot be instantiated directly using "),v2e=n(Aqe,"CODE",{});var S1t=s(v2e);Vur=r(S1t,"__init__()"),S1t.forEach(t),Xur=r(Aqe," (throws an error)."),Aqe.forEach(t),zur=i(ai),bt=n(ai,"DIV",{class:!0});var ni=s(bt);f(c8.$$.fragment,ni),Qur=i(ni),F2e=n(ni,"P",{});var R1t=s(F2e);Wur=r(R1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R1t.forEach(t),Hur=i(ni),Nc=n(ni,"P",{});var FY=s(Nc);Uur=r(FY,`Note:
Loading a model from its configuration file does `),T2e=n(FY,"STRONG",{});var B1t=s(T2e);Jur=r(B1t,"not"),B1t.forEach(t),Yur=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(FY,"A",{href:!0});var P1t=s(Lz);Kur=r(P1t,"from_pretrained()"),P1t.forEach(t),Zur=r(FY," to load the model weights."),FY.forEach(t),epr=i(ni),M2e=n(ni,"P",{});var $1t=s(M2e);opr=r($1t,"Examples:"),$1t.forEach(t),rpr=i(ni),f(m8.$$.fragment,ni),ni.forEach(t),tpr=i(ai),Fo=n(ai,"DIV",{class:!0});var Fa=s(Fo);f(f8.$$.fragment,Fa),apr=i(Fa),E2e=n(Fa,"P",{});var I1t=s(E2e);npr=r(I1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I1t.forEach(t),spr=i(Fa),Mn=n(Fa,"P",{});var w6=s(Mn);lpr=r(w6,"The model class to instantiate is selected based on the "),C2e=n(w6,"CODE",{});var q1t=s(C2e);ipr=r(q1t,"model_type"),q1t.forEach(t),dpr=r(w6,` property of the config object (either
passed as an argument or loaded from `),w2e=n(w6,"CODE",{});var N1t=s(w2e);cpr=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),mpr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(w6,"CODE",{});var j1t=s(A2e);fpr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),gpr=r(w6,":"),w6.forEach(t),hpr=i(Fa),Fe=n(Fa,"UL",{});var ye=s(Fe);z4=n(ye,"LI",{});var bke=s(z4);y2e=n(bke,"STRONG",{});var D1t=s(y2e);upr=r(D1t,"bart"),D1t.forEach(t),ppr=r(bke," \u2014 "),xz=n(bke,"A",{href:!0});var G1t=s(xz);_pr=r(G1t,"TFBartForConditionalGeneration"),G1t.forEach(t),bpr=r(bke," (BART model)"),bke.forEach(t),vpr=i(ye),Q4=n(ye,"LI",{});var vke=s(Q4);L2e=n(vke,"STRONG",{});var O1t=s(L2e);Fpr=r(O1t,"blenderbot"),O1t.forEach(t),Tpr=r(vke," \u2014 "),kz=n(vke,"A",{href:!0});var V1t=s(kz);Mpr=r(V1t,"TFBlenderbotForConditionalGeneration"),V1t.forEach(t),Epr=r(vke," (Blenderbot model)"),vke.forEach(t),Cpr=i(ye),W4=n(ye,"LI",{});var Fke=s(W4);x2e=n(Fke,"STRONG",{});var X1t=s(x2e);wpr=r(X1t,"blenderbot-small"),X1t.forEach(t),Apr=r(Fke," \u2014 "),Sz=n(Fke,"A",{href:!0});var z1t=s(Sz);ypr=r(z1t,"TFBlenderbotSmallForConditionalGeneration"),z1t.forEach(t),Lpr=r(Fke," (BlenderbotSmall model)"),Fke.forEach(t),xpr=i(ye),H4=n(ye,"LI",{});var Tke=s(H4);k2e=n(Tke,"STRONG",{});var Q1t=s(k2e);kpr=r(Q1t,"encoder-decoder"),Q1t.forEach(t),Spr=r(Tke," \u2014 "),Rz=n(Tke,"A",{href:!0});var W1t=s(Rz);Rpr=r(W1t,"TFEncoderDecoderModel"),W1t.forEach(t),Bpr=r(Tke," (Encoder decoder model)"),Tke.forEach(t),Ppr=i(ye),U4=n(ye,"LI",{});var Mke=s(U4);S2e=n(Mke,"STRONG",{});var H1t=s(S2e);$pr=r(H1t,"led"),H1t.forEach(t),Ipr=r(Mke," \u2014 "),Bz=n(Mke,"A",{href:!0});var U1t=s(Bz);qpr=r(U1t,"TFLEDForConditionalGeneration"),U1t.forEach(t),Npr=r(Mke," (LED model)"),Mke.forEach(t),jpr=i(ye),J4=n(ye,"LI",{});var Eke=s(J4);R2e=n(Eke,"STRONG",{});var J1t=s(R2e);Dpr=r(J1t,"marian"),J1t.forEach(t),Gpr=r(Eke," \u2014 "),Pz=n(Eke,"A",{href:!0});var Y1t=s(Pz);Opr=r(Y1t,"TFMarianMTModel"),Y1t.forEach(t),Vpr=r(Eke," (Marian model)"),Eke.forEach(t),Xpr=i(ye),Y4=n(ye,"LI",{});var Cke=s(Y4);B2e=n(Cke,"STRONG",{});var K1t=s(B2e);zpr=r(K1t,"mbart"),K1t.forEach(t),Qpr=r(Cke," \u2014 "),$z=n(Cke,"A",{href:!0});var Z1t=s($z);Wpr=r(Z1t,"TFMBartForConditionalGeneration"),Z1t.forEach(t),Hpr=r(Cke," (mBART model)"),Cke.forEach(t),Upr=i(ye),K4=n(ye,"LI",{});var wke=s(K4);P2e=n(wke,"STRONG",{});var eTt=s(P2e);Jpr=r(eTt,"mt5"),eTt.forEach(t),Ypr=r(wke," \u2014 "),Iz=n(wke,"A",{href:!0});var oTt=s(Iz);Kpr=r(oTt,"TFMT5ForConditionalGeneration"),oTt.forEach(t),Zpr=r(wke," (mT5 model)"),wke.forEach(t),e_r=i(ye),Z4=n(ye,"LI",{});var Ake=s(Z4);$2e=n(Ake,"STRONG",{});var rTt=s($2e);o_r=r(rTt,"pegasus"),rTt.forEach(t),r_r=r(Ake," \u2014 "),qz=n(Ake,"A",{href:!0});var tTt=s(qz);t_r=r(tTt,"TFPegasusForConditionalGeneration"),tTt.forEach(t),a_r=r(Ake," (Pegasus model)"),Ake.forEach(t),n_r=i(ye),eE=n(ye,"LI",{});var yke=s(eE);I2e=n(yke,"STRONG",{});var aTt=s(I2e);s_r=r(aTt,"t5"),aTt.forEach(t),l_r=r(yke," \u2014 "),Nz=n(yke,"A",{href:!0});var nTt=s(Nz);i_r=r(nTt,"TFT5ForConditionalGeneration"),nTt.forEach(t),d_r=r(yke," (T5 model)"),yke.forEach(t),ye.forEach(t),c_r=i(Fa),q2e=n(Fa,"P",{});var sTt=s(q2e);m_r=r(sTt,"Examples:"),sTt.forEach(t),f_r=i(Fa),f(g8.$$.fragment,Fa),Fa.forEach(t),ai.forEach(t),p$e=i(c),jc=n(c,"H2",{class:!0});var yqe=s(jc);oE=n(yqe,"A",{id:!0,class:!0,href:!0});var lTt=s(oE);N2e=n(lTt,"SPAN",{});var iTt=s(N2e);f(h8.$$.fragment,iTt),iTt.forEach(t),lTt.forEach(t),g_r=i(yqe),j2e=n(yqe,"SPAN",{});var dTt=s(j2e);h_r=r(dTt,"TFAutoModelForSequenceClassification"),dTt.forEach(t),yqe.forEach(t),_$e=i(c),wr=n(c,"DIV",{class:!0});var si=s(wr);f(u8.$$.fragment,si),u_r=i(si),Dc=n(si,"P",{});var TY=s(Dc);p_r=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jz=n(TY,"A",{href:!0});var cTt=s(jz);__r=r(cTt,"from_pretrained()"),cTt.forEach(t),b_r=r(TY," class method or the "),Dz=n(TY,"A",{href:!0});var mTt=s(Dz);v_r=r(mTt,"from_config()"),mTt.forEach(t),F_r=r(TY,` class
method.`),TY.forEach(t),T_r=i(si),p8=n(si,"P",{});var Lqe=s(p8);M_r=r(Lqe,"This class cannot be instantiated directly using "),D2e=n(Lqe,"CODE",{});var fTt=s(D2e);E_r=r(fTt,"__init__()"),fTt.forEach(t),C_r=r(Lqe," (throws an error)."),Lqe.forEach(t),w_r=i(si),vt=n(si,"DIV",{class:!0});var li=s(vt);f(_8.$$.fragment,li),A_r=i(li),G2e=n(li,"P",{});var gTt=s(G2e);y_r=r(gTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gTt.forEach(t),L_r=i(li),Gc=n(li,"P",{});var MY=s(Gc);x_r=r(MY,`Note:
Loading a model from its configuration file does `),O2e=n(MY,"STRONG",{});var hTt=s(O2e);k_r=r(hTt,"not"),hTt.forEach(t),S_r=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(MY,"A",{href:!0});var uTt=s(Gz);R_r=r(uTt,"from_pretrained()"),uTt.forEach(t),B_r=r(MY," to load the model weights."),MY.forEach(t),P_r=i(li),V2e=n(li,"P",{});var pTt=s(V2e);$_r=r(pTt,"Examples:"),pTt.forEach(t),I_r=i(li),f(b8.$$.fragment,li),li.forEach(t),q_r=i(si),To=n(si,"DIV",{class:!0});var Ta=s(To);f(v8.$$.fragment,Ta),N_r=i(Ta),X2e=n(Ta,"P",{});var _Tt=s(X2e);j_r=r(_Tt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Tt.forEach(t),D_r=i(Ta),En=n(Ta,"P",{});var A6=s(En);G_r=r(A6,"The model class to instantiate is selected based on the "),z2e=n(A6,"CODE",{});var bTt=s(z2e);O_r=r(bTt,"model_type"),bTt.forEach(t),V_r=r(A6,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(A6,"CODE",{});var vTt=s(Q2e);X_r=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),z_r=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(A6,"CODE",{});var FTt=s(W2e);Q_r=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),W_r=r(A6,":"),A6.forEach(t),H_r=i(Ta),V=n(Ta,"UL",{});var Q=s(V);rE=n(Q,"LI",{});var Lke=s(rE);H2e=n(Lke,"STRONG",{});var TTt=s(H2e);U_r=r(TTt,"albert"),TTt.forEach(t),J_r=r(Lke," \u2014 "),Oz=n(Lke,"A",{href:!0});var MTt=s(Oz);Y_r=r(MTt,"TFAlbertForSequenceClassification"),MTt.forEach(t),K_r=r(Lke," (ALBERT model)"),Lke.forEach(t),Z_r=i(Q),tE=n(Q,"LI",{});var xke=s(tE);U2e=n(xke,"STRONG",{});var ETt=s(U2e);ebr=r(ETt,"bert"),ETt.forEach(t),obr=r(xke," \u2014 "),Vz=n(xke,"A",{href:!0});var CTt=s(Vz);rbr=r(CTt,"TFBertForSequenceClassification"),CTt.forEach(t),tbr=r(xke," (BERT model)"),xke.forEach(t),abr=i(Q),aE=n(Q,"LI",{});var kke=s(aE);J2e=n(kke,"STRONG",{});var wTt=s(J2e);nbr=r(wTt,"camembert"),wTt.forEach(t),sbr=r(kke," \u2014 "),Xz=n(kke,"A",{href:!0});var ATt=s(Xz);lbr=r(ATt,"TFCamembertForSequenceClassification"),ATt.forEach(t),ibr=r(kke," (CamemBERT model)"),kke.forEach(t),dbr=i(Q),nE=n(Q,"LI",{});var Ske=s(nE);Y2e=n(Ske,"STRONG",{});var yTt=s(Y2e);cbr=r(yTt,"convbert"),yTt.forEach(t),mbr=r(Ske," \u2014 "),zz=n(Ske,"A",{href:!0});var LTt=s(zz);fbr=r(LTt,"TFConvBertForSequenceClassification"),LTt.forEach(t),gbr=r(Ske," (ConvBERT model)"),Ske.forEach(t),hbr=i(Q),sE=n(Q,"LI",{});var Rke=s(sE);K2e=n(Rke,"STRONG",{});var xTt=s(K2e);ubr=r(xTt,"ctrl"),xTt.forEach(t),pbr=r(Rke," \u2014 "),Qz=n(Rke,"A",{href:!0});var kTt=s(Qz);_br=r(kTt,"TFCTRLForSequenceClassification"),kTt.forEach(t),bbr=r(Rke," (CTRL model)"),Rke.forEach(t),vbr=i(Q),lE=n(Q,"LI",{});var Bke=s(lE);Z2e=n(Bke,"STRONG",{});var STt=s(Z2e);Fbr=r(STt,"deberta"),STt.forEach(t),Tbr=r(Bke," \u2014 "),Wz=n(Bke,"A",{href:!0});var RTt=s(Wz);Mbr=r(RTt,"TFDebertaForSequenceClassification"),RTt.forEach(t),Ebr=r(Bke," (DeBERTa model)"),Bke.forEach(t),Cbr=i(Q),iE=n(Q,"LI",{});var Pke=s(iE);eve=n(Pke,"STRONG",{});var BTt=s(eve);wbr=r(BTt,"deberta-v2"),BTt.forEach(t),Abr=r(Pke," \u2014 "),Hz=n(Pke,"A",{href:!0});var PTt=s(Hz);ybr=r(PTt,"TFDebertaV2ForSequenceClassification"),PTt.forEach(t),Lbr=r(Pke," (DeBERTa-v2 model)"),Pke.forEach(t),xbr=i(Q),dE=n(Q,"LI",{});var $ke=s(dE);ove=n($ke,"STRONG",{});var $Tt=s(ove);kbr=r($Tt,"distilbert"),$Tt.forEach(t),Sbr=r($ke," \u2014 "),Uz=n($ke,"A",{href:!0});var ITt=s(Uz);Rbr=r(ITt,"TFDistilBertForSequenceClassification"),ITt.forEach(t),Bbr=r($ke," (DistilBERT model)"),$ke.forEach(t),Pbr=i(Q),cE=n(Q,"LI",{});var Ike=s(cE);rve=n(Ike,"STRONG",{});var qTt=s(rve);$br=r(qTt,"electra"),qTt.forEach(t),Ibr=r(Ike," \u2014 "),Jz=n(Ike,"A",{href:!0});var NTt=s(Jz);qbr=r(NTt,"TFElectraForSequenceClassification"),NTt.forEach(t),Nbr=r(Ike," (ELECTRA model)"),Ike.forEach(t),jbr=i(Q),mE=n(Q,"LI",{});var qke=s(mE);tve=n(qke,"STRONG",{});var jTt=s(tve);Dbr=r(jTt,"flaubert"),jTt.forEach(t),Gbr=r(qke," \u2014 "),Yz=n(qke,"A",{href:!0});var DTt=s(Yz);Obr=r(DTt,"TFFlaubertForSequenceClassification"),DTt.forEach(t),Vbr=r(qke," (FlauBERT model)"),qke.forEach(t),Xbr=i(Q),fE=n(Q,"LI",{});var Nke=s(fE);ave=n(Nke,"STRONG",{});var GTt=s(ave);zbr=r(GTt,"funnel"),GTt.forEach(t),Qbr=r(Nke," \u2014 "),Kz=n(Nke,"A",{href:!0});var OTt=s(Kz);Wbr=r(OTt,"TFFunnelForSequenceClassification"),OTt.forEach(t),Hbr=r(Nke," (Funnel Transformer model)"),Nke.forEach(t),Ubr=i(Q),gE=n(Q,"LI",{});var jke=s(gE);nve=n(jke,"STRONG",{});var VTt=s(nve);Jbr=r(VTt,"gpt2"),VTt.forEach(t),Ybr=r(jke," \u2014 "),Zz=n(jke,"A",{href:!0});var XTt=s(Zz);Kbr=r(XTt,"TFGPT2ForSequenceClassification"),XTt.forEach(t),Zbr=r(jke," (OpenAI GPT-2 model)"),jke.forEach(t),e2r=i(Q),hE=n(Q,"LI",{});var Dke=s(hE);sve=n(Dke,"STRONG",{});var zTt=s(sve);o2r=r(zTt,"gptj"),zTt.forEach(t),r2r=r(Dke," \u2014 "),eQ=n(Dke,"A",{href:!0});var QTt=s(eQ);t2r=r(QTt,"TFGPTJForSequenceClassification"),QTt.forEach(t),a2r=r(Dke," (GPT-J model)"),Dke.forEach(t),n2r=i(Q),uE=n(Q,"LI",{});var Gke=s(uE);lve=n(Gke,"STRONG",{});var WTt=s(lve);s2r=r(WTt,"layoutlm"),WTt.forEach(t),l2r=r(Gke," \u2014 "),oQ=n(Gke,"A",{href:!0});var HTt=s(oQ);i2r=r(HTt,"TFLayoutLMForSequenceClassification"),HTt.forEach(t),d2r=r(Gke," (LayoutLM model)"),Gke.forEach(t),c2r=i(Q),pE=n(Q,"LI",{});var Oke=s(pE);ive=n(Oke,"STRONG",{});var UTt=s(ive);m2r=r(UTt,"longformer"),UTt.forEach(t),f2r=r(Oke," \u2014 "),rQ=n(Oke,"A",{href:!0});var JTt=s(rQ);g2r=r(JTt,"TFLongformerForSequenceClassification"),JTt.forEach(t),h2r=r(Oke," (Longformer model)"),Oke.forEach(t),u2r=i(Q),_E=n(Q,"LI",{});var Vke=s(_E);dve=n(Vke,"STRONG",{});var YTt=s(dve);p2r=r(YTt,"mobilebert"),YTt.forEach(t),_2r=r(Vke," \u2014 "),tQ=n(Vke,"A",{href:!0});var KTt=s(tQ);b2r=r(KTt,"TFMobileBertForSequenceClassification"),KTt.forEach(t),v2r=r(Vke," (MobileBERT model)"),Vke.forEach(t),F2r=i(Q),bE=n(Q,"LI",{});var Xke=s(bE);cve=n(Xke,"STRONG",{});var ZTt=s(cve);T2r=r(ZTt,"mpnet"),ZTt.forEach(t),M2r=r(Xke," \u2014 "),aQ=n(Xke,"A",{href:!0});var eMt=s(aQ);E2r=r(eMt,"TFMPNetForSequenceClassification"),eMt.forEach(t),C2r=r(Xke," (MPNet model)"),Xke.forEach(t),w2r=i(Q),vE=n(Q,"LI",{});var zke=s(vE);mve=n(zke,"STRONG",{});var oMt=s(mve);A2r=r(oMt,"openai-gpt"),oMt.forEach(t),y2r=r(zke," \u2014 "),nQ=n(zke,"A",{href:!0});var rMt=s(nQ);L2r=r(rMt,"TFOpenAIGPTForSequenceClassification"),rMt.forEach(t),x2r=r(zke," (OpenAI GPT model)"),zke.forEach(t),k2r=i(Q),FE=n(Q,"LI",{});var Qke=s(FE);fve=n(Qke,"STRONG",{});var tMt=s(fve);S2r=r(tMt,"rembert"),tMt.forEach(t),R2r=r(Qke," \u2014 "),sQ=n(Qke,"A",{href:!0});var aMt=s(sQ);B2r=r(aMt,"TFRemBertForSequenceClassification"),aMt.forEach(t),P2r=r(Qke," (RemBERT model)"),Qke.forEach(t),$2r=i(Q),TE=n(Q,"LI",{});var Wke=s(TE);gve=n(Wke,"STRONG",{});var nMt=s(gve);I2r=r(nMt,"roberta"),nMt.forEach(t),q2r=r(Wke," \u2014 "),lQ=n(Wke,"A",{href:!0});var sMt=s(lQ);N2r=r(sMt,"TFRobertaForSequenceClassification"),sMt.forEach(t),j2r=r(Wke," (RoBERTa model)"),Wke.forEach(t),D2r=i(Q),ME=n(Q,"LI",{});var Hke=s(ME);hve=n(Hke,"STRONG",{});var lMt=s(hve);G2r=r(lMt,"roformer"),lMt.forEach(t),O2r=r(Hke," \u2014 "),iQ=n(Hke,"A",{href:!0});var iMt=s(iQ);V2r=r(iMt,"TFRoFormerForSequenceClassification"),iMt.forEach(t),X2r=r(Hke," (RoFormer model)"),Hke.forEach(t),z2r=i(Q),EE=n(Q,"LI",{});var Uke=s(EE);uve=n(Uke,"STRONG",{});var dMt=s(uve);Q2r=r(dMt,"tapas"),dMt.forEach(t),W2r=r(Uke," \u2014 "),dQ=n(Uke,"A",{href:!0});var cMt=s(dQ);H2r=r(cMt,"TFTapasForSequenceClassification"),cMt.forEach(t),U2r=r(Uke," (TAPAS model)"),Uke.forEach(t),J2r=i(Q),CE=n(Q,"LI",{});var Jke=s(CE);pve=n(Jke,"STRONG",{});var mMt=s(pve);Y2r=r(mMt,"transfo-xl"),mMt.forEach(t),K2r=r(Jke," \u2014 "),cQ=n(Jke,"A",{href:!0});var fMt=s(cQ);Z2r=r(fMt,"TFTransfoXLForSequenceClassification"),fMt.forEach(t),evr=r(Jke," (Transformer-XL model)"),Jke.forEach(t),ovr=i(Q),wE=n(Q,"LI",{});var Yke=s(wE);_ve=n(Yke,"STRONG",{});var gMt=s(_ve);rvr=r(gMt,"xlm"),gMt.forEach(t),tvr=r(Yke," \u2014 "),mQ=n(Yke,"A",{href:!0});var hMt=s(mQ);avr=r(hMt,"TFXLMForSequenceClassification"),hMt.forEach(t),nvr=r(Yke," (XLM model)"),Yke.forEach(t),svr=i(Q),AE=n(Q,"LI",{});var Kke=s(AE);bve=n(Kke,"STRONG",{});var uMt=s(bve);lvr=r(uMt,"xlm-roberta"),uMt.forEach(t),ivr=r(Kke," \u2014 "),fQ=n(Kke,"A",{href:!0});var pMt=s(fQ);dvr=r(pMt,"TFXLMRobertaForSequenceClassification"),pMt.forEach(t),cvr=r(Kke," (XLM-RoBERTa model)"),Kke.forEach(t),mvr=i(Q),yE=n(Q,"LI",{});var Zke=s(yE);vve=n(Zke,"STRONG",{});var _Mt=s(vve);fvr=r(_Mt,"xlnet"),_Mt.forEach(t),gvr=r(Zke," \u2014 "),gQ=n(Zke,"A",{href:!0});var bMt=s(gQ);hvr=r(bMt,"TFXLNetForSequenceClassification"),bMt.forEach(t),uvr=r(Zke," (XLNet model)"),Zke.forEach(t),Q.forEach(t),pvr=i(Ta),Fve=n(Ta,"P",{});var vMt=s(Fve);_vr=r(vMt,"Examples:"),vMt.forEach(t),bvr=i(Ta),f(F8.$$.fragment,Ta),Ta.forEach(t),si.forEach(t),b$e=i(c),Oc=n(c,"H2",{class:!0});var xqe=s(Oc);LE=n(xqe,"A",{id:!0,class:!0,href:!0});var FMt=s(LE);Tve=n(FMt,"SPAN",{});var TMt=s(Tve);f(T8.$$.fragment,TMt),TMt.forEach(t),FMt.forEach(t),vvr=i(xqe),Mve=n(xqe,"SPAN",{});var MMt=s(Mve);Fvr=r(MMt,"TFAutoModelForMultipleChoice"),MMt.forEach(t),xqe.forEach(t),v$e=i(c),Ar=n(c,"DIV",{class:!0});var ii=s(Ar);f(M8.$$.fragment,ii),Tvr=i(ii),Vc=n(ii,"P",{});var EY=s(Vc);Mvr=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hQ=n(EY,"A",{href:!0});var EMt=s(hQ);Evr=r(EMt,"from_pretrained()"),EMt.forEach(t),Cvr=r(EY," class method or the "),uQ=n(EY,"A",{href:!0});var CMt=s(uQ);wvr=r(CMt,"from_config()"),CMt.forEach(t),Avr=r(EY,` class
method.`),EY.forEach(t),yvr=i(ii),E8=n(ii,"P",{});var kqe=s(E8);Lvr=r(kqe,"This class cannot be instantiated directly using "),Eve=n(kqe,"CODE",{});var wMt=s(Eve);xvr=r(wMt,"__init__()"),wMt.forEach(t),kvr=r(kqe," (throws an error)."),kqe.forEach(t),Svr=i(ii),Ft=n(ii,"DIV",{class:!0});var di=s(Ft);f(C8.$$.fragment,di),Rvr=i(di),Cve=n(di,"P",{});var AMt=s(Cve);Bvr=r(AMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AMt.forEach(t),Pvr=i(di),Xc=n(di,"P",{});var CY=s(Xc);$vr=r(CY,`Note:
Loading a model from its configuration file does `),wve=n(CY,"STRONG",{});var yMt=s(wve);Ivr=r(yMt,"not"),yMt.forEach(t),qvr=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(CY,"A",{href:!0});var LMt=s(pQ);Nvr=r(LMt,"from_pretrained()"),LMt.forEach(t),jvr=r(CY," to load the model weights."),CY.forEach(t),Dvr=i(di),Ave=n(di,"P",{});var xMt=s(Ave);Gvr=r(xMt,"Examples:"),xMt.forEach(t),Ovr=i(di),f(w8.$$.fragment,di),di.forEach(t),Vvr=i(ii),Mo=n(ii,"DIV",{class:!0});var Ma=s(Mo);f(A8.$$.fragment,Ma),Xvr=i(Ma),yve=n(Ma,"P",{});var kMt=s(yve);zvr=r(kMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kMt.forEach(t),Qvr=i(Ma),Cn=n(Ma,"P",{});var y6=s(Cn);Wvr=r(y6,"The model class to instantiate is selected based on the "),Lve=n(y6,"CODE",{});var SMt=s(Lve);Hvr=r(SMt,"model_type"),SMt.forEach(t),Uvr=r(y6,` property of the config object (either
passed as an argument or loaded from `),xve=n(y6,"CODE",{});var RMt=s(xve);Jvr=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),Yvr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(y6,"CODE",{});var BMt=s(kve);Kvr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),Zvr=r(y6,":"),y6.forEach(t),eFr=i(Ma),se=n(Ma,"UL",{});var ie=s(se);xE=n(ie,"LI",{});var eSe=s(xE);Sve=n(eSe,"STRONG",{});var PMt=s(Sve);oFr=r(PMt,"albert"),PMt.forEach(t),rFr=r(eSe," \u2014 "),_Q=n(eSe,"A",{href:!0});var $Mt=s(_Q);tFr=r($Mt,"TFAlbertForMultipleChoice"),$Mt.forEach(t),aFr=r(eSe," (ALBERT model)"),eSe.forEach(t),nFr=i(ie),kE=n(ie,"LI",{});var oSe=s(kE);Rve=n(oSe,"STRONG",{});var IMt=s(Rve);sFr=r(IMt,"bert"),IMt.forEach(t),lFr=r(oSe," \u2014 "),bQ=n(oSe,"A",{href:!0});var qMt=s(bQ);iFr=r(qMt,"TFBertForMultipleChoice"),qMt.forEach(t),dFr=r(oSe," (BERT model)"),oSe.forEach(t),cFr=i(ie),SE=n(ie,"LI",{});var rSe=s(SE);Bve=n(rSe,"STRONG",{});var NMt=s(Bve);mFr=r(NMt,"camembert"),NMt.forEach(t),fFr=r(rSe," \u2014 "),vQ=n(rSe,"A",{href:!0});var jMt=s(vQ);gFr=r(jMt,"TFCamembertForMultipleChoice"),jMt.forEach(t),hFr=r(rSe," (CamemBERT model)"),rSe.forEach(t),uFr=i(ie),RE=n(ie,"LI",{});var tSe=s(RE);Pve=n(tSe,"STRONG",{});var DMt=s(Pve);pFr=r(DMt,"convbert"),DMt.forEach(t),_Fr=r(tSe," \u2014 "),FQ=n(tSe,"A",{href:!0});var GMt=s(FQ);bFr=r(GMt,"TFConvBertForMultipleChoice"),GMt.forEach(t),vFr=r(tSe," (ConvBERT model)"),tSe.forEach(t),FFr=i(ie),BE=n(ie,"LI",{});var aSe=s(BE);$ve=n(aSe,"STRONG",{});var OMt=s($ve);TFr=r(OMt,"distilbert"),OMt.forEach(t),MFr=r(aSe," \u2014 "),TQ=n(aSe,"A",{href:!0});var VMt=s(TQ);EFr=r(VMt,"TFDistilBertForMultipleChoice"),VMt.forEach(t),CFr=r(aSe," (DistilBERT model)"),aSe.forEach(t),wFr=i(ie),PE=n(ie,"LI",{});var nSe=s(PE);Ive=n(nSe,"STRONG",{});var XMt=s(Ive);AFr=r(XMt,"electra"),XMt.forEach(t),yFr=r(nSe," \u2014 "),MQ=n(nSe,"A",{href:!0});var zMt=s(MQ);LFr=r(zMt,"TFElectraForMultipleChoice"),zMt.forEach(t),xFr=r(nSe," (ELECTRA model)"),nSe.forEach(t),kFr=i(ie),$E=n(ie,"LI",{});var sSe=s($E);qve=n(sSe,"STRONG",{});var QMt=s(qve);SFr=r(QMt,"flaubert"),QMt.forEach(t),RFr=r(sSe," \u2014 "),EQ=n(sSe,"A",{href:!0});var WMt=s(EQ);BFr=r(WMt,"TFFlaubertForMultipleChoice"),WMt.forEach(t),PFr=r(sSe," (FlauBERT model)"),sSe.forEach(t),$Fr=i(ie),IE=n(ie,"LI",{});var lSe=s(IE);Nve=n(lSe,"STRONG",{});var HMt=s(Nve);IFr=r(HMt,"funnel"),HMt.forEach(t),qFr=r(lSe," \u2014 "),CQ=n(lSe,"A",{href:!0});var UMt=s(CQ);NFr=r(UMt,"TFFunnelForMultipleChoice"),UMt.forEach(t),jFr=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),DFr=i(ie),qE=n(ie,"LI",{});var iSe=s(qE);jve=n(iSe,"STRONG",{});var JMt=s(jve);GFr=r(JMt,"longformer"),JMt.forEach(t),OFr=r(iSe," \u2014 "),wQ=n(iSe,"A",{href:!0});var YMt=s(wQ);VFr=r(YMt,"TFLongformerForMultipleChoice"),YMt.forEach(t),XFr=r(iSe," (Longformer model)"),iSe.forEach(t),zFr=i(ie),NE=n(ie,"LI",{});var dSe=s(NE);Dve=n(dSe,"STRONG",{});var KMt=s(Dve);QFr=r(KMt,"mobilebert"),KMt.forEach(t),WFr=r(dSe," \u2014 "),AQ=n(dSe,"A",{href:!0});var ZMt=s(AQ);HFr=r(ZMt,"TFMobileBertForMultipleChoice"),ZMt.forEach(t),UFr=r(dSe," (MobileBERT model)"),dSe.forEach(t),JFr=i(ie),jE=n(ie,"LI",{});var cSe=s(jE);Gve=n(cSe,"STRONG",{});var e4t=s(Gve);YFr=r(e4t,"mpnet"),e4t.forEach(t),KFr=r(cSe," \u2014 "),yQ=n(cSe,"A",{href:!0});var o4t=s(yQ);ZFr=r(o4t,"TFMPNetForMultipleChoice"),o4t.forEach(t),e1r=r(cSe," (MPNet model)"),cSe.forEach(t),o1r=i(ie),DE=n(ie,"LI",{});var mSe=s(DE);Ove=n(mSe,"STRONG",{});var r4t=s(Ove);r1r=r(r4t,"rembert"),r4t.forEach(t),t1r=r(mSe," \u2014 "),LQ=n(mSe,"A",{href:!0});var t4t=s(LQ);a1r=r(t4t,"TFRemBertForMultipleChoice"),t4t.forEach(t),n1r=r(mSe," (RemBERT model)"),mSe.forEach(t),s1r=i(ie),GE=n(ie,"LI",{});var fSe=s(GE);Vve=n(fSe,"STRONG",{});var a4t=s(Vve);l1r=r(a4t,"roberta"),a4t.forEach(t),i1r=r(fSe," \u2014 "),xQ=n(fSe,"A",{href:!0});var n4t=s(xQ);d1r=r(n4t,"TFRobertaForMultipleChoice"),n4t.forEach(t),c1r=r(fSe," (RoBERTa model)"),fSe.forEach(t),m1r=i(ie),OE=n(ie,"LI",{});var gSe=s(OE);Xve=n(gSe,"STRONG",{});var s4t=s(Xve);f1r=r(s4t,"roformer"),s4t.forEach(t),g1r=r(gSe," \u2014 "),kQ=n(gSe,"A",{href:!0});var l4t=s(kQ);h1r=r(l4t,"TFRoFormerForMultipleChoice"),l4t.forEach(t),u1r=r(gSe," (RoFormer model)"),gSe.forEach(t),p1r=i(ie),VE=n(ie,"LI",{});var hSe=s(VE);zve=n(hSe,"STRONG",{});var i4t=s(zve);_1r=r(i4t,"xlm"),i4t.forEach(t),b1r=r(hSe," \u2014 "),SQ=n(hSe,"A",{href:!0});var d4t=s(SQ);v1r=r(d4t,"TFXLMForMultipleChoice"),d4t.forEach(t),F1r=r(hSe," (XLM model)"),hSe.forEach(t),T1r=i(ie),XE=n(ie,"LI",{});var uSe=s(XE);Qve=n(uSe,"STRONG",{});var c4t=s(Qve);M1r=r(c4t,"xlm-roberta"),c4t.forEach(t),E1r=r(uSe," \u2014 "),RQ=n(uSe,"A",{href:!0});var m4t=s(RQ);C1r=r(m4t,"TFXLMRobertaForMultipleChoice"),m4t.forEach(t),w1r=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),A1r=i(ie),zE=n(ie,"LI",{});var pSe=s(zE);Wve=n(pSe,"STRONG",{});var f4t=s(Wve);y1r=r(f4t,"xlnet"),f4t.forEach(t),L1r=r(pSe," \u2014 "),BQ=n(pSe,"A",{href:!0});var g4t=s(BQ);x1r=r(g4t,"TFXLNetForMultipleChoice"),g4t.forEach(t),k1r=r(pSe," (XLNet model)"),pSe.forEach(t),ie.forEach(t),S1r=i(Ma),Hve=n(Ma,"P",{});var h4t=s(Hve);R1r=r(h4t,"Examples:"),h4t.forEach(t),B1r=i(Ma),f(y8.$$.fragment,Ma),Ma.forEach(t),ii.forEach(t),F$e=i(c),zc=n(c,"H2",{class:!0});var Sqe=s(zc);QE=n(Sqe,"A",{id:!0,class:!0,href:!0});var u4t=s(QE);Uve=n(u4t,"SPAN",{});var p4t=s(Uve);f(L8.$$.fragment,p4t),p4t.forEach(t),u4t.forEach(t),P1r=i(Sqe),Jve=n(Sqe,"SPAN",{});var _4t=s(Jve);$1r=r(_4t,"TFAutoModelForTableQuestionAnswering"),_4t.forEach(t),Sqe.forEach(t),T$e=i(c),yr=n(c,"DIV",{class:!0});var ci=s(yr);f(x8.$$.fragment,ci),I1r=i(ci),Qc=n(ci,"P",{});var wY=s(Qc);q1r=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PQ=n(wY,"A",{href:!0});var b4t=s(PQ);N1r=r(b4t,"from_pretrained()"),b4t.forEach(t),j1r=r(wY," class method or the "),$Q=n(wY,"A",{href:!0});var v4t=s($Q);D1r=r(v4t,"from_config()"),v4t.forEach(t),G1r=r(wY,` class
method.`),wY.forEach(t),O1r=i(ci),k8=n(ci,"P",{});var Rqe=s(k8);V1r=r(Rqe,"This class cannot be instantiated directly using "),Yve=n(Rqe,"CODE",{});var F4t=s(Yve);X1r=r(F4t,"__init__()"),F4t.forEach(t),z1r=r(Rqe," (throws an error)."),Rqe.forEach(t),Q1r=i(ci),Tt=n(ci,"DIV",{class:!0});var mi=s(Tt);f(S8.$$.fragment,mi),W1r=i(mi),Kve=n(mi,"P",{});var T4t=s(Kve);H1r=r(T4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),T4t.forEach(t),U1r=i(mi),Wc=n(mi,"P",{});var AY=s(Wc);J1r=r(AY,`Note:
Loading a model from its configuration file does `),Zve=n(AY,"STRONG",{});var M4t=s(Zve);Y1r=r(M4t,"not"),M4t.forEach(t),K1r=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(AY,"A",{href:!0});var E4t=s(IQ);Z1r=r(E4t,"from_pretrained()"),E4t.forEach(t),eTr=r(AY," to load the model weights."),AY.forEach(t),oTr=i(mi),eFe=n(mi,"P",{});var C4t=s(eFe);rTr=r(C4t,"Examples:"),C4t.forEach(t),tTr=i(mi),f(R8.$$.fragment,mi),mi.forEach(t),aTr=i(ci),Eo=n(ci,"DIV",{class:!0});var Ea=s(Eo);f(B8.$$.fragment,Ea),nTr=i(Ea),oFe=n(Ea,"P",{});var w4t=s(oFe);sTr=r(w4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),w4t.forEach(t),lTr=i(Ea),wn=n(Ea,"P",{});var L6=s(wn);iTr=r(L6,"The model class to instantiate is selected based on the "),rFe=n(L6,"CODE",{});var A4t=s(rFe);dTr=r(A4t,"model_type"),A4t.forEach(t),cTr=r(L6,` property of the config object (either
passed as an argument or loaded from `),tFe=n(L6,"CODE",{});var y4t=s(tFe);mTr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),fTr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(L6,"CODE",{});var L4t=s(aFe);gTr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),hTr=r(L6,":"),L6.forEach(t),uTr=i(Ea),nFe=n(Ea,"UL",{});var x4t=s(nFe);WE=n(x4t,"LI",{});var _Se=s(WE);sFe=n(_Se,"STRONG",{});var k4t=s(sFe);pTr=r(k4t,"tapas"),k4t.forEach(t),_Tr=r(_Se," \u2014 "),qQ=n(_Se,"A",{href:!0});var S4t=s(qQ);bTr=r(S4t,"TFTapasForQuestionAnswering"),S4t.forEach(t),vTr=r(_Se," (TAPAS model)"),_Se.forEach(t),x4t.forEach(t),FTr=i(Ea),lFe=n(Ea,"P",{});var R4t=s(lFe);TTr=r(R4t,"Examples:"),R4t.forEach(t),MTr=i(Ea),f(P8.$$.fragment,Ea),Ea.forEach(t),ci.forEach(t),M$e=i(c),Hc=n(c,"H2",{class:!0});var Bqe=s(Hc);HE=n(Bqe,"A",{id:!0,class:!0,href:!0});var B4t=s(HE);iFe=n(B4t,"SPAN",{});var P4t=s(iFe);f($8.$$.fragment,P4t),P4t.forEach(t),B4t.forEach(t),ETr=i(Bqe),dFe=n(Bqe,"SPAN",{});var $4t=s(dFe);CTr=r($4t,"TFAutoModelForTokenClassification"),$4t.forEach(t),Bqe.forEach(t),E$e=i(c),Lr=n(c,"DIV",{class:!0});var fi=s(Lr);f(I8.$$.fragment,fi),wTr=i(fi),Uc=n(fi,"P",{});var yY=s(Uc);ATr=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NQ=n(yY,"A",{href:!0});var I4t=s(NQ);yTr=r(I4t,"from_pretrained()"),I4t.forEach(t),LTr=r(yY," class method or the "),jQ=n(yY,"A",{href:!0});var q4t=s(jQ);xTr=r(q4t,"from_config()"),q4t.forEach(t),kTr=r(yY,` class
method.`),yY.forEach(t),STr=i(fi),q8=n(fi,"P",{});var Pqe=s(q8);RTr=r(Pqe,"This class cannot be instantiated directly using "),cFe=n(Pqe,"CODE",{});var N4t=s(cFe);BTr=r(N4t,"__init__()"),N4t.forEach(t),PTr=r(Pqe," (throws an error)."),Pqe.forEach(t),$Tr=i(fi),Mt=n(fi,"DIV",{class:!0});var gi=s(Mt);f(N8.$$.fragment,gi),ITr=i(gi),mFe=n(gi,"P",{});var j4t=s(mFe);qTr=r(j4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),j4t.forEach(t),NTr=i(gi),Jc=n(gi,"P",{});var LY=s(Jc);jTr=r(LY,`Note:
Loading a model from its configuration file does `),fFe=n(LY,"STRONG",{});var D4t=s(fFe);DTr=r(D4t,"not"),D4t.forEach(t),GTr=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(LY,"A",{href:!0});var G4t=s(DQ);OTr=r(G4t,"from_pretrained()"),G4t.forEach(t),VTr=r(LY," to load the model weights."),LY.forEach(t),XTr=i(gi),gFe=n(gi,"P",{});var O4t=s(gFe);zTr=r(O4t,"Examples:"),O4t.forEach(t),QTr=i(gi),f(j8.$$.fragment,gi),gi.forEach(t),WTr=i(fi),Co=n(fi,"DIV",{class:!0});var Ca=s(Co);f(D8.$$.fragment,Ca),HTr=i(Ca),hFe=n(Ca,"P",{});var V4t=s(hFe);UTr=r(V4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),V4t.forEach(t),JTr=i(Ca),An=n(Ca,"P",{});var x6=s(An);YTr=r(x6,"The model class to instantiate is selected based on the "),uFe=n(x6,"CODE",{});var X4t=s(uFe);KTr=r(X4t,"model_type"),X4t.forEach(t),ZTr=r(x6,` property of the config object (either
passed as an argument or loaded from `),pFe=n(x6,"CODE",{});var z4t=s(pFe);eMr=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),oMr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(x6,"CODE",{});var Q4t=s(_Fe);rMr=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),tMr=r(x6,":"),x6.forEach(t),aMr=i(Ca),Z=n(Ca,"UL",{});var te=s(Z);UE=n(te,"LI",{});var bSe=s(UE);bFe=n(bSe,"STRONG",{});var W4t=s(bFe);nMr=r(W4t,"albert"),W4t.forEach(t),sMr=r(bSe," \u2014 "),GQ=n(bSe,"A",{href:!0});var H4t=s(GQ);lMr=r(H4t,"TFAlbertForTokenClassification"),H4t.forEach(t),iMr=r(bSe," (ALBERT model)"),bSe.forEach(t),dMr=i(te),JE=n(te,"LI",{});var vSe=s(JE);vFe=n(vSe,"STRONG",{});var U4t=s(vFe);cMr=r(U4t,"bert"),U4t.forEach(t),mMr=r(vSe," \u2014 "),OQ=n(vSe,"A",{href:!0});var J4t=s(OQ);fMr=r(J4t,"TFBertForTokenClassification"),J4t.forEach(t),gMr=r(vSe," (BERT model)"),vSe.forEach(t),hMr=i(te),YE=n(te,"LI",{});var FSe=s(YE);FFe=n(FSe,"STRONG",{});var Y4t=s(FFe);uMr=r(Y4t,"camembert"),Y4t.forEach(t),pMr=r(FSe," \u2014 "),VQ=n(FSe,"A",{href:!0});var K4t=s(VQ);_Mr=r(K4t,"TFCamembertForTokenClassification"),K4t.forEach(t),bMr=r(FSe," (CamemBERT model)"),FSe.forEach(t),vMr=i(te),KE=n(te,"LI",{});var TSe=s(KE);TFe=n(TSe,"STRONG",{});var Z4t=s(TFe);FMr=r(Z4t,"convbert"),Z4t.forEach(t),TMr=r(TSe," \u2014 "),XQ=n(TSe,"A",{href:!0});var eEt=s(XQ);MMr=r(eEt,"TFConvBertForTokenClassification"),eEt.forEach(t),EMr=r(TSe," (ConvBERT model)"),TSe.forEach(t),CMr=i(te),ZE=n(te,"LI",{});var MSe=s(ZE);MFe=n(MSe,"STRONG",{});var oEt=s(MFe);wMr=r(oEt,"deberta"),oEt.forEach(t),AMr=r(MSe," \u2014 "),zQ=n(MSe,"A",{href:!0});var rEt=s(zQ);yMr=r(rEt,"TFDebertaForTokenClassification"),rEt.forEach(t),LMr=r(MSe," (DeBERTa model)"),MSe.forEach(t),xMr=i(te),e5=n(te,"LI",{});var ESe=s(e5);EFe=n(ESe,"STRONG",{});var tEt=s(EFe);kMr=r(tEt,"deberta-v2"),tEt.forEach(t),SMr=r(ESe," \u2014 "),QQ=n(ESe,"A",{href:!0});var aEt=s(QQ);RMr=r(aEt,"TFDebertaV2ForTokenClassification"),aEt.forEach(t),BMr=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),PMr=i(te),o5=n(te,"LI",{});var CSe=s(o5);CFe=n(CSe,"STRONG",{});var nEt=s(CFe);$Mr=r(nEt,"distilbert"),nEt.forEach(t),IMr=r(CSe," \u2014 "),WQ=n(CSe,"A",{href:!0});var sEt=s(WQ);qMr=r(sEt,"TFDistilBertForTokenClassification"),sEt.forEach(t),NMr=r(CSe," (DistilBERT model)"),CSe.forEach(t),jMr=i(te),r5=n(te,"LI",{});var wSe=s(r5);wFe=n(wSe,"STRONG",{});var lEt=s(wFe);DMr=r(lEt,"electra"),lEt.forEach(t),GMr=r(wSe," \u2014 "),HQ=n(wSe,"A",{href:!0});var iEt=s(HQ);OMr=r(iEt,"TFElectraForTokenClassification"),iEt.forEach(t),VMr=r(wSe," (ELECTRA model)"),wSe.forEach(t),XMr=i(te),t5=n(te,"LI",{});var ASe=s(t5);AFe=n(ASe,"STRONG",{});var dEt=s(AFe);zMr=r(dEt,"flaubert"),dEt.forEach(t),QMr=r(ASe," \u2014 "),UQ=n(ASe,"A",{href:!0});var cEt=s(UQ);WMr=r(cEt,"TFFlaubertForTokenClassification"),cEt.forEach(t),HMr=r(ASe," (FlauBERT model)"),ASe.forEach(t),UMr=i(te),a5=n(te,"LI",{});var ySe=s(a5);yFe=n(ySe,"STRONG",{});var mEt=s(yFe);JMr=r(mEt,"funnel"),mEt.forEach(t),YMr=r(ySe," \u2014 "),JQ=n(ySe,"A",{href:!0});var fEt=s(JQ);KMr=r(fEt,"TFFunnelForTokenClassification"),fEt.forEach(t),ZMr=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),e4r=i(te),n5=n(te,"LI",{});var LSe=s(n5);LFe=n(LSe,"STRONG",{});var gEt=s(LFe);o4r=r(gEt,"layoutlm"),gEt.forEach(t),r4r=r(LSe," \u2014 "),YQ=n(LSe,"A",{href:!0});var hEt=s(YQ);t4r=r(hEt,"TFLayoutLMForTokenClassification"),hEt.forEach(t),a4r=r(LSe," (LayoutLM model)"),LSe.forEach(t),n4r=i(te),s5=n(te,"LI",{});var xSe=s(s5);xFe=n(xSe,"STRONG",{});var uEt=s(xFe);s4r=r(uEt,"longformer"),uEt.forEach(t),l4r=r(xSe," \u2014 "),KQ=n(xSe,"A",{href:!0});var pEt=s(KQ);i4r=r(pEt,"TFLongformerForTokenClassification"),pEt.forEach(t),d4r=r(xSe," (Longformer model)"),xSe.forEach(t),c4r=i(te),l5=n(te,"LI",{});var kSe=s(l5);kFe=n(kSe,"STRONG",{});var _Et=s(kFe);m4r=r(_Et,"mobilebert"),_Et.forEach(t),f4r=r(kSe," \u2014 "),ZQ=n(kSe,"A",{href:!0});var bEt=s(ZQ);g4r=r(bEt,"TFMobileBertForTokenClassification"),bEt.forEach(t),h4r=r(kSe," (MobileBERT model)"),kSe.forEach(t),u4r=i(te),i5=n(te,"LI",{});var SSe=s(i5);SFe=n(SSe,"STRONG",{});var vEt=s(SFe);p4r=r(vEt,"mpnet"),vEt.forEach(t),_4r=r(SSe," \u2014 "),eW=n(SSe,"A",{href:!0});var FEt=s(eW);b4r=r(FEt,"TFMPNetForTokenClassification"),FEt.forEach(t),v4r=r(SSe," (MPNet model)"),SSe.forEach(t),F4r=i(te),d5=n(te,"LI",{});var RSe=s(d5);RFe=n(RSe,"STRONG",{});var TEt=s(RFe);T4r=r(TEt,"rembert"),TEt.forEach(t),M4r=r(RSe," \u2014 "),oW=n(RSe,"A",{href:!0});var MEt=s(oW);E4r=r(MEt,"TFRemBertForTokenClassification"),MEt.forEach(t),C4r=r(RSe," (RemBERT model)"),RSe.forEach(t),w4r=i(te),c5=n(te,"LI",{});var BSe=s(c5);BFe=n(BSe,"STRONG",{});var EEt=s(BFe);A4r=r(EEt,"roberta"),EEt.forEach(t),y4r=r(BSe," \u2014 "),rW=n(BSe,"A",{href:!0});var CEt=s(rW);L4r=r(CEt,"TFRobertaForTokenClassification"),CEt.forEach(t),x4r=r(BSe," (RoBERTa model)"),BSe.forEach(t),k4r=i(te),m5=n(te,"LI",{});var PSe=s(m5);PFe=n(PSe,"STRONG",{});var wEt=s(PFe);S4r=r(wEt,"roformer"),wEt.forEach(t),R4r=r(PSe," \u2014 "),tW=n(PSe,"A",{href:!0});var AEt=s(tW);B4r=r(AEt,"TFRoFormerForTokenClassification"),AEt.forEach(t),P4r=r(PSe," (RoFormer model)"),PSe.forEach(t),$4r=i(te),f5=n(te,"LI",{});var $Se=s(f5);$Fe=n($Se,"STRONG",{});var yEt=s($Fe);I4r=r(yEt,"xlm"),yEt.forEach(t),q4r=r($Se," \u2014 "),aW=n($Se,"A",{href:!0});var LEt=s(aW);N4r=r(LEt,"TFXLMForTokenClassification"),LEt.forEach(t),j4r=r($Se," (XLM model)"),$Se.forEach(t),D4r=i(te),g5=n(te,"LI",{});var ISe=s(g5);IFe=n(ISe,"STRONG",{});var xEt=s(IFe);G4r=r(xEt,"xlm-roberta"),xEt.forEach(t),O4r=r(ISe," \u2014 "),nW=n(ISe,"A",{href:!0});var kEt=s(nW);V4r=r(kEt,"TFXLMRobertaForTokenClassification"),kEt.forEach(t),X4r=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),z4r=i(te),h5=n(te,"LI",{});var qSe=s(h5);qFe=n(qSe,"STRONG",{});var SEt=s(qFe);Q4r=r(SEt,"xlnet"),SEt.forEach(t),W4r=r(qSe," \u2014 "),sW=n(qSe,"A",{href:!0});var REt=s(sW);H4r=r(REt,"TFXLNetForTokenClassification"),REt.forEach(t),U4r=r(qSe," (XLNet model)"),qSe.forEach(t),te.forEach(t),J4r=i(Ca),NFe=n(Ca,"P",{});var BEt=s(NFe);Y4r=r(BEt,"Examples:"),BEt.forEach(t),K4r=i(Ca),f(G8.$$.fragment,Ca),Ca.forEach(t),fi.forEach(t),C$e=i(c),Yc=n(c,"H2",{class:!0});var $qe=s(Yc);u5=n($qe,"A",{id:!0,class:!0,href:!0});var PEt=s(u5);jFe=n(PEt,"SPAN",{});var $Et=s(jFe);f(O8.$$.fragment,$Et),$Et.forEach(t),PEt.forEach(t),Z4r=i($qe),DFe=n($qe,"SPAN",{});var IEt=s(DFe);eEr=r(IEt,"TFAutoModelForQuestionAnswering"),IEt.forEach(t),$qe.forEach(t),w$e=i(c),xr=n(c,"DIV",{class:!0});var hi=s(xr);f(V8.$$.fragment,hi),oEr=i(hi),Kc=n(hi,"P",{});var xY=s(Kc);rEr=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lW=n(xY,"A",{href:!0});var qEt=s(lW);tEr=r(qEt,"from_pretrained()"),qEt.forEach(t),aEr=r(xY," class method or the "),iW=n(xY,"A",{href:!0});var NEt=s(iW);nEr=r(NEt,"from_config()"),NEt.forEach(t),sEr=r(xY,` class
method.`),xY.forEach(t),lEr=i(hi),X8=n(hi,"P",{});var Iqe=s(X8);iEr=r(Iqe,"This class cannot be instantiated directly using "),GFe=n(Iqe,"CODE",{});var jEt=s(GFe);dEr=r(jEt,"__init__()"),jEt.forEach(t),cEr=r(Iqe," (throws an error)."),Iqe.forEach(t),mEr=i(hi),Et=n(hi,"DIV",{class:!0});var ui=s(Et);f(z8.$$.fragment,ui),fEr=i(ui),OFe=n(ui,"P",{});var DEt=s(OFe);gEr=r(DEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DEt.forEach(t),hEr=i(ui),Zc=n(ui,"P",{});var kY=s(Zc);uEr=r(kY,`Note:
Loading a model from its configuration file does `),VFe=n(kY,"STRONG",{});var GEt=s(VFe);pEr=r(GEt,"not"),GEt.forEach(t),_Er=r(kY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(kY,"A",{href:!0});var OEt=s(dW);bEr=r(OEt,"from_pretrained()"),OEt.forEach(t),vEr=r(kY," to load the model weights."),kY.forEach(t),FEr=i(ui),XFe=n(ui,"P",{});var VEt=s(XFe);TEr=r(VEt,"Examples:"),VEt.forEach(t),MEr=i(ui),f(Q8.$$.fragment,ui),ui.forEach(t),EEr=i(hi),wo=n(hi,"DIV",{class:!0});var wa=s(wo);f(W8.$$.fragment,wa),CEr=i(wa),zFe=n(wa,"P",{});var XEt=s(zFe);wEr=r(XEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XEt.forEach(t),AEr=i(wa),yn=n(wa,"P",{});var k6=s(yn);yEr=r(k6,"The model class to instantiate is selected based on the "),QFe=n(k6,"CODE",{});var zEt=s(QFe);LEr=r(zEt,"model_type"),zEt.forEach(t),xEr=r(k6,` property of the config object (either
passed as an argument or loaded from `),WFe=n(k6,"CODE",{});var QEt=s(WFe);kEr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),SEr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(k6,"CODE",{});var WEt=s(HFe);REr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),BEr=r(k6,":"),k6.forEach(t),PEr=i(wa),ee=n(wa,"UL",{});var ae=s(ee);p5=n(ae,"LI",{});var NSe=s(p5);UFe=n(NSe,"STRONG",{});var HEt=s(UFe);$Er=r(HEt,"albert"),HEt.forEach(t),IEr=r(NSe," \u2014 "),cW=n(NSe,"A",{href:!0});var UEt=s(cW);qEr=r(UEt,"TFAlbertForQuestionAnswering"),UEt.forEach(t),NEr=r(NSe," (ALBERT model)"),NSe.forEach(t),jEr=i(ae),_5=n(ae,"LI",{});var jSe=s(_5);JFe=n(jSe,"STRONG",{});var JEt=s(JFe);DEr=r(JEt,"bert"),JEt.forEach(t),GEr=r(jSe," \u2014 "),mW=n(jSe,"A",{href:!0});var YEt=s(mW);OEr=r(YEt,"TFBertForQuestionAnswering"),YEt.forEach(t),VEr=r(jSe," (BERT model)"),jSe.forEach(t),XEr=i(ae),b5=n(ae,"LI",{});var DSe=s(b5);YFe=n(DSe,"STRONG",{});var KEt=s(YFe);zEr=r(KEt,"camembert"),KEt.forEach(t),QEr=r(DSe," \u2014 "),fW=n(DSe,"A",{href:!0});var ZEt=s(fW);WEr=r(ZEt,"TFCamembertForQuestionAnswering"),ZEt.forEach(t),HEr=r(DSe," (CamemBERT model)"),DSe.forEach(t),UEr=i(ae),v5=n(ae,"LI",{});var GSe=s(v5);KFe=n(GSe,"STRONG",{});var e5t=s(KFe);JEr=r(e5t,"convbert"),e5t.forEach(t),YEr=r(GSe," \u2014 "),gW=n(GSe,"A",{href:!0});var o5t=s(gW);KEr=r(o5t,"TFConvBertForQuestionAnswering"),o5t.forEach(t),ZEr=r(GSe," (ConvBERT model)"),GSe.forEach(t),e5r=i(ae),F5=n(ae,"LI",{});var OSe=s(F5);ZFe=n(OSe,"STRONG",{});var r5t=s(ZFe);o5r=r(r5t,"deberta"),r5t.forEach(t),r5r=r(OSe," \u2014 "),hW=n(OSe,"A",{href:!0});var t5t=s(hW);t5r=r(t5t,"TFDebertaForQuestionAnswering"),t5t.forEach(t),a5r=r(OSe," (DeBERTa model)"),OSe.forEach(t),n5r=i(ae),T5=n(ae,"LI",{});var VSe=s(T5);e1e=n(VSe,"STRONG",{});var a5t=s(e1e);s5r=r(a5t,"deberta-v2"),a5t.forEach(t),l5r=r(VSe," \u2014 "),uW=n(VSe,"A",{href:!0});var n5t=s(uW);i5r=r(n5t,"TFDebertaV2ForQuestionAnswering"),n5t.forEach(t),d5r=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),c5r=i(ae),M5=n(ae,"LI",{});var XSe=s(M5);o1e=n(XSe,"STRONG",{});var s5t=s(o1e);m5r=r(s5t,"distilbert"),s5t.forEach(t),f5r=r(XSe," \u2014 "),pW=n(XSe,"A",{href:!0});var l5t=s(pW);g5r=r(l5t,"TFDistilBertForQuestionAnswering"),l5t.forEach(t),h5r=r(XSe," (DistilBERT model)"),XSe.forEach(t),u5r=i(ae),E5=n(ae,"LI",{});var zSe=s(E5);r1e=n(zSe,"STRONG",{});var i5t=s(r1e);p5r=r(i5t,"electra"),i5t.forEach(t),_5r=r(zSe," \u2014 "),_W=n(zSe,"A",{href:!0});var d5t=s(_W);b5r=r(d5t,"TFElectraForQuestionAnswering"),d5t.forEach(t),v5r=r(zSe," (ELECTRA model)"),zSe.forEach(t),F5r=i(ae),C5=n(ae,"LI",{});var QSe=s(C5);t1e=n(QSe,"STRONG",{});var c5t=s(t1e);T5r=r(c5t,"flaubert"),c5t.forEach(t),M5r=r(QSe," \u2014 "),bW=n(QSe,"A",{href:!0});var m5t=s(bW);E5r=r(m5t,"TFFlaubertForQuestionAnsweringSimple"),m5t.forEach(t),C5r=r(QSe," (FlauBERT model)"),QSe.forEach(t),w5r=i(ae),w5=n(ae,"LI",{});var WSe=s(w5);a1e=n(WSe,"STRONG",{});var f5t=s(a1e);A5r=r(f5t,"funnel"),f5t.forEach(t),y5r=r(WSe," \u2014 "),vW=n(WSe,"A",{href:!0});var g5t=s(vW);L5r=r(g5t,"TFFunnelForQuestionAnswering"),g5t.forEach(t),x5r=r(WSe," (Funnel Transformer model)"),WSe.forEach(t),k5r=i(ae),A5=n(ae,"LI",{});var HSe=s(A5);n1e=n(HSe,"STRONG",{});var h5t=s(n1e);S5r=r(h5t,"gptj"),h5t.forEach(t),R5r=r(HSe," \u2014 "),FW=n(HSe,"A",{href:!0});var u5t=s(FW);B5r=r(u5t,"TFGPTJForQuestionAnswering"),u5t.forEach(t),P5r=r(HSe," (GPT-J model)"),HSe.forEach(t),$5r=i(ae),y5=n(ae,"LI",{});var USe=s(y5);s1e=n(USe,"STRONG",{});var p5t=s(s1e);I5r=r(p5t,"longformer"),p5t.forEach(t),q5r=r(USe," \u2014 "),TW=n(USe,"A",{href:!0});var _5t=s(TW);N5r=r(_5t,"TFLongformerForQuestionAnswering"),_5t.forEach(t),j5r=r(USe," (Longformer model)"),USe.forEach(t),D5r=i(ae),L5=n(ae,"LI",{});var JSe=s(L5);l1e=n(JSe,"STRONG",{});var b5t=s(l1e);G5r=r(b5t,"mobilebert"),b5t.forEach(t),O5r=r(JSe," \u2014 "),MW=n(JSe,"A",{href:!0});var v5t=s(MW);V5r=r(v5t,"TFMobileBertForQuestionAnswering"),v5t.forEach(t),X5r=r(JSe," (MobileBERT model)"),JSe.forEach(t),z5r=i(ae),x5=n(ae,"LI",{});var YSe=s(x5);i1e=n(YSe,"STRONG",{});var F5t=s(i1e);Q5r=r(F5t,"mpnet"),F5t.forEach(t),W5r=r(YSe," \u2014 "),EW=n(YSe,"A",{href:!0});var T5t=s(EW);H5r=r(T5t,"TFMPNetForQuestionAnswering"),T5t.forEach(t),U5r=r(YSe," (MPNet model)"),YSe.forEach(t),J5r=i(ae),k5=n(ae,"LI",{});var KSe=s(k5);d1e=n(KSe,"STRONG",{});var M5t=s(d1e);Y5r=r(M5t,"rembert"),M5t.forEach(t),K5r=r(KSe," \u2014 "),CW=n(KSe,"A",{href:!0});var E5t=s(CW);Z5r=r(E5t,"TFRemBertForQuestionAnswering"),E5t.forEach(t),e3r=r(KSe," (RemBERT model)"),KSe.forEach(t),o3r=i(ae),S5=n(ae,"LI",{});var ZSe=s(S5);c1e=n(ZSe,"STRONG",{});var C5t=s(c1e);r3r=r(C5t,"roberta"),C5t.forEach(t),t3r=r(ZSe," \u2014 "),wW=n(ZSe,"A",{href:!0});var w5t=s(wW);a3r=r(w5t,"TFRobertaForQuestionAnswering"),w5t.forEach(t),n3r=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),s3r=i(ae),R5=n(ae,"LI",{});var eRe=s(R5);m1e=n(eRe,"STRONG",{});var A5t=s(m1e);l3r=r(A5t,"roformer"),A5t.forEach(t),i3r=r(eRe," \u2014 "),AW=n(eRe,"A",{href:!0});var y5t=s(AW);d3r=r(y5t,"TFRoFormerForQuestionAnswering"),y5t.forEach(t),c3r=r(eRe," (RoFormer model)"),eRe.forEach(t),m3r=i(ae),B5=n(ae,"LI",{});var oRe=s(B5);f1e=n(oRe,"STRONG",{});var L5t=s(f1e);f3r=r(L5t,"xlm"),L5t.forEach(t),g3r=r(oRe," \u2014 "),yW=n(oRe,"A",{href:!0});var x5t=s(yW);h3r=r(x5t,"TFXLMForQuestionAnsweringSimple"),x5t.forEach(t),u3r=r(oRe," (XLM model)"),oRe.forEach(t),p3r=i(ae),P5=n(ae,"LI",{});var rRe=s(P5);g1e=n(rRe,"STRONG",{});var k5t=s(g1e);_3r=r(k5t,"xlm-roberta"),k5t.forEach(t),b3r=r(rRe," \u2014 "),LW=n(rRe,"A",{href:!0});var S5t=s(LW);v3r=r(S5t,"TFXLMRobertaForQuestionAnswering"),S5t.forEach(t),F3r=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),T3r=i(ae),$5=n(ae,"LI",{});var tRe=s($5);h1e=n(tRe,"STRONG",{});var R5t=s(h1e);M3r=r(R5t,"xlnet"),R5t.forEach(t),E3r=r(tRe," \u2014 "),xW=n(tRe,"A",{href:!0});var B5t=s(xW);C3r=r(B5t,"TFXLNetForQuestionAnsweringSimple"),B5t.forEach(t),w3r=r(tRe," (XLNet model)"),tRe.forEach(t),ae.forEach(t),A3r=i(wa),u1e=n(wa,"P",{});var P5t=s(u1e);y3r=r(P5t,"Examples:"),P5t.forEach(t),L3r=i(wa),f(H8.$$.fragment,wa),wa.forEach(t),hi.forEach(t),A$e=i(c),em=n(c,"H2",{class:!0});var qqe=s(em);I5=n(qqe,"A",{id:!0,class:!0,href:!0});var $5t=s(I5);p1e=n($5t,"SPAN",{});var I5t=s(p1e);f(U8.$$.fragment,I5t),I5t.forEach(t),$5t.forEach(t),x3r=i(qqe),_1e=n(qqe,"SPAN",{});var q5t=s(_1e);k3r=r(q5t,"TFAutoModelForVision2Seq"),q5t.forEach(t),qqe.forEach(t),y$e=i(c),kr=n(c,"DIV",{class:!0});var pi=s(kr);f(J8.$$.fragment,pi),S3r=i(pi),om=n(pi,"P",{});var SY=s(om);R3r=r(SY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=n(SY,"A",{href:!0});var N5t=s(kW);B3r=r(N5t,"from_pretrained()"),N5t.forEach(t),P3r=r(SY," class method or the "),SW=n(SY,"A",{href:!0});var j5t=s(SW);$3r=r(j5t,"from_config()"),j5t.forEach(t),I3r=r(SY,` class
method.`),SY.forEach(t),q3r=i(pi),Y8=n(pi,"P",{});var Nqe=s(Y8);N3r=r(Nqe,"This class cannot be instantiated directly using "),b1e=n(Nqe,"CODE",{});var D5t=s(b1e);j3r=r(D5t,"__init__()"),D5t.forEach(t),D3r=r(Nqe," (throws an error)."),Nqe.forEach(t),G3r=i(pi),Ct=n(pi,"DIV",{class:!0});var _i=s(Ct);f(K8.$$.fragment,_i),O3r=i(_i),v1e=n(_i,"P",{});var G5t=s(v1e);V3r=r(G5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G5t.forEach(t),X3r=i(_i),rm=n(_i,"P",{});var RY=s(rm);z3r=r(RY,`Note:
Loading a model from its configuration file does `),F1e=n(RY,"STRONG",{});var O5t=s(F1e);Q3r=r(O5t,"not"),O5t.forEach(t),W3r=r(RY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(RY,"A",{href:!0});var V5t=s(RW);H3r=r(V5t,"from_pretrained()"),V5t.forEach(t),U3r=r(RY," to load the model weights."),RY.forEach(t),J3r=i(_i),T1e=n(_i,"P",{});var X5t=s(T1e);Y3r=r(X5t,"Examples:"),X5t.forEach(t),K3r=i(_i),f(Z8.$$.fragment,_i),_i.forEach(t),Z3r=i(pi),Ao=n(pi,"DIV",{class:!0});var Aa=s(Ao);f(eL.$$.fragment,Aa),eCr=i(Aa),M1e=n(Aa,"P",{});var z5t=s(M1e);oCr=r(z5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),z5t.forEach(t),rCr=i(Aa),Ln=n(Aa,"P",{});var S6=s(Ln);tCr=r(S6,"The model class to instantiate is selected based on the "),E1e=n(S6,"CODE",{});var Q5t=s(E1e);aCr=r(Q5t,"model_type"),Q5t.forEach(t),nCr=r(S6,` property of the config object (either
passed as an argument or loaded from `),C1e=n(S6,"CODE",{});var W5t=s(C1e);sCr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),lCr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(S6,"CODE",{});var H5t=s(w1e);iCr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),dCr=r(S6,":"),S6.forEach(t),cCr=i(Aa),A1e=n(Aa,"UL",{});var U5t=s(A1e);q5=n(U5t,"LI",{});var aRe=s(q5);y1e=n(aRe,"STRONG",{});var J5t=s(y1e);mCr=r(J5t,"vision-encoder-decoder"),J5t.forEach(t),fCr=r(aRe," \u2014 "),BW=n(aRe,"A",{href:!0});var Y5t=s(BW);gCr=r(Y5t,"TFVisionEncoderDecoderModel"),Y5t.forEach(t),hCr=r(aRe," (Vision Encoder decoder model)"),aRe.forEach(t),U5t.forEach(t),uCr=i(Aa),L1e=n(Aa,"P",{});var K5t=s(L1e);pCr=r(K5t,"Examples:"),K5t.forEach(t),_Cr=i(Aa),f(oL.$$.fragment,Aa),Aa.forEach(t),pi.forEach(t),L$e=i(c),tm=n(c,"H2",{class:!0});var jqe=s(tm);N5=n(jqe,"A",{id:!0,class:!0,href:!0});var Z5t=s(N5);x1e=n(Z5t,"SPAN",{});var e3t=s(x1e);f(rL.$$.fragment,e3t),e3t.forEach(t),Z5t.forEach(t),bCr=i(jqe),k1e=n(jqe,"SPAN",{});var o3t=s(k1e);vCr=r(o3t,"TFAutoModelForSpeechSeq2Seq"),o3t.forEach(t),jqe.forEach(t),x$e=i(c),Sr=n(c,"DIV",{class:!0});var bi=s(Sr);f(tL.$$.fragment,bi),FCr=i(bi),am=n(bi,"P",{});var BY=s(am);TCr=r(BY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PW=n(BY,"A",{href:!0});var r3t=s(PW);MCr=r(r3t,"from_pretrained()"),r3t.forEach(t),ECr=r(BY," class method or the "),$W=n(BY,"A",{href:!0});var t3t=s($W);CCr=r(t3t,"from_config()"),t3t.forEach(t),wCr=r(BY,` class
method.`),BY.forEach(t),ACr=i(bi),aL=n(bi,"P",{});var Dqe=s(aL);yCr=r(Dqe,"This class cannot be instantiated directly using "),S1e=n(Dqe,"CODE",{});var a3t=s(S1e);LCr=r(a3t,"__init__()"),a3t.forEach(t),xCr=r(Dqe," (throws an error)."),Dqe.forEach(t),kCr=i(bi),wt=n(bi,"DIV",{class:!0});var vi=s(wt);f(nL.$$.fragment,vi),SCr=i(vi),R1e=n(vi,"P",{});var n3t=s(R1e);RCr=r(n3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n3t.forEach(t),BCr=i(vi),nm=n(vi,"P",{});var PY=s(nm);PCr=r(PY,`Note:
Loading a model from its configuration file does `),B1e=n(PY,"STRONG",{});var s3t=s(B1e);$Cr=r(s3t,"not"),s3t.forEach(t),ICr=r(PY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(PY,"A",{href:!0});var l3t=s(IW);qCr=r(l3t,"from_pretrained()"),l3t.forEach(t),NCr=r(PY," to load the model weights."),PY.forEach(t),jCr=i(vi),P1e=n(vi,"P",{});var i3t=s(P1e);DCr=r(i3t,"Examples:"),i3t.forEach(t),GCr=i(vi),f(sL.$$.fragment,vi),vi.forEach(t),OCr=i(bi),yo=n(bi,"DIV",{class:!0});var ya=s(yo);f(lL.$$.fragment,ya),VCr=i(ya),$1e=n(ya,"P",{});var d3t=s($1e);XCr=r(d3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),d3t.forEach(t),zCr=i(ya),xn=n(ya,"P",{});var R6=s(xn);QCr=r(R6,"The model class to instantiate is selected based on the "),I1e=n(R6,"CODE",{});var c3t=s(I1e);WCr=r(c3t,"model_type"),c3t.forEach(t),HCr=r(R6,` property of the config object (either
passed as an argument or loaded from `),q1e=n(R6,"CODE",{});var m3t=s(q1e);UCr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),JCr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(R6,"CODE",{});var f3t=s(N1e);YCr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),KCr=r(R6,":"),R6.forEach(t),ZCr=i(ya),j1e=n(ya,"UL",{});var g3t=s(j1e);j5=n(g3t,"LI",{});var nRe=s(j5);D1e=n(nRe,"STRONG",{});var h3t=s(D1e);e6r=r(h3t,"speech_to_text"),h3t.forEach(t),o6r=r(nRe," \u2014 "),qW=n(nRe,"A",{href:!0});var u3t=s(qW);r6r=r(u3t,"TFSpeech2TextForConditionalGeneration"),u3t.forEach(t),t6r=r(nRe," (Speech2Text model)"),nRe.forEach(t),g3t.forEach(t),a6r=i(ya),G1e=n(ya,"P",{});var p3t=s(G1e);n6r=r(p3t,"Examples:"),p3t.forEach(t),s6r=i(ya),f(iL.$$.fragment,ya),ya.forEach(t),bi.forEach(t),k$e=i(c),sm=n(c,"H2",{class:!0});var Gqe=s(sm);D5=n(Gqe,"A",{id:!0,class:!0,href:!0});var _3t=s(D5);O1e=n(_3t,"SPAN",{});var b3t=s(O1e);f(dL.$$.fragment,b3t),b3t.forEach(t),_3t.forEach(t),l6r=i(Gqe),V1e=n(Gqe,"SPAN",{});var v3t=s(V1e);i6r=r(v3t,"FlaxAutoModel"),v3t.forEach(t),Gqe.forEach(t),S$e=i(c),Rr=n(c,"DIV",{class:!0});var Fi=s(Rr);f(cL.$$.fragment,Fi),d6r=i(Fi),lm=n(Fi,"P",{});var $Y=s(lm);c6r=r($Y,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NW=n($Y,"A",{href:!0});var F3t=s(NW);m6r=r(F3t,"from_pretrained()"),F3t.forEach(t),f6r=r($Y," class method or the "),jW=n($Y,"A",{href:!0});var T3t=s(jW);g6r=r(T3t,"from_config()"),T3t.forEach(t),h6r=r($Y,` class
method.`),$Y.forEach(t),u6r=i(Fi),mL=n(Fi,"P",{});var Oqe=s(mL);p6r=r(Oqe,"This class cannot be instantiated directly using "),X1e=n(Oqe,"CODE",{});var M3t=s(X1e);_6r=r(M3t,"__init__()"),M3t.forEach(t),b6r=r(Oqe," (throws an error)."),Oqe.forEach(t),v6r=i(Fi),At=n(Fi,"DIV",{class:!0});var Ti=s(At);f(fL.$$.fragment,Ti),F6r=i(Ti),z1e=n(Ti,"P",{});var E3t=s(z1e);T6r=r(E3t,"Instantiates one of the base model classes of the library from a configuration."),E3t.forEach(t),M6r=i(Ti),im=n(Ti,"P",{});var IY=s(im);E6r=r(IY,`Note:
Loading a model from its configuration file does `),Q1e=n(IY,"STRONG",{});var C3t=s(Q1e);C6r=r(C3t,"not"),C3t.forEach(t),w6r=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(IY,"A",{href:!0});var w3t=s(DW);A6r=r(w3t,"from_pretrained()"),w3t.forEach(t),y6r=r(IY," to load the model weights."),IY.forEach(t),L6r=i(Ti),W1e=n(Ti,"P",{});var A3t=s(W1e);x6r=r(A3t,"Examples:"),A3t.forEach(t),k6r=i(Ti),f(gL.$$.fragment,Ti),Ti.forEach(t),S6r=i(Fi),Lo=n(Fi,"DIV",{class:!0});var La=s(Lo);f(hL.$$.fragment,La),R6r=i(La),H1e=n(La,"P",{});var y3t=s(H1e);B6r=r(y3t,"Instantiate one of the base model classes of the library from a pretrained model."),y3t.forEach(t),P6r=i(La),kn=n(La,"P",{});var B6=s(kn);$6r=r(B6,"The model class to instantiate is selected based on the "),U1e=n(B6,"CODE",{});var L3t=s(U1e);I6r=r(L3t,"model_type"),L3t.forEach(t),q6r=r(B6,` property of the config object (either
passed as an argument or loaded from `),J1e=n(B6,"CODE",{});var x3t=s(J1e);N6r=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),j6r=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(B6,"CODE",{});var k3t=s(Y1e);D6r=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),G6r=r(B6,":"),B6.forEach(t),O6r=i(La),z=n(La,"UL",{});var W=s(z);G5=n(W,"LI",{});var sRe=s(G5);K1e=n(sRe,"STRONG",{});var S3t=s(K1e);V6r=r(S3t,"albert"),S3t.forEach(t),X6r=r(sRe," \u2014 "),GW=n(sRe,"A",{href:!0});var R3t=s(GW);z6r=r(R3t,"FlaxAlbertModel"),R3t.forEach(t),Q6r=r(sRe," (ALBERT model)"),sRe.forEach(t),W6r=i(W),O5=n(W,"LI",{});var lRe=s(O5);Z1e=n(lRe,"STRONG",{});var B3t=s(Z1e);H6r=r(B3t,"bart"),B3t.forEach(t),U6r=r(lRe," \u2014 "),OW=n(lRe,"A",{href:!0});var P3t=s(OW);J6r=r(P3t,"FlaxBartModel"),P3t.forEach(t),Y6r=r(lRe," (BART model)"),lRe.forEach(t),K6r=i(W),V5=n(W,"LI",{});var iRe=s(V5);eTe=n(iRe,"STRONG",{});var $3t=s(eTe);Z6r=r($3t,"beit"),$3t.forEach(t),ewr=r(iRe," \u2014 "),VW=n(iRe,"A",{href:!0});var I3t=s(VW);owr=r(I3t,"FlaxBeitModel"),I3t.forEach(t),rwr=r(iRe," (BEiT model)"),iRe.forEach(t),twr=i(W),X5=n(W,"LI",{});var dRe=s(X5);oTe=n(dRe,"STRONG",{});var q3t=s(oTe);awr=r(q3t,"bert"),q3t.forEach(t),nwr=r(dRe," \u2014 "),XW=n(dRe,"A",{href:!0});var N3t=s(XW);swr=r(N3t,"FlaxBertModel"),N3t.forEach(t),lwr=r(dRe," (BERT model)"),dRe.forEach(t),iwr=i(W),z5=n(W,"LI",{});var cRe=s(z5);rTe=n(cRe,"STRONG",{});var j3t=s(rTe);dwr=r(j3t,"big_bird"),j3t.forEach(t),cwr=r(cRe," \u2014 "),zW=n(cRe,"A",{href:!0});var D3t=s(zW);mwr=r(D3t,"FlaxBigBirdModel"),D3t.forEach(t),fwr=r(cRe," (BigBird model)"),cRe.forEach(t),gwr=i(W),Q5=n(W,"LI",{});var mRe=s(Q5);tTe=n(mRe,"STRONG",{});var G3t=s(tTe);hwr=r(G3t,"blenderbot"),G3t.forEach(t),uwr=r(mRe," \u2014 "),QW=n(mRe,"A",{href:!0});var O3t=s(QW);pwr=r(O3t,"FlaxBlenderbotModel"),O3t.forEach(t),_wr=r(mRe," (Blenderbot model)"),mRe.forEach(t),bwr=i(W),W5=n(W,"LI",{});var fRe=s(W5);aTe=n(fRe,"STRONG",{});var V3t=s(aTe);vwr=r(V3t,"blenderbot-small"),V3t.forEach(t),Fwr=r(fRe," \u2014 "),WW=n(fRe,"A",{href:!0});var X3t=s(WW);Twr=r(X3t,"FlaxBlenderbotSmallModel"),X3t.forEach(t),Mwr=r(fRe," (BlenderbotSmall model)"),fRe.forEach(t),Ewr=i(W),H5=n(W,"LI",{});var gRe=s(H5);nTe=n(gRe,"STRONG",{});var z3t=s(nTe);Cwr=r(z3t,"clip"),z3t.forEach(t),wwr=r(gRe," \u2014 "),HW=n(gRe,"A",{href:!0});var Q3t=s(HW);Awr=r(Q3t,"FlaxCLIPModel"),Q3t.forEach(t),ywr=r(gRe," (CLIP model)"),gRe.forEach(t),Lwr=i(W),U5=n(W,"LI",{});var hRe=s(U5);sTe=n(hRe,"STRONG",{});var W3t=s(sTe);xwr=r(W3t,"distilbert"),W3t.forEach(t),kwr=r(hRe," \u2014 "),UW=n(hRe,"A",{href:!0});var H3t=s(UW);Swr=r(H3t,"FlaxDistilBertModel"),H3t.forEach(t),Rwr=r(hRe," (DistilBERT model)"),hRe.forEach(t),Bwr=i(W),J5=n(W,"LI",{});var uRe=s(J5);lTe=n(uRe,"STRONG",{});var U3t=s(lTe);Pwr=r(U3t,"electra"),U3t.forEach(t),$wr=r(uRe," \u2014 "),JW=n(uRe,"A",{href:!0});var J3t=s(JW);Iwr=r(J3t,"FlaxElectraModel"),J3t.forEach(t),qwr=r(uRe," (ELECTRA model)"),uRe.forEach(t),Nwr=i(W),Y5=n(W,"LI",{});var pRe=s(Y5);iTe=n(pRe,"STRONG",{});var Y3t=s(iTe);jwr=r(Y3t,"gpt2"),Y3t.forEach(t),Dwr=r(pRe," \u2014 "),YW=n(pRe,"A",{href:!0});var K3t=s(YW);Gwr=r(K3t,"FlaxGPT2Model"),K3t.forEach(t),Owr=r(pRe," (OpenAI GPT-2 model)"),pRe.forEach(t),Vwr=i(W),K5=n(W,"LI",{});var _Re=s(K5);dTe=n(_Re,"STRONG",{});var Z3t=s(dTe);Xwr=r(Z3t,"gpt_neo"),Z3t.forEach(t),zwr=r(_Re," \u2014 "),KW=n(_Re,"A",{href:!0});var eCt=s(KW);Qwr=r(eCt,"FlaxGPTNeoModel"),eCt.forEach(t),Wwr=r(_Re," (GPT Neo model)"),_Re.forEach(t),Hwr=i(W),Z5=n(W,"LI",{});var bRe=s(Z5);cTe=n(bRe,"STRONG",{});var oCt=s(cTe);Uwr=r(oCt,"gptj"),oCt.forEach(t),Jwr=r(bRe," \u2014 "),ZW=n(bRe,"A",{href:!0});var rCt=s(ZW);Ywr=r(rCt,"FlaxGPTJModel"),rCt.forEach(t),Kwr=r(bRe," (GPT-J model)"),bRe.forEach(t),Zwr=i(W),e3=n(W,"LI",{});var vRe=s(e3);mTe=n(vRe,"STRONG",{});var tCt=s(mTe);eAr=r(tCt,"marian"),tCt.forEach(t),oAr=r(vRe," \u2014 "),eH=n(vRe,"A",{href:!0});var aCt=s(eH);rAr=r(aCt,"FlaxMarianModel"),aCt.forEach(t),tAr=r(vRe," (Marian model)"),vRe.forEach(t),aAr=i(W),o3=n(W,"LI",{});var FRe=s(o3);fTe=n(FRe,"STRONG",{});var nCt=s(fTe);nAr=r(nCt,"mbart"),nCt.forEach(t),sAr=r(FRe," \u2014 "),oH=n(FRe,"A",{href:!0});var sCt=s(oH);lAr=r(sCt,"FlaxMBartModel"),sCt.forEach(t),iAr=r(FRe," (mBART model)"),FRe.forEach(t),dAr=i(W),r3=n(W,"LI",{});var TRe=s(r3);gTe=n(TRe,"STRONG",{});var lCt=s(gTe);cAr=r(lCt,"mt5"),lCt.forEach(t),mAr=r(TRe," \u2014 "),rH=n(TRe,"A",{href:!0});var iCt=s(rH);fAr=r(iCt,"FlaxMT5Model"),iCt.forEach(t),gAr=r(TRe," (mT5 model)"),TRe.forEach(t),hAr=i(W),t3=n(W,"LI",{});var MRe=s(t3);hTe=n(MRe,"STRONG",{});var dCt=s(hTe);uAr=r(dCt,"pegasus"),dCt.forEach(t),pAr=r(MRe," \u2014 "),tH=n(MRe,"A",{href:!0});var cCt=s(tH);_Ar=r(cCt,"FlaxPegasusModel"),cCt.forEach(t),bAr=r(MRe," (Pegasus model)"),MRe.forEach(t),vAr=i(W),a3=n(W,"LI",{});var ERe=s(a3);uTe=n(ERe,"STRONG",{});var mCt=s(uTe);FAr=r(mCt,"roberta"),mCt.forEach(t),TAr=r(ERe," \u2014 "),aH=n(ERe,"A",{href:!0});var fCt=s(aH);MAr=r(fCt,"FlaxRobertaModel"),fCt.forEach(t),EAr=r(ERe," (RoBERTa model)"),ERe.forEach(t),CAr=i(W),n3=n(W,"LI",{});var CRe=s(n3);pTe=n(CRe,"STRONG",{});var gCt=s(pTe);wAr=r(gCt,"roformer"),gCt.forEach(t),AAr=r(CRe," \u2014 "),nH=n(CRe,"A",{href:!0});var hCt=s(nH);yAr=r(hCt,"FlaxRoFormerModel"),hCt.forEach(t),LAr=r(CRe," (RoFormer model)"),CRe.forEach(t),xAr=i(W),s3=n(W,"LI",{});var wRe=s(s3);_Te=n(wRe,"STRONG",{});var uCt=s(_Te);kAr=r(uCt,"t5"),uCt.forEach(t),SAr=r(wRe," \u2014 "),sH=n(wRe,"A",{href:!0});var pCt=s(sH);RAr=r(pCt,"FlaxT5Model"),pCt.forEach(t),BAr=r(wRe," (T5 model)"),wRe.forEach(t),PAr=i(W),l3=n(W,"LI",{});var ARe=s(l3);bTe=n(ARe,"STRONG",{});var _Ct=s(bTe);$Ar=r(_Ct,"vision-text-dual-encoder"),_Ct.forEach(t),IAr=r(ARe," \u2014 "),lH=n(ARe,"A",{href:!0});var bCt=s(lH);qAr=r(bCt,"FlaxVisionTextDualEncoderModel"),bCt.forEach(t),NAr=r(ARe," (VisionTextDualEncoder model)"),ARe.forEach(t),jAr=i(W),i3=n(W,"LI",{});var yRe=s(i3);vTe=n(yRe,"STRONG",{});var vCt=s(vTe);DAr=r(vCt,"vit"),vCt.forEach(t),GAr=r(yRe," \u2014 "),iH=n(yRe,"A",{href:!0});var FCt=s(iH);OAr=r(FCt,"FlaxViTModel"),FCt.forEach(t),VAr=r(yRe," (ViT model)"),yRe.forEach(t),XAr=i(W),d3=n(W,"LI",{});var LRe=s(d3);FTe=n(LRe,"STRONG",{});var TCt=s(FTe);zAr=r(TCt,"wav2vec2"),TCt.forEach(t),QAr=r(LRe," \u2014 "),dH=n(LRe,"A",{href:!0});var MCt=s(dH);WAr=r(MCt,"FlaxWav2Vec2Model"),MCt.forEach(t),HAr=r(LRe," (Wav2Vec2 model)"),LRe.forEach(t),UAr=i(W),c3=n(W,"LI",{});var xRe=s(c3);TTe=n(xRe,"STRONG",{});var ECt=s(TTe);JAr=r(ECt,"xglm"),ECt.forEach(t),YAr=r(xRe," \u2014 "),cH=n(xRe,"A",{href:!0});var CCt=s(cH);KAr=r(CCt,"FlaxXGLMModel"),CCt.forEach(t),ZAr=r(xRe," (XGLM model)"),xRe.forEach(t),e0r=i(W),m3=n(W,"LI",{});var kRe=s(m3);MTe=n(kRe,"STRONG",{});var wCt=s(MTe);o0r=r(wCt,"xlm-roberta"),wCt.forEach(t),r0r=r(kRe," \u2014 "),mH=n(kRe,"A",{href:!0});var ACt=s(mH);t0r=r(ACt,"FlaxXLMRobertaModel"),ACt.forEach(t),a0r=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),W.forEach(t),n0r=i(La),ETe=n(La,"P",{});var yCt=s(ETe);s0r=r(yCt,"Examples:"),yCt.forEach(t),l0r=i(La),f(uL.$$.fragment,La),La.forEach(t),Fi.forEach(t),R$e=i(c),dm=n(c,"H2",{class:!0});var Vqe=s(dm);f3=n(Vqe,"A",{id:!0,class:!0,href:!0});var LCt=s(f3);CTe=n(LCt,"SPAN",{});var xCt=s(CTe);f(pL.$$.fragment,xCt),xCt.forEach(t),LCt.forEach(t),i0r=i(Vqe),wTe=n(Vqe,"SPAN",{});var kCt=s(wTe);d0r=r(kCt,"FlaxAutoModelForCausalLM"),kCt.forEach(t),Vqe.forEach(t),B$e=i(c),Br=n(c,"DIV",{class:!0});var Mi=s(Br);f(_L.$$.fragment,Mi),c0r=i(Mi),cm=n(Mi,"P",{});var qY=s(cm);m0r=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fH=n(qY,"A",{href:!0});var SCt=s(fH);f0r=r(SCt,"from_pretrained()"),SCt.forEach(t),g0r=r(qY," class method or the "),gH=n(qY,"A",{href:!0});var RCt=s(gH);h0r=r(RCt,"from_config()"),RCt.forEach(t),u0r=r(qY,` class
method.`),qY.forEach(t),p0r=i(Mi),bL=n(Mi,"P",{});var Xqe=s(bL);_0r=r(Xqe,"This class cannot be instantiated directly using "),ATe=n(Xqe,"CODE",{});var BCt=s(ATe);b0r=r(BCt,"__init__()"),BCt.forEach(t),v0r=r(Xqe," (throws an error)."),Xqe.forEach(t),F0r=i(Mi),yt=n(Mi,"DIV",{class:!0});var Ei=s(yt);f(vL.$$.fragment,Ei),T0r=i(Ei),yTe=n(Ei,"P",{});var PCt=s(yTe);M0r=r(PCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PCt.forEach(t),E0r=i(Ei),mm=n(Ei,"P",{});var NY=s(mm);C0r=r(NY,`Note:
Loading a model from its configuration file does `),LTe=n(NY,"STRONG",{});var $Ct=s(LTe);w0r=r($Ct,"not"),$Ct.forEach(t),A0r=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(NY,"A",{href:!0});var ICt=s(hH);y0r=r(ICt,"from_pretrained()"),ICt.forEach(t),L0r=r(NY," to load the model weights."),NY.forEach(t),x0r=i(Ei),xTe=n(Ei,"P",{});var qCt=s(xTe);k0r=r(qCt,"Examples:"),qCt.forEach(t),S0r=i(Ei),f(FL.$$.fragment,Ei),Ei.forEach(t),R0r=i(Mi),xo=n(Mi,"DIV",{class:!0});var xa=s(xo);f(TL.$$.fragment,xa),B0r=i(xa),kTe=n(xa,"P",{});var NCt=s(kTe);P0r=r(NCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NCt.forEach(t),$0r=i(xa),Sn=n(xa,"P",{});var P6=s(Sn);I0r=r(P6,"The model class to instantiate is selected based on the "),STe=n(P6,"CODE",{});var jCt=s(STe);q0r=r(jCt,"model_type"),jCt.forEach(t),N0r=r(P6,` property of the config object (either
passed as an argument or loaded from `),RTe=n(P6,"CODE",{});var DCt=s(RTe);j0r=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),D0r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(P6,"CODE",{});var GCt=s(BTe);G0r=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),O0r=r(P6,":"),P6.forEach(t),V0r=i(xa),ca=n(xa,"UL",{});var Ci=s(ca);g3=n(Ci,"LI",{});var SRe=s(g3);PTe=n(SRe,"STRONG",{});var OCt=s(PTe);X0r=r(OCt,"bart"),OCt.forEach(t),z0r=r(SRe," \u2014 "),uH=n(SRe,"A",{href:!0});var VCt=s(uH);Q0r=r(VCt,"FlaxBartForCausalLM"),VCt.forEach(t),W0r=r(SRe," (BART model)"),SRe.forEach(t),H0r=i(Ci),h3=n(Ci,"LI",{});var RRe=s(h3);$Te=n(RRe,"STRONG",{});var XCt=s($Te);U0r=r(XCt,"gpt2"),XCt.forEach(t),J0r=r(RRe," \u2014 "),pH=n(RRe,"A",{href:!0});var zCt=s(pH);Y0r=r(zCt,"FlaxGPT2LMHeadModel"),zCt.forEach(t),K0r=r(RRe," (OpenAI GPT-2 model)"),RRe.forEach(t),Z0r=i(Ci),u3=n(Ci,"LI",{});var BRe=s(u3);ITe=n(BRe,"STRONG",{});var QCt=s(ITe);eyr=r(QCt,"gpt_neo"),QCt.forEach(t),oyr=r(BRe," \u2014 "),_H=n(BRe,"A",{href:!0});var WCt=s(_H);ryr=r(WCt,"FlaxGPTNeoForCausalLM"),WCt.forEach(t),tyr=r(BRe," (GPT Neo model)"),BRe.forEach(t),ayr=i(Ci),p3=n(Ci,"LI",{});var PRe=s(p3);qTe=n(PRe,"STRONG",{});var HCt=s(qTe);nyr=r(HCt,"gptj"),HCt.forEach(t),syr=r(PRe," \u2014 "),bH=n(PRe,"A",{href:!0});var UCt=s(bH);lyr=r(UCt,"FlaxGPTJForCausalLM"),UCt.forEach(t),iyr=r(PRe," (GPT-J model)"),PRe.forEach(t),dyr=i(Ci),_3=n(Ci,"LI",{});var $Re=s(_3);NTe=n($Re,"STRONG",{});var JCt=s(NTe);cyr=r(JCt,"xglm"),JCt.forEach(t),myr=r($Re," \u2014 "),vH=n($Re,"A",{href:!0});var YCt=s(vH);fyr=r(YCt,"FlaxXGLMForCausalLM"),YCt.forEach(t),gyr=r($Re," (XGLM model)"),$Re.forEach(t),Ci.forEach(t),hyr=i(xa),jTe=n(xa,"P",{});var KCt=s(jTe);uyr=r(KCt,"Examples:"),KCt.forEach(t),pyr=i(xa),f(ML.$$.fragment,xa),xa.forEach(t),Mi.forEach(t),P$e=i(c),fm=n(c,"H2",{class:!0});var zqe=s(fm);b3=n(zqe,"A",{id:!0,class:!0,href:!0});var ZCt=s(b3);DTe=n(ZCt,"SPAN",{});var e6t=s(DTe);f(EL.$$.fragment,e6t),e6t.forEach(t),ZCt.forEach(t),_yr=i(zqe),GTe=n(zqe,"SPAN",{});var o6t=s(GTe);byr=r(o6t,"FlaxAutoModelForPreTraining"),o6t.forEach(t),zqe.forEach(t),$$e=i(c),Pr=n(c,"DIV",{class:!0});var wi=s(Pr);f(CL.$$.fragment,wi),vyr=i(wi),gm=n(wi,"P",{});var jY=s(gm);Fyr=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FH=n(jY,"A",{href:!0});var r6t=s(FH);Tyr=r(r6t,"from_pretrained()"),r6t.forEach(t),Myr=r(jY," class method or the "),TH=n(jY,"A",{href:!0});var t6t=s(TH);Eyr=r(t6t,"from_config()"),t6t.forEach(t),Cyr=r(jY,` class
method.`),jY.forEach(t),wyr=i(wi),wL=n(wi,"P",{});var Qqe=s(wL);Ayr=r(Qqe,"This class cannot be instantiated directly using "),OTe=n(Qqe,"CODE",{});var a6t=s(OTe);yyr=r(a6t,"__init__()"),a6t.forEach(t),Lyr=r(Qqe," (throws an error)."),Qqe.forEach(t),xyr=i(wi),Lt=n(wi,"DIV",{class:!0});var Ai=s(Lt);f(AL.$$.fragment,Ai),kyr=i(Ai),VTe=n(Ai,"P",{});var n6t=s(VTe);Syr=r(n6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),n6t.forEach(t),Ryr=i(Ai),hm=n(Ai,"P",{});var DY=s(hm);Byr=r(DY,`Note:
Loading a model from its configuration file does `),XTe=n(DY,"STRONG",{});var s6t=s(XTe);Pyr=r(s6t,"not"),s6t.forEach(t),$yr=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(DY,"A",{href:!0});var l6t=s(MH);Iyr=r(l6t,"from_pretrained()"),l6t.forEach(t),qyr=r(DY," to load the model weights."),DY.forEach(t),Nyr=i(Ai),zTe=n(Ai,"P",{});var i6t=s(zTe);jyr=r(i6t,"Examples:"),i6t.forEach(t),Dyr=i(Ai),f(yL.$$.fragment,Ai),Ai.forEach(t),Gyr=i(wi),ko=n(wi,"DIV",{class:!0});var ka=s(ko);f(LL.$$.fragment,ka),Oyr=i(ka),QTe=n(ka,"P",{});var d6t=s(QTe);Vyr=r(d6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),d6t.forEach(t),Xyr=i(ka),Rn=n(ka,"P",{});var $6=s(Rn);zyr=r($6,"The model class to instantiate is selected based on the "),WTe=n($6,"CODE",{});var c6t=s(WTe);Qyr=r(c6t,"model_type"),c6t.forEach(t),Wyr=r($6,` property of the config object (either
passed as an argument or loaded from `),HTe=n($6,"CODE",{});var m6t=s(HTe);Hyr=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),Uyr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n($6,"CODE",{});var f6t=s(UTe);Jyr=r(f6t,"pretrained_model_name_or_path"),f6t.forEach(t),Yyr=r($6,":"),$6.forEach(t),Kyr=i(ka),he=n(ka,"UL",{});var be=s(he);v3=n(be,"LI",{});var IRe=s(v3);JTe=n(IRe,"STRONG",{});var g6t=s(JTe);Zyr=r(g6t,"albert"),g6t.forEach(t),e8r=r(IRe," \u2014 "),EH=n(IRe,"A",{href:!0});var h6t=s(EH);o8r=r(h6t,"FlaxAlbertForPreTraining"),h6t.forEach(t),r8r=r(IRe," (ALBERT model)"),IRe.forEach(t),t8r=i(be),F3=n(be,"LI",{});var qRe=s(F3);YTe=n(qRe,"STRONG",{});var u6t=s(YTe);a8r=r(u6t,"bart"),u6t.forEach(t),n8r=r(qRe," \u2014 "),CH=n(qRe,"A",{href:!0});var p6t=s(CH);s8r=r(p6t,"FlaxBartForConditionalGeneration"),p6t.forEach(t),l8r=r(qRe," (BART model)"),qRe.forEach(t),i8r=i(be),T3=n(be,"LI",{});var NRe=s(T3);KTe=n(NRe,"STRONG",{});var _6t=s(KTe);d8r=r(_6t,"bert"),_6t.forEach(t),c8r=r(NRe," \u2014 "),wH=n(NRe,"A",{href:!0});var b6t=s(wH);m8r=r(b6t,"FlaxBertForPreTraining"),b6t.forEach(t),f8r=r(NRe," (BERT model)"),NRe.forEach(t),g8r=i(be),M3=n(be,"LI",{});var jRe=s(M3);ZTe=n(jRe,"STRONG",{});var v6t=s(ZTe);h8r=r(v6t,"big_bird"),v6t.forEach(t),u8r=r(jRe," \u2014 "),AH=n(jRe,"A",{href:!0});var F6t=s(AH);p8r=r(F6t,"FlaxBigBirdForPreTraining"),F6t.forEach(t),_8r=r(jRe," (BigBird model)"),jRe.forEach(t),b8r=i(be),E3=n(be,"LI",{});var DRe=s(E3);eMe=n(DRe,"STRONG",{});var T6t=s(eMe);v8r=r(T6t,"electra"),T6t.forEach(t),F8r=r(DRe," \u2014 "),yH=n(DRe,"A",{href:!0});var M6t=s(yH);T8r=r(M6t,"FlaxElectraForPreTraining"),M6t.forEach(t),M8r=r(DRe," (ELECTRA model)"),DRe.forEach(t),E8r=i(be),C3=n(be,"LI",{});var GRe=s(C3);oMe=n(GRe,"STRONG",{});var E6t=s(oMe);C8r=r(E6t,"mbart"),E6t.forEach(t),w8r=r(GRe," \u2014 "),LH=n(GRe,"A",{href:!0});var C6t=s(LH);A8r=r(C6t,"FlaxMBartForConditionalGeneration"),C6t.forEach(t),y8r=r(GRe," (mBART model)"),GRe.forEach(t),L8r=i(be),w3=n(be,"LI",{});var ORe=s(w3);rMe=n(ORe,"STRONG",{});var w6t=s(rMe);x8r=r(w6t,"mt5"),w6t.forEach(t),k8r=r(ORe," \u2014 "),xH=n(ORe,"A",{href:!0});var A6t=s(xH);S8r=r(A6t,"FlaxMT5ForConditionalGeneration"),A6t.forEach(t),R8r=r(ORe," (mT5 model)"),ORe.forEach(t),B8r=i(be),A3=n(be,"LI",{});var VRe=s(A3);tMe=n(VRe,"STRONG",{});var y6t=s(tMe);P8r=r(y6t,"roberta"),y6t.forEach(t),$8r=r(VRe," \u2014 "),kH=n(VRe,"A",{href:!0});var L6t=s(kH);I8r=r(L6t,"FlaxRobertaForMaskedLM"),L6t.forEach(t),q8r=r(VRe," (RoBERTa model)"),VRe.forEach(t),N8r=i(be),y3=n(be,"LI",{});var XRe=s(y3);aMe=n(XRe,"STRONG",{});var x6t=s(aMe);j8r=r(x6t,"roformer"),x6t.forEach(t),D8r=r(XRe," \u2014 "),SH=n(XRe,"A",{href:!0});var k6t=s(SH);G8r=r(k6t,"FlaxRoFormerForMaskedLM"),k6t.forEach(t),O8r=r(XRe," (RoFormer model)"),XRe.forEach(t),V8r=i(be),L3=n(be,"LI",{});var zRe=s(L3);nMe=n(zRe,"STRONG",{});var S6t=s(nMe);X8r=r(S6t,"t5"),S6t.forEach(t),z8r=r(zRe," \u2014 "),RH=n(zRe,"A",{href:!0});var R6t=s(RH);Q8r=r(R6t,"FlaxT5ForConditionalGeneration"),R6t.forEach(t),W8r=r(zRe," (T5 model)"),zRe.forEach(t),H8r=i(be),x3=n(be,"LI",{});var QRe=s(x3);sMe=n(QRe,"STRONG",{});var B6t=s(sMe);U8r=r(B6t,"wav2vec2"),B6t.forEach(t),J8r=r(QRe," \u2014 "),BH=n(QRe,"A",{href:!0});var P6t=s(BH);Y8r=r(P6t,"FlaxWav2Vec2ForPreTraining"),P6t.forEach(t),K8r=r(QRe," (Wav2Vec2 model)"),QRe.forEach(t),Z8r=i(be),k3=n(be,"LI",{});var WRe=s(k3);lMe=n(WRe,"STRONG",{});var $6t=s(lMe);eLr=r($6t,"xlm-roberta"),$6t.forEach(t),oLr=r(WRe," \u2014 "),PH=n(WRe,"A",{href:!0});var I6t=s(PH);rLr=r(I6t,"FlaxXLMRobertaForMaskedLM"),I6t.forEach(t),tLr=r(WRe," (XLM-RoBERTa model)"),WRe.forEach(t),be.forEach(t),aLr=i(ka),iMe=n(ka,"P",{});var q6t=s(iMe);nLr=r(q6t,"Examples:"),q6t.forEach(t),sLr=i(ka),f(xL.$$.fragment,ka),ka.forEach(t),wi.forEach(t),I$e=i(c),um=n(c,"H2",{class:!0});var Wqe=s(um);S3=n(Wqe,"A",{id:!0,class:!0,href:!0});var N6t=s(S3);dMe=n(N6t,"SPAN",{});var j6t=s(dMe);f(kL.$$.fragment,j6t),j6t.forEach(t),N6t.forEach(t),lLr=i(Wqe),cMe=n(Wqe,"SPAN",{});var D6t=s(cMe);iLr=r(D6t,"FlaxAutoModelForMaskedLM"),D6t.forEach(t),Wqe.forEach(t),q$e=i(c),$r=n(c,"DIV",{class:!0});var yi=s($r);f(SL.$$.fragment,yi),dLr=i(yi),pm=n(yi,"P",{});var GY=s(pm);cLr=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$H=n(GY,"A",{href:!0});var G6t=s($H);mLr=r(G6t,"from_pretrained()"),G6t.forEach(t),fLr=r(GY," class method or the "),IH=n(GY,"A",{href:!0});var O6t=s(IH);gLr=r(O6t,"from_config()"),O6t.forEach(t),hLr=r(GY,` class
method.`),GY.forEach(t),uLr=i(yi),RL=n(yi,"P",{});var Hqe=s(RL);pLr=r(Hqe,"This class cannot be instantiated directly using "),mMe=n(Hqe,"CODE",{});var V6t=s(mMe);_Lr=r(V6t,"__init__()"),V6t.forEach(t),bLr=r(Hqe," (throws an error)."),Hqe.forEach(t),vLr=i(yi),xt=n(yi,"DIV",{class:!0});var Li=s(xt);f(BL.$$.fragment,Li),FLr=i(Li),fMe=n(Li,"P",{});var X6t=s(fMe);TLr=r(X6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X6t.forEach(t),MLr=i(Li),_m=n(Li,"P",{});var OY=s(_m);ELr=r(OY,`Note:
Loading a model from its configuration file does `),gMe=n(OY,"STRONG",{});var z6t=s(gMe);CLr=r(z6t,"not"),z6t.forEach(t),wLr=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(OY,"A",{href:!0});var Q6t=s(qH);ALr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),yLr=r(OY," to load the model weights."),OY.forEach(t),LLr=i(Li),hMe=n(Li,"P",{});var W6t=s(hMe);xLr=r(W6t,"Examples:"),W6t.forEach(t),kLr=i(Li),f(PL.$$.fragment,Li),Li.forEach(t),SLr=i(yi),So=n(yi,"DIV",{class:!0});var Sa=s(So);f($L.$$.fragment,Sa),RLr=i(Sa),uMe=n(Sa,"P",{});var H6t=s(uMe);BLr=r(H6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),H6t.forEach(t),PLr=i(Sa),Bn=n(Sa,"P",{});var I6=s(Bn);$Lr=r(I6,"The model class to instantiate is selected based on the "),pMe=n(I6,"CODE",{});var U6t=s(pMe);ILr=r(U6t,"model_type"),U6t.forEach(t),qLr=r(I6,` property of the config object (either
passed as an argument or loaded from `),_Me=n(I6,"CODE",{});var J6t=s(_Me);NLr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),jLr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(I6,"CODE",{});var Y6t=s(bMe);DLr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),GLr=r(I6,":"),I6.forEach(t),OLr=i(Sa),Te=n(Sa,"UL",{});var Le=s(Te);R3=n(Le,"LI",{});var HRe=s(R3);vMe=n(HRe,"STRONG",{});var K6t=s(vMe);VLr=r(K6t,"albert"),K6t.forEach(t),XLr=r(HRe," \u2014 "),NH=n(HRe,"A",{href:!0});var Z6t=s(NH);zLr=r(Z6t,"FlaxAlbertForMaskedLM"),Z6t.forEach(t),QLr=r(HRe," (ALBERT model)"),HRe.forEach(t),WLr=i(Le),B3=n(Le,"LI",{});var URe=s(B3);FMe=n(URe,"STRONG",{});var ewt=s(FMe);HLr=r(ewt,"bart"),ewt.forEach(t),ULr=r(URe," \u2014 "),jH=n(URe,"A",{href:!0});var owt=s(jH);JLr=r(owt,"FlaxBartForConditionalGeneration"),owt.forEach(t),YLr=r(URe," (BART model)"),URe.forEach(t),KLr=i(Le),P3=n(Le,"LI",{});var JRe=s(P3);TMe=n(JRe,"STRONG",{});var rwt=s(TMe);ZLr=r(rwt,"bert"),rwt.forEach(t),e7r=r(JRe," \u2014 "),DH=n(JRe,"A",{href:!0});var twt=s(DH);o7r=r(twt,"FlaxBertForMaskedLM"),twt.forEach(t),r7r=r(JRe," (BERT model)"),JRe.forEach(t),t7r=i(Le),$3=n(Le,"LI",{});var YRe=s($3);MMe=n(YRe,"STRONG",{});var awt=s(MMe);a7r=r(awt,"big_bird"),awt.forEach(t),n7r=r(YRe," \u2014 "),GH=n(YRe,"A",{href:!0});var nwt=s(GH);s7r=r(nwt,"FlaxBigBirdForMaskedLM"),nwt.forEach(t),l7r=r(YRe," (BigBird model)"),YRe.forEach(t),i7r=i(Le),I3=n(Le,"LI",{});var KRe=s(I3);EMe=n(KRe,"STRONG",{});var swt=s(EMe);d7r=r(swt,"distilbert"),swt.forEach(t),c7r=r(KRe," \u2014 "),OH=n(KRe,"A",{href:!0});var lwt=s(OH);m7r=r(lwt,"FlaxDistilBertForMaskedLM"),lwt.forEach(t),f7r=r(KRe," (DistilBERT model)"),KRe.forEach(t),g7r=i(Le),q3=n(Le,"LI",{});var ZRe=s(q3);CMe=n(ZRe,"STRONG",{});var iwt=s(CMe);h7r=r(iwt,"electra"),iwt.forEach(t),u7r=r(ZRe," \u2014 "),VH=n(ZRe,"A",{href:!0});var dwt=s(VH);p7r=r(dwt,"FlaxElectraForMaskedLM"),dwt.forEach(t),_7r=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),b7r=i(Le),N3=n(Le,"LI",{});var eBe=s(N3);wMe=n(eBe,"STRONG",{});var cwt=s(wMe);v7r=r(cwt,"mbart"),cwt.forEach(t),F7r=r(eBe," \u2014 "),XH=n(eBe,"A",{href:!0});var mwt=s(XH);T7r=r(mwt,"FlaxMBartForConditionalGeneration"),mwt.forEach(t),M7r=r(eBe," (mBART model)"),eBe.forEach(t),E7r=i(Le),j3=n(Le,"LI",{});var oBe=s(j3);AMe=n(oBe,"STRONG",{});var fwt=s(AMe);C7r=r(fwt,"roberta"),fwt.forEach(t),w7r=r(oBe," \u2014 "),zH=n(oBe,"A",{href:!0});var gwt=s(zH);A7r=r(gwt,"FlaxRobertaForMaskedLM"),gwt.forEach(t),y7r=r(oBe," (RoBERTa model)"),oBe.forEach(t),L7r=i(Le),D3=n(Le,"LI",{});var rBe=s(D3);yMe=n(rBe,"STRONG",{});var hwt=s(yMe);x7r=r(hwt,"roformer"),hwt.forEach(t),k7r=r(rBe," \u2014 "),QH=n(rBe,"A",{href:!0});var uwt=s(QH);S7r=r(uwt,"FlaxRoFormerForMaskedLM"),uwt.forEach(t),R7r=r(rBe," (RoFormer model)"),rBe.forEach(t),B7r=i(Le),G3=n(Le,"LI",{});var tBe=s(G3);LMe=n(tBe,"STRONG",{});var pwt=s(LMe);P7r=r(pwt,"xlm-roberta"),pwt.forEach(t),$7r=r(tBe," \u2014 "),WH=n(tBe,"A",{href:!0});var _wt=s(WH);I7r=r(_wt,"FlaxXLMRobertaForMaskedLM"),_wt.forEach(t),q7r=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),Le.forEach(t),N7r=i(Sa),xMe=n(Sa,"P",{});var bwt=s(xMe);j7r=r(bwt,"Examples:"),bwt.forEach(t),D7r=i(Sa),f(IL.$$.fragment,Sa),Sa.forEach(t),yi.forEach(t),N$e=i(c),bm=n(c,"H2",{class:!0});var Uqe=s(bm);O3=n(Uqe,"A",{id:!0,class:!0,href:!0});var vwt=s(O3);kMe=n(vwt,"SPAN",{});var Fwt=s(kMe);f(qL.$$.fragment,Fwt),Fwt.forEach(t),vwt.forEach(t),G7r=i(Uqe),SMe=n(Uqe,"SPAN",{});var Twt=s(SMe);O7r=r(Twt,"FlaxAutoModelForSeq2SeqLM"),Twt.forEach(t),Uqe.forEach(t),j$e=i(c),Ir=n(c,"DIV",{class:!0});var xi=s(Ir);f(NL.$$.fragment,xi),V7r=i(xi),vm=n(xi,"P",{});var VY=s(vm);X7r=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HH=n(VY,"A",{href:!0});var Mwt=s(HH);z7r=r(Mwt,"from_pretrained()"),Mwt.forEach(t),Q7r=r(VY," class method or the "),UH=n(VY,"A",{href:!0});var Ewt=s(UH);W7r=r(Ewt,"from_config()"),Ewt.forEach(t),H7r=r(VY,` class
method.`),VY.forEach(t),U7r=i(xi),jL=n(xi,"P",{});var Jqe=s(jL);J7r=r(Jqe,"This class cannot be instantiated directly using "),RMe=n(Jqe,"CODE",{});var Cwt=s(RMe);Y7r=r(Cwt,"__init__()"),Cwt.forEach(t),K7r=r(Jqe," (throws an error)."),Jqe.forEach(t),Z7r=i(xi),kt=n(xi,"DIV",{class:!0});var ki=s(kt);f(DL.$$.fragment,ki),e9r=i(ki),BMe=n(ki,"P",{});var wwt=s(BMe);o9r=r(wwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wwt.forEach(t),r9r=i(ki),Fm=n(ki,"P",{});var XY=s(Fm);t9r=r(XY,`Note:
Loading a model from its configuration file does `),PMe=n(XY,"STRONG",{});var Awt=s(PMe);a9r=r(Awt,"not"),Awt.forEach(t),n9r=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(XY,"A",{href:!0});var ywt=s(JH);s9r=r(ywt,"from_pretrained()"),ywt.forEach(t),l9r=r(XY," to load the model weights."),XY.forEach(t),i9r=i(ki),$Me=n(ki,"P",{});var Lwt=s($Me);d9r=r(Lwt,"Examples:"),Lwt.forEach(t),c9r=i(ki),f(GL.$$.fragment,ki),ki.forEach(t),m9r=i(xi),Ro=n(xi,"DIV",{class:!0});var Ra=s(Ro);f(OL.$$.fragment,Ra),f9r=i(Ra),IMe=n(Ra,"P",{});var xwt=s(IMe);g9r=r(xwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xwt.forEach(t),h9r=i(Ra),Pn=n(Ra,"P",{});var q6=s(Pn);u9r=r(q6,"The model class to instantiate is selected based on the "),qMe=n(q6,"CODE",{});var kwt=s(qMe);p9r=r(kwt,"model_type"),kwt.forEach(t),_9r=r(q6,` property of the config object (either
passed as an argument or loaded from `),NMe=n(q6,"CODE",{});var Swt=s(NMe);b9r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),v9r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=n(q6,"CODE",{});var Rwt=s(jMe);F9r=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),T9r=r(q6,":"),q6.forEach(t),M9r=i(Ra),we=n(Ra,"UL",{});var lo=s(we);V3=n(lo,"LI",{});var aBe=s(V3);DMe=n(aBe,"STRONG",{});var Bwt=s(DMe);E9r=r(Bwt,"bart"),Bwt.forEach(t),C9r=r(aBe," \u2014 "),YH=n(aBe,"A",{href:!0});var Pwt=s(YH);w9r=r(Pwt,"FlaxBartForConditionalGeneration"),Pwt.forEach(t),A9r=r(aBe," (BART model)"),aBe.forEach(t),y9r=i(lo),X3=n(lo,"LI",{});var nBe=s(X3);GMe=n(nBe,"STRONG",{});var $wt=s(GMe);L9r=r($wt,"blenderbot"),$wt.forEach(t),x9r=r(nBe," \u2014 "),KH=n(nBe,"A",{href:!0});var Iwt=s(KH);k9r=r(Iwt,"FlaxBlenderbotForConditionalGeneration"),Iwt.forEach(t),S9r=r(nBe," (Blenderbot model)"),nBe.forEach(t),R9r=i(lo),z3=n(lo,"LI",{});var sBe=s(z3);OMe=n(sBe,"STRONG",{});var qwt=s(OMe);B9r=r(qwt,"blenderbot-small"),qwt.forEach(t),P9r=r(sBe," \u2014 "),ZH=n(sBe,"A",{href:!0});var Nwt=s(ZH);$9r=r(Nwt,"FlaxBlenderbotSmallForConditionalGeneration"),Nwt.forEach(t),I9r=r(sBe," (BlenderbotSmall model)"),sBe.forEach(t),q9r=i(lo),Q3=n(lo,"LI",{});var lBe=s(Q3);VMe=n(lBe,"STRONG",{});var jwt=s(VMe);N9r=r(jwt,"encoder-decoder"),jwt.forEach(t),j9r=r(lBe," \u2014 "),eU=n(lBe,"A",{href:!0});var Dwt=s(eU);D9r=r(Dwt,"FlaxEncoderDecoderModel"),Dwt.forEach(t),G9r=r(lBe," (Encoder decoder model)"),lBe.forEach(t),O9r=i(lo),W3=n(lo,"LI",{});var iBe=s(W3);XMe=n(iBe,"STRONG",{});var Gwt=s(XMe);V9r=r(Gwt,"marian"),Gwt.forEach(t),X9r=r(iBe," \u2014 "),oU=n(iBe,"A",{href:!0});var Owt=s(oU);z9r=r(Owt,"FlaxMarianMTModel"),Owt.forEach(t),Q9r=r(iBe," (Marian model)"),iBe.forEach(t),W9r=i(lo),H3=n(lo,"LI",{});var dBe=s(H3);zMe=n(dBe,"STRONG",{});var Vwt=s(zMe);H9r=r(Vwt,"mbart"),Vwt.forEach(t),U9r=r(dBe," \u2014 "),rU=n(dBe,"A",{href:!0});var Xwt=s(rU);J9r=r(Xwt,"FlaxMBartForConditionalGeneration"),Xwt.forEach(t),Y9r=r(dBe," (mBART model)"),dBe.forEach(t),K9r=i(lo),U3=n(lo,"LI",{});var cBe=s(U3);QMe=n(cBe,"STRONG",{});var zwt=s(QMe);Z9r=r(zwt,"mt5"),zwt.forEach(t),exr=r(cBe," \u2014 "),tU=n(cBe,"A",{href:!0});var Qwt=s(tU);oxr=r(Qwt,"FlaxMT5ForConditionalGeneration"),Qwt.forEach(t),rxr=r(cBe," (mT5 model)"),cBe.forEach(t),txr=i(lo),J3=n(lo,"LI",{});var mBe=s(J3);WMe=n(mBe,"STRONG",{});var Wwt=s(WMe);axr=r(Wwt,"pegasus"),Wwt.forEach(t),nxr=r(mBe," \u2014 "),aU=n(mBe,"A",{href:!0});var Hwt=s(aU);sxr=r(Hwt,"FlaxPegasusForConditionalGeneration"),Hwt.forEach(t),lxr=r(mBe," (Pegasus model)"),mBe.forEach(t),ixr=i(lo),Y3=n(lo,"LI",{});var fBe=s(Y3);HMe=n(fBe,"STRONG",{});var Uwt=s(HMe);dxr=r(Uwt,"t5"),Uwt.forEach(t),cxr=r(fBe," \u2014 "),nU=n(fBe,"A",{href:!0});var Jwt=s(nU);mxr=r(Jwt,"FlaxT5ForConditionalGeneration"),Jwt.forEach(t),fxr=r(fBe," (T5 model)"),fBe.forEach(t),lo.forEach(t),gxr=i(Ra),UMe=n(Ra,"P",{});var Ywt=s(UMe);hxr=r(Ywt,"Examples:"),Ywt.forEach(t),uxr=i(Ra),f(VL.$$.fragment,Ra),Ra.forEach(t),xi.forEach(t),D$e=i(c),Tm=n(c,"H2",{class:!0});var Yqe=s(Tm);K3=n(Yqe,"A",{id:!0,class:!0,href:!0});var Kwt=s(K3);JMe=n(Kwt,"SPAN",{});var Zwt=s(JMe);f(XL.$$.fragment,Zwt),Zwt.forEach(t),Kwt.forEach(t),pxr=i(Yqe),YMe=n(Yqe,"SPAN",{});var eAt=s(YMe);_xr=r(eAt,"FlaxAutoModelForSequenceClassification"),eAt.forEach(t),Yqe.forEach(t),G$e=i(c),qr=n(c,"DIV",{class:!0});var Si=s(qr);f(zL.$$.fragment,Si),bxr=i(Si),Mm=n(Si,"P",{});var zY=s(Mm);vxr=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sU=n(zY,"A",{href:!0});var oAt=s(sU);Fxr=r(oAt,"from_pretrained()"),oAt.forEach(t),Txr=r(zY," class method or the "),lU=n(zY,"A",{href:!0});var rAt=s(lU);Mxr=r(rAt,"from_config()"),rAt.forEach(t),Exr=r(zY,` class
method.`),zY.forEach(t),Cxr=i(Si),QL=n(Si,"P",{});var Kqe=s(QL);wxr=r(Kqe,"This class cannot be instantiated directly using "),KMe=n(Kqe,"CODE",{});var tAt=s(KMe);Axr=r(tAt,"__init__()"),tAt.forEach(t),yxr=r(Kqe," (throws an error)."),Kqe.forEach(t),Lxr=i(Si),St=n(Si,"DIV",{class:!0});var Ri=s(St);f(WL.$$.fragment,Ri),xxr=i(Ri),ZMe=n(Ri,"P",{});var aAt=s(ZMe);kxr=r(aAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aAt.forEach(t),Sxr=i(Ri),Em=n(Ri,"P",{});var QY=s(Em);Rxr=r(QY,`Note:
Loading a model from its configuration file does `),e4e=n(QY,"STRONG",{});var nAt=s(e4e);Bxr=r(nAt,"not"),nAt.forEach(t),Pxr=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(QY,"A",{href:!0});var sAt=s(iU);$xr=r(sAt,"from_pretrained()"),sAt.forEach(t),Ixr=r(QY," to load the model weights."),QY.forEach(t),qxr=i(Ri),o4e=n(Ri,"P",{});var lAt=s(o4e);Nxr=r(lAt,"Examples:"),lAt.forEach(t),jxr=i(Ri),f(HL.$$.fragment,Ri),Ri.forEach(t),Dxr=i(Si),Bo=n(Si,"DIV",{class:!0});var Ba=s(Bo);f(UL.$$.fragment,Ba),Gxr=i(Ba),r4e=n(Ba,"P",{});var iAt=s(r4e);Oxr=r(iAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iAt.forEach(t),Vxr=i(Ba),$n=n(Ba,"P",{});var N6=s($n);Xxr=r(N6,"The model class to instantiate is selected based on the "),t4e=n(N6,"CODE",{});var dAt=s(t4e);zxr=r(dAt,"model_type"),dAt.forEach(t),Qxr=r(N6,` property of the config object (either
passed as an argument or loaded from `),a4e=n(N6,"CODE",{});var cAt=s(a4e);Wxr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),Hxr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(N6,"CODE",{});var mAt=s(n4e);Uxr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),Jxr=r(N6,":"),N6.forEach(t),Yxr=i(Ba),Me=n(Ba,"UL",{});var xe=s(Me);Z3=n(xe,"LI",{});var gBe=s(Z3);s4e=n(gBe,"STRONG",{});var fAt=s(s4e);Kxr=r(fAt,"albert"),fAt.forEach(t),Zxr=r(gBe," \u2014 "),dU=n(gBe,"A",{href:!0});var gAt=s(dU);ekr=r(gAt,"FlaxAlbertForSequenceClassification"),gAt.forEach(t),okr=r(gBe," (ALBERT model)"),gBe.forEach(t),rkr=i(xe),eC=n(xe,"LI",{});var hBe=s(eC);l4e=n(hBe,"STRONG",{});var hAt=s(l4e);tkr=r(hAt,"bart"),hAt.forEach(t),akr=r(hBe," \u2014 "),cU=n(hBe,"A",{href:!0});var uAt=s(cU);nkr=r(uAt,"FlaxBartForSequenceClassification"),uAt.forEach(t),skr=r(hBe," (BART model)"),hBe.forEach(t),lkr=i(xe),oC=n(xe,"LI",{});var uBe=s(oC);i4e=n(uBe,"STRONG",{});var pAt=s(i4e);ikr=r(pAt,"bert"),pAt.forEach(t),dkr=r(uBe," \u2014 "),mU=n(uBe,"A",{href:!0});var _At=s(mU);ckr=r(_At,"FlaxBertForSequenceClassification"),_At.forEach(t),mkr=r(uBe," (BERT model)"),uBe.forEach(t),fkr=i(xe),rC=n(xe,"LI",{});var pBe=s(rC);d4e=n(pBe,"STRONG",{});var bAt=s(d4e);gkr=r(bAt,"big_bird"),bAt.forEach(t),hkr=r(pBe," \u2014 "),fU=n(pBe,"A",{href:!0});var vAt=s(fU);ukr=r(vAt,"FlaxBigBirdForSequenceClassification"),vAt.forEach(t),pkr=r(pBe," (BigBird model)"),pBe.forEach(t),_kr=i(xe),tC=n(xe,"LI",{});var _Be=s(tC);c4e=n(_Be,"STRONG",{});var FAt=s(c4e);bkr=r(FAt,"distilbert"),FAt.forEach(t),vkr=r(_Be," \u2014 "),gU=n(_Be,"A",{href:!0});var TAt=s(gU);Fkr=r(TAt,"FlaxDistilBertForSequenceClassification"),TAt.forEach(t),Tkr=r(_Be," (DistilBERT model)"),_Be.forEach(t),Mkr=i(xe),aC=n(xe,"LI",{});var bBe=s(aC);m4e=n(bBe,"STRONG",{});var MAt=s(m4e);Ekr=r(MAt,"electra"),MAt.forEach(t),Ckr=r(bBe," \u2014 "),hU=n(bBe,"A",{href:!0});var EAt=s(hU);wkr=r(EAt,"FlaxElectraForSequenceClassification"),EAt.forEach(t),Akr=r(bBe," (ELECTRA model)"),bBe.forEach(t),ykr=i(xe),nC=n(xe,"LI",{});var vBe=s(nC);f4e=n(vBe,"STRONG",{});var CAt=s(f4e);Lkr=r(CAt,"mbart"),CAt.forEach(t),xkr=r(vBe," \u2014 "),uU=n(vBe,"A",{href:!0});var wAt=s(uU);kkr=r(wAt,"FlaxMBartForSequenceClassification"),wAt.forEach(t),Skr=r(vBe," (mBART model)"),vBe.forEach(t),Rkr=i(xe),sC=n(xe,"LI",{});var FBe=s(sC);g4e=n(FBe,"STRONG",{});var AAt=s(g4e);Bkr=r(AAt,"roberta"),AAt.forEach(t),Pkr=r(FBe," \u2014 "),pU=n(FBe,"A",{href:!0});var yAt=s(pU);$kr=r(yAt,"FlaxRobertaForSequenceClassification"),yAt.forEach(t),Ikr=r(FBe," (RoBERTa model)"),FBe.forEach(t),qkr=i(xe),lC=n(xe,"LI",{});var TBe=s(lC);h4e=n(TBe,"STRONG",{});var LAt=s(h4e);Nkr=r(LAt,"roformer"),LAt.forEach(t),jkr=r(TBe," \u2014 "),_U=n(TBe,"A",{href:!0});var xAt=s(_U);Dkr=r(xAt,"FlaxRoFormerForSequenceClassification"),xAt.forEach(t),Gkr=r(TBe," (RoFormer model)"),TBe.forEach(t),Okr=i(xe),iC=n(xe,"LI",{});var MBe=s(iC);u4e=n(MBe,"STRONG",{});var kAt=s(u4e);Vkr=r(kAt,"xlm-roberta"),kAt.forEach(t),Xkr=r(MBe," \u2014 "),bU=n(MBe,"A",{href:!0});var SAt=s(bU);zkr=r(SAt,"FlaxXLMRobertaForSequenceClassification"),SAt.forEach(t),Qkr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),xe.forEach(t),Wkr=i(Ba),p4e=n(Ba,"P",{});var RAt=s(p4e);Hkr=r(RAt,"Examples:"),RAt.forEach(t),Ukr=i(Ba),f(JL.$$.fragment,Ba),Ba.forEach(t),Si.forEach(t),O$e=i(c),Cm=n(c,"H2",{class:!0});var Zqe=s(Cm);dC=n(Zqe,"A",{id:!0,class:!0,href:!0});var BAt=s(dC);_4e=n(BAt,"SPAN",{});var PAt=s(_4e);f(YL.$$.fragment,PAt),PAt.forEach(t),BAt.forEach(t),Jkr=i(Zqe),b4e=n(Zqe,"SPAN",{});var $At=s(b4e);Ykr=r($At,"FlaxAutoModelForQuestionAnswering"),$At.forEach(t),Zqe.forEach(t),V$e=i(c),Nr=n(c,"DIV",{class:!0});var Bi=s(Nr);f(KL.$$.fragment,Bi),Kkr=i(Bi),wm=n(Bi,"P",{});var WY=s(wm);Zkr=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vU=n(WY,"A",{href:!0});var IAt=s(vU);eSr=r(IAt,"from_pretrained()"),IAt.forEach(t),oSr=r(WY," class method or the "),FU=n(WY,"A",{href:!0});var qAt=s(FU);rSr=r(qAt,"from_config()"),qAt.forEach(t),tSr=r(WY,` class
method.`),WY.forEach(t),aSr=i(Bi),ZL=n(Bi,"P",{});var eNe=s(ZL);nSr=r(eNe,"This class cannot be instantiated directly using "),v4e=n(eNe,"CODE",{});var NAt=s(v4e);sSr=r(NAt,"__init__()"),NAt.forEach(t),lSr=r(eNe," (throws an error)."),eNe.forEach(t),iSr=i(Bi),Rt=n(Bi,"DIV",{class:!0});var Pi=s(Rt);f(e7.$$.fragment,Pi),dSr=i(Pi),F4e=n(Pi,"P",{});var jAt=s(F4e);cSr=r(jAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jAt.forEach(t),mSr=i(Pi),Am=n(Pi,"P",{});var HY=s(Am);fSr=r(HY,`Note:
Loading a model from its configuration file does `),T4e=n(HY,"STRONG",{});var DAt=s(T4e);gSr=r(DAt,"not"),DAt.forEach(t),hSr=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(HY,"A",{href:!0});var GAt=s(TU);uSr=r(GAt,"from_pretrained()"),GAt.forEach(t),pSr=r(HY," to load the model weights."),HY.forEach(t),_Sr=i(Pi),M4e=n(Pi,"P",{});var OAt=s(M4e);bSr=r(OAt,"Examples:"),OAt.forEach(t),vSr=i(Pi),f(o7.$$.fragment,Pi),Pi.forEach(t),FSr=i(Bi),Po=n(Bi,"DIV",{class:!0});var Pa=s(Po);f(r7.$$.fragment,Pa),TSr=i(Pa),E4e=n(Pa,"P",{});var VAt=s(E4e);MSr=r(VAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VAt.forEach(t),ESr=i(Pa),In=n(Pa,"P",{});var j6=s(In);CSr=r(j6,"The model class to instantiate is selected based on the "),C4e=n(j6,"CODE",{});var XAt=s(C4e);wSr=r(XAt,"model_type"),XAt.forEach(t),ASr=r(j6,` property of the config object (either
passed as an argument or loaded from `),w4e=n(j6,"CODE",{});var zAt=s(w4e);ySr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),LSr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=n(j6,"CODE",{});var QAt=s(A4e);xSr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),kSr=r(j6,":"),j6.forEach(t),SSr=i(Pa),Ee=n(Pa,"UL",{});var ke=s(Ee);cC=n(ke,"LI",{});var EBe=s(cC);y4e=n(EBe,"STRONG",{});var WAt=s(y4e);RSr=r(WAt,"albert"),WAt.forEach(t),BSr=r(EBe," \u2014 "),MU=n(EBe,"A",{href:!0});var HAt=s(MU);PSr=r(HAt,"FlaxAlbertForQuestionAnswering"),HAt.forEach(t),$Sr=r(EBe," (ALBERT model)"),EBe.forEach(t),ISr=i(ke),mC=n(ke,"LI",{});var CBe=s(mC);L4e=n(CBe,"STRONG",{});var UAt=s(L4e);qSr=r(UAt,"bart"),UAt.forEach(t),NSr=r(CBe," \u2014 "),EU=n(CBe,"A",{href:!0});var JAt=s(EU);jSr=r(JAt,"FlaxBartForQuestionAnswering"),JAt.forEach(t),DSr=r(CBe," (BART model)"),CBe.forEach(t),GSr=i(ke),fC=n(ke,"LI",{});var wBe=s(fC);x4e=n(wBe,"STRONG",{});var YAt=s(x4e);OSr=r(YAt,"bert"),YAt.forEach(t),VSr=r(wBe," \u2014 "),CU=n(wBe,"A",{href:!0});var KAt=s(CU);XSr=r(KAt,"FlaxBertForQuestionAnswering"),KAt.forEach(t),zSr=r(wBe," (BERT model)"),wBe.forEach(t),QSr=i(ke),gC=n(ke,"LI",{});var ABe=s(gC);k4e=n(ABe,"STRONG",{});var ZAt=s(k4e);WSr=r(ZAt,"big_bird"),ZAt.forEach(t),HSr=r(ABe," \u2014 "),wU=n(ABe,"A",{href:!0});var e0t=s(wU);USr=r(e0t,"FlaxBigBirdForQuestionAnswering"),e0t.forEach(t),JSr=r(ABe," (BigBird model)"),ABe.forEach(t),YSr=i(ke),hC=n(ke,"LI",{});var yBe=s(hC);S4e=n(yBe,"STRONG",{});var o0t=s(S4e);KSr=r(o0t,"distilbert"),o0t.forEach(t),ZSr=r(yBe," \u2014 "),AU=n(yBe,"A",{href:!0});var r0t=s(AU);eRr=r(r0t,"FlaxDistilBertForQuestionAnswering"),r0t.forEach(t),oRr=r(yBe," (DistilBERT model)"),yBe.forEach(t),rRr=i(ke),uC=n(ke,"LI",{});var LBe=s(uC);R4e=n(LBe,"STRONG",{});var t0t=s(R4e);tRr=r(t0t,"electra"),t0t.forEach(t),aRr=r(LBe," \u2014 "),yU=n(LBe,"A",{href:!0});var a0t=s(yU);nRr=r(a0t,"FlaxElectraForQuestionAnswering"),a0t.forEach(t),sRr=r(LBe," (ELECTRA model)"),LBe.forEach(t),lRr=i(ke),pC=n(ke,"LI",{});var xBe=s(pC);B4e=n(xBe,"STRONG",{});var n0t=s(B4e);iRr=r(n0t,"mbart"),n0t.forEach(t),dRr=r(xBe," \u2014 "),LU=n(xBe,"A",{href:!0});var s0t=s(LU);cRr=r(s0t,"FlaxMBartForQuestionAnswering"),s0t.forEach(t),mRr=r(xBe," (mBART model)"),xBe.forEach(t),fRr=i(ke),_C=n(ke,"LI",{});var kBe=s(_C);P4e=n(kBe,"STRONG",{});var l0t=s(P4e);gRr=r(l0t,"roberta"),l0t.forEach(t),hRr=r(kBe," \u2014 "),xU=n(kBe,"A",{href:!0});var i0t=s(xU);uRr=r(i0t,"FlaxRobertaForQuestionAnswering"),i0t.forEach(t),pRr=r(kBe," (RoBERTa model)"),kBe.forEach(t),_Rr=i(ke),bC=n(ke,"LI",{});var SBe=s(bC);$4e=n(SBe,"STRONG",{});var d0t=s($4e);bRr=r(d0t,"roformer"),d0t.forEach(t),vRr=r(SBe," \u2014 "),kU=n(SBe,"A",{href:!0});var c0t=s(kU);FRr=r(c0t,"FlaxRoFormerForQuestionAnswering"),c0t.forEach(t),TRr=r(SBe," (RoFormer model)"),SBe.forEach(t),MRr=i(ke),vC=n(ke,"LI",{});var RBe=s(vC);I4e=n(RBe,"STRONG",{});var m0t=s(I4e);ERr=r(m0t,"xlm-roberta"),m0t.forEach(t),CRr=r(RBe," \u2014 "),SU=n(RBe,"A",{href:!0});var f0t=s(SU);wRr=r(f0t,"FlaxXLMRobertaForQuestionAnswering"),f0t.forEach(t),ARr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),ke.forEach(t),yRr=i(Pa),q4e=n(Pa,"P",{});var g0t=s(q4e);LRr=r(g0t,"Examples:"),g0t.forEach(t),xRr=i(Pa),f(t7.$$.fragment,Pa),Pa.forEach(t),Bi.forEach(t),X$e=i(c),ym=n(c,"H2",{class:!0});var oNe=s(ym);FC=n(oNe,"A",{id:!0,class:!0,href:!0});var h0t=s(FC);N4e=n(h0t,"SPAN",{});var u0t=s(N4e);f(a7.$$.fragment,u0t),u0t.forEach(t),h0t.forEach(t),kRr=i(oNe),j4e=n(oNe,"SPAN",{});var p0t=s(j4e);SRr=r(p0t,"FlaxAutoModelForTokenClassification"),p0t.forEach(t),oNe.forEach(t),z$e=i(c),jr=n(c,"DIV",{class:!0});var $i=s(jr);f(n7.$$.fragment,$i),RRr=i($i),Lm=n($i,"P",{});var UY=s(Lm);BRr=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RU=n(UY,"A",{href:!0});var _0t=s(RU);PRr=r(_0t,"from_pretrained()"),_0t.forEach(t),$Rr=r(UY," class method or the "),BU=n(UY,"A",{href:!0});var b0t=s(BU);IRr=r(b0t,"from_config()"),b0t.forEach(t),qRr=r(UY,` class
method.`),UY.forEach(t),NRr=i($i),s7=n($i,"P",{});var rNe=s(s7);jRr=r(rNe,"This class cannot be instantiated directly using "),D4e=n(rNe,"CODE",{});var v0t=s(D4e);DRr=r(v0t,"__init__()"),v0t.forEach(t),GRr=r(rNe," (throws an error)."),rNe.forEach(t),ORr=i($i),Bt=n($i,"DIV",{class:!0});var Ii=s(Bt);f(l7.$$.fragment,Ii),VRr=i(Ii),G4e=n(Ii,"P",{});var F0t=s(G4e);XRr=r(F0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),F0t.forEach(t),zRr=i(Ii),xm=n(Ii,"P",{});var JY=s(xm);QRr=r(JY,`Note:
Loading a model from its configuration file does `),O4e=n(JY,"STRONG",{});var T0t=s(O4e);WRr=r(T0t,"not"),T0t.forEach(t),HRr=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(JY,"A",{href:!0});var M0t=s(PU);URr=r(M0t,"from_pretrained()"),M0t.forEach(t),JRr=r(JY," to load the model weights."),JY.forEach(t),YRr=i(Ii),V4e=n(Ii,"P",{});var E0t=s(V4e);KRr=r(E0t,"Examples:"),E0t.forEach(t),ZRr=i(Ii),f(i7.$$.fragment,Ii),Ii.forEach(t),eBr=i($i),$o=n($i,"DIV",{class:!0});var $a=s($o);f(d7.$$.fragment,$a),oBr=i($a),X4e=n($a,"P",{});var C0t=s(X4e);rBr=r(C0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C0t.forEach(t),tBr=i($a),qn=n($a,"P",{});var D6=s(qn);aBr=r(D6,"The model class to instantiate is selected based on the "),z4e=n(D6,"CODE",{});var w0t=s(z4e);nBr=r(w0t,"model_type"),w0t.forEach(t),sBr=r(D6,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(D6,"CODE",{});var A0t=s(Q4e);lBr=r(A0t,"pretrained_model_name_or_path"),A0t.forEach(t),iBr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(D6,"CODE",{});var y0t=s(W4e);dBr=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),cBr=r(D6,":"),D6.forEach(t),mBr=i($a),Pe=n($a,"UL",{});var Oo=s(Pe);TC=n(Oo,"LI",{});var BBe=s(TC);H4e=n(BBe,"STRONG",{});var L0t=s(H4e);fBr=r(L0t,"albert"),L0t.forEach(t),gBr=r(BBe," \u2014 "),$U=n(BBe,"A",{href:!0});var x0t=s($U);hBr=r(x0t,"FlaxAlbertForTokenClassification"),x0t.forEach(t),uBr=r(BBe," (ALBERT model)"),BBe.forEach(t),pBr=i(Oo),MC=n(Oo,"LI",{});var PBe=s(MC);U4e=n(PBe,"STRONG",{});var k0t=s(U4e);_Br=r(k0t,"bert"),k0t.forEach(t),bBr=r(PBe," \u2014 "),IU=n(PBe,"A",{href:!0});var S0t=s(IU);vBr=r(S0t,"FlaxBertForTokenClassification"),S0t.forEach(t),FBr=r(PBe," (BERT model)"),PBe.forEach(t),TBr=i(Oo),EC=n(Oo,"LI",{});var $Be=s(EC);J4e=n($Be,"STRONG",{});var R0t=s(J4e);MBr=r(R0t,"big_bird"),R0t.forEach(t),EBr=r($Be," \u2014 "),qU=n($Be,"A",{href:!0});var B0t=s(qU);CBr=r(B0t,"FlaxBigBirdForTokenClassification"),B0t.forEach(t),wBr=r($Be," (BigBird model)"),$Be.forEach(t),ABr=i(Oo),CC=n(Oo,"LI",{});var IBe=s(CC);Y4e=n(IBe,"STRONG",{});var P0t=s(Y4e);yBr=r(P0t,"distilbert"),P0t.forEach(t),LBr=r(IBe," \u2014 "),NU=n(IBe,"A",{href:!0});var $0t=s(NU);xBr=r($0t,"FlaxDistilBertForTokenClassification"),$0t.forEach(t),kBr=r(IBe," (DistilBERT model)"),IBe.forEach(t),SBr=i(Oo),wC=n(Oo,"LI",{});var qBe=s(wC);K4e=n(qBe,"STRONG",{});var I0t=s(K4e);RBr=r(I0t,"electra"),I0t.forEach(t),BBr=r(qBe," \u2014 "),jU=n(qBe,"A",{href:!0});var q0t=s(jU);PBr=r(q0t,"FlaxElectraForTokenClassification"),q0t.forEach(t),$Br=r(qBe," (ELECTRA model)"),qBe.forEach(t),IBr=i(Oo),AC=n(Oo,"LI",{});var NBe=s(AC);Z4e=n(NBe,"STRONG",{});var N0t=s(Z4e);qBr=r(N0t,"roberta"),N0t.forEach(t),NBr=r(NBe," \u2014 "),DU=n(NBe,"A",{href:!0});var j0t=s(DU);jBr=r(j0t,"FlaxRobertaForTokenClassification"),j0t.forEach(t),DBr=r(NBe," (RoBERTa model)"),NBe.forEach(t),GBr=i(Oo),yC=n(Oo,"LI",{});var jBe=s(yC);eEe=n(jBe,"STRONG",{});var D0t=s(eEe);OBr=r(D0t,"roformer"),D0t.forEach(t),VBr=r(jBe," \u2014 "),GU=n(jBe,"A",{href:!0});var G0t=s(GU);XBr=r(G0t,"FlaxRoFormerForTokenClassification"),G0t.forEach(t),zBr=r(jBe," (RoFormer model)"),jBe.forEach(t),QBr=i(Oo),LC=n(Oo,"LI",{});var DBe=s(LC);oEe=n(DBe,"STRONG",{});var O0t=s(oEe);WBr=r(O0t,"xlm-roberta"),O0t.forEach(t),HBr=r(DBe," \u2014 "),OU=n(DBe,"A",{href:!0});var V0t=s(OU);UBr=r(V0t,"FlaxXLMRobertaForTokenClassification"),V0t.forEach(t),JBr=r(DBe," (XLM-RoBERTa model)"),DBe.forEach(t),Oo.forEach(t),YBr=i($a),rEe=n($a,"P",{});var X0t=s(rEe);KBr=r(X0t,"Examples:"),X0t.forEach(t),ZBr=i($a),f(c7.$$.fragment,$a),$a.forEach(t),$i.forEach(t),Q$e=i(c),km=n(c,"H2",{class:!0});var tNe=s(km);xC=n(tNe,"A",{id:!0,class:!0,href:!0});var z0t=s(xC);tEe=n(z0t,"SPAN",{});var Q0t=s(tEe);f(m7.$$.fragment,Q0t),Q0t.forEach(t),z0t.forEach(t),ePr=i(tNe),aEe=n(tNe,"SPAN",{});var W0t=s(aEe);oPr=r(W0t,"FlaxAutoModelForMultipleChoice"),W0t.forEach(t),tNe.forEach(t),W$e=i(c),Dr=n(c,"DIV",{class:!0});var qi=s(Dr);f(f7.$$.fragment,qi),rPr=i(qi),Sm=n(qi,"P",{});var YY=s(Sm);tPr=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VU=n(YY,"A",{href:!0});var H0t=s(VU);aPr=r(H0t,"from_pretrained()"),H0t.forEach(t),nPr=r(YY," class method or the "),XU=n(YY,"A",{href:!0});var U0t=s(XU);sPr=r(U0t,"from_config()"),U0t.forEach(t),lPr=r(YY,` class
method.`),YY.forEach(t),iPr=i(qi),g7=n(qi,"P",{});var aNe=s(g7);dPr=r(aNe,"This class cannot be instantiated directly using "),nEe=n(aNe,"CODE",{});var J0t=s(nEe);cPr=r(J0t,"__init__()"),J0t.forEach(t),mPr=r(aNe," (throws an error)."),aNe.forEach(t),fPr=i(qi),Pt=n(qi,"DIV",{class:!0});var Ni=s(Pt);f(h7.$$.fragment,Ni),gPr=i(Ni),sEe=n(Ni,"P",{});var Y0t=s(sEe);hPr=r(Y0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Y0t.forEach(t),uPr=i(Ni),Rm=n(Ni,"P",{});var KY=s(Rm);pPr=r(KY,`Note:
Loading a model from its configuration file does `),lEe=n(KY,"STRONG",{});var K0t=s(lEe);_Pr=r(K0t,"not"),K0t.forEach(t),bPr=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(KY,"A",{href:!0});var Z0t=s(zU);vPr=r(Z0t,"from_pretrained()"),Z0t.forEach(t),FPr=r(KY," to load the model weights."),KY.forEach(t),TPr=i(Ni),iEe=n(Ni,"P",{});var eyt=s(iEe);MPr=r(eyt,"Examples:"),eyt.forEach(t),EPr=i(Ni),f(u7.$$.fragment,Ni),Ni.forEach(t),CPr=i(qi),Io=n(qi,"DIV",{class:!0});var Ia=s(Io);f(p7.$$.fragment,Ia),wPr=i(Ia),dEe=n(Ia,"P",{});var oyt=s(dEe);APr=r(oyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oyt.forEach(t),yPr=i(Ia),Nn=n(Ia,"P",{});var G6=s(Nn);LPr=r(G6,"The model class to instantiate is selected based on the "),cEe=n(G6,"CODE",{});var ryt=s(cEe);xPr=r(ryt,"model_type"),ryt.forEach(t),kPr=r(G6,` property of the config object (either
passed as an argument or loaded from `),mEe=n(G6,"CODE",{});var tyt=s(mEe);SPr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),RPr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(G6,"CODE",{});var ayt=s(fEe);BPr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),PPr=r(G6,":"),G6.forEach(t),$Pr=i(Ia),$e=n(Ia,"UL",{});var Vo=s($e);kC=n(Vo,"LI",{});var GBe=s(kC);gEe=n(GBe,"STRONG",{});var nyt=s(gEe);IPr=r(nyt,"albert"),nyt.forEach(t),qPr=r(GBe," \u2014 "),QU=n(GBe,"A",{href:!0});var syt=s(QU);NPr=r(syt,"FlaxAlbertForMultipleChoice"),syt.forEach(t),jPr=r(GBe," (ALBERT model)"),GBe.forEach(t),DPr=i(Vo),SC=n(Vo,"LI",{});var OBe=s(SC);hEe=n(OBe,"STRONG",{});var lyt=s(hEe);GPr=r(lyt,"bert"),lyt.forEach(t),OPr=r(OBe," \u2014 "),WU=n(OBe,"A",{href:!0});var iyt=s(WU);VPr=r(iyt,"FlaxBertForMultipleChoice"),iyt.forEach(t),XPr=r(OBe," (BERT model)"),OBe.forEach(t),zPr=i(Vo),RC=n(Vo,"LI",{});var VBe=s(RC);uEe=n(VBe,"STRONG",{});var dyt=s(uEe);QPr=r(dyt,"big_bird"),dyt.forEach(t),WPr=r(VBe," \u2014 "),HU=n(VBe,"A",{href:!0});var cyt=s(HU);HPr=r(cyt,"FlaxBigBirdForMultipleChoice"),cyt.forEach(t),UPr=r(VBe," (BigBird model)"),VBe.forEach(t),JPr=i(Vo),BC=n(Vo,"LI",{});var XBe=s(BC);pEe=n(XBe,"STRONG",{});var myt=s(pEe);YPr=r(myt,"distilbert"),myt.forEach(t),KPr=r(XBe," \u2014 "),UU=n(XBe,"A",{href:!0});var fyt=s(UU);ZPr=r(fyt,"FlaxDistilBertForMultipleChoice"),fyt.forEach(t),e$r=r(XBe," (DistilBERT model)"),XBe.forEach(t),o$r=i(Vo),PC=n(Vo,"LI",{});var zBe=s(PC);_Ee=n(zBe,"STRONG",{});var gyt=s(_Ee);r$r=r(gyt,"electra"),gyt.forEach(t),t$r=r(zBe," \u2014 "),JU=n(zBe,"A",{href:!0});var hyt=s(JU);a$r=r(hyt,"FlaxElectraForMultipleChoice"),hyt.forEach(t),n$r=r(zBe," (ELECTRA model)"),zBe.forEach(t),s$r=i(Vo),$C=n(Vo,"LI",{});var QBe=s($C);bEe=n(QBe,"STRONG",{});var uyt=s(bEe);l$r=r(uyt,"roberta"),uyt.forEach(t),i$r=r(QBe," \u2014 "),YU=n(QBe,"A",{href:!0});var pyt=s(YU);d$r=r(pyt,"FlaxRobertaForMultipleChoice"),pyt.forEach(t),c$r=r(QBe," (RoBERTa model)"),QBe.forEach(t),m$r=i(Vo),IC=n(Vo,"LI",{});var WBe=s(IC);vEe=n(WBe,"STRONG",{});var _yt=s(vEe);f$r=r(_yt,"roformer"),_yt.forEach(t),g$r=r(WBe," \u2014 "),KU=n(WBe,"A",{href:!0});var byt=s(KU);h$r=r(byt,"FlaxRoFormerForMultipleChoice"),byt.forEach(t),u$r=r(WBe," (RoFormer model)"),WBe.forEach(t),p$r=i(Vo),qC=n(Vo,"LI",{});var HBe=s(qC);FEe=n(HBe,"STRONG",{});var vyt=s(FEe);_$r=r(vyt,"xlm-roberta"),vyt.forEach(t),b$r=r(HBe," \u2014 "),ZU=n(HBe,"A",{href:!0});var Fyt=s(ZU);v$r=r(Fyt,"FlaxXLMRobertaForMultipleChoice"),Fyt.forEach(t),F$r=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),Vo.forEach(t),T$r=i(Ia),TEe=n(Ia,"P",{});var Tyt=s(TEe);M$r=r(Tyt,"Examples:"),Tyt.forEach(t),E$r=i(Ia),f(_7.$$.fragment,Ia),Ia.forEach(t),qi.forEach(t),H$e=i(c),Bm=n(c,"H2",{class:!0});var nNe=s(Bm);NC=n(nNe,"A",{id:!0,class:!0,href:!0});var Myt=s(NC);MEe=n(Myt,"SPAN",{});var Eyt=s(MEe);f(b7.$$.fragment,Eyt),Eyt.forEach(t),Myt.forEach(t),C$r=i(nNe),EEe=n(nNe,"SPAN",{});var Cyt=s(EEe);w$r=r(Cyt,"FlaxAutoModelForNextSentencePrediction"),Cyt.forEach(t),nNe.forEach(t),U$e=i(c),Gr=n(c,"DIV",{class:!0});var ji=s(Gr);f(v7.$$.fragment,ji),A$r=i(ji),Pm=n(ji,"P",{});var ZY=s(Pm);y$r=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=n(ZY,"A",{href:!0});var wyt=s(eJ);L$r=r(wyt,"from_pretrained()"),wyt.forEach(t),x$r=r(ZY," class method or the "),oJ=n(ZY,"A",{href:!0});var Ayt=s(oJ);k$r=r(Ayt,"from_config()"),Ayt.forEach(t),S$r=r(ZY,` class
method.`),ZY.forEach(t),R$r=i(ji),F7=n(ji,"P",{});var sNe=s(F7);B$r=r(sNe,"This class cannot be instantiated directly using "),CEe=n(sNe,"CODE",{});var yyt=s(CEe);P$r=r(yyt,"__init__()"),yyt.forEach(t),$$r=r(sNe," (throws an error)."),sNe.forEach(t),I$r=i(ji),$t=n(ji,"DIV",{class:!0});var Di=s($t);f(T7.$$.fragment,Di),q$r=i(Di),wEe=n(Di,"P",{});var Lyt=s(wEe);N$r=r(Lyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lyt.forEach(t),j$r=i(Di),$m=n(Di,"P",{});var eK=s($m);D$r=r(eK,`Note:
Loading a model from its configuration file does `),AEe=n(eK,"STRONG",{});var xyt=s(AEe);G$r=r(xyt,"not"),xyt.forEach(t),O$r=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(eK,"A",{href:!0});var kyt=s(rJ);V$r=r(kyt,"from_pretrained()"),kyt.forEach(t),X$r=r(eK," to load the model weights."),eK.forEach(t),z$r=i(Di),yEe=n(Di,"P",{});var Syt=s(yEe);Q$r=r(Syt,"Examples:"),Syt.forEach(t),W$r=i(Di),f(M7.$$.fragment,Di),Di.forEach(t),H$r=i(ji),qo=n(ji,"DIV",{class:!0});var qa=s(qo);f(E7.$$.fragment,qa),U$r=i(qa),LEe=n(qa,"P",{});var Ryt=s(LEe);J$r=r(Ryt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ryt.forEach(t),Y$r=i(qa),jn=n(qa,"P",{});var O6=s(jn);K$r=r(O6,"The model class to instantiate is selected based on the "),xEe=n(O6,"CODE",{});var Byt=s(xEe);Z$r=r(Byt,"model_type"),Byt.forEach(t),eIr=r(O6,` property of the config object (either
passed as an argument or loaded from `),kEe=n(O6,"CODE",{});var Pyt=s(kEe);oIr=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),rIr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=n(O6,"CODE",{});var $yt=s(SEe);tIr=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),aIr=r(O6,":"),O6.forEach(t),nIr=i(qa),REe=n(qa,"UL",{});var Iyt=s(REe);jC=n(Iyt,"LI",{});var UBe=s(jC);BEe=n(UBe,"STRONG",{});var qyt=s(BEe);sIr=r(qyt,"bert"),qyt.forEach(t),lIr=r(UBe," \u2014 "),tJ=n(UBe,"A",{href:!0});var Nyt=s(tJ);iIr=r(Nyt,"FlaxBertForNextSentencePrediction"),Nyt.forEach(t),dIr=r(UBe," (BERT model)"),UBe.forEach(t),Iyt.forEach(t),cIr=i(qa),PEe=n(qa,"P",{});var jyt=s(PEe);mIr=r(jyt,"Examples:"),jyt.forEach(t),fIr=i(qa),f(C7.$$.fragment,qa),qa.forEach(t),ji.forEach(t),J$e=i(c),Im=n(c,"H2",{class:!0});var lNe=s(Im);DC=n(lNe,"A",{id:!0,class:!0,href:!0});var Dyt=s(DC);$Ee=n(Dyt,"SPAN",{});var Gyt=s($Ee);f(w7.$$.fragment,Gyt),Gyt.forEach(t),Dyt.forEach(t),gIr=i(lNe),IEe=n(lNe,"SPAN",{});var Oyt=s(IEe);hIr=r(Oyt,"FlaxAutoModelForImageClassification"),Oyt.forEach(t),lNe.forEach(t),Y$e=i(c),Or=n(c,"DIV",{class:!0});var Gi=s(Or);f(A7.$$.fragment,Gi),uIr=i(Gi),qm=n(Gi,"P",{});var oK=s(qm);pIr=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aJ=n(oK,"A",{href:!0});var Vyt=s(aJ);_Ir=r(Vyt,"from_pretrained()"),Vyt.forEach(t),bIr=r(oK," class method or the "),nJ=n(oK,"A",{href:!0});var Xyt=s(nJ);vIr=r(Xyt,"from_config()"),Xyt.forEach(t),FIr=r(oK,` class
method.`),oK.forEach(t),TIr=i(Gi),y7=n(Gi,"P",{});var iNe=s(y7);MIr=r(iNe,"This class cannot be instantiated directly using "),qEe=n(iNe,"CODE",{});var zyt=s(qEe);EIr=r(zyt,"__init__()"),zyt.forEach(t),CIr=r(iNe," (throws an error)."),iNe.forEach(t),wIr=i(Gi),It=n(Gi,"DIV",{class:!0});var Oi=s(It);f(L7.$$.fragment,Oi),AIr=i(Oi),NEe=n(Oi,"P",{});var Qyt=s(NEe);yIr=r(Qyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qyt.forEach(t),LIr=i(Oi),Nm=n(Oi,"P",{});var rK=s(Nm);xIr=r(rK,`Note:
Loading a model from its configuration file does `),jEe=n(rK,"STRONG",{});var Wyt=s(jEe);kIr=r(Wyt,"not"),Wyt.forEach(t),SIr=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(rK,"A",{href:!0});var Hyt=s(sJ);RIr=r(Hyt,"from_pretrained()"),Hyt.forEach(t),BIr=r(rK," to load the model weights."),rK.forEach(t),PIr=i(Oi),DEe=n(Oi,"P",{});var Uyt=s(DEe);$Ir=r(Uyt,"Examples:"),Uyt.forEach(t),IIr=i(Oi),f(x7.$$.fragment,Oi),Oi.forEach(t),qIr=i(Gi),No=n(Gi,"DIV",{class:!0});var Na=s(No);f(k7.$$.fragment,Na),NIr=i(Na),GEe=n(Na,"P",{});var Jyt=s(GEe);jIr=r(Jyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jyt.forEach(t),DIr=i(Na),Dn=n(Na,"P",{});var V6=s(Dn);GIr=r(V6,"The model class to instantiate is selected based on the "),OEe=n(V6,"CODE",{});var Yyt=s(OEe);OIr=r(Yyt,"model_type"),Yyt.forEach(t),VIr=r(V6,` property of the config object (either
passed as an argument or loaded from `),VEe=n(V6,"CODE",{});var Kyt=s(VEe);XIr=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),zIr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(V6,"CODE",{});var Zyt=s(XEe);QIr=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),WIr=r(V6,":"),V6.forEach(t),HIr=i(Na),S7=n(Na,"UL",{});var dNe=s(S7);GC=n(dNe,"LI",{});var JBe=s(GC);zEe=n(JBe,"STRONG",{});var e8t=s(zEe);UIr=r(e8t,"beit"),e8t.forEach(t),JIr=r(JBe," \u2014 "),lJ=n(JBe,"A",{href:!0});var o8t=s(lJ);YIr=r(o8t,"FlaxBeitForImageClassification"),o8t.forEach(t),KIr=r(JBe," (BEiT model)"),JBe.forEach(t),ZIr=i(dNe),OC=n(dNe,"LI",{});var YBe=s(OC);QEe=n(YBe,"STRONG",{});var r8t=s(QEe);eqr=r(r8t,"vit"),r8t.forEach(t),oqr=r(YBe," \u2014 "),iJ=n(YBe,"A",{href:!0});var t8t=s(iJ);rqr=r(t8t,"FlaxViTForImageClassification"),t8t.forEach(t),tqr=r(YBe," (ViT model)"),YBe.forEach(t),dNe.forEach(t),aqr=i(Na),WEe=n(Na,"P",{});var a8t=s(WEe);nqr=r(a8t,"Examples:"),a8t.forEach(t),sqr=i(Na),f(R7.$$.fragment,Na),Na.forEach(t),Gi.forEach(t),K$e=i(c),jm=n(c,"H2",{class:!0});var cNe=s(jm);VC=n(cNe,"A",{id:!0,class:!0,href:!0});var n8t=s(VC);HEe=n(n8t,"SPAN",{});var s8t=s(HEe);f(B7.$$.fragment,s8t),s8t.forEach(t),n8t.forEach(t),lqr=i(cNe),UEe=n(cNe,"SPAN",{});var l8t=s(UEe);iqr=r(l8t,"FlaxAutoModelForVision2Seq"),l8t.forEach(t),cNe.forEach(t),Z$e=i(c),Vr=n(c,"DIV",{class:!0});var Vi=s(Vr);f(P7.$$.fragment,Vi),dqr=i(Vi),Dm=n(Vi,"P",{});var tK=s(Dm);cqr=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=n(tK,"A",{href:!0});var i8t=s(dJ);mqr=r(i8t,"from_pretrained()"),i8t.forEach(t),fqr=r(tK," class method or the "),cJ=n(tK,"A",{href:!0});var d8t=s(cJ);gqr=r(d8t,"from_config()"),d8t.forEach(t),hqr=r(tK,` class
method.`),tK.forEach(t),uqr=i(Vi),$7=n(Vi,"P",{});var mNe=s($7);pqr=r(mNe,"This class cannot be instantiated directly using "),JEe=n(mNe,"CODE",{});var c8t=s(JEe);_qr=r(c8t,"__init__()"),c8t.forEach(t),bqr=r(mNe," (throws an error)."),mNe.forEach(t),vqr=i(Vi),qt=n(Vi,"DIV",{class:!0});var Xi=s(qt);f(I7.$$.fragment,Xi),Fqr=i(Xi),YEe=n(Xi,"P",{});var m8t=s(YEe);Tqr=r(m8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m8t.forEach(t),Mqr=i(Xi),Gm=n(Xi,"P",{});var aK=s(Gm);Eqr=r(aK,`Note:
Loading a model from its configuration file does `),KEe=n(aK,"STRONG",{});var f8t=s(KEe);Cqr=r(f8t,"not"),f8t.forEach(t),wqr=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(aK,"A",{href:!0});var g8t=s(mJ);Aqr=r(g8t,"from_pretrained()"),g8t.forEach(t),yqr=r(aK," to load the model weights."),aK.forEach(t),Lqr=i(Xi),ZEe=n(Xi,"P",{});var h8t=s(ZEe);xqr=r(h8t,"Examples:"),h8t.forEach(t),kqr=i(Xi),f(q7.$$.fragment,Xi),Xi.forEach(t),Sqr=i(Vi),jo=n(Vi,"DIV",{class:!0});var ja=s(jo);f(N7.$$.fragment,ja),Rqr=i(ja),e5e=n(ja,"P",{});var u8t=s(e5e);Bqr=r(u8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),u8t.forEach(t),Pqr=i(ja),Gn=n(ja,"P",{});var X6=s(Gn);$qr=r(X6,"The model class to instantiate is selected based on the "),o5e=n(X6,"CODE",{});var p8t=s(o5e);Iqr=r(p8t,"model_type"),p8t.forEach(t),qqr=r(X6,` property of the config object (either
passed as an argument or loaded from `),r5e=n(X6,"CODE",{});var _8t=s(r5e);Nqr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),jqr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(X6,"CODE",{});var b8t=s(t5e);Dqr=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),Gqr=r(X6,":"),X6.forEach(t),Oqr=i(ja),a5e=n(ja,"UL",{});var v8t=s(a5e);XC=n(v8t,"LI",{});var KBe=s(XC);n5e=n(KBe,"STRONG",{});var F8t=s(n5e);Vqr=r(F8t,"vision-encoder-decoder"),F8t.forEach(t),Xqr=r(KBe," \u2014 "),fJ=n(KBe,"A",{href:!0});var T8t=s(fJ);zqr=r(T8t,"FlaxVisionEncoderDecoderModel"),T8t.forEach(t),Qqr=r(KBe," (Vision Encoder decoder model)"),KBe.forEach(t),v8t.forEach(t),Wqr=i(ja),s5e=n(ja,"P",{});var M8t=s(s5e);Hqr=r(M8t,"Examples:"),M8t.forEach(t),Uqr=i(ja),f(j7.$$.fragment,ja),ja.forEach(t),Vi.forEach(t),this.h()},h(){d(oe,"name","hf:doc:metadata"),d(oe,"content",JSON.stringify(R8t)),d(Ae,"id","auto-classes"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#auto-classes"),d(fe,"class","relative group"),d(On,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Yi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Hm,"id","extending-the-auto-classes"),d(Hm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hm,"href","#extending-the-auto-classes"),d(Ki,"class","relative group"),d(Jm,"id","transformers.AutoConfig"),d(Jm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jm,"href","#transformers.AutoConfig"),d(Zi,"class","relative group"),d(Y9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(K9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(Z9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(ex,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(ox,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(rx,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(tx,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(ax,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(nx,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(sx,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(lx,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(ix,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(dx,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(cx,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(mx,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(fx,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(gx,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(hx,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(ux,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(px,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(_x,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(bx,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(vx,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(Fx,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(Tx,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(Mx,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(Ex,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(Cx,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(wx,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Ax,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(yx,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(Lx,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(xx,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(kx,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(Sx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(Rx,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Bx,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(Px,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d($x,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(Ix,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(qx,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Nx,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(jx,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(Dx,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(Gx,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(Ox,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(Vx,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(Xx,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(zx,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Qx,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(Wx,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Hx,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Ux,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(Jx,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(Yx,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Kx,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Zx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(ek,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(ok,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(rk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(tk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(ak,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(nk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(sk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(lk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(ik,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(dk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(ck,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(mk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(fk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(gk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(hk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(uk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(pk,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(_k,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(bk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(vk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Fk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(Tk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Mk,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(Ek,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(Ck,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(wk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(Ak,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(yk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(Lk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(xk,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(kk,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(Sk,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(Rk,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Bk,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Pk,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d($k,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(Ik,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(qk,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Nk,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(jk,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(Dk,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(Gk,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Ok,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Vk,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Xk,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(zk,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wg,"id","transformers.AutoTokenizer"),d(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wg,"href","#transformers.AutoTokenizer"),d(od,"class","relative group"),d(Qk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Wk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(Hk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Uk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(Jk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(Yk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Kk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Zk,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(eS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(oS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(rS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(tS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(aS,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(nS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(sS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(lS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(iS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(dS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(cS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(mS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(fS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(gS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(hS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(uS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(pS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(_S,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(bS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(vS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(FS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(TS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(MS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ES,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(CS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(wS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(AS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(yS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(LS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(xS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(kS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(SS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(RS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(BS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(PS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d($S,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(IS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(qS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(NS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(jS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(DS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(GS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(OS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(VS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(XS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(zS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(QS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(WS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(HS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(US,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(JS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(YS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(KS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ZS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(eR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(oR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(rR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(tR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(aR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(nR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(sR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(lR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(iR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(dR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(cR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(mR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(fR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(gR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(hR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(uR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(pR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(_R,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(bR,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(vR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(FR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(TR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(MR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(ER,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(CR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(wR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(AR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(yR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(LR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(xR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(kR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(SR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(RR,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(BR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(PR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d($R,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(IR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(qR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(NR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(jR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(DR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(GR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(OR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(VR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(XR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(zR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(QR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(WR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(HR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(UR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(JR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(YR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(KR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(ZR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(eB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(oB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(rB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(tB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(aB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(nB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),d(sB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(lB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(iB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(dB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(cB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(mB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(fB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(gB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(hB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(uB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(pB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(_B,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(bB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(vB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(FB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(TB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(MB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ch,"id","transformers.AutoFeatureExtractor"),d(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ch,"href","#transformers.AutoFeatureExtractor"),d(rd,"class","relative group"),d(EB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(CB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(wB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(AB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(yB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(LB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(xB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(kB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(SB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(RB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(BB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(PB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d($B,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(IB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(qB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(NB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(jB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(DB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(GB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(OB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(VB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(XB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(zB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(QB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"id","transformers.AutoProcessor"),d(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jh,"href","#transformers.AutoProcessor"),d(td,"class","relative group"),d(WB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(HB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(UB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(JB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(YB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(KB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ZB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(eP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(oP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(rP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(tP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(aP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),d(nP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(sP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(lP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gu,"id","transformers.AutoModel"),d(gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gu,"href","#transformers.AutoModel"),d(nd,"class","relative group"),d(iP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(fP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(gP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(hP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(uP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(pP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(_P,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(bP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(vP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(FP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(TP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(MP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(EP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(CP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(wP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(AP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(yP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(LP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(xP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(kP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(SP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(RP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(BP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(PP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d($P,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(IP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(qP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(NP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(jP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(DP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(GP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(OP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(VP,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(XP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(zP,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(QP,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(WP,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(HP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(UP,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(JP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(YP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(KP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(ZP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(e$,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(o$,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(r$,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(t$,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(a$,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(n$,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(s$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(l$,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(i$,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(d$,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(c$,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(m$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(f$,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(g$,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(h$,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(u$,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(p$,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(_$,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(b$,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(v$,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d(F$,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(T$,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(M$,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(E$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(C$,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(w$,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(A$,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(y$,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(L$,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(x$,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(k$,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(S$,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(R$,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(B$,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(P$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d($$,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(I$,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(q$,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(N$,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(j$,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(D$,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(G$,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(O$,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(V$,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(X$,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(z$,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(Q$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(W$,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(H$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(U$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(J$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(Y$,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e_,"id","transformers.AutoModelForPreTraining"),d(e_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e_,"href","#transformers.AutoModelForPreTraining"),d(id,"class","relative group"),d(K$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Z$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(rI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(tI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(aI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(nI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(sI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(lI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(iI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(dI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(cI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(mI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(fI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(gI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(hI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(uI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(pI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(_I,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(bI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(vI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(FI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(TI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(MI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(EI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(CI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(wI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(AI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(yI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(LI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(xI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(kI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(SI,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(RI,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(BI,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(PI,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d($I,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(II,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(qI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(NI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(jI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G_,"id","transformers.AutoModelForCausalLM"),d(G_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G_,"href","#transformers.AutoModelForCausalLM"),d(md,"class","relative group"),d(DI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(XI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(zI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(QI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(WI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(HI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(UI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(JI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(YI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(KI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(ZI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(eq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(oq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(rq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(tq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(aq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(nq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(sq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(lq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(iq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(dq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(cq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(mq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(fq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(gq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(hq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(uq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(pq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(_q,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(bq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(vq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Fq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(Tq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(Mq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(Eq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cb,"id","transformers.AutoModelForMaskedLM"),d(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cb,"href","#transformers.AutoModelForMaskedLM"),d(hd,"class","relative group"),d(Cq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(Lq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(xq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(kq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(Sq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Rq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(Bq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(Pq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d($q,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Iq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(qq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(Nq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(jq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Dq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(Gq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(Oq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(Vq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(Xq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(zq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(Qq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(Wq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(Hq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(Uq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(Jq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(Yq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(Kq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(Zq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(oN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(rN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(tN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(nN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(sN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l2,"id","transformers.AutoModelForSeq2SeqLM"),d(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l2,"href","#transformers.AutoModelForSeq2SeqLM"),d(_d,"class","relative group"),d(lN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(mN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(fN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(gN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(hN,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(uN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(pN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(_N,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(bN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(vN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(FN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(TN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(MN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(EN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(CN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(wN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A2,"id","transformers.AutoModelForSequenceClassification"),d(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A2,"href","#transformers.AutoModelForSequenceClassification"),d(Fd,"class","relative group"),d(yN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(SN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(RN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(BN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(PN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d($N,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(IN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(qN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(NN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(jN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(DN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(GN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(ON,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(VN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(XN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(zN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(QN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(WN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(HN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(UN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(JN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(YN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(KN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(ZN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(ej,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(oj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(rj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(tj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(aj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(nj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(sj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(lj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(ij,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(dj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(cj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(mj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(fj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(gj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(hj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(uj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(pj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(_j,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(bj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(vj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Fj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Tj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Mj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tv,"id","transformers.AutoModelForMultipleChoice"),d(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tv,"href","#transformers.AutoModelForMultipleChoice"),d(Ed,"class","relative group"),d(Ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Aj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(yj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Lj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(xj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(kj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Sj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Rj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Bj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Pj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($j,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Ij,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(qj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Nj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(jj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Dj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Gj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Oj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Vj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Xj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(zj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Qj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Wj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Hj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Uj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Jj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Yj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Kj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Zj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yv,"id","transformers.AutoModelForNextSentencePrediction"),d(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yv,"href","#transformers.AutoModelForNextSentencePrediction"),d(Ad,"class","relative group"),d(eD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(aD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(nD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(sD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(lD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aF,"id","transformers.AutoModelForTokenClassification"),d(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aF,"href","#transformers.AutoModelForTokenClassification"),d(xd,"class","relative group"),d(iD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(fD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(gD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(hD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(uD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(pD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(_D,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(bD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(vD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(FD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(TD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(MD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(ED,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(CD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(wD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(AD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(yD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(LD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(xD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(kD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(SD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(RD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(BD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(PD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d($D,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(ID,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(qD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ND,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(jD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(DD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(GD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(OD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(VD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jF,"id","transformers.AutoModelForQuestionAnswering"),d(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jF,"href","#transformers.AutoModelForQuestionAnswering"),d(Rd,"class","relative group"),d(XD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(HD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(UD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(JD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(YD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(KD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(ZD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(eG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(oG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(rG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(tG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(aG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(nG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(sG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(lG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(iG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(dG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(cG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(mG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(fG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(gG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(hG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(uG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(pG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(_G,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(bG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(vG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(FG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(TG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(MG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(EG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(CG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(wG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(AG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(yG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(LG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(xG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(kG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(SG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A1,"id","transformers.AutoModelForTableQuestionAnswering"),d(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A1,"href","#transformers.AutoModelForTableQuestionAnswering"),d($d,"class","relative group"),d(RG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($G,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x1,"id","transformers.AutoModelForImageClassification"),d(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x1,"href","#transformers.AutoModelForImageClassification"),d(Nd,"class","relative group"),d(IG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(DG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(GG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(OG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(VG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(XG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(zG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(QG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(WG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(HG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(UG,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(JG,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(YG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(KG,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(ZG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(eO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O1,"id","transformers.AutoModelForVision2Seq"),d(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O1,"href","#transformers.AutoModelForVision2Seq"),d(Gd,"class","relative group"),d(oO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aO,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z1,"id","transformers.AutoModelForAudioClassification"),d(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z1,"href","#transformers.AutoModelForAudioClassification"),d(Xd,"class","relative group"),d(nO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(dO,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(cO,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(mO,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(fO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(gO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(hO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(uO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oT,"id","transformers.AutoModelForAudioFrameClassification"),d(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oT,"href","#transformers.AutoModelForAudioFrameClassification"),d(Wd,"class","relative group"),d(pO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_O,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(FO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(TO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(MO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lT,"id","transformers.AutoModelForCTC"),d(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lT,"href","#transformers.AutoModelForCTC"),d(Jd,"class","relative group"),d(EO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(yO,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(LO,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(xO,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(kO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(SO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(RO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(BO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_T,"id","transformers.AutoModelForSpeechSeq2Seq"),d(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_T,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Zd,"class","relative group"),d(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($O,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qO,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(NO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.AutoModelForAudioXVector"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.AutoModelForAudioXVector"),d(rc,"class","relative group"),d(jO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(VO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(XO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(zO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yT,"id","transformers.AutoModelForMaskedImageModeling"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.AutoModelForMaskedImageModeling"),d(nc,"class","relative group"),d(QO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(JO,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(YO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RT,"id","transformers.AutoModelForObjectDetection"),d(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RT,"href","#transformers.AutoModelForObjectDetection"),d(dc,"class","relative group"),d(KO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($T,"id","transformers.AutoModelForImageSegmentation"),d($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($T,"href","#transformers.AutoModelForImageSegmentation"),d(fc,"class","relative group"),d(rV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NT,"id","transformers.AutoModelForSemanticSegmentation"),d(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NT,"href","#transformers.AutoModelForSemanticSegmentation"),d(uc,"class","relative group"),d(sV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(cV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(mV,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(fV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XT,"id","transformers.AutoModelForInstanceSegmentation"),d(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XT,"href","#transformers.AutoModelForInstanceSegmentation"),d(bc,"class","relative group"),d(gV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pV,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WT,"id","transformers.TFAutoModel"),d(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WT,"href","#transformers.TFAutoModel"),d(Tc,"class","relative group"),d(_V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FV,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(TV,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(MV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(EV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(CV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(wV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(AV,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(yV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(LV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(xV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(kV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(SV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(RV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(BV,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(PV,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d($V,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(IV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(qV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(NV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(jV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(DV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(GV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(OV,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(VV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(XV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(zV,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(QV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(WV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(HV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(UV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(JV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(YV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(KV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(ZV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(eX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(oX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(rX,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(tX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(aX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(nX,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(sX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(lX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(iX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(dX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(cX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qM,"id","transformers.TFAutoModelForPreTraining"),d(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qM,"href","#transformers.TFAutoModelForPreTraining"),d(Cc,"class","relative group"),d(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(uX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(pX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(_X,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(bX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(vX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(FX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(TX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(MX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(EX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(CX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(wX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(AX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(yX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(LX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(xX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(kX,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(SX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(RX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(BX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(PX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d($X,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(IX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l4,"id","transformers.TFAutoModelForCausalLM"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.TFAutoModelForCausalLM"),d(yc,"class","relative group"),d(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(GX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(OX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(VX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(XX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(zX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(QX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(WX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(HX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(UX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(JX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(YX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F4,"id","transformers.TFAutoModelForImageClassification"),d(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F4,"href","#transformers.TFAutoModelForImageClassification"),d(kc,"class","relative group"),d(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(rz,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E4,"id","transformers.TFAutoModelForMaskedLM"),d(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E4,"href","#transformers.TFAutoModelForMaskedLM"),d(Bc,"class","relative group"),d(tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(lz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(iz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(dz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(cz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(mz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(fz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(gz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(hz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(uz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(pz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(_z,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(bz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(vz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Fz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(Tz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Mz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(Ez,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Cz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(wz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ic,"class","relative group"),d(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(kz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(Sz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(Rz,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(Bz,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(Pz,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d($z,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(Iz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(qz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(Nz,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oE,"id","transformers.TFAutoModelForSequenceClassification"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.TFAutoModelForSequenceClassification"),d(jc,"class","relative group"),d(jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(Vz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(Xz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(zz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(Qz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(Wz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(Hz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(Uz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(Jz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(Yz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(Kz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(Zz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(eQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(oQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(rQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(tQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(aQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(nQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(sQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(lQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(iQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(dQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(cQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(mQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(fQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(gQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LE,"id","transformers.TFAutoModelForMultipleChoice"),d(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LE,"href","#transformers.TFAutoModelForMultipleChoice"),d(Oc,"class","relative group"),d(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_Q,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(bQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(vQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(FQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(TQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(MQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(EQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(CQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(wQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(AQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(yQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(LQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(xQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(kQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(SQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(RQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(BQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QE,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(zc,"class","relative group"),d(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HE,"id","transformers.TFAutoModelForTokenClassification"),d(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HE,"href","#transformers.TFAutoModelForTokenClassification"),d(Hc,"class","relative group"),d(NQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(OQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(VQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(XQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(zQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(QQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(WQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(HQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(UQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(JQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(YQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(KQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(ZQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(eW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(oW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(rW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(tW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(aW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(nW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(sW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u5,"id","transformers.TFAutoModelForQuestionAnswering"),d(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u5,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Yc,"class","relative group"),d(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(mW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(fW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(gW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(hW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(uW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(pW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(_W,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(bW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(vW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(FW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(TW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(MW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(EW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(CW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(wW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(AW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(yW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(LW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(xW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I5,"id","transformers.TFAutoModelForVision2Seq"),d(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I5,"href","#transformers.TFAutoModelForVision2Seq"),d(em,"class","relative group"),d(kW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(tm,"class","relative group"),d(PW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D5,"id","transformers.FlaxAutoModel"),d(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D5,"href","#transformers.FlaxAutoModel"),d(sm,"class","relative group"),d(NW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(OW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(VW,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(XW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(zW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(QW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(WW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(HW,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(UW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(JW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(YW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(KW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(ZW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(eH,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(oH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(rH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(tH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(aH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(nH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(sH,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(lH,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(iH,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(dH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(cH,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(mH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f3,"id","transformers.FlaxAutoModelForCausalLM"),d(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f3,"href","#transformers.FlaxAutoModelForCausalLM"),d(dm,"class","relative group"),d(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(pH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(_H,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(bH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(vH,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b3,"id","transformers.FlaxAutoModelForPreTraining"),d(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b3,"href","#transformers.FlaxAutoModelForPreTraining"),d(fm,"class","relative group"),d(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(CH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(wH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(AH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(yH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(LH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(xH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(kH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(RH,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(BH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(PH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S3,"id","transformers.FlaxAutoModelForMaskedLM"),d(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S3,"href","#transformers.FlaxAutoModelForMaskedLM"),d(um,"class","relative group"),d($H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(jH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(DH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(GH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(OH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(VH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(XH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(QH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(WH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(bm,"class","relative group"),d(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(KH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(ZH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(eU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(oU,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(rU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(tU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(aU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(nU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K3,"id","transformers.FlaxAutoModelForSequenceClassification"),d(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(Tm,"class","relative group"),d(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(cU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(mU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(fU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(gU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(hU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(uU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(pU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(_U,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(bU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(Cm,"class","relative group"),d(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(EU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(CU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(wU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(AU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(yU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(LU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(xU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(kU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(SU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FC,"id","transformers.FlaxAutoModelForTokenClassification"),d(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(ym,"class","relative group"),d(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($U,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(IU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(qU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(NU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(jU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(DU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(GU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(OU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(km,"class","relative group"),d(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(WU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(HU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(UU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(JU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(YU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(KU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(ZU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Bm,"class","relative group"),d(eJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DC,"id","transformers.FlaxAutoModelForImageClassification"),d(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DC,"href","#transformers.FlaxAutoModelForImageClassification"),d(Im,"class","relative group"),d(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(iJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VC,"id","transformers.FlaxAutoModelForVision2Seq"),d(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VC,"href","#transformers.FlaxAutoModelForVision2Seq"),d(jm,"class","relative group"),d(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fJ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,_){e(document.head,oe),b(c,co,_),b(c,fe,_),e(fe,Ae),e(Ae,io),g(pe,io,null),e(fe,Ce),e(fe,Xo),e(Xo,zi),b(c,Xm,_),b(c,ma,_),e(ma,Qi),e(ma,Wi),e(Wi,z6),e(ma,zm),b(c,Se,_),b(c,mo,_),e(mo,Hi),e(mo,On),e(On,Q6),e(mo,Vn),e(mo,Xn),e(Xn,W6),e(mo,Ui),e(mo,zn),e(zn,H6),e(mo,Ji),b(c,Qm,_),g(Da,c,_),b(c,fo,_),b(c,ve,_),e(ve,z9),e(ve,Yi),e(Yi,Q9),e(ve,W9),b(c,zo,_),b(c,Ga,_),e(Ga,H9),e(Ga,Wm),e(Wm,U9),e(Ga,fNe),b(c,ZBe,_),b(c,Ki,_),e(Ki,Hm),e(Hm,nK),g(U6,nK,null),e(Ki,gNe),e(Ki,sK),e(sK,hNe),b(c,ePe,_),b(c,Qn,_),e(Qn,uNe),e(Qn,lK),e(lK,pNe),e(Qn,_Ne),e(Qn,iK),e(iK,bNe),e(Qn,vNe),b(c,oPe,_),g(J6,c,_),b(c,rPe,_),b(c,J9,_),e(J9,FNe),b(c,tPe,_),g(Um,c,_),b(c,aPe,_),b(c,Zi,_),e(Zi,Jm),e(Jm,dK),g(Y6,dK,null),e(Zi,TNe),e(Zi,cK),e(cK,MNe),b(c,nPe,_),b(c,Qo,_),g(K6,Qo,null),e(Qo,ENe),e(Qo,Z6),e(Z6,CNe),e(Z6,Y9),e(Y9,wNe),e(Z6,ANe),e(Qo,yNe),e(Qo,ew),e(ew,LNe),e(ew,mK),e(mK,xNe),e(ew,kNe),e(Qo,SNe),e(Qo,go),g(ow,go,null),e(go,RNe),e(go,fK),e(fK,BNe),e(go,PNe),e(go,ed),e(ed,$Ne),e(ed,gK),e(gK,INe),e(ed,qNe),e(ed,hK),e(hK,NNe),e(ed,jNe),e(go,DNe),e(go,v),e(v,Ym),e(Ym,uK),e(uK,GNe),e(Ym,ONe),e(Ym,K9),e(K9,VNe),e(Ym,XNe),e(v,zNe),e(v,Km),e(Km,pK),e(pK,QNe),e(Km,WNe),e(Km,Z9),e(Z9,HNe),e(Km,UNe),e(v,JNe),e(v,Zm),e(Zm,_K),e(_K,YNe),e(Zm,KNe),e(Zm,ex),e(ex,ZNe),e(Zm,eje),e(v,oje),e(v,ef),e(ef,bK),e(bK,rje),e(ef,tje),e(ef,ox),e(ox,aje),e(ef,nje),e(v,sje),e(v,of),e(of,vK),e(vK,lje),e(of,ije),e(of,rx),e(rx,dje),e(of,cje),e(v,mje),e(v,rf),e(rf,FK),e(FK,fje),e(rf,gje),e(rf,tx),e(tx,hje),e(rf,uje),e(v,pje),e(v,tf),e(tf,TK),e(TK,_je),e(tf,bje),e(tf,ax),e(ax,vje),e(tf,Fje),e(v,Tje),e(v,af),e(af,MK),e(MK,Mje),e(af,Eje),e(af,nx),e(nx,Cje),e(af,wje),e(v,Aje),e(v,nf),e(nf,EK),e(EK,yje),e(nf,Lje),e(nf,sx),e(sx,xje),e(nf,kje),e(v,Sje),e(v,sf),e(sf,CK),e(CK,Rje),e(sf,Bje),e(sf,lx),e(lx,Pje),e(sf,$je),e(v,Ije),e(v,lf),e(lf,wK),e(wK,qje),e(lf,Nje),e(lf,ix),e(ix,jje),e(lf,Dje),e(v,Gje),e(v,df),e(df,AK),e(AK,Oje),e(df,Vje),e(df,dx),e(dx,Xje),e(df,zje),e(v,Qje),e(v,cf),e(cf,yK),e(yK,Wje),e(cf,Hje),e(cf,cx),e(cx,Uje),e(cf,Jje),e(v,Yje),e(v,mf),e(mf,LK),e(LK,Kje),e(mf,Zje),e(mf,mx),e(mx,eDe),e(mf,oDe),e(v,rDe),e(v,ff),e(ff,xK),e(xK,tDe),e(ff,aDe),e(ff,fx),e(fx,nDe),e(ff,sDe),e(v,lDe),e(v,gf),e(gf,kK),e(kK,iDe),e(gf,dDe),e(gf,gx),e(gx,cDe),e(gf,mDe),e(v,fDe),e(v,hf),e(hf,SK),e(SK,gDe),e(hf,hDe),e(hf,hx),e(hx,uDe),e(hf,pDe),e(v,_De),e(v,uf),e(uf,RK),e(RK,bDe),e(uf,vDe),e(uf,ux),e(ux,FDe),e(uf,TDe),e(v,MDe),e(v,pf),e(pf,BK),e(BK,EDe),e(pf,CDe),e(pf,px),e(px,wDe),e(pf,ADe),e(v,yDe),e(v,_f),e(_f,PK),e(PK,LDe),e(_f,xDe),e(_f,_x),e(_x,kDe),e(_f,SDe),e(v,RDe),e(v,bf),e(bf,$K),e($K,BDe),e(bf,PDe),e(bf,bx),e(bx,$De),e(bf,IDe),e(v,qDe),e(v,vf),e(vf,IK),e(IK,NDe),e(vf,jDe),e(vf,vx),e(vx,DDe),e(vf,GDe),e(v,ODe),e(v,Ff),e(Ff,qK),e(qK,VDe),e(Ff,XDe),e(Ff,Fx),e(Fx,zDe),e(Ff,QDe),e(v,WDe),e(v,Tf),e(Tf,NK),e(NK,HDe),e(Tf,UDe),e(Tf,Tx),e(Tx,JDe),e(Tf,YDe),e(v,KDe),e(v,Mf),e(Mf,jK),e(jK,ZDe),e(Mf,eGe),e(Mf,Mx),e(Mx,oGe),e(Mf,rGe),e(v,tGe),e(v,Ef),e(Ef,DK),e(DK,aGe),e(Ef,nGe),e(Ef,Ex),e(Ex,sGe),e(Ef,lGe),e(v,iGe),e(v,Cf),e(Cf,GK),e(GK,dGe),e(Cf,cGe),e(Cf,Cx),e(Cx,mGe),e(Cf,fGe),e(v,gGe),e(v,wf),e(wf,OK),e(OK,hGe),e(wf,uGe),e(wf,wx),e(wx,pGe),e(wf,_Ge),e(v,bGe),e(v,Af),e(Af,VK),e(VK,vGe),e(Af,FGe),e(Af,Ax),e(Ax,TGe),e(Af,MGe),e(v,EGe),e(v,yf),e(yf,XK),e(XK,CGe),e(yf,wGe),e(yf,yx),e(yx,AGe),e(yf,yGe),e(v,LGe),e(v,Lf),e(Lf,zK),e(zK,xGe),e(Lf,kGe),e(Lf,Lx),e(Lx,SGe),e(Lf,RGe),e(v,BGe),e(v,xf),e(xf,QK),e(QK,PGe),e(xf,$Ge),e(xf,xx),e(xx,IGe),e(xf,qGe),e(v,NGe),e(v,kf),e(kf,WK),e(WK,jGe),e(kf,DGe),e(kf,kx),e(kx,GGe),e(kf,OGe),e(v,VGe),e(v,Sf),e(Sf,HK),e(HK,XGe),e(Sf,zGe),e(Sf,Sx),e(Sx,QGe),e(Sf,WGe),e(v,HGe),e(v,Rf),e(Rf,UK),e(UK,UGe),e(Rf,JGe),e(Rf,Rx),e(Rx,YGe),e(Rf,KGe),e(v,ZGe),e(v,Bf),e(Bf,JK),e(JK,eOe),e(Bf,oOe),e(Bf,Bx),e(Bx,rOe),e(Bf,tOe),e(v,aOe),e(v,Pf),e(Pf,YK),e(YK,nOe),e(Pf,sOe),e(Pf,Px),e(Px,lOe),e(Pf,iOe),e(v,dOe),e(v,$f),e($f,KK),e(KK,cOe),e($f,mOe),e($f,$x),e($x,fOe),e($f,gOe),e(v,hOe),e(v,If),e(If,ZK),e(ZK,uOe),e(If,pOe),e(If,Ix),e(Ix,_Oe),e(If,bOe),e(v,vOe),e(v,qf),e(qf,eZ),e(eZ,FOe),e(qf,TOe),e(qf,qx),e(qx,MOe),e(qf,EOe),e(v,COe),e(v,Nf),e(Nf,oZ),e(oZ,wOe),e(Nf,AOe),e(Nf,Nx),e(Nx,yOe),e(Nf,LOe),e(v,xOe),e(v,jf),e(jf,rZ),e(rZ,kOe),e(jf,SOe),e(jf,jx),e(jx,ROe),e(jf,BOe),e(v,POe),e(v,Df),e(Df,tZ),e(tZ,$Oe),e(Df,IOe),e(Df,Dx),e(Dx,qOe),e(Df,NOe),e(v,jOe),e(v,Gf),e(Gf,aZ),e(aZ,DOe),e(Gf,GOe),e(Gf,Gx),e(Gx,OOe),e(Gf,VOe),e(v,XOe),e(v,Of),e(Of,nZ),e(nZ,zOe),e(Of,QOe),e(Of,Ox),e(Ox,WOe),e(Of,HOe),e(v,UOe),e(v,Vf),e(Vf,sZ),e(sZ,JOe),e(Vf,YOe),e(Vf,Vx),e(Vx,KOe),e(Vf,ZOe),e(v,eVe),e(v,Xf),e(Xf,lZ),e(lZ,oVe),e(Xf,rVe),e(Xf,Xx),e(Xx,tVe),e(Xf,aVe),e(v,nVe),e(v,zf),e(zf,iZ),e(iZ,sVe),e(zf,lVe),e(zf,zx),e(zx,iVe),e(zf,dVe),e(v,cVe),e(v,Qf),e(Qf,dZ),e(dZ,mVe),e(Qf,fVe),e(Qf,Qx),e(Qx,gVe),e(Qf,hVe),e(v,uVe),e(v,Wf),e(Wf,cZ),e(cZ,pVe),e(Wf,_Ve),e(Wf,Wx),e(Wx,bVe),e(Wf,vVe),e(v,FVe),e(v,Hf),e(Hf,mZ),e(mZ,TVe),e(Hf,MVe),e(Hf,Hx),e(Hx,EVe),e(Hf,CVe),e(v,wVe),e(v,Uf),e(Uf,fZ),e(fZ,AVe),e(Uf,yVe),e(Uf,Ux),e(Ux,LVe),e(Uf,xVe),e(v,kVe),e(v,Jf),e(Jf,gZ),e(gZ,SVe),e(Jf,RVe),e(Jf,Jx),e(Jx,BVe),e(Jf,PVe),e(v,$Ve),e(v,Yf),e(Yf,hZ),e(hZ,IVe),e(Yf,qVe),e(Yf,Yx),e(Yx,NVe),e(Yf,jVe),e(v,DVe),e(v,Kf),e(Kf,uZ),e(uZ,GVe),e(Kf,OVe),e(Kf,Kx),e(Kx,VVe),e(Kf,XVe),e(v,zVe),e(v,Zf),e(Zf,pZ),e(pZ,QVe),e(Zf,WVe),e(Zf,Zx),e(Zx,HVe),e(Zf,UVe),e(v,JVe),e(v,eg),e(eg,_Z),e(_Z,YVe),e(eg,KVe),e(eg,ek),e(ek,ZVe),e(eg,eXe),e(v,oXe),e(v,og),e(og,bZ),e(bZ,rXe),e(og,tXe),e(og,ok),e(ok,aXe),e(og,nXe),e(v,sXe),e(v,rg),e(rg,vZ),e(vZ,lXe),e(rg,iXe),e(rg,rk),e(rk,dXe),e(rg,cXe),e(v,mXe),e(v,tg),e(tg,FZ),e(FZ,fXe),e(tg,gXe),e(tg,tk),e(tk,hXe),e(tg,uXe),e(v,pXe),e(v,ag),e(ag,TZ),e(TZ,_Xe),e(ag,bXe),e(ag,ak),e(ak,vXe),e(ag,FXe),e(v,TXe),e(v,ng),e(ng,MZ),e(MZ,MXe),e(ng,EXe),e(ng,nk),e(nk,CXe),e(ng,wXe),e(v,AXe),e(v,sg),e(sg,EZ),e(EZ,yXe),e(sg,LXe),e(sg,sk),e(sk,xXe),e(sg,kXe),e(v,SXe),e(v,lg),e(lg,CZ),e(CZ,RXe),e(lg,BXe),e(lg,lk),e(lk,PXe),e(lg,$Xe),e(v,IXe),e(v,ig),e(ig,wZ),e(wZ,qXe),e(ig,NXe),e(ig,ik),e(ik,jXe),e(ig,DXe),e(v,GXe),e(v,dg),e(dg,AZ),e(AZ,OXe),e(dg,VXe),e(dg,dk),e(dk,XXe),e(dg,zXe),e(v,QXe),e(v,cg),e(cg,yZ),e(yZ,WXe),e(cg,HXe),e(cg,ck),e(ck,UXe),e(cg,JXe),e(v,YXe),e(v,mg),e(mg,LZ),e(LZ,KXe),e(mg,ZXe),e(mg,mk),e(mk,eze),e(mg,oze),e(v,rze),e(v,fg),e(fg,xZ),e(xZ,tze),e(fg,aze),e(fg,fk),e(fk,nze),e(fg,sze),e(v,lze),e(v,gg),e(gg,kZ),e(kZ,ize),e(gg,dze),e(gg,gk),e(gk,cze),e(gg,mze),e(v,fze),e(v,hg),e(hg,SZ),e(SZ,gze),e(hg,hze),e(hg,hk),e(hk,uze),e(hg,pze),e(v,_ze),e(v,ug),e(ug,RZ),e(RZ,bze),e(ug,vze),e(ug,uk),e(uk,Fze),e(ug,Tze),e(v,Mze),e(v,pg),e(pg,BZ),e(BZ,Eze),e(pg,Cze),e(pg,pk),e(pk,wze),e(pg,Aze),e(v,yze),e(v,_g),e(_g,PZ),e(PZ,Lze),e(_g,xze),e(_g,_k),e(_k,kze),e(_g,Sze),e(v,Rze),e(v,bg),e(bg,$Z),e($Z,Bze),e(bg,Pze),e(bg,bk),e(bk,$ze),e(bg,Ize),e(v,qze),e(v,vg),e(vg,IZ),e(IZ,Nze),e(vg,jze),e(vg,vk),e(vk,Dze),e(vg,Gze),e(v,Oze),e(v,Fg),e(Fg,qZ),e(qZ,Vze),e(Fg,Xze),e(Fg,Fk),e(Fk,zze),e(Fg,Qze),e(v,Wze),e(v,Tg),e(Tg,NZ),e(NZ,Hze),e(Tg,Uze),e(Tg,Tk),e(Tk,Jze),e(Tg,Yze),e(v,Kze),e(v,Mg),e(Mg,jZ),e(jZ,Zze),e(Mg,eQe),e(Mg,Mk),e(Mk,oQe),e(Mg,rQe),e(v,tQe),e(v,Eg),e(Eg,DZ),e(DZ,aQe),e(Eg,nQe),e(Eg,Ek),e(Ek,sQe),e(Eg,lQe),e(v,iQe),e(v,Cg),e(Cg,GZ),e(GZ,dQe),e(Cg,cQe),e(Cg,Ck),e(Ck,mQe),e(Cg,fQe),e(v,gQe),e(v,wg),e(wg,OZ),e(OZ,hQe),e(wg,uQe),e(wg,wk),e(wk,pQe),e(wg,_Qe),e(v,bQe),e(v,Ag),e(Ag,VZ),e(VZ,vQe),e(Ag,FQe),e(Ag,Ak),e(Ak,TQe),e(Ag,MQe),e(v,EQe),e(v,yg),e(yg,XZ),e(XZ,CQe),e(yg,wQe),e(yg,yk),e(yk,AQe),e(yg,yQe),e(v,LQe),e(v,Lg),e(Lg,zZ),e(zZ,xQe),e(Lg,kQe),e(Lg,Lk),e(Lk,SQe),e(Lg,RQe),e(v,BQe),e(v,xg),e(xg,QZ),e(QZ,PQe),e(xg,$Qe),e(xg,xk),e(xk,IQe),e(xg,qQe),e(v,NQe),e(v,kg),e(kg,WZ),e(WZ,jQe),e(kg,DQe),e(kg,kk),e(kk,GQe),e(kg,OQe),e(v,VQe),e(v,Sg),e(Sg,HZ),e(HZ,XQe),e(Sg,zQe),e(Sg,Sk),e(Sk,QQe),e(Sg,WQe),e(v,HQe),e(v,Rg),e(Rg,UZ),e(UZ,UQe),e(Rg,JQe),e(Rg,Rk),e(Rk,YQe),e(Rg,KQe),e(v,ZQe),e(v,Bg),e(Bg,JZ),e(JZ,eWe),e(Bg,oWe),e(Bg,Bk),e(Bk,rWe),e(Bg,tWe),e(v,aWe),e(v,Pg),e(Pg,YZ),e(YZ,nWe),e(Pg,sWe),e(Pg,Pk),e(Pk,lWe),e(Pg,iWe),e(v,dWe),e(v,$g),e($g,KZ),e(KZ,cWe),e($g,mWe),e($g,$k),e($k,fWe),e($g,gWe),e(v,hWe),e(v,Ig),e(Ig,ZZ),e(ZZ,uWe),e(Ig,pWe),e(Ig,Ik),e(Ik,_We),e(Ig,bWe),e(v,vWe),e(v,qg),e(qg,eee),e(eee,FWe),e(qg,TWe),e(qg,qk),e(qk,MWe),e(qg,EWe),e(v,CWe),e(v,Ng),e(Ng,oee),e(oee,wWe),e(Ng,AWe),e(Ng,Nk),e(Nk,yWe),e(Ng,LWe),e(v,xWe),e(v,jg),e(jg,ree),e(ree,kWe),e(jg,SWe),e(jg,jk),e(jk,RWe),e(jg,BWe),e(v,PWe),e(v,Dg),e(Dg,tee),e(tee,$We),e(Dg,IWe),e(Dg,Dk),e(Dk,qWe),e(Dg,NWe),e(v,jWe),e(v,Gg),e(Gg,aee),e(aee,DWe),e(Gg,GWe),e(Gg,Gk),e(Gk,OWe),e(Gg,VWe),e(v,XWe),e(v,Og),e(Og,nee),e(nee,zWe),e(Og,QWe),e(Og,Ok),e(Ok,WWe),e(Og,HWe),e(v,UWe),e(v,Vg),e(Vg,see),e(see,JWe),e(Vg,YWe),e(Vg,Vk),e(Vk,KWe),e(Vg,ZWe),e(v,eHe),e(v,Xg),e(Xg,lee),e(lee,oHe),e(Xg,rHe),e(Xg,Xk),e(Xk,tHe),e(Xg,aHe),e(v,nHe),e(v,zg),e(zg,iee),e(iee,sHe),e(zg,lHe),e(zg,zk),e(zk,iHe),e(zg,dHe),e(go,cHe),e(go,dee),e(dee,mHe),e(go,fHe),g(rw,go,null),e(Qo,gHe),e(Qo,Qg),g(tw,Qg,null),e(Qg,hHe),e(Qg,cee),e(cee,uHe),b(c,sPe,_),b(c,od,_),e(od,Wg),e(Wg,mee),g(aw,mee,null),e(od,pHe),e(od,fee),e(fee,_He),b(c,lPe,_),b(c,Wo,_),g(nw,Wo,null),e(Wo,bHe),e(Wo,sw),e(sw,vHe),e(sw,Qk),e(Qk,FHe),e(sw,THe),e(Wo,MHe),e(Wo,lw),e(lw,EHe),e(lw,gee),e(gee,CHe),e(lw,wHe),e(Wo,AHe),e(Wo,ho),g(iw,ho,null),e(ho,yHe),e(ho,hee),e(hee,LHe),e(ho,xHe),e(ho,Oa),e(Oa,kHe),e(Oa,uee),e(uee,SHe),e(Oa,RHe),e(Oa,pee),e(pee,BHe),e(Oa,PHe),e(Oa,_ee),e(_ee,$He),e(Oa,IHe),e(ho,qHe),e(ho,E),e(E,Wn),e(Wn,bee),e(bee,NHe),e(Wn,jHe),e(Wn,Wk),e(Wk,DHe),e(Wn,GHe),e(Wn,Hk),e(Hk,OHe),e(Wn,VHe),e(E,XHe),e(E,Hn),e(Hn,vee),e(vee,zHe),e(Hn,QHe),e(Hn,Uk),e(Uk,WHe),e(Hn,HHe),e(Hn,Jk),e(Jk,UHe),e(Hn,JHe),e(E,YHe),e(E,Un),e(Un,Fee),e(Fee,KHe),e(Un,ZHe),e(Un,Yk),e(Yk,eUe),e(Un,oUe),e(Un,Kk),e(Kk,rUe),e(Un,tUe),e(E,aUe),e(E,Hg),e(Hg,Tee),e(Tee,nUe),e(Hg,sUe),e(Hg,Zk),e(Zk,lUe),e(Hg,iUe),e(E,dUe),e(E,Jn),e(Jn,Mee),e(Mee,cUe),e(Jn,mUe),e(Jn,eS),e(eS,fUe),e(Jn,gUe),e(Jn,oS),e(oS,hUe),e(Jn,uUe),e(E,pUe),e(E,Ug),e(Ug,Eee),e(Eee,_Ue),e(Ug,bUe),e(Ug,rS),e(rS,vUe),e(Ug,FUe),e(E,TUe),e(E,Jg),e(Jg,Cee),e(Cee,MUe),e(Jg,EUe),e(Jg,tS),e(tS,CUe),e(Jg,wUe),e(E,AUe),e(E,Yg),e(Yg,wee),e(wee,yUe),e(Yg,LUe),e(Yg,aS),e(aS,xUe),e(Yg,kUe),e(E,SUe),e(E,Yn),e(Yn,Aee),e(Aee,RUe),e(Yn,BUe),e(Yn,nS),e(nS,PUe),e(Yn,$Ue),e(Yn,sS),e(sS,IUe),e(Yn,qUe),e(E,NUe),e(E,Kn),e(Kn,yee),e(yee,jUe),e(Kn,DUe),e(Kn,lS),e(lS,GUe),e(Kn,OUe),e(Kn,iS),e(iS,VUe),e(Kn,XUe),e(E,zUe),e(E,Zn),e(Zn,Lee),e(Lee,QUe),e(Zn,WUe),e(Zn,dS),e(dS,HUe),e(Zn,UUe),e(Zn,cS),e(cS,JUe),e(Zn,YUe),e(E,KUe),e(E,Kg),e(Kg,xee),e(xee,ZUe),e(Kg,eJe),e(Kg,mS),e(mS,oJe),e(Kg,rJe),e(E,tJe),e(E,Zg),e(Zg,kee),e(kee,aJe),e(Zg,nJe),e(Zg,fS),e(fS,sJe),e(Zg,lJe),e(E,iJe),e(E,es),e(es,See),e(See,dJe),e(es,cJe),e(es,gS),e(gS,mJe),e(es,fJe),e(es,hS),e(hS,gJe),e(es,hJe),e(E,uJe),e(E,eh),e(eh,Ree),e(Ree,pJe),e(eh,_Je),e(eh,uS),e(uS,bJe),e(eh,vJe),e(E,FJe),e(E,os),e(os,Bee),e(Bee,TJe),e(os,MJe),e(os,pS),e(pS,EJe),e(os,CJe),e(os,_S),e(_S,wJe),e(os,AJe),e(E,yJe),e(E,rs),e(rs,Pee),e(Pee,LJe),e(rs,xJe),e(rs,bS),e(bS,kJe),e(rs,SJe),e(rs,vS),e(vS,RJe),e(rs,BJe),e(E,PJe),e(E,ts),e(ts,$ee),e($ee,$Je),e(ts,IJe),e(ts,FS),e(FS,qJe),e(ts,NJe),e(ts,Iee),e(Iee,jJe),e(ts,DJe),e(E,GJe),e(E,oh),e(oh,qee),e(qee,OJe),e(oh,VJe),e(oh,TS),e(TS,XJe),e(oh,zJe),e(E,QJe),e(E,as),e(as,Nee),e(Nee,WJe),e(as,HJe),e(as,MS),e(MS,UJe),e(as,JJe),e(as,ES),e(ES,YJe),e(as,KJe),e(E,ZJe),e(E,ns),e(ns,jee),e(jee,eYe),e(ns,oYe),e(ns,CS),e(CS,rYe),e(ns,tYe),e(ns,wS),e(wS,aYe),e(ns,nYe),e(E,sYe),e(E,ss),e(ss,Dee),e(Dee,lYe),e(ss,iYe),e(ss,AS),e(AS,dYe),e(ss,cYe),e(ss,yS),e(yS,mYe),e(ss,fYe),e(E,gYe),e(E,ls),e(ls,Gee),e(Gee,hYe),e(ls,uYe),e(ls,LS),e(LS,pYe),e(ls,_Ye),e(ls,xS),e(xS,bYe),e(ls,vYe),e(E,FYe),e(E,is),e(is,Oee),e(Oee,TYe),e(is,MYe),e(is,kS),e(kS,EYe),e(is,CYe),e(is,SS),e(SS,wYe),e(is,AYe),e(E,yYe),e(E,ds),e(ds,Vee),e(Vee,LYe),e(ds,xYe),e(ds,RS),e(RS,kYe),e(ds,SYe),e(ds,BS),e(BS,RYe),e(ds,BYe),e(E,PYe),e(E,rh),e(rh,Xee),e(Xee,$Ye),e(rh,IYe),e(rh,PS),e(PS,qYe),e(rh,NYe),e(E,jYe),e(E,cs),e(cs,zee),e(zee,DYe),e(cs,GYe),e(cs,$S),e($S,OYe),e(cs,VYe),e(cs,IS),e(IS,XYe),e(cs,zYe),e(E,QYe),e(E,th),e(th,Qee),e(Qee,WYe),e(th,HYe),e(th,qS),e(qS,UYe),e(th,JYe),e(E,YYe),e(E,ms),e(ms,Wee),e(Wee,KYe),e(ms,ZYe),e(ms,NS),e(NS,eKe),e(ms,oKe),e(ms,jS),e(jS,rKe),e(ms,tKe),e(E,aKe),e(E,fs),e(fs,Hee),e(Hee,nKe),e(fs,sKe),e(fs,DS),e(DS,lKe),e(fs,iKe),e(fs,GS),e(GS,dKe),e(fs,cKe),e(E,mKe),e(E,gs),e(gs,Uee),e(Uee,fKe),e(gs,gKe),e(gs,OS),e(OS,hKe),e(gs,uKe),e(gs,VS),e(VS,pKe),e(gs,_Ke),e(E,bKe),e(E,hs),e(hs,Jee),e(Jee,vKe),e(hs,FKe),e(hs,XS),e(XS,TKe),e(hs,MKe),e(hs,zS),e(zS,EKe),e(hs,CKe),e(E,wKe),e(E,us),e(us,Yee),e(Yee,AKe),e(us,yKe),e(us,QS),e(QS,LKe),e(us,xKe),e(us,WS),e(WS,kKe),e(us,SKe),e(E,RKe),e(E,ah),e(ah,Kee),e(Kee,BKe),e(ah,PKe),e(ah,HS),e(HS,$Ke),e(ah,IKe),e(E,qKe),e(E,ps),e(ps,Zee),e(Zee,NKe),e(ps,jKe),e(ps,US),e(US,DKe),e(ps,GKe),e(ps,JS),e(JS,OKe),e(ps,VKe),e(E,XKe),e(E,_s),e(_s,eoe),e(eoe,zKe),e(_s,QKe),e(_s,YS),e(YS,WKe),e(_s,HKe),e(_s,KS),e(KS,UKe),e(_s,JKe),e(E,YKe),e(E,bs),e(bs,ooe),e(ooe,KKe),e(bs,ZKe),e(bs,ZS),e(ZS,eZe),e(bs,oZe),e(bs,eR),e(eR,rZe),e(bs,tZe),e(E,aZe),e(E,vs),e(vs,roe),e(roe,nZe),e(vs,sZe),e(vs,oR),e(oR,lZe),e(vs,iZe),e(vs,rR),e(rR,dZe),e(vs,cZe),e(E,mZe),e(E,Fs),e(Fs,toe),e(toe,fZe),e(Fs,gZe),e(Fs,tR),e(tR,hZe),e(Fs,uZe),e(Fs,aR),e(aR,pZe),e(Fs,_Ze),e(E,bZe),e(E,Ts),e(Ts,aoe),e(aoe,vZe),e(Ts,FZe),e(Ts,nR),e(nR,TZe),e(Ts,MZe),e(Ts,sR),e(sR,EZe),e(Ts,CZe),e(E,wZe),e(E,nh),e(nh,noe),e(noe,AZe),e(nh,yZe),e(nh,lR),e(lR,LZe),e(nh,xZe),e(E,kZe),e(E,Ms),e(Ms,soe),e(soe,SZe),e(Ms,RZe),e(Ms,iR),e(iR,BZe),e(Ms,PZe),e(Ms,dR),e(dR,$Ze),e(Ms,IZe),e(E,qZe),e(E,sh),e(sh,loe),e(loe,NZe),e(sh,jZe),e(sh,cR),e(cR,DZe),e(sh,GZe),e(E,OZe),e(E,lh),e(lh,ioe),e(ioe,VZe),e(lh,XZe),e(lh,mR),e(mR,zZe),e(lh,QZe),e(E,WZe),e(E,Es),e(Es,doe),e(doe,HZe),e(Es,UZe),e(Es,fR),e(fR,JZe),e(Es,YZe),e(Es,gR),e(gR,KZe),e(Es,ZZe),e(E,eeo),e(E,Cs),e(Cs,coe),e(coe,oeo),e(Cs,reo),e(Cs,hR),e(hR,teo),e(Cs,aeo),e(Cs,uR),e(uR,neo),e(Cs,seo),e(E,leo),e(E,ws),e(ws,moe),e(moe,ieo),e(ws,deo),e(ws,pR),e(pR,ceo),e(ws,meo),e(ws,_R),e(_R,feo),e(ws,geo),e(E,heo),e(E,ih),e(ih,foe),e(foe,ueo),e(ih,peo),e(ih,bR),e(bR,_eo),e(ih,beo),e(E,veo),e(E,As),e(As,goe),e(goe,Feo),e(As,Teo),e(As,vR),e(vR,Meo),e(As,Eeo),e(As,FR),e(FR,Ceo),e(As,weo),e(E,Aeo),e(E,ys),e(ys,hoe),e(hoe,yeo),e(ys,Leo),e(ys,TR),e(TR,xeo),e(ys,keo),e(ys,MR),e(MR,Seo),e(ys,Reo),e(E,Beo),e(E,Ls),e(Ls,uoe),e(uoe,Peo),e(Ls,$eo),e(Ls,ER),e(ER,Ieo),e(Ls,qeo),e(Ls,CR),e(CR,Neo),e(Ls,jeo),e(E,Deo),e(E,xs),e(xs,poe),e(poe,Geo),e(xs,Oeo),e(xs,wR),e(wR,Veo),e(xs,Xeo),e(xs,AR),e(AR,zeo),e(xs,Qeo),e(E,Weo),e(E,ks),e(ks,_oe),e(_oe,Heo),e(ks,Ueo),e(ks,yR),e(yR,Jeo),e(ks,Yeo),e(ks,LR),e(LR,Keo),e(ks,Zeo),e(E,eoo),e(E,Ss),e(Ss,boe),e(boe,ooo),e(Ss,roo),e(Ss,xR),e(xR,too),e(Ss,aoo),e(Ss,kR),e(kR,noo),e(Ss,soo),e(E,loo),e(E,dh),e(dh,voe),e(voe,ioo),e(dh,doo),e(dh,SR),e(SR,coo),e(dh,moo),e(E,foo),e(E,ch),e(ch,Foe),e(Foe,goo),e(ch,hoo),e(ch,RR),e(RR,uoo),e(ch,poo),e(E,_oo),e(E,mh),e(mh,Toe),e(Toe,boo),e(mh,voo),e(mh,BR),e(BR,Foo),e(mh,Too),e(E,Moo),e(E,fh),e(fh,Moe),e(Moe,Eoo),e(fh,Coo),e(fh,PR),e(PR,woo),e(fh,Aoo),e(E,yoo),e(E,Rs),e(Rs,Eoe),e(Eoe,Loo),e(Rs,xoo),e(Rs,$R),e($R,koo),e(Rs,Soo),e(Rs,IR),e(IR,Roo),e(Rs,Boo),e(E,Poo),e(E,gh),e(gh,Coe),e(Coe,$oo),e(gh,Ioo),e(gh,qR),e(qR,qoo),e(gh,Noo),e(E,joo),e(E,Bs),e(Bs,woe),e(woe,Doo),e(Bs,Goo),e(Bs,NR),e(NR,Ooo),e(Bs,Voo),e(Bs,jR),e(jR,Xoo),e(Bs,zoo),e(E,Qoo),e(E,Ps),e(Ps,Aoe),e(Aoe,Woo),e(Ps,Hoo),e(Ps,DR),e(DR,Uoo),e(Ps,Joo),e(Ps,GR),e(GR,Yoo),e(Ps,Koo),e(E,Zoo),e(E,$s),e($s,yoe),e(yoe,ero),e($s,oro),e($s,OR),e(OR,rro),e($s,tro),e($s,VR),e(VR,aro),e($s,nro),e(E,sro),e(E,Is),e(Is,Loe),e(Loe,lro),e(Is,iro),e(Is,XR),e(XR,dro),e(Is,cro),e(Is,zR),e(zR,mro),e(Is,fro),e(E,gro),e(E,qs),e(qs,xoe),e(xoe,hro),e(qs,uro),e(qs,QR),e(QR,pro),e(qs,_ro),e(qs,WR),e(WR,bro),e(qs,vro),e(E,Fro),e(E,Ns),e(Ns,koe),e(koe,Tro),e(Ns,Mro),e(Ns,HR),e(HR,Ero),e(Ns,Cro),e(Ns,UR),e(UR,wro),e(Ns,Aro),e(E,yro),e(E,hh),e(hh,Soe),e(Soe,Lro),e(hh,xro),e(hh,JR),e(JR,kro),e(hh,Sro),e(E,Rro),e(E,uh),e(uh,Roe),e(Roe,Bro),e(uh,Pro),e(uh,YR),e(YR,$ro),e(uh,Iro),e(E,qro),e(E,js),e(js,Boe),e(Boe,Nro),e(js,jro),e(js,KR),e(KR,Dro),e(js,Gro),e(js,ZR),e(ZR,Oro),e(js,Vro),e(E,Xro),e(E,Ds),e(Ds,Poe),e(Poe,zro),e(Ds,Qro),e(Ds,eB),e(eB,Wro),e(Ds,Hro),e(Ds,oB),e(oB,Uro),e(Ds,Jro),e(E,Yro),e(E,Gs),e(Gs,$oe),e($oe,Kro),e(Gs,Zro),e(Gs,rB),e(rB,eto),e(Gs,oto),e(Gs,tB),e(tB,rto),e(Gs,tto),e(E,ato),e(E,ph),e(ph,Ioe),e(Ioe,nto),e(ph,sto),e(ph,aB),e(aB,lto),e(ph,ito),e(E,dto),e(E,_h),e(_h,qoe),e(qoe,cto),e(_h,mto),e(_h,nB),e(nB,fto),e(_h,gto),e(E,hto),e(E,bh),e(bh,Noe),e(Noe,uto),e(bh,pto),e(bh,sB),e(sB,_to),e(bh,bto),e(E,vto),e(E,Os),e(Os,joe),e(joe,Fto),e(Os,Tto),e(Os,lB),e(lB,Mto),e(Os,Eto),e(Os,iB),e(iB,Cto),e(Os,wto),e(E,Ato),e(E,vh),e(vh,Doe),e(Doe,yto),e(vh,Lto),e(vh,dB),e(dB,xto),e(vh,kto),e(E,Sto),e(E,Fh),e(Fh,Goe),e(Goe,Rto),e(Fh,Bto),e(Fh,cB),e(cB,Pto),e(Fh,$to),e(E,Ito),e(E,Vs),e(Vs,Ooe),e(Ooe,qto),e(Vs,Nto),e(Vs,mB),e(mB,jto),e(Vs,Dto),e(Vs,fB),e(fB,Gto),e(Vs,Oto),e(E,Vto),e(E,Th),e(Th,Voe),e(Voe,Xto),e(Th,zto),e(Th,gB),e(gB,Qto),e(Th,Wto),e(E,Hto),e(E,Mh),e(Mh,Xoe),e(Xoe,Uto),e(Mh,Jto),e(Mh,hB),e(hB,Yto),e(Mh,Kto),e(E,Zto),e(E,Xs),e(Xs,zoe),e(zoe,eao),e(Xs,oao),e(Xs,uB),e(uB,rao),e(Xs,tao),e(Xs,pB),e(pB,aao),e(Xs,nao),e(E,sao),e(E,zs),e(zs,Qoe),e(Qoe,lao),e(zs,iao),e(zs,_B),e(_B,dao),e(zs,cao),e(zs,bB),e(bB,mao),e(zs,fao),e(E,gao),e(E,Qs),e(Qs,Woe),e(Woe,hao),e(Qs,uao),e(Qs,vB),e(vB,pao),e(Qs,_ao),e(Qs,FB),e(FB,bao),e(Qs,vao),e(E,Fao),e(E,Ws),e(Ws,Hoe),e(Hoe,Tao),e(Ws,Mao),e(Ws,TB),e(TB,Eao),e(Ws,Cao),e(Ws,MB),e(MB,wao),e(Ws,Aao),e(ho,yao),e(ho,Uoe),e(Uoe,Lao),e(ho,xao),g(dw,ho,null),e(Wo,kao),e(Wo,Eh),g(cw,Eh,null),e(Eh,Sao),e(Eh,Joe),e(Joe,Rao),b(c,iPe,_),b(c,rd,_),e(rd,Ch),e(Ch,Yoe),g(mw,Yoe,null),e(rd,Bao),e(rd,Koe),e(Koe,Pao),b(c,dPe,_),b(c,Ho,_),g(fw,Ho,null),e(Ho,$ao),e(Ho,gw),e(gw,Iao),e(gw,EB),e(EB,qao),e(gw,Nao),e(Ho,jao),e(Ho,hw),e(hw,Dao),e(hw,Zoe),e(Zoe,Gao),e(hw,Oao),e(Ho,Vao),e(Ho,Ie),g(uw,Ie,null),e(Ie,Xao),e(Ie,ere),e(ere,zao),e(Ie,Qao),e(Ie,Va),e(Va,Wao),e(Va,ore),e(ore,Hao),e(Va,Uao),e(Va,rre),e(rre,Jao),e(Va,Yao),e(Va,tre),e(tre,Kao),e(Va,Zao),e(Ie,eno),e(Ie,H),e(H,wh),e(wh,are),e(are,ono),e(wh,rno),e(wh,CB),e(CB,tno),e(wh,ano),e(H,nno),e(H,Ah),e(Ah,nre),e(nre,sno),e(Ah,lno),e(Ah,wB),e(wB,ino),e(Ah,dno),e(H,cno),e(H,yh),e(yh,sre),e(sre,mno),e(yh,fno),e(yh,AB),e(AB,gno),e(yh,hno),e(H,uno),e(H,Lh),e(Lh,lre),e(lre,pno),e(Lh,_no),e(Lh,yB),e(yB,bno),e(Lh,vno),e(H,Fno),e(H,xh),e(xh,ire),e(ire,Tno),e(xh,Mno),e(xh,LB),e(LB,Eno),e(xh,Cno),e(H,wno),e(H,kh),e(kh,dre),e(dre,Ano),e(kh,yno),e(kh,xB),e(xB,Lno),e(kh,xno),e(H,kno),e(H,Sh),e(Sh,cre),e(cre,Sno),e(Sh,Rno),e(Sh,kB),e(kB,Bno),e(Sh,Pno),e(H,$no),e(H,Rh),e(Rh,mre),e(mre,Ino),e(Rh,qno),e(Rh,SB),e(SB,Nno),e(Rh,jno),e(H,Dno),e(H,Bh),e(Bh,fre),e(fre,Gno),e(Bh,Ono),e(Bh,RB),e(RB,Vno),e(Bh,Xno),e(H,zno),e(H,Ph),e(Ph,gre),e(gre,Qno),e(Ph,Wno),e(Ph,BB),e(BB,Hno),e(Ph,Uno),e(H,Jno),e(H,$h),e($h,hre),e(hre,Yno),e($h,Kno),e($h,PB),e(PB,Zno),e($h,eso),e(H,oso),e(H,Ih),e(Ih,ure),e(ure,rso),e(Ih,tso),e(Ih,$B),e($B,aso),e(Ih,nso),e(H,sso),e(H,qh),e(qh,pre),e(pre,lso),e(qh,iso),e(qh,IB),e(IB,dso),e(qh,cso),e(H,mso),e(H,Nh),e(Nh,_re),e(_re,fso),e(Nh,gso),e(Nh,qB),e(qB,hso),e(Nh,uso),e(H,pso),e(H,jh),e(jh,bre),e(bre,_so),e(jh,bso),e(jh,NB),e(NB,vso),e(jh,Fso),e(H,Tso),e(H,Dh),e(Dh,vre),e(vre,Mso),e(Dh,Eso),e(Dh,jB),e(jB,Cso),e(Dh,wso),e(H,Aso),e(H,Gh),e(Gh,Fre),e(Fre,yso),e(Gh,Lso),e(Gh,DB),e(DB,xso),e(Gh,kso),e(H,Sso),e(H,Oh),e(Oh,Tre),e(Tre,Rso),e(Oh,Bso),e(Oh,GB),e(GB,Pso),e(Oh,$so),e(H,Iso),e(H,Vh),e(Vh,Mre),e(Mre,qso),e(Vh,Nso),e(Vh,OB),e(OB,jso),e(Vh,Dso),e(H,Gso),e(H,Xh),e(Xh,Ere),e(Ere,Oso),e(Xh,Vso),e(Xh,VB),e(VB,Xso),e(Xh,zso),e(H,Qso),e(H,zh),e(zh,Cre),e(Cre,Wso),e(zh,Hso),e(zh,XB),e(XB,Uso),e(zh,Jso),e(H,Yso),e(H,Qh),e(Qh,wre),e(wre,Kso),e(Qh,Zso),e(Qh,zB),e(zB,elo),e(Qh,olo),e(H,rlo),e(H,Wh),e(Wh,Are),e(Are,tlo),e(Wh,alo),e(Wh,QB),e(QB,nlo),e(Wh,slo),e(Ie,llo),g(Hh,Ie,null),e(Ie,ilo),e(Ie,yre),e(yre,dlo),e(Ie,clo),g(pw,Ie,null),e(Ho,mlo),e(Ho,Uh),g(_w,Uh,null),e(Uh,flo),e(Uh,Lre),e(Lre,glo),b(c,cPe,_),b(c,td,_),e(td,Jh),e(Jh,xre),g(bw,xre,null),e(td,hlo),e(td,kre),e(kre,ulo),b(c,mPe,_),b(c,Uo,_),g(vw,Uo,null),e(Uo,plo),e(Uo,Fw),e(Fw,_lo),e(Fw,WB),e(WB,blo),e(Fw,vlo),e(Uo,Flo),e(Uo,Tw),e(Tw,Tlo),e(Tw,Sre),e(Sre,Mlo),e(Tw,Elo),e(Uo,Clo),e(Uo,qe),g(Mw,qe,null),e(qe,wlo),e(qe,Rre),e(Rre,Alo),e(qe,ylo),e(qe,ad),e(ad,Llo),e(ad,Bre),e(Bre,xlo),e(ad,klo),e(ad,Pre),e(Pre,Slo),e(ad,Rlo),e(qe,Blo),e(qe,de),e(de,Yh),e(Yh,$re),e($re,Plo),e(Yh,$lo),e(Yh,HB),e(HB,Ilo),e(Yh,qlo),e(de,Nlo),e(de,Kh),e(Kh,Ire),e(Ire,jlo),e(Kh,Dlo),e(Kh,UB),e(UB,Glo),e(Kh,Olo),e(de,Vlo),e(de,Zh),e(Zh,qre),e(qre,Xlo),e(Zh,zlo),e(Zh,JB),e(JB,Qlo),e(Zh,Wlo),e(de,Hlo),e(de,eu),e(eu,Nre),e(Nre,Ulo),e(eu,Jlo),e(eu,YB),e(YB,Ylo),e(eu,Klo),e(de,Zlo),e(de,ou),e(ou,jre),e(jre,eio),e(ou,oio),e(ou,KB),e(KB,rio),e(ou,tio),e(de,aio),e(de,ru),e(ru,Dre),e(Dre,nio),e(ru,sio),e(ru,ZB),e(ZB,lio),e(ru,iio),e(de,dio),e(de,tu),e(tu,Gre),e(Gre,cio),e(tu,mio),e(tu,eP),e(eP,fio),e(tu,gio),e(de,hio),e(de,au),e(au,Ore),e(Ore,uio),e(au,pio),e(au,oP),e(oP,_io),e(au,bio),e(de,vio),e(de,nu),e(nu,Vre),e(Vre,Fio),e(nu,Tio),e(nu,rP),e(rP,Mio),e(nu,Eio),e(de,Cio),e(de,su),e(su,Xre),e(Xre,wio),e(su,Aio),e(su,tP),e(tP,yio),e(su,Lio),e(de,xio),e(de,lu),e(lu,zre),e(zre,kio),e(lu,Sio),e(lu,aP),e(aP,Rio),e(lu,Bio),e(de,Pio),e(de,iu),e(iu,Qre),e(Qre,$io),e(iu,Iio),e(iu,nP),e(nP,qio),e(iu,Nio),e(de,jio),e(de,du),e(du,Wre),e(Wre,Dio),e(du,Gio),e(du,sP),e(sP,Oio),e(du,Vio),e(de,Xio),e(de,cu),e(cu,Hre),e(Hre,zio),e(cu,Qio),e(cu,lP),e(lP,Wio),e(cu,Hio),e(qe,Uio),g(mu,qe,null),e(qe,Jio),e(qe,Ure),e(Ure,Yio),e(qe,Kio),g(Ew,qe,null),e(Uo,Zio),e(Uo,fu),g(Cw,fu,null),e(fu,edo),e(fu,Jre),e(Jre,odo),b(c,fPe,_),b(c,nd,_),e(nd,gu),e(gu,Yre),g(ww,Yre,null),e(nd,rdo),e(nd,Kre),e(Kre,tdo),b(c,gPe,_),b(c,Jo,_),g(Aw,Jo,null),e(Jo,ado),e(Jo,sd),e(sd,ndo),e(sd,iP),e(iP,sdo),e(sd,ldo),e(sd,dP),e(dP,ido),e(sd,ddo),e(Jo,cdo),e(Jo,yw),e(yw,mdo),e(yw,Zre),e(Zre,fdo),e(yw,gdo),e(Jo,hdo),e(Jo,Xr),g(Lw,Xr,null),e(Xr,udo),e(Xr,ete),e(ete,pdo),e(Xr,_do),e(Xr,ld),e(ld,bdo),e(ld,ote),e(ote,vdo),e(ld,Fdo),e(ld,cP),e(cP,Tdo),e(ld,Mdo),e(Xr,Edo),e(Xr,rte),e(rte,Cdo),e(Xr,wdo),g(xw,Xr,null),e(Jo,Ado),e(Jo,Ne),g(kw,Ne,null),e(Ne,ydo),e(Ne,tte),e(tte,Ldo),e(Ne,xdo),e(Ne,Xa),e(Xa,kdo),e(Xa,ate),e(ate,Sdo),e(Xa,Rdo),e(Xa,nte),e(nte,Bdo),e(Xa,Pdo),e(Xa,ste),e(ste,$do),e(Xa,Ido),e(Ne,qdo),e(Ne,T),e(T,hu),e(hu,lte),e(lte,Ndo),e(hu,jdo),e(hu,mP),e(mP,Ddo),e(hu,Gdo),e(T,Odo),e(T,uu),e(uu,ite),e(ite,Vdo),e(uu,Xdo),e(uu,fP),e(fP,zdo),e(uu,Qdo),e(T,Wdo),e(T,pu),e(pu,dte),e(dte,Hdo),e(pu,Udo),e(pu,gP),e(gP,Jdo),e(pu,Ydo),e(T,Kdo),e(T,_u),e(_u,cte),e(cte,Zdo),e(_u,eco),e(_u,hP),e(hP,oco),e(_u,rco),e(T,tco),e(T,bu),e(bu,mte),e(mte,aco),e(bu,nco),e(bu,uP),e(uP,sco),e(bu,lco),e(T,ico),e(T,vu),e(vu,fte),e(fte,dco),e(vu,cco),e(vu,pP),e(pP,mco),e(vu,fco),e(T,gco),e(T,Fu),e(Fu,gte),e(gte,hco),e(Fu,uco),e(Fu,_P),e(_P,pco),e(Fu,_co),e(T,bco),e(T,Tu),e(Tu,hte),e(hte,vco),e(Tu,Fco),e(Tu,bP),e(bP,Tco),e(Tu,Mco),e(T,Eco),e(T,Mu),e(Mu,ute),e(ute,Cco),e(Mu,wco),e(Mu,vP),e(vP,Aco),e(Mu,yco),e(T,Lco),e(T,Eu),e(Eu,pte),e(pte,xco),e(Eu,kco),e(Eu,FP),e(FP,Sco),e(Eu,Rco),e(T,Bco),e(T,Cu),e(Cu,_te),e(_te,Pco),e(Cu,$co),e(Cu,TP),e(TP,Ico),e(Cu,qco),e(T,Nco),e(T,wu),e(wu,bte),e(bte,jco),e(wu,Dco),e(wu,MP),e(MP,Gco),e(wu,Oco),e(T,Vco),e(T,Au),e(Au,vte),e(vte,Xco),e(Au,zco),e(Au,EP),e(EP,Qco),e(Au,Wco),e(T,Hco),e(T,yu),e(yu,Fte),e(Fte,Uco),e(yu,Jco),e(yu,CP),e(CP,Yco),e(yu,Kco),e(T,Zco),e(T,Lu),e(Lu,Tte),e(Tte,emo),e(Lu,omo),e(Lu,wP),e(wP,rmo),e(Lu,tmo),e(T,amo),e(T,xu),e(xu,Mte),e(Mte,nmo),e(xu,smo),e(xu,AP),e(AP,lmo),e(xu,imo),e(T,dmo),e(T,ku),e(ku,Ete),e(Ete,cmo),e(ku,mmo),e(ku,yP),e(yP,fmo),e(ku,gmo),e(T,hmo),e(T,Su),e(Su,Cte),e(Cte,umo),e(Su,pmo),e(Su,LP),e(LP,_mo),e(Su,bmo),e(T,vmo),e(T,Ru),e(Ru,wte),e(wte,Fmo),e(Ru,Tmo),e(Ru,xP),e(xP,Mmo),e(Ru,Emo),e(T,Cmo),e(T,Bu),e(Bu,Ate),e(Ate,wmo),e(Bu,Amo),e(Bu,kP),e(kP,ymo),e(Bu,Lmo),e(T,xmo),e(T,Pu),e(Pu,yte),e(yte,kmo),e(Pu,Smo),e(Pu,SP),e(SP,Rmo),e(Pu,Bmo),e(T,Pmo),e(T,$u),e($u,Lte),e(Lte,$mo),e($u,Imo),e($u,RP),e(RP,qmo),e($u,Nmo),e(T,jmo),e(T,Iu),e(Iu,xte),e(xte,Dmo),e(Iu,Gmo),e(Iu,BP),e(BP,Omo),e(Iu,Vmo),e(T,Xmo),e(T,qu),e(qu,kte),e(kte,zmo),e(qu,Qmo),e(qu,PP),e(PP,Wmo),e(qu,Hmo),e(T,Umo),e(T,Nu),e(Nu,Ste),e(Ste,Jmo),e(Nu,Ymo),e(Nu,$P),e($P,Kmo),e(Nu,Zmo),e(T,efo),e(T,ju),e(ju,Rte),e(Rte,ofo),e(ju,rfo),e(ju,IP),e(IP,tfo),e(ju,afo),e(T,nfo),e(T,Du),e(Du,Bte),e(Bte,sfo),e(Du,lfo),e(Du,qP),e(qP,ifo),e(Du,dfo),e(T,cfo),e(T,Gu),e(Gu,Pte),e(Pte,mfo),e(Gu,ffo),e(Gu,NP),e(NP,gfo),e(Gu,hfo),e(T,ufo),e(T,Ou),e(Ou,$te),e($te,pfo),e(Ou,_fo),e(Ou,jP),e(jP,bfo),e(Ou,vfo),e(T,Ffo),e(T,Vu),e(Vu,Ite),e(Ite,Tfo),e(Vu,Mfo),e(Vu,DP),e(DP,Efo),e(Vu,Cfo),e(T,wfo),e(T,Hs),e(Hs,qte),e(qte,Afo),e(Hs,yfo),e(Hs,GP),e(GP,Lfo),e(Hs,xfo),e(Hs,OP),e(OP,kfo),e(Hs,Sfo),e(T,Rfo),e(T,Xu),e(Xu,Nte),e(Nte,Bfo),e(Xu,Pfo),e(Xu,VP),e(VP,$fo),e(Xu,Ifo),e(T,qfo),e(T,zu),e(zu,jte),e(jte,Nfo),e(zu,jfo),e(zu,XP),e(XP,Dfo),e(zu,Gfo),e(T,Ofo),e(T,Qu),e(Qu,Dte),e(Dte,Vfo),e(Qu,Xfo),e(Qu,zP),e(zP,zfo),e(Qu,Qfo),e(T,Wfo),e(T,Wu),e(Wu,Gte),e(Gte,Hfo),e(Wu,Ufo),e(Wu,QP),e(QP,Jfo),e(Wu,Yfo),e(T,Kfo),e(T,Hu),e(Hu,Ote),e(Ote,Zfo),e(Hu,ego),e(Hu,WP),e(WP,ogo),e(Hu,rgo),e(T,tgo),e(T,Uu),e(Uu,Vte),e(Vte,ago),e(Uu,ngo),e(Uu,HP),e(HP,sgo),e(Uu,lgo),e(T,igo),e(T,Ju),e(Ju,Xte),e(Xte,dgo),e(Ju,cgo),e(Ju,UP),e(UP,mgo),e(Ju,fgo),e(T,ggo),e(T,Yu),e(Yu,zte),e(zte,hgo),e(Yu,ugo),e(Yu,JP),e(JP,pgo),e(Yu,_go),e(T,bgo),e(T,Ku),e(Ku,Qte),e(Qte,vgo),e(Ku,Fgo),e(Ku,YP),e(YP,Tgo),e(Ku,Mgo),e(T,Ego),e(T,Zu),e(Zu,Wte),e(Wte,Cgo),e(Zu,wgo),e(Zu,KP),e(KP,Ago),e(Zu,ygo),e(T,Lgo),e(T,ep),e(ep,Hte),e(Hte,xgo),e(ep,kgo),e(ep,ZP),e(ZP,Sgo),e(ep,Rgo),e(T,Bgo),e(T,op),e(op,Ute),e(Ute,Pgo),e(op,$go),e(op,e$),e(e$,Igo),e(op,qgo),e(T,Ngo),e(T,rp),e(rp,Jte),e(Jte,jgo),e(rp,Dgo),e(rp,o$),e(o$,Ggo),e(rp,Ogo),e(T,Vgo),e(T,tp),e(tp,Yte),e(Yte,Xgo),e(tp,zgo),e(tp,r$),e(r$,Qgo),e(tp,Wgo),e(T,Hgo),e(T,ap),e(ap,Kte),e(Kte,Ugo),e(ap,Jgo),e(ap,t$),e(t$,Ygo),e(ap,Kgo),e(T,Zgo),e(T,np),e(np,Zte),e(Zte,eho),e(np,oho),e(np,a$),e(a$,rho),e(np,tho),e(T,aho),e(T,sp),e(sp,eae),e(eae,nho),e(sp,sho),e(sp,n$),e(n$,lho),e(sp,iho),e(T,dho),e(T,lp),e(lp,oae),e(oae,cho),e(lp,mho),e(lp,s$),e(s$,fho),e(lp,gho),e(T,hho),e(T,ip),e(ip,rae),e(rae,uho),e(ip,pho),e(ip,l$),e(l$,_ho),e(ip,bho),e(T,vho),e(T,dp),e(dp,tae),e(tae,Fho),e(dp,Tho),e(dp,i$),e(i$,Mho),e(dp,Eho),e(T,Cho),e(T,cp),e(cp,aae),e(aae,who),e(cp,Aho),e(cp,d$),e(d$,yho),e(cp,Lho),e(T,xho),e(T,mp),e(mp,nae),e(nae,kho),e(mp,Sho),e(mp,c$),e(c$,Rho),e(mp,Bho),e(T,Pho),e(T,fp),e(fp,sae),e(sae,$ho),e(fp,Iho),e(fp,m$),e(m$,qho),e(fp,Nho),e(T,jho),e(T,gp),e(gp,lae),e(lae,Dho),e(gp,Gho),e(gp,f$),e(f$,Oho),e(gp,Vho),e(T,Xho),e(T,hp),e(hp,iae),e(iae,zho),e(hp,Qho),e(hp,g$),e(g$,Who),e(hp,Hho),e(T,Uho),e(T,up),e(up,dae),e(dae,Jho),e(up,Yho),e(up,h$),e(h$,Kho),e(up,Zho),e(T,euo),e(T,pp),e(pp,cae),e(cae,ouo),e(pp,ruo),e(pp,u$),e(u$,tuo),e(pp,auo),e(T,nuo),e(T,_p),e(_p,mae),e(mae,suo),e(_p,luo),e(_p,p$),e(p$,iuo),e(_p,duo),e(T,cuo),e(T,bp),e(bp,fae),e(fae,muo),e(bp,fuo),e(bp,_$),e(_$,guo),e(bp,huo),e(T,uuo),e(T,vp),e(vp,gae),e(gae,puo),e(vp,_uo),e(vp,b$),e(b$,buo),e(vp,vuo),e(T,Fuo),e(T,Fp),e(Fp,hae),e(hae,Tuo),e(Fp,Muo),e(Fp,v$),e(v$,Euo),e(Fp,Cuo),e(T,wuo),e(T,Tp),e(Tp,uae),e(uae,Auo),e(Tp,yuo),e(Tp,F$),e(F$,Luo),e(Tp,xuo),e(T,kuo),e(T,Mp),e(Mp,pae),e(pae,Suo),e(Mp,Ruo),e(Mp,T$),e(T$,Buo),e(Mp,Puo),e(T,$uo),e(T,Ep),e(Ep,_ae),e(_ae,Iuo),e(Ep,quo),e(Ep,M$),e(M$,Nuo),e(Ep,juo),e(T,Duo),e(T,Cp),e(Cp,bae),e(bae,Guo),e(Cp,Ouo),e(Cp,E$),e(E$,Vuo),e(Cp,Xuo),e(T,zuo),e(T,wp),e(wp,vae),e(vae,Quo),e(wp,Wuo),e(wp,C$),e(C$,Huo),e(wp,Uuo),e(T,Juo),e(T,Ap),e(Ap,Fae),e(Fae,Yuo),e(Ap,Kuo),e(Ap,w$),e(w$,Zuo),e(Ap,epo),e(T,opo),e(T,yp),e(yp,Tae),e(Tae,rpo),e(yp,tpo),e(yp,A$),e(A$,apo),e(yp,npo),e(T,spo),e(T,Lp),e(Lp,Mae),e(Mae,lpo),e(Lp,ipo),e(Lp,y$),e(y$,dpo),e(Lp,cpo),e(T,mpo),e(T,xp),e(xp,Eae),e(Eae,fpo),e(xp,gpo),e(xp,L$),e(L$,hpo),e(xp,upo),e(T,ppo),e(T,kp),e(kp,Cae),e(Cae,_po),e(kp,bpo),e(kp,x$),e(x$,vpo),e(kp,Fpo),e(T,Tpo),e(T,Sp),e(Sp,wae),e(wae,Mpo),e(Sp,Epo),e(Sp,k$),e(k$,Cpo),e(Sp,wpo),e(T,Apo),e(T,Rp),e(Rp,Aae),e(Aae,ypo),e(Rp,Lpo),e(Rp,S$),e(S$,xpo),e(Rp,kpo),e(T,Spo),e(T,Bp),e(Bp,yae),e(yae,Rpo),e(Bp,Bpo),e(Bp,R$),e(R$,Ppo),e(Bp,$po),e(T,Ipo),e(T,Pp),e(Pp,Lae),e(Lae,qpo),e(Pp,Npo),e(Pp,B$),e(B$,jpo),e(Pp,Dpo),e(T,Gpo),e(T,$p),e($p,xae),e(xae,Opo),e($p,Vpo),e($p,P$),e(P$,Xpo),e($p,zpo),e(T,Qpo),e(T,Ip),e(Ip,kae),e(kae,Wpo),e(Ip,Hpo),e(Ip,$$),e($$,Upo),e(Ip,Jpo),e(T,Ypo),e(T,qp),e(qp,Sae),e(Sae,Kpo),e(qp,Zpo),e(qp,I$),e(I$,e_o),e(qp,o_o),e(T,r_o),e(T,Np),e(Np,Rae),e(Rae,t_o),e(Np,a_o),e(Np,q$),e(q$,n_o),e(Np,s_o),e(T,l_o),e(T,jp),e(jp,Bae),e(Bae,i_o),e(jp,d_o),e(jp,N$),e(N$,c_o),e(jp,m_o),e(T,f_o),e(T,Dp),e(Dp,Pae),e(Pae,g_o),e(Dp,h_o),e(Dp,j$),e(j$,u_o),e(Dp,p_o),e(T,__o),e(T,Gp),e(Gp,$ae),e($ae,b_o),e(Gp,v_o),e(Gp,D$),e(D$,F_o),e(Gp,T_o),e(T,M_o),e(T,Op),e(Op,Iae),e(Iae,E_o),e(Op,C_o),e(Op,G$),e(G$,w_o),e(Op,A_o),e(T,y_o),e(T,Vp),e(Vp,qae),e(qae,L_o),e(Vp,x_o),e(Vp,O$),e(O$,k_o),e(Vp,S_o),e(T,R_o),e(T,Xp),e(Xp,Nae),e(Nae,B_o),e(Xp,P_o),e(Xp,V$),e(V$,$_o),e(Xp,I_o),e(T,q_o),e(T,zp),e(zp,jae),e(jae,N_o),e(zp,j_o),e(zp,X$),e(X$,D_o),e(zp,G_o),e(T,O_o),e(T,Qp),e(Qp,Dae),e(Dae,V_o),e(Qp,X_o),e(Qp,z$),e(z$,z_o),e(Qp,Q_o),e(T,W_o),e(T,Wp),e(Wp,Gae),e(Gae,H_o),e(Wp,U_o),e(Wp,Q$),e(Q$,J_o),e(Wp,Y_o),e(T,K_o),e(T,Hp),e(Hp,Oae),e(Oae,Z_o),e(Hp,ebo),e(Hp,W$),e(W$,obo),e(Hp,rbo),e(T,tbo),e(T,Up),e(Up,Vae),e(Vae,abo),e(Up,nbo),e(Up,H$),e(H$,sbo),e(Up,lbo),e(T,ibo),e(T,Jp),e(Jp,Xae),e(Xae,dbo),e(Jp,cbo),e(Jp,U$),e(U$,mbo),e(Jp,fbo),e(T,gbo),e(T,Yp),e(Yp,zae),e(zae,hbo),e(Yp,ubo),e(Yp,J$),e(J$,pbo),e(Yp,_bo),e(T,bbo),e(T,Kp),e(Kp,Qae),e(Qae,vbo),e(Kp,Fbo),e(Kp,Y$),e(Y$,Tbo),e(Kp,Mbo),e(Ne,Ebo),e(Ne,Zp),e(Zp,Cbo),e(Zp,Wae),e(Wae,wbo),e(Zp,Abo),e(Zp,Hae),e(Hae,ybo),e(Ne,Lbo),e(Ne,Uae),e(Uae,xbo),e(Ne,kbo),g(Sw,Ne,null),b(c,hPe,_),b(c,id,_),e(id,e_),e(e_,Jae),g(Rw,Jae,null),e(id,Sbo),e(id,Yae),e(Yae,Rbo),b(c,uPe,_),b(c,Yo,_),g(Bw,Yo,null),e(Yo,Bbo),e(Yo,dd),e(dd,Pbo),e(dd,K$),e(K$,$bo),e(dd,Ibo),e(dd,Z$),e(Z$,qbo),e(dd,Nbo),e(Yo,jbo),e(Yo,Pw),e(Pw,Dbo),e(Pw,Kae),e(Kae,Gbo),e(Pw,Obo),e(Yo,Vbo),e(Yo,zr),g($w,zr,null),e(zr,Xbo),e(zr,Zae),e(Zae,zbo),e(zr,Qbo),e(zr,cd),e(cd,Wbo),e(cd,ene),e(ene,Hbo),e(cd,Ubo),e(cd,eI),e(eI,Jbo),e(cd,Ybo),e(zr,Kbo),e(zr,one),e(one,Zbo),e(zr,e2o),g(Iw,zr,null),e(Yo,o2o),e(Yo,je),g(qw,je,null),e(je,r2o),e(je,rne),e(rne,t2o),e(je,a2o),e(je,za),e(za,n2o),e(za,tne),e(tne,s2o),e(za,l2o),e(za,ane),e(ane,i2o),e(za,d2o),e(za,nne),e(nne,c2o),e(za,m2o),e(je,f2o),e(je,S),e(S,o_),e(o_,sne),e(sne,g2o),e(o_,h2o),e(o_,oI),e(oI,u2o),e(o_,p2o),e(S,_2o),e(S,r_),e(r_,lne),e(lne,b2o),e(r_,v2o),e(r_,rI),e(rI,F2o),e(r_,T2o),e(S,M2o),e(S,t_),e(t_,ine),e(ine,E2o),e(t_,C2o),e(t_,tI),e(tI,w2o),e(t_,A2o),e(S,y2o),e(S,a_),e(a_,dne),e(dne,L2o),e(a_,x2o),e(a_,aI),e(aI,k2o),e(a_,S2o),e(S,R2o),e(S,n_),e(n_,cne),e(cne,B2o),e(n_,P2o),e(n_,nI),e(nI,$2o),e(n_,I2o),e(S,q2o),e(S,s_),e(s_,mne),e(mne,N2o),e(s_,j2o),e(s_,sI),e(sI,D2o),e(s_,G2o),e(S,O2o),e(S,l_),e(l_,fne),e(fne,V2o),e(l_,X2o),e(l_,lI),e(lI,z2o),e(l_,Q2o),e(S,W2o),e(S,i_),e(i_,gne),e(gne,H2o),e(i_,U2o),e(i_,iI),e(iI,J2o),e(i_,Y2o),e(S,K2o),e(S,d_),e(d_,hne),e(hne,Z2o),e(d_,evo),e(d_,dI),e(dI,ovo),e(d_,rvo),e(S,tvo),e(S,c_),e(c_,une),e(une,avo),e(c_,nvo),e(c_,cI),e(cI,svo),e(c_,lvo),e(S,ivo),e(S,m_),e(m_,pne),e(pne,dvo),e(m_,cvo),e(m_,mI),e(mI,mvo),e(m_,fvo),e(S,gvo),e(S,f_),e(f_,_ne),e(_ne,hvo),e(f_,uvo),e(f_,fI),e(fI,pvo),e(f_,_vo),e(S,bvo),e(S,g_),e(g_,bne),e(bne,vvo),e(g_,Fvo),e(g_,gI),e(gI,Tvo),e(g_,Mvo),e(S,Evo),e(S,h_),e(h_,vne),e(vne,Cvo),e(h_,wvo),e(h_,hI),e(hI,Avo),e(h_,yvo),e(S,Lvo),e(S,u_),e(u_,Fne),e(Fne,xvo),e(u_,kvo),e(u_,uI),e(uI,Svo),e(u_,Rvo),e(S,Bvo),e(S,p_),e(p_,Tne),e(Tne,Pvo),e(p_,$vo),e(p_,pI),e(pI,Ivo),e(p_,qvo),e(S,Nvo),e(S,__),e(__,Mne),e(Mne,jvo),e(__,Dvo),e(__,_I),e(_I,Gvo),e(__,Ovo),e(S,Vvo),e(S,b_),e(b_,Ene),e(Ene,Xvo),e(b_,zvo),e(b_,bI),e(bI,Qvo),e(b_,Wvo),e(S,Hvo),e(S,v_),e(v_,Cne),e(Cne,Uvo),e(v_,Jvo),e(v_,vI),e(vI,Yvo),e(v_,Kvo),e(S,Zvo),e(S,F_),e(F_,wne),e(wne,eFo),e(F_,oFo),e(F_,FI),e(FI,rFo),e(F_,tFo),e(S,aFo),e(S,T_),e(T_,Ane),e(Ane,nFo),e(T_,sFo),e(T_,TI),e(TI,lFo),e(T_,iFo),e(S,dFo),e(S,M_),e(M_,yne),e(yne,cFo),e(M_,mFo),e(M_,MI),e(MI,fFo),e(M_,gFo),e(S,hFo),e(S,E_),e(E_,Lne),e(Lne,uFo),e(E_,pFo),e(E_,EI),e(EI,_Fo),e(E_,bFo),e(S,vFo),e(S,C_),e(C_,xne),e(xne,FFo),e(C_,TFo),e(C_,CI),e(CI,MFo),e(C_,EFo),e(S,CFo),e(S,w_),e(w_,kne),e(kne,wFo),e(w_,AFo),e(w_,wI),e(wI,yFo),e(w_,LFo),e(S,xFo),e(S,A_),e(A_,Sne),e(Sne,kFo),e(A_,SFo),e(A_,AI),e(AI,RFo),e(A_,BFo),e(S,PFo),e(S,y_),e(y_,Rne),e(Rne,$Fo),e(y_,IFo),e(y_,yI),e(yI,qFo),e(y_,NFo),e(S,jFo),e(S,L_),e(L_,Bne),e(Bne,DFo),e(L_,GFo),e(L_,LI),e(LI,OFo),e(L_,VFo),e(S,XFo),e(S,x_),e(x_,Pne),e(Pne,zFo),e(x_,QFo),e(x_,xI),e(xI,WFo),e(x_,HFo),e(S,UFo),e(S,k_),e(k_,$ne),e($ne,JFo),e(k_,YFo),e(k_,kI),e(kI,KFo),e(k_,ZFo),e(S,e1o),e(S,S_),e(S_,Ine),e(Ine,o1o),e(S_,r1o),e(S_,SI),e(SI,t1o),e(S_,a1o),e(S,n1o),e(S,R_),e(R_,qne),e(qne,s1o),e(R_,l1o),e(R_,RI),e(RI,i1o),e(R_,d1o),e(S,c1o),e(S,B_),e(B_,Nne),e(Nne,m1o),e(B_,f1o),e(B_,BI),e(BI,g1o),e(B_,h1o),e(S,u1o),e(S,P_),e(P_,jne),e(jne,p1o),e(P_,_1o),e(P_,PI),e(PI,b1o),e(P_,v1o),e(S,F1o),e(S,$_),e($_,Dne),e(Dne,T1o),e($_,M1o),e($_,$I),e($I,E1o),e($_,C1o),e(S,w1o),e(S,I_),e(I_,Gne),e(Gne,A1o),e(I_,y1o),e(I_,II),e(II,L1o),e(I_,x1o),e(S,k1o),e(S,q_),e(q_,One),e(One,S1o),e(q_,R1o),e(q_,qI),e(qI,B1o),e(q_,P1o),e(S,$1o),e(S,N_),e(N_,Vne),e(Vne,I1o),e(N_,q1o),e(N_,NI),e(NI,N1o),e(N_,j1o),e(S,D1o),e(S,j_),e(j_,Xne),e(Xne,G1o),e(j_,O1o),e(j_,jI),e(jI,V1o),e(j_,X1o),e(je,z1o),e(je,D_),e(D_,Q1o),e(D_,zne),e(zne,W1o),e(D_,H1o),e(D_,Qne),e(Qne,U1o),e(je,J1o),e(je,Wne),e(Wne,Y1o),e(je,K1o),g(Nw,je,null),b(c,pPe,_),b(c,md,_),e(md,G_),e(G_,Hne),g(jw,Hne,null),e(md,Z1o),e(md,Une),e(Une,eTo),b(c,_Pe,_),b(c,Ko,_),g(Dw,Ko,null),e(Ko,oTo),e(Ko,fd),e(fd,rTo),e(fd,DI),e(DI,tTo),e(fd,aTo),e(fd,GI),e(GI,nTo),e(fd,sTo),e(Ko,lTo),e(Ko,Gw),e(Gw,iTo),e(Gw,Jne),e(Jne,dTo),e(Gw,cTo),e(Ko,mTo),e(Ko,Qr),g(Ow,Qr,null),e(Qr,fTo),e(Qr,Yne),e(Yne,gTo),e(Qr,hTo),e(Qr,gd),e(gd,uTo),e(gd,Kne),e(Kne,pTo),e(gd,_To),e(gd,OI),e(OI,bTo),e(gd,vTo),e(Qr,FTo),e(Qr,Zne),e(Zne,TTo),e(Qr,MTo),g(Vw,Qr,null),e(Ko,ETo),e(Ko,De),g(Xw,De,null),e(De,CTo),e(De,ese),e(ese,wTo),e(De,ATo),e(De,Qa),e(Qa,yTo),e(Qa,ose),e(ose,LTo),e(Qa,xTo),e(Qa,rse),e(rse,kTo),e(Qa,STo),e(Qa,tse),e(tse,RTo),e(Qa,BTo),e(De,PTo),e(De,$),e($,O_),e(O_,ase),e(ase,$To),e(O_,ITo),e(O_,VI),e(VI,qTo),e(O_,NTo),e($,jTo),e($,V_),e(V_,nse),e(nse,DTo),e(V_,GTo),e(V_,XI),e(XI,OTo),e(V_,VTo),e($,XTo),e($,X_),e(X_,sse),e(sse,zTo),e(X_,QTo),e(X_,zI),e(zI,WTo),e(X_,HTo),e($,UTo),e($,z_),e(z_,lse),e(lse,JTo),e(z_,YTo),e(z_,QI),e(QI,KTo),e(z_,ZTo),e($,eMo),e($,Q_),e(Q_,ise),e(ise,oMo),e(Q_,rMo),e(Q_,WI),e(WI,tMo),e(Q_,aMo),e($,nMo),e($,W_),e(W_,dse),e(dse,sMo),e(W_,lMo),e(W_,HI),e(HI,iMo),e(W_,dMo),e($,cMo),e($,H_),e(H_,cse),e(cse,mMo),e(H_,fMo),e(H_,UI),e(UI,gMo),e(H_,hMo),e($,uMo),e($,U_),e(U_,mse),e(mse,pMo),e(U_,_Mo),e(U_,JI),e(JI,bMo),e(U_,vMo),e($,FMo),e($,J_),e(J_,fse),e(fse,TMo),e(J_,MMo),e(J_,YI),e(YI,EMo),e(J_,CMo),e($,wMo),e($,Y_),e(Y_,gse),e(gse,AMo),e(Y_,yMo),e(Y_,KI),e(KI,LMo),e(Y_,xMo),e($,kMo),e($,K_),e(K_,hse),e(hse,SMo),e(K_,RMo),e(K_,ZI),e(ZI,BMo),e(K_,PMo),e($,$Mo),e($,Z_),e(Z_,use),e(use,IMo),e(Z_,qMo),e(Z_,eq),e(eq,NMo),e(Z_,jMo),e($,DMo),e($,eb),e(eb,pse),e(pse,GMo),e(eb,OMo),e(eb,oq),e(oq,VMo),e(eb,XMo),e($,zMo),e($,ob),e(ob,_se),e(_se,QMo),e(ob,WMo),e(ob,rq),e(rq,HMo),e(ob,UMo),e($,JMo),e($,rb),e(rb,bse),e(bse,YMo),e(rb,KMo),e(rb,tq),e(tq,ZMo),e(rb,e4o),e($,o4o),e($,tb),e(tb,vse),e(vse,r4o),e(tb,t4o),e(tb,aq),e(aq,a4o),e(tb,n4o),e($,s4o),e($,ab),e(ab,Fse),e(Fse,l4o),e(ab,i4o),e(ab,nq),e(nq,d4o),e(ab,c4o),e($,m4o),e($,nb),e(nb,Tse),e(Tse,f4o),e(nb,g4o),e(nb,sq),e(sq,h4o),e(nb,u4o),e($,p4o),e($,sb),e(sb,Mse),e(Mse,_4o),e(sb,b4o),e(sb,lq),e(lq,v4o),e(sb,F4o),e($,T4o),e($,lb),e(lb,Ese),e(Ese,M4o),e(lb,E4o),e(lb,iq),e(iq,C4o),e(lb,w4o),e($,A4o),e($,ib),e(ib,Cse),e(Cse,y4o),e(ib,L4o),e(ib,dq),e(dq,x4o),e(ib,k4o),e($,S4o),e($,db),e(db,wse),e(wse,R4o),e(db,B4o),e(db,cq),e(cq,P4o),e(db,$4o),e($,I4o),e($,cb),e(cb,Ase),e(Ase,q4o),e(cb,N4o),e(cb,mq),e(mq,j4o),e(cb,D4o),e($,G4o),e($,mb),e(mb,yse),e(yse,O4o),e(mb,V4o),e(mb,fq),e(fq,X4o),e(mb,z4o),e($,Q4o),e($,fb),e(fb,Lse),e(Lse,W4o),e(fb,H4o),e(fb,gq),e(gq,U4o),e(fb,J4o),e($,Y4o),e($,gb),e(gb,xse),e(xse,K4o),e(gb,Z4o),e(gb,hq),e(hq,eEo),e(gb,oEo),e($,rEo),e($,hb),e(hb,kse),e(kse,tEo),e(hb,aEo),e(hb,uq),e(uq,nEo),e(hb,sEo),e($,lEo),e($,ub),e(ub,Sse),e(Sse,iEo),e(ub,dEo),e(ub,pq),e(pq,cEo),e(ub,mEo),e($,fEo),e($,pb),e(pb,Rse),e(Rse,gEo),e(pb,hEo),e(pb,_q),e(_q,uEo),e(pb,pEo),e($,_Eo),e($,_b),e(_b,Bse),e(Bse,bEo),e(_b,vEo),e(_b,bq),e(bq,FEo),e(_b,TEo),e($,MEo),e($,bb),e(bb,Pse),e(Pse,EEo),e(bb,CEo),e(bb,vq),e(vq,wEo),e(bb,AEo),e($,yEo),e($,vb),e(vb,$se),e($se,LEo),e(vb,xEo),e(vb,Fq),e(Fq,kEo),e(vb,SEo),e($,REo),e($,Fb),e(Fb,Ise),e(Ise,BEo),e(Fb,PEo),e(Fb,Tq),e(Tq,$Eo),e(Fb,IEo),e($,qEo),e($,Tb),e(Tb,qse),e(qse,NEo),e(Tb,jEo),e(Tb,Mq),e(Mq,DEo),e(Tb,GEo),e($,OEo),e($,Mb),e(Mb,Nse),e(Nse,VEo),e(Mb,XEo),e(Mb,Eq),e(Eq,zEo),e(Mb,QEo),e(De,WEo),e(De,Eb),e(Eb,HEo),e(Eb,jse),e(jse,UEo),e(Eb,JEo),e(Eb,Dse),e(Dse,YEo),e(De,KEo),e(De,Gse),e(Gse,ZEo),e(De,e5o),g(zw,De,null),b(c,bPe,_),b(c,hd,_),e(hd,Cb),e(Cb,Ose),g(Qw,Ose,null),e(hd,o5o),e(hd,Vse),e(Vse,r5o),b(c,vPe,_),b(c,Zo,_),g(Ww,Zo,null),e(Zo,t5o),e(Zo,ud),e(ud,a5o),e(ud,Cq),e(Cq,n5o),e(ud,s5o),e(ud,wq),e(wq,l5o),e(ud,i5o),e(Zo,d5o),e(Zo,Hw),e(Hw,c5o),e(Hw,Xse),e(Xse,m5o),e(Hw,f5o),e(Zo,g5o),e(Zo,Wr),g(Uw,Wr,null),e(Wr,h5o),e(Wr,zse),e(zse,u5o),e(Wr,p5o),e(Wr,pd),e(pd,_5o),e(pd,Qse),e(Qse,b5o),e(pd,v5o),e(pd,Aq),e(Aq,F5o),e(pd,T5o),e(Wr,M5o),e(Wr,Wse),e(Wse,E5o),e(Wr,C5o),g(Jw,Wr,null),e(Zo,w5o),e(Zo,Ge),g(Yw,Ge,null),e(Ge,A5o),e(Ge,Hse),e(Hse,y5o),e(Ge,L5o),e(Ge,Wa),e(Wa,x5o),e(Wa,Use),e(Use,k5o),e(Wa,S5o),e(Wa,Jse),e(Jse,R5o),e(Wa,B5o),e(Wa,Yse),e(Yse,P5o),e(Wa,$5o),e(Ge,I5o),e(Ge,I),e(I,wb),e(wb,Kse),e(Kse,q5o),e(wb,N5o),e(wb,yq),e(yq,j5o),e(wb,D5o),e(I,G5o),e(I,Ab),e(Ab,Zse),e(Zse,O5o),e(Ab,V5o),e(Ab,Lq),e(Lq,X5o),e(Ab,z5o),e(I,Q5o),e(I,yb),e(yb,ele),e(ele,W5o),e(yb,H5o),e(yb,xq),e(xq,U5o),e(yb,J5o),e(I,Y5o),e(I,Lb),e(Lb,ole),e(ole,K5o),e(Lb,Z5o),e(Lb,kq),e(kq,e3o),e(Lb,o3o),e(I,r3o),e(I,xb),e(xb,rle),e(rle,t3o),e(xb,a3o),e(xb,Sq),e(Sq,n3o),e(xb,s3o),e(I,l3o),e(I,kb),e(kb,tle),e(tle,i3o),e(kb,d3o),e(kb,Rq),e(Rq,c3o),e(kb,m3o),e(I,f3o),e(I,Sb),e(Sb,ale),e(ale,g3o),e(Sb,h3o),e(Sb,Bq),e(Bq,u3o),e(Sb,p3o),e(I,_3o),e(I,Rb),e(Rb,nle),e(nle,b3o),e(Rb,v3o),e(Rb,Pq),e(Pq,F3o),e(Rb,T3o),e(I,M3o),e(I,Bb),e(Bb,sle),e(sle,E3o),e(Bb,C3o),e(Bb,$q),e($q,w3o),e(Bb,A3o),e(I,y3o),e(I,Pb),e(Pb,lle),e(lle,L3o),e(Pb,x3o),e(Pb,Iq),e(Iq,k3o),e(Pb,S3o),e(I,R3o),e(I,$b),e($b,ile),e(ile,B3o),e($b,P3o),e($b,qq),e(qq,$3o),e($b,I3o),e(I,q3o),e(I,Ib),e(Ib,dle),e(dle,N3o),e(Ib,j3o),e(Ib,Nq),e(Nq,D3o),e(Ib,G3o),e(I,O3o),e(I,qb),e(qb,cle),e(cle,V3o),e(qb,X3o),e(qb,jq),e(jq,z3o),e(qb,Q3o),e(I,W3o),e(I,Nb),e(Nb,mle),e(mle,H3o),e(Nb,U3o),e(Nb,Dq),e(Dq,J3o),e(Nb,Y3o),e(I,K3o),e(I,jb),e(jb,fle),e(fle,Z3o),e(jb,eCo),e(jb,Gq),e(Gq,oCo),e(jb,rCo),e(I,tCo),e(I,Db),e(Db,gle),e(gle,aCo),e(Db,nCo),e(Db,Oq),e(Oq,sCo),e(Db,lCo),e(I,iCo),e(I,Gb),e(Gb,hle),e(hle,dCo),e(Gb,cCo),e(Gb,Vq),e(Vq,mCo),e(Gb,fCo),e(I,gCo),e(I,Ob),e(Ob,ule),e(ule,hCo),e(Ob,uCo),e(Ob,Xq),e(Xq,pCo),e(Ob,_Co),e(I,bCo),e(I,Vb),e(Vb,ple),e(ple,vCo),e(Vb,FCo),e(Vb,zq),e(zq,TCo),e(Vb,MCo),e(I,ECo),e(I,Xb),e(Xb,_le),e(_le,CCo),e(Xb,wCo),e(Xb,Qq),e(Qq,ACo),e(Xb,yCo),e(I,LCo),e(I,zb),e(zb,ble),e(ble,xCo),e(zb,kCo),e(zb,Wq),e(Wq,SCo),e(zb,RCo),e(I,BCo),e(I,Qb),e(Qb,vle),e(vle,PCo),e(Qb,$Co),e(Qb,Hq),e(Hq,ICo),e(Qb,qCo),e(I,NCo),e(I,Wb),e(Wb,Fle),e(Fle,jCo),e(Wb,DCo),e(Wb,Uq),e(Uq,GCo),e(Wb,OCo),e(I,VCo),e(I,Hb),e(Hb,Tle),e(Tle,XCo),e(Hb,zCo),e(Hb,Jq),e(Jq,QCo),e(Hb,WCo),e(I,HCo),e(I,Ub),e(Ub,Mle),e(Mle,UCo),e(Ub,JCo),e(Ub,Yq),e(Yq,YCo),e(Ub,KCo),e(I,ZCo),e(I,Jb),e(Jb,Ele),e(Ele,e6o),e(Jb,o6o),e(Jb,Kq),e(Kq,r6o),e(Jb,t6o),e(I,a6o),e(I,Yb),e(Yb,Cle),e(Cle,n6o),e(Yb,s6o),e(Yb,Zq),e(Zq,l6o),e(Yb,i6o),e(I,d6o),e(I,Kb),e(Kb,wle),e(wle,c6o),e(Kb,m6o),e(Kb,eN),e(eN,f6o),e(Kb,g6o),e(I,h6o),e(I,Zb),e(Zb,Ale),e(Ale,u6o),e(Zb,p6o),e(Zb,oN),e(oN,_6o),e(Zb,b6o),e(I,v6o),e(I,e2),e(e2,yle),e(yle,F6o),e(e2,T6o),e(e2,rN),e(rN,M6o),e(e2,E6o),e(I,C6o),e(I,o2),e(o2,Lle),e(Lle,w6o),e(o2,A6o),e(o2,xle),e(xle,y6o),e(o2,L6o),e(I,x6o),e(I,r2),e(r2,kle),e(kle,k6o),e(r2,S6o),e(r2,tN),e(tN,R6o),e(r2,B6o),e(I,P6o),e(I,t2),e(t2,Sle),e(Sle,$6o),e(t2,I6o),e(t2,aN),e(aN,q6o),e(t2,N6o),e(I,j6o),e(I,a2),e(a2,Rle),e(Rle,D6o),e(a2,G6o),e(a2,nN),e(nN,O6o),e(a2,V6o),e(I,X6o),e(I,n2),e(n2,Ble),e(Ble,z6o),e(n2,Q6o),e(n2,sN),e(sN,W6o),e(n2,H6o),e(Ge,U6o),e(Ge,s2),e(s2,J6o),e(s2,Ple),e(Ple,Y6o),e(s2,K6o),e(s2,$le),e($le,Z6o),e(Ge,ewo),e(Ge,Ile),e(Ile,owo),e(Ge,rwo),g(Kw,Ge,null),b(c,FPe,_),b(c,_d,_),e(_d,l2),e(l2,qle),g(Zw,qle,null),e(_d,two),e(_d,Nle),e(Nle,awo),b(c,TPe,_),b(c,er,_),g(eA,er,null),e(er,nwo),e(er,bd),e(bd,swo),e(bd,lN),e(lN,lwo),e(bd,iwo),e(bd,iN),e(iN,dwo),e(bd,cwo),e(er,mwo),e(er,oA),e(oA,fwo),e(oA,jle),e(jle,gwo),e(oA,hwo),e(er,uwo),e(er,Hr),g(rA,Hr,null),e(Hr,pwo),e(Hr,Dle),e(Dle,_wo),e(Hr,bwo),e(Hr,vd),e(vd,vwo),e(vd,Gle),e(Gle,Fwo),e(vd,Two),e(vd,dN),e(dN,Mwo),e(vd,Ewo),e(Hr,Cwo),e(Hr,Ole),e(Ole,wwo),e(Hr,Awo),g(tA,Hr,null),e(er,ywo),e(er,Oe),g(aA,Oe,null),e(Oe,Lwo),e(Oe,Vle),e(Vle,xwo),e(Oe,kwo),e(Oe,Ha),e(Ha,Swo),e(Ha,Xle),e(Xle,Rwo),e(Ha,Bwo),e(Ha,zle),e(zle,Pwo),e(Ha,$wo),e(Ha,Qle),e(Qle,Iwo),e(Ha,qwo),e(Oe,Nwo),e(Oe,ne),e(ne,i2),e(i2,Wle),e(Wle,jwo),e(i2,Dwo),e(i2,cN),e(cN,Gwo),e(i2,Owo),e(ne,Vwo),e(ne,d2),e(d2,Hle),e(Hle,Xwo),e(d2,zwo),e(d2,mN),e(mN,Qwo),e(d2,Wwo),e(ne,Hwo),e(ne,c2),e(c2,Ule),e(Ule,Uwo),e(c2,Jwo),e(c2,fN),e(fN,Ywo),e(c2,Kwo),e(ne,Zwo),e(ne,m2),e(m2,Jle),e(Jle,eAo),e(m2,oAo),e(m2,gN),e(gN,rAo),e(m2,tAo),e(ne,aAo),e(ne,f2),e(f2,Yle),e(Yle,nAo),e(f2,sAo),e(f2,hN),e(hN,lAo),e(f2,iAo),e(ne,dAo),e(ne,g2),e(g2,Kle),e(Kle,cAo),e(g2,mAo),e(g2,uN),e(uN,fAo),e(g2,gAo),e(ne,hAo),e(ne,h2),e(h2,Zle),e(Zle,uAo),e(h2,pAo),e(h2,pN),e(pN,_Ao),e(h2,bAo),e(ne,vAo),e(ne,u2),e(u2,eie),e(eie,FAo),e(u2,TAo),e(u2,_N),e(_N,MAo),e(u2,EAo),e(ne,CAo),e(ne,p2),e(p2,oie),e(oie,wAo),e(p2,AAo),e(p2,bN),e(bN,yAo),e(p2,LAo),e(ne,xAo),e(ne,_2),e(_2,rie),e(rie,kAo),e(_2,SAo),e(_2,vN),e(vN,RAo),e(_2,BAo),e(ne,PAo),e(ne,b2),e(b2,tie),e(tie,$Ao),e(b2,IAo),e(b2,FN),e(FN,qAo),e(b2,NAo),e(ne,jAo),e(ne,v2),e(v2,aie),e(aie,DAo),e(v2,GAo),e(v2,TN),e(TN,OAo),e(v2,VAo),e(ne,XAo),e(ne,F2),e(F2,nie),e(nie,zAo),e(F2,QAo),e(F2,MN),e(MN,WAo),e(F2,HAo),e(ne,UAo),e(ne,T2),e(T2,sie),e(sie,JAo),e(T2,YAo),e(T2,EN),e(EN,KAo),e(T2,ZAo),e(ne,e0o),e(ne,M2),e(M2,lie),e(lie,o0o),e(M2,r0o),e(M2,CN),e(CN,t0o),e(M2,a0o),e(ne,n0o),e(ne,E2),e(E2,iie),e(iie,s0o),e(E2,l0o),e(E2,wN),e(wN,i0o),e(E2,d0o),e(ne,c0o),e(ne,C2),e(C2,die),e(die,m0o),e(C2,f0o),e(C2,AN),e(AN,g0o),e(C2,h0o),e(Oe,u0o),e(Oe,w2),e(w2,p0o),e(w2,cie),e(cie,_0o),e(w2,b0o),e(w2,mie),e(mie,v0o),e(Oe,F0o),e(Oe,fie),e(fie,T0o),e(Oe,M0o),g(nA,Oe,null),b(c,MPe,_),b(c,Fd,_),e(Fd,A2),e(A2,gie),g(sA,gie,null),e(Fd,E0o),e(Fd,hie),e(hie,C0o),b(c,EPe,_),b(c,or,_),g(lA,or,null),e(or,w0o),e(or,Td),e(Td,A0o),e(Td,yN),e(yN,y0o),e(Td,L0o),e(Td,LN),e(LN,x0o),e(Td,k0o),e(or,S0o),e(or,iA),e(iA,R0o),e(iA,uie),e(uie,B0o),e(iA,P0o),e(or,$0o),e(or,Ur),g(dA,Ur,null),e(Ur,I0o),e(Ur,pie),e(pie,q0o),e(Ur,N0o),e(Ur,Md),e(Md,j0o),e(Md,_ie),e(_ie,D0o),e(Md,G0o),e(Md,xN),e(xN,O0o),e(Md,V0o),e(Ur,X0o),e(Ur,bie),e(bie,z0o),e(Ur,Q0o),g(cA,Ur,null),e(or,W0o),e(or,Ve),g(mA,Ve,null),e(Ve,H0o),e(Ve,vie),e(vie,U0o),e(Ve,J0o),e(Ve,Ua),e(Ua,Y0o),e(Ua,Fie),e(Fie,K0o),e(Ua,Z0o),e(Ua,Tie),e(Tie,eyo),e(Ua,oyo),e(Ua,Mie),e(Mie,ryo),e(Ua,tyo),e(Ve,ayo),e(Ve,y),e(y,y2),e(y2,Eie),e(Eie,nyo),e(y2,syo),e(y2,kN),e(kN,lyo),e(y2,iyo),e(y,dyo),e(y,L2),e(L2,Cie),e(Cie,cyo),e(L2,myo),e(L2,SN),e(SN,fyo),e(L2,gyo),e(y,hyo),e(y,x2),e(x2,wie),e(wie,uyo),e(x2,pyo),e(x2,RN),e(RN,_yo),e(x2,byo),e(y,vyo),e(y,k2),e(k2,Aie),e(Aie,Fyo),e(k2,Tyo),e(k2,BN),e(BN,Myo),e(k2,Eyo),e(y,Cyo),e(y,S2),e(S2,yie),e(yie,wyo),e(S2,Ayo),e(S2,PN),e(PN,yyo),e(S2,Lyo),e(y,xyo),e(y,R2),e(R2,Lie),e(Lie,kyo),e(R2,Syo),e(R2,$N),e($N,Ryo),e(R2,Byo),e(y,Pyo),e(y,B2),e(B2,xie),e(xie,$yo),e(B2,Iyo),e(B2,IN),e(IN,qyo),e(B2,Nyo),e(y,jyo),e(y,P2),e(P2,kie),e(kie,Dyo),e(P2,Gyo),e(P2,qN),e(qN,Oyo),e(P2,Vyo),e(y,Xyo),e(y,$2),e($2,Sie),e(Sie,zyo),e($2,Qyo),e($2,NN),e(NN,Wyo),e($2,Hyo),e(y,Uyo),e(y,I2),e(I2,Rie),e(Rie,Jyo),e(I2,Yyo),e(I2,jN),e(jN,Kyo),e(I2,Zyo),e(y,e8o),e(y,q2),e(q2,Bie),e(Bie,o8o),e(q2,r8o),e(q2,DN),e(DN,t8o),e(q2,a8o),e(y,n8o),e(y,N2),e(N2,Pie),e(Pie,s8o),e(N2,l8o),e(N2,GN),e(GN,i8o),e(N2,d8o),e(y,c8o),e(y,j2),e(j2,$ie),e($ie,m8o),e(j2,f8o),e(j2,ON),e(ON,g8o),e(j2,h8o),e(y,u8o),e(y,D2),e(D2,Iie),e(Iie,p8o),e(D2,_8o),e(D2,VN),e(VN,b8o),e(D2,v8o),e(y,F8o),e(y,G2),e(G2,qie),e(qie,T8o),e(G2,M8o),e(G2,XN),e(XN,E8o),e(G2,C8o),e(y,w8o),e(y,O2),e(O2,Nie),e(Nie,A8o),e(O2,y8o),e(O2,zN),e(zN,L8o),e(O2,x8o),e(y,k8o),e(y,V2),e(V2,jie),e(jie,S8o),e(V2,R8o),e(V2,QN),e(QN,B8o),e(V2,P8o),e(y,$8o),e(y,X2),e(X2,Die),e(Die,I8o),e(X2,q8o),e(X2,WN),e(WN,N8o),e(X2,j8o),e(y,D8o),e(y,z2),e(z2,Gie),e(Gie,G8o),e(z2,O8o),e(z2,HN),e(HN,V8o),e(z2,X8o),e(y,z8o),e(y,Q2),e(Q2,Oie),e(Oie,Q8o),e(Q2,W8o),e(Q2,UN),e(UN,H8o),e(Q2,U8o),e(y,J8o),e(y,W2),e(W2,Vie),e(Vie,Y8o),e(W2,K8o),e(W2,JN),e(JN,Z8o),e(W2,eLo),e(y,oLo),e(y,H2),e(H2,Xie),e(Xie,rLo),e(H2,tLo),e(H2,YN),e(YN,aLo),e(H2,nLo),e(y,sLo),e(y,U2),e(U2,zie),e(zie,lLo),e(U2,iLo),e(U2,KN),e(KN,dLo),e(U2,cLo),e(y,mLo),e(y,J2),e(J2,Qie),e(Qie,fLo),e(J2,gLo),e(J2,ZN),e(ZN,hLo),e(J2,uLo),e(y,pLo),e(y,Y2),e(Y2,Wie),e(Wie,_Lo),e(Y2,bLo),e(Y2,ej),e(ej,vLo),e(Y2,FLo),e(y,TLo),e(y,K2),e(K2,Hie),e(Hie,MLo),e(K2,ELo),e(K2,oj),e(oj,CLo),e(K2,wLo),e(y,ALo),e(y,Z2),e(Z2,Uie),e(Uie,yLo),e(Z2,LLo),e(Z2,rj),e(rj,xLo),e(Z2,kLo),e(y,SLo),e(y,ev),e(ev,Jie),e(Jie,RLo),e(ev,BLo),e(ev,tj),e(tj,PLo),e(ev,$Lo),e(y,ILo),e(y,ov),e(ov,Yie),e(Yie,qLo),e(ov,NLo),e(ov,aj),e(aj,jLo),e(ov,DLo),e(y,GLo),e(y,rv),e(rv,Kie),e(Kie,OLo),e(rv,VLo),e(rv,nj),e(nj,XLo),e(rv,zLo),e(y,QLo),e(y,tv),e(tv,Zie),e(Zie,WLo),e(tv,HLo),e(tv,sj),e(sj,ULo),e(tv,JLo),e(y,YLo),e(y,av),e(av,ede),e(ede,KLo),e(av,ZLo),e(av,lj),e(lj,e7o),e(av,o7o),e(y,r7o),e(y,nv),e(nv,ode),e(ode,t7o),e(nv,a7o),e(nv,ij),e(ij,n7o),e(nv,s7o),e(y,l7o),e(y,sv),e(sv,rde),e(rde,i7o),e(sv,d7o),e(sv,dj),e(dj,c7o),e(sv,m7o),e(y,f7o),e(y,lv),e(lv,tde),e(tde,g7o),e(lv,h7o),e(lv,cj),e(cj,u7o),e(lv,p7o),e(y,_7o),e(y,iv),e(iv,ade),e(ade,b7o),e(iv,v7o),e(iv,mj),e(mj,F7o),e(iv,T7o),e(y,M7o),e(y,dv),e(dv,nde),e(nde,E7o),e(dv,C7o),e(dv,fj),e(fj,w7o),e(dv,A7o),e(y,y7o),e(y,cv),e(cv,sde),e(sde,L7o),e(cv,x7o),e(cv,gj),e(gj,k7o),e(cv,S7o),e(y,R7o),e(y,mv),e(mv,lde),e(lde,B7o),e(mv,P7o),e(mv,hj),e(hj,$7o),e(mv,I7o),e(y,q7o),e(y,fv),e(fv,ide),e(ide,N7o),e(fv,j7o),e(fv,uj),e(uj,D7o),e(fv,G7o),e(y,O7o),e(y,gv),e(gv,dde),e(dde,V7o),e(gv,X7o),e(gv,pj),e(pj,z7o),e(gv,Q7o),e(y,W7o),e(y,hv),e(hv,cde),e(cde,H7o),e(hv,U7o),e(hv,_j),e(_j,J7o),e(hv,Y7o),e(y,K7o),e(y,uv),e(uv,mde),e(mde,Z7o),e(uv,e9o),e(uv,bj),e(bj,o9o),e(uv,r9o),e(y,t9o),e(y,pv),e(pv,fde),e(fde,a9o),e(pv,n9o),e(pv,vj),e(vj,s9o),e(pv,l9o),e(y,i9o),e(y,_v),e(_v,gde),e(gde,d9o),e(_v,c9o),e(_v,Fj),e(Fj,m9o),e(_v,f9o),e(y,g9o),e(y,bv),e(bv,hde),e(hde,h9o),e(bv,u9o),e(bv,Tj),e(Tj,p9o),e(bv,_9o),e(y,b9o),e(y,vv),e(vv,ude),e(ude,v9o),e(vv,F9o),e(vv,Mj),e(Mj,T9o),e(vv,M9o),e(Ve,E9o),e(Ve,Fv),e(Fv,C9o),e(Fv,pde),e(pde,w9o),e(Fv,A9o),e(Fv,_de),e(_de,y9o),e(Ve,L9o),e(Ve,bde),e(bde,x9o),e(Ve,k9o),g(fA,Ve,null),b(c,CPe,_),b(c,Ed,_),e(Ed,Tv),e(Tv,vde),g(gA,vde,null),e(Ed,S9o),e(Ed,Fde),e(Fde,R9o),b(c,wPe,_),b(c,rr,_),g(hA,rr,null),e(rr,B9o),e(rr,Cd),e(Cd,P9o),e(Cd,Ej),e(Ej,$9o),e(Cd,I9o),e(Cd,Cj),e(Cj,q9o),e(Cd,N9o),e(rr,j9o),e(rr,uA),e(uA,D9o),e(uA,Tde),e(Tde,G9o),e(uA,O9o),e(rr,V9o),e(rr,Jr),g(pA,Jr,null),e(Jr,X9o),e(Jr,Mde),e(Mde,z9o),e(Jr,Q9o),e(Jr,wd),e(wd,W9o),e(wd,Ede),e(Ede,H9o),e(wd,U9o),e(wd,wj),e(wj,J9o),e(wd,Y9o),e(Jr,K9o),e(Jr,Cde),e(Cde,Z9o),e(Jr,exo),g(_A,Jr,null),e(rr,oxo),e(rr,Xe),g(bA,Xe,null),e(Xe,rxo),e(Xe,wde),e(wde,txo),e(Xe,axo),e(Xe,Ja),e(Ja,nxo),e(Ja,Ade),e(Ade,sxo),e(Ja,lxo),e(Ja,yde),e(yde,ixo),e(Ja,dxo),e(Ja,Lde),e(Lde,cxo),e(Ja,mxo),e(Xe,fxo),e(Xe,G),e(G,Mv),e(Mv,xde),e(xde,gxo),e(Mv,hxo),e(Mv,Aj),e(Aj,uxo),e(Mv,pxo),e(G,_xo),e(G,Ev),e(Ev,kde),e(kde,bxo),e(Ev,vxo),e(Ev,yj),e(yj,Fxo),e(Ev,Txo),e(G,Mxo),e(G,Cv),e(Cv,Sde),e(Sde,Exo),e(Cv,Cxo),e(Cv,Lj),e(Lj,wxo),e(Cv,Axo),e(G,yxo),e(G,wv),e(wv,Rde),e(Rde,Lxo),e(wv,xxo),e(wv,xj),e(xj,kxo),e(wv,Sxo),e(G,Rxo),e(G,Av),e(Av,Bde),e(Bde,Bxo),e(Av,Pxo),e(Av,kj),e(kj,$xo),e(Av,Ixo),e(G,qxo),e(G,yv),e(yv,Pde),e(Pde,Nxo),e(yv,jxo),e(yv,Sj),e(Sj,Dxo),e(yv,Gxo),e(G,Oxo),e(G,Lv),e(Lv,$de),e($de,Vxo),e(Lv,Xxo),e(Lv,Rj),e(Rj,zxo),e(Lv,Qxo),e(G,Wxo),e(G,xv),e(xv,Ide),e(Ide,Hxo),e(xv,Uxo),e(xv,Bj),e(Bj,Jxo),e(xv,Yxo),e(G,Kxo),e(G,kv),e(kv,qde),e(qde,Zxo),e(kv,eko),e(kv,Pj),e(Pj,oko),e(kv,rko),e(G,tko),e(G,Sv),e(Sv,Nde),e(Nde,ako),e(Sv,nko),e(Sv,$j),e($j,sko),e(Sv,lko),e(G,iko),e(G,Rv),e(Rv,jde),e(jde,dko),e(Rv,cko),e(Rv,Ij),e(Ij,mko),e(Rv,fko),e(G,gko),e(G,Bv),e(Bv,Dde),e(Dde,hko),e(Bv,uko),e(Bv,qj),e(qj,pko),e(Bv,_ko),e(G,bko),e(G,Pv),e(Pv,Gde),e(Gde,vko),e(Pv,Fko),e(Pv,Nj),e(Nj,Tko),e(Pv,Mko),e(G,Eko),e(G,$v),e($v,Ode),e(Ode,Cko),e($v,wko),e($v,jj),e(jj,Ako),e($v,yko),e(G,Lko),e(G,Iv),e(Iv,Vde),e(Vde,xko),e(Iv,kko),e(Iv,Dj),e(Dj,Sko),e(Iv,Rko),e(G,Bko),e(G,qv),e(qv,Xde),e(Xde,Pko),e(qv,$ko),e(qv,Gj),e(Gj,Iko),e(qv,qko),e(G,Nko),e(G,Nv),e(Nv,zde),e(zde,jko),e(Nv,Dko),e(Nv,Oj),e(Oj,Gko),e(Nv,Oko),e(G,Vko),e(G,jv),e(jv,Qde),e(Qde,Xko),e(jv,zko),e(jv,Vj),e(Vj,Qko),e(jv,Wko),e(G,Hko),e(G,Dv),e(Dv,Wde),e(Wde,Uko),e(Dv,Jko),e(Dv,Xj),e(Xj,Yko),e(Dv,Kko),e(G,Zko),e(G,Gv),e(Gv,Hde),e(Hde,eSo),e(Gv,oSo),e(Gv,zj),e(zj,rSo),e(Gv,tSo),e(G,aSo),e(G,Ov),e(Ov,Ude),e(Ude,nSo),e(Ov,sSo),e(Ov,Qj),e(Qj,lSo),e(Ov,iSo),e(G,dSo),e(G,Vv),e(Vv,Jde),e(Jde,cSo),e(Vv,mSo),e(Vv,Wj),e(Wj,fSo),e(Vv,gSo),e(G,hSo),e(G,Xv),e(Xv,Yde),e(Yde,uSo),e(Xv,pSo),e(Xv,Hj),e(Hj,_So),e(Xv,bSo),e(G,vSo),e(G,zv),e(zv,Kde),e(Kde,FSo),e(zv,TSo),e(zv,Uj),e(Uj,MSo),e(zv,ESo),e(G,CSo),e(G,Qv),e(Qv,Zde),e(Zde,wSo),e(Qv,ASo),e(Qv,Jj),e(Jj,ySo),e(Qv,LSo),e(G,xSo),e(G,Wv),e(Wv,ece),e(ece,kSo),e(Wv,SSo),e(Wv,Yj),e(Yj,RSo),e(Wv,BSo),e(G,PSo),e(G,Hv),e(Hv,oce),e(oce,$So),e(Hv,ISo),e(Hv,Kj),e(Kj,qSo),e(Hv,NSo),e(G,jSo),e(G,Uv),e(Uv,rce),e(rce,DSo),e(Uv,GSo),e(Uv,Zj),e(Zj,OSo),e(Uv,VSo),e(Xe,XSo),e(Xe,Jv),e(Jv,zSo),e(Jv,tce),e(tce,QSo),e(Jv,WSo),e(Jv,ace),e(ace,HSo),e(Xe,USo),e(Xe,nce),e(nce,JSo),e(Xe,YSo),g(vA,Xe,null),b(c,APe,_),b(c,Ad,_),e(Ad,Yv),e(Yv,sce),g(FA,sce,null),e(Ad,KSo),e(Ad,lce),e(lce,ZSo),b(c,yPe,_),b(c,tr,_),g(TA,tr,null),e(tr,eRo),e(tr,yd),e(yd,oRo),e(yd,eD),e(eD,rRo),e(yd,tRo),e(yd,oD),e(oD,aRo),e(yd,nRo),e(tr,sRo),e(tr,MA),e(MA,lRo),e(MA,ice),e(ice,iRo),e(MA,dRo),e(tr,cRo),e(tr,Yr),g(EA,Yr,null),e(Yr,mRo),e(Yr,dce),e(dce,fRo),e(Yr,gRo),e(Yr,Ld),e(Ld,hRo),e(Ld,cce),e(cce,uRo),e(Ld,pRo),e(Ld,rD),e(rD,_Ro),e(Ld,bRo),e(Yr,vRo),e(Yr,mce),e(mce,FRo),e(Yr,TRo),g(CA,Yr,null),e(tr,MRo),e(tr,ze),g(wA,ze,null),e(ze,ERo),e(ze,fce),e(fce,CRo),e(ze,wRo),e(ze,Ya),e(Ya,ARo),e(Ya,gce),e(gce,yRo),e(Ya,LRo),e(Ya,hce),e(hce,xRo),e(Ya,kRo),e(Ya,uce),e(uce,SRo),e(Ya,RRo),e(ze,BRo),e(ze,da),e(da,Kv),e(Kv,pce),e(pce,PRo),e(Kv,$Ro),e(Kv,tD),e(tD,IRo),e(Kv,qRo),e(da,NRo),e(da,Zv),e(Zv,_ce),e(_ce,jRo),e(Zv,DRo),e(Zv,aD),e(aD,GRo),e(Zv,ORo),e(da,VRo),e(da,eF),e(eF,bce),e(bce,XRo),e(eF,zRo),e(eF,nD),e(nD,QRo),e(eF,WRo),e(da,HRo),e(da,oF),e(oF,vce),e(vce,URo),e(oF,JRo),e(oF,sD),e(sD,YRo),e(oF,KRo),e(da,ZRo),e(da,rF),e(rF,Fce),e(Fce,eBo),e(rF,oBo),e(rF,lD),e(lD,rBo),e(rF,tBo),e(ze,aBo),e(ze,tF),e(tF,nBo),e(tF,Tce),e(Tce,sBo),e(tF,lBo),e(tF,Mce),e(Mce,iBo),e(ze,dBo),e(ze,Ece),e(Ece,cBo),e(ze,mBo),g(AA,ze,null),b(c,LPe,_),b(c,xd,_),e(xd,aF),e(aF,Cce),g(yA,Cce,null),e(xd,fBo),e(xd,wce),e(wce,gBo),b(c,xPe,_),b(c,ar,_),g(LA,ar,null),e(ar,hBo),e(ar,kd),e(kd,uBo),e(kd,iD),e(iD,pBo),e(kd,_Bo),e(kd,dD),e(dD,bBo),e(kd,vBo),e(ar,FBo),e(ar,xA),e(xA,TBo),e(xA,Ace),e(Ace,MBo),e(xA,EBo),e(ar,CBo),e(ar,Kr),g(kA,Kr,null),e(Kr,wBo),e(Kr,yce),e(yce,ABo),e(Kr,yBo),e(Kr,Sd),e(Sd,LBo),e(Sd,Lce),e(Lce,xBo),e(Sd,kBo),e(Sd,cD),e(cD,SBo),e(Sd,RBo),e(Kr,BBo),e(Kr,xce),e(xce,PBo),e(Kr,$Bo),g(SA,Kr,null),e(ar,IBo),e(ar,Qe),g(RA,Qe,null),e(Qe,qBo),e(Qe,kce),e(kce,NBo),e(Qe,jBo),e(Qe,Ka),e(Ka,DBo),e(Ka,Sce),e(Sce,GBo),e(Ka,OBo),e(Ka,Rce),e(Rce,VBo),e(Ka,XBo),e(Ka,Bce),e(Bce,zBo),e(Ka,QBo),e(Qe,WBo),e(Qe,j),e(j,nF),e(nF,Pce),e(Pce,HBo),e(nF,UBo),e(nF,mD),e(mD,JBo),e(nF,YBo),e(j,KBo),e(j,sF),e(sF,$ce),e($ce,ZBo),e(sF,ePo),e(sF,fD),e(fD,oPo),e(sF,rPo),e(j,tPo),e(j,lF),e(lF,Ice),e(Ice,aPo),e(lF,nPo),e(lF,gD),e(gD,sPo),e(lF,lPo),e(j,iPo),e(j,iF),e(iF,qce),e(qce,dPo),e(iF,cPo),e(iF,hD),e(hD,mPo),e(iF,fPo),e(j,gPo),e(j,dF),e(dF,Nce),e(Nce,hPo),e(dF,uPo),e(dF,uD),e(uD,pPo),e(dF,_Po),e(j,bPo),e(j,cF),e(cF,jce),e(jce,vPo),e(cF,FPo),e(cF,pD),e(pD,TPo),e(cF,MPo),e(j,EPo),e(j,mF),e(mF,Dce),e(Dce,CPo),e(mF,wPo),e(mF,_D),e(_D,APo),e(mF,yPo),e(j,LPo),e(j,fF),e(fF,Gce),e(Gce,xPo),e(fF,kPo),e(fF,bD),e(bD,SPo),e(fF,RPo),e(j,BPo),e(j,gF),e(gF,Oce),e(Oce,PPo),e(gF,$Po),e(gF,vD),e(vD,IPo),e(gF,qPo),e(j,NPo),e(j,hF),e(hF,Vce),e(Vce,jPo),e(hF,DPo),e(hF,FD),e(FD,GPo),e(hF,OPo),e(j,VPo),e(j,uF),e(uF,Xce),e(Xce,XPo),e(uF,zPo),e(uF,TD),e(TD,QPo),e(uF,WPo),e(j,HPo),e(j,pF),e(pF,zce),e(zce,UPo),e(pF,JPo),e(pF,MD),e(MD,YPo),e(pF,KPo),e(j,ZPo),e(j,_F),e(_F,Qce),e(Qce,e$o),e(_F,o$o),e(_F,ED),e(ED,r$o),e(_F,t$o),e(j,a$o),e(j,bF),e(bF,Wce),e(Wce,n$o),e(bF,s$o),e(bF,CD),e(CD,l$o),e(bF,i$o),e(j,d$o),e(j,vF),e(vF,Hce),e(Hce,c$o),e(vF,m$o),e(vF,wD),e(wD,f$o),e(vF,g$o),e(j,h$o),e(j,FF),e(FF,Uce),e(Uce,u$o),e(FF,p$o),e(FF,AD),e(AD,_$o),e(FF,b$o),e(j,v$o),e(j,TF),e(TF,Jce),e(Jce,F$o),e(TF,T$o),e(TF,yD),e(yD,M$o),e(TF,E$o),e(j,C$o),e(j,MF),e(MF,Yce),e(Yce,w$o),e(MF,A$o),e(MF,LD),e(LD,y$o),e(MF,L$o),e(j,x$o),e(j,EF),e(EF,Kce),e(Kce,k$o),e(EF,S$o),e(EF,xD),e(xD,R$o),e(EF,B$o),e(j,P$o),e(j,CF),e(CF,Zce),e(Zce,$$o),e(CF,I$o),e(CF,kD),e(kD,q$o),e(CF,N$o),e(j,j$o),e(j,wF),e(wF,eme),e(eme,D$o),e(wF,G$o),e(wF,SD),e(SD,O$o),e(wF,V$o),e(j,X$o),e(j,AF),e(AF,ome),e(ome,z$o),e(AF,Q$o),e(AF,RD),e(RD,W$o),e(AF,H$o),e(j,U$o),e(j,yF),e(yF,rme),e(rme,J$o),e(yF,Y$o),e(yF,BD),e(BD,K$o),e(yF,Z$o),e(j,eIo),e(j,LF),e(LF,tme),e(tme,oIo),e(LF,rIo),e(LF,PD),e(PD,tIo),e(LF,aIo),e(j,nIo),e(j,xF),e(xF,ame),e(ame,sIo),e(xF,lIo),e(xF,$D),e($D,iIo),e(xF,dIo),e(j,cIo),e(j,kF),e(kF,nme),e(nme,mIo),e(kF,fIo),e(kF,ID),e(ID,gIo),e(kF,hIo),e(j,uIo),e(j,SF),e(SF,sme),e(sme,pIo),e(SF,_Io),e(SF,qD),e(qD,bIo),e(SF,vIo),e(j,FIo),e(j,RF),e(RF,lme),e(lme,TIo),e(RF,MIo),e(RF,ND),e(ND,EIo),e(RF,CIo),e(j,wIo),e(j,BF),e(BF,ime),e(ime,AIo),e(BF,yIo),e(BF,jD),e(jD,LIo),e(BF,xIo),e(j,kIo),e(j,PF),e(PF,dme),e(dme,SIo),e(PF,RIo),e(PF,DD),e(DD,BIo),e(PF,PIo),e(j,$Io),e(j,$F),e($F,cme),e(cme,IIo),e($F,qIo),e($F,GD),e(GD,NIo),e($F,jIo),e(j,DIo),e(j,IF),e(IF,mme),e(mme,GIo),e(IF,OIo),e(IF,OD),e(OD,VIo),e(IF,XIo),e(j,zIo),e(j,qF),e(qF,fme),e(fme,QIo),e(qF,WIo),e(qF,VD),e(VD,HIo),e(qF,UIo),e(Qe,JIo),e(Qe,NF),e(NF,YIo),e(NF,gme),e(gme,KIo),e(NF,ZIo),e(NF,hme),e(hme,eqo),e(Qe,oqo),e(Qe,ume),e(ume,rqo),e(Qe,tqo),g(BA,Qe,null),b(c,kPe,_),b(c,Rd,_),e(Rd,jF),e(jF,pme),g(PA,pme,null),e(Rd,aqo),e(Rd,_me),e(_me,nqo),b(c,SPe,_),b(c,nr,_),g($A,nr,null),e(nr,sqo),e(nr,Bd),e(Bd,lqo),e(Bd,XD),e(XD,iqo),e(Bd,dqo),e(Bd,zD),e(zD,cqo),e(Bd,mqo),e(nr,fqo),e(nr,IA),e(IA,gqo),e(IA,bme),e(bme,hqo),e(IA,uqo),e(nr,pqo),e(nr,Zr),g(qA,Zr,null),e(Zr,_qo),e(Zr,vme),e(vme,bqo),e(Zr,vqo),e(Zr,Pd),e(Pd,Fqo),e(Pd,Fme),e(Fme,Tqo),e(Pd,Mqo),e(Pd,QD),e(QD,Eqo),e(Pd,Cqo),e(Zr,wqo),e(Zr,Tme),e(Tme,Aqo),e(Zr,yqo),g(NA,Zr,null),e(nr,Lqo),e(nr,We),g(jA,We,null),e(We,xqo),e(We,Mme),e(Mme,kqo),e(We,Sqo),e(We,Za),e(Za,Rqo),e(Za,Eme),e(Eme,Bqo),e(Za,Pqo),e(Za,Cme),e(Cme,$qo),e(Za,Iqo),e(Za,wme),e(wme,qqo),e(Za,Nqo),e(We,jqo),e(We,R),e(R,DF),e(DF,Ame),e(Ame,Dqo),e(DF,Gqo),e(DF,WD),e(WD,Oqo),e(DF,Vqo),e(R,Xqo),e(R,GF),e(GF,yme),e(yme,zqo),e(GF,Qqo),e(GF,HD),e(HD,Wqo),e(GF,Hqo),e(R,Uqo),e(R,OF),e(OF,Lme),e(Lme,Jqo),e(OF,Yqo),e(OF,UD),e(UD,Kqo),e(OF,Zqo),e(R,eNo),e(R,VF),e(VF,xme),e(xme,oNo),e(VF,rNo),e(VF,JD),e(JD,tNo),e(VF,aNo),e(R,nNo),e(R,XF),e(XF,kme),e(kme,sNo),e(XF,lNo),e(XF,YD),e(YD,iNo),e(XF,dNo),e(R,cNo),e(R,zF),e(zF,Sme),e(Sme,mNo),e(zF,fNo),e(zF,KD),e(KD,gNo),e(zF,hNo),e(R,uNo),e(R,QF),e(QF,Rme),e(Rme,pNo),e(QF,_No),e(QF,ZD),e(ZD,bNo),e(QF,vNo),e(R,FNo),e(R,WF),e(WF,Bme),e(Bme,TNo),e(WF,MNo),e(WF,eG),e(eG,ENo),e(WF,CNo),e(R,wNo),e(R,HF),e(HF,Pme),e(Pme,ANo),e(HF,yNo),e(HF,oG),e(oG,LNo),e(HF,xNo),e(R,kNo),e(R,UF),e(UF,$me),e($me,SNo),e(UF,RNo),e(UF,rG),e(rG,BNo),e(UF,PNo),e(R,$No),e(R,JF),e(JF,Ime),e(Ime,INo),e(JF,qNo),e(JF,tG),e(tG,NNo),e(JF,jNo),e(R,DNo),e(R,YF),e(YF,qme),e(qme,GNo),e(YF,ONo),e(YF,aG),e(aG,VNo),e(YF,XNo),e(R,zNo),e(R,KF),e(KF,Nme),e(Nme,QNo),e(KF,WNo),e(KF,nG),e(nG,HNo),e(KF,UNo),e(R,JNo),e(R,ZF),e(ZF,jme),e(jme,YNo),e(ZF,KNo),e(ZF,sG),e(sG,ZNo),e(ZF,ejo),e(R,ojo),e(R,e1),e(e1,Dme),e(Dme,rjo),e(e1,tjo),e(e1,lG),e(lG,ajo),e(e1,njo),e(R,sjo),e(R,o1),e(o1,Gme),e(Gme,ljo),e(o1,ijo),e(o1,iG),e(iG,djo),e(o1,cjo),e(R,mjo),e(R,r1),e(r1,Ome),e(Ome,fjo),e(r1,gjo),e(r1,dG),e(dG,hjo),e(r1,ujo),e(R,pjo),e(R,t1),e(t1,Vme),e(Vme,_jo),e(t1,bjo),e(t1,cG),e(cG,vjo),e(t1,Fjo),e(R,Tjo),e(R,a1),e(a1,Xme),e(Xme,Mjo),e(a1,Ejo),e(a1,mG),e(mG,Cjo),e(a1,wjo),e(R,Ajo),e(R,n1),e(n1,zme),e(zme,yjo),e(n1,Ljo),e(n1,fG),e(fG,xjo),e(n1,kjo),e(R,Sjo),e(R,s1),e(s1,Qme),e(Qme,Rjo),e(s1,Bjo),e(s1,gG),e(gG,Pjo),e(s1,$jo),e(R,Ijo),e(R,l1),e(l1,Wme),e(Wme,qjo),e(l1,Njo),e(l1,hG),e(hG,jjo),e(l1,Djo),e(R,Gjo),e(R,i1),e(i1,Hme),e(Hme,Ojo),e(i1,Vjo),e(i1,uG),e(uG,Xjo),e(i1,zjo),e(R,Qjo),e(R,d1),e(d1,Ume),e(Ume,Wjo),e(d1,Hjo),e(d1,pG),e(pG,Ujo),e(d1,Jjo),e(R,Yjo),e(R,c1),e(c1,Jme),e(Jme,Kjo),e(c1,Zjo),e(c1,_G),e(_G,eDo),e(c1,oDo),e(R,rDo),e(R,m1),e(m1,Yme),e(Yme,tDo),e(m1,aDo),e(m1,bG),e(bG,nDo),e(m1,sDo),e(R,lDo),e(R,f1),e(f1,Kme),e(Kme,iDo),e(f1,dDo),e(f1,vG),e(vG,cDo),e(f1,mDo),e(R,fDo),e(R,g1),e(g1,Zme),e(Zme,gDo),e(g1,hDo),e(g1,FG),e(FG,uDo),e(g1,pDo),e(R,_Do),e(R,h1),e(h1,efe),e(efe,bDo),e(h1,vDo),e(h1,TG),e(TG,FDo),e(h1,TDo),e(R,MDo),e(R,u1),e(u1,ofe),e(ofe,EDo),e(u1,CDo),e(u1,MG),e(MG,wDo),e(u1,ADo),e(R,yDo),e(R,p1),e(p1,rfe),e(rfe,LDo),e(p1,xDo),e(p1,EG),e(EG,kDo),e(p1,SDo),e(R,RDo),e(R,_1),e(_1,tfe),e(tfe,BDo),e(_1,PDo),e(_1,CG),e(CG,$Do),e(_1,IDo),e(R,qDo),e(R,b1),e(b1,afe),e(afe,NDo),e(b1,jDo),e(b1,wG),e(wG,DDo),e(b1,GDo),e(R,ODo),e(R,v1),e(v1,nfe),e(nfe,VDo),e(v1,XDo),e(v1,AG),e(AG,zDo),e(v1,QDo),e(R,WDo),e(R,F1),e(F1,sfe),e(sfe,HDo),e(F1,UDo),e(F1,yG),e(yG,JDo),e(F1,YDo),e(R,KDo),e(R,T1),e(T1,lfe),e(lfe,ZDo),e(T1,eGo),e(T1,LG),e(LG,oGo),e(T1,rGo),e(R,tGo),e(R,M1),e(M1,ife),e(ife,aGo),e(M1,nGo),e(M1,xG),e(xG,sGo),e(M1,lGo),e(R,iGo),e(R,E1),e(E1,dfe),e(dfe,dGo),e(E1,cGo),e(E1,kG),e(kG,mGo),e(E1,fGo),e(R,gGo),e(R,C1),e(C1,cfe),e(cfe,hGo),e(C1,uGo),e(C1,SG),e(SG,pGo),e(C1,_Go),e(We,bGo),e(We,w1),e(w1,vGo),e(w1,mfe),e(mfe,FGo),e(w1,TGo),e(w1,ffe),e(ffe,MGo),e(We,EGo),e(We,gfe),e(gfe,CGo),e(We,wGo),g(DA,We,null),b(c,RPe,_),b(c,$d,_),e($d,A1),e(A1,hfe),g(GA,hfe,null),e($d,AGo),e($d,ufe),e(ufe,yGo),b(c,BPe,_),b(c,sr,_),g(OA,sr,null),e(sr,LGo),e(sr,Id),e(Id,xGo),e(Id,RG),e(RG,kGo),e(Id,SGo),e(Id,BG),e(BG,RGo),e(Id,BGo),e(sr,PGo),e(sr,VA),e(VA,$Go),e(VA,pfe),e(pfe,IGo),e(VA,qGo),e(sr,NGo),e(sr,et),g(XA,et,null),e(et,jGo),e(et,_fe),e(_fe,DGo),e(et,GGo),e(et,qd),e(qd,OGo),e(qd,bfe),e(bfe,VGo),e(qd,XGo),e(qd,PG),e(PG,zGo),e(qd,QGo),e(et,WGo),e(et,vfe),e(vfe,HGo),e(et,UGo),g(zA,et,null),e(sr,JGo),e(sr,He),g(QA,He,null),e(He,YGo),e(He,Ffe),e(Ffe,KGo),e(He,ZGo),e(He,en),e(en,eOo),e(en,Tfe),e(Tfe,oOo),e(en,rOo),e(en,Mfe),e(Mfe,tOo),e(en,aOo),e(en,Efe),e(Efe,nOo),e(en,sOo),e(He,lOo),e(He,Cfe),e(Cfe,y1),e(y1,wfe),e(wfe,iOo),e(y1,dOo),e(y1,$G),e($G,cOo),e(y1,mOo),e(He,fOo),e(He,L1),e(L1,gOo),e(L1,Afe),e(Afe,hOo),e(L1,uOo),e(L1,yfe),e(yfe,pOo),e(He,_Oo),e(He,Lfe),e(Lfe,bOo),e(He,vOo),g(WA,He,null),b(c,PPe,_),b(c,Nd,_),e(Nd,x1),e(x1,xfe),g(HA,xfe,null),e(Nd,FOo),e(Nd,kfe),e(kfe,TOo),b(c,$Pe,_),b(c,lr,_),g(UA,lr,null),e(lr,MOo),e(lr,jd),e(jd,EOo),e(jd,IG),e(IG,COo),e(jd,wOo),e(jd,qG),e(qG,AOo),e(jd,yOo),e(lr,LOo),e(lr,JA),e(JA,xOo),e(JA,Sfe),e(Sfe,kOo),e(JA,SOo),e(lr,ROo),e(lr,ot),g(YA,ot,null),e(ot,BOo),e(ot,Rfe),e(Rfe,POo),e(ot,$Oo),e(ot,Dd),e(Dd,IOo),e(Dd,Bfe),e(Bfe,qOo),e(Dd,NOo),e(Dd,NG),e(NG,jOo),e(Dd,DOo),e(ot,GOo),e(ot,Pfe),e(Pfe,OOo),e(ot,VOo),g(KA,ot,null),e(lr,XOo),e(lr,Ue),g(ZA,Ue,null),e(Ue,zOo),e(Ue,$fe),e($fe,QOo),e(Ue,WOo),e(Ue,on),e(on,HOo),e(on,Ife),e(Ife,UOo),e(on,JOo),e(on,qfe),e(qfe,YOo),e(on,KOo),e(on,Nfe),e(Nfe,ZOo),e(on,eVo),e(Ue,oVo),e(Ue,ce),e(ce,k1),e(k1,jfe),e(jfe,rVo),e(k1,tVo),e(k1,jG),e(jG,aVo),e(k1,nVo),e(ce,sVo),e(ce,S1),e(S1,Dfe),e(Dfe,lVo),e(S1,iVo),e(S1,DG),e(DG,dVo),e(S1,cVo),e(ce,mVo),e(ce,R1),e(R1,Gfe),e(Gfe,fVo),e(R1,gVo),e(R1,GG),e(GG,hVo),e(R1,uVo),e(ce,pVo),e(ce,Us),e(Us,Ofe),e(Ofe,_Vo),e(Us,bVo),e(Us,OG),e(OG,vVo),e(Us,FVo),e(Us,VG),e(VG,TVo),e(Us,MVo),e(ce,EVo),e(ce,B1),e(B1,Vfe),e(Vfe,CVo),e(B1,wVo),e(B1,XG),e(XG,AVo),e(B1,yVo),e(ce,LVo),e(ce,fa),e(fa,Xfe),e(Xfe,xVo),e(fa,kVo),e(fa,zG),e(zG,SVo),e(fa,RVo),e(fa,QG),e(QG,BVo),e(fa,PVo),e(fa,WG),e(WG,$Vo),e(fa,IVo),e(ce,qVo),e(ce,P1),e(P1,zfe),e(zfe,NVo),e(P1,jVo),e(P1,HG),e(HG,DVo),e(P1,GVo),e(ce,OVo),e(ce,$1),e($1,Qfe),e(Qfe,VVo),e($1,XVo),e($1,UG),e(UG,zVo),e($1,QVo),e(ce,WVo),e(ce,I1),e(I1,Wfe),e(Wfe,HVo),e(I1,UVo),e(I1,JG),e(JG,JVo),e(I1,YVo),e(ce,KVo),e(ce,q1),e(q1,Hfe),e(Hfe,ZVo),e(q1,eXo),e(q1,YG),e(YG,oXo),e(q1,rXo),e(ce,tXo),e(ce,N1),e(N1,Ufe),e(Ufe,aXo),e(N1,nXo),e(N1,KG),e(KG,sXo),e(N1,lXo),e(ce,iXo),e(ce,j1),e(j1,Jfe),e(Jfe,dXo),e(j1,cXo),e(j1,ZG),e(ZG,mXo),e(j1,fXo),e(ce,gXo),e(ce,D1),e(D1,Yfe),e(Yfe,hXo),e(D1,uXo),e(D1,eO),e(eO,pXo),e(D1,_Xo),e(Ue,bXo),e(Ue,G1),e(G1,vXo),e(G1,Kfe),e(Kfe,FXo),e(G1,TXo),e(G1,Zfe),e(Zfe,MXo),e(Ue,EXo),e(Ue,ege),e(ege,CXo),e(Ue,wXo),g(e0,Ue,null),b(c,IPe,_),b(c,Gd,_),e(Gd,O1),e(O1,oge),g(o0,oge,null),e(Gd,AXo),e(Gd,rge),e(rge,yXo),b(c,qPe,_),b(c,ir,_),g(r0,ir,null),e(ir,LXo),e(ir,Od),e(Od,xXo),e(Od,oO),e(oO,kXo),e(Od,SXo),e(Od,rO),e(rO,RXo),e(Od,BXo),e(ir,PXo),e(ir,t0),e(t0,$Xo),e(t0,tge),e(tge,IXo),e(t0,qXo),e(ir,NXo),e(ir,rt),g(a0,rt,null),e(rt,jXo),e(rt,age),e(age,DXo),e(rt,GXo),e(rt,Vd),e(Vd,OXo),e(Vd,nge),e(nge,VXo),e(Vd,XXo),e(Vd,tO),e(tO,zXo),e(Vd,QXo),e(rt,WXo),e(rt,sge),e(sge,HXo),e(rt,UXo),g(n0,rt,null),e(ir,JXo),e(ir,Je),g(s0,Je,null),e(Je,YXo),e(Je,lge),e(lge,KXo),e(Je,ZXo),e(Je,rn),e(rn,ezo),e(rn,ige),e(ige,ozo),e(rn,rzo),e(rn,dge),e(dge,tzo),e(rn,azo),e(rn,cge),e(cge,nzo),e(rn,szo),e(Je,lzo),e(Je,mge),e(mge,V1),e(V1,fge),e(fge,izo),e(V1,dzo),e(V1,aO),e(aO,czo),e(V1,mzo),e(Je,fzo),e(Je,X1),e(X1,gzo),e(X1,gge),e(gge,hzo),e(X1,uzo),e(X1,hge),e(hge,pzo),e(Je,_zo),e(Je,uge),e(uge,bzo),e(Je,vzo),g(l0,Je,null),b(c,NPe,_),b(c,Xd,_),e(Xd,z1),e(z1,pge),g(i0,pge,null),e(Xd,Fzo),e(Xd,_ge),e(_ge,Tzo),b(c,jPe,_),b(c,dr,_),g(d0,dr,null),e(dr,Mzo),e(dr,zd),e(zd,Ezo),e(zd,nO),e(nO,Czo),e(zd,wzo),e(zd,sO),e(sO,Azo),e(zd,yzo),e(dr,Lzo),e(dr,c0),e(c0,xzo),e(c0,bge),e(bge,kzo),e(c0,Szo),e(dr,Rzo),e(dr,tt),g(m0,tt,null),e(tt,Bzo),e(tt,vge),e(vge,Pzo),e(tt,$zo),e(tt,Qd),e(Qd,Izo),e(Qd,Fge),e(Fge,qzo),e(Qd,Nzo),e(Qd,lO),e(lO,jzo),e(Qd,Dzo),e(tt,Gzo),e(tt,Tge),e(Tge,Ozo),e(tt,Vzo),g(f0,tt,null),e(dr,Xzo),e(dr,Ye),g(g0,Ye,null),e(Ye,zzo),e(Ye,Mge),e(Mge,Qzo),e(Ye,Wzo),e(Ye,tn),e(tn,Hzo),e(tn,Ege),e(Ege,Uzo),e(tn,Jzo),e(tn,Cge),e(Cge,Yzo),e(tn,Kzo),e(tn,wge),e(wge,Zzo),e(tn,eQo),e(Ye,oQo),e(Ye,Re),e(Re,Q1),e(Q1,Age),e(Age,rQo),e(Q1,tQo),e(Q1,iO),e(iO,aQo),e(Q1,nQo),e(Re,sQo),e(Re,W1),e(W1,yge),e(yge,lQo),e(W1,iQo),e(W1,dO),e(dO,dQo),e(W1,cQo),e(Re,mQo),e(Re,H1),e(H1,Lge),e(Lge,fQo),e(H1,gQo),e(H1,cO),e(cO,hQo),e(H1,uQo),e(Re,pQo),e(Re,U1),e(U1,xge),e(xge,_Qo),e(U1,bQo),e(U1,mO),e(mO,vQo),e(U1,FQo),e(Re,TQo),e(Re,J1),e(J1,kge),e(kge,MQo),e(J1,EQo),e(J1,fO),e(fO,CQo),e(J1,wQo),e(Re,AQo),e(Re,Y1),e(Y1,Sge),e(Sge,yQo),e(Y1,LQo),e(Y1,gO),e(gO,xQo),e(Y1,kQo),e(Re,SQo),e(Re,K1),e(K1,Rge),e(Rge,RQo),e(K1,BQo),e(K1,hO),e(hO,PQo),e(K1,$Qo),e(Re,IQo),e(Re,Z1),e(Z1,Bge),e(Bge,qQo),e(Z1,NQo),e(Z1,uO),e(uO,jQo),e(Z1,DQo),e(Ye,GQo),e(Ye,eT),e(eT,OQo),e(eT,Pge),e(Pge,VQo),e(eT,XQo),e(eT,$ge),e($ge,zQo),e(Ye,QQo),e(Ye,Ige),e(Ige,WQo),e(Ye,HQo),g(h0,Ye,null),b(c,DPe,_),b(c,Wd,_),e(Wd,oT),e(oT,qge),g(u0,qge,null),e(Wd,UQo),e(Wd,Nge),e(Nge,JQo),b(c,GPe,_),b(c,cr,_),g(p0,cr,null),e(cr,YQo),e(cr,Hd),e(Hd,KQo),e(Hd,pO),e(pO,ZQo),e(Hd,eWo),e(Hd,_O),e(_O,oWo),e(Hd,rWo),e(cr,tWo),e(cr,_0),e(_0,aWo),e(_0,jge),e(jge,nWo),e(_0,sWo),e(cr,lWo),e(cr,at),g(b0,at,null),e(at,iWo),e(at,Dge),e(Dge,dWo),e(at,cWo),e(at,Ud),e(Ud,mWo),e(Ud,Gge),e(Gge,fWo),e(Ud,gWo),e(Ud,bO),e(bO,hWo),e(Ud,uWo),e(at,pWo),e(at,Oge),e(Oge,_Wo),e(at,bWo),g(v0,at,null),e(cr,vWo),e(cr,Ke),g(F0,Ke,null),e(Ke,FWo),e(Ke,Vge),e(Vge,TWo),e(Ke,MWo),e(Ke,an),e(an,EWo),e(an,Xge),e(Xge,CWo),e(an,wWo),e(an,zge),e(zge,AWo),e(an,yWo),e(an,Qge),e(Qge,LWo),e(an,xWo),e(Ke,kWo),e(Ke,nn),e(nn,rT),e(rT,Wge),e(Wge,SWo),e(rT,RWo),e(rT,vO),e(vO,BWo),e(rT,PWo),e(nn,$Wo),e(nn,tT),e(tT,Hge),e(Hge,IWo),e(tT,qWo),e(tT,FO),e(FO,NWo),e(tT,jWo),e(nn,DWo),e(nn,aT),e(aT,Uge),e(Uge,GWo),e(aT,OWo),e(aT,TO),e(TO,VWo),e(aT,XWo),e(nn,zWo),e(nn,nT),e(nT,Jge),e(Jge,QWo),e(nT,WWo),e(nT,MO),e(MO,HWo),e(nT,UWo),e(Ke,JWo),e(Ke,sT),e(sT,YWo),e(sT,Yge),e(Yge,KWo),e(sT,ZWo),e(sT,Kge),e(Kge,eHo),e(Ke,oHo),e(Ke,Zge),e(Zge,rHo),e(Ke,tHo),g(T0,Ke,null),b(c,OPe,_),b(c,Jd,_),e(Jd,lT),e(lT,ehe),g(M0,ehe,null),e(Jd,aHo),e(Jd,ohe),e(ohe,nHo),b(c,VPe,_),b(c,mr,_),g(E0,mr,null),e(mr,sHo),e(mr,Yd),e(Yd,lHo),e(Yd,EO),e(EO,iHo),e(Yd,dHo),e(Yd,CO),e(CO,cHo),e(Yd,mHo),e(mr,fHo),e(mr,C0),e(C0,gHo),e(C0,rhe),e(rhe,hHo),e(C0,uHo),e(mr,pHo),e(mr,nt),g(w0,nt,null),e(nt,_Ho),e(nt,the),e(the,bHo),e(nt,vHo),e(nt,Kd),e(Kd,FHo),e(Kd,ahe),e(ahe,THo),e(Kd,MHo),e(Kd,wO),e(wO,EHo),e(Kd,CHo),e(nt,wHo),e(nt,nhe),e(nhe,AHo),e(nt,yHo),g(A0,nt,null),e(mr,LHo),e(mr,Ze),g(y0,Ze,null),e(Ze,xHo),e(Ze,she),e(she,kHo),e(Ze,SHo),e(Ze,sn),e(sn,RHo),e(sn,lhe),e(lhe,BHo),e(sn,PHo),e(sn,ihe),e(ihe,$Ho),e(sn,IHo),e(sn,dhe),e(dhe,qHo),e(sn,NHo),e(Ze,jHo),e(Ze,Be),e(Be,iT),e(iT,che),e(che,DHo),e(iT,GHo),e(iT,AO),e(AO,OHo),e(iT,VHo),e(Be,XHo),e(Be,dT),e(dT,mhe),e(mhe,zHo),e(dT,QHo),e(dT,yO),e(yO,WHo),e(dT,HHo),e(Be,UHo),e(Be,cT),e(cT,fhe),e(fhe,JHo),e(cT,YHo),e(cT,LO),e(LO,KHo),e(cT,ZHo),e(Be,eUo),e(Be,mT),e(mT,ghe),e(ghe,oUo),e(mT,rUo),e(mT,xO),e(xO,tUo),e(mT,aUo),e(Be,nUo),e(Be,fT),e(fT,hhe),e(hhe,sUo),e(fT,lUo),e(fT,kO),e(kO,iUo),e(fT,dUo),e(Be,cUo),e(Be,gT),e(gT,uhe),e(uhe,mUo),e(gT,fUo),e(gT,SO),e(SO,gUo),e(gT,hUo),e(Be,uUo),e(Be,hT),e(hT,phe),e(phe,pUo),e(hT,_Uo),e(hT,RO),e(RO,bUo),e(hT,vUo),e(Be,FUo),e(Be,uT),e(uT,_he),e(_he,TUo),e(uT,MUo),e(uT,BO),e(BO,EUo),e(uT,CUo),e(Ze,wUo),e(Ze,pT),e(pT,AUo),e(pT,bhe),e(bhe,yUo),e(pT,LUo),e(pT,vhe),e(vhe,xUo),e(Ze,kUo),e(Ze,Fhe),e(Fhe,SUo),e(Ze,RUo),g(L0,Ze,null),b(c,XPe,_),b(c,Zd,_),e(Zd,_T),e(_T,The),g(x0,The,null),e(Zd,BUo),e(Zd,Mhe),e(Mhe,PUo),b(c,zPe,_),b(c,fr,_),g(k0,fr,null),e(fr,$Uo),e(fr,ec),e(ec,IUo),e(ec,PO),e(PO,qUo),e(ec,NUo),e(ec,$O),e($O,jUo),e(ec,DUo),e(fr,GUo),e(fr,S0),e(S0,OUo),e(S0,Ehe),e(Ehe,VUo),e(S0,XUo),e(fr,zUo),e(fr,st),g(R0,st,null),e(st,QUo),e(st,Che),e(Che,WUo),e(st,HUo),e(st,oc),e(oc,UUo),e(oc,whe),e(whe,JUo),e(oc,YUo),e(oc,IO),e(IO,KUo),e(oc,ZUo),e(st,eJo),e(st,Ahe),e(Ahe,oJo),e(st,rJo),g(B0,st,null),e(fr,tJo),e(fr,eo),g(P0,eo,null),e(eo,aJo),e(eo,yhe),e(yhe,nJo),e(eo,sJo),e(eo,ln),e(ln,lJo),e(ln,Lhe),e(Lhe,iJo),e(ln,dJo),e(ln,xhe),e(xhe,cJo),e(ln,mJo),e(ln,khe),e(khe,fJo),e(ln,gJo),e(eo,hJo),e(eo,$0),e($0,bT),e(bT,She),e(She,uJo),e(bT,pJo),e(bT,qO),e(qO,_Jo),e(bT,bJo),e($0,vJo),e($0,vT),e(vT,Rhe),e(Rhe,FJo),e(vT,TJo),e(vT,NO),e(NO,MJo),e(vT,EJo),e(eo,CJo),e(eo,FT),e(FT,wJo),e(FT,Bhe),e(Bhe,AJo),e(FT,yJo),e(FT,Phe),e(Phe,LJo),e(eo,xJo),e(eo,$he),e($he,kJo),e(eo,SJo),g(I0,eo,null),b(c,QPe,_),b(c,rc,_),e(rc,TT),e(TT,Ihe),g(q0,Ihe,null),e(rc,RJo),e(rc,qhe),e(qhe,BJo),b(c,WPe,_),b(c,gr,_),g(N0,gr,null),e(gr,PJo),e(gr,tc),e(tc,$Jo),e(tc,jO),e(jO,IJo),e(tc,qJo),e(tc,DO),e(DO,NJo),e(tc,jJo),e(gr,DJo),e(gr,j0),e(j0,GJo),e(j0,Nhe),e(Nhe,OJo),e(j0,VJo),e(gr,XJo),e(gr,lt),g(D0,lt,null),e(lt,zJo),e(lt,jhe),e(jhe,QJo),e(lt,WJo),e(lt,ac),e(ac,HJo),e(ac,Dhe),e(Dhe,UJo),e(ac,JJo),e(ac,GO),e(GO,YJo),e(ac,KJo),e(lt,ZJo),e(lt,Ghe),e(Ghe,eYo),e(lt,oYo),g(G0,lt,null),e(gr,rYo),e(gr,oo),g(O0,oo,null),e(oo,tYo),e(oo,Ohe),e(Ohe,aYo),e(oo,nYo),e(oo,dn),e(dn,sYo),e(dn,Vhe),e(Vhe,lYo),e(dn,iYo),e(dn,Xhe),e(Xhe,dYo),e(dn,cYo),e(dn,zhe),e(zhe,mYo),e(dn,fYo),e(oo,gYo),e(oo,cn),e(cn,MT),e(MT,Qhe),e(Qhe,hYo),e(MT,uYo),e(MT,OO),e(OO,pYo),e(MT,_Yo),e(cn,bYo),e(cn,ET),e(ET,Whe),e(Whe,vYo),e(ET,FYo),e(ET,VO),e(VO,TYo),e(ET,MYo),e(cn,EYo),e(cn,CT),e(CT,Hhe),e(Hhe,CYo),e(CT,wYo),e(CT,XO),e(XO,AYo),e(CT,yYo),e(cn,LYo),e(cn,wT),e(wT,Uhe),e(Uhe,xYo),e(wT,kYo),e(wT,zO),e(zO,SYo),e(wT,RYo),e(oo,BYo),e(oo,AT),e(AT,PYo),e(AT,Jhe),e(Jhe,$Yo),e(AT,IYo),e(AT,Yhe),e(Yhe,qYo),e(oo,NYo),e(oo,Khe),e(Khe,jYo),e(oo,DYo),g(V0,oo,null),b(c,HPe,_),b(c,nc,_),e(nc,yT),e(yT,Zhe),g(X0,Zhe,null),e(nc,GYo),e(nc,eue),e(eue,OYo),b(c,UPe,_),b(c,hr,_),g(z0,hr,null),e(hr,VYo),e(hr,sc),e(sc,XYo),e(sc,QO),e(QO,zYo),e(sc,QYo),e(sc,WO),e(WO,WYo),e(sc,HYo),e(hr,UYo),e(hr,Q0),e(Q0,JYo),e(Q0,oue),e(oue,YYo),e(Q0,KYo),e(hr,ZYo),e(hr,it),g(W0,it,null),e(it,eKo),e(it,rue),e(rue,oKo),e(it,rKo),e(it,lc),e(lc,tKo),e(lc,tue),e(tue,aKo),e(lc,nKo),e(lc,HO),e(HO,sKo),e(lc,lKo),e(it,iKo),e(it,aue),e(aue,dKo),e(it,cKo),g(H0,it,null),e(hr,mKo),e(hr,ro),g(U0,ro,null),e(ro,fKo),e(ro,nue),e(nue,gKo),e(ro,hKo),e(ro,mn),e(mn,uKo),e(mn,sue),e(sue,pKo),e(mn,_Ko),e(mn,lue),e(lue,bKo),e(mn,vKo),e(mn,iue),e(iue,FKo),e(mn,TKo),e(ro,MKo),e(ro,ic),e(ic,LT),e(LT,due),e(due,EKo),e(LT,CKo),e(LT,UO),e(UO,wKo),e(LT,AKo),e(ic,yKo),e(ic,xT),e(xT,cue),e(cue,LKo),e(xT,xKo),e(xT,JO),e(JO,kKo),e(xT,SKo),e(ic,RKo),e(ic,kT),e(kT,mue),e(mue,BKo),e(kT,PKo),e(kT,YO),e(YO,$Ko),e(kT,IKo),e(ro,qKo),e(ro,ST),e(ST,NKo),e(ST,fue),e(fue,jKo),e(ST,DKo),e(ST,gue),e(gue,GKo),e(ro,OKo),e(ro,hue),e(hue,VKo),e(ro,XKo),g(J0,ro,null),b(c,JPe,_),b(c,dc,_),e(dc,RT),e(RT,uue),g(Y0,uue,null),e(dc,zKo),e(dc,pue),e(pue,QKo),b(c,YPe,_),b(c,ur,_),g(K0,ur,null),e(ur,WKo),e(ur,cc),e(cc,HKo),e(cc,KO),e(KO,UKo),e(cc,JKo),e(cc,ZO),e(ZO,YKo),e(cc,KKo),e(ur,ZKo),e(ur,Z0),e(Z0,eZo),e(Z0,_ue),e(_ue,oZo),e(Z0,rZo),e(ur,tZo),e(ur,dt),g(ey,dt,null),e(dt,aZo),e(dt,bue),e(bue,nZo),e(dt,sZo),e(dt,mc),e(mc,lZo),e(mc,vue),e(vue,iZo),e(mc,dZo),e(mc,eV),e(eV,cZo),e(mc,mZo),e(dt,fZo),e(dt,Fue),e(Fue,gZo),e(dt,hZo),g(oy,dt,null),e(ur,uZo),e(ur,to),g(ry,to,null),e(to,pZo),e(to,Tue),e(Tue,_Zo),e(to,bZo),e(to,fn),e(fn,vZo),e(fn,Mue),e(Mue,FZo),e(fn,TZo),e(fn,Eue),e(Eue,MZo),e(fn,EZo),e(fn,Cue),e(Cue,CZo),e(fn,wZo),e(to,AZo),e(to,wue),e(wue,BT),e(BT,Aue),e(Aue,yZo),e(BT,LZo),e(BT,oV),e(oV,xZo),e(BT,kZo),e(to,SZo),e(to,PT),e(PT,RZo),e(PT,yue),e(yue,BZo),e(PT,PZo),e(PT,Lue),e(Lue,$Zo),e(to,IZo),e(to,xue),e(xue,qZo),e(to,NZo),g(ty,to,null),b(c,KPe,_),b(c,fc,_),e(fc,$T),e($T,kue),g(ay,kue,null),e(fc,jZo),e(fc,Sue),e(Sue,DZo),b(c,ZPe,_),b(c,pr,_),g(ny,pr,null),e(pr,GZo),e(pr,gc),e(gc,OZo),e(gc,rV),e(rV,VZo),e(gc,XZo),e(gc,tV),e(tV,zZo),e(gc,QZo),e(pr,WZo),e(pr,sy),e(sy,HZo),e(sy,Rue),e(Rue,UZo),e(sy,JZo),e(pr,YZo),e(pr,ct),g(ly,ct,null),e(ct,KZo),e(ct,Bue),e(Bue,ZZo),e(ct,eer),e(ct,hc),e(hc,oer),e(hc,Pue),e(Pue,rer),e(hc,ter),e(hc,aV),e(aV,aer),e(hc,ner),e(ct,ser),e(ct,$ue),e($ue,ler),e(ct,ier),g(iy,ct,null),e(pr,der),e(pr,ao),g(dy,ao,null),e(ao,cer),e(ao,Iue),e(Iue,mer),e(ao,fer),e(ao,gn),e(gn,ger),e(gn,que),e(que,her),e(gn,uer),e(gn,Nue),e(Nue,per),e(gn,_er),e(gn,jue),e(jue,ber),e(gn,ver),e(ao,Fer),e(ao,Due),e(Due,IT),e(IT,Gue),e(Gue,Ter),e(IT,Mer),e(IT,nV),e(nV,Eer),e(IT,Cer),e(ao,wer),e(ao,qT),e(qT,Aer),e(qT,Oue),e(Oue,yer),e(qT,Ler),e(qT,Vue),e(Vue,xer),e(ao,ker),e(ao,Xue),e(Xue,Ser),e(ao,Rer),g(cy,ao,null),b(c,e$e,_),b(c,uc,_),e(uc,NT),e(NT,zue),g(my,zue,null),e(uc,Ber),e(uc,Que),e(Que,Per),b(c,o$e,_),b(c,_r,_),g(fy,_r,null),e(_r,$er),e(_r,pc),e(pc,Ier),e(pc,sV),e(sV,qer),e(pc,Ner),e(pc,lV),e(lV,jer),e(pc,Der),e(_r,Ger),e(_r,gy),e(gy,Oer),e(gy,Wue),e(Wue,Ver),e(gy,Xer),e(_r,zer),e(_r,mt),g(hy,mt,null),e(mt,Qer),e(mt,Hue),e(Hue,Wer),e(mt,Her),e(mt,_c),e(_c,Uer),e(_c,Uue),e(Uue,Jer),e(_c,Yer),e(_c,iV),e(iV,Ker),e(_c,Zer),e(mt,eor),e(mt,Jue),e(Jue,oor),e(mt,ror),g(uy,mt,null),e(_r,tor),e(_r,no),g(py,no,null),e(no,aor),e(no,Yue),e(Yue,nor),e(no,sor),e(no,hn),e(hn,lor),e(hn,Kue),e(Kue,ior),e(hn,dor),e(hn,Zue),e(Zue,cor),e(hn,mor),e(hn,epe),e(epe,gor),e(hn,hor),e(no,uor),e(no,un),e(un,jT),e(jT,ope),e(ope,por),e(jT,_or),e(jT,dV),e(dV,bor),e(jT,vor),e(un,For),e(un,DT),e(DT,rpe),e(rpe,Tor),e(DT,Mor),e(DT,cV),e(cV,Eor),e(DT,Cor),e(un,wor),e(un,GT),e(GT,tpe),e(tpe,Aor),e(GT,yor),e(GT,mV),e(mV,Lor),e(GT,xor),e(un,kor),e(un,OT),e(OT,ape),e(ape,Sor),e(OT,Ror),e(OT,fV),e(fV,Bor),e(OT,Por),e(no,$or),e(no,VT),e(VT,Ior),e(VT,npe),e(npe,qor),e(VT,Nor),e(VT,spe),e(spe,jor),e(no,Dor),e(no,lpe),e(lpe,Gor),e(no,Oor),g(_y,no,null),b(c,r$e,_),b(c,bc,_),e(bc,XT),e(XT,ipe),g(by,ipe,null),e(bc,Vor),e(bc,dpe),e(dpe,Xor),b(c,t$e,_),b(c,br,_),g(vy,br,null),e(br,zor),e(br,vc),e(vc,Qor),e(vc,gV),e(gV,Wor),e(vc,Hor),e(vc,hV),e(hV,Uor),e(vc,Jor),e(br,Yor),e(br,Fy),e(Fy,Kor),e(Fy,cpe),e(cpe,Zor),e(Fy,err),e(br,orr),e(br,ft),g(Ty,ft,null),e(ft,rrr),e(ft,mpe),e(mpe,trr),e(ft,arr),e(ft,Fc),e(Fc,nrr),e(Fc,fpe),e(fpe,srr),e(Fc,lrr),e(Fc,uV),e(uV,irr),e(Fc,drr),e(ft,crr),e(ft,gpe),e(gpe,mrr),e(ft,frr),g(My,ft,null),e(br,grr),e(br,so),g(Ey,so,null),e(so,hrr),e(so,hpe),e(hpe,urr),e(so,prr),e(so,pn),e(pn,_rr),e(pn,upe),e(upe,brr),e(pn,vrr),e(pn,ppe),e(ppe,Frr),e(pn,Trr),e(pn,_pe),e(_pe,Mrr),e(pn,Err),e(so,Crr),e(so,bpe),e(bpe,zT),e(zT,vpe),e(vpe,wrr),e(zT,Arr),e(zT,pV),e(pV,yrr),e(zT,Lrr),e(so,xrr),e(so,QT),e(QT,krr),e(QT,Fpe),e(Fpe,Srr),e(QT,Rrr),e(QT,Tpe),e(Tpe,Brr),e(so,Prr),e(so,Mpe),e(Mpe,$rr),e(so,Irr),g(Cy,so,null),b(c,a$e,_),b(c,Tc,_),e(Tc,WT),e(WT,Epe),g(wy,Epe,null),e(Tc,qrr),e(Tc,Cpe),e(Cpe,Nrr),b(c,n$e,_),b(c,vr,_),g(Ay,vr,null),e(vr,jrr),e(vr,Mc),e(Mc,Drr),e(Mc,_V),e(_V,Grr),e(Mc,Orr),e(Mc,bV),e(bV,Vrr),e(Mc,Xrr),e(vr,zrr),e(vr,yy),e(yy,Qrr),e(yy,wpe),e(wpe,Wrr),e(yy,Hrr),e(vr,Urr),e(vr,gt),g(Ly,gt,null),e(gt,Jrr),e(gt,Ape),e(Ape,Yrr),e(gt,Krr),e(gt,Ec),e(Ec,Zrr),e(Ec,ype),e(ype,etr),e(Ec,otr),e(Ec,vV),e(vV,rtr),e(Ec,ttr),e(gt,atr),e(gt,Lpe),e(Lpe,ntr),e(gt,str),g(xy,gt,null),e(vr,ltr),e(vr,uo),g(ky,uo,null),e(uo,itr),e(uo,xpe),e(xpe,dtr),e(uo,ctr),e(uo,_n),e(_n,mtr),e(_n,kpe),e(kpe,ftr),e(_n,gtr),e(_n,Spe),e(Spe,htr),e(_n,utr),e(_n,Rpe),e(Rpe,ptr),e(_n,_tr),e(uo,btr),e(uo,x),e(x,HT),e(HT,Bpe),e(Bpe,vtr),e(HT,Ftr),e(HT,FV),e(FV,Ttr),e(HT,Mtr),e(x,Etr),e(x,UT),e(UT,Ppe),e(Ppe,Ctr),e(UT,wtr),e(UT,TV),e(TV,Atr),e(UT,ytr),e(x,Ltr),e(x,JT),e(JT,$pe),e($pe,xtr),e(JT,ktr),e(JT,MV),e(MV,Str),e(JT,Rtr),e(x,Btr),e(x,YT),e(YT,Ipe),e(Ipe,Ptr),e(YT,$tr),e(YT,EV),e(EV,Itr),e(YT,qtr),e(x,Ntr),e(x,KT),e(KT,qpe),e(qpe,jtr),e(KT,Dtr),e(KT,CV),e(CV,Gtr),e(KT,Otr),e(x,Vtr),e(x,ZT),e(ZT,Npe),e(Npe,Xtr),e(ZT,ztr),e(ZT,wV),e(wV,Qtr),e(ZT,Wtr),e(x,Htr),e(x,eM),e(eM,jpe),e(jpe,Utr),e(eM,Jtr),e(eM,AV),e(AV,Ytr),e(eM,Ktr),e(x,Ztr),e(x,oM),e(oM,Dpe),e(Dpe,ear),e(oM,oar),e(oM,yV),e(yV,rar),e(oM,tar),e(x,aar),e(x,rM),e(rM,Gpe),e(Gpe,nar),e(rM,sar),e(rM,LV),e(LV,lar),e(rM,iar),e(x,dar),e(x,tM),e(tM,Ope),e(Ope,car),e(tM,mar),e(tM,xV),e(xV,far),e(tM,gar),e(x,har),e(x,aM),e(aM,Vpe),e(Vpe,uar),e(aM,par),e(aM,kV),e(kV,_ar),e(aM,bar),e(x,Far),e(x,nM),e(nM,Xpe),e(Xpe,Tar),e(nM,Mar),e(nM,SV),e(SV,Ear),e(nM,Car),e(x,war),e(x,sM),e(sM,zpe),e(zpe,Aar),e(sM,yar),e(sM,RV),e(RV,Lar),e(sM,xar),e(x,kar),e(x,lM),e(lM,Qpe),e(Qpe,Sar),e(lM,Rar),e(lM,BV),e(BV,Bar),e(lM,Par),e(x,$ar),e(x,iM),e(iM,Wpe),e(Wpe,Iar),e(iM,qar),e(iM,PV),e(PV,Nar),e(iM,jar),e(x,Dar),e(x,dM),e(dM,Hpe),e(Hpe,Gar),e(dM,Oar),e(dM,$V),e($V,Var),e(dM,Xar),e(x,zar),e(x,Js),e(Js,Upe),e(Upe,Qar),e(Js,War),e(Js,IV),e(IV,Har),e(Js,Uar),e(Js,qV),e(qV,Jar),e(Js,Yar),e(x,Kar),e(x,cM),e(cM,Jpe),e(Jpe,Zar),e(cM,enr),e(cM,NV),e(NV,onr),e(cM,rnr),e(x,tnr),e(x,mM),e(mM,Ype),e(Ype,anr),e(mM,nnr),e(mM,jV),e(jV,snr),e(mM,lnr),e(x,inr),e(x,fM),e(fM,Kpe),e(Kpe,dnr),e(fM,cnr),e(fM,DV),e(DV,mnr),e(fM,fnr),e(x,gnr),e(x,gM),e(gM,Zpe),e(Zpe,hnr),e(gM,unr),e(gM,GV),e(GV,pnr),e(gM,_nr),e(x,bnr),e(x,hM),e(hM,e_e),e(e_e,vnr),e(hM,Fnr),e(hM,OV),e(OV,Tnr),e(hM,Mnr),e(x,Enr),e(x,uM),e(uM,o_e),e(o_e,Cnr),e(uM,wnr),e(uM,VV),e(VV,Anr),e(uM,ynr),e(x,Lnr),e(x,pM),e(pM,r_e),e(r_e,xnr),e(pM,knr),e(pM,XV),e(XV,Snr),e(pM,Rnr),e(x,Bnr),e(x,_M),e(_M,t_e),e(t_e,Pnr),e(_M,$nr),e(_M,zV),e(zV,Inr),e(_M,qnr),e(x,Nnr),e(x,bM),e(bM,a_e),e(a_e,jnr),e(bM,Dnr),e(bM,QV),e(QV,Gnr),e(bM,Onr),e(x,Vnr),e(x,vM),e(vM,n_e),e(n_e,Xnr),e(vM,znr),e(vM,WV),e(WV,Qnr),e(vM,Wnr),e(x,Hnr),e(x,FM),e(FM,s_e),e(s_e,Unr),e(FM,Jnr),e(FM,HV),e(HV,Ynr),e(FM,Knr),e(x,Znr),e(x,TM),e(TM,l_e),e(l_e,esr),e(TM,osr),e(TM,UV),e(UV,rsr),e(TM,tsr),e(x,asr),e(x,MM),e(MM,i_e),e(i_e,nsr),e(MM,ssr),e(MM,JV),e(JV,lsr),e(MM,isr),e(x,dsr),e(x,EM),e(EM,d_e),e(d_e,csr),e(EM,msr),e(EM,YV),e(YV,fsr),e(EM,gsr),e(x,hsr),e(x,CM),e(CM,c_e),e(c_e,usr),e(CM,psr),e(CM,KV),e(KV,_sr),e(CM,bsr),e(x,vsr),e(x,wM),e(wM,m_e),e(m_e,Fsr),e(wM,Tsr),e(wM,ZV),e(ZV,Msr),e(wM,Esr),e(x,Csr),e(x,AM),e(AM,f_e),e(f_e,wsr),e(AM,Asr),e(AM,eX),e(eX,ysr),e(AM,Lsr),e(x,xsr),e(x,yM),e(yM,g_e),e(g_e,ksr),e(yM,Ssr),e(yM,oX),e(oX,Rsr),e(yM,Bsr),e(x,Psr),e(x,LM),e(LM,h_e),e(h_e,$sr),e(LM,Isr),e(LM,rX),e(rX,qsr),e(LM,Nsr),e(x,jsr),e(x,xM),e(xM,u_e),e(u_e,Dsr),e(xM,Gsr),e(xM,tX),e(tX,Osr),e(xM,Vsr),e(x,Xsr),e(x,kM),e(kM,p_e),e(p_e,zsr),e(kM,Qsr),e(kM,aX),e(aX,Wsr),e(kM,Hsr),e(x,Usr),e(x,SM),e(SM,__e),e(__e,Jsr),e(SM,Ysr),e(SM,nX),e(nX,Ksr),e(SM,Zsr),e(x,elr),e(x,RM),e(RM,b_e),e(b_e,olr),e(RM,rlr),e(RM,sX),e(sX,tlr),e(RM,alr),e(x,nlr),e(x,BM),e(BM,v_e),e(v_e,slr),e(BM,llr),e(BM,lX),e(lX,ilr),e(BM,dlr),e(x,clr),e(x,PM),e(PM,F_e),e(F_e,mlr),e(PM,flr),e(PM,iX),e(iX,glr),e(PM,hlr),e(x,ulr),e(x,$M),e($M,T_e),e(T_e,plr),e($M,_lr),e($M,dX),e(dX,blr),e($M,vlr),e(x,Flr),e(x,IM),e(IM,M_e),e(M_e,Tlr),e(IM,Mlr),e(IM,cX),e(cX,Elr),e(IM,Clr),e(uo,wlr),e(uo,E_e),e(E_e,Alr),e(uo,ylr),g(Sy,uo,null),b(c,s$e,_),b(c,Cc,_),e(Cc,qM),e(qM,C_e),g(Ry,C_e,null),e(Cc,Llr),e(Cc,w_e),e(w_e,xlr),b(c,l$e,_),b(c,Fr,_),g(By,Fr,null),e(Fr,klr),e(Fr,wc),e(wc,Slr),e(wc,mX),e(mX,Rlr),e(wc,Blr),e(wc,fX),e(fX,Plr),e(wc,$lr),e(Fr,Ilr),e(Fr,Py),e(Py,qlr),e(Py,A_e),e(A_e,Nlr),e(Py,jlr),e(Fr,Dlr),e(Fr,ht),g($y,ht,null),e(ht,Glr),e(ht,y_e),e(y_e,Olr),e(ht,Vlr),e(ht,Ac),e(Ac,Xlr),e(Ac,L_e),e(L_e,zlr),e(Ac,Qlr),e(Ac,gX),e(gX,Wlr),e(Ac,Hlr),e(ht,Ulr),e(ht,x_e),e(x_e,Jlr),e(ht,Ylr),g(Iy,ht,null),e(Fr,Klr),e(Fr,po),g(qy,po,null),e(po,Zlr),e(po,k_e),e(k_e,eir),e(po,oir),e(po,bn),e(bn,rir),e(bn,S_e),e(S_e,tir),e(bn,air),e(bn,R_e),e(R_e,nir),e(bn,sir),e(bn,B_e),e(B_e,lir),e(bn,iir),e(po,dir),e(po,U),e(U,NM),e(NM,P_e),e(P_e,cir),e(NM,mir),e(NM,hX),e(hX,fir),e(NM,gir),e(U,hir),e(U,jM),e(jM,$_e),e($_e,uir),e(jM,pir),e(jM,uX),e(uX,_ir),e(jM,bir),e(U,vir),e(U,DM),e(DM,I_e),e(I_e,Fir),e(DM,Tir),e(DM,pX),e(pX,Mir),e(DM,Eir),e(U,Cir),e(U,GM),e(GM,q_e),e(q_e,wir),e(GM,Air),e(GM,_X),e(_X,yir),e(GM,Lir),e(U,xir),e(U,OM),e(OM,N_e),e(N_e,kir),e(OM,Sir),e(OM,bX),e(bX,Rir),e(OM,Bir),e(U,Pir),e(U,VM),e(VM,j_e),e(j_e,$ir),e(VM,Iir),e(VM,vX),e(vX,qir),e(VM,Nir),e(U,jir),e(U,XM),e(XM,D_e),e(D_e,Dir),e(XM,Gir),e(XM,FX),e(FX,Oir),e(XM,Vir),e(U,Xir),e(U,zM),e(zM,G_e),e(G_e,zir),e(zM,Qir),e(zM,TX),e(TX,Wir),e(zM,Hir),e(U,Uir),e(U,QM),e(QM,O_e),e(O_e,Jir),e(QM,Yir),e(QM,MX),e(MX,Kir),e(QM,Zir),e(U,edr),e(U,WM),e(WM,V_e),e(V_e,odr),e(WM,rdr),e(WM,EX),e(EX,tdr),e(WM,adr),e(U,ndr),e(U,HM),e(HM,X_e),e(X_e,sdr),e(HM,ldr),e(HM,CX),e(CX,idr),e(HM,ddr),e(U,cdr),e(U,UM),e(UM,z_e),e(z_e,mdr),e(UM,fdr),e(UM,wX),e(wX,gdr),e(UM,hdr),e(U,udr),e(U,JM),e(JM,Q_e),e(Q_e,pdr),e(JM,_dr),e(JM,AX),e(AX,bdr),e(JM,vdr),e(U,Fdr),e(U,YM),e(YM,W_e),e(W_e,Tdr),e(YM,Mdr),e(YM,yX),e(yX,Edr),e(YM,Cdr),e(U,wdr),e(U,KM),e(KM,H_e),e(H_e,Adr),e(KM,ydr),e(KM,LX),e(LX,Ldr),e(KM,xdr),e(U,kdr),e(U,ZM),e(ZM,U_e),e(U_e,Sdr),e(ZM,Rdr),e(ZM,xX),e(xX,Bdr),e(ZM,Pdr),e(U,$dr),e(U,e4),e(e4,J_e),e(J_e,Idr),e(e4,qdr),e(e4,kX),e(kX,Ndr),e(e4,jdr),e(U,Ddr),e(U,o4),e(o4,Y_e),e(Y_e,Gdr),e(o4,Odr),e(o4,SX),e(SX,Vdr),e(o4,Xdr),e(U,zdr),e(U,r4),e(r4,K_e),e(K_e,Qdr),e(r4,Wdr),e(r4,RX),e(RX,Hdr),e(r4,Udr),e(U,Jdr),e(U,t4),e(t4,Z_e),e(Z_e,Ydr),e(t4,Kdr),e(t4,BX),e(BX,Zdr),e(t4,ecr),e(U,ocr),e(U,a4),e(a4,ebe),e(ebe,rcr),e(a4,tcr),e(a4,PX),e(PX,acr),e(a4,ncr),e(U,scr),e(U,n4),e(n4,obe),e(obe,lcr),e(n4,icr),e(n4,$X),e($X,dcr),e(n4,ccr),e(U,mcr),e(U,s4),e(s4,rbe),e(rbe,fcr),e(s4,gcr),e(s4,IX),e(IX,hcr),e(s4,ucr),e(po,pcr),e(po,tbe),e(tbe,_cr),e(po,bcr),g(Ny,po,null),b(c,i$e,_),b(c,yc,_),e(yc,l4),e(l4,abe),g(jy,abe,null),e(yc,vcr),e(yc,nbe),e(nbe,Fcr),b(c,d$e,_),b(c,Tr,_),g(Dy,Tr,null),e(Tr,Tcr),e(Tr,Lc),e(Lc,Mcr),e(Lc,qX),e(qX,Ecr),e(Lc,Ccr),e(Lc,NX),e(NX,wcr),e(Lc,Acr),e(Tr,ycr),e(Tr,Gy),e(Gy,Lcr),e(Gy,sbe),e(sbe,xcr),e(Gy,kcr),e(Tr,Scr),e(Tr,ut),g(Oy,ut,null),e(ut,Rcr),e(ut,lbe),e(lbe,Bcr),e(ut,Pcr),e(ut,xc),e(xc,$cr),e(xc,ibe),e(ibe,Icr),e(xc,qcr),e(xc,jX),e(jX,Ncr),e(xc,jcr),e(ut,Dcr),e(ut,dbe),e(dbe,Gcr),e(ut,Ocr),g(Vy,ut,null),e(Tr,Vcr),e(Tr,_o),g(Xy,_o,null),e(_o,Xcr),e(_o,cbe),e(cbe,zcr),e(_o,Qcr),e(_o,vn),e(vn,Wcr),e(vn,mbe),e(mbe,Hcr),e(vn,Ucr),e(vn,fbe),e(fbe,Jcr),e(vn,Ycr),e(vn,gbe),e(gbe,Kcr),e(vn,Zcr),e(_o,emr),e(_o,ge),e(ge,i4),e(i4,hbe),e(hbe,omr),e(i4,rmr),e(i4,DX),e(DX,tmr),e(i4,amr),e(ge,nmr),e(ge,d4),e(d4,ube),e(ube,smr),e(d4,lmr),e(d4,GX),e(GX,imr),e(d4,dmr),e(ge,cmr),e(ge,c4),e(c4,pbe),e(pbe,mmr),e(c4,fmr),e(c4,OX),e(OX,gmr),e(c4,hmr),e(ge,umr),e(ge,m4),e(m4,_be),e(_be,pmr),e(m4,_mr),e(m4,VX),e(VX,bmr),e(m4,vmr),e(ge,Fmr),e(ge,f4),e(f4,bbe),e(bbe,Tmr),e(f4,Mmr),e(f4,XX),e(XX,Emr),e(f4,Cmr),e(ge,wmr),e(ge,g4),e(g4,vbe),e(vbe,Amr),e(g4,ymr),e(g4,zX),e(zX,Lmr),e(g4,xmr),e(ge,kmr),e(ge,h4),e(h4,Fbe),e(Fbe,Smr),e(h4,Rmr),e(h4,QX),e(QX,Bmr),e(h4,Pmr),e(ge,$mr),e(ge,u4),e(u4,Tbe),e(Tbe,Imr),e(u4,qmr),e(u4,WX),e(WX,Nmr),e(u4,jmr),e(ge,Dmr),e(ge,p4),e(p4,Mbe),e(Mbe,Gmr),e(p4,Omr),e(p4,HX),e(HX,Vmr),e(p4,Xmr),e(ge,zmr),e(ge,_4),e(_4,Ebe),e(Ebe,Qmr),e(_4,Wmr),e(_4,UX),e(UX,Hmr),e(_4,Umr),e(ge,Jmr),e(ge,b4),e(b4,Cbe),e(Cbe,Ymr),e(b4,Kmr),e(b4,JX),e(JX,Zmr),e(b4,efr),e(ge,ofr),e(ge,v4),e(v4,wbe),e(wbe,rfr),e(v4,tfr),e(v4,YX),e(YX,afr),e(v4,nfr),e(_o,sfr),e(_o,Abe),e(Abe,lfr),e(_o,ifr),g(zy,_o,null),b(c,c$e,_),b(c,kc,_),e(kc,F4),e(F4,ybe),g(Qy,ybe,null),e(kc,dfr),e(kc,Lbe),e(Lbe,cfr),b(c,m$e,_),b(c,Mr,_),g(Wy,Mr,null),e(Mr,mfr),e(Mr,Sc),e(Sc,ffr),e(Sc,KX),e(KX,gfr),e(Sc,hfr),e(Sc,ZX),e(ZX,ufr),e(Sc,pfr),e(Mr,_fr),e(Mr,Hy),e(Hy,bfr),e(Hy,xbe),e(xbe,vfr),e(Hy,Ffr),e(Mr,Tfr),e(Mr,pt),g(Uy,pt,null),e(pt,Mfr),e(pt,kbe),e(kbe,Efr),e(pt,Cfr),e(pt,Rc),e(Rc,wfr),e(Rc,Sbe),e(Sbe,Afr),e(Rc,yfr),e(Rc,ez),e(ez,Lfr),e(Rc,xfr),e(pt,kfr),e(pt,Rbe),e(Rbe,Sfr),e(pt,Rfr),g(Jy,pt,null),e(Mr,Bfr),e(Mr,bo),g(Yy,bo,null),e(bo,Pfr),e(bo,Bbe),e(Bbe,$fr),e(bo,Ifr),e(bo,Fn),e(Fn,qfr),e(Fn,Pbe),e(Pbe,Nfr),e(Fn,jfr),e(Fn,$be),e($be,Dfr),e(Fn,Gfr),e(Fn,Ibe),e(Ibe,Ofr),e(Fn,Vfr),e(bo,Xfr),e(bo,Ky),e(Ky,T4),e(T4,qbe),e(qbe,zfr),e(T4,Qfr),e(T4,oz),e(oz,Wfr),e(T4,Hfr),e(Ky,Ufr),e(Ky,M4),e(M4,Nbe),e(Nbe,Jfr),e(M4,Yfr),e(M4,rz),e(rz,Kfr),e(M4,Zfr),e(bo,egr),e(bo,jbe),e(jbe,ogr),e(bo,rgr),g(Zy,bo,null),b(c,f$e,_),b(c,Bc,_),e(Bc,E4),e(E4,Dbe),g(e8,Dbe,null),e(Bc,tgr),e(Bc,Gbe),e(Gbe,agr),b(c,g$e,_),b(c,Er,_),g(o8,Er,null),e(Er,ngr),e(Er,Pc),e(Pc,sgr),e(Pc,tz),e(tz,lgr),e(Pc,igr),e(Pc,az),e(az,dgr),e(Pc,cgr),e(Er,mgr),e(Er,r8),e(r8,fgr),e(r8,Obe),e(Obe,ggr),e(r8,hgr),e(Er,ugr),e(Er,_t),g(t8,_t,null),e(_t,pgr),e(_t,Vbe),e(Vbe,_gr),e(_t,bgr),e(_t,$c),e($c,vgr),e($c,Xbe),e(Xbe,Fgr),e($c,Tgr),e($c,nz),e(nz,Mgr),e($c,Egr),e(_t,Cgr),e(_t,zbe),e(zbe,wgr),e(_t,Agr),g(a8,_t,null),e(Er,ygr),e(Er,vo),g(n8,vo,null),e(vo,Lgr),e(vo,Qbe),e(Qbe,xgr),e(vo,kgr),e(vo,Tn),e(Tn,Sgr),e(Tn,Wbe),e(Wbe,Rgr),e(Tn,Bgr),e(Tn,Hbe),e(Hbe,Pgr),e(Tn,$gr),e(Tn,Ube),e(Ube,Igr),e(Tn,qgr),e(vo,Ngr),e(vo,K),e(K,C4),e(C4,Jbe),e(Jbe,jgr),e(C4,Dgr),e(C4,sz),e(sz,Ggr),e(C4,Ogr),e(K,Vgr),e(K,w4),e(w4,Ybe),e(Ybe,Xgr),e(w4,zgr),e(w4,lz),e(lz,Qgr),e(w4,Wgr),e(K,Hgr),e(K,A4),e(A4,Kbe),e(Kbe,Ugr),e(A4,Jgr),e(A4,iz),e(iz,Ygr),e(A4,Kgr),e(K,Zgr),e(K,y4),e(y4,Zbe),e(Zbe,ehr),e(y4,ohr),e(y4,dz),e(dz,rhr),e(y4,thr),e(K,ahr),e(K,L4),e(L4,e2e),e(e2e,nhr),e(L4,shr),e(L4,cz),e(cz,lhr),e(L4,ihr),e(K,dhr),e(K,x4),e(x4,o2e),e(o2e,chr),e(x4,mhr),e(x4,mz),e(mz,fhr),e(x4,ghr),e(K,hhr),e(K,k4),e(k4,r2e),e(r2e,uhr),e(k4,phr),e(k4,fz),e(fz,_hr),e(k4,bhr),e(K,vhr),e(K,S4),e(S4,t2e),e(t2e,Fhr),e(S4,Thr),e(S4,gz),e(gz,Mhr),e(S4,Ehr),e(K,Chr),e(K,R4),e(R4,a2e),e(a2e,whr),e(R4,Ahr),e(R4,hz),e(hz,yhr),e(R4,Lhr),e(K,xhr),e(K,B4),e(B4,n2e),e(n2e,khr),e(B4,Shr),e(B4,uz),e(uz,Rhr),e(B4,Bhr),e(K,Phr),e(K,P4),e(P4,s2e),e(s2e,$hr),e(P4,Ihr),e(P4,pz),e(pz,qhr),e(P4,Nhr),e(K,jhr),e(K,$4),e($4,l2e),e(l2e,Dhr),e($4,Ghr),e($4,_z),e(_z,Ohr),e($4,Vhr),e(K,Xhr),e(K,I4),e(I4,i2e),e(i2e,zhr),e(I4,Qhr),e(I4,bz),e(bz,Whr),e(I4,Hhr),e(K,Uhr),e(K,q4),e(q4,d2e),e(d2e,Jhr),e(q4,Yhr),e(q4,vz),e(vz,Khr),e(q4,Zhr),e(K,eur),e(K,N4),e(N4,c2e),e(c2e,our),e(N4,rur),e(N4,Fz),e(Fz,tur),e(N4,aur),e(K,nur),e(K,j4),e(j4,m2e),e(m2e,sur),e(j4,lur),e(j4,Tz),e(Tz,iur),e(j4,dur),e(K,cur),e(K,D4),e(D4,f2e),e(f2e,mur),e(D4,fur),e(D4,Mz),e(Mz,gur),e(D4,hur),e(K,uur),e(K,G4),e(G4,g2e),e(g2e,pur),e(G4,_ur),e(G4,Ez),e(Ez,bur),e(G4,vur),e(K,Fur),e(K,O4),e(O4,h2e),e(h2e,Tur),e(O4,Mur),e(O4,Cz),e(Cz,Eur),e(O4,Cur),e(K,wur),e(K,V4),e(V4,u2e),e(u2e,Aur),e(V4,yur),e(V4,wz),e(wz,Lur),e(V4,xur),e(vo,kur),e(vo,p2e),e(p2e,Sur),e(vo,Rur),g(s8,vo,null),b(c,h$e,_),b(c,Ic,_),e(Ic,X4),e(X4,_2e),g(l8,_2e,null),e(Ic,Bur),e(Ic,b2e),e(b2e,Pur),b(c,u$e,_),b(c,Cr,_),g(i8,Cr,null),e(Cr,$ur),e(Cr,qc),e(qc,Iur),e(qc,Az),e(Az,qur),e(qc,Nur),e(qc,yz),e(yz,jur),e(qc,Dur),e(Cr,Gur),e(Cr,d8),e(d8,Our),e(d8,v2e),e(v2e,Vur),e(d8,Xur),e(Cr,zur),e(Cr,bt),g(c8,bt,null),e(bt,Qur),e(bt,F2e),e(F2e,Wur),e(bt,Hur),e(bt,Nc),e(Nc,Uur),e(Nc,T2e),e(T2e,Jur),e(Nc,Yur),e(Nc,Lz),e(Lz,Kur),e(Nc,Zur),e(bt,epr),e(bt,M2e),e(M2e,opr),e(bt,rpr),g(m8,bt,null),e(Cr,tpr),e(Cr,Fo),g(f8,Fo,null),e(Fo,apr),e(Fo,E2e),e(E2e,npr),e(Fo,spr),e(Fo,Mn),e(Mn,lpr),e(Mn,C2e),e(C2e,ipr),e(Mn,dpr),e(Mn,w2e),e(w2e,cpr),e(Mn,mpr),e(Mn,A2e),e(A2e,fpr),e(Mn,gpr),e(Fo,hpr),e(Fo,Fe),e(Fe,z4),e(z4,y2e),e(y2e,upr),e(z4,ppr),e(z4,xz),e(xz,_pr),e(z4,bpr),e(Fe,vpr),e(Fe,Q4),e(Q4,L2e),e(L2e,Fpr),e(Q4,Tpr),e(Q4,kz),e(kz,Mpr),e(Q4,Epr),e(Fe,Cpr),e(Fe,W4),e(W4,x2e),e(x2e,wpr),e(W4,Apr),e(W4,Sz),e(Sz,ypr),e(W4,Lpr),e(Fe,xpr),e(Fe,H4),e(H4,k2e),e(k2e,kpr),e(H4,Spr),e(H4,Rz),e(Rz,Rpr),e(H4,Bpr),e(Fe,Ppr),e(Fe,U4),e(U4,S2e),e(S2e,$pr),e(U4,Ipr),e(U4,Bz),e(Bz,qpr),e(U4,Npr),e(Fe,jpr),e(Fe,J4),e(J4,R2e),e(R2e,Dpr),e(J4,Gpr),e(J4,Pz),e(Pz,Opr),e(J4,Vpr),e(Fe,Xpr),e(Fe,Y4),e(Y4,B2e),e(B2e,zpr),e(Y4,Qpr),e(Y4,$z),e($z,Wpr),e(Y4,Hpr),e(Fe,Upr),e(Fe,K4),e(K4,P2e),e(P2e,Jpr),e(K4,Ypr),e(K4,Iz),e(Iz,Kpr),e(K4,Zpr),e(Fe,e_r),e(Fe,Z4),e(Z4,$2e),e($2e,o_r),e(Z4,r_r),e(Z4,qz),e(qz,t_r),e(Z4,a_r),e(Fe,n_r),e(Fe,eE),e(eE,I2e),e(I2e,s_r),e(eE,l_r),e(eE,Nz),e(Nz,i_r),e(eE,d_r),e(Fo,c_r),e(Fo,q2e),e(q2e,m_r),e(Fo,f_r),g(g8,Fo,null),b(c,p$e,_),b(c,jc,_),e(jc,oE),e(oE,N2e),g(h8,N2e,null),e(jc,g_r),e(jc,j2e),e(j2e,h_r),b(c,_$e,_),b(c,wr,_),g(u8,wr,null),e(wr,u_r),e(wr,Dc),e(Dc,p_r),e(Dc,jz),e(jz,__r),e(Dc,b_r),e(Dc,Dz),e(Dz,v_r),e(Dc,F_r),e(wr,T_r),e(wr,p8),e(p8,M_r),e(p8,D2e),e(D2e,E_r),e(p8,C_r),e(wr,w_r),e(wr,vt),g(_8,vt,null),e(vt,A_r),e(vt,G2e),e(G2e,y_r),e(vt,L_r),e(vt,Gc),e(Gc,x_r),e(Gc,O2e),e(O2e,k_r),e(Gc,S_r),e(Gc,Gz),e(Gz,R_r),e(Gc,B_r),e(vt,P_r),e(vt,V2e),e(V2e,$_r),e(vt,I_r),g(b8,vt,null),e(wr,q_r),e(wr,To),g(v8,To,null),e(To,N_r),e(To,X2e),e(X2e,j_r),e(To,D_r),e(To,En),e(En,G_r),e(En,z2e),e(z2e,O_r),e(En,V_r),e(En,Q2e),e(Q2e,X_r),e(En,z_r),e(En,W2e),e(W2e,Q_r),e(En,W_r),e(To,H_r),e(To,V),e(V,rE),e(rE,H2e),e(H2e,U_r),e(rE,J_r),e(rE,Oz),e(Oz,Y_r),e(rE,K_r),e(V,Z_r),e(V,tE),e(tE,U2e),e(U2e,ebr),e(tE,obr),e(tE,Vz),e(Vz,rbr),e(tE,tbr),e(V,abr),e(V,aE),e(aE,J2e),e(J2e,nbr),e(aE,sbr),e(aE,Xz),e(Xz,lbr),e(aE,ibr),e(V,dbr),e(V,nE),e(nE,Y2e),e(Y2e,cbr),e(nE,mbr),e(nE,zz),e(zz,fbr),e(nE,gbr),e(V,hbr),e(V,sE),e(sE,K2e),e(K2e,ubr),e(sE,pbr),e(sE,Qz),e(Qz,_br),e(sE,bbr),e(V,vbr),e(V,lE),e(lE,Z2e),e(Z2e,Fbr),e(lE,Tbr),e(lE,Wz),e(Wz,Mbr),e(lE,Ebr),e(V,Cbr),e(V,iE),e(iE,eve),e(eve,wbr),e(iE,Abr),e(iE,Hz),e(Hz,ybr),e(iE,Lbr),e(V,xbr),e(V,dE),e(dE,ove),e(ove,kbr),e(dE,Sbr),e(dE,Uz),e(Uz,Rbr),e(dE,Bbr),e(V,Pbr),e(V,cE),e(cE,rve),e(rve,$br),e(cE,Ibr),e(cE,Jz),e(Jz,qbr),e(cE,Nbr),e(V,jbr),e(V,mE),e(mE,tve),e(tve,Dbr),e(mE,Gbr),e(mE,Yz),e(Yz,Obr),e(mE,Vbr),e(V,Xbr),e(V,fE),e(fE,ave),e(ave,zbr),e(fE,Qbr),e(fE,Kz),e(Kz,Wbr),e(fE,Hbr),e(V,Ubr),e(V,gE),e(gE,nve),e(nve,Jbr),e(gE,Ybr),e(gE,Zz),e(Zz,Kbr),e(gE,Zbr),e(V,e2r),e(V,hE),e(hE,sve),e(sve,o2r),e(hE,r2r),e(hE,eQ),e(eQ,t2r),e(hE,a2r),e(V,n2r),e(V,uE),e(uE,lve),e(lve,s2r),e(uE,l2r),e(uE,oQ),e(oQ,i2r),e(uE,d2r),e(V,c2r),e(V,pE),e(pE,ive),e(ive,m2r),e(pE,f2r),e(pE,rQ),e(rQ,g2r),e(pE,h2r),e(V,u2r),e(V,_E),e(_E,dve),e(dve,p2r),e(_E,_2r),e(_E,tQ),e(tQ,b2r),e(_E,v2r),e(V,F2r),e(V,bE),e(bE,cve),e(cve,T2r),e(bE,M2r),e(bE,aQ),e(aQ,E2r),e(bE,C2r),e(V,w2r),e(V,vE),e(vE,mve),e(mve,A2r),e(vE,y2r),e(vE,nQ),e(nQ,L2r),e(vE,x2r),e(V,k2r),e(V,FE),e(FE,fve),e(fve,S2r),e(FE,R2r),e(FE,sQ),e(sQ,B2r),e(FE,P2r),e(V,$2r),e(V,TE),e(TE,gve),e(gve,I2r),e(TE,q2r),e(TE,lQ),e(lQ,N2r),e(TE,j2r),e(V,D2r),e(V,ME),e(ME,hve),e(hve,G2r),e(ME,O2r),e(ME,iQ),e(iQ,V2r),e(ME,X2r),e(V,z2r),e(V,EE),e(EE,uve),e(uve,Q2r),e(EE,W2r),e(EE,dQ),e(dQ,H2r),e(EE,U2r),e(V,J2r),e(V,CE),e(CE,pve),e(pve,Y2r),e(CE,K2r),e(CE,cQ),e(cQ,Z2r),e(CE,evr),e(V,ovr),e(V,wE),e(wE,_ve),e(_ve,rvr),e(wE,tvr),e(wE,mQ),e(mQ,avr),e(wE,nvr),e(V,svr),e(V,AE),e(AE,bve),e(bve,lvr),e(AE,ivr),e(AE,fQ),e(fQ,dvr),e(AE,cvr),e(V,mvr),e(V,yE),e(yE,vve),e(vve,fvr),e(yE,gvr),e(yE,gQ),e(gQ,hvr),e(yE,uvr),e(To,pvr),e(To,Fve),e(Fve,_vr),e(To,bvr),g(F8,To,null),b(c,b$e,_),b(c,Oc,_),e(Oc,LE),e(LE,Tve),g(T8,Tve,null),e(Oc,vvr),e(Oc,Mve),e(Mve,Fvr),b(c,v$e,_),b(c,Ar,_),g(M8,Ar,null),e(Ar,Tvr),e(Ar,Vc),e(Vc,Mvr),e(Vc,hQ),e(hQ,Evr),e(Vc,Cvr),e(Vc,uQ),e(uQ,wvr),e(Vc,Avr),e(Ar,yvr),e(Ar,E8),e(E8,Lvr),e(E8,Eve),e(Eve,xvr),e(E8,kvr),e(Ar,Svr),e(Ar,Ft),g(C8,Ft,null),e(Ft,Rvr),e(Ft,Cve),e(Cve,Bvr),e(Ft,Pvr),e(Ft,Xc),e(Xc,$vr),e(Xc,wve),e(wve,Ivr),e(Xc,qvr),e(Xc,pQ),e(pQ,Nvr),e(Xc,jvr),e(Ft,Dvr),e(Ft,Ave),e(Ave,Gvr),e(Ft,Ovr),g(w8,Ft,null),e(Ar,Vvr),e(Ar,Mo),g(A8,Mo,null),e(Mo,Xvr),e(Mo,yve),e(yve,zvr),e(Mo,Qvr),e(Mo,Cn),e(Cn,Wvr),e(Cn,Lve),e(Lve,Hvr),e(Cn,Uvr),e(Cn,xve),e(xve,Jvr),e(Cn,Yvr),e(Cn,kve),e(kve,Kvr),e(Cn,Zvr),e(Mo,eFr),e(Mo,se),e(se,xE),e(xE,Sve),e(Sve,oFr),e(xE,rFr),e(xE,_Q),e(_Q,tFr),e(xE,aFr),e(se,nFr),e(se,kE),e(kE,Rve),e(Rve,sFr),e(kE,lFr),e(kE,bQ),e(bQ,iFr),e(kE,dFr),e(se,cFr),e(se,SE),e(SE,Bve),e(Bve,mFr),e(SE,fFr),e(SE,vQ),e(vQ,gFr),e(SE,hFr),e(se,uFr),e(se,RE),e(RE,Pve),e(Pve,pFr),e(RE,_Fr),e(RE,FQ),e(FQ,bFr),e(RE,vFr),e(se,FFr),e(se,BE),e(BE,$ve),e($ve,TFr),e(BE,MFr),e(BE,TQ),e(TQ,EFr),e(BE,CFr),e(se,wFr),e(se,PE),e(PE,Ive),e(Ive,AFr),e(PE,yFr),e(PE,MQ),e(MQ,LFr),e(PE,xFr),e(se,kFr),e(se,$E),e($E,qve),e(qve,SFr),e($E,RFr),e($E,EQ),e(EQ,BFr),e($E,PFr),e(se,$Fr),e(se,IE),e(IE,Nve),e(Nve,IFr),e(IE,qFr),e(IE,CQ),e(CQ,NFr),e(IE,jFr),e(se,DFr),e(se,qE),e(qE,jve),e(jve,GFr),e(qE,OFr),e(qE,wQ),e(wQ,VFr),e(qE,XFr),e(se,zFr),e(se,NE),e(NE,Dve),e(Dve,QFr),e(NE,WFr),e(NE,AQ),e(AQ,HFr),e(NE,UFr),e(se,JFr),e(se,jE),e(jE,Gve),e(Gve,YFr),e(jE,KFr),e(jE,yQ),e(yQ,ZFr),e(jE,e1r),e(se,o1r),e(se,DE),e(DE,Ove),e(Ove,r1r),e(DE,t1r),e(DE,LQ),e(LQ,a1r),e(DE,n1r),e(se,s1r),e(se,GE),e(GE,Vve),e(Vve,l1r),e(GE,i1r),e(GE,xQ),e(xQ,d1r),e(GE,c1r),e(se,m1r),e(se,OE),e(OE,Xve),e(Xve,f1r),e(OE,g1r),e(OE,kQ),e(kQ,h1r),e(OE,u1r),e(se,p1r),e(se,VE),e(VE,zve),e(zve,_1r),e(VE,b1r),e(VE,SQ),e(SQ,v1r),e(VE,F1r),e(se,T1r),e(se,XE),e(XE,Qve),e(Qve,M1r),e(XE,E1r),e(XE,RQ),e(RQ,C1r),e(XE,w1r),e(se,A1r),e(se,zE),e(zE,Wve),e(Wve,y1r),e(zE,L1r),e(zE,BQ),e(BQ,x1r),e(zE,k1r),e(Mo,S1r),e(Mo,Hve),e(Hve,R1r),e(Mo,B1r),g(y8,Mo,null),b(c,F$e,_),b(c,zc,_),e(zc,QE),e(QE,Uve),g(L8,Uve,null),e(zc,P1r),e(zc,Jve),e(Jve,$1r),b(c,T$e,_),b(c,yr,_),g(x8,yr,null),e(yr,I1r),e(yr,Qc),e(Qc,q1r),e(Qc,PQ),e(PQ,N1r),e(Qc,j1r),e(Qc,$Q),e($Q,D1r),e(Qc,G1r),e(yr,O1r),e(yr,k8),e(k8,V1r),e(k8,Yve),e(Yve,X1r),e(k8,z1r),e(yr,Q1r),e(yr,Tt),g(S8,Tt,null),e(Tt,W1r),e(Tt,Kve),e(Kve,H1r),e(Tt,U1r),e(Tt,Wc),e(Wc,J1r),e(Wc,Zve),e(Zve,Y1r),e(Wc,K1r),e(Wc,IQ),e(IQ,Z1r),e(Wc,eTr),e(Tt,oTr),e(Tt,eFe),e(eFe,rTr),e(Tt,tTr),g(R8,Tt,null),e(yr,aTr),e(yr,Eo),g(B8,Eo,null),e(Eo,nTr),e(Eo,oFe),e(oFe,sTr),e(Eo,lTr),e(Eo,wn),e(wn,iTr),e(wn,rFe),e(rFe,dTr),e(wn,cTr),e(wn,tFe),e(tFe,mTr),e(wn,fTr),e(wn,aFe),e(aFe,gTr),e(wn,hTr),e(Eo,uTr),e(Eo,nFe),e(nFe,WE),e(WE,sFe),e(sFe,pTr),e(WE,_Tr),e(WE,qQ),e(qQ,bTr),e(WE,vTr),e(Eo,FTr),e(Eo,lFe),e(lFe,TTr),e(Eo,MTr),g(P8,Eo,null),b(c,M$e,_),b(c,Hc,_),e(Hc,HE),e(HE,iFe),g($8,iFe,null),e(Hc,ETr),e(Hc,dFe),e(dFe,CTr),b(c,E$e,_),b(c,Lr,_),g(I8,Lr,null),e(Lr,wTr),e(Lr,Uc),e(Uc,ATr),e(Uc,NQ),e(NQ,yTr),e(Uc,LTr),e(Uc,jQ),e(jQ,xTr),e(Uc,kTr),e(Lr,STr),e(Lr,q8),e(q8,RTr),e(q8,cFe),e(cFe,BTr),e(q8,PTr),e(Lr,$Tr),e(Lr,Mt),g(N8,Mt,null),e(Mt,ITr),e(Mt,mFe),e(mFe,qTr),e(Mt,NTr),e(Mt,Jc),e(Jc,jTr),e(Jc,fFe),e(fFe,DTr),e(Jc,GTr),e(Jc,DQ),e(DQ,OTr),e(Jc,VTr),e(Mt,XTr),e(Mt,gFe),e(gFe,zTr),e(Mt,QTr),g(j8,Mt,null),e(Lr,WTr),e(Lr,Co),g(D8,Co,null),e(Co,HTr),e(Co,hFe),e(hFe,UTr),e(Co,JTr),e(Co,An),e(An,YTr),e(An,uFe),e(uFe,KTr),e(An,ZTr),e(An,pFe),e(pFe,eMr),e(An,oMr),e(An,_Fe),e(_Fe,rMr),e(An,tMr),e(Co,aMr),e(Co,Z),e(Z,UE),e(UE,bFe),e(bFe,nMr),e(UE,sMr),e(UE,GQ),e(GQ,lMr),e(UE,iMr),e(Z,dMr),e(Z,JE),e(JE,vFe),e(vFe,cMr),e(JE,mMr),e(JE,OQ),e(OQ,fMr),e(JE,gMr),e(Z,hMr),e(Z,YE),e(YE,FFe),e(FFe,uMr),e(YE,pMr),e(YE,VQ),e(VQ,_Mr),e(YE,bMr),e(Z,vMr),e(Z,KE),e(KE,TFe),e(TFe,FMr),e(KE,TMr),e(KE,XQ),e(XQ,MMr),e(KE,EMr),e(Z,CMr),e(Z,ZE),e(ZE,MFe),e(MFe,wMr),e(ZE,AMr),e(ZE,zQ),e(zQ,yMr),e(ZE,LMr),e(Z,xMr),e(Z,e5),e(e5,EFe),e(EFe,kMr),e(e5,SMr),e(e5,QQ),e(QQ,RMr),e(e5,BMr),e(Z,PMr),e(Z,o5),e(o5,CFe),e(CFe,$Mr),e(o5,IMr),e(o5,WQ),e(WQ,qMr),e(o5,NMr),e(Z,jMr),e(Z,r5),e(r5,wFe),e(wFe,DMr),e(r5,GMr),e(r5,HQ),e(HQ,OMr),e(r5,VMr),e(Z,XMr),e(Z,t5),e(t5,AFe),e(AFe,zMr),e(t5,QMr),e(t5,UQ),e(UQ,WMr),e(t5,HMr),e(Z,UMr),e(Z,a5),e(a5,yFe),e(yFe,JMr),e(a5,YMr),e(a5,JQ),e(JQ,KMr),e(a5,ZMr),e(Z,e4r),e(Z,n5),e(n5,LFe),e(LFe,o4r),e(n5,r4r),e(n5,YQ),e(YQ,t4r),e(n5,a4r),e(Z,n4r),e(Z,s5),e(s5,xFe),e(xFe,s4r),e(s5,l4r),e(s5,KQ),e(KQ,i4r),e(s5,d4r),e(Z,c4r),e(Z,l5),e(l5,kFe),e(kFe,m4r),e(l5,f4r),e(l5,ZQ),e(ZQ,g4r),e(l5,h4r),e(Z,u4r),e(Z,i5),e(i5,SFe),e(SFe,p4r),e(i5,_4r),e(i5,eW),e(eW,b4r),e(i5,v4r),e(Z,F4r),e(Z,d5),e(d5,RFe),e(RFe,T4r),e(d5,M4r),e(d5,oW),e(oW,E4r),e(d5,C4r),e(Z,w4r),e(Z,c5),e(c5,BFe),e(BFe,A4r),e(c5,y4r),e(c5,rW),e(rW,L4r),e(c5,x4r),e(Z,k4r),e(Z,m5),e(m5,PFe),e(PFe,S4r),e(m5,R4r),e(m5,tW),e(tW,B4r),e(m5,P4r),e(Z,$4r),e(Z,f5),e(f5,$Fe),e($Fe,I4r),e(f5,q4r),e(f5,aW),e(aW,N4r),e(f5,j4r),e(Z,D4r),e(Z,g5),e(g5,IFe),e(IFe,G4r),e(g5,O4r),e(g5,nW),e(nW,V4r),e(g5,X4r),e(Z,z4r),e(Z,h5),e(h5,qFe),e(qFe,Q4r),e(h5,W4r),e(h5,sW),e(sW,H4r),e(h5,U4r),e(Co,J4r),e(Co,NFe),e(NFe,Y4r),e(Co,K4r),g(G8,Co,null),b(c,C$e,_),b(c,Yc,_),e(Yc,u5),e(u5,jFe),g(O8,jFe,null),e(Yc,Z4r),e(Yc,DFe),e(DFe,eEr),b(c,w$e,_),b(c,xr,_),g(V8,xr,null),e(xr,oEr),e(xr,Kc),e(Kc,rEr),e(Kc,lW),e(lW,tEr),e(Kc,aEr),e(Kc,iW),e(iW,nEr),e(Kc,sEr),e(xr,lEr),e(xr,X8),e(X8,iEr),e(X8,GFe),e(GFe,dEr),e(X8,cEr),e(xr,mEr),e(xr,Et),g(z8,Et,null),e(Et,fEr),e(Et,OFe),e(OFe,gEr),e(Et,hEr),e(Et,Zc),e(Zc,uEr),e(Zc,VFe),e(VFe,pEr),e(Zc,_Er),e(Zc,dW),e(dW,bEr),e(Zc,vEr),e(Et,FEr),e(Et,XFe),e(XFe,TEr),e(Et,MEr),g(Q8,Et,null),e(xr,EEr),e(xr,wo),g(W8,wo,null),e(wo,CEr),e(wo,zFe),e(zFe,wEr),e(wo,AEr),e(wo,yn),e(yn,yEr),e(yn,QFe),e(QFe,LEr),e(yn,xEr),e(yn,WFe),e(WFe,kEr),e(yn,SEr),e(yn,HFe),e(HFe,REr),e(yn,BEr),e(wo,PEr),e(wo,ee),e(ee,p5),e(p5,UFe),e(UFe,$Er),e(p5,IEr),e(p5,cW),e(cW,qEr),e(p5,NEr),e(ee,jEr),e(ee,_5),e(_5,JFe),e(JFe,DEr),e(_5,GEr),e(_5,mW),e(mW,OEr),e(_5,VEr),e(ee,XEr),e(ee,b5),e(b5,YFe),e(YFe,zEr),e(b5,QEr),e(b5,fW),e(fW,WEr),e(b5,HEr),e(ee,UEr),e(ee,v5),e(v5,KFe),e(KFe,JEr),e(v5,YEr),e(v5,gW),e(gW,KEr),e(v5,ZEr),e(ee,e5r),e(ee,F5),e(F5,ZFe),e(ZFe,o5r),e(F5,r5r),e(F5,hW),e(hW,t5r),e(F5,a5r),e(ee,n5r),e(ee,T5),e(T5,e1e),e(e1e,s5r),e(T5,l5r),e(T5,uW),e(uW,i5r),e(T5,d5r),e(ee,c5r),e(ee,M5),e(M5,o1e),e(o1e,m5r),e(M5,f5r),e(M5,pW),e(pW,g5r),e(M5,h5r),e(ee,u5r),e(ee,E5),e(E5,r1e),e(r1e,p5r),e(E5,_5r),e(E5,_W),e(_W,b5r),e(E5,v5r),e(ee,F5r),e(ee,C5),e(C5,t1e),e(t1e,T5r),e(C5,M5r),e(C5,bW),e(bW,E5r),e(C5,C5r),e(ee,w5r),e(ee,w5),e(w5,a1e),e(a1e,A5r),e(w5,y5r),e(w5,vW),e(vW,L5r),e(w5,x5r),e(ee,k5r),e(ee,A5),e(A5,n1e),e(n1e,S5r),e(A5,R5r),e(A5,FW),e(FW,B5r),e(A5,P5r),e(ee,$5r),e(ee,y5),e(y5,s1e),e(s1e,I5r),e(y5,q5r),e(y5,TW),e(TW,N5r),e(y5,j5r),e(ee,D5r),e(ee,L5),e(L5,l1e),e(l1e,G5r),e(L5,O5r),e(L5,MW),e(MW,V5r),e(L5,X5r),e(ee,z5r),e(ee,x5),e(x5,i1e),e(i1e,Q5r),e(x5,W5r),e(x5,EW),e(EW,H5r),e(x5,U5r),e(ee,J5r),e(ee,k5),e(k5,d1e),e(d1e,Y5r),e(k5,K5r),e(k5,CW),e(CW,Z5r),e(k5,e3r),e(ee,o3r),e(ee,S5),e(S5,c1e),e(c1e,r3r),e(S5,t3r),e(S5,wW),e(wW,a3r),e(S5,n3r),e(ee,s3r),e(ee,R5),e(R5,m1e),e(m1e,l3r),e(R5,i3r),e(R5,AW),e(AW,d3r),e(R5,c3r),e(ee,m3r),e(ee,B5),e(B5,f1e),e(f1e,f3r),e(B5,g3r),e(B5,yW),e(yW,h3r),e(B5,u3r),e(ee,p3r),e(ee,P5),e(P5,g1e),e(g1e,_3r),e(P5,b3r),e(P5,LW),e(LW,v3r),e(P5,F3r),e(ee,T3r),e(ee,$5),e($5,h1e),e(h1e,M3r),e($5,E3r),e($5,xW),e(xW,C3r),e($5,w3r),e(wo,A3r),e(wo,u1e),e(u1e,y3r),e(wo,L3r),g(H8,wo,null),b(c,A$e,_),b(c,em,_),e(em,I5),e(I5,p1e),g(U8,p1e,null),e(em,x3r),e(em,_1e),e(_1e,k3r),b(c,y$e,_),b(c,kr,_),g(J8,kr,null),e(kr,S3r),e(kr,om),e(om,R3r),e(om,kW),e(kW,B3r),e(om,P3r),e(om,SW),e(SW,$3r),e(om,I3r),e(kr,q3r),e(kr,Y8),e(Y8,N3r),e(Y8,b1e),e(b1e,j3r),e(Y8,D3r),e(kr,G3r),e(kr,Ct),g(K8,Ct,null),e(Ct,O3r),e(Ct,v1e),e(v1e,V3r),e(Ct,X3r),e(Ct,rm),e(rm,z3r),e(rm,F1e),e(F1e,Q3r),e(rm,W3r),e(rm,RW),e(RW,H3r),e(rm,U3r),e(Ct,J3r),e(Ct,T1e),e(T1e,Y3r),e(Ct,K3r),g(Z8,Ct,null),e(kr,Z3r),e(kr,Ao),g(eL,Ao,null),e(Ao,eCr),e(Ao,M1e),e(M1e,oCr),e(Ao,rCr),e(Ao,Ln),e(Ln,tCr),e(Ln,E1e),e(E1e,aCr),e(Ln,nCr),e(Ln,C1e),e(C1e,sCr),e(Ln,lCr),e(Ln,w1e),e(w1e,iCr),e(Ln,dCr),e(Ao,cCr),e(Ao,A1e),e(A1e,q5),e(q5,y1e),e(y1e,mCr),e(q5,fCr),e(q5,BW),e(BW,gCr),e(q5,hCr),e(Ao,uCr),e(Ao,L1e),e(L1e,pCr),e(Ao,_Cr),g(oL,Ao,null),b(c,L$e,_),b(c,tm,_),e(tm,N5),e(N5,x1e),g(rL,x1e,null),e(tm,bCr),e(tm,k1e),e(k1e,vCr),b(c,x$e,_),b(c,Sr,_),g(tL,Sr,null),e(Sr,FCr),e(Sr,am),e(am,TCr),e(am,PW),e(PW,MCr),e(am,ECr),e(am,$W),e($W,CCr),e(am,wCr),e(Sr,ACr),e(Sr,aL),e(aL,yCr),e(aL,S1e),e(S1e,LCr),e(aL,xCr),e(Sr,kCr),e(Sr,wt),g(nL,wt,null),e(wt,SCr),e(wt,R1e),e(R1e,RCr),e(wt,BCr),e(wt,nm),e(nm,PCr),e(nm,B1e),e(B1e,$Cr),e(nm,ICr),e(nm,IW),e(IW,qCr),e(nm,NCr),e(wt,jCr),e(wt,P1e),e(P1e,DCr),e(wt,GCr),g(sL,wt,null),e(Sr,OCr),e(Sr,yo),g(lL,yo,null),e(yo,VCr),e(yo,$1e),e($1e,XCr),e(yo,zCr),e(yo,xn),e(xn,QCr),e(xn,I1e),e(I1e,WCr),e(xn,HCr),e(xn,q1e),e(q1e,UCr),e(xn,JCr),e(xn,N1e),e(N1e,YCr),e(xn,KCr),e(yo,ZCr),e(yo,j1e),e(j1e,j5),e(j5,D1e),e(D1e,e6r),e(j5,o6r),e(j5,qW),e(qW,r6r),e(j5,t6r),e(yo,a6r),e(yo,G1e),e(G1e,n6r),e(yo,s6r),g(iL,yo,null),b(c,k$e,_),b(c,sm,_),e(sm,D5),e(D5,O1e),g(dL,O1e,null),e(sm,l6r),e(sm,V1e),e(V1e,i6r),b(c,S$e,_),b(c,Rr,_),g(cL,Rr,null),e(Rr,d6r),e(Rr,lm),e(lm,c6r),e(lm,NW),e(NW,m6r),e(lm,f6r),e(lm,jW),e(jW,g6r),e(lm,h6r),e(Rr,u6r),e(Rr,mL),e(mL,p6r),e(mL,X1e),e(X1e,_6r),e(mL,b6r),e(Rr,v6r),e(Rr,At),g(fL,At,null),e(At,F6r),e(At,z1e),e(z1e,T6r),e(At,M6r),e(At,im),e(im,E6r),e(im,Q1e),e(Q1e,C6r),e(im,w6r),e(im,DW),e(DW,A6r),e(im,y6r),e(At,L6r),e(At,W1e),e(W1e,x6r),e(At,k6r),g(gL,At,null),e(Rr,S6r),e(Rr,Lo),g(hL,Lo,null),e(Lo,R6r),e(Lo,H1e),e(H1e,B6r),e(Lo,P6r),e(Lo,kn),e(kn,$6r),e(kn,U1e),e(U1e,I6r),e(kn,q6r),e(kn,J1e),e(J1e,N6r),e(kn,j6r),e(kn,Y1e),e(Y1e,D6r),e(kn,G6r),e(Lo,O6r),e(Lo,z),e(z,G5),e(G5,K1e),e(K1e,V6r),e(G5,X6r),e(G5,GW),e(GW,z6r),e(G5,Q6r),e(z,W6r),e(z,O5),e(O5,Z1e),e(Z1e,H6r),e(O5,U6r),e(O5,OW),e(OW,J6r),e(O5,Y6r),e(z,K6r),e(z,V5),e(V5,eTe),e(eTe,Z6r),e(V5,ewr),e(V5,VW),e(VW,owr),e(V5,rwr),e(z,twr),e(z,X5),e(X5,oTe),e(oTe,awr),e(X5,nwr),e(X5,XW),e(XW,swr),e(X5,lwr),e(z,iwr),e(z,z5),e(z5,rTe),e(rTe,dwr),e(z5,cwr),e(z5,zW),e(zW,mwr),e(z5,fwr),e(z,gwr),e(z,Q5),e(Q5,tTe),e(tTe,hwr),e(Q5,uwr),e(Q5,QW),e(QW,pwr),e(Q5,_wr),e(z,bwr),e(z,W5),e(W5,aTe),e(aTe,vwr),e(W5,Fwr),e(W5,WW),e(WW,Twr),e(W5,Mwr),e(z,Ewr),e(z,H5),e(H5,nTe),e(nTe,Cwr),e(H5,wwr),e(H5,HW),e(HW,Awr),e(H5,ywr),e(z,Lwr),e(z,U5),e(U5,sTe),e(sTe,xwr),e(U5,kwr),e(U5,UW),e(UW,Swr),e(U5,Rwr),e(z,Bwr),e(z,J5),e(J5,lTe),e(lTe,Pwr),e(J5,$wr),e(J5,JW),e(JW,Iwr),e(J5,qwr),e(z,Nwr),e(z,Y5),e(Y5,iTe),e(iTe,jwr),e(Y5,Dwr),e(Y5,YW),e(YW,Gwr),e(Y5,Owr),e(z,Vwr),e(z,K5),e(K5,dTe),e(dTe,Xwr),e(K5,zwr),e(K5,KW),e(KW,Qwr),e(K5,Wwr),e(z,Hwr),e(z,Z5),e(Z5,cTe),e(cTe,Uwr),e(Z5,Jwr),e(Z5,ZW),e(ZW,Ywr),e(Z5,Kwr),e(z,Zwr),e(z,e3),e(e3,mTe),e(mTe,eAr),e(e3,oAr),e(e3,eH),e(eH,rAr),e(e3,tAr),e(z,aAr),e(z,o3),e(o3,fTe),e(fTe,nAr),e(o3,sAr),e(o3,oH),e(oH,lAr),e(o3,iAr),e(z,dAr),e(z,r3),e(r3,gTe),e(gTe,cAr),e(r3,mAr),e(r3,rH),e(rH,fAr),e(r3,gAr),e(z,hAr),e(z,t3),e(t3,hTe),e(hTe,uAr),e(t3,pAr),e(t3,tH),e(tH,_Ar),e(t3,bAr),e(z,vAr),e(z,a3),e(a3,uTe),e(uTe,FAr),e(a3,TAr),e(a3,aH),e(aH,MAr),e(a3,EAr),e(z,CAr),e(z,n3),e(n3,pTe),e(pTe,wAr),e(n3,AAr),e(n3,nH),e(nH,yAr),e(n3,LAr),e(z,xAr),e(z,s3),e(s3,_Te),e(_Te,kAr),e(s3,SAr),e(s3,sH),e(sH,RAr),e(s3,BAr),e(z,PAr),e(z,l3),e(l3,bTe),e(bTe,$Ar),e(l3,IAr),e(l3,lH),e(lH,qAr),e(l3,NAr),e(z,jAr),e(z,i3),e(i3,vTe),e(vTe,DAr),e(i3,GAr),e(i3,iH),e(iH,OAr),e(i3,VAr),e(z,XAr),e(z,d3),e(d3,FTe),e(FTe,zAr),e(d3,QAr),e(d3,dH),e(dH,WAr),e(d3,HAr),e(z,UAr),e(z,c3),e(c3,TTe),e(TTe,JAr),e(c3,YAr),e(c3,cH),e(cH,KAr),e(c3,ZAr),e(z,e0r),e(z,m3),e(m3,MTe),e(MTe,o0r),e(m3,r0r),e(m3,mH),e(mH,t0r),e(m3,a0r),e(Lo,n0r),e(Lo,ETe),e(ETe,s0r),e(Lo,l0r),g(uL,Lo,null),b(c,R$e,_),b(c,dm,_),e(dm,f3),e(f3,CTe),g(pL,CTe,null),e(dm,i0r),e(dm,wTe),e(wTe,d0r),b(c,B$e,_),b(c,Br,_),g(_L,Br,null),e(Br,c0r),e(Br,cm),e(cm,m0r),e(cm,fH),e(fH,f0r),e(cm,g0r),e(cm,gH),e(gH,h0r),e(cm,u0r),e(Br,p0r),e(Br,bL),e(bL,_0r),e(bL,ATe),e(ATe,b0r),e(bL,v0r),e(Br,F0r),e(Br,yt),g(vL,yt,null),e(yt,T0r),e(yt,yTe),e(yTe,M0r),e(yt,E0r),e(yt,mm),e(mm,C0r),e(mm,LTe),e(LTe,w0r),e(mm,A0r),e(mm,hH),e(hH,y0r),e(mm,L0r),e(yt,x0r),e(yt,xTe),e(xTe,k0r),e(yt,S0r),g(FL,yt,null),e(Br,R0r),e(Br,xo),g(TL,xo,null),e(xo,B0r),e(xo,kTe),e(kTe,P0r),e(xo,$0r),e(xo,Sn),e(Sn,I0r),e(Sn,STe),e(STe,q0r),e(Sn,N0r),e(Sn,RTe),e(RTe,j0r),e(Sn,D0r),e(Sn,BTe),e(BTe,G0r),e(Sn,O0r),e(xo,V0r),e(xo,ca),e(ca,g3),e(g3,PTe),e(PTe,X0r),e(g3,z0r),e(g3,uH),e(uH,Q0r),e(g3,W0r),e(ca,H0r),e(ca,h3),e(h3,$Te),e($Te,U0r),e(h3,J0r),e(h3,pH),e(pH,Y0r),e(h3,K0r),e(ca,Z0r),e(ca,u3),e(u3,ITe),e(ITe,eyr),e(u3,oyr),e(u3,_H),e(_H,ryr),e(u3,tyr),e(ca,ayr),e(ca,p3),e(p3,qTe),e(qTe,nyr),e(p3,syr),e(p3,bH),e(bH,lyr),e(p3,iyr),e(ca,dyr),e(ca,_3),e(_3,NTe),e(NTe,cyr),e(_3,myr),e(_3,vH),e(vH,fyr),e(_3,gyr),e(xo,hyr),e(xo,jTe),e(jTe,uyr),e(xo,pyr),g(ML,xo,null),b(c,P$e,_),b(c,fm,_),e(fm,b3),e(b3,DTe),g(EL,DTe,null),e(fm,_yr),e(fm,GTe),e(GTe,byr),b(c,$$e,_),b(c,Pr,_),g(CL,Pr,null),e(Pr,vyr),e(Pr,gm),e(gm,Fyr),e(gm,FH),e(FH,Tyr),e(gm,Myr),e(gm,TH),e(TH,Eyr),e(gm,Cyr),e(Pr,wyr),e(Pr,wL),e(wL,Ayr),e(wL,OTe),e(OTe,yyr),e(wL,Lyr),e(Pr,xyr),e(Pr,Lt),g(AL,Lt,null),e(Lt,kyr),e(Lt,VTe),e(VTe,Syr),e(Lt,Ryr),e(Lt,hm),e(hm,Byr),e(hm,XTe),e(XTe,Pyr),e(hm,$yr),e(hm,MH),e(MH,Iyr),e(hm,qyr),e(Lt,Nyr),e(Lt,zTe),e(zTe,jyr),e(Lt,Dyr),g(yL,Lt,null),e(Pr,Gyr),e(Pr,ko),g(LL,ko,null),e(ko,Oyr),e(ko,QTe),e(QTe,Vyr),e(ko,Xyr),e(ko,Rn),e(Rn,zyr),e(Rn,WTe),e(WTe,Qyr),e(Rn,Wyr),e(Rn,HTe),e(HTe,Hyr),e(Rn,Uyr),e(Rn,UTe),e(UTe,Jyr),e(Rn,Yyr),e(ko,Kyr),e(ko,he),e(he,v3),e(v3,JTe),e(JTe,Zyr),e(v3,e8r),e(v3,EH),e(EH,o8r),e(v3,r8r),e(he,t8r),e(he,F3),e(F3,YTe),e(YTe,a8r),e(F3,n8r),e(F3,CH),e(CH,s8r),e(F3,l8r),e(he,i8r),e(he,T3),e(T3,KTe),e(KTe,d8r),e(T3,c8r),e(T3,wH),e(wH,m8r),e(T3,f8r),e(he,g8r),e(he,M3),e(M3,ZTe),e(ZTe,h8r),e(M3,u8r),e(M3,AH),e(AH,p8r),e(M3,_8r),e(he,b8r),e(he,E3),e(E3,eMe),e(eMe,v8r),e(E3,F8r),e(E3,yH),e(yH,T8r),e(E3,M8r),e(he,E8r),e(he,C3),e(C3,oMe),e(oMe,C8r),e(C3,w8r),e(C3,LH),e(LH,A8r),e(C3,y8r),e(he,L8r),e(he,w3),e(w3,rMe),e(rMe,x8r),e(w3,k8r),e(w3,xH),e(xH,S8r),e(w3,R8r),e(he,B8r),e(he,A3),e(A3,tMe),e(tMe,P8r),e(A3,$8r),e(A3,kH),e(kH,I8r),e(A3,q8r),e(he,N8r),e(he,y3),e(y3,aMe),e(aMe,j8r),e(y3,D8r),e(y3,SH),e(SH,G8r),e(y3,O8r),e(he,V8r),e(he,L3),e(L3,nMe),e(nMe,X8r),e(L3,z8r),e(L3,RH),e(RH,Q8r),e(L3,W8r),e(he,H8r),e(he,x3),e(x3,sMe),e(sMe,U8r),e(x3,J8r),e(x3,BH),e(BH,Y8r),e(x3,K8r),e(he,Z8r),e(he,k3),e(k3,lMe),e(lMe,eLr),e(k3,oLr),e(k3,PH),e(PH,rLr),e(k3,tLr),e(ko,aLr),e(ko,iMe),e(iMe,nLr),e(ko,sLr),g(xL,ko,null),b(c,I$e,_),b(c,um,_),e(um,S3),e(S3,dMe),g(kL,dMe,null),e(um,lLr),e(um,cMe),e(cMe,iLr),b(c,q$e,_),b(c,$r,_),g(SL,$r,null),e($r,dLr),e($r,pm),e(pm,cLr),e(pm,$H),e($H,mLr),e(pm,fLr),e(pm,IH),e(IH,gLr),e(pm,hLr),e($r,uLr),e($r,RL),e(RL,pLr),e(RL,mMe),e(mMe,_Lr),e(RL,bLr),e($r,vLr),e($r,xt),g(BL,xt,null),e(xt,FLr),e(xt,fMe),e(fMe,TLr),e(xt,MLr),e(xt,_m),e(_m,ELr),e(_m,gMe),e(gMe,CLr),e(_m,wLr),e(_m,qH),e(qH,ALr),e(_m,yLr),e(xt,LLr),e(xt,hMe),e(hMe,xLr),e(xt,kLr),g(PL,xt,null),e($r,SLr),e($r,So),g($L,So,null),e(So,RLr),e(So,uMe),e(uMe,BLr),e(So,PLr),e(So,Bn),e(Bn,$Lr),e(Bn,pMe),e(pMe,ILr),e(Bn,qLr),e(Bn,_Me),e(_Me,NLr),e(Bn,jLr),e(Bn,bMe),e(bMe,DLr),e(Bn,GLr),e(So,OLr),e(So,Te),e(Te,R3),e(R3,vMe),e(vMe,VLr),e(R3,XLr),e(R3,NH),e(NH,zLr),e(R3,QLr),e(Te,WLr),e(Te,B3),e(B3,FMe),e(FMe,HLr),e(B3,ULr),e(B3,jH),e(jH,JLr),e(B3,YLr),e(Te,KLr),e(Te,P3),e(P3,TMe),e(TMe,ZLr),e(P3,e7r),e(P3,DH),e(DH,o7r),e(P3,r7r),e(Te,t7r),e(Te,$3),e($3,MMe),e(MMe,a7r),e($3,n7r),e($3,GH),e(GH,s7r),e($3,l7r),e(Te,i7r),e(Te,I3),e(I3,EMe),e(EMe,d7r),e(I3,c7r),e(I3,OH),e(OH,m7r),e(I3,f7r),e(Te,g7r),e(Te,q3),e(q3,CMe),e(CMe,h7r),e(q3,u7r),e(q3,VH),e(VH,p7r),e(q3,_7r),e(Te,b7r),e(Te,N3),e(N3,wMe),e(wMe,v7r),e(N3,F7r),e(N3,XH),e(XH,T7r),e(N3,M7r),e(Te,E7r),e(Te,j3),e(j3,AMe),e(AMe,C7r),e(j3,w7r),e(j3,zH),e(zH,A7r),e(j3,y7r),e(Te,L7r),e(Te,D3),e(D3,yMe),e(yMe,x7r),e(D3,k7r),e(D3,QH),e(QH,S7r),e(D3,R7r),e(Te,B7r),e(Te,G3),e(G3,LMe),e(LMe,P7r),e(G3,$7r),e(G3,WH),e(WH,I7r),e(G3,q7r),e(So,N7r),e(So,xMe),e(xMe,j7r),e(So,D7r),g(IL,So,null),b(c,N$e,_),b(c,bm,_),e(bm,O3),e(O3,kMe),g(qL,kMe,null),e(bm,G7r),e(bm,SMe),e(SMe,O7r),b(c,j$e,_),b(c,Ir,_),g(NL,Ir,null),e(Ir,V7r),e(Ir,vm),e(vm,X7r),e(vm,HH),e(HH,z7r),e(vm,Q7r),e(vm,UH),e(UH,W7r),e(vm,H7r),e(Ir,U7r),e(Ir,jL),e(jL,J7r),e(jL,RMe),e(RMe,Y7r),e(jL,K7r),e(Ir,Z7r),e(Ir,kt),g(DL,kt,null),e(kt,e9r),e(kt,BMe),e(BMe,o9r),e(kt,r9r),e(kt,Fm),e(Fm,t9r),e(Fm,PMe),e(PMe,a9r),e(Fm,n9r),e(Fm,JH),e(JH,s9r),e(Fm,l9r),e(kt,i9r),e(kt,$Me),e($Me,d9r),e(kt,c9r),g(GL,kt,null),e(Ir,m9r),e(Ir,Ro),g(OL,Ro,null),e(Ro,f9r),e(Ro,IMe),e(IMe,g9r),e(Ro,h9r),e(Ro,Pn),e(Pn,u9r),e(Pn,qMe),e(qMe,p9r),e(Pn,_9r),e(Pn,NMe),e(NMe,b9r),e(Pn,v9r),e(Pn,jMe),e(jMe,F9r),e(Pn,T9r),e(Ro,M9r),e(Ro,we),e(we,V3),e(V3,DMe),e(DMe,E9r),e(V3,C9r),e(V3,YH),e(YH,w9r),e(V3,A9r),e(we,y9r),e(we,X3),e(X3,GMe),e(GMe,L9r),e(X3,x9r),e(X3,KH),e(KH,k9r),e(X3,S9r),e(we,R9r),e(we,z3),e(z3,OMe),e(OMe,B9r),e(z3,P9r),e(z3,ZH),e(ZH,$9r),e(z3,I9r),e(we,q9r),e(we,Q3),e(Q3,VMe),e(VMe,N9r),e(Q3,j9r),e(Q3,eU),e(eU,D9r),e(Q3,G9r),e(we,O9r),e(we,W3),e(W3,XMe),e(XMe,V9r),e(W3,X9r),e(W3,oU),e(oU,z9r),e(W3,Q9r),e(we,W9r),e(we,H3),e(H3,zMe),e(zMe,H9r),e(H3,U9r),e(H3,rU),e(rU,J9r),e(H3,Y9r),e(we,K9r),e(we,U3),e(U3,QMe),e(QMe,Z9r),e(U3,exr),e(U3,tU),e(tU,oxr),e(U3,rxr),e(we,txr),e(we,J3),e(J3,WMe),e(WMe,axr),e(J3,nxr),e(J3,aU),e(aU,sxr),e(J3,lxr),e(we,ixr),e(we,Y3),e(Y3,HMe),e(HMe,dxr),e(Y3,cxr),e(Y3,nU),e(nU,mxr),e(Y3,fxr),e(Ro,gxr),e(Ro,UMe),e(UMe,hxr),e(Ro,uxr),g(VL,Ro,null),b(c,D$e,_),b(c,Tm,_),e(Tm,K3),e(K3,JMe),g(XL,JMe,null),e(Tm,pxr),e(Tm,YMe),e(YMe,_xr),b(c,G$e,_),b(c,qr,_),g(zL,qr,null),e(qr,bxr),e(qr,Mm),e(Mm,vxr),e(Mm,sU),e(sU,Fxr),e(Mm,Txr),e(Mm,lU),e(lU,Mxr),e(Mm,Exr),e(qr,Cxr),e(qr,QL),e(QL,wxr),e(QL,KMe),e(KMe,Axr),e(QL,yxr),e(qr,Lxr),e(qr,St),g(WL,St,null),e(St,xxr),e(St,ZMe),e(ZMe,kxr),e(St,Sxr),e(St,Em),e(Em,Rxr),e(Em,e4e),e(e4e,Bxr),e(Em,Pxr),e(Em,iU),e(iU,$xr),e(Em,Ixr),e(St,qxr),e(St,o4e),e(o4e,Nxr),e(St,jxr),g(HL,St,null),e(qr,Dxr),e(qr,Bo),g(UL,Bo,null),e(Bo,Gxr),e(Bo,r4e),e(r4e,Oxr),e(Bo,Vxr),e(Bo,$n),e($n,Xxr),e($n,t4e),e(t4e,zxr),e($n,Qxr),e($n,a4e),e(a4e,Wxr),e($n,Hxr),e($n,n4e),e(n4e,Uxr),e($n,Jxr),e(Bo,Yxr),e(Bo,Me),e(Me,Z3),e(Z3,s4e),e(s4e,Kxr),e(Z3,Zxr),e(Z3,dU),e(dU,ekr),e(Z3,okr),e(Me,rkr),e(Me,eC),e(eC,l4e),e(l4e,tkr),e(eC,akr),e(eC,cU),e(cU,nkr),e(eC,skr),e(Me,lkr),e(Me,oC),e(oC,i4e),e(i4e,ikr),e(oC,dkr),e(oC,mU),e(mU,ckr),e(oC,mkr),e(Me,fkr),e(Me,rC),e(rC,d4e),e(d4e,gkr),e(rC,hkr),e(rC,fU),e(fU,ukr),e(rC,pkr),e(Me,_kr),e(Me,tC),e(tC,c4e),e(c4e,bkr),e(tC,vkr),e(tC,gU),e(gU,Fkr),e(tC,Tkr),e(Me,Mkr),e(Me,aC),e(aC,m4e),e(m4e,Ekr),e(aC,Ckr),e(aC,hU),e(hU,wkr),e(aC,Akr),e(Me,ykr),e(Me,nC),e(nC,f4e),e(f4e,Lkr),e(nC,xkr),e(nC,uU),e(uU,kkr),e(nC,Skr),e(Me,Rkr),e(Me,sC),e(sC,g4e),e(g4e,Bkr),e(sC,Pkr),e(sC,pU),e(pU,$kr),e(sC,Ikr),e(Me,qkr),e(Me,lC),e(lC,h4e),e(h4e,Nkr),e(lC,jkr),e(lC,_U),e(_U,Dkr),e(lC,Gkr),e(Me,Okr),e(Me,iC),e(iC,u4e),e(u4e,Vkr),e(iC,Xkr),e(iC,bU),e(bU,zkr),e(iC,Qkr),e(Bo,Wkr),e(Bo,p4e),e(p4e,Hkr),e(Bo,Ukr),g(JL,Bo,null),b(c,O$e,_),b(c,Cm,_),e(Cm,dC),e(dC,_4e),g(YL,_4e,null),e(Cm,Jkr),e(Cm,b4e),e(b4e,Ykr),b(c,V$e,_),b(c,Nr,_),g(KL,Nr,null),e(Nr,Kkr),e(Nr,wm),e(wm,Zkr),e(wm,vU),e(vU,eSr),e(wm,oSr),e(wm,FU),e(FU,rSr),e(wm,tSr),e(Nr,aSr),e(Nr,ZL),e(ZL,nSr),e(ZL,v4e),e(v4e,sSr),e(ZL,lSr),e(Nr,iSr),e(Nr,Rt),g(e7,Rt,null),e(Rt,dSr),e(Rt,F4e),e(F4e,cSr),e(Rt,mSr),e(Rt,Am),e(Am,fSr),e(Am,T4e),e(T4e,gSr),e(Am,hSr),e(Am,TU),e(TU,uSr),e(Am,pSr),e(Rt,_Sr),e(Rt,M4e),e(M4e,bSr),e(Rt,vSr),g(o7,Rt,null),e(Nr,FSr),e(Nr,Po),g(r7,Po,null),e(Po,TSr),e(Po,E4e),e(E4e,MSr),e(Po,ESr),e(Po,In),e(In,CSr),e(In,C4e),e(C4e,wSr),e(In,ASr),e(In,w4e),e(w4e,ySr),e(In,LSr),e(In,A4e),e(A4e,xSr),e(In,kSr),e(Po,SSr),e(Po,Ee),e(Ee,cC),e(cC,y4e),e(y4e,RSr),e(cC,BSr),e(cC,MU),e(MU,PSr),e(cC,$Sr),e(Ee,ISr),e(Ee,mC),e(mC,L4e),e(L4e,qSr),e(mC,NSr),e(mC,EU),e(EU,jSr),e(mC,DSr),e(Ee,GSr),e(Ee,fC),e(fC,x4e),e(x4e,OSr),e(fC,VSr),e(fC,CU),e(CU,XSr),e(fC,zSr),e(Ee,QSr),e(Ee,gC),e(gC,k4e),e(k4e,WSr),e(gC,HSr),e(gC,wU),e(wU,USr),e(gC,JSr),e(Ee,YSr),e(Ee,hC),e(hC,S4e),e(S4e,KSr),e(hC,ZSr),e(hC,AU),e(AU,eRr),e(hC,oRr),e(Ee,rRr),e(Ee,uC),e(uC,R4e),e(R4e,tRr),e(uC,aRr),e(uC,yU),e(yU,nRr),e(uC,sRr),e(Ee,lRr),e(Ee,pC),e(pC,B4e),e(B4e,iRr),e(pC,dRr),e(pC,LU),e(LU,cRr),e(pC,mRr),e(Ee,fRr),e(Ee,_C),e(_C,P4e),e(P4e,gRr),e(_C,hRr),e(_C,xU),e(xU,uRr),e(_C,pRr),e(Ee,_Rr),e(Ee,bC),e(bC,$4e),e($4e,bRr),e(bC,vRr),e(bC,kU),e(kU,FRr),e(bC,TRr),e(Ee,MRr),e(Ee,vC),e(vC,I4e),e(I4e,ERr),e(vC,CRr),e(vC,SU),e(SU,wRr),e(vC,ARr),e(Po,yRr),e(Po,q4e),e(q4e,LRr),e(Po,xRr),g(t7,Po,null),b(c,X$e,_),b(c,ym,_),e(ym,FC),e(FC,N4e),g(a7,N4e,null),e(ym,kRr),e(ym,j4e),e(j4e,SRr),b(c,z$e,_),b(c,jr,_),g(n7,jr,null),e(jr,RRr),e(jr,Lm),e(Lm,BRr),e(Lm,RU),e(RU,PRr),e(Lm,$Rr),e(Lm,BU),e(BU,IRr),e(Lm,qRr),e(jr,NRr),e(jr,s7),e(s7,jRr),e(s7,D4e),e(D4e,DRr),e(s7,GRr),e(jr,ORr),e(jr,Bt),g(l7,Bt,null),e(Bt,VRr),e(Bt,G4e),e(G4e,XRr),e(Bt,zRr),e(Bt,xm),e(xm,QRr),e(xm,O4e),e(O4e,WRr),e(xm,HRr),e(xm,PU),e(PU,URr),e(xm,JRr),e(Bt,YRr),e(Bt,V4e),e(V4e,KRr),e(Bt,ZRr),g(i7,Bt,null),e(jr,eBr),e(jr,$o),g(d7,$o,null),e($o,oBr),e($o,X4e),e(X4e,rBr),e($o,tBr),e($o,qn),e(qn,aBr),e(qn,z4e),e(z4e,nBr),e(qn,sBr),e(qn,Q4e),e(Q4e,lBr),e(qn,iBr),e(qn,W4e),e(W4e,dBr),e(qn,cBr),e($o,mBr),e($o,Pe),e(Pe,TC),e(TC,H4e),e(H4e,fBr),e(TC,gBr),e(TC,$U),e($U,hBr),e(TC,uBr),e(Pe,pBr),e(Pe,MC),e(MC,U4e),e(U4e,_Br),e(MC,bBr),e(MC,IU),e(IU,vBr),e(MC,FBr),e(Pe,TBr),e(Pe,EC),e(EC,J4e),e(J4e,MBr),e(EC,EBr),e(EC,qU),e(qU,CBr),e(EC,wBr),e(Pe,ABr),e(Pe,CC),e(CC,Y4e),e(Y4e,yBr),e(CC,LBr),e(CC,NU),e(NU,xBr),e(CC,kBr),e(Pe,SBr),e(Pe,wC),e(wC,K4e),e(K4e,RBr),e(wC,BBr),e(wC,jU),e(jU,PBr),e(wC,$Br),e(Pe,IBr),e(Pe,AC),e(AC,Z4e),e(Z4e,qBr),e(AC,NBr),e(AC,DU),e(DU,jBr),e(AC,DBr),e(Pe,GBr),e(Pe,yC),e(yC,eEe),e(eEe,OBr),e(yC,VBr),e(yC,GU),e(GU,XBr),e(yC,zBr),e(Pe,QBr),e(Pe,LC),e(LC,oEe),e(oEe,WBr),e(LC,HBr),e(LC,OU),e(OU,UBr),e(LC,JBr),e($o,YBr),e($o,rEe),e(rEe,KBr),e($o,ZBr),g(c7,$o,null),b(c,Q$e,_),b(c,km,_),e(km,xC),e(xC,tEe),g(m7,tEe,null),e(km,ePr),e(km,aEe),e(aEe,oPr),b(c,W$e,_),b(c,Dr,_),g(f7,Dr,null),e(Dr,rPr),e(Dr,Sm),e(Sm,tPr),e(Sm,VU),e(VU,aPr),e(Sm,nPr),e(Sm,XU),e(XU,sPr),e(Sm,lPr),e(Dr,iPr),e(Dr,g7),e(g7,dPr),e(g7,nEe),e(nEe,cPr),e(g7,mPr),e(Dr,fPr),e(Dr,Pt),g(h7,Pt,null),e(Pt,gPr),e(Pt,sEe),e(sEe,hPr),e(Pt,uPr),e(Pt,Rm),e(Rm,pPr),e(Rm,lEe),e(lEe,_Pr),e(Rm,bPr),e(Rm,zU),e(zU,vPr),e(Rm,FPr),e(Pt,TPr),e(Pt,iEe),e(iEe,MPr),e(Pt,EPr),g(u7,Pt,null),e(Dr,CPr),e(Dr,Io),g(p7,Io,null),e(Io,wPr),e(Io,dEe),e(dEe,APr),e(Io,yPr),e(Io,Nn),e(Nn,LPr),e(Nn,cEe),e(cEe,xPr),e(Nn,kPr),e(Nn,mEe),e(mEe,SPr),e(Nn,RPr),e(Nn,fEe),e(fEe,BPr),e(Nn,PPr),e(Io,$Pr),e(Io,$e),e($e,kC),e(kC,gEe),e(gEe,IPr),e(kC,qPr),e(kC,QU),e(QU,NPr),e(kC,jPr),e($e,DPr),e($e,SC),e(SC,hEe),e(hEe,GPr),e(SC,OPr),e(SC,WU),e(WU,VPr),e(SC,XPr),e($e,zPr),e($e,RC),e(RC,uEe),e(uEe,QPr),e(RC,WPr),e(RC,HU),e(HU,HPr),e(RC,UPr),e($e,JPr),e($e,BC),e(BC,pEe),e(pEe,YPr),e(BC,KPr),e(BC,UU),e(UU,ZPr),e(BC,e$r),e($e,o$r),e($e,PC),e(PC,_Ee),e(_Ee,r$r),e(PC,t$r),e(PC,JU),e(JU,a$r),e(PC,n$r),e($e,s$r),e($e,$C),e($C,bEe),e(bEe,l$r),e($C,i$r),e($C,YU),e(YU,d$r),e($C,c$r),e($e,m$r),e($e,IC),e(IC,vEe),e(vEe,f$r),e(IC,g$r),e(IC,KU),e(KU,h$r),e(IC,u$r),e($e,p$r),e($e,qC),e(qC,FEe),e(FEe,_$r),e(qC,b$r),e(qC,ZU),e(ZU,v$r),e(qC,F$r),e(Io,T$r),e(Io,TEe),e(TEe,M$r),e(Io,E$r),g(_7,Io,null),b(c,H$e,_),b(c,Bm,_),e(Bm,NC),e(NC,MEe),g(b7,MEe,null),e(Bm,C$r),e(Bm,EEe),e(EEe,w$r),b(c,U$e,_),b(c,Gr,_),g(v7,Gr,null),e(Gr,A$r),e(Gr,Pm),e(Pm,y$r),e(Pm,eJ),e(eJ,L$r),e(Pm,x$r),e(Pm,oJ),e(oJ,k$r),e(Pm,S$r),e(Gr,R$r),e(Gr,F7),e(F7,B$r),e(F7,CEe),e(CEe,P$r),e(F7,$$r),e(Gr,I$r),e(Gr,$t),g(T7,$t,null),e($t,q$r),e($t,wEe),e(wEe,N$r),e($t,j$r),e($t,$m),e($m,D$r),e($m,AEe),e(AEe,G$r),e($m,O$r),e($m,rJ),e(rJ,V$r),e($m,X$r),e($t,z$r),e($t,yEe),e(yEe,Q$r),e($t,W$r),g(M7,$t,null),e(Gr,H$r),e(Gr,qo),g(E7,qo,null),e(qo,U$r),e(qo,LEe),e(LEe,J$r),e(qo,Y$r),e(qo,jn),e(jn,K$r),e(jn,xEe),e(xEe,Z$r),e(jn,eIr),e(jn,kEe),e(kEe,oIr),e(jn,rIr),e(jn,SEe),e(SEe,tIr),e(jn,aIr),e(qo,nIr),e(qo,REe),e(REe,jC),e(jC,BEe),e(BEe,sIr),e(jC,lIr),e(jC,tJ),e(tJ,iIr),e(jC,dIr),e(qo,cIr),e(qo,PEe),e(PEe,mIr),e(qo,fIr),g(C7,qo,null),b(c,J$e,_),b(c,Im,_),e(Im,DC),e(DC,$Ee),g(w7,$Ee,null),e(Im,gIr),e(Im,IEe),e(IEe,hIr),b(c,Y$e,_),b(c,Or,_),g(A7,Or,null),e(Or,uIr),e(Or,qm),e(qm,pIr),e(qm,aJ),e(aJ,_Ir),e(qm,bIr),e(qm,nJ),e(nJ,vIr),e(qm,FIr),e(Or,TIr),e(Or,y7),e(y7,MIr),e(y7,qEe),e(qEe,EIr),e(y7,CIr),e(Or,wIr),e(Or,It),g(L7,It,null),e(It,AIr),e(It,NEe),e(NEe,yIr),e(It,LIr),e(It,Nm),e(Nm,xIr),e(Nm,jEe),e(jEe,kIr),e(Nm,SIr),e(Nm,sJ),e(sJ,RIr),e(Nm,BIr),e(It,PIr),e(It,DEe),e(DEe,$Ir),e(It,IIr),g(x7,It,null),e(Or,qIr),e(Or,No),g(k7,No,null),e(No,NIr),e(No,GEe),e(GEe,jIr),e(No,DIr),e(No,Dn),e(Dn,GIr),e(Dn,OEe),e(OEe,OIr),e(Dn,VIr),e(Dn,VEe),e(VEe,XIr),e(Dn,zIr),e(Dn,XEe),e(XEe,QIr),e(Dn,WIr),e(No,HIr),e(No,S7),e(S7,GC),e(GC,zEe),e(zEe,UIr),e(GC,JIr),e(GC,lJ),e(lJ,YIr),e(GC,KIr),e(S7,ZIr),e(S7,OC),e(OC,QEe),e(QEe,eqr),e(OC,oqr),e(OC,iJ),e(iJ,rqr),e(OC,tqr),e(No,aqr),e(No,WEe),e(WEe,nqr),e(No,sqr),g(R7,No,null),b(c,K$e,_),b(c,jm,_),e(jm,VC),e(VC,HEe),g(B7,HEe,null),e(jm,lqr),e(jm,UEe),e(UEe,iqr),b(c,Z$e,_),b(c,Vr,_),g(P7,Vr,null),e(Vr,dqr),e(Vr,Dm),e(Dm,cqr),e(Dm,dJ),e(dJ,mqr),e(Dm,fqr),e(Dm,cJ),e(cJ,gqr),e(Dm,hqr),e(Vr,uqr),e(Vr,$7),e($7,pqr),e($7,JEe),e(JEe,_qr),e($7,bqr),e(Vr,vqr),e(Vr,qt),g(I7,qt,null),e(qt,Fqr),e(qt,YEe),e(YEe,Tqr),e(qt,Mqr),e(qt,Gm),e(Gm,Eqr),e(Gm,KEe),e(KEe,Cqr),e(Gm,wqr),e(Gm,mJ),e(mJ,Aqr),e(Gm,yqr),e(qt,Lqr),e(qt,ZEe),e(ZEe,xqr),e(qt,kqr),g(q7,qt,null),e(Vr,Sqr),e(Vr,jo),g(N7,jo,null),e(jo,Rqr),e(jo,e5e),e(e5e,Bqr),e(jo,Pqr),e(jo,Gn),e(Gn,$qr),e(Gn,o5e),e(o5e,Iqr),e(Gn,qqr),e(Gn,r5e),e(r5e,Nqr),e(Gn,jqr),e(Gn,t5e),e(t5e,Dqr),e(Gn,Gqr),e(jo,Oqr),e(jo,a5e),e(a5e,XC),e(XC,n5e),e(n5e,Vqr),e(XC,Xqr),e(XC,fJ),e(fJ,zqr),e(XC,Qqr),e(jo,Wqr),e(jo,s5e),e(s5e,Hqr),e(jo,Uqr),g(j7,jo,null),eIe=!0},p(c,[_]){const D7={};_&2&&(D7.$$scope={dirty:_,ctx:c}),Um.$set(D7);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:c}),Hh.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:c}),mu.$set(i5e)},i(c){eIe||(h(pe.$$.fragment,c),h(Da.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Um.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(fw.$$.fragment,c),h(uw.$$.fragment,c),h(Hh.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Mw.$$.fragment,c),h(mu.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(u0.$$.fragment,c),h(p0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(fy.$$.fragment,c),h(hy.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(c8.$$.fragment,c),h(m8.$$.fragment,c),h(f8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(u8.$$.fragment,c),h(_8.$$.fragment,c),h(b8.$$.fragment,c),h(v8.$$.fragment,c),h(F8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(f7.$$.fragment,c),h(h7.$$.fragment,c),h(u7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(v7.$$.fragment,c),h(T7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(C7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(R7.$$.fragment,c),h(B7.$$.fragment,c),h(P7.$$.fragment,c),h(I7.$$.fragment,c),h(q7.$$.fragment,c),h(N7.$$.fragment,c),h(j7.$$.fragment,c),eIe=!0)},o(c){u(pe.$$.fragment,c),u(Da.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(Um.$$.fragment,c),u(Y6.$$.fragment,c),u(K6.$$.fragment,c),u(ow.$$.fragment,c),u(rw.$$.fragment,c),u(tw.$$.fragment,c),u(aw.$$.fragment,c),u(nw.$$.fragment,c),u(iw.$$.fragment,c),u(dw.$$.fragment,c),u(cw.$$.fragment,c),u(mw.$$.fragment,c),u(fw.$$.fragment,c),u(uw.$$.fragment,c),u(Hh.$$.fragment,c),u(pw.$$.fragment,c),u(_w.$$.fragment,c),u(bw.$$.fragment,c),u(vw.$$.fragment,c),u(Mw.$$.fragment,c),u(mu.$$.fragment,c),u(Ew.$$.fragment,c),u(Cw.$$.fragment,c),u(ww.$$.fragment,c),u(Aw.$$.fragment,c),u(Lw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Sw.$$.fragment,c),u(Rw.$$.fragment,c),u(Bw.$$.fragment,c),u($w.$$.fragment,c),u(Iw.$$.fragment,c),u(qw.$$.fragment,c),u(Nw.$$.fragment,c),u(jw.$$.fragment,c),u(Dw.$$.fragment,c),u(Ow.$$.fragment,c),u(Vw.$$.fragment,c),u(Xw.$$.fragment,c),u(zw.$$.fragment,c),u(Qw.$$.fragment,c),u(Ww.$$.fragment,c),u(Uw.$$.fragment,c),u(Jw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(eA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(sA.$$.fragment,c),u(lA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(fA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(vA.$$.fragment,c),u(FA.$$.fragment,c),u(TA.$$.fragment,c),u(EA.$$.fragment,c),u(CA.$$.fragment,c),u(wA.$$.fragment,c),u(AA.$$.fragment,c),u(yA.$$.fragment,c),u(LA.$$.fragment,c),u(kA.$$.fragment,c),u(SA.$$.fragment,c),u(RA.$$.fragment,c),u(BA.$$.fragment,c),u(PA.$$.fragment,c),u($A.$$.fragment,c),u(qA.$$.fragment,c),u(NA.$$.fragment,c),u(jA.$$.fragment,c),u(DA.$$.fragment,c),u(GA.$$.fragment,c),u(OA.$$.fragment,c),u(XA.$$.fragment,c),u(zA.$$.fragment,c),u(QA.$$.fragment,c),u(WA.$$.fragment,c),u(HA.$$.fragment,c),u(UA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(e0.$$.fragment,c),u(o0.$$.fragment,c),u(r0.$$.fragment,c),u(a0.$$.fragment,c),u(n0.$$.fragment,c),u(s0.$$.fragment,c),u(l0.$$.fragment,c),u(i0.$$.fragment,c),u(d0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(g0.$$.fragment,c),u(h0.$$.fragment,c),u(u0.$$.fragment,c),u(p0.$$.fragment,c),u(b0.$$.fragment,c),u(v0.$$.fragment,c),u(F0.$$.fragment,c),u(T0.$$.fragment,c),u(M0.$$.fragment,c),u(E0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(y0.$$.fragment,c),u(L0.$$.fragment,c),u(x0.$$.fragment,c),u(k0.$$.fragment,c),u(R0.$$.fragment,c),u(B0.$$.fragment,c),u(P0.$$.fragment,c),u(I0.$$.fragment,c),u(q0.$$.fragment,c),u(N0.$$.fragment,c),u(D0.$$.fragment,c),u(G0.$$.fragment,c),u(O0.$$.fragment,c),u(V0.$$.fragment,c),u(X0.$$.fragment,c),u(z0.$$.fragment,c),u(W0.$$.fragment,c),u(H0.$$.fragment,c),u(U0.$$.fragment,c),u(J0.$$.fragment,c),u(Y0.$$.fragment,c),u(K0.$$.fragment,c),u(ey.$$.fragment,c),u(oy.$$.fragment,c),u(ry.$$.fragment,c),u(ty.$$.fragment,c),u(ay.$$.fragment,c),u(ny.$$.fragment,c),u(ly.$$.fragment,c),u(iy.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(my.$$.fragment,c),u(fy.$$.fragment,c),u(hy.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(_y.$$.fragment,c),u(by.$$.fragment,c),u(vy.$$.fragment,c),u(Ty.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(Cy.$$.fragment,c),u(wy.$$.fragment,c),u(Ay.$$.fragment,c),u(Ly.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Sy.$$.fragment,c),u(Ry.$$.fragment,c),u(By.$$.fragment,c),u($y.$$.fragment,c),u(Iy.$$.fragment,c),u(qy.$$.fragment,c),u(Ny.$$.fragment,c),u(jy.$$.fragment,c),u(Dy.$$.fragment,c),u(Oy.$$.fragment,c),u(Vy.$$.fragment,c),u(Xy.$$.fragment,c),u(zy.$$.fragment,c),u(Qy.$$.fragment,c),u(Wy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Zy.$$.fragment,c),u(e8.$$.fragment,c),u(o8.$$.fragment,c),u(t8.$$.fragment,c),u(a8.$$.fragment,c),u(n8.$$.fragment,c),u(s8.$$.fragment,c),u(l8.$$.fragment,c),u(i8.$$.fragment,c),u(c8.$$.fragment,c),u(m8.$$.fragment,c),u(f8.$$.fragment,c),u(g8.$$.fragment,c),u(h8.$$.fragment,c),u(u8.$$.fragment,c),u(_8.$$.fragment,c),u(b8.$$.fragment,c),u(v8.$$.fragment,c),u(F8.$$.fragment,c),u(T8.$$.fragment,c),u(M8.$$.fragment,c),u(C8.$$.fragment,c),u(w8.$$.fragment,c),u(A8.$$.fragment,c),u(y8.$$.fragment,c),u(L8.$$.fragment,c),u(x8.$$.fragment,c),u(S8.$$.fragment,c),u(R8.$$.fragment,c),u(B8.$$.fragment,c),u(P8.$$.fragment,c),u($8.$$.fragment,c),u(I8.$$.fragment,c),u(N8.$$.fragment,c),u(j8.$$.fragment,c),u(D8.$$.fragment,c),u(G8.$$.fragment,c),u(O8.$$.fragment,c),u(V8.$$.fragment,c),u(z8.$$.fragment,c),u(Q8.$$.fragment,c),u(W8.$$.fragment,c),u(H8.$$.fragment,c),u(U8.$$.fragment,c),u(J8.$$.fragment,c),u(K8.$$.fragment,c),u(Z8.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(rL.$$.fragment,c),u(tL.$$.fragment,c),u(nL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(dL.$$.fragment,c),u(cL.$$.fragment,c),u(fL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(pL.$$.fragment,c),u(_L.$$.fragment,c),u(vL.$$.fragment,c),u(FL.$$.fragment,c),u(TL.$$.fragment,c),u(ML.$$.fragment,c),u(EL.$$.fragment,c),u(CL.$$.fragment,c),u(AL.$$.fragment,c),u(yL.$$.fragment,c),u(LL.$$.fragment,c),u(xL.$$.fragment,c),u(kL.$$.fragment,c),u(SL.$$.fragment,c),u(BL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(qL.$$.fragment,c),u(NL.$$.fragment,c),u(DL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(VL.$$.fragment,c),u(XL.$$.fragment,c),u(zL.$$.fragment,c),u(WL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(YL.$$.fragment,c),u(KL.$$.fragment,c),u(e7.$$.fragment,c),u(o7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(a7.$$.fragment,c),u(n7.$$.fragment,c),u(l7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),u(c7.$$.fragment,c),u(m7.$$.fragment,c),u(f7.$$.fragment,c),u(h7.$$.fragment,c),u(u7.$$.fragment,c),u(p7.$$.fragment,c),u(_7.$$.fragment,c),u(b7.$$.fragment,c),u(v7.$$.fragment,c),u(T7.$$.fragment,c),u(M7.$$.fragment,c),u(E7.$$.fragment,c),u(C7.$$.fragment,c),u(w7.$$.fragment,c),u(A7.$$.fragment,c),u(L7.$$.fragment,c),u(x7.$$.fragment,c),u(k7.$$.fragment,c),u(R7.$$.fragment,c),u(B7.$$.fragment,c),u(P7.$$.fragment,c),u(I7.$$.fragment,c),u(q7.$$.fragment,c),u(N7.$$.fragment,c),u(j7.$$.fragment,c),eIe=!1},d(c){t(oe),c&&t(co),c&&t(fe),p(pe),c&&t(Xm),c&&t(ma),c&&t(Se),c&&t(mo),c&&t(Qm),p(Da,c),c&&t(fo),c&&t(ve),c&&t(zo),c&&t(Ga),c&&t(ZBe),c&&t(Ki),p(U6),c&&t(ePe),c&&t(Qn),c&&t(oPe),p(J6,c),c&&t(rPe),c&&t(J9),c&&t(tPe),p(Um,c),c&&t(aPe),c&&t(Zi),p(Y6),c&&t(nPe),c&&t(Qo),p(K6),p(ow),p(rw),p(tw),c&&t(sPe),c&&t(od),p(aw),c&&t(lPe),c&&t(Wo),p(nw),p(iw),p(dw),p(cw),c&&t(iPe),c&&t(rd),p(mw),c&&t(dPe),c&&t(Ho),p(fw),p(uw),p(Hh),p(pw),p(_w),c&&t(cPe),c&&t(td),p(bw),c&&t(mPe),c&&t(Uo),p(vw),p(Mw),p(mu),p(Ew),p(Cw),c&&t(fPe),c&&t(nd),p(ww),c&&t(gPe),c&&t(Jo),p(Aw),p(Lw),p(xw),p(kw),p(Sw),c&&t(hPe),c&&t(id),p(Rw),c&&t(uPe),c&&t(Yo),p(Bw),p($w),p(Iw),p(qw),p(Nw),c&&t(pPe),c&&t(md),p(jw),c&&t(_Pe),c&&t(Ko),p(Dw),p(Ow),p(Vw),p(Xw),p(zw),c&&t(bPe),c&&t(hd),p(Qw),c&&t(vPe),c&&t(Zo),p(Ww),p(Uw),p(Jw),p(Yw),p(Kw),c&&t(FPe),c&&t(_d),p(Zw),c&&t(TPe),c&&t(er),p(eA),p(rA),p(tA),p(aA),p(nA),c&&t(MPe),c&&t(Fd),p(sA),c&&t(EPe),c&&t(or),p(lA),p(dA),p(cA),p(mA),p(fA),c&&t(CPe),c&&t(Ed),p(gA),c&&t(wPe),c&&t(rr),p(hA),p(pA),p(_A),p(bA),p(vA),c&&t(APe),c&&t(Ad),p(FA),c&&t(yPe),c&&t(tr),p(TA),p(EA),p(CA),p(wA),p(AA),c&&t(LPe),c&&t(xd),p(yA),c&&t(xPe),c&&t(ar),p(LA),p(kA),p(SA),p(RA),p(BA),c&&t(kPe),c&&t(Rd),p(PA),c&&t(SPe),c&&t(nr),p($A),p(qA),p(NA),p(jA),p(DA),c&&t(RPe),c&&t($d),p(GA),c&&t(BPe),c&&t(sr),p(OA),p(XA),p(zA),p(QA),p(WA),c&&t(PPe),c&&t(Nd),p(HA),c&&t($Pe),c&&t(lr),p(UA),p(YA),p(KA),p(ZA),p(e0),c&&t(IPe),c&&t(Gd),p(o0),c&&t(qPe),c&&t(ir),p(r0),p(a0),p(n0),p(s0),p(l0),c&&t(NPe),c&&t(Xd),p(i0),c&&t(jPe),c&&t(dr),p(d0),p(m0),p(f0),p(g0),p(h0),c&&t(DPe),c&&t(Wd),p(u0),c&&t(GPe),c&&t(cr),p(p0),p(b0),p(v0),p(F0),p(T0),c&&t(OPe),c&&t(Jd),p(M0),c&&t(VPe),c&&t(mr),p(E0),p(w0),p(A0),p(y0),p(L0),c&&t(XPe),c&&t(Zd),p(x0),c&&t(zPe),c&&t(fr),p(k0),p(R0),p(B0),p(P0),p(I0),c&&t(QPe),c&&t(rc),p(q0),c&&t(WPe),c&&t(gr),p(N0),p(D0),p(G0),p(O0),p(V0),c&&t(HPe),c&&t(nc),p(X0),c&&t(UPe),c&&t(hr),p(z0),p(W0),p(H0),p(U0),p(J0),c&&t(JPe),c&&t(dc),p(Y0),c&&t(YPe),c&&t(ur),p(K0),p(ey),p(oy),p(ry),p(ty),c&&t(KPe),c&&t(fc),p(ay),c&&t(ZPe),c&&t(pr),p(ny),p(ly),p(iy),p(dy),p(cy),c&&t(e$e),c&&t(uc),p(my),c&&t(o$e),c&&t(_r),p(fy),p(hy),p(uy),p(py),p(_y),c&&t(r$e),c&&t(bc),p(by),c&&t(t$e),c&&t(br),p(vy),p(Ty),p(My),p(Ey),p(Cy),c&&t(a$e),c&&t(Tc),p(wy),c&&t(n$e),c&&t(vr),p(Ay),p(Ly),p(xy),p(ky),p(Sy),c&&t(s$e),c&&t(Cc),p(Ry),c&&t(l$e),c&&t(Fr),p(By),p($y),p(Iy),p(qy),p(Ny),c&&t(i$e),c&&t(yc),p(jy),c&&t(d$e),c&&t(Tr),p(Dy),p(Oy),p(Vy),p(Xy),p(zy),c&&t(c$e),c&&t(kc),p(Qy),c&&t(m$e),c&&t(Mr),p(Wy),p(Uy),p(Jy),p(Yy),p(Zy),c&&t(f$e),c&&t(Bc),p(e8),c&&t(g$e),c&&t(Er),p(o8),p(t8),p(a8),p(n8),p(s8),c&&t(h$e),c&&t(Ic),p(l8),c&&t(u$e),c&&t(Cr),p(i8),p(c8),p(m8),p(f8),p(g8),c&&t(p$e),c&&t(jc),p(h8),c&&t(_$e),c&&t(wr),p(u8),p(_8),p(b8),p(v8),p(F8),c&&t(b$e),c&&t(Oc),p(T8),c&&t(v$e),c&&t(Ar),p(M8),p(C8),p(w8),p(A8),p(y8),c&&t(F$e),c&&t(zc),p(L8),c&&t(T$e),c&&t(yr),p(x8),p(S8),p(R8),p(B8),p(P8),c&&t(M$e),c&&t(Hc),p($8),c&&t(E$e),c&&t(Lr),p(I8),p(N8),p(j8),p(D8),p(G8),c&&t(C$e),c&&t(Yc),p(O8),c&&t(w$e),c&&t(xr),p(V8),p(z8),p(Q8),p(W8),p(H8),c&&t(A$e),c&&t(em),p(U8),c&&t(y$e),c&&t(kr),p(J8),p(K8),p(Z8),p(eL),p(oL),c&&t(L$e),c&&t(tm),p(rL),c&&t(x$e),c&&t(Sr),p(tL),p(nL),p(sL),p(lL),p(iL),c&&t(k$e),c&&t(sm),p(dL),c&&t(S$e),c&&t(Rr),p(cL),p(fL),p(gL),p(hL),p(uL),c&&t(R$e),c&&t(dm),p(pL),c&&t(B$e),c&&t(Br),p(_L),p(vL),p(FL),p(TL),p(ML),c&&t(P$e),c&&t(fm),p(EL),c&&t($$e),c&&t(Pr),p(CL),p(AL),p(yL),p(LL),p(xL),c&&t(I$e),c&&t(um),p(kL),c&&t(q$e),c&&t($r),p(SL),p(BL),p(PL),p($L),p(IL),c&&t(N$e),c&&t(bm),p(qL),c&&t(j$e),c&&t(Ir),p(NL),p(DL),p(GL),p(OL),p(VL),c&&t(D$e),c&&t(Tm),p(XL),c&&t(G$e),c&&t(qr),p(zL),p(WL),p(HL),p(UL),p(JL),c&&t(O$e),c&&t(Cm),p(YL),c&&t(V$e),c&&t(Nr),p(KL),p(e7),p(o7),p(r7),p(t7),c&&t(X$e),c&&t(ym),p(a7),c&&t(z$e),c&&t(jr),p(n7),p(l7),p(i7),p(d7),p(c7),c&&t(Q$e),c&&t(km),p(m7),c&&t(W$e),c&&t(Dr),p(f7),p(h7),p(u7),p(p7),p(_7),c&&t(H$e),c&&t(Bm),p(b7),c&&t(U$e),c&&t(Gr),p(v7),p(T7),p(M7),p(E7),p(C7),c&&t(J$e),c&&t(Im),p(w7),c&&t(Y$e),c&&t(Or),p(A7),p(L7),p(x7),p(k7),p(R7),c&&t(K$e),c&&t(jm),p(B7),c&&t(Z$e),c&&t(Vr),p(P7),p(I7),p(q7),p(N7),p(j7)}}}const R8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function B8t(Vm){return y8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class j8t extends E8t{constructor(oe){super();C8t(this,oe,B8t,S8t,w8t,{})}}export{j8t as default,R8t as metadata};
