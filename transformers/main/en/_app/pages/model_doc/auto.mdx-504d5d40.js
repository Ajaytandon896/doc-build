import{S as L6t,i as x6t,s as $6t,e as a,k as l,w as v,t as o,M as k6t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as S6t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function R6t(A){let g,F,u,f,p,d,h,Mo,li,mm,et,ii,di,X6,fm,qe,Xe,ci,An,z6,yn,Ln,Q6,mi,xn,W6,fi,gm,Ma;return{c(){g=a("p"),F=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mm=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),X6=o(")."),fm=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),z6=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Q6=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),W6=o(` attribute is set to the same class you use when registering the model (here
`),fi=a("code"),gm=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);F=r(Ae,"If your "),u=n(Ae,"CODE",{});var m$=s(u);f=r(m$,"NewModelConfig"),m$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var f$=s(li);mm=r(f$,"model_type"),f$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var g$=s(ii);di=r(g$,'"new-model"'),g$.forEach(t),X6=r(Ae,")."),Ae.forEach(t),fm=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),z6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var h$=s(yn);Ln=r(h$,"PreTrainedModel"),h$.forEach(t),Q6=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var hm=s(mi);xn=r(hm,"config_class"),hm.forEach(t),W6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),fi=n(Eo,"CODE",{});var u$=s(fi);gm=r(u$,"NewModelConfig"),u$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,F),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mm),e(g,et),e(g,ii),e(ii,di),e(g,X6),b(ze,fm,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,z6),e(qe,yn),e(yn,Ln),e(qe,Q6),e(qe,mi),e(mi,xn),e(qe,W6),e(qe,fi),e(fi,gm),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(fm),ze&&t(qe)}}}function B6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I6t(A){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function q6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N6t(A){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function j6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ryt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ayt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function syt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function myt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _yt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function byt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Myt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ayt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $yt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Syt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ryt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Byt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Lt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ELt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ALt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Lt(A){let g,F,u,f,p,d,h,Mo,li,mm,et,ii,di,X6,fm,qe,Xe,ci,An,z6,yn,Ln,Q6,mi,xn,W6,fi,gm,Ma,ze,Ae,m$,gi,f$,g$,Eo,Ea,h$,hm,u$,Oje,kPe,hi,um,HZ,H6,Vje,UZ,Xje,SPe,$n,zje,JZ,Qje,Wje,YZ,Hje,Uje,RPe,U6,BPe,p$,Jje,PPe,pm,IPe,ui,_m,KZ,J6,Yje,ZZ,Kje,qPe,Co,Y6,Zje,K6,eDe,_$,oDe,rDe,tDe,Z6,aDe,eee,nDe,sDe,lDe,Er,ey,iDe,oee,dDe,cDe,pi,mDe,ree,fDe,gDe,tee,hDe,uDe,pDe,y,bm,aee,_De,bDe,b$,FDe,vDe,TDe,Fm,nee,MDe,EDe,F$,CDe,wDe,ADe,vm,see,yDe,LDe,v$,xDe,$De,kDe,Tm,lee,SDe,RDe,T$,BDe,PDe,IDe,Mm,iee,qDe,NDe,M$,jDe,DDe,GDe,Em,dee,ODe,VDe,E$,XDe,zDe,QDe,Cm,cee,WDe,HDe,C$,UDe,JDe,YDe,wm,mee,KDe,ZDe,w$,eGe,oGe,rGe,Am,fee,tGe,aGe,A$,nGe,sGe,lGe,ym,gee,iGe,dGe,y$,cGe,mGe,fGe,Lm,hee,gGe,hGe,L$,uGe,pGe,_Ge,xm,uee,bGe,FGe,x$,vGe,TGe,MGe,$m,pee,EGe,CGe,$$,wGe,AGe,yGe,km,_ee,LGe,xGe,k$,$Ge,kGe,SGe,Sm,bee,RGe,BGe,S$,PGe,IGe,qGe,Rm,Fee,NGe,jGe,R$,DGe,GGe,OGe,Bm,vee,VGe,XGe,B$,zGe,QGe,WGe,Pm,Tee,HGe,UGe,P$,JGe,YGe,KGe,Im,Mee,ZGe,eOe,I$,oOe,rOe,tOe,qm,Eee,aOe,nOe,q$,sOe,lOe,iOe,Nm,Cee,dOe,cOe,N$,mOe,fOe,gOe,jm,wee,hOe,uOe,j$,pOe,_Oe,bOe,Dm,Aee,FOe,vOe,D$,TOe,MOe,EOe,Gm,yee,COe,wOe,G$,AOe,yOe,LOe,Om,Lee,xOe,$Oe,O$,kOe,SOe,ROe,Vm,xee,BOe,POe,V$,IOe,qOe,NOe,Xm,$ee,jOe,DOe,X$,GOe,OOe,VOe,zm,kee,XOe,zOe,z$,QOe,WOe,HOe,Qm,See,UOe,JOe,Q$,YOe,KOe,ZOe,Wm,Ree,eVe,oVe,W$,rVe,tVe,aVe,Hm,Bee,nVe,sVe,H$,lVe,iVe,dVe,Um,Pee,cVe,mVe,U$,fVe,gVe,hVe,Jm,Iee,uVe,pVe,J$,_Ve,bVe,FVe,Ym,qee,vVe,TVe,Y$,MVe,EVe,CVe,Km,Nee,wVe,AVe,K$,yVe,LVe,xVe,Zm,jee,$Ve,kVe,Z$,SVe,RVe,BVe,ef,Dee,PVe,IVe,ek,qVe,NVe,jVe,of,Gee,DVe,GVe,ok,OVe,VVe,XVe,rf,Oee,zVe,QVe,rk,WVe,HVe,UVe,tf,Vee,JVe,YVe,tk,KVe,ZVe,eXe,af,Xee,oXe,rXe,ak,tXe,aXe,nXe,nf,zee,sXe,lXe,nk,iXe,dXe,cXe,sf,Qee,mXe,fXe,sk,gXe,hXe,uXe,lf,Wee,pXe,_Xe,lk,bXe,FXe,vXe,df,Hee,TXe,MXe,ik,EXe,CXe,wXe,cf,Uee,AXe,yXe,dk,LXe,xXe,$Xe,mf,Jee,kXe,SXe,ck,RXe,BXe,PXe,ff,Yee,IXe,qXe,mk,NXe,jXe,DXe,gf,Kee,GXe,OXe,fk,VXe,XXe,zXe,hf,Zee,QXe,WXe,gk,HXe,UXe,JXe,uf,eoe,YXe,KXe,hk,ZXe,eze,oze,pf,ooe,rze,tze,uk,aze,nze,sze,_f,roe,lze,ize,pk,dze,cze,mze,bf,toe,fze,gze,_k,hze,uze,pze,Ff,aoe,_ze,bze,bk,Fze,vze,Tze,vf,noe,Mze,Eze,Fk,Cze,wze,Aze,Tf,soe,yze,Lze,vk,xze,$ze,kze,Mf,loe,Sze,Rze,Tk,Bze,Pze,Ize,Ef,ioe,qze,Nze,Mk,jze,Dze,Gze,Cf,doe,Oze,Vze,Ek,Xze,zze,Qze,wf,coe,Wze,Hze,Ck,Uze,Jze,Yze,Af,moe,Kze,Zze,wk,eQe,oQe,rQe,yf,foe,tQe,aQe,Ak,nQe,sQe,lQe,Lf,goe,iQe,dQe,yk,cQe,mQe,fQe,xf,hoe,gQe,hQe,Lk,uQe,pQe,_Qe,$f,uoe,bQe,FQe,xk,vQe,TQe,MQe,kf,poe,EQe,CQe,$k,wQe,AQe,yQe,Sf,_oe,LQe,xQe,kk,$Qe,kQe,SQe,Rf,boe,RQe,BQe,Sk,PQe,IQe,qQe,Bf,Foe,NQe,jQe,Rk,DQe,GQe,OQe,Pf,voe,VQe,XQe,Bk,zQe,QQe,WQe,If,Toe,HQe,UQe,Pk,JQe,YQe,KQe,qf,Moe,ZQe,eWe,Ik,oWe,rWe,tWe,Nf,Eoe,aWe,nWe,qk,sWe,lWe,iWe,jf,Coe,dWe,cWe,Nk,mWe,fWe,gWe,Df,woe,hWe,uWe,jk,pWe,_We,bWe,Gf,Aoe,FWe,vWe,Dk,TWe,MWe,EWe,Of,yoe,CWe,wWe,Gk,AWe,yWe,LWe,Vf,Loe,xWe,$We,Ok,kWe,SWe,RWe,Xf,xoe,BWe,PWe,Vk,IWe,qWe,NWe,zf,$oe,jWe,DWe,Xk,GWe,OWe,VWe,Qf,koe,XWe,zWe,zk,QWe,WWe,HWe,Wf,Soe,UWe,JWe,Qk,YWe,KWe,ZWe,Hf,Roe,eHe,oHe,Wk,rHe,tHe,aHe,Uf,Boe,nHe,sHe,Hk,lHe,iHe,dHe,Jf,Poe,cHe,mHe,Uk,fHe,gHe,hHe,Yf,Ioe,uHe,pHe,Jk,_He,bHe,FHe,Kf,qoe,vHe,THe,Yk,MHe,EHe,CHe,Zf,Noe,wHe,AHe,Kk,yHe,LHe,xHe,eg,joe,$He,kHe,Zk,SHe,RHe,BHe,og,Doe,PHe,IHe,eS,qHe,NHe,jHe,rg,Goe,DHe,GHe,oS,OHe,VHe,XHe,tg,Ooe,zHe,QHe,rS,WHe,HHe,UHe,ag,Voe,JHe,YHe,tS,KHe,ZHe,eUe,ng,Xoe,oUe,rUe,aS,tUe,aUe,nUe,sg,zoe,sUe,lUe,nS,iUe,dUe,cUe,lg,Qoe,mUe,fUe,sS,gUe,hUe,uUe,ig,Woe,pUe,_Ue,lS,bUe,FUe,vUe,dg,Hoe,TUe,MUe,iS,EUe,CUe,wUe,cg,Uoe,AUe,yUe,dS,LUe,xUe,$Ue,mg,Joe,kUe,SUe,cS,RUe,BUe,PUe,fg,Yoe,IUe,qUe,mS,NUe,jUe,DUe,gg,Koe,GUe,OUe,fS,VUe,XUe,zUe,hg,Zoe,QUe,WUe,gS,HUe,UUe,JUe,ug,YUe,pg,oy,KUe,ere,ZUe,NPe,_i,_g,ore,ry,eJe,rre,oJe,jPe,wo,ty,rJe,ay,tJe,hS,aJe,nJe,sJe,ny,lJe,tre,iJe,dJe,cJe,Cr,sy,mJe,are,fJe,gJe,Ca,hJe,nre,uJe,pJe,sre,_Je,bJe,lre,FJe,vJe,TJe,k,kn,ire,MJe,EJe,uS,CJe,wJe,pS,AJe,yJe,LJe,Sn,dre,xJe,$Je,_S,kJe,SJe,bS,RJe,BJe,PJe,Rn,cre,IJe,qJe,FS,NJe,jJe,vS,DJe,GJe,OJe,bg,mre,VJe,XJe,TS,zJe,QJe,WJe,Bn,fre,HJe,UJe,MS,JJe,YJe,ES,KJe,ZJe,eYe,Fg,gre,oYe,rYe,CS,tYe,aYe,nYe,vg,hre,sYe,lYe,wS,iYe,dYe,cYe,Tg,ure,mYe,fYe,AS,gYe,hYe,uYe,Pn,pre,pYe,_Ye,yS,bYe,FYe,LS,vYe,TYe,MYe,In,_re,EYe,CYe,xS,wYe,AYe,$S,yYe,LYe,xYe,qn,bre,$Ye,kYe,kS,SYe,RYe,SS,BYe,PYe,IYe,Mg,Fre,qYe,NYe,RS,jYe,DYe,GYe,Eg,vre,OYe,VYe,BS,XYe,zYe,QYe,Nn,Tre,WYe,HYe,PS,UYe,JYe,IS,YYe,KYe,ZYe,Cg,Mre,eKe,oKe,qS,rKe,tKe,aKe,jn,Ere,nKe,sKe,NS,lKe,iKe,jS,dKe,cKe,mKe,Dn,Cre,fKe,gKe,DS,hKe,uKe,GS,pKe,_Ke,bKe,Gn,wre,FKe,vKe,OS,TKe,MKe,VS,EKe,CKe,wKe,wg,Are,AKe,yKe,XS,LKe,xKe,$Ke,On,yre,kKe,SKe,zS,RKe,BKe,QS,PKe,IKe,qKe,Vn,Lre,NKe,jKe,WS,DKe,GKe,HS,OKe,VKe,XKe,Xn,xre,zKe,QKe,US,WKe,HKe,JS,UKe,JKe,YKe,zn,$re,KKe,ZKe,YS,eZe,oZe,KS,rZe,tZe,aZe,Qn,kre,nZe,sZe,ZS,lZe,iZe,eR,dZe,cZe,mZe,Wn,Sre,fZe,gZe,oR,hZe,uZe,rR,pZe,_Ze,bZe,Ag,Rre,FZe,vZe,tR,TZe,MZe,EZe,Hn,Bre,CZe,wZe,aR,AZe,yZe,nR,LZe,xZe,$Ze,yg,Pre,kZe,SZe,sR,RZe,BZe,PZe,Un,Ire,IZe,qZe,lR,NZe,jZe,iR,DZe,GZe,OZe,Jn,qre,VZe,XZe,dR,zZe,QZe,cR,WZe,HZe,UZe,Yn,Nre,JZe,YZe,mR,KZe,ZZe,fR,eeo,oeo,reo,Kn,jre,teo,aeo,gR,neo,seo,hR,leo,ieo,deo,Zn,Dre,ceo,meo,uR,feo,geo,pR,heo,ueo,peo,Lg,Gre,_eo,beo,_R,Feo,veo,Teo,es,Ore,Meo,Eeo,bR,Ceo,weo,FR,Aeo,yeo,Leo,os,Vre,xeo,$eo,vR,keo,Seo,TR,Reo,Beo,Peo,rs,Xre,Ieo,qeo,MR,Neo,jeo,ER,Deo,Geo,Oeo,ts,zre,Veo,Xeo,CR,zeo,Qeo,wR,Weo,Heo,Ueo,as,Qre,Jeo,Yeo,AR,Keo,Zeo,yR,eoo,ooo,roo,ns,Wre,too,aoo,LR,noo,soo,xR,loo,ioo,doo,xg,Hre,coo,moo,$R,foo,goo,hoo,ss,Ure,uoo,poo,kR,_oo,boo,SR,Foo,voo,Too,$g,Jre,Moo,Eoo,RR,Coo,woo,Aoo,kg,Yre,yoo,Loo,BR,xoo,$oo,koo,ls,Kre,Soo,Roo,PR,Boo,Poo,IR,Ioo,qoo,Noo,is,Zre,joo,Doo,qR,Goo,Ooo,NR,Voo,Xoo,zoo,ds,ete,Qoo,Woo,jR,Hoo,Uoo,DR,Joo,Yoo,Koo,Sg,ote,Zoo,ero,GR,oro,rro,tro,cs,rte,aro,nro,OR,sro,lro,VR,iro,dro,cro,ms,tte,mro,fro,XR,gro,hro,zR,uro,pro,_ro,fs,ate,bro,Fro,QR,vro,Tro,WR,Mro,Ero,Cro,gs,nte,wro,Aro,HR,yro,Lro,UR,xro,$ro,kro,hs,ste,Sro,Rro,JR,Bro,Pro,YR,Iro,qro,Nro,Rg,lte,jro,Dro,KR,Gro,Oro,Vro,us,ite,Xro,zro,ZR,Qro,Wro,eB,Hro,Uro,Jro,Bg,dte,Yro,Kro,oB,Zro,eto,oto,Pg,cte,rto,tto,rB,ato,nto,sto,Ig,mte,lto,ito,tB,dto,cto,mto,qg,fte,fto,gto,aB,hto,uto,pto,ps,gte,_to,bto,nB,Fto,vto,sB,Tto,Mto,Eto,Ng,hte,Cto,wto,lB,Ato,yto,Lto,_s,ute,xto,$to,iB,kto,Sto,dB,Rto,Bto,Pto,bs,pte,Ito,qto,cB,Nto,jto,mB,Dto,Gto,Oto,Fs,_te,Vto,Xto,fB,zto,Qto,gB,Wto,Hto,Uto,vs,bte,Jto,Yto,hB,Kto,Zto,uB,eao,oao,rao,Ts,Fte,tao,aao,pB,nao,sao,_B,lao,iao,dao,Ms,vte,cao,mao,bB,fao,gao,FB,hao,uao,pao,jg,Tte,_ao,bao,vB,Fao,vao,Tao,Dg,Mte,Mao,Eao,TB,Cao,wao,Aao,Es,Ete,yao,Lao,MB,xao,$ao,EB,kao,Sao,Rao,Cs,Cte,Bao,Pao,CB,Iao,qao,wB,Nao,jao,Dao,ws,wte,Gao,Oao,AB,Vao,Xao,yB,zao,Qao,Wao,Gg,Ate,Hao,Uao,LB,Jao,Yao,Kao,Og,yte,Zao,eno,xB,ono,rno,tno,Vg,Lte,ano,nno,$B,sno,lno,ino,As,xte,dno,cno,kB,mno,fno,SB,gno,hno,uno,Xg,$te,pno,_no,RB,bno,Fno,vno,zg,kte,Tno,Mno,BB,Eno,Cno,wno,ys,Ste,Ano,yno,PB,Lno,xno,IB,$no,kno,Sno,Qg,Rte,Rno,Bno,qB,Pno,Ino,qno,Wg,Bte,Nno,jno,NB,Dno,Gno,Ono,Ls,Pte,Vno,Xno,jB,zno,Qno,DB,Wno,Hno,Uno,xs,Ite,Jno,Yno,GB,Kno,Zno,OB,eso,oso,rso,$s,qte,tso,aso,VB,nso,sso,XB,lso,iso,dso,ks,Nte,cso,mso,zB,fso,gso,QB,hso,uso,pso,Hg,_so,Ug,ly,bso,jte,Fso,DPe,bi,Jg,Dte,iy,vso,Gte,Tso,GPe,Ao,dy,Mso,cy,Eso,WB,Cso,wso,Aso,my,yso,Ote,Lso,xso,$so,Qe,fy,kso,Vte,Sso,Rso,wa,Bso,Xte,Pso,Iso,zte,qso,Nso,Qte,jso,Dso,Gso,oe,Yg,Wte,Oso,Vso,HB,Xso,zso,Qso,Kg,Hte,Wso,Hso,UB,Uso,Jso,Yso,Zg,Ute,Kso,Zso,JB,elo,olo,rlo,eh,Jte,tlo,alo,YB,nlo,slo,llo,oh,Yte,ilo,dlo,KB,clo,mlo,flo,rh,Kte,glo,hlo,ZB,ulo,plo,_lo,th,Zte,blo,Flo,eP,vlo,Tlo,Mlo,ah,eae,Elo,Clo,oP,wlo,Alo,ylo,nh,oae,Llo,xlo,rP,$lo,klo,Slo,sh,rae,Rlo,Blo,tP,Plo,Ilo,qlo,lh,tae,Nlo,jlo,aP,Dlo,Glo,Olo,ih,aae,Vlo,Xlo,nP,zlo,Qlo,Wlo,dh,nae,Hlo,Ulo,sP,Jlo,Ylo,Klo,ch,sae,Zlo,eio,lP,oio,rio,tio,mh,lae,aio,nio,iP,sio,lio,iio,fh,iae,dio,cio,dP,mio,fio,gio,gh,dae,hio,uio,cP,pio,_io,bio,hh,cae,Fio,vio,mP,Tio,Mio,Eio,uh,mae,Cio,wio,fP,Aio,yio,Lio,ph,fae,xio,$io,gP,kio,Sio,Rio,_h,gae,Bio,Pio,hP,Iio,qio,Nio,bh,hae,jio,Dio,uP,Gio,Oio,Vio,Fh,uae,Xio,zio,pP,Qio,Wio,Hio,vh,pae,Uio,Jio,_P,Yio,Kio,Zio,Th,_ae,edo,odo,bP,rdo,tdo,ado,Mh,ndo,Eh,sdo,Ch,gy,ldo,bae,ido,OPe,Fi,wh,Fae,hy,ddo,vae,cdo,VPe,yo,uy,mdo,py,fdo,FP,gdo,hdo,udo,_y,pdo,Tae,_do,bdo,Fdo,We,by,vdo,Mae,Tdo,Mdo,vi,Edo,Eae,Cdo,wdo,Cae,Ado,ydo,Ldo,_e,Ah,wae,xdo,$do,vP,kdo,Sdo,Rdo,yh,Aae,Bdo,Pdo,yae,Ido,qdo,Ndo,Lh,Lae,jdo,Ddo,TP,Gdo,Odo,Vdo,xh,xae,Xdo,zdo,MP,Qdo,Wdo,Hdo,$h,$ae,Udo,Jdo,EP,Ydo,Kdo,Zdo,kh,kae,eco,oco,CP,rco,tco,aco,Sh,Sae,nco,sco,wP,lco,ico,dco,Rh,Rae,cco,mco,AP,fco,gco,hco,Bh,Bae,uco,pco,yP,_co,bco,Fco,Ph,Pae,vco,Tco,LP,Mco,Eco,Cco,Ih,Iae,wco,Aco,xP,yco,Lco,xco,qh,qae,$co,kco,$P,Sco,Rco,Bco,Nh,Nae,Pco,Ico,kP,qco,Nco,jco,jh,jae,Dco,Gco,SP,Oco,Vco,Xco,Dh,Dae,zco,Qco,RP,Wco,Hco,Uco,Gh,Jco,Oh,Yco,Vh,Fy,Kco,Gae,Zco,XPe,Ti,Xh,Oae,vy,emo,Vae,omo,zPe,Lo,Ty,rmo,Mi,tmo,BP,amo,nmo,PP,smo,lmo,imo,My,dmo,Xae,cmo,mmo,fmo,ot,Ey,gmo,zae,hmo,umo,Ei,pmo,Qae,_mo,bmo,IP,Fmo,vmo,Tmo,zh,Mmo,He,Cy,Emo,Wae,Cmo,wmo,Aa,Amo,Hae,ymo,Lmo,Uae,xmo,$mo,Jae,kmo,Smo,Rmo,x,Qh,Yae,Bmo,Pmo,qP,Imo,qmo,Nmo,Wh,Kae,jmo,Dmo,NP,Gmo,Omo,Vmo,Hh,Zae,Xmo,zmo,jP,Qmo,Wmo,Hmo,Uh,ene,Umo,Jmo,DP,Ymo,Kmo,Zmo,Jh,one,efo,ofo,GP,rfo,tfo,afo,Yh,rne,nfo,sfo,OP,lfo,ifo,dfo,Kh,tne,cfo,mfo,VP,ffo,gfo,hfo,Zh,ane,ufo,pfo,XP,_fo,bfo,Ffo,eu,nne,vfo,Tfo,zP,Mfo,Efo,Cfo,ou,sne,wfo,Afo,QP,yfo,Lfo,xfo,ru,lne,$fo,kfo,WP,Sfo,Rfo,Bfo,tu,ine,Pfo,Ifo,HP,qfo,Nfo,jfo,au,dne,Dfo,Gfo,UP,Ofo,Vfo,Xfo,nu,cne,zfo,Qfo,JP,Wfo,Hfo,Ufo,su,mne,Jfo,Yfo,YP,Kfo,Zfo,ego,lu,fne,ogo,rgo,KP,tgo,ago,ngo,iu,gne,sgo,lgo,ZP,igo,dgo,cgo,du,hne,mgo,fgo,eI,ggo,hgo,ugo,cu,une,pgo,_go,oI,bgo,Fgo,vgo,mu,pne,Tgo,Mgo,rI,Ego,Cgo,wgo,fu,_ne,Ago,ygo,tI,Lgo,xgo,$go,gu,bne,kgo,Sgo,aI,Rgo,Bgo,Pgo,hu,Fne,Igo,qgo,nI,Ngo,jgo,Dgo,uu,vne,Ggo,Ogo,sI,Vgo,Xgo,zgo,pu,Tne,Qgo,Wgo,lI,Hgo,Ugo,Jgo,_u,Mne,Ygo,Kgo,iI,Zgo,eho,oho,bu,Ene,rho,tho,dI,aho,nho,sho,Fu,Cne,lho,iho,cI,dho,cho,mho,vu,wne,fho,gho,mI,hho,uho,pho,Tu,Ane,_ho,bho,fI,Fho,vho,Tho,Mu,yne,Mho,Eho,gI,Cho,who,Aho,Ss,Lne,yho,Lho,hI,xho,$ho,uI,kho,Sho,Rho,Eu,xne,Bho,Pho,pI,Iho,qho,Nho,Cu,$ne,jho,Dho,_I,Gho,Oho,Vho,wu,kne,Xho,zho,bI,Qho,Who,Hho,Au,Sne,Uho,Jho,FI,Yho,Kho,Zho,yu,Rne,euo,ouo,vI,ruo,tuo,auo,Lu,Bne,nuo,suo,TI,luo,iuo,duo,xu,Pne,cuo,muo,MI,fuo,guo,huo,$u,Ine,uuo,puo,EI,_uo,buo,Fuo,ku,qne,vuo,Tuo,CI,Muo,Euo,Cuo,Su,Nne,wuo,Auo,wI,yuo,Luo,xuo,Ru,jne,$uo,kuo,AI,Suo,Ruo,Buo,Bu,Dne,Puo,Iuo,yI,quo,Nuo,juo,Pu,Gne,Duo,Guo,LI,Ouo,Vuo,Xuo,Iu,One,zuo,Quo,xI,Wuo,Huo,Uuo,qu,Vne,Juo,Yuo,$I,Kuo,Zuo,epo,Nu,Xne,opo,rpo,kI,tpo,apo,npo,ju,zne,spo,lpo,SI,ipo,dpo,cpo,Du,Qne,mpo,fpo,RI,gpo,hpo,upo,Gu,Wne,ppo,_po,BI,bpo,Fpo,vpo,Ou,Hne,Tpo,Mpo,PI,Epo,Cpo,wpo,Vu,Une,Apo,ypo,II,Lpo,xpo,$po,Xu,Jne,kpo,Spo,qI,Rpo,Bpo,Ppo,zu,Yne,Ipo,qpo,NI,Npo,jpo,Dpo,Qu,Kne,Gpo,Opo,jI,Vpo,Xpo,zpo,Wu,Zne,Qpo,Wpo,DI,Hpo,Upo,Jpo,Hu,ese,Ypo,Kpo,GI,Zpo,e_o,o_o,Uu,ose,r_o,t_o,OI,a_o,n_o,s_o,Ju,rse,l_o,i_o,VI,d_o,c_o,m_o,Yu,tse,f_o,g_o,XI,h_o,u_o,p_o,Ku,ase,__o,b_o,zI,F_o,v_o,T_o,Zu,nse,M_o,E_o,QI,C_o,w_o,A_o,ep,sse,y_o,L_o,WI,x_o,$_o,k_o,op,lse,S_o,R_o,HI,B_o,P_o,I_o,rp,ise,q_o,N_o,UI,j_o,D_o,G_o,tp,dse,O_o,V_o,JI,X_o,z_o,Q_o,ap,cse,W_o,H_o,YI,U_o,J_o,Y_o,np,mse,K_o,Z_o,KI,ebo,obo,rbo,sp,fse,tbo,abo,ZI,nbo,sbo,lbo,lp,gse,ibo,dbo,eq,cbo,mbo,fbo,ip,hse,gbo,hbo,oq,ubo,pbo,_bo,dp,use,bbo,Fbo,rq,vbo,Tbo,Mbo,cp,pse,Ebo,Cbo,tq,wbo,Abo,ybo,mp,_se,Lbo,xbo,aq,$bo,kbo,Sbo,fp,bse,Rbo,Bbo,nq,Pbo,Ibo,qbo,gp,Fse,Nbo,jbo,sq,Dbo,Gbo,Obo,hp,vse,Vbo,Xbo,lq,zbo,Qbo,Wbo,up,Tse,Hbo,Ubo,iq,Jbo,Ybo,Kbo,pp,Mse,Zbo,e2o,dq,o2o,r2o,t2o,_p,Ese,a2o,n2o,cq,s2o,l2o,i2o,bp,Cse,d2o,c2o,mq,m2o,f2o,g2o,Fp,wse,h2o,u2o,fq,p2o,_2o,b2o,vp,Ase,F2o,v2o,gq,T2o,M2o,E2o,Tp,yse,C2o,w2o,hq,A2o,y2o,L2o,Mp,Lse,x2o,$2o,uq,k2o,S2o,R2o,Ep,xse,B2o,P2o,pq,I2o,q2o,N2o,Cp,$se,j2o,D2o,_q,G2o,O2o,V2o,wp,kse,X2o,z2o,bq,Q2o,W2o,H2o,Ap,Sse,U2o,J2o,Fq,Y2o,K2o,Z2o,yp,Rse,eFo,oFo,vq,rFo,tFo,aFo,Lp,Bse,nFo,sFo,Tq,lFo,iFo,dFo,xp,Pse,cFo,mFo,Mq,fFo,gFo,hFo,$p,Ise,uFo,pFo,Eq,_Fo,bFo,FFo,kp,qse,vFo,TFo,Cq,MFo,EFo,CFo,Sp,Nse,wFo,AFo,wq,yFo,LFo,xFo,Rp,jse,$Fo,kFo,Aq,SFo,RFo,BFo,Bp,PFo,Dse,IFo,qFo,Gse,NFo,jFo,Pp,QPe,Ci,Ip,Ose,wy,DFo,Vse,GFo,WPe,xo,Ay,OFo,wi,VFo,yq,XFo,zFo,Lq,QFo,WFo,HFo,yy,UFo,Xse,JFo,YFo,KFo,rt,Ly,ZFo,zse,evo,ovo,Ai,rvo,Qse,tvo,avo,xq,nvo,svo,lvo,qp,ivo,Ue,xy,dvo,Wse,cvo,mvo,ya,fvo,Hse,gvo,hvo,Use,uvo,pvo,Jse,_vo,bvo,Fvo,G,Np,Yse,vvo,Tvo,$q,Mvo,Evo,Cvo,jp,Kse,wvo,Avo,kq,yvo,Lvo,xvo,Dp,Zse,$vo,kvo,Sq,Svo,Rvo,Bvo,Gp,ele,Pvo,Ivo,Rq,qvo,Nvo,jvo,Op,ole,Dvo,Gvo,Bq,Ovo,Vvo,Xvo,Vp,rle,zvo,Qvo,Pq,Wvo,Hvo,Uvo,Xp,tle,Jvo,Yvo,Iq,Kvo,Zvo,e1o,zp,ale,o1o,r1o,qq,t1o,a1o,n1o,Qp,nle,s1o,l1o,Nq,i1o,d1o,c1o,Wp,sle,m1o,f1o,jq,g1o,h1o,u1o,Hp,lle,p1o,_1o,Dq,b1o,F1o,v1o,Up,ile,T1o,M1o,Gq,E1o,C1o,w1o,Jp,dle,A1o,y1o,Oq,L1o,x1o,$1o,Yp,cle,k1o,S1o,Vq,R1o,B1o,P1o,Kp,mle,I1o,q1o,Xq,N1o,j1o,D1o,Zp,fle,G1o,O1o,zq,V1o,X1o,z1o,e_,gle,Q1o,W1o,Qq,H1o,U1o,J1o,o_,hle,Y1o,K1o,Wq,Z1o,eTo,oTo,r_,ule,rTo,tTo,Hq,aTo,nTo,sTo,t_,ple,lTo,iTo,Uq,dTo,cTo,mTo,a_,_le,fTo,gTo,Jq,hTo,uTo,pTo,n_,ble,_To,bTo,Yq,FTo,vTo,TTo,s_,Fle,MTo,ETo,Kq,CTo,wTo,ATo,l_,vle,yTo,LTo,Zq,xTo,$To,kTo,i_,Tle,STo,RTo,eN,BTo,PTo,ITo,d_,Mle,qTo,NTo,oN,jTo,DTo,GTo,c_,Ele,OTo,VTo,rN,XTo,zTo,QTo,m_,Cle,WTo,HTo,tN,UTo,JTo,YTo,f_,wle,KTo,ZTo,aN,eMo,oMo,rMo,g_,Ale,tMo,aMo,nN,nMo,sMo,lMo,h_,yle,iMo,dMo,sN,cMo,mMo,fMo,u_,Lle,gMo,hMo,lN,uMo,pMo,_Mo,p_,xle,bMo,FMo,iN,vMo,TMo,MMo,__,$le,EMo,CMo,dN,wMo,AMo,yMo,b_,kle,LMo,xMo,cN,$Mo,kMo,SMo,F_,Sle,RMo,BMo,mN,PMo,IMo,qMo,v_,Rle,NMo,jMo,fN,DMo,GMo,OMo,T_,Ble,VMo,XMo,gN,zMo,QMo,WMo,M_,Ple,HMo,UMo,hN,JMo,YMo,KMo,E_,Ile,ZMo,e4o,uN,o4o,r4o,t4o,C_,a4o,qle,n4o,s4o,Nle,l4o,i4o,w_,HPe,yi,A_,jle,$y,d4o,Dle,c4o,UPe,$o,ky,m4o,Li,f4o,pN,g4o,h4o,_N,u4o,p4o,_4o,Sy,b4o,Gle,F4o,v4o,T4o,tt,Ry,M4o,Ole,E4o,C4o,xi,w4o,Vle,A4o,y4o,bN,L4o,x4o,$4o,y_,k4o,Je,By,S4o,Xle,R4o,B4o,La,P4o,zle,I4o,q4o,Qle,N4o,j4o,Wle,D4o,G4o,O4o,z,L_,Hle,V4o,X4o,FN,z4o,Q4o,W4o,x_,Ule,H4o,U4o,vN,J4o,Y4o,K4o,$_,Jle,Z4o,eEo,TN,oEo,rEo,tEo,k_,Yle,aEo,nEo,MN,sEo,lEo,iEo,S_,Kle,dEo,cEo,EN,mEo,fEo,gEo,R_,Zle,hEo,uEo,CN,pEo,_Eo,bEo,B_,eie,FEo,vEo,wN,TEo,MEo,EEo,P_,oie,CEo,wEo,AN,AEo,yEo,LEo,I_,rie,xEo,$Eo,yN,kEo,SEo,REo,q_,tie,BEo,PEo,LN,IEo,qEo,NEo,N_,aie,jEo,DEo,xN,GEo,OEo,VEo,j_,nie,XEo,zEo,$N,QEo,WEo,HEo,D_,sie,UEo,JEo,kN,YEo,KEo,ZEo,G_,lie,e5o,o5o,SN,r5o,t5o,a5o,O_,iie,n5o,s5o,RN,l5o,i5o,d5o,V_,die,c5o,m5o,BN,f5o,g5o,h5o,X_,cie,u5o,p5o,PN,_5o,b5o,F5o,z_,mie,v5o,T5o,IN,M5o,E5o,C5o,Q_,fie,w5o,A5o,qN,y5o,L5o,x5o,W_,gie,$5o,k5o,NN,S5o,R5o,B5o,H_,hie,P5o,I5o,jN,q5o,N5o,j5o,U_,uie,D5o,G5o,DN,O5o,V5o,X5o,J_,pie,z5o,Q5o,GN,W5o,H5o,U5o,Y_,_ie,J5o,Y5o,ON,K5o,Z5o,eCo,K_,bie,oCo,rCo,VN,tCo,aCo,nCo,Z_,Fie,sCo,lCo,XN,iCo,dCo,cCo,eb,vie,mCo,fCo,zN,gCo,hCo,uCo,ob,Tie,pCo,_Co,QN,bCo,FCo,vCo,rb,Mie,TCo,MCo,WN,ECo,CCo,wCo,tb,Eie,ACo,yCo,HN,LCo,xCo,$Co,ab,Cie,kCo,SCo,UN,RCo,BCo,PCo,nb,wie,ICo,qCo,JN,NCo,jCo,DCo,sb,Aie,GCo,OCo,YN,VCo,XCo,zCo,lb,yie,QCo,WCo,KN,HCo,UCo,JCo,ib,Lie,YCo,KCo,ZN,ZCo,e3o,o3o,db,xie,r3o,t3o,ej,a3o,n3o,s3o,cb,l3o,$ie,i3o,d3o,kie,c3o,m3o,mb,JPe,$i,fb,Sie,Py,f3o,Rie,g3o,YPe,ko,Iy,h3o,ki,u3o,oj,p3o,_3o,rj,b3o,F3o,v3o,qy,T3o,Bie,M3o,E3o,C3o,at,Ny,w3o,Pie,A3o,y3o,Si,L3o,Iie,x3o,$3o,tj,k3o,S3o,R3o,gb,B3o,Ye,jy,P3o,qie,I3o,q3o,xa,N3o,Nie,j3o,D3o,jie,G3o,O3o,Die,V3o,X3o,z3o,Q,hb,Gie,Q3o,W3o,aj,H3o,U3o,J3o,ub,Oie,Y3o,K3o,nj,Z3o,ewo,owo,pb,Vie,rwo,two,sj,awo,nwo,swo,_b,Xie,lwo,iwo,lj,dwo,cwo,mwo,bb,zie,fwo,gwo,ij,hwo,uwo,pwo,Fb,Qie,_wo,bwo,dj,Fwo,vwo,Two,vb,Wie,Mwo,Ewo,cj,Cwo,wwo,Awo,Tb,Hie,ywo,Lwo,mj,xwo,$wo,kwo,Mb,Uie,Swo,Rwo,fj,Bwo,Pwo,Iwo,Eb,Jie,qwo,Nwo,gj,jwo,Dwo,Gwo,Cb,Yie,Owo,Vwo,hj,Xwo,zwo,Qwo,wb,Kie,Wwo,Hwo,uj,Uwo,Jwo,Ywo,Ab,Zie,Kwo,Zwo,pj,eAo,oAo,rAo,yb,ede,tAo,aAo,_j,nAo,sAo,lAo,Lb,ode,iAo,dAo,bj,cAo,mAo,fAo,xb,rde,gAo,hAo,Fj,uAo,pAo,_Ao,$b,tde,bAo,FAo,vj,vAo,TAo,MAo,kb,ade,EAo,CAo,Tj,wAo,AAo,yAo,Sb,nde,LAo,xAo,Mj,$Ao,kAo,SAo,Rb,sde,RAo,BAo,Ej,PAo,IAo,qAo,Bb,lde,NAo,jAo,Cj,DAo,GAo,OAo,Pb,ide,VAo,XAo,wj,zAo,QAo,WAo,Ib,dde,HAo,UAo,Aj,JAo,YAo,KAo,qb,cde,ZAo,e0o,yj,o0o,r0o,t0o,Nb,mde,a0o,n0o,Lj,s0o,l0o,i0o,jb,fde,d0o,c0o,xj,m0o,f0o,g0o,Db,gde,h0o,u0o,$j,p0o,_0o,b0o,Gb,hde,F0o,v0o,kj,T0o,M0o,E0o,Ob,ude,C0o,w0o,Sj,A0o,y0o,L0o,Vb,pde,x0o,$0o,Rj,k0o,S0o,R0o,Xb,_de,B0o,P0o,bde,I0o,q0o,N0o,zb,Fde,j0o,D0o,Bj,G0o,O0o,V0o,Qb,vde,X0o,z0o,Pj,Q0o,W0o,H0o,Wb,Tde,U0o,J0o,Ij,Y0o,K0o,Z0o,Hb,Mde,e6o,o6o,qj,r6o,t6o,a6o,Ub,n6o,Ede,s6o,l6o,Cde,i6o,d6o,Jb,KPe,Ri,Yb,wde,Dy,c6o,Ade,m6o,ZPe,So,Gy,f6o,Bi,g6o,Nj,h6o,u6o,jj,p6o,_6o,b6o,Oy,F6o,yde,v6o,T6o,M6o,nt,Vy,E6o,Lde,C6o,w6o,Pi,A6o,xde,y6o,L6o,Dj,x6o,$6o,k6o,Kb,S6o,Ke,Xy,R6o,$de,B6o,P6o,$a,I6o,kde,q6o,N6o,Sde,j6o,D6o,Rde,G6o,O6o,V6o,ue,Zb,Bde,X6o,z6o,Gj,Q6o,W6o,H6o,e2,Pde,U6o,J6o,Oj,Y6o,K6o,Z6o,o2,Ide,eyo,oyo,Vj,ryo,tyo,ayo,r2,qde,nyo,syo,Xj,lyo,iyo,dyo,t2,Nde,cyo,myo,zj,fyo,gyo,hyo,a2,jde,uyo,pyo,Qj,_yo,byo,Fyo,n2,Dde,vyo,Tyo,Wj,Myo,Eyo,Cyo,s2,Gde,wyo,Ayo,Hj,yyo,Lyo,xyo,l2,Ode,$yo,kyo,Uj,Syo,Ryo,Byo,i2,Vde,Pyo,Iyo,Jj,qyo,Nyo,jyo,d2,Xde,Dyo,Gyo,Yj,Oyo,Vyo,Xyo,c2,zde,zyo,Qyo,Kj,Wyo,Hyo,Uyo,m2,Qde,Jyo,Yyo,Zj,Kyo,Zyo,eLo,f2,Wde,oLo,rLo,eD,tLo,aLo,nLo,g2,Hde,sLo,lLo,oD,iLo,dLo,cLo,h2,Ude,mLo,fLo,rD,gLo,hLo,uLo,u2,pLo,Jde,_Lo,bLo,Yde,FLo,vLo,p2,eIe,Ii,_2,Kde,zy,TLo,Zde,MLo,oIe,Ro,Qy,ELo,qi,CLo,tD,wLo,ALo,aD,yLo,LLo,xLo,Wy,$Lo,ece,kLo,SLo,RLo,st,Hy,BLo,oce,PLo,ILo,Ni,qLo,rce,NLo,jLo,nD,DLo,GLo,OLo,b2,VLo,Ze,Uy,XLo,tce,zLo,QLo,ka,WLo,ace,HLo,ULo,nce,JLo,YLo,sce,KLo,ZLo,e8o,q,F2,lce,o8o,r8o,sD,t8o,a8o,n8o,v2,ice,s8o,l8o,lD,i8o,d8o,c8o,T2,dce,m8o,f8o,iD,g8o,h8o,u8o,M2,cce,p8o,_8o,dD,b8o,F8o,v8o,E2,mce,T8o,M8o,cD,E8o,C8o,w8o,C2,fce,A8o,y8o,mD,L8o,x8o,$8o,w2,gce,k8o,S8o,fD,R8o,B8o,P8o,A2,hce,I8o,q8o,gD,N8o,j8o,D8o,y2,uce,G8o,O8o,hD,V8o,X8o,z8o,L2,pce,Q8o,W8o,uD,H8o,U8o,J8o,x2,_ce,Y8o,K8o,pD,Z8o,exo,oxo,$2,bce,rxo,txo,_D,axo,nxo,sxo,k2,Fce,lxo,ixo,bD,dxo,cxo,mxo,S2,vce,fxo,gxo,FD,hxo,uxo,pxo,R2,Tce,_xo,bxo,vD,Fxo,vxo,Txo,B2,Mce,Mxo,Exo,TD,Cxo,wxo,Axo,P2,Ece,yxo,Lxo,MD,xxo,$xo,kxo,I2,Cce,Sxo,Rxo,ED,Bxo,Pxo,Ixo,q2,wce,qxo,Nxo,CD,jxo,Dxo,Gxo,N2,Ace,Oxo,Vxo,wD,Xxo,zxo,Qxo,j2,yce,Wxo,Hxo,AD,Uxo,Jxo,Yxo,D2,Lce,Kxo,Zxo,yD,e7o,o7o,r7o,G2,xce,t7o,a7o,LD,n7o,s7o,l7o,O2,$ce,i7o,d7o,xD,c7o,m7o,f7o,V2,kce,g7o,h7o,$D,u7o,p7o,_7o,X2,Sce,b7o,F7o,kD,v7o,T7o,M7o,z2,Rce,E7o,C7o,SD,w7o,A7o,y7o,Q2,Bce,L7o,x7o,RD,$7o,k7o,S7o,W2,Pce,R7o,B7o,BD,P7o,I7o,q7o,H2,Ice,N7o,j7o,PD,D7o,G7o,O7o,U2,qce,V7o,X7o,ID,z7o,Q7o,W7o,J2,Nce,H7o,U7o,qD,J7o,Y7o,K7o,Y2,jce,Z7o,e9o,ND,o9o,r9o,t9o,K2,Dce,a9o,n9o,jD,s9o,l9o,i9o,Z2,Gce,d9o,c9o,DD,m9o,f9o,g9o,eF,Oce,h9o,u9o,GD,p9o,_9o,b9o,oF,Vce,F9o,v9o,OD,T9o,M9o,E9o,rF,Xce,C9o,w9o,VD,A9o,y9o,L9o,tF,zce,x9o,$9o,XD,k9o,S9o,R9o,aF,Qce,B9o,P9o,zD,I9o,q9o,N9o,nF,Wce,j9o,D9o,QD,G9o,O9o,V9o,sF,Hce,X9o,z9o,WD,Q9o,W9o,H9o,lF,Uce,U9o,J9o,HD,Y9o,K9o,Z9o,iF,Jce,e$o,o$o,UD,r$o,t$o,a$o,dF,Yce,n$o,s$o,JD,l$o,i$o,d$o,cF,Kce,c$o,m$o,YD,f$o,g$o,h$o,mF,u$o,Zce,p$o,_$o,eme,b$o,F$o,fF,rIe,ji,gF,ome,Jy,v$o,rme,T$o,tIe,Bo,Yy,M$o,Di,E$o,KD,C$o,w$o,ZD,A$o,y$o,L$o,Ky,x$o,tme,$$o,k$o,S$o,lt,Zy,R$o,ame,B$o,P$o,Gi,I$o,nme,q$o,N$o,eG,j$o,D$o,G$o,hF,O$o,eo,eL,V$o,sme,X$o,z$o,Sa,Q$o,lme,W$o,H$o,ime,U$o,J$o,dme,Y$o,K$o,Z$o,Y,uF,cme,eko,oko,oG,rko,tko,ako,pF,mme,nko,sko,rG,lko,iko,dko,_F,fme,cko,mko,tG,fko,gko,hko,bF,gme,uko,pko,aG,_ko,bko,Fko,FF,hme,vko,Tko,nG,Mko,Eko,Cko,vF,ume,wko,Ako,sG,yko,Lko,xko,TF,pme,$ko,kko,lG,Sko,Rko,Bko,MF,_me,Pko,Iko,iG,qko,Nko,jko,EF,bme,Dko,Gko,dG,Oko,Vko,Xko,CF,Fme,zko,Qko,cG,Wko,Hko,Uko,wF,vme,Jko,Yko,mG,Kko,Zko,eSo,AF,Tme,oSo,rSo,fG,tSo,aSo,nSo,yF,Mme,sSo,lSo,gG,iSo,dSo,cSo,LF,Eme,mSo,fSo,hG,gSo,hSo,uSo,xF,Cme,pSo,_So,uG,bSo,FSo,vSo,$F,wme,TSo,MSo,pG,ESo,CSo,wSo,kF,Ame,ASo,ySo,_G,LSo,xSo,$So,SF,yme,kSo,SSo,bG,RSo,BSo,PSo,RF,Lme,ISo,qSo,FG,NSo,jSo,DSo,BF,xme,GSo,OSo,vG,VSo,XSo,zSo,PF,$me,QSo,WSo,TG,HSo,USo,JSo,IF,kme,YSo,KSo,MG,ZSo,eRo,oRo,qF,Sme,rRo,tRo,EG,aRo,nRo,sRo,NF,Rme,lRo,iRo,CG,dRo,cRo,mRo,jF,Bme,fRo,gRo,wG,hRo,uRo,pRo,DF,Pme,_Ro,bRo,AG,FRo,vRo,TRo,GF,Ime,MRo,ERo,yG,CRo,wRo,ARo,OF,qme,yRo,LRo,LG,xRo,$Ro,kRo,VF,Nme,SRo,RRo,xG,BRo,PRo,IRo,XF,qRo,jme,NRo,jRo,Dme,DRo,GRo,zF,aIe,Oi,QF,Gme,oL,ORo,Ome,VRo,nIe,Po,rL,XRo,Vi,zRo,$G,QRo,WRo,kG,HRo,URo,JRo,tL,YRo,Vme,KRo,ZRo,eBo,it,aL,oBo,Xme,rBo,tBo,Xi,aBo,zme,nBo,sBo,SG,lBo,iBo,dBo,WF,cBo,oo,nL,mBo,Qme,fBo,gBo,Ra,hBo,Wme,uBo,pBo,Hme,_Bo,bBo,Ume,FBo,vBo,TBo,Yr,HF,Jme,MBo,EBo,RG,CBo,wBo,ABo,UF,Yme,yBo,LBo,BG,xBo,$Bo,kBo,JF,Kme,SBo,RBo,PG,BBo,PBo,IBo,YF,Zme,qBo,NBo,IG,jBo,DBo,GBo,KF,efe,OBo,VBo,qG,XBo,zBo,QBo,ZF,WBo,ofe,HBo,UBo,rfe,JBo,YBo,ev,sIe,zi,ov,tfe,sL,KBo,afe,ZBo,lIe,Io,lL,ePo,Qi,oPo,NG,rPo,tPo,jG,aPo,nPo,sPo,iL,lPo,nfe,iPo,dPo,cPo,dt,dL,mPo,sfe,fPo,gPo,Wi,hPo,lfe,uPo,pPo,DG,_Po,bPo,FPo,rv,vPo,ro,cL,TPo,ife,MPo,EPo,Ba,CPo,dfe,wPo,APo,cfe,yPo,LPo,mfe,xPo,$Po,kPo,U,tv,ffe,SPo,RPo,GG,BPo,PPo,IPo,av,gfe,qPo,NPo,OG,jPo,DPo,GPo,nv,hfe,OPo,VPo,VG,XPo,zPo,QPo,sv,ufe,WPo,HPo,XG,UPo,JPo,YPo,lv,pfe,KPo,ZPo,zG,eIo,oIo,rIo,iv,_fe,tIo,aIo,QG,nIo,sIo,lIo,dv,bfe,iIo,dIo,WG,cIo,mIo,fIo,cv,Ffe,gIo,hIo,HG,uIo,pIo,_Io,mv,vfe,bIo,FIo,UG,vIo,TIo,MIo,fv,Tfe,EIo,CIo,JG,wIo,AIo,yIo,gv,Mfe,LIo,xIo,YG,$Io,kIo,SIo,hv,Efe,RIo,BIo,KG,PIo,IIo,qIo,uv,Cfe,NIo,jIo,ZG,DIo,GIo,OIo,pv,wfe,VIo,XIo,eO,zIo,QIo,WIo,_v,Afe,HIo,UIo,oO,JIo,YIo,KIo,bv,yfe,ZIo,eqo,rO,oqo,rqo,tqo,Fv,Lfe,aqo,nqo,tO,sqo,lqo,iqo,vv,xfe,dqo,cqo,aO,mqo,fqo,gqo,Tv,$fe,hqo,uqo,nO,pqo,_qo,bqo,Mv,kfe,Fqo,vqo,sO,Tqo,Mqo,Eqo,Ev,Sfe,Cqo,wqo,lO,Aqo,yqo,Lqo,Cv,Rfe,xqo,$qo,iO,kqo,Sqo,Rqo,wv,Bfe,Bqo,Pqo,dO,Iqo,qqo,Nqo,Av,Pfe,jqo,Dqo,cO,Gqo,Oqo,Vqo,yv,Ife,Xqo,zqo,mO,Qqo,Wqo,Hqo,Lv,qfe,Uqo,Jqo,fO,Yqo,Kqo,Zqo,xv,Nfe,eNo,oNo,gO,rNo,tNo,aNo,$v,jfe,nNo,sNo,hO,lNo,iNo,dNo,kv,Dfe,cNo,mNo,uO,fNo,gNo,hNo,Sv,Gfe,uNo,pNo,pO,_No,bNo,FNo,Rv,Ofe,vNo,TNo,_O,MNo,ENo,CNo,Bv,Vfe,wNo,ANo,bO,yNo,LNo,xNo,Pv,Xfe,$No,kNo,FO,SNo,RNo,BNo,Iv,PNo,zfe,INo,qNo,Qfe,NNo,jNo,qv,iIe,Hi,Nv,Wfe,mL,DNo,Hfe,GNo,dIe,qo,fL,ONo,Ui,VNo,vO,XNo,zNo,TO,QNo,WNo,HNo,gL,UNo,Ufe,JNo,YNo,KNo,ct,hL,ZNo,Jfe,ejo,ojo,Ji,rjo,Yfe,tjo,ajo,MO,njo,sjo,ljo,jv,ijo,to,uL,djo,Kfe,cjo,mjo,Pa,fjo,Zfe,gjo,hjo,ege,ujo,pjo,oge,_jo,bjo,Fjo,O,Dv,rge,vjo,Tjo,EO,Mjo,Ejo,Cjo,Gv,tge,wjo,Ajo,CO,yjo,Ljo,xjo,Ov,age,$jo,kjo,wO,Sjo,Rjo,Bjo,Vv,nge,Pjo,Ijo,AO,qjo,Njo,jjo,Xv,sge,Djo,Gjo,yO,Ojo,Vjo,Xjo,zv,lge,zjo,Qjo,LO,Wjo,Hjo,Ujo,Qv,ige,Jjo,Yjo,xO,Kjo,Zjo,eDo,Wv,dge,oDo,rDo,$O,tDo,aDo,nDo,Hv,cge,sDo,lDo,kO,iDo,dDo,cDo,Uv,mge,mDo,fDo,SO,gDo,hDo,uDo,Jv,fge,pDo,_Do,RO,bDo,FDo,vDo,Yv,gge,TDo,MDo,BO,EDo,CDo,wDo,Kv,hge,ADo,yDo,PO,LDo,xDo,$Do,Zv,uge,kDo,SDo,IO,RDo,BDo,PDo,e1,pge,IDo,qDo,qO,NDo,jDo,DDo,o1,_ge,GDo,ODo,NO,VDo,XDo,zDo,r1,bge,QDo,WDo,jO,HDo,UDo,JDo,t1,Fge,YDo,KDo,DO,ZDo,eGo,oGo,a1,vge,rGo,tGo,GO,aGo,nGo,sGo,n1,Tge,lGo,iGo,OO,dGo,cGo,mGo,s1,Mge,fGo,gGo,VO,hGo,uGo,pGo,l1,Ege,_Go,bGo,XO,FGo,vGo,TGo,i1,Cge,MGo,EGo,zO,CGo,wGo,AGo,d1,wge,yGo,LGo,QO,xGo,$Go,kGo,c1,Age,SGo,RGo,WO,BGo,PGo,IGo,m1,yge,qGo,NGo,HO,jGo,DGo,GGo,f1,Lge,OGo,VGo,UO,XGo,zGo,QGo,g1,xge,WGo,HGo,JO,UGo,JGo,YGo,h1,$ge,KGo,ZGo,YO,eOo,oOo,rOo,u1,kge,tOo,aOo,KO,nOo,sOo,lOo,p1,Sge,iOo,dOo,ZO,cOo,mOo,fOo,_1,Rge,gOo,hOo,eV,uOo,pOo,_Oo,b1,Bge,bOo,FOo,oV,vOo,TOo,MOo,F1,Pge,EOo,COo,rV,wOo,AOo,yOo,v1,Ige,LOo,xOo,tV,$Oo,kOo,SOo,T1,qge,ROo,BOo,aV,POo,IOo,qOo,M1,Nge,NOo,jOo,nV,DOo,GOo,OOo,E1,jge,VOo,XOo,sV,zOo,QOo,WOo,C1,Dge,HOo,UOo,lV,JOo,YOo,KOo,w1,ZOo,Gge,eVo,oVo,Oge,rVo,tVo,A1,cIe,Yi,y1,Vge,pL,aVo,Xge,nVo,mIe,No,_L,sVo,Ki,lVo,iV,iVo,dVo,dV,cVo,mVo,fVo,bL,gVo,zge,hVo,uVo,pVo,mt,FL,_Vo,Qge,bVo,FVo,Zi,vVo,Wge,TVo,MVo,cV,EVo,CVo,wVo,L1,AVo,ao,vL,yVo,Hge,LVo,xVo,Ia,$Vo,Uge,kVo,SVo,Jge,RVo,BVo,Yge,PVo,IVo,qVo,Kge,x1,Zge,NVo,jVo,mV,DVo,GVo,OVo,$1,VVo,ehe,XVo,zVo,ohe,QVo,WVo,k1,fIe,ed,S1,rhe,TL,HVo,the,UVo,gIe,jo,ML,JVo,od,YVo,fV,KVo,ZVo,gV,eXo,oXo,rXo,EL,tXo,ahe,aXo,nXo,sXo,ft,CL,lXo,nhe,iXo,dXo,rd,cXo,she,mXo,fXo,hV,gXo,hXo,uXo,R1,pXo,no,wL,_Xo,lhe,bXo,FXo,qa,vXo,ihe,TXo,MXo,dhe,EXo,CXo,che,wXo,AXo,yXo,ve,B1,mhe,LXo,xXo,uV,$Xo,kXo,SXo,P1,fhe,RXo,BXo,pV,PXo,IXo,qXo,I1,ghe,NXo,jXo,_V,DXo,GXo,OXo,Rs,hhe,VXo,XXo,bV,zXo,QXo,FV,WXo,HXo,UXo,q1,uhe,JXo,YXo,vV,KXo,ZXo,ezo,gt,phe,ozo,rzo,TV,tzo,azo,MV,nzo,szo,EV,lzo,izo,dzo,N1,_he,czo,mzo,CV,fzo,gzo,hzo,j1,bhe,uzo,pzo,wV,_zo,bzo,Fzo,D1,Fhe,vzo,Tzo,AV,Mzo,Ezo,Czo,G1,vhe,wzo,Azo,yV,yzo,Lzo,xzo,O1,The,$zo,kzo,LV,Szo,Rzo,Bzo,V1,Mhe,Pzo,Izo,xV,qzo,Nzo,jzo,X1,Ehe,Dzo,Gzo,$V,Ozo,Vzo,Xzo,z1,zzo,Che,Qzo,Wzo,whe,Hzo,Uzo,Q1,hIe,td,W1,Ahe,AL,Jzo,yhe,Yzo,uIe,Do,yL,Kzo,ad,Zzo,kV,eQo,oQo,SV,rQo,tQo,aQo,LL,nQo,Lhe,sQo,lQo,iQo,ht,xL,dQo,xhe,cQo,mQo,nd,fQo,$he,gQo,hQo,RV,uQo,pQo,_Qo,H1,bQo,so,$L,FQo,khe,vQo,TQo,Na,MQo,She,EQo,CQo,Rhe,wQo,AQo,Bhe,yQo,LQo,xQo,Phe,U1,Ihe,$Qo,kQo,BV,SQo,RQo,BQo,J1,PQo,qhe,IQo,qQo,Nhe,NQo,jQo,Y1,pIe,sd,K1,jhe,kL,DQo,Dhe,GQo,_Ie,Go,SL,OQo,ld,VQo,PV,XQo,zQo,IV,QQo,WQo,HQo,RL,UQo,Ghe,JQo,YQo,KQo,ut,BL,ZQo,Ohe,eWo,oWo,id,rWo,Vhe,tWo,aWo,qV,nWo,sWo,lWo,Z1,iWo,lo,PL,dWo,Xhe,cWo,mWo,ja,fWo,zhe,gWo,hWo,Qhe,uWo,pWo,Whe,_Wo,bWo,FWo,Ne,eT,Hhe,vWo,TWo,NV,MWo,EWo,CWo,oT,Uhe,wWo,AWo,jV,yWo,LWo,xWo,rT,Jhe,$Wo,kWo,DV,SWo,RWo,BWo,tT,Yhe,PWo,IWo,GV,qWo,NWo,jWo,aT,Khe,DWo,GWo,OV,OWo,VWo,XWo,nT,Zhe,zWo,QWo,VV,WWo,HWo,UWo,sT,eue,JWo,YWo,XV,KWo,ZWo,eHo,lT,oue,oHo,rHo,zV,tHo,aHo,nHo,iT,sHo,rue,lHo,iHo,tue,dHo,cHo,dT,bIe,dd,cT,aue,IL,mHo,nue,fHo,FIe,Oo,qL,gHo,cd,hHo,QV,uHo,pHo,WV,_Ho,bHo,FHo,NL,vHo,sue,THo,MHo,EHo,pt,jL,CHo,lue,wHo,AHo,md,yHo,iue,LHo,xHo,HV,$Ho,kHo,SHo,mT,RHo,io,DL,BHo,due,PHo,IHo,Da,qHo,cue,NHo,jHo,mue,DHo,GHo,fue,OHo,VHo,XHo,Ga,fT,gue,zHo,QHo,UV,WHo,HHo,UHo,gT,hue,JHo,YHo,JV,KHo,ZHo,eUo,hT,uue,oUo,rUo,YV,tUo,aUo,nUo,uT,pue,sUo,lUo,KV,iUo,dUo,cUo,pT,mUo,_ue,fUo,gUo,bue,hUo,uUo,_T,vIe,fd,bT,Fue,GL,pUo,vue,_Uo,TIe,Vo,OL,bUo,gd,FUo,ZV,vUo,TUo,eX,MUo,EUo,CUo,VL,wUo,Tue,AUo,yUo,LUo,_t,XL,xUo,Mue,$Uo,kUo,hd,SUo,Eue,RUo,BUo,oX,PUo,IUo,qUo,FT,NUo,co,zL,jUo,Cue,DUo,GUo,Oa,OUo,wue,VUo,XUo,Aue,zUo,QUo,yue,WUo,HUo,UUo,je,vT,Lue,JUo,YUo,rX,KUo,ZUo,eJo,TT,xue,oJo,rJo,tX,tJo,aJo,nJo,MT,$ue,sJo,lJo,aX,iJo,dJo,cJo,ET,kue,mJo,fJo,nX,gJo,hJo,uJo,CT,Sue,pJo,_Jo,sX,bJo,FJo,vJo,wT,Rue,TJo,MJo,lX,EJo,CJo,wJo,AT,Bue,AJo,yJo,iX,LJo,xJo,$Jo,yT,Pue,kJo,SJo,dX,RJo,BJo,PJo,LT,IJo,Iue,qJo,NJo,que,jJo,DJo,xT,MIe,ud,$T,Nue,QL,GJo,jue,OJo,EIe,Xo,WL,VJo,pd,XJo,cX,zJo,QJo,mX,WJo,HJo,UJo,HL,JJo,Due,YJo,KJo,ZJo,bt,UL,eYo,Gue,oYo,rYo,_d,tYo,Oue,aYo,nYo,fX,sYo,lYo,iYo,kT,dYo,mo,JL,cYo,Vue,mYo,fYo,Va,gYo,Xue,hYo,uYo,zue,pYo,_Yo,Que,bYo,FYo,vYo,YL,ST,Wue,TYo,MYo,gX,EYo,CYo,wYo,RT,Hue,AYo,yYo,hX,LYo,xYo,$Yo,BT,kYo,Uue,SYo,RYo,Jue,BYo,PYo,PT,CIe,bd,IT,Yue,KL,IYo,Kue,qYo,wIe,zo,ZL,NYo,Fd,jYo,uX,DYo,GYo,pX,OYo,VYo,XYo,e8,zYo,Zue,QYo,WYo,HYo,Ft,o8,UYo,epe,JYo,YYo,vd,KYo,ope,ZYo,eKo,_X,oKo,rKo,tKo,qT,aKo,fo,r8,nKo,rpe,sKo,lKo,Xa,iKo,tpe,dKo,cKo,ape,mKo,fKo,npe,gKo,hKo,uKo,za,NT,spe,pKo,_Ko,bX,bKo,FKo,vKo,jT,lpe,TKo,MKo,FX,EKo,CKo,wKo,DT,ipe,AKo,yKo,vX,LKo,xKo,$Ko,GT,dpe,kKo,SKo,TX,RKo,BKo,PKo,OT,IKo,cpe,qKo,NKo,mpe,jKo,DKo,VT,AIe,Td,XT,fpe,t8,GKo,gpe,OKo,yIe,Qo,a8,VKo,Md,XKo,MX,zKo,QKo,EX,WKo,HKo,UKo,n8,JKo,hpe,YKo,KKo,ZKo,vt,s8,eZo,upe,oZo,rZo,Ed,tZo,ppe,aZo,nZo,CX,sZo,lZo,iZo,zT,dZo,go,l8,cZo,_pe,mZo,fZo,Qa,gZo,bpe,hZo,uZo,Fpe,pZo,_Zo,vpe,bZo,FZo,vZo,Cd,QT,Tpe,TZo,MZo,wX,EZo,CZo,wZo,WT,Mpe,AZo,yZo,AX,LZo,xZo,$Zo,HT,Epe,kZo,SZo,yX,RZo,BZo,PZo,UT,IZo,Cpe,qZo,NZo,wpe,jZo,DZo,JT,LIe,wd,YT,Ape,i8,GZo,ype,OZo,xIe,Wo,d8,VZo,Ad,XZo,LX,zZo,QZo,xX,WZo,HZo,UZo,c8,JZo,Lpe,YZo,KZo,ZZo,Tt,m8,eer,xpe,oer,rer,yd,ter,$pe,aer,ner,$X,ser,ler,ier,KT,der,ho,f8,cer,kpe,mer,fer,Wa,ger,Spe,her,uer,Rpe,per,_er,Bpe,ber,Fer,ver,g8,ZT,Ppe,Ter,Mer,kX,Eer,Cer,wer,eM,Ipe,Aer,yer,SX,Ler,xer,$er,oM,ker,qpe,Ser,Rer,Npe,Ber,Per,rM,$Ie,Ld,tM,jpe,h8,Ier,Dpe,qer,kIe,Ho,u8,Ner,xd,jer,RX,Der,Ger,BX,Oer,Ver,Xer,p8,zer,Gpe,Qer,Wer,Her,Mt,_8,Uer,Ope,Jer,Yer,$d,Ker,Vpe,Zer,eor,PX,oor,ror,tor,aM,aor,uo,b8,nor,Xpe,sor,lor,Ha,ior,zpe,dor,cor,Qpe,mor,gor,Wpe,hor,uor,por,Hpe,nM,Upe,_or,bor,IX,For,vor,Tor,sM,Mor,Jpe,Eor,Cor,Ype,wor,Aor,lM,SIe,kd,iM,Kpe,F8,yor,Zpe,Lor,RIe,Uo,v8,xor,Sd,$or,qX,kor,Sor,NX,Ror,Bor,Por,T8,Ior,e_e,qor,Nor,jor,Et,M8,Dor,o_e,Gor,Oor,Rd,Vor,r_e,Xor,zor,jX,Qor,Wor,Hor,dM,Uor,po,E8,Jor,t_e,Yor,Kor,Ua,Zor,a_e,err,orr,n_e,rrr,trr,s_e,arr,nrr,srr,Ja,cM,l_e,lrr,irr,DX,drr,crr,mrr,mM,i_e,frr,grr,GX,hrr,urr,prr,fM,d_e,_rr,brr,OX,Frr,vrr,Trr,gM,c_e,Mrr,Err,VX,Crr,wrr,Arr,hM,yrr,m_e,Lrr,xrr,f_e,$rr,krr,uM,BIe,Bd,pM,g_e,C8,Srr,h_e,Rrr,PIe,Jo,w8,Brr,Pd,Prr,XX,Irr,qrr,zX,Nrr,jrr,Drr,A8,Grr,u_e,Orr,Vrr,Xrr,Ct,y8,zrr,p_e,Qrr,Wrr,Id,Hrr,__e,Urr,Jrr,QX,Yrr,Krr,Zrr,_M,etr,_o,L8,otr,b_e,rtr,ttr,Ya,atr,F_e,ntr,str,v_e,ltr,itr,T_e,dtr,ctr,mtr,M_e,bM,E_e,ftr,gtr,WX,htr,utr,ptr,FM,_tr,C_e,btr,Ftr,w_e,vtr,Ttr,vM,IIe,qd,TM,A_e,x8,Mtr,y_e,Etr,qIe,Yo,$8,Ctr,Nd,wtr,HX,Atr,ytr,UX,Ltr,xtr,$tr,k8,ktr,L_e,Str,Rtr,Btr,wt,S8,Ptr,x_e,Itr,qtr,jd,Ntr,$_e,jtr,Dtr,JX,Gtr,Otr,Vtr,MM,Xtr,wr,R8,ztr,k_e,Qtr,Wtr,Ka,Htr,S_e,Utr,Jtr,R_e,Ytr,Ktr,B_e,Ztr,ear,oar,N,EM,P_e,rar,tar,YX,aar,nar,sar,CM,I_e,lar,iar,KX,dar,car,mar,wM,q_e,far,gar,ZX,har,uar,par,AM,N_e,_ar,bar,ez,Far,Tar,Mar,yM,j_e,Ear,Car,oz,war,Aar,yar,LM,D_e,Lar,xar,rz,$ar,kar,Sar,xM,G_e,Rar,Bar,tz,Par,Iar,qar,$M,O_e,Nar,jar,az,Dar,Gar,Oar,kM,V_e,Var,Xar,nz,zar,Qar,War,SM,X_e,Har,Uar,sz,Jar,Yar,Kar,RM,z_e,Zar,enr,lz,onr,rnr,tnr,BM,Q_e,anr,nnr,iz,snr,lnr,inr,PM,W_e,dnr,cnr,dz,mnr,fnr,gnr,IM,H_e,hnr,unr,cz,pnr,_nr,bnr,qM,U_e,Fnr,vnr,mz,Tnr,Mnr,Enr,NM,J_e,Cnr,wnr,fz,Anr,ynr,Lnr,jM,Y_e,xnr,$nr,gz,knr,Snr,Rnr,Bs,K_e,Bnr,Pnr,hz,Inr,qnr,uz,Nnr,jnr,Dnr,DM,Z_e,Gnr,Onr,pz,Vnr,Xnr,znr,GM,ebe,Qnr,Wnr,_z,Hnr,Unr,Jnr,OM,obe,Ynr,Knr,bz,Znr,esr,osr,VM,rbe,rsr,tsr,Fz,asr,nsr,ssr,XM,tbe,lsr,isr,vz,dsr,csr,msr,zM,abe,fsr,gsr,Tz,hsr,usr,psr,QM,nbe,_sr,bsr,Mz,Fsr,vsr,Tsr,WM,sbe,Msr,Esr,Ez,Csr,wsr,Asr,HM,lbe,ysr,Lsr,Cz,xsr,$sr,ksr,UM,ibe,Ssr,Rsr,wz,Bsr,Psr,Isr,JM,dbe,qsr,Nsr,Az,jsr,Dsr,Gsr,YM,cbe,Osr,Vsr,yz,Xsr,zsr,Qsr,KM,mbe,Wsr,Hsr,Lz,Usr,Jsr,Ysr,ZM,fbe,Ksr,Zsr,xz,elr,olr,rlr,e4,gbe,tlr,alr,$z,nlr,slr,llr,o4,hbe,ilr,dlr,kz,clr,mlr,flr,r4,ube,glr,hlr,Sz,ulr,plr,_lr,t4,pbe,blr,Flr,Rz,vlr,Tlr,Mlr,a4,_be,Elr,Clr,Bz,wlr,Alr,ylr,n4,bbe,Llr,xlr,Pz,$lr,klr,Slr,s4,Fbe,Rlr,Blr,Iz,Plr,Ilr,qlr,l4,vbe,Nlr,jlr,qz,Dlr,Glr,Olr,i4,Tbe,Vlr,Xlr,Nz,zlr,Qlr,Wlr,d4,Mbe,Hlr,Ulr,jz,Jlr,Ylr,Klr,c4,Ebe,Zlr,eir,Dz,oir,rir,tir,m4,Cbe,air,nir,Gz,sir,lir,iir,f4,wbe,dir,cir,Oz,mir,fir,gir,g4,NIe,Dd,h4,Abe,B8,hir,ybe,uir,jIe,Ko,P8,pir,Gd,_ir,Vz,bir,Fir,Xz,vir,Tir,Mir,I8,Eir,Lbe,Cir,wir,Air,At,q8,yir,xbe,Lir,xir,Od,$ir,$be,kir,Sir,zz,Rir,Bir,Pir,u4,Iir,Ar,N8,qir,kbe,Nir,jir,Za,Dir,Sbe,Gir,Oir,Rbe,Vir,Xir,Bbe,zir,Qir,Wir,se,p4,Pbe,Hir,Uir,Qz,Jir,Yir,Kir,_4,Ibe,Zir,edr,Wz,odr,rdr,tdr,b4,qbe,adr,ndr,Hz,sdr,ldr,idr,F4,Nbe,ddr,cdr,Uz,mdr,fdr,gdr,v4,jbe,hdr,udr,Jz,pdr,_dr,bdr,T4,Dbe,Fdr,vdr,Yz,Tdr,Mdr,Edr,M4,Gbe,Cdr,wdr,Kz,Adr,ydr,Ldr,E4,Obe,xdr,$dr,Zz,kdr,Sdr,Rdr,C4,Vbe,Bdr,Pdr,eQ,Idr,qdr,Ndr,w4,Xbe,jdr,Ddr,oQ,Gdr,Odr,Vdr,A4,zbe,Xdr,zdr,rQ,Qdr,Wdr,Hdr,y4,Qbe,Udr,Jdr,tQ,Ydr,Kdr,Zdr,L4,Wbe,ecr,ocr,aQ,rcr,tcr,acr,x4,Hbe,ncr,scr,nQ,lcr,icr,dcr,$4,Ube,ccr,mcr,sQ,fcr,gcr,hcr,k4,Jbe,ucr,pcr,lQ,_cr,bcr,Fcr,S4,Ybe,vcr,Tcr,iQ,Mcr,Ecr,Ccr,R4,Kbe,wcr,Acr,dQ,ycr,Lcr,xcr,B4,Zbe,$cr,kcr,cQ,Scr,Rcr,Bcr,P4,e2e,Pcr,Icr,mQ,qcr,Ncr,jcr,I4,o2e,Dcr,Gcr,fQ,Ocr,Vcr,Xcr,q4,r2e,zcr,Qcr,gQ,Wcr,Hcr,Ucr,N4,t2e,Jcr,Ycr,hQ,Kcr,Zcr,emr,j4,DIe,Vd,D4,a2e,j8,omr,n2e,rmr,GIe,Zo,D8,tmr,Xd,amr,uQ,nmr,smr,pQ,lmr,imr,dmr,G8,cmr,s2e,mmr,fmr,gmr,yt,O8,hmr,l2e,umr,pmr,zd,_mr,i2e,bmr,Fmr,_Q,vmr,Tmr,Mmr,G4,Emr,yr,V8,Cmr,d2e,wmr,Amr,en,ymr,c2e,Lmr,xmr,m2e,$mr,kmr,f2e,Smr,Rmr,Bmr,Te,O4,g2e,Pmr,Imr,bQ,qmr,Nmr,jmr,V4,h2e,Dmr,Gmr,FQ,Omr,Vmr,Xmr,X4,u2e,zmr,Qmr,vQ,Wmr,Hmr,Umr,z4,p2e,Jmr,Ymr,TQ,Kmr,Zmr,efr,Q4,_2e,ofr,rfr,MQ,tfr,afr,nfr,W4,b2e,sfr,lfr,EQ,ifr,dfr,cfr,H4,F2e,mfr,ffr,CQ,gfr,hfr,ufr,U4,v2e,pfr,_fr,wQ,bfr,Ffr,vfr,J4,T2e,Tfr,Mfr,AQ,Efr,Cfr,wfr,Y4,M2e,Afr,yfr,yQ,Lfr,xfr,$fr,K4,E2e,kfr,Sfr,LQ,Rfr,Bfr,Pfr,Z4,C2e,Ifr,qfr,xQ,Nfr,jfr,Dfr,eE,OIe,Qd,oE,w2e,X8,Gfr,A2e,Ofr,VIe,er,z8,Vfr,Wd,Xfr,$Q,zfr,Qfr,kQ,Wfr,Hfr,Ufr,Q8,Jfr,y2e,Yfr,Kfr,Zfr,Lt,W8,egr,L2e,ogr,rgr,Hd,tgr,x2e,agr,ngr,SQ,sgr,lgr,igr,rE,dgr,Lr,H8,cgr,$2e,mgr,fgr,on,ggr,k2e,hgr,ugr,S2e,pgr,_gr,R2e,bgr,Fgr,vgr,Ud,tE,B2e,Tgr,Mgr,RQ,Egr,Cgr,wgr,aE,P2e,Agr,ygr,BQ,Lgr,xgr,$gr,nE,I2e,kgr,Sgr,PQ,Rgr,Bgr,Pgr,sE,XIe,Jd,lE,q2e,U8,Igr,N2e,qgr,zIe,or,J8,Ngr,Yd,jgr,IQ,Dgr,Ggr,qQ,Ogr,Vgr,Xgr,Y8,zgr,j2e,Qgr,Wgr,Hgr,xt,K8,Ugr,D2e,Jgr,Ygr,Kd,Kgr,G2e,Zgr,ehr,NQ,ohr,rhr,thr,iE,ahr,xr,Z8,nhr,O2e,shr,lhr,rn,ihr,V2e,dhr,chr,X2e,mhr,fhr,z2e,ghr,hhr,uhr,ie,dE,Q2e,phr,_hr,jQ,bhr,Fhr,vhr,cE,W2e,Thr,Mhr,DQ,Ehr,Chr,whr,mE,H2e,Ahr,yhr,GQ,Lhr,xhr,$hr,fE,U2e,khr,Shr,OQ,Rhr,Bhr,Phr,gE,J2e,Ihr,qhr,VQ,Nhr,jhr,Dhr,hE,Y2e,Ghr,Ohr,XQ,Vhr,Xhr,zhr,uE,K2e,Qhr,Whr,zQ,Hhr,Uhr,Jhr,pE,Z2e,Yhr,Khr,QQ,Zhr,eur,our,_E,eFe,rur,tur,WQ,aur,nur,sur,bE,oFe,lur,iur,HQ,dur,cur,mur,FE,rFe,fur,gur,UQ,hur,uur,pur,vE,tFe,_ur,bur,JQ,Fur,vur,Tur,TE,aFe,Mur,Eur,YQ,Cur,wur,Aur,ME,nFe,yur,Lur,KQ,xur,$ur,kur,EE,sFe,Sur,Rur,ZQ,Bur,Pur,Iur,CE,lFe,qur,Nur,eW,jur,Dur,Gur,wE,iFe,Our,Vur,oW,Xur,zur,Qur,AE,dFe,Wur,Hur,rW,Uur,Jur,Yur,yE,cFe,Kur,Zur,tW,epr,opr,rpr,LE,mFe,tpr,apr,aW,npr,spr,lpr,xE,QIe,Zd,$E,fFe,ex,ipr,gFe,dpr,WIe,rr,ox,cpr,ec,mpr,nW,fpr,gpr,sW,hpr,upr,ppr,rx,_pr,hFe,bpr,Fpr,vpr,$t,tx,Tpr,uFe,Mpr,Epr,oc,Cpr,pFe,wpr,Apr,lW,ypr,Lpr,xpr,kE,$pr,$r,ax,kpr,_Fe,Spr,Rpr,tn,Bpr,bFe,Ppr,Ipr,FFe,qpr,Npr,vFe,jpr,Dpr,Gpr,ye,SE,TFe,Opr,Vpr,iW,Xpr,zpr,Qpr,RE,MFe,Wpr,Hpr,dW,Upr,Jpr,Ypr,BE,EFe,Kpr,Zpr,cW,e_r,o_r,r_r,PE,CFe,t_r,a_r,mW,n_r,s_r,l_r,IE,wFe,i_r,d_r,fW,c_r,m_r,f_r,qE,AFe,g_r,h_r,gW,u_r,p_r,__r,NE,yFe,b_r,F_r,hW,v_r,T_r,M_r,jE,LFe,E_r,C_r,uW,w_r,A_r,y_r,DE,xFe,L_r,x_r,pW,$_r,k_r,S_r,GE,$Fe,R_r,B_r,_W,P_r,I_r,q_r,OE,HIe,rc,VE,kFe,nx,N_r,SFe,j_r,UIe,tr,sx,D_r,tc,G_r,bW,O_r,V_r,FW,X_r,z_r,Q_r,lx,W_r,RFe,H_r,U_r,J_r,kt,ix,Y_r,BFe,K_r,Z_r,ac,ebr,PFe,obr,rbr,vW,tbr,abr,nbr,XE,sbr,kr,dx,lbr,IFe,ibr,dbr,an,cbr,qFe,mbr,fbr,NFe,gbr,hbr,jFe,ubr,pbr,_br,Z,zE,DFe,bbr,Fbr,TW,vbr,Tbr,Mbr,QE,GFe,Ebr,Cbr,MW,wbr,Abr,ybr,WE,OFe,Lbr,xbr,EW,$br,kbr,Sbr,HE,VFe,Rbr,Bbr,CW,Pbr,Ibr,qbr,UE,XFe,Nbr,jbr,wW,Dbr,Gbr,Obr,JE,zFe,Vbr,Xbr,AW,zbr,Qbr,Wbr,YE,QFe,Hbr,Ubr,yW,Jbr,Ybr,Kbr,KE,WFe,Zbr,e2r,LW,o2r,r2r,t2r,ZE,HFe,a2r,n2r,xW,s2r,l2r,i2r,e5,UFe,d2r,c2r,$W,m2r,f2r,g2r,o5,JFe,h2r,u2r,kW,p2r,_2r,b2r,r5,YFe,F2r,v2r,SW,T2r,M2r,E2r,t5,KFe,C2r,w2r,RW,A2r,y2r,L2r,a5,ZFe,x2r,$2r,BW,k2r,S2r,R2r,n5,eve,B2r,P2r,PW,I2r,q2r,N2r,s5,ove,j2r,D2r,IW,G2r,O2r,V2r,l5,rve,X2r,z2r,qW,Q2r,W2r,H2r,i5,tve,U2r,J2r,NW,Y2r,K2r,Z2r,d5,ave,eFr,oFr,jW,rFr,tFr,aFr,c5,nve,nFr,sFr,DW,lFr,iFr,dFr,m5,sve,cFr,mFr,GW,fFr,gFr,hFr,f5,lve,uFr,pFr,OW,_Fr,bFr,FFr,g5,ive,vFr,TFr,VW,MFr,EFr,CFr,h5,dve,wFr,AFr,XW,yFr,LFr,xFr,u5,cve,$Fr,kFr,zW,SFr,RFr,BFr,p5,mve,PFr,IFr,QW,qFr,NFr,jFr,_5,JIe,nc,b5,fve,cx,DFr,gve,GFr,YIe,ar,mx,OFr,sc,VFr,WW,XFr,zFr,HW,QFr,WFr,HFr,fx,UFr,hve,JFr,YFr,KFr,St,gx,ZFr,uve,evr,ovr,lc,rvr,pve,tvr,avr,UW,nvr,svr,lvr,F5,ivr,Sr,hx,dvr,_ve,cvr,mvr,nn,fvr,bve,gvr,hvr,Fve,uvr,pvr,vve,_vr,bvr,Fvr,he,v5,Tve,vvr,Tvr,JW,Mvr,Evr,Cvr,T5,Mve,wvr,Avr,YW,yvr,Lvr,xvr,M5,Eve,$vr,kvr,KW,Svr,Rvr,Bvr,E5,Cve,Pvr,Ivr,ZW,qvr,Nvr,jvr,C5,wve,Dvr,Gvr,eH,Ovr,Vvr,Xvr,w5,Ave,zvr,Qvr,oH,Wvr,Hvr,Uvr,A5,yve,Jvr,Yvr,rH,Kvr,Zvr,e1r,y5,Lve,o1r,r1r,tH,t1r,a1r,n1r,L5,xve,s1r,l1r,aH,i1r,d1r,c1r,x5,$ve,m1r,f1r,nH,g1r,h1r,u1r,$5,kve,p1r,_1r,sH,b1r,F1r,v1r,k5,Sve,T1r,M1r,lH,E1r,C1r,w1r,S5,Rve,A1r,y1r,iH,L1r,x1r,$1r,R5,Bve,k1r,S1r,dH,R1r,B1r,P1r,B5,Pve,I1r,q1r,cH,N1r,j1r,D1r,P5,Ive,G1r,O1r,mH,V1r,X1r,z1r,I5,qve,Q1r,W1r,fH,H1r,U1r,J1r,q5,KIe,ic,N5,Nve,ux,Y1r,jve,K1r,ZIe,nr,px,Z1r,dc,eTr,gH,oTr,rTr,hH,tTr,aTr,nTr,_x,sTr,Dve,lTr,iTr,dTr,Rt,bx,cTr,Gve,mTr,fTr,cc,gTr,Ove,hTr,uTr,uH,pTr,_Tr,bTr,j5,FTr,Rr,Fx,vTr,Vve,TTr,MTr,sn,ETr,Xve,CTr,wTr,zve,ATr,yTr,Qve,LTr,xTr,$Tr,vx,D5,Wve,kTr,STr,pH,RTr,BTr,PTr,G5,Hve,ITr,qTr,_H,NTr,jTr,DTr,O5,eqe,mc,V5,Uve,Tx,GTr,Jve,OTr,oqe,sr,Mx,VTr,fc,XTr,bH,zTr,QTr,FH,WTr,HTr,UTr,Ex,JTr,Yve,YTr,KTr,ZTr,Bt,Cx,eMr,Kve,oMr,rMr,gc,tMr,Zve,aMr,nMr,vH,sMr,lMr,iMr,X5,dMr,Br,wx,cMr,e1e,mMr,fMr,ln,gMr,o1e,hMr,uMr,r1e,pMr,_Mr,t1e,bMr,FMr,vMr,a1e,z5,n1e,TMr,MMr,TH,EMr,CMr,wMr,Q5,rqe,hc,W5,s1e,Ax,AMr,l1e,yMr,tqe,lr,yx,LMr,uc,xMr,MH,$Mr,kMr,EH,SMr,RMr,BMr,Lx,PMr,i1e,IMr,qMr,NMr,Pt,xx,jMr,d1e,DMr,GMr,pc,OMr,c1e,VMr,XMr,CH,zMr,QMr,WMr,H5,HMr,Pr,$x,UMr,m1e,JMr,YMr,dn,KMr,f1e,ZMr,e4r,g1e,o4r,r4r,h1e,t4r,a4r,n4r,de,U5,u1e,s4r,l4r,wH,i4r,d4r,c4r,J5,p1e,m4r,f4r,AH,g4r,h4r,u4r,Y5,_1e,p4r,_4r,yH,b4r,F4r,v4r,K5,b1e,T4r,M4r,LH,E4r,C4r,w4r,Z5,F1e,A4r,y4r,xH,L4r,x4r,$4r,eC,v1e,k4r,S4r,$H,R4r,B4r,P4r,oC,T1e,I4r,q4r,kH,N4r,j4r,D4r,rC,M1e,G4r,O4r,SH,V4r,X4r,z4r,tC,E1e,Q4r,W4r,RH,H4r,U4r,J4r,aC,C1e,Y4r,K4r,BH,Z4r,eEr,oEr,nC,w1e,rEr,tEr,PH,aEr,nEr,sEr,sC,A1e,lEr,iEr,IH,dEr,cEr,mEr,lC,y1e,fEr,gEr,qH,hEr,uEr,pEr,iC,L1e,_Er,bEr,NH,FEr,vEr,TEr,dC,x1e,MEr,EEr,jH,CEr,wEr,AEr,cC,$1e,yEr,LEr,DH,xEr,$Er,kEr,mC,k1e,SEr,REr,GH,BEr,PEr,IEr,fC,S1e,qEr,NEr,OH,jEr,DEr,GEr,gC,R1e,OEr,VEr,VH,XEr,zEr,QEr,hC,B1e,WEr,HEr,XH,UEr,JEr,YEr,uC,aqe,_c,pC,P1e,kx,KEr,I1e,ZEr,nqe,ir,Sx,e5r,bc,o5r,zH,r5r,t5r,QH,a5r,n5r,s5r,Rx,l5r,q1e,i5r,d5r,c5r,It,Bx,m5r,N1e,f5r,g5r,Fc,h5r,j1e,u5r,p5r,WH,_5r,b5r,F5r,_C,v5r,Ir,Px,T5r,D1e,M5r,E5r,cn,C5r,G1e,w5r,A5r,O1e,y5r,L5r,V1e,x5r,$5r,k5r,ce,bC,X1e,S5r,R5r,HH,B5r,P5r,I5r,FC,z1e,q5r,N5r,UH,j5r,D5r,G5r,vC,Q1e,O5r,V5r,JH,X5r,z5r,Q5r,TC,W1e,W5r,H5r,YH,U5r,J5r,Y5r,MC,H1e,K5r,Z5r,KH,eCr,oCr,rCr,EC,U1e,tCr,aCr,ZH,nCr,sCr,lCr,CC,J1e,iCr,dCr,eU,cCr,mCr,fCr,wC,Y1e,gCr,hCr,oU,uCr,pCr,_Cr,AC,K1e,bCr,FCr,rU,vCr,TCr,MCr,yC,Z1e,ECr,CCr,tU,wCr,ACr,yCr,LC,eTe,LCr,xCr,aU,$Cr,kCr,SCr,xC,oTe,RCr,BCr,nU,PCr,ICr,qCr,$C,rTe,NCr,jCr,sU,DCr,GCr,OCr,kC,tTe,VCr,XCr,lU,zCr,QCr,WCr,SC,aTe,HCr,UCr,iU,JCr,YCr,KCr,RC,nTe,ZCr,e3r,dU,o3r,r3r,t3r,BC,sTe,a3r,n3r,cU,s3r,l3r,i3r,PC,lTe,d3r,c3r,mU,m3r,f3r,g3r,IC,iTe,h3r,u3r,fU,p3r,_3r,b3r,qC,dTe,F3r,v3r,gU,T3r,M3r,E3r,NC,sqe,vc,jC,cTe,Ix,C3r,mTe,w3r,lqe,dr,qx,A3r,Tc,y3r,hU,L3r,x3r,uU,$3r,k3r,S3r,Nx,R3r,fTe,B3r,P3r,I3r,qt,jx,q3r,gTe,N3r,j3r,Mc,D3r,hTe,G3r,O3r,pU,V3r,X3r,z3r,DC,Q3r,qr,Dx,W3r,uTe,H3r,U3r,mn,J3r,pTe,Y3r,K3r,_Te,Z3r,ewr,bTe,owr,rwr,twr,FTe,GC,vTe,awr,nwr,_U,swr,lwr,iwr,OC,iqe,Ec,VC,TTe,Gx,dwr,MTe,cwr,dqe,cr,Ox,mwr,Cc,fwr,bU,gwr,hwr,FU,uwr,pwr,_wr,Vx,bwr,ETe,Fwr,vwr,Twr,Nt,Xx,Mwr,CTe,Ewr,Cwr,wc,wwr,wTe,Awr,ywr,vU,Lwr,xwr,$wr,XC,kwr,Nr,zx,Swr,ATe,Rwr,Bwr,fn,Pwr,yTe,Iwr,qwr,LTe,Nwr,jwr,xTe,Dwr,Gwr,Owr,$Te,zC,kTe,Vwr,Xwr,TU,zwr,Qwr,Wwr,QC,cqe,Ac,WC,STe,Qx,Hwr,RTe,Uwr,mqe,mr,Wx,Jwr,yc,Ywr,MU,Kwr,Zwr,EU,eAr,oAr,rAr,Hx,tAr,BTe,aAr,nAr,sAr,jt,Ux,lAr,PTe,iAr,dAr,Lc,cAr,ITe,mAr,fAr,CU,gAr,hAr,uAr,HC,pAr,jr,Jx,_Ar,qTe,bAr,FAr,gn,vAr,NTe,TAr,MAr,jTe,EAr,CAr,DTe,wAr,AAr,yAr,re,UC,GTe,LAr,xAr,wU,$Ar,kAr,SAr,JC,OTe,RAr,BAr,AU,PAr,IAr,qAr,YC,VTe,NAr,jAr,yU,DAr,GAr,OAr,KC,XTe,VAr,XAr,LU,zAr,QAr,WAr,ZC,zTe,HAr,UAr,xU,JAr,YAr,KAr,e3,QTe,ZAr,e0r,$U,o0r,r0r,t0r,o3,WTe,a0r,n0r,kU,s0r,l0r,i0r,r3,HTe,d0r,c0r,SU,m0r,f0r,g0r,t3,UTe,h0r,u0r,RU,p0r,_0r,b0r,a3,JTe,F0r,v0r,BU,T0r,M0r,E0r,n3,YTe,C0r,w0r,PU,A0r,y0r,L0r,s3,KTe,x0r,$0r,IU,k0r,S0r,R0r,l3,ZTe,B0r,P0r,qU,I0r,q0r,N0r,i3,eMe,j0r,D0r,NU,G0r,O0r,V0r,d3,oMe,X0r,z0r,jU,Q0r,W0r,H0r,c3,rMe,U0r,J0r,DU,Y0r,K0r,Z0r,m3,tMe,e6r,o6r,GU,r6r,t6r,a6r,f3,aMe,n6r,s6r,OU,l6r,i6r,d6r,g3,nMe,c6r,m6r,VU,f6r,g6r,h6r,h3,sMe,u6r,p6r,XU,_6r,b6r,F6r,u3,lMe,v6r,T6r,zU,M6r,E6r,C6r,p3,iMe,w6r,A6r,QU,y6r,L6r,x6r,_3,dMe,$6r,k6r,WU,S6r,R6r,B6r,b3,cMe,P6r,I6r,HU,q6r,N6r,j6r,F3,mMe,D6r,G6r,UU,O6r,V6r,X6r,v3,fqe,xc,T3,fMe,Yx,z6r,gMe,Q6r,gqe,fr,Kx,W6r,$c,H6r,JU,U6r,J6r,YU,Y6r,K6r,Z6r,Zx,eyr,hMe,oyr,ryr,tyr,Dt,e7,ayr,uMe,nyr,syr,kc,lyr,pMe,iyr,dyr,KU,cyr,myr,fyr,M3,gyr,Dr,o7,hyr,_Me,uyr,pyr,hn,_yr,bMe,byr,Fyr,FMe,vyr,Tyr,vMe,Myr,Eyr,Cyr,ke,E3,TMe,wyr,Ayr,ZU,yyr,Lyr,xyr,C3,MMe,$yr,kyr,eJ,Syr,Ryr,Byr,w3,EMe,Pyr,Iyr,oJ,qyr,Nyr,jyr,A3,CMe,Dyr,Gyr,rJ,Oyr,Vyr,Xyr,y3,wMe,zyr,Qyr,tJ,Wyr,Hyr,Uyr,L3,AMe,Jyr,Yyr,aJ,Kyr,Zyr,eLr,x3,yMe,oLr,rLr,nJ,tLr,aLr,nLr,$3,LMe,sLr,lLr,sJ,iLr,dLr,cLr,k3,xMe,mLr,fLr,lJ,gLr,hLr,uLr,S3,hqe,Sc,R3,$Me,r7,pLr,kMe,_Lr,uqe,gr,t7,bLr,Rc,FLr,iJ,vLr,TLr,dJ,MLr,ELr,CLr,a7,wLr,SMe,ALr,yLr,LLr,Gt,n7,xLr,RMe,$Lr,kLr,Bc,SLr,BMe,RLr,BLr,cJ,PLr,ILr,qLr,B3,NLr,Gr,s7,jLr,PMe,DLr,GLr,un,OLr,IMe,VLr,XLr,qMe,zLr,QLr,NMe,WLr,HLr,ULr,Me,P3,jMe,JLr,YLr,mJ,KLr,ZLr,e8r,I3,DMe,o8r,r8r,fJ,t8r,a8r,n8r,q3,GMe,s8r,l8r,gJ,i8r,d8r,c8r,N3,OMe,m8r,f8r,hJ,g8r,h8r,u8r,j3,VMe,p8r,_8r,uJ,b8r,F8r,v8r,D3,XMe,T8r,M8r,pJ,E8r,C8r,w8r,G3,zMe,A8r,y8r,_J,L8r,x8r,$8r,O3,QMe,k8r,S8r,bJ,R8r,B8r,P8r,V3,WMe,I8r,q8r,FJ,N8r,j8r,D8r,X3,HMe,G8r,O8r,vJ,V8r,X8r,z8r,z3,UMe,Q8r,W8r,TJ,H8r,U8r,J8r,Q3,JMe,Y8r,K8r,MJ,Z8r,exr,oxr,W3,pqe,Pc,H3,YMe,l7,rxr,KMe,txr,_qe,hr,i7,axr,Ic,nxr,EJ,sxr,lxr,CJ,ixr,dxr,cxr,d7,mxr,ZMe,fxr,gxr,hxr,Ot,c7,uxr,e4e,pxr,_xr,qc,bxr,o4e,Fxr,vxr,wJ,Txr,Mxr,Exr,U3,Cxr,Or,m7,wxr,r4e,Axr,yxr,pn,Lxr,t4e,xxr,$xr,a4e,kxr,Sxr,n4e,Rxr,Bxr,Pxr,Le,J3,s4e,Ixr,qxr,AJ,Nxr,jxr,Dxr,Y3,l4e,Gxr,Oxr,yJ,Vxr,Xxr,zxr,K3,i4e,Qxr,Wxr,LJ,Hxr,Uxr,Jxr,Z3,d4e,Yxr,Kxr,xJ,Zxr,e7r,o7r,ew,c4e,r7r,t7r,$J,a7r,n7r,s7r,ow,m4e,l7r,i7r,kJ,d7r,c7r,m7r,rw,f4e,f7r,g7r,SJ,h7r,u7r,p7r,tw,g4e,_7r,b7r,RJ,F7r,v7r,T7r,aw,h4e,M7r,E7r,BJ,C7r,w7r,A7r,nw,u4e,y7r,L7r,PJ,x7r,$7r,k7r,sw,bqe,Nc,lw,p4e,f7,S7r,_4e,R7r,Fqe,ur,g7,B7r,jc,P7r,IJ,I7r,q7r,qJ,N7r,j7r,D7r,h7,G7r,b4e,O7r,V7r,X7r,Vt,u7,z7r,F4e,Q7r,W7r,Dc,H7r,v4e,U7r,J7r,NJ,Y7r,K7r,Z7r,iw,e9r,Vr,p7,o9r,T4e,r9r,t9r,_n,a9r,M4e,n9r,s9r,E4e,l9r,i9r,C4e,d9r,c9r,m9r,Se,dw,w4e,f9r,g9r,jJ,h9r,u9r,p9r,cw,A4e,_9r,b9r,DJ,F9r,v9r,T9r,mw,y4e,M9r,E9r,GJ,C9r,w9r,A9r,fw,L4e,y9r,L9r,OJ,x9r,$9r,k9r,gw,x4e,S9r,R9r,VJ,B9r,P9r,I9r,hw,$4e,q9r,N9r,XJ,j9r,D9r,G9r,uw,k4e,O9r,V9r,zJ,X9r,z9r,Q9r,pw,S4e,W9r,H9r,QJ,U9r,J9r,Y9r,_w,R4e,K9r,Z9r,WJ,e$r,o$r,r$r,bw,vqe,Gc,Fw,B4e,_7,t$r,P4e,a$r,Tqe,pr,b7,n$r,Oc,s$r,HJ,l$r,i$r,UJ,d$r,c$r,m$r,F7,f$r,I4e,g$r,h$r,u$r,Xt,v7,p$r,q4e,_$r,b$r,Vc,F$r,N4e,v$r,T$r,JJ,M$r,E$r,C$r,vw,w$r,Xr,T7,A$r,j4e,y$r,L$r,bn,x$r,D4e,$$r,k$r,G4e,S$r,R$r,O4e,B$r,P$r,I$r,xe,Tw,V4e,q$r,N$r,YJ,j$r,D$r,G$r,Mw,X4e,O$r,V$r,KJ,X$r,z$r,Q$r,Ew,z4e,W$r,H$r,ZJ,U$r,J$r,Y$r,Cw,Q4e,K$r,Z$r,eY,ekr,okr,rkr,ww,W4e,tkr,akr,oY,nkr,skr,lkr,Aw,H4e,ikr,dkr,rY,ckr,mkr,fkr,yw,U4e,gkr,hkr,tY,ukr,pkr,_kr,Lw,J4e,bkr,Fkr,aY,vkr,Tkr,Mkr,xw,Y4e,Ekr,Ckr,nY,wkr,Akr,ykr,$w,K4e,Lkr,xkr,sY,$kr,kkr,Skr,kw,Mqe,Xc,Sw,Z4e,M7,Rkr,eEe,Bkr,Eqe,_r,E7,Pkr,zc,Ikr,lY,qkr,Nkr,iY,jkr,Dkr,Gkr,C7,Okr,oEe,Vkr,Xkr,zkr,zt,w7,Qkr,rEe,Wkr,Hkr,Qc,Ukr,tEe,Jkr,Ykr,dY,Kkr,Zkr,eSr,Rw,oSr,zr,A7,rSr,aEe,tSr,aSr,Fn,nSr,nEe,sSr,lSr,sEe,iSr,dSr,lEe,cSr,mSr,fSr,$e,Bw,iEe,gSr,hSr,cY,uSr,pSr,_Sr,Pw,dEe,bSr,FSr,mY,vSr,TSr,MSr,Iw,cEe,ESr,CSr,fY,wSr,ASr,ySr,qw,mEe,LSr,xSr,gY,$Sr,kSr,SSr,Nw,fEe,RSr,BSr,hY,PSr,ISr,qSr,jw,gEe,NSr,jSr,uY,DSr,GSr,OSr,Dw,hEe,VSr,XSr,pY,zSr,QSr,WSr,Gw,uEe,HSr,USr,_Y,JSr,YSr,KSr,Ow,pEe,ZSr,eRr,bY,oRr,rRr,tRr,Vw,_Ee,aRr,nRr,FY,sRr,lRr,iRr,Xw,Cqe,Wc,zw,bEe,y7,dRr,FEe,cRr,wqe,br,L7,mRr,Hc,fRr,vY,gRr,hRr,TY,uRr,pRr,_Rr,x7,bRr,vEe,FRr,vRr,TRr,Qt,$7,MRr,TEe,ERr,CRr,Uc,wRr,MEe,ARr,yRr,MY,LRr,xRr,$Rr,Qw,kRr,Qr,k7,SRr,EEe,RRr,BRr,vn,PRr,CEe,IRr,qRr,wEe,NRr,jRr,AEe,DRr,GRr,ORr,De,Ww,yEe,VRr,XRr,EY,zRr,QRr,WRr,Hw,LEe,HRr,URr,CY,JRr,YRr,KRr,Uw,xEe,ZRr,eBr,wY,oBr,rBr,tBr,Jw,$Ee,aBr,nBr,AY,sBr,lBr,iBr,Yw,kEe,dBr,cBr,yY,mBr,fBr,gBr,Kw,SEe,hBr,uBr,LY,pBr,_Br,bBr,Zw,REe,FBr,vBr,xY,TBr,MBr,EBr,eA,BEe,CBr,wBr,$Y,ABr,yBr,LBr,oA,Aqe,Jc,rA,PEe,S7,xBr,IEe,$Br,yqe,Fr,R7,kBr,Yc,SBr,kY,RBr,BBr,SY,PBr,IBr,qBr,B7,NBr,qEe,jBr,DBr,GBr,Wt,P7,OBr,NEe,VBr,XBr,Kc,zBr,jEe,QBr,WBr,RY,HBr,UBr,JBr,tA,YBr,Wr,I7,KBr,DEe,ZBr,ePr,Tn,oPr,GEe,rPr,tPr,OEe,aPr,nPr,VEe,sPr,lPr,iPr,Ge,aA,XEe,dPr,cPr,BY,mPr,fPr,gPr,nA,zEe,hPr,uPr,PY,pPr,_Pr,bPr,sA,QEe,FPr,vPr,IY,TPr,MPr,EPr,lA,WEe,CPr,wPr,qY,APr,yPr,LPr,iA,HEe,xPr,$Pr,NY,kPr,SPr,RPr,dA,UEe,BPr,PPr,jY,IPr,qPr,NPr,cA,JEe,jPr,DPr,DY,GPr,OPr,VPr,mA,YEe,XPr,zPr,GY,QPr,WPr,HPr,fA,Lqe,Zc,gA,KEe,q7,UPr,ZEe,JPr,xqe,vr,N7,YPr,em,KPr,OY,ZPr,eIr,VY,oIr,rIr,tIr,j7,aIr,e5e,nIr,sIr,lIr,Ht,D7,iIr,o5e,dIr,cIr,om,mIr,r5e,fIr,gIr,XY,hIr,uIr,pIr,hA,_Ir,Hr,G7,bIr,t5e,FIr,vIr,Mn,TIr,a5e,MIr,EIr,n5e,CIr,wIr,s5e,AIr,yIr,LIr,l5e,uA,i5e,xIr,$Ir,zY,kIr,SIr,RIr,pA,$qe,rm,_A,d5e,O7,BIr,c5e,PIr,kqe,Tr,V7,IIr,tm,qIr,QY,NIr,jIr,WY,DIr,GIr,OIr,X7,VIr,m5e,XIr,zIr,QIr,Ut,z7,WIr,f5e,HIr,UIr,am,JIr,g5e,YIr,KIr,HY,ZIr,eqr,oqr,bA,rqr,Ur,Q7,tqr,h5e,aqr,nqr,En,sqr,u5e,lqr,iqr,p5e,dqr,cqr,_5e,mqr,fqr,gqr,W7,FA,b5e,hqr,uqr,UY,pqr,_qr,bqr,vA,F5e,Fqr,vqr,JY,Tqr,Mqr,Eqr,TA,Sqe,nm,MA,v5e,H7,Cqr,T5e,wqr,Rqe,Mr,U7,Aqr,sm,yqr,YY,Lqr,xqr,KY,$qr,kqr,Sqr,J7,Rqr,M5e,Bqr,Pqr,Iqr,Jt,Y7,qqr,E5e,Nqr,jqr,lm,Dqr,C5e,Gqr,Oqr,ZY,Vqr,Xqr,zqr,EA,Qqr,Jr,K7,Wqr,w5e,Hqr,Uqr,Cn,Jqr,A5e,Yqr,Kqr,y5e,Zqr,eNr,L5e,oNr,rNr,tNr,x5e,CA,$5e,aNr,nNr,eK,sNr,lNr,iNr,wA,Bqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),H6=new ee({}),U6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),pm=new dNr({props:{warning:!0,$$slots:{default:[R6t]},$$scope:{ctx:A}}}),J6=new ee({}),Y6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L570"}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L593"}}),ug=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[B6t]},$$scope:{ctx:A}}}),oy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L716"}}),ry=new ee({}),ty=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L387"}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L401"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[P6t]},$$scope:{ctx:A}}}),ly=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L597"}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L200"}}),Mh=new dNr({props:{$$slots:{default:[I6t]},$$scope:{ctx:A}}}),Eh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[q6t]},$$scope:{ctx:A}}}),gy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L327"}}),hy=new ee({}),uy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L86"}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L100"}}),Gh=new dNr({props:{$$slots:{default:[N6t]},$$scope:{ctx:A}}}),Oh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[j6t]},$$scope:{ctx:A}}}),Fy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L253"}}),vy=new ee({}),Ty=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L719"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[D6t]},$$scope:{ctx:A}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Pp=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[G6t]},$$scope:{ctx:A}}}),wy=new ee({}),Ay=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L726"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[O6t]},$$scope:{ctx:A}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[V6t]},$$scope:{ctx:A}}}),$y=new ee({}),ky=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L741"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[X6t]},$$scope:{ctx:A}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[z6t]},$$scope:{ctx:A}}}),Py=new ee({}),Iy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L748"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Q6t]},$$scope:{ctx:A}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[W6t]},$$scope:{ctx:A}}}),Dy=new ee({}),Gy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L755"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[H6t]},$$scope:{ctx:A}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[U6t]},$$scope:{ctx:A}}}),zy=new ee({}),Qy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L764"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[J6t]},$$scope:{ctx:A}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Y6t]},$$scope:{ctx:A}}}),Jy=new ee({}),Yy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L798"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[K6t]},$$scope:{ctx:A}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Z6t]},$$scope:{ctx:A}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L805"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L791"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),mL=new ee({}),fL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L773"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A1=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),pL=new ee({}),_L=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L780"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L814"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),AL=new ee({}),yL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),IL=new ee({}),qL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L874"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[byt]},$$scope:{ctx:A}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:A}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L892"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:A}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:A}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L899"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:A}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:A}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L846"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:A}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:A}}}),h8=new ee({}),u8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L821"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:A}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:A}}}),F8=new ee({}),v8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L828"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:A}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:A}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L837"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:A}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:A}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:A}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:A}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:A}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:A}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:A}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:A}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:A}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:A}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:A}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:A}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:A}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:A}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:A}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:A}}}),cx=new ee({}),mx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:A}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:A}}}),ux=new ee({}),px=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:A}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:A}}}),Tx=new ee({}),Mx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:A}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:A}}}),Ax=new ee({}),yx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:A}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:A}}}),kx=new ee({}),Sx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:A}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:A}}}),Ix=new ee({}),qx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:A}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:A}}}),Gx=new ee({}),Ox=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:A}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:A}}}),Qx=new ee({}),Wx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:A}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:A}}}),Yx=new ee({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),e7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:A}}}),o7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:A}}}),r7=new ee({}),t7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),n7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:A}}}),s7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mLt]},$$scope:{ctx:A}}}),l7=new ee({}),i7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),c7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[fLt]},$$scope:{ctx:A}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:A}}}),f7=new ee({}),g7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),u7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:A}}}),p7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uLt]},$$scope:{ctx:A}}}),_7=new ee({}),b7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),v7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[pLt]},$$scope:{ctx:A}}}),T7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:A}}}),M7=new ee({}),E7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),w7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:A}}}),A7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[FLt]},$$scope:{ctx:A}}}),y7=new ee({}),L7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),$7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[vLt]},$$scope:{ctx:A}}}),k7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:A}}}),S7=new ee({}),R7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),P7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:A}}}),I7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:A}}}),q7=new ee({}),N7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),D7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:A}}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:A}}}),O7=new ee({}),V7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),z7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:A}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:A}}}),H7=new ee({}),U7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Y7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:A}}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),F=l(),u=a("h1"),f=a("a"),p=a("span"),v(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mm=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),X6=o("from_pretrained()"),fm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),z6=o("AutoConfig"),yn=o(", "),Ln=a("a"),Q6=o("AutoModel"),mi=o(`, and
`),xn=a("a"),W6=o("AutoTokenizer"),fi=o(" will directly create a class of the relevant architecture. For instance"),gm=l(),v(Ma.$$.fragment),ze=l(),Ae=a("p"),m$=o("will create a model that is an instance of "),gi=a("a"),f$=o("BertModel"),g$=o("."),Eo=l(),Ea=a("p"),h$=o("There is one class of "),hm=a("code"),u$=o("AutoModel"),Oje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kPe=l(),hi=a("h2"),um=a("a"),HZ=a("span"),v(H6.$$.fragment),Vje=l(),UZ=a("span"),Xje=o("Extending the Auto Classes"),SPe=l(),$n=a("p"),zje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),JZ=a("code"),Qje=o("NewModel"),Wje=o(", make sure you have a "),YZ=a("code"),Hje=o("NewModelConfig"),Uje=o(` then you can add those to the auto
classes like this:`),RPe=l(),v(U6.$$.fragment),BPe=l(),p$=a("p"),Jje=o("You will then be able to use the auto classes like you would usually do!"),PPe=l(),v(pm.$$.fragment),IPe=l(),ui=a("h2"),_m=a("a"),KZ=a("span"),v(J6.$$.fragment),Yje=l(),ZZ=a("span"),Kje=o("AutoConfig"),qPe=l(),Co=a("div"),v(Y6.$$.fragment),Zje=l(),K6=a("p"),eDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_$=a("a"),oDe=o("from_pretrained()"),rDe=o(" class method."),tDe=l(),Z6=a("p"),aDe=o("This class cannot be instantiated directly using "),eee=a("code"),nDe=o("__init__()"),sDe=o(" (throws an error)."),lDe=l(),Er=a("div"),v(ey.$$.fragment),iDe=l(),oee=a("p"),dDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cDe=l(),pi=a("p"),mDe=o("The configuration class to instantiate is selected based on the "),ree=a("code"),fDe=o("model_type"),gDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tee=a("code"),hDe=o("pretrained_model_name_or_path"),uDe=o(":"),pDe=l(),y=a("ul"),bm=a("li"),aee=a("strong"),_De=o("albert"),bDe=o(" \u2014 "),b$=a("a"),FDe=o("AlbertConfig"),vDe=o(" (ALBERT model)"),TDe=l(),Fm=a("li"),nee=a("strong"),MDe=o("bart"),EDe=o(" \u2014 "),F$=a("a"),CDe=o("BartConfig"),wDe=o(" (BART model)"),ADe=l(),vm=a("li"),see=a("strong"),yDe=o("beit"),LDe=o(" \u2014 "),v$=a("a"),xDe=o("BeitConfig"),$De=o(" (BEiT model)"),kDe=l(),Tm=a("li"),lee=a("strong"),SDe=o("bert"),RDe=o(" \u2014 "),T$=a("a"),BDe=o("BertConfig"),PDe=o(" (BERT model)"),IDe=l(),Mm=a("li"),iee=a("strong"),qDe=o("bert-generation"),NDe=o(" \u2014 "),M$=a("a"),jDe=o("BertGenerationConfig"),DDe=o(" (Bert Generation model)"),GDe=l(),Em=a("li"),dee=a("strong"),ODe=o("big_bird"),VDe=o(" \u2014 "),E$=a("a"),XDe=o("BigBirdConfig"),zDe=o(" (BigBird model)"),QDe=l(),Cm=a("li"),cee=a("strong"),WDe=o("bigbird_pegasus"),HDe=o(" \u2014 "),C$=a("a"),UDe=o("BigBirdPegasusConfig"),JDe=o(" (BigBirdPegasus model)"),YDe=l(),wm=a("li"),mee=a("strong"),KDe=o("blenderbot"),ZDe=o(" \u2014 "),w$=a("a"),eGe=o("BlenderbotConfig"),oGe=o(" (Blenderbot model)"),rGe=l(),Am=a("li"),fee=a("strong"),tGe=o("blenderbot-small"),aGe=o(" \u2014 "),A$=a("a"),nGe=o("BlenderbotSmallConfig"),sGe=o(" (BlenderbotSmall model)"),lGe=l(),ym=a("li"),gee=a("strong"),iGe=o("camembert"),dGe=o(" \u2014 "),y$=a("a"),cGe=o("CamembertConfig"),mGe=o(" (CamemBERT model)"),fGe=l(),Lm=a("li"),hee=a("strong"),gGe=o("canine"),hGe=o(" \u2014 "),L$=a("a"),uGe=o("CanineConfig"),pGe=o(" (Canine model)"),_Ge=l(),xm=a("li"),uee=a("strong"),bGe=o("clip"),FGe=o(" \u2014 "),x$=a("a"),vGe=o("CLIPConfig"),TGe=o(" (CLIP model)"),MGe=l(),$m=a("li"),pee=a("strong"),EGe=o("convbert"),CGe=o(" \u2014 "),$$=a("a"),wGe=o("ConvBertConfig"),AGe=o(" (ConvBERT model)"),yGe=l(),km=a("li"),_ee=a("strong"),LGe=o("convnext"),xGe=o(" \u2014 "),k$=a("a"),$Ge=o("ConvNextConfig"),kGe=o(" (ConvNext model)"),SGe=l(),Sm=a("li"),bee=a("strong"),RGe=o("ctrl"),BGe=o(" \u2014 "),S$=a("a"),PGe=o("CTRLConfig"),IGe=o(" (CTRL model)"),qGe=l(),Rm=a("li"),Fee=a("strong"),NGe=o("data2vec-audio"),jGe=o(" \u2014 "),R$=a("a"),DGe=o("Data2VecAudioConfig"),GGe=o(" (Data2VecAudio model)"),OGe=l(),Bm=a("li"),vee=a("strong"),VGe=o("data2vec-text"),XGe=o(" \u2014 "),B$=a("a"),zGe=o("Data2VecTextConfig"),QGe=o(" (Data2VecText model)"),WGe=l(),Pm=a("li"),Tee=a("strong"),HGe=o("data2vec-vision"),UGe=o(" \u2014 "),P$=a("a"),JGe=o("Data2VecVisionConfig"),YGe=o(" (Data2VecVision model)"),KGe=l(),Im=a("li"),Mee=a("strong"),ZGe=o("deberta"),eOe=o(" \u2014 "),I$=a("a"),oOe=o("DebertaConfig"),rOe=o(" (DeBERTa model)"),tOe=l(),qm=a("li"),Eee=a("strong"),aOe=o("deberta-v2"),nOe=o(" \u2014 "),q$=a("a"),sOe=o("DebertaV2Config"),lOe=o(" (DeBERTa-v2 model)"),iOe=l(),Nm=a("li"),Cee=a("strong"),dOe=o("decision_transformer"),cOe=o(" \u2014 "),N$=a("a"),mOe=o("DecisionTransformerConfig"),fOe=o(" (Decision Transformer model)"),gOe=l(),jm=a("li"),wee=a("strong"),hOe=o("deit"),uOe=o(" \u2014 "),j$=a("a"),pOe=o("DeiTConfig"),_Oe=o(" (DeiT model)"),bOe=l(),Dm=a("li"),Aee=a("strong"),FOe=o("detr"),vOe=o(" \u2014 "),D$=a("a"),TOe=o("DetrConfig"),MOe=o(" (DETR model)"),EOe=l(),Gm=a("li"),yee=a("strong"),COe=o("distilbert"),wOe=o(" \u2014 "),G$=a("a"),AOe=o("DistilBertConfig"),yOe=o(" (DistilBERT model)"),LOe=l(),Om=a("li"),Lee=a("strong"),xOe=o("dpr"),$Oe=o(" \u2014 "),O$=a("a"),kOe=o("DPRConfig"),SOe=o(" (DPR model)"),ROe=l(),Vm=a("li"),xee=a("strong"),BOe=o("dpt"),POe=o(" \u2014 "),V$=a("a"),IOe=o("DPTConfig"),qOe=o(" (DPT model)"),NOe=l(),Xm=a("li"),$ee=a("strong"),jOe=o("electra"),DOe=o(" \u2014 "),X$=a("a"),GOe=o("ElectraConfig"),OOe=o(" (ELECTRA model)"),VOe=l(),zm=a("li"),kee=a("strong"),XOe=o("encoder-decoder"),zOe=o(" \u2014 "),z$=a("a"),QOe=o("EncoderDecoderConfig"),WOe=o(" (Encoder decoder model)"),HOe=l(),Qm=a("li"),See=a("strong"),UOe=o("flaubert"),JOe=o(" \u2014 "),Q$=a("a"),YOe=o("FlaubertConfig"),KOe=o(" (FlauBERT model)"),ZOe=l(),Wm=a("li"),Ree=a("strong"),eVe=o("flava"),oVe=o(" \u2014 "),W$=a("a"),rVe=o("FlavaConfig"),tVe=o(" (Flava model)"),aVe=l(),Hm=a("li"),Bee=a("strong"),nVe=o("fnet"),sVe=o(" \u2014 "),H$=a("a"),lVe=o("FNetConfig"),iVe=o(" (FNet model)"),dVe=l(),Um=a("li"),Pee=a("strong"),cVe=o("fsmt"),mVe=o(" \u2014 "),U$=a("a"),fVe=o("FSMTConfig"),gVe=o(" (FairSeq Machine-Translation model)"),hVe=l(),Jm=a("li"),Iee=a("strong"),uVe=o("funnel"),pVe=o(" \u2014 "),J$=a("a"),_Ve=o("FunnelConfig"),bVe=o(" (Funnel Transformer model)"),FVe=l(),Ym=a("li"),qee=a("strong"),vVe=o("glpn"),TVe=o(" \u2014 "),Y$=a("a"),MVe=o("GLPNConfig"),EVe=o(" (GLPN model)"),CVe=l(),Km=a("li"),Nee=a("strong"),wVe=o("gpt2"),AVe=o(" \u2014 "),K$=a("a"),yVe=o("GPT2Config"),LVe=o(" (OpenAI GPT-2 model)"),xVe=l(),Zm=a("li"),jee=a("strong"),$Ve=o("gpt_neo"),kVe=o(" \u2014 "),Z$=a("a"),SVe=o("GPTNeoConfig"),RVe=o(" (GPT Neo model)"),BVe=l(),ef=a("li"),Dee=a("strong"),PVe=o("gptj"),IVe=o(" \u2014 "),ek=a("a"),qVe=o("GPTJConfig"),NVe=o(" (GPT-J model)"),jVe=l(),of=a("li"),Gee=a("strong"),DVe=o("hubert"),GVe=o(" \u2014 "),ok=a("a"),OVe=o("HubertConfig"),VVe=o(" (Hubert model)"),XVe=l(),rf=a("li"),Oee=a("strong"),zVe=o("ibert"),QVe=o(" \u2014 "),rk=a("a"),WVe=o("IBertConfig"),HVe=o(" (I-BERT model)"),UVe=l(),tf=a("li"),Vee=a("strong"),JVe=o("imagegpt"),YVe=o(" \u2014 "),tk=a("a"),KVe=o("ImageGPTConfig"),ZVe=o(" (ImageGPT model)"),eXe=l(),af=a("li"),Xee=a("strong"),oXe=o("layoutlm"),rXe=o(" \u2014 "),ak=a("a"),tXe=o("LayoutLMConfig"),aXe=o(" (LayoutLM model)"),nXe=l(),nf=a("li"),zee=a("strong"),sXe=o("layoutlmv2"),lXe=o(" \u2014 "),nk=a("a"),iXe=o("LayoutLMv2Config"),dXe=o(" (LayoutLMv2 model)"),cXe=l(),sf=a("li"),Qee=a("strong"),mXe=o("led"),fXe=o(" \u2014 "),sk=a("a"),gXe=o("LEDConfig"),hXe=o(" (LED model)"),uXe=l(),lf=a("li"),Wee=a("strong"),pXe=o("longformer"),_Xe=o(" \u2014 "),lk=a("a"),bXe=o("LongformerConfig"),FXe=o(" (Longformer model)"),vXe=l(),df=a("li"),Hee=a("strong"),TXe=o("luke"),MXe=o(" \u2014 "),ik=a("a"),EXe=o("LukeConfig"),CXe=o(" (LUKE model)"),wXe=l(),cf=a("li"),Uee=a("strong"),AXe=o("lxmert"),yXe=o(" \u2014 "),dk=a("a"),LXe=o("LxmertConfig"),xXe=o(" (LXMERT model)"),$Xe=l(),mf=a("li"),Jee=a("strong"),kXe=o("m2m_100"),SXe=o(" \u2014 "),ck=a("a"),RXe=o("M2M100Config"),BXe=o(" (M2M100 model)"),PXe=l(),ff=a("li"),Yee=a("strong"),IXe=o("marian"),qXe=o(" \u2014 "),mk=a("a"),NXe=o("MarianConfig"),jXe=o(" (Marian model)"),DXe=l(),gf=a("li"),Kee=a("strong"),GXe=o("maskformer"),OXe=o(" \u2014 "),fk=a("a"),VXe=o("MaskFormerConfig"),XXe=o(" (MaskFormer model)"),zXe=l(),hf=a("li"),Zee=a("strong"),QXe=o("mbart"),WXe=o(" \u2014 "),gk=a("a"),HXe=o("MBartConfig"),UXe=o(" (mBART model)"),JXe=l(),uf=a("li"),eoe=a("strong"),YXe=o("megatron-bert"),KXe=o(" \u2014 "),hk=a("a"),ZXe=o("MegatronBertConfig"),eze=o(" (MegatronBert model)"),oze=l(),pf=a("li"),ooe=a("strong"),rze=o("mobilebert"),tze=o(" \u2014 "),uk=a("a"),aze=o("MobileBertConfig"),nze=o(" (MobileBERT model)"),sze=l(),_f=a("li"),roe=a("strong"),lze=o("mpnet"),ize=o(" \u2014 "),pk=a("a"),dze=o("MPNetConfig"),cze=o(" (MPNet model)"),mze=l(),bf=a("li"),toe=a("strong"),fze=o("mt5"),gze=o(" \u2014 "),_k=a("a"),hze=o("MT5Config"),uze=o(" (mT5 model)"),pze=l(),Ff=a("li"),aoe=a("strong"),_ze=o("nystromformer"),bze=o(" \u2014 "),bk=a("a"),Fze=o("NystromformerConfig"),vze=o(" (Nystromformer model)"),Tze=l(),vf=a("li"),noe=a("strong"),Mze=o("openai-gpt"),Eze=o(" \u2014 "),Fk=a("a"),Cze=o("OpenAIGPTConfig"),wze=o(" (OpenAI GPT model)"),Aze=l(),Tf=a("li"),soe=a("strong"),yze=o("opt"),Lze=o(" \u2014 "),vk=a("a"),xze=o("OPTConfig"),$ze=o(" (OPT model)"),kze=l(),Mf=a("li"),loe=a("strong"),Sze=o("pegasus"),Rze=o(" \u2014 "),Tk=a("a"),Bze=o("PegasusConfig"),Pze=o(" (Pegasus model)"),Ize=l(),Ef=a("li"),ioe=a("strong"),qze=o("perceiver"),Nze=o(" \u2014 "),Mk=a("a"),jze=o("PerceiverConfig"),Dze=o(" (Perceiver model)"),Gze=l(),Cf=a("li"),doe=a("strong"),Oze=o("plbart"),Vze=o(" \u2014 "),Ek=a("a"),Xze=o("PLBartConfig"),zze=o(" (PLBart model)"),Qze=l(),wf=a("li"),coe=a("strong"),Wze=o("poolformer"),Hze=o(" \u2014 "),Ck=a("a"),Uze=o("PoolFormerConfig"),Jze=o(" (PoolFormer model)"),Yze=l(),Af=a("li"),moe=a("strong"),Kze=o("prophetnet"),Zze=o(" \u2014 "),wk=a("a"),eQe=o("ProphetNetConfig"),oQe=o(" (ProphetNet model)"),rQe=l(),yf=a("li"),foe=a("strong"),tQe=o("qdqbert"),aQe=o(" \u2014 "),Ak=a("a"),nQe=o("QDQBertConfig"),sQe=o(" (QDQBert model)"),lQe=l(),Lf=a("li"),goe=a("strong"),iQe=o("rag"),dQe=o(" \u2014 "),yk=a("a"),cQe=o("RagConfig"),mQe=o(" (RAG model)"),fQe=l(),xf=a("li"),hoe=a("strong"),gQe=o("realm"),hQe=o(" \u2014 "),Lk=a("a"),uQe=o("RealmConfig"),pQe=o(" (Realm model)"),_Qe=l(),$f=a("li"),uoe=a("strong"),bQe=o("reformer"),FQe=o(" \u2014 "),xk=a("a"),vQe=o("ReformerConfig"),TQe=o(" (Reformer model)"),MQe=l(),kf=a("li"),poe=a("strong"),EQe=o("regnet"),CQe=o(" \u2014 "),$k=a("a"),wQe=o("RegNetConfig"),AQe=o(" (RegNet model)"),yQe=l(),Sf=a("li"),_oe=a("strong"),LQe=o("rembert"),xQe=o(" \u2014 "),kk=a("a"),$Qe=o("RemBertConfig"),kQe=o(" (RemBERT model)"),SQe=l(),Rf=a("li"),boe=a("strong"),RQe=o("resnet"),BQe=o(" \u2014 "),Sk=a("a"),PQe=o("ResNetConfig"),IQe=o(" (ResNet model)"),qQe=l(),Bf=a("li"),Foe=a("strong"),NQe=o("retribert"),jQe=o(" \u2014 "),Rk=a("a"),DQe=o("RetriBertConfig"),GQe=o(" (RetriBERT model)"),OQe=l(),Pf=a("li"),voe=a("strong"),VQe=o("roberta"),XQe=o(" \u2014 "),Bk=a("a"),zQe=o("RobertaConfig"),QQe=o(" (RoBERTa model)"),WQe=l(),If=a("li"),Toe=a("strong"),HQe=o("roformer"),UQe=o(" \u2014 "),Pk=a("a"),JQe=o("RoFormerConfig"),YQe=o(" (RoFormer model)"),KQe=l(),qf=a("li"),Moe=a("strong"),ZQe=o("segformer"),eWe=o(" \u2014 "),Ik=a("a"),oWe=o("SegformerConfig"),rWe=o(" (SegFormer model)"),tWe=l(),Nf=a("li"),Eoe=a("strong"),aWe=o("sew"),nWe=o(" \u2014 "),qk=a("a"),sWe=o("SEWConfig"),lWe=o(" (SEW model)"),iWe=l(),jf=a("li"),Coe=a("strong"),dWe=o("sew-d"),cWe=o(" \u2014 "),Nk=a("a"),mWe=o("SEWDConfig"),fWe=o(" (SEW-D model)"),gWe=l(),Df=a("li"),woe=a("strong"),hWe=o("speech-encoder-decoder"),uWe=o(" \u2014 "),jk=a("a"),pWe=o("SpeechEncoderDecoderConfig"),_We=o(" (Speech Encoder decoder model)"),bWe=l(),Gf=a("li"),Aoe=a("strong"),FWe=o("speech_to_text"),vWe=o(" \u2014 "),Dk=a("a"),TWe=o("Speech2TextConfig"),MWe=o(" (Speech2Text model)"),EWe=l(),Of=a("li"),yoe=a("strong"),CWe=o("speech_to_text_2"),wWe=o(" \u2014 "),Gk=a("a"),AWe=o("Speech2Text2Config"),yWe=o(" (Speech2Text2 model)"),LWe=l(),Vf=a("li"),Loe=a("strong"),xWe=o("splinter"),$We=o(" \u2014 "),Ok=a("a"),kWe=o("SplinterConfig"),SWe=o(" (Splinter model)"),RWe=l(),Xf=a("li"),xoe=a("strong"),BWe=o("squeezebert"),PWe=o(" \u2014 "),Vk=a("a"),IWe=o("SqueezeBertConfig"),qWe=o(" (SqueezeBERT model)"),NWe=l(),zf=a("li"),$oe=a("strong"),jWe=o("swin"),DWe=o(" \u2014 "),Xk=a("a"),GWe=o("SwinConfig"),OWe=o(" (Swin model)"),VWe=l(),Qf=a("li"),koe=a("strong"),XWe=o("t5"),zWe=o(" \u2014 "),zk=a("a"),QWe=o("T5Config"),WWe=o(" (T5 model)"),HWe=l(),Wf=a("li"),Soe=a("strong"),UWe=o("tapas"),JWe=o(" \u2014 "),Qk=a("a"),YWe=o("TapasConfig"),KWe=o(" (TAPAS model)"),ZWe=l(),Hf=a("li"),Roe=a("strong"),eHe=o("transfo-xl"),oHe=o(" \u2014 "),Wk=a("a"),rHe=o("TransfoXLConfig"),tHe=o(" (Transformer-XL model)"),aHe=l(),Uf=a("li"),Boe=a("strong"),nHe=o("trocr"),sHe=o(" \u2014 "),Hk=a("a"),lHe=o("TrOCRConfig"),iHe=o(" (TrOCR model)"),dHe=l(),Jf=a("li"),Poe=a("strong"),cHe=o("unispeech"),mHe=o(" \u2014 "),Uk=a("a"),fHe=o("UniSpeechConfig"),gHe=o(" (UniSpeech model)"),hHe=l(),Yf=a("li"),Ioe=a("strong"),uHe=o("unispeech-sat"),pHe=o(" \u2014 "),Jk=a("a"),_He=o("UniSpeechSatConfig"),bHe=o(" (UniSpeechSat model)"),FHe=l(),Kf=a("li"),qoe=a("strong"),vHe=o("van"),THe=o(" \u2014 "),Yk=a("a"),MHe=o("VanConfig"),EHe=o(" (VAN model)"),CHe=l(),Zf=a("li"),Noe=a("strong"),wHe=o("vilt"),AHe=o(" \u2014 "),Kk=a("a"),yHe=o("ViltConfig"),LHe=o(" (ViLT model)"),xHe=l(),eg=a("li"),joe=a("strong"),$He=o("vision-encoder-decoder"),kHe=o(" \u2014 "),Zk=a("a"),SHe=o("VisionEncoderDecoderConfig"),RHe=o(" (Vision Encoder decoder model)"),BHe=l(),og=a("li"),Doe=a("strong"),PHe=o("vision-text-dual-encoder"),IHe=o(" \u2014 "),eS=a("a"),qHe=o("VisionTextDualEncoderConfig"),NHe=o(" (VisionTextDualEncoder model)"),jHe=l(),rg=a("li"),Goe=a("strong"),DHe=o("visual_bert"),GHe=o(" \u2014 "),oS=a("a"),OHe=o("VisualBertConfig"),VHe=o(" (VisualBert model)"),XHe=l(),tg=a("li"),Ooe=a("strong"),zHe=o("vit"),QHe=o(" \u2014 "),rS=a("a"),WHe=o("ViTConfig"),HHe=o(" (ViT model)"),UHe=l(),ag=a("li"),Voe=a("strong"),JHe=o("vit_mae"),YHe=o(" \u2014 "),tS=a("a"),KHe=o("ViTMAEConfig"),ZHe=o(" (ViTMAE model)"),eUe=l(),ng=a("li"),Xoe=a("strong"),oUe=o("wav2vec2"),rUe=o(" \u2014 "),aS=a("a"),tUe=o("Wav2Vec2Config"),aUe=o(" (Wav2Vec2 model)"),nUe=l(),sg=a("li"),zoe=a("strong"),sUe=o("wavlm"),lUe=o(" \u2014 "),nS=a("a"),iUe=o("WavLMConfig"),dUe=o(" (WavLM model)"),cUe=l(),lg=a("li"),Qoe=a("strong"),mUe=o("xglm"),fUe=o(" \u2014 "),sS=a("a"),gUe=o("XGLMConfig"),hUe=o(" (XGLM model)"),uUe=l(),ig=a("li"),Woe=a("strong"),pUe=o("xlm"),_Ue=o(" \u2014 "),lS=a("a"),bUe=o("XLMConfig"),FUe=o(" (XLM model)"),vUe=l(),dg=a("li"),Hoe=a("strong"),TUe=o("xlm-prophetnet"),MUe=o(" \u2014 "),iS=a("a"),EUe=o("XLMProphetNetConfig"),CUe=o(" (XLMProphetNet model)"),wUe=l(),cg=a("li"),Uoe=a("strong"),AUe=o("xlm-roberta"),yUe=o(" \u2014 "),dS=a("a"),LUe=o("XLMRobertaConfig"),xUe=o(" (XLM-RoBERTa model)"),$Ue=l(),mg=a("li"),Joe=a("strong"),kUe=o("xlm-roberta-xl"),SUe=o(" \u2014 "),cS=a("a"),RUe=o("XLMRobertaXLConfig"),BUe=o(" (XLM-RoBERTa-XL model)"),PUe=l(),fg=a("li"),Yoe=a("strong"),IUe=o("xlnet"),qUe=o(" \u2014 "),mS=a("a"),NUe=o("XLNetConfig"),jUe=o(" (XLNet model)"),DUe=l(),gg=a("li"),Koe=a("strong"),GUe=o("yolos"),OUe=o(" \u2014 "),fS=a("a"),VUe=o("YolosConfig"),XUe=o(" (YOLOS model)"),zUe=l(),hg=a("li"),Zoe=a("strong"),QUe=o("yoso"),WUe=o(" \u2014 "),gS=a("a"),HUe=o("YosoConfig"),UUe=o(" (YOSO model)"),JUe=l(),v(ug.$$.fragment),YUe=l(),pg=a("div"),v(oy.$$.fragment),KUe=l(),ere=a("p"),ZUe=o("Register a new configuration for this class."),NPe=l(),_i=a("h2"),_g=a("a"),ore=a("span"),v(ry.$$.fragment),eJe=l(),rre=a("span"),oJe=o("AutoTokenizer"),jPe=l(),wo=a("div"),v(ty.$$.fragment),rJe=l(),ay=a("p"),tJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),hS=a("a"),aJe=o("AutoTokenizer.from_pretrained()"),nJe=o(" class method."),sJe=l(),ny=a("p"),lJe=o("This class cannot be instantiated directly using "),tre=a("code"),iJe=o("__init__()"),dJe=o(" (throws an error)."),cJe=l(),Cr=a("div"),v(sy.$$.fragment),mJe=l(),are=a("p"),fJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gJe=l(),Ca=a("p"),hJe=o("The tokenizer class to instantiate is selected based on the "),nre=a("code"),uJe=o("model_type"),pJe=o(` property of the config object (either
passed as an argument or loaded from `),sre=a("code"),_Je=o("pretrained_model_name_or_path"),bJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lre=a("code"),FJe=o("pretrained_model_name_or_path"),vJe=o(":"),TJe=l(),k=a("ul"),kn=a("li"),ire=a("strong"),MJe=o("albert"),EJe=o(" \u2014 "),uS=a("a"),CJe=o("AlbertTokenizer"),wJe=o(" or "),pS=a("a"),AJe=o("AlbertTokenizerFast"),yJe=o(" (ALBERT model)"),LJe=l(),Sn=a("li"),dre=a("strong"),xJe=o("bart"),$Je=o(" \u2014 "),_S=a("a"),kJe=o("BartTokenizer"),SJe=o(" or "),bS=a("a"),RJe=o("BartTokenizerFast"),BJe=o(" (BART model)"),PJe=l(),Rn=a("li"),cre=a("strong"),IJe=o("barthez"),qJe=o(" \u2014 "),FS=a("a"),NJe=o("BarthezTokenizer"),jJe=o(" or "),vS=a("a"),DJe=o("BarthezTokenizerFast"),GJe=o(" (BARThez model)"),OJe=l(),bg=a("li"),mre=a("strong"),VJe=o("bartpho"),XJe=o(" \u2014 "),TS=a("a"),zJe=o("BartphoTokenizer"),QJe=o(" (BARTpho model)"),WJe=l(),Bn=a("li"),fre=a("strong"),HJe=o("bert"),UJe=o(" \u2014 "),MS=a("a"),JJe=o("BertTokenizer"),YJe=o(" or "),ES=a("a"),KJe=o("BertTokenizerFast"),ZJe=o(" (BERT model)"),eYe=l(),Fg=a("li"),gre=a("strong"),oYe=o("bert-generation"),rYe=o(" \u2014 "),CS=a("a"),tYe=o("BertGenerationTokenizer"),aYe=o(" (Bert Generation model)"),nYe=l(),vg=a("li"),hre=a("strong"),sYe=o("bert-japanese"),lYe=o(" \u2014 "),wS=a("a"),iYe=o("BertJapaneseTokenizer"),dYe=o(" (BertJapanese model)"),cYe=l(),Tg=a("li"),ure=a("strong"),mYe=o("bertweet"),fYe=o(" \u2014 "),AS=a("a"),gYe=o("BertweetTokenizer"),hYe=o(" (Bertweet model)"),uYe=l(),Pn=a("li"),pre=a("strong"),pYe=o("big_bird"),_Ye=o(" \u2014 "),yS=a("a"),bYe=o("BigBirdTokenizer"),FYe=o(" or "),LS=a("a"),vYe=o("BigBirdTokenizerFast"),TYe=o(" (BigBird model)"),MYe=l(),In=a("li"),_re=a("strong"),EYe=o("bigbird_pegasus"),CYe=o(" \u2014 "),xS=a("a"),wYe=o("PegasusTokenizer"),AYe=o(" or "),$S=a("a"),yYe=o("PegasusTokenizerFast"),LYe=o(" (BigBirdPegasus model)"),xYe=l(),qn=a("li"),bre=a("strong"),$Ye=o("blenderbot"),kYe=o(" \u2014 "),kS=a("a"),SYe=o("BlenderbotTokenizer"),RYe=o(" or "),SS=a("a"),BYe=o("BlenderbotTokenizerFast"),PYe=o(" (Blenderbot model)"),IYe=l(),Mg=a("li"),Fre=a("strong"),qYe=o("blenderbot-small"),NYe=o(" \u2014 "),RS=a("a"),jYe=o("BlenderbotSmallTokenizer"),DYe=o(" (BlenderbotSmall model)"),GYe=l(),Eg=a("li"),vre=a("strong"),OYe=o("byt5"),VYe=o(" \u2014 "),BS=a("a"),XYe=o("ByT5Tokenizer"),zYe=o(" (ByT5 model)"),QYe=l(),Nn=a("li"),Tre=a("strong"),WYe=o("camembert"),HYe=o(" \u2014 "),PS=a("a"),UYe=o("CamembertTokenizer"),JYe=o(" or "),IS=a("a"),YYe=o("CamembertTokenizerFast"),KYe=o(" (CamemBERT model)"),ZYe=l(),Cg=a("li"),Mre=a("strong"),eKe=o("canine"),oKe=o(" \u2014 "),qS=a("a"),rKe=o("CanineTokenizer"),tKe=o(" (Canine model)"),aKe=l(),jn=a("li"),Ere=a("strong"),nKe=o("clip"),sKe=o(" \u2014 "),NS=a("a"),lKe=o("CLIPTokenizer"),iKe=o(" or "),jS=a("a"),dKe=o("CLIPTokenizerFast"),cKe=o(" (CLIP model)"),mKe=l(),Dn=a("li"),Cre=a("strong"),fKe=o("convbert"),gKe=o(" \u2014 "),DS=a("a"),hKe=o("ConvBertTokenizer"),uKe=o(" or "),GS=a("a"),pKe=o("ConvBertTokenizerFast"),_Ke=o(" (ConvBERT model)"),bKe=l(),Gn=a("li"),wre=a("strong"),FKe=o("cpm"),vKe=o(" \u2014 "),OS=a("a"),TKe=o("CpmTokenizer"),MKe=o(" or "),VS=a("a"),EKe=o("CpmTokenizerFast"),CKe=o(" (CPM model)"),wKe=l(),wg=a("li"),Are=a("strong"),AKe=o("ctrl"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("CTRLTokenizer"),xKe=o(" (CTRL model)"),$Ke=l(),On=a("li"),yre=a("strong"),kKe=o("data2vec-text"),SKe=o(" \u2014 "),zS=a("a"),RKe=o("RobertaTokenizer"),BKe=o(" or "),QS=a("a"),PKe=o("RobertaTokenizerFast"),IKe=o(" (Data2VecText model)"),qKe=l(),Vn=a("li"),Lre=a("strong"),NKe=o("deberta"),jKe=o(" \u2014 "),WS=a("a"),DKe=o("DebertaTokenizer"),GKe=o(" or "),HS=a("a"),OKe=o("DebertaTokenizerFast"),VKe=o(" (DeBERTa model)"),XKe=l(),Xn=a("li"),xre=a("strong"),zKe=o("deberta-v2"),QKe=o(" \u2014 "),US=a("a"),WKe=o("DebertaV2Tokenizer"),HKe=o(" or "),JS=a("a"),UKe=o("DebertaV2TokenizerFast"),JKe=o(" (DeBERTa-v2 model)"),YKe=l(),zn=a("li"),$re=a("strong"),KKe=o("distilbert"),ZKe=o(" \u2014 "),YS=a("a"),eZe=o("DistilBertTokenizer"),oZe=o(" or "),KS=a("a"),rZe=o("DistilBertTokenizerFast"),tZe=o(" (DistilBERT model)"),aZe=l(),Qn=a("li"),kre=a("strong"),nZe=o("dpr"),sZe=o(" \u2014 "),ZS=a("a"),lZe=o("DPRQuestionEncoderTokenizer"),iZe=o(" or "),eR=a("a"),dZe=o("DPRQuestionEncoderTokenizerFast"),cZe=o(" (DPR model)"),mZe=l(),Wn=a("li"),Sre=a("strong"),fZe=o("electra"),gZe=o(" \u2014 "),oR=a("a"),hZe=o("ElectraTokenizer"),uZe=o(" or "),rR=a("a"),pZe=o("ElectraTokenizerFast"),_Ze=o(" (ELECTRA model)"),bZe=l(),Ag=a("li"),Rre=a("strong"),FZe=o("flaubert"),vZe=o(" \u2014 "),tR=a("a"),TZe=o("FlaubertTokenizer"),MZe=o(" (FlauBERT model)"),EZe=l(),Hn=a("li"),Bre=a("strong"),CZe=o("fnet"),wZe=o(" \u2014 "),aR=a("a"),AZe=o("FNetTokenizer"),yZe=o(" or "),nR=a("a"),LZe=o("FNetTokenizerFast"),xZe=o(" (FNet model)"),$Ze=l(),yg=a("li"),Pre=a("strong"),kZe=o("fsmt"),SZe=o(" \u2014 "),sR=a("a"),RZe=o("FSMTTokenizer"),BZe=o(" (FairSeq Machine-Translation model)"),PZe=l(),Un=a("li"),Ire=a("strong"),IZe=o("funnel"),qZe=o(" \u2014 "),lR=a("a"),NZe=o("FunnelTokenizer"),jZe=o(" or "),iR=a("a"),DZe=o("FunnelTokenizerFast"),GZe=o(" (Funnel Transformer model)"),OZe=l(),Jn=a("li"),qre=a("strong"),VZe=o("gpt2"),XZe=o(" \u2014 "),dR=a("a"),zZe=o("GPT2Tokenizer"),QZe=o(" or "),cR=a("a"),WZe=o("GPT2TokenizerFast"),HZe=o(" (OpenAI GPT-2 model)"),UZe=l(),Yn=a("li"),Nre=a("strong"),JZe=o("gpt_neo"),YZe=o(" \u2014 "),mR=a("a"),KZe=o("GPT2Tokenizer"),ZZe=o(" or "),fR=a("a"),eeo=o("GPT2TokenizerFast"),oeo=o(" (GPT Neo model)"),reo=l(),Kn=a("li"),jre=a("strong"),teo=o("gptj"),aeo=o(" \u2014 "),gR=a("a"),neo=o("GPT2Tokenizer"),seo=o(" or "),hR=a("a"),leo=o("GPT2TokenizerFast"),ieo=o(" (GPT-J model)"),deo=l(),Zn=a("li"),Dre=a("strong"),ceo=o("herbert"),meo=o(" \u2014 "),uR=a("a"),feo=o("HerbertTokenizer"),geo=o(" or "),pR=a("a"),heo=o("HerbertTokenizerFast"),ueo=o(" (HerBERT model)"),peo=l(),Lg=a("li"),Gre=a("strong"),_eo=o("hubert"),beo=o(" \u2014 "),_R=a("a"),Feo=o("Wav2Vec2CTCTokenizer"),veo=o(" (Hubert model)"),Teo=l(),es=a("li"),Ore=a("strong"),Meo=o("ibert"),Eeo=o(" \u2014 "),bR=a("a"),Ceo=o("RobertaTokenizer"),weo=o(" or "),FR=a("a"),Aeo=o("RobertaTokenizerFast"),yeo=o(" (I-BERT model)"),Leo=l(),os=a("li"),Vre=a("strong"),xeo=o("layoutlm"),$eo=o(" \u2014 "),vR=a("a"),keo=o("LayoutLMTokenizer"),Seo=o(" or "),TR=a("a"),Reo=o("LayoutLMTokenizerFast"),Beo=o(" (LayoutLM model)"),Peo=l(),rs=a("li"),Xre=a("strong"),Ieo=o("layoutlmv2"),qeo=o(" \u2014 "),MR=a("a"),Neo=o("LayoutLMv2Tokenizer"),jeo=o(" or "),ER=a("a"),Deo=o("LayoutLMv2TokenizerFast"),Geo=o(" (LayoutLMv2 model)"),Oeo=l(),ts=a("li"),zre=a("strong"),Veo=o("layoutxlm"),Xeo=o(" \u2014 "),CR=a("a"),zeo=o("LayoutXLMTokenizer"),Qeo=o(" or "),wR=a("a"),Weo=o("LayoutXLMTokenizerFast"),Heo=o(" (LayoutXLM model)"),Ueo=l(),as=a("li"),Qre=a("strong"),Jeo=o("led"),Yeo=o(" \u2014 "),AR=a("a"),Keo=o("LEDTokenizer"),Zeo=o(" or "),yR=a("a"),eoo=o("LEDTokenizerFast"),ooo=o(" (LED model)"),roo=l(),ns=a("li"),Wre=a("strong"),too=o("longformer"),aoo=o(" \u2014 "),LR=a("a"),noo=o("LongformerTokenizer"),soo=o(" or "),xR=a("a"),loo=o("LongformerTokenizerFast"),ioo=o(" (Longformer model)"),doo=l(),xg=a("li"),Hre=a("strong"),coo=o("luke"),moo=o(" \u2014 "),$R=a("a"),foo=o("LukeTokenizer"),goo=o(" (LUKE model)"),hoo=l(),ss=a("li"),Ure=a("strong"),uoo=o("lxmert"),poo=o(" \u2014 "),kR=a("a"),_oo=o("LxmertTokenizer"),boo=o(" or "),SR=a("a"),Foo=o("LxmertTokenizerFast"),voo=o(" (LXMERT model)"),Too=l(),$g=a("li"),Jre=a("strong"),Moo=o("m2m_100"),Eoo=o(" \u2014 "),RR=a("a"),Coo=o("M2M100Tokenizer"),woo=o(" (M2M100 model)"),Aoo=l(),kg=a("li"),Yre=a("strong"),yoo=o("marian"),Loo=o(" \u2014 "),BR=a("a"),xoo=o("MarianTokenizer"),$oo=o(" (Marian model)"),koo=l(),ls=a("li"),Kre=a("strong"),Soo=o("mbart"),Roo=o(" \u2014 "),PR=a("a"),Boo=o("MBartTokenizer"),Poo=o(" or "),IR=a("a"),Ioo=o("MBartTokenizerFast"),qoo=o(" (mBART model)"),Noo=l(),is=a("li"),Zre=a("strong"),joo=o("mbart50"),Doo=o(" \u2014 "),qR=a("a"),Goo=o("MBart50Tokenizer"),Ooo=o(" or "),NR=a("a"),Voo=o("MBart50TokenizerFast"),Xoo=o(" (mBART-50 model)"),zoo=l(),ds=a("li"),ete=a("strong"),Qoo=o("megatron-bert"),Woo=o(" \u2014 "),jR=a("a"),Hoo=o("BertTokenizer"),Uoo=o(" or "),DR=a("a"),Joo=o("BertTokenizerFast"),Yoo=o(" (MegatronBert model)"),Koo=l(),Sg=a("li"),ote=a("strong"),Zoo=o("mluke"),ero=o(" \u2014 "),GR=a("a"),oro=o("MLukeTokenizer"),rro=o(" (mLUKE model)"),tro=l(),cs=a("li"),rte=a("strong"),aro=o("mobilebert"),nro=o(" \u2014 "),OR=a("a"),sro=o("MobileBertTokenizer"),lro=o(" or "),VR=a("a"),iro=o("MobileBertTokenizerFast"),dro=o(" (MobileBERT model)"),cro=l(),ms=a("li"),tte=a("strong"),mro=o("mpnet"),fro=o(" \u2014 "),XR=a("a"),gro=o("MPNetTokenizer"),hro=o(" or "),zR=a("a"),uro=o("MPNetTokenizerFast"),pro=o(" (MPNet model)"),_ro=l(),fs=a("li"),ate=a("strong"),bro=o("mt5"),Fro=o(" \u2014 "),QR=a("a"),vro=o("MT5Tokenizer"),Tro=o(" or "),WR=a("a"),Mro=o("MT5TokenizerFast"),Ero=o(" (mT5 model)"),Cro=l(),gs=a("li"),nte=a("strong"),wro=o("nystromformer"),Aro=o(" \u2014 "),HR=a("a"),yro=o("AlbertTokenizer"),Lro=o(" or "),UR=a("a"),xro=o("AlbertTokenizerFast"),$ro=o(" (Nystromformer model)"),kro=l(),hs=a("li"),ste=a("strong"),Sro=o("openai-gpt"),Rro=o(" \u2014 "),JR=a("a"),Bro=o("OpenAIGPTTokenizer"),Pro=o(" or "),YR=a("a"),Iro=o("OpenAIGPTTokenizerFast"),qro=o(" (OpenAI GPT model)"),Nro=l(),Rg=a("li"),lte=a("strong"),jro=o("opt"),Dro=o(" \u2014 "),KR=a("a"),Gro=o("GPT2Tokenizer"),Oro=o(" (OPT model)"),Vro=l(),us=a("li"),ite=a("strong"),Xro=o("pegasus"),zro=o(" \u2014 "),ZR=a("a"),Qro=o("PegasusTokenizer"),Wro=o(" or "),eB=a("a"),Hro=o("PegasusTokenizerFast"),Uro=o(" (Pegasus model)"),Jro=l(),Bg=a("li"),dte=a("strong"),Yro=o("perceiver"),Kro=o(" \u2014 "),oB=a("a"),Zro=o("PerceiverTokenizer"),eto=o(" (Perceiver model)"),oto=l(),Pg=a("li"),cte=a("strong"),rto=o("phobert"),tto=o(" \u2014 "),rB=a("a"),ato=o("PhobertTokenizer"),nto=o(" (PhoBERT model)"),sto=l(),Ig=a("li"),mte=a("strong"),lto=o("plbart"),ito=o(" \u2014 "),tB=a("a"),dto=o("PLBartTokenizer"),cto=o(" (PLBart model)"),mto=l(),qg=a("li"),fte=a("strong"),fto=o("prophetnet"),gto=o(" \u2014 "),aB=a("a"),hto=o("ProphetNetTokenizer"),uto=o(" (ProphetNet model)"),pto=l(),ps=a("li"),gte=a("strong"),_to=o("qdqbert"),bto=o(" \u2014 "),nB=a("a"),Fto=o("BertTokenizer"),vto=o(" or "),sB=a("a"),Tto=o("BertTokenizerFast"),Mto=o(" (QDQBert model)"),Eto=l(),Ng=a("li"),hte=a("strong"),Cto=o("rag"),wto=o(" \u2014 "),lB=a("a"),Ato=o("RagTokenizer"),yto=o(" (RAG model)"),Lto=l(),_s=a("li"),ute=a("strong"),xto=o("realm"),$to=o(" \u2014 "),iB=a("a"),kto=o("RealmTokenizer"),Sto=o(" or "),dB=a("a"),Rto=o("RealmTokenizerFast"),Bto=o(" (Realm model)"),Pto=l(),bs=a("li"),pte=a("strong"),Ito=o("reformer"),qto=o(" \u2014 "),cB=a("a"),Nto=o("ReformerTokenizer"),jto=o(" or "),mB=a("a"),Dto=o("ReformerTokenizerFast"),Gto=o(" (Reformer model)"),Oto=l(),Fs=a("li"),_te=a("strong"),Vto=o("rembert"),Xto=o(" \u2014 "),fB=a("a"),zto=o("RemBertTokenizer"),Qto=o(" or "),gB=a("a"),Wto=o("RemBertTokenizerFast"),Hto=o(" (RemBERT model)"),Uto=l(),vs=a("li"),bte=a("strong"),Jto=o("retribert"),Yto=o(" \u2014 "),hB=a("a"),Kto=o("RetriBertTokenizer"),Zto=o(" or "),uB=a("a"),eao=o("RetriBertTokenizerFast"),oao=o(" (RetriBERT model)"),rao=l(),Ts=a("li"),Fte=a("strong"),tao=o("roberta"),aao=o(" \u2014 "),pB=a("a"),nao=o("RobertaTokenizer"),sao=o(" or "),_B=a("a"),lao=o("RobertaTokenizerFast"),iao=o(" (RoBERTa model)"),dao=l(),Ms=a("li"),vte=a("strong"),cao=o("roformer"),mao=o(" \u2014 "),bB=a("a"),fao=o("RoFormerTokenizer"),gao=o(" or "),FB=a("a"),hao=o("RoFormerTokenizerFast"),uao=o(" (RoFormer model)"),pao=l(),jg=a("li"),Tte=a("strong"),_ao=o("speech_to_text"),bao=o(" \u2014 "),vB=a("a"),Fao=o("Speech2TextTokenizer"),vao=o(" (Speech2Text model)"),Tao=l(),Dg=a("li"),Mte=a("strong"),Mao=o("speech_to_text_2"),Eao=o(" \u2014 "),TB=a("a"),Cao=o("Speech2Text2Tokenizer"),wao=o(" (Speech2Text2 model)"),Aao=l(),Es=a("li"),Ete=a("strong"),yao=o("splinter"),Lao=o(" \u2014 "),MB=a("a"),xao=o("SplinterTokenizer"),$ao=o(" or "),EB=a("a"),kao=o("SplinterTokenizerFast"),Sao=o(" (Splinter model)"),Rao=l(),Cs=a("li"),Cte=a("strong"),Bao=o("squeezebert"),Pao=o(" \u2014 "),CB=a("a"),Iao=o("SqueezeBertTokenizer"),qao=o(" or "),wB=a("a"),Nao=o("SqueezeBertTokenizerFast"),jao=o(" (SqueezeBERT model)"),Dao=l(),ws=a("li"),wte=a("strong"),Gao=o("t5"),Oao=o(" \u2014 "),AB=a("a"),Vao=o("T5Tokenizer"),Xao=o(" or "),yB=a("a"),zao=o("T5TokenizerFast"),Qao=o(" (T5 model)"),Wao=l(),Gg=a("li"),Ate=a("strong"),Hao=o("tapas"),Uao=o(" \u2014 "),LB=a("a"),Jao=o("TapasTokenizer"),Yao=o(" (TAPAS model)"),Kao=l(),Og=a("li"),yte=a("strong"),Zao=o("tapex"),eno=o(" \u2014 "),xB=a("a"),ono=o("TapexTokenizer"),rno=o(" (TAPEX model)"),tno=l(),Vg=a("li"),Lte=a("strong"),ano=o("transfo-xl"),nno=o(" \u2014 "),$B=a("a"),sno=o("TransfoXLTokenizer"),lno=o(" (Transformer-XL model)"),ino=l(),As=a("li"),xte=a("strong"),dno=o("visual_bert"),cno=o(" \u2014 "),kB=a("a"),mno=o("BertTokenizer"),fno=o(" or "),SB=a("a"),gno=o("BertTokenizerFast"),hno=o(" (VisualBert model)"),uno=l(),Xg=a("li"),$te=a("strong"),pno=o("wav2vec2"),_no=o(" \u2014 "),RB=a("a"),bno=o("Wav2Vec2CTCTokenizer"),Fno=o(" (Wav2Vec2 model)"),vno=l(),zg=a("li"),kte=a("strong"),Tno=o("wav2vec2_phoneme"),Mno=o(" \u2014 "),BB=a("a"),Eno=o("Wav2Vec2PhonemeCTCTokenizer"),Cno=o(" (Wav2Vec2Phoneme model)"),wno=l(),ys=a("li"),Ste=a("strong"),Ano=o("xglm"),yno=o(" \u2014 "),PB=a("a"),Lno=o("XGLMTokenizer"),xno=o(" or "),IB=a("a"),$no=o("XGLMTokenizerFast"),kno=o(" (XGLM model)"),Sno=l(),Qg=a("li"),Rte=a("strong"),Rno=o("xlm"),Bno=o(" \u2014 "),qB=a("a"),Pno=o("XLMTokenizer"),Ino=o(" (XLM model)"),qno=l(),Wg=a("li"),Bte=a("strong"),Nno=o("xlm-prophetnet"),jno=o(" \u2014 "),NB=a("a"),Dno=o("XLMProphetNetTokenizer"),Gno=o(" (XLMProphetNet model)"),Ono=l(),Ls=a("li"),Pte=a("strong"),Vno=o("xlm-roberta"),Xno=o(" \u2014 "),jB=a("a"),zno=o("XLMRobertaTokenizer"),Qno=o(" or "),DB=a("a"),Wno=o("XLMRobertaTokenizerFast"),Hno=o(" (XLM-RoBERTa model)"),Uno=l(),xs=a("li"),Ite=a("strong"),Jno=o("xlm-roberta-xl"),Yno=o(" \u2014 "),GB=a("a"),Kno=o("RobertaTokenizer"),Zno=o(" or "),OB=a("a"),eso=o("RobertaTokenizerFast"),oso=o(" (XLM-RoBERTa-XL model)"),rso=l(),$s=a("li"),qte=a("strong"),tso=o("xlnet"),aso=o(" \u2014 "),VB=a("a"),nso=o("XLNetTokenizer"),sso=o(" or "),XB=a("a"),lso=o("XLNetTokenizerFast"),iso=o(" (XLNet model)"),dso=l(),ks=a("li"),Nte=a("strong"),cso=o("yoso"),mso=o(" \u2014 "),zB=a("a"),fso=o("AlbertTokenizer"),gso=o(" or "),QB=a("a"),hso=o("AlbertTokenizerFast"),uso=o(" (YOSO model)"),pso=l(),v(Hg.$$.fragment),_so=l(),Ug=a("div"),v(ly.$$.fragment),bso=l(),jte=a("p"),Fso=o("Register a new tokenizer in this mapping."),DPe=l(),bi=a("h2"),Jg=a("a"),Dte=a("span"),v(iy.$$.fragment),vso=l(),Gte=a("span"),Tso=o("AutoFeatureExtractor"),GPe=l(),Ao=a("div"),v(dy.$$.fragment),Mso=l(),cy=a("p"),Eso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=a("a"),Cso=o("AutoFeatureExtractor.from_pretrained()"),wso=o(" class method."),Aso=l(),my=a("p"),yso=o("This class cannot be instantiated directly using "),Ote=a("code"),Lso=o("__init__()"),xso=o(" (throws an error)."),$so=l(),Qe=a("div"),v(fy.$$.fragment),kso=l(),Vte=a("p"),Sso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Rso=l(),wa=a("p"),Bso=o("The feature extractor class to instantiate is selected based on the "),Xte=a("code"),Pso=o("model_type"),Iso=o(` property of the config object
(either passed as an argument or loaded from `),zte=a("code"),qso=o("pretrained_model_name_or_path"),Nso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qte=a("code"),jso=o("pretrained_model_name_or_path"),Dso=o(":"),Gso=l(),oe=a("ul"),Yg=a("li"),Wte=a("strong"),Oso=o("beit"),Vso=o(" \u2014 "),HB=a("a"),Xso=o("BeitFeatureExtractor"),zso=o(" (BEiT model)"),Qso=l(),Kg=a("li"),Hte=a("strong"),Wso=o("clip"),Hso=o(" \u2014 "),UB=a("a"),Uso=o("CLIPFeatureExtractor"),Jso=o(" (CLIP model)"),Yso=l(),Zg=a("li"),Ute=a("strong"),Kso=o("convnext"),Zso=o(" \u2014 "),JB=a("a"),elo=o("ConvNextFeatureExtractor"),olo=o(" (ConvNext model)"),rlo=l(),eh=a("li"),Jte=a("strong"),tlo=o("data2vec-audio"),alo=o(" \u2014 "),YB=a("a"),nlo=o("Wav2Vec2FeatureExtractor"),slo=o(" (Data2VecAudio model)"),llo=l(),oh=a("li"),Yte=a("strong"),ilo=o("data2vec-vision"),dlo=o(" \u2014 "),KB=a("a"),clo=o("BeitFeatureExtractor"),mlo=o(" (Data2VecVision model)"),flo=l(),rh=a("li"),Kte=a("strong"),glo=o("deit"),hlo=o(" \u2014 "),ZB=a("a"),ulo=o("DeiTFeatureExtractor"),plo=o(" (DeiT model)"),_lo=l(),th=a("li"),Zte=a("strong"),blo=o("detr"),Flo=o(" \u2014 "),eP=a("a"),vlo=o("DetrFeatureExtractor"),Tlo=o(" (DETR model)"),Mlo=l(),ah=a("li"),eae=a("strong"),Elo=o("dpt"),Clo=o(" \u2014 "),oP=a("a"),wlo=o("DPTFeatureExtractor"),Alo=o(" (DPT model)"),ylo=l(),nh=a("li"),oae=a("strong"),Llo=o("flava"),xlo=o(" \u2014 "),rP=a("a"),$lo=o("FlavaFeatureExtractor"),klo=o(" (Flava model)"),Slo=l(),sh=a("li"),rae=a("strong"),Rlo=o("glpn"),Blo=o(" \u2014 "),tP=a("a"),Plo=o("GLPNFeatureExtractor"),Ilo=o(" (GLPN model)"),qlo=l(),lh=a("li"),tae=a("strong"),Nlo=o("hubert"),jlo=o(" \u2014 "),aP=a("a"),Dlo=o("Wav2Vec2FeatureExtractor"),Glo=o(" (Hubert model)"),Olo=l(),ih=a("li"),aae=a("strong"),Vlo=o("layoutlmv2"),Xlo=o(" \u2014 "),nP=a("a"),zlo=o("LayoutLMv2FeatureExtractor"),Qlo=o(" (LayoutLMv2 model)"),Wlo=l(),dh=a("li"),nae=a("strong"),Hlo=o("maskformer"),Ulo=o(" \u2014 "),sP=a("a"),Jlo=o("MaskFormerFeatureExtractor"),Ylo=o(" (MaskFormer model)"),Klo=l(),ch=a("li"),sae=a("strong"),Zlo=o("perceiver"),eio=o(" \u2014 "),lP=a("a"),oio=o("PerceiverFeatureExtractor"),rio=o(" (Perceiver model)"),tio=l(),mh=a("li"),lae=a("strong"),aio=o("poolformer"),nio=o(" \u2014 "),iP=a("a"),sio=o("PoolFormerFeatureExtractor"),lio=o(" (PoolFormer model)"),iio=l(),fh=a("li"),iae=a("strong"),dio=o("regnet"),cio=o(" \u2014 "),dP=a("a"),mio=o("ConvNextFeatureExtractor"),fio=o(" (RegNet model)"),gio=l(),gh=a("li"),dae=a("strong"),hio=o("resnet"),uio=o(" \u2014 "),cP=a("a"),pio=o("ConvNextFeatureExtractor"),_io=o(" (ResNet model)"),bio=l(),hh=a("li"),cae=a("strong"),Fio=o("segformer"),vio=o(" \u2014 "),mP=a("a"),Tio=o("SegformerFeatureExtractor"),Mio=o(" (SegFormer model)"),Eio=l(),uh=a("li"),mae=a("strong"),Cio=o("speech_to_text"),wio=o(" \u2014 "),fP=a("a"),Aio=o("Speech2TextFeatureExtractor"),yio=o(" (Speech2Text model)"),Lio=l(),ph=a("li"),fae=a("strong"),xio=o("swin"),$io=o(" \u2014 "),gP=a("a"),kio=o("ViTFeatureExtractor"),Sio=o(" (Swin model)"),Rio=l(),_h=a("li"),gae=a("strong"),Bio=o("van"),Pio=o(" \u2014 "),hP=a("a"),Iio=o("ConvNextFeatureExtractor"),qio=o(" (VAN model)"),Nio=l(),bh=a("li"),hae=a("strong"),jio=o("vit"),Dio=o(" \u2014 "),uP=a("a"),Gio=o("ViTFeatureExtractor"),Oio=o(" (ViT model)"),Vio=l(),Fh=a("li"),uae=a("strong"),Xio=o("vit_mae"),zio=o(" \u2014 "),pP=a("a"),Qio=o("ViTFeatureExtractor"),Wio=o(" (ViTMAE model)"),Hio=l(),vh=a("li"),pae=a("strong"),Uio=o("wav2vec2"),Jio=o(" \u2014 "),_P=a("a"),Yio=o("Wav2Vec2FeatureExtractor"),Kio=o(" (Wav2Vec2 model)"),Zio=l(),Th=a("li"),_ae=a("strong"),edo=o("yolos"),odo=o(" \u2014 "),bP=a("a"),rdo=o("YolosFeatureExtractor"),tdo=o(" (YOLOS model)"),ado=l(),v(Mh.$$.fragment),ndo=l(),v(Eh.$$.fragment),sdo=l(),Ch=a("div"),v(gy.$$.fragment),ldo=l(),bae=a("p"),ido=o("Register a new feature extractor for this class."),OPe=l(),Fi=a("h2"),wh=a("a"),Fae=a("span"),v(hy.$$.fragment),ddo=l(),vae=a("span"),cdo=o("AutoProcessor"),VPe=l(),yo=a("div"),v(uy.$$.fragment),mdo=l(),py=a("p"),fdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),FP=a("a"),gdo=o("AutoProcessor.from_pretrained()"),hdo=o(" class method."),udo=l(),_y=a("p"),pdo=o("This class cannot be instantiated directly using "),Tae=a("code"),_do=o("__init__()"),bdo=o(" (throws an error)."),Fdo=l(),We=a("div"),v(by.$$.fragment),vdo=l(),Mae=a("p"),Tdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mdo=l(),vi=a("p"),Edo=o("The processor class to instantiate is selected based on the "),Eae=a("code"),Cdo=o("model_type"),wdo=o(` property of the config object (either
passed as an argument or loaded from `),Cae=a("code"),Ado=o("pretrained_model_name_or_path"),ydo=o(" if possible):"),Ldo=l(),_e=a("ul"),Ah=a("li"),wae=a("strong"),xdo=o("clip"),$do=o(" \u2014 "),vP=a("a"),kdo=o("CLIPProcessor"),Sdo=o(" (CLIP model)"),Rdo=l(),yh=a("li"),Aae=a("strong"),Bdo=o("flava"),Pdo=o(" \u2014 "),yae=a("code"),Ido=o("FLAVAProcessor"),qdo=o(" (Flava model)"),Ndo=l(),Lh=a("li"),Lae=a("strong"),jdo=o("layoutlmv2"),Ddo=o(" \u2014 "),TP=a("a"),Gdo=o("LayoutLMv2Processor"),Odo=o(" (LayoutLMv2 model)"),Vdo=l(),xh=a("li"),xae=a("strong"),Xdo=o("layoutxlm"),zdo=o(" \u2014 "),MP=a("a"),Qdo=o("LayoutXLMProcessor"),Wdo=o(" (LayoutXLM model)"),Hdo=l(),$h=a("li"),$ae=a("strong"),Udo=o("sew"),Jdo=o(" \u2014 "),EP=a("a"),Ydo=o("Wav2Vec2Processor"),Kdo=o(" (SEW model)"),Zdo=l(),kh=a("li"),kae=a("strong"),eco=o("sew-d"),oco=o(" \u2014 "),CP=a("a"),rco=o("Wav2Vec2Processor"),tco=o(" (SEW-D model)"),aco=l(),Sh=a("li"),Sae=a("strong"),nco=o("speech_to_text"),sco=o(" \u2014 "),wP=a("a"),lco=o("Speech2TextProcessor"),ico=o(" (Speech2Text model)"),dco=l(),Rh=a("li"),Rae=a("strong"),cco=o("speech_to_text_2"),mco=o(" \u2014 "),AP=a("a"),fco=o("Speech2Text2Processor"),gco=o(" (Speech2Text2 model)"),hco=l(),Bh=a("li"),Bae=a("strong"),uco=o("trocr"),pco=o(" \u2014 "),yP=a("a"),_co=o("TrOCRProcessor"),bco=o(" (TrOCR model)"),Fco=l(),Ph=a("li"),Pae=a("strong"),vco=o("unispeech"),Tco=o(" \u2014 "),LP=a("a"),Mco=o("Wav2Vec2Processor"),Eco=o(" (UniSpeech model)"),Cco=l(),Ih=a("li"),Iae=a("strong"),wco=o("unispeech-sat"),Aco=o(" \u2014 "),xP=a("a"),yco=o("Wav2Vec2Processor"),Lco=o(" (UniSpeechSat model)"),xco=l(),qh=a("li"),qae=a("strong"),$co=o("vilt"),kco=o(" \u2014 "),$P=a("a"),Sco=o("ViltProcessor"),Rco=o(" (ViLT model)"),Bco=l(),Nh=a("li"),Nae=a("strong"),Pco=o("vision-text-dual-encoder"),Ico=o(" \u2014 "),kP=a("a"),qco=o("VisionTextDualEncoderProcessor"),Nco=o(" (VisionTextDualEncoder model)"),jco=l(),jh=a("li"),jae=a("strong"),Dco=o("wav2vec2"),Gco=o(" \u2014 "),SP=a("a"),Oco=o("Wav2Vec2Processor"),Vco=o(" (Wav2Vec2 model)"),Xco=l(),Dh=a("li"),Dae=a("strong"),zco=o("wavlm"),Qco=o(" \u2014 "),RP=a("a"),Wco=o("Wav2Vec2Processor"),Hco=o(" (WavLM model)"),Uco=l(),v(Gh.$$.fragment),Jco=l(),v(Oh.$$.fragment),Yco=l(),Vh=a("div"),v(Fy.$$.fragment),Kco=l(),Gae=a("p"),Zco=o("Register a new processor for this class."),XPe=l(),Ti=a("h2"),Xh=a("a"),Oae=a("span"),v(vy.$$.fragment),emo=l(),Vae=a("span"),omo=o("AutoModel"),zPe=l(),Lo=a("div"),v(Ty.$$.fragment),rmo=l(),Mi=a("p"),tmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BP=a("a"),amo=o("from_pretrained()"),nmo=o(" class method or the "),PP=a("a"),smo=o("from_config()"),lmo=o(` class
method.`),imo=l(),My=a("p"),dmo=o("This class cannot be instantiated directly using "),Xae=a("code"),cmo=o("__init__()"),mmo=o(" (throws an error)."),fmo=l(),ot=a("div"),v(Ey.$$.fragment),gmo=l(),zae=a("p"),hmo=o("Instantiates one of the base model classes of the library from a configuration."),umo=l(),Ei=a("p"),pmo=o(`Note:
Loading a model from its configuration file does `),Qae=a("strong"),_mo=o("not"),bmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IP=a("a"),Fmo=o("from_pretrained()"),vmo=o(" to load the model weights."),Tmo=l(),v(zh.$$.fragment),Mmo=l(),He=a("div"),v(Cy.$$.fragment),Emo=l(),Wae=a("p"),Cmo=o("Instantiate one of the base model classes of the library from a pretrained model."),wmo=l(),Aa=a("p"),Amo=o("The model class to instantiate is selected based on the "),Hae=a("code"),ymo=o("model_type"),Lmo=o(` property of the config object (either
passed as an argument or loaded from `),Uae=a("code"),xmo=o("pretrained_model_name_or_path"),$mo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jae=a("code"),kmo=o("pretrained_model_name_or_path"),Smo=o(":"),Rmo=l(),x=a("ul"),Qh=a("li"),Yae=a("strong"),Bmo=o("albert"),Pmo=o(" \u2014 "),qP=a("a"),Imo=o("AlbertModel"),qmo=o(" (ALBERT model)"),Nmo=l(),Wh=a("li"),Kae=a("strong"),jmo=o("bart"),Dmo=o(" \u2014 "),NP=a("a"),Gmo=o("BartModel"),Omo=o(" (BART model)"),Vmo=l(),Hh=a("li"),Zae=a("strong"),Xmo=o("beit"),zmo=o(" \u2014 "),jP=a("a"),Qmo=o("BeitModel"),Wmo=o(" (BEiT model)"),Hmo=l(),Uh=a("li"),ene=a("strong"),Umo=o("bert"),Jmo=o(" \u2014 "),DP=a("a"),Ymo=o("BertModel"),Kmo=o(" (BERT model)"),Zmo=l(),Jh=a("li"),one=a("strong"),efo=o("bert-generation"),ofo=o(" \u2014 "),GP=a("a"),rfo=o("BertGenerationEncoder"),tfo=o(" (Bert Generation model)"),afo=l(),Yh=a("li"),rne=a("strong"),nfo=o("big_bird"),sfo=o(" \u2014 "),OP=a("a"),lfo=o("BigBirdModel"),ifo=o(" (BigBird model)"),dfo=l(),Kh=a("li"),tne=a("strong"),cfo=o("bigbird_pegasus"),mfo=o(" \u2014 "),VP=a("a"),ffo=o("BigBirdPegasusModel"),gfo=o(" (BigBirdPegasus model)"),hfo=l(),Zh=a("li"),ane=a("strong"),ufo=o("blenderbot"),pfo=o(" \u2014 "),XP=a("a"),_fo=o("BlenderbotModel"),bfo=o(" (Blenderbot model)"),Ffo=l(),eu=a("li"),nne=a("strong"),vfo=o("blenderbot-small"),Tfo=o(" \u2014 "),zP=a("a"),Mfo=o("BlenderbotSmallModel"),Efo=o(" (BlenderbotSmall model)"),Cfo=l(),ou=a("li"),sne=a("strong"),wfo=o("camembert"),Afo=o(" \u2014 "),QP=a("a"),yfo=o("CamembertModel"),Lfo=o(" (CamemBERT model)"),xfo=l(),ru=a("li"),lne=a("strong"),$fo=o("canine"),kfo=o(" \u2014 "),WP=a("a"),Sfo=o("CanineModel"),Rfo=o(" (Canine model)"),Bfo=l(),tu=a("li"),ine=a("strong"),Pfo=o("clip"),Ifo=o(" \u2014 "),HP=a("a"),qfo=o("CLIPModel"),Nfo=o(" (CLIP model)"),jfo=l(),au=a("li"),dne=a("strong"),Dfo=o("convbert"),Gfo=o(" \u2014 "),UP=a("a"),Ofo=o("ConvBertModel"),Vfo=o(" (ConvBERT model)"),Xfo=l(),nu=a("li"),cne=a("strong"),zfo=o("convnext"),Qfo=o(" \u2014 "),JP=a("a"),Wfo=o("ConvNextModel"),Hfo=o(" (ConvNext model)"),Ufo=l(),su=a("li"),mne=a("strong"),Jfo=o("ctrl"),Yfo=o(" \u2014 "),YP=a("a"),Kfo=o("CTRLModel"),Zfo=o(" (CTRL model)"),ego=l(),lu=a("li"),fne=a("strong"),ogo=o("data2vec-audio"),rgo=o(" \u2014 "),KP=a("a"),tgo=o("Data2VecAudioModel"),ago=o(" (Data2VecAudio model)"),ngo=l(),iu=a("li"),gne=a("strong"),sgo=o("data2vec-text"),lgo=o(" \u2014 "),ZP=a("a"),igo=o("Data2VecTextModel"),dgo=o(" (Data2VecText model)"),cgo=l(),du=a("li"),hne=a("strong"),mgo=o("data2vec-vision"),fgo=o(" \u2014 "),eI=a("a"),ggo=o("Data2VecVisionModel"),hgo=o(" (Data2VecVision model)"),ugo=l(),cu=a("li"),une=a("strong"),pgo=o("deberta"),_go=o(" \u2014 "),oI=a("a"),bgo=o("DebertaModel"),Fgo=o(" (DeBERTa model)"),vgo=l(),mu=a("li"),pne=a("strong"),Tgo=o("deberta-v2"),Mgo=o(" \u2014 "),rI=a("a"),Ego=o("DebertaV2Model"),Cgo=o(" (DeBERTa-v2 model)"),wgo=l(),fu=a("li"),_ne=a("strong"),Ago=o("decision_transformer"),ygo=o(" \u2014 "),tI=a("a"),Lgo=o("DecisionTransformerModel"),xgo=o(" (Decision Transformer model)"),$go=l(),gu=a("li"),bne=a("strong"),kgo=o("deit"),Sgo=o(" \u2014 "),aI=a("a"),Rgo=o("DeiTModel"),Bgo=o(" (DeiT model)"),Pgo=l(),hu=a("li"),Fne=a("strong"),Igo=o("detr"),qgo=o(" \u2014 "),nI=a("a"),Ngo=o("DetrModel"),jgo=o(" (DETR model)"),Dgo=l(),uu=a("li"),vne=a("strong"),Ggo=o("distilbert"),Ogo=o(" \u2014 "),sI=a("a"),Vgo=o("DistilBertModel"),Xgo=o(" (DistilBERT model)"),zgo=l(),pu=a("li"),Tne=a("strong"),Qgo=o("dpr"),Wgo=o(" \u2014 "),lI=a("a"),Hgo=o("DPRQuestionEncoder"),Ugo=o(" (DPR model)"),Jgo=l(),_u=a("li"),Mne=a("strong"),Ygo=o("dpt"),Kgo=o(" \u2014 "),iI=a("a"),Zgo=o("DPTModel"),eho=o(" (DPT model)"),oho=l(),bu=a("li"),Ene=a("strong"),rho=o("electra"),tho=o(" \u2014 "),dI=a("a"),aho=o("ElectraModel"),nho=o(" (ELECTRA model)"),sho=l(),Fu=a("li"),Cne=a("strong"),lho=o("flaubert"),iho=o(" \u2014 "),cI=a("a"),dho=o("FlaubertModel"),cho=o(" (FlauBERT model)"),mho=l(),vu=a("li"),wne=a("strong"),fho=o("flava"),gho=o(" \u2014 "),mI=a("a"),hho=o("FlavaModel"),uho=o(" (Flava model)"),pho=l(),Tu=a("li"),Ane=a("strong"),_ho=o("fnet"),bho=o(" \u2014 "),fI=a("a"),Fho=o("FNetModel"),vho=o(" (FNet model)"),Tho=l(),Mu=a("li"),yne=a("strong"),Mho=o("fsmt"),Eho=o(" \u2014 "),gI=a("a"),Cho=o("FSMTModel"),who=o(" (FairSeq Machine-Translation model)"),Aho=l(),Ss=a("li"),Lne=a("strong"),yho=o("funnel"),Lho=o(" \u2014 "),hI=a("a"),xho=o("FunnelModel"),$ho=o(" or "),uI=a("a"),kho=o("FunnelBaseModel"),Sho=o(" (Funnel Transformer model)"),Rho=l(),Eu=a("li"),xne=a("strong"),Bho=o("glpn"),Pho=o(" \u2014 "),pI=a("a"),Iho=o("GLPNModel"),qho=o(" (GLPN model)"),Nho=l(),Cu=a("li"),$ne=a("strong"),jho=o("gpt2"),Dho=o(" \u2014 "),_I=a("a"),Gho=o("GPT2Model"),Oho=o(" (OpenAI GPT-2 model)"),Vho=l(),wu=a("li"),kne=a("strong"),Xho=o("gpt_neo"),zho=o(" \u2014 "),bI=a("a"),Qho=o("GPTNeoModel"),Who=o(" (GPT Neo model)"),Hho=l(),Au=a("li"),Sne=a("strong"),Uho=o("gptj"),Jho=o(" \u2014 "),FI=a("a"),Yho=o("GPTJModel"),Kho=o(" (GPT-J model)"),Zho=l(),yu=a("li"),Rne=a("strong"),euo=o("hubert"),ouo=o(" \u2014 "),vI=a("a"),ruo=o("HubertModel"),tuo=o(" (Hubert model)"),auo=l(),Lu=a("li"),Bne=a("strong"),nuo=o("ibert"),suo=o(" \u2014 "),TI=a("a"),luo=o("IBertModel"),iuo=o(" (I-BERT model)"),duo=l(),xu=a("li"),Pne=a("strong"),cuo=o("imagegpt"),muo=o(" \u2014 "),MI=a("a"),fuo=o("ImageGPTModel"),guo=o(" (ImageGPT model)"),huo=l(),$u=a("li"),Ine=a("strong"),uuo=o("layoutlm"),puo=o(" \u2014 "),EI=a("a"),_uo=o("LayoutLMModel"),buo=o(" (LayoutLM model)"),Fuo=l(),ku=a("li"),qne=a("strong"),vuo=o("layoutlmv2"),Tuo=o(" \u2014 "),CI=a("a"),Muo=o("LayoutLMv2Model"),Euo=o(" (LayoutLMv2 model)"),Cuo=l(),Su=a("li"),Nne=a("strong"),wuo=o("led"),Auo=o(" \u2014 "),wI=a("a"),yuo=o("LEDModel"),Luo=o(" (LED model)"),xuo=l(),Ru=a("li"),jne=a("strong"),$uo=o("longformer"),kuo=o(" \u2014 "),AI=a("a"),Suo=o("LongformerModel"),Ruo=o(" (Longformer model)"),Buo=l(),Bu=a("li"),Dne=a("strong"),Puo=o("luke"),Iuo=o(" \u2014 "),yI=a("a"),quo=o("LukeModel"),Nuo=o(" (LUKE model)"),juo=l(),Pu=a("li"),Gne=a("strong"),Duo=o("lxmert"),Guo=o(" \u2014 "),LI=a("a"),Ouo=o("LxmertModel"),Vuo=o(" (LXMERT model)"),Xuo=l(),Iu=a("li"),One=a("strong"),zuo=o("m2m_100"),Quo=o(" \u2014 "),xI=a("a"),Wuo=o("M2M100Model"),Huo=o(" (M2M100 model)"),Uuo=l(),qu=a("li"),Vne=a("strong"),Juo=o("marian"),Yuo=o(" \u2014 "),$I=a("a"),Kuo=o("MarianModel"),Zuo=o(" (Marian model)"),epo=l(),Nu=a("li"),Xne=a("strong"),opo=o("maskformer"),rpo=o(" \u2014 "),kI=a("a"),tpo=o("MaskFormerModel"),apo=o(" (MaskFormer model)"),npo=l(),ju=a("li"),zne=a("strong"),spo=o("mbart"),lpo=o(" \u2014 "),SI=a("a"),ipo=o("MBartModel"),dpo=o(" (mBART model)"),cpo=l(),Du=a("li"),Qne=a("strong"),mpo=o("megatron-bert"),fpo=o(" \u2014 "),RI=a("a"),gpo=o("MegatronBertModel"),hpo=o(" (MegatronBert model)"),upo=l(),Gu=a("li"),Wne=a("strong"),ppo=o("mobilebert"),_po=o(" \u2014 "),BI=a("a"),bpo=o("MobileBertModel"),Fpo=o(" (MobileBERT model)"),vpo=l(),Ou=a("li"),Hne=a("strong"),Tpo=o("mpnet"),Mpo=o(" \u2014 "),PI=a("a"),Epo=o("MPNetModel"),Cpo=o(" (MPNet model)"),wpo=l(),Vu=a("li"),Une=a("strong"),Apo=o("mt5"),ypo=o(" \u2014 "),II=a("a"),Lpo=o("MT5Model"),xpo=o(" (mT5 model)"),$po=l(),Xu=a("li"),Jne=a("strong"),kpo=o("nystromformer"),Spo=o(" \u2014 "),qI=a("a"),Rpo=o("NystromformerModel"),Bpo=o(" (Nystromformer model)"),Ppo=l(),zu=a("li"),Yne=a("strong"),Ipo=o("openai-gpt"),qpo=o(" \u2014 "),NI=a("a"),Npo=o("OpenAIGPTModel"),jpo=o(" (OpenAI GPT model)"),Dpo=l(),Qu=a("li"),Kne=a("strong"),Gpo=o("opt"),Opo=o(" \u2014 "),jI=a("a"),Vpo=o("OPTModel"),Xpo=o(" (OPT model)"),zpo=l(),Wu=a("li"),Zne=a("strong"),Qpo=o("pegasus"),Wpo=o(" \u2014 "),DI=a("a"),Hpo=o("PegasusModel"),Upo=o(" (Pegasus model)"),Jpo=l(),Hu=a("li"),ese=a("strong"),Ypo=o("perceiver"),Kpo=o(" \u2014 "),GI=a("a"),Zpo=o("PerceiverModel"),e_o=o(" (Perceiver model)"),o_o=l(),Uu=a("li"),ose=a("strong"),r_o=o("plbart"),t_o=o(" \u2014 "),OI=a("a"),a_o=o("PLBartModel"),n_o=o(" (PLBart model)"),s_o=l(),Ju=a("li"),rse=a("strong"),l_o=o("poolformer"),i_o=o(" \u2014 "),VI=a("a"),d_o=o("PoolFormerModel"),c_o=o(" (PoolFormer model)"),m_o=l(),Yu=a("li"),tse=a("strong"),f_o=o("prophetnet"),g_o=o(" \u2014 "),XI=a("a"),h_o=o("ProphetNetModel"),u_o=o(" (ProphetNet model)"),p_o=l(),Ku=a("li"),ase=a("strong"),__o=o("qdqbert"),b_o=o(" \u2014 "),zI=a("a"),F_o=o("QDQBertModel"),v_o=o(" (QDQBert model)"),T_o=l(),Zu=a("li"),nse=a("strong"),M_o=o("reformer"),E_o=o(" \u2014 "),QI=a("a"),C_o=o("ReformerModel"),w_o=o(" (Reformer model)"),A_o=l(),ep=a("li"),sse=a("strong"),y_o=o("regnet"),L_o=o(" \u2014 "),WI=a("a"),x_o=o("RegNetModel"),$_o=o(" (RegNet model)"),k_o=l(),op=a("li"),lse=a("strong"),S_o=o("rembert"),R_o=o(" \u2014 "),HI=a("a"),B_o=o("RemBertModel"),P_o=o(" (RemBERT model)"),I_o=l(),rp=a("li"),ise=a("strong"),q_o=o("resnet"),N_o=o(" \u2014 "),UI=a("a"),j_o=o("ResNetModel"),D_o=o(" (ResNet model)"),G_o=l(),tp=a("li"),dse=a("strong"),O_o=o("retribert"),V_o=o(" \u2014 "),JI=a("a"),X_o=o("RetriBertModel"),z_o=o(" (RetriBERT model)"),Q_o=l(),ap=a("li"),cse=a("strong"),W_o=o("roberta"),H_o=o(" \u2014 "),YI=a("a"),U_o=o("RobertaModel"),J_o=o(" (RoBERTa model)"),Y_o=l(),np=a("li"),mse=a("strong"),K_o=o("roformer"),Z_o=o(" \u2014 "),KI=a("a"),ebo=o("RoFormerModel"),obo=o(" (RoFormer model)"),rbo=l(),sp=a("li"),fse=a("strong"),tbo=o("segformer"),abo=o(" \u2014 "),ZI=a("a"),nbo=o("SegformerModel"),sbo=o(" (SegFormer model)"),lbo=l(),lp=a("li"),gse=a("strong"),ibo=o("sew"),dbo=o(" \u2014 "),eq=a("a"),cbo=o("SEWModel"),mbo=o(" (SEW model)"),fbo=l(),ip=a("li"),hse=a("strong"),gbo=o("sew-d"),hbo=o(" \u2014 "),oq=a("a"),ubo=o("SEWDModel"),pbo=o(" (SEW-D model)"),_bo=l(),dp=a("li"),use=a("strong"),bbo=o("speech_to_text"),Fbo=o(" \u2014 "),rq=a("a"),vbo=o("Speech2TextModel"),Tbo=o(" (Speech2Text model)"),Mbo=l(),cp=a("li"),pse=a("strong"),Ebo=o("splinter"),Cbo=o(" \u2014 "),tq=a("a"),wbo=o("SplinterModel"),Abo=o(" (Splinter model)"),ybo=l(),mp=a("li"),_se=a("strong"),Lbo=o("squeezebert"),xbo=o(" \u2014 "),aq=a("a"),$bo=o("SqueezeBertModel"),kbo=o(" (SqueezeBERT model)"),Sbo=l(),fp=a("li"),bse=a("strong"),Rbo=o("swin"),Bbo=o(" \u2014 "),nq=a("a"),Pbo=o("SwinModel"),Ibo=o(" (Swin model)"),qbo=l(),gp=a("li"),Fse=a("strong"),Nbo=o("t5"),jbo=o(" \u2014 "),sq=a("a"),Dbo=o("T5Model"),Gbo=o(" (T5 model)"),Obo=l(),hp=a("li"),vse=a("strong"),Vbo=o("tapas"),Xbo=o(" \u2014 "),lq=a("a"),zbo=o("TapasModel"),Qbo=o(" (TAPAS model)"),Wbo=l(),up=a("li"),Tse=a("strong"),Hbo=o("transfo-xl"),Ubo=o(" \u2014 "),iq=a("a"),Jbo=o("TransfoXLModel"),Ybo=o(" (Transformer-XL model)"),Kbo=l(),pp=a("li"),Mse=a("strong"),Zbo=o("unispeech"),e2o=o(" \u2014 "),dq=a("a"),o2o=o("UniSpeechModel"),r2o=o(" (UniSpeech model)"),t2o=l(),_p=a("li"),Ese=a("strong"),a2o=o("unispeech-sat"),n2o=o(" \u2014 "),cq=a("a"),s2o=o("UniSpeechSatModel"),l2o=o(" (UniSpeechSat model)"),i2o=l(),bp=a("li"),Cse=a("strong"),d2o=o("van"),c2o=o(" \u2014 "),mq=a("a"),m2o=o("VanModel"),f2o=o(" (VAN model)"),g2o=l(),Fp=a("li"),wse=a("strong"),h2o=o("vilt"),u2o=o(" \u2014 "),fq=a("a"),p2o=o("ViltModel"),_2o=o(" (ViLT model)"),b2o=l(),vp=a("li"),Ase=a("strong"),F2o=o("vision-text-dual-encoder"),v2o=o(" \u2014 "),gq=a("a"),T2o=o("VisionTextDualEncoderModel"),M2o=o(" (VisionTextDualEncoder model)"),E2o=l(),Tp=a("li"),yse=a("strong"),C2o=o("visual_bert"),w2o=o(" \u2014 "),hq=a("a"),A2o=o("VisualBertModel"),y2o=o(" (VisualBert model)"),L2o=l(),Mp=a("li"),Lse=a("strong"),x2o=o("vit"),$2o=o(" \u2014 "),uq=a("a"),k2o=o("ViTModel"),S2o=o(" (ViT model)"),R2o=l(),Ep=a("li"),xse=a("strong"),B2o=o("vit_mae"),P2o=o(" \u2014 "),pq=a("a"),I2o=o("ViTMAEModel"),q2o=o(" (ViTMAE model)"),N2o=l(),Cp=a("li"),$se=a("strong"),j2o=o("wav2vec2"),D2o=o(" \u2014 "),_q=a("a"),G2o=o("Wav2Vec2Model"),O2o=o(" (Wav2Vec2 model)"),V2o=l(),wp=a("li"),kse=a("strong"),X2o=o("wavlm"),z2o=o(" \u2014 "),bq=a("a"),Q2o=o("WavLMModel"),W2o=o(" (WavLM model)"),H2o=l(),Ap=a("li"),Sse=a("strong"),U2o=o("xglm"),J2o=o(" \u2014 "),Fq=a("a"),Y2o=o("XGLMModel"),K2o=o(" (XGLM model)"),Z2o=l(),yp=a("li"),Rse=a("strong"),eFo=o("xlm"),oFo=o(" \u2014 "),vq=a("a"),rFo=o("XLMModel"),tFo=o(" (XLM model)"),aFo=l(),Lp=a("li"),Bse=a("strong"),nFo=o("xlm-prophetnet"),sFo=o(" \u2014 "),Tq=a("a"),lFo=o("XLMProphetNetModel"),iFo=o(" (XLMProphetNet model)"),dFo=l(),xp=a("li"),Pse=a("strong"),cFo=o("xlm-roberta"),mFo=o(" \u2014 "),Mq=a("a"),fFo=o("XLMRobertaModel"),gFo=o(" (XLM-RoBERTa model)"),hFo=l(),$p=a("li"),Ise=a("strong"),uFo=o("xlm-roberta-xl"),pFo=o(" \u2014 "),Eq=a("a"),_Fo=o("XLMRobertaXLModel"),bFo=o(" (XLM-RoBERTa-XL model)"),FFo=l(),kp=a("li"),qse=a("strong"),vFo=o("xlnet"),TFo=o(" \u2014 "),Cq=a("a"),MFo=o("XLNetModel"),EFo=o(" (XLNet model)"),CFo=l(),Sp=a("li"),Nse=a("strong"),wFo=o("yolos"),AFo=o(" \u2014 "),wq=a("a"),yFo=o("YolosModel"),LFo=o(" (YOLOS model)"),xFo=l(),Rp=a("li"),jse=a("strong"),$Fo=o("yoso"),kFo=o(" \u2014 "),Aq=a("a"),SFo=o("YosoModel"),RFo=o(" (YOSO model)"),BFo=l(),Bp=a("p"),PFo=o("The model is set in evaluation mode by default using "),Dse=a("code"),IFo=o("model.eval()"),qFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gse=a("code"),NFo=o("model.train()"),jFo=l(),v(Pp.$$.fragment),QPe=l(),Ci=a("h2"),Ip=a("a"),Ose=a("span"),v(wy.$$.fragment),DFo=l(),Vse=a("span"),GFo=o("AutoModelForPreTraining"),WPe=l(),xo=a("div"),v(Ay.$$.fragment),OFo=l(),wi=a("p"),VFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yq=a("a"),XFo=o("from_pretrained()"),zFo=o(" class method or the "),Lq=a("a"),QFo=o("from_config()"),WFo=o(` class
method.`),HFo=l(),yy=a("p"),UFo=o("This class cannot be instantiated directly using "),Xse=a("code"),JFo=o("__init__()"),YFo=o(" (throws an error)."),KFo=l(),rt=a("div"),v(Ly.$$.fragment),ZFo=l(),zse=a("p"),evo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ovo=l(),Ai=a("p"),rvo=o(`Note:
Loading a model from its configuration file does `),Qse=a("strong"),tvo=o("not"),avo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=a("a"),nvo=o("from_pretrained()"),svo=o(" to load the model weights."),lvo=l(),v(qp.$$.fragment),ivo=l(),Ue=a("div"),v(xy.$$.fragment),dvo=l(),Wse=a("p"),cvo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mvo=l(),ya=a("p"),fvo=o("The model class to instantiate is selected based on the "),Hse=a("code"),gvo=o("model_type"),hvo=o(` property of the config object (either
passed as an argument or loaded from `),Use=a("code"),uvo=o("pretrained_model_name_or_path"),pvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jse=a("code"),_vo=o("pretrained_model_name_or_path"),bvo=o(":"),Fvo=l(),G=a("ul"),Np=a("li"),Yse=a("strong"),vvo=o("albert"),Tvo=o(" \u2014 "),$q=a("a"),Mvo=o("AlbertForPreTraining"),Evo=o(" (ALBERT model)"),Cvo=l(),jp=a("li"),Kse=a("strong"),wvo=o("bart"),Avo=o(" \u2014 "),kq=a("a"),yvo=o("BartForConditionalGeneration"),Lvo=o(" (BART model)"),xvo=l(),Dp=a("li"),Zse=a("strong"),$vo=o("bert"),kvo=o(" \u2014 "),Sq=a("a"),Svo=o("BertForPreTraining"),Rvo=o(" (BERT model)"),Bvo=l(),Gp=a("li"),ele=a("strong"),Pvo=o("big_bird"),Ivo=o(" \u2014 "),Rq=a("a"),qvo=o("BigBirdForPreTraining"),Nvo=o(" (BigBird model)"),jvo=l(),Op=a("li"),ole=a("strong"),Dvo=o("camembert"),Gvo=o(" \u2014 "),Bq=a("a"),Ovo=o("CamembertForMaskedLM"),Vvo=o(" (CamemBERT model)"),Xvo=l(),Vp=a("li"),rle=a("strong"),zvo=o("ctrl"),Qvo=o(" \u2014 "),Pq=a("a"),Wvo=o("CTRLLMHeadModel"),Hvo=o(" (CTRL model)"),Uvo=l(),Xp=a("li"),tle=a("strong"),Jvo=o("data2vec-text"),Yvo=o(" \u2014 "),Iq=a("a"),Kvo=o("Data2VecTextForMaskedLM"),Zvo=o(" (Data2VecText model)"),e1o=l(),zp=a("li"),ale=a("strong"),o1o=o("deberta"),r1o=o(" \u2014 "),qq=a("a"),t1o=o("DebertaForMaskedLM"),a1o=o(" (DeBERTa model)"),n1o=l(),Qp=a("li"),nle=a("strong"),s1o=o("deberta-v2"),l1o=o(" \u2014 "),Nq=a("a"),i1o=o("DebertaV2ForMaskedLM"),d1o=o(" (DeBERTa-v2 model)"),c1o=l(),Wp=a("li"),sle=a("strong"),m1o=o("distilbert"),f1o=o(" \u2014 "),jq=a("a"),g1o=o("DistilBertForMaskedLM"),h1o=o(" (DistilBERT model)"),u1o=l(),Hp=a("li"),lle=a("strong"),p1o=o("electra"),_1o=o(" \u2014 "),Dq=a("a"),b1o=o("ElectraForPreTraining"),F1o=o(" (ELECTRA model)"),v1o=l(),Up=a("li"),ile=a("strong"),T1o=o("flaubert"),M1o=o(" \u2014 "),Gq=a("a"),E1o=o("FlaubertWithLMHeadModel"),C1o=o(" (FlauBERT model)"),w1o=l(),Jp=a("li"),dle=a("strong"),A1o=o("flava"),y1o=o(" \u2014 "),Oq=a("a"),L1o=o("FlavaForPreTraining"),x1o=o(" (Flava model)"),$1o=l(),Yp=a("li"),cle=a("strong"),k1o=o("fnet"),S1o=o(" \u2014 "),Vq=a("a"),R1o=o("FNetForPreTraining"),B1o=o(" (FNet model)"),P1o=l(),Kp=a("li"),mle=a("strong"),I1o=o("fsmt"),q1o=o(" \u2014 "),Xq=a("a"),N1o=o("FSMTForConditionalGeneration"),j1o=o(" (FairSeq Machine-Translation model)"),D1o=l(),Zp=a("li"),fle=a("strong"),G1o=o("funnel"),O1o=o(" \u2014 "),zq=a("a"),V1o=o("FunnelForPreTraining"),X1o=o(" (Funnel Transformer model)"),z1o=l(),e_=a("li"),gle=a("strong"),Q1o=o("gpt2"),W1o=o(" \u2014 "),Qq=a("a"),H1o=o("GPT2LMHeadModel"),U1o=o(" (OpenAI GPT-2 model)"),J1o=l(),o_=a("li"),hle=a("strong"),Y1o=o("ibert"),K1o=o(" \u2014 "),Wq=a("a"),Z1o=o("IBertForMaskedLM"),eTo=o(" (I-BERT model)"),oTo=l(),r_=a("li"),ule=a("strong"),rTo=o("layoutlm"),tTo=o(" \u2014 "),Hq=a("a"),aTo=o("LayoutLMForMaskedLM"),nTo=o(" (LayoutLM model)"),sTo=l(),t_=a("li"),ple=a("strong"),lTo=o("longformer"),iTo=o(" \u2014 "),Uq=a("a"),dTo=o("LongformerForMaskedLM"),cTo=o(" (Longformer model)"),mTo=l(),a_=a("li"),_le=a("strong"),fTo=o("lxmert"),gTo=o(" \u2014 "),Jq=a("a"),hTo=o("LxmertForPreTraining"),uTo=o(" (LXMERT model)"),pTo=l(),n_=a("li"),ble=a("strong"),_To=o("megatron-bert"),bTo=o(" \u2014 "),Yq=a("a"),FTo=o("MegatronBertForPreTraining"),vTo=o(" (MegatronBert model)"),TTo=l(),s_=a("li"),Fle=a("strong"),MTo=o("mobilebert"),ETo=o(" \u2014 "),Kq=a("a"),CTo=o("MobileBertForPreTraining"),wTo=o(" (MobileBERT model)"),ATo=l(),l_=a("li"),vle=a("strong"),yTo=o("mpnet"),LTo=o(" \u2014 "),Zq=a("a"),xTo=o("MPNetForMaskedLM"),$To=o(" (MPNet model)"),kTo=l(),i_=a("li"),Tle=a("strong"),STo=o("openai-gpt"),RTo=o(" \u2014 "),eN=a("a"),BTo=o("OpenAIGPTLMHeadModel"),PTo=o(" (OpenAI GPT model)"),ITo=l(),d_=a("li"),Mle=a("strong"),qTo=o("retribert"),NTo=o(" \u2014 "),oN=a("a"),jTo=o("RetriBertModel"),DTo=o(" (RetriBERT model)"),GTo=l(),c_=a("li"),Ele=a("strong"),OTo=o("roberta"),VTo=o(" \u2014 "),rN=a("a"),XTo=o("RobertaForMaskedLM"),zTo=o(" (RoBERTa model)"),QTo=l(),m_=a("li"),Cle=a("strong"),WTo=o("squeezebert"),HTo=o(" \u2014 "),tN=a("a"),UTo=o("SqueezeBertForMaskedLM"),JTo=o(" (SqueezeBERT model)"),YTo=l(),f_=a("li"),wle=a("strong"),KTo=o("t5"),ZTo=o(" \u2014 "),aN=a("a"),eMo=o("T5ForConditionalGeneration"),oMo=o(" (T5 model)"),rMo=l(),g_=a("li"),Ale=a("strong"),tMo=o("tapas"),aMo=o(" \u2014 "),nN=a("a"),nMo=o("TapasForMaskedLM"),sMo=o(" (TAPAS model)"),lMo=l(),h_=a("li"),yle=a("strong"),iMo=o("transfo-xl"),dMo=o(" \u2014 "),sN=a("a"),cMo=o("TransfoXLLMHeadModel"),mMo=o(" (Transformer-XL model)"),fMo=l(),u_=a("li"),Lle=a("strong"),gMo=o("unispeech"),hMo=o(" \u2014 "),lN=a("a"),uMo=o("UniSpeechForPreTraining"),pMo=o(" (UniSpeech model)"),_Mo=l(),p_=a("li"),xle=a("strong"),bMo=o("unispeech-sat"),FMo=o(" \u2014 "),iN=a("a"),vMo=o("UniSpeechSatForPreTraining"),TMo=o(" (UniSpeechSat model)"),MMo=l(),__=a("li"),$le=a("strong"),EMo=o("visual_bert"),CMo=o(" \u2014 "),dN=a("a"),wMo=o("VisualBertForPreTraining"),AMo=o(" (VisualBert model)"),yMo=l(),b_=a("li"),kle=a("strong"),LMo=o("vit_mae"),xMo=o(" \u2014 "),cN=a("a"),$Mo=o("ViTMAEForPreTraining"),kMo=o(" (ViTMAE model)"),SMo=l(),F_=a("li"),Sle=a("strong"),RMo=o("wav2vec2"),BMo=o(" \u2014 "),mN=a("a"),PMo=o("Wav2Vec2ForPreTraining"),IMo=o(" (Wav2Vec2 model)"),qMo=l(),v_=a("li"),Rle=a("strong"),NMo=o("xlm"),jMo=o(" \u2014 "),fN=a("a"),DMo=o("XLMWithLMHeadModel"),GMo=o(" (XLM model)"),OMo=l(),T_=a("li"),Ble=a("strong"),VMo=o("xlm-roberta"),XMo=o(" \u2014 "),gN=a("a"),zMo=o("XLMRobertaForMaskedLM"),QMo=o(" (XLM-RoBERTa model)"),WMo=l(),M_=a("li"),Ple=a("strong"),HMo=o("xlm-roberta-xl"),UMo=o(" \u2014 "),hN=a("a"),JMo=o("XLMRobertaXLForMaskedLM"),YMo=o(" (XLM-RoBERTa-XL model)"),KMo=l(),E_=a("li"),Ile=a("strong"),ZMo=o("xlnet"),e4o=o(" \u2014 "),uN=a("a"),o4o=o("XLNetLMHeadModel"),r4o=o(" (XLNet model)"),t4o=l(),C_=a("p"),a4o=o("The model is set in evaluation mode by default using "),qle=a("code"),n4o=o("model.eval()"),s4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=a("code"),l4o=o("model.train()"),i4o=l(),v(w_.$$.fragment),HPe=l(),yi=a("h2"),A_=a("a"),jle=a("span"),v($y.$$.fragment),d4o=l(),Dle=a("span"),c4o=o("AutoModelForCausalLM"),UPe=l(),$o=a("div"),v(ky.$$.fragment),m4o=l(),Li=a("p"),f4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pN=a("a"),g4o=o("from_pretrained()"),h4o=o(" class method or the "),_N=a("a"),u4o=o("from_config()"),p4o=o(` class
method.`),_4o=l(),Sy=a("p"),b4o=o("This class cannot be instantiated directly using "),Gle=a("code"),F4o=o("__init__()"),v4o=o(" (throws an error)."),T4o=l(),tt=a("div"),v(Ry.$$.fragment),M4o=l(),Ole=a("p"),E4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C4o=l(),xi=a("p"),w4o=o(`Note:
Loading a model from its configuration file does `),Vle=a("strong"),A4o=o("not"),y4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=a("a"),L4o=o("from_pretrained()"),x4o=o(" to load the model weights."),$4o=l(),v(y_.$$.fragment),k4o=l(),Je=a("div"),v(By.$$.fragment),S4o=l(),Xle=a("p"),R4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B4o=l(),La=a("p"),P4o=o("The model class to instantiate is selected based on the "),zle=a("code"),I4o=o("model_type"),q4o=o(` property of the config object (either
passed as an argument or loaded from `),Qle=a("code"),N4o=o("pretrained_model_name_or_path"),j4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),D4o=o("pretrained_model_name_or_path"),G4o=o(":"),O4o=l(),z=a("ul"),L_=a("li"),Hle=a("strong"),V4o=o("bart"),X4o=o(" \u2014 "),FN=a("a"),z4o=o("BartForCausalLM"),Q4o=o(" (BART model)"),W4o=l(),x_=a("li"),Ule=a("strong"),H4o=o("bert"),U4o=o(" \u2014 "),vN=a("a"),J4o=o("BertLMHeadModel"),Y4o=o(" (BERT model)"),K4o=l(),$_=a("li"),Jle=a("strong"),Z4o=o("bert-generation"),eEo=o(" \u2014 "),TN=a("a"),oEo=o("BertGenerationDecoder"),rEo=o(" (Bert Generation model)"),tEo=l(),k_=a("li"),Yle=a("strong"),aEo=o("big_bird"),nEo=o(" \u2014 "),MN=a("a"),sEo=o("BigBirdForCausalLM"),lEo=o(" (BigBird model)"),iEo=l(),S_=a("li"),Kle=a("strong"),dEo=o("bigbird_pegasus"),cEo=o(" \u2014 "),EN=a("a"),mEo=o("BigBirdPegasusForCausalLM"),fEo=o(" (BigBirdPegasus model)"),gEo=l(),R_=a("li"),Zle=a("strong"),hEo=o("blenderbot"),uEo=o(" \u2014 "),CN=a("a"),pEo=o("BlenderbotForCausalLM"),_Eo=o(" (Blenderbot model)"),bEo=l(),B_=a("li"),eie=a("strong"),FEo=o("blenderbot-small"),vEo=o(" \u2014 "),wN=a("a"),TEo=o("BlenderbotSmallForCausalLM"),MEo=o(" (BlenderbotSmall model)"),EEo=l(),P_=a("li"),oie=a("strong"),CEo=o("camembert"),wEo=o(" \u2014 "),AN=a("a"),AEo=o("CamembertForCausalLM"),yEo=o(" (CamemBERT model)"),LEo=l(),I_=a("li"),rie=a("strong"),xEo=o("ctrl"),$Eo=o(" \u2014 "),yN=a("a"),kEo=o("CTRLLMHeadModel"),SEo=o(" (CTRL model)"),REo=l(),q_=a("li"),tie=a("strong"),BEo=o("data2vec-text"),PEo=o(" \u2014 "),LN=a("a"),IEo=o("Data2VecTextForCausalLM"),qEo=o(" (Data2VecText model)"),NEo=l(),N_=a("li"),aie=a("strong"),jEo=o("electra"),DEo=o(" \u2014 "),xN=a("a"),GEo=o("ElectraForCausalLM"),OEo=o(" (ELECTRA model)"),VEo=l(),j_=a("li"),nie=a("strong"),XEo=o("gpt2"),zEo=o(" \u2014 "),$N=a("a"),QEo=o("GPT2LMHeadModel"),WEo=o(" (OpenAI GPT-2 model)"),HEo=l(),D_=a("li"),sie=a("strong"),UEo=o("gpt_neo"),JEo=o(" \u2014 "),kN=a("a"),YEo=o("GPTNeoForCausalLM"),KEo=o(" (GPT Neo model)"),ZEo=l(),G_=a("li"),lie=a("strong"),e5o=o("gptj"),o5o=o(" \u2014 "),SN=a("a"),r5o=o("GPTJForCausalLM"),t5o=o(" (GPT-J model)"),a5o=l(),O_=a("li"),iie=a("strong"),n5o=o("marian"),s5o=o(" \u2014 "),RN=a("a"),l5o=o("MarianForCausalLM"),i5o=o(" (Marian model)"),d5o=l(),V_=a("li"),die=a("strong"),c5o=o("mbart"),m5o=o(" \u2014 "),BN=a("a"),f5o=o("MBartForCausalLM"),g5o=o(" (mBART model)"),h5o=l(),X_=a("li"),cie=a("strong"),u5o=o("megatron-bert"),p5o=o(" \u2014 "),PN=a("a"),_5o=o("MegatronBertForCausalLM"),b5o=o(" (MegatronBert model)"),F5o=l(),z_=a("li"),mie=a("strong"),v5o=o("openai-gpt"),T5o=o(" \u2014 "),IN=a("a"),M5o=o("OpenAIGPTLMHeadModel"),E5o=o(" (OpenAI GPT model)"),C5o=l(),Q_=a("li"),fie=a("strong"),w5o=o("opt"),A5o=o(" \u2014 "),qN=a("a"),y5o=o("OPTForCausalLM"),L5o=o(" (OPT model)"),x5o=l(),W_=a("li"),gie=a("strong"),$5o=o("pegasus"),k5o=o(" \u2014 "),NN=a("a"),S5o=o("PegasusForCausalLM"),R5o=o(" (Pegasus model)"),B5o=l(),H_=a("li"),hie=a("strong"),P5o=o("plbart"),I5o=o(" \u2014 "),jN=a("a"),q5o=o("PLBartForCausalLM"),N5o=o(" (PLBart model)"),j5o=l(),U_=a("li"),uie=a("strong"),D5o=o("prophetnet"),G5o=o(" \u2014 "),DN=a("a"),O5o=o("ProphetNetForCausalLM"),V5o=o(" (ProphetNet model)"),X5o=l(),J_=a("li"),pie=a("strong"),z5o=o("qdqbert"),Q5o=o(" \u2014 "),GN=a("a"),W5o=o("QDQBertLMHeadModel"),H5o=o(" (QDQBert model)"),U5o=l(),Y_=a("li"),_ie=a("strong"),J5o=o("reformer"),Y5o=o(" \u2014 "),ON=a("a"),K5o=o("ReformerModelWithLMHead"),Z5o=o(" (Reformer model)"),eCo=l(),K_=a("li"),bie=a("strong"),oCo=o("rembert"),rCo=o(" \u2014 "),VN=a("a"),tCo=o("RemBertForCausalLM"),aCo=o(" (RemBERT model)"),nCo=l(),Z_=a("li"),Fie=a("strong"),sCo=o("roberta"),lCo=o(" \u2014 "),XN=a("a"),iCo=o("RobertaForCausalLM"),dCo=o(" (RoBERTa model)"),cCo=l(),eb=a("li"),vie=a("strong"),mCo=o("roformer"),fCo=o(" \u2014 "),zN=a("a"),gCo=o("RoFormerForCausalLM"),hCo=o(" (RoFormer model)"),uCo=l(),ob=a("li"),Tie=a("strong"),pCo=o("speech_to_text_2"),_Co=o(" \u2014 "),QN=a("a"),bCo=o("Speech2Text2ForCausalLM"),FCo=o(" (Speech2Text2 model)"),vCo=l(),rb=a("li"),Mie=a("strong"),TCo=o("transfo-xl"),MCo=o(" \u2014 "),WN=a("a"),ECo=o("TransfoXLLMHeadModel"),CCo=o(" (Transformer-XL model)"),wCo=l(),tb=a("li"),Eie=a("strong"),ACo=o("trocr"),yCo=o(" \u2014 "),HN=a("a"),LCo=o("TrOCRForCausalLM"),xCo=o(" (TrOCR model)"),$Co=l(),ab=a("li"),Cie=a("strong"),kCo=o("xglm"),SCo=o(" \u2014 "),UN=a("a"),RCo=o("XGLMForCausalLM"),BCo=o(" (XGLM model)"),PCo=l(),nb=a("li"),wie=a("strong"),ICo=o("xlm"),qCo=o(" \u2014 "),JN=a("a"),NCo=o("XLMWithLMHeadModel"),jCo=o(" (XLM model)"),DCo=l(),sb=a("li"),Aie=a("strong"),GCo=o("xlm-prophetnet"),OCo=o(" \u2014 "),YN=a("a"),VCo=o("XLMProphetNetForCausalLM"),XCo=o(" (XLMProphetNet model)"),zCo=l(),lb=a("li"),yie=a("strong"),QCo=o("xlm-roberta"),WCo=o(" \u2014 "),KN=a("a"),HCo=o("XLMRobertaForCausalLM"),UCo=o(" (XLM-RoBERTa model)"),JCo=l(),ib=a("li"),Lie=a("strong"),YCo=o("xlm-roberta-xl"),KCo=o(" \u2014 "),ZN=a("a"),ZCo=o("XLMRobertaXLForCausalLM"),e3o=o(" (XLM-RoBERTa-XL model)"),o3o=l(),db=a("li"),xie=a("strong"),r3o=o("xlnet"),t3o=o(" \u2014 "),ej=a("a"),a3o=o("XLNetLMHeadModel"),n3o=o(" (XLNet model)"),s3o=l(),cb=a("p"),l3o=o("The model is set in evaluation mode by default using "),$ie=a("code"),i3o=o("model.eval()"),d3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),c3o=o("model.train()"),m3o=l(),v(mb.$$.fragment),JPe=l(),$i=a("h2"),fb=a("a"),Sie=a("span"),v(Py.$$.fragment),f3o=l(),Rie=a("span"),g3o=o("AutoModelForMaskedLM"),YPe=l(),ko=a("div"),v(Iy.$$.fragment),h3o=l(),ki=a("p"),u3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oj=a("a"),p3o=o("from_pretrained()"),_3o=o(" class method or the "),rj=a("a"),b3o=o("from_config()"),F3o=o(` class
method.`),v3o=l(),qy=a("p"),T3o=o("This class cannot be instantiated directly using "),Bie=a("code"),M3o=o("__init__()"),E3o=o(" (throws an error)."),C3o=l(),at=a("div"),v(Ny.$$.fragment),w3o=l(),Pie=a("p"),A3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y3o=l(),Si=a("p"),L3o=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),x3o=o("not"),$3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),k3o=o("from_pretrained()"),S3o=o(" to load the model weights."),R3o=l(),v(gb.$$.fragment),B3o=l(),Ye=a("div"),v(jy.$$.fragment),P3o=l(),qie=a("p"),I3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q3o=l(),xa=a("p"),N3o=o("The model class to instantiate is selected based on the "),Nie=a("code"),j3o=o("model_type"),D3o=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),G3o=o("pretrained_model_name_or_path"),O3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),V3o=o("pretrained_model_name_or_path"),X3o=o(":"),z3o=l(),Q=a("ul"),hb=a("li"),Gie=a("strong"),Q3o=o("albert"),W3o=o(" \u2014 "),aj=a("a"),H3o=o("AlbertForMaskedLM"),U3o=o(" (ALBERT model)"),J3o=l(),ub=a("li"),Oie=a("strong"),Y3o=o("bart"),K3o=o(" \u2014 "),nj=a("a"),Z3o=o("BartForConditionalGeneration"),ewo=o(" (BART model)"),owo=l(),pb=a("li"),Vie=a("strong"),rwo=o("bert"),two=o(" \u2014 "),sj=a("a"),awo=o("BertForMaskedLM"),nwo=o(" (BERT model)"),swo=l(),_b=a("li"),Xie=a("strong"),lwo=o("big_bird"),iwo=o(" \u2014 "),lj=a("a"),dwo=o("BigBirdForMaskedLM"),cwo=o(" (BigBird model)"),mwo=l(),bb=a("li"),zie=a("strong"),fwo=o("camembert"),gwo=o(" \u2014 "),ij=a("a"),hwo=o("CamembertForMaskedLM"),uwo=o(" (CamemBERT model)"),pwo=l(),Fb=a("li"),Qie=a("strong"),_wo=o("convbert"),bwo=o(" \u2014 "),dj=a("a"),Fwo=o("ConvBertForMaskedLM"),vwo=o(" (ConvBERT model)"),Two=l(),vb=a("li"),Wie=a("strong"),Mwo=o("data2vec-text"),Ewo=o(" \u2014 "),cj=a("a"),Cwo=o("Data2VecTextForMaskedLM"),wwo=o(" (Data2VecText model)"),Awo=l(),Tb=a("li"),Hie=a("strong"),ywo=o("deberta"),Lwo=o(" \u2014 "),mj=a("a"),xwo=o("DebertaForMaskedLM"),$wo=o(" (DeBERTa model)"),kwo=l(),Mb=a("li"),Uie=a("strong"),Swo=o("deberta-v2"),Rwo=o(" \u2014 "),fj=a("a"),Bwo=o("DebertaV2ForMaskedLM"),Pwo=o(" (DeBERTa-v2 model)"),Iwo=l(),Eb=a("li"),Jie=a("strong"),qwo=o("distilbert"),Nwo=o(" \u2014 "),gj=a("a"),jwo=o("DistilBertForMaskedLM"),Dwo=o(" (DistilBERT model)"),Gwo=l(),Cb=a("li"),Yie=a("strong"),Owo=o("electra"),Vwo=o(" \u2014 "),hj=a("a"),Xwo=o("ElectraForMaskedLM"),zwo=o(" (ELECTRA model)"),Qwo=l(),wb=a("li"),Kie=a("strong"),Wwo=o("flaubert"),Hwo=o(" \u2014 "),uj=a("a"),Uwo=o("FlaubertWithLMHeadModel"),Jwo=o(" (FlauBERT model)"),Ywo=l(),Ab=a("li"),Zie=a("strong"),Kwo=o("fnet"),Zwo=o(" \u2014 "),pj=a("a"),eAo=o("FNetForMaskedLM"),oAo=o(" (FNet model)"),rAo=l(),yb=a("li"),ede=a("strong"),tAo=o("funnel"),aAo=o(" \u2014 "),_j=a("a"),nAo=o("FunnelForMaskedLM"),sAo=o(" (Funnel Transformer model)"),lAo=l(),Lb=a("li"),ode=a("strong"),iAo=o("ibert"),dAo=o(" \u2014 "),bj=a("a"),cAo=o("IBertForMaskedLM"),mAo=o(" (I-BERT model)"),fAo=l(),xb=a("li"),rde=a("strong"),gAo=o("layoutlm"),hAo=o(" \u2014 "),Fj=a("a"),uAo=o("LayoutLMForMaskedLM"),pAo=o(" (LayoutLM model)"),_Ao=l(),$b=a("li"),tde=a("strong"),bAo=o("longformer"),FAo=o(" \u2014 "),vj=a("a"),vAo=o("LongformerForMaskedLM"),TAo=o(" (Longformer model)"),MAo=l(),kb=a("li"),ade=a("strong"),EAo=o("mbart"),CAo=o(" \u2014 "),Tj=a("a"),wAo=o("MBartForConditionalGeneration"),AAo=o(" (mBART model)"),yAo=l(),Sb=a("li"),nde=a("strong"),LAo=o("megatron-bert"),xAo=o(" \u2014 "),Mj=a("a"),$Ao=o("MegatronBertForMaskedLM"),kAo=o(" (MegatronBert model)"),SAo=l(),Rb=a("li"),sde=a("strong"),RAo=o("mobilebert"),BAo=o(" \u2014 "),Ej=a("a"),PAo=o("MobileBertForMaskedLM"),IAo=o(" (MobileBERT model)"),qAo=l(),Bb=a("li"),lde=a("strong"),NAo=o("mpnet"),jAo=o(" \u2014 "),Cj=a("a"),DAo=o("MPNetForMaskedLM"),GAo=o(" (MPNet model)"),OAo=l(),Pb=a("li"),ide=a("strong"),VAo=o("nystromformer"),XAo=o(" \u2014 "),wj=a("a"),zAo=o("NystromformerForMaskedLM"),QAo=o(" (Nystromformer model)"),WAo=l(),Ib=a("li"),dde=a("strong"),HAo=o("perceiver"),UAo=o(" \u2014 "),Aj=a("a"),JAo=o("PerceiverForMaskedLM"),YAo=o(" (Perceiver model)"),KAo=l(),qb=a("li"),cde=a("strong"),ZAo=o("qdqbert"),e0o=o(" \u2014 "),yj=a("a"),o0o=o("QDQBertForMaskedLM"),r0o=o(" (QDQBert model)"),t0o=l(),Nb=a("li"),mde=a("strong"),a0o=o("reformer"),n0o=o(" \u2014 "),Lj=a("a"),s0o=o("ReformerForMaskedLM"),l0o=o(" (Reformer model)"),i0o=l(),jb=a("li"),fde=a("strong"),d0o=o("rembert"),c0o=o(" \u2014 "),xj=a("a"),m0o=o("RemBertForMaskedLM"),f0o=o(" (RemBERT model)"),g0o=l(),Db=a("li"),gde=a("strong"),h0o=o("roberta"),u0o=o(" \u2014 "),$j=a("a"),p0o=o("RobertaForMaskedLM"),_0o=o(" (RoBERTa model)"),b0o=l(),Gb=a("li"),hde=a("strong"),F0o=o("roformer"),v0o=o(" \u2014 "),kj=a("a"),T0o=o("RoFormerForMaskedLM"),M0o=o(" (RoFormer model)"),E0o=l(),Ob=a("li"),ude=a("strong"),C0o=o("squeezebert"),w0o=o(" \u2014 "),Sj=a("a"),A0o=o("SqueezeBertForMaskedLM"),y0o=o(" (SqueezeBERT model)"),L0o=l(),Vb=a("li"),pde=a("strong"),x0o=o("tapas"),$0o=o(" \u2014 "),Rj=a("a"),k0o=o("TapasForMaskedLM"),S0o=o(" (TAPAS model)"),R0o=l(),Xb=a("li"),_de=a("strong"),B0o=o("wav2vec2"),P0o=o(" \u2014 "),bde=a("code"),I0o=o("Wav2Vec2ForMaskedLM"),q0o=o(" (Wav2Vec2 model)"),N0o=l(),zb=a("li"),Fde=a("strong"),j0o=o("xlm"),D0o=o(" \u2014 "),Bj=a("a"),G0o=o("XLMWithLMHeadModel"),O0o=o(" (XLM model)"),V0o=l(),Qb=a("li"),vde=a("strong"),X0o=o("xlm-roberta"),z0o=o(" \u2014 "),Pj=a("a"),Q0o=o("XLMRobertaForMaskedLM"),W0o=o(" (XLM-RoBERTa model)"),H0o=l(),Wb=a("li"),Tde=a("strong"),U0o=o("xlm-roberta-xl"),J0o=o(" \u2014 "),Ij=a("a"),Y0o=o("XLMRobertaXLForMaskedLM"),K0o=o(" (XLM-RoBERTa-XL model)"),Z0o=l(),Hb=a("li"),Mde=a("strong"),e6o=o("yoso"),o6o=o(" \u2014 "),qj=a("a"),r6o=o("YosoForMaskedLM"),t6o=o(" (YOSO model)"),a6o=l(),Ub=a("p"),n6o=o("The model is set in evaluation mode by default using "),Ede=a("code"),s6o=o("model.eval()"),l6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),i6o=o("model.train()"),d6o=l(),v(Jb.$$.fragment),KPe=l(),Ri=a("h2"),Yb=a("a"),wde=a("span"),v(Dy.$$.fragment),c6o=l(),Ade=a("span"),m6o=o("AutoModelForSeq2SeqLM"),ZPe=l(),So=a("div"),v(Gy.$$.fragment),f6o=l(),Bi=a("p"),g6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nj=a("a"),h6o=o("from_pretrained()"),u6o=o(" class method or the "),jj=a("a"),p6o=o("from_config()"),_6o=o(` class
method.`),b6o=l(),Oy=a("p"),F6o=o("This class cannot be instantiated directly using "),yde=a("code"),v6o=o("__init__()"),T6o=o(" (throws an error)."),M6o=l(),nt=a("div"),v(Vy.$$.fragment),E6o=l(),Lde=a("p"),C6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w6o=l(),Pi=a("p"),A6o=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),y6o=o("not"),L6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dj=a("a"),x6o=o("from_pretrained()"),$6o=o(" to load the model weights."),k6o=l(),v(Kb.$$.fragment),S6o=l(),Ke=a("div"),v(Xy.$$.fragment),R6o=l(),$de=a("p"),B6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),P6o=l(),$a=a("p"),I6o=o("The model class to instantiate is selected based on the "),kde=a("code"),q6o=o("model_type"),N6o=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),j6o=o("pretrained_model_name_or_path"),D6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=a("code"),G6o=o("pretrained_model_name_or_path"),O6o=o(":"),V6o=l(),ue=a("ul"),Zb=a("li"),Bde=a("strong"),X6o=o("bart"),z6o=o(" \u2014 "),Gj=a("a"),Q6o=o("BartForConditionalGeneration"),W6o=o(" (BART model)"),H6o=l(),e2=a("li"),Pde=a("strong"),U6o=o("bigbird_pegasus"),J6o=o(" \u2014 "),Oj=a("a"),Y6o=o("BigBirdPegasusForConditionalGeneration"),K6o=o(" (BigBirdPegasus model)"),Z6o=l(),o2=a("li"),Ide=a("strong"),eyo=o("blenderbot"),oyo=o(" \u2014 "),Vj=a("a"),ryo=o("BlenderbotForConditionalGeneration"),tyo=o(" (Blenderbot model)"),ayo=l(),r2=a("li"),qde=a("strong"),nyo=o("blenderbot-small"),syo=o(" \u2014 "),Xj=a("a"),lyo=o("BlenderbotSmallForConditionalGeneration"),iyo=o(" (BlenderbotSmall model)"),dyo=l(),t2=a("li"),Nde=a("strong"),cyo=o("encoder-decoder"),myo=o(" \u2014 "),zj=a("a"),fyo=o("EncoderDecoderModel"),gyo=o(" (Encoder decoder model)"),hyo=l(),a2=a("li"),jde=a("strong"),uyo=o("fsmt"),pyo=o(" \u2014 "),Qj=a("a"),_yo=o("FSMTForConditionalGeneration"),byo=o(" (FairSeq Machine-Translation model)"),Fyo=l(),n2=a("li"),Dde=a("strong"),vyo=o("led"),Tyo=o(" \u2014 "),Wj=a("a"),Myo=o("LEDForConditionalGeneration"),Eyo=o(" (LED model)"),Cyo=l(),s2=a("li"),Gde=a("strong"),wyo=o("m2m_100"),Ayo=o(" \u2014 "),Hj=a("a"),yyo=o("M2M100ForConditionalGeneration"),Lyo=o(" (M2M100 model)"),xyo=l(),l2=a("li"),Ode=a("strong"),$yo=o("marian"),kyo=o(" \u2014 "),Uj=a("a"),Syo=o("MarianMTModel"),Ryo=o(" (Marian model)"),Byo=l(),i2=a("li"),Vde=a("strong"),Pyo=o("mbart"),Iyo=o(" \u2014 "),Jj=a("a"),qyo=o("MBartForConditionalGeneration"),Nyo=o(" (mBART model)"),jyo=l(),d2=a("li"),Xde=a("strong"),Dyo=o("mt5"),Gyo=o(" \u2014 "),Yj=a("a"),Oyo=o("MT5ForConditionalGeneration"),Vyo=o(" (mT5 model)"),Xyo=l(),c2=a("li"),zde=a("strong"),zyo=o("pegasus"),Qyo=o(" \u2014 "),Kj=a("a"),Wyo=o("PegasusForConditionalGeneration"),Hyo=o(" (Pegasus model)"),Uyo=l(),m2=a("li"),Qde=a("strong"),Jyo=o("plbart"),Yyo=o(" \u2014 "),Zj=a("a"),Kyo=o("PLBartForConditionalGeneration"),Zyo=o(" (PLBart model)"),eLo=l(),f2=a("li"),Wde=a("strong"),oLo=o("prophetnet"),rLo=o(" \u2014 "),eD=a("a"),tLo=o("ProphetNetForConditionalGeneration"),aLo=o(" (ProphetNet model)"),nLo=l(),g2=a("li"),Hde=a("strong"),sLo=o("t5"),lLo=o(" \u2014 "),oD=a("a"),iLo=o("T5ForConditionalGeneration"),dLo=o(" (T5 model)"),cLo=l(),h2=a("li"),Ude=a("strong"),mLo=o("xlm-prophetnet"),fLo=o(" \u2014 "),rD=a("a"),gLo=o("XLMProphetNetForConditionalGeneration"),hLo=o(" (XLMProphetNet model)"),uLo=l(),u2=a("p"),pLo=o("The model is set in evaluation mode by default using "),Jde=a("code"),_Lo=o("model.eval()"),bLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yde=a("code"),FLo=o("model.train()"),vLo=l(),v(p2.$$.fragment),eIe=l(),Ii=a("h2"),_2=a("a"),Kde=a("span"),v(zy.$$.fragment),TLo=l(),Zde=a("span"),MLo=o("AutoModelForSequenceClassification"),oIe=l(),Ro=a("div"),v(Qy.$$.fragment),ELo=l(),qi=a("p"),CLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tD=a("a"),wLo=o("from_pretrained()"),ALo=o(" class method or the "),aD=a("a"),yLo=o("from_config()"),LLo=o(` class
method.`),xLo=l(),Wy=a("p"),$Lo=o("This class cannot be instantiated directly using "),ece=a("code"),kLo=o("__init__()"),SLo=o(" (throws an error)."),RLo=l(),st=a("div"),v(Hy.$$.fragment),BLo=l(),oce=a("p"),PLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ILo=l(),Ni=a("p"),qLo=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),NLo=o("not"),jLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=a("a"),DLo=o("from_pretrained()"),GLo=o(" to load the model weights."),OLo=l(),v(b2.$$.fragment),VLo=l(),Ze=a("div"),v(Uy.$$.fragment),XLo=l(),tce=a("p"),zLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QLo=l(),ka=a("p"),WLo=o("The model class to instantiate is selected based on the "),ace=a("code"),HLo=o("model_type"),ULo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),JLo=o("pretrained_model_name_or_path"),YLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),KLo=o("pretrained_model_name_or_path"),ZLo=o(":"),e8o=l(),q=a("ul"),F2=a("li"),lce=a("strong"),o8o=o("albert"),r8o=o(" \u2014 "),sD=a("a"),t8o=o("AlbertForSequenceClassification"),a8o=o(" (ALBERT model)"),n8o=l(),v2=a("li"),ice=a("strong"),s8o=o("bart"),l8o=o(" \u2014 "),lD=a("a"),i8o=o("BartForSequenceClassification"),d8o=o(" (BART model)"),c8o=l(),T2=a("li"),dce=a("strong"),m8o=o("bert"),f8o=o(" \u2014 "),iD=a("a"),g8o=o("BertForSequenceClassification"),h8o=o(" (BERT model)"),u8o=l(),M2=a("li"),cce=a("strong"),p8o=o("big_bird"),_8o=o(" \u2014 "),dD=a("a"),b8o=o("BigBirdForSequenceClassification"),F8o=o(" (BigBird model)"),v8o=l(),E2=a("li"),mce=a("strong"),T8o=o("bigbird_pegasus"),M8o=o(" \u2014 "),cD=a("a"),E8o=o("BigBirdPegasusForSequenceClassification"),C8o=o(" (BigBirdPegasus model)"),w8o=l(),C2=a("li"),fce=a("strong"),A8o=o("camembert"),y8o=o(" \u2014 "),mD=a("a"),L8o=o("CamembertForSequenceClassification"),x8o=o(" (CamemBERT model)"),$8o=l(),w2=a("li"),gce=a("strong"),k8o=o("canine"),S8o=o(" \u2014 "),fD=a("a"),R8o=o("CanineForSequenceClassification"),B8o=o(" (Canine model)"),P8o=l(),A2=a("li"),hce=a("strong"),I8o=o("convbert"),q8o=o(" \u2014 "),gD=a("a"),N8o=o("ConvBertForSequenceClassification"),j8o=o(" (ConvBERT model)"),D8o=l(),y2=a("li"),uce=a("strong"),G8o=o("ctrl"),O8o=o(" \u2014 "),hD=a("a"),V8o=o("CTRLForSequenceClassification"),X8o=o(" (CTRL model)"),z8o=l(),L2=a("li"),pce=a("strong"),Q8o=o("data2vec-text"),W8o=o(" \u2014 "),uD=a("a"),H8o=o("Data2VecTextForSequenceClassification"),U8o=o(" (Data2VecText model)"),J8o=l(),x2=a("li"),_ce=a("strong"),Y8o=o("deberta"),K8o=o(" \u2014 "),pD=a("a"),Z8o=o("DebertaForSequenceClassification"),exo=o(" (DeBERTa model)"),oxo=l(),$2=a("li"),bce=a("strong"),rxo=o("deberta-v2"),txo=o(" \u2014 "),_D=a("a"),axo=o("DebertaV2ForSequenceClassification"),nxo=o(" (DeBERTa-v2 model)"),sxo=l(),k2=a("li"),Fce=a("strong"),lxo=o("distilbert"),ixo=o(" \u2014 "),bD=a("a"),dxo=o("DistilBertForSequenceClassification"),cxo=o(" (DistilBERT model)"),mxo=l(),S2=a("li"),vce=a("strong"),fxo=o("electra"),gxo=o(" \u2014 "),FD=a("a"),hxo=o("ElectraForSequenceClassification"),uxo=o(" (ELECTRA model)"),pxo=l(),R2=a("li"),Tce=a("strong"),_xo=o("flaubert"),bxo=o(" \u2014 "),vD=a("a"),Fxo=o("FlaubertForSequenceClassification"),vxo=o(" (FlauBERT model)"),Txo=l(),B2=a("li"),Mce=a("strong"),Mxo=o("fnet"),Exo=o(" \u2014 "),TD=a("a"),Cxo=o("FNetForSequenceClassification"),wxo=o(" (FNet model)"),Axo=l(),P2=a("li"),Ece=a("strong"),yxo=o("funnel"),Lxo=o(" \u2014 "),MD=a("a"),xxo=o("FunnelForSequenceClassification"),$xo=o(" (Funnel Transformer model)"),kxo=l(),I2=a("li"),Cce=a("strong"),Sxo=o("gpt2"),Rxo=o(" \u2014 "),ED=a("a"),Bxo=o("GPT2ForSequenceClassification"),Pxo=o(" (OpenAI GPT-2 model)"),Ixo=l(),q2=a("li"),wce=a("strong"),qxo=o("gpt_neo"),Nxo=o(" \u2014 "),CD=a("a"),jxo=o("GPTNeoForSequenceClassification"),Dxo=o(" (GPT Neo model)"),Gxo=l(),N2=a("li"),Ace=a("strong"),Oxo=o("gptj"),Vxo=o(" \u2014 "),wD=a("a"),Xxo=o("GPTJForSequenceClassification"),zxo=o(" (GPT-J model)"),Qxo=l(),j2=a("li"),yce=a("strong"),Wxo=o("ibert"),Hxo=o(" \u2014 "),AD=a("a"),Uxo=o("IBertForSequenceClassification"),Jxo=o(" (I-BERT model)"),Yxo=l(),D2=a("li"),Lce=a("strong"),Kxo=o("layoutlm"),Zxo=o(" \u2014 "),yD=a("a"),e7o=o("LayoutLMForSequenceClassification"),o7o=o(" (LayoutLM model)"),r7o=l(),G2=a("li"),xce=a("strong"),t7o=o("layoutlmv2"),a7o=o(" \u2014 "),LD=a("a"),n7o=o("LayoutLMv2ForSequenceClassification"),s7o=o(" (LayoutLMv2 model)"),l7o=l(),O2=a("li"),$ce=a("strong"),i7o=o("led"),d7o=o(" \u2014 "),xD=a("a"),c7o=o("LEDForSequenceClassification"),m7o=o(" (LED model)"),f7o=l(),V2=a("li"),kce=a("strong"),g7o=o("longformer"),h7o=o(" \u2014 "),$D=a("a"),u7o=o("LongformerForSequenceClassification"),p7o=o(" (Longformer model)"),_7o=l(),X2=a("li"),Sce=a("strong"),b7o=o("mbart"),F7o=o(" \u2014 "),kD=a("a"),v7o=o("MBartForSequenceClassification"),T7o=o(" (mBART model)"),M7o=l(),z2=a("li"),Rce=a("strong"),E7o=o("megatron-bert"),C7o=o(" \u2014 "),SD=a("a"),w7o=o("MegatronBertForSequenceClassification"),A7o=o(" (MegatronBert model)"),y7o=l(),Q2=a("li"),Bce=a("strong"),L7o=o("mobilebert"),x7o=o(" \u2014 "),RD=a("a"),$7o=o("MobileBertForSequenceClassification"),k7o=o(" (MobileBERT model)"),S7o=l(),W2=a("li"),Pce=a("strong"),R7o=o("mpnet"),B7o=o(" \u2014 "),BD=a("a"),P7o=o("MPNetForSequenceClassification"),I7o=o(" (MPNet model)"),q7o=l(),H2=a("li"),Ice=a("strong"),N7o=o("nystromformer"),j7o=o(" \u2014 "),PD=a("a"),D7o=o("NystromformerForSequenceClassification"),G7o=o(" (Nystromformer model)"),O7o=l(),U2=a("li"),qce=a("strong"),V7o=o("openai-gpt"),X7o=o(" \u2014 "),ID=a("a"),z7o=o("OpenAIGPTForSequenceClassification"),Q7o=o(" (OpenAI GPT model)"),W7o=l(),J2=a("li"),Nce=a("strong"),H7o=o("perceiver"),U7o=o(" \u2014 "),qD=a("a"),J7o=o("PerceiverForSequenceClassification"),Y7o=o(" (Perceiver model)"),K7o=l(),Y2=a("li"),jce=a("strong"),Z7o=o("plbart"),e9o=o(" \u2014 "),ND=a("a"),o9o=o("PLBartForSequenceClassification"),r9o=o(" (PLBart model)"),t9o=l(),K2=a("li"),Dce=a("strong"),a9o=o("qdqbert"),n9o=o(" \u2014 "),jD=a("a"),s9o=o("QDQBertForSequenceClassification"),l9o=o(" (QDQBert model)"),i9o=l(),Z2=a("li"),Gce=a("strong"),d9o=o("reformer"),c9o=o(" \u2014 "),DD=a("a"),m9o=o("ReformerForSequenceClassification"),f9o=o(" (Reformer model)"),g9o=l(),eF=a("li"),Oce=a("strong"),h9o=o("rembert"),u9o=o(" \u2014 "),GD=a("a"),p9o=o("RemBertForSequenceClassification"),_9o=o(" (RemBERT model)"),b9o=l(),oF=a("li"),Vce=a("strong"),F9o=o("roberta"),v9o=o(" \u2014 "),OD=a("a"),T9o=o("RobertaForSequenceClassification"),M9o=o(" (RoBERTa model)"),E9o=l(),rF=a("li"),Xce=a("strong"),C9o=o("roformer"),w9o=o(" \u2014 "),VD=a("a"),A9o=o("RoFormerForSequenceClassification"),y9o=o(" (RoFormer model)"),L9o=l(),tF=a("li"),zce=a("strong"),x9o=o("squeezebert"),$9o=o(" \u2014 "),XD=a("a"),k9o=o("SqueezeBertForSequenceClassification"),S9o=o(" (SqueezeBERT model)"),R9o=l(),aF=a("li"),Qce=a("strong"),B9o=o("tapas"),P9o=o(" \u2014 "),zD=a("a"),I9o=o("TapasForSequenceClassification"),q9o=o(" (TAPAS model)"),N9o=l(),nF=a("li"),Wce=a("strong"),j9o=o("transfo-xl"),D9o=o(" \u2014 "),QD=a("a"),G9o=o("TransfoXLForSequenceClassification"),O9o=o(" (Transformer-XL model)"),V9o=l(),sF=a("li"),Hce=a("strong"),X9o=o("xlm"),z9o=o(" \u2014 "),WD=a("a"),Q9o=o("XLMForSequenceClassification"),W9o=o(" (XLM model)"),H9o=l(),lF=a("li"),Uce=a("strong"),U9o=o("xlm-roberta"),J9o=o(" \u2014 "),HD=a("a"),Y9o=o("XLMRobertaForSequenceClassification"),K9o=o(" (XLM-RoBERTa model)"),Z9o=l(),iF=a("li"),Jce=a("strong"),e$o=o("xlm-roberta-xl"),o$o=o(" \u2014 "),UD=a("a"),r$o=o("XLMRobertaXLForSequenceClassification"),t$o=o(" (XLM-RoBERTa-XL model)"),a$o=l(),dF=a("li"),Yce=a("strong"),n$o=o("xlnet"),s$o=o(" \u2014 "),JD=a("a"),l$o=o("XLNetForSequenceClassification"),i$o=o(" (XLNet model)"),d$o=l(),cF=a("li"),Kce=a("strong"),c$o=o("yoso"),m$o=o(" \u2014 "),YD=a("a"),f$o=o("YosoForSequenceClassification"),g$o=o(" (YOSO model)"),h$o=l(),mF=a("p"),u$o=o("The model is set in evaluation mode by default using "),Zce=a("code"),p$o=o("model.eval()"),_$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),b$o=o("model.train()"),F$o=l(),v(fF.$$.fragment),rIe=l(),ji=a("h2"),gF=a("a"),ome=a("span"),v(Jy.$$.fragment),v$o=l(),rme=a("span"),T$o=o("AutoModelForMultipleChoice"),tIe=l(),Bo=a("div"),v(Yy.$$.fragment),M$o=l(),Di=a("p"),E$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KD=a("a"),C$o=o("from_pretrained()"),w$o=o(" class method or the "),ZD=a("a"),A$o=o("from_config()"),y$o=o(` class
method.`),L$o=l(),Ky=a("p"),x$o=o("This class cannot be instantiated directly using "),tme=a("code"),$$o=o("__init__()"),k$o=o(" (throws an error)."),S$o=l(),lt=a("div"),v(Zy.$$.fragment),R$o=l(),ame=a("p"),B$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P$o=l(),Gi=a("p"),I$o=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),q$o=o("not"),N$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),j$o=o("from_pretrained()"),D$o=o(" to load the model weights."),G$o=l(),v(hF.$$.fragment),O$o=l(),eo=a("div"),v(eL.$$.fragment),V$o=l(),sme=a("p"),X$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z$o=l(),Sa=a("p"),Q$o=o("The model class to instantiate is selected based on the "),lme=a("code"),W$o=o("model_type"),H$o=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),U$o=o("pretrained_model_name_or_path"),J$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),Y$o=o("pretrained_model_name_or_path"),K$o=o(":"),Z$o=l(),Y=a("ul"),uF=a("li"),cme=a("strong"),eko=o("albert"),oko=o(" \u2014 "),oG=a("a"),rko=o("AlbertForMultipleChoice"),tko=o(" (ALBERT model)"),ako=l(),pF=a("li"),mme=a("strong"),nko=o("bert"),sko=o(" \u2014 "),rG=a("a"),lko=o("BertForMultipleChoice"),iko=o(" (BERT model)"),dko=l(),_F=a("li"),fme=a("strong"),cko=o("big_bird"),mko=o(" \u2014 "),tG=a("a"),fko=o("BigBirdForMultipleChoice"),gko=o(" (BigBird model)"),hko=l(),bF=a("li"),gme=a("strong"),uko=o("camembert"),pko=o(" \u2014 "),aG=a("a"),_ko=o("CamembertForMultipleChoice"),bko=o(" (CamemBERT model)"),Fko=l(),FF=a("li"),hme=a("strong"),vko=o("canine"),Tko=o(" \u2014 "),nG=a("a"),Mko=o("CanineForMultipleChoice"),Eko=o(" (Canine model)"),Cko=l(),vF=a("li"),ume=a("strong"),wko=o("convbert"),Ako=o(" \u2014 "),sG=a("a"),yko=o("ConvBertForMultipleChoice"),Lko=o(" (ConvBERT model)"),xko=l(),TF=a("li"),pme=a("strong"),$ko=o("data2vec-text"),kko=o(" \u2014 "),lG=a("a"),Sko=o("Data2VecTextForMultipleChoice"),Rko=o(" (Data2VecText model)"),Bko=l(),MF=a("li"),_me=a("strong"),Pko=o("deberta-v2"),Iko=o(" \u2014 "),iG=a("a"),qko=o("DebertaV2ForMultipleChoice"),Nko=o(" (DeBERTa-v2 model)"),jko=l(),EF=a("li"),bme=a("strong"),Dko=o("distilbert"),Gko=o(" \u2014 "),dG=a("a"),Oko=o("DistilBertForMultipleChoice"),Vko=o(" (DistilBERT model)"),Xko=l(),CF=a("li"),Fme=a("strong"),zko=o("electra"),Qko=o(" \u2014 "),cG=a("a"),Wko=o("ElectraForMultipleChoice"),Hko=o(" (ELECTRA model)"),Uko=l(),wF=a("li"),vme=a("strong"),Jko=o("flaubert"),Yko=o(" \u2014 "),mG=a("a"),Kko=o("FlaubertForMultipleChoice"),Zko=o(" (FlauBERT model)"),eSo=l(),AF=a("li"),Tme=a("strong"),oSo=o("fnet"),rSo=o(" \u2014 "),fG=a("a"),tSo=o("FNetForMultipleChoice"),aSo=o(" (FNet model)"),nSo=l(),yF=a("li"),Mme=a("strong"),sSo=o("funnel"),lSo=o(" \u2014 "),gG=a("a"),iSo=o("FunnelForMultipleChoice"),dSo=o(" (Funnel Transformer model)"),cSo=l(),LF=a("li"),Eme=a("strong"),mSo=o("ibert"),fSo=o(" \u2014 "),hG=a("a"),gSo=o("IBertForMultipleChoice"),hSo=o(" (I-BERT model)"),uSo=l(),xF=a("li"),Cme=a("strong"),pSo=o("longformer"),_So=o(" \u2014 "),uG=a("a"),bSo=o("LongformerForMultipleChoice"),FSo=o(" (Longformer model)"),vSo=l(),$F=a("li"),wme=a("strong"),TSo=o("megatron-bert"),MSo=o(" \u2014 "),pG=a("a"),ESo=o("MegatronBertForMultipleChoice"),CSo=o(" (MegatronBert model)"),wSo=l(),kF=a("li"),Ame=a("strong"),ASo=o("mobilebert"),ySo=o(" \u2014 "),_G=a("a"),LSo=o("MobileBertForMultipleChoice"),xSo=o(" (MobileBERT model)"),$So=l(),SF=a("li"),yme=a("strong"),kSo=o("mpnet"),SSo=o(" \u2014 "),bG=a("a"),RSo=o("MPNetForMultipleChoice"),BSo=o(" (MPNet model)"),PSo=l(),RF=a("li"),Lme=a("strong"),ISo=o("nystromformer"),qSo=o(" \u2014 "),FG=a("a"),NSo=o("NystromformerForMultipleChoice"),jSo=o(" (Nystromformer model)"),DSo=l(),BF=a("li"),xme=a("strong"),GSo=o("qdqbert"),OSo=o(" \u2014 "),vG=a("a"),VSo=o("QDQBertForMultipleChoice"),XSo=o(" (QDQBert model)"),zSo=l(),PF=a("li"),$me=a("strong"),QSo=o("rembert"),WSo=o(" \u2014 "),TG=a("a"),HSo=o("RemBertForMultipleChoice"),USo=o(" (RemBERT model)"),JSo=l(),IF=a("li"),kme=a("strong"),YSo=o("roberta"),KSo=o(" \u2014 "),MG=a("a"),ZSo=o("RobertaForMultipleChoice"),eRo=o(" (RoBERTa model)"),oRo=l(),qF=a("li"),Sme=a("strong"),rRo=o("roformer"),tRo=o(" \u2014 "),EG=a("a"),aRo=o("RoFormerForMultipleChoice"),nRo=o(" (RoFormer model)"),sRo=l(),NF=a("li"),Rme=a("strong"),lRo=o("squeezebert"),iRo=o(" \u2014 "),CG=a("a"),dRo=o("SqueezeBertForMultipleChoice"),cRo=o(" (SqueezeBERT model)"),mRo=l(),jF=a("li"),Bme=a("strong"),fRo=o("xlm"),gRo=o(" \u2014 "),wG=a("a"),hRo=o("XLMForMultipleChoice"),uRo=o(" (XLM model)"),pRo=l(),DF=a("li"),Pme=a("strong"),_Ro=o("xlm-roberta"),bRo=o(" \u2014 "),AG=a("a"),FRo=o("XLMRobertaForMultipleChoice"),vRo=o(" (XLM-RoBERTa model)"),TRo=l(),GF=a("li"),Ime=a("strong"),MRo=o("xlm-roberta-xl"),ERo=o(" \u2014 "),yG=a("a"),CRo=o("XLMRobertaXLForMultipleChoice"),wRo=o(" (XLM-RoBERTa-XL model)"),ARo=l(),OF=a("li"),qme=a("strong"),yRo=o("xlnet"),LRo=o(" \u2014 "),LG=a("a"),xRo=o("XLNetForMultipleChoice"),$Ro=o(" (XLNet model)"),kRo=l(),VF=a("li"),Nme=a("strong"),SRo=o("yoso"),RRo=o(" \u2014 "),xG=a("a"),BRo=o("YosoForMultipleChoice"),PRo=o(" (YOSO model)"),IRo=l(),XF=a("p"),qRo=o("The model is set in evaluation mode by default using "),jme=a("code"),NRo=o("model.eval()"),jRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),DRo=o("model.train()"),GRo=l(),v(zF.$$.fragment),aIe=l(),Oi=a("h2"),QF=a("a"),Gme=a("span"),v(oL.$$.fragment),ORo=l(),Ome=a("span"),VRo=o("AutoModelForNextSentencePrediction"),nIe=l(),Po=a("div"),v(rL.$$.fragment),XRo=l(),Vi=a("p"),zRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$G=a("a"),QRo=o("from_pretrained()"),WRo=o(" class method or the "),kG=a("a"),HRo=o("from_config()"),URo=o(` class
method.`),JRo=l(),tL=a("p"),YRo=o("This class cannot be instantiated directly using "),Vme=a("code"),KRo=o("__init__()"),ZRo=o(" (throws an error)."),eBo=l(),it=a("div"),v(aL.$$.fragment),oBo=l(),Xme=a("p"),rBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tBo=l(),Xi=a("p"),aBo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),nBo=o("not"),sBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),lBo=o("from_pretrained()"),iBo=o(" to load the model weights."),dBo=l(),v(WF.$$.fragment),cBo=l(),oo=a("div"),v(nL.$$.fragment),mBo=l(),Qme=a("p"),fBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gBo=l(),Ra=a("p"),hBo=o("The model class to instantiate is selected based on the "),Wme=a("code"),uBo=o("model_type"),pBo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),_Bo=o("pretrained_model_name_or_path"),bBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),FBo=o("pretrained_model_name_or_path"),vBo=o(":"),TBo=l(),Yr=a("ul"),HF=a("li"),Jme=a("strong"),MBo=o("bert"),EBo=o(" \u2014 "),RG=a("a"),CBo=o("BertForNextSentencePrediction"),wBo=o(" (BERT model)"),ABo=l(),UF=a("li"),Yme=a("strong"),yBo=o("fnet"),LBo=o(" \u2014 "),BG=a("a"),xBo=o("FNetForNextSentencePrediction"),$Bo=o(" (FNet model)"),kBo=l(),JF=a("li"),Kme=a("strong"),SBo=o("megatron-bert"),RBo=o(" \u2014 "),PG=a("a"),BBo=o("MegatronBertForNextSentencePrediction"),PBo=o(" (MegatronBert model)"),IBo=l(),YF=a("li"),Zme=a("strong"),qBo=o("mobilebert"),NBo=o(" \u2014 "),IG=a("a"),jBo=o("MobileBertForNextSentencePrediction"),DBo=o(" (MobileBERT model)"),GBo=l(),KF=a("li"),efe=a("strong"),OBo=o("qdqbert"),VBo=o(" \u2014 "),qG=a("a"),XBo=o("QDQBertForNextSentencePrediction"),zBo=o(" (QDQBert model)"),QBo=l(),ZF=a("p"),WBo=o("The model is set in evaluation mode by default using "),ofe=a("code"),HBo=o("model.eval()"),UBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rfe=a("code"),JBo=o("model.train()"),YBo=l(),v(ev.$$.fragment),sIe=l(),zi=a("h2"),ov=a("a"),tfe=a("span"),v(sL.$$.fragment),KBo=l(),afe=a("span"),ZBo=o("AutoModelForTokenClassification"),lIe=l(),Io=a("div"),v(lL.$$.fragment),ePo=l(),Qi=a("p"),oPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NG=a("a"),rPo=o("from_pretrained()"),tPo=o(" class method or the "),jG=a("a"),aPo=o("from_config()"),nPo=o(` class
method.`),sPo=l(),iL=a("p"),lPo=o("This class cannot be instantiated directly using "),nfe=a("code"),iPo=o("__init__()"),dPo=o(" (throws an error)."),cPo=l(),dt=a("div"),v(dL.$$.fragment),mPo=l(),sfe=a("p"),fPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gPo=l(),Wi=a("p"),hPo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),uPo=o("not"),pPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),_Po=o("from_pretrained()"),bPo=o(" to load the model weights."),FPo=l(),v(rv.$$.fragment),vPo=l(),ro=a("div"),v(cL.$$.fragment),TPo=l(),ife=a("p"),MPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EPo=l(),Ba=a("p"),CPo=o("The model class to instantiate is selected based on the "),dfe=a("code"),wPo=o("model_type"),APo=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),yPo=o("pretrained_model_name_or_path"),LPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),xPo=o("pretrained_model_name_or_path"),$Po=o(":"),kPo=l(),U=a("ul"),tv=a("li"),ffe=a("strong"),SPo=o("albert"),RPo=o(" \u2014 "),GG=a("a"),BPo=o("AlbertForTokenClassification"),PPo=o(" (ALBERT model)"),IPo=l(),av=a("li"),gfe=a("strong"),qPo=o("bert"),NPo=o(" \u2014 "),OG=a("a"),jPo=o("BertForTokenClassification"),DPo=o(" (BERT model)"),GPo=l(),nv=a("li"),hfe=a("strong"),OPo=o("big_bird"),VPo=o(" \u2014 "),VG=a("a"),XPo=o("BigBirdForTokenClassification"),zPo=o(" (BigBird model)"),QPo=l(),sv=a("li"),ufe=a("strong"),WPo=o("camembert"),HPo=o(" \u2014 "),XG=a("a"),UPo=o("CamembertForTokenClassification"),JPo=o(" (CamemBERT model)"),YPo=l(),lv=a("li"),pfe=a("strong"),KPo=o("canine"),ZPo=o(" \u2014 "),zG=a("a"),eIo=o("CanineForTokenClassification"),oIo=o(" (Canine model)"),rIo=l(),iv=a("li"),_fe=a("strong"),tIo=o("convbert"),aIo=o(" \u2014 "),QG=a("a"),nIo=o("ConvBertForTokenClassification"),sIo=o(" (ConvBERT model)"),lIo=l(),dv=a("li"),bfe=a("strong"),iIo=o("data2vec-text"),dIo=o(" \u2014 "),WG=a("a"),cIo=o("Data2VecTextForTokenClassification"),mIo=o(" (Data2VecText model)"),fIo=l(),cv=a("li"),Ffe=a("strong"),gIo=o("deberta"),hIo=o(" \u2014 "),HG=a("a"),uIo=o("DebertaForTokenClassification"),pIo=o(" (DeBERTa model)"),_Io=l(),mv=a("li"),vfe=a("strong"),bIo=o("deberta-v2"),FIo=o(" \u2014 "),UG=a("a"),vIo=o("DebertaV2ForTokenClassification"),TIo=o(" (DeBERTa-v2 model)"),MIo=l(),fv=a("li"),Tfe=a("strong"),EIo=o("distilbert"),CIo=o(" \u2014 "),JG=a("a"),wIo=o("DistilBertForTokenClassification"),AIo=o(" (DistilBERT model)"),yIo=l(),gv=a("li"),Mfe=a("strong"),LIo=o("electra"),xIo=o(" \u2014 "),YG=a("a"),$Io=o("ElectraForTokenClassification"),kIo=o(" (ELECTRA model)"),SIo=l(),hv=a("li"),Efe=a("strong"),RIo=o("flaubert"),BIo=o(" \u2014 "),KG=a("a"),PIo=o("FlaubertForTokenClassification"),IIo=o(" (FlauBERT model)"),qIo=l(),uv=a("li"),Cfe=a("strong"),NIo=o("fnet"),jIo=o(" \u2014 "),ZG=a("a"),DIo=o("FNetForTokenClassification"),GIo=o(" (FNet model)"),OIo=l(),pv=a("li"),wfe=a("strong"),VIo=o("funnel"),XIo=o(" \u2014 "),eO=a("a"),zIo=o("FunnelForTokenClassification"),QIo=o(" (Funnel Transformer model)"),WIo=l(),_v=a("li"),Afe=a("strong"),HIo=o("gpt2"),UIo=o(" \u2014 "),oO=a("a"),JIo=o("GPT2ForTokenClassification"),YIo=o(" (OpenAI GPT-2 model)"),KIo=l(),bv=a("li"),yfe=a("strong"),ZIo=o("ibert"),eqo=o(" \u2014 "),rO=a("a"),oqo=o("IBertForTokenClassification"),rqo=o(" (I-BERT model)"),tqo=l(),Fv=a("li"),Lfe=a("strong"),aqo=o("layoutlm"),nqo=o(" \u2014 "),tO=a("a"),sqo=o("LayoutLMForTokenClassification"),lqo=o(" (LayoutLM model)"),iqo=l(),vv=a("li"),xfe=a("strong"),dqo=o("layoutlmv2"),cqo=o(" \u2014 "),aO=a("a"),mqo=o("LayoutLMv2ForTokenClassification"),fqo=o(" (LayoutLMv2 model)"),gqo=l(),Tv=a("li"),$fe=a("strong"),hqo=o("longformer"),uqo=o(" \u2014 "),nO=a("a"),pqo=o("LongformerForTokenClassification"),_qo=o(" (Longformer model)"),bqo=l(),Mv=a("li"),kfe=a("strong"),Fqo=o("megatron-bert"),vqo=o(" \u2014 "),sO=a("a"),Tqo=o("MegatronBertForTokenClassification"),Mqo=o(" (MegatronBert model)"),Eqo=l(),Ev=a("li"),Sfe=a("strong"),Cqo=o("mobilebert"),wqo=o(" \u2014 "),lO=a("a"),Aqo=o("MobileBertForTokenClassification"),yqo=o(" (MobileBERT model)"),Lqo=l(),Cv=a("li"),Rfe=a("strong"),xqo=o("mpnet"),$qo=o(" \u2014 "),iO=a("a"),kqo=o("MPNetForTokenClassification"),Sqo=o(" (MPNet model)"),Rqo=l(),wv=a("li"),Bfe=a("strong"),Bqo=o("nystromformer"),Pqo=o(" \u2014 "),dO=a("a"),Iqo=o("NystromformerForTokenClassification"),qqo=o(" (Nystromformer model)"),Nqo=l(),Av=a("li"),Pfe=a("strong"),jqo=o("qdqbert"),Dqo=o(" \u2014 "),cO=a("a"),Gqo=o("QDQBertForTokenClassification"),Oqo=o(" (QDQBert model)"),Vqo=l(),yv=a("li"),Ife=a("strong"),Xqo=o("rembert"),zqo=o(" \u2014 "),mO=a("a"),Qqo=o("RemBertForTokenClassification"),Wqo=o(" (RemBERT model)"),Hqo=l(),Lv=a("li"),qfe=a("strong"),Uqo=o("roberta"),Jqo=o(" \u2014 "),fO=a("a"),Yqo=o("RobertaForTokenClassification"),Kqo=o(" (RoBERTa model)"),Zqo=l(),xv=a("li"),Nfe=a("strong"),eNo=o("roformer"),oNo=o(" \u2014 "),gO=a("a"),rNo=o("RoFormerForTokenClassification"),tNo=o(" (RoFormer model)"),aNo=l(),$v=a("li"),jfe=a("strong"),nNo=o("squeezebert"),sNo=o(" \u2014 "),hO=a("a"),lNo=o("SqueezeBertForTokenClassification"),iNo=o(" (SqueezeBERT model)"),dNo=l(),kv=a("li"),Dfe=a("strong"),cNo=o("xlm"),mNo=o(" \u2014 "),uO=a("a"),fNo=o("XLMForTokenClassification"),gNo=o(" (XLM model)"),hNo=l(),Sv=a("li"),Gfe=a("strong"),uNo=o("xlm-roberta"),pNo=o(" \u2014 "),pO=a("a"),_No=o("XLMRobertaForTokenClassification"),bNo=o(" (XLM-RoBERTa model)"),FNo=l(),Rv=a("li"),Ofe=a("strong"),vNo=o("xlm-roberta-xl"),TNo=o(" \u2014 "),_O=a("a"),MNo=o("XLMRobertaXLForTokenClassification"),ENo=o(" (XLM-RoBERTa-XL model)"),CNo=l(),Bv=a("li"),Vfe=a("strong"),wNo=o("xlnet"),ANo=o(" \u2014 "),bO=a("a"),yNo=o("XLNetForTokenClassification"),LNo=o(" (XLNet model)"),xNo=l(),Pv=a("li"),Xfe=a("strong"),$No=o("yoso"),kNo=o(" \u2014 "),FO=a("a"),SNo=o("YosoForTokenClassification"),RNo=o(" (YOSO model)"),BNo=l(),Iv=a("p"),PNo=o("The model is set in evaluation mode by default using "),zfe=a("code"),INo=o("model.eval()"),qNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),NNo=o("model.train()"),jNo=l(),v(qv.$$.fragment),iIe=l(),Hi=a("h2"),Nv=a("a"),Wfe=a("span"),v(mL.$$.fragment),DNo=l(),Hfe=a("span"),GNo=o("AutoModelForQuestionAnswering"),dIe=l(),qo=a("div"),v(fL.$$.fragment),ONo=l(),Ui=a("p"),VNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vO=a("a"),XNo=o("from_pretrained()"),zNo=o(" class method or the "),TO=a("a"),QNo=o("from_config()"),WNo=o(` class
method.`),HNo=l(),gL=a("p"),UNo=o("This class cannot be instantiated directly using "),Ufe=a("code"),JNo=o("__init__()"),YNo=o(" (throws an error)."),KNo=l(),ct=a("div"),v(hL.$$.fragment),ZNo=l(),Jfe=a("p"),ejo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ojo=l(),Ji=a("p"),rjo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),tjo=o("not"),ajo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),njo=o("from_pretrained()"),sjo=o(" to load the model weights."),ljo=l(),v(jv.$$.fragment),ijo=l(),to=a("div"),v(uL.$$.fragment),djo=l(),Kfe=a("p"),cjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mjo=l(),Pa=a("p"),fjo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),gjo=o("model_type"),hjo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),ujo=o("pretrained_model_name_or_path"),pjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),_jo=o("pretrained_model_name_or_path"),bjo=o(":"),Fjo=l(),O=a("ul"),Dv=a("li"),rge=a("strong"),vjo=o("albert"),Tjo=o(" \u2014 "),EO=a("a"),Mjo=o("AlbertForQuestionAnswering"),Ejo=o(" (ALBERT model)"),Cjo=l(),Gv=a("li"),tge=a("strong"),wjo=o("bart"),Ajo=o(" \u2014 "),CO=a("a"),yjo=o("BartForQuestionAnswering"),Ljo=o(" (BART model)"),xjo=l(),Ov=a("li"),age=a("strong"),$jo=o("bert"),kjo=o(" \u2014 "),wO=a("a"),Sjo=o("BertForQuestionAnswering"),Rjo=o(" (BERT model)"),Bjo=l(),Vv=a("li"),nge=a("strong"),Pjo=o("big_bird"),Ijo=o(" \u2014 "),AO=a("a"),qjo=o("BigBirdForQuestionAnswering"),Njo=o(" (BigBird model)"),jjo=l(),Xv=a("li"),sge=a("strong"),Djo=o("bigbird_pegasus"),Gjo=o(" \u2014 "),yO=a("a"),Ojo=o("BigBirdPegasusForQuestionAnswering"),Vjo=o(" (BigBirdPegasus model)"),Xjo=l(),zv=a("li"),lge=a("strong"),zjo=o("camembert"),Qjo=o(" \u2014 "),LO=a("a"),Wjo=o("CamembertForQuestionAnswering"),Hjo=o(" (CamemBERT model)"),Ujo=l(),Qv=a("li"),ige=a("strong"),Jjo=o("canine"),Yjo=o(" \u2014 "),xO=a("a"),Kjo=o("CanineForQuestionAnswering"),Zjo=o(" (Canine model)"),eDo=l(),Wv=a("li"),dge=a("strong"),oDo=o("convbert"),rDo=o(" \u2014 "),$O=a("a"),tDo=o("ConvBertForQuestionAnswering"),aDo=o(" (ConvBERT model)"),nDo=l(),Hv=a("li"),cge=a("strong"),sDo=o("data2vec-text"),lDo=o(" \u2014 "),kO=a("a"),iDo=o("Data2VecTextForQuestionAnswering"),dDo=o(" (Data2VecText model)"),cDo=l(),Uv=a("li"),mge=a("strong"),mDo=o("deberta"),fDo=o(" \u2014 "),SO=a("a"),gDo=o("DebertaForQuestionAnswering"),hDo=o(" (DeBERTa model)"),uDo=l(),Jv=a("li"),fge=a("strong"),pDo=o("deberta-v2"),_Do=o(" \u2014 "),RO=a("a"),bDo=o("DebertaV2ForQuestionAnswering"),FDo=o(" (DeBERTa-v2 model)"),vDo=l(),Yv=a("li"),gge=a("strong"),TDo=o("distilbert"),MDo=o(" \u2014 "),BO=a("a"),EDo=o("DistilBertForQuestionAnswering"),CDo=o(" (DistilBERT model)"),wDo=l(),Kv=a("li"),hge=a("strong"),ADo=o("electra"),yDo=o(" \u2014 "),PO=a("a"),LDo=o("ElectraForQuestionAnswering"),xDo=o(" (ELECTRA model)"),$Do=l(),Zv=a("li"),uge=a("strong"),kDo=o("flaubert"),SDo=o(" \u2014 "),IO=a("a"),RDo=o("FlaubertForQuestionAnsweringSimple"),BDo=o(" (FlauBERT model)"),PDo=l(),e1=a("li"),pge=a("strong"),IDo=o("fnet"),qDo=o(" \u2014 "),qO=a("a"),NDo=o("FNetForQuestionAnswering"),jDo=o(" (FNet model)"),DDo=l(),o1=a("li"),_ge=a("strong"),GDo=o("funnel"),ODo=o(" \u2014 "),NO=a("a"),VDo=o("FunnelForQuestionAnswering"),XDo=o(" (Funnel Transformer model)"),zDo=l(),r1=a("li"),bge=a("strong"),QDo=o("gptj"),WDo=o(" \u2014 "),jO=a("a"),HDo=o("GPTJForQuestionAnswering"),UDo=o(" (GPT-J model)"),JDo=l(),t1=a("li"),Fge=a("strong"),YDo=o("ibert"),KDo=o(" \u2014 "),DO=a("a"),ZDo=o("IBertForQuestionAnswering"),eGo=o(" (I-BERT model)"),oGo=l(),a1=a("li"),vge=a("strong"),rGo=o("layoutlmv2"),tGo=o(" \u2014 "),GO=a("a"),aGo=o("LayoutLMv2ForQuestionAnswering"),nGo=o(" (LayoutLMv2 model)"),sGo=l(),n1=a("li"),Tge=a("strong"),lGo=o("led"),iGo=o(" \u2014 "),OO=a("a"),dGo=o("LEDForQuestionAnswering"),cGo=o(" (LED model)"),mGo=l(),s1=a("li"),Mge=a("strong"),fGo=o("longformer"),gGo=o(" \u2014 "),VO=a("a"),hGo=o("LongformerForQuestionAnswering"),uGo=o(" (Longformer model)"),pGo=l(),l1=a("li"),Ege=a("strong"),_Go=o("lxmert"),bGo=o(" \u2014 "),XO=a("a"),FGo=o("LxmertForQuestionAnswering"),vGo=o(" (LXMERT model)"),TGo=l(),i1=a("li"),Cge=a("strong"),MGo=o("mbart"),EGo=o(" \u2014 "),zO=a("a"),CGo=o("MBartForQuestionAnswering"),wGo=o(" (mBART model)"),AGo=l(),d1=a("li"),wge=a("strong"),yGo=o("megatron-bert"),LGo=o(" \u2014 "),QO=a("a"),xGo=o("MegatronBertForQuestionAnswering"),$Go=o(" (MegatronBert model)"),kGo=l(),c1=a("li"),Age=a("strong"),SGo=o("mobilebert"),RGo=o(" \u2014 "),WO=a("a"),BGo=o("MobileBertForQuestionAnswering"),PGo=o(" (MobileBERT model)"),IGo=l(),m1=a("li"),yge=a("strong"),qGo=o("mpnet"),NGo=o(" \u2014 "),HO=a("a"),jGo=o("MPNetForQuestionAnswering"),DGo=o(" (MPNet model)"),GGo=l(),f1=a("li"),Lge=a("strong"),OGo=o("nystromformer"),VGo=o(" \u2014 "),UO=a("a"),XGo=o("NystromformerForQuestionAnswering"),zGo=o(" (Nystromformer model)"),QGo=l(),g1=a("li"),xge=a("strong"),WGo=o("qdqbert"),HGo=o(" \u2014 "),JO=a("a"),UGo=o("QDQBertForQuestionAnswering"),JGo=o(" (QDQBert model)"),YGo=l(),h1=a("li"),$ge=a("strong"),KGo=o("reformer"),ZGo=o(" \u2014 "),YO=a("a"),eOo=o("ReformerForQuestionAnswering"),oOo=o(" (Reformer model)"),rOo=l(),u1=a("li"),kge=a("strong"),tOo=o("rembert"),aOo=o(" \u2014 "),KO=a("a"),nOo=o("RemBertForQuestionAnswering"),sOo=o(" (RemBERT model)"),lOo=l(),p1=a("li"),Sge=a("strong"),iOo=o("roberta"),dOo=o(" \u2014 "),ZO=a("a"),cOo=o("RobertaForQuestionAnswering"),mOo=o(" (RoBERTa model)"),fOo=l(),_1=a("li"),Rge=a("strong"),gOo=o("roformer"),hOo=o(" \u2014 "),eV=a("a"),uOo=o("RoFormerForQuestionAnswering"),pOo=o(" (RoFormer model)"),_Oo=l(),b1=a("li"),Bge=a("strong"),bOo=o("splinter"),FOo=o(" \u2014 "),oV=a("a"),vOo=o("SplinterForQuestionAnswering"),TOo=o(" (Splinter model)"),MOo=l(),F1=a("li"),Pge=a("strong"),EOo=o("squeezebert"),COo=o(" \u2014 "),rV=a("a"),wOo=o("SqueezeBertForQuestionAnswering"),AOo=o(" (SqueezeBERT model)"),yOo=l(),v1=a("li"),Ige=a("strong"),LOo=o("xlm"),xOo=o(" \u2014 "),tV=a("a"),$Oo=o("XLMForQuestionAnsweringSimple"),kOo=o(" (XLM model)"),SOo=l(),T1=a("li"),qge=a("strong"),ROo=o("xlm-roberta"),BOo=o(" \u2014 "),aV=a("a"),POo=o("XLMRobertaForQuestionAnswering"),IOo=o(" (XLM-RoBERTa model)"),qOo=l(),M1=a("li"),Nge=a("strong"),NOo=o("xlm-roberta-xl"),jOo=o(" \u2014 "),nV=a("a"),DOo=o("XLMRobertaXLForQuestionAnswering"),GOo=o(" (XLM-RoBERTa-XL model)"),OOo=l(),E1=a("li"),jge=a("strong"),VOo=o("xlnet"),XOo=o(" \u2014 "),sV=a("a"),zOo=o("XLNetForQuestionAnsweringSimple"),QOo=o(" (XLNet model)"),WOo=l(),C1=a("li"),Dge=a("strong"),HOo=o("yoso"),UOo=o(" \u2014 "),lV=a("a"),JOo=o("YosoForQuestionAnswering"),YOo=o(" (YOSO model)"),KOo=l(),w1=a("p"),ZOo=o("The model is set in evaluation mode by default using "),Gge=a("code"),eVo=o("model.eval()"),oVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),rVo=o("model.train()"),tVo=l(),v(A1.$$.fragment),cIe=l(),Yi=a("h2"),y1=a("a"),Vge=a("span"),v(pL.$$.fragment),aVo=l(),Xge=a("span"),nVo=o("AutoModelForTableQuestionAnswering"),mIe=l(),No=a("div"),v(_L.$$.fragment),sVo=l(),Ki=a("p"),lVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iV=a("a"),iVo=o("from_pretrained()"),dVo=o(" class method or the "),dV=a("a"),cVo=o("from_config()"),mVo=o(` class
method.`),fVo=l(),bL=a("p"),gVo=o("This class cannot be instantiated directly using "),zge=a("code"),hVo=o("__init__()"),uVo=o(" (throws an error)."),pVo=l(),mt=a("div"),v(FL.$$.fragment),_Vo=l(),Qge=a("p"),bVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FVo=l(),Zi=a("p"),vVo=o(`Note:
Loading a model from its configuration file does `),Wge=a("strong"),TVo=o("not"),MVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),EVo=o("from_pretrained()"),CVo=o(" to load the model weights."),wVo=l(),v(L1.$$.fragment),AVo=l(),ao=a("div"),v(vL.$$.fragment),yVo=l(),Hge=a("p"),LVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xVo=l(),Ia=a("p"),$Vo=o("The model class to instantiate is selected based on the "),Uge=a("code"),kVo=o("model_type"),SVo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),RVo=o("pretrained_model_name_or_path"),BVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),PVo=o("pretrained_model_name_or_path"),IVo=o(":"),qVo=l(),Kge=a("ul"),x1=a("li"),Zge=a("strong"),NVo=o("tapas"),jVo=o(" \u2014 "),mV=a("a"),DVo=o("TapasForQuestionAnswering"),GVo=o(" (TAPAS model)"),OVo=l(),$1=a("p"),VVo=o("The model is set in evaluation mode by default using "),ehe=a("code"),XVo=o("model.eval()"),zVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),QVo=o("model.train()"),WVo=l(),v(k1.$$.fragment),fIe=l(),ed=a("h2"),S1=a("a"),rhe=a("span"),v(TL.$$.fragment),HVo=l(),the=a("span"),UVo=o("AutoModelForImageClassification"),gIe=l(),jo=a("div"),v(ML.$$.fragment),JVo=l(),od=a("p"),YVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fV=a("a"),KVo=o("from_pretrained()"),ZVo=o(" class method or the "),gV=a("a"),eXo=o("from_config()"),oXo=o(` class
method.`),rXo=l(),EL=a("p"),tXo=o("This class cannot be instantiated directly using "),ahe=a("code"),aXo=o("__init__()"),nXo=o(" (throws an error)."),sXo=l(),ft=a("div"),v(CL.$$.fragment),lXo=l(),nhe=a("p"),iXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dXo=l(),rd=a("p"),cXo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),mXo=o("not"),fXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),gXo=o("from_pretrained()"),hXo=o(" to load the model weights."),uXo=l(),v(R1.$$.fragment),pXo=l(),no=a("div"),v(wL.$$.fragment),_Xo=l(),lhe=a("p"),bXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FXo=l(),qa=a("p"),vXo=o("The model class to instantiate is selected based on the "),ihe=a("code"),TXo=o("model_type"),MXo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),EXo=o("pretrained_model_name_or_path"),CXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),wXo=o("pretrained_model_name_or_path"),AXo=o(":"),yXo=l(),ve=a("ul"),B1=a("li"),mhe=a("strong"),LXo=o("beit"),xXo=o(" \u2014 "),uV=a("a"),$Xo=o("BeitForImageClassification"),kXo=o(" (BEiT model)"),SXo=l(),P1=a("li"),fhe=a("strong"),RXo=o("convnext"),BXo=o(" \u2014 "),pV=a("a"),PXo=o("ConvNextForImageClassification"),IXo=o(" (ConvNext model)"),qXo=l(),I1=a("li"),ghe=a("strong"),NXo=o("data2vec-vision"),jXo=o(" \u2014 "),_V=a("a"),DXo=o("Data2VecVisionForImageClassification"),GXo=o(" (Data2VecVision model)"),OXo=l(),Rs=a("li"),hhe=a("strong"),VXo=o("deit"),XXo=o(" \u2014 "),bV=a("a"),zXo=o("DeiTForImageClassification"),QXo=o(" or "),FV=a("a"),WXo=o("DeiTForImageClassificationWithTeacher"),HXo=o(" (DeiT model)"),UXo=l(),q1=a("li"),uhe=a("strong"),JXo=o("imagegpt"),YXo=o(" \u2014 "),vV=a("a"),KXo=o("ImageGPTForImageClassification"),ZXo=o(" (ImageGPT model)"),ezo=l(),gt=a("li"),phe=a("strong"),ozo=o("perceiver"),rzo=o(" \u2014 "),TV=a("a"),tzo=o("PerceiverForImageClassificationLearned"),azo=o(" or "),MV=a("a"),nzo=o("PerceiverForImageClassificationFourier"),szo=o(" or "),EV=a("a"),lzo=o("PerceiverForImageClassificationConvProcessing"),izo=o(" (Perceiver model)"),dzo=l(),N1=a("li"),_he=a("strong"),czo=o("poolformer"),mzo=o(" \u2014 "),CV=a("a"),fzo=o("PoolFormerForImageClassification"),gzo=o(" (PoolFormer model)"),hzo=l(),j1=a("li"),bhe=a("strong"),uzo=o("regnet"),pzo=o(" \u2014 "),wV=a("a"),_zo=o("RegNetForImageClassification"),bzo=o(" (RegNet model)"),Fzo=l(),D1=a("li"),Fhe=a("strong"),vzo=o("resnet"),Tzo=o(" \u2014 "),AV=a("a"),Mzo=o("ResNetForImageClassification"),Ezo=o(" (ResNet model)"),Czo=l(),G1=a("li"),vhe=a("strong"),wzo=o("segformer"),Azo=o(" \u2014 "),yV=a("a"),yzo=o("SegformerForImageClassification"),Lzo=o(" (SegFormer model)"),xzo=l(),O1=a("li"),The=a("strong"),$zo=o("swin"),kzo=o(" \u2014 "),LV=a("a"),Szo=o("SwinForImageClassification"),Rzo=o(" (Swin model)"),Bzo=l(),V1=a("li"),Mhe=a("strong"),Pzo=o("van"),Izo=o(" \u2014 "),xV=a("a"),qzo=o("VanForImageClassification"),Nzo=o(" (VAN model)"),jzo=l(),X1=a("li"),Ehe=a("strong"),Dzo=o("vit"),Gzo=o(" \u2014 "),$V=a("a"),Ozo=o("ViTForImageClassification"),Vzo=o(" (ViT model)"),Xzo=l(),z1=a("p"),zzo=o("The model is set in evaluation mode by default using "),Che=a("code"),Qzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=a("code"),Hzo=o("model.train()"),Uzo=l(),v(Q1.$$.fragment),hIe=l(),td=a("h2"),W1=a("a"),Ahe=a("span"),v(AL.$$.fragment),Jzo=l(),yhe=a("span"),Yzo=o("AutoModelForVision2Seq"),uIe=l(),Do=a("div"),v(yL.$$.fragment),Kzo=l(),ad=a("p"),Zzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kV=a("a"),eQo=o("from_pretrained()"),oQo=o(" class method or the "),SV=a("a"),rQo=o("from_config()"),tQo=o(` class
method.`),aQo=l(),LL=a("p"),nQo=o("This class cannot be instantiated directly using "),Lhe=a("code"),sQo=o("__init__()"),lQo=o(" (throws an error)."),iQo=l(),ht=a("div"),v(xL.$$.fragment),dQo=l(),xhe=a("p"),cQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mQo=l(),nd=a("p"),fQo=o(`Note:
Loading a model from its configuration file does `),$he=a("strong"),gQo=o("not"),hQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),uQo=o("from_pretrained()"),pQo=o(" to load the model weights."),_Qo=l(),v(H1.$$.fragment),bQo=l(),so=a("div"),v($L.$$.fragment),FQo=l(),khe=a("p"),vQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TQo=l(),Na=a("p"),MQo=o("The model class to instantiate is selected based on the "),She=a("code"),EQo=o("model_type"),CQo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),wQo=o("pretrained_model_name_or_path"),AQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),yQo=o("pretrained_model_name_or_path"),LQo=o(":"),xQo=l(),Phe=a("ul"),U1=a("li"),Ihe=a("strong"),$Qo=o("vision-encoder-decoder"),kQo=o(" \u2014 "),BV=a("a"),SQo=o("VisionEncoderDecoderModel"),RQo=o(" (Vision Encoder decoder model)"),BQo=l(),J1=a("p"),PQo=o("The model is set in evaluation mode by default using "),qhe=a("code"),IQo=o("model.eval()"),qQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),NQo=o("model.train()"),jQo=l(),v(Y1.$$.fragment),pIe=l(),sd=a("h2"),K1=a("a"),jhe=a("span"),v(kL.$$.fragment),DQo=l(),Dhe=a("span"),GQo=o("AutoModelForAudioClassification"),_Ie=l(),Go=a("div"),v(SL.$$.fragment),OQo=l(),ld=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PV=a("a"),XQo=o("from_pretrained()"),zQo=o(" class method or the "),IV=a("a"),QQo=o("from_config()"),WQo=o(` class
method.`),HQo=l(),RL=a("p"),UQo=o("This class cannot be instantiated directly using "),Ghe=a("code"),JQo=o("__init__()"),YQo=o(" (throws an error)."),KQo=l(),ut=a("div"),v(BL.$$.fragment),ZQo=l(),Ohe=a("p"),eWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oWo=l(),id=a("p"),rWo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),tWo=o("not"),aWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),nWo=o("from_pretrained()"),sWo=o(" to load the model weights."),lWo=l(),v(Z1.$$.fragment),iWo=l(),lo=a("div"),v(PL.$$.fragment),dWo=l(),Xhe=a("p"),cWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mWo=l(),ja=a("p"),fWo=o("The model class to instantiate is selected based on the "),zhe=a("code"),gWo=o("model_type"),hWo=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),uWo=o("pretrained_model_name_or_path"),pWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),_Wo=o("pretrained_model_name_or_path"),bWo=o(":"),FWo=l(),Ne=a("ul"),eT=a("li"),Hhe=a("strong"),vWo=o("data2vec-audio"),TWo=o(" \u2014 "),NV=a("a"),MWo=o("Data2VecAudioForSequenceClassification"),EWo=o(" (Data2VecAudio model)"),CWo=l(),oT=a("li"),Uhe=a("strong"),wWo=o("hubert"),AWo=o(" \u2014 "),jV=a("a"),yWo=o("HubertForSequenceClassification"),LWo=o(" (Hubert model)"),xWo=l(),rT=a("li"),Jhe=a("strong"),$Wo=o("sew"),kWo=o(" \u2014 "),DV=a("a"),SWo=o("SEWForSequenceClassification"),RWo=o(" (SEW model)"),BWo=l(),tT=a("li"),Yhe=a("strong"),PWo=o("sew-d"),IWo=o(" \u2014 "),GV=a("a"),qWo=o("SEWDForSequenceClassification"),NWo=o(" (SEW-D model)"),jWo=l(),aT=a("li"),Khe=a("strong"),DWo=o("unispeech"),GWo=o(" \u2014 "),OV=a("a"),OWo=o("UniSpeechForSequenceClassification"),VWo=o(" (UniSpeech model)"),XWo=l(),nT=a("li"),Zhe=a("strong"),zWo=o("unispeech-sat"),QWo=o(" \u2014 "),VV=a("a"),WWo=o("UniSpeechSatForSequenceClassification"),HWo=o(" (UniSpeechSat model)"),UWo=l(),sT=a("li"),eue=a("strong"),JWo=o("wav2vec2"),YWo=o(" \u2014 "),XV=a("a"),KWo=o("Wav2Vec2ForSequenceClassification"),ZWo=o(" (Wav2Vec2 model)"),eHo=l(),lT=a("li"),oue=a("strong"),oHo=o("wavlm"),rHo=o(" \u2014 "),zV=a("a"),tHo=o("WavLMForSequenceClassification"),aHo=o(" (WavLM model)"),nHo=l(),iT=a("p"),sHo=o("The model is set in evaluation mode by default using "),rue=a("code"),lHo=o("model.eval()"),iHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=a("code"),dHo=o("model.train()"),cHo=l(),v(dT.$$.fragment),bIe=l(),dd=a("h2"),cT=a("a"),aue=a("span"),v(IL.$$.fragment),mHo=l(),nue=a("span"),fHo=o("AutoModelForAudioFrameClassification"),FIe=l(),Oo=a("div"),v(qL.$$.fragment),gHo=l(),cd=a("p"),hHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QV=a("a"),uHo=o("from_pretrained()"),pHo=o(" class method or the "),WV=a("a"),_Ho=o("from_config()"),bHo=o(` class
method.`),FHo=l(),NL=a("p"),vHo=o("This class cannot be instantiated directly using "),sue=a("code"),THo=o("__init__()"),MHo=o(" (throws an error)."),EHo=l(),pt=a("div"),v(jL.$$.fragment),CHo=l(),lue=a("p"),wHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AHo=l(),md=a("p"),yHo=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),LHo=o("not"),xHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),$Ho=o("from_pretrained()"),kHo=o(" to load the model weights."),SHo=l(),v(mT.$$.fragment),RHo=l(),io=a("div"),v(DL.$$.fragment),BHo=l(),due=a("p"),PHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IHo=l(),Da=a("p"),qHo=o("The model class to instantiate is selected based on the "),cue=a("code"),NHo=o("model_type"),jHo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),DHo=o("pretrained_model_name_or_path"),GHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),OHo=o("pretrained_model_name_or_path"),VHo=o(":"),XHo=l(),Ga=a("ul"),fT=a("li"),gue=a("strong"),zHo=o("data2vec-audio"),QHo=o(" \u2014 "),UV=a("a"),WHo=o("Data2VecAudioForAudioFrameClassification"),HHo=o(" (Data2VecAudio model)"),UHo=l(),gT=a("li"),hue=a("strong"),JHo=o("unispeech-sat"),YHo=o(" \u2014 "),JV=a("a"),KHo=o("UniSpeechSatForAudioFrameClassification"),ZHo=o(" (UniSpeechSat model)"),eUo=l(),hT=a("li"),uue=a("strong"),oUo=o("wav2vec2"),rUo=o(" \u2014 "),YV=a("a"),tUo=o("Wav2Vec2ForAudioFrameClassification"),aUo=o(" (Wav2Vec2 model)"),nUo=l(),uT=a("li"),pue=a("strong"),sUo=o("wavlm"),lUo=o(" \u2014 "),KV=a("a"),iUo=o("WavLMForAudioFrameClassification"),dUo=o(" (WavLM model)"),cUo=l(),pT=a("p"),mUo=o("The model is set in evaluation mode by default using "),_ue=a("code"),fUo=o("model.eval()"),gUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=a("code"),hUo=o("model.train()"),uUo=l(),v(_T.$$.fragment),vIe=l(),fd=a("h2"),bT=a("a"),Fue=a("span"),v(GL.$$.fragment),pUo=l(),vue=a("span"),_Uo=o("AutoModelForCTC"),TIe=l(),Vo=a("div"),v(OL.$$.fragment),bUo=l(),gd=a("p"),FUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZV=a("a"),vUo=o("from_pretrained()"),TUo=o(" class method or the "),eX=a("a"),MUo=o("from_config()"),EUo=o(` class
method.`),CUo=l(),VL=a("p"),wUo=o("This class cannot be instantiated directly using "),Tue=a("code"),AUo=o("__init__()"),yUo=o(" (throws an error)."),LUo=l(),_t=a("div"),v(XL.$$.fragment),xUo=l(),Mue=a("p"),$Uo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kUo=l(),hd=a("p"),SUo=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),RUo=o("not"),BUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),PUo=o("from_pretrained()"),IUo=o(" to load the model weights."),qUo=l(),v(FT.$$.fragment),NUo=l(),co=a("div"),v(zL.$$.fragment),jUo=l(),Cue=a("p"),DUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),GUo=l(),Oa=a("p"),OUo=o("The model class to instantiate is selected based on the "),wue=a("code"),VUo=o("model_type"),XUo=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),zUo=o("pretrained_model_name_or_path"),QUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),WUo=o("pretrained_model_name_or_path"),HUo=o(":"),UUo=l(),je=a("ul"),vT=a("li"),Lue=a("strong"),JUo=o("data2vec-audio"),YUo=o(" \u2014 "),rX=a("a"),KUo=o("Data2VecAudioForCTC"),ZUo=o(" (Data2VecAudio model)"),eJo=l(),TT=a("li"),xue=a("strong"),oJo=o("hubert"),rJo=o(" \u2014 "),tX=a("a"),tJo=o("HubertForCTC"),aJo=o(" (Hubert model)"),nJo=l(),MT=a("li"),$ue=a("strong"),sJo=o("sew"),lJo=o(" \u2014 "),aX=a("a"),iJo=o("SEWForCTC"),dJo=o(" (SEW model)"),cJo=l(),ET=a("li"),kue=a("strong"),mJo=o("sew-d"),fJo=o(" \u2014 "),nX=a("a"),gJo=o("SEWDForCTC"),hJo=o(" (SEW-D model)"),uJo=l(),CT=a("li"),Sue=a("strong"),pJo=o("unispeech"),_Jo=o(" \u2014 "),sX=a("a"),bJo=o("UniSpeechForCTC"),FJo=o(" (UniSpeech model)"),vJo=l(),wT=a("li"),Rue=a("strong"),TJo=o("unispeech-sat"),MJo=o(" \u2014 "),lX=a("a"),EJo=o("UniSpeechSatForCTC"),CJo=o(" (UniSpeechSat model)"),wJo=l(),AT=a("li"),Bue=a("strong"),AJo=o("wav2vec2"),yJo=o(" \u2014 "),iX=a("a"),LJo=o("Wav2Vec2ForCTC"),xJo=o(" (Wav2Vec2 model)"),$Jo=l(),yT=a("li"),Pue=a("strong"),kJo=o("wavlm"),SJo=o(" \u2014 "),dX=a("a"),RJo=o("WavLMForCTC"),BJo=o(" (WavLM model)"),PJo=l(),LT=a("p"),IJo=o("The model is set in evaluation mode by default using "),Iue=a("code"),qJo=o("model.eval()"),NJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),jJo=o("model.train()"),DJo=l(),v(xT.$$.fragment),MIe=l(),ud=a("h2"),$T=a("a"),Nue=a("span"),v(QL.$$.fragment),GJo=l(),jue=a("span"),OJo=o("AutoModelForSpeechSeq2Seq"),EIe=l(),Xo=a("div"),v(WL.$$.fragment),VJo=l(),pd=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cX=a("a"),zJo=o("from_pretrained()"),QJo=o(" class method or the "),mX=a("a"),WJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),HL=a("p"),JJo=o("This class cannot be instantiated directly using "),Due=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),bt=a("div"),v(UL.$$.fragment),eYo=l(),Gue=a("p"),oYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rYo=l(),_d=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),v(kT.$$.fragment),dYo=l(),mo=a("div"),v(JL.$$.fragment),cYo=l(),Vue=a("p"),mYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fYo=l(),Va=a("p"),gYo=o("The model class to instantiate is selected based on the "),Xue=a("code"),hYo=o("model_type"),uYo=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),pYo=o("pretrained_model_name_or_path"),_Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),bYo=o("pretrained_model_name_or_path"),FYo=o(":"),vYo=l(),YL=a("ul"),ST=a("li"),Wue=a("strong"),TYo=o("speech-encoder-decoder"),MYo=o(" \u2014 "),gX=a("a"),EYo=o("SpeechEncoderDecoderModel"),CYo=o(" (Speech Encoder decoder model)"),wYo=l(),RT=a("li"),Hue=a("strong"),AYo=o("speech_to_text"),yYo=o(" \u2014 "),hX=a("a"),LYo=o("Speech2TextForConditionalGeneration"),xYo=o(" (Speech2Text model)"),$Yo=l(),BT=a("p"),kYo=o("The model is set in evaluation mode by default using "),Uue=a("code"),SYo=o("model.eval()"),RYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=a("code"),BYo=o("model.train()"),PYo=l(),v(PT.$$.fragment),CIe=l(),bd=a("h2"),IT=a("a"),Yue=a("span"),v(KL.$$.fragment),IYo=l(),Kue=a("span"),qYo=o("AutoModelForAudioXVector"),wIe=l(),zo=a("div"),v(ZL.$$.fragment),NYo=l(),Fd=a("p"),jYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),uX=a("a"),DYo=o("from_pretrained()"),GYo=o(" class method or the "),pX=a("a"),OYo=o("from_config()"),VYo=o(` class
method.`),XYo=l(),e8=a("p"),zYo=o("This class cannot be instantiated directly using "),Zue=a("code"),QYo=o("__init__()"),WYo=o(" (throws an error)."),HYo=l(),Ft=a("div"),v(o8.$$.fragment),UYo=l(),epe=a("p"),JYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YYo=l(),vd=a("p"),KYo=o(`Note:
Loading a model from its configuration file does `),ope=a("strong"),ZYo=o("not"),eKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),oKo=o("from_pretrained()"),rKo=o(" to load the model weights."),tKo=l(),v(qT.$$.fragment),aKo=l(),fo=a("div"),v(r8.$$.fragment),nKo=l(),rpe=a("p"),sKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lKo=l(),Xa=a("p"),iKo=o("The model class to instantiate is selected based on the "),tpe=a("code"),dKo=o("model_type"),cKo=o(` property of the config object (either
passed as an argument or loaded from `),ape=a("code"),mKo=o("pretrained_model_name_or_path"),fKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=a("code"),gKo=o("pretrained_model_name_or_path"),hKo=o(":"),uKo=l(),za=a("ul"),NT=a("li"),spe=a("strong"),pKo=o("data2vec-audio"),_Ko=o(" \u2014 "),bX=a("a"),bKo=o("Data2VecAudioForXVector"),FKo=o(" (Data2VecAudio model)"),vKo=l(),jT=a("li"),lpe=a("strong"),TKo=o("unispeech-sat"),MKo=o(" \u2014 "),FX=a("a"),EKo=o("UniSpeechSatForXVector"),CKo=o(" (UniSpeechSat model)"),wKo=l(),DT=a("li"),ipe=a("strong"),AKo=o("wav2vec2"),yKo=o(" \u2014 "),vX=a("a"),LKo=o("Wav2Vec2ForXVector"),xKo=o(" (Wav2Vec2 model)"),$Ko=l(),GT=a("li"),dpe=a("strong"),kKo=o("wavlm"),SKo=o(" \u2014 "),TX=a("a"),RKo=o("WavLMForXVector"),BKo=o(" (WavLM model)"),PKo=l(),OT=a("p"),IKo=o("The model is set in evaluation mode by default using "),cpe=a("code"),qKo=o("model.eval()"),NKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),jKo=o("model.train()"),DKo=l(),v(VT.$$.fragment),AIe=l(),Td=a("h2"),XT=a("a"),fpe=a("span"),v(t8.$$.fragment),GKo=l(),gpe=a("span"),OKo=o("AutoModelForMaskedImageModeling"),yIe=l(),Qo=a("div"),v(a8.$$.fragment),VKo=l(),Md=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),MX=a("a"),zKo=o("from_pretrained()"),QKo=o(" class method or the "),EX=a("a"),WKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),n8=a("p"),JKo=o("This class cannot be instantiated directly using "),hpe=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),vt=a("div"),v(s8.$$.fragment),eZo=l(),upe=a("p"),oZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rZo=l(),Ed=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),v(zT.$$.fragment),dZo=l(),go=a("div"),v(l8.$$.fragment),cZo=l(),_pe=a("p"),mZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fZo=l(),Qa=a("p"),gZo=o("The model class to instantiate is selected based on the "),bpe=a("code"),hZo=o("model_type"),uZo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),pZo=o("pretrained_model_name_or_path"),_Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),bZo=o("pretrained_model_name_or_path"),FZo=o(":"),vZo=l(),Cd=a("ul"),QT=a("li"),Tpe=a("strong"),TZo=o("deit"),MZo=o(" \u2014 "),wX=a("a"),EZo=o("DeiTForMaskedImageModeling"),CZo=o(" (DeiT model)"),wZo=l(),WT=a("li"),Mpe=a("strong"),AZo=o("swin"),yZo=o(" \u2014 "),AX=a("a"),LZo=o("SwinForMaskedImageModeling"),xZo=o(" (Swin model)"),$Zo=l(),HT=a("li"),Epe=a("strong"),kZo=o("vit"),SZo=o(" \u2014 "),yX=a("a"),RZo=o("ViTForMaskedImageModeling"),BZo=o(" (ViT model)"),PZo=l(),UT=a("p"),IZo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),qZo=o("model.eval()"),NZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),jZo=o("model.train()"),DZo=l(),v(JT.$$.fragment),LIe=l(),wd=a("h2"),YT=a("a"),Ape=a("span"),v(i8.$$.fragment),GZo=l(),ype=a("span"),OZo=o("AutoModelForObjectDetection"),xIe=l(),Wo=a("div"),v(d8.$$.fragment),VZo=l(),Ad=a("p"),XZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),LX=a("a"),zZo=o("from_pretrained()"),QZo=o(" class method or the "),xX=a("a"),WZo=o("from_config()"),HZo=o(` class
method.`),UZo=l(),c8=a("p"),JZo=o("This class cannot be instantiated directly using "),Lpe=a("code"),YZo=o("__init__()"),KZo=o(" (throws an error)."),ZZo=l(),Tt=a("div"),v(m8.$$.fragment),eer=l(),xpe=a("p"),oer=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rer=l(),yd=a("p"),ter=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),aer=o("not"),ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),ser=o("from_pretrained()"),ler=o(" to load the model weights."),ier=l(),v(KT.$$.fragment),der=l(),ho=a("div"),v(f8.$$.fragment),cer=l(),kpe=a("p"),mer=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fer=l(),Wa=a("p"),ger=o("The model class to instantiate is selected based on the "),Spe=a("code"),her=o("model_type"),uer=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),per=o("pretrained_model_name_or_path"),_er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),ber=o("pretrained_model_name_or_path"),Fer=o(":"),ver=l(),g8=a("ul"),ZT=a("li"),Ppe=a("strong"),Ter=o("detr"),Mer=o(" \u2014 "),kX=a("a"),Eer=o("DetrForObjectDetection"),Cer=o(" (DETR model)"),wer=l(),eM=a("li"),Ipe=a("strong"),Aer=o("yolos"),yer=o(" \u2014 "),SX=a("a"),Ler=o("YolosForObjectDetection"),xer=o(" (YOLOS model)"),$er=l(),oM=a("p"),ker=o("The model is set in evaluation mode by default using "),qpe=a("code"),Ser=o("model.eval()"),Rer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),Ber=o("model.train()"),Per=l(),v(rM.$$.fragment),$Ie=l(),Ld=a("h2"),tM=a("a"),jpe=a("span"),v(h8.$$.fragment),Ier=l(),Dpe=a("span"),qer=o("AutoModelForImageSegmentation"),kIe=l(),Ho=a("div"),v(u8.$$.fragment),Ner=l(),xd=a("p"),jer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),RX=a("a"),Der=o("from_pretrained()"),Ger=o(" class method or the "),BX=a("a"),Oer=o("from_config()"),Ver=o(` class
method.`),Xer=l(),p8=a("p"),zer=o("This class cannot be instantiated directly using "),Gpe=a("code"),Qer=o("__init__()"),Wer=o(" (throws an error)."),Her=l(),Mt=a("div"),v(_8.$$.fragment),Uer=l(),Ope=a("p"),Jer=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Yer=l(),$d=a("p"),Ker=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),Zer=o("not"),eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),oor=o("from_pretrained()"),ror=o(" to load the model weights."),tor=l(),v(aM.$$.fragment),aor=l(),uo=a("div"),v(b8.$$.fragment),nor=l(),Xpe=a("p"),sor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lor=l(),Ha=a("p"),ior=o("The model class to instantiate is selected based on the "),zpe=a("code"),dor=o("model_type"),cor=o(` property of the config object (either
passed as an argument or loaded from `),Qpe=a("code"),mor=o("pretrained_model_name_or_path"),gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),hor=o("pretrained_model_name_or_path"),uor=o(":"),por=l(),Hpe=a("ul"),nM=a("li"),Upe=a("strong"),_or=o("detr"),bor=o(" \u2014 "),IX=a("a"),For=o("DetrForSegmentation"),vor=o(" (DETR model)"),Tor=l(),sM=a("p"),Mor=o("The model is set in evaluation mode by default using "),Jpe=a("code"),Eor=o("model.eval()"),Cor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),wor=o("model.train()"),Aor=l(),v(lM.$$.fragment),SIe=l(),kd=a("h2"),iM=a("a"),Kpe=a("span"),v(F8.$$.fragment),yor=l(),Zpe=a("span"),Lor=o("AutoModelForSemanticSegmentation"),RIe=l(),Uo=a("div"),v(v8.$$.fragment),xor=l(),Sd=a("p"),$or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),qX=a("a"),kor=o("from_pretrained()"),Sor=o(" class method or the "),NX=a("a"),Ror=o("from_config()"),Bor=o(` class
method.`),Por=l(),T8=a("p"),Ior=o("This class cannot be instantiated directly using "),e_e=a("code"),qor=o("__init__()"),Nor=o(" (throws an error)."),jor=l(),Et=a("div"),v(M8.$$.fragment),Dor=l(),o_e=a("p"),Gor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Oor=l(),Rd=a("p"),Vor=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),Xor=o("not"),zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Qor=o("from_pretrained()"),Wor=o(" to load the model weights."),Hor=l(),v(dM.$$.fragment),Uor=l(),po=a("div"),v(E8.$$.fragment),Jor=l(),t_e=a("p"),Yor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Kor=l(),Ua=a("p"),Zor=o("The model class to instantiate is selected based on the "),a_e=a("code"),err=o("model_type"),orr=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),rrr=o("pretrained_model_name_or_path"),trr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),arr=o("pretrained_model_name_or_path"),nrr=o(":"),srr=l(),Ja=a("ul"),cM=a("li"),l_e=a("strong"),lrr=o("beit"),irr=o(" \u2014 "),DX=a("a"),drr=o("BeitForSemanticSegmentation"),crr=o(" (BEiT model)"),mrr=l(),mM=a("li"),i_e=a("strong"),frr=o("data2vec-vision"),grr=o(" \u2014 "),GX=a("a"),hrr=o("Data2VecVisionForSemanticSegmentation"),urr=o(" (Data2VecVision model)"),prr=l(),fM=a("li"),d_e=a("strong"),_rr=o("dpt"),brr=o(" \u2014 "),OX=a("a"),Frr=o("DPTForSemanticSegmentation"),vrr=o(" (DPT model)"),Trr=l(),gM=a("li"),c_e=a("strong"),Mrr=o("segformer"),Err=o(" \u2014 "),VX=a("a"),Crr=o("SegformerForSemanticSegmentation"),wrr=o(" (SegFormer model)"),Arr=l(),hM=a("p"),yrr=o("The model is set in evaluation mode by default using "),m_e=a("code"),Lrr=o("model.eval()"),xrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),$rr=o("model.train()"),krr=l(),v(uM.$$.fragment),BIe=l(),Bd=a("h2"),pM=a("a"),g_e=a("span"),v(C8.$$.fragment),Srr=l(),h_e=a("span"),Rrr=o("AutoModelForInstanceSegmentation"),PIe=l(),Jo=a("div"),v(w8.$$.fragment),Brr=l(),Pd=a("p"),Prr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XX=a("a"),Irr=o("from_pretrained()"),qrr=o(" class method or the "),zX=a("a"),Nrr=o("from_config()"),jrr=o(` class
method.`),Drr=l(),A8=a("p"),Grr=o("This class cannot be instantiated directly using "),u_e=a("code"),Orr=o("__init__()"),Vrr=o(" (throws an error)."),Xrr=l(),Ct=a("div"),v(y8.$$.fragment),zrr=l(),p_e=a("p"),Qrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wrr=l(),Id=a("p"),Hrr=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),Urr=o("not"),Jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Yrr=o("from_pretrained()"),Krr=o(" to load the model weights."),Zrr=l(),v(_M.$$.fragment),etr=l(),_o=a("div"),v(L8.$$.fragment),otr=l(),b_e=a("p"),rtr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ttr=l(),Ya=a("p"),atr=o("The model class to instantiate is selected based on the "),F_e=a("code"),ntr=o("model_type"),str=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(":"),mtr=l(),M_e=a("ul"),bM=a("li"),E_e=a("strong"),ftr=o("maskformer"),gtr=o(" \u2014 "),WX=a("a"),htr=o("MaskFormerForInstanceSegmentation"),utr=o(" (MaskFormer model)"),ptr=l(),FM=a("p"),_tr=o("The model is set in evaluation mode by default using "),C_e=a("code"),btr=o("model.eval()"),Ftr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),vtr=o("model.train()"),Ttr=l(),v(vM.$$.fragment),IIe=l(),qd=a("h2"),TM=a("a"),A_e=a("span"),v(x8.$$.fragment),Mtr=l(),y_e=a("span"),Etr=o("TFAutoModel"),qIe=l(),Yo=a("div"),v($8.$$.fragment),Ctr=l(),Nd=a("p"),wtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HX=a("a"),Atr=o("from_pretrained()"),ytr=o(" class method or the "),UX=a("a"),Ltr=o("from_config()"),xtr=o(` class
method.`),$tr=l(),k8=a("p"),ktr=o("This class cannot be instantiated directly using "),L_e=a("code"),Str=o("__init__()"),Rtr=o(" (throws an error)."),Btr=l(),wt=a("div"),v(S8.$$.fragment),Ptr=l(),x_e=a("p"),Itr=o("Instantiates one of the base model classes of the library from a configuration."),qtr=l(),jd=a("p"),Ntr=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),jtr=o("not"),Dtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),Gtr=o("from_pretrained()"),Otr=o(" to load the model weights."),Vtr=l(),v(MM.$$.fragment),Xtr=l(),wr=a("div"),v(R8.$$.fragment),ztr=l(),k_e=a("p"),Qtr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wtr=l(),Ka=a("p"),Htr=o("The model class to instantiate is selected based on the "),S_e=a("code"),Utr=o("model_type"),Jtr=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),Ytr=o("pretrained_model_name_or_path"),Ktr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),Ztr=o("pretrained_model_name_or_path"),ear=o(":"),oar=l(),N=a("ul"),EM=a("li"),P_e=a("strong"),rar=o("albert"),tar=o(" \u2014 "),YX=a("a"),aar=o("TFAlbertModel"),nar=o(" (ALBERT model)"),sar=l(),CM=a("li"),I_e=a("strong"),lar=o("bart"),iar=o(" \u2014 "),KX=a("a"),dar=o("TFBartModel"),car=o(" (BART model)"),mar=l(),wM=a("li"),q_e=a("strong"),far=o("bert"),gar=o(" \u2014 "),ZX=a("a"),har=o("TFBertModel"),uar=o(" (BERT model)"),par=l(),AM=a("li"),N_e=a("strong"),_ar=o("blenderbot"),bar=o(" \u2014 "),ez=a("a"),Far=o("TFBlenderbotModel"),Tar=o(" (Blenderbot model)"),Mar=l(),yM=a("li"),j_e=a("strong"),Ear=o("blenderbot-small"),Car=o(" \u2014 "),oz=a("a"),war=o("TFBlenderbotSmallModel"),Aar=o(" (BlenderbotSmall model)"),yar=l(),LM=a("li"),D_e=a("strong"),Lar=o("camembert"),xar=o(" \u2014 "),rz=a("a"),$ar=o("TFCamembertModel"),kar=o(" (CamemBERT model)"),Sar=l(),xM=a("li"),G_e=a("strong"),Rar=o("clip"),Bar=o(" \u2014 "),tz=a("a"),Par=o("TFCLIPModel"),Iar=o(" (CLIP model)"),qar=l(),$M=a("li"),O_e=a("strong"),Nar=o("convbert"),jar=o(" \u2014 "),az=a("a"),Dar=o("TFConvBertModel"),Gar=o(" (ConvBERT model)"),Oar=l(),kM=a("li"),V_e=a("strong"),Var=o("convnext"),Xar=o(" \u2014 "),nz=a("a"),zar=o("TFConvNextModel"),Qar=o(" (ConvNext model)"),War=l(),SM=a("li"),X_e=a("strong"),Har=o("ctrl"),Uar=o(" \u2014 "),sz=a("a"),Jar=o("TFCTRLModel"),Yar=o(" (CTRL model)"),Kar=l(),RM=a("li"),z_e=a("strong"),Zar=o("data2vec-vision"),enr=o(" \u2014 "),lz=a("a"),onr=o("TFData2VecVisionModel"),rnr=o(" (Data2VecVision model)"),tnr=l(),BM=a("li"),Q_e=a("strong"),anr=o("deberta"),nnr=o(" \u2014 "),iz=a("a"),snr=o("TFDebertaModel"),lnr=o(" (DeBERTa model)"),inr=l(),PM=a("li"),W_e=a("strong"),dnr=o("deberta-v2"),cnr=o(" \u2014 "),dz=a("a"),mnr=o("TFDebertaV2Model"),fnr=o(" (DeBERTa-v2 model)"),gnr=l(),IM=a("li"),H_e=a("strong"),hnr=o("distilbert"),unr=o(" \u2014 "),cz=a("a"),pnr=o("TFDistilBertModel"),_nr=o(" (DistilBERT model)"),bnr=l(),qM=a("li"),U_e=a("strong"),Fnr=o("dpr"),vnr=o(" \u2014 "),mz=a("a"),Tnr=o("TFDPRQuestionEncoder"),Mnr=o(" (DPR model)"),Enr=l(),NM=a("li"),J_e=a("strong"),Cnr=o("electra"),wnr=o(" \u2014 "),fz=a("a"),Anr=o("TFElectraModel"),ynr=o(" (ELECTRA model)"),Lnr=l(),jM=a("li"),Y_e=a("strong"),xnr=o("flaubert"),$nr=o(" \u2014 "),gz=a("a"),knr=o("TFFlaubertModel"),Snr=o(" (FlauBERT model)"),Rnr=l(),Bs=a("li"),K_e=a("strong"),Bnr=o("funnel"),Pnr=o(" \u2014 "),hz=a("a"),Inr=o("TFFunnelModel"),qnr=o(" or "),uz=a("a"),Nnr=o("TFFunnelBaseModel"),jnr=o(" (Funnel Transformer model)"),Dnr=l(),DM=a("li"),Z_e=a("strong"),Gnr=o("gpt2"),Onr=o(" \u2014 "),pz=a("a"),Vnr=o("TFGPT2Model"),Xnr=o(" (OpenAI GPT-2 model)"),znr=l(),GM=a("li"),ebe=a("strong"),Qnr=o("gptj"),Wnr=o(" \u2014 "),_z=a("a"),Hnr=o("TFGPTJModel"),Unr=o(" (GPT-J model)"),Jnr=l(),OM=a("li"),obe=a("strong"),Ynr=o("hubert"),Knr=o(" \u2014 "),bz=a("a"),Znr=o("TFHubertModel"),esr=o(" (Hubert model)"),osr=l(),VM=a("li"),rbe=a("strong"),rsr=o("layoutlm"),tsr=o(" \u2014 "),Fz=a("a"),asr=o("TFLayoutLMModel"),nsr=o(" (LayoutLM model)"),ssr=l(),XM=a("li"),tbe=a("strong"),lsr=o("led"),isr=o(" \u2014 "),vz=a("a"),dsr=o("TFLEDModel"),csr=o(" (LED model)"),msr=l(),zM=a("li"),abe=a("strong"),fsr=o("longformer"),gsr=o(" \u2014 "),Tz=a("a"),hsr=o("TFLongformerModel"),usr=o(" (Longformer model)"),psr=l(),QM=a("li"),nbe=a("strong"),_sr=o("lxmert"),bsr=o(" \u2014 "),Mz=a("a"),Fsr=o("TFLxmertModel"),vsr=o(" (LXMERT model)"),Tsr=l(),WM=a("li"),sbe=a("strong"),Msr=o("marian"),Esr=o(" \u2014 "),Ez=a("a"),Csr=o("TFMarianModel"),wsr=o(" (Marian model)"),Asr=l(),HM=a("li"),lbe=a("strong"),ysr=o("mbart"),Lsr=o(" \u2014 "),Cz=a("a"),xsr=o("TFMBartModel"),$sr=o(" (mBART model)"),ksr=l(),UM=a("li"),ibe=a("strong"),Ssr=o("mobilebert"),Rsr=o(" \u2014 "),wz=a("a"),Bsr=o("TFMobileBertModel"),Psr=o(" (MobileBERT model)"),Isr=l(),JM=a("li"),dbe=a("strong"),qsr=o("mpnet"),Nsr=o(" \u2014 "),Az=a("a"),jsr=o("TFMPNetModel"),Dsr=o(" (MPNet model)"),Gsr=l(),YM=a("li"),cbe=a("strong"),Osr=o("mt5"),Vsr=o(" \u2014 "),yz=a("a"),Xsr=o("TFMT5Model"),zsr=o(" (mT5 model)"),Qsr=l(),KM=a("li"),mbe=a("strong"),Wsr=o("openai-gpt"),Hsr=o(" \u2014 "),Lz=a("a"),Usr=o("TFOpenAIGPTModel"),Jsr=o(" (OpenAI GPT model)"),Ysr=l(),ZM=a("li"),fbe=a("strong"),Ksr=o("pegasus"),Zsr=o(" \u2014 "),xz=a("a"),elr=o("TFPegasusModel"),olr=o(" (Pegasus model)"),rlr=l(),e4=a("li"),gbe=a("strong"),tlr=o("rembert"),alr=o(" \u2014 "),$z=a("a"),nlr=o("TFRemBertModel"),slr=o(" (RemBERT model)"),llr=l(),o4=a("li"),hbe=a("strong"),ilr=o("roberta"),dlr=o(" \u2014 "),kz=a("a"),clr=o("TFRobertaModel"),mlr=o(" (RoBERTa model)"),flr=l(),r4=a("li"),ube=a("strong"),glr=o("roformer"),hlr=o(" \u2014 "),Sz=a("a"),ulr=o("TFRoFormerModel"),plr=o(" (RoFormer model)"),_lr=l(),t4=a("li"),pbe=a("strong"),blr=o("speech_to_text"),Flr=o(" \u2014 "),Rz=a("a"),vlr=o("TFSpeech2TextModel"),Tlr=o(" (Speech2Text model)"),Mlr=l(),a4=a("li"),_be=a("strong"),Elr=o("t5"),Clr=o(" \u2014 "),Bz=a("a"),wlr=o("TFT5Model"),Alr=o(" (T5 model)"),ylr=l(),n4=a("li"),bbe=a("strong"),Llr=o("tapas"),xlr=o(" \u2014 "),Pz=a("a"),$lr=o("TFTapasModel"),klr=o(" (TAPAS model)"),Slr=l(),s4=a("li"),Fbe=a("strong"),Rlr=o("transfo-xl"),Blr=o(" \u2014 "),Iz=a("a"),Plr=o("TFTransfoXLModel"),Ilr=o(" (Transformer-XL model)"),qlr=l(),l4=a("li"),vbe=a("strong"),Nlr=o("vit"),jlr=o(" \u2014 "),qz=a("a"),Dlr=o("TFViTModel"),Glr=o(" (ViT model)"),Olr=l(),i4=a("li"),Tbe=a("strong"),Vlr=o("vit_mae"),Xlr=o(" \u2014 "),Nz=a("a"),zlr=o("TFViTMAEModel"),Qlr=o(" (ViTMAE model)"),Wlr=l(),d4=a("li"),Mbe=a("strong"),Hlr=o("wav2vec2"),Ulr=o(" \u2014 "),jz=a("a"),Jlr=o("TFWav2Vec2Model"),Ylr=o(" (Wav2Vec2 model)"),Klr=l(),c4=a("li"),Ebe=a("strong"),Zlr=o("xlm"),eir=o(" \u2014 "),Dz=a("a"),oir=o("TFXLMModel"),rir=o(" (XLM model)"),tir=l(),m4=a("li"),Cbe=a("strong"),air=o("xlm-roberta"),nir=o(" \u2014 "),Gz=a("a"),sir=o("TFXLMRobertaModel"),lir=o(" (XLM-RoBERTa model)"),iir=l(),f4=a("li"),wbe=a("strong"),dir=o("xlnet"),cir=o(" \u2014 "),Oz=a("a"),mir=o("TFXLNetModel"),fir=o(" (XLNet model)"),gir=l(),v(g4.$$.fragment),NIe=l(),Dd=a("h2"),h4=a("a"),Abe=a("span"),v(B8.$$.fragment),hir=l(),ybe=a("span"),uir=o("TFAutoModelForPreTraining"),jIe=l(),Ko=a("div"),v(P8.$$.fragment),pir=l(),Gd=a("p"),_ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vz=a("a"),bir=o("from_pretrained()"),Fir=o(" class method or the "),Xz=a("a"),vir=o("from_config()"),Tir=o(` class
method.`),Mir=l(),I8=a("p"),Eir=o("This class cannot be instantiated directly using "),Lbe=a("code"),Cir=o("__init__()"),wir=o(" (throws an error)."),Air=l(),At=a("div"),v(q8.$$.fragment),yir=l(),xbe=a("p"),Lir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xir=l(),Od=a("p"),$ir=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),kir=o("not"),Sir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Rir=o("from_pretrained()"),Bir=o(" to load the model weights."),Pir=l(),v(u4.$$.fragment),Iir=l(),Ar=a("div"),v(N8.$$.fragment),qir=l(),kbe=a("p"),Nir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jir=l(),Za=a("p"),Dir=o("The model class to instantiate is selected based on the "),Sbe=a("code"),Gir=o("model_type"),Oir=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),Vir=o("pretrained_model_name_or_path"),Xir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),zir=o("pretrained_model_name_or_path"),Qir=o(":"),Wir=l(),se=a("ul"),p4=a("li"),Pbe=a("strong"),Hir=o("albert"),Uir=o(" \u2014 "),Qz=a("a"),Jir=o("TFAlbertForPreTraining"),Yir=o(" (ALBERT model)"),Kir=l(),_4=a("li"),Ibe=a("strong"),Zir=o("bart"),edr=o(" \u2014 "),Wz=a("a"),odr=o("TFBartForConditionalGeneration"),rdr=o(" (BART model)"),tdr=l(),b4=a("li"),qbe=a("strong"),adr=o("bert"),ndr=o(" \u2014 "),Hz=a("a"),sdr=o("TFBertForPreTraining"),ldr=o(" (BERT model)"),idr=l(),F4=a("li"),Nbe=a("strong"),ddr=o("camembert"),cdr=o(" \u2014 "),Uz=a("a"),mdr=o("TFCamembertForMaskedLM"),fdr=o(" (CamemBERT model)"),gdr=l(),v4=a("li"),jbe=a("strong"),hdr=o("ctrl"),udr=o(" \u2014 "),Jz=a("a"),pdr=o("TFCTRLLMHeadModel"),_dr=o(" (CTRL model)"),bdr=l(),T4=a("li"),Dbe=a("strong"),Fdr=o("distilbert"),vdr=o(" \u2014 "),Yz=a("a"),Tdr=o("TFDistilBertForMaskedLM"),Mdr=o(" (DistilBERT model)"),Edr=l(),M4=a("li"),Gbe=a("strong"),Cdr=o("electra"),wdr=o(" \u2014 "),Kz=a("a"),Adr=o("TFElectraForPreTraining"),ydr=o(" (ELECTRA model)"),Ldr=l(),E4=a("li"),Obe=a("strong"),xdr=o("flaubert"),$dr=o(" \u2014 "),Zz=a("a"),kdr=o("TFFlaubertWithLMHeadModel"),Sdr=o(" (FlauBERT model)"),Rdr=l(),C4=a("li"),Vbe=a("strong"),Bdr=o("funnel"),Pdr=o(" \u2014 "),eQ=a("a"),Idr=o("TFFunnelForPreTraining"),qdr=o(" (Funnel Transformer model)"),Ndr=l(),w4=a("li"),Xbe=a("strong"),jdr=o("gpt2"),Ddr=o(" \u2014 "),oQ=a("a"),Gdr=o("TFGPT2LMHeadModel"),Odr=o(" (OpenAI GPT-2 model)"),Vdr=l(),A4=a("li"),zbe=a("strong"),Xdr=o("layoutlm"),zdr=o(" \u2014 "),rQ=a("a"),Qdr=o("TFLayoutLMForMaskedLM"),Wdr=o(" (LayoutLM model)"),Hdr=l(),y4=a("li"),Qbe=a("strong"),Udr=o("lxmert"),Jdr=o(" \u2014 "),tQ=a("a"),Ydr=o("TFLxmertForPreTraining"),Kdr=o(" (LXMERT model)"),Zdr=l(),L4=a("li"),Wbe=a("strong"),ecr=o("mobilebert"),ocr=o(" \u2014 "),aQ=a("a"),rcr=o("TFMobileBertForPreTraining"),tcr=o(" (MobileBERT model)"),acr=l(),x4=a("li"),Hbe=a("strong"),ncr=o("mpnet"),scr=o(" \u2014 "),nQ=a("a"),lcr=o("TFMPNetForMaskedLM"),icr=o(" (MPNet model)"),dcr=l(),$4=a("li"),Ube=a("strong"),ccr=o("openai-gpt"),mcr=o(" \u2014 "),sQ=a("a"),fcr=o("TFOpenAIGPTLMHeadModel"),gcr=o(" (OpenAI GPT model)"),hcr=l(),k4=a("li"),Jbe=a("strong"),ucr=o("roberta"),pcr=o(" \u2014 "),lQ=a("a"),_cr=o("TFRobertaForMaskedLM"),bcr=o(" (RoBERTa model)"),Fcr=l(),S4=a("li"),Ybe=a("strong"),vcr=o("t5"),Tcr=o(" \u2014 "),iQ=a("a"),Mcr=o("TFT5ForConditionalGeneration"),Ecr=o(" (T5 model)"),Ccr=l(),R4=a("li"),Kbe=a("strong"),wcr=o("tapas"),Acr=o(" \u2014 "),dQ=a("a"),ycr=o("TFTapasForMaskedLM"),Lcr=o(" (TAPAS model)"),xcr=l(),B4=a("li"),Zbe=a("strong"),$cr=o("transfo-xl"),kcr=o(" \u2014 "),cQ=a("a"),Scr=o("TFTransfoXLLMHeadModel"),Rcr=o(" (Transformer-XL model)"),Bcr=l(),P4=a("li"),e2e=a("strong"),Pcr=o("vit_mae"),Icr=o(" \u2014 "),mQ=a("a"),qcr=o("TFViTMAEForPreTraining"),Ncr=o(" (ViTMAE model)"),jcr=l(),I4=a("li"),o2e=a("strong"),Dcr=o("xlm"),Gcr=o(" \u2014 "),fQ=a("a"),Ocr=o("TFXLMWithLMHeadModel"),Vcr=o(" (XLM model)"),Xcr=l(),q4=a("li"),r2e=a("strong"),zcr=o("xlm-roberta"),Qcr=o(" \u2014 "),gQ=a("a"),Wcr=o("TFXLMRobertaForMaskedLM"),Hcr=o(" (XLM-RoBERTa model)"),Ucr=l(),N4=a("li"),t2e=a("strong"),Jcr=o("xlnet"),Ycr=o(" \u2014 "),hQ=a("a"),Kcr=o("TFXLNetLMHeadModel"),Zcr=o(" (XLNet model)"),emr=l(),v(j4.$$.fragment),DIe=l(),Vd=a("h2"),D4=a("a"),a2e=a("span"),v(j8.$$.fragment),omr=l(),n2e=a("span"),rmr=o("TFAutoModelForCausalLM"),GIe=l(),Zo=a("div"),v(D8.$$.fragment),tmr=l(),Xd=a("p"),amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uQ=a("a"),nmr=o("from_pretrained()"),smr=o(" class method or the "),pQ=a("a"),lmr=o("from_config()"),imr=o(` class
method.`),dmr=l(),G8=a("p"),cmr=o("This class cannot be instantiated directly using "),s2e=a("code"),mmr=o("__init__()"),fmr=o(" (throws an error)."),gmr=l(),yt=a("div"),v(O8.$$.fragment),hmr=l(),l2e=a("p"),umr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pmr=l(),zd=a("p"),_mr=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),bmr=o("not"),Fmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),vmr=o("from_pretrained()"),Tmr=o(" to load the model weights."),Mmr=l(),v(G4.$$.fragment),Emr=l(),yr=a("div"),v(V8.$$.fragment),Cmr=l(),d2e=a("p"),wmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Amr=l(),en=a("p"),ymr=o("The model class to instantiate is selected based on the "),c2e=a("code"),Lmr=o("model_type"),xmr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),$mr=o("pretrained_model_name_or_path"),kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(":"),Bmr=l(),Te=a("ul"),O4=a("li"),g2e=a("strong"),Pmr=o("bert"),Imr=o(" \u2014 "),bQ=a("a"),qmr=o("TFBertLMHeadModel"),Nmr=o(" (BERT model)"),jmr=l(),V4=a("li"),h2e=a("strong"),Dmr=o("camembert"),Gmr=o(" \u2014 "),FQ=a("a"),Omr=o("TFCamembertForCausalLM"),Vmr=o(" (CamemBERT model)"),Xmr=l(),X4=a("li"),u2e=a("strong"),zmr=o("ctrl"),Qmr=o(" \u2014 "),vQ=a("a"),Wmr=o("TFCTRLLMHeadModel"),Hmr=o(" (CTRL model)"),Umr=l(),z4=a("li"),p2e=a("strong"),Jmr=o("gpt2"),Ymr=o(" \u2014 "),TQ=a("a"),Kmr=o("TFGPT2LMHeadModel"),Zmr=o(" (OpenAI GPT-2 model)"),efr=l(),Q4=a("li"),_2e=a("strong"),ofr=o("gptj"),rfr=o(" \u2014 "),MQ=a("a"),tfr=o("TFGPTJForCausalLM"),afr=o(" (GPT-J model)"),nfr=l(),W4=a("li"),b2e=a("strong"),sfr=o("openai-gpt"),lfr=o(" \u2014 "),EQ=a("a"),ifr=o("TFOpenAIGPTLMHeadModel"),dfr=o(" (OpenAI GPT model)"),cfr=l(),H4=a("li"),F2e=a("strong"),mfr=o("rembert"),ffr=o(" \u2014 "),CQ=a("a"),gfr=o("TFRemBertForCausalLM"),hfr=o(" (RemBERT model)"),ufr=l(),U4=a("li"),v2e=a("strong"),pfr=o("roberta"),_fr=o(" \u2014 "),wQ=a("a"),bfr=o("TFRobertaForCausalLM"),Ffr=o(" (RoBERTa model)"),vfr=l(),J4=a("li"),T2e=a("strong"),Tfr=o("roformer"),Mfr=o(" \u2014 "),AQ=a("a"),Efr=o("TFRoFormerForCausalLM"),Cfr=o(" (RoFormer model)"),wfr=l(),Y4=a("li"),M2e=a("strong"),Afr=o("transfo-xl"),yfr=o(" \u2014 "),yQ=a("a"),Lfr=o("TFTransfoXLLMHeadModel"),xfr=o(" (Transformer-XL model)"),$fr=l(),K4=a("li"),E2e=a("strong"),kfr=o("xlm"),Sfr=o(" \u2014 "),LQ=a("a"),Rfr=o("TFXLMWithLMHeadModel"),Bfr=o(" (XLM model)"),Pfr=l(),Z4=a("li"),C2e=a("strong"),Ifr=o("xlnet"),qfr=o(" \u2014 "),xQ=a("a"),Nfr=o("TFXLNetLMHeadModel"),jfr=o(" (XLNet model)"),Dfr=l(),v(eE.$$.fragment),OIe=l(),Qd=a("h2"),oE=a("a"),w2e=a("span"),v(X8.$$.fragment),Gfr=l(),A2e=a("span"),Ofr=o("TFAutoModelForImageClassification"),VIe=l(),er=a("div"),v(z8.$$.fragment),Vfr=l(),Wd=a("p"),Xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$Q=a("a"),zfr=o("from_pretrained()"),Qfr=o(" class method or the "),kQ=a("a"),Wfr=o("from_config()"),Hfr=o(` class
method.`),Ufr=l(),Q8=a("p"),Jfr=o("This class cannot be instantiated directly using "),y2e=a("code"),Yfr=o("__init__()"),Kfr=o(" (throws an error)."),Zfr=l(),Lt=a("div"),v(W8.$$.fragment),egr=l(),L2e=a("p"),ogr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rgr=l(),Hd=a("p"),tgr=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),agr=o("not"),ngr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),sgr=o("from_pretrained()"),lgr=o(" to load the model weights."),igr=l(),v(rE.$$.fragment),dgr=l(),Lr=a("div"),v(H8.$$.fragment),cgr=l(),$2e=a("p"),mgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fgr=l(),on=a("p"),ggr=o("The model class to instantiate is selected based on the "),k2e=a("code"),hgr=o("model_type"),ugr=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),pgr=o("pretrained_model_name_or_path"),_gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),bgr=o("pretrained_model_name_or_path"),Fgr=o(":"),vgr=l(),Ud=a("ul"),tE=a("li"),B2e=a("strong"),Tgr=o("convnext"),Mgr=o(" \u2014 "),RQ=a("a"),Egr=o("TFConvNextForImageClassification"),Cgr=o(" (ConvNext model)"),wgr=l(),aE=a("li"),P2e=a("strong"),Agr=o("data2vec-vision"),ygr=o(" \u2014 "),BQ=a("a"),Lgr=o("TFData2VecVisionForImageClassification"),xgr=o(" (Data2VecVision model)"),$gr=l(),nE=a("li"),I2e=a("strong"),kgr=o("vit"),Sgr=o(" \u2014 "),PQ=a("a"),Rgr=o("TFViTForImageClassification"),Bgr=o(" (ViT model)"),Pgr=l(),v(sE.$$.fragment),XIe=l(),Jd=a("h2"),lE=a("a"),q2e=a("span"),v(U8.$$.fragment),Igr=l(),N2e=a("span"),qgr=o("TFAutoModelForMaskedLM"),zIe=l(),or=a("div"),v(J8.$$.fragment),Ngr=l(),Yd=a("p"),jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IQ=a("a"),Dgr=o("from_pretrained()"),Ggr=o(" class method or the "),qQ=a("a"),Ogr=o("from_config()"),Vgr=o(` class
method.`),Xgr=l(),Y8=a("p"),zgr=o("This class cannot be instantiated directly using "),j2e=a("code"),Qgr=o("__init__()"),Wgr=o(" (throws an error)."),Hgr=l(),xt=a("div"),v(K8.$$.fragment),Ugr=l(),D2e=a("p"),Jgr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ygr=l(),Kd=a("p"),Kgr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),Zgr=o("not"),ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),ohr=o("from_pretrained()"),rhr=o(" to load the model weights."),thr=l(),v(iE.$$.fragment),ahr=l(),xr=a("div"),v(Z8.$$.fragment),nhr=l(),O2e=a("p"),shr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lhr=l(),rn=a("p"),ihr=o("The model class to instantiate is selected based on the "),V2e=a("code"),dhr=o("model_type"),chr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),mhr=o("pretrained_model_name_or_path"),fhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(":"),uhr=l(),ie=a("ul"),dE=a("li"),Q2e=a("strong"),phr=o("albert"),_hr=o(" \u2014 "),jQ=a("a"),bhr=o("TFAlbertForMaskedLM"),Fhr=o(" (ALBERT model)"),vhr=l(),cE=a("li"),W2e=a("strong"),Thr=o("bert"),Mhr=o(" \u2014 "),DQ=a("a"),Ehr=o("TFBertForMaskedLM"),Chr=o(" (BERT model)"),whr=l(),mE=a("li"),H2e=a("strong"),Ahr=o("camembert"),yhr=o(" \u2014 "),GQ=a("a"),Lhr=o("TFCamembertForMaskedLM"),xhr=o(" (CamemBERT model)"),$hr=l(),fE=a("li"),U2e=a("strong"),khr=o("convbert"),Shr=o(" \u2014 "),OQ=a("a"),Rhr=o("TFConvBertForMaskedLM"),Bhr=o(" (ConvBERT model)"),Phr=l(),gE=a("li"),J2e=a("strong"),Ihr=o("deberta"),qhr=o(" \u2014 "),VQ=a("a"),Nhr=o("TFDebertaForMaskedLM"),jhr=o(" (DeBERTa model)"),Dhr=l(),hE=a("li"),Y2e=a("strong"),Ghr=o("deberta-v2"),Ohr=o(" \u2014 "),XQ=a("a"),Vhr=o("TFDebertaV2ForMaskedLM"),Xhr=o(" (DeBERTa-v2 model)"),zhr=l(),uE=a("li"),K2e=a("strong"),Qhr=o("distilbert"),Whr=o(" \u2014 "),zQ=a("a"),Hhr=o("TFDistilBertForMaskedLM"),Uhr=o(" (DistilBERT model)"),Jhr=l(),pE=a("li"),Z2e=a("strong"),Yhr=o("electra"),Khr=o(" \u2014 "),QQ=a("a"),Zhr=o("TFElectraForMaskedLM"),eur=o(" (ELECTRA model)"),our=l(),_E=a("li"),eFe=a("strong"),rur=o("flaubert"),tur=o(" \u2014 "),WQ=a("a"),aur=o("TFFlaubertWithLMHeadModel"),nur=o(" (FlauBERT model)"),sur=l(),bE=a("li"),oFe=a("strong"),lur=o("funnel"),iur=o(" \u2014 "),HQ=a("a"),dur=o("TFFunnelForMaskedLM"),cur=o(" (Funnel Transformer model)"),mur=l(),FE=a("li"),rFe=a("strong"),fur=o("layoutlm"),gur=o(" \u2014 "),UQ=a("a"),hur=o("TFLayoutLMForMaskedLM"),uur=o(" (LayoutLM model)"),pur=l(),vE=a("li"),tFe=a("strong"),_ur=o("longformer"),bur=o(" \u2014 "),JQ=a("a"),Fur=o("TFLongformerForMaskedLM"),vur=o(" (Longformer model)"),Tur=l(),TE=a("li"),aFe=a("strong"),Mur=o("mobilebert"),Eur=o(" \u2014 "),YQ=a("a"),Cur=o("TFMobileBertForMaskedLM"),wur=o(" (MobileBERT model)"),Aur=l(),ME=a("li"),nFe=a("strong"),yur=o("mpnet"),Lur=o(" \u2014 "),KQ=a("a"),xur=o("TFMPNetForMaskedLM"),$ur=o(" (MPNet model)"),kur=l(),EE=a("li"),sFe=a("strong"),Sur=o("rembert"),Rur=o(" \u2014 "),ZQ=a("a"),Bur=o("TFRemBertForMaskedLM"),Pur=o(" (RemBERT model)"),Iur=l(),CE=a("li"),lFe=a("strong"),qur=o("roberta"),Nur=o(" \u2014 "),eW=a("a"),jur=o("TFRobertaForMaskedLM"),Dur=o(" (RoBERTa model)"),Gur=l(),wE=a("li"),iFe=a("strong"),Our=o("roformer"),Vur=o(" \u2014 "),oW=a("a"),Xur=o("TFRoFormerForMaskedLM"),zur=o(" (RoFormer model)"),Qur=l(),AE=a("li"),dFe=a("strong"),Wur=o("tapas"),Hur=o(" \u2014 "),rW=a("a"),Uur=o("TFTapasForMaskedLM"),Jur=o(" (TAPAS model)"),Yur=l(),yE=a("li"),cFe=a("strong"),Kur=o("xlm"),Zur=o(" \u2014 "),tW=a("a"),epr=o("TFXLMWithLMHeadModel"),opr=o(" (XLM model)"),rpr=l(),LE=a("li"),mFe=a("strong"),tpr=o("xlm-roberta"),apr=o(" \u2014 "),aW=a("a"),npr=o("TFXLMRobertaForMaskedLM"),spr=o(" (XLM-RoBERTa model)"),lpr=l(),v(xE.$$.fragment),QIe=l(),Zd=a("h2"),$E=a("a"),fFe=a("span"),v(ex.$$.fragment),ipr=l(),gFe=a("span"),dpr=o("TFAutoModelForSeq2SeqLM"),WIe=l(),rr=a("div"),v(ox.$$.fragment),cpr=l(),ec=a("p"),mpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nW=a("a"),fpr=o("from_pretrained()"),gpr=o(" class method or the "),sW=a("a"),hpr=o("from_config()"),upr=o(` class
method.`),ppr=l(),rx=a("p"),_pr=o("This class cannot be instantiated directly using "),hFe=a("code"),bpr=o("__init__()"),Fpr=o(" (throws an error)."),vpr=l(),$t=a("div"),v(tx.$$.fragment),Tpr=l(),uFe=a("p"),Mpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Epr=l(),oc=a("p"),Cpr=o(`Note:
Loading a model from its configuration file does `),pFe=a("strong"),wpr=o("not"),Apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),ypr=o("from_pretrained()"),Lpr=o(" to load the model weights."),xpr=l(),v(kE.$$.fragment),$pr=l(),$r=a("div"),v(ax.$$.fragment),kpr=l(),_Fe=a("p"),Spr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rpr=l(),tn=a("p"),Bpr=o("The model class to instantiate is selected based on the "),bFe=a("code"),Ppr=o("model_type"),Ipr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),qpr=o("pretrained_model_name_or_path"),Npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),jpr=o("pretrained_model_name_or_path"),Dpr=o(":"),Gpr=l(),ye=a("ul"),SE=a("li"),TFe=a("strong"),Opr=o("bart"),Vpr=o(" \u2014 "),iW=a("a"),Xpr=o("TFBartForConditionalGeneration"),zpr=o(" (BART model)"),Qpr=l(),RE=a("li"),MFe=a("strong"),Wpr=o("blenderbot"),Hpr=o(" \u2014 "),dW=a("a"),Upr=o("TFBlenderbotForConditionalGeneration"),Jpr=o(" (Blenderbot model)"),Ypr=l(),BE=a("li"),EFe=a("strong"),Kpr=o("blenderbot-small"),Zpr=o(" \u2014 "),cW=a("a"),e_r=o("TFBlenderbotSmallForConditionalGeneration"),o_r=o(" (BlenderbotSmall model)"),r_r=l(),PE=a("li"),CFe=a("strong"),t_r=o("encoder-decoder"),a_r=o(" \u2014 "),mW=a("a"),n_r=o("TFEncoderDecoderModel"),s_r=o(" (Encoder decoder model)"),l_r=l(),IE=a("li"),wFe=a("strong"),i_r=o("led"),d_r=o(" \u2014 "),fW=a("a"),c_r=o("TFLEDForConditionalGeneration"),m_r=o(" (LED model)"),f_r=l(),qE=a("li"),AFe=a("strong"),g_r=o("marian"),h_r=o(" \u2014 "),gW=a("a"),u_r=o("TFMarianMTModel"),p_r=o(" (Marian model)"),__r=l(),NE=a("li"),yFe=a("strong"),b_r=o("mbart"),F_r=o(" \u2014 "),hW=a("a"),v_r=o("TFMBartForConditionalGeneration"),T_r=o(" (mBART model)"),M_r=l(),jE=a("li"),LFe=a("strong"),E_r=o("mt5"),C_r=o(" \u2014 "),uW=a("a"),w_r=o("TFMT5ForConditionalGeneration"),A_r=o(" (mT5 model)"),y_r=l(),DE=a("li"),xFe=a("strong"),L_r=o("pegasus"),x_r=o(" \u2014 "),pW=a("a"),$_r=o("TFPegasusForConditionalGeneration"),k_r=o(" (Pegasus model)"),S_r=l(),GE=a("li"),$Fe=a("strong"),R_r=o("t5"),B_r=o(" \u2014 "),_W=a("a"),P_r=o("TFT5ForConditionalGeneration"),I_r=o(" (T5 model)"),q_r=l(),v(OE.$$.fragment),HIe=l(),rc=a("h2"),VE=a("a"),kFe=a("span"),v(nx.$$.fragment),N_r=l(),SFe=a("span"),j_r=o("TFAutoModelForSequenceClassification"),UIe=l(),tr=a("div"),v(sx.$$.fragment),D_r=l(),tc=a("p"),G_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bW=a("a"),O_r=o("from_pretrained()"),V_r=o(" class method or the "),FW=a("a"),X_r=o("from_config()"),z_r=o(` class
method.`),Q_r=l(),lx=a("p"),W_r=o("This class cannot be instantiated directly using "),RFe=a("code"),H_r=o("__init__()"),U_r=o(" (throws an error)."),J_r=l(),kt=a("div"),v(ix.$$.fragment),Y_r=l(),BFe=a("p"),K_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z_r=l(),ac=a("p"),ebr=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),obr=o("not"),rbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),tbr=o("from_pretrained()"),abr=o(" to load the model weights."),nbr=l(),v(XE.$$.fragment),sbr=l(),kr=a("div"),v(dx.$$.fragment),lbr=l(),IFe=a("p"),ibr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dbr=l(),an=a("p"),cbr=o("The model class to instantiate is selected based on the "),qFe=a("code"),mbr=o("model_type"),fbr=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),gbr=o("pretrained_model_name_or_path"),hbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),ubr=o("pretrained_model_name_or_path"),pbr=o(":"),_br=l(),Z=a("ul"),zE=a("li"),DFe=a("strong"),bbr=o("albert"),Fbr=o(" \u2014 "),TW=a("a"),vbr=o("TFAlbertForSequenceClassification"),Tbr=o(" (ALBERT model)"),Mbr=l(),QE=a("li"),GFe=a("strong"),Ebr=o("bert"),Cbr=o(" \u2014 "),MW=a("a"),wbr=o("TFBertForSequenceClassification"),Abr=o(" (BERT model)"),ybr=l(),WE=a("li"),OFe=a("strong"),Lbr=o("camembert"),xbr=o(" \u2014 "),EW=a("a"),$br=o("TFCamembertForSequenceClassification"),kbr=o(" (CamemBERT model)"),Sbr=l(),HE=a("li"),VFe=a("strong"),Rbr=o("convbert"),Bbr=o(" \u2014 "),CW=a("a"),Pbr=o("TFConvBertForSequenceClassification"),Ibr=o(" (ConvBERT model)"),qbr=l(),UE=a("li"),XFe=a("strong"),Nbr=o("ctrl"),jbr=o(" \u2014 "),wW=a("a"),Dbr=o("TFCTRLForSequenceClassification"),Gbr=o(" (CTRL model)"),Obr=l(),JE=a("li"),zFe=a("strong"),Vbr=o("deberta"),Xbr=o(" \u2014 "),AW=a("a"),zbr=o("TFDebertaForSequenceClassification"),Qbr=o(" (DeBERTa model)"),Wbr=l(),YE=a("li"),QFe=a("strong"),Hbr=o("deberta-v2"),Ubr=o(" \u2014 "),yW=a("a"),Jbr=o("TFDebertaV2ForSequenceClassification"),Ybr=o(" (DeBERTa-v2 model)"),Kbr=l(),KE=a("li"),WFe=a("strong"),Zbr=o("distilbert"),e2r=o(" \u2014 "),LW=a("a"),o2r=o("TFDistilBertForSequenceClassification"),r2r=o(" (DistilBERT model)"),t2r=l(),ZE=a("li"),HFe=a("strong"),a2r=o("electra"),n2r=o(" \u2014 "),xW=a("a"),s2r=o("TFElectraForSequenceClassification"),l2r=o(" (ELECTRA model)"),i2r=l(),e5=a("li"),UFe=a("strong"),d2r=o("flaubert"),c2r=o(" \u2014 "),$W=a("a"),m2r=o("TFFlaubertForSequenceClassification"),f2r=o(" (FlauBERT model)"),g2r=l(),o5=a("li"),JFe=a("strong"),h2r=o("funnel"),u2r=o(" \u2014 "),kW=a("a"),p2r=o("TFFunnelForSequenceClassification"),_2r=o(" (Funnel Transformer model)"),b2r=l(),r5=a("li"),YFe=a("strong"),F2r=o("gpt2"),v2r=o(" \u2014 "),SW=a("a"),T2r=o("TFGPT2ForSequenceClassification"),M2r=o(" (OpenAI GPT-2 model)"),E2r=l(),t5=a("li"),KFe=a("strong"),C2r=o("gptj"),w2r=o(" \u2014 "),RW=a("a"),A2r=o("TFGPTJForSequenceClassification"),y2r=o(" (GPT-J model)"),L2r=l(),a5=a("li"),ZFe=a("strong"),x2r=o("layoutlm"),$2r=o(" \u2014 "),BW=a("a"),k2r=o("TFLayoutLMForSequenceClassification"),S2r=o(" (LayoutLM model)"),R2r=l(),n5=a("li"),eve=a("strong"),B2r=o("longformer"),P2r=o(" \u2014 "),PW=a("a"),I2r=o("TFLongformerForSequenceClassification"),q2r=o(" (Longformer model)"),N2r=l(),s5=a("li"),ove=a("strong"),j2r=o("mobilebert"),D2r=o(" \u2014 "),IW=a("a"),G2r=o("TFMobileBertForSequenceClassification"),O2r=o(" (MobileBERT model)"),V2r=l(),l5=a("li"),rve=a("strong"),X2r=o("mpnet"),z2r=o(" \u2014 "),qW=a("a"),Q2r=o("TFMPNetForSequenceClassification"),W2r=o(" (MPNet model)"),H2r=l(),i5=a("li"),tve=a("strong"),U2r=o("openai-gpt"),J2r=o(" \u2014 "),NW=a("a"),Y2r=o("TFOpenAIGPTForSequenceClassification"),K2r=o(" (OpenAI GPT model)"),Z2r=l(),d5=a("li"),ave=a("strong"),eFr=o("rembert"),oFr=o(" \u2014 "),jW=a("a"),rFr=o("TFRemBertForSequenceClassification"),tFr=o(" (RemBERT model)"),aFr=l(),c5=a("li"),nve=a("strong"),nFr=o("roberta"),sFr=o(" \u2014 "),DW=a("a"),lFr=o("TFRobertaForSequenceClassification"),iFr=o(" (RoBERTa model)"),dFr=l(),m5=a("li"),sve=a("strong"),cFr=o("roformer"),mFr=o(" \u2014 "),GW=a("a"),fFr=o("TFRoFormerForSequenceClassification"),gFr=o(" (RoFormer model)"),hFr=l(),f5=a("li"),lve=a("strong"),uFr=o("tapas"),pFr=o(" \u2014 "),OW=a("a"),_Fr=o("TFTapasForSequenceClassification"),bFr=o(" (TAPAS model)"),FFr=l(),g5=a("li"),ive=a("strong"),vFr=o("transfo-xl"),TFr=o(" \u2014 "),VW=a("a"),MFr=o("TFTransfoXLForSequenceClassification"),EFr=o(" (Transformer-XL model)"),CFr=l(),h5=a("li"),dve=a("strong"),wFr=o("xlm"),AFr=o(" \u2014 "),XW=a("a"),yFr=o("TFXLMForSequenceClassification"),LFr=o(" (XLM model)"),xFr=l(),u5=a("li"),cve=a("strong"),$Fr=o("xlm-roberta"),kFr=o(" \u2014 "),zW=a("a"),SFr=o("TFXLMRobertaForSequenceClassification"),RFr=o(" (XLM-RoBERTa model)"),BFr=l(),p5=a("li"),mve=a("strong"),PFr=o("xlnet"),IFr=o(" \u2014 "),QW=a("a"),qFr=o("TFXLNetForSequenceClassification"),NFr=o(" (XLNet model)"),jFr=l(),v(_5.$$.fragment),JIe=l(),nc=a("h2"),b5=a("a"),fve=a("span"),v(cx.$$.fragment),DFr=l(),gve=a("span"),GFr=o("TFAutoModelForMultipleChoice"),YIe=l(),ar=a("div"),v(mx.$$.fragment),OFr=l(),sc=a("p"),VFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WW=a("a"),XFr=o("from_pretrained()"),zFr=o(" class method or the "),HW=a("a"),QFr=o("from_config()"),WFr=o(` class
method.`),HFr=l(),fx=a("p"),UFr=o("This class cannot be instantiated directly using "),hve=a("code"),JFr=o("__init__()"),YFr=o(" (throws an error)."),KFr=l(),St=a("div"),v(gx.$$.fragment),ZFr=l(),uve=a("p"),evr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ovr=l(),lc=a("p"),rvr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),tvr=o("not"),avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),nvr=o("from_pretrained()"),svr=o(" to load the model weights."),lvr=l(),v(F5.$$.fragment),ivr=l(),Sr=a("div"),v(hx.$$.fragment),dvr=l(),_ve=a("p"),cvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mvr=l(),nn=a("p"),fvr=o("The model class to instantiate is selected based on the "),bve=a("code"),gvr=o("model_type"),hvr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),uvr=o("pretrained_model_name_or_path"),pvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),_vr=o("pretrained_model_name_or_path"),bvr=o(":"),Fvr=l(),he=a("ul"),v5=a("li"),Tve=a("strong"),vvr=o("albert"),Tvr=o(" \u2014 "),JW=a("a"),Mvr=o("TFAlbertForMultipleChoice"),Evr=o(" (ALBERT model)"),Cvr=l(),T5=a("li"),Mve=a("strong"),wvr=o("bert"),Avr=o(" \u2014 "),YW=a("a"),yvr=o("TFBertForMultipleChoice"),Lvr=o(" (BERT model)"),xvr=l(),M5=a("li"),Eve=a("strong"),$vr=o("camembert"),kvr=o(" \u2014 "),KW=a("a"),Svr=o("TFCamembertForMultipleChoice"),Rvr=o(" (CamemBERT model)"),Bvr=l(),E5=a("li"),Cve=a("strong"),Pvr=o("convbert"),Ivr=o(" \u2014 "),ZW=a("a"),qvr=o("TFConvBertForMultipleChoice"),Nvr=o(" (ConvBERT model)"),jvr=l(),C5=a("li"),wve=a("strong"),Dvr=o("distilbert"),Gvr=o(" \u2014 "),eH=a("a"),Ovr=o("TFDistilBertForMultipleChoice"),Vvr=o(" (DistilBERT model)"),Xvr=l(),w5=a("li"),Ave=a("strong"),zvr=o("electra"),Qvr=o(" \u2014 "),oH=a("a"),Wvr=o("TFElectraForMultipleChoice"),Hvr=o(" (ELECTRA model)"),Uvr=l(),A5=a("li"),yve=a("strong"),Jvr=o("flaubert"),Yvr=o(" \u2014 "),rH=a("a"),Kvr=o("TFFlaubertForMultipleChoice"),Zvr=o(" (FlauBERT model)"),e1r=l(),y5=a("li"),Lve=a("strong"),o1r=o("funnel"),r1r=o(" \u2014 "),tH=a("a"),t1r=o("TFFunnelForMultipleChoice"),a1r=o(" (Funnel Transformer model)"),n1r=l(),L5=a("li"),xve=a("strong"),s1r=o("longformer"),l1r=o(" \u2014 "),aH=a("a"),i1r=o("TFLongformerForMultipleChoice"),d1r=o(" (Longformer model)"),c1r=l(),x5=a("li"),$ve=a("strong"),m1r=o("mobilebert"),f1r=o(" \u2014 "),nH=a("a"),g1r=o("TFMobileBertForMultipleChoice"),h1r=o(" (MobileBERT model)"),u1r=l(),$5=a("li"),kve=a("strong"),p1r=o("mpnet"),_1r=o(" \u2014 "),sH=a("a"),b1r=o("TFMPNetForMultipleChoice"),F1r=o(" (MPNet model)"),v1r=l(),k5=a("li"),Sve=a("strong"),T1r=o("rembert"),M1r=o(" \u2014 "),lH=a("a"),E1r=o("TFRemBertForMultipleChoice"),C1r=o(" (RemBERT model)"),w1r=l(),S5=a("li"),Rve=a("strong"),A1r=o("roberta"),y1r=o(" \u2014 "),iH=a("a"),L1r=o("TFRobertaForMultipleChoice"),x1r=o(" (RoBERTa model)"),$1r=l(),R5=a("li"),Bve=a("strong"),k1r=o("roformer"),S1r=o(" \u2014 "),dH=a("a"),R1r=o("TFRoFormerForMultipleChoice"),B1r=o(" (RoFormer model)"),P1r=l(),B5=a("li"),Pve=a("strong"),I1r=o("xlm"),q1r=o(" \u2014 "),cH=a("a"),N1r=o("TFXLMForMultipleChoice"),j1r=o(" (XLM model)"),D1r=l(),P5=a("li"),Ive=a("strong"),G1r=o("xlm-roberta"),O1r=o(" \u2014 "),mH=a("a"),V1r=o("TFXLMRobertaForMultipleChoice"),X1r=o(" (XLM-RoBERTa model)"),z1r=l(),I5=a("li"),qve=a("strong"),Q1r=o("xlnet"),W1r=o(" \u2014 "),fH=a("a"),H1r=o("TFXLNetForMultipleChoice"),U1r=o(" (XLNet model)"),J1r=l(),v(q5.$$.fragment),KIe=l(),ic=a("h2"),N5=a("a"),Nve=a("span"),v(ux.$$.fragment),Y1r=l(),jve=a("span"),K1r=o("TFAutoModelForNextSentencePrediction"),ZIe=l(),nr=a("div"),v(px.$$.fragment),Z1r=l(),dc=a("p"),eTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gH=a("a"),oTr=o("from_pretrained()"),rTr=o(" class method or the "),hH=a("a"),tTr=o("from_config()"),aTr=o(` class
method.`),nTr=l(),_x=a("p"),sTr=o("This class cannot be instantiated directly using "),Dve=a("code"),lTr=o("__init__()"),iTr=o(" (throws an error)."),dTr=l(),Rt=a("div"),v(bx.$$.fragment),cTr=l(),Gve=a("p"),mTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fTr=l(),cc=a("p"),gTr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),hTr=o("not"),uTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),pTr=o("from_pretrained()"),_Tr=o(" to load the model weights."),bTr=l(),v(j5.$$.fragment),FTr=l(),Rr=a("div"),v(Fx.$$.fragment),vTr=l(),Vve=a("p"),TTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MTr=l(),sn=a("p"),ETr=o("The model class to instantiate is selected based on the "),Xve=a("code"),CTr=o("model_type"),wTr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),ATr=o("pretrained_model_name_or_path"),yTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),LTr=o("pretrained_model_name_or_path"),xTr=o(":"),$Tr=l(),vx=a("ul"),D5=a("li"),Wve=a("strong"),kTr=o("bert"),STr=o(" \u2014 "),pH=a("a"),RTr=o("TFBertForNextSentencePrediction"),BTr=o(" (BERT model)"),PTr=l(),G5=a("li"),Hve=a("strong"),ITr=o("mobilebert"),qTr=o(" \u2014 "),_H=a("a"),NTr=o("TFMobileBertForNextSentencePrediction"),jTr=o(" (MobileBERT model)"),DTr=l(),v(O5.$$.fragment),eqe=l(),mc=a("h2"),V5=a("a"),Uve=a("span"),v(Tx.$$.fragment),GTr=l(),Jve=a("span"),OTr=o("TFAutoModelForTableQuestionAnswering"),oqe=l(),sr=a("div"),v(Mx.$$.fragment),VTr=l(),fc=a("p"),XTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bH=a("a"),zTr=o("from_pretrained()"),QTr=o(" class method or the "),FH=a("a"),WTr=o("from_config()"),HTr=o(` class
method.`),UTr=l(),Ex=a("p"),JTr=o("This class cannot be instantiated directly using "),Yve=a("code"),YTr=o("__init__()"),KTr=o(" (throws an error)."),ZTr=l(),Bt=a("div"),v(Cx.$$.fragment),eMr=l(),Kve=a("p"),oMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rMr=l(),gc=a("p"),tMr=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),aMr=o("not"),nMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),sMr=o("from_pretrained()"),lMr=o(" to load the model weights."),iMr=l(),v(X5.$$.fragment),dMr=l(),Br=a("div"),v(wx.$$.fragment),cMr=l(),e1e=a("p"),mMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fMr=l(),ln=a("p"),gMr=o("The model class to instantiate is selected based on the "),o1e=a("code"),hMr=o("model_type"),uMr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),bMr=o("pretrained_model_name_or_path"),FMr=o(":"),vMr=l(),a1e=a("ul"),z5=a("li"),n1e=a("strong"),TMr=o("tapas"),MMr=o(" \u2014 "),TH=a("a"),EMr=o("TFTapasForQuestionAnswering"),CMr=o(" (TAPAS model)"),wMr=l(),v(Q5.$$.fragment),rqe=l(),hc=a("h2"),W5=a("a"),s1e=a("span"),v(Ax.$$.fragment),AMr=l(),l1e=a("span"),yMr=o("TFAutoModelForTokenClassification"),tqe=l(),lr=a("div"),v(yx.$$.fragment),LMr=l(),uc=a("p"),xMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MH=a("a"),$Mr=o("from_pretrained()"),kMr=o(" class method or the "),EH=a("a"),SMr=o("from_config()"),RMr=o(` class
method.`),BMr=l(),Lx=a("p"),PMr=o("This class cannot be instantiated directly using "),i1e=a("code"),IMr=o("__init__()"),qMr=o(" (throws an error)."),NMr=l(),Pt=a("div"),v(xx.$$.fragment),jMr=l(),d1e=a("p"),DMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GMr=l(),pc=a("p"),OMr=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),VMr=o("not"),XMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),zMr=o("from_pretrained()"),QMr=o(" to load the model weights."),WMr=l(),v(H5.$$.fragment),HMr=l(),Pr=a("div"),v($x.$$.fragment),UMr=l(),m1e=a("p"),JMr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YMr=l(),dn=a("p"),KMr=o("The model class to instantiate is selected based on the "),f1e=a("code"),ZMr=o("model_type"),e4r=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),o4r=o("pretrained_model_name_or_path"),r4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),t4r=o("pretrained_model_name_or_path"),a4r=o(":"),n4r=l(),de=a("ul"),U5=a("li"),u1e=a("strong"),s4r=o("albert"),l4r=o(" \u2014 "),wH=a("a"),i4r=o("TFAlbertForTokenClassification"),d4r=o(" (ALBERT model)"),c4r=l(),J5=a("li"),p1e=a("strong"),m4r=o("bert"),f4r=o(" \u2014 "),AH=a("a"),g4r=o("TFBertForTokenClassification"),h4r=o(" (BERT model)"),u4r=l(),Y5=a("li"),_1e=a("strong"),p4r=o("camembert"),_4r=o(" \u2014 "),yH=a("a"),b4r=o("TFCamembertForTokenClassification"),F4r=o(" (CamemBERT model)"),v4r=l(),K5=a("li"),b1e=a("strong"),T4r=o("convbert"),M4r=o(" \u2014 "),LH=a("a"),E4r=o("TFConvBertForTokenClassification"),C4r=o(" (ConvBERT model)"),w4r=l(),Z5=a("li"),F1e=a("strong"),A4r=o("deberta"),y4r=o(" \u2014 "),xH=a("a"),L4r=o("TFDebertaForTokenClassification"),x4r=o(" (DeBERTa model)"),$4r=l(),eC=a("li"),v1e=a("strong"),k4r=o("deberta-v2"),S4r=o(" \u2014 "),$H=a("a"),R4r=o("TFDebertaV2ForTokenClassification"),B4r=o(" (DeBERTa-v2 model)"),P4r=l(),oC=a("li"),T1e=a("strong"),I4r=o("distilbert"),q4r=o(" \u2014 "),kH=a("a"),N4r=o("TFDistilBertForTokenClassification"),j4r=o(" (DistilBERT model)"),D4r=l(),rC=a("li"),M1e=a("strong"),G4r=o("electra"),O4r=o(" \u2014 "),SH=a("a"),V4r=o("TFElectraForTokenClassification"),X4r=o(" (ELECTRA model)"),z4r=l(),tC=a("li"),E1e=a("strong"),Q4r=o("flaubert"),W4r=o(" \u2014 "),RH=a("a"),H4r=o("TFFlaubertForTokenClassification"),U4r=o(" (FlauBERT model)"),J4r=l(),aC=a("li"),C1e=a("strong"),Y4r=o("funnel"),K4r=o(" \u2014 "),BH=a("a"),Z4r=o("TFFunnelForTokenClassification"),eEr=o(" (Funnel Transformer model)"),oEr=l(),nC=a("li"),w1e=a("strong"),rEr=o("layoutlm"),tEr=o(" \u2014 "),PH=a("a"),aEr=o("TFLayoutLMForTokenClassification"),nEr=o(" (LayoutLM model)"),sEr=l(),sC=a("li"),A1e=a("strong"),lEr=o("longformer"),iEr=o(" \u2014 "),IH=a("a"),dEr=o("TFLongformerForTokenClassification"),cEr=o(" (Longformer model)"),mEr=l(),lC=a("li"),y1e=a("strong"),fEr=o("mobilebert"),gEr=o(" \u2014 "),qH=a("a"),hEr=o("TFMobileBertForTokenClassification"),uEr=o(" (MobileBERT model)"),pEr=l(),iC=a("li"),L1e=a("strong"),_Er=o("mpnet"),bEr=o(" \u2014 "),NH=a("a"),FEr=o("TFMPNetForTokenClassification"),vEr=o(" (MPNet model)"),TEr=l(),dC=a("li"),x1e=a("strong"),MEr=o("rembert"),EEr=o(" \u2014 "),jH=a("a"),CEr=o("TFRemBertForTokenClassification"),wEr=o(" (RemBERT model)"),AEr=l(),cC=a("li"),$1e=a("strong"),yEr=o("roberta"),LEr=o(" \u2014 "),DH=a("a"),xEr=o("TFRobertaForTokenClassification"),$Er=o(" (RoBERTa model)"),kEr=l(),mC=a("li"),k1e=a("strong"),SEr=o("roformer"),REr=o(" \u2014 "),GH=a("a"),BEr=o("TFRoFormerForTokenClassification"),PEr=o(" (RoFormer model)"),IEr=l(),fC=a("li"),S1e=a("strong"),qEr=o("xlm"),NEr=o(" \u2014 "),OH=a("a"),jEr=o("TFXLMForTokenClassification"),DEr=o(" (XLM model)"),GEr=l(),gC=a("li"),R1e=a("strong"),OEr=o("xlm-roberta"),VEr=o(" \u2014 "),VH=a("a"),XEr=o("TFXLMRobertaForTokenClassification"),zEr=o(" (XLM-RoBERTa model)"),QEr=l(),hC=a("li"),B1e=a("strong"),WEr=o("xlnet"),HEr=o(" \u2014 "),XH=a("a"),UEr=o("TFXLNetForTokenClassification"),JEr=o(" (XLNet model)"),YEr=l(),v(uC.$$.fragment),aqe=l(),_c=a("h2"),pC=a("a"),P1e=a("span"),v(kx.$$.fragment),KEr=l(),I1e=a("span"),ZEr=o("TFAutoModelForQuestionAnswering"),nqe=l(),ir=a("div"),v(Sx.$$.fragment),e5r=l(),bc=a("p"),o5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zH=a("a"),r5r=o("from_pretrained()"),t5r=o(" class method or the "),QH=a("a"),a5r=o("from_config()"),n5r=o(` class
method.`),s5r=l(),Rx=a("p"),l5r=o("This class cannot be instantiated directly using "),q1e=a("code"),i5r=o("__init__()"),d5r=o(" (throws an error)."),c5r=l(),It=a("div"),v(Bx.$$.fragment),m5r=l(),N1e=a("p"),f5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g5r=l(),Fc=a("p"),h5r=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),u5r=o("not"),p5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),_5r=o("from_pretrained()"),b5r=o(" to load the model weights."),F5r=l(),v(_C.$$.fragment),v5r=l(),Ir=a("div"),v(Px.$$.fragment),T5r=l(),D1e=a("p"),M5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E5r=l(),cn=a("p"),C5r=o("The model class to instantiate is selected based on the "),G1e=a("code"),w5r=o("model_type"),A5r=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),y5r=o("pretrained_model_name_or_path"),L5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),x5r=o("pretrained_model_name_or_path"),$5r=o(":"),k5r=l(),ce=a("ul"),bC=a("li"),X1e=a("strong"),S5r=o("albert"),R5r=o(" \u2014 "),HH=a("a"),B5r=o("TFAlbertForQuestionAnswering"),P5r=o(" (ALBERT model)"),I5r=l(),FC=a("li"),z1e=a("strong"),q5r=o("bert"),N5r=o(" \u2014 "),UH=a("a"),j5r=o("TFBertForQuestionAnswering"),D5r=o(" (BERT model)"),G5r=l(),vC=a("li"),Q1e=a("strong"),O5r=o("camembert"),V5r=o(" \u2014 "),JH=a("a"),X5r=o("TFCamembertForQuestionAnswering"),z5r=o(" (CamemBERT model)"),Q5r=l(),TC=a("li"),W1e=a("strong"),W5r=o("convbert"),H5r=o(" \u2014 "),YH=a("a"),U5r=o("TFConvBertForQuestionAnswering"),J5r=o(" (ConvBERT model)"),Y5r=l(),MC=a("li"),H1e=a("strong"),K5r=o("deberta"),Z5r=o(" \u2014 "),KH=a("a"),eCr=o("TFDebertaForQuestionAnswering"),oCr=o(" (DeBERTa model)"),rCr=l(),EC=a("li"),U1e=a("strong"),tCr=o("deberta-v2"),aCr=o(" \u2014 "),ZH=a("a"),nCr=o("TFDebertaV2ForQuestionAnswering"),sCr=o(" (DeBERTa-v2 model)"),lCr=l(),CC=a("li"),J1e=a("strong"),iCr=o("distilbert"),dCr=o(" \u2014 "),eU=a("a"),cCr=o("TFDistilBertForQuestionAnswering"),mCr=o(" (DistilBERT model)"),fCr=l(),wC=a("li"),Y1e=a("strong"),gCr=o("electra"),hCr=o(" \u2014 "),oU=a("a"),uCr=o("TFElectraForQuestionAnswering"),pCr=o(" (ELECTRA model)"),_Cr=l(),AC=a("li"),K1e=a("strong"),bCr=o("flaubert"),FCr=o(" \u2014 "),rU=a("a"),vCr=o("TFFlaubertForQuestionAnsweringSimple"),TCr=o(" (FlauBERT model)"),MCr=l(),yC=a("li"),Z1e=a("strong"),ECr=o("funnel"),CCr=o(" \u2014 "),tU=a("a"),wCr=o("TFFunnelForQuestionAnswering"),ACr=o(" (Funnel Transformer model)"),yCr=l(),LC=a("li"),eTe=a("strong"),LCr=o("gptj"),xCr=o(" \u2014 "),aU=a("a"),$Cr=o("TFGPTJForQuestionAnswering"),kCr=o(" (GPT-J model)"),SCr=l(),xC=a("li"),oTe=a("strong"),RCr=o("longformer"),BCr=o(" \u2014 "),nU=a("a"),PCr=o("TFLongformerForQuestionAnswering"),ICr=o(" (Longformer model)"),qCr=l(),$C=a("li"),rTe=a("strong"),NCr=o("mobilebert"),jCr=o(" \u2014 "),sU=a("a"),DCr=o("TFMobileBertForQuestionAnswering"),GCr=o(" (MobileBERT model)"),OCr=l(),kC=a("li"),tTe=a("strong"),VCr=o("mpnet"),XCr=o(" \u2014 "),lU=a("a"),zCr=o("TFMPNetForQuestionAnswering"),QCr=o(" (MPNet model)"),WCr=l(),SC=a("li"),aTe=a("strong"),HCr=o("rembert"),UCr=o(" \u2014 "),iU=a("a"),JCr=o("TFRemBertForQuestionAnswering"),YCr=o(" (RemBERT model)"),KCr=l(),RC=a("li"),nTe=a("strong"),ZCr=o("roberta"),e3r=o(" \u2014 "),dU=a("a"),o3r=o("TFRobertaForQuestionAnswering"),r3r=o(" (RoBERTa model)"),t3r=l(),BC=a("li"),sTe=a("strong"),a3r=o("roformer"),n3r=o(" \u2014 "),cU=a("a"),s3r=o("TFRoFormerForQuestionAnswering"),l3r=o(" (RoFormer model)"),i3r=l(),PC=a("li"),lTe=a("strong"),d3r=o("xlm"),c3r=o(" \u2014 "),mU=a("a"),m3r=o("TFXLMForQuestionAnsweringSimple"),f3r=o(" (XLM model)"),g3r=l(),IC=a("li"),iTe=a("strong"),h3r=o("xlm-roberta"),u3r=o(" \u2014 "),fU=a("a"),p3r=o("TFXLMRobertaForQuestionAnswering"),_3r=o(" (XLM-RoBERTa model)"),b3r=l(),qC=a("li"),dTe=a("strong"),F3r=o("xlnet"),v3r=o(" \u2014 "),gU=a("a"),T3r=o("TFXLNetForQuestionAnsweringSimple"),M3r=o(" (XLNet model)"),E3r=l(),v(NC.$$.fragment),sqe=l(),vc=a("h2"),jC=a("a"),cTe=a("span"),v(Ix.$$.fragment),C3r=l(),mTe=a("span"),w3r=o("TFAutoModelForVision2Seq"),lqe=l(),dr=a("div"),v(qx.$$.fragment),A3r=l(),Tc=a("p"),y3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hU=a("a"),L3r=o("from_pretrained()"),x3r=o(" class method or the "),uU=a("a"),$3r=o("from_config()"),k3r=o(` class
method.`),S3r=l(),Nx=a("p"),R3r=o("This class cannot be instantiated directly using "),fTe=a("code"),B3r=o("__init__()"),P3r=o(" (throws an error)."),I3r=l(),qt=a("div"),v(jx.$$.fragment),q3r=l(),gTe=a("p"),N3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j3r=l(),Mc=a("p"),D3r=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),G3r=o("not"),O3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),V3r=o("from_pretrained()"),X3r=o(" to load the model weights."),z3r=l(),v(DC.$$.fragment),Q3r=l(),qr=a("div"),v(Dx.$$.fragment),W3r=l(),uTe=a("p"),H3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),U3r=l(),mn=a("p"),J3r=o("The model class to instantiate is selected based on the "),pTe=a("code"),Y3r=o("model_type"),K3r=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),Z3r=o("pretrained_model_name_or_path"),ewr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),owr=o("pretrained_model_name_or_path"),rwr=o(":"),twr=l(),FTe=a("ul"),GC=a("li"),vTe=a("strong"),awr=o("vision-encoder-decoder"),nwr=o(" \u2014 "),_U=a("a"),swr=o("TFVisionEncoderDecoderModel"),lwr=o(" (Vision Encoder decoder model)"),iwr=l(),v(OC.$$.fragment),iqe=l(),Ec=a("h2"),VC=a("a"),TTe=a("span"),v(Gx.$$.fragment),dwr=l(),MTe=a("span"),cwr=o("TFAutoModelForSpeechSeq2Seq"),dqe=l(),cr=a("div"),v(Ox.$$.fragment),mwr=l(),Cc=a("p"),fwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bU=a("a"),gwr=o("from_pretrained()"),hwr=o(" class method or the "),FU=a("a"),uwr=o("from_config()"),pwr=o(` class
method.`),_wr=l(),Vx=a("p"),bwr=o("This class cannot be instantiated directly using "),ETe=a("code"),Fwr=o("__init__()"),vwr=o(" (throws an error)."),Twr=l(),Nt=a("div"),v(Xx.$$.fragment),Mwr=l(),CTe=a("p"),Ewr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Cwr=l(),wc=a("p"),wwr=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),Awr=o("not"),ywr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),Lwr=o("from_pretrained()"),xwr=o(" to load the model weights."),$wr=l(),v(XC.$$.fragment),kwr=l(),Nr=a("div"),v(zx.$$.fragment),Swr=l(),ATe=a("p"),Rwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bwr=l(),fn=a("p"),Pwr=o("The model class to instantiate is selected based on the "),yTe=a("code"),Iwr=o("model_type"),qwr=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),Nwr=o("pretrained_model_name_or_path"),jwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),Dwr=o("pretrained_model_name_or_path"),Gwr=o(":"),Owr=l(),$Te=a("ul"),zC=a("li"),kTe=a("strong"),Vwr=o("speech_to_text"),Xwr=o(" \u2014 "),TU=a("a"),zwr=o("TFSpeech2TextForConditionalGeneration"),Qwr=o(" (Speech2Text model)"),Wwr=l(),v(QC.$$.fragment),cqe=l(),Ac=a("h2"),WC=a("a"),STe=a("span"),v(Qx.$$.fragment),Hwr=l(),RTe=a("span"),Uwr=o("FlaxAutoModel"),mqe=l(),mr=a("div"),v(Wx.$$.fragment),Jwr=l(),yc=a("p"),Ywr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MU=a("a"),Kwr=o("from_pretrained()"),Zwr=o(" class method or the "),EU=a("a"),eAr=o("from_config()"),oAr=o(` class
method.`),rAr=l(),Hx=a("p"),tAr=o("This class cannot be instantiated directly using "),BTe=a("code"),aAr=o("__init__()"),nAr=o(" (throws an error)."),sAr=l(),jt=a("div"),v(Ux.$$.fragment),lAr=l(),PTe=a("p"),iAr=o("Instantiates one of the base model classes of the library from a configuration."),dAr=l(),Lc=a("p"),cAr=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),mAr=o("not"),fAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),gAr=o("from_pretrained()"),hAr=o(" to load the model weights."),uAr=l(),v(HC.$$.fragment),pAr=l(),jr=a("div"),v(Jx.$$.fragment),_Ar=l(),qTe=a("p"),bAr=o("Instantiate one of the base model classes of the library from a pretrained model."),FAr=l(),gn=a("p"),vAr=o("The model class to instantiate is selected based on the "),NTe=a("code"),TAr=o("model_type"),MAr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),EAr=o("pretrained_model_name_or_path"),CAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),wAr=o("pretrained_model_name_or_path"),AAr=o(":"),yAr=l(),re=a("ul"),UC=a("li"),GTe=a("strong"),LAr=o("albert"),xAr=o(" \u2014 "),wU=a("a"),$Ar=o("FlaxAlbertModel"),kAr=o(" (ALBERT model)"),SAr=l(),JC=a("li"),OTe=a("strong"),RAr=o("bart"),BAr=o(" \u2014 "),AU=a("a"),PAr=o("FlaxBartModel"),IAr=o(" (BART model)"),qAr=l(),YC=a("li"),VTe=a("strong"),NAr=o("beit"),jAr=o(" \u2014 "),yU=a("a"),DAr=o("FlaxBeitModel"),GAr=o(" (BEiT model)"),OAr=l(),KC=a("li"),XTe=a("strong"),VAr=o("bert"),XAr=o(" \u2014 "),LU=a("a"),zAr=o("FlaxBertModel"),QAr=o(" (BERT model)"),WAr=l(),ZC=a("li"),zTe=a("strong"),HAr=o("big_bird"),UAr=o(" \u2014 "),xU=a("a"),JAr=o("FlaxBigBirdModel"),YAr=o(" (BigBird model)"),KAr=l(),e3=a("li"),QTe=a("strong"),ZAr=o("blenderbot"),e0r=o(" \u2014 "),$U=a("a"),o0r=o("FlaxBlenderbotModel"),r0r=o(" (Blenderbot model)"),t0r=l(),o3=a("li"),WTe=a("strong"),a0r=o("blenderbot-small"),n0r=o(" \u2014 "),kU=a("a"),s0r=o("FlaxBlenderbotSmallModel"),l0r=o(" (BlenderbotSmall model)"),i0r=l(),r3=a("li"),HTe=a("strong"),d0r=o("clip"),c0r=o(" \u2014 "),SU=a("a"),m0r=o("FlaxCLIPModel"),f0r=o(" (CLIP model)"),g0r=l(),t3=a("li"),UTe=a("strong"),h0r=o("distilbert"),u0r=o(" \u2014 "),RU=a("a"),p0r=o("FlaxDistilBertModel"),_0r=o(" (DistilBERT model)"),b0r=l(),a3=a("li"),JTe=a("strong"),F0r=o("electra"),v0r=o(" \u2014 "),BU=a("a"),T0r=o("FlaxElectraModel"),M0r=o(" (ELECTRA model)"),E0r=l(),n3=a("li"),YTe=a("strong"),C0r=o("gpt2"),w0r=o(" \u2014 "),PU=a("a"),A0r=o("FlaxGPT2Model"),y0r=o(" (OpenAI GPT-2 model)"),L0r=l(),s3=a("li"),KTe=a("strong"),x0r=o("gpt_neo"),$0r=o(" \u2014 "),IU=a("a"),k0r=o("FlaxGPTNeoModel"),S0r=o(" (GPT Neo model)"),R0r=l(),l3=a("li"),ZTe=a("strong"),B0r=o("gptj"),P0r=o(" \u2014 "),qU=a("a"),I0r=o("FlaxGPTJModel"),q0r=o(" (GPT-J model)"),N0r=l(),i3=a("li"),eMe=a("strong"),j0r=o("marian"),D0r=o(" \u2014 "),NU=a("a"),G0r=o("FlaxMarianModel"),O0r=o(" (Marian model)"),V0r=l(),d3=a("li"),oMe=a("strong"),X0r=o("mbart"),z0r=o(" \u2014 "),jU=a("a"),Q0r=o("FlaxMBartModel"),W0r=o(" (mBART model)"),H0r=l(),c3=a("li"),rMe=a("strong"),U0r=o("mt5"),J0r=o(" \u2014 "),DU=a("a"),Y0r=o("FlaxMT5Model"),K0r=o(" (mT5 model)"),Z0r=l(),m3=a("li"),tMe=a("strong"),e6r=o("pegasus"),o6r=o(" \u2014 "),GU=a("a"),r6r=o("FlaxPegasusModel"),t6r=o(" (Pegasus model)"),a6r=l(),f3=a("li"),aMe=a("strong"),n6r=o("roberta"),s6r=o(" \u2014 "),OU=a("a"),l6r=o("FlaxRobertaModel"),i6r=o(" (RoBERTa model)"),d6r=l(),g3=a("li"),nMe=a("strong"),c6r=o("roformer"),m6r=o(" \u2014 "),VU=a("a"),f6r=o("FlaxRoFormerModel"),g6r=o(" (RoFormer model)"),h6r=l(),h3=a("li"),sMe=a("strong"),u6r=o("t5"),p6r=o(" \u2014 "),XU=a("a"),_6r=o("FlaxT5Model"),b6r=o(" (T5 model)"),F6r=l(),u3=a("li"),lMe=a("strong"),v6r=o("vision-text-dual-encoder"),T6r=o(" \u2014 "),zU=a("a"),M6r=o("FlaxVisionTextDualEncoderModel"),E6r=o(" (VisionTextDualEncoder model)"),C6r=l(),p3=a("li"),iMe=a("strong"),w6r=o("vit"),A6r=o(" \u2014 "),QU=a("a"),y6r=o("FlaxViTModel"),L6r=o(" (ViT model)"),x6r=l(),_3=a("li"),dMe=a("strong"),$6r=o("wav2vec2"),k6r=o(" \u2014 "),WU=a("a"),S6r=o("FlaxWav2Vec2Model"),R6r=o(" (Wav2Vec2 model)"),B6r=l(),b3=a("li"),cMe=a("strong"),P6r=o("xglm"),I6r=o(" \u2014 "),HU=a("a"),q6r=o("FlaxXGLMModel"),N6r=o(" (XGLM model)"),j6r=l(),F3=a("li"),mMe=a("strong"),D6r=o("xlm-roberta"),G6r=o(" \u2014 "),UU=a("a"),O6r=o("FlaxXLMRobertaModel"),V6r=o(" (XLM-RoBERTa model)"),X6r=l(),v(v3.$$.fragment),fqe=l(),xc=a("h2"),T3=a("a"),fMe=a("span"),v(Yx.$$.fragment),z6r=l(),gMe=a("span"),Q6r=o("FlaxAutoModelForCausalLM"),gqe=l(),fr=a("div"),v(Kx.$$.fragment),W6r=l(),$c=a("p"),H6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JU=a("a"),U6r=o("from_pretrained()"),J6r=o(" class method or the "),YU=a("a"),Y6r=o("from_config()"),K6r=o(` class
method.`),Z6r=l(),Zx=a("p"),eyr=o("This class cannot be instantiated directly using "),hMe=a("code"),oyr=o("__init__()"),ryr=o(" (throws an error)."),tyr=l(),Dt=a("div"),v(e7.$$.fragment),ayr=l(),uMe=a("p"),nyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),syr=l(),kc=a("p"),lyr=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),iyr=o("not"),dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),cyr=o("from_pretrained()"),myr=o(" to load the model weights."),fyr=l(),v(M3.$$.fragment),gyr=l(),Dr=a("div"),v(o7.$$.fragment),hyr=l(),_Me=a("p"),uyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pyr=l(),hn=a("p"),_yr=o("The model class to instantiate is selected based on the "),bMe=a("code"),byr=o("model_type"),Fyr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),vyr=o("pretrained_model_name_or_path"),Tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(":"),Cyr=l(),ke=a("ul"),E3=a("li"),TMe=a("strong"),wyr=o("bart"),Ayr=o(" \u2014 "),ZU=a("a"),yyr=o("FlaxBartForCausalLM"),Lyr=o(" (BART model)"),xyr=l(),C3=a("li"),MMe=a("strong"),$yr=o("bert"),kyr=o(" \u2014 "),eJ=a("a"),Syr=o("FlaxBertForCausalLM"),Ryr=o(" (BERT model)"),Byr=l(),w3=a("li"),EMe=a("strong"),Pyr=o("big_bird"),Iyr=o(" \u2014 "),oJ=a("a"),qyr=o("FlaxBigBirdForCausalLM"),Nyr=o(" (BigBird model)"),jyr=l(),A3=a("li"),CMe=a("strong"),Dyr=o("electra"),Gyr=o(" \u2014 "),rJ=a("a"),Oyr=o("FlaxElectraForCausalLM"),Vyr=o(" (ELECTRA model)"),Xyr=l(),y3=a("li"),wMe=a("strong"),zyr=o("gpt2"),Qyr=o(" \u2014 "),tJ=a("a"),Wyr=o("FlaxGPT2LMHeadModel"),Hyr=o(" (OpenAI GPT-2 model)"),Uyr=l(),L3=a("li"),AMe=a("strong"),Jyr=o("gpt_neo"),Yyr=o(" \u2014 "),aJ=a("a"),Kyr=o("FlaxGPTNeoForCausalLM"),Zyr=o(" (GPT Neo model)"),eLr=l(),x3=a("li"),yMe=a("strong"),oLr=o("gptj"),rLr=o(" \u2014 "),nJ=a("a"),tLr=o("FlaxGPTJForCausalLM"),aLr=o(" (GPT-J model)"),nLr=l(),$3=a("li"),LMe=a("strong"),sLr=o("roberta"),lLr=o(" \u2014 "),sJ=a("a"),iLr=o("FlaxRobertaForCausalLM"),dLr=o(" (RoBERTa model)"),cLr=l(),k3=a("li"),xMe=a("strong"),mLr=o("xglm"),fLr=o(" \u2014 "),lJ=a("a"),gLr=o("FlaxXGLMForCausalLM"),hLr=o(" (XGLM model)"),uLr=l(),v(S3.$$.fragment),hqe=l(),Sc=a("h2"),R3=a("a"),$Me=a("span"),v(r7.$$.fragment),pLr=l(),kMe=a("span"),_Lr=o("FlaxAutoModelForPreTraining"),uqe=l(),gr=a("div"),v(t7.$$.fragment),bLr=l(),Rc=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iJ=a("a"),vLr=o("from_pretrained()"),TLr=o(" class method or the "),dJ=a("a"),MLr=o("from_config()"),ELr=o(` class
method.`),CLr=l(),a7=a("p"),wLr=o("This class cannot be instantiated directly using "),SMe=a("code"),ALr=o("__init__()"),yLr=o(" (throws an error)."),LLr=l(),Gt=a("div"),v(n7.$$.fragment),xLr=l(),RMe=a("p"),$Lr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kLr=l(),Bc=a("p"),SLr=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),RLr=o("not"),BLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),PLr=o("from_pretrained()"),ILr=o(" to load the model weights."),qLr=l(),v(B3.$$.fragment),NLr=l(),Gr=a("div"),v(s7.$$.fragment),jLr=l(),PMe=a("p"),DLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GLr=l(),un=a("p"),OLr=o("The model class to instantiate is selected based on the "),IMe=a("code"),VLr=o("model_type"),XLr=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),zLr=o("pretrained_model_name_or_path"),QLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),WLr=o("pretrained_model_name_or_path"),HLr=o(":"),ULr=l(),Me=a("ul"),P3=a("li"),jMe=a("strong"),JLr=o("albert"),YLr=o(" \u2014 "),mJ=a("a"),KLr=o("FlaxAlbertForPreTraining"),ZLr=o(" (ALBERT model)"),e8r=l(),I3=a("li"),DMe=a("strong"),o8r=o("bart"),r8r=o(" \u2014 "),fJ=a("a"),t8r=o("FlaxBartForConditionalGeneration"),a8r=o(" (BART model)"),n8r=l(),q3=a("li"),GMe=a("strong"),s8r=o("bert"),l8r=o(" \u2014 "),gJ=a("a"),i8r=o("FlaxBertForPreTraining"),d8r=o(" (BERT model)"),c8r=l(),N3=a("li"),OMe=a("strong"),m8r=o("big_bird"),f8r=o(" \u2014 "),hJ=a("a"),g8r=o("FlaxBigBirdForPreTraining"),h8r=o(" (BigBird model)"),u8r=l(),j3=a("li"),VMe=a("strong"),p8r=o("electra"),_8r=o(" \u2014 "),uJ=a("a"),b8r=o("FlaxElectraForPreTraining"),F8r=o(" (ELECTRA model)"),v8r=l(),D3=a("li"),XMe=a("strong"),T8r=o("mbart"),M8r=o(" \u2014 "),pJ=a("a"),E8r=o("FlaxMBartForConditionalGeneration"),C8r=o(" (mBART model)"),w8r=l(),G3=a("li"),zMe=a("strong"),A8r=o("mt5"),y8r=o(" \u2014 "),_J=a("a"),L8r=o("FlaxMT5ForConditionalGeneration"),x8r=o(" (mT5 model)"),$8r=l(),O3=a("li"),QMe=a("strong"),k8r=o("roberta"),S8r=o(" \u2014 "),bJ=a("a"),R8r=o("FlaxRobertaForMaskedLM"),B8r=o(" (RoBERTa model)"),P8r=l(),V3=a("li"),WMe=a("strong"),I8r=o("roformer"),q8r=o(" \u2014 "),FJ=a("a"),N8r=o("FlaxRoFormerForMaskedLM"),j8r=o(" (RoFormer model)"),D8r=l(),X3=a("li"),HMe=a("strong"),G8r=o("t5"),O8r=o(" \u2014 "),vJ=a("a"),V8r=o("FlaxT5ForConditionalGeneration"),X8r=o(" (T5 model)"),z8r=l(),z3=a("li"),UMe=a("strong"),Q8r=o("wav2vec2"),W8r=o(" \u2014 "),TJ=a("a"),H8r=o("FlaxWav2Vec2ForPreTraining"),U8r=o(" (Wav2Vec2 model)"),J8r=l(),Q3=a("li"),JMe=a("strong"),Y8r=o("xlm-roberta"),K8r=o(" \u2014 "),MJ=a("a"),Z8r=o("FlaxXLMRobertaForMaskedLM"),exr=o(" (XLM-RoBERTa model)"),oxr=l(),v(W3.$$.fragment),pqe=l(),Pc=a("h2"),H3=a("a"),YMe=a("span"),v(l7.$$.fragment),rxr=l(),KMe=a("span"),txr=o("FlaxAutoModelForMaskedLM"),_qe=l(),hr=a("div"),v(i7.$$.fragment),axr=l(),Ic=a("p"),nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EJ=a("a"),sxr=o("from_pretrained()"),lxr=o(" class method or the "),CJ=a("a"),ixr=o("from_config()"),dxr=o(` class
method.`),cxr=l(),d7=a("p"),mxr=o("This class cannot be instantiated directly using "),ZMe=a("code"),fxr=o("__init__()"),gxr=o(" (throws an error)."),hxr=l(),Ot=a("div"),v(c7.$$.fragment),uxr=l(),e4e=a("p"),pxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_xr=l(),qc=a("p"),bxr=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),Fxr=o("not"),vxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),Txr=o("from_pretrained()"),Mxr=o(" to load the model weights."),Exr=l(),v(U3.$$.fragment),Cxr=l(),Or=a("div"),v(m7.$$.fragment),wxr=l(),r4e=a("p"),Axr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yxr=l(),pn=a("p"),Lxr=o("The model class to instantiate is selected based on the "),t4e=a("code"),xxr=o("model_type"),$xr=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),Rxr=o("pretrained_model_name_or_path"),Bxr=o(":"),Pxr=l(),Le=a("ul"),J3=a("li"),s4e=a("strong"),Ixr=o("albert"),qxr=o(" \u2014 "),AJ=a("a"),Nxr=o("FlaxAlbertForMaskedLM"),jxr=o(" (ALBERT model)"),Dxr=l(),Y3=a("li"),l4e=a("strong"),Gxr=o("bart"),Oxr=o(" \u2014 "),yJ=a("a"),Vxr=o("FlaxBartForConditionalGeneration"),Xxr=o(" (BART model)"),zxr=l(),K3=a("li"),i4e=a("strong"),Qxr=o("bert"),Wxr=o(" \u2014 "),LJ=a("a"),Hxr=o("FlaxBertForMaskedLM"),Uxr=o(" (BERT model)"),Jxr=l(),Z3=a("li"),d4e=a("strong"),Yxr=o("big_bird"),Kxr=o(" \u2014 "),xJ=a("a"),Zxr=o("FlaxBigBirdForMaskedLM"),e7r=o(" (BigBird model)"),o7r=l(),ew=a("li"),c4e=a("strong"),r7r=o("distilbert"),t7r=o(" \u2014 "),$J=a("a"),a7r=o("FlaxDistilBertForMaskedLM"),n7r=o(" (DistilBERT model)"),s7r=l(),ow=a("li"),m4e=a("strong"),l7r=o("electra"),i7r=o(" \u2014 "),kJ=a("a"),d7r=o("FlaxElectraForMaskedLM"),c7r=o(" (ELECTRA model)"),m7r=l(),rw=a("li"),f4e=a("strong"),f7r=o("mbart"),g7r=o(" \u2014 "),SJ=a("a"),h7r=o("FlaxMBartForConditionalGeneration"),u7r=o(" (mBART model)"),p7r=l(),tw=a("li"),g4e=a("strong"),_7r=o("roberta"),b7r=o(" \u2014 "),RJ=a("a"),F7r=o("FlaxRobertaForMaskedLM"),v7r=o(" (RoBERTa model)"),T7r=l(),aw=a("li"),h4e=a("strong"),M7r=o("roformer"),E7r=o(" \u2014 "),BJ=a("a"),C7r=o("FlaxRoFormerForMaskedLM"),w7r=o(" (RoFormer model)"),A7r=l(),nw=a("li"),u4e=a("strong"),y7r=o("xlm-roberta"),L7r=o(" \u2014 "),PJ=a("a"),x7r=o("FlaxXLMRobertaForMaskedLM"),$7r=o(" (XLM-RoBERTa model)"),k7r=l(),v(sw.$$.fragment),bqe=l(),Nc=a("h2"),lw=a("a"),p4e=a("span"),v(f7.$$.fragment),S7r=l(),_4e=a("span"),R7r=o("FlaxAutoModelForSeq2SeqLM"),Fqe=l(),ur=a("div"),v(g7.$$.fragment),B7r=l(),jc=a("p"),P7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IJ=a("a"),I7r=o("from_pretrained()"),q7r=o(" class method or the "),qJ=a("a"),N7r=o("from_config()"),j7r=o(` class
method.`),D7r=l(),h7=a("p"),G7r=o("This class cannot be instantiated directly using "),b4e=a("code"),O7r=o("__init__()"),V7r=o(" (throws an error)."),X7r=l(),Vt=a("div"),v(u7.$$.fragment),z7r=l(),F4e=a("p"),Q7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W7r=l(),Dc=a("p"),H7r=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),U7r=o("not"),J7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),Y7r=o("from_pretrained()"),K7r=o(" to load the model weights."),Z7r=l(),v(iw.$$.fragment),e9r=l(),Vr=a("div"),v(p7.$$.fragment),o9r=l(),T4e=a("p"),r9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t9r=l(),_n=a("p"),a9r=o("The model class to instantiate is selected based on the "),M4e=a("code"),n9r=o("model_type"),s9r=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),l9r=o("pretrained_model_name_or_path"),i9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),d9r=o("pretrained_model_name_or_path"),c9r=o(":"),m9r=l(),Se=a("ul"),dw=a("li"),w4e=a("strong"),f9r=o("bart"),g9r=o(" \u2014 "),jJ=a("a"),h9r=o("FlaxBartForConditionalGeneration"),u9r=o(" (BART model)"),p9r=l(),cw=a("li"),A4e=a("strong"),_9r=o("blenderbot"),b9r=o(" \u2014 "),DJ=a("a"),F9r=o("FlaxBlenderbotForConditionalGeneration"),v9r=o(" (Blenderbot model)"),T9r=l(),mw=a("li"),y4e=a("strong"),M9r=o("blenderbot-small"),E9r=o(" \u2014 "),GJ=a("a"),C9r=o("FlaxBlenderbotSmallForConditionalGeneration"),w9r=o(" (BlenderbotSmall model)"),A9r=l(),fw=a("li"),L4e=a("strong"),y9r=o("encoder-decoder"),L9r=o(" \u2014 "),OJ=a("a"),x9r=o("FlaxEncoderDecoderModel"),$9r=o(" (Encoder decoder model)"),k9r=l(),gw=a("li"),x4e=a("strong"),S9r=o("marian"),R9r=o(" \u2014 "),VJ=a("a"),B9r=o("FlaxMarianMTModel"),P9r=o(" (Marian model)"),I9r=l(),hw=a("li"),$4e=a("strong"),q9r=o("mbart"),N9r=o(" \u2014 "),XJ=a("a"),j9r=o("FlaxMBartForConditionalGeneration"),D9r=o(" (mBART model)"),G9r=l(),uw=a("li"),k4e=a("strong"),O9r=o("mt5"),V9r=o(" \u2014 "),zJ=a("a"),X9r=o("FlaxMT5ForConditionalGeneration"),z9r=o(" (mT5 model)"),Q9r=l(),pw=a("li"),S4e=a("strong"),W9r=o("pegasus"),H9r=o(" \u2014 "),QJ=a("a"),U9r=o("FlaxPegasusForConditionalGeneration"),J9r=o(" (Pegasus model)"),Y9r=l(),_w=a("li"),R4e=a("strong"),K9r=o("t5"),Z9r=o(" \u2014 "),WJ=a("a"),e$r=o("FlaxT5ForConditionalGeneration"),o$r=o(" (T5 model)"),r$r=l(),v(bw.$$.fragment),vqe=l(),Gc=a("h2"),Fw=a("a"),B4e=a("span"),v(_7.$$.fragment),t$r=l(),P4e=a("span"),a$r=o("FlaxAutoModelForSequenceClassification"),Tqe=l(),pr=a("div"),v(b7.$$.fragment),n$r=l(),Oc=a("p"),s$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HJ=a("a"),l$r=o("from_pretrained()"),i$r=o(" class method or the "),UJ=a("a"),d$r=o("from_config()"),c$r=o(` class
method.`),m$r=l(),F7=a("p"),f$r=o("This class cannot be instantiated directly using "),I4e=a("code"),g$r=o("__init__()"),h$r=o(" (throws an error)."),u$r=l(),Xt=a("div"),v(v7.$$.fragment),p$r=l(),q4e=a("p"),_$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b$r=l(),Vc=a("p"),F$r=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),v$r=o("not"),T$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),M$r=o("from_pretrained()"),E$r=o(" to load the model weights."),C$r=l(),v(vw.$$.fragment),w$r=l(),Xr=a("div"),v(T7.$$.fragment),A$r=l(),j4e=a("p"),y$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L$r=l(),bn=a("p"),x$r=o("The model class to instantiate is selected based on the "),D4e=a("code"),$$r=o("model_type"),k$r=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),B$r=o("pretrained_model_name_or_path"),P$r=o(":"),I$r=l(),xe=a("ul"),Tw=a("li"),V4e=a("strong"),q$r=o("albert"),N$r=o(" \u2014 "),YJ=a("a"),j$r=o("FlaxAlbertForSequenceClassification"),D$r=o(" (ALBERT model)"),G$r=l(),Mw=a("li"),X4e=a("strong"),O$r=o("bart"),V$r=o(" \u2014 "),KJ=a("a"),X$r=o("FlaxBartForSequenceClassification"),z$r=o(" (BART model)"),Q$r=l(),Ew=a("li"),z4e=a("strong"),W$r=o("bert"),H$r=o(" \u2014 "),ZJ=a("a"),U$r=o("FlaxBertForSequenceClassification"),J$r=o(" (BERT model)"),Y$r=l(),Cw=a("li"),Q4e=a("strong"),K$r=o("big_bird"),Z$r=o(" \u2014 "),eY=a("a"),ekr=o("FlaxBigBirdForSequenceClassification"),okr=o(" (BigBird model)"),rkr=l(),ww=a("li"),W4e=a("strong"),tkr=o("distilbert"),akr=o(" \u2014 "),oY=a("a"),nkr=o("FlaxDistilBertForSequenceClassification"),skr=o(" (DistilBERT model)"),lkr=l(),Aw=a("li"),H4e=a("strong"),ikr=o("electra"),dkr=o(" \u2014 "),rY=a("a"),ckr=o("FlaxElectraForSequenceClassification"),mkr=o(" (ELECTRA model)"),fkr=l(),yw=a("li"),U4e=a("strong"),gkr=o("mbart"),hkr=o(" \u2014 "),tY=a("a"),ukr=o("FlaxMBartForSequenceClassification"),pkr=o(" (mBART model)"),_kr=l(),Lw=a("li"),J4e=a("strong"),bkr=o("roberta"),Fkr=o(" \u2014 "),aY=a("a"),vkr=o("FlaxRobertaForSequenceClassification"),Tkr=o(" (RoBERTa model)"),Mkr=l(),xw=a("li"),Y4e=a("strong"),Ekr=o("roformer"),Ckr=o(" \u2014 "),nY=a("a"),wkr=o("FlaxRoFormerForSequenceClassification"),Akr=o(" (RoFormer model)"),ykr=l(),$w=a("li"),K4e=a("strong"),Lkr=o("xlm-roberta"),xkr=o(" \u2014 "),sY=a("a"),$kr=o("FlaxXLMRobertaForSequenceClassification"),kkr=o(" (XLM-RoBERTa model)"),Skr=l(),v(kw.$$.fragment),Mqe=l(),Xc=a("h2"),Sw=a("a"),Z4e=a("span"),v(M7.$$.fragment),Rkr=l(),eEe=a("span"),Bkr=o("FlaxAutoModelForQuestionAnswering"),Eqe=l(),_r=a("div"),v(E7.$$.fragment),Pkr=l(),zc=a("p"),Ikr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lY=a("a"),qkr=o("from_pretrained()"),Nkr=o(" class method or the "),iY=a("a"),jkr=o("from_config()"),Dkr=o(` class
method.`),Gkr=l(),C7=a("p"),Okr=o("This class cannot be instantiated directly using "),oEe=a("code"),Vkr=o("__init__()"),Xkr=o(" (throws an error)."),zkr=l(),zt=a("div"),v(w7.$$.fragment),Qkr=l(),rEe=a("p"),Wkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Hkr=l(),Qc=a("p"),Ukr=o(`Note:
Loading a model from its configuration file does `),tEe=a("strong"),Jkr=o("not"),Ykr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" to load the model weights."),eSr=l(),v(Rw.$$.fragment),oSr=l(),zr=a("div"),v(A7.$$.fragment),rSr=l(),aEe=a("p"),tSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aSr=l(),Fn=a("p"),nSr=o("The model class to instantiate is selected based on the "),nEe=a("code"),sSr=o("model_type"),lSr=o(` property of the config object (either
passed as an argument or loaded from `),sEe=a("code"),iSr=o("pretrained_model_name_or_path"),dSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lEe=a("code"),cSr=o("pretrained_model_name_or_path"),mSr=o(":"),fSr=l(),$e=a("ul"),Bw=a("li"),iEe=a("strong"),gSr=o("albert"),hSr=o(" \u2014 "),cY=a("a"),uSr=o("FlaxAlbertForQuestionAnswering"),pSr=o(" (ALBERT model)"),_Sr=l(),Pw=a("li"),dEe=a("strong"),bSr=o("bart"),FSr=o(" \u2014 "),mY=a("a"),vSr=o("FlaxBartForQuestionAnswering"),TSr=o(" (BART model)"),MSr=l(),Iw=a("li"),cEe=a("strong"),ESr=o("bert"),CSr=o(" \u2014 "),fY=a("a"),wSr=o("FlaxBertForQuestionAnswering"),ASr=o(" (BERT model)"),ySr=l(),qw=a("li"),mEe=a("strong"),LSr=o("big_bird"),xSr=o(" \u2014 "),gY=a("a"),$Sr=o("FlaxBigBirdForQuestionAnswering"),kSr=o(" (BigBird model)"),SSr=l(),Nw=a("li"),fEe=a("strong"),RSr=o("distilbert"),BSr=o(" \u2014 "),hY=a("a"),PSr=o("FlaxDistilBertForQuestionAnswering"),ISr=o(" (DistilBERT model)"),qSr=l(),jw=a("li"),gEe=a("strong"),NSr=o("electra"),jSr=o(" \u2014 "),uY=a("a"),DSr=o("FlaxElectraForQuestionAnswering"),GSr=o(" (ELECTRA model)"),OSr=l(),Dw=a("li"),hEe=a("strong"),VSr=o("mbart"),XSr=o(" \u2014 "),pY=a("a"),zSr=o("FlaxMBartForQuestionAnswering"),QSr=o(" (mBART model)"),WSr=l(),Gw=a("li"),uEe=a("strong"),HSr=o("roberta"),USr=o(" \u2014 "),_Y=a("a"),JSr=o("FlaxRobertaForQuestionAnswering"),YSr=o(" (RoBERTa model)"),KSr=l(),Ow=a("li"),pEe=a("strong"),ZSr=o("roformer"),eRr=o(" \u2014 "),bY=a("a"),oRr=o("FlaxRoFormerForQuestionAnswering"),rRr=o(" (RoFormer model)"),tRr=l(),Vw=a("li"),_Ee=a("strong"),aRr=o("xlm-roberta"),nRr=o(" \u2014 "),FY=a("a"),sRr=o("FlaxXLMRobertaForQuestionAnswering"),lRr=o(" (XLM-RoBERTa model)"),iRr=l(),v(Xw.$$.fragment),Cqe=l(),Wc=a("h2"),zw=a("a"),bEe=a("span"),v(y7.$$.fragment),dRr=l(),FEe=a("span"),cRr=o("FlaxAutoModelForTokenClassification"),wqe=l(),br=a("div"),v(L7.$$.fragment),mRr=l(),Hc=a("p"),fRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vY=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),TY=a("a"),uRr=o("from_config()"),pRr=o(` class
method.`),_Rr=l(),x7=a("p"),bRr=o("This class cannot be instantiated directly using "),vEe=a("code"),FRr=o("__init__()"),vRr=o(" (throws an error)."),TRr=l(),Qt=a("div"),v($7.$$.fragment),MRr=l(),TEe=a("p"),ERr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CRr=l(),Uc=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),ARr=o("not"),yRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),LRr=o("from_pretrained()"),xRr=o(" to load the model weights."),$Rr=l(),v(Qw.$$.fragment),kRr=l(),Qr=a("div"),v(k7.$$.fragment),SRr=l(),EEe=a("p"),RRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BRr=l(),vn=a("p"),PRr=o("The model class to instantiate is selected based on the "),CEe=a("code"),IRr=o("model_type"),qRr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),NRr=o("pretrained_model_name_or_path"),jRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(":"),ORr=l(),De=a("ul"),Ww=a("li"),yEe=a("strong"),VRr=o("albert"),XRr=o(" \u2014 "),EY=a("a"),zRr=o("FlaxAlbertForTokenClassification"),QRr=o(" (ALBERT model)"),WRr=l(),Hw=a("li"),LEe=a("strong"),HRr=o("bert"),URr=o(" \u2014 "),CY=a("a"),JRr=o("FlaxBertForTokenClassification"),YRr=o(" (BERT model)"),KRr=l(),Uw=a("li"),xEe=a("strong"),ZRr=o("big_bird"),eBr=o(" \u2014 "),wY=a("a"),oBr=o("FlaxBigBirdForTokenClassification"),rBr=o(" (BigBird model)"),tBr=l(),Jw=a("li"),$Ee=a("strong"),aBr=o("distilbert"),nBr=o(" \u2014 "),AY=a("a"),sBr=o("FlaxDistilBertForTokenClassification"),lBr=o(" (DistilBERT model)"),iBr=l(),Yw=a("li"),kEe=a("strong"),dBr=o("electra"),cBr=o(" \u2014 "),yY=a("a"),mBr=o("FlaxElectraForTokenClassification"),fBr=o(" (ELECTRA model)"),gBr=l(),Kw=a("li"),SEe=a("strong"),hBr=o("roberta"),uBr=o(" \u2014 "),LY=a("a"),pBr=o("FlaxRobertaForTokenClassification"),_Br=o(" (RoBERTa model)"),bBr=l(),Zw=a("li"),REe=a("strong"),FBr=o("roformer"),vBr=o(" \u2014 "),xY=a("a"),TBr=o("FlaxRoFormerForTokenClassification"),MBr=o(" (RoFormer model)"),EBr=l(),eA=a("li"),BEe=a("strong"),CBr=o("xlm-roberta"),wBr=o(" \u2014 "),$Y=a("a"),ABr=o("FlaxXLMRobertaForTokenClassification"),yBr=o(" (XLM-RoBERTa model)"),LBr=l(),v(oA.$$.fragment),Aqe=l(),Jc=a("h2"),rA=a("a"),PEe=a("span"),v(S7.$$.fragment),xBr=l(),IEe=a("span"),$Br=o("FlaxAutoModelForMultipleChoice"),yqe=l(),Fr=a("div"),v(R7.$$.fragment),kBr=l(),Yc=a("p"),SBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=a("a"),RBr=o("from_pretrained()"),BBr=o(" class method or the "),SY=a("a"),PBr=o("from_config()"),IBr=o(` class
method.`),qBr=l(),B7=a("p"),NBr=o("This class cannot be instantiated directly using "),qEe=a("code"),jBr=o("__init__()"),DBr=o(" (throws an error)."),GBr=l(),Wt=a("div"),v(P7.$$.fragment),OBr=l(),NEe=a("p"),VBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XBr=l(),Kc=a("p"),zBr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),QBr=o("not"),WBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),HBr=o("from_pretrained()"),UBr=o(" to load the model weights."),JBr=l(),v(tA.$$.fragment),YBr=l(),Wr=a("div"),v(I7.$$.fragment),KBr=l(),DEe=a("p"),ZBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ePr=l(),Tn=a("p"),oPr=o("The model class to instantiate is selected based on the "),GEe=a("code"),rPr=o("model_type"),tPr=o(` property of the config object (either
passed as an argument or loaded from `),OEe=a("code"),aPr=o("pretrained_model_name_or_path"),nPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=a("code"),sPr=o("pretrained_model_name_or_path"),lPr=o(":"),iPr=l(),Ge=a("ul"),aA=a("li"),XEe=a("strong"),dPr=o("albert"),cPr=o(" \u2014 "),BY=a("a"),mPr=o("FlaxAlbertForMultipleChoice"),fPr=o(" (ALBERT model)"),gPr=l(),nA=a("li"),zEe=a("strong"),hPr=o("bert"),uPr=o(" \u2014 "),PY=a("a"),pPr=o("FlaxBertForMultipleChoice"),_Pr=o(" (BERT model)"),bPr=l(),sA=a("li"),QEe=a("strong"),FPr=o("big_bird"),vPr=o(" \u2014 "),IY=a("a"),TPr=o("FlaxBigBirdForMultipleChoice"),MPr=o(" (BigBird model)"),EPr=l(),lA=a("li"),WEe=a("strong"),CPr=o("distilbert"),wPr=o(" \u2014 "),qY=a("a"),APr=o("FlaxDistilBertForMultipleChoice"),yPr=o(" (DistilBERT model)"),LPr=l(),iA=a("li"),HEe=a("strong"),xPr=o("electra"),$Pr=o(" \u2014 "),NY=a("a"),kPr=o("FlaxElectraForMultipleChoice"),SPr=o(" (ELECTRA model)"),RPr=l(),dA=a("li"),UEe=a("strong"),BPr=o("roberta"),PPr=o(" \u2014 "),jY=a("a"),IPr=o("FlaxRobertaForMultipleChoice"),qPr=o(" (RoBERTa model)"),NPr=l(),cA=a("li"),JEe=a("strong"),jPr=o("roformer"),DPr=o(" \u2014 "),DY=a("a"),GPr=o("FlaxRoFormerForMultipleChoice"),OPr=o(" (RoFormer model)"),VPr=l(),mA=a("li"),YEe=a("strong"),XPr=o("xlm-roberta"),zPr=o(" \u2014 "),GY=a("a"),QPr=o("FlaxXLMRobertaForMultipleChoice"),WPr=o(" (XLM-RoBERTa model)"),HPr=l(),v(fA.$$.fragment),Lqe=l(),Zc=a("h2"),gA=a("a"),KEe=a("span"),v(q7.$$.fragment),UPr=l(),ZEe=a("span"),JPr=o("FlaxAutoModelForNextSentencePrediction"),xqe=l(),vr=a("div"),v(N7.$$.fragment),YPr=l(),em=a("p"),KPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OY=a("a"),ZPr=o("from_pretrained()"),eIr=o(" class method or the "),VY=a("a"),oIr=o("from_config()"),rIr=o(` class
method.`),tIr=l(),j7=a("p"),aIr=o("This class cannot be instantiated directly using "),e5e=a("code"),nIr=o("__init__()"),sIr=o(" (throws an error)."),lIr=l(),Ht=a("div"),v(D7.$$.fragment),iIr=l(),o5e=a("p"),dIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cIr=l(),om=a("p"),mIr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),fIr=o("not"),gIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),hIr=o("from_pretrained()"),uIr=o(" to load the model weights."),pIr=l(),v(hA.$$.fragment),_Ir=l(),Hr=a("div"),v(G7.$$.fragment),bIr=l(),t5e=a("p"),FIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vIr=l(),Mn=a("p"),TIr=o("The model class to instantiate is selected based on the "),a5e=a("code"),MIr=o("model_type"),EIr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),CIr=o("pretrained_model_name_or_path"),wIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),AIr=o("pretrained_model_name_or_path"),yIr=o(":"),LIr=l(),l5e=a("ul"),uA=a("li"),i5e=a("strong"),xIr=o("bert"),$Ir=o(" \u2014 "),zY=a("a"),kIr=o("FlaxBertForNextSentencePrediction"),SIr=o(" (BERT model)"),RIr=l(),v(pA.$$.fragment),$qe=l(),rm=a("h2"),_A=a("a"),d5e=a("span"),v(O7.$$.fragment),BIr=l(),c5e=a("span"),PIr=o("FlaxAutoModelForImageClassification"),kqe=l(),Tr=a("div"),v(V7.$$.fragment),IIr=l(),tm=a("p"),qIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QY=a("a"),NIr=o("from_pretrained()"),jIr=o(" class method or the "),WY=a("a"),DIr=o("from_config()"),GIr=o(` class
method.`),OIr=l(),X7=a("p"),VIr=o("This class cannot be instantiated directly using "),m5e=a("code"),XIr=o("__init__()"),zIr=o(" (throws an error)."),QIr=l(),Ut=a("div"),v(z7.$$.fragment),WIr=l(),f5e=a("p"),HIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UIr=l(),am=a("p"),JIr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),YIr=o("not"),KIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),ZIr=o("from_pretrained()"),eqr=o(" to load the model weights."),oqr=l(),v(bA.$$.fragment),rqr=l(),Ur=a("div"),v(Q7.$$.fragment),tqr=l(),h5e=a("p"),aqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nqr=l(),En=a("p"),sqr=o("The model class to instantiate is selected based on the "),u5e=a("code"),lqr=o("model_type"),iqr=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),dqr=o("pretrained_model_name_or_path"),cqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),mqr=o("pretrained_model_name_or_path"),fqr=o(":"),gqr=l(),W7=a("ul"),FA=a("li"),b5e=a("strong"),hqr=o("beit"),uqr=o(" \u2014 "),UY=a("a"),pqr=o("FlaxBeitForImageClassification"),_qr=o(" (BEiT model)"),bqr=l(),vA=a("li"),F5e=a("strong"),Fqr=o("vit"),vqr=o(" \u2014 "),JY=a("a"),Tqr=o("FlaxViTForImageClassification"),Mqr=o(" (ViT model)"),Eqr=l(),v(TA.$$.fragment),Sqe=l(),nm=a("h2"),MA=a("a"),v5e=a("span"),v(H7.$$.fragment),Cqr=l(),T5e=a("span"),wqr=o("FlaxAutoModelForVision2Seq"),Rqe=l(),Mr=a("div"),v(U7.$$.fragment),Aqr=l(),sm=a("p"),yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YY=a("a"),Lqr=o("from_pretrained()"),xqr=o(" class method or the "),KY=a("a"),$qr=o("from_config()"),kqr=o(` class
method.`),Sqr=l(),J7=a("p"),Rqr=o("This class cannot be instantiated directly using "),M5e=a("code"),Bqr=o("__init__()"),Pqr=o(" (throws an error)."),Iqr=l(),Jt=a("div"),v(Y7.$$.fragment),qqr=l(),E5e=a("p"),Nqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jqr=l(),lm=a("p"),Dqr=o(`Note:
Loading a model from its configuration file does `),C5e=a("strong"),Gqr=o("not"),Oqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),Vqr=o("from_pretrained()"),Xqr=o(" to load the model weights."),zqr=l(),v(EA.$$.fragment),Qqr=l(),Jr=a("div"),v(K7.$$.fragment),Wqr=l(),w5e=a("p"),Hqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uqr=l(),Cn=a("p"),Jqr=o("The model class to instantiate is selected based on the "),A5e=a("code"),Yqr=o("model_type"),Kqr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),Zqr=o("pretrained_model_name_or_path"),eNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),oNr=o("pretrained_model_name_or_path"),rNr=o(":"),tNr=l(),x5e=a("ul"),CA=a("li"),$5e=a("strong"),aNr=o("vision-encoder-decoder"),nNr=o(" \u2014 "),eK=a("a"),sNr=o("FlaxVisionEncoderDecoderModel"),lNr=o(" (Vision Encoder decoder model)"),iNr=l(),v(wA.$$.fragment),this.h()},l(m){const _=k6t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(m),u=n(m,"H1",{class:!0});var Z7=s(u);f=n(Z7,"A",{id:!0,class:!0,href:!0});var k5e=s(f);p=n(k5e,"SPAN",{});var S5e=s(p);T(d.$$.fragment,S5e),S5e.forEach(t),k5e.forEach(t),h=i(Z7),Mo=n(Z7,"SPAN",{});var R5e=s(Mo);li=r(R5e,"Auto Classes"),R5e.forEach(t),Z7.forEach(t),mm=i(m),et=n(m,"P",{});var e9=s(et);ii=r(e9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(e9,"CODE",{});var B5e=s(di);X6=r(B5e,"from_pretrained()"),B5e.forEach(t),fm=r(e9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),e9.forEach(t),qe=i(m),Xe=n(m,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var P5e=s(An);z6=r(P5e,"AutoConfig"),P5e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var I5e=s(Ln);Q6=r(I5e,"AutoModel"),I5e.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var q5e=s(xn);W6=r(q5e,"AutoTokenizer"),q5e.forEach(t),fi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),gm=i(m),T(Ma.$$.fragment,m),ze=i(m),Ae=n(m,"P",{});var o9=s(Ae);m$=r(o9,"will create a model that is an instance of "),gi=n(o9,"A",{href:!0});var N5e=s(gi);f$=r(N5e,"BertModel"),N5e.forEach(t),g$=r(o9,"."),o9.forEach(t),Eo=i(m),Ea=n(m,"P",{});var r9=s(Ea);h$=r(r9,"There is one class of "),hm=n(r9,"CODE",{});var j5e=s(hm);u$=r(j5e,"AutoModel"),j5e.forEach(t),Oje=r(r9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),r9.forEach(t),kPe=i(m),hi=n(m,"H2",{class:!0});var t9=s(hi);um=n(t9,"A",{id:!0,class:!0,href:!0});var D5e=s(um);HZ=n(D5e,"SPAN",{});var G5e=s(HZ);T(H6.$$.fragment,G5e),G5e.forEach(t),D5e.forEach(t),Vje=i(t9),UZ=n(t9,"SPAN",{});var O5e=s(UZ);Xje=r(O5e,"Extending the Auto Classes"),O5e.forEach(t),t9.forEach(t),SPe=i(m),$n=n(m,"P",{});var im=s($n);zje=r(im,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),JZ=n(im,"CODE",{});var V5e=s(JZ);Qje=r(V5e,"NewModel"),V5e.forEach(t),Wje=r(im,", make sure you have a "),YZ=n(im,"CODE",{});var X5e=s(YZ);Hje=r(X5e,"NewModelConfig"),X5e.forEach(t),Uje=r(im,` then you can add those to the auto
classes like this:`),im.forEach(t),RPe=i(m),T(U6.$$.fragment,m),BPe=i(m),p$=n(m,"P",{});var z5e=s(p$);Jje=r(z5e,"You will then be able to use the auto classes like you would usually do!"),z5e.forEach(t),PPe=i(m),T(pm.$$.fragment,m),IPe=i(m),ui=n(m,"H2",{class:!0});var a9=s(ui);_m=n(a9,"A",{id:!0,class:!0,href:!0});var Q5e=s(_m);KZ=n(Q5e,"SPAN",{});var W5e=s(KZ);T(J6.$$.fragment,W5e),W5e.forEach(t),Q5e.forEach(t),Yje=i(a9),ZZ=n(a9,"SPAN",{});var H5e=s(ZZ);Kje=r(H5e,"AutoConfig"),H5e.forEach(t),a9.forEach(t),qPe=i(m),Co=n(m,"DIV",{class:!0});var Kr=s(Co);T(Y6.$$.fragment,Kr),Zje=i(Kr),K6=n(Kr,"P",{});var n9=s(K6);eDe=r(n9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_$=n(n9,"A",{href:!0});var U5e=s(_$);oDe=r(U5e,"from_pretrained()"),U5e.forEach(t),rDe=r(n9," class method."),n9.forEach(t),tDe=i(Kr),Z6=n(Kr,"P",{});var s9=s(Z6);aDe=r(s9,"This class cannot be instantiated directly using "),eee=n(s9,"CODE",{});var J5e=s(eee);nDe=r(J5e,"__init__()"),J5e.forEach(t),sDe=r(s9," (throws an error)."),s9.forEach(t),lDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(ey.$$.fragment,Zr),iDe=i(Zr),oee=n(Zr,"P",{});var Y5e=s(oee);dDe=r(Y5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Y5e.forEach(t),cDe=i(Zr),pi=n(Zr,"P",{});var dm=s(pi);mDe=r(dm,"The configuration class to instantiate is selected based on the "),ree=n(dm,"CODE",{});var K5e=s(ree);fDe=r(K5e,"model_type"),K5e.forEach(t),gDe=r(dm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tee=n(dm,"CODE",{});var Z5e=s(tee);hDe=r(Z5e,"pretrained_model_name_or_path"),Z5e.forEach(t),uDe=r(dm,":"),dm.forEach(t),pDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);bm=n(L,"LI",{});var AA=s(bm);aee=n(AA,"STRONG",{});var eCe=s(aee);_De=r(eCe,"albert"),eCe.forEach(t),bDe=r(AA," \u2014 "),b$=n(AA,"A",{href:!0});var oCe=s(b$);FDe=r(oCe,"AlbertConfig"),oCe.forEach(t),vDe=r(AA," (ALBERT model)"),AA.forEach(t),TDe=i(L),Fm=n(L,"LI",{});var yA=s(Fm);nee=n(yA,"STRONG",{});var rCe=s(nee);MDe=r(rCe,"bart"),rCe.forEach(t),EDe=r(yA," \u2014 "),F$=n(yA,"A",{href:!0});var tCe=s(F$);CDe=r(tCe,"BartConfig"),tCe.forEach(t),wDe=r(yA," (BART model)"),yA.forEach(t),ADe=i(L),vm=n(L,"LI",{});var LA=s(vm);see=n(LA,"STRONG",{});var aCe=s(see);yDe=r(aCe,"beit"),aCe.forEach(t),LDe=r(LA," \u2014 "),v$=n(LA,"A",{href:!0});var nCe=s(v$);xDe=r(nCe,"BeitConfig"),nCe.forEach(t),$De=r(LA," (BEiT model)"),LA.forEach(t),kDe=i(L),Tm=n(L,"LI",{});var xA=s(Tm);lee=n(xA,"STRONG",{});var sCe=s(lee);SDe=r(sCe,"bert"),sCe.forEach(t),RDe=r(xA," \u2014 "),T$=n(xA,"A",{href:!0});var lCe=s(T$);BDe=r(lCe,"BertConfig"),lCe.forEach(t),PDe=r(xA," (BERT model)"),xA.forEach(t),IDe=i(L),Mm=n(L,"LI",{});var $A=s(Mm);iee=n($A,"STRONG",{});var iCe=s(iee);qDe=r(iCe,"bert-generation"),iCe.forEach(t),NDe=r($A," \u2014 "),M$=n($A,"A",{href:!0});var dCe=s(M$);jDe=r(dCe,"BertGenerationConfig"),dCe.forEach(t),DDe=r($A," (Bert Generation model)"),$A.forEach(t),GDe=i(L),Em=n(L,"LI",{});var kA=s(Em);dee=n(kA,"STRONG",{});var cCe=s(dee);ODe=r(cCe,"big_bird"),cCe.forEach(t),VDe=r(kA," \u2014 "),E$=n(kA,"A",{href:!0});var mCe=s(E$);XDe=r(mCe,"BigBirdConfig"),mCe.forEach(t),zDe=r(kA," (BigBird model)"),kA.forEach(t),QDe=i(L),Cm=n(L,"LI",{});var SA=s(Cm);cee=n(SA,"STRONG",{});var fCe=s(cee);WDe=r(fCe,"bigbird_pegasus"),fCe.forEach(t),HDe=r(SA," \u2014 "),C$=n(SA,"A",{href:!0});var gCe=s(C$);UDe=r(gCe,"BigBirdPegasusConfig"),gCe.forEach(t),JDe=r(SA," (BigBirdPegasus model)"),SA.forEach(t),YDe=i(L),wm=n(L,"LI",{});var RA=s(wm);mee=n(RA,"STRONG",{});var hCe=s(mee);KDe=r(hCe,"blenderbot"),hCe.forEach(t),ZDe=r(RA," \u2014 "),w$=n(RA,"A",{href:!0});var uCe=s(w$);eGe=r(uCe,"BlenderbotConfig"),uCe.forEach(t),oGe=r(RA," (Blenderbot model)"),RA.forEach(t),rGe=i(L),Am=n(L,"LI",{});var BA=s(Am);fee=n(BA,"STRONG",{});var pCe=s(fee);tGe=r(pCe,"blenderbot-small"),pCe.forEach(t),aGe=r(BA," \u2014 "),A$=n(BA,"A",{href:!0});var _Ce=s(A$);nGe=r(_Ce,"BlenderbotSmallConfig"),_Ce.forEach(t),sGe=r(BA," (BlenderbotSmall model)"),BA.forEach(t),lGe=i(L),ym=n(L,"LI",{});var PA=s(ym);gee=n(PA,"STRONG",{});var bCe=s(gee);iGe=r(bCe,"camembert"),bCe.forEach(t),dGe=r(PA," \u2014 "),y$=n(PA,"A",{href:!0});var FCe=s(y$);cGe=r(FCe,"CamembertConfig"),FCe.forEach(t),mGe=r(PA," (CamemBERT model)"),PA.forEach(t),fGe=i(L),Lm=n(L,"LI",{});var IA=s(Lm);hee=n(IA,"STRONG",{});var vCe=s(hee);gGe=r(vCe,"canine"),vCe.forEach(t),hGe=r(IA," \u2014 "),L$=n(IA,"A",{href:!0});var TCe=s(L$);uGe=r(TCe,"CanineConfig"),TCe.forEach(t),pGe=r(IA," (Canine model)"),IA.forEach(t),_Ge=i(L),xm=n(L,"LI",{});var qA=s(xm);uee=n(qA,"STRONG",{});var MCe=s(uee);bGe=r(MCe,"clip"),MCe.forEach(t),FGe=r(qA," \u2014 "),x$=n(qA,"A",{href:!0});var ECe=s(x$);vGe=r(ECe,"CLIPConfig"),ECe.forEach(t),TGe=r(qA," (CLIP model)"),qA.forEach(t),MGe=i(L),$m=n(L,"LI",{});var NA=s($m);pee=n(NA,"STRONG",{});var CCe=s(pee);EGe=r(CCe,"convbert"),CCe.forEach(t),CGe=r(NA," \u2014 "),$$=n(NA,"A",{href:!0});var wCe=s($$);wGe=r(wCe,"ConvBertConfig"),wCe.forEach(t),AGe=r(NA," (ConvBERT model)"),NA.forEach(t),yGe=i(L),km=n(L,"LI",{});var jA=s(km);_ee=n(jA,"STRONG",{});var ACe=s(_ee);LGe=r(ACe,"convnext"),ACe.forEach(t),xGe=r(jA," \u2014 "),k$=n(jA,"A",{href:!0});var yCe=s(k$);$Ge=r(yCe,"ConvNextConfig"),yCe.forEach(t),kGe=r(jA," (ConvNext model)"),jA.forEach(t),SGe=i(L),Sm=n(L,"LI",{});var DA=s(Sm);bee=n(DA,"STRONG",{});var LCe=s(bee);RGe=r(LCe,"ctrl"),LCe.forEach(t),BGe=r(DA," \u2014 "),S$=n(DA,"A",{href:!0});var xCe=s(S$);PGe=r(xCe,"CTRLConfig"),xCe.forEach(t),IGe=r(DA," (CTRL model)"),DA.forEach(t),qGe=i(L),Rm=n(L,"LI",{});var GA=s(Rm);Fee=n(GA,"STRONG",{});var $Ce=s(Fee);NGe=r($Ce,"data2vec-audio"),$Ce.forEach(t),jGe=r(GA," \u2014 "),R$=n(GA,"A",{href:!0});var kCe=s(R$);DGe=r(kCe,"Data2VecAudioConfig"),kCe.forEach(t),GGe=r(GA," (Data2VecAudio model)"),GA.forEach(t),OGe=i(L),Bm=n(L,"LI",{});var OA=s(Bm);vee=n(OA,"STRONG",{});var SCe=s(vee);VGe=r(SCe,"data2vec-text"),SCe.forEach(t),XGe=r(OA," \u2014 "),B$=n(OA,"A",{href:!0});var RCe=s(B$);zGe=r(RCe,"Data2VecTextConfig"),RCe.forEach(t),QGe=r(OA," (Data2VecText model)"),OA.forEach(t),WGe=i(L),Pm=n(L,"LI",{});var VA=s(Pm);Tee=n(VA,"STRONG",{});var BCe=s(Tee);HGe=r(BCe,"data2vec-vision"),BCe.forEach(t),UGe=r(VA," \u2014 "),P$=n(VA,"A",{href:!0});var PCe=s(P$);JGe=r(PCe,"Data2VecVisionConfig"),PCe.forEach(t),YGe=r(VA," (Data2VecVision model)"),VA.forEach(t),KGe=i(L),Im=n(L,"LI",{});var XA=s(Im);Mee=n(XA,"STRONG",{});var ICe=s(Mee);ZGe=r(ICe,"deberta"),ICe.forEach(t),eOe=r(XA," \u2014 "),I$=n(XA,"A",{href:!0});var qCe=s(I$);oOe=r(qCe,"DebertaConfig"),qCe.forEach(t),rOe=r(XA," (DeBERTa model)"),XA.forEach(t),tOe=i(L),qm=n(L,"LI",{});var zA=s(qm);Eee=n(zA,"STRONG",{});var NCe=s(Eee);aOe=r(NCe,"deberta-v2"),NCe.forEach(t),nOe=r(zA," \u2014 "),q$=n(zA,"A",{href:!0});var jCe=s(q$);sOe=r(jCe,"DebertaV2Config"),jCe.forEach(t),lOe=r(zA," (DeBERTa-v2 model)"),zA.forEach(t),iOe=i(L),Nm=n(L,"LI",{});var QA=s(Nm);Cee=n(QA,"STRONG",{});var DCe=s(Cee);dOe=r(DCe,"decision_transformer"),DCe.forEach(t),cOe=r(QA," \u2014 "),N$=n(QA,"A",{href:!0});var GCe=s(N$);mOe=r(GCe,"DecisionTransformerConfig"),GCe.forEach(t),fOe=r(QA," (Decision Transformer model)"),QA.forEach(t),gOe=i(L),jm=n(L,"LI",{});var WA=s(jm);wee=n(WA,"STRONG",{});var OCe=s(wee);hOe=r(OCe,"deit"),OCe.forEach(t),uOe=r(WA," \u2014 "),j$=n(WA,"A",{href:!0});var VCe=s(j$);pOe=r(VCe,"DeiTConfig"),VCe.forEach(t),_Oe=r(WA," (DeiT model)"),WA.forEach(t),bOe=i(L),Dm=n(L,"LI",{});var HA=s(Dm);Aee=n(HA,"STRONG",{});var XCe=s(Aee);FOe=r(XCe,"detr"),XCe.forEach(t),vOe=r(HA," \u2014 "),D$=n(HA,"A",{href:!0});var cNr=s(D$);TOe=r(cNr,"DetrConfig"),cNr.forEach(t),MOe=r(HA," (DETR model)"),HA.forEach(t),EOe=i(L),Gm=n(L,"LI",{});var zCe=s(Gm);yee=n(zCe,"STRONG",{});var mNr=s(yee);COe=r(mNr,"distilbert"),mNr.forEach(t),wOe=r(zCe," \u2014 "),G$=n(zCe,"A",{href:!0});var fNr=s(G$);AOe=r(fNr,"DistilBertConfig"),fNr.forEach(t),yOe=r(zCe," (DistilBERT model)"),zCe.forEach(t),LOe=i(L),Om=n(L,"LI",{});var QCe=s(Om);Lee=n(QCe,"STRONG",{});var gNr=s(Lee);xOe=r(gNr,"dpr"),gNr.forEach(t),$Oe=r(QCe," \u2014 "),O$=n(QCe,"A",{href:!0});var hNr=s(O$);kOe=r(hNr,"DPRConfig"),hNr.forEach(t),SOe=r(QCe," (DPR model)"),QCe.forEach(t),ROe=i(L),Vm=n(L,"LI",{});var WCe=s(Vm);xee=n(WCe,"STRONG",{});var uNr=s(xee);BOe=r(uNr,"dpt"),uNr.forEach(t),POe=r(WCe," \u2014 "),V$=n(WCe,"A",{href:!0});var pNr=s(V$);IOe=r(pNr,"DPTConfig"),pNr.forEach(t),qOe=r(WCe," (DPT model)"),WCe.forEach(t),NOe=i(L),Xm=n(L,"LI",{});var HCe=s(Xm);$ee=n(HCe,"STRONG",{});var _Nr=s($ee);jOe=r(_Nr,"electra"),_Nr.forEach(t),DOe=r(HCe," \u2014 "),X$=n(HCe,"A",{href:!0});var bNr=s(X$);GOe=r(bNr,"ElectraConfig"),bNr.forEach(t),OOe=r(HCe," (ELECTRA model)"),HCe.forEach(t),VOe=i(L),zm=n(L,"LI",{});var UCe=s(zm);kee=n(UCe,"STRONG",{});var FNr=s(kee);XOe=r(FNr,"encoder-decoder"),FNr.forEach(t),zOe=r(UCe," \u2014 "),z$=n(UCe,"A",{href:!0});var vNr=s(z$);QOe=r(vNr,"EncoderDecoderConfig"),vNr.forEach(t),WOe=r(UCe," (Encoder decoder model)"),UCe.forEach(t),HOe=i(L),Qm=n(L,"LI",{});var JCe=s(Qm);See=n(JCe,"STRONG",{});var TNr=s(See);UOe=r(TNr,"flaubert"),TNr.forEach(t),JOe=r(JCe," \u2014 "),Q$=n(JCe,"A",{href:!0});var MNr=s(Q$);YOe=r(MNr,"FlaubertConfig"),MNr.forEach(t),KOe=r(JCe," (FlauBERT model)"),JCe.forEach(t),ZOe=i(L),Wm=n(L,"LI",{});var YCe=s(Wm);Ree=n(YCe,"STRONG",{});var ENr=s(Ree);eVe=r(ENr,"flava"),ENr.forEach(t),oVe=r(YCe," \u2014 "),W$=n(YCe,"A",{href:!0});var CNr=s(W$);rVe=r(CNr,"FlavaConfig"),CNr.forEach(t),tVe=r(YCe," (Flava model)"),YCe.forEach(t),aVe=i(L),Hm=n(L,"LI",{});var KCe=s(Hm);Bee=n(KCe,"STRONG",{});var wNr=s(Bee);nVe=r(wNr,"fnet"),wNr.forEach(t),sVe=r(KCe," \u2014 "),H$=n(KCe,"A",{href:!0});var ANr=s(H$);lVe=r(ANr,"FNetConfig"),ANr.forEach(t),iVe=r(KCe," (FNet model)"),KCe.forEach(t),dVe=i(L),Um=n(L,"LI",{});var ZCe=s(Um);Pee=n(ZCe,"STRONG",{});var yNr=s(Pee);cVe=r(yNr,"fsmt"),yNr.forEach(t),mVe=r(ZCe," \u2014 "),U$=n(ZCe,"A",{href:!0});var LNr=s(U$);fVe=r(LNr,"FSMTConfig"),LNr.forEach(t),gVe=r(ZCe," (FairSeq Machine-Translation model)"),ZCe.forEach(t),hVe=i(L),Jm=n(L,"LI",{});var e3e=s(Jm);Iee=n(e3e,"STRONG",{});var xNr=s(Iee);uVe=r(xNr,"funnel"),xNr.forEach(t),pVe=r(e3e," \u2014 "),J$=n(e3e,"A",{href:!0});var $Nr=s(J$);_Ve=r($Nr,"FunnelConfig"),$Nr.forEach(t),bVe=r(e3e," (Funnel Transformer model)"),e3e.forEach(t),FVe=i(L),Ym=n(L,"LI",{});var o3e=s(Ym);qee=n(o3e,"STRONG",{});var kNr=s(qee);vVe=r(kNr,"glpn"),kNr.forEach(t),TVe=r(o3e," \u2014 "),Y$=n(o3e,"A",{href:!0});var SNr=s(Y$);MVe=r(SNr,"GLPNConfig"),SNr.forEach(t),EVe=r(o3e," (GLPN model)"),o3e.forEach(t),CVe=i(L),Km=n(L,"LI",{});var r3e=s(Km);Nee=n(r3e,"STRONG",{});var RNr=s(Nee);wVe=r(RNr,"gpt2"),RNr.forEach(t),AVe=r(r3e," \u2014 "),K$=n(r3e,"A",{href:!0});var BNr=s(K$);yVe=r(BNr,"GPT2Config"),BNr.forEach(t),LVe=r(r3e," (OpenAI GPT-2 model)"),r3e.forEach(t),xVe=i(L),Zm=n(L,"LI",{});var t3e=s(Zm);jee=n(t3e,"STRONG",{});var PNr=s(jee);$Ve=r(PNr,"gpt_neo"),PNr.forEach(t),kVe=r(t3e," \u2014 "),Z$=n(t3e,"A",{href:!0});var INr=s(Z$);SVe=r(INr,"GPTNeoConfig"),INr.forEach(t),RVe=r(t3e," (GPT Neo model)"),t3e.forEach(t),BVe=i(L),ef=n(L,"LI",{});var a3e=s(ef);Dee=n(a3e,"STRONG",{});var qNr=s(Dee);PVe=r(qNr,"gptj"),qNr.forEach(t),IVe=r(a3e," \u2014 "),ek=n(a3e,"A",{href:!0});var NNr=s(ek);qVe=r(NNr,"GPTJConfig"),NNr.forEach(t),NVe=r(a3e," (GPT-J model)"),a3e.forEach(t),jVe=i(L),of=n(L,"LI",{});var n3e=s(of);Gee=n(n3e,"STRONG",{});var jNr=s(Gee);DVe=r(jNr,"hubert"),jNr.forEach(t),GVe=r(n3e," \u2014 "),ok=n(n3e,"A",{href:!0});var DNr=s(ok);OVe=r(DNr,"HubertConfig"),DNr.forEach(t),VVe=r(n3e," (Hubert model)"),n3e.forEach(t),XVe=i(L),rf=n(L,"LI",{});var s3e=s(rf);Oee=n(s3e,"STRONG",{});var GNr=s(Oee);zVe=r(GNr,"ibert"),GNr.forEach(t),QVe=r(s3e," \u2014 "),rk=n(s3e,"A",{href:!0});var ONr=s(rk);WVe=r(ONr,"IBertConfig"),ONr.forEach(t),HVe=r(s3e," (I-BERT model)"),s3e.forEach(t),UVe=i(L),tf=n(L,"LI",{});var l3e=s(tf);Vee=n(l3e,"STRONG",{});var VNr=s(Vee);JVe=r(VNr,"imagegpt"),VNr.forEach(t),YVe=r(l3e," \u2014 "),tk=n(l3e,"A",{href:!0});var XNr=s(tk);KVe=r(XNr,"ImageGPTConfig"),XNr.forEach(t),ZVe=r(l3e," (ImageGPT model)"),l3e.forEach(t),eXe=i(L),af=n(L,"LI",{});var i3e=s(af);Xee=n(i3e,"STRONG",{});var zNr=s(Xee);oXe=r(zNr,"layoutlm"),zNr.forEach(t),rXe=r(i3e," \u2014 "),ak=n(i3e,"A",{href:!0});var QNr=s(ak);tXe=r(QNr,"LayoutLMConfig"),QNr.forEach(t),aXe=r(i3e," (LayoutLM model)"),i3e.forEach(t),nXe=i(L),nf=n(L,"LI",{});var d3e=s(nf);zee=n(d3e,"STRONG",{});var WNr=s(zee);sXe=r(WNr,"layoutlmv2"),WNr.forEach(t),lXe=r(d3e," \u2014 "),nk=n(d3e,"A",{href:!0});var HNr=s(nk);iXe=r(HNr,"LayoutLMv2Config"),HNr.forEach(t),dXe=r(d3e," (LayoutLMv2 model)"),d3e.forEach(t),cXe=i(L),sf=n(L,"LI",{});var c3e=s(sf);Qee=n(c3e,"STRONG",{});var UNr=s(Qee);mXe=r(UNr,"led"),UNr.forEach(t),fXe=r(c3e," \u2014 "),sk=n(c3e,"A",{href:!0});var JNr=s(sk);gXe=r(JNr,"LEDConfig"),JNr.forEach(t),hXe=r(c3e," (LED model)"),c3e.forEach(t),uXe=i(L),lf=n(L,"LI",{});var m3e=s(lf);Wee=n(m3e,"STRONG",{});var YNr=s(Wee);pXe=r(YNr,"longformer"),YNr.forEach(t),_Xe=r(m3e," \u2014 "),lk=n(m3e,"A",{href:!0});var KNr=s(lk);bXe=r(KNr,"LongformerConfig"),KNr.forEach(t),FXe=r(m3e," (Longformer model)"),m3e.forEach(t),vXe=i(L),df=n(L,"LI",{});var f3e=s(df);Hee=n(f3e,"STRONG",{});var ZNr=s(Hee);TXe=r(ZNr,"luke"),ZNr.forEach(t),MXe=r(f3e," \u2014 "),ik=n(f3e,"A",{href:!0});var ejr=s(ik);EXe=r(ejr,"LukeConfig"),ejr.forEach(t),CXe=r(f3e," (LUKE model)"),f3e.forEach(t),wXe=i(L),cf=n(L,"LI",{});var g3e=s(cf);Uee=n(g3e,"STRONG",{});var ojr=s(Uee);AXe=r(ojr,"lxmert"),ojr.forEach(t),yXe=r(g3e," \u2014 "),dk=n(g3e,"A",{href:!0});var rjr=s(dk);LXe=r(rjr,"LxmertConfig"),rjr.forEach(t),xXe=r(g3e," (LXMERT model)"),g3e.forEach(t),$Xe=i(L),mf=n(L,"LI",{});var h3e=s(mf);Jee=n(h3e,"STRONG",{});var tjr=s(Jee);kXe=r(tjr,"m2m_100"),tjr.forEach(t),SXe=r(h3e," \u2014 "),ck=n(h3e,"A",{href:!0});var ajr=s(ck);RXe=r(ajr,"M2M100Config"),ajr.forEach(t),BXe=r(h3e," (M2M100 model)"),h3e.forEach(t),PXe=i(L),ff=n(L,"LI",{});var u3e=s(ff);Yee=n(u3e,"STRONG",{});var njr=s(Yee);IXe=r(njr,"marian"),njr.forEach(t),qXe=r(u3e," \u2014 "),mk=n(u3e,"A",{href:!0});var sjr=s(mk);NXe=r(sjr,"MarianConfig"),sjr.forEach(t),jXe=r(u3e," (Marian model)"),u3e.forEach(t),DXe=i(L),gf=n(L,"LI",{});var p3e=s(gf);Kee=n(p3e,"STRONG",{});var ljr=s(Kee);GXe=r(ljr,"maskformer"),ljr.forEach(t),OXe=r(p3e," \u2014 "),fk=n(p3e,"A",{href:!0});var ijr=s(fk);VXe=r(ijr,"MaskFormerConfig"),ijr.forEach(t),XXe=r(p3e," (MaskFormer model)"),p3e.forEach(t),zXe=i(L),hf=n(L,"LI",{});var _3e=s(hf);Zee=n(_3e,"STRONG",{});var djr=s(Zee);QXe=r(djr,"mbart"),djr.forEach(t),WXe=r(_3e," \u2014 "),gk=n(_3e,"A",{href:!0});var cjr=s(gk);HXe=r(cjr,"MBartConfig"),cjr.forEach(t),UXe=r(_3e," (mBART model)"),_3e.forEach(t),JXe=i(L),uf=n(L,"LI",{});var b3e=s(uf);eoe=n(b3e,"STRONG",{});var mjr=s(eoe);YXe=r(mjr,"megatron-bert"),mjr.forEach(t),KXe=r(b3e," \u2014 "),hk=n(b3e,"A",{href:!0});var fjr=s(hk);ZXe=r(fjr,"MegatronBertConfig"),fjr.forEach(t),eze=r(b3e," (MegatronBert model)"),b3e.forEach(t),oze=i(L),pf=n(L,"LI",{});var F3e=s(pf);ooe=n(F3e,"STRONG",{});var gjr=s(ooe);rze=r(gjr,"mobilebert"),gjr.forEach(t),tze=r(F3e," \u2014 "),uk=n(F3e,"A",{href:!0});var hjr=s(uk);aze=r(hjr,"MobileBertConfig"),hjr.forEach(t),nze=r(F3e," (MobileBERT model)"),F3e.forEach(t),sze=i(L),_f=n(L,"LI",{});var v3e=s(_f);roe=n(v3e,"STRONG",{});var ujr=s(roe);lze=r(ujr,"mpnet"),ujr.forEach(t),ize=r(v3e," \u2014 "),pk=n(v3e,"A",{href:!0});var pjr=s(pk);dze=r(pjr,"MPNetConfig"),pjr.forEach(t),cze=r(v3e," (MPNet model)"),v3e.forEach(t),mze=i(L),bf=n(L,"LI",{});var T3e=s(bf);toe=n(T3e,"STRONG",{});var _jr=s(toe);fze=r(_jr,"mt5"),_jr.forEach(t),gze=r(T3e," \u2014 "),_k=n(T3e,"A",{href:!0});var bjr=s(_k);hze=r(bjr,"MT5Config"),bjr.forEach(t),uze=r(T3e," (mT5 model)"),T3e.forEach(t),pze=i(L),Ff=n(L,"LI",{});var M3e=s(Ff);aoe=n(M3e,"STRONG",{});var Fjr=s(aoe);_ze=r(Fjr,"nystromformer"),Fjr.forEach(t),bze=r(M3e," \u2014 "),bk=n(M3e,"A",{href:!0});var vjr=s(bk);Fze=r(vjr,"NystromformerConfig"),vjr.forEach(t),vze=r(M3e," (Nystromformer model)"),M3e.forEach(t),Tze=i(L),vf=n(L,"LI",{});var E3e=s(vf);noe=n(E3e,"STRONG",{});var Tjr=s(noe);Mze=r(Tjr,"openai-gpt"),Tjr.forEach(t),Eze=r(E3e," \u2014 "),Fk=n(E3e,"A",{href:!0});var Mjr=s(Fk);Cze=r(Mjr,"OpenAIGPTConfig"),Mjr.forEach(t),wze=r(E3e," (OpenAI GPT model)"),E3e.forEach(t),Aze=i(L),Tf=n(L,"LI",{});var C3e=s(Tf);soe=n(C3e,"STRONG",{});var Ejr=s(soe);yze=r(Ejr,"opt"),Ejr.forEach(t),Lze=r(C3e," \u2014 "),vk=n(C3e,"A",{href:!0});var Cjr=s(vk);xze=r(Cjr,"OPTConfig"),Cjr.forEach(t),$ze=r(C3e," (OPT model)"),C3e.forEach(t),kze=i(L),Mf=n(L,"LI",{});var w3e=s(Mf);loe=n(w3e,"STRONG",{});var wjr=s(loe);Sze=r(wjr,"pegasus"),wjr.forEach(t),Rze=r(w3e," \u2014 "),Tk=n(w3e,"A",{href:!0});var Ajr=s(Tk);Bze=r(Ajr,"PegasusConfig"),Ajr.forEach(t),Pze=r(w3e," (Pegasus model)"),w3e.forEach(t),Ize=i(L),Ef=n(L,"LI",{});var A3e=s(Ef);ioe=n(A3e,"STRONG",{});var yjr=s(ioe);qze=r(yjr,"perceiver"),yjr.forEach(t),Nze=r(A3e," \u2014 "),Mk=n(A3e,"A",{href:!0});var Ljr=s(Mk);jze=r(Ljr,"PerceiverConfig"),Ljr.forEach(t),Dze=r(A3e," (Perceiver model)"),A3e.forEach(t),Gze=i(L),Cf=n(L,"LI",{});var y3e=s(Cf);doe=n(y3e,"STRONG",{});var xjr=s(doe);Oze=r(xjr,"plbart"),xjr.forEach(t),Vze=r(y3e," \u2014 "),Ek=n(y3e,"A",{href:!0});var $jr=s(Ek);Xze=r($jr,"PLBartConfig"),$jr.forEach(t),zze=r(y3e," (PLBart model)"),y3e.forEach(t),Qze=i(L),wf=n(L,"LI",{});var L3e=s(wf);coe=n(L3e,"STRONG",{});var kjr=s(coe);Wze=r(kjr,"poolformer"),kjr.forEach(t),Hze=r(L3e," \u2014 "),Ck=n(L3e,"A",{href:!0});var Sjr=s(Ck);Uze=r(Sjr,"PoolFormerConfig"),Sjr.forEach(t),Jze=r(L3e," (PoolFormer model)"),L3e.forEach(t),Yze=i(L),Af=n(L,"LI",{});var x3e=s(Af);moe=n(x3e,"STRONG",{});var Rjr=s(moe);Kze=r(Rjr,"prophetnet"),Rjr.forEach(t),Zze=r(x3e," \u2014 "),wk=n(x3e,"A",{href:!0});var Bjr=s(wk);eQe=r(Bjr,"ProphetNetConfig"),Bjr.forEach(t),oQe=r(x3e," (ProphetNet model)"),x3e.forEach(t),rQe=i(L),yf=n(L,"LI",{});var $3e=s(yf);foe=n($3e,"STRONG",{});var Pjr=s(foe);tQe=r(Pjr,"qdqbert"),Pjr.forEach(t),aQe=r($3e," \u2014 "),Ak=n($3e,"A",{href:!0});var Ijr=s(Ak);nQe=r(Ijr,"QDQBertConfig"),Ijr.forEach(t),sQe=r($3e," (QDQBert model)"),$3e.forEach(t),lQe=i(L),Lf=n(L,"LI",{});var k3e=s(Lf);goe=n(k3e,"STRONG",{});var qjr=s(goe);iQe=r(qjr,"rag"),qjr.forEach(t),dQe=r(k3e," \u2014 "),yk=n(k3e,"A",{href:!0});var Njr=s(yk);cQe=r(Njr,"RagConfig"),Njr.forEach(t),mQe=r(k3e," (RAG model)"),k3e.forEach(t),fQe=i(L),xf=n(L,"LI",{});var S3e=s(xf);hoe=n(S3e,"STRONG",{});var jjr=s(hoe);gQe=r(jjr,"realm"),jjr.forEach(t),hQe=r(S3e," \u2014 "),Lk=n(S3e,"A",{href:!0});var Djr=s(Lk);uQe=r(Djr,"RealmConfig"),Djr.forEach(t),pQe=r(S3e," (Realm model)"),S3e.forEach(t),_Qe=i(L),$f=n(L,"LI",{});var R3e=s($f);uoe=n(R3e,"STRONG",{});var Gjr=s(uoe);bQe=r(Gjr,"reformer"),Gjr.forEach(t),FQe=r(R3e," \u2014 "),xk=n(R3e,"A",{href:!0});var Ojr=s(xk);vQe=r(Ojr,"ReformerConfig"),Ojr.forEach(t),TQe=r(R3e," (Reformer model)"),R3e.forEach(t),MQe=i(L),kf=n(L,"LI",{});var B3e=s(kf);poe=n(B3e,"STRONG",{});var Vjr=s(poe);EQe=r(Vjr,"regnet"),Vjr.forEach(t),CQe=r(B3e," \u2014 "),$k=n(B3e,"A",{href:!0});var Xjr=s($k);wQe=r(Xjr,"RegNetConfig"),Xjr.forEach(t),AQe=r(B3e," (RegNet model)"),B3e.forEach(t),yQe=i(L),Sf=n(L,"LI",{});var P3e=s(Sf);_oe=n(P3e,"STRONG",{});var zjr=s(_oe);LQe=r(zjr,"rembert"),zjr.forEach(t),xQe=r(P3e," \u2014 "),kk=n(P3e,"A",{href:!0});var Qjr=s(kk);$Qe=r(Qjr,"RemBertConfig"),Qjr.forEach(t),kQe=r(P3e," (RemBERT model)"),P3e.forEach(t),SQe=i(L),Rf=n(L,"LI",{});var I3e=s(Rf);boe=n(I3e,"STRONG",{});var Wjr=s(boe);RQe=r(Wjr,"resnet"),Wjr.forEach(t),BQe=r(I3e," \u2014 "),Sk=n(I3e,"A",{href:!0});var Hjr=s(Sk);PQe=r(Hjr,"ResNetConfig"),Hjr.forEach(t),IQe=r(I3e," (ResNet model)"),I3e.forEach(t),qQe=i(L),Bf=n(L,"LI",{});var q3e=s(Bf);Foe=n(q3e,"STRONG",{});var Ujr=s(Foe);NQe=r(Ujr,"retribert"),Ujr.forEach(t),jQe=r(q3e," \u2014 "),Rk=n(q3e,"A",{href:!0});var Jjr=s(Rk);DQe=r(Jjr,"RetriBertConfig"),Jjr.forEach(t),GQe=r(q3e," (RetriBERT model)"),q3e.forEach(t),OQe=i(L),Pf=n(L,"LI",{});var N3e=s(Pf);voe=n(N3e,"STRONG",{});var Yjr=s(voe);VQe=r(Yjr,"roberta"),Yjr.forEach(t),XQe=r(N3e," \u2014 "),Bk=n(N3e,"A",{href:!0});var Kjr=s(Bk);zQe=r(Kjr,"RobertaConfig"),Kjr.forEach(t),QQe=r(N3e," (RoBERTa model)"),N3e.forEach(t),WQe=i(L),If=n(L,"LI",{});var j3e=s(If);Toe=n(j3e,"STRONG",{});var Zjr=s(Toe);HQe=r(Zjr,"roformer"),Zjr.forEach(t),UQe=r(j3e," \u2014 "),Pk=n(j3e,"A",{href:!0});var eDr=s(Pk);JQe=r(eDr,"RoFormerConfig"),eDr.forEach(t),YQe=r(j3e," (RoFormer model)"),j3e.forEach(t),KQe=i(L),qf=n(L,"LI",{});var D3e=s(qf);Moe=n(D3e,"STRONG",{});var oDr=s(Moe);ZQe=r(oDr,"segformer"),oDr.forEach(t),eWe=r(D3e," \u2014 "),Ik=n(D3e,"A",{href:!0});var rDr=s(Ik);oWe=r(rDr,"SegformerConfig"),rDr.forEach(t),rWe=r(D3e," (SegFormer model)"),D3e.forEach(t),tWe=i(L),Nf=n(L,"LI",{});var G3e=s(Nf);Eoe=n(G3e,"STRONG",{});var tDr=s(Eoe);aWe=r(tDr,"sew"),tDr.forEach(t),nWe=r(G3e," \u2014 "),qk=n(G3e,"A",{href:!0});var aDr=s(qk);sWe=r(aDr,"SEWConfig"),aDr.forEach(t),lWe=r(G3e," (SEW model)"),G3e.forEach(t),iWe=i(L),jf=n(L,"LI",{});var O3e=s(jf);Coe=n(O3e,"STRONG",{});var nDr=s(Coe);dWe=r(nDr,"sew-d"),nDr.forEach(t),cWe=r(O3e," \u2014 "),Nk=n(O3e,"A",{href:!0});var sDr=s(Nk);mWe=r(sDr,"SEWDConfig"),sDr.forEach(t),fWe=r(O3e," (SEW-D model)"),O3e.forEach(t),gWe=i(L),Df=n(L,"LI",{});var V3e=s(Df);woe=n(V3e,"STRONG",{});var lDr=s(woe);hWe=r(lDr,"speech-encoder-decoder"),lDr.forEach(t),uWe=r(V3e," \u2014 "),jk=n(V3e,"A",{href:!0});var iDr=s(jk);pWe=r(iDr,"SpeechEncoderDecoderConfig"),iDr.forEach(t),_We=r(V3e," (Speech Encoder decoder model)"),V3e.forEach(t),bWe=i(L),Gf=n(L,"LI",{});var X3e=s(Gf);Aoe=n(X3e,"STRONG",{});var dDr=s(Aoe);FWe=r(dDr,"speech_to_text"),dDr.forEach(t),vWe=r(X3e," \u2014 "),Dk=n(X3e,"A",{href:!0});var cDr=s(Dk);TWe=r(cDr,"Speech2TextConfig"),cDr.forEach(t),MWe=r(X3e," (Speech2Text model)"),X3e.forEach(t),EWe=i(L),Of=n(L,"LI",{});var z3e=s(Of);yoe=n(z3e,"STRONG",{});var mDr=s(yoe);CWe=r(mDr,"speech_to_text_2"),mDr.forEach(t),wWe=r(z3e," \u2014 "),Gk=n(z3e,"A",{href:!0});var fDr=s(Gk);AWe=r(fDr,"Speech2Text2Config"),fDr.forEach(t),yWe=r(z3e," (Speech2Text2 model)"),z3e.forEach(t),LWe=i(L),Vf=n(L,"LI",{});var Q3e=s(Vf);Loe=n(Q3e,"STRONG",{});var gDr=s(Loe);xWe=r(gDr,"splinter"),gDr.forEach(t),$We=r(Q3e," \u2014 "),Ok=n(Q3e,"A",{href:!0});var hDr=s(Ok);kWe=r(hDr,"SplinterConfig"),hDr.forEach(t),SWe=r(Q3e," (Splinter model)"),Q3e.forEach(t),RWe=i(L),Xf=n(L,"LI",{});var W3e=s(Xf);xoe=n(W3e,"STRONG",{});var uDr=s(xoe);BWe=r(uDr,"squeezebert"),uDr.forEach(t),PWe=r(W3e," \u2014 "),Vk=n(W3e,"A",{href:!0});var pDr=s(Vk);IWe=r(pDr,"SqueezeBertConfig"),pDr.forEach(t),qWe=r(W3e," (SqueezeBERT model)"),W3e.forEach(t),NWe=i(L),zf=n(L,"LI",{});var H3e=s(zf);$oe=n(H3e,"STRONG",{});var _Dr=s($oe);jWe=r(_Dr,"swin"),_Dr.forEach(t),DWe=r(H3e," \u2014 "),Xk=n(H3e,"A",{href:!0});var bDr=s(Xk);GWe=r(bDr,"SwinConfig"),bDr.forEach(t),OWe=r(H3e," (Swin model)"),H3e.forEach(t),VWe=i(L),Qf=n(L,"LI",{});var U3e=s(Qf);koe=n(U3e,"STRONG",{});var FDr=s(koe);XWe=r(FDr,"t5"),FDr.forEach(t),zWe=r(U3e," \u2014 "),zk=n(U3e,"A",{href:!0});var vDr=s(zk);QWe=r(vDr,"T5Config"),vDr.forEach(t),WWe=r(U3e," (T5 model)"),U3e.forEach(t),HWe=i(L),Wf=n(L,"LI",{});var J3e=s(Wf);Soe=n(J3e,"STRONG",{});var TDr=s(Soe);UWe=r(TDr,"tapas"),TDr.forEach(t),JWe=r(J3e," \u2014 "),Qk=n(J3e,"A",{href:!0});var MDr=s(Qk);YWe=r(MDr,"TapasConfig"),MDr.forEach(t),KWe=r(J3e," (TAPAS model)"),J3e.forEach(t),ZWe=i(L),Hf=n(L,"LI",{});var Y3e=s(Hf);Roe=n(Y3e,"STRONG",{});var EDr=s(Roe);eHe=r(EDr,"transfo-xl"),EDr.forEach(t),oHe=r(Y3e," \u2014 "),Wk=n(Y3e,"A",{href:!0});var CDr=s(Wk);rHe=r(CDr,"TransfoXLConfig"),CDr.forEach(t),tHe=r(Y3e," (Transformer-XL model)"),Y3e.forEach(t),aHe=i(L),Uf=n(L,"LI",{});var K3e=s(Uf);Boe=n(K3e,"STRONG",{});var wDr=s(Boe);nHe=r(wDr,"trocr"),wDr.forEach(t),sHe=r(K3e," \u2014 "),Hk=n(K3e,"A",{href:!0});var ADr=s(Hk);lHe=r(ADr,"TrOCRConfig"),ADr.forEach(t),iHe=r(K3e," (TrOCR model)"),K3e.forEach(t),dHe=i(L),Jf=n(L,"LI",{});var Z3e=s(Jf);Poe=n(Z3e,"STRONG",{});var yDr=s(Poe);cHe=r(yDr,"unispeech"),yDr.forEach(t),mHe=r(Z3e," \u2014 "),Uk=n(Z3e,"A",{href:!0});var LDr=s(Uk);fHe=r(LDr,"UniSpeechConfig"),LDr.forEach(t),gHe=r(Z3e," (UniSpeech model)"),Z3e.forEach(t),hHe=i(L),Yf=n(L,"LI",{});var ewe=s(Yf);Ioe=n(ewe,"STRONG",{});var xDr=s(Ioe);uHe=r(xDr,"unispeech-sat"),xDr.forEach(t),pHe=r(ewe," \u2014 "),Jk=n(ewe,"A",{href:!0});var $Dr=s(Jk);_He=r($Dr,"UniSpeechSatConfig"),$Dr.forEach(t),bHe=r(ewe," (UniSpeechSat model)"),ewe.forEach(t),FHe=i(L),Kf=n(L,"LI",{});var owe=s(Kf);qoe=n(owe,"STRONG",{});var kDr=s(qoe);vHe=r(kDr,"van"),kDr.forEach(t),THe=r(owe," \u2014 "),Yk=n(owe,"A",{href:!0});var SDr=s(Yk);MHe=r(SDr,"VanConfig"),SDr.forEach(t),EHe=r(owe," (VAN model)"),owe.forEach(t),CHe=i(L),Zf=n(L,"LI",{});var rwe=s(Zf);Noe=n(rwe,"STRONG",{});var RDr=s(Noe);wHe=r(RDr,"vilt"),RDr.forEach(t),AHe=r(rwe," \u2014 "),Kk=n(rwe,"A",{href:!0});var BDr=s(Kk);yHe=r(BDr,"ViltConfig"),BDr.forEach(t),LHe=r(rwe," (ViLT model)"),rwe.forEach(t),xHe=i(L),eg=n(L,"LI",{});var twe=s(eg);joe=n(twe,"STRONG",{});var PDr=s(joe);$He=r(PDr,"vision-encoder-decoder"),PDr.forEach(t),kHe=r(twe," \u2014 "),Zk=n(twe,"A",{href:!0});var IDr=s(Zk);SHe=r(IDr,"VisionEncoderDecoderConfig"),IDr.forEach(t),RHe=r(twe," (Vision Encoder decoder model)"),twe.forEach(t),BHe=i(L),og=n(L,"LI",{});var awe=s(og);Doe=n(awe,"STRONG",{});var qDr=s(Doe);PHe=r(qDr,"vision-text-dual-encoder"),qDr.forEach(t),IHe=r(awe," \u2014 "),eS=n(awe,"A",{href:!0});var NDr=s(eS);qHe=r(NDr,"VisionTextDualEncoderConfig"),NDr.forEach(t),NHe=r(awe," (VisionTextDualEncoder model)"),awe.forEach(t),jHe=i(L),rg=n(L,"LI",{});var nwe=s(rg);Goe=n(nwe,"STRONG",{});var jDr=s(Goe);DHe=r(jDr,"visual_bert"),jDr.forEach(t),GHe=r(nwe," \u2014 "),oS=n(nwe,"A",{href:!0});var DDr=s(oS);OHe=r(DDr,"VisualBertConfig"),DDr.forEach(t),VHe=r(nwe," (VisualBert model)"),nwe.forEach(t),XHe=i(L),tg=n(L,"LI",{});var swe=s(tg);Ooe=n(swe,"STRONG",{});var GDr=s(Ooe);zHe=r(GDr,"vit"),GDr.forEach(t),QHe=r(swe," \u2014 "),rS=n(swe,"A",{href:!0});var ODr=s(rS);WHe=r(ODr,"ViTConfig"),ODr.forEach(t),HHe=r(swe," (ViT model)"),swe.forEach(t),UHe=i(L),ag=n(L,"LI",{});var lwe=s(ag);Voe=n(lwe,"STRONG",{});var VDr=s(Voe);JHe=r(VDr,"vit_mae"),VDr.forEach(t),YHe=r(lwe," \u2014 "),tS=n(lwe,"A",{href:!0});var XDr=s(tS);KHe=r(XDr,"ViTMAEConfig"),XDr.forEach(t),ZHe=r(lwe," (ViTMAE model)"),lwe.forEach(t),eUe=i(L),ng=n(L,"LI",{});var iwe=s(ng);Xoe=n(iwe,"STRONG",{});var zDr=s(Xoe);oUe=r(zDr,"wav2vec2"),zDr.forEach(t),rUe=r(iwe," \u2014 "),aS=n(iwe,"A",{href:!0});var QDr=s(aS);tUe=r(QDr,"Wav2Vec2Config"),QDr.forEach(t),aUe=r(iwe," (Wav2Vec2 model)"),iwe.forEach(t),nUe=i(L),sg=n(L,"LI",{});var dwe=s(sg);zoe=n(dwe,"STRONG",{});var WDr=s(zoe);sUe=r(WDr,"wavlm"),WDr.forEach(t),lUe=r(dwe," \u2014 "),nS=n(dwe,"A",{href:!0});var HDr=s(nS);iUe=r(HDr,"WavLMConfig"),HDr.forEach(t),dUe=r(dwe," (WavLM model)"),dwe.forEach(t),cUe=i(L),lg=n(L,"LI",{});var cwe=s(lg);Qoe=n(cwe,"STRONG",{});var UDr=s(Qoe);mUe=r(UDr,"xglm"),UDr.forEach(t),fUe=r(cwe," \u2014 "),sS=n(cwe,"A",{href:!0});var JDr=s(sS);gUe=r(JDr,"XGLMConfig"),JDr.forEach(t),hUe=r(cwe," (XGLM model)"),cwe.forEach(t),uUe=i(L),ig=n(L,"LI",{});var mwe=s(ig);Woe=n(mwe,"STRONG",{});var YDr=s(Woe);pUe=r(YDr,"xlm"),YDr.forEach(t),_Ue=r(mwe," \u2014 "),lS=n(mwe,"A",{href:!0});var KDr=s(lS);bUe=r(KDr,"XLMConfig"),KDr.forEach(t),FUe=r(mwe," (XLM model)"),mwe.forEach(t),vUe=i(L),dg=n(L,"LI",{});var fwe=s(dg);Hoe=n(fwe,"STRONG",{});var ZDr=s(Hoe);TUe=r(ZDr,"xlm-prophetnet"),ZDr.forEach(t),MUe=r(fwe," \u2014 "),iS=n(fwe,"A",{href:!0});var eGr=s(iS);EUe=r(eGr,"XLMProphetNetConfig"),eGr.forEach(t),CUe=r(fwe," (XLMProphetNet model)"),fwe.forEach(t),wUe=i(L),cg=n(L,"LI",{});var gwe=s(cg);Uoe=n(gwe,"STRONG",{});var oGr=s(Uoe);AUe=r(oGr,"xlm-roberta"),oGr.forEach(t),yUe=r(gwe," \u2014 "),dS=n(gwe,"A",{href:!0});var rGr=s(dS);LUe=r(rGr,"XLMRobertaConfig"),rGr.forEach(t),xUe=r(gwe," (XLM-RoBERTa model)"),gwe.forEach(t),$Ue=i(L),mg=n(L,"LI",{});var hwe=s(mg);Joe=n(hwe,"STRONG",{});var tGr=s(Joe);kUe=r(tGr,"xlm-roberta-xl"),tGr.forEach(t),SUe=r(hwe," \u2014 "),cS=n(hwe,"A",{href:!0});var aGr=s(cS);RUe=r(aGr,"XLMRobertaXLConfig"),aGr.forEach(t),BUe=r(hwe," (XLM-RoBERTa-XL model)"),hwe.forEach(t),PUe=i(L),fg=n(L,"LI",{});var uwe=s(fg);Yoe=n(uwe,"STRONG",{});var nGr=s(Yoe);IUe=r(nGr,"xlnet"),nGr.forEach(t),qUe=r(uwe," \u2014 "),mS=n(uwe,"A",{href:!0});var sGr=s(mS);NUe=r(sGr,"XLNetConfig"),sGr.forEach(t),jUe=r(uwe," (XLNet model)"),uwe.forEach(t),DUe=i(L),gg=n(L,"LI",{});var pwe=s(gg);Koe=n(pwe,"STRONG",{});var lGr=s(Koe);GUe=r(lGr,"yolos"),lGr.forEach(t),OUe=r(pwe," \u2014 "),fS=n(pwe,"A",{href:!0});var iGr=s(fS);VUe=r(iGr,"YolosConfig"),iGr.forEach(t),XUe=r(pwe," (YOLOS model)"),pwe.forEach(t),zUe=i(L),hg=n(L,"LI",{});var _we=s(hg);Zoe=n(_we,"STRONG",{});var dGr=s(Zoe);QUe=r(dGr,"yoso"),dGr.forEach(t),WUe=r(_we," \u2014 "),gS=n(_we,"A",{href:!0});var cGr=s(gS);HUe=r(cGr,"YosoConfig"),cGr.forEach(t),UUe=r(_we," (YOSO model)"),_we.forEach(t),L.forEach(t),JUe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),YUe=i(Kr),pg=n(Kr,"DIV",{class:!0});var Pqe=s(pg);T(oy.$$.fragment,Pqe),KUe=i(Pqe),ere=n(Pqe,"P",{});var mGr=s(ere);ZUe=r(mGr,"Register a new configuration for this class."),mGr.forEach(t),Pqe.forEach(t),Kr.forEach(t),NPe=i(m),_i=n(m,"H2",{class:!0});var Iqe=s(_i);_g=n(Iqe,"A",{id:!0,class:!0,href:!0});var fGr=s(_g);ore=n(fGr,"SPAN",{});var gGr=s(ore);T(ry.$$.fragment,gGr),gGr.forEach(t),fGr.forEach(t),eJe=i(Iqe),rre=n(Iqe,"SPAN",{});var hGr=s(rre);oJe=r(hGr,"AutoTokenizer"),hGr.forEach(t),Iqe.forEach(t),jPe=i(m),wo=n(m,"DIV",{class:!0});var Ps=s(wo);T(ty.$$.fragment,Ps),rJe=i(Ps),ay=n(Ps,"P",{});var qqe=s(ay);tJe=r(qqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),hS=n(qqe,"A",{href:!0});var uGr=s(hS);aJe=r(uGr,"AutoTokenizer.from_pretrained()"),uGr.forEach(t),nJe=r(qqe," class method."),qqe.forEach(t),sJe=i(Ps),ny=n(Ps,"P",{});var Nqe=s(ny);lJe=r(Nqe,"This class cannot be instantiated directly using "),tre=n(Nqe,"CODE",{});var pGr=s(tre);iJe=r(pGr,"__init__()"),pGr.forEach(t),dJe=r(Nqe," (throws an error)."),Nqe.forEach(t),cJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(sy.$$.fragment,Is),mJe=i(Is),are=n(Is,"P",{});var _Gr=s(are);fJe=r(_Gr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_Gr.forEach(t),gJe=i(Is),Ca=n(Is,"P",{});var UA=s(Ca);hJe=r(UA,"The tokenizer class to instantiate is selected based on the "),nre=n(UA,"CODE",{});var bGr=s(nre);uJe=r(bGr,"model_type"),bGr.forEach(t),pJe=r(UA,` property of the config object (either
passed as an argument or loaded from `),sre=n(UA,"CODE",{});var FGr=s(sre);_Je=r(FGr,"pretrained_model_name_or_path"),FGr.forEach(t),bJe=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lre=n(UA,"CODE",{});var vGr=s(lre);FJe=r(vGr,"pretrained_model_name_or_path"),vGr.forEach(t),vJe=r(UA,":"),UA.forEach(t),TJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var l9=s(kn);ire=n(l9,"STRONG",{});var TGr=s(ire);MJe=r(TGr,"albert"),TGr.forEach(t),EJe=r(l9," \u2014 "),uS=n(l9,"A",{href:!0});var MGr=s(uS);CJe=r(MGr,"AlbertTokenizer"),MGr.forEach(t),wJe=r(l9," or "),pS=n(l9,"A",{href:!0});var EGr=s(pS);AJe=r(EGr,"AlbertTokenizerFast"),EGr.forEach(t),yJe=r(l9," (ALBERT model)"),l9.forEach(t),LJe=i(S),Sn=n(S,"LI",{});var i9=s(Sn);dre=n(i9,"STRONG",{});var CGr=s(dre);xJe=r(CGr,"bart"),CGr.forEach(t),$Je=r(i9," \u2014 "),_S=n(i9,"A",{href:!0});var wGr=s(_S);kJe=r(wGr,"BartTokenizer"),wGr.forEach(t),SJe=r(i9," or "),bS=n(i9,"A",{href:!0});var AGr=s(bS);RJe=r(AGr,"BartTokenizerFast"),AGr.forEach(t),BJe=r(i9," (BART model)"),i9.forEach(t),PJe=i(S),Rn=n(S,"LI",{});var d9=s(Rn);cre=n(d9,"STRONG",{});var yGr=s(cre);IJe=r(yGr,"barthez"),yGr.forEach(t),qJe=r(d9," \u2014 "),FS=n(d9,"A",{href:!0});var LGr=s(FS);NJe=r(LGr,"BarthezTokenizer"),LGr.forEach(t),jJe=r(d9," or "),vS=n(d9,"A",{href:!0});var xGr=s(vS);DJe=r(xGr,"BarthezTokenizerFast"),xGr.forEach(t),GJe=r(d9," (BARThez model)"),d9.forEach(t),OJe=i(S),bg=n(S,"LI",{});var bwe=s(bg);mre=n(bwe,"STRONG",{});var $Gr=s(mre);VJe=r($Gr,"bartpho"),$Gr.forEach(t),XJe=r(bwe," \u2014 "),TS=n(bwe,"A",{href:!0});var kGr=s(TS);zJe=r(kGr,"BartphoTokenizer"),kGr.forEach(t),QJe=r(bwe," (BARTpho model)"),bwe.forEach(t),WJe=i(S),Bn=n(S,"LI",{});var c9=s(Bn);fre=n(c9,"STRONG",{});var SGr=s(fre);HJe=r(SGr,"bert"),SGr.forEach(t),UJe=r(c9," \u2014 "),MS=n(c9,"A",{href:!0});var RGr=s(MS);JJe=r(RGr,"BertTokenizer"),RGr.forEach(t),YJe=r(c9," or "),ES=n(c9,"A",{href:!0});var BGr=s(ES);KJe=r(BGr,"BertTokenizerFast"),BGr.forEach(t),ZJe=r(c9," (BERT model)"),c9.forEach(t),eYe=i(S),Fg=n(S,"LI",{});var Fwe=s(Fg);gre=n(Fwe,"STRONG",{});var PGr=s(gre);oYe=r(PGr,"bert-generation"),PGr.forEach(t),rYe=r(Fwe," \u2014 "),CS=n(Fwe,"A",{href:!0});var IGr=s(CS);tYe=r(IGr,"BertGenerationTokenizer"),IGr.forEach(t),aYe=r(Fwe," (Bert Generation model)"),Fwe.forEach(t),nYe=i(S),vg=n(S,"LI",{});var vwe=s(vg);hre=n(vwe,"STRONG",{});var qGr=s(hre);sYe=r(qGr,"bert-japanese"),qGr.forEach(t),lYe=r(vwe," \u2014 "),wS=n(vwe,"A",{href:!0});var NGr=s(wS);iYe=r(NGr,"BertJapaneseTokenizer"),NGr.forEach(t),dYe=r(vwe," (BertJapanese model)"),vwe.forEach(t),cYe=i(S),Tg=n(S,"LI",{});var Twe=s(Tg);ure=n(Twe,"STRONG",{});var jGr=s(ure);mYe=r(jGr,"bertweet"),jGr.forEach(t),fYe=r(Twe," \u2014 "),AS=n(Twe,"A",{href:!0});var DGr=s(AS);gYe=r(DGr,"BertweetTokenizer"),DGr.forEach(t),hYe=r(Twe," (Bertweet model)"),Twe.forEach(t),uYe=i(S),Pn=n(S,"LI",{});var m9=s(Pn);pre=n(m9,"STRONG",{});var GGr=s(pre);pYe=r(GGr,"big_bird"),GGr.forEach(t),_Ye=r(m9," \u2014 "),yS=n(m9,"A",{href:!0});var OGr=s(yS);bYe=r(OGr,"BigBirdTokenizer"),OGr.forEach(t),FYe=r(m9," or "),LS=n(m9,"A",{href:!0});var VGr=s(LS);vYe=r(VGr,"BigBirdTokenizerFast"),VGr.forEach(t),TYe=r(m9," (BigBird model)"),m9.forEach(t),MYe=i(S),In=n(S,"LI",{});var f9=s(In);_re=n(f9,"STRONG",{});var XGr=s(_re);EYe=r(XGr,"bigbird_pegasus"),XGr.forEach(t),CYe=r(f9," \u2014 "),xS=n(f9,"A",{href:!0});var zGr=s(xS);wYe=r(zGr,"PegasusTokenizer"),zGr.forEach(t),AYe=r(f9," or "),$S=n(f9,"A",{href:!0});var QGr=s($S);yYe=r(QGr,"PegasusTokenizerFast"),QGr.forEach(t),LYe=r(f9," (BigBirdPegasus model)"),f9.forEach(t),xYe=i(S),qn=n(S,"LI",{});var g9=s(qn);bre=n(g9,"STRONG",{});var WGr=s(bre);$Ye=r(WGr,"blenderbot"),WGr.forEach(t),kYe=r(g9," \u2014 "),kS=n(g9,"A",{href:!0});var HGr=s(kS);SYe=r(HGr,"BlenderbotTokenizer"),HGr.forEach(t),RYe=r(g9," or "),SS=n(g9,"A",{href:!0});var UGr=s(SS);BYe=r(UGr,"BlenderbotTokenizerFast"),UGr.forEach(t),PYe=r(g9," (Blenderbot model)"),g9.forEach(t),IYe=i(S),Mg=n(S,"LI",{});var Mwe=s(Mg);Fre=n(Mwe,"STRONG",{});var JGr=s(Fre);qYe=r(JGr,"blenderbot-small"),JGr.forEach(t),NYe=r(Mwe," \u2014 "),RS=n(Mwe,"A",{href:!0});var YGr=s(RS);jYe=r(YGr,"BlenderbotSmallTokenizer"),YGr.forEach(t),DYe=r(Mwe," (BlenderbotSmall model)"),Mwe.forEach(t),GYe=i(S),Eg=n(S,"LI",{});var Ewe=s(Eg);vre=n(Ewe,"STRONG",{});var KGr=s(vre);OYe=r(KGr,"byt5"),KGr.forEach(t),VYe=r(Ewe," \u2014 "),BS=n(Ewe,"A",{href:!0});var ZGr=s(BS);XYe=r(ZGr,"ByT5Tokenizer"),ZGr.forEach(t),zYe=r(Ewe," (ByT5 model)"),Ewe.forEach(t),QYe=i(S),Nn=n(S,"LI",{});var h9=s(Nn);Tre=n(h9,"STRONG",{});var eOr=s(Tre);WYe=r(eOr,"camembert"),eOr.forEach(t),HYe=r(h9," \u2014 "),PS=n(h9,"A",{href:!0});var oOr=s(PS);UYe=r(oOr,"CamembertTokenizer"),oOr.forEach(t),JYe=r(h9," or "),IS=n(h9,"A",{href:!0});var rOr=s(IS);YYe=r(rOr,"CamembertTokenizerFast"),rOr.forEach(t),KYe=r(h9," (CamemBERT model)"),h9.forEach(t),ZYe=i(S),Cg=n(S,"LI",{});var Cwe=s(Cg);Mre=n(Cwe,"STRONG",{});var tOr=s(Mre);eKe=r(tOr,"canine"),tOr.forEach(t),oKe=r(Cwe," \u2014 "),qS=n(Cwe,"A",{href:!0});var aOr=s(qS);rKe=r(aOr,"CanineTokenizer"),aOr.forEach(t),tKe=r(Cwe," (Canine model)"),Cwe.forEach(t),aKe=i(S),jn=n(S,"LI",{});var u9=s(jn);Ere=n(u9,"STRONG",{});var nOr=s(Ere);nKe=r(nOr,"clip"),nOr.forEach(t),sKe=r(u9," \u2014 "),NS=n(u9,"A",{href:!0});var sOr=s(NS);lKe=r(sOr,"CLIPTokenizer"),sOr.forEach(t),iKe=r(u9," or "),jS=n(u9,"A",{href:!0});var lOr=s(jS);dKe=r(lOr,"CLIPTokenizerFast"),lOr.forEach(t),cKe=r(u9," (CLIP model)"),u9.forEach(t),mKe=i(S),Dn=n(S,"LI",{});var p9=s(Dn);Cre=n(p9,"STRONG",{});var iOr=s(Cre);fKe=r(iOr,"convbert"),iOr.forEach(t),gKe=r(p9," \u2014 "),DS=n(p9,"A",{href:!0});var dOr=s(DS);hKe=r(dOr,"ConvBertTokenizer"),dOr.forEach(t),uKe=r(p9," or "),GS=n(p9,"A",{href:!0});var cOr=s(GS);pKe=r(cOr,"ConvBertTokenizerFast"),cOr.forEach(t),_Ke=r(p9," (ConvBERT model)"),p9.forEach(t),bKe=i(S),Gn=n(S,"LI",{});var _9=s(Gn);wre=n(_9,"STRONG",{});var mOr=s(wre);FKe=r(mOr,"cpm"),mOr.forEach(t),vKe=r(_9," \u2014 "),OS=n(_9,"A",{href:!0});var fOr=s(OS);TKe=r(fOr,"CpmTokenizer"),fOr.forEach(t),MKe=r(_9," or "),VS=n(_9,"A",{href:!0});var gOr=s(VS);EKe=r(gOr,"CpmTokenizerFast"),gOr.forEach(t),CKe=r(_9," (CPM model)"),_9.forEach(t),wKe=i(S),wg=n(S,"LI",{});var wwe=s(wg);Are=n(wwe,"STRONG",{});var hOr=s(Are);AKe=r(hOr,"ctrl"),hOr.forEach(t),yKe=r(wwe," \u2014 "),XS=n(wwe,"A",{href:!0});var uOr=s(XS);LKe=r(uOr,"CTRLTokenizer"),uOr.forEach(t),xKe=r(wwe," (CTRL model)"),wwe.forEach(t),$Ke=i(S),On=n(S,"LI",{});var b9=s(On);yre=n(b9,"STRONG",{});var pOr=s(yre);kKe=r(pOr,"data2vec-text"),pOr.forEach(t),SKe=r(b9," \u2014 "),zS=n(b9,"A",{href:!0});var _Or=s(zS);RKe=r(_Or,"RobertaTokenizer"),_Or.forEach(t),BKe=r(b9," or "),QS=n(b9,"A",{href:!0});var bOr=s(QS);PKe=r(bOr,"RobertaTokenizerFast"),bOr.forEach(t),IKe=r(b9," (Data2VecText model)"),b9.forEach(t),qKe=i(S),Vn=n(S,"LI",{});var F9=s(Vn);Lre=n(F9,"STRONG",{});var FOr=s(Lre);NKe=r(FOr,"deberta"),FOr.forEach(t),jKe=r(F9," \u2014 "),WS=n(F9,"A",{href:!0});var vOr=s(WS);DKe=r(vOr,"DebertaTokenizer"),vOr.forEach(t),GKe=r(F9," or "),HS=n(F9,"A",{href:!0});var TOr=s(HS);OKe=r(TOr,"DebertaTokenizerFast"),TOr.forEach(t),VKe=r(F9," (DeBERTa model)"),F9.forEach(t),XKe=i(S),Xn=n(S,"LI",{});var v9=s(Xn);xre=n(v9,"STRONG",{});var MOr=s(xre);zKe=r(MOr,"deberta-v2"),MOr.forEach(t),QKe=r(v9," \u2014 "),US=n(v9,"A",{href:!0});var EOr=s(US);WKe=r(EOr,"DebertaV2Tokenizer"),EOr.forEach(t),HKe=r(v9," or "),JS=n(v9,"A",{href:!0});var COr=s(JS);UKe=r(COr,"DebertaV2TokenizerFast"),COr.forEach(t),JKe=r(v9," (DeBERTa-v2 model)"),v9.forEach(t),YKe=i(S),zn=n(S,"LI",{});var T9=s(zn);$re=n(T9,"STRONG",{});var wOr=s($re);KKe=r(wOr,"distilbert"),wOr.forEach(t),ZKe=r(T9," \u2014 "),YS=n(T9,"A",{href:!0});var AOr=s(YS);eZe=r(AOr,"DistilBertTokenizer"),AOr.forEach(t),oZe=r(T9," or "),KS=n(T9,"A",{href:!0});var yOr=s(KS);rZe=r(yOr,"DistilBertTokenizerFast"),yOr.forEach(t),tZe=r(T9," (DistilBERT model)"),T9.forEach(t),aZe=i(S),Qn=n(S,"LI",{});var M9=s(Qn);kre=n(M9,"STRONG",{});var LOr=s(kre);nZe=r(LOr,"dpr"),LOr.forEach(t),sZe=r(M9," \u2014 "),ZS=n(M9,"A",{href:!0});var xOr=s(ZS);lZe=r(xOr,"DPRQuestionEncoderTokenizer"),xOr.forEach(t),iZe=r(M9," or "),eR=n(M9,"A",{href:!0});var $Or=s(eR);dZe=r($Or,"DPRQuestionEncoderTokenizerFast"),$Or.forEach(t),cZe=r(M9," (DPR model)"),M9.forEach(t),mZe=i(S),Wn=n(S,"LI",{});var E9=s(Wn);Sre=n(E9,"STRONG",{});var kOr=s(Sre);fZe=r(kOr,"electra"),kOr.forEach(t),gZe=r(E9," \u2014 "),oR=n(E9,"A",{href:!0});var SOr=s(oR);hZe=r(SOr,"ElectraTokenizer"),SOr.forEach(t),uZe=r(E9," or "),rR=n(E9,"A",{href:!0});var ROr=s(rR);pZe=r(ROr,"ElectraTokenizerFast"),ROr.forEach(t),_Ze=r(E9," (ELECTRA model)"),E9.forEach(t),bZe=i(S),Ag=n(S,"LI",{});var Awe=s(Ag);Rre=n(Awe,"STRONG",{});var BOr=s(Rre);FZe=r(BOr,"flaubert"),BOr.forEach(t),vZe=r(Awe," \u2014 "),tR=n(Awe,"A",{href:!0});var POr=s(tR);TZe=r(POr,"FlaubertTokenizer"),POr.forEach(t),MZe=r(Awe," (FlauBERT model)"),Awe.forEach(t),EZe=i(S),Hn=n(S,"LI",{});var C9=s(Hn);Bre=n(C9,"STRONG",{});var IOr=s(Bre);CZe=r(IOr,"fnet"),IOr.forEach(t),wZe=r(C9," \u2014 "),aR=n(C9,"A",{href:!0});var qOr=s(aR);AZe=r(qOr,"FNetTokenizer"),qOr.forEach(t),yZe=r(C9," or "),nR=n(C9,"A",{href:!0});var NOr=s(nR);LZe=r(NOr,"FNetTokenizerFast"),NOr.forEach(t),xZe=r(C9," (FNet model)"),C9.forEach(t),$Ze=i(S),yg=n(S,"LI",{});var ywe=s(yg);Pre=n(ywe,"STRONG",{});var jOr=s(Pre);kZe=r(jOr,"fsmt"),jOr.forEach(t),SZe=r(ywe," \u2014 "),sR=n(ywe,"A",{href:!0});var DOr=s(sR);RZe=r(DOr,"FSMTTokenizer"),DOr.forEach(t),BZe=r(ywe," (FairSeq Machine-Translation model)"),ywe.forEach(t),PZe=i(S),Un=n(S,"LI",{});var w9=s(Un);Ire=n(w9,"STRONG",{});var GOr=s(Ire);IZe=r(GOr,"funnel"),GOr.forEach(t),qZe=r(w9," \u2014 "),lR=n(w9,"A",{href:!0});var OOr=s(lR);NZe=r(OOr,"FunnelTokenizer"),OOr.forEach(t),jZe=r(w9," or "),iR=n(w9,"A",{href:!0});var VOr=s(iR);DZe=r(VOr,"FunnelTokenizerFast"),VOr.forEach(t),GZe=r(w9," (Funnel Transformer model)"),w9.forEach(t),OZe=i(S),Jn=n(S,"LI",{});var A9=s(Jn);qre=n(A9,"STRONG",{});var XOr=s(qre);VZe=r(XOr,"gpt2"),XOr.forEach(t),XZe=r(A9," \u2014 "),dR=n(A9,"A",{href:!0});var zOr=s(dR);zZe=r(zOr,"GPT2Tokenizer"),zOr.forEach(t),QZe=r(A9," or "),cR=n(A9,"A",{href:!0});var QOr=s(cR);WZe=r(QOr,"GPT2TokenizerFast"),QOr.forEach(t),HZe=r(A9," (OpenAI GPT-2 model)"),A9.forEach(t),UZe=i(S),Yn=n(S,"LI",{});var y9=s(Yn);Nre=n(y9,"STRONG",{});var WOr=s(Nre);JZe=r(WOr,"gpt_neo"),WOr.forEach(t),YZe=r(y9," \u2014 "),mR=n(y9,"A",{href:!0});var HOr=s(mR);KZe=r(HOr,"GPT2Tokenizer"),HOr.forEach(t),ZZe=r(y9," or "),fR=n(y9,"A",{href:!0});var UOr=s(fR);eeo=r(UOr,"GPT2TokenizerFast"),UOr.forEach(t),oeo=r(y9," (GPT Neo model)"),y9.forEach(t),reo=i(S),Kn=n(S,"LI",{});var L9=s(Kn);jre=n(L9,"STRONG",{});var JOr=s(jre);teo=r(JOr,"gptj"),JOr.forEach(t),aeo=r(L9," \u2014 "),gR=n(L9,"A",{href:!0});var YOr=s(gR);neo=r(YOr,"GPT2Tokenizer"),YOr.forEach(t),seo=r(L9," or "),hR=n(L9,"A",{href:!0});var KOr=s(hR);leo=r(KOr,"GPT2TokenizerFast"),KOr.forEach(t),ieo=r(L9," (GPT-J model)"),L9.forEach(t),deo=i(S),Zn=n(S,"LI",{});var x9=s(Zn);Dre=n(x9,"STRONG",{});var ZOr=s(Dre);ceo=r(ZOr,"herbert"),ZOr.forEach(t),meo=r(x9," \u2014 "),uR=n(x9,"A",{href:!0});var eVr=s(uR);feo=r(eVr,"HerbertTokenizer"),eVr.forEach(t),geo=r(x9," or "),pR=n(x9,"A",{href:!0});var oVr=s(pR);heo=r(oVr,"HerbertTokenizerFast"),oVr.forEach(t),ueo=r(x9," (HerBERT model)"),x9.forEach(t),peo=i(S),Lg=n(S,"LI",{});var Lwe=s(Lg);Gre=n(Lwe,"STRONG",{});var rVr=s(Gre);_eo=r(rVr,"hubert"),rVr.forEach(t),beo=r(Lwe," \u2014 "),_R=n(Lwe,"A",{href:!0});var tVr=s(_R);Feo=r(tVr,"Wav2Vec2CTCTokenizer"),tVr.forEach(t),veo=r(Lwe," (Hubert model)"),Lwe.forEach(t),Teo=i(S),es=n(S,"LI",{});var $9=s(es);Ore=n($9,"STRONG",{});var aVr=s(Ore);Meo=r(aVr,"ibert"),aVr.forEach(t),Eeo=r($9," \u2014 "),bR=n($9,"A",{href:!0});var nVr=s(bR);Ceo=r(nVr,"RobertaTokenizer"),nVr.forEach(t),weo=r($9," or "),FR=n($9,"A",{href:!0});var sVr=s(FR);Aeo=r(sVr,"RobertaTokenizerFast"),sVr.forEach(t),yeo=r($9," (I-BERT model)"),$9.forEach(t),Leo=i(S),os=n(S,"LI",{});var k9=s(os);Vre=n(k9,"STRONG",{});var lVr=s(Vre);xeo=r(lVr,"layoutlm"),lVr.forEach(t),$eo=r(k9," \u2014 "),vR=n(k9,"A",{href:!0});var iVr=s(vR);keo=r(iVr,"LayoutLMTokenizer"),iVr.forEach(t),Seo=r(k9," or "),TR=n(k9,"A",{href:!0});var dVr=s(TR);Reo=r(dVr,"LayoutLMTokenizerFast"),dVr.forEach(t),Beo=r(k9," (LayoutLM model)"),k9.forEach(t),Peo=i(S),rs=n(S,"LI",{});var S9=s(rs);Xre=n(S9,"STRONG",{});var cVr=s(Xre);Ieo=r(cVr,"layoutlmv2"),cVr.forEach(t),qeo=r(S9," \u2014 "),MR=n(S9,"A",{href:!0});var mVr=s(MR);Neo=r(mVr,"LayoutLMv2Tokenizer"),mVr.forEach(t),jeo=r(S9," or "),ER=n(S9,"A",{href:!0});var fVr=s(ER);Deo=r(fVr,"LayoutLMv2TokenizerFast"),fVr.forEach(t),Geo=r(S9," (LayoutLMv2 model)"),S9.forEach(t),Oeo=i(S),ts=n(S,"LI",{});var R9=s(ts);zre=n(R9,"STRONG",{});var gVr=s(zre);Veo=r(gVr,"layoutxlm"),gVr.forEach(t),Xeo=r(R9," \u2014 "),CR=n(R9,"A",{href:!0});var hVr=s(CR);zeo=r(hVr,"LayoutXLMTokenizer"),hVr.forEach(t),Qeo=r(R9," or "),wR=n(R9,"A",{href:!0});var uVr=s(wR);Weo=r(uVr,"LayoutXLMTokenizerFast"),uVr.forEach(t),Heo=r(R9," (LayoutXLM model)"),R9.forEach(t),Ueo=i(S),as=n(S,"LI",{});var B9=s(as);Qre=n(B9,"STRONG",{});var pVr=s(Qre);Jeo=r(pVr,"led"),pVr.forEach(t),Yeo=r(B9," \u2014 "),AR=n(B9,"A",{href:!0});var _Vr=s(AR);Keo=r(_Vr,"LEDTokenizer"),_Vr.forEach(t),Zeo=r(B9," or "),yR=n(B9,"A",{href:!0});var bVr=s(yR);eoo=r(bVr,"LEDTokenizerFast"),bVr.forEach(t),ooo=r(B9," (LED model)"),B9.forEach(t),roo=i(S),ns=n(S,"LI",{});var P9=s(ns);Wre=n(P9,"STRONG",{});var FVr=s(Wre);too=r(FVr,"longformer"),FVr.forEach(t),aoo=r(P9," \u2014 "),LR=n(P9,"A",{href:!0});var vVr=s(LR);noo=r(vVr,"LongformerTokenizer"),vVr.forEach(t),soo=r(P9," or "),xR=n(P9,"A",{href:!0});var TVr=s(xR);loo=r(TVr,"LongformerTokenizerFast"),TVr.forEach(t),ioo=r(P9," (Longformer model)"),P9.forEach(t),doo=i(S),xg=n(S,"LI",{});var xwe=s(xg);Hre=n(xwe,"STRONG",{});var MVr=s(Hre);coo=r(MVr,"luke"),MVr.forEach(t),moo=r(xwe," \u2014 "),$R=n(xwe,"A",{href:!0});var EVr=s($R);foo=r(EVr,"LukeTokenizer"),EVr.forEach(t),goo=r(xwe," (LUKE model)"),xwe.forEach(t),hoo=i(S),ss=n(S,"LI",{});var I9=s(ss);Ure=n(I9,"STRONG",{});var CVr=s(Ure);uoo=r(CVr,"lxmert"),CVr.forEach(t),poo=r(I9," \u2014 "),kR=n(I9,"A",{href:!0});var wVr=s(kR);_oo=r(wVr,"LxmertTokenizer"),wVr.forEach(t),boo=r(I9," or "),SR=n(I9,"A",{href:!0});var AVr=s(SR);Foo=r(AVr,"LxmertTokenizerFast"),AVr.forEach(t),voo=r(I9," (LXMERT model)"),I9.forEach(t),Too=i(S),$g=n(S,"LI",{});var $we=s($g);Jre=n($we,"STRONG",{});var yVr=s(Jre);Moo=r(yVr,"m2m_100"),yVr.forEach(t),Eoo=r($we," \u2014 "),RR=n($we,"A",{href:!0});var LVr=s(RR);Coo=r(LVr,"M2M100Tokenizer"),LVr.forEach(t),woo=r($we," (M2M100 model)"),$we.forEach(t),Aoo=i(S),kg=n(S,"LI",{});var kwe=s(kg);Yre=n(kwe,"STRONG",{});var xVr=s(Yre);yoo=r(xVr,"marian"),xVr.forEach(t),Loo=r(kwe," \u2014 "),BR=n(kwe,"A",{href:!0});var $Vr=s(BR);xoo=r($Vr,"MarianTokenizer"),$Vr.forEach(t),$oo=r(kwe," (Marian model)"),kwe.forEach(t),koo=i(S),ls=n(S,"LI",{});var q9=s(ls);Kre=n(q9,"STRONG",{});var kVr=s(Kre);Soo=r(kVr,"mbart"),kVr.forEach(t),Roo=r(q9," \u2014 "),PR=n(q9,"A",{href:!0});var SVr=s(PR);Boo=r(SVr,"MBartTokenizer"),SVr.forEach(t),Poo=r(q9," or "),IR=n(q9,"A",{href:!0});var RVr=s(IR);Ioo=r(RVr,"MBartTokenizerFast"),RVr.forEach(t),qoo=r(q9," (mBART model)"),q9.forEach(t),Noo=i(S),is=n(S,"LI",{});var N9=s(is);Zre=n(N9,"STRONG",{});var BVr=s(Zre);joo=r(BVr,"mbart50"),BVr.forEach(t),Doo=r(N9," \u2014 "),qR=n(N9,"A",{href:!0});var PVr=s(qR);Goo=r(PVr,"MBart50Tokenizer"),PVr.forEach(t),Ooo=r(N9," or "),NR=n(N9,"A",{href:!0});var IVr=s(NR);Voo=r(IVr,"MBart50TokenizerFast"),IVr.forEach(t),Xoo=r(N9," (mBART-50 model)"),N9.forEach(t),zoo=i(S),ds=n(S,"LI",{});var j9=s(ds);ete=n(j9,"STRONG",{});var qVr=s(ete);Qoo=r(qVr,"megatron-bert"),qVr.forEach(t),Woo=r(j9," \u2014 "),jR=n(j9,"A",{href:!0});var NVr=s(jR);Hoo=r(NVr,"BertTokenizer"),NVr.forEach(t),Uoo=r(j9," or "),DR=n(j9,"A",{href:!0});var jVr=s(DR);Joo=r(jVr,"BertTokenizerFast"),jVr.forEach(t),Yoo=r(j9," (MegatronBert model)"),j9.forEach(t),Koo=i(S),Sg=n(S,"LI",{});var Swe=s(Sg);ote=n(Swe,"STRONG",{});var DVr=s(ote);Zoo=r(DVr,"mluke"),DVr.forEach(t),ero=r(Swe," \u2014 "),GR=n(Swe,"A",{href:!0});var GVr=s(GR);oro=r(GVr,"MLukeTokenizer"),GVr.forEach(t),rro=r(Swe," (mLUKE model)"),Swe.forEach(t),tro=i(S),cs=n(S,"LI",{});var D9=s(cs);rte=n(D9,"STRONG",{});var OVr=s(rte);aro=r(OVr,"mobilebert"),OVr.forEach(t),nro=r(D9," \u2014 "),OR=n(D9,"A",{href:!0});var VVr=s(OR);sro=r(VVr,"MobileBertTokenizer"),VVr.forEach(t),lro=r(D9," or "),VR=n(D9,"A",{href:!0});var XVr=s(VR);iro=r(XVr,"MobileBertTokenizerFast"),XVr.forEach(t),dro=r(D9," (MobileBERT model)"),D9.forEach(t),cro=i(S),ms=n(S,"LI",{});var G9=s(ms);tte=n(G9,"STRONG",{});var zVr=s(tte);mro=r(zVr,"mpnet"),zVr.forEach(t),fro=r(G9," \u2014 "),XR=n(G9,"A",{href:!0});var QVr=s(XR);gro=r(QVr,"MPNetTokenizer"),QVr.forEach(t),hro=r(G9," or "),zR=n(G9,"A",{href:!0});var WVr=s(zR);uro=r(WVr,"MPNetTokenizerFast"),WVr.forEach(t),pro=r(G9," (MPNet model)"),G9.forEach(t),_ro=i(S),fs=n(S,"LI",{});var O9=s(fs);ate=n(O9,"STRONG",{});var HVr=s(ate);bro=r(HVr,"mt5"),HVr.forEach(t),Fro=r(O9," \u2014 "),QR=n(O9,"A",{href:!0});var UVr=s(QR);vro=r(UVr,"MT5Tokenizer"),UVr.forEach(t),Tro=r(O9," or "),WR=n(O9,"A",{href:!0});var JVr=s(WR);Mro=r(JVr,"MT5TokenizerFast"),JVr.forEach(t),Ero=r(O9," (mT5 model)"),O9.forEach(t),Cro=i(S),gs=n(S,"LI",{});var V9=s(gs);nte=n(V9,"STRONG",{});var YVr=s(nte);wro=r(YVr,"nystromformer"),YVr.forEach(t),Aro=r(V9," \u2014 "),HR=n(V9,"A",{href:!0});var KVr=s(HR);yro=r(KVr,"AlbertTokenizer"),KVr.forEach(t),Lro=r(V9," or "),UR=n(V9,"A",{href:!0});var ZVr=s(UR);xro=r(ZVr,"AlbertTokenizerFast"),ZVr.forEach(t),$ro=r(V9," (Nystromformer model)"),V9.forEach(t),kro=i(S),hs=n(S,"LI",{});var X9=s(hs);ste=n(X9,"STRONG",{});var eXr=s(ste);Sro=r(eXr,"openai-gpt"),eXr.forEach(t),Rro=r(X9," \u2014 "),JR=n(X9,"A",{href:!0});var oXr=s(JR);Bro=r(oXr,"OpenAIGPTTokenizer"),oXr.forEach(t),Pro=r(X9," or "),YR=n(X9,"A",{href:!0});var rXr=s(YR);Iro=r(rXr,"OpenAIGPTTokenizerFast"),rXr.forEach(t),qro=r(X9," (OpenAI GPT model)"),X9.forEach(t),Nro=i(S),Rg=n(S,"LI",{});var Rwe=s(Rg);lte=n(Rwe,"STRONG",{});var tXr=s(lte);jro=r(tXr,"opt"),tXr.forEach(t),Dro=r(Rwe," \u2014 "),KR=n(Rwe,"A",{href:!0});var aXr=s(KR);Gro=r(aXr,"GPT2Tokenizer"),aXr.forEach(t),Oro=r(Rwe," (OPT model)"),Rwe.forEach(t),Vro=i(S),us=n(S,"LI",{});var z9=s(us);ite=n(z9,"STRONG",{});var nXr=s(ite);Xro=r(nXr,"pegasus"),nXr.forEach(t),zro=r(z9," \u2014 "),ZR=n(z9,"A",{href:!0});var sXr=s(ZR);Qro=r(sXr,"PegasusTokenizer"),sXr.forEach(t),Wro=r(z9," or "),eB=n(z9,"A",{href:!0});var lXr=s(eB);Hro=r(lXr,"PegasusTokenizerFast"),lXr.forEach(t),Uro=r(z9," (Pegasus model)"),z9.forEach(t),Jro=i(S),Bg=n(S,"LI",{});var Bwe=s(Bg);dte=n(Bwe,"STRONG",{});var iXr=s(dte);Yro=r(iXr,"perceiver"),iXr.forEach(t),Kro=r(Bwe," \u2014 "),oB=n(Bwe,"A",{href:!0});var dXr=s(oB);Zro=r(dXr,"PerceiverTokenizer"),dXr.forEach(t),eto=r(Bwe," (Perceiver model)"),Bwe.forEach(t),oto=i(S),Pg=n(S,"LI",{});var Pwe=s(Pg);cte=n(Pwe,"STRONG",{});var cXr=s(cte);rto=r(cXr,"phobert"),cXr.forEach(t),tto=r(Pwe," \u2014 "),rB=n(Pwe,"A",{href:!0});var mXr=s(rB);ato=r(mXr,"PhobertTokenizer"),mXr.forEach(t),nto=r(Pwe," (PhoBERT model)"),Pwe.forEach(t),sto=i(S),Ig=n(S,"LI",{});var Iwe=s(Ig);mte=n(Iwe,"STRONG",{});var fXr=s(mte);lto=r(fXr,"plbart"),fXr.forEach(t),ito=r(Iwe," \u2014 "),tB=n(Iwe,"A",{href:!0});var gXr=s(tB);dto=r(gXr,"PLBartTokenizer"),gXr.forEach(t),cto=r(Iwe," (PLBart model)"),Iwe.forEach(t),mto=i(S),qg=n(S,"LI",{});var qwe=s(qg);fte=n(qwe,"STRONG",{});var hXr=s(fte);fto=r(hXr,"prophetnet"),hXr.forEach(t),gto=r(qwe," \u2014 "),aB=n(qwe,"A",{href:!0});var uXr=s(aB);hto=r(uXr,"ProphetNetTokenizer"),uXr.forEach(t),uto=r(qwe," (ProphetNet model)"),qwe.forEach(t),pto=i(S),ps=n(S,"LI",{});var Q9=s(ps);gte=n(Q9,"STRONG",{});var pXr=s(gte);_to=r(pXr,"qdqbert"),pXr.forEach(t),bto=r(Q9," \u2014 "),nB=n(Q9,"A",{href:!0});var _Xr=s(nB);Fto=r(_Xr,"BertTokenizer"),_Xr.forEach(t),vto=r(Q9," or "),sB=n(Q9,"A",{href:!0});var bXr=s(sB);Tto=r(bXr,"BertTokenizerFast"),bXr.forEach(t),Mto=r(Q9," (QDQBert model)"),Q9.forEach(t),Eto=i(S),Ng=n(S,"LI",{});var Nwe=s(Ng);hte=n(Nwe,"STRONG",{});var FXr=s(hte);Cto=r(FXr,"rag"),FXr.forEach(t),wto=r(Nwe," \u2014 "),lB=n(Nwe,"A",{href:!0});var vXr=s(lB);Ato=r(vXr,"RagTokenizer"),vXr.forEach(t),yto=r(Nwe," (RAG model)"),Nwe.forEach(t),Lto=i(S),_s=n(S,"LI",{});var W9=s(_s);ute=n(W9,"STRONG",{});var TXr=s(ute);xto=r(TXr,"realm"),TXr.forEach(t),$to=r(W9," \u2014 "),iB=n(W9,"A",{href:!0});var MXr=s(iB);kto=r(MXr,"RealmTokenizer"),MXr.forEach(t),Sto=r(W9," or "),dB=n(W9,"A",{href:!0});var EXr=s(dB);Rto=r(EXr,"RealmTokenizerFast"),EXr.forEach(t),Bto=r(W9," (Realm model)"),W9.forEach(t),Pto=i(S),bs=n(S,"LI",{});var H9=s(bs);pte=n(H9,"STRONG",{});var CXr=s(pte);Ito=r(CXr,"reformer"),CXr.forEach(t),qto=r(H9," \u2014 "),cB=n(H9,"A",{href:!0});var wXr=s(cB);Nto=r(wXr,"ReformerTokenizer"),wXr.forEach(t),jto=r(H9," or "),mB=n(H9,"A",{href:!0});var AXr=s(mB);Dto=r(AXr,"ReformerTokenizerFast"),AXr.forEach(t),Gto=r(H9," (Reformer model)"),H9.forEach(t),Oto=i(S),Fs=n(S,"LI",{});var U9=s(Fs);_te=n(U9,"STRONG",{});var yXr=s(_te);Vto=r(yXr,"rembert"),yXr.forEach(t),Xto=r(U9," \u2014 "),fB=n(U9,"A",{href:!0});var LXr=s(fB);zto=r(LXr,"RemBertTokenizer"),LXr.forEach(t),Qto=r(U9," or "),gB=n(U9,"A",{href:!0});var xXr=s(gB);Wto=r(xXr,"RemBertTokenizerFast"),xXr.forEach(t),Hto=r(U9," (RemBERT model)"),U9.forEach(t),Uto=i(S),vs=n(S,"LI",{});var J9=s(vs);bte=n(J9,"STRONG",{});var $Xr=s(bte);Jto=r($Xr,"retribert"),$Xr.forEach(t),Yto=r(J9," \u2014 "),hB=n(J9,"A",{href:!0});var kXr=s(hB);Kto=r(kXr,"RetriBertTokenizer"),kXr.forEach(t),Zto=r(J9," or "),uB=n(J9,"A",{href:!0});var SXr=s(uB);eao=r(SXr,"RetriBertTokenizerFast"),SXr.forEach(t),oao=r(J9," (RetriBERT model)"),J9.forEach(t),rao=i(S),Ts=n(S,"LI",{});var Y9=s(Ts);Fte=n(Y9,"STRONG",{});var RXr=s(Fte);tao=r(RXr,"roberta"),RXr.forEach(t),aao=r(Y9," \u2014 "),pB=n(Y9,"A",{href:!0});var BXr=s(pB);nao=r(BXr,"RobertaTokenizer"),BXr.forEach(t),sao=r(Y9," or "),_B=n(Y9,"A",{href:!0});var PXr=s(_B);lao=r(PXr,"RobertaTokenizerFast"),PXr.forEach(t),iao=r(Y9," (RoBERTa model)"),Y9.forEach(t),dao=i(S),Ms=n(S,"LI",{});var K9=s(Ms);vte=n(K9,"STRONG",{});var IXr=s(vte);cao=r(IXr,"roformer"),IXr.forEach(t),mao=r(K9," \u2014 "),bB=n(K9,"A",{href:!0});var qXr=s(bB);fao=r(qXr,"RoFormerTokenizer"),qXr.forEach(t),gao=r(K9," or "),FB=n(K9,"A",{href:!0});var NXr=s(FB);hao=r(NXr,"RoFormerTokenizerFast"),NXr.forEach(t),uao=r(K9," (RoFormer model)"),K9.forEach(t),pao=i(S),jg=n(S,"LI",{});var jwe=s(jg);Tte=n(jwe,"STRONG",{});var jXr=s(Tte);_ao=r(jXr,"speech_to_text"),jXr.forEach(t),bao=r(jwe," \u2014 "),vB=n(jwe,"A",{href:!0});var DXr=s(vB);Fao=r(DXr,"Speech2TextTokenizer"),DXr.forEach(t),vao=r(jwe," (Speech2Text model)"),jwe.forEach(t),Tao=i(S),Dg=n(S,"LI",{});var Dwe=s(Dg);Mte=n(Dwe,"STRONG",{});var GXr=s(Mte);Mao=r(GXr,"speech_to_text_2"),GXr.forEach(t),Eao=r(Dwe," \u2014 "),TB=n(Dwe,"A",{href:!0});var OXr=s(TB);Cao=r(OXr,"Speech2Text2Tokenizer"),OXr.forEach(t),wao=r(Dwe," (Speech2Text2 model)"),Dwe.forEach(t),Aao=i(S),Es=n(S,"LI",{});var Z9=s(Es);Ete=n(Z9,"STRONG",{});var VXr=s(Ete);yao=r(VXr,"splinter"),VXr.forEach(t),Lao=r(Z9," \u2014 "),MB=n(Z9,"A",{href:!0});var XXr=s(MB);xao=r(XXr,"SplinterTokenizer"),XXr.forEach(t),$ao=r(Z9," or "),EB=n(Z9,"A",{href:!0});var zXr=s(EB);kao=r(zXr,"SplinterTokenizerFast"),zXr.forEach(t),Sao=r(Z9," (Splinter model)"),Z9.forEach(t),Rao=i(S),Cs=n(S,"LI",{});var e$=s(Cs);Cte=n(e$,"STRONG",{});var QXr=s(Cte);Bao=r(QXr,"squeezebert"),QXr.forEach(t),Pao=r(e$," \u2014 "),CB=n(e$,"A",{href:!0});var WXr=s(CB);Iao=r(WXr,"SqueezeBertTokenizer"),WXr.forEach(t),qao=r(e$," or "),wB=n(e$,"A",{href:!0});var HXr=s(wB);Nao=r(HXr,"SqueezeBertTokenizerFast"),HXr.forEach(t),jao=r(e$," (SqueezeBERT model)"),e$.forEach(t),Dao=i(S),ws=n(S,"LI",{});var o$=s(ws);wte=n(o$,"STRONG",{});var UXr=s(wte);Gao=r(UXr,"t5"),UXr.forEach(t),Oao=r(o$," \u2014 "),AB=n(o$,"A",{href:!0});var JXr=s(AB);Vao=r(JXr,"T5Tokenizer"),JXr.forEach(t),Xao=r(o$," or "),yB=n(o$,"A",{href:!0});var YXr=s(yB);zao=r(YXr,"T5TokenizerFast"),YXr.forEach(t),Qao=r(o$," (T5 model)"),o$.forEach(t),Wao=i(S),Gg=n(S,"LI",{});var Gwe=s(Gg);Ate=n(Gwe,"STRONG",{});var KXr=s(Ate);Hao=r(KXr,"tapas"),KXr.forEach(t),Uao=r(Gwe," \u2014 "),LB=n(Gwe,"A",{href:!0});var ZXr=s(LB);Jao=r(ZXr,"TapasTokenizer"),ZXr.forEach(t),Yao=r(Gwe," (TAPAS model)"),Gwe.forEach(t),Kao=i(S),Og=n(S,"LI",{});var Owe=s(Og);yte=n(Owe,"STRONG",{});var ezr=s(yte);Zao=r(ezr,"tapex"),ezr.forEach(t),eno=r(Owe," \u2014 "),xB=n(Owe,"A",{href:!0});var ozr=s(xB);ono=r(ozr,"TapexTokenizer"),ozr.forEach(t),rno=r(Owe," (TAPEX model)"),Owe.forEach(t),tno=i(S),Vg=n(S,"LI",{});var Vwe=s(Vg);Lte=n(Vwe,"STRONG",{});var rzr=s(Lte);ano=r(rzr,"transfo-xl"),rzr.forEach(t),nno=r(Vwe," \u2014 "),$B=n(Vwe,"A",{href:!0});var tzr=s($B);sno=r(tzr,"TransfoXLTokenizer"),tzr.forEach(t),lno=r(Vwe," (Transformer-XL model)"),Vwe.forEach(t),ino=i(S),As=n(S,"LI",{});var r$=s(As);xte=n(r$,"STRONG",{});var azr=s(xte);dno=r(azr,"visual_bert"),azr.forEach(t),cno=r(r$," \u2014 "),kB=n(r$,"A",{href:!0});var nzr=s(kB);mno=r(nzr,"BertTokenizer"),nzr.forEach(t),fno=r(r$," or "),SB=n(r$,"A",{href:!0});var szr=s(SB);gno=r(szr,"BertTokenizerFast"),szr.forEach(t),hno=r(r$," (VisualBert model)"),r$.forEach(t),uno=i(S),Xg=n(S,"LI",{});var Xwe=s(Xg);$te=n(Xwe,"STRONG",{});var lzr=s($te);pno=r(lzr,"wav2vec2"),lzr.forEach(t),_no=r(Xwe," \u2014 "),RB=n(Xwe,"A",{href:!0});var izr=s(RB);bno=r(izr,"Wav2Vec2CTCTokenizer"),izr.forEach(t),Fno=r(Xwe," (Wav2Vec2 model)"),Xwe.forEach(t),vno=i(S),zg=n(S,"LI",{});var zwe=s(zg);kte=n(zwe,"STRONG",{});var dzr=s(kte);Tno=r(dzr,"wav2vec2_phoneme"),dzr.forEach(t),Mno=r(zwe," \u2014 "),BB=n(zwe,"A",{href:!0});var czr=s(BB);Eno=r(czr,"Wav2Vec2PhonemeCTCTokenizer"),czr.forEach(t),Cno=r(zwe," (Wav2Vec2Phoneme model)"),zwe.forEach(t),wno=i(S),ys=n(S,"LI",{});var t$=s(ys);Ste=n(t$,"STRONG",{});var mzr=s(Ste);Ano=r(mzr,"xglm"),mzr.forEach(t),yno=r(t$," \u2014 "),PB=n(t$,"A",{href:!0});var fzr=s(PB);Lno=r(fzr,"XGLMTokenizer"),fzr.forEach(t),xno=r(t$," or "),IB=n(t$,"A",{href:!0});var gzr=s(IB);$no=r(gzr,"XGLMTokenizerFast"),gzr.forEach(t),kno=r(t$," (XGLM model)"),t$.forEach(t),Sno=i(S),Qg=n(S,"LI",{});var Qwe=s(Qg);Rte=n(Qwe,"STRONG",{});var hzr=s(Rte);Rno=r(hzr,"xlm"),hzr.forEach(t),Bno=r(Qwe," \u2014 "),qB=n(Qwe,"A",{href:!0});var uzr=s(qB);Pno=r(uzr,"XLMTokenizer"),uzr.forEach(t),Ino=r(Qwe," (XLM model)"),Qwe.forEach(t),qno=i(S),Wg=n(S,"LI",{});var Wwe=s(Wg);Bte=n(Wwe,"STRONG",{});var pzr=s(Bte);Nno=r(pzr,"xlm-prophetnet"),pzr.forEach(t),jno=r(Wwe," \u2014 "),NB=n(Wwe,"A",{href:!0});var _zr=s(NB);Dno=r(_zr,"XLMProphetNetTokenizer"),_zr.forEach(t),Gno=r(Wwe," (XLMProphetNet model)"),Wwe.forEach(t),Ono=i(S),Ls=n(S,"LI",{});var a$=s(Ls);Pte=n(a$,"STRONG",{});var bzr=s(Pte);Vno=r(bzr,"xlm-roberta"),bzr.forEach(t),Xno=r(a$," \u2014 "),jB=n(a$,"A",{href:!0});var Fzr=s(jB);zno=r(Fzr,"XLMRobertaTokenizer"),Fzr.forEach(t),Qno=r(a$," or "),DB=n(a$,"A",{href:!0});var vzr=s(DB);Wno=r(vzr,"XLMRobertaTokenizerFast"),vzr.forEach(t),Hno=r(a$," (XLM-RoBERTa model)"),a$.forEach(t),Uno=i(S),xs=n(S,"LI",{});var n$=s(xs);Ite=n(n$,"STRONG",{});var Tzr=s(Ite);Jno=r(Tzr,"xlm-roberta-xl"),Tzr.forEach(t),Yno=r(n$," \u2014 "),GB=n(n$,"A",{href:!0});var Mzr=s(GB);Kno=r(Mzr,"RobertaTokenizer"),Mzr.forEach(t),Zno=r(n$," or "),OB=n(n$,"A",{href:!0});var Ezr=s(OB);eso=r(Ezr,"RobertaTokenizerFast"),Ezr.forEach(t),oso=r(n$," (XLM-RoBERTa-XL model)"),n$.forEach(t),rso=i(S),$s=n(S,"LI",{});var s$=s($s);qte=n(s$,"STRONG",{});var Czr=s(qte);tso=r(Czr,"xlnet"),Czr.forEach(t),aso=r(s$," \u2014 "),VB=n(s$,"A",{href:!0});var wzr=s(VB);nso=r(wzr,"XLNetTokenizer"),wzr.forEach(t),sso=r(s$," or "),XB=n(s$,"A",{href:!0});var Azr=s(XB);lso=r(Azr,"XLNetTokenizerFast"),Azr.forEach(t),iso=r(s$," (XLNet model)"),s$.forEach(t),dso=i(S),ks=n(S,"LI",{});var l$=s(ks);Nte=n(l$,"STRONG",{});var yzr=s(Nte);cso=r(yzr,"yoso"),yzr.forEach(t),mso=r(l$," \u2014 "),zB=n(l$,"A",{href:!0});var Lzr=s(zB);fso=r(Lzr,"AlbertTokenizer"),Lzr.forEach(t),gso=r(l$," or "),QB=n(l$,"A",{href:!0});var xzr=s(QB);hso=r(xzr,"AlbertTokenizerFast"),xzr.forEach(t),uso=r(l$," (YOSO model)"),l$.forEach(t),S.forEach(t),pso=i(Is),T(Hg.$$.fragment,Is),Is.forEach(t),_so=i(Ps),Ug=n(Ps,"DIV",{class:!0});var jqe=s(Ug);T(ly.$$.fragment,jqe),bso=i(jqe),jte=n(jqe,"P",{});var $zr=s(jte);Fso=r($zr,"Register a new tokenizer in this mapping."),$zr.forEach(t),jqe.forEach(t),Ps.forEach(t),DPe=i(m),bi=n(m,"H2",{class:!0});var Dqe=s(bi);Jg=n(Dqe,"A",{id:!0,class:!0,href:!0});var kzr=s(Jg);Dte=n(kzr,"SPAN",{});var Szr=s(Dte);T(iy.$$.fragment,Szr),Szr.forEach(t),kzr.forEach(t),vso=i(Dqe),Gte=n(Dqe,"SPAN",{});var Rzr=s(Gte);Tso=r(Rzr,"AutoFeatureExtractor"),Rzr.forEach(t),Dqe.forEach(t),GPe=i(m),Ao=n(m,"DIV",{class:!0});var qs=s(Ao);T(dy.$$.fragment,qs),Mso=i(qs),cy=n(qs,"P",{});var Gqe=s(cy);Eso=r(Gqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=n(Gqe,"A",{href:!0});var Bzr=s(WB);Cso=r(Bzr,"AutoFeatureExtractor.from_pretrained()"),Bzr.forEach(t),wso=r(Gqe," class method."),Gqe.forEach(t),Aso=i(qs),my=n(qs,"P",{});var Oqe=s(my);yso=r(Oqe,"This class cannot be instantiated directly using "),Ote=n(Oqe,"CODE",{});var Pzr=s(Ote);Lso=r(Pzr,"__init__()"),Pzr.forEach(t),xso=r(Oqe," (throws an error)."),Oqe.forEach(t),$so=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(fy.$$.fragment,Yt),kso=i(Yt),Vte=n(Yt,"P",{});var Izr=s(Vte);Sso=r(Izr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Izr.forEach(t),Rso=i(Yt),wa=n(Yt,"P",{});var JA=s(wa);Bso=r(JA,"The feature extractor class to instantiate is selected based on the "),Xte=n(JA,"CODE",{});var qzr=s(Xte);Pso=r(qzr,"model_type"),qzr.forEach(t),Iso=r(JA,` property of the config object
(either passed as an argument or loaded from `),zte=n(JA,"CODE",{});var Nzr=s(zte);qso=r(Nzr,"pretrained_model_name_or_path"),Nzr.forEach(t),Nso=r(JA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qte=n(JA,"CODE",{});var jzr=s(Qte);jso=r(jzr,"pretrained_model_name_or_path"),jzr.forEach(t),Dso=r(JA,":"),JA.forEach(t),Gso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var Hwe=s(Yg);Wte=n(Hwe,"STRONG",{});var Dzr=s(Wte);Oso=r(Dzr,"beit"),Dzr.forEach(t),Vso=r(Hwe," \u2014 "),HB=n(Hwe,"A",{href:!0});var Gzr=s(HB);Xso=r(Gzr,"BeitFeatureExtractor"),Gzr.forEach(t),zso=r(Hwe," (BEiT model)"),Hwe.forEach(t),Qso=i(ae),Kg=n(ae,"LI",{});var Uwe=s(Kg);Hte=n(Uwe,"STRONG",{});var Ozr=s(Hte);Wso=r(Ozr,"clip"),Ozr.forEach(t),Hso=r(Uwe," \u2014 "),UB=n(Uwe,"A",{href:!0});var Vzr=s(UB);Uso=r(Vzr,"CLIPFeatureExtractor"),Vzr.forEach(t),Jso=r(Uwe," (CLIP model)"),Uwe.forEach(t),Yso=i(ae),Zg=n(ae,"LI",{});var Jwe=s(Zg);Ute=n(Jwe,"STRONG",{});var Xzr=s(Ute);Kso=r(Xzr,"convnext"),Xzr.forEach(t),Zso=r(Jwe," \u2014 "),JB=n(Jwe,"A",{href:!0});var zzr=s(JB);elo=r(zzr,"ConvNextFeatureExtractor"),zzr.forEach(t),olo=r(Jwe," (ConvNext model)"),Jwe.forEach(t),rlo=i(ae),eh=n(ae,"LI",{});var Ywe=s(eh);Jte=n(Ywe,"STRONG",{});var Qzr=s(Jte);tlo=r(Qzr,"data2vec-audio"),Qzr.forEach(t),alo=r(Ywe," \u2014 "),YB=n(Ywe,"A",{href:!0});var Wzr=s(YB);nlo=r(Wzr,"Wav2Vec2FeatureExtractor"),Wzr.forEach(t),slo=r(Ywe," (Data2VecAudio model)"),Ywe.forEach(t),llo=i(ae),oh=n(ae,"LI",{});var Kwe=s(oh);Yte=n(Kwe,"STRONG",{});var Hzr=s(Yte);ilo=r(Hzr,"data2vec-vision"),Hzr.forEach(t),dlo=r(Kwe," \u2014 "),KB=n(Kwe,"A",{href:!0});var Uzr=s(KB);clo=r(Uzr,"BeitFeatureExtractor"),Uzr.forEach(t),mlo=r(Kwe," (Data2VecVision model)"),Kwe.forEach(t),flo=i(ae),rh=n(ae,"LI",{});var Zwe=s(rh);Kte=n(Zwe,"STRONG",{});var Jzr=s(Kte);glo=r(Jzr,"deit"),Jzr.forEach(t),hlo=r(Zwe," \u2014 "),ZB=n(Zwe,"A",{href:!0});var Yzr=s(ZB);ulo=r(Yzr,"DeiTFeatureExtractor"),Yzr.forEach(t),plo=r(Zwe," (DeiT model)"),Zwe.forEach(t),_lo=i(ae),th=n(ae,"LI",{});var eAe=s(th);Zte=n(eAe,"STRONG",{});var Kzr=s(Zte);blo=r(Kzr,"detr"),Kzr.forEach(t),Flo=r(eAe," \u2014 "),eP=n(eAe,"A",{href:!0});var Zzr=s(eP);vlo=r(Zzr,"DetrFeatureExtractor"),Zzr.forEach(t),Tlo=r(eAe," (DETR model)"),eAe.forEach(t),Mlo=i(ae),ah=n(ae,"LI",{});var oAe=s(ah);eae=n(oAe,"STRONG",{});var eQr=s(eae);Elo=r(eQr,"dpt"),eQr.forEach(t),Clo=r(oAe," \u2014 "),oP=n(oAe,"A",{href:!0});var oQr=s(oP);wlo=r(oQr,"DPTFeatureExtractor"),oQr.forEach(t),Alo=r(oAe," (DPT model)"),oAe.forEach(t),ylo=i(ae),nh=n(ae,"LI",{});var rAe=s(nh);oae=n(rAe,"STRONG",{});var rQr=s(oae);Llo=r(rQr,"flava"),rQr.forEach(t),xlo=r(rAe," \u2014 "),rP=n(rAe,"A",{href:!0});var tQr=s(rP);$lo=r(tQr,"FlavaFeatureExtractor"),tQr.forEach(t),klo=r(rAe," (Flava model)"),rAe.forEach(t),Slo=i(ae),sh=n(ae,"LI",{});var tAe=s(sh);rae=n(tAe,"STRONG",{});var aQr=s(rae);Rlo=r(aQr,"glpn"),aQr.forEach(t),Blo=r(tAe," \u2014 "),tP=n(tAe,"A",{href:!0});var nQr=s(tP);Plo=r(nQr,"GLPNFeatureExtractor"),nQr.forEach(t),Ilo=r(tAe," (GLPN model)"),tAe.forEach(t),qlo=i(ae),lh=n(ae,"LI",{});var aAe=s(lh);tae=n(aAe,"STRONG",{});var sQr=s(tae);Nlo=r(sQr,"hubert"),sQr.forEach(t),jlo=r(aAe," \u2014 "),aP=n(aAe,"A",{href:!0});var lQr=s(aP);Dlo=r(lQr,"Wav2Vec2FeatureExtractor"),lQr.forEach(t),Glo=r(aAe," (Hubert model)"),aAe.forEach(t),Olo=i(ae),ih=n(ae,"LI",{});var nAe=s(ih);aae=n(nAe,"STRONG",{});var iQr=s(aae);Vlo=r(iQr,"layoutlmv2"),iQr.forEach(t),Xlo=r(nAe," \u2014 "),nP=n(nAe,"A",{href:!0});var dQr=s(nP);zlo=r(dQr,"LayoutLMv2FeatureExtractor"),dQr.forEach(t),Qlo=r(nAe," (LayoutLMv2 model)"),nAe.forEach(t),Wlo=i(ae),dh=n(ae,"LI",{});var sAe=s(dh);nae=n(sAe,"STRONG",{});var cQr=s(nae);Hlo=r(cQr,"maskformer"),cQr.forEach(t),Ulo=r(sAe," \u2014 "),sP=n(sAe,"A",{href:!0});var mQr=s(sP);Jlo=r(mQr,"MaskFormerFeatureExtractor"),mQr.forEach(t),Ylo=r(sAe," (MaskFormer model)"),sAe.forEach(t),Klo=i(ae),ch=n(ae,"LI",{});var lAe=s(ch);sae=n(lAe,"STRONG",{});var fQr=s(sae);Zlo=r(fQr,"perceiver"),fQr.forEach(t),eio=r(lAe," \u2014 "),lP=n(lAe,"A",{href:!0});var gQr=s(lP);oio=r(gQr,"PerceiverFeatureExtractor"),gQr.forEach(t),rio=r(lAe," (Perceiver model)"),lAe.forEach(t),tio=i(ae),mh=n(ae,"LI",{});var iAe=s(mh);lae=n(iAe,"STRONG",{});var hQr=s(lae);aio=r(hQr,"poolformer"),hQr.forEach(t),nio=r(iAe," \u2014 "),iP=n(iAe,"A",{href:!0});var uQr=s(iP);sio=r(uQr,"PoolFormerFeatureExtractor"),uQr.forEach(t),lio=r(iAe," (PoolFormer model)"),iAe.forEach(t),iio=i(ae),fh=n(ae,"LI",{});var dAe=s(fh);iae=n(dAe,"STRONG",{});var pQr=s(iae);dio=r(pQr,"regnet"),pQr.forEach(t),cio=r(dAe," \u2014 "),dP=n(dAe,"A",{href:!0});var _Qr=s(dP);mio=r(_Qr,"ConvNextFeatureExtractor"),_Qr.forEach(t),fio=r(dAe," (RegNet model)"),dAe.forEach(t),gio=i(ae),gh=n(ae,"LI",{});var cAe=s(gh);dae=n(cAe,"STRONG",{});var bQr=s(dae);hio=r(bQr,"resnet"),bQr.forEach(t),uio=r(cAe," \u2014 "),cP=n(cAe,"A",{href:!0});var FQr=s(cP);pio=r(FQr,"ConvNextFeatureExtractor"),FQr.forEach(t),_io=r(cAe," (ResNet model)"),cAe.forEach(t),bio=i(ae),hh=n(ae,"LI",{});var mAe=s(hh);cae=n(mAe,"STRONG",{});var vQr=s(cae);Fio=r(vQr,"segformer"),vQr.forEach(t),vio=r(mAe," \u2014 "),mP=n(mAe,"A",{href:!0});var TQr=s(mP);Tio=r(TQr,"SegformerFeatureExtractor"),TQr.forEach(t),Mio=r(mAe," (SegFormer model)"),mAe.forEach(t),Eio=i(ae),uh=n(ae,"LI",{});var fAe=s(uh);mae=n(fAe,"STRONG",{});var MQr=s(mae);Cio=r(MQr,"speech_to_text"),MQr.forEach(t),wio=r(fAe," \u2014 "),fP=n(fAe,"A",{href:!0});var EQr=s(fP);Aio=r(EQr,"Speech2TextFeatureExtractor"),EQr.forEach(t),yio=r(fAe," (Speech2Text model)"),fAe.forEach(t),Lio=i(ae),ph=n(ae,"LI",{});var gAe=s(ph);fae=n(gAe,"STRONG",{});var CQr=s(fae);xio=r(CQr,"swin"),CQr.forEach(t),$io=r(gAe," \u2014 "),gP=n(gAe,"A",{href:!0});var wQr=s(gP);kio=r(wQr,"ViTFeatureExtractor"),wQr.forEach(t),Sio=r(gAe," (Swin model)"),gAe.forEach(t),Rio=i(ae),_h=n(ae,"LI",{});var hAe=s(_h);gae=n(hAe,"STRONG",{});var AQr=s(gae);Bio=r(AQr,"van"),AQr.forEach(t),Pio=r(hAe," \u2014 "),hP=n(hAe,"A",{href:!0});var yQr=s(hP);Iio=r(yQr,"ConvNextFeatureExtractor"),yQr.forEach(t),qio=r(hAe," (VAN model)"),hAe.forEach(t),Nio=i(ae),bh=n(ae,"LI",{});var uAe=s(bh);hae=n(uAe,"STRONG",{});var LQr=s(hae);jio=r(LQr,"vit"),LQr.forEach(t),Dio=r(uAe," \u2014 "),uP=n(uAe,"A",{href:!0});var xQr=s(uP);Gio=r(xQr,"ViTFeatureExtractor"),xQr.forEach(t),Oio=r(uAe," (ViT model)"),uAe.forEach(t),Vio=i(ae),Fh=n(ae,"LI",{});var pAe=s(Fh);uae=n(pAe,"STRONG",{});var $Qr=s(uae);Xio=r($Qr,"vit_mae"),$Qr.forEach(t),zio=r(pAe," \u2014 "),pP=n(pAe,"A",{href:!0});var kQr=s(pP);Qio=r(kQr,"ViTFeatureExtractor"),kQr.forEach(t),Wio=r(pAe," (ViTMAE model)"),pAe.forEach(t),Hio=i(ae),vh=n(ae,"LI",{});var _Ae=s(vh);pae=n(_Ae,"STRONG",{});var SQr=s(pae);Uio=r(SQr,"wav2vec2"),SQr.forEach(t),Jio=r(_Ae," \u2014 "),_P=n(_Ae,"A",{href:!0});var RQr=s(_P);Yio=r(RQr,"Wav2Vec2FeatureExtractor"),RQr.forEach(t),Kio=r(_Ae," (Wav2Vec2 model)"),_Ae.forEach(t),Zio=i(ae),Th=n(ae,"LI",{});var bAe=s(Th);_ae=n(bAe,"STRONG",{});var BQr=s(_ae);edo=r(BQr,"yolos"),BQr.forEach(t),odo=r(bAe," \u2014 "),bP=n(bAe,"A",{href:!0});var PQr=s(bP);rdo=r(PQr,"YolosFeatureExtractor"),PQr.forEach(t),tdo=r(bAe," (YOLOS model)"),bAe.forEach(t),ae.forEach(t),ado=i(Yt),T(Mh.$$.fragment,Yt),ndo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),sdo=i(qs),Ch=n(qs,"DIV",{class:!0});var Vqe=s(Ch);T(gy.$$.fragment,Vqe),ldo=i(Vqe),bae=n(Vqe,"P",{});var IQr=s(bae);ido=r(IQr,"Register a new feature extractor for this class."),IQr.forEach(t),Vqe.forEach(t),qs.forEach(t),OPe=i(m),Fi=n(m,"H2",{class:!0});var Xqe=s(Fi);wh=n(Xqe,"A",{id:!0,class:!0,href:!0});var qQr=s(wh);Fae=n(qQr,"SPAN",{});var NQr=s(Fae);T(hy.$$.fragment,NQr),NQr.forEach(t),qQr.forEach(t),ddo=i(Xqe),vae=n(Xqe,"SPAN",{});var jQr=s(vae);cdo=r(jQr,"AutoProcessor"),jQr.forEach(t),Xqe.forEach(t),VPe=i(m),yo=n(m,"DIV",{class:!0});var Ns=s(yo);T(uy.$$.fragment,Ns),mdo=i(Ns),py=n(Ns,"P",{});var zqe=s(py);fdo=r(zqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),FP=n(zqe,"A",{href:!0});var DQr=s(FP);gdo=r(DQr,"AutoProcessor.from_pretrained()"),DQr.forEach(t),hdo=r(zqe," class method."),zqe.forEach(t),udo=i(Ns),_y=n(Ns,"P",{});var Qqe=s(_y);pdo=r(Qqe,"This class cannot be instantiated directly using "),Tae=n(Qqe,"CODE",{});var GQr=s(Tae);_do=r(GQr,"__init__()"),GQr.forEach(t),bdo=r(Qqe," (throws an error)."),Qqe.forEach(t),Fdo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(by.$$.fragment,Kt),vdo=i(Kt),Mae=n(Kt,"P",{});var OQr=s(Mae);Tdo=r(OQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),OQr.forEach(t),Mdo=i(Kt),vi=n(Kt,"P",{});var oK=s(vi);Edo=r(oK,"The processor class to instantiate is selected based on the "),Eae=n(oK,"CODE",{});var VQr=s(Eae);Cdo=r(VQr,"model_type"),VQr.forEach(t),wdo=r(oK,` property of the config object (either
passed as an argument or loaded from `),Cae=n(oK,"CODE",{});var XQr=s(Cae);Ado=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),ydo=r(oK," if possible):"),oK.forEach(t),Ldo=i(Kt),_e=n(Kt,"UL",{});var Fe=s(_e);Ah=n(Fe,"LI",{});var FAe=s(Ah);wae=n(FAe,"STRONG",{});var zQr=s(wae);xdo=r(zQr,"clip"),zQr.forEach(t),$do=r(FAe," \u2014 "),vP=n(FAe,"A",{href:!0});var QQr=s(vP);kdo=r(QQr,"CLIPProcessor"),QQr.forEach(t),Sdo=r(FAe," (CLIP model)"),FAe.forEach(t),Rdo=i(Fe),yh=n(Fe,"LI",{});var vAe=s(yh);Aae=n(vAe,"STRONG",{});var WQr=s(Aae);Bdo=r(WQr,"flava"),WQr.forEach(t),Pdo=r(vAe," \u2014 "),yae=n(vAe,"CODE",{});var HQr=s(yae);Ido=r(HQr,"FLAVAProcessor"),HQr.forEach(t),qdo=r(vAe," (Flava model)"),vAe.forEach(t),Ndo=i(Fe),Lh=n(Fe,"LI",{});var TAe=s(Lh);Lae=n(TAe,"STRONG",{});var UQr=s(Lae);jdo=r(UQr,"layoutlmv2"),UQr.forEach(t),Ddo=r(TAe," \u2014 "),TP=n(TAe,"A",{href:!0});var JQr=s(TP);Gdo=r(JQr,"LayoutLMv2Processor"),JQr.forEach(t),Odo=r(TAe," (LayoutLMv2 model)"),TAe.forEach(t),Vdo=i(Fe),xh=n(Fe,"LI",{});var MAe=s(xh);xae=n(MAe,"STRONG",{});var YQr=s(xae);Xdo=r(YQr,"layoutxlm"),YQr.forEach(t),zdo=r(MAe," \u2014 "),MP=n(MAe,"A",{href:!0});var KQr=s(MP);Qdo=r(KQr,"LayoutXLMProcessor"),KQr.forEach(t),Wdo=r(MAe," (LayoutXLM model)"),MAe.forEach(t),Hdo=i(Fe),$h=n(Fe,"LI",{});var EAe=s($h);$ae=n(EAe,"STRONG",{});var ZQr=s($ae);Udo=r(ZQr,"sew"),ZQr.forEach(t),Jdo=r(EAe," \u2014 "),EP=n(EAe,"A",{href:!0});var eWr=s(EP);Ydo=r(eWr,"Wav2Vec2Processor"),eWr.forEach(t),Kdo=r(EAe," (SEW model)"),EAe.forEach(t),Zdo=i(Fe),kh=n(Fe,"LI",{});var CAe=s(kh);kae=n(CAe,"STRONG",{});var oWr=s(kae);eco=r(oWr,"sew-d"),oWr.forEach(t),oco=r(CAe," \u2014 "),CP=n(CAe,"A",{href:!0});var rWr=s(CP);rco=r(rWr,"Wav2Vec2Processor"),rWr.forEach(t),tco=r(CAe," (SEW-D model)"),CAe.forEach(t),aco=i(Fe),Sh=n(Fe,"LI",{});var wAe=s(Sh);Sae=n(wAe,"STRONG",{});var tWr=s(Sae);nco=r(tWr,"speech_to_text"),tWr.forEach(t),sco=r(wAe," \u2014 "),wP=n(wAe,"A",{href:!0});var aWr=s(wP);lco=r(aWr,"Speech2TextProcessor"),aWr.forEach(t),ico=r(wAe," (Speech2Text model)"),wAe.forEach(t),dco=i(Fe),Rh=n(Fe,"LI",{});var AAe=s(Rh);Rae=n(AAe,"STRONG",{});var nWr=s(Rae);cco=r(nWr,"speech_to_text_2"),nWr.forEach(t),mco=r(AAe," \u2014 "),AP=n(AAe,"A",{href:!0});var sWr=s(AP);fco=r(sWr,"Speech2Text2Processor"),sWr.forEach(t),gco=r(AAe," (Speech2Text2 model)"),AAe.forEach(t),hco=i(Fe),Bh=n(Fe,"LI",{});var yAe=s(Bh);Bae=n(yAe,"STRONG",{});var lWr=s(Bae);uco=r(lWr,"trocr"),lWr.forEach(t),pco=r(yAe," \u2014 "),yP=n(yAe,"A",{href:!0});var iWr=s(yP);_co=r(iWr,"TrOCRProcessor"),iWr.forEach(t),bco=r(yAe," (TrOCR model)"),yAe.forEach(t),Fco=i(Fe),Ph=n(Fe,"LI",{});var LAe=s(Ph);Pae=n(LAe,"STRONG",{});var dWr=s(Pae);vco=r(dWr,"unispeech"),dWr.forEach(t),Tco=r(LAe," \u2014 "),LP=n(LAe,"A",{href:!0});var cWr=s(LP);Mco=r(cWr,"Wav2Vec2Processor"),cWr.forEach(t),Eco=r(LAe," (UniSpeech model)"),LAe.forEach(t),Cco=i(Fe),Ih=n(Fe,"LI",{});var xAe=s(Ih);Iae=n(xAe,"STRONG",{});var mWr=s(Iae);wco=r(mWr,"unispeech-sat"),mWr.forEach(t),Aco=r(xAe," \u2014 "),xP=n(xAe,"A",{href:!0});var fWr=s(xP);yco=r(fWr,"Wav2Vec2Processor"),fWr.forEach(t),Lco=r(xAe," (UniSpeechSat model)"),xAe.forEach(t),xco=i(Fe),qh=n(Fe,"LI",{});var $Ae=s(qh);qae=n($Ae,"STRONG",{});var gWr=s(qae);$co=r(gWr,"vilt"),gWr.forEach(t),kco=r($Ae," \u2014 "),$P=n($Ae,"A",{href:!0});var hWr=s($P);Sco=r(hWr,"ViltProcessor"),hWr.forEach(t),Rco=r($Ae," (ViLT model)"),$Ae.forEach(t),Bco=i(Fe),Nh=n(Fe,"LI",{});var kAe=s(Nh);Nae=n(kAe,"STRONG",{});var uWr=s(Nae);Pco=r(uWr,"vision-text-dual-encoder"),uWr.forEach(t),Ico=r(kAe," \u2014 "),kP=n(kAe,"A",{href:!0});var pWr=s(kP);qco=r(pWr,"VisionTextDualEncoderProcessor"),pWr.forEach(t),Nco=r(kAe," (VisionTextDualEncoder model)"),kAe.forEach(t),jco=i(Fe),jh=n(Fe,"LI",{});var SAe=s(jh);jae=n(SAe,"STRONG",{});var _Wr=s(jae);Dco=r(_Wr,"wav2vec2"),_Wr.forEach(t),Gco=r(SAe," \u2014 "),SP=n(SAe,"A",{href:!0});var bWr=s(SP);Oco=r(bWr,"Wav2Vec2Processor"),bWr.forEach(t),Vco=r(SAe," (Wav2Vec2 model)"),SAe.forEach(t),Xco=i(Fe),Dh=n(Fe,"LI",{});var RAe=s(Dh);Dae=n(RAe,"STRONG",{});var FWr=s(Dae);zco=r(FWr,"wavlm"),FWr.forEach(t),Qco=r(RAe," \u2014 "),RP=n(RAe,"A",{href:!0});var vWr=s(RP);Wco=r(vWr,"Wav2Vec2Processor"),vWr.forEach(t),Hco=r(RAe," (WavLM model)"),RAe.forEach(t),Fe.forEach(t),Uco=i(Kt),T(Gh.$$.fragment,Kt),Jco=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),Yco=i(Ns),Vh=n(Ns,"DIV",{class:!0});var Wqe=s(Vh);T(Fy.$$.fragment,Wqe),Kco=i(Wqe),Gae=n(Wqe,"P",{});var TWr=s(Gae);Zco=r(TWr,"Register a new processor for this class."),TWr.forEach(t),Wqe.forEach(t),Ns.forEach(t),XPe=i(m),Ti=n(m,"H2",{class:!0});var Hqe=s(Ti);Xh=n(Hqe,"A",{id:!0,class:!0,href:!0});var MWr=s(Xh);Oae=n(MWr,"SPAN",{});var EWr=s(Oae);T(vy.$$.fragment,EWr),EWr.forEach(t),MWr.forEach(t),emo=i(Hqe),Vae=n(Hqe,"SPAN",{});var CWr=s(Vae);omo=r(CWr,"AutoModel"),CWr.forEach(t),Hqe.forEach(t),zPe=i(m),Lo=n(m,"DIV",{class:!0});var js=s(Lo);T(Ty.$$.fragment,js),rmo=i(js),Mi=n(js,"P",{});var rK=s(Mi);tmo=r(rK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BP=n(rK,"A",{href:!0});var wWr=s(BP);amo=r(wWr,"from_pretrained()"),wWr.forEach(t),nmo=r(rK," class method or the "),PP=n(rK,"A",{href:!0});var AWr=s(PP);smo=r(AWr,"from_config()"),AWr.forEach(t),lmo=r(rK,` class
method.`),rK.forEach(t),imo=i(js),My=n(js,"P",{});var Uqe=s(My);dmo=r(Uqe,"This class cannot be instantiated directly using "),Xae=n(Uqe,"CODE",{});var yWr=s(Xae);cmo=r(yWr,"__init__()"),yWr.forEach(t),mmo=r(Uqe," (throws an error)."),Uqe.forEach(t),fmo=i(js),ot=n(js,"DIV",{class:!0});var YA=s(ot);T(Ey.$$.fragment,YA),gmo=i(YA),zae=n(YA,"P",{});var LWr=s(zae);hmo=r(LWr,"Instantiates one of the base model classes of the library from a configuration."),LWr.forEach(t),umo=i(YA),Ei=n(YA,"P",{});var tK=s(Ei);pmo=r(tK,`Note:
Loading a model from its configuration file does `),Qae=n(tK,"STRONG",{});var xWr=s(Qae);_mo=r(xWr,"not"),xWr.forEach(t),bmo=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IP=n(tK,"A",{href:!0});var $Wr=s(IP);Fmo=r($Wr,"from_pretrained()"),$Wr.forEach(t),vmo=r(tK," to load the model weights."),tK.forEach(t),Tmo=i(YA),T(zh.$$.fragment,YA),YA.forEach(t),Mmo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(Cy.$$.fragment,Zt),Emo=i(Zt),Wae=n(Zt,"P",{});var kWr=s(Wae);Cmo=r(kWr,"Instantiate one of the base model classes of the library from a pretrained model."),kWr.forEach(t),wmo=i(Zt),Aa=n(Zt,"P",{});var KA=s(Aa);Amo=r(KA,"The model class to instantiate is selected based on the "),Hae=n(KA,"CODE",{});var SWr=s(Hae);ymo=r(SWr,"model_type"),SWr.forEach(t),Lmo=r(KA,` property of the config object (either
passed as an argument or loaded from `),Uae=n(KA,"CODE",{});var RWr=s(Uae);xmo=r(RWr,"pretrained_model_name_or_path"),RWr.forEach(t),$mo=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jae=n(KA,"CODE",{});var BWr=s(Jae);kmo=r(BWr,"pretrained_model_name_or_path"),BWr.forEach(t),Smo=r(KA,":"),KA.forEach(t),Rmo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var BAe=s(Qh);Yae=n(BAe,"STRONG",{});var PWr=s(Yae);Bmo=r(PWr,"albert"),PWr.forEach(t),Pmo=r(BAe," \u2014 "),qP=n(BAe,"A",{href:!0});var IWr=s(qP);Imo=r(IWr,"AlbertModel"),IWr.forEach(t),qmo=r(BAe," (ALBERT model)"),BAe.forEach(t),Nmo=i($),Wh=n($,"LI",{});var PAe=s(Wh);Kae=n(PAe,"STRONG",{});var qWr=s(Kae);jmo=r(qWr,"bart"),qWr.forEach(t),Dmo=r(PAe," \u2014 "),NP=n(PAe,"A",{href:!0});var NWr=s(NP);Gmo=r(NWr,"BartModel"),NWr.forEach(t),Omo=r(PAe," (BART model)"),PAe.forEach(t),Vmo=i($),Hh=n($,"LI",{});var IAe=s(Hh);Zae=n(IAe,"STRONG",{});var jWr=s(Zae);Xmo=r(jWr,"beit"),jWr.forEach(t),zmo=r(IAe," \u2014 "),jP=n(IAe,"A",{href:!0});var DWr=s(jP);Qmo=r(DWr,"BeitModel"),DWr.forEach(t),Wmo=r(IAe," (BEiT model)"),IAe.forEach(t),Hmo=i($),Uh=n($,"LI",{});var qAe=s(Uh);ene=n(qAe,"STRONG",{});var GWr=s(ene);Umo=r(GWr,"bert"),GWr.forEach(t),Jmo=r(qAe," \u2014 "),DP=n(qAe,"A",{href:!0});var OWr=s(DP);Ymo=r(OWr,"BertModel"),OWr.forEach(t),Kmo=r(qAe," (BERT model)"),qAe.forEach(t),Zmo=i($),Jh=n($,"LI",{});var NAe=s(Jh);one=n(NAe,"STRONG",{});var VWr=s(one);efo=r(VWr,"bert-generation"),VWr.forEach(t),ofo=r(NAe," \u2014 "),GP=n(NAe,"A",{href:!0});var XWr=s(GP);rfo=r(XWr,"BertGenerationEncoder"),XWr.forEach(t),tfo=r(NAe," (Bert Generation model)"),NAe.forEach(t),afo=i($),Yh=n($,"LI",{});var jAe=s(Yh);rne=n(jAe,"STRONG",{});var zWr=s(rne);nfo=r(zWr,"big_bird"),zWr.forEach(t),sfo=r(jAe," \u2014 "),OP=n(jAe,"A",{href:!0});var QWr=s(OP);lfo=r(QWr,"BigBirdModel"),QWr.forEach(t),ifo=r(jAe," (BigBird model)"),jAe.forEach(t),dfo=i($),Kh=n($,"LI",{});var DAe=s(Kh);tne=n(DAe,"STRONG",{});var WWr=s(tne);cfo=r(WWr,"bigbird_pegasus"),WWr.forEach(t),mfo=r(DAe," \u2014 "),VP=n(DAe,"A",{href:!0});var HWr=s(VP);ffo=r(HWr,"BigBirdPegasusModel"),HWr.forEach(t),gfo=r(DAe," (BigBirdPegasus model)"),DAe.forEach(t),hfo=i($),Zh=n($,"LI",{});var GAe=s(Zh);ane=n(GAe,"STRONG",{});var UWr=s(ane);ufo=r(UWr,"blenderbot"),UWr.forEach(t),pfo=r(GAe," \u2014 "),XP=n(GAe,"A",{href:!0});var JWr=s(XP);_fo=r(JWr,"BlenderbotModel"),JWr.forEach(t),bfo=r(GAe," (Blenderbot model)"),GAe.forEach(t),Ffo=i($),eu=n($,"LI",{});var OAe=s(eu);nne=n(OAe,"STRONG",{});var YWr=s(nne);vfo=r(YWr,"blenderbot-small"),YWr.forEach(t),Tfo=r(OAe," \u2014 "),zP=n(OAe,"A",{href:!0});var KWr=s(zP);Mfo=r(KWr,"BlenderbotSmallModel"),KWr.forEach(t),Efo=r(OAe," (BlenderbotSmall model)"),OAe.forEach(t),Cfo=i($),ou=n($,"LI",{});var VAe=s(ou);sne=n(VAe,"STRONG",{});var ZWr=s(sne);wfo=r(ZWr,"camembert"),ZWr.forEach(t),Afo=r(VAe," \u2014 "),QP=n(VAe,"A",{href:!0});var eHr=s(QP);yfo=r(eHr,"CamembertModel"),eHr.forEach(t),Lfo=r(VAe," (CamemBERT model)"),VAe.forEach(t),xfo=i($),ru=n($,"LI",{});var XAe=s(ru);lne=n(XAe,"STRONG",{});var oHr=s(lne);$fo=r(oHr,"canine"),oHr.forEach(t),kfo=r(XAe," \u2014 "),WP=n(XAe,"A",{href:!0});var rHr=s(WP);Sfo=r(rHr,"CanineModel"),rHr.forEach(t),Rfo=r(XAe," (Canine model)"),XAe.forEach(t),Bfo=i($),tu=n($,"LI",{});var zAe=s(tu);ine=n(zAe,"STRONG",{});var tHr=s(ine);Pfo=r(tHr,"clip"),tHr.forEach(t),Ifo=r(zAe," \u2014 "),HP=n(zAe,"A",{href:!0});var aHr=s(HP);qfo=r(aHr,"CLIPModel"),aHr.forEach(t),Nfo=r(zAe," (CLIP model)"),zAe.forEach(t),jfo=i($),au=n($,"LI",{});var QAe=s(au);dne=n(QAe,"STRONG",{});var nHr=s(dne);Dfo=r(nHr,"convbert"),nHr.forEach(t),Gfo=r(QAe," \u2014 "),UP=n(QAe,"A",{href:!0});var sHr=s(UP);Ofo=r(sHr,"ConvBertModel"),sHr.forEach(t),Vfo=r(QAe," (ConvBERT model)"),QAe.forEach(t),Xfo=i($),nu=n($,"LI",{});var WAe=s(nu);cne=n(WAe,"STRONG",{});var lHr=s(cne);zfo=r(lHr,"convnext"),lHr.forEach(t),Qfo=r(WAe," \u2014 "),JP=n(WAe,"A",{href:!0});var iHr=s(JP);Wfo=r(iHr,"ConvNextModel"),iHr.forEach(t),Hfo=r(WAe," (ConvNext model)"),WAe.forEach(t),Ufo=i($),su=n($,"LI",{});var HAe=s(su);mne=n(HAe,"STRONG",{});var dHr=s(mne);Jfo=r(dHr,"ctrl"),dHr.forEach(t),Yfo=r(HAe," \u2014 "),YP=n(HAe,"A",{href:!0});var cHr=s(YP);Kfo=r(cHr,"CTRLModel"),cHr.forEach(t),Zfo=r(HAe," (CTRL model)"),HAe.forEach(t),ego=i($),lu=n($,"LI",{});var UAe=s(lu);fne=n(UAe,"STRONG",{});var mHr=s(fne);ogo=r(mHr,"data2vec-audio"),mHr.forEach(t),rgo=r(UAe," \u2014 "),KP=n(UAe,"A",{href:!0});var fHr=s(KP);tgo=r(fHr,"Data2VecAudioModel"),fHr.forEach(t),ago=r(UAe," (Data2VecAudio model)"),UAe.forEach(t),ngo=i($),iu=n($,"LI",{});var JAe=s(iu);gne=n(JAe,"STRONG",{});var gHr=s(gne);sgo=r(gHr,"data2vec-text"),gHr.forEach(t),lgo=r(JAe," \u2014 "),ZP=n(JAe,"A",{href:!0});var hHr=s(ZP);igo=r(hHr,"Data2VecTextModel"),hHr.forEach(t),dgo=r(JAe," (Data2VecText model)"),JAe.forEach(t),cgo=i($),du=n($,"LI",{});var YAe=s(du);hne=n(YAe,"STRONG",{});var uHr=s(hne);mgo=r(uHr,"data2vec-vision"),uHr.forEach(t),fgo=r(YAe," \u2014 "),eI=n(YAe,"A",{href:!0});var pHr=s(eI);ggo=r(pHr,"Data2VecVisionModel"),pHr.forEach(t),hgo=r(YAe," (Data2VecVision model)"),YAe.forEach(t),ugo=i($),cu=n($,"LI",{});var KAe=s(cu);une=n(KAe,"STRONG",{});var _Hr=s(une);pgo=r(_Hr,"deberta"),_Hr.forEach(t),_go=r(KAe," \u2014 "),oI=n(KAe,"A",{href:!0});var bHr=s(oI);bgo=r(bHr,"DebertaModel"),bHr.forEach(t),Fgo=r(KAe," (DeBERTa model)"),KAe.forEach(t),vgo=i($),mu=n($,"LI",{});var ZAe=s(mu);pne=n(ZAe,"STRONG",{});var FHr=s(pne);Tgo=r(FHr,"deberta-v2"),FHr.forEach(t),Mgo=r(ZAe," \u2014 "),rI=n(ZAe,"A",{href:!0});var vHr=s(rI);Ego=r(vHr,"DebertaV2Model"),vHr.forEach(t),Cgo=r(ZAe," (DeBERTa-v2 model)"),ZAe.forEach(t),wgo=i($),fu=n($,"LI",{});var e0e=s(fu);_ne=n(e0e,"STRONG",{});var THr=s(_ne);Ago=r(THr,"decision_transformer"),THr.forEach(t),ygo=r(e0e," \u2014 "),tI=n(e0e,"A",{href:!0});var MHr=s(tI);Lgo=r(MHr,"DecisionTransformerModel"),MHr.forEach(t),xgo=r(e0e," (Decision Transformer model)"),e0e.forEach(t),$go=i($),gu=n($,"LI",{});var o0e=s(gu);bne=n(o0e,"STRONG",{});var EHr=s(bne);kgo=r(EHr,"deit"),EHr.forEach(t),Sgo=r(o0e," \u2014 "),aI=n(o0e,"A",{href:!0});var CHr=s(aI);Rgo=r(CHr,"DeiTModel"),CHr.forEach(t),Bgo=r(o0e," (DeiT model)"),o0e.forEach(t),Pgo=i($),hu=n($,"LI",{});var r0e=s(hu);Fne=n(r0e,"STRONG",{});var wHr=s(Fne);Igo=r(wHr,"detr"),wHr.forEach(t),qgo=r(r0e," \u2014 "),nI=n(r0e,"A",{href:!0});var AHr=s(nI);Ngo=r(AHr,"DetrModel"),AHr.forEach(t),jgo=r(r0e," (DETR model)"),r0e.forEach(t),Dgo=i($),uu=n($,"LI",{});var t0e=s(uu);vne=n(t0e,"STRONG",{});var yHr=s(vne);Ggo=r(yHr,"distilbert"),yHr.forEach(t),Ogo=r(t0e," \u2014 "),sI=n(t0e,"A",{href:!0});var LHr=s(sI);Vgo=r(LHr,"DistilBertModel"),LHr.forEach(t),Xgo=r(t0e," (DistilBERT model)"),t0e.forEach(t),zgo=i($),pu=n($,"LI",{});var a0e=s(pu);Tne=n(a0e,"STRONG",{});var xHr=s(Tne);Qgo=r(xHr,"dpr"),xHr.forEach(t),Wgo=r(a0e," \u2014 "),lI=n(a0e,"A",{href:!0});var $Hr=s(lI);Hgo=r($Hr,"DPRQuestionEncoder"),$Hr.forEach(t),Ugo=r(a0e," (DPR model)"),a0e.forEach(t),Jgo=i($),_u=n($,"LI",{});var n0e=s(_u);Mne=n(n0e,"STRONG",{});var kHr=s(Mne);Ygo=r(kHr,"dpt"),kHr.forEach(t),Kgo=r(n0e," \u2014 "),iI=n(n0e,"A",{href:!0});var SHr=s(iI);Zgo=r(SHr,"DPTModel"),SHr.forEach(t),eho=r(n0e," (DPT model)"),n0e.forEach(t),oho=i($),bu=n($,"LI",{});var s0e=s(bu);Ene=n(s0e,"STRONG",{});var RHr=s(Ene);rho=r(RHr,"electra"),RHr.forEach(t),tho=r(s0e," \u2014 "),dI=n(s0e,"A",{href:!0});var BHr=s(dI);aho=r(BHr,"ElectraModel"),BHr.forEach(t),nho=r(s0e," (ELECTRA model)"),s0e.forEach(t),sho=i($),Fu=n($,"LI",{});var l0e=s(Fu);Cne=n(l0e,"STRONG",{});var PHr=s(Cne);lho=r(PHr,"flaubert"),PHr.forEach(t),iho=r(l0e," \u2014 "),cI=n(l0e,"A",{href:!0});var IHr=s(cI);dho=r(IHr,"FlaubertModel"),IHr.forEach(t),cho=r(l0e," (FlauBERT model)"),l0e.forEach(t),mho=i($),vu=n($,"LI",{});var i0e=s(vu);wne=n(i0e,"STRONG",{});var qHr=s(wne);fho=r(qHr,"flava"),qHr.forEach(t),gho=r(i0e," \u2014 "),mI=n(i0e,"A",{href:!0});var NHr=s(mI);hho=r(NHr,"FlavaModel"),NHr.forEach(t),uho=r(i0e," (Flava model)"),i0e.forEach(t),pho=i($),Tu=n($,"LI",{});var d0e=s(Tu);Ane=n(d0e,"STRONG",{});var jHr=s(Ane);_ho=r(jHr,"fnet"),jHr.forEach(t),bho=r(d0e," \u2014 "),fI=n(d0e,"A",{href:!0});var DHr=s(fI);Fho=r(DHr,"FNetModel"),DHr.forEach(t),vho=r(d0e," (FNet model)"),d0e.forEach(t),Tho=i($),Mu=n($,"LI",{});var c0e=s(Mu);yne=n(c0e,"STRONG",{});var GHr=s(yne);Mho=r(GHr,"fsmt"),GHr.forEach(t),Eho=r(c0e," \u2014 "),gI=n(c0e,"A",{href:!0});var OHr=s(gI);Cho=r(OHr,"FSMTModel"),OHr.forEach(t),who=r(c0e," (FairSeq Machine-Translation model)"),c0e.forEach(t),Aho=i($),Ss=n($,"LI",{});var i$=s(Ss);Lne=n(i$,"STRONG",{});var VHr=s(Lne);yho=r(VHr,"funnel"),VHr.forEach(t),Lho=r(i$," \u2014 "),hI=n(i$,"A",{href:!0});var XHr=s(hI);xho=r(XHr,"FunnelModel"),XHr.forEach(t),$ho=r(i$," or "),uI=n(i$,"A",{href:!0});var zHr=s(uI);kho=r(zHr,"FunnelBaseModel"),zHr.forEach(t),Sho=r(i$," (Funnel Transformer model)"),i$.forEach(t),Rho=i($),Eu=n($,"LI",{});var m0e=s(Eu);xne=n(m0e,"STRONG",{});var QHr=s(xne);Bho=r(QHr,"glpn"),QHr.forEach(t),Pho=r(m0e," \u2014 "),pI=n(m0e,"A",{href:!0});var WHr=s(pI);Iho=r(WHr,"GLPNModel"),WHr.forEach(t),qho=r(m0e," (GLPN model)"),m0e.forEach(t),Nho=i($),Cu=n($,"LI",{});var f0e=s(Cu);$ne=n(f0e,"STRONG",{});var HHr=s($ne);jho=r(HHr,"gpt2"),HHr.forEach(t),Dho=r(f0e," \u2014 "),_I=n(f0e,"A",{href:!0});var UHr=s(_I);Gho=r(UHr,"GPT2Model"),UHr.forEach(t),Oho=r(f0e," (OpenAI GPT-2 model)"),f0e.forEach(t),Vho=i($),wu=n($,"LI",{});var g0e=s(wu);kne=n(g0e,"STRONG",{});var JHr=s(kne);Xho=r(JHr,"gpt_neo"),JHr.forEach(t),zho=r(g0e," \u2014 "),bI=n(g0e,"A",{href:!0});var YHr=s(bI);Qho=r(YHr,"GPTNeoModel"),YHr.forEach(t),Who=r(g0e," (GPT Neo model)"),g0e.forEach(t),Hho=i($),Au=n($,"LI",{});var h0e=s(Au);Sne=n(h0e,"STRONG",{});var KHr=s(Sne);Uho=r(KHr,"gptj"),KHr.forEach(t),Jho=r(h0e," \u2014 "),FI=n(h0e,"A",{href:!0});var ZHr=s(FI);Yho=r(ZHr,"GPTJModel"),ZHr.forEach(t),Kho=r(h0e," (GPT-J model)"),h0e.forEach(t),Zho=i($),yu=n($,"LI",{});var u0e=s(yu);Rne=n(u0e,"STRONG",{});var eUr=s(Rne);euo=r(eUr,"hubert"),eUr.forEach(t),ouo=r(u0e," \u2014 "),vI=n(u0e,"A",{href:!0});var oUr=s(vI);ruo=r(oUr,"HubertModel"),oUr.forEach(t),tuo=r(u0e," (Hubert model)"),u0e.forEach(t),auo=i($),Lu=n($,"LI",{});var p0e=s(Lu);Bne=n(p0e,"STRONG",{});var rUr=s(Bne);nuo=r(rUr,"ibert"),rUr.forEach(t),suo=r(p0e," \u2014 "),TI=n(p0e,"A",{href:!0});var tUr=s(TI);luo=r(tUr,"IBertModel"),tUr.forEach(t),iuo=r(p0e," (I-BERT model)"),p0e.forEach(t),duo=i($),xu=n($,"LI",{});var _0e=s(xu);Pne=n(_0e,"STRONG",{});var aUr=s(Pne);cuo=r(aUr,"imagegpt"),aUr.forEach(t),muo=r(_0e," \u2014 "),MI=n(_0e,"A",{href:!0});var nUr=s(MI);fuo=r(nUr,"ImageGPTModel"),nUr.forEach(t),guo=r(_0e," (ImageGPT model)"),_0e.forEach(t),huo=i($),$u=n($,"LI",{});var b0e=s($u);Ine=n(b0e,"STRONG",{});var sUr=s(Ine);uuo=r(sUr,"layoutlm"),sUr.forEach(t),puo=r(b0e," \u2014 "),EI=n(b0e,"A",{href:!0});var lUr=s(EI);_uo=r(lUr,"LayoutLMModel"),lUr.forEach(t),buo=r(b0e," (LayoutLM model)"),b0e.forEach(t),Fuo=i($),ku=n($,"LI",{});var F0e=s(ku);qne=n(F0e,"STRONG",{});var iUr=s(qne);vuo=r(iUr,"layoutlmv2"),iUr.forEach(t),Tuo=r(F0e," \u2014 "),CI=n(F0e,"A",{href:!0});var dUr=s(CI);Muo=r(dUr,"LayoutLMv2Model"),dUr.forEach(t),Euo=r(F0e," (LayoutLMv2 model)"),F0e.forEach(t),Cuo=i($),Su=n($,"LI",{});var v0e=s(Su);Nne=n(v0e,"STRONG",{});var cUr=s(Nne);wuo=r(cUr,"led"),cUr.forEach(t),Auo=r(v0e," \u2014 "),wI=n(v0e,"A",{href:!0});var mUr=s(wI);yuo=r(mUr,"LEDModel"),mUr.forEach(t),Luo=r(v0e," (LED model)"),v0e.forEach(t),xuo=i($),Ru=n($,"LI",{});var T0e=s(Ru);jne=n(T0e,"STRONG",{});var fUr=s(jne);$uo=r(fUr,"longformer"),fUr.forEach(t),kuo=r(T0e," \u2014 "),AI=n(T0e,"A",{href:!0});var gUr=s(AI);Suo=r(gUr,"LongformerModel"),gUr.forEach(t),Ruo=r(T0e," (Longformer model)"),T0e.forEach(t),Buo=i($),Bu=n($,"LI",{});var M0e=s(Bu);Dne=n(M0e,"STRONG",{});var hUr=s(Dne);Puo=r(hUr,"luke"),hUr.forEach(t),Iuo=r(M0e," \u2014 "),yI=n(M0e,"A",{href:!0});var uUr=s(yI);quo=r(uUr,"LukeModel"),uUr.forEach(t),Nuo=r(M0e," (LUKE model)"),M0e.forEach(t),juo=i($),Pu=n($,"LI",{});var E0e=s(Pu);Gne=n(E0e,"STRONG",{});var pUr=s(Gne);Duo=r(pUr,"lxmert"),pUr.forEach(t),Guo=r(E0e," \u2014 "),LI=n(E0e,"A",{href:!0});var _Ur=s(LI);Ouo=r(_Ur,"LxmertModel"),_Ur.forEach(t),Vuo=r(E0e," (LXMERT model)"),E0e.forEach(t),Xuo=i($),Iu=n($,"LI",{});var C0e=s(Iu);One=n(C0e,"STRONG",{});var bUr=s(One);zuo=r(bUr,"m2m_100"),bUr.forEach(t),Quo=r(C0e," \u2014 "),xI=n(C0e,"A",{href:!0});var FUr=s(xI);Wuo=r(FUr,"M2M100Model"),FUr.forEach(t),Huo=r(C0e," (M2M100 model)"),C0e.forEach(t),Uuo=i($),qu=n($,"LI",{});var w0e=s(qu);Vne=n(w0e,"STRONG",{});var vUr=s(Vne);Juo=r(vUr,"marian"),vUr.forEach(t),Yuo=r(w0e," \u2014 "),$I=n(w0e,"A",{href:!0});var TUr=s($I);Kuo=r(TUr,"MarianModel"),TUr.forEach(t),Zuo=r(w0e," (Marian model)"),w0e.forEach(t),epo=i($),Nu=n($,"LI",{});var A0e=s(Nu);Xne=n(A0e,"STRONG",{});var MUr=s(Xne);opo=r(MUr,"maskformer"),MUr.forEach(t),rpo=r(A0e," \u2014 "),kI=n(A0e,"A",{href:!0});var EUr=s(kI);tpo=r(EUr,"MaskFormerModel"),EUr.forEach(t),apo=r(A0e," (MaskFormer model)"),A0e.forEach(t),npo=i($),ju=n($,"LI",{});var y0e=s(ju);zne=n(y0e,"STRONG",{});var CUr=s(zne);spo=r(CUr,"mbart"),CUr.forEach(t),lpo=r(y0e," \u2014 "),SI=n(y0e,"A",{href:!0});var wUr=s(SI);ipo=r(wUr,"MBartModel"),wUr.forEach(t),dpo=r(y0e," (mBART model)"),y0e.forEach(t),cpo=i($),Du=n($,"LI",{});var L0e=s(Du);Qne=n(L0e,"STRONG",{});var AUr=s(Qne);mpo=r(AUr,"megatron-bert"),AUr.forEach(t),fpo=r(L0e," \u2014 "),RI=n(L0e,"A",{href:!0});var yUr=s(RI);gpo=r(yUr,"MegatronBertModel"),yUr.forEach(t),hpo=r(L0e," (MegatronBert model)"),L0e.forEach(t),upo=i($),Gu=n($,"LI",{});var x0e=s(Gu);Wne=n(x0e,"STRONG",{});var LUr=s(Wne);ppo=r(LUr,"mobilebert"),LUr.forEach(t),_po=r(x0e," \u2014 "),BI=n(x0e,"A",{href:!0});var xUr=s(BI);bpo=r(xUr,"MobileBertModel"),xUr.forEach(t),Fpo=r(x0e," (MobileBERT model)"),x0e.forEach(t),vpo=i($),Ou=n($,"LI",{});var $0e=s(Ou);Hne=n($0e,"STRONG",{});var $Ur=s(Hne);Tpo=r($Ur,"mpnet"),$Ur.forEach(t),Mpo=r($0e," \u2014 "),PI=n($0e,"A",{href:!0});var kUr=s(PI);Epo=r(kUr,"MPNetModel"),kUr.forEach(t),Cpo=r($0e," (MPNet model)"),$0e.forEach(t),wpo=i($),Vu=n($,"LI",{});var k0e=s(Vu);Une=n(k0e,"STRONG",{});var SUr=s(Une);Apo=r(SUr,"mt5"),SUr.forEach(t),ypo=r(k0e," \u2014 "),II=n(k0e,"A",{href:!0});var RUr=s(II);Lpo=r(RUr,"MT5Model"),RUr.forEach(t),xpo=r(k0e," (mT5 model)"),k0e.forEach(t),$po=i($),Xu=n($,"LI",{});var S0e=s(Xu);Jne=n(S0e,"STRONG",{});var BUr=s(Jne);kpo=r(BUr,"nystromformer"),BUr.forEach(t),Spo=r(S0e," \u2014 "),qI=n(S0e,"A",{href:!0});var PUr=s(qI);Rpo=r(PUr,"NystromformerModel"),PUr.forEach(t),Bpo=r(S0e," (Nystromformer model)"),S0e.forEach(t),Ppo=i($),zu=n($,"LI",{});var R0e=s(zu);Yne=n(R0e,"STRONG",{});var IUr=s(Yne);Ipo=r(IUr,"openai-gpt"),IUr.forEach(t),qpo=r(R0e," \u2014 "),NI=n(R0e,"A",{href:!0});var qUr=s(NI);Npo=r(qUr,"OpenAIGPTModel"),qUr.forEach(t),jpo=r(R0e," (OpenAI GPT model)"),R0e.forEach(t),Dpo=i($),Qu=n($,"LI",{});var B0e=s(Qu);Kne=n(B0e,"STRONG",{});var NUr=s(Kne);Gpo=r(NUr,"opt"),NUr.forEach(t),Opo=r(B0e," \u2014 "),jI=n(B0e,"A",{href:!0});var jUr=s(jI);Vpo=r(jUr,"OPTModel"),jUr.forEach(t),Xpo=r(B0e," (OPT model)"),B0e.forEach(t),zpo=i($),Wu=n($,"LI",{});var P0e=s(Wu);Zne=n(P0e,"STRONG",{});var DUr=s(Zne);Qpo=r(DUr,"pegasus"),DUr.forEach(t),Wpo=r(P0e," \u2014 "),DI=n(P0e,"A",{href:!0});var GUr=s(DI);Hpo=r(GUr,"PegasusModel"),GUr.forEach(t),Upo=r(P0e," (Pegasus model)"),P0e.forEach(t),Jpo=i($),Hu=n($,"LI",{});var I0e=s(Hu);ese=n(I0e,"STRONG",{});var OUr=s(ese);Ypo=r(OUr,"perceiver"),OUr.forEach(t),Kpo=r(I0e," \u2014 "),GI=n(I0e,"A",{href:!0});var VUr=s(GI);Zpo=r(VUr,"PerceiverModel"),VUr.forEach(t),e_o=r(I0e," (Perceiver model)"),I0e.forEach(t),o_o=i($),Uu=n($,"LI",{});var q0e=s(Uu);ose=n(q0e,"STRONG",{});var XUr=s(ose);r_o=r(XUr,"plbart"),XUr.forEach(t),t_o=r(q0e," \u2014 "),OI=n(q0e,"A",{href:!0});var zUr=s(OI);a_o=r(zUr,"PLBartModel"),zUr.forEach(t),n_o=r(q0e," (PLBart model)"),q0e.forEach(t),s_o=i($),Ju=n($,"LI",{});var N0e=s(Ju);rse=n(N0e,"STRONG",{});var QUr=s(rse);l_o=r(QUr,"poolformer"),QUr.forEach(t),i_o=r(N0e," \u2014 "),VI=n(N0e,"A",{href:!0});var WUr=s(VI);d_o=r(WUr,"PoolFormerModel"),WUr.forEach(t),c_o=r(N0e," (PoolFormer model)"),N0e.forEach(t),m_o=i($),Yu=n($,"LI",{});var j0e=s(Yu);tse=n(j0e,"STRONG",{});var HUr=s(tse);f_o=r(HUr,"prophetnet"),HUr.forEach(t),g_o=r(j0e," \u2014 "),XI=n(j0e,"A",{href:!0});var UUr=s(XI);h_o=r(UUr,"ProphetNetModel"),UUr.forEach(t),u_o=r(j0e," (ProphetNet model)"),j0e.forEach(t),p_o=i($),Ku=n($,"LI",{});var D0e=s(Ku);ase=n(D0e,"STRONG",{});var JUr=s(ase);__o=r(JUr,"qdqbert"),JUr.forEach(t),b_o=r(D0e," \u2014 "),zI=n(D0e,"A",{href:!0});var YUr=s(zI);F_o=r(YUr,"QDQBertModel"),YUr.forEach(t),v_o=r(D0e," (QDQBert model)"),D0e.forEach(t),T_o=i($),Zu=n($,"LI",{});var G0e=s(Zu);nse=n(G0e,"STRONG",{});var KUr=s(nse);M_o=r(KUr,"reformer"),KUr.forEach(t),E_o=r(G0e," \u2014 "),QI=n(G0e,"A",{href:!0});var ZUr=s(QI);C_o=r(ZUr,"ReformerModel"),ZUr.forEach(t),w_o=r(G0e," (Reformer model)"),G0e.forEach(t),A_o=i($),ep=n($,"LI",{});var O0e=s(ep);sse=n(O0e,"STRONG",{});var eJr=s(sse);y_o=r(eJr,"regnet"),eJr.forEach(t),L_o=r(O0e," \u2014 "),WI=n(O0e,"A",{href:!0});var oJr=s(WI);x_o=r(oJr,"RegNetModel"),oJr.forEach(t),$_o=r(O0e," (RegNet model)"),O0e.forEach(t),k_o=i($),op=n($,"LI",{});var V0e=s(op);lse=n(V0e,"STRONG",{});var rJr=s(lse);S_o=r(rJr,"rembert"),rJr.forEach(t),R_o=r(V0e," \u2014 "),HI=n(V0e,"A",{href:!0});var tJr=s(HI);B_o=r(tJr,"RemBertModel"),tJr.forEach(t),P_o=r(V0e," (RemBERT model)"),V0e.forEach(t),I_o=i($),rp=n($,"LI",{});var X0e=s(rp);ise=n(X0e,"STRONG",{});var aJr=s(ise);q_o=r(aJr,"resnet"),aJr.forEach(t),N_o=r(X0e," \u2014 "),UI=n(X0e,"A",{href:!0});var nJr=s(UI);j_o=r(nJr,"ResNetModel"),nJr.forEach(t),D_o=r(X0e," (ResNet model)"),X0e.forEach(t),G_o=i($),tp=n($,"LI",{});var z0e=s(tp);dse=n(z0e,"STRONG",{});var sJr=s(dse);O_o=r(sJr,"retribert"),sJr.forEach(t),V_o=r(z0e," \u2014 "),JI=n(z0e,"A",{href:!0});var lJr=s(JI);X_o=r(lJr,"RetriBertModel"),lJr.forEach(t),z_o=r(z0e," (RetriBERT model)"),z0e.forEach(t),Q_o=i($),ap=n($,"LI",{});var Q0e=s(ap);cse=n(Q0e,"STRONG",{});var iJr=s(cse);W_o=r(iJr,"roberta"),iJr.forEach(t),H_o=r(Q0e," \u2014 "),YI=n(Q0e,"A",{href:!0});var dJr=s(YI);U_o=r(dJr,"RobertaModel"),dJr.forEach(t),J_o=r(Q0e," (RoBERTa model)"),Q0e.forEach(t),Y_o=i($),np=n($,"LI",{});var W0e=s(np);mse=n(W0e,"STRONG",{});var cJr=s(mse);K_o=r(cJr,"roformer"),cJr.forEach(t),Z_o=r(W0e," \u2014 "),KI=n(W0e,"A",{href:!0});var mJr=s(KI);ebo=r(mJr,"RoFormerModel"),mJr.forEach(t),obo=r(W0e," (RoFormer model)"),W0e.forEach(t),rbo=i($),sp=n($,"LI",{});var H0e=s(sp);fse=n(H0e,"STRONG",{});var fJr=s(fse);tbo=r(fJr,"segformer"),fJr.forEach(t),abo=r(H0e," \u2014 "),ZI=n(H0e,"A",{href:!0});var gJr=s(ZI);nbo=r(gJr,"SegformerModel"),gJr.forEach(t),sbo=r(H0e," (SegFormer model)"),H0e.forEach(t),lbo=i($),lp=n($,"LI",{});var U0e=s(lp);gse=n(U0e,"STRONG",{});var hJr=s(gse);ibo=r(hJr,"sew"),hJr.forEach(t),dbo=r(U0e," \u2014 "),eq=n(U0e,"A",{href:!0});var uJr=s(eq);cbo=r(uJr,"SEWModel"),uJr.forEach(t),mbo=r(U0e," (SEW model)"),U0e.forEach(t),fbo=i($),ip=n($,"LI",{});var J0e=s(ip);hse=n(J0e,"STRONG",{});var pJr=s(hse);gbo=r(pJr,"sew-d"),pJr.forEach(t),hbo=r(J0e," \u2014 "),oq=n(J0e,"A",{href:!0});var _Jr=s(oq);ubo=r(_Jr,"SEWDModel"),_Jr.forEach(t),pbo=r(J0e," (SEW-D model)"),J0e.forEach(t),_bo=i($),dp=n($,"LI",{});var Y0e=s(dp);use=n(Y0e,"STRONG",{});var bJr=s(use);bbo=r(bJr,"speech_to_text"),bJr.forEach(t),Fbo=r(Y0e," \u2014 "),rq=n(Y0e,"A",{href:!0});var FJr=s(rq);vbo=r(FJr,"Speech2TextModel"),FJr.forEach(t),Tbo=r(Y0e," (Speech2Text model)"),Y0e.forEach(t),Mbo=i($),cp=n($,"LI",{});var K0e=s(cp);pse=n(K0e,"STRONG",{});var vJr=s(pse);Ebo=r(vJr,"splinter"),vJr.forEach(t),Cbo=r(K0e," \u2014 "),tq=n(K0e,"A",{href:!0});var TJr=s(tq);wbo=r(TJr,"SplinterModel"),TJr.forEach(t),Abo=r(K0e," (Splinter model)"),K0e.forEach(t),ybo=i($),mp=n($,"LI",{});var Z0e=s(mp);_se=n(Z0e,"STRONG",{});var MJr=s(_se);Lbo=r(MJr,"squeezebert"),MJr.forEach(t),xbo=r(Z0e," \u2014 "),aq=n(Z0e,"A",{href:!0});var EJr=s(aq);$bo=r(EJr,"SqueezeBertModel"),EJr.forEach(t),kbo=r(Z0e," (SqueezeBERT model)"),Z0e.forEach(t),Sbo=i($),fp=n($,"LI",{});var e6e=s(fp);bse=n(e6e,"STRONG",{});var CJr=s(bse);Rbo=r(CJr,"swin"),CJr.forEach(t),Bbo=r(e6e," \u2014 "),nq=n(e6e,"A",{href:!0});var wJr=s(nq);Pbo=r(wJr,"SwinModel"),wJr.forEach(t),Ibo=r(e6e," (Swin model)"),e6e.forEach(t),qbo=i($),gp=n($,"LI",{});var o6e=s(gp);Fse=n(o6e,"STRONG",{});var AJr=s(Fse);Nbo=r(AJr,"t5"),AJr.forEach(t),jbo=r(o6e," \u2014 "),sq=n(o6e,"A",{href:!0});var yJr=s(sq);Dbo=r(yJr,"T5Model"),yJr.forEach(t),Gbo=r(o6e," (T5 model)"),o6e.forEach(t),Obo=i($),hp=n($,"LI",{});var r6e=s(hp);vse=n(r6e,"STRONG",{});var LJr=s(vse);Vbo=r(LJr,"tapas"),LJr.forEach(t),Xbo=r(r6e," \u2014 "),lq=n(r6e,"A",{href:!0});var xJr=s(lq);zbo=r(xJr,"TapasModel"),xJr.forEach(t),Qbo=r(r6e," (TAPAS model)"),r6e.forEach(t),Wbo=i($),up=n($,"LI",{});var t6e=s(up);Tse=n(t6e,"STRONG",{});var $Jr=s(Tse);Hbo=r($Jr,"transfo-xl"),$Jr.forEach(t),Ubo=r(t6e," \u2014 "),iq=n(t6e,"A",{href:!0});var kJr=s(iq);Jbo=r(kJr,"TransfoXLModel"),kJr.forEach(t),Ybo=r(t6e," (Transformer-XL model)"),t6e.forEach(t),Kbo=i($),pp=n($,"LI",{});var a6e=s(pp);Mse=n(a6e,"STRONG",{});var SJr=s(Mse);Zbo=r(SJr,"unispeech"),SJr.forEach(t),e2o=r(a6e," \u2014 "),dq=n(a6e,"A",{href:!0});var RJr=s(dq);o2o=r(RJr,"UniSpeechModel"),RJr.forEach(t),r2o=r(a6e," (UniSpeech model)"),a6e.forEach(t),t2o=i($),_p=n($,"LI",{});var n6e=s(_p);Ese=n(n6e,"STRONG",{});var BJr=s(Ese);a2o=r(BJr,"unispeech-sat"),BJr.forEach(t),n2o=r(n6e," \u2014 "),cq=n(n6e,"A",{href:!0});var PJr=s(cq);s2o=r(PJr,"UniSpeechSatModel"),PJr.forEach(t),l2o=r(n6e," (UniSpeechSat model)"),n6e.forEach(t),i2o=i($),bp=n($,"LI",{});var s6e=s(bp);Cse=n(s6e,"STRONG",{});var IJr=s(Cse);d2o=r(IJr,"van"),IJr.forEach(t),c2o=r(s6e," \u2014 "),mq=n(s6e,"A",{href:!0});var qJr=s(mq);m2o=r(qJr,"VanModel"),qJr.forEach(t),f2o=r(s6e," (VAN model)"),s6e.forEach(t),g2o=i($),Fp=n($,"LI",{});var l6e=s(Fp);wse=n(l6e,"STRONG",{});var NJr=s(wse);h2o=r(NJr,"vilt"),NJr.forEach(t),u2o=r(l6e," \u2014 "),fq=n(l6e,"A",{href:!0});var jJr=s(fq);p2o=r(jJr,"ViltModel"),jJr.forEach(t),_2o=r(l6e," (ViLT model)"),l6e.forEach(t),b2o=i($),vp=n($,"LI",{});var i6e=s(vp);Ase=n(i6e,"STRONG",{});var DJr=s(Ase);F2o=r(DJr,"vision-text-dual-encoder"),DJr.forEach(t),v2o=r(i6e," \u2014 "),gq=n(i6e,"A",{href:!0});var GJr=s(gq);T2o=r(GJr,"VisionTextDualEncoderModel"),GJr.forEach(t),M2o=r(i6e," (VisionTextDualEncoder model)"),i6e.forEach(t),E2o=i($),Tp=n($,"LI",{});var d6e=s(Tp);yse=n(d6e,"STRONG",{});var OJr=s(yse);C2o=r(OJr,"visual_bert"),OJr.forEach(t),w2o=r(d6e," \u2014 "),hq=n(d6e,"A",{href:!0});var VJr=s(hq);A2o=r(VJr,"VisualBertModel"),VJr.forEach(t),y2o=r(d6e," (VisualBert model)"),d6e.forEach(t),L2o=i($),Mp=n($,"LI",{});var c6e=s(Mp);Lse=n(c6e,"STRONG",{});var XJr=s(Lse);x2o=r(XJr,"vit"),XJr.forEach(t),$2o=r(c6e," \u2014 "),uq=n(c6e,"A",{href:!0});var zJr=s(uq);k2o=r(zJr,"ViTModel"),zJr.forEach(t),S2o=r(c6e," (ViT model)"),c6e.forEach(t),R2o=i($),Ep=n($,"LI",{});var m6e=s(Ep);xse=n(m6e,"STRONG",{});var QJr=s(xse);B2o=r(QJr,"vit_mae"),QJr.forEach(t),P2o=r(m6e," \u2014 "),pq=n(m6e,"A",{href:!0});var WJr=s(pq);I2o=r(WJr,"ViTMAEModel"),WJr.forEach(t),q2o=r(m6e," (ViTMAE model)"),m6e.forEach(t),N2o=i($),Cp=n($,"LI",{});var f6e=s(Cp);$se=n(f6e,"STRONG",{});var HJr=s($se);j2o=r(HJr,"wav2vec2"),HJr.forEach(t),D2o=r(f6e," \u2014 "),_q=n(f6e,"A",{href:!0});var UJr=s(_q);G2o=r(UJr,"Wav2Vec2Model"),UJr.forEach(t),O2o=r(f6e," (Wav2Vec2 model)"),f6e.forEach(t),V2o=i($),wp=n($,"LI",{});var g6e=s(wp);kse=n(g6e,"STRONG",{});var JJr=s(kse);X2o=r(JJr,"wavlm"),JJr.forEach(t),z2o=r(g6e," \u2014 "),bq=n(g6e,"A",{href:!0});var YJr=s(bq);Q2o=r(YJr,"WavLMModel"),YJr.forEach(t),W2o=r(g6e," (WavLM model)"),g6e.forEach(t),H2o=i($),Ap=n($,"LI",{});var h6e=s(Ap);Sse=n(h6e,"STRONG",{});var KJr=s(Sse);U2o=r(KJr,"xglm"),KJr.forEach(t),J2o=r(h6e," \u2014 "),Fq=n(h6e,"A",{href:!0});var ZJr=s(Fq);Y2o=r(ZJr,"XGLMModel"),ZJr.forEach(t),K2o=r(h6e," (XGLM model)"),h6e.forEach(t),Z2o=i($),yp=n($,"LI",{});var u6e=s(yp);Rse=n(u6e,"STRONG",{});var eYr=s(Rse);eFo=r(eYr,"xlm"),eYr.forEach(t),oFo=r(u6e," \u2014 "),vq=n(u6e,"A",{href:!0});var oYr=s(vq);rFo=r(oYr,"XLMModel"),oYr.forEach(t),tFo=r(u6e," (XLM model)"),u6e.forEach(t),aFo=i($),Lp=n($,"LI",{});var p6e=s(Lp);Bse=n(p6e,"STRONG",{});var rYr=s(Bse);nFo=r(rYr,"xlm-prophetnet"),rYr.forEach(t),sFo=r(p6e," \u2014 "),Tq=n(p6e,"A",{href:!0});var tYr=s(Tq);lFo=r(tYr,"XLMProphetNetModel"),tYr.forEach(t),iFo=r(p6e," (XLMProphetNet model)"),p6e.forEach(t),dFo=i($),xp=n($,"LI",{});var _6e=s(xp);Pse=n(_6e,"STRONG",{});var aYr=s(Pse);cFo=r(aYr,"xlm-roberta"),aYr.forEach(t),mFo=r(_6e," \u2014 "),Mq=n(_6e,"A",{href:!0});var nYr=s(Mq);fFo=r(nYr,"XLMRobertaModel"),nYr.forEach(t),gFo=r(_6e," (XLM-RoBERTa model)"),_6e.forEach(t),hFo=i($),$p=n($,"LI",{});var b6e=s($p);Ise=n(b6e,"STRONG",{});var sYr=s(Ise);uFo=r(sYr,"xlm-roberta-xl"),sYr.forEach(t),pFo=r(b6e," \u2014 "),Eq=n(b6e,"A",{href:!0});var lYr=s(Eq);_Fo=r(lYr,"XLMRobertaXLModel"),lYr.forEach(t),bFo=r(b6e," (XLM-RoBERTa-XL model)"),b6e.forEach(t),FFo=i($),kp=n($,"LI",{});var F6e=s(kp);qse=n(F6e,"STRONG",{});var iYr=s(qse);vFo=r(iYr,"xlnet"),iYr.forEach(t),TFo=r(F6e," \u2014 "),Cq=n(F6e,"A",{href:!0});var dYr=s(Cq);MFo=r(dYr,"XLNetModel"),dYr.forEach(t),EFo=r(F6e," (XLNet model)"),F6e.forEach(t),CFo=i($),Sp=n($,"LI",{});var v6e=s(Sp);Nse=n(v6e,"STRONG",{});var cYr=s(Nse);wFo=r(cYr,"yolos"),cYr.forEach(t),AFo=r(v6e," \u2014 "),wq=n(v6e,"A",{href:!0});var mYr=s(wq);yFo=r(mYr,"YolosModel"),mYr.forEach(t),LFo=r(v6e," (YOLOS model)"),v6e.forEach(t),xFo=i($),Rp=n($,"LI",{});var T6e=s(Rp);jse=n(T6e,"STRONG",{});var fYr=s(jse);$Fo=r(fYr,"yoso"),fYr.forEach(t),kFo=r(T6e," \u2014 "),Aq=n(T6e,"A",{href:!0});var gYr=s(Aq);SFo=r(gYr,"YosoModel"),gYr.forEach(t),RFo=r(T6e," (YOSO model)"),T6e.forEach(t),$.forEach(t),BFo=i(Zt),Bp=n(Zt,"P",{});var M6e=s(Bp);PFo=r(M6e,"The model is set in evaluation mode by default using "),Dse=n(M6e,"CODE",{});var hYr=s(Dse);IFo=r(hYr,"model.eval()"),hYr.forEach(t),qFo=r(M6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gse=n(M6e,"CODE",{});var uYr=s(Gse);NFo=r(uYr,"model.train()"),uYr.forEach(t),M6e.forEach(t),jFo=i(Zt),T(Pp.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),QPe=i(m),Ci=n(m,"H2",{class:!0});var Jqe=s(Ci);Ip=n(Jqe,"A",{id:!0,class:!0,href:!0});var pYr=s(Ip);Ose=n(pYr,"SPAN",{});var _Yr=s(Ose);T(wy.$$.fragment,_Yr),_Yr.forEach(t),pYr.forEach(t),DFo=i(Jqe),Vse=n(Jqe,"SPAN",{});var bYr=s(Vse);GFo=r(bYr,"AutoModelForPreTraining"),bYr.forEach(t),Jqe.forEach(t),WPe=i(m),xo=n(m,"DIV",{class:!0});var Ds=s(xo);T(Ay.$$.fragment,Ds),OFo=i(Ds),wi=n(Ds,"P",{});var aK=s(wi);VFo=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yq=n(aK,"A",{href:!0});var FYr=s(yq);XFo=r(FYr,"from_pretrained()"),FYr.forEach(t),zFo=r(aK," class method or the "),Lq=n(aK,"A",{href:!0});var vYr=s(Lq);QFo=r(vYr,"from_config()"),vYr.forEach(t),WFo=r(aK,` class
method.`),aK.forEach(t),HFo=i(Ds),yy=n(Ds,"P",{});var Yqe=s(yy);UFo=r(Yqe,"This class cannot be instantiated directly using "),Xse=n(Yqe,"CODE",{});var TYr=s(Xse);JFo=r(TYr,"__init__()"),TYr.forEach(t),YFo=r(Yqe," (throws an error)."),Yqe.forEach(t),KFo=i(Ds),rt=n(Ds,"DIV",{class:!0});var ZA=s(rt);T(Ly.$$.fragment,ZA),ZFo=i(ZA),zse=n(ZA,"P",{});var MYr=s(zse);evo=r(MYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MYr.forEach(t),ovo=i(ZA),Ai=n(ZA,"P",{});var nK=s(Ai);rvo=r(nK,`Note:
Loading a model from its configuration file does `),Qse=n(nK,"STRONG",{});var EYr=s(Qse);tvo=r(EYr,"not"),EYr.forEach(t),avo=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=n(nK,"A",{href:!0});var CYr=s(xq);nvo=r(CYr,"from_pretrained()"),CYr.forEach(t),svo=r(nK," to load the model weights."),nK.forEach(t),lvo=i(ZA),T(qp.$$.fragment,ZA),ZA.forEach(t),ivo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(xy.$$.fragment,ea),dvo=i(ea),Wse=n(ea,"P",{});var wYr=s(Wse);cvo=r(wYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wYr.forEach(t),mvo=i(ea),ya=n(ea,"P",{});var e0=s(ya);fvo=r(e0,"The model class to instantiate is selected based on the "),Hse=n(e0,"CODE",{});var AYr=s(Hse);gvo=r(AYr,"model_type"),AYr.forEach(t),hvo=r(e0,` property of the config object (either
passed as an argument or loaded from `),Use=n(e0,"CODE",{});var yYr=s(Use);uvo=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),pvo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jse=n(e0,"CODE",{});var LYr=s(Jse);_vo=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),bvo=r(e0,":"),e0.forEach(t),Fvo=i(ea),G=n(ea,"UL",{});var V=s(G);Np=n(V,"LI",{});var E6e=s(Np);Yse=n(E6e,"STRONG",{});var xYr=s(Yse);vvo=r(xYr,"albert"),xYr.forEach(t),Tvo=r(E6e," \u2014 "),$q=n(E6e,"A",{href:!0});var $Yr=s($q);Mvo=r($Yr,"AlbertForPreTraining"),$Yr.forEach(t),Evo=r(E6e," (ALBERT model)"),E6e.forEach(t),Cvo=i(V),jp=n(V,"LI",{});var C6e=s(jp);Kse=n(C6e,"STRONG",{});var kYr=s(Kse);wvo=r(kYr,"bart"),kYr.forEach(t),Avo=r(C6e," \u2014 "),kq=n(C6e,"A",{href:!0});var SYr=s(kq);yvo=r(SYr,"BartForConditionalGeneration"),SYr.forEach(t),Lvo=r(C6e," (BART model)"),C6e.forEach(t),xvo=i(V),Dp=n(V,"LI",{});var w6e=s(Dp);Zse=n(w6e,"STRONG",{});var RYr=s(Zse);$vo=r(RYr,"bert"),RYr.forEach(t),kvo=r(w6e," \u2014 "),Sq=n(w6e,"A",{href:!0});var BYr=s(Sq);Svo=r(BYr,"BertForPreTraining"),BYr.forEach(t),Rvo=r(w6e," (BERT model)"),w6e.forEach(t),Bvo=i(V),Gp=n(V,"LI",{});var A6e=s(Gp);ele=n(A6e,"STRONG",{});var PYr=s(ele);Pvo=r(PYr,"big_bird"),PYr.forEach(t),Ivo=r(A6e," \u2014 "),Rq=n(A6e,"A",{href:!0});var IYr=s(Rq);qvo=r(IYr,"BigBirdForPreTraining"),IYr.forEach(t),Nvo=r(A6e," (BigBird model)"),A6e.forEach(t),jvo=i(V),Op=n(V,"LI",{});var y6e=s(Op);ole=n(y6e,"STRONG",{});var qYr=s(ole);Dvo=r(qYr,"camembert"),qYr.forEach(t),Gvo=r(y6e," \u2014 "),Bq=n(y6e,"A",{href:!0});var NYr=s(Bq);Ovo=r(NYr,"CamembertForMaskedLM"),NYr.forEach(t),Vvo=r(y6e," (CamemBERT model)"),y6e.forEach(t),Xvo=i(V),Vp=n(V,"LI",{});var L6e=s(Vp);rle=n(L6e,"STRONG",{});var jYr=s(rle);zvo=r(jYr,"ctrl"),jYr.forEach(t),Qvo=r(L6e," \u2014 "),Pq=n(L6e,"A",{href:!0});var DYr=s(Pq);Wvo=r(DYr,"CTRLLMHeadModel"),DYr.forEach(t),Hvo=r(L6e," (CTRL model)"),L6e.forEach(t),Uvo=i(V),Xp=n(V,"LI",{});var x6e=s(Xp);tle=n(x6e,"STRONG",{});var GYr=s(tle);Jvo=r(GYr,"data2vec-text"),GYr.forEach(t),Yvo=r(x6e," \u2014 "),Iq=n(x6e,"A",{href:!0});var OYr=s(Iq);Kvo=r(OYr,"Data2VecTextForMaskedLM"),OYr.forEach(t),Zvo=r(x6e," (Data2VecText model)"),x6e.forEach(t),e1o=i(V),zp=n(V,"LI",{});var $6e=s(zp);ale=n($6e,"STRONG",{});var VYr=s(ale);o1o=r(VYr,"deberta"),VYr.forEach(t),r1o=r($6e," \u2014 "),qq=n($6e,"A",{href:!0});var XYr=s(qq);t1o=r(XYr,"DebertaForMaskedLM"),XYr.forEach(t),a1o=r($6e," (DeBERTa model)"),$6e.forEach(t),n1o=i(V),Qp=n(V,"LI",{});var k6e=s(Qp);nle=n(k6e,"STRONG",{});var zYr=s(nle);s1o=r(zYr,"deberta-v2"),zYr.forEach(t),l1o=r(k6e," \u2014 "),Nq=n(k6e,"A",{href:!0});var QYr=s(Nq);i1o=r(QYr,"DebertaV2ForMaskedLM"),QYr.forEach(t),d1o=r(k6e," (DeBERTa-v2 model)"),k6e.forEach(t),c1o=i(V),Wp=n(V,"LI",{});var S6e=s(Wp);sle=n(S6e,"STRONG",{});var WYr=s(sle);m1o=r(WYr,"distilbert"),WYr.forEach(t),f1o=r(S6e," \u2014 "),jq=n(S6e,"A",{href:!0});var HYr=s(jq);g1o=r(HYr,"DistilBertForMaskedLM"),HYr.forEach(t),h1o=r(S6e," (DistilBERT model)"),S6e.forEach(t),u1o=i(V),Hp=n(V,"LI",{});var R6e=s(Hp);lle=n(R6e,"STRONG",{});var UYr=s(lle);p1o=r(UYr,"electra"),UYr.forEach(t),_1o=r(R6e," \u2014 "),Dq=n(R6e,"A",{href:!0});var JYr=s(Dq);b1o=r(JYr,"ElectraForPreTraining"),JYr.forEach(t),F1o=r(R6e," (ELECTRA model)"),R6e.forEach(t),v1o=i(V),Up=n(V,"LI",{});var B6e=s(Up);ile=n(B6e,"STRONG",{});var YYr=s(ile);T1o=r(YYr,"flaubert"),YYr.forEach(t),M1o=r(B6e," \u2014 "),Gq=n(B6e,"A",{href:!0});var KYr=s(Gq);E1o=r(KYr,"FlaubertWithLMHeadModel"),KYr.forEach(t),C1o=r(B6e," (FlauBERT model)"),B6e.forEach(t),w1o=i(V),Jp=n(V,"LI",{});var P6e=s(Jp);dle=n(P6e,"STRONG",{});var ZYr=s(dle);A1o=r(ZYr,"flava"),ZYr.forEach(t),y1o=r(P6e," \u2014 "),Oq=n(P6e,"A",{href:!0});var eKr=s(Oq);L1o=r(eKr,"FlavaForPreTraining"),eKr.forEach(t),x1o=r(P6e," (Flava model)"),P6e.forEach(t),$1o=i(V),Yp=n(V,"LI",{});var I6e=s(Yp);cle=n(I6e,"STRONG",{});var oKr=s(cle);k1o=r(oKr,"fnet"),oKr.forEach(t),S1o=r(I6e," \u2014 "),Vq=n(I6e,"A",{href:!0});var rKr=s(Vq);R1o=r(rKr,"FNetForPreTraining"),rKr.forEach(t),B1o=r(I6e," (FNet model)"),I6e.forEach(t),P1o=i(V),Kp=n(V,"LI",{});var q6e=s(Kp);mle=n(q6e,"STRONG",{});var tKr=s(mle);I1o=r(tKr,"fsmt"),tKr.forEach(t),q1o=r(q6e," \u2014 "),Xq=n(q6e,"A",{href:!0});var aKr=s(Xq);N1o=r(aKr,"FSMTForConditionalGeneration"),aKr.forEach(t),j1o=r(q6e," (FairSeq Machine-Translation model)"),q6e.forEach(t),D1o=i(V),Zp=n(V,"LI",{});var N6e=s(Zp);fle=n(N6e,"STRONG",{});var nKr=s(fle);G1o=r(nKr,"funnel"),nKr.forEach(t),O1o=r(N6e," \u2014 "),zq=n(N6e,"A",{href:!0});var sKr=s(zq);V1o=r(sKr,"FunnelForPreTraining"),sKr.forEach(t),X1o=r(N6e," (Funnel Transformer model)"),N6e.forEach(t),z1o=i(V),e_=n(V,"LI",{});var j6e=s(e_);gle=n(j6e,"STRONG",{});var lKr=s(gle);Q1o=r(lKr,"gpt2"),lKr.forEach(t),W1o=r(j6e," \u2014 "),Qq=n(j6e,"A",{href:!0});var iKr=s(Qq);H1o=r(iKr,"GPT2LMHeadModel"),iKr.forEach(t),U1o=r(j6e," (OpenAI GPT-2 model)"),j6e.forEach(t),J1o=i(V),o_=n(V,"LI",{});var D6e=s(o_);hle=n(D6e,"STRONG",{});var dKr=s(hle);Y1o=r(dKr,"ibert"),dKr.forEach(t),K1o=r(D6e," \u2014 "),Wq=n(D6e,"A",{href:!0});var cKr=s(Wq);Z1o=r(cKr,"IBertForMaskedLM"),cKr.forEach(t),eTo=r(D6e," (I-BERT model)"),D6e.forEach(t),oTo=i(V),r_=n(V,"LI",{});var G6e=s(r_);ule=n(G6e,"STRONG",{});var mKr=s(ule);rTo=r(mKr,"layoutlm"),mKr.forEach(t),tTo=r(G6e," \u2014 "),Hq=n(G6e,"A",{href:!0});var fKr=s(Hq);aTo=r(fKr,"LayoutLMForMaskedLM"),fKr.forEach(t),nTo=r(G6e," (LayoutLM model)"),G6e.forEach(t),sTo=i(V),t_=n(V,"LI",{});var O6e=s(t_);ple=n(O6e,"STRONG",{});var gKr=s(ple);lTo=r(gKr,"longformer"),gKr.forEach(t),iTo=r(O6e," \u2014 "),Uq=n(O6e,"A",{href:!0});var hKr=s(Uq);dTo=r(hKr,"LongformerForMaskedLM"),hKr.forEach(t),cTo=r(O6e," (Longformer model)"),O6e.forEach(t),mTo=i(V),a_=n(V,"LI",{});var V6e=s(a_);_le=n(V6e,"STRONG",{});var uKr=s(_le);fTo=r(uKr,"lxmert"),uKr.forEach(t),gTo=r(V6e," \u2014 "),Jq=n(V6e,"A",{href:!0});var pKr=s(Jq);hTo=r(pKr,"LxmertForPreTraining"),pKr.forEach(t),uTo=r(V6e," (LXMERT model)"),V6e.forEach(t),pTo=i(V),n_=n(V,"LI",{});var X6e=s(n_);ble=n(X6e,"STRONG",{});var _Kr=s(ble);_To=r(_Kr,"megatron-bert"),_Kr.forEach(t),bTo=r(X6e," \u2014 "),Yq=n(X6e,"A",{href:!0});var bKr=s(Yq);FTo=r(bKr,"MegatronBertForPreTraining"),bKr.forEach(t),vTo=r(X6e," (MegatronBert model)"),X6e.forEach(t),TTo=i(V),s_=n(V,"LI",{});var z6e=s(s_);Fle=n(z6e,"STRONG",{});var FKr=s(Fle);MTo=r(FKr,"mobilebert"),FKr.forEach(t),ETo=r(z6e," \u2014 "),Kq=n(z6e,"A",{href:!0});var vKr=s(Kq);CTo=r(vKr,"MobileBertForPreTraining"),vKr.forEach(t),wTo=r(z6e," (MobileBERT model)"),z6e.forEach(t),ATo=i(V),l_=n(V,"LI",{});var Q6e=s(l_);vle=n(Q6e,"STRONG",{});var TKr=s(vle);yTo=r(TKr,"mpnet"),TKr.forEach(t),LTo=r(Q6e," \u2014 "),Zq=n(Q6e,"A",{href:!0});var MKr=s(Zq);xTo=r(MKr,"MPNetForMaskedLM"),MKr.forEach(t),$To=r(Q6e," (MPNet model)"),Q6e.forEach(t),kTo=i(V),i_=n(V,"LI",{});var W6e=s(i_);Tle=n(W6e,"STRONG",{});var EKr=s(Tle);STo=r(EKr,"openai-gpt"),EKr.forEach(t),RTo=r(W6e," \u2014 "),eN=n(W6e,"A",{href:!0});var CKr=s(eN);BTo=r(CKr,"OpenAIGPTLMHeadModel"),CKr.forEach(t),PTo=r(W6e," (OpenAI GPT model)"),W6e.forEach(t),ITo=i(V),d_=n(V,"LI",{});var H6e=s(d_);Mle=n(H6e,"STRONG",{});var wKr=s(Mle);qTo=r(wKr,"retribert"),wKr.forEach(t),NTo=r(H6e," \u2014 "),oN=n(H6e,"A",{href:!0});var AKr=s(oN);jTo=r(AKr,"RetriBertModel"),AKr.forEach(t),DTo=r(H6e," (RetriBERT model)"),H6e.forEach(t),GTo=i(V),c_=n(V,"LI",{});var U6e=s(c_);Ele=n(U6e,"STRONG",{});var yKr=s(Ele);OTo=r(yKr,"roberta"),yKr.forEach(t),VTo=r(U6e," \u2014 "),rN=n(U6e,"A",{href:!0});var LKr=s(rN);XTo=r(LKr,"RobertaForMaskedLM"),LKr.forEach(t),zTo=r(U6e," (RoBERTa model)"),U6e.forEach(t),QTo=i(V),m_=n(V,"LI",{});var J6e=s(m_);Cle=n(J6e,"STRONG",{});var xKr=s(Cle);WTo=r(xKr,"squeezebert"),xKr.forEach(t),HTo=r(J6e," \u2014 "),tN=n(J6e,"A",{href:!0});var $Kr=s(tN);UTo=r($Kr,"SqueezeBertForMaskedLM"),$Kr.forEach(t),JTo=r(J6e," (SqueezeBERT model)"),J6e.forEach(t),YTo=i(V),f_=n(V,"LI",{});var Y6e=s(f_);wle=n(Y6e,"STRONG",{});var kKr=s(wle);KTo=r(kKr,"t5"),kKr.forEach(t),ZTo=r(Y6e," \u2014 "),aN=n(Y6e,"A",{href:!0});var SKr=s(aN);eMo=r(SKr,"T5ForConditionalGeneration"),SKr.forEach(t),oMo=r(Y6e," (T5 model)"),Y6e.forEach(t),rMo=i(V),g_=n(V,"LI",{});var K6e=s(g_);Ale=n(K6e,"STRONG",{});var RKr=s(Ale);tMo=r(RKr,"tapas"),RKr.forEach(t),aMo=r(K6e," \u2014 "),nN=n(K6e,"A",{href:!0});var BKr=s(nN);nMo=r(BKr,"TapasForMaskedLM"),BKr.forEach(t),sMo=r(K6e," (TAPAS model)"),K6e.forEach(t),lMo=i(V),h_=n(V,"LI",{});var Z6e=s(h_);yle=n(Z6e,"STRONG",{});var PKr=s(yle);iMo=r(PKr,"transfo-xl"),PKr.forEach(t),dMo=r(Z6e," \u2014 "),sN=n(Z6e,"A",{href:!0});var IKr=s(sN);cMo=r(IKr,"TransfoXLLMHeadModel"),IKr.forEach(t),mMo=r(Z6e," (Transformer-XL model)"),Z6e.forEach(t),fMo=i(V),u_=n(V,"LI",{});var eye=s(u_);Lle=n(eye,"STRONG",{});var qKr=s(Lle);gMo=r(qKr,"unispeech"),qKr.forEach(t),hMo=r(eye," \u2014 "),lN=n(eye,"A",{href:!0});var NKr=s(lN);uMo=r(NKr,"UniSpeechForPreTraining"),NKr.forEach(t),pMo=r(eye," (UniSpeech model)"),eye.forEach(t),_Mo=i(V),p_=n(V,"LI",{});var oye=s(p_);xle=n(oye,"STRONG",{});var jKr=s(xle);bMo=r(jKr,"unispeech-sat"),jKr.forEach(t),FMo=r(oye," \u2014 "),iN=n(oye,"A",{href:!0});var DKr=s(iN);vMo=r(DKr,"UniSpeechSatForPreTraining"),DKr.forEach(t),TMo=r(oye," (UniSpeechSat model)"),oye.forEach(t),MMo=i(V),__=n(V,"LI",{});var rye=s(__);$le=n(rye,"STRONG",{});var GKr=s($le);EMo=r(GKr,"visual_bert"),GKr.forEach(t),CMo=r(rye," \u2014 "),dN=n(rye,"A",{href:!0});var OKr=s(dN);wMo=r(OKr,"VisualBertForPreTraining"),OKr.forEach(t),AMo=r(rye," (VisualBert model)"),rye.forEach(t),yMo=i(V),b_=n(V,"LI",{});var tye=s(b_);kle=n(tye,"STRONG",{});var VKr=s(kle);LMo=r(VKr,"vit_mae"),VKr.forEach(t),xMo=r(tye," \u2014 "),cN=n(tye,"A",{href:!0});var XKr=s(cN);$Mo=r(XKr,"ViTMAEForPreTraining"),XKr.forEach(t),kMo=r(tye," (ViTMAE model)"),tye.forEach(t),SMo=i(V),F_=n(V,"LI",{});var aye=s(F_);Sle=n(aye,"STRONG",{});var zKr=s(Sle);RMo=r(zKr,"wav2vec2"),zKr.forEach(t),BMo=r(aye," \u2014 "),mN=n(aye,"A",{href:!0});var QKr=s(mN);PMo=r(QKr,"Wav2Vec2ForPreTraining"),QKr.forEach(t),IMo=r(aye," (Wav2Vec2 model)"),aye.forEach(t),qMo=i(V),v_=n(V,"LI",{});var nye=s(v_);Rle=n(nye,"STRONG",{});var WKr=s(Rle);NMo=r(WKr,"xlm"),WKr.forEach(t),jMo=r(nye," \u2014 "),fN=n(nye,"A",{href:!0});var HKr=s(fN);DMo=r(HKr,"XLMWithLMHeadModel"),HKr.forEach(t),GMo=r(nye," (XLM model)"),nye.forEach(t),OMo=i(V),T_=n(V,"LI",{});var sye=s(T_);Ble=n(sye,"STRONG",{});var UKr=s(Ble);VMo=r(UKr,"xlm-roberta"),UKr.forEach(t),XMo=r(sye," \u2014 "),gN=n(sye,"A",{href:!0});var JKr=s(gN);zMo=r(JKr,"XLMRobertaForMaskedLM"),JKr.forEach(t),QMo=r(sye," (XLM-RoBERTa model)"),sye.forEach(t),WMo=i(V),M_=n(V,"LI",{});var lye=s(M_);Ple=n(lye,"STRONG",{});var YKr=s(Ple);HMo=r(YKr,"xlm-roberta-xl"),YKr.forEach(t),UMo=r(lye," \u2014 "),hN=n(lye,"A",{href:!0});var KKr=s(hN);JMo=r(KKr,"XLMRobertaXLForMaskedLM"),KKr.forEach(t),YMo=r(lye," (XLM-RoBERTa-XL model)"),lye.forEach(t),KMo=i(V),E_=n(V,"LI",{});var iye=s(E_);Ile=n(iye,"STRONG",{});var ZKr=s(Ile);ZMo=r(ZKr,"xlnet"),ZKr.forEach(t),e4o=r(iye," \u2014 "),uN=n(iye,"A",{href:!0});var eZr=s(uN);o4o=r(eZr,"XLNetLMHeadModel"),eZr.forEach(t),r4o=r(iye," (XLNet model)"),iye.forEach(t),V.forEach(t),t4o=i(ea),C_=n(ea,"P",{});var dye=s(C_);a4o=r(dye,"The model is set in evaluation mode by default using "),qle=n(dye,"CODE",{});var oZr=s(qle);n4o=r(oZr,"model.eval()"),oZr.forEach(t),s4o=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=n(dye,"CODE",{});var rZr=s(Nle);l4o=r(rZr,"model.train()"),rZr.forEach(t),dye.forEach(t),i4o=i(ea),T(w_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),HPe=i(m),yi=n(m,"H2",{class:!0});var Kqe=s(yi);A_=n(Kqe,"A",{id:!0,class:!0,href:!0});var tZr=s(A_);jle=n(tZr,"SPAN",{});var aZr=s(jle);T($y.$$.fragment,aZr),aZr.forEach(t),tZr.forEach(t),d4o=i(Kqe),Dle=n(Kqe,"SPAN",{});var nZr=s(Dle);c4o=r(nZr,"AutoModelForCausalLM"),nZr.forEach(t),Kqe.forEach(t),UPe=i(m),$o=n(m,"DIV",{class:!0});var Gs=s($o);T(ky.$$.fragment,Gs),m4o=i(Gs),Li=n(Gs,"P",{});var sK=s(Li);f4o=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pN=n(sK,"A",{href:!0});var sZr=s(pN);g4o=r(sZr,"from_pretrained()"),sZr.forEach(t),h4o=r(sK," class method or the "),_N=n(sK,"A",{href:!0});var lZr=s(_N);u4o=r(lZr,"from_config()"),lZr.forEach(t),p4o=r(sK,` class
method.`),sK.forEach(t),_4o=i(Gs),Sy=n(Gs,"P",{});var Zqe=s(Sy);b4o=r(Zqe,"This class cannot be instantiated directly using "),Gle=n(Zqe,"CODE",{});var iZr=s(Gle);F4o=r(iZr,"__init__()"),iZr.forEach(t),v4o=r(Zqe," (throws an error)."),Zqe.forEach(t),T4o=i(Gs),tt=n(Gs,"DIV",{class:!0});var o0=s(tt);T(Ry.$$.fragment,o0),M4o=i(o0),Ole=n(o0,"P",{});var dZr=s(Ole);E4o=r(dZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dZr.forEach(t),C4o=i(o0),xi=n(o0,"P",{});var lK=s(xi);w4o=r(lK,`Note:
Loading a model from its configuration file does `),Vle=n(lK,"STRONG",{});var cZr=s(Vle);A4o=r(cZr,"not"),cZr.forEach(t),y4o=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=n(lK,"A",{href:!0});var mZr=s(bN);L4o=r(mZr,"from_pretrained()"),mZr.forEach(t),x4o=r(lK," to load the model weights."),lK.forEach(t),$4o=i(o0),T(y_.$$.fragment,o0),o0.forEach(t),k4o=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(By.$$.fragment,oa),S4o=i(oa),Xle=n(oa,"P",{});var fZr=s(Xle);R4o=r(fZr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fZr.forEach(t),B4o=i(oa),La=n(oa,"P",{});var r0=s(La);P4o=r(r0,"The model class to instantiate is selected based on the "),zle=n(r0,"CODE",{});var gZr=s(zle);I4o=r(gZr,"model_type"),gZr.forEach(t),q4o=r(r0,` property of the config object (either
passed as an argument or loaded from `),Qle=n(r0,"CODE",{});var hZr=s(Qle);N4o=r(hZr,"pretrained_model_name_or_path"),hZr.forEach(t),j4o=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(r0,"CODE",{});var uZr=s(Wle);D4o=r(uZr,"pretrained_model_name_or_path"),uZr.forEach(t),G4o=r(r0,":"),r0.forEach(t),O4o=i(oa),z=n(oa,"UL",{});var W=s(z);L_=n(W,"LI",{});var cye=s(L_);Hle=n(cye,"STRONG",{});var pZr=s(Hle);V4o=r(pZr,"bart"),pZr.forEach(t),X4o=r(cye," \u2014 "),FN=n(cye,"A",{href:!0});var _Zr=s(FN);z4o=r(_Zr,"BartForCausalLM"),_Zr.forEach(t),Q4o=r(cye," (BART model)"),cye.forEach(t),W4o=i(W),x_=n(W,"LI",{});var mye=s(x_);Ule=n(mye,"STRONG",{});var bZr=s(Ule);H4o=r(bZr,"bert"),bZr.forEach(t),U4o=r(mye," \u2014 "),vN=n(mye,"A",{href:!0});var FZr=s(vN);J4o=r(FZr,"BertLMHeadModel"),FZr.forEach(t),Y4o=r(mye," (BERT model)"),mye.forEach(t),K4o=i(W),$_=n(W,"LI",{});var fye=s($_);Jle=n(fye,"STRONG",{});var vZr=s(Jle);Z4o=r(vZr,"bert-generation"),vZr.forEach(t),eEo=r(fye," \u2014 "),TN=n(fye,"A",{href:!0});var TZr=s(TN);oEo=r(TZr,"BertGenerationDecoder"),TZr.forEach(t),rEo=r(fye," (Bert Generation model)"),fye.forEach(t),tEo=i(W),k_=n(W,"LI",{});var gye=s(k_);Yle=n(gye,"STRONG",{});var MZr=s(Yle);aEo=r(MZr,"big_bird"),MZr.forEach(t),nEo=r(gye," \u2014 "),MN=n(gye,"A",{href:!0});var EZr=s(MN);sEo=r(EZr,"BigBirdForCausalLM"),EZr.forEach(t),lEo=r(gye," (BigBird model)"),gye.forEach(t),iEo=i(W),S_=n(W,"LI",{});var hye=s(S_);Kle=n(hye,"STRONG",{});var CZr=s(Kle);dEo=r(CZr,"bigbird_pegasus"),CZr.forEach(t),cEo=r(hye," \u2014 "),EN=n(hye,"A",{href:!0});var wZr=s(EN);mEo=r(wZr,"BigBirdPegasusForCausalLM"),wZr.forEach(t),fEo=r(hye," (BigBirdPegasus model)"),hye.forEach(t),gEo=i(W),R_=n(W,"LI",{});var uye=s(R_);Zle=n(uye,"STRONG",{});var AZr=s(Zle);hEo=r(AZr,"blenderbot"),AZr.forEach(t),uEo=r(uye," \u2014 "),CN=n(uye,"A",{href:!0});var yZr=s(CN);pEo=r(yZr,"BlenderbotForCausalLM"),yZr.forEach(t),_Eo=r(uye," (Blenderbot model)"),uye.forEach(t),bEo=i(W),B_=n(W,"LI",{});var pye=s(B_);eie=n(pye,"STRONG",{});var LZr=s(eie);FEo=r(LZr,"blenderbot-small"),LZr.forEach(t),vEo=r(pye," \u2014 "),wN=n(pye,"A",{href:!0});var xZr=s(wN);TEo=r(xZr,"BlenderbotSmallForCausalLM"),xZr.forEach(t),MEo=r(pye," (BlenderbotSmall model)"),pye.forEach(t),EEo=i(W),P_=n(W,"LI",{});var _ye=s(P_);oie=n(_ye,"STRONG",{});var $Zr=s(oie);CEo=r($Zr,"camembert"),$Zr.forEach(t),wEo=r(_ye," \u2014 "),AN=n(_ye,"A",{href:!0});var kZr=s(AN);AEo=r(kZr,"CamembertForCausalLM"),kZr.forEach(t),yEo=r(_ye," (CamemBERT model)"),_ye.forEach(t),LEo=i(W),I_=n(W,"LI",{});var bye=s(I_);rie=n(bye,"STRONG",{});var SZr=s(rie);xEo=r(SZr,"ctrl"),SZr.forEach(t),$Eo=r(bye," \u2014 "),yN=n(bye,"A",{href:!0});var RZr=s(yN);kEo=r(RZr,"CTRLLMHeadModel"),RZr.forEach(t),SEo=r(bye," (CTRL model)"),bye.forEach(t),REo=i(W),q_=n(W,"LI",{});var Fye=s(q_);tie=n(Fye,"STRONG",{});var BZr=s(tie);BEo=r(BZr,"data2vec-text"),BZr.forEach(t),PEo=r(Fye," \u2014 "),LN=n(Fye,"A",{href:!0});var PZr=s(LN);IEo=r(PZr,"Data2VecTextForCausalLM"),PZr.forEach(t),qEo=r(Fye," (Data2VecText model)"),Fye.forEach(t),NEo=i(W),N_=n(W,"LI",{});var vye=s(N_);aie=n(vye,"STRONG",{});var IZr=s(aie);jEo=r(IZr,"electra"),IZr.forEach(t),DEo=r(vye," \u2014 "),xN=n(vye,"A",{href:!0});var qZr=s(xN);GEo=r(qZr,"ElectraForCausalLM"),qZr.forEach(t),OEo=r(vye," (ELECTRA model)"),vye.forEach(t),VEo=i(W),j_=n(W,"LI",{});var Tye=s(j_);nie=n(Tye,"STRONG",{});var NZr=s(nie);XEo=r(NZr,"gpt2"),NZr.forEach(t),zEo=r(Tye," \u2014 "),$N=n(Tye,"A",{href:!0});var jZr=s($N);QEo=r(jZr,"GPT2LMHeadModel"),jZr.forEach(t),WEo=r(Tye," (OpenAI GPT-2 model)"),Tye.forEach(t),HEo=i(W),D_=n(W,"LI",{});var Mye=s(D_);sie=n(Mye,"STRONG",{});var DZr=s(sie);UEo=r(DZr,"gpt_neo"),DZr.forEach(t),JEo=r(Mye," \u2014 "),kN=n(Mye,"A",{href:!0});var GZr=s(kN);YEo=r(GZr,"GPTNeoForCausalLM"),GZr.forEach(t),KEo=r(Mye," (GPT Neo model)"),Mye.forEach(t),ZEo=i(W),G_=n(W,"LI",{});var Eye=s(G_);lie=n(Eye,"STRONG",{});var OZr=s(lie);e5o=r(OZr,"gptj"),OZr.forEach(t),o5o=r(Eye," \u2014 "),SN=n(Eye,"A",{href:!0});var VZr=s(SN);r5o=r(VZr,"GPTJForCausalLM"),VZr.forEach(t),t5o=r(Eye," (GPT-J model)"),Eye.forEach(t),a5o=i(W),O_=n(W,"LI",{});var Cye=s(O_);iie=n(Cye,"STRONG",{});var XZr=s(iie);n5o=r(XZr,"marian"),XZr.forEach(t),s5o=r(Cye," \u2014 "),RN=n(Cye,"A",{href:!0});var zZr=s(RN);l5o=r(zZr,"MarianForCausalLM"),zZr.forEach(t),i5o=r(Cye," (Marian model)"),Cye.forEach(t),d5o=i(W),V_=n(W,"LI",{});var wye=s(V_);die=n(wye,"STRONG",{});var QZr=s(die);c5o=r(QZr,"mbart"),QZr.forEach(t),m5o=r(wye," \u2014 "),BN=n(wye,"A",{href:!0});var WZr=s(BN);f5o=r(WZr,"MBartForCausalLM"),WZr.forEach(t),g5o=r(wye," (mBART model)"),wye.forEach(t),h5o=i(W),X_=n(W,"LI",{});var Aye=s(X_);cie=n(Aye,"STRONG",{});var HZr=s(cie);u5o=r(HZr,"megatron-bert"),HZr.forEach(t),p5o=r(Aye," \u2014 "),PN=n(Aye,"A",{href:!0});var UZr=s(PN);_5o=r(UZr,"MegatronBertForCausalLM"),UZr.forEach(t),b5o=r(Aye," (MegatronBert model)"),Aye.forEach(t),F5o=i(W),z_=n(W,"LI",{});var yye=s(z_);mie=n(yye,"STRONG",{});var JZr=s(mie);v5o=r(JZr,"openai-gpt"),JZr.forEach(t),T5o=r(yye," \u2014 "),IN=n(yye,"A",{href:!0});var YZr=s(IN);M5o=r(YZr,"OpenAIGPTLMHeadModel"),YZr.forEach(t),E5o=r(yye," (OpenAI GPT model)"),yye.forEach(t),C5o=i(W),Q_=n(W,"LI",{});var Lye=s(Q_);fie=n(Lye,"STRONG",{});var KZr=s(fie);w5o=r(KZr,"opt"),KZr.forEach(t),A5o=r(Lye," \u2014 "),qN=n(Lye,"A",{href:!0});var ZZr=s(qN);y5o=r(ZZr,"OPTForCausalLM"),ZZr.forEach(t),L5o=r(Lye," (OPT model)"),Lye.forEach(t),x5o=i(W),W_=n(W,"LI",{});var xye=s(W_);gie=n(xye,"STRONG",{});var eet=s(gie);$5o=r(eet,"pegasus"),eet.forEach(t),k5o=r(xye," \u2014 "),NN=n(xye,"A",{href:!0});var oet=s(NN);S5o=r(oet,"PegasusForCausalLM"),oet.forEach(t),R5o=r(xye," (Pegasus model)"),xye.forEach(t),B5o=i(W),H_=n(W,"LI",{});var $ye=s(H_);hie=n($ye,"STRONG",{});var ret=s(hie);P5o=r(ret,"plbart"),ret.forEach(t),I5o=r($ye," \u2014 "),jN=n($ye,"A",{href:!0});var tet=s(jN);q5o=r(tet,"PLBartForCausalLM"),tet.forEach(t),N5o=r($ye," (PLBart model)"),$ye.forEach(t),j5o=i(W),U_=n(W,"LI",{});var kye=s(U_);uie=n(kye,"STRONG",{});var aet=s(uie);D5o=r(aet,"prophetnet"),aet.forEach(t),G5o=r(kye," \u2014 "),DN=n(kye,"A",{href:!0});var net=s(DN);O5o=r(net,"ProphetNetForCausalLM"),net.forEach(t),V5o=r(kye," (ProphetNet model)"),kye.forEach(t),X5o=i(W),J_=n(W,"LI",{});var Sye=s(J_);pie=n(Sye,"STRONG",{});var set=s(pie);z5o=r(set,"qdqbert"),set.forEach(t),Q5o=r(Sye," \u2014 "),GN=n(Sye,"A",{href:!0});var iet=s(GN);W5o=r(iet,"QDQBertLMHeadModel"),iet.forEach(t),H5o=r(Sye," (QDQBert model)"),Sye.forEach(t),U5o=i(W),Y_=n(W,"LI",{});var Rye=s(Y_);_ie=n(Rye,"STRONG",{});var det=s(_ie);J5o=r(det,"reformer"),det.forEach(t),Y5o=r(Rye," \u2014 "),ON=n(Rye,"A",{href:!0});var cet=s(ON);K5o=r(cet,"ReformerModelWithLMHead"),cet.forEach(t),Z5o=r(Rye," (Reformer model)"),Rye.forEach(t),eCo=i(W),K_=n(W,"LI",{});var Bye=s(K_);bie=n(Bye,"STRONG",{});var met=s(bie);oCo=r(met,"rembert"),met.forEach(t),rCo=r(Bye," \u2014 "),VN=n(Bye,"A",{href:!0});var fet=s(VN);tCo=r(fet,"RemBertForCausalLM"),fet.forEach(t),aCo=r(Bye," (RemBERT model)"),Bye.forEach(t),nCo=i(W),Z_=n(W,"LI",{});var Pye=s(Z_);Fie=n(Pye,"STRONG",{});var get=s(Fie);sCo=r(get,"roberta"),get.forEach(t),lCo=r(Pye," \u2014 "),XN=n(Pye,"A",{href:!0});var het=s(XN);iCo=r(het,"RobertaForCausalLM"),het.forEach(t),dCo=r(Pye," (RoBERTa model)"),Pye.forEach(t),cCo=i(W),eb=n(W,"LI",{});var Iye=s(eb);vie=n(Iye,"STRONG",{});var uet=s(vie);mCo=r(uet,"roformer"),uet.forEach(t),fCo=r(Iye," \u2014 "),zN=n(Iye,"A",{href:!0});var pet=s(zN);gCo=r(pet,"RoFormerForCausalLM"),pet.forEach(t),hCo=r(Iye," (RoFormer model)"),Iye.forEach(t),uCo=i(W),ob=n(W,"LI",{});var qye=s(ob);Tie=n(qye,"STRONG",{});var _et=s(Tie);pCo=r(_et,"speech_to_text_2"),_et.forEach(t),_Co=r(qye," \u2014 "),QN=n(qye,"A",{href:!0});var bet=s(QN);bCo=r(bet,"Speech2Text2ForCausalLM"),bet.forEach(t),FCo=r(qye," (Speech2Text2 model)"),qye.forEach(t),vCo=i(W),rb=n(W,"LI",{});var Nye=s(rb);Mie=n(Nye,"STRONG",{});var Fet=s(Mie);TCo=r(Fet,"transfo-xl"),Fet.forEach(t),MCo=r(Nye," \u2014 "),WN=n(Nye,"A",{href:!0});var vet=s(WN);ECo=r(vet,"TransfoXLLMHeadModel"),vet.forEach(t),CCo=r(Nye," (Transformer-XL model)"),Nye.forEach(t),wCo=i(W),tb=n(W,"LI",{});var jye=s(tb);Eie=n(jye,"STRONG",{});var Tet=s(Eie);ACo=r(Tet,"trocr"),Tet.forEach(t),yCo=r(jye," \u2014 "),HN=n(jye,"A",{href:!0});var Met=s(HN);LCo=r(Met,"TrOCRForCausalLM"),Met.forEach(t),xCo=r(jye," (TrOCR model)"),jye.forEach(t),$Co=i(W),ab=n(W,"LI",{});var Dye=s(ab);Cie=n(Dye,"STRONG",{});var Eet=s(Cie);kCo=r(Eet,"xglm"),Eet.forEach(t),SCo=r(Dye," \u2014 "),UN=n(Dye,"A",{href:!0});var Cet=s(UN);RCo=r(Cet,"XGLMForCausalLM"),Cet.forEach(t),BCo=r(Dye," (XGLM model)"),Dye.forEach(t),PCo=i(W),nb=n(W,"LI",{});var Gye=s(nb);wie=n(Gye,"STRONG",{});var wet=s(wie);ICo=r(wet,"xlm"),wet.forEach(t),qCo=r(Gye," \u2014 "),JN=n(Gye,"A",{href:!0});var Aet=s(JN);NCo=r(Aet,"XLMWithLMHeadModel"),Aet.forEach(t),jCo=r(Gye," (XLM model)"),Gye.forEach(t),DCo=i(W),sb=n(W,"LI",{});var Oye=s(sb);Aie=n(Oye,"STRONG",{});var yet=s(Aie);GCo=r(yet,"xlm-prophetnet"),yet.forEach(t),OCo=r(Oye," \u2014 "),YN=n(Oye,"A",{href:!0});var Let=s(YN);VCo=r(Let,"XLMProphetNetForCausalLM"),Let.forEach(t),XCo=r(Oye," (XLMProphetNet model)"),Oye.forEach(t),zCo=i(W),lb=n(W,"LI",{});var Vye=s(lb);yie=n(Vye,"STRONG",{});var xet=s(yie);QCo=r(xet,"xlm-roberta"),xet.forEach(t),WCo=r(Vye," \u2014 "),KN=n(Vye,"A",{href:!0});var $et=s(KN);HCo=r($et,"XLMRobertaForCausalLM"),$et.forEach(t),UCo=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),JCo=i(W),ib=n(W,"LI",{});var Xye=s(ib);Lie=n(Xye,"STRONG",{});var ket=s(Lie);YCo=r(ket,"xlm-roberta-xl"),ket.forEach(t),KCo=r(Xye," \u2014 "),ZN=n(Xye,"A",{href:!0});var Set=s(ZN);ZCo=r(Set,"XLMRobertaXLForCausalLM"),Set.forEach(t),e3o=r(Xye," (XLM-RoBERTa-XL model)"),Xye.forEach(t),o3o=i(W),db=n(W,"LI",{});var zye=s(db);xie=n(zye,"STRONG",{});var Ret=s(xie);r3o=r(Ret,"xlnet"),Ret.forEach(t),t3o=r(zye," \u2014 "),ej=n(zye,"A",{href:!0});var Bet=s(ej);a3o=r(Bet,"XLNetLMHeadModel"),Bet.forEach(t),n3o=r(zye," (XLNet model)"),zye.forEach(t),W.forEach(t),s3o=i(oa),cb=n(oa,"P",{});var Qye=s(cb);l3o=r(Qye,"The model is set in evaluation mode by default using "),$ie=n(Qye,"CODE",{});var Pet=s($ie);i3o=r(Pet,"model.eval()"),Pet.forEach(t),d3o=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(Qye,"CODE",{});var Iet=s(kie);c3o=r(Iet,"model.train()"),Iet.forEach(t),Qye.forEach(t),m3o=i(oa),T(mb.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),JPe=i(m),$i=n(m,"H2",{class:!0});var eNe=s($i);fb=n(eNe,"A",{id:!0,class:!0,href:!0});var qet=s(fb);Sie=n(qet,"SPAN",{});var Net=s(Sie);T(Py.$$.fragment,Net),Net.forEach(t),qet.forEach(t),f3o=i(eNe),Rie=n(eNe,"SPAN",{});var jet=s(Rie);g3o=r(jet,"AutoModelForMaskedLM"),jet.forEach(t),eNe.forEach(t),YPe=i(m),ko=n(m,"DIV",{class:!0});var Os=s(ko);T(Iy.$$.fragment,Os),h3o=i(Os),ki=n(Os,"P",{});var iK=s(ki);u3o=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oj=n(iK,"A",{href:!0});var Det=s(oj);p3o=r(Det,"from_pretrained()"),Det.forEach(t),_3o=r(iK," class method or the "),rj=n(iK,"A",{href:!0});var Get=s(rj);b3o=r(Get,"from_config()"),Get.forEach(t),F3o=r(iK,` class
method.`),iK.forEach(t),v3o=i(Os),qy=n(Os,"P",{});var oNe=s(qy);T3o=r(oNe,"This class cannot be instantiated directly using "),Bie=n(oNe,"CODE",{});var Oet=s(Bie);M3o=r(Oet,"__init__()"),Oet.forEach(t),E3o=r(oNe," (throws an error)."),oNe.forEach(t),C3o=i(Os),at=n(Os,"DIV",{class:!0});var t0=s(at);T(Ny.$$.fragment,t0),w3o=i(t0),Pie=n(t0,"P",{});var Vet=s(Pie);A3o=r(Vet,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vet.forEach(t),y3o=i(t0),Si=n(t0,"P",{});var dK=s(Si);L3o=r(dK,`Note:
Loading a model from its configuration file does `),Iie=n(dK,"STRONG",{});var Xet=s(Iie);x3o=r(Xet,"not"),Xet.forEach(t),$3o=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(dK,"A",{href:!0});var zet=s(tj);k3o=r(zet,"from_pretrained()"),zet.forEach(t),S3o=r(dK," to load the model weights."),dK.forEach(t),R3o=i(t0),T(gb.$$.fragment,t0),t0.forEach(t),B3o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(jy.$$.fragment,ra),P3o=i(ra),qie=n(ra,"P",{});var Qet=s(qie);I3o=r(Qet,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qet.forEach(t),q3o=i(ra),xa=n(ra,"P",{});var a0=s(xa);N3o=r(a0,"The model class to instantiate is selected based on the "),Nie=n(a0,"CODE",{});var Wet=s(Nie);j3o=r(Wet,"model_type"),Wet.forEach(t),D3o=r(a0,` property of the config object (either
passed as an argument or loaded from `),jie=n(a0,"CODE",{});var Het=s(jie);G3o=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),O3o=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(a0,"CODE",{});var Uet=s(Die);V3o=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),X3o=r(a0,":"),a0.forEach(t),z3o=i(ra),Q=n(ra,"UL",{});var H=s(Q);hb=n(H,"LI",{});var Wye=s(hb);Gie=n(Wye,"STRONG",{});var Jet=s(Gie);Q3o=r(Jet,"albert"),Jet.forEach(t),W3o=r(Wye," \u2014 "),aj=n(Wye,"A",{href:!0});var Yet=s(aj);H3o=r(Yet,"AlbertForMaskedLM"),Yet.forEach(t),U3o=r(Wye," (ALBERT model)"),Wye.forEach(t),J3o=i(H),ub=n(H,"LI",{});var Hye=s(ub);Oie=n(Hye,"STRONG",{});var Ket=s(Oie);Y3o=r(Ket,"bart"),Ket.forEach(t),K3o=r(Hye," \u2014 "),nj=n(Hye,"A",{href:!0});var Zet=s(nj);Z3o=r(Zet,"BartForConditionalGeneration"),Zet.forEach(t),ewo=r(Hye," (BART model)"),Hye.forEach(t),owo=i(H),pb=n(H,"LI",{});var Uye=s(pb);Vie=n(Uye,"STRONG",{});var eot=s(Vie);rwo=r(eot,"bert"),eot.forEach(t),two=r(Uye," \u2014 "),sj=n(Uye,"A",{href:!0});var oot=s(sj);awo=r(oot,"BertForMaskedLM"),oot.forEach(t),nwo=r(Uye," (BERT model)"),Uye.forEach(t),swo=i(H),_b=n(H,"LI",{});var Jye=s(_b);Xie=n(Jye,"STRONG",{});var rot=s(Xie);lwo=r(rot,"big_bird"),rot.forEach(t),iwo=r(Jye," \u2014 "),lj=n(Jye,"A",{href:!0});var tot=s(lj);dwo=r(tot,"BigBirdForMaskedLM"),tot.forEach(t),cwo=r(Jye," (BigBird model)"),Jye.forEach(t),mwo=i(H),bb=n(H,"LI",{});var Yye=s(bb);zie=n(Yye,"STRONG",{});var aot=s(zie);fwo=r(aot,"camembert"),aot.forEach(t),gwo=r(Yye," \u2014 "),ij=n(Yye,"A",{href:!0});var not=s(ij);hwo=r(not,"CamembertForMaskedLM"),not.forEach(t),uwo=r(Yye," (CamemBERT model)"),Yye.forEach(t),pwo=i(H),Fb=n(H,"LI",{});var Kye=s(Fb);Qie=n(Kye,"STRONG",{});var sot=s(Qie);_wo=r(sot,"convbert"),sot.forEach(t),bwo=r(Kye," \u2014 "),dj=n(Kye,"A",{href:!0});var lot=s(dj);Fwo=r(lot,"ConvBertForMaskedLM"),lot.forEach(t),vwo=r(Kye," (ConvBERT model)"),Kye.forEach(t),Two=i(H),vb=n(H,"LI",{});var Zye=s(vb);Wie=n(Zye,"STRONG",{});var iot=s(Wie);Mwo=r(iot,"data2vec-text"),iot.forEach(t),Ewo=r(Zye," \u2014 "),cj=n(Zye,"A",{href:!0});var dot=s(cj);Cwo=r(dot,"Data2VecTextForMaskedLM"),dot.forEach(t),wwo=r(Zye," (Data2VecText model)"),Zye.forEach(t),Awo=i(H),Tb=n(H,"LI",{});var eLe=s(Tb);Hie=n(eLe,"STRONG",{});var cot=s(Hie);ywo=r(cot,"deberta"),cot.forEach(t),Lwo=r(eLe," \u2014 "),mj=n(eLe,"A",{href:!0});var mot=s(mj);xwo=r(mot,"DebertaForMaskedLM"),mot.forEach(t),$wo=r(eLe," (DeBERTa model)"),eLe.forEach(t),kwo=i(H),Mb=n(H,"LI",{});var oLe=s(Mb);Uie=n(oLe,"STRONG",{});var fot=s(Uie);Swo=r(fot,"deberta-v2"),fot.forEach(t),Rwo=r(oLe," \u2014 "),fj=n(oLe,"A",{href:!0});var got=s(fj);Bwo=r(got,"DebertaV2ForMaskedLM"),got.forEach(t),Pwo=r(oLe," (DeBERTa-v2 model)"),oLe.forEach(t),Iwo=i(H),Eb=n(H,"LI",{});var rLe=s(Eb);Jie=n(rLe,"STRONG",{});var hot=s(Jie);qwo=r(hot,"distilbert"),hot.forEach(t),Nwo=r(rLe," \u2014 "),gj=n(rLe,"A",{href:!0});var uot=s(gj);jwo=r(uot,"DistilBertForMaskedLM"),uot.forEach(t),Dwo=r(rLe," (DistilBERT model)"),rLe.forEach(t),Gwo=i(H),Cb=n(H,"LI",{});var tLe=s(Cb);Yie=n(tLe,"STRONG",{});var pot=s(Yie);Owo=r(pot,"electra"),pot.forEach(t),Vwo=r(tLe," \u2014 "),hj=n(tLe,"A",{href:!0});var _ot=s(hj);Xwo=r(_ot,"ElectraForMaskedLM"),_ot.forEach(t),zwo=r(tLe," (ELECTRA model)"),tLe.forEach(t),Qwo=i(H),wb=n(H,"LI",{});var aLe=s(wb);Kie=n(aLe,"STRONG",{});var bot=s(Kie);Wwo=r(bot,"flaubert"),bot.forEach(t),Hwo=r(aLe," \u2014 "),uj=n(aLe,"A",{href:!0});var Fot=s(uj);Uwo=r(Fot,"FlaubertWithLMHeadModel"),Fot.forEach(t),Jwo=r(aLe," (FlauBERT model)"),aLe.forEach(t),Ywo=i(H),Ab=n(H,"LI",{});var nLe=s(Ab);Zie=n(nLe,"STRONG",{});var vot=s(Zie);Kwo=r(vot,"fnet"),vot.forEach(t),Zwo=r(nLe," \u2014 "),pj=n(nLe,"A",{href:!0});var Tot=s(pj);eAo=r(Tot,"FNetForMaskedLM"),Tot.forEach(t),oAo=r(nLe," (FNet model)"),nLe.forEach(t),rAo=i(H),yb=n(H,"LI",{});var sLe=s(yb);ede=n(sLe,"STRONG",{});var Mot=s(ede);tAo=r(Mot,"funnel"),Mot.forEach(t),aAo=r(sLe," \u2014 "),_j=n(sLe,"A",{href:!0});var Eot=s(_j);nAo=r(Eot,"FunnelForMaskedLM"),Eot.forEach(t),sAo=r(sLe," (Funnel Transformer model)"),sLe.forEach(t),lAo=i(H),Lb=n(H,"LI",{});var lLe=s(Lb);ode=n(lLe,"STRONG",{});var Cot=s(ode);iAo=r(Cot,"ibert"),Cot.forEach(t),dAo=r(lLe," \u2014 "),bj=n(lLe,"A",{href:!0});var wot=s(bj);cAo=r(wot,"IBertForMaskedLM"),wot.forEach(t),mAo=r(lLe," (I-BERT model)"),lLe.forEach(t),fAo=i(H),xb=n(H,"LI",{});var iLe=s(xb);rde=n(iLe,"STRONG",{});var Aot=s(rde);gAo=r(Aot,"layoutlm"),Aot.forEach(t),hAo=r(iLe," \u2014 "),Fj=n(iLe,"A",{href:!0});var yot=s(Fj);uAo=r(yot,"LayoutLMForMaskedLM"),yot.forEach(t),pAo=r(iLe," (LayoutLM model)"),iLe.forEach(t),_Ao=i(H),$b=n(H,"LI",{});var dLe=s($b);tde=n(dLe,"STRONG",{});var Lot=s(tde);bAo=r(Lot,"longformer"),Lot.forEach(t),FAo=r(dLe," \u2014 "),vj=n(dLe,"A",{href:!0});var xot=s(vj);vAo=r(xot,"LongformerForMaskedLM"),xot.forEach(t),TAo=r(dLe," (Longformer model)"),dLe.forEach(t),MAo=i(H),kb=n(H,"LI",{});var cLe=s(kb);ade=n(cLe,"STRONG",{});var $ot=s(ade);EAo=r($ot,"mbart"),$ot.forEach(t),CAo=r(cLe," \u2014 "),Tj=n(cLe,"A",{href:!0});var kot=s(Tj);wAo=r(kot,"MBartForConditionalGeneration"),kot.forEach(t),AAo=r(cLe," (mBART model)"),cLe.forEach(t),yAo=i(H),Sb=n(H,"LI",{});var mLe=s(Sb);nde=n(mLe,"STRONG",{});var Sot=s(nde);LAo=r(Sot,"megatron-bert"),Sot.forEach(t),xAo=r(mLe," \u2014 "),Mj=n(mLe,"A",{href:!0});var Rot=s(Mj);$Ao=r(Rot,"MegatronBertForMaskedLM"),Rot.forEach(t),kAo=r(mLe," (MegatronBert model)"),mLe.forEach(t),SAo=i(H),Rb=n(H,"LI",{});var fLe=s(Rb);sde=n(fLe,"STRONG",{});var Bot=s(sde);RAo=r(Bot,"mobilebert"),Bot.forEach(t),BAo=r(fLe," \u2014 "),Ej=n(fLe,"A",{href:!0});var Pot=s(Ej);PAo=r(Pot,"MobileBertForMaskedLM"),Pot.forEach(t),IAo=r(fLe," (MobileBERT model)"),fLe.forEach(t),qAo=i(H),Bb=n(H,"LI",{});var gLe=s(Bb);lde=n(gLe,"STRONG",{});var Iot=s(lde);NAo=r(Iot,"mpnet"),Iot.forEach(t),jAo=r(gLe," \u2014 "),Cj=n(gLe,"A",{href:!0});var qot=s(Cj);DAo=r(qot,"MPNetForMaskedLM"),qot.forEach(t),GAo=r(gLe," (MPNet model)"),gLe.forEach(t),OAo=i(H),Pb=n(H,"LI",{});var hLe=s(Pb);ide=n(hLe,"STRONG",{});var Not=s(ide);VAo=r(Not,"nystromformer"),Not.forEach(t),XAo=r(hLe," \u2014 "),wj=n(hLe,"A",{href:!0});var jot=s(wj);zAo=r(jot,"NystromformerForMaskedLM"),jot.forEach(t),QAo=r(hLe," (Nystromformer model)"),hLe.forEach(t),WAo=i(H),Ib=n(H,"LI",{});var uLe=s(Ib);dde=n(uLe,"STRONG",{});var Dot=s(dde);HAo=r(Dot,"perceiver"),Dot.forEach(t),UAo=r(uLe," \u2014 "),Aj=n(uLe,"A",{href:!0});var Got=s(Aj);JAo=r(Got,"PerceiverForMaskedLM"),Got.forEach(t),YAo=r(uLe," (Perceiver model)"),uLe.forEach(t),KAo=i(H),qb=n(H,"LI",{});var pLe=s(qb);cde=n(pLe,"STRONG",{});var Oot=s(cde);ZAo=r(Oot,"qdqbert"),Oot.forEach(t),e0o=r(pLe," \u2014 "),yj=n(pLe,"A",{href:!0});var Vot=s(yj);o0o=r(Vot,"QDQBertForMaskedLM"),Vot.forEach(t),r0o=r(pLe," (QDQBert model)"),pLe.forEach(t),t0o=i(H),Nb=n(H,"LI",{});var _Le=s(Nb);mde=n(_Le,"STRONG",{});var Xot=s(mde);a0o=r(Xot,"reformer"),Xot.forEach(t),n0o=r(_Le," \u2014 "),Lj=n(_Le,"A",{href:!0});var zot=s(Lj);s0o=r(zot,"ReformerForMaskedLM"),zot.forEach(t),l0o=r(_Le," (Reformer model)"),_Le.forEach(t),i0o=i(H),jb=n(H,"LI",{});var bLe=s(jb);fde=n(bLe,"STRONG",{});var Qot=s(fde);d0o=r(Qot,"rembert"),Qot.forEach(t),c0o=r(bLe," \u2014 "),xj=n(bLe,"A",{href:!0});var Wot=s(xj);m0o=r(Wot,"RemBertForMaskedLM"),Wot.forEach(t),f0o=r(bLe," (RemBERT model)"),bLe.forEach(t),g0o=i(H),Db=n(H,"LI",{});var FLe=s(Db);gde=n(FLe,"STRONG",{});var Hot=s(gde);h0o=r(Hot,"roberta"),Hot.forEach(t),u0o=r(FLe," \u2014 "),$j=n(FLe,"A",{href:!0});var Uot=s($j);p0o=r(Uot,"RobertaForMaskedLM"),Uot.forEach(t),_0o=r(FLe," (RoBERTa model)"),FLe.forEach(t),b0o=i(H),Gb=n(H,"LI",{});var vLe=s(Gb);hde=n(vLe,"STRONG",{});var Jot=s(hde);F0o=r(Jot,"roformer"),Jot.forEach(t),v0o=r(vLe," \u2014 "),kj=n(vLe,"A",{href:!0});var Yot=s(kj);T0o=r(Yot,"RoFormerForMaskedLM"),Yot.forEach(t),M0o=r(vLe," (RoFormer model)"),vLe.forEach(t),E0o=i(H),Ob=n(H,"LI",{});var TLe=s(Ob);ude=n(TLe,"STRONG",{});var Kot=s(ude);C0o=r(Kot,"squeezebert"),Kot.forEach(t),w0o=r(TLe," \u2014 "),Sj=n(TLe,"A",{href:!0});var Zot=s(Sj);A0o=r(Zot,"SqueezeBertForMaskedLM"),Zot.forEach(t),y0o=r(TLe," (SqueezeBERT model)"),TLe.forEach(t),L0o=i(H),Vb=n(H,"LI",{});var MLe=s(Vb);pde=n(MLe,"STRONG",{});var ert=s(pde);x0o=r(ert,"tapas"),ert.forEach(t),$0o=r(MLe," \u2014 "),Rj=n(MLe,"A",{href:!0});var ort=s(Rj);k0o=r(ort,"TapasForMaskedLM"),ort.forEach(t),S0o=r(MLe," (TAPAS model)"),MLe.forEach(t),R0o=i(H),Xb=n(H,"LI",{});var ELe=s(Xb);_de=n(ELe,"STRONG",{});var rrt=s(_de);B0o=r(rrt,"wav2vec2"),rrt.forEach(t),P0o=r(ELe," \u2014 "),bde=n(ELe,"CODE",{});var trt=s(bde);I0o=r(trt,"Wav2Vec2ForMaskedLM"),trt.forEach(t),q0o=r(ELe," (Wav2Vec2 model)"),ELe.forEach(t),N0o=i(H),zb=n(H,"LI",{});var CLe=s(zb);Fde=n(CLe,"STRONG",{});var art=s(Fde);j0o=r(art,"xlm"),art.forEach(t),D0o=r(CLe," \u2014 "),Bj=n(CLe,"A",{href:!0});var nrt=s(Bj);G0o=r(nrt,"XLMWithLMHeadModel"),nrt.forEach(t),O0o=r(CLe," (XLM model)"),CLe.forEach(t),V0o=i(H),Qb=n(H,"LI",{});var wLe=s(Qb);vde=n(wLe,"STRONG",{});var srt=s(vde);X0o=r(srt,"xlm-roberta"),srt.forEach(t),z0o=r(wLe," \u2014 "),Pj=n(wLe,"A",{href:!0});var lrt=s(Pj);Q0o=r(lrt,"XLMRobertaForMaskedLM"),lrt.forEach(t),W0o=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),H0o=i(H),Wb=n(H,"LI",{});var ALe=s(Wb);Tde=n(ALe,"STRONG",{});var irt=s(Tde);U0o=r(irt,"xlm-roberta-xl"),irt.forEach(t),J0o=r(ALe," \u2014 "),Ij=n(ALe,"A",{href:!0});var drt=s(Ij);Y0o=r(drt,"XLMRobertaXLForMaskedLM"),drt.forEach(t),K0o=r(ALe," (XLM-RoBERTa-XL model)"),ALe.forEach(t),Z0o=i(H),Hb=n(H,"LI",{});var yLe=s(Hb);Mde=n(yLe,"STRONG",{});var crt=s(Mde);e6o=r(crt,"yoso"),crt.forEach(t),o6o=r(yLe," \u2014 "),qj=n(yLe,"A",{href:!0});var mrt=s(qj);r6o=r(mrt,"YosoForMaskedLM"),mrt.forEach(t),t6o=r(yLe," (YOSO model)"),yLe.forEach(t),H.forEach(t),a6o=i(ra),Ub=n(ra,"P",{});var LLe=s(Ub);n6o=r(LLe,"The model is set in evaluation mode by default using "),Ede=n(LLe,"CODE",{});var frt=s(Ede);s6o=r(frt,"model.eval()"),frt.forEach(t),l6o=r(LLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(LLe,"CODE",{});var grt=s(Cde);i6o=r(grt,"model.train()"),grt.forEach(t),LLe.forEach(t),d6o=i(ra),T(Jb.$$.fragment,ra),ra.forEach(t),Os.forEach(t),KPe=i(m),Ri=n(m,"H2",{class:!0});var rNe=s(Ri);Yb=n(rNe,"A",{id:!0,class:!0,href:!0});var hrt=s(Yb);wde=n(hrt,"SPAN",{});var urt=s(wde);T(Dy.$$.fragment,urt),urt.forEach(t),hrt.forEach(t),c6o=i(rNe),Ade=n(rNe,"SPAN",{});var prt=s(Ade);m6o=r(prt,"AutoModelForSeq2SeqLM"),prt.forEach(t),rNe.forEach(t),ZPe=i(m),So=n(m,"DIV",{class:!0});var Vs=s(So);T(Gy.$$.fragment,Vs),f6o=i(Vs),Bi=n(Vs,"P",{});var cK=s(Bi);g6o=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nj=n(cK,"A",{href:!0});var _rt=s(Nj);h6o=r(_rt,"from_pretrained()"),_rt.forEach(t),u6o=r(cK," class method or the "),jj=n(cK,"A",{href:!0});var brt=s(jj);p6o=r(brt,"from_config()"),brt.forEach(t),_6o=r(cK,` class
method.`),cK.forEach(t),b6o=i(Vs),Oy=n(Vs,"P",{});var tNe=s(Oy);F6o=r(tNe,"This class cannot be instantiated directly using "),yde=n(tNe,"CODE",{});var Frt=s(yde);v6o=r(Frt,"__init__()"),Frt.forEach(t),T6o=r(tNe," (throws an error)."),tNe.forEach(t),M6o=i(Vs),nt=n(Vs,"DIV",{class:!0});var n0=s(nt);T(Vy.$$.fragment,n0),E6o=i(n0),Lde=n(n0,"P",{});var vrt=s(Lde);C6o=r(vrt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vrt.forEach(t),w6o=i(n0),Pi=n(n0,"P",{});var mK=s(Pi);A6o=r(mK,`Note:
Loading a model from its configuration file does `),xde=n(mK,"STRONG",{});var Trt=s(xde);y6o=r(Trt,"not"),Trt.forEach(t),L6o=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dj=n(mK,"A",{href:!0});var Mrt=s(Dj);x6o=r(Mrt,"from_pretrained()"),Mrt.forEach(t),$6o=r(mK," to load the model weights."),mK.forEach(t),k6o=i(n0),T(Kb.$$.fragment,n0),n0.forEach(t),S6o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(Xy.$$.fragment,ta),R6o=i(ta),$de=n(ta,"P",{});var Ert=s($de);B6o=r(Ert,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ert.forEach(t),P6o=i(ta),$a=n(ta,"P",{});var s0=s($a);I6o=r(s0,"The model class to instantiate is selected based on the "),kde=n(s0,"CODE",{});var Crt=s(kde);q6o=r(Crt,"model_type"),Crt.forEach(t),N6o=r(s0,` property of the config object (either
passed as an argument or loaded from `),Sde=n(s0,"CODE",{});var wrt=s(Sde);j6o=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),D6o=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=n(s0,"CODE",{});var Art=s(Rde);G6o=r(Art,"pretrained_model_name_or_path"),Art.forEach(t),O6o=r(s0,":"),s0.forEach(t),V6o=i(ta),ue=n(ta,"UL",{});var be=s(ue);Zb=n(be,"LI",{});var xLe=s(Zb);Bde=n(xLe,"STRONG",{});var yrt=s(Bde);X6o=r(yrt,"bart"),yrt.forEach(t),z6o=r(xLe," \u2014 "),Gj=n(xLe,"A",{href:!0});var Lrt=s(Gj);Q6o=r(Lrt,"BartForConditionalGeneration"),Lrt.forEach(t),W6o=r(xLe," (BART model)"),xLe.forEach(t),H6o=i(be),e2=n(be,"LI",{});var $Le=s(e2);Pde=n($Le,"STRONG",{});var xrt=s(Pde);U6o=r(xrt,"bigbird_pegasus"),xrt.forEach(t),J6o=r($Le," \u2014 "),Oj=n($Le,"A",{href:!0});var $rt=s(Oj);Y6o=r($rt,"BigBirdPegasusForConditionalGeneration"),$rt.forEach(t),K6o=r($Le," (BigBirdPegasus model)"),$Le.forEach(t),Z6o=i(be),o2=n(be,"LI",{});var kLe=s(o2);Ide=n(kLe,"STRONG",{});var krt=s(Ide);eyo=r(krt,"blenderbot"),krt.forEach(t),oyo=r(kLe," \u2014 "),Vj=n(kLe,"A",{href:!0});var Srt=s(Vj);ryo=r(Srt,"BlenderbotForConditionalGeneration"),Srt.forEach(t),tyo=r(kLe," (Blenderbot model)"),kLe.forEach(t),ayo=i(be),r2=n(be,"LI",{});var SLe=s(r2);qde=n(SLe,"STRONG",{});var Rrt=s(qde);nyo=r(Rrt,"blenderbot-small"),Rrt.forEach(t),syo=r(SLe," \u2014 "),Xj=n(SLe,"A",{href:!0});var Brt=s(Xj);lyo=r(Brt,"BlenderbotSmallForConditionalGeneration"),Brt.forEach(t),iyo=r(SLe," (BlenderbotSmall model)"),SLe.forEach(t),dyo=i(be),t2=n(be,"LI",{});var RLe=s(t2);Nde=n(RLe,"STRONG",{});var Prt=s(Nde);cyo=r(Prt,"encoder-decoder"),Prt.forEach(t),myo=r(RLe," \u2014 "),zj=n(RLe,"A",{href:!0});var Irt=s(zj);fyo=r(Irt,"EncoderDecoderModel"),Irt.forEach(t),gyo=r(RLe," (Encoder decoder model)"),RLe.forEach(t),hyo=i(be),a2=n(be,"LI",{});var BLe=s(a2);jde=n(BLe,"STRONG",{});var qrt=s(jde);uyo=r(qrt,"fsmt"),qrt.forEach(t),pyo=r(BLe," \u2014 "),Qj=n(BLe,"A",{href:!0});var Nrt=s(Qj);_yo=r(Nrt,"FSMTForConditionalGeneration"),Nrt.forEach(t),byo=r(BLe," (FairSeq Machine-Translation model)"),BLe.forEach(t),Fyo=i(be),n2=n(be,"LI",{});var PLe=s(n2);Dde=n(PLe,"STRONG",{});var jrt=s(Dde);vyo=r(jrt,"led"),jrt.forEach(t),Tyo=r(PLe," \u2014 "),Wj=n(PLe,"A",{href:!0});var Drt=s(Wj);Myo=r(Drt,"LEDForConditionalGeneration"),Drt.forEach(t),Eyo=r(PLe," (LED model)"),PLe.forEach(t),Cyo=i(be),s2=n(be,"LI",{});var ILe=s(s2);Gde=n(ILe,"STRONG",{});var Grt=s(Gde);wyo=r(Grt,"m2m_100"),Grt.forEach(t),Ayo=r(ILe," \u2014 "),Hj=n(ILe,"A",{href:!0});var Ort=s(Hj);yyo=r(Ort,"M2M100ForConditionalGeneration"),Ort.forEach(t),Lyo=r(ILe," (M2M100 model)"),ILe.forEach(t),xyo=i(be),l2=n(be,"LI",{});var qLe=s(l2);Ode=n(qLe,"STRONG",{});var Vrt=s(Ode);$yo=r(Vrt,"marian"),Vrt.forEach(t),kyo=r(qLe," \u2014 "),Uj=n(qLe,"A",{href:!0});var Xrt=s(Uj);Syo=r(Xrt,"MarianMTModel"),Xrt.forEach(t),Ryo=r(qLe," (Marian model)"),qLe.forEach(t),Byo=i(be),i2=n(be,"LI",{});var NLe=s(i2);Vde=n(NLe,"STRONG",{});var zrt=s(Vde);Pyo=r(zrt,"mbart"),zrt.forEach(t),Iyo=r(NLe," \u2014 "),Jj=n(NLe,"A",{href:!0});var Qrt=s(Jj);qyo=r(Qrt,"MBartForConditionalGeneration"),Qrt.forEach(t),Nyo=r(NLe," (mBART model)"),NLe.forEach(t),jyo=i(be),d2=n(be,"LI",{});var jLe=s(d2);Xde=n(jLe,"STRONG",{});var Wrt=s(Xde);Dyo=r(Wrt,"mt5"),Wrt.forEach(t),Gyo=r(jLe," \u2014 "),Yj=n(jLe,"A",{href:!0});var Hrt=s(Yj);Oyo=r(Hrt,"MT5ForConditionalGeneration"),Hrt.forEach(t),Vyo=r(jLe," (mT5 model)"),jLe.forEach(t),Xyo=i(be),c2=n(be,"LI",{});var DLe=s(c2);zde=n(DLe,"STRONG",{});var Urt=s(zde);zyo=r(Urt,"pegasus"),Urt.forEach(t),Qyo=r(DLe," \u2014 "),Kj=n(DLe,"A",{href:!0});var Jrt=s(Kj);Wyo=r(Jrt,"PegasusForConditionalGeneration"),Jrt.forEach(t),Hyo=r(DLe," (Pegasus model)"),DLe.forEach(t),Uyo=i(be),m2=n(be,"LI",{});var GLe=s(m2);Qde=n(GLe,"STRONG",{});var Yrt=s(Qde);Jyo=r(Yrt,"plbart"),Yrt.forEach(t),Yyo=r(GLe," \u2014 "),Zj=n(GLe,"A",{href:!0});var Krt=s(Zj);Kyo=r(Krt,"PLBartForConditionalGeneration"),Krt.forEach(t),Zyo=r(GLe," (PLBart model)"),GLe.forEach(t),eLo=i(be),f2=n(be,"LI",{});var OLe=s(f2);Wde=n(OLe,"STRONG",{});var Zrt=s(Wde);oLo=r(Zrt,"prophetnet"),Zrt.forEach(t),rLo=r(OLe," \u2014 "),eD=n(OLe,"A",{href:!0});var ett=s(eD);tLo=r(ett,"ProphetNetForConditionalGeneration"),ett.forEach(t),aLo=r(OLe," (ProphetNet model)"),OLe.forEach(t),nLo=i(be),g2=n(be,"LI",{});var VLe=s(g2);Hde=n(VLe,"STRONG",{});var ott=s(Hde);sLo=r(ott,"t5"),ott.forEach(t),lLo=r(VLe," \u2014 "),oD=n(VLe,"A",{href:!0});var rtt=s(oD);iLo=r(rtt,"T5ForConditionalGeneration"),rtt.forEach(t),dLo=r(VLe," (T5 model)"),VLe.forEach(t),cLo=i(be),h2=n(be,"LI",{});var XLe=s(h2);Ude=n(XLe,"STRONG",{});var ttt=s(Ude);mLo=r(ttt,"xlm-prophetnet"),ttt.forEach(t),fLo=r(XLe," \u2014 "),rD=n(XLe,"A",{href:!0});var att=s(rD);gLo=r(att,"XLMProphetNetForConditionalGeneration"),att.forEach(t),hLo=r(XLe," (XLMProphetNet model)"),XLe.forEach(t),be.forEach(t),uLo=i(ta),u2=n(ta,"P",{});var zLe=s(u2);pLo=r(zLe,"The model is set in evaluation mode by default using "),Jde=n(zLe,"CODE",{});var ntt=s(Jde);_Lo=r(ntt,"model.eval()"),ntt.forEach(t),bLo=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yde=n(zLe,"CODE",{});var stt=s(Yde);FLo=r(stt,"model.train()"),stt.forEach(t),zLe.forEach(t),vLo=i(ta),T(p2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),eIe=i(m),Ii=n(m,"H2",{class:!0});var aNe=s(Ii);_2=n(aNe,"A",{id:!0,class:!0,href:!0});var ltt=s(_2);Kde=n(ltt,"SPAN",{});var itt=s(Kde);T(zy.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),TLo=i(aNe),Zde=n(aNe,"SPAN",{});var dtt=s(Zde);MLo=r(dtt,"AutoModelForSequenceClassification"),dtt.forEach(t),aNe.forEach(t),oIe=i(m),Ro=n(m,"DIV",{class:!0});var Xs=s(Ro);T(Qy.$$.fragment,Xs),ELo=i(Xs),qi=n(Xs,"P",{});var fK=s(qi);CLo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tD=n(fK,"A",{href:!0});var ctt=s(tD);wLo=r(ctt,"from_pretrained()"),ctt.forEach(t),ALo=r(fK," class method or the "),aD=n(fK,"A",{href:!0});var mtt=s(aD);yLo=r(mtt,"from_config()"),mtt.forEach(t),LLo=r(fK,` class
method.`),fK.forEach(t),xLo=i(Xs),Wy=n(Xs,"P",{});var nNe=s(Wy);$Lo=r(nNe,"This class cannot be instantiated directly using "),ece=n(nNe,"CODE",{});var ftt=s(ece);kLo=r(ftt,"__init__()"),ftt.forEach(t),SLo=r(nNe," (throws an error)."),nNe.forEach(t),RLo=i(Xs),st=n(Xs,"DIV",{class:!0});var l0=s(st);T(Hy.$$.fragment,l0),BLo=i(l0),oce=n(l0,"P",{});var gtt=s(oce);PLo=r(gtt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gtt.forEach(t),ILo=i(l0),Ni=n(l0,"P",{});var gK=s(Ni);qLo=r(gK,`Note:
Loading a model from its configuration file does `),rce=n(gK,"STRONG",{});var htt=s(rce);NLo=r(htt,"not"),htt.forEach(t),jLo=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=n(gK,"A",{href:!0});var utt=s(nD);DLo=r(utt,"from_pretrained()"),utt.forEach(t),GLo=r(gK," to load the model weights."),gK.forEach(t),OLo=i(l0),T(b2.$$.fragment,l0),l0.forEach(t),VLo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Uy.$$.fragment,aa),XLo=i(aa),tce=n(aa,"P",{});var ptt=s(tce);zLo=r(ptt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ptt.forEach(t),QLo=i(aa),ka=n(aa,"P",{});var i0=s(ka);WLo=r(i0,"The model class to instantiate is selected based on the "),ace=n(i0,"CODE",{});var _tt=s(ace);HLo=r(_tt,"model_type"),_tt.forEach(t),ULo=r(i0,` property of the config object (either
passed as an argument or loaded from `),nce=n(i0,"CODE",{});var btt=s(nce);JLo=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),YLo=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(i0,"CODE",{});var Ftt=s(sce);KLo=r(Ftt,"pretrained_model_name_or_path"),Ftt.forEach(t),ZLo=r(i0,":"),i0.forEach(t),e8o=i(aa),q=n(aa,"UL",{});var j=s(q);F2=n(j,"LI",{});var QLe=s(F2);lce=n(QLe,"STRONG",{});var vtt=s(lce);o8o=r(vtt,"albert"),vtt.forEach(t),r8o=r(QLe," \u2014 "),sD=n(QLe,"A",{href:!0});var Ttt=s(sD);t8o=r(Ttt,"AlbertForSequenceClassification"),Ttt.forEach(t),a8o=r(QLe," (ALBERT model)"),QLe.forEach(t),n8o=i(j),v2=n(j,"LI",{});var WLe=s(v2);ice=n(WLe,"STRONG",{});var Mtt=s(ice);s8o=r(Mtt,"bart"),Mtt.forEach(t),l8o=r(WLe," \u2014 "),lD=n(WLe,"A",{href:!0});var Ett=s(lD);i8o=r(Ett,"BartForSequenceClassification"),Ett.forEach(t),d8o=r(WLe," (BART model)"),WLe.forEach(t),c8o=i(j),T2=n(j,"LI",{});var HLe=s(T2);dce=n(HLe,"STRONG",{});var Ctt=s(dce);m8o=r(Ctt,"bert"),Ctt.forEach(t),f8o=r(HLe," \u2014 "),iD=n(HLe,"A",{href:!0});var wtt=s(iD);g8o=r(wtt,"BertForSequenceClassification"),wtt.forEach(t),h8o=r(HLe," (BERT model)"),HLe.forEach(t),u8o=i(j),M2=n(j,"LI",{});var ULe=s(M2);cce=n(ULe,"STRONG",{});var Att=s(cce);p8o=r(Att,"big_bird"),Att.forEach(t),_8o=r(ULe," \u2014 "),dD=n(ULe,"A",{href:!0});var ytt=s(dD);b8o=r(ytt,"BigBirdForSequenceClassification"),ytt.forEach(t),F8o=r(ULe," (BigBird model)"),ULe.forEach(t),v8o=i(j),E2=n(j,"LI",{});var JLe=s(E2);mce=n(JLe,"STRONG",{});var Ltt=s(mce);T8o=r(Ltt,"bigbird_pegasus"),Ltt.forEach(t),M8o=r(JLe," \u2014 "),cD=n(JLe,"A",{href:!0});var xtt=s(cD);E8o=r(xtt,"BigBirdPegasusForSequenceClassification"),xtt.forEach(t),C8o=r(JLe," (BigBirdPegasus model)"),JLe.forEach(t),w8o=i(j),C2=n(j,"LI",{});var YLe=s(C2);fce=n(YLe,"STRONG",{});var $tt=s(fce);A8o=r($tt,"camembert"),$tt.forEach(t),y8o=r(YLe," \u2014 "),mD=n(YLe,"A",{href:!0});var ktt=s(mD);L8o=r(ktt,"CamembertForSequenceClassification"),ktt.forEach(t),x8o=r(YLe," (CamemBERT model)"),YLe.forEach(t),$8o=i(j),w2=n(j,"LI",{});var KLe=s(w2);gce=n(KLe,"STRONG",{});var Stt=s(gce);k8o=r(Stt,"canine"),Stt.forEach(t),S8o=r(KLe," \u2014 "),fD=n(KLe,"A",{href:!0});var Rtt=s(fD);R8o=r(Rtt,"CanineForSequenceClassification"),Rtt.forEach(t),B8o=r(KLe," (Canine model)"),KLe.forEach(t),P8o=i(j),A2=n(j,"LI",{});var ZLe=s(A2);hce=n(ZLe,"STRONG",{});var Btt=s(hce);I8o=r(Btt,"convbert"),Btt.forEach(t),q8o=r(ZLe," \u2014 "),gD=n(ZLe,"A",{href:!0});var Ptt=s(gD);N8o=r(Ptt,"ConvBertForSequenceClassification"),Ptt.forEach(t),j8o=r(ZLe," (ConvBERT model)"),ZLe.forEach(t),D8o=i(j),y2=n(j,"LI",{});var e8e=s(y2);uce=n(e8e,"STRONG",{});var Itt=s(uce);G8o=r(Itt,"ctrl"),Itt.forEach(t),O8o=r(e8e," \u2014 "),hD=n(e8e,"A",{href:!0});var qtt=s(hD);V8o=r(qtt,"CTRLForSequenceClassification"),qtt.forEach(t),X8o=r(e8e," (CTRL model)"),e8e.forEach(t),z8o=i(j),L2=n(j,"LI",{});var o8e=s(L2);pce=n(o8e,"STRONG",{});var Ntt=s(pce);Q8o=r(Ntt,"data2vec-text"),Ntt.forEach(t),W8o=r(o8e," \u2014 "),uD=n(o8e,"A",{href:!0});var jtt=s(uD);H8o=r(jtt,"Data2VecTextForSequenceClassification"),jtt.forEach(t),U8o=r(o8e," (Data2VecText model)"),o8e.forEach(t),J8o=i(j),x2=n(j,"LI",{});var r8e=s(x2);_ce=n(r8e,"STRONG",{});var Dtt=s(_ce);Y8o=r(Dtt,"deberta"),Dtt.forEach(t),K8o=r(r8e," \u2014 "),pD=n(r8e,"A",{href:!0});var Gtt=s(pD);Z8o=r(Gtt,"DebertaForSequenceClassification"),Gtt.forEach(t),exo=r(r8e," (DeBERTa model)"),r8e.forEach(t),oxo=i(j),$2=n(j,"LI",{});var t8e=s($2);bce=n(t8e,"STRONG",{});var Ott=s(bce);rxo=r(Ott,"deberta-v2"),Ott.forEach(t),txo=r(t8e," \u2014 "),_D=n(t8e,"A",{href:!0});var Vtt=s(_D);axo=r(Vtt,"DebertaV2ForSequenceClassification"),Vtt.forEach(t),nxo=r(t8e," (DeBERTa-v2 model)"),t8e.forEach(t),sxo=i(j),k2=n(j,"LI",{});var a8e=s(k2);Fce=n(a8e,"STRONG",{});var Xtt=s(Fce);lxo=r(Xtt,"distilbert"),Xtt.forEach(t),ixo=r(a8e," \u2014 "),bD=n(a8e,"A",{href:!0});var ztt=s(bD);dxo=r(ztt,"DistilBertForSequenceClassification"),ztt.forEach(t),cxo=r(a8e," (DistilBERT model)"),a8e.forEach(t),mxo=i(j),S2=n(j,"LI",{});var n8e=s(S2);vce=n(n8e,"STRONG",{});var Qtt=s(vce);fxo=r(Qtt,"electra"),Qtt.forEach(t),gxo=r(n8e," \u2014 "),FD=n(n8e,"A",{href:!0});var Wtt=s(FD);hxo=r(Wtt,"ElectraForSequenceClassification"),Wtt.forEach(t),uxo=r(n8e," (ELECTRA model)"),n8e.forEach(t),pxo=i(j),R2=n(j,"LI",{});var s8e=s(R2);Tce=n(s8e,"STRONG",{});var Htt=s(Tce);_xo=r(Htt,"flaubert"),Htt.forEach(t),bxo=r(s8e," \u2014 "),vD=n(s8e,"A",{href:!0});var Utt=s(vD);Fxo=r(Utt,"FlaubertForSequenceClassification"),Utt.forEach(t),vxo=r(s8e," (FlauBERT model)"),s8e.forEach(t),Txo=i(j),B2=n(j,"LI",{});var l8e=s(B2);Mce=n(l8e,"STRONG",{});var Jtt=s(Mce);Mxo=r(Jtt,"fnet"),Jtt.forEach(t),Exo=r(l8e," \u2014 "),TD=n(l8e,"A",{href:!0});var Ytt=s(TD);Cxo=r(Ytt,"FNetForSequenceClassification"),Ytt.forEach(t),wxo=r(l8e," (FNet model)"),l8e.forEach(t),Axo=i(j),P2=n(j,"LI",{});var i8e=s(P2);Ece=n(i8e,"STRONG",{});var Ktt=s(Ece);yxo=r(Ktt,"funnel"),Ktt.forEach(t),Lxo=r(i8e," \u2014 "),MD=n(i8e,"A",{href:!0});var Ztt=s(MD);xxo=r(Ztt,"FunnelForSequenceClassification"),Ztt.forEach(t),$xo=r(i8e," (Funnel Transformer model)"),i8e.forEach(t),kxo=i(j),I2=n(j,"LI",{});var d8e=s(I2);Cce=n(d8e,"STRONG",{});var eat=s(Cce);Sxo=r(eat,"gpt2"),eat.forEach(t),Rxo=r(d8e," \u2014 "),ED=n(d8e,"A",{href:!0});var oat=s(ED);Bxo=r(oat,"GPT2ForSequenceClassification"),oat.forEach(t),Pxo=r(d8e," (OpenAI GPT-2 model)"),d8e.forEach(t),Ixo=i(j),q2=n(j,"LI",{});var c8e=s(q2);wce=n(c8e,"STRONG",{});var rat=s(wce);qxo=r(rat,"gpt_neo"),rat.forEach(t),Nxo=r(c8e," \u2014 "),CD=n(c8e,"A",{href:!0});var tat=s(CD);jxo=r(tat,"GPTNeoForSequenceClassification"),tat.forEach(t),Dxo=r(c8e," (GPT Neo model)"),c8e.forEach(t),Gxo=i(j),N2=n(j,"LI",{});var m8e=s(N2);Ace=n(m8e,"STRONG",{});var aat=s(Ace);Oxo=r(aat,"gptj"),aat.forEach(t),Vxo=r(m8e," \u2014 "),wD=n(m8e,"A",{href:!0});var nat=s(wD);Xxo=r(nat,"GPTJForSequenceClassification"),nat.forEach(t),zxo=r(m8e," (GPT-J model)"),m8e.forEach(t),Qxo=i(j),j2=n(j,"LI",{});var f8e=s(j2);yce=n(f8e,"STRONG",{});var sat=s(yce);Wxo=r(sat,"ibert"),sat.forEach(t),Hxo=r(f8e," \u2014 "),AD=n(f8e,"A",{href:!0});var lat=s(AD);Uxo=r(lat,"IBertForSequenceClassification"),lat.forEach(t),Jxo=r(f8e," (I-BERT model)"),f8e.forEach(t),Yxo=i(j),D2=n(j,"LI",{});var g8e=s(D2);Lce=n(g8e,"STRONG",{});var iat=s(Lce);Kxo=r(iat,"layoutlm"),iat.forEach(t),Zxo=r(g8e," \u2014 "),yD=n(g8e,"A",{href:!0});var dat=s(yD);e7o=r(dat,"LayoutLMForSequenceClassification"),dat.forEach(t),o7o=r(g8e," (LayoutLM model)"),g8e.forEach(t),r7o=i(j),G2=n(j,"LI",{});var h8e=s(G2);xce=n(h8e,"STRONG",{});var cat=s(xce);t7o=r(cat,"layoutlmv2"),cat.forEach(t),a7o=r(h8e," \u2014 "),LD=n(h8e,"A",{href:!0});var mat=s(LD);n7o=r(mat,"LayoutLMv2ForSequenceClassification"),mat.forEach(t),s7o=r(h8e," (LayoutLMv2 model)"),h8e.forEach(t),l7o=i(j),O2=n(j,"LI",{});var u8e=s(O2);$ce=n(u8e,"STRONG",{});var fat=s($ce);i7o=r(fat,"led"),fat.forEach(t),d7o=r(u8e," \u2014 "),xD=n(u8e,"A",{href:!0});var gat=s(xD);c7o=r(gat,"LEDForSequenceClassification"),gat.forEach(t),m7o=r(u8e," (LED model)"),u8e.forEach(t),f7o=i(j),V2=n(j,"LI",{});var p8e=s(V2);kce=n(p8e,"STRONG",{});var hat=s(kce);g7o=r(hat,"longformer"),hat.forEach(t),h7o=r(p8e," \u2014 "),$D=n(p8e,"A",{href:!0});var uat=s($D);u7o=r(uat,"LongformerForSequenceClassification"),uat.forEach(t),p7o=r(p8e," (Longformer model)"),p8e.forEach(t),_7o=i(j),X2=n(j,"LI",{});var _8e=s(X2);Sce=n(_8e,"STRONG",{});var pat=s(Sce);b7o=r(pat,"mbart"),pat.forEach(t),F7o=r(_8e," \u2014 "),kD=n(_8e,"A",{href:!0});var _at=s(kD);v7o=r(_at,"MBartForSequenceClassification"),_at.forEach(t),T7o=r(_8e," (mBART model)"),_8e.forEach(t),M7o=i(j),z2=n(j,"LI",{});var b8e=s(z2);Rce=n(b8e,"STRONG",{});var bat=s(Rce);E7o=r(bat,"megatron-bert"),bat.forEach(t),C7o=r(b8e," \u2014 "),SD=n(b8e,"A",{href:!0});var Fat=s(SD);w7o=r(Fat,"MegatronBertForSequenceClassification"),Fat.forEach(t),A7o=r(b8e," (MegatronBert model)"),b8e.forEach(t),y7o=i(j),Q2=n(j,"LI",{});var F8e=s(Q2);Bce=n(F8e,"STRONG",{});var vat=s(Bce);L7o=r(vat,"mobilebert"),vat.forEach(t),x7o=r(F8e," \u2014 "),RD=n(F8e,"A",{href:!0});var Tat=s(RD);$7o=r(Tat,"MobileBertForSequenceClassification"),Tat.forEach(t),k7o=r(F8e," (MobileBERT model)"),F8e.forEach(t),S7o=i(j),W2=n(j,"LI",{});var v8e=s(W2);Pce=n(v8e,"STRONG",{});var Mat=s(Pce);R7o=r(Mat,"mpnet"),Mat.forEach(t),B7o=r(v8e," \u2014 "),BD=n(v8e,"A",{href:!0});var Eat=s(BD);P7o=r(Eat,"MPNetForSequenceClassification"),Eat.forEach(t),I7o=r(v8e," (MPNet model)"),v8e.forEach(t),q7o=i(j),H2=n(j,"LI",{});var T8e=s(H2);Ice=n(T8e,"STRONG",{});var Cat=s(Ice);N7o=r(Cat,"nystromformer"),Cat.forEach(t),j7o=r(T8e," \u2014 "),PD=n(T8e,"A",{href:!0});var wat=s(PD);D7o=r(wat,"NystromformerForSequenceClassification"),wat.forEach(t),G7o=r(T8e," (Nystromformer model)"),T8e.forEach(t),O7o=i(j),U2=n(j,"LI",{});var M8e=s(U2);qce=n(M8e,"STRONG",{});var Aat=s(qce);V7o=r(Aat,"openai-gpt"),Aat.forEach(t),X7o=r(M8e," \u2014 "),ID=n(M8e,"A",{href:!0});var yat=s(ID);z7o=r(yat,"OpenAIGPTForSequenceClassification"),yat.forEach(t),Q7o=r(M8e," (OpenAI GPT model)"),M8e.forEach(t),W7o=i(j),J2=n(j,"LI",{});var E8e=s(J2);Nce=n(E8e,"STRONG",{});var Lat=s(Nce);H7o=r(Lat,"perceiver"),Lat.forEach(t),U7o=r(E8e," \u2014 "),qD=n(E8e,"A",{href:!0});var xat=s(qD);J7o=r(xat,"PerceiverForSequenceClassification"),xat.forEach(t),Y7o=r(E8e," (Perceiver model)"),E8e.forEach(t),K7o=i(j),Y2=n(j,"LI",{});var C8e=s(Y2);jce=n(C8e,"STRONG",{});var $at=s(jce);Z7o=r($at,"plbart"),$at.forEach(t),e9o=r(C8e," \u2014 "),ND=n(C8e,"A",{href:!0});var kat=s(ND);o9o=r(kat,"PLBartForSequenceClassification"),kat.forEach(t),r9o=r(C8e," (PLBart model)"),C8e.forEach(t),t9o=i(j),K2=n(j,"LI",{});var w8e=s(K2);Dce=n(w8e,"STRONG",{});var Sat=s(Dce);a9o=r(Sat,"qdqbert"),Sat.forEach(t),n9o=r(w8e," \u2014 "),jD=n(w8e,"A",{href:!0});var Rat=s(jD);s9o=r(Rat,"QDQBertForSequenceClassification"),Rat.forEach(t),l9o=r(w8e," (QDQBert model)"),w8e.forEach(t),i9o=i(j),Z2=n(j,"LI",{});var A8e=s(Z2);Gce=n(A8e,"STRONG",{});var Bat=s(Gce);d9o=r(Bat,"reformer"),Bat.forEach(t),c9o=r(A8e," \u2014 "),DD=n(A8e,"A",{href:!0});var Pat=s(DD);m9o=r(Pat,"ReformerForSequenceClassification"),Pat.forEach(t),f9o=r(A8e," (Reformer model)"),A8e.forEach(t),g9o=i(j),eF=n(j,"LI",{});var y8e=s(eF);Oce=n(y8e,"STRONG",{});var Iat=s(Oce);h9o=r(Iat,"rembert"),Iat.forEach(t),u9o=r(y8e," \u2014 "),GD=n(y8e,"A",{href:!0});var qat=s(GD);p9o=r(qat,"RemBertForSequenceClassification"),qat.forEach(t),_9o=r(y8e," (RemBERT model)"),y8e.forEach(t),b9o=i(j),oF=n(j,"LI",{});var L8e=s(oF);Vce=n(L8e,"STRONG",{});var Nat=s(Vce);F9o=r(Nat,"roberta"),Nat.forEach(t),v9o=r(L8e," \u2014 "),OD=n(L8e,"A",{href:!0});var jat=s(OD);T9o=r(jat,"RobertaForSequenceClassification"),jat.forEach(t),M9o=r(L8e," (RoBERTa model)"),L8e.forEach(t),E9o=i(j),rF=n(j,"LI",{});var x8e=s(rF);Xce=n(x8e,"STRONG",{});var Dat=s(Xce);C9o=r(Dat,"roformer"),Dat.forEach(t),w9o=r(x8e," \u2014 "),VD=n(x8e,"A",{href:!0});var Gat=s(VD);A9o=r(Gat,"RoFormerForSequenceClassification"),Gat.forEach(t),y9o=r(x8e," (RoFormer model)"),x8e.forEach(t),L9o=i(j),tF=n(j,"LI",{});var $8e=s(tF);zce=n($8e,"STRONG",{});var Oat=s(zce);x9o=r(Oat,"squeezebert"),Oat.forEach(t),$9o=r($8e," \u2014 "),XD=n($8e,"A",{href:!0});var Vat=s(XD);k9o=r(Vat,"SqueezeBertForSequenceClassification"),Vat.forEach(t),S9o=r($8e," (SqueezeBERT model)"),$8e.forEach(t),R9o=i(j),aF=n(j,"LI",{});var k8e=s(aF);Qce=n(k8e,"STRONG",{});var Xat=s(Qce);B9o=r(Xat,"tapas"),Xat.forEach(t),P9o=r(k8e," \u2014 "),zD=n(k8e,"A",{href:!0});var zat=s(zD);I9o=r(zat,"TapasForSequenceClassification"),zat.forEach(t),q9o=r(k8e," (TAPAS model)"),k8e.forEach(t),N9o=i(j),nF=n(j,"LI",{});var S8e=s(nF);Wce=n(S8e,"STRONG",{});var Qat=s(Wce);j9o=r(Qat,"transfo-xl"),Qat.forEach(t),D9o=r(S8e," \u2014 "),QD=n(S8e,"A",{href:!0});var Wat=s(QD);G9o=r(Wat,"TransfoXLForSequenceClassification"),Wat.forEach(t),O9o=r(S8e," (Transformer-XL model)"),S8e.forEach(t),V9o=i(j),sF=n(j,"LI",{});var R8e=s(sF);Hce=n(R8e,"STRONG",{});var Hat=s(Hce);X9o=r(Hat,"xlm"),Hat.forEach(t),z9o=r(R8e," \u2014 "),WD=n(R8e,"A",{href:!0});var Uat=s(WD);Q9o=r(Uat,"XLMForSequenceClassification"),Uat.forEach(t),W9o=r(R8e," (XLM model)"),R8e.forEach(t),H9o=i(j),lF=n(j,"LI",{});var B8e=s(lF);Uce=n(B8e,"STRONG",{});var Jat=s(Uce);U9o=r(Jat,"xlm-roberta"),Jat.forEach(t),J9o=r(B8e," \u2014 "),HD=n(B8e,"A",{href:!0});var Yat=s(HD);Y9o=r(Yat,"XLMRobertaForSequenceClassification"),Yat.forEach(t),K9o=r(B8e," (XLM-RoBERTa model)"),B8e.forEach(t),Z9o=i(j),iF=n(j,"LI",{});var P8e=s(iF);Jce=n(P8e,"STRONG",{});var Kat=s(Jce);e$o=r(Kat,"xlm-roberta-xl"),Kat.forEach(t),o$o=r(P8e," \u2014 "),UD=n(P8e,"A",{href:!0});var Zat=s(UD);r$o=r(Zat,"XLMRobertaXLForSequenceClassification"),Zat.forEach(t),t$o=r(P8e," (XLM-RoBERTa-XL model)"),P8e.forEach(t),a$o=i(j),dF=n(j,"LI",{});var I8e=s(dF);Yce=n(I8e,"STRONG",{});var ent=s(Yce);n$o=r(ent,"xlnet"),ent.forEach(t),s$o=r(I8e," \u2014 "),JD=n(I8e,"A",{href:!0});var ont=s(JD);l$o=r(ont,"XLNetForSequenceClassification"),ont.forEach(t),i$o=r(I8e," (XLNet model)"),I8e.forEach(t),d$o=i(j),cF=n(j,"LI",{});var q8e=s(cF);Kce=n(q8e,"STRONG",{});var rnt=s(Kce);c$o=r(rnt,"yoso"),rnt.forEach(t),m$o=r(q8e," \u2014 "),YD=n(q8e,"A",{href:!0});var tnt=s(YD);f$o=r(tnt,"YosoForSequenceClassification"),tnt.forEach(t),g$o=r(q8e," (YOSO model)"),q8e.forEach(t),j.forEach(t),h$o=i(aa),mF=n(aa,"P",{});var N8e=s(mF);u$o=r(N8e,"The model is set in evaluation mode by default using "),Zce=n(N8e,"CODE",{});var ant=s(Zce);p$o=r(ant,"model.eval()"),ant.forEach(t),_$o=r(N8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(N8e,"CODE",{});var nnt=s(eme);b$o=r(nnt,"model.train()"),nnt.forEach(t),N8e.forEach(t),F$o=i(aa),T(fF.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),rIe=i(m),ji=n(m,"H2",{class:!0});var sNe=s(ji);gF=n(sNe,"A",{id:!0,class:!0,href:!0});var snt=s(gF);ome=n(snt,"SPAN",{});var lnt=s(ome);T(Jy.$$.fragment,lnt),lnt.forEach(t),snt.forEach(t),v$o=i(sNe),rme=n(sNe,"SPAN",{});var int=s(rme);T$o=r(int,"AutoModelForMultipleChoice"),int.forEach(t),sNe.forEach(t),tIe=i(m),Bo=n(m,"DIV",{class:!0});var zs=s(Bo);T(Yy.$$.fragment,zs),M$o=i(zs),Di=n(zs,"P",{});var hK=s(Di);E$o=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KD=n(hK,"A",{href:!0});var dnt=s(KD);C$o=r(dnt,"from_pretrained()"),dnt.forEach(t),w$o=r(hK," class method or the "),ZD=n(hK,"A",{href:!0});var cnt=s(ZD);A$o=r(cnt,"from_config()"),cnt.forEach(t),y$o=r(hK,` class
method.`),hK.forEach(t),L$o=i(zs),Ky=n(zs,"P",{});var lNe=s(Ky);x$o=r(lNe,"This class cannot be instantiated directly using "),tme=n(lNe,"CODE",{});var mnt=s(tme);$$o=r(mnt,"__init__()"),mnt.forEach(t),k$o=r(lNe," (throws an error)."),lNe.forEach(t),S$o=i(zs),lt=n(zs,"DIV",{class:!0});var d0=s(lt);T(Zy.$$.fragment,d0),R$o=i(d0),ame=n(d0,"P",{});var fnt=s(ame);B$o=r(fnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fnt.forEach(t),P$o=i(d0),Gi=n(d0,"P",{});var uK=s(Gi);I$o=r(uK,`Note:
Loading a model from its configuration file does `),nme=n(uK,"STRONG",{});var gnt=s(nme);q$o=r(gnt,"not"),gnt.forEach(t),N$o=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(uK,"A",{href:!0});var hnt=s(eG);j$o=r(hnt,"from_pretrained()"),hnt.forEach(t),D$o=r(uK," to load the model weights."),uK.forEach(t),G$o=i(d0),T(hF.$$.fragment,d0),d0.forEach(t),O$o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(eL.$$.fragment,na),V$o=i(na),sme=n(na,"P",{});var unt=s(sme);X$o=r(unt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),unt.forEach(t),z$o=i(na),Sa=n(na,"P",{});var c0=s(Sa);Q$o=r(c0,"The model class to instantiate is selected based on the "),lme=n(c0,"CODE",{});var pnt=s(lme);W$o=r(pnt,"model_type"),pnt.forEach(t),H$o=r(c0,` property of the config object (either
passed as an argument or loaded from `),ime=n(c0,"CODE",{});var _nt=s(ime);U$o=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),J$o=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(c0,"CODE",{});var bnt=s(dme);Y$o=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),K$o=r(c0,":"),c0.forEach(t),Z$o=i(na),Y=n(na,"UL",{});var K=s(Y);uF=n(K,"LI",{});var j8e=s(uF);cme=n(j8e,"STRONG",{});var Fnt=s(cme);eko=r(Fnt,"albert"),Fnt.forEach(t),oko=r(j8e," \u2014 "),oG=n(j8e,"A",{href:!0});var vnt=s(oG);rko=r(vnt,"AlbertForMultipleChoice"),vnt.forEach(t),tko=r(j8e," (ALBERT model)"),j8e.forEach(t),ako=i(K),pF=n(K,"LI",{});var D8e=s(pF);mme=n(D8e,"STRONG",{});var Tnt=s(mme);nko=r(Tnt,"bert"),Tnt.forEach(t),sko=r(D8e," \u2014 "),rG=n(D8e,"A",{href:!0});var Mnt=s(rG);lko=r(Mnt,"BertForMultipleChoice"),Mnt.forEach(t),iko=r(D8e," (BERT model)"),D8e.forEach(t),dko=i(K),_F=n(K,"LI",{});var G8e=s(_F);fme=n(G8e,"STRONG",{});var Ent=s(fme);cko=r(Ent,"big_bird"),Ent.forEach(t),mko=r(G8e," \u2014 "),tG=n(G8e,"A",{href:!0});var Cnt=s(tG);fko=r(Cnt,"BigBirdForMultipleChoice"),Cnt.forEach(t),gko=r(G8e," (BigBird model)"),G8e.forEach(t),hko=i(K),bF=n(K,"LI",{});var O8e=s(bF);gme=n(O8e,"STRONG",{});var wnt=s(gme);uko=r(wnt,"camembert"),wnt.forEach(t),pko=r(O8e," \u2014 "),aG=n(O8e,"A",{href:!0});var Ant=s(aG);_ko=r(Ant,"CamembertForMultipleChoice"),Ant.forEach(t),bko=r(O8e," (CamemBERT model)"),O8e.forEach(t),Fko=i(K),FF=n(K,"LI",{});var V8e=s(FF);hme=n(V8e,"STRONG",{});var ynt=s(hme);vko=r(ynt,"canine"),ynt.forEach(t),Tko=r(V8e," \u2014 "),nG=n(V8e,"A",{href:!0});var Lnt=s(nG);Mko=r(Lnt,"CanineForMultipleChoice"),Lnt.forEach(t),Eko=r(V8e," (Canine model)"),V8e.forEach(t),Cko=i(K),vF=n(K,"LI",{});var X8e=s(vF);ume=n(X8e,"STRONG",{});var xnt=s(ume);wko=r(xnt,"convbert"),xnt.forEach(t),Ako=r(X8e," \u2014 "),sG=n(X8e,"A",{href:!0});var $nt=s(sG);yko=r($nt,"ConvBertForMultipleChoice"),$nt.forEach(t),Lko=r(X8e," (ConvBERT model)"),X8e.forEach(t),xko=i(K),TF=n(K,"LI",{});var z8e=s(TF);pme=n(z8e,"STRONG",{});var knt=s(pme);$ko=r(knt,"data2vec-text"),knt.forEach(t),kko=r(z8e," \u2014 "),lG=n(z8e,"A",{href:!0});var Snt=s(lG);Sko=r(Snt,"Data2VecTextForMultipleChoice"),Snt.forEach(t),Rko=r(z8e," (Data2VecText model)"),z8e.forEach(t),Bko=i(K),MF=n(K,"LI",{});var Q8e=s(MF);_me=n(Q8e,"STRONG",{});var Rnt=s(_me);Pko=r(Rnt,"deberta-v2"),Rnt.forEach(t),Iko=r(Q8e," \u2014 "),iG=n(Q8e,"A",{href:!0});var Bnt=s(iG);qko=r(Bnt,"DebertaV2ForMultipleChoice"),Bnt.forEach(t),Nko=r(Q8e," (DeBERTa-v2 model)"),Q8e.forEach(t),jko=i(K),EF=n(K,"LI",{});var W8e=s(EF);bme=n(W8e,"STRONG",{});var Pnt=s(bme);Dko=r(Pnt,"distilbert"),Pnt.forEach(t),Gko=r(W8e," \u2014 "),dG=n(W8e,"A",{href:!0});var Int=s(dG);Oko=r(Int,"DistilBertForMultipleChoice"),Int.forEach(t),Vko=r(W8e," (DistilBERT model)"),W8e.forEach(t),Xko=i(K),CF=n(K,"LI",{});var H8e=s(CF);Fme=n(H8e,"STRONG",{});var qnt=s(Fme);zko=r(qnt,"electra"),qnt.forEach(t),Qko=r(H8e," \u2014 "),cG=n(H8e,"A",{href:!0});var Nnt=s(cG);Wko=r(Nnt,"ElectraForMultipleChoice"),Nnt.forEach(t),Hko=r(H8e," (ELECTRA model)"),H8e.forEach(t),Uko=i(K),wF=n(K,"LI",{});var U8e=s(wF);vme=n(U8e,"STRONG",{});var jnt=s(vme);Jko=r(jnt,"flaubert"),jnt.forEach(t),Yko=r(U8e," \u2014 "),mG=n(U8e,"A",{href:!0});var Dnt=s(mG);Kko=r(Dnt,"FlaubertForMultipleChoice"),Dnt.forEach(t),Zko=r(U8e," (FlauBERT model)"),U8e.forEach(t),eSo=i(K),AF=n(K,"LI",{});var J8e=s(AF);Tme=n(J8e,"STRONG",{});var Gnt=s(Tme);oSo=r(Gnt,"fnet"),Gnt.forEach(t),rSo=r(J8e," \u2014 "),fG=n(J8e,"A",{href:!0});var Ont=s(fG);tSo=r(Ont,"FNetForMultipleChoice"),Ont.forEach(t),aSo=r(J8e," (FNet model)"),J8e.forEach(t),nSo=i(K),yF=n(K,"LI",{});var Y8e=s(yF);Mme=n(Y8e,"STRONG",{});var Vnt=s(Mme);sSo=r(Vnt,"funnel"),Vnt.forEach(t),lSo=r(Y8e," \u2014 "),gG=n(Y8e,"A",{href:!0});var Xnt=s(gG);iSo=r(Xnt,"FunnelForMultipleChoice"),Xnt.forEach(t),dSo=r(Y8e," (Funnel Transformer model)"),Y8e.forEach(t),cSo=i(K),LF=n(K,"LI",{});var K8e=s(LF);Eme=n(K8e,"STRONG",{});var znt=s(Eme);mSo=r(znt,"ibert"),znt.forEach(t),fSo=r(K8e," \u2014 "),hG=n(K8e,"A",{href:!0});var Qnt=s(hG);gSo=r(Qnt,"IBertForMultipleChoice"),Qnt.forEach(t),hSo=r(K8e," (I-BERT model)"),K8e.forEach(t),uSo=i(K),xF=n(K,"LI",{});var Z8e=s(xF);Cme=n(Z8e,"STRONG",{});var Wnt=s(Cme);pSo=r(Wnt,"longformer"),Wnt.forEach(t),_So=r(Z8e," \u2014 "),uG=n(Z8e,"A",{href:!0});var Hnt=s(uG);bSo=r(Hnt,"LongformerForMultipleChoice"),Hnt.forEach(t),FSo=r(Z8e," (Longformer model)"),Z8e.forEach(t),vSo=i(K),$F=n(K,"LI",{});var exe=s($F);wme=n(exe,"STRONG",{});var Unt=s(wme);TSo=r(Unt,"megatron-bert"),Unt.forEach(t),MSo=r(exe," \u2014 "),pG=n(exe,"A",{href:!0});var Jnt=s(pG);ESo=r(Jnt,"MegatronBertForMultipleChoice"),Jnt.forEach(t),CSo=r(exe," (MegatronBert model)"),exe.forEach(t),wSo=i(K),kF=n(K,"LI",{});var oxe=s(kF);Ame=n(oxe,"STRONG",{});var Ynt=s(Ame);ASo=r(Ynt,"mobilebert"),Ynt.forEach(t),ySo=r(oxe," \u2014 "),_G=n(oxe,"A",{href:!0});var Knt=s(_G);LSo=r(Knt,"MobileBertForMultipleChoice"),Knt.forEach(t),xSo=r(oxe," (MobileBERT model)"),oxe.forEach(t),$So=i(K),SF=n(K,"LI",{});var rxe=s(SF);yme=n(rxe,"STRONG",{});var Znt=s(yme);kSo=r(Znt,"mpnet"),Znt.forEach(t),SSo=r(rxe," \u2014 "),bG=n(rxe,"A",{href:!0});var est=s(bG);RSo=r(est,"MPNetForMultipleChoice"),est.forEach(t),BSo=r(rxe," (MPNet model)"),rxe.forEach(t),PSo=i(K),RF=n(K,"LI",{});var txe=s(RF);Lme=n(txe,"STRONG",{});var ost=s(Lme);ISo=r(ost,"nystromformer"),ost.forEach(t),qSo=r(txe," \u2014 "),FG=n(txe,"A",{href:!0});var rst=s(FG);NSo=r(rst,"NystromformerForMultipleChoice"),rst.forEach(t),jSo=r(txe," (Nystromformer model)"),txe.forEach(t),DSo=i(K),BF=n(K,"LI",{});var axe=s(BF);xme=n(axe,"STRONG",{});var tst=s(xme);GSo=r(tst,"qdqbert"),tst.forEach(t),OSo=r(axe," \u2014 "),vG=n(axe,"A",{href:!0});var ast=s(vG);VSo=r(ast,"QDQBertForMultipleChoice"),ast.forEach(t),XSo=r(axe," (QDQBert model)"),axe.forEach(t),zSo=i(K),PF=n(K,"LI",{});var nxe=s(PF);$me=n(nxe,"STRONG",{});var nst=s($me);QSo=r(nst,"rembert"),nst.forEach(t),WSo=r(nxe," \u2014 "),TG=n(nxe,"A",{href:!0});var sst=s(TG);HSo=r(sst,"RemBertForMultipleChoice"),sst.forEach(t),USo=r(nxe," (RemBERT model)"),nxe.forEach(t),JSo=i(K),IF=n(K,"LI",{});var sxe=s(IF);kme=n(sxe,"STRONG",{});var lst=s(kme);YSo=r(lst,"roberta"),lst.forEach(t),KSo=r(sxe," \u2014 "),MG=n(sxe,"A",{href:!0});var ist=s(MG);ZSo=r(ist,"RobertaForMultipleChoice"),ist.forEach(t),eRo=r(sxe," (RoBERTa model)"),sxe.forEach(t),oRo=i(K),qF=n(K,"LI",{});var lxe=s(qF);Sme=n(lxe,"STRONG",{});var dst=s(Sme);rRo=r(dst,"roformer"),dst.forEach(t),tRo=r(lxe," \u2014 "),EG=n(lxe,"A",{href:!0});var cst=s(EG);aRo=r(cst,"RoFormerForMultipleChoice"),cst.forEach(t),nRo=r(lxe," (RoFormer model)"),lxe.forEach(t),sRo=i(K),NF=n(K,"LI",{});var ixe=s(NF);Rme=n(ixe,"STRONG",{});var mst=s(Rme);lRo=r(mst,"squeezebert"),mst.forEach(t),iRo=r(ixe," \u2014 "),CG=n(ixe,"A",{href:!0});var fst=s(CG);dRo=r(fst,"SqueezeBertForMultipleChoice"),fst.forEach(t),cRo=r(ixe," (SqueezeBERT model)"),ixe.forEach(t),mRo=i(K),jF=n(K,"LI",{});var dxe=s(jF);Bme=n(dxe,"STRONG",{});var gst=s(Bme);fRo=r(gst,"xlm"),gst.forEach(t),gRo=r(dxe," \u2014 "),wG=n(dxe,"A",{href:!0});var hst=s(wG);hRo=r(hst,"XLMForMultipleChoice"),hst.forEach(t),uRo=r(dxe," (XLM model)"),dxe.forEach(t),pRo=i(K),DF=n(K,"LI",{});var cxe=s(DF);Pme=n(cxe,"STRONG",{});var ust=s(Pme);_Ro=r(ust,"xlm-roberta"),ust.forEach(t),bRo=r(cxe," \u2014 "),AG=n(cxe,"A",{href:!0});var pst=s(AG);FRo=r(pst,"XLMRobertaForMultipleChoice"),pst.forEach(t),vRo=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),TRo=i(K),GF=n(K,"LI",{});var mxe=s(GF);Ime=n(mxe,"STRONG",{});var _st=s(Ime);MRo=r(_st,"xlm-roberta-xl"),_st.forEach(t),ERo=r(mxe," \u2014 "),yG=n(mxe,"A",{href:!0});var bst=s(yG);CRo=r(bst,"XLMRobertaXLForMultipleChoice"),bst.forEach(t),wRo=r(mxe," (XLM-RoBERTa-XL model)"),mxe.forEach(t),ARo=i(K),OF=n(K,"LI",{});var fxe=s(OF);qme=n(fxe,"STRONG",{});var Fst=s(qme);yRo=r(Fst,"xlnet"),Fst.forEach(t),LRo=r(fxe," \u2014 "),LG=n(fxe,"A",{href:!0});var vst=s(LG);xRo=r(vst,"XLNetForMultipleChoice"),vst.forEach(t),$Ro=r(fxe," (XLNet model)"),fxe.forEach(t),kRo=i(K),VF=n(K,"LI",{});var gxe=s(VF);Nme=n(gxe,"STRONG",{});var Tst=s(Nme);SRo=r(Tst,"yoso"),Tst.forEach(t),RRo=r(gxe," \u2014 "),xG=n(gxe,"A",{href:!0});var Mst=s(xG);BRo=r(Mst,"YosoForMultipleChoice"),Mst.forEach(t),PRo=r(gxe," (YOSO model)"),gxe.forEach(t),K.forEach(t),IRo=i(na),XF=n(na,"P",{});var hxe=s(XF);qRo=r(hxe,"The model is set in evaluation mode by default using "),jme=n(hxe,"CODE",{});var Est=s(jme);NRo=r(Est,"model.eval()"),Est.forEach(t),jRo=r(hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(hxe,"CODE",{});var Cst=s(Dme);DRo=r(Cst,"model.train()"),Cst.forEach(t),hxe.forEach(t),GRo=i(na),T(zF.$$.fragment,na),na.forEach(t),zs.forEach(t),aIe=i(m),Oi=n(m,"H2",{class:!0});var iNe=s(Oi);QF=n(iNe,"A",{id:!0,class:!0,href:!0});var wst=s(QF);Gme=n(wst,"SPAN",{});var Ast=s(Gme);T(oL.$$.fragment,Ast),Ast.forEach(t),wst.forEach(t),ORo=i(iNe),Ome=n(iNe,"SPAN",{});var yst=s(Ome);VRo=r(yst,"AutoModelForNextSentencePrediction"),yst.forEach(t),iNe.forEach(t),nIe=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T(rL.$$.fragment,Qs),XRo=i(Qs),Vi=n(Qs,"P",{});var pK=s(Vi);zRo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$G=n(pK,"A",{href:!0});var Lst=s($G);QRo=r(Lst,"from_pretrained()"),Lst.forEach(t),WRo=r(pK," class method or the "),kG=n(pK,"A",{href:!0});var xst=s(kG);HRo=r(xst,"from_config()"),xst.forEach(t),URo=r(pK,` class
method.`),pK.forEach(t),JRo=i(Qs),tL=n(Qs,"P",{});var dNe=s(tL);YRo=r(dNe,"This class cannot be instantiated directly using "),Vme=n(dNe,"CODE",{});var $st=s(Vme);KRo=r($st,"__init__()"),$st.forEach(t),ZRo=r(dNe," (throws an error)."),dNe.forEach(t),eBo=i(Qs),it=n(Qs,"DIV",{class:!0});var m0=s(it);T(aL.$$.fragment,m0),oBo=i(m0),Xme=n(m0,"P",{});var kst=s(Xme);rBo=r(kst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kst.forEach(t),tBo=i(m0),Xi=n(m0,"P",{});var _K=s(Xi);aBo=r(_K,`Note:
Loading a model from its configuration file does `),zme=n(_K,"STRONG",{});var Sst=s(zme);nBo=r(Sst,"not"),Sst.forEach(t),sBo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(_K,"A",{href:!0});var Rst=s(SG);lBo=r(Rst,"from_pretrained()"),Rst.forEach(t),iBo=r(_K," to load the model weights."),_K.forEach(t),dBo=i(m0),T(WF.$$.fragment,m0),m0.forEach(t),cBo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(nL.$$.fragment,sa),mBo=i(sa),Qme=n(sa,"P",{});var Bst=s(Qme);fBo=r(Bst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Bst.forEach(t),gBo=i(sa),Ra=n(sa,"P",{});var f0=s(Ra);hBo=r(f0,"The model class to instantiate is selected based on the "),Wme=n(f0,"CODE",{});var Pst=s(Wme);uBo=r(Pst,"model_type"),Pst.forEach(t),pBo=r(f0,` property of the config object (either
passed as an argument or loaded from `),Hme=n(f0,"CODE",{});var Ist=s(Hme);_Bo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),bBo=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(f0,"CODE",{});var qst=s(Ume);FBo=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),vBo=r(f0,":"),f0.forEach(t),TBo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);HF=n(Ws,"LI",{});var uxe=s(HF);Jme=n(uxe,"STRONG",{});var Nst=s(Jme);MBo=r(Nst,"bert"),Nst.forEach(t),EBo=r(uxe," \u2014 "),RG=n(uxe,"A",{href:!0});var jst=s(RG);CBo=r(jst,"BertForNextSentencePrediction"),jst.forEach(t),wBo=r(uxe," (BERT model)"),uxe.forEach(t),ABo=i(Ws),UF=n(Ws,"LI",{});var pxe=s(UF);Yme=n(pxe,"STRONG",{});var Dst=s(Yme);yBo=r(Dst,"fnet"),Dst.forEach(t),LBo=r(pxe," \u2014 "),BG=n(pxe,"A",{href:!0});var Gst=s(BG);xBo=r(Gst,"FNetForNextSentencePrediction"),Gst.forEach(t),$Bo=r(pxe," (FNet model)"),pxe.forEach(t),kBo=i(Ws),JF=n(Ws,"LI",{});var _xe=s(JF);Kme=n(_xe,"STRONG",{});var Ost=s(Kme);SBo=r(Ost,"megatron-bert"),Ost.forEach(t),RBo=r(_xe," \u2014 "),PG=n(_xe,"A",{href:!0});var Vst=s(PG);BBo=r(Vst,"MegatronBertForNextSentencePrediction"),Vst.forEach(t),PBo=r(_xe," (MegatronBert model)"),_xe.forEach(t),IBo=i(Ws),YF=n(Ws,"LI",{});var bxe=s(YF);Zme=n(bxe,"STRONG",{});var Xst=s(Zme);qBo=r(Xst,"mobilebert"),Xst.forEach(t),NBo=r(bxe," \u2014 "),IG=n(bxe,"A",{href:!0});var zst=s(IG);jBo=r(zst,"MobileBertForNextSentencePrediction"),zst.forEach(t),DBo=r(bxe," (MobileBERT model)"),bxe.forEach(t),GBo=i(Ws),KF=n(Ws,"LI",{});var Fxe=s(KF);efe=n(Fxe,"STRONG",{});var Qst=s(efe);OBo=r(Qst,"qdqbert"),Qst.forEach(t),VBo=r(Fxe," \u2014 "),qG=n(Fxe,"A",{href:!0});var Wst=s(qG);XBo=r(Wst,"QDQBertForNextSentencePrediction"),Wst.forEach(t),zBo=r(Fxe," (QDQBert model)"),Fxe.forEach(t),Ws.forEach(t),QBo=i(sa),ZF=n(sa,"P",{});var vxe=s(ZF);WBo=r(vxe,"The model is set in evaluation mode by default using "),ofe=n(vxe,"CODE",{});var Hst=s(ofe);HBo=r(Hst,"model.eval()"),Hst.forEach(t),UBo=r(vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rfe=n(vxe,"CODE",{});var Ust=s(rfe);JBo=r(Ust,"model.train()"),Ust.forEach(t),vxe.forEach(t),YBo=i(sa),T(ev.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),sIe=i(m),zi=n(m,"H2",{class:!0});var cNe=s(zi);ov=n(cNe,"A",{id:!0,class:!0,href:!0});var Jst=s(ov);tfe=n(Jst,"SPAN",{});var Yst=s(tfe);T(sL.$$.fragment,Yst),Yst.forEach(t),Jst.forEach(t),KBo=i(cNe),afe=n(cNe,"SPAN",{});var Kst=s(afe);ZBo=r(Kst,"AutoModelForTokenClassification"),Kst.forEach(t),cNe.forEach(t),lIe=i(m),Io=n(m,"DIV",{class:!0});var Hs=s(Io);T(lL.$$.fragment,Hs),ePo=i(Hs),Qi=n(Hs,"P",{});var bK=s(Qi);oPo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NG=n(bK,"A",{href:!0});var Zst=s(NG);rPo=r(Zst,"from_pretrained()"),Zst.forEach(t),tPo=r(bK," class method or the "),jG=n(bK,"A",{href:!0});var elt=s(jG);aPo=r(elt,"from_config()"),elt.forEach(t),nPo=r(bK,` class
method.`),bK.forEach(t),sPo=i(Hs),iL=n(Hs,"P",{});var mNe=s(iL);lPo=r(mNe,"This class cannot be instantiated directly using "),nfe=n(mNe,"CODE",{});var olt=s(nfe);iPo=r(olt,"__init__()"),olt.forEach(t),dPo=r(mNe," (throws an error)."),mNe.forEach(t),cPo=i(Hs),dt=n(Hs,"DIV",{class:!0});var g0=s(dt);T(dL.$$.fragment,g0),mPo=i(g0),sfe=n(g0,"P",{});var rlt=s(sfe);fPo=r(rlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rlt.forEach(t),gPo=i(g0),Wi=n(g0,"P",{});var FK=s(Wi);hPo=r(FK,`Note:
Loading a model from its configuration file does `),lfe=n(FK,"STRONG",{});var tlt=s(lfe);uPo=r(tlt,"not"),tlt.forEach(t),pPo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(FK,"A",{href:!0});var alt=s(DG);_Po=r(alt,"from_pretrained()"),alt.forEach(t),bPo=r(FK," to load the model weights."),FK.forEach(t),FPo=i(g0),T(rv.$$.fragment,g0),g0.forEach(t),vPo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(cL.$$.fragment,la),TPo=i(la),ife=n(la,"P",{});var nlt=s(ife);MPo=r(nlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nlt.forEach(t),EPo=i(la),Ba=n(la,"P",{});var h0=s(Ba);CPo=r(h0,"The model class to instantiate is selected based on the "),dfe=n(h0,"CODE",{});var slt=s(dfe);wPo=r(slt,"model_type"),slt.forEach(t),APo=r(h0,` property of the config object (either
passed as an argument or loaded from `),cfe=n(h0,"CODE",{});var llt=s(cfe);yPo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),LPo=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(h0,"CODE",{});var ilt=s(mfe);xPo=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),$Po=r(h0,":"),h0.forEach(t),kPo=i(la),U=n(la,"UL",{});var J=s(U);tv=n(J,"LI",{});var Txe=s(tv);ffe=n(Txe,"STRONG",{});var dlt=s(ffe);SPo=r(dlt,"albert"),dlt.forEach(t),RPo=r(Txe," \u2014 "),GG=n(Txe,"A",{href:!0});var clt=s(GG);BPo=r(clt,"AlbertForTokenClassification"),clt.forEach(t),PPo=r(Txe," (ALBERT model)"),Txe.forEach(t),IPo=i(J),av=n(J,"LI",{});var Mxe=s(av);gfe=n(Mxe,"STRONG",{});var mlt=s(gfe);qPo=r(mlt,"bert"),mlt.forEach(t),NPo=r(Mxe," \u2014 "),OG=n(Mxe,"A",{href:!0});var flt=s(OG);jPo=r(flt,"BertForTokenClassification"),flt.forEach(t),DPo=r(Mxe," (BERT model)"),Mxe.forEach(t),GPo=i(J),nv=n(J,"LI",{});var Exe=s(nv);hfe=n(Exe,"STRONG",{});var glt=s(hfe);OPo=r(glt,"big_bird"),glt.forEach(t),VPo=r(Exe," \u2014 "),VG=n(Exe,"A",{href:!0});var hlt=s(VG);XPo=r(hlt,"BigBirdForTokenClassification"),hlt.forEach(t),zPo=r(Exe," (BigBird model)"),Exe.forEach(t),QPo=i(J),sv=n(J,"LI",{});var Cxe=s(sv);ufe=n(Cxe,"STRONG",{});var ult=s(ufe);WPo=r(ult,"camembert"),ult.forEach(t),HPo=r(Cxe," \u2014 "),XG=n(Cxe,"A",{href:!0});var plt=s(XG);UPo=r(plt,"CamembertForTokenClassification"),plt.forEach(t),JPo=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),YPo=i(J),lv=n(J,"LI",{});var wxe=s(lv);pfe=n(wxe,"STRONG",{});var _lt=s(pfe);KPo=r(_lt,"canine"),_lt.forEach(t),ZPo=r(wxe," \u2014 "),zG=n(wxe,"A",{href:!0});var blt=s(zG);eIo=r(blt,"CanineForTokenClassification"),blt.forEach(t),oIo=r(wxe," (Canine model)"),wxe.forEach(t),rIo=i(J),iv=n(J,"LI",{});var Axe=s(iv);_fe=n(Axe,"STRONG",{});var Flt=s(_fe);tIo=r(Flt,"convbert"),Flt.forEach(t),aIo=r(Axe," \u2014 "),QG=n(Axe,"A",{href:!0});var vlt=s(QG);nIo=r(vlt,"ConvBertForTokenClassification"),vlt.forEach(t),sIo=r(Axe," (ConvBERT model)"),Axe.forEach(t),lIo=i(J),dv=n(J,"LI",{});var yxe=s(dv);bfe=n(yxe,"STRONG",{});var Tlt=s(bfe);iIo=r(Tlt,"data2vec-text"),Tlt.forEach(t),dIo=r(yxe," \u2014 "),WG=n(yxe,"A",{href:!0});var Mlt=s(WG);cIo=r(Mlt,"Data2VecTextForTokenClassification"),Mlt.forEach(t),mIo=r(yxe," (Data2VecText model)"),yxe.forEach(t),fIo=i(J),cv=n(J,"LI",{});var Lxe=s(cv);Ffe=n(Lxe,"STRONG",{});var Elt=s(Ffe);gIo=r(Elt,"deberta"),Elt.forEach(t),hIo=r(Lxe," \u2014 "),HG=n(Lxe,"A",{href:!0});var Clt=s(HG);uIo=r(Clt,"DebertaForTokenClassification"),Clt.forEach(t),pIo=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),_Io=i(J),mv=n(J,"LI",{});var xxe=s(mv);vfe=n(xxe,"STRONG",{});var wlt=s(vfe);bIo=r(wlt,"deberta-v2"),wlt.forEach(t),FIo=r(xxe," \u2014 "),UG=n(xxe,"A",{href:!0});var Alt=s(UG);vIo=r(Alt,"DebertaV2ForTokenClassification"),Alt.forEach(t),TIo=r(xxe," (DeBERTa-v2 model)"),xxe.forEach(t),MIo=i(J),fv=n(J,"LI",{});var $xe=s(fv);Tfe=n($xe,"STRONG",{});var ylt=s(Tfe);EIo=r(ylt,"distilbert"),ylt.forEach(t),CIo=r($xe," \u2014 "),JG=n($xe,"A",{href:!0});var Llt=s(JG);wIo=r(Llt,"DistilBertForTokenClassification"),Llt.forEach(t),AIo=r($xe," (DistilBERT model)"),$xe.forEach(t),yIo=i(J),gv=n(J,"LI",{});var kxe=s(gv);Mfe=n(kxe,"STRONG",{});var xlt=s(Mfe);LIo=r(xlt,"electra"),xlt.forEach(t),xIo=r(kxe," \u2014 "),YG=n(kxe,"A",{href:!0});var $lt=s(YG);$Io=r($lt,"ElectraForTokenClassification"),$lt.forEach(t),kIo=r(kxe," (ELECTRA model)"),kxe.forEach(t),SIo=i(J),hv=n(J,"LI",{});var Sxe=s(hv);Efe=n(Sxe,"STRONG",{});var klt=s(Efe);RIo=r(klt,"flaubert"),klt.forEach(t),BIo=r(Sxe," \u2014 "),KG=n(Sxe,"A",{href:!0});var Slt=s(KG);PIo=r(Slt,"FlaubertForTokenClassification"),Slt.forEach(t),IIo=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),qIo=i(J),uv=n(J,"LI",{});var Rxe=s(uv);Cfe=n(Rxe,"STRONG",{});var Rlt=s(Cfe);NIo=r(Rlt,"fnet"),Rlt.forEach(t),jIo=r(Rxe," \u2014 "),ZG=n(Rxe,"A",{href:!0});var Blt=s(ZG);DIo=r(Blt,"FNetForTokenClassification"),Blt.forEach(t),GIo=r(Rxe," (FNet model)"),Rxe.forEach(t),OIo=i(J),pv=n(J,"LI",{});var Bxe=s(pv);wfe=n(Bxe,"STRONG",{});var Plt=s(wfe);VIo=r(Plt,"funnel"),Plt.forEach(t),XIo=r(Bxe," \u2014 "),eO=n(Bxe,"A",{href:!0});var Ilt=s(eO);zIo=r(Ilt,"FunnelForTokenClassification"),Ilt.forEach(t),QIo=r(Bxe," (Funnel Transformer model)"),Bxe.forEach(t),WIo=i(J),_v=n(J,"LI",{});var Pxe=s(_v);Afe=n(Pxe,"STRONG",{});var qlt=s(Afe);HIo=r(qlt,"gpt2"),qlt.forEach(t),UIo=r(Pxe," \u2014 "),oO=n(Pxe,"A",{href:!0});var Nlt=s(oO);JIo=r(Nlt,"GPT2ForTokenClassification"),Nlt.forEach(t),YIo=r(Pxe," (OpenAI GPT-2 model)"),Pxe.forEach(t),KIo=i(J),bv=n(J,"LI",{});var Ixe=s(bv);yfe=n(Ixe,"STRONG",{});var jlt=s(yfe);ZIo=r(jlt,"ibert"),jlt.forEach(t),eqo=r(Ixe," \u2014 "),rO=n(Ixe,"A",{href:!0});var Dlt=s(rO);oqo=r(Dlt,"IBertForTokenClassification"),Dlt.forEach(t),rqo=r(Ixe," (I-BERT model)"),Ixe.forEach(t),tqo=i(J),Fv=n(J,"LI",{});var qxe=s(Fv);Lfe=n(qxe,"STRONG",{});var Glt=s(Lfe);aqo=r(Glt,"layoutlm"),Glt.forEach(t),nqo=r(qxe," \u2014 "),tO=n(qxe,"A",{href:!0});var Olt=s(tO);sqo=r(Olt,"LayoutLMForTokenClassification"),Olt.forEach(t),lqo=r(qxe," (LayoutLM model)"),qxe.forEach(t),iqo=i(J),vv=n(J,"LI",{});var Nxe=s(vv);xfe=n(Nxe,"STRONG",{});var Vlt=s(xfe);dqo=r(Vlt,"layoutlmv2"),Vlt.forEach(t),cqo=r(Nxe," \u2014 "),aO=n(Nxe,"A",{href:!0});var Xlt=s(aO);mqo=r(Xlt,"LayoutLMv2ForTokenClassification"),Xlt.forEach(t),fqo=r(Nxe," (LayoutLMv2 model)"),Nxe.forEach(t),gqo=i(J),Tv=n(J,"LI",{});var jxe=s(Tv);$fe=n(jxe,"STRONG",{});var zlt=s($fe);hqo=r(zlt,"longformer"),zlt.forEach(t),uqo=r(jxe," \u2014 "),nO=n(jxe,"A",{href:!0});var Qlt=s(nO);pqo=r(Qlt,"LongformerForTokenClassification"),Qlt.forEach(t),_qo=r(jxe," (Longformer model)"),jxe.forEach(t),bqo=i(J),Mv=n(J,"LI",{});var Dxe=s(Mv);kfe=n(Dxe,"STRONG",{});var Wlt=s(kfe);Fqo=r(Wlt,"megatron-bert"),Wlt.forEach(t),vqo=r(Dxe," \u2014 "),sO=n(Dxe,"A",{href:!0});var Hlt=s(sO);Tqo=r(Hlt,"MegatronBertForTokenClassification"),Hlt.forEach(t),Mqo=r(Dxe," (MegatronBert model)"),Dxe.forEach(t),Eqo=i(J),Ev=n(J,"LI",{});var Gxe=s(Ev);Sfe=n(Gxe,"STRONG",{});var Ult=s(Sfe);Cqo=r(Ult,"mobilebert"),Ult.forEach(t),wqo=r(Gxe," \u2014 "),lO=n(Gxe,"A",{href:!0});var Jlt=s(lO);Aqo=r(Jlt,"MobileBertForTokenClassification"),Jlt.forEach(t),yqo=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),Lqo=i(J),Cv=n(J,"LI",{});var Oxe=s(Cv);Rfe=n(Oxe,"STRONG",{});var Ylt=s(Rfe);xqo=r(Ylt,"mpnet"),Ylt.forEach(t),$qo=r(Oxe," \u2014 "),iO=n(Oxe,"A",{href:!0});var Klt=s(iO);kqo=r(Klt,"MPNetForTokenClassification"),Klt.forEach(t),Sqo=r(Oxe," (MPNet model)"),Oxe.forEach(t),Rqo=i(J),wv=n(J,"LI",{});var Vxe=s(wv);Bfe=n(Vxe,"STRONG",{});var Zlt=s(Bfe);Bqo=r(Zlt,"nystromformer"),Zlt.forEach(t),Pqo=r(Vxe," \u2014 "),dO=n(Vxe,"A",{href:!0});var eit=s(dO);Iqo=r(eit,"NystromformerForTokenClassification"),eit.forEach(t),qqo=r(Vxe," (Nystromformer model)"),Vxe.forEach(t),Nqo=i(J),Av=n(J,"LI",{});var Xxe=s(Av);Pfe=n(Xxe,"STRONG",{});var oit=s(Pfe);jqo=r(oit,"qdqbert"),oit.forEach(t),Dqo=r(Xxe," \u2014 "),cO=n(Xxe,"A",{href:!0});var rit=s(cO);Gqo=r(rit,"QDQBertForTokenClassification"),rit.forEach(t),Oqo=r(Xxe," (QDQBert model)"),Xxe.forEach(t),Vqo=i(J),yv=n(J,"LI",{});var zxe=s(yv);Ife=n(zxe,"STRONG",{});var tit=s(Ife);Xqo=r(tit,"rembert"),tit.forEach(t),zqo=r(zxe," \u2014 "),mO=n(zxe,"A",{href:!0});var ait=s(mO);Qqo=r(ait,"RemBertForTokenClassification"),ait.forEach(t),Wqo=r(zxe," (RemBERT model)"),zxe.forEach(t),Hqo=i(J),Lv=n(J,"LI",{});var Qxe=s(Lv);qfe=n(Qxe,"STRONG",{});var nit=s(qfe);Uqo=r(nit,"roberta"),nit.forEach(t),Jqo=r(Qxe," \u2014 "),fO=n(Qxe,"A",{href:!0});var sit=s(fO);Yqo=r(sit,"RobertaForTokenClassification"),sit.forEach(t),Kqo=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),Zqo=i(J),xv=n(J,"LI",{});var Wxe=s(xv);Nfe=n(Wxe,"STRONG",{});var lit=s(Nfe);eNo=r(lit,"roformer"),lit.forEach(t),oNo=r(Wxe," \u2014 "),gO=n(Wxe,"A",{href:!0});var iit=s(gO);rNo=r(iit,"RoFormerForTokenClassification"),iit.forEach(t),tNo=r(Wxe," (RoFormer model)"),Wxe.forEach(t),aNo=i(J),$v=n(J,"LI",{});var Hxe=s($v);jfe=n(Hxe,"STRONG",{});var dit=s(jfe);nNo=r(dit,"squeezebert"),dit.forEach(t),sNo=r(Hxe," \u2014 "),hO=n(Hxe,"A",{href:!0});var cit=s(hO);lNo=r(cit,"SqueezeBertForTokenClassification"),cit.forEach(t),iNo=r(Hxe," (SqueezeBERT model)"),Hxe.forEach(t),dNo=i(J),kv=n(J,"LI",{});var Uxe=s(kv);Dfe=n(Uxe,"STRONG",{});var mit=s(Dfe);cNo=r(mit,"xlm"),mit.forEach(t),mNo=r(Uxe," \u2014 "),uO=n(Uxe,"A",{href:!0});var fit=s(uO);fNo=r(fit,"XLMForTokenClassification"),fit.forEach(t),gNo=r(Uxe," (XLM model)"),Uxe.forEach(t),hNo=i(J),Sv=n(J,"LI",{});var Jxe=s(Sv);Gfe=n(Jxe,"STRONG",{});var git=s(Gfe);uNo=r(git,"xlm-roberta"),git.forEach(t),pNo=r(Jxe," \u2014 "),pO=n(Jxe,"A",{href:!0});var hit=s(pO);_No=r(hit,"XLMRobertaForTokenClassification"),hit.forEach(t),bNo=r(Jxe," (XLM-RoBERTa model)"),Jxe.forEach(t),FNo=i(J),Rv=n(J,"LI",{});var Yxe=s(Rv);Ofe=n(Yxe,"STRONG",{});var uit=s(Ofe);vNo=r(uit,"xlm-roberta-xl"),uit.forEach(t),TNo=r(Yxe," \u2014 "),_O=n(Yxe,"A",{href:!0});var pit=s(_O);MNo=r(pit,"XLMRobertaXLForTokenClassification"),pit.forEach(t),ENo=r(Yxe," (XLM-RoBERTa-XL model)"),Yxe.forEach(t),CNo=i(J),Bv=n(J,"LI",{});var Kxe=s(Bv);Vfe=n(Kxe,"STRONG",{});var _it=s(Vfe);wNo=r(_it,"xlnet"),_it.forEach(t),ANo=r(Kxe," \u2014 "),bO=n(Kxe,"A",{href:!0});var bit=s(bO);yNo=r(bit,"XLNetForTokenClassification"),bit.forEach(t),LNo=r(Kxe," (XLNet model)"),Kxe.forEach(t),xNo=i(J),Pv=n(J,"LI",{});var Zxe=s(Pv);Xfe=n(Zxe,"STRONG",{});var Fit=s(Xfe);$No=r(Fit,"yoso"),Fit.forEach(t),kNo=r(Zxe," \u2014 "),FO=n(Zxe,"A",{href:!0});var vit=s(FO);SNo=r(vit,"YosoForTokenClassification"),vit.forEach(t),RNo=r(Zxe," (YOSO model)"),Zxe.forEach(t),J.forEach(t),BNo=i(la),Iv=n(la,"P",{});var e7e=s(Iv);PNo=r(e7e,"The model is set in evaluation mode by default using "),zfe=n(e7e,"CODE",{});var Tit=s(zfe);INo=r(Tit,"model.eval()"),Tit.forEach(t),qNo=r(e7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(e7e,"CODE",{});var Mit=s(Qfe);NNo=r(Mit,"model.train()"),Mit.forEach(t),e7e.forEach(t),jNo=i(la),T(qv.$$.fragment,la),la.forEach(t),Hs.forEach(t),iIe=i(m),Hi=n(m,"H2",{class:!0});var fNe=s(Hi);Nv=n(fNe,"A",{id:!0,class:!0,href:!0});var Eit=s(Nv);Wfe=n(Eit,"SPAN",{});var Cit=s(Wfe);T(mL.$$.fragment,Cit),Cit.forEach(t),Eit.forEach(t),DNo=i(fNe),Hfe=n(fNe,"SPAN",{});var wit=s(Hfe);GNo=r(wit,"AutoModelForQuestionAnswering"),wit.forEach(t),fNe.forEach(t),dIe=i(m),qo=n(m,"DIV",{class:!0});var Us=s(qo);T(fL.$$.fragment,Us),ONo=i(Us),Ui=n(Us,"P",{});var vK=s(Ui);VNo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vO=n(vK,"A",{href:!0});var Ait=s(vO);XNo=r(Ait,"from_pretrained()"),Ait.forEach(t),zNo=r(vK," class method or the "),TO=n(vK,"A",{href:!0});var yit=s(TO);QNo=r(yit,"from_config()"),yit.forEach(t),WNo=r(vK,` class
method.`),vK.forEach(t),HNo=i(Us),gL=n(Us,"P",{});var gNe=s(gL);UNo=r(gNe,"This class cannot be instantiated directly using "),Ufe=n(gNe,"CODE",{});var Lit=s(Ufe);JNo=r(Lit,"__init__()"),Lit.forEach(t),YNo=r(gNe," (throws an error)."),gNe.forEach(t),KNo=i(Us),ct=n(Us,"DIV",{class:!0});var u0=s(ct);T(hL.$$.fragment,u0),ZNo=i(u0),Jfe=n(u0,"P",{});var xit=s(Jfe);ejo=r(xit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xit.forEach(t),ojo=i(u0),Ji=n(u0,"P",{});var TK=s(Ji);rjo=r(TK,`Note:
Loading a model from its configuration file does `),Yfe=n(TK,"STRONG",{});var $it=s(Yfe);tjo=r($it,"not"),$it.forEach(t),ajo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(TK,"A",{href:!0});var kit=s(MO);njo=r(kit,"from_pretrained()"),kit.forEach(t),sjo=r(TK," to load the model weights."),TK.forEach(t),ljo=i(u0),T(jv.$$.fragment,u0),u0.forEach(t),ijo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(uL.$$.fragment,ia),djo=i(ia),Kfe=n(ia,"P",{});var Sit=s(Kfe);cjo=r(Sit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sit.forEach(t),mjo=i(ia),Pa=n(ia,"P",{});var p0=s(Pa);fjo=r(p0,"The model class to instantiate is selected based on the "),Zfe=n(p0,"CODE",{});var Rit=s(Zfe);gjo=r(Rit,"model_type"),Rit.forEach(t),hjo=r(p0,` property of the config object (either
passed as an argument or loaded from `),ege=n(p0,"CODE",{});var Bit=s(ege);ujo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),pjo=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(p0,"CODE",{});var Pit=s(oge);_jo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),bjo=r(p0,":"),p0.forEach(t),Fjo=i(ia),O=n(ia,"UL",{});var X=s(O);Dv=n(X,"LI",{});var o7e=s(Dv);rge=n(o7e,"STRONG",{});var Iit=s(rge);vjo=r(Iit,"albert"),Iit.forEach(t),Tjo=r(o7e," \u2014 "),EO=n(o7e,"A",{href:!0});var qit=s(EO);Mjo=r(qit,"AlbertForQuestionAnswering"),qit.forEach(t),Ejo=r(o7e," (ALBERT model)"),o7e.forEach(t),Cjo=i(X),Gv=n(X,"LI",{});var r7e=s(Gv);tge=n(r7e,"STRONG",{});var Nit=s(tge);wjo=r(Nit,"bart"),Nit.forEach(t),Ajo=r(r7e," \u2014 "),CO=n(r7e,"A",{href:!0});var jit=s(CO);yjo=r(jit,"BartForQuestionAnswering"),jit.forEach(t),Ljo=r(r7e," (BART model)"),r7e.forEach(t),xjo=i(X),Ov=n(X,"LI",{});var t7e=s(Ov);age=n(t7e,"STRONG",{});var Dit=s(age);$jo=r(Dit,"bert"),Dit.forEach(t),kjo=r(t7e," \u2014 "),wO=n(t7e,"A",{href:!0});var Git=s(wO);Sjo=r(Git,"BertForQuestionAnswering"),Git.forEach(t),Rjo=r(t7e," (BERT model)"),t7e.forEach(t),Bjo=i(X),Vv=n(X,"LI",{});var a7e=s(Vv);nge=n(a7e,"STRONG",{});var Oit=s(nge);Pjo=r(Oit,"big_bird"),Oit.forEach(t),Ijo=r(a7e," \u2014 "),AO=n(a7e,"A",{href:!0});var Vit=s(AO);qjo=r(Vit,"BigBirdForQuestionAnswering"),Vit.forEach(t),Njo=r(a7e," (BigBird model)"),a7e.forEach(t),jjo=i(X),Xv=n(X,"LI",{});var n7e=s(Xv);sge=n(n7e,"STRONG",{});var Xit=s(sge);Djo=r(Xit,"bigbird_pegasus"),Xit.forEach(t),Gjo=r(n7e," \u2014 "),yO=n(n7e,"A",{href:!0});var zit=s(yO);Ojo=r(zit,"BigBirdPegasusForQuestionAnswering"),zit.forEach(t),Vjo=r(n7e," (BigBirdPegasus model)"),n7e.forEach(t),Xjo=i(X),zv=n(X,"LI",{});var s7e=s(zv);lge=n(s7e,"STRONG",{});var Qit=s(lge);zjo=r(Qit,"camembert"),Qit.forEach(t),Qjo=r(s7e," \u2014 "),LO=n(s7e,"A",{href:!0});var Wit=s(LO);Wjo=r(Wit,"CamembertForQuestionAnswering"),Wit.forEach(t),Hjo=r(s7e," (CamemBERT model)"),s7e.forEach(t),Ujo=i(X),Qv=n(X,"LI",{});var l7e=s(Qv);ige=n(l7e,"STRONG",{});var Hit=s(ige);Jjo=r(Hit,"canine"),Hit.forEach(t),Yjo=r(l7e," \u2014 "),xO=n(l7e,"A",{href:!0});var Uit=s(xO);Kjo=r(Uit,"CanineForQuestionAnswering"),Uit.forEach(t),Zjo=r(l7e," (Canine model)"),l7e.forEach(t),eDo=i(X),Wv=n(X,"LI",{});var i7e=s(Wv);dge=n(i7e,"STRONG",{});var Jit=s(dge);oDo=r(Jit,"convbert"),Jit.forEach(t),rDo=r(i7e," \u2014 "),$O=n(i7e,"A",{href:!0});var Yit=s($O);tDo=r(Yit,"ConvBertForQuestionAnswering"),Yit.forEach(t),aDo=r(i7e," (ConvBERT model)"),i7e.forEach(t),nDo=i(X),Hv=n(X,"LI",{});var d7e=s(Hv);cge=n(d7e,"STRONG",{});var Kit=s(cge);sDo=r(Kit,"data2vec-text"),Kit.forEach(t),lDo=r(d7e," \u2014 "),kO=n(d7e,"A",{href:!0});var Zit=s(kO);iDo=r(Zit,"Data2VecTextForQuestionAnswering"),Zit.forEach(t),dDo=r(d7e," (Data2VecText model)"),d7e.forEach(t),cDo=i(X),Uv=n(X,"LI",{});var c7e=s(Uv);mge=n(c7e,"STRONG",{});var edt=s(mge);mDo=r(edt,"deberta"),edt.forEach(t),fDo=r(c7e," \u2014 "),SO=n(c7e,"A",{href:!0});var odt=s(SO);gDo=r(odt,"DebertaForQuestionAnswering"),odt.forEach(t),hDo=r(c7e," (DeBERTa model)"),c7e.forEach(t),uDo=i(X),Jv=n(X,"LI",{});var m7e=s(Jv);fge=n(m7e,"STRONG",{});var rdt=s(fge);pDo=r(rdt,"deberta-v2"),rdt.forEach(t),_Do=r(m7e," \u2014 "),RO=n(m7e,"A",{href:!0});var tdt=s(RO);bDo=r(tdt,"DebertaV2ForQuestionAnswering"),tdt.forEach(t),FDo=r(m7e," (DeBERTa-v2 model)"),m7e.forEach(t),vDo=i(X),Yv=n(X,"LI",{});var f7e=s(Yv);gge=n(f7e,"STRONG",{});var adt=s(gge);TDo=r(adt,"distilbert"),adt.forEach(t),MDo=r(f7e," \u2014 "),BO=n(f7e,"A",{href:!0});var ndt=s(BO);EDo=r(ndt,"DistilBertForQuestionAnswering"),ndt.forEach(t),CDo=r(f7e," (DistilBERT model)"),f7e.forEach(t),wDo=i(X),Kv=n(X,"LI",{});var g7e=s(Kv);hge=n(g7e,"STRONG",{});var sdt=s(hge);ADo=r(sdt,"electra"),sdt.forEach(t),yDo=r(g7e," \u2014 "),PO=n(g7e,"A",{href:!0});var ldt=s(PO);LDo=r(ldt,"ElectraForQuestionAnswering"),ldt.forEach(t),xDo=r(g7e," (ELECTRA model)"),g7e.forEach(t),$Do=i(X),Zv=n(X,"LI",{});var h7e=s(Zv);uge=n(h7e,"STRONG",{});var idt=s(uge);kDo=r(idt,"flaubert"),idt.forEach(t),SDo=r(h7e," \u2014 "),IO=n(h7e,"A",{href:!0});var ddt=s(IO);RDo=r(ddt,"FlaubertForQuestionAnsweringSimple"),ddt.forEach(t),BDo=r(h7e," (FlauBERT model)"),h7e.forEach(t),PDo=i(X),e1=n(X,"LI",{});var u7e=s(e1);pge=n(u7e,"STRONG",{});var cdt=s(pge);IDo=r(cdt,"fnet"),cdt.forEach(t),qDo=r(u7e," \u2014 "),qO=n(u7e,"A",{href:!0});var mdt=s(qO);NDo=r(mdt,"FNetForQuestionAnswering"),mdt.forEach(t),jDo=r(u7e," (FNet model)"),u7e.forEach(t),DDo=i(X),o1=n(X,"LI",{});var p7e=s(o1);_ge=n(p7e,"STRONG",{});var fdt=s(_ge);GDo=r(fdt,"funnel"),fdt.forEach(t),ODo=r(p7e," \u2014 "),NO=n(p7e,"A",{href:!0});var gdt=s(NO);VDo=r(gdt,"FunnelForQuestionAnswering"),gdt.forEach(t),XDo=r(p7e," (Funnel Transformer model)"),p7e.forEach(t),zDo=i(X),r1=n(X,"LI",{});var _7e=s(r1);bge=n(_7e,"STRONG",{});var hdt=s(bge);QDo=r(hdt,"gptj"),hdt.forEach(t),WDo=r(_7e," \u2014 "),jO=n(_7e,"A",{href:!0});var udt=s(jO);HDo=r(udt,"GPTJForQuestionAnswering"),udt.forEach(t),UDo=r(_7e," (GPT-J model)"),_7e.forEach(t),JDo=i(X),t1=n(X,"LI",{});var b7e=s(t1);Fge=n(b7e,"STRONG",{});var pdt=s(Fge);YDo=r(pdt,"ibert"),pdt.forEach(t),KDo=r(b7e," \u2014 "),DO=n(b7e,"A",{href:!0});var _dt=s(DO);ZDo=r(_dt,"IBertForQuestionAnswering"),_dt.forEach(t),eGo=r(b7e," (I-BERT model)"),b7e.forEach(t),oGo=i(X),a1=n(X,"LI",{});var F7e=s(a1);vge=n(F7e,"STRONG",{});var bdt=s(vge);rGo=r(bdt,"layoutlmv2"),bdt.forEach(t),tGo=r(F7e," \u2014 "),GO=n(F7e,"A",{href:!0});var Fdt=s(GO);aGo=r(Fdt,"LayoutLMv2ForQuestionAnswering"),Fdt.forEach(t),nGo=r(F7e," (LayoutLMv2 model)"),F7e.forEach(t),sGo=i(X),n1=n(X,"LI",{});var v7e=s(n1);Tge=n(v7e,"STRONG",{});var vdt=s(Tge);lGo=r(vdt,"led"),vdt.forEach(t),iGo=r(v7e," \u2014 "),OO=n(v7e,"A",{href:!0});var Tdt=s(OO);dGo=r(Tdt,"LEDForQuestionAnswering"),Tdt.forEach(t),cGo=r(v7e," (LED model)"),v7e.forEach(t),mGo=i(X),s1=n(X,"LI",{});var T7e=s(s1);Mge=n(T7e,"STRONG",{});var Mdt=s(Mge);fGo=r(Mdt,"longformer"),Mdt.forEach(t),gGo=r(T7e," \u2014 "),VO=n(T7e,"A",{href:!0});var Edt=s(VO);hGo=r(Edt,"LongformerForQuestionAnswering"),Edt.forEach(t),uGo=r(T7e," (Longformer model)"),T7e.forEach(t),pGo=i(X),l1=n(X,"LI",{});var M7e=s(l1);Ege=n(M7e,"STRONG",{});var Cdt=s(Ege);_Go=r(Cdt,"lxmert"),Cdt.forEach(t),bGo=r(M7e," \u2014 "),XO=n(M7e,"A",{href:!0});var wdt=s(XO);FGo=r(wdt,"LxmertForQuestionAnswering"),wdt.forEach(t),vGo=r(M7e," (LXMERT model)"),M7e.forEach(t),TGo=i(X),i1=n(X,"LI",{});var E7e=s(i1);Cge=n(E7e,"STRONG",{});var Adt=s(Cge);MGo=r(Adt,"mbart"),Adt.forEach(t),EGo=r(E7e," \u2014 "),zO=n(E7e,"A",{href:!0});var ydt=s(zO);CGo=r(ydt,"MBartForQuestionAnswering"),ydt.forEach(t),wGo=r(E7e," (mBART model)"),E7e.forEach(t),AGo=i(X),d1=n(X,"LI",{});var C7e=s(d1);wge=n(C7e,"STRONG",{});var Ldt=s(wge);yGo=r(Ldt,"megatron-bert"),Ldt.forEach(t),LGo=r(C7e," \u2014 "),QO=n(C7e,"A",{href:!0});var xdt=s(QO);xGo=r(xdt,"MegatronBertForQuestionAnswering"),xdt.forEach(t),$Go=r(C7e," (MegatronBert model)"),C7e.forEach(t),kGo=i(X),c1=n(X,"LI",{});var w7e=s(c1);Age=n(w7e,"STRONG",{});var $dt=s(Age);SGo=r($dt,"mobilebert"),$dt.forEach(t),RGo=r(w7e," \u2014 "),WO=n(w7e,"A",{href:!0});var kdt=s(WO);BGo=r(kdt,"MobileBertForQuestionAnswering"),kdt.forEach(t),PGo=r(w7e," (MobileBERT model)"),w7e.forEach(t),IGo=i(X),m1=n(X,"LI",{});var A7e=s(m1);yge=n(A7e,"STRONG",{});var Sdt=s(yge);qGo=r(Sdt,"mpnet"),Sdt.forEach(t),NGo=r(A7e," \u2014 "),HO=n(A7e,"A",{href:!0});var Rdt=s(HO);jGo=r(Rdt,"MPNetForQuestionAnswering"),Rdt.forEach(t),DGo=r(A7e," (MPNet model)"),A7e.forEach(t),GGo=i(X),f1=n(X,"LI",{});var y7e=s(f1);Lge=n(y7e,"STRONG",{});var Bdt=s(Lge);OGo=r(Bdt,"nystromformer"),Bdt.forEach(t),VGo=r(y7e," \u2014 "),UO=n(y7e,"A",{href:!0});var Pdt=s(UO);XGo=r(Pdt,"NystromformerForQuestionAnswering"),Pdt.forEach(t),zGo=r(y7e," (Nystromformer model)"),y7e.forEach(t),QGo=i(X),g1=n(X,"LI",{});var L7e=s(g1);xge=n(L7e,"STRONG",{});var Idt=s(xge);WGo=r(Idt,"qdqbert"),Idt.forEach(t),HGo=r(L7e," \u2014 "),JO=n(L7e,"A",{href:!0});var qdt=s(JO);UGo=r(qdt,"QDQBertForQuestionAnswering"),qdt.forEach(t),JGo=r(L7e," (QDQBert model)"),L7e.forEach(t),YGo=i(X),h1=n(X,"LI",{});var x7e=s(h1);$ge=n(x7e,"STRONG",{});var Ndt=s($ge);KGo=r(Ndt,"reformer"),Ndt.forEach(t),ZGo=r(x7e," \u2014 "),YO=n(x7e,"A",{href:!0});var jdt=s(YO);eOo=r(jdt,"ReformerForQuestionAnswering"),jdt.forEach(t),oOo=r(x7e," (Reformer model)"),x7e.forEach(t),rOo=i(X),u1=n(X,"LI",{});var $7e=s(u1);kge=n($7e,"STRONG",{});var Ddt=s(kge);tOo=r(Ddt,"rembert"),Ddt.forEach(t),aOo=r($7e," \u2014 "),KO=n($7e,"A",{href:!0});var Gdt=s(KO);nOo=r(Gdt,"RemBertForQuestionAnswering"),Gdt.forEach(t),sOo=r($7e," (RemBERT model)"),$7e.forEach(t),lOo=i(X),p1=n(X,"LI",{});var k7e=s(p1);Sge=n(k7e,"STRONG",{});var Odt=s(Sge);iOo=r(Odt,"roberta"),Odt.forEach(t),dOo=r(k7e," \u2014 "),ZO=n(k7e,"A",{href:!0});var Vdt=s(ZO);cOo=r(Vdt,"RobertaForQuestionAnswering"),Vdt.forEach(t),mOo=r(k7e," (RoBERTa model)"),k7e.forEach(t),fOo=i(X),_1=n(X,"LI",{});var S7e=s(_1);Rge=n(S7e,"STRONG",{});var Xdt=s(Rge);gOo=r(Xdt,"roformer"),Xdt.forEach(t),hOo=r(S7e," \u2014 "),eV=n(S7e,"A",{href:!0});var zdt=s(eV);uOo=r(zdt,"RoFormerForQuestionAnswering"),zdt.forEach(t),pOo=r(S7e," (RoFormer model)"),S7e.forEach(t),_Oo=i(X),b1=n(X,"LI",{});var R7e=s(b1);Bge=n(R7e,"STRONG",{});var Qdt=s(Bge);bOo=r(Qdt,"splinter"),Qdt.forEach(t),FOo=r(R7e," \u2014 "),oV=n(R7e,"A",{href:!0});var Wdt=s(oV);vOo=r(Wdt,"SplinterForQuestionAnswering"),Wdt.forEach(t),TOo=r(R7e," (Splinter model)"),R7e.forEach(t),MOo=i(X),F1=n(X,"LI",{});var B7e=s(F1);Pge=n(B7e,"STRONG",{});var Hdt=s(Pge);EOo=r(Hdt,"squeezebert"),Hdt.forEach(t),COo=r(B7e," \u2014 "),rV=n(B7e,"A",{href:!0});var Udt=s(rV);wOo=r(Udt,"SqueezeBertForQuestionAnswering"),Udt.forEach(t),AOo=r(B7e," (SqueezeBERT model)"),B7e.forEach(t),yOo=i(X),v1=n(X,"LI",{});var P7e=s(v1);Ige=n(P7e,"STRONG",{});var Jdt=s(Ige);LOo=r(Jdt,"xlm"),Jdt.forEach(t),xOo=r(P7e," \u2014 "),tV=n(P7e,"A",{href:!0});var Ydt=s(tV);$Oo=r(Ydt,"XLMForQuestionAnsweringSimple"),Ydt.forEach(t),kOo=r(P7e," (XLM model)"),P7e.forEach(t),SOo=i(X),T1=n(X,"LI",{});var I7e=s(T1);qge=n(I7e,"STRONG",{});var Kdt=s(qge);ROo=r(Kdt,"xlm-roberta"),Kdt.forEach(t),BOo=r(I7e," \u2014 "),aV=n(I7e,"A",{href:!0});var Zdt=s(aV);POo=r(Zdt,"XLMRobertaForQuestionAnswering"),Zdt.forEach(t),IOo=r(I7e," (XLM-RoBERTa model)"),I7e.forEach(t),qOo=i(X),M1=n(X,"LI",{});var q7e=s(M1);Nge=n(q7e,"STRONG",{});var ect=s(Nge);NOo=r(ect,"xlm-roberta-xl"),ect.forEach(t),jOo=r(q7e," \u2014 "),nV=n(q7e,"A",{href:!0});var oct=s(nV);DOo=r(oct,"XLMRobertaXLForQuestionAnswering"),oct.forEach(t),GOo=r(q7e," (XLM-RoBERTa-XL model)"),q7e.forEach(t),OOo=i(X),E1=n(X,"LI",{});var N7e=s(E1);jge=n(N7e,"STRONG",{});var rct=s(jge);VOo=r(rct,"xlnet"),rct.forEach(t),XOo=r(N7e," \u2014 "),sV=n(N7e,"A",{href:!0});var tct=s(sV);zOo=r(tct,"XLNetForQuestionAnsweringSimple"),tct.forEach(t),QOo=r(N7e," (XLNet model)"),N7e.forEach(t),WOo=i(X),C1=n(X,"LI",{});var j7e=s(C1);Dge=n(j7e,"STRONG",{});var act=s(Dge);HOo=r(act,"yoso"),act.forEach(t),UOo=r(j7e," \u2014 "),lV=n(j7e,"A",{href:!0});var nct=s(lV);JOo=r(nct,"YosoForQuestionAnswering"),nct.forEach(t),YOo=r(j7e," (YOSO model)"),j7e.forEach(t),X.forEach(t),KOo=i(ia),w1=n(ia,"P",{});var D7e=s(w1);ZOo=r(D7e,"The model is set in evaluation mode by default using "),Gge=n(D7e,"CODE",{});var sct=s(Gge);eVo=r(sct,"model.eval()"),sct.forEach(t),oVo=r(D7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(D7e,"CODE",{});var lct=s(Oge);rVo=r(lct,"model.train()"),lct.forEach(t),D7e.forEach(t),tVo=i(ia),T(A1.$$.fragment,ia),ia.forEach(t),Us.forEach(t),cIe=i(m),Yi=n(m,"H2",{class:!0});var hNe=s(Yi);y1=n(hNe,"A",{id:!0,class:!0,href:!0});var ict=s(y1);Vge=n(ict,"SPAN",{});var dct=s(Vge);T(pL.$$.fragment,dct),dct.forEach(t),ict.forEach(t),aVo=i(hNe),Xge=n(hNe,"SPAN",{});var cct=s(Xge);nVo=r(cct,"AutoModelForTableQuestionAnswering"),cct.forEach(t),hNe.forEach(t),mIe=i(m),No=n(m,"DIV",{class:!0});var Js=s(No);T(_L.$$.fragment,Js),sVo=i(Js),Ki=n(Js,"P",{});var MK=s(Ki);lVo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iV=n(MK,"A",{href:!0});var mct=s(iV);iVo=r(mct,"from_pretrained()"),mct.forEach(t),dVo=r(MK," class method or the "),dV=n(MK,"A",{href:!0});var fct=s(dV);cVo=r(fct,"from_config()"),fct.forEach(t),mVo=r(MK,` class
method.`),MK.forEach(t),fVo=i(Js),bL=n(Js,"P",{});var uNe=s(bL);gVo=r(uNe,"This class cannot be instantiated directly using "),zge=n(uNe,"CODE",{});var gct=s(zge);hVo=r(gct,"__init__()"),gct.forEach(t),uVo=r(uNe," (throws an error)."),uNe.forEach(t),pVo=i(Js),mt=n(Js,"DIV",{class:!0});var _0=s(mt);T(FL.$$.fragment,_0),_Vo=i(_0),Qge=n(_0,"P",{});var hct=s(Qge);bVo=r(hct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hct.forEach(t),FVo=i(_0),Zi=n(_0,"P",{});var EK=s(Zi);vVo=r(EK,`Note:
Loading a model from its configuration file does `),Wge=n(EK,"STRONG",{});var uct=s(Wge);TVo=r(uct,"not"),uct.forEach(t),MVo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(EK,"A",{href:!0});var pct=s(cV);EVo=r(pct,"from_pretrained()"),pct.forEach(t),CVo=r(EK," to load the model weights."),EK.forEach(t),wVo=i(_0),T(L1.$$.fragment,_0),_0.forEach(t),AVo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(vL.$$.fragment,da),yVo=i(da),Hge=n(da,"P",{});var _ct=s(Hge);LVo=r(_ct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_ct.forEach(t),xVo=i(da),Ia=n(da,"P",{});var b0=s(Ia);$Vo=r(b0,"The model class to instantiate is selected based on the "),Uge=n(b0,"CODE",{});var bct=s(Uge);kVo=r(bct,"model_type"),bct.forEach(t),SVo=r(b0,` property of the config object (either
passed as an argument or loaded from `),Jge=n(b0,"CODE",{});var Fct=s(Jge);RVo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),BVo=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(b0,"CODE",{});var vct=s(Yge);PVo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),IVo=r(b0,":"),b0.forEach(t),qVo=i(da),Kge=n(da,"UL",{});var Tct=s(Kge);x1=n(Tct,"LI",{});var G7e=s(x1);Zge=n(G7e,"STRONG",{});var Mct=s(Zge);NVo=r(Mct,"tapas"),Mct.forEach(t),jVo=r(G7e," \u2014 "),mV=n(G7e,"A",{href:!0});var Ect=s(mV);DVo=r(Ect,"TapasForQuestionAnswering"),Ect.forEach(t),GVo=r(G7e," (TAPAS model)"),G7e.forEach(t),Tct.forEach(t),OVo=i(da),$1=n(da,"P",{});var O7e=s($1);VVo=r(O7e,"The model is set in evaluation mode by default using "),ehe=n(O7e,"CODE",{});var Cct=s(ehe);XVo=r(Cct,"model.eval()"),Cct.forEach(t),zVo=r(O7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(O7e,"CODE",{});var wct=s(ohe);QVo=r(wct,"model.train()"),wct.forEach(t),O7e.forEach(t),WVo=i(da),T(k1.$$.fragment,da),da.forEach(t),Js.forEach(t),fIe=i(m),ed=n(m,"H2",{class:!0});var pNe=s(ed);S1=n(pNe,"A",{id:!0,class:!0,href:!0});var Act=s(S1);rhe=n(Act,"SPAN",{});var yct=s(rhe);T(TL.$$.fragment,yct),yct.forEach(t),Act.forEach(t),HVo=i(pNe),the=n(pNe,"SPAN",{});var Lct=s(the);UVo=r(Lct,"AutoModelForImageClassification"),Lct.forEach(t),pNe.forEach(t),gIe=i(m),jo=n(m,"DIV",{class:!0});var Ys=s(jo);T(ML.$$.fragment,Ys),JVo=i(Ys),od=n(Ys,"P",{});var CK=s(od);YVo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fV=n(CK,"A",{href:!0});var xct=s(fV);KVo=r(xct,"from_pretrained()"),xct.forEach(t),ZVo=r(CK," class method or the "),gV=n(CK,"A",{href:!0});var $ct=s(gV);eXo=r($ct,"from_config()"),$ct.forEach(t),oXo=r(CK,` class
method.`),CK.forEach(t),rXo=i(Ys),EL=n(Ys,"P",{});var _Ne=s(EL);tXo=r(_Ne,"This class cannot be instantiated directly using "),ahe=n(_Ne,"CODE",{});var kct=s(ahe);aXo=r(kct,"__init__()"),kct.forEach(t),nXo=r(_Ne," (throws an error)."),_Ne.forEach(t),sXo=i(Ys),ft=n(Ys,"DIV",{class:!0});var F0=s(ft);T(CL.$$.fragment,F0),lXo=i(F0),nhe=n(F0,"P",{});var Sct=s(nhe);iXo=r(Sct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sct.forEach(t),dXo=i(F0),rd=n(F0,"P",{});var wK=s(rd);cXo=r(wK,`Note:
Loading a model from its configuration file does `),she=n(wK,"STRONG",{});var Rct=s(she);mXo=r(Rct,"not"),Rct.forEach(t),fXo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(wK,"A",{href:!0});var Bct=s(hV);gXo=r(Bct,"from_pretrained()"),Bct.forEach(t),hXo=r(wK," to load the model weights."),wK.forEach(t),uXo=i(F0),T(R1.$$.fragment,F0),F0.forEach(t),pXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(wL.$$.fragment,ca),_Xo=i(ca),lhe=n(ca,"P",{});var Pct=s(lhe);bXo=r(Pct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pct.forEach(t),FXo=i(ca),qa=n(ca,"P",{});var v0=s(qa);vXo=r(v0,"The model class to instantiate is selected based on the "),ihe=n(v0,"CODE",{});var Ict=s(ihe);TXo=r(Ict,"model_type"),Ict.forEach(t),MXo=r(v0,` property of the config object (either
passed as an argument or loaded from `),dhe=n(v0,"CODE",{});var qct=s(dhe);EXo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),CXo=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(v0,"CODE",{});var Nct=s(che);wXo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),AXo=r(v0,":"),v0.forEach(t),yXo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);B1=n(Ee,"LI",{});var V7e=s(B1);mhe=n(V7e,"STRONG",{});var jct=s(mhe);LXo=r(jct,"beit"),jct.forEach(t),xXo=r(V7e," \u2014 "),uV=n(V7e,"A",{href:!0});var Dct=s(uV);$Xo=r(Dct,"BeitForImageClassification"),Dct.forEach(t),kXo=r(V7e," (BEiT model)"),V7e.forEach(t),SXo=i(Ee),P1=n(Ee,"LI",{});var X7e=s(P1);fhe=n(X7e,"STRONG",{});var Gct=s(fhe);RXo=r(Gct,"convnext"),Gct.forEach(t),BXo=r(X7e," \u2014 "),pV=n(X7e,"A",{href:!0});var Oct=s(pV);PXo=r(Oct,"ConvNextForImageClassification"),Oct.forEach(t),IXo=r(X7e," (ConvNext model)"),X7e.forEach(t),qXo=i(Ee),I1=n(Ee,"LI",{});var z7e=s(I1);ghe=n(z7e,"STRONG",{});var Vct=s(ghe);NXo=r(Vct,"data2vec-vision"),Vct.forEach(t),jXo=r(z7e," \u2014 "),_V=n(z7e,"A",{href:!0});var Xct=s(_V);DXo=r(Xct,"Data2VecVisionForImageClassification"),Xct.forEach(t),GXo=r(z7e," (Data2VecVision model)"),z7e.forEach(t),OXo=i(Ee),Rs=n(Ee,"LI",{});var d$=s(Rs);hhe=n(d$,"STRONG",{});var zct=s(hhe);VXo=r(zct,"deit"),zct.forEach(t),XXo=r(d$," \u2014 "),bV=n(d$,"A",{href:!0});var Qct=s(bV);zXo=r(Qct,"DeiTForImageClassification"),Qct.forEach(t),QXo=r(d$," or "),FV=n(d$,"A",{href:!0});var Wct=s(FV);WXo=r(Wct,"DeiTForImageClassificationWithTeacher"),Wct.forEach(t),HXo=r(d$," (DeiT model)"),d$.forEach(t),UXo=i(Ee),q1=n(Ee,"LI",{});var Q7e=s(q1);uhe=n(Q7e,"STRONG",{});var Hct=s(uhe);JXo=r(Hct,"imagegpt"),Hct.forEach(t),YXo=r(Q7e," \u2014 "),vV=n(Q7e,"A",{href:!0});var Uct=s(vV);KXo=r(Uct,"ImageGPTForImageClassification"),Uct.forEach(t),ZXo=r(Q7e," (ImageGPT model)"),Q7e.forEach(t),ezo=i(Ee),gt=n(Ee,"LI",{});var cm=s(gt);phe=n(cm,"STRONG",{});var Jct=s(phe);ozo=r(Jct,"perceiver"),Jct.forEach(t),rzo=r(cm," \u2014 "),TV=n(cm,"A",{href:!0});var Yct=s(TV);tzo=r(Yct,"PerceiverForImageClassificationLearned"),Yct.forEach(t),azo=r(cm," or "),MV=n(cm,"A",{href:!0});var Kct=s(MV);nzo=r(Kct,"PerceiverForImageClassificationFourier"),Kct.forEach(t),szo=r(cm," or "),EV=n(cm,"A",{href:!0});var Zct=s(EV);lzo=r(Zct,"PerceiverForImageClassificationConvProcessing"),Zct.forEach(t),izo=r(cm," (Perceiver model)"),cm.forEach(t),dzo=i(Ee),N1=n(Ee,"LI",{});var W7e=s(N1);_he=n(W7e,"STRONG",{});var emt=s(_he);czo=r(emt,"poolformer"),emt.forEach(t),mzo=r(W7e," \u2014 "),CV=n(W7e,"A",{href:!0});var omt=s(CV);fzo=r(omt,"PoolFormerForImageClassification"),omt.forEach(t),gzo=r(W7e," (PoolFormer model)"),W7e.forEach(t),hzo=i(Ee),j1=n(Ee,"LI",{});var H7e=s(j1);bhe=n(H7e,"STRONG",{});var rmt=s(bhe);uzo=r(rmt,"regnet"),rmt.forEach(t),pzo=r(H7e," \u2014 "),wV=n(H7e,"A",{href:!0});var tmt=s(wV);_zo=r(tmt,"RegNetForImageClassification"),tmt.forEach(t),bzo=r(H7e," (RegNet model)"),H7e.forEach(t),Fzo=i(Ee),D1=n(Ee,"LI",{});var U7e=s(D1);Fhe=n(U7e,"STRONG",{});var amt=s(Fhe);vzo=r(amt,"resnet"),amt.forEach(t),Tzo=r(U7e," \u2014 "),AV=n(U7e,"A",{href:!0});var nmt=s(AV);Mzo=r(nmt,"ResNetForImageClassification"),nmt.forEach(t),Ezo=r(U7e," (ResNet model)"),U7e.forEach(t),Czo=i(Ee),G1=n(Ee,"LI",{});var J7e=s(G1);vhe=n(J7e,"STRONG",{});var smt=s(vhe);wzo=r(smt,"segformer"),smt.forEach(t),Azo=r(J7e," \u2014 "),yV=n(J7e,"A",{href:!0});var lmt=s(yV);yzo=r(lmt,"SegformerForImageClassification"),lmt.forEach(t),Lzo=r(J7e," (SegFormer model)"),J7e.forEach(t),xzo=i(Ee),O1=n(Ee,"LI",{});var Y7e=s(O1);The=n(Y7e,"STRONG",{});var imt=s(The);$zo=r(imt,"swin"),imt.forEach(t),kzo=r(Y7e," \u2014 "),LV=n(Y7e,"A",{href:!0});var dmt=s(LV);Szo=r(dmt,"SwinForImageClassification"),dmt.forEach(t),Rzo=r(Y7e," (Swin model)"),Y7e.forEach(t),Bzo=i(Ee),V1=n(Ee,"LI",{});var K7e=s(V1);Mhe=n(K7e,"STRONG",{});var cmt=s(Mhe);Pzo=r(cmt,"van"),cmt.forEach(t),Izo=r(K7e," \u2014 "),xV=n(K7e,"A",{href:!0});var mmt=s(xV);qzo=r(mmt,"VanForImageClassification"),mmt.forEach(t),Nzo=r(K7e," (VAN model)"),K7e.forEach(t),jzo=i(Ee),X1=n(Ee,"LI",{});var Z7e=s(X1);Ehe=n(Z7e,"STRONG",{});var fmt=s(Ehe);Dzo=r(fmt,"vit"),fmt.forEach(t),Gzo=r(Z7e," \u2014 "),$V=n(Z7e,"A",{href:!0});var gmt=s($V);Ozo=r(gmt,"ViTForImageClassification"),gmt.forEach(t),Vzo=r(Z7e," (ViT model)"),Z7e.forEach(t),Ee.forEach(t),Xzo=i(ca),z1=n(ca,"P",{});var e9e=s(z1);zzo=r(e9e,"The model is set in evaluation mode by default using "),Che=n(e9e,"CODE",{});var hmt=s(Che);Qzo=r(hmt,"model.eval()"),hmt.forEach(t),Wzo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=n(e9e,"CODE",{});var umt=s(whe);Hzo=r(umt,"model.train()"),umt.forEach(t),e9e.forEach(t),Uzo=i(ca),T(Q1.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),hIe=i(m),td=n(m,"H2",{class:!0});var bNe=s(td);W1=n(bNe,"A",{id:!0,class:!0,href:!0});var pmt=s(W1);Ahe=n(pmt,"SPAN",{});var _mt=s(Ahe);T(AL.$$.fragment,_mt),_mt.forEach(t),pmt.forEach(t),Jzo=i(bNe),yhe=n(bNe,"SPAN",{});var bmt=s(yhe);Yzo=r(bmt,"AutoModelForVision2Seq"),bmt.forEach(t),bNe.forEach(t),uIe=i(m),Do=n(m,"DIV",{class:!0});var Ks=s(Do);T(yL.$$.fragment,Ks),Kzo=i(Ks),ad=n(Ks,"P",{});var AK=s(ad);Zzo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kV=n(AK,"A",{href:!0});var Fmt=s(kV);eQo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),oQo=r(AK," class method or the "),SV=n(AK,"A",{href:!0});var vmt=s(SV);rQo=r(vmt,"from_config()"),vmt.forEach(t),tQo=r(AK,` class
method.`),AK.forEach(t),aQo=i(Ks),LL=n(Ks,"P",{});var FNe=s(LL);nQo=r(FNe,"This class cannot be instantiated directly using "),Lhe=n(FNe,"CODE",{});var Tmt=s(Lhe);sQo=r(Tmt,"__init__()"),Tmt.forEach(t),lQo=r(FNe," (throws an error)."),FNe.forEach(t),iQo=i(Ks),ht=n(Ks,"DIV",{class:!0});var T0=s(ht);T(xL.$$.fragment,T0),dQo=i(T0),xhe=n(T0,"P",{});var Mmt=s(xhe);cQo=r(Mmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mmt.forEach(t),mQo=i(T0),nd=n(T0,"P",{});var yK=s(nd);fQo=r(yK,`Note:
Loading a model from its configuration file does `),$he=n(yK,"STRONG",{});var Emt=s($he);gQo=r(Emt,"not"),Emt.forEach(t),hQo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(yK,"A",{href:!0});var Cmt=s(RV);uQo=r(Cmt,"from_pretrained()"),Cmt.forEach(t),pQo=r(yK," to load the model weights."),yK.forEach(t),_Qo=i(T0),T(H1.$$.fragment,T0),T0.forEach(t),bQo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T($L.$$.fragment,ma),FQo=i(ma),khe=n(ma,"P",{});var wmt=s(khe);vQo=r(wmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wmt.forEach(t),TQo=i(ma),Na=n(ma,"P",{});var M0=s(Na);MQo=r(M0,"The model class to instantiate is selected based on the "),She=n(M0,"CODE",{});var Amt=s(She);EQo=r(Amt,"model_type"),Amt.forEach(t),CQo=r(M0,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(M0,"CODE",{});var ymt=s(Rhe);wQo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),AQo=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(M0,"CODE",{});var Lmt=s(Bhe);yQo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),LQo=r(M0,":"),M0.forEach(t),xQo=i(ma),Phe=n(ma,"UL",{});var xmt=s(Phe);U1=n(xmt,"LI",{});var o9e=s(U1);Ihe=n(o9e,"STRONG",{});var $mt=s(Ihe);$Qo=r($mt,"vision-encoder-decoder"),$mt.forEach(t),kQo=r(o9e," \u2014 "),BV=n(o9e,"A",{href:!0});var kmt=s(BV);SQo=r(kmt,"VisionEncoderDecoderModel"),kmt.forEach(t),RQo=r(o9e," (Vision Encoder decoder model)"),o9e.forEach(t),xmt.forEach(t),BQo=i(ma),J1=n(ma,"P",{});var r9e=s(J1);PQo=r(r9e,"The model is set in evaluation mode by default using "),qhe=n(r9e,"CODE",{});var Smt=s(qhe);IQo=r(Smt,"model.eval()"),Smt.forEach(t),qQo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(r9e,"CODE",{});var Rmt=s(Nhe);NQo=r(Rmt,"model.train()"),Rmt.forEach(t),r9e.forEach(t),jQo=i(ma),T(Y1.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),pIe=i(m),sd=n(m,"H2",{class:!0});var vNe=s(sd);K1=n(vNe,"A",{id:!0,class:!0,href:!0});var Bmt=s(K1);jhe=n(Bmt,"SPAN",{});var Pmt=s(jhe);T(kL.$$.fragment,Pmt),Pmt.forEach(t),Bmt.forEach(t),DQo=i(vNe),Dhe=n(vNe,"SPAN",{});var Imt=s(Dhe);GQo=r(Imt,"AutoModelForAudioClassification"),Imt.forEach(t),vNe.forEach(t),_Ie=i(m),Go=n(m,"DIV",{class:!0});var Zs=s(Go);T(SL.$$.fragment,Zs),OQo=i(Zs),ld=n(Zs,"P",{});var LK=s(ld);VQo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PV=n(LK,"A",{href:!0});var qmt=s(PV);XQo=r(qmt,"from_pretrained()"),qmt.forEach(t),zQo=r(LK," class method or the "),IV=n(LK,"A",{href:!0});var Nmt=s(IV);QQo=r(Nmt,"from_config()"),Nmt.forEach(t),WQo=r(LK,` class
method.`),LK.forEach(t),HQo=i(Zs),RL=n(Zs,"P",{});var TNe=s(RL);UQo=r(TNe,"This class cannot be instantiated directly using "),Ghe=n(TNe,"CODE",{});var jmt=s(Ghe);JQo=r(jmt,"__init__()"),jmt.forEach(t),YQo=r(TNe," (throws an error)."),TNe.forEach(t),KQo=i(Zs),ut=n(Zs,"DIV",{class:!0});var E0=s(ut);T(BL.$$.fragment,E0),ZQo=i(E0),Ohe=n(E0,"P",{});var Dmt=s(Ohe);eWo=r(Dmt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Dmt.forEach(t),oWo=i(E0),id=n(E0,"P",{});var xK=s(id);rWo=r(xK,`Note:
Loading a model from its configuration file does `),Vhe=n(xK,"STRONG",{});var Gmt=s(Vhe);tWo=r(Gmt,"not"),Gmt.forEach(t),aWo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(xK,"A",{href:!0});var Omt=s(qV);nWo=r(Omt,"from_pretrained()"),Omt.forEach(t),sWo=r(xK," to load the model weights."),xK.forEach(t),lWo=i(E0),T(Z1.$$.fragment,E0),E0.forEach(t),iWo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(PL.$$.fragment,fa),dWo=i(fa),Xhe=n(fa,"P",{});var Vmt=s(Xhe);cWo=r(Vmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Vmt.forEach(t),mWo=i(fa),ja=n(fa,"P",{});var C0=s(ja);fWo=r(C0,"The model class to instantiate is selected based on the "),zhe=n(C0,"CODE",{});var Xmt=s(zhe);gWo=r(Xmt,"model_type"),Xmt.forEach(t),hWo=r(C0,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(C0,"CODE",{});var zmt=s(Qhe);uWo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),pWo=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(C0,"CODE",{});var Qmt=s(Whe);_Wo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),bWo=r(C0,":"),C0.forEach(t),FWo=i(fa),Ne=n(fa,"UL",{});var bo=s(Ne);eT=n(bo,"LI",{});var t9e=s(eT);Hhe=n(t9e,"STRONG",{});var Wmt=s(Hhe);vWo=r(Wmt,"data2vec-audio"),Wmt.forEach(t),TWo=r(t9e," \u2014 "),NV=n(t9e,"A",{href:!0});var Hmt=s(NV);MWo=r(Hmt,"Data2VecAudioForSequenceClassification"),Hmt.forEach(t),EWo=r(t9e," (Data2VecAudio model)"),t9e.forEach(t),CWo=i(bo),oT=n(bo,"LI",{});var a9e=s(oT);Uhe=n(a9e,"STRONG",{});var Umt=s(Uhe);wWo=r(Umt,"hubert"),Umt.forEach(t),AWo=r(a9e," \u2014 "),jV=n(a9e,"A",{href:!0});var Jmt=s(jV);yWo=r(Jmt,"HubertForSequenceClassification"),Jmt.forEach(t),LWo=r(a9e," (Hubert model)"),a9e.forEach(t),xWo=i(bo),rT=n(bo,"LI",{});var n9e=s(rT);Jhe=n(n9e,"STRONG",{});var Ymt=s(Jhe);$Wo=r(Ymt,"sew"),Ymt.forEach(t),kWo=r(n9e," \u2014 "),DV=n(n9e,"A",{href:!0});var Kmt=s(DV);SWo=r(Kmt,"SEWForSequenceClassification"),Kmt.forEach(t),RWo=r(n9e," (SEW model)"),n9e.forEach(t),BWo=i(bo),tT=n(bo,"LI",{});var s9e=s(tT);Yhe=n(s9e,"STRONG",{});var Zmt=s(Yhe);PWo=r(Zmt,"sew-d"),Zmt.forEach(t),IWo=r(s9e," \u2014 "),GV=n(s9e,"A",{href:!0});var eft=s(GV);qWo=r(eft,"SEWDForSequenceClassification"),eft.forEach(t),NWo=r(s9e," (SEW-D model)"),s9e.forEach(t),jWo=i(bo),aT=n(bo,"LI",{});var l9e=s(aT);Khe=n(l9e,"STRONG",{});var oft=s(Khe);DWo=r(oft,"unispeech"),oft.forEach(t),GWo=r(l9e," \u2014 "),OV=n(l9e,"A",{href:!0});var rft=s(OV);OWo=r(rft,"UniSpeechForSequenceClassification"),rft.forEach(t),VWo=r(l9e," (UniSpeech model)"),l9e.forEach(t),XWo=i(bo),nT=n(bo,"LI",{});var i9e=s(nT);Zhe=n(i9e,"STRONG",{});var tft=s(Zhe);zWo=r(tft,"unispeech-sat"),tft.forEach(t),QWo=r(i9e," \u2014 "),VV=n(i9e,"A",{href:!0});var aft=s(VV);WWo=r(aft,"UniSpeechSatForSequenceClassification"),aft.forEach(t),HWo=r(i9e," (UniSpeechSat model)"),i9e.forEach(t),UWo=i(bo),sT=n(bo,"LI",{});var d9e=s(sT);eue=n(d9e,"STRONG",{});var nft=s(eue);JWo=r(nft,"wav2vec2"),nft.forEach(t),YWo=r(d9e," \u2014 "),XV=n(d9e,"A",{href:!0});var sft=s(XV);KWo=r(sft,"Wav2Vec2ForSequenceClassification"),sft.forEach(t),ZWo=r(d9e," (Wav2Vec2 model)"),d9e.forEach(t),eHo=i(bo),lT=n(bo,"LI",{});var c9e=s(lT);oue=n(c9e,"STRONG",{});var lft=s(oue);oHo=r(lft,"wavlm"),lft.forEach(t),rHo=r(c9e," \u2014 "),zV=n(c9e,"A",{href:!0});var ift=s(zV);tHo=r(ift,"WavLMForSequenceClassification"),ift.forEach(t),aHo=r(c9e," (WavLM model)"),c9e.forEach(t),bo.forEach(t),nHo=i(fa),iT=n(fa,"P",{});var m9e=s(iT);sHo=r(m9e,"The model is set in evaluation mode by default using "),rue=n(m9e,"CODE",{});var dft=s(rue);lHo=r(dft,"model.eval()"),dft.forEach(t),iHo=r(m9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=n(m9e,"CODE",{});var cft=s(tue);dHo=r(cft,"model.train()"),cft.forEach(t),m9e.forEach(t),cHo=i(fa),T(dT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),bIe=i(m),dd=n(m,"H2",{class:!0});var MNe=s(dd);cT=n(MNe,"A",{id:!0,class:!0,href:!0});var mft=s(cT);aue=n(mft,"SPAN",{});var fft=s(aue);T(IL.$$.fragment,fft),fft.forEach(t),mft.forEach(t),mHo=i(MNe),nue=n(MNe,"SPAN",{});var gft=s(nue);fHo=r(gft,"AutoModelForAudioFrameClassification"),gft.forEach(t),MNe.forEach(t),FIe=i(m),Oo=n(m,"DIV",{class:!0});var el=s(Oo);T(qL.$$.fragment,el),gHo=i(el),cd=n(el,"P",{});var $K=s(cd);hHo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QV=n($K,"A",{href:!0});var hft=s(QV);uHo=r(hft,"from_pretrained()"),hft.forEach(t),pHo=r($K," class method or the "),WV=n($K,"A",{href:!0});var uft=s(WV);_Ho=r(uft,"from_config()"),uft.forEach(t),bHo=r($K,` class
method.`),$K.forEach(t),FHo=i(el),NL=n(el,"P",{});var ENe=s(NL);vHo=r(ENe,"This class cannot be instantiated directly using "),sue=n(ENe,"CODE",{});var pft=s(sue);THo=r(pft,"__init__()"),pft.forEach(t),MHo=r(ENe," (throws an error)."),ENe.forEach(t),EHo=i(el),pt=n(el,"DIV",{class:!0});var w0=s(pt);T(jL.$$.fragment,w0),CHo=i(w0),lue=n(w0,"P",{});var _ft=s(lue);wHo=r(_ft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_ft.forEach(t),AHo=i(w0),md=n(w0,"P",{});var kK=s(md);yHo=r(kK,`Note:
Loading a model from its configuration file does `),iue=n(kK,"STRONG",{});var bft=s(iue);LHo=r(bft,"not"),bft.forEach(t),xHo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(kK,"A",{href:!0});var Fft=s(HV);$Ho=r(Fft,"from_pretrained()"),Fft.forEach(t),kHo=r(kK," to load the model weights."),kK.forEach(t),SHo=i(w0),T(mT.$$.fragment,w0),w0.forEach(t),RHo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(DL.$$.fragment,ga),BHo=i(ga),due=n(ga,"P",{});var vft=s(due);PHo=r(vft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vft.forEach(t),IHo=i(ga),Da=n(ga,"P",{});var A0=s(Da);qHo=r(A0,"The model class to instantiate is selected based on the "),cue=n(A0,"CODE",{});var Tft=s(cue);NHo=r(Tft,"model_type"),Tft.forEach(t),jHo=r(A0,` property of the config object (either
passed as an argument or loaded from `),mue=n(A0,"CODE",{});var Mft=s(mue);DHo=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),GHo=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(A0,"CODE",{});var Eft=s(fue);OHo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),VHo=r(A0,":"),A0.forEach(t),XHo=i(ga),Ga=n(ga,"UL",{});var y0=s(Ga);fT=n(y0,"LI",{});var f9e=s(fT);gue=n(f9e,"STRONG",{});var Cft=s(gue);zHo=r(Cft,"data2vec-audio"),Cft.forEach(t),QHo=r(f9e," \u2014 "),UV=n(f9e,"A",{href:!0});var wft=s(UV);WHo=r(wft,"Data2VecAudioForAudioFrameClassification"),wft.forEach(t),HHo=r(f9e," (Data2VecAudio model)"),f9e.forEach(t),UHo=i(y0),gT=n(y0,"LI",{});var g9e=s(gT);hue=n(g9e,"STRONG",{});var Aft=s(hue);JHo=r(Aft,"unispeech-sat"),Aft.forEach(t),YHo=r(g9e," \u2014 "),JV=n(g9e,"A",{href:!0});var yft=s(JV);KHo=r(yft,"UniSpeechSatForAudioFrameClassification"),yft.forEach(t),ZHo=r(g9e," (UniSpeechSat model)"),g9e.forEach(t),eUo=i(y0),hT=n(y0,"LI",{});var h9e=s(hT);uue=n(h9e,"STRONG",{});var Lft=s(uue);oUo=r(Lft,"wav2vec2"),Lft.forEach(t),rUo=r(h9e," \u2014 "),YV=n(h9e,"A",{href:!0});var xft=s(YV);tUo=r(xft,"Wav2Vec2ForAudioFrameClassification"),xft.forEach(t),aUo=r(h9e," (Wav2Vec2 model)"),h9e.forEach(t),nUo=i(y0),uT=n(y0,"LI",{});var u9e=s(uT);pue=n(u9e,"STRONG",{});var $ft=s(pue);sUo=r($ft,"wavlm"),$ft.forEach(t),lUo=r(u9e," \u2014 "),KV=n(u9e,"A",{href:!0});var kft=s(KV);iUo=r(kft,"WavLMForAudioFrameClassification"),kft.forEach(t),dUo=r(u9e," (WavLM model)"),u9e.forEach(t),y0.forEach(t),cUo=i(ga),pT=n(ga,"P",{});var p9e=s(pT);mUo=r(p9e,"The model is set in evaluation mode by default using "),_ue=n(p9e,"CODE",{});var Sft=s(_ue);fUo=r(Sft,"model.eval()"),Sft.forEach(t),gUo=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=n(p9e,"CODE",{});var Rft=s(bue);hUo=r(Rft,"model.train()"),Rft.forEach(t),p9e.forEach(t),uUo=i(ga),T(_T.$$.fragment,ga),ga.forEach(t),el.forEach(t),vIe=i(m),fd=n(m,"H2",{class:!0});var CNe=s(fd);bT=n(CNe,"A",{id:!0,class:!0,href:!0});var Bft=s(bT);Fue=n(Bft,"SPAN",{});var Pft=s(Fue);T(GL.$$.fragment,Pft),Pft.forEach(t),Bft.forEach(t),pUo=i(CNe),vue=n(CNe,"SPAN",{});var Ift=s(vue);_Uo=r(Ift,"AutoModelForCTC"),Ift.forEach(t),CNe.forEach(t),TIe=i(m),Vo=n(m,"DIV",{class:!0});var ol=s(Vo);T(OL.$$.fragment,ol),bUo=i(ol),gd=n(ol,"P",{});var SK=s(gd);FUo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZV=n(SK,"A",{href:!0});var qft=s(ZV);vUo=r(qft,"from_pretrained()"),qft.forEach(t),TUo=r(SK," class method or the "),eX=n(SK,"A",{href:!0});var Nft=s(eX);MUo=r(Nft,"from_config()"),Nft.forEach(t),EUo=r(SK,` class
method.`),SK.forEach(t),CUo=i(ol),VL=n(ol,"P",{});var wNe=s(VL);wUo=r(wNe,"This class cannot be instantiated directly using "),Tue=n(wNe,"CODE",{});var jft=s(Tue);AUo=r(jft,"__init__()"),jft.forEach(t),yUo=r(wNe," (throws an error)."),wNe.forEach(t),LUo=i(ol),_t=n(ol,"DIV",{class:!0});var L0=s(_t);T(XL.$$.fragment,L0),xUo=i(L0),Mue=n(L0,"P",{});var Dft=s(Mue);$Uo=r(Dft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Dft.forEach(t),kUo=i(L0),hd=n(L0,"P",{});var RK=s(hd);SUo=r(RK,`Note:
Loading a model from its configuration file does `),Eue=n(RK,"STRONG",{});var Gft=s(Eue);RUo=r(Gft,"not"),Gft.forEach(t),BUo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(RK,"A",{href:!0});var Oft=s(oX);PUo=r(Oft,"from_pretrained()"),Oft.forEach(t),IUo=r(RK," to load the model weights."),RK.forEach(t),qUo=i(L0),T(FT.$$.fragment,L0),L0.forEach(t),NUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(zL.$$.fragment,ha),jUo=i(ha),Cue=n(ha,"P",{});var Vft=s(Cue);DUo=r(Vft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vft.forEach(t),GUo=i(ha),Oa=n(ha,"P",{});var x0=s(Oa);OUo=r(x0,"The model class to instantiate is selected based on the "),wue=n(x0,"CODE",{});var Xft=s(wue);VUo=r(Xft,"model_type"),Xft.forEach(t),XUo=r(x0,` property of the config object (either
passed as an argument or loaded from `),Aue=n(x0,"CODE",{});var zft=s(Aue);zUo=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),QUo=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(x0,"CODE",{});var Qft=s(yue);WUo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),HUo=r(x0,":"),x0.forEach(t),UUo=i(ha),je=n(ha,"UL",{});var Fo=s(je);vT=n(Fo,"LI",{});var _9e=s(vT);Lue=n(_9e,"STRONG",{});var Wft=s(Lue);JUo=r(Wft,"data2vec-audio"),Wft.forEach(t),YUo=r(_9e," \u2014 "),rX=n(_9e,"A",{href:!0});var Hft=s(rX);KUo=r(Hft,"Data2VecAudioForCTC"),Hft.forEach(t),ZUo=r(_9e," (Data2VecAudio model)"),_9e.forEach(t),eJo=i(Fo),TT=n(Fo,"LI",{});var b9e=s(TT);xue=n(b9e,"STRONG",{});var Uft=s(xue);oJo=r(Uft,"hubert"),Uft.forEach(t),rJo=r(b9e," \u2014 "),tX=n(b9e,"A",{href:!0});var Jft=s(tX);tJo=r(Jft,"HubertForCTC"),Jft.forEach(t),aJo=r(b9e," (Hubert model)"),b9e.forEach(t),nJo=i(Fo),MT=n(Fo,"LI",{});var F9e=s(MT);$ue=n(F9e,"STRONG",{});var Yft=s($ue);sJo=r(Yft,"sew"),Yft.forEach(t),lJo=r(F9e," \u2014 "),aX=n(F9e,"A",{href:!0});var Kft=s(aX);iJo=r(Kft,"SEWForCTC"),Kft.forEach(t),dJo=r(F9e," (SEW model)"),F9e.forEach(t),cJo=i(Fo),ET=n(Fo,"LI",{});var v9e=s(ET);kue=n(v9e,"STRONG",{});var Zft=s(kue);mJo=r(Zft,"sew-d"),Zft.forEach(t),fJo=r(v9e," \u2014 "),nX=n(v9e,"A",{href:!0});var egt=s(nX);gJo=r(egt,"SEWDForCTC"),egt.forEach(t),hJo=r(v9e," (SEW-D model)"),v9e.forEach(t),uJo=i(Fo),CT=n(Fo,"LI",{});var T9e=s(CT);Sue=n(T9e,"STRONG",{});var ogt=s(Sue);pJo=r(ogt,"unispeech"),ogt.forEach(t),_Jo=r(T9e," \u2014 "),sX=n(T9e,"A",{href:!0});var rgt=s(sX);bJo=r(rgt,"UniSpeechForCTC"),rgt.forEach(t),FJo=r(T9e," (UniSpeech model)"),T9e.forEach(t),vJo=i(Fo),wT=n(Fo,"LI",{});var M9e=s(wT);Rue=n(M9e,"STRONG",{});var tgt=s(Rue);TJo=r(tgt,"unispeech-sat"),tgt.forEach(t),MJo=r(M9e," \u2014 "),lX=n(M9e,"A",{href:!0});var agt=s(lX);EJo=r(agt,"UniSpeechSatForCTC"),agt.forEach(t),CJo=r(M9e," (UniSpeechSat model)"),M9e.forEach(t),wJo=i(Fo),AT=n(Fo,"LI",{});var E9e=s(AT);Bue=n(E9e,"STRONG",{});var ngt=s(Bue);AJo=r(ngt,"wav2vec2"),ngt.forEach(t),yJo=r(E9e," \u2014 "),iX=n(E9e,"A",{href:!0});var sgt=s(iX);LJo=r(sgt,"Wav2Vec2ForCTC"),sgt.forEach(t),xJo=r(E9e," (Wav2Vec2 model)"),E9e.forEach(t),$Jo=i(Fo),yT=n(Fo,"LI",{});var C9e=s(yT);Pue=n(C9e,"STRONG",{});var lgt=s(Pue);kJo=r(lgt,"wavlm"),lgt.forEach(t),SJo=r(C9e," \u2014 "),dX=n(C9e,"A",{href:!0});var igt=s(dX);RJo=r(igt,"WavLMForCTC"),igt.forEach(t),BJo=r(C9e," (WavLM model)"),C9e.forEach(t),Fo.forEach(t),PJo=i(ha),LT=n(ha,"P",{});var w9e=s(LT);IJo=r(w9e,"The model is set in evaluation mode by default using "),Iue=n(w9e,"CODE",{});var dgt=s(Iue);qJo=r(dgt,"model.eval()"),dgt.forEach(t),NJo=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(w9e,"CODE",{});var cgt=s(que);jJo=r(cgt,"model.train()"),cgt.forEach(t),w9e.forEach(t),DJo=i(ha),T(xT.$$.fragment,ha),ha.forEach(t),ol.forEach(t),MIe=i(m),ud=n(m,"H2",{class:!0});var ANe=s(ud);$T=n(ANe,"A",{id:!0,class:!0,href:!0});var mgt=s($T);Nue=n(mgt,"SPAN",{});var fgt=s(Nue);T(QL.$$.fragment,fgt),fgt.forEach(t),mgt.forEach(t),GJo=i(ANe),jue=n(ANe,"SPAN",{});var ggt=s(jue);OJo=r(ggt,"AutoModelForSpeechSeq2Seq"),ggt.forEach(t),ANe.forEach(t),EIe=i(m),Xo=n(m,"DIV",{class:!0});var rl=s(Xo);T(WL.$$.fragment,rl),VJo=i(rl),pd=n(rl,"P",{});var BK=s(pd);XJo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cX=n(BK,"A",{href:!0});var hgt=s(cX);zJo=r(hgt,"from_pretrained()"),hgt.forEach(t),QJo=r(BK," class method or the "),mX=n(BK,"A",{href:!0});var ugt=s(mX);WJo=r(ugt,"from_config()"),ugt.forEach(t),HJo=r(BK,` class
method.`),BK.forEach(t),UJo=i(rl),HL=n(rl,"P",{});var yNe=s(HL);JJo=r(yNe,"This class cannot be instantiated directly using "),Due=n(yNe,"CODE",{});var pgt=s(Due);YJo=r(pgt,"__init__()"),pgt.forEach(t),KJo=r(yNe," (throws an error)."),yNe.forEach(t),ZJo=i(rl),bt=n(rl,"DIV",{class:!0});var $0=s(bt);T(UL.$$.fragment,$0),eYo=i($0),Gue=n($0,"P",{});var _gt=s(Gue);oYo=r(_gt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_gt.forEach(t),rYo=i($0),_d=n($0,"P",{});var PK=s(_d);tYo=r(PK,`Note:
Loading a model from its configuration file does `),Oue=n(PK,"STRONG",{});var bgt=s(Oue);aYo=r(bgt,"not"),bgt.forEach(t),nYo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(PK,"A",{href:!0});var Fgt=s(fX);sYo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),lYo=r(PK," to load the model weights."),PK.forEach(t),iYo=i($0),T(kT.$$.fragment,$0),$0.forEach(t),dYo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(JL.$$.fragment,ua),cYo=i(ua),Vue=n(ua,"P",{});var vgt=s(Vue);mYo=r(vgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vgt.forEach(t),fYo=i(ua),Va=n(ua,"P",{});var k0=s(Va);gYo=r(k0,"The model class to instantiate is selected based on the "),Xue=n(k0,"CODE",{});var Tgt=s(Xue);hYo=r(Tgt,"model_type"),Tgt.forEach(t),uYo=r(k0,` property of the config object (either
passed as an argument or loaded from `),zue=n(k0,"CODE",{});var Mgt=s(zue);pYo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),_Yo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(k0,"CODE",{});var Egt=s(Que);bYo=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),FYo=r(k0,":"),k0.forEach(t),vYo=i(ua),YL=n(ua,"UL",{});var LNe=s(YL);ST=n(LNe,"LI",{});var A9e=s(ST);Wue=n(A9e,"STRONG",{});var Cgt=s(Wue);TYo=r(Cgt,"speech-encoder-decoder"),Cgt.forEach(t),MYo=r(A9e," \u2014 "),gX=n(A9e,"A",{href:!0});var wgt=s(gX);EYo=r(wgt,"SpeechEncoderDecoderModel"),wgt.forEach(t),CYo=r(A9e," (Speech Encoder decoder model)"),A9e.forEach(t),wYo=i(LNe),RT=n(LNe,"LI",{});var y9e=s(RT);Hue=n(y9e,"STRONG",{});var Agt=s(Hue);AYo=r(Agt,"speech_to_text"),Agt.forEach(t),yYo=r(y9e," \u2014 "),hX=n(y9e,"A",{href:!0});var ygt=s(hX);LYo=r(ygt,"Speech2TextForConditionalGeneration"),ygt.forEach(t),xYo=r(y9e," (Speech2Text model)"),y9e.forEach(t),LNe.forEach(t),$Yo=i(ua),BT=n(ua,"P",{});var L9e=s(BT);kYo=r(L9e,"The model is set in evaluation mode by default using "),Uue=n(L9e,"CODE",{});var Lgt=s(Uue);SYo=r(Lgt,"model.eval()"),Lgt.forEach(t),RYo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=n(L9e,"CODE",{});var xgt=s(Jue);BYo=r(xgt,"model.train()"),xgt.forEach(t),L9e.forEach(t),PYo=i(ua),T(PT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),CIe=i(m),bd=n(m,"H2",{class:!0});var xNe=s(bd);IT=n(xNe,"A",{id:!0,class:!0,href:!0});var $gt=s(IT);Yue=n($gt,"SPAN",{});var kgt=s(Yue);T(KL.$$.fragment,kgt),kgt.forEach(t),$gt.forEach(t),IYo=i(xNe),Kue=n(xNe,"SPAN",{});var Sgt=s(Kue);qYo=r(Sgt,"AutoModelForAudioXVector"),Sgt.forEach(t),xNe.forEach(t),wIe=i(m),zo=n(m,"DIV",{class:!0});var tl=s(zo);T(ZL.$$.fragment,tl),NYo=i(tl),Fd=n(tl,"P",{});var IK=s(Fd);jYo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),uX=n(IK,"A",{href:!0});var Rgt=s(uX);DYo=r(Rgt,"from_pretrained()"),Rgt.forEach(t),GYo=r(IK," class method or the "),pX=n(IK,"A",{href:!0});var Bgt=s(pX);OYo=r(Bgt,"from_config()"),Bgt.forEach(t),VYo=r(IK,` class
method.`),IK.forEach(t),XYo=i(tl),e8=n(tl,"P",{});var $Ne=s(e8);zYo=r($Ne,"This class cannot be instantiated directly using "),Zue=n($Ne,"CODE",{});var Pgt=s(Zue);QYo=r(Pgt,"__init__()"),Pgt.forEach(t),WYo=r($Ne," (throws an error)."),$Ne.forEach(t),HYo=i(tl),Ft=n(tl,"DIV",{class:!0});var S0=s(Ft);T(o8.$$.fragment,S0),UYo=i(S0),epe=n(S0,"P",{});var Igt=s(epe);JYo=r(Igt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Igt.forEach(t),YYo=i(S0),vd=n(S0,"P",{});var qK=s(vd);KYo=r(qK,`Note:
Loading a model from its configuration file does `),ope=n(qK,"STRONG",{});var qgt=s(ope);ZYo=r(qgt,"not"),qgt.forEach(t),eKo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(qK,"A",{href:!0});var Ngt=s(_X);oKo=r(Ngt,"from_pretrained()"),Ngt.forEach(t),rKo=r(qK," to load the model weights."),qK.forEach(t),tKo=i(S0),T(qT.$$.fragment,S0),S0.forEach(t),aKo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(r8.$$.fragment,pa),nKo=i(pa),rpe=n(pa,"P",{});var jgt=s(rpe);sKo=r(jgt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jgt.forEach(t),lKo=i(pa),Xa=n(pa,"P",{});var R0=s(Xa);iKo=r(R0,"The model class to instantiate is selected based on the "),tpe=n(R0,"CODE",{});var Dgt=s(tpe);dKo=r(Dgt,"model_type"),Dgt.forEach(t),cKo=r(R0,` property of the config object (either
passed as an argument or loaded from `),ape=n(R0,"CODE",{});var Ggt=s(ape);mKo=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),fKo=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=n(R0,"CODE",{});var Ogt=s(npe);gKo=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),hKo=r(R0,":"),R0.forEach(t),uKo=i(pa),za=n(pa,"UL",{});var B0=s(za);NT=n(B0,"LI",{});var x9e=s(NT);spe=n(x9e,"STRONG",{});var Vgt=s(spe);pKo=r(Vgt,"data2vec-audio"),Vgt.forEach(t),_Ko=r(x9e," \u2014 "),bX=n(x9e,"A",{href:!0});var Xgt=s(bX);bKo=r(Xgt,"Data2VecAudioForXVector"),Xgt.forEach(t),FKo=r(x9e," (Data2VecAudio model)"),x9e.forEach(t),vKo=i(B0),jT=n(B0,"LI",{});var $9e=s(jT);lpe=n($9e,"STRONG",{});var zgt=s(lpe);TKo=r(zgt,"unispeech-sat"),zgt.forEach(t),MKo=r($9e," \u2014 "),FX=n($9e,"A",{href:!0});var Qgt=s(FX);EKo=r(Qgt,"UniSpeechSatForXVector"),Qgt.forEach(t),CKo=r($9e," (UniSpeechSat model)"),$9e.forEach(t),wKo=i(B0),DT=n(B0,"LI",{});var k9e=s(DT);ipe=n(k9e,"STRONG",{});var Wgt=s(ipe);AKo=r(Wgt,"wav2vec2"),Wgt.forEach(t),yKo=r(k9e," \u2014 "),vX=n(k9e,"A",{href:!0});var Hgt=s(vX);LKo=r(Hgt,"Wav2Vec2ForXVector"),Hgt.forEach(t),xKo=r(k9e," (Wav2Vec2 model)"),k9e.forEach(t),$Ko=i(B0),GT=n(B0,"LI",{});var S9e=s(GT);dpe=n(S9e,"STRONG",{});var Ugt=s(dpe);kKo=r(Ugt,"wavlm"),Ugt.forEach(t),SKo=r(S9e," \u2014 "),TX=n(S9e,"A",{href:!0});var Jgt=s(TX);RKo=r(Jgt,"WavLMForXVector"),Jgt.forEach(t),BKo=r(S9e," (WavLM model)"),S9e.forEach(t),B0.forEach(t),PKo=i(pa),OT=n(pa,"P",{});var R9e=s(OT);IKo=r(R9e,"The model is set in evaluation mode by default using "),cpe=n(R9e,"CODE",{});var Ygt=s(cpe);qKo=r(Ygt,"model.eval()"),Ygt.forEach(t),NKo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(R9e,"CODE",{});var Kgt=s(mpe);jKo=r(Kgt,"model.train()"),Kgt.forEach(t),R9e.forEach(t),DKo=i(pa),T(VT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),AIe=i(m),Td=n(m,"H2",{class:!0});var kNe=s(Td);XT=n(kNe,"A",{id:!0,class:!0,href:!0});var Zgt=s(XT);fpe=n(Zgt,"SPAN",{});var eht=s(fpe);T(t8.$$.fragment,eht),eht.forEach(t),Zgt.forEach(t),GKo=i(kNe),gpe=n(kNe,"SPAN",{});var oht=s(gpe);OKo=r(oht,"AutoModelForMaskedImageModeling"),oht.forEach(t),kNe.forEach(t),yIe=i(m),Qo=n(m,"DIV",{class:!0});var al=s(Qo);T(a8.$$.fragment,al),VKo=i(al),Md=n(al,"P",{});var NK=s(Md);XKo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),MX=n(NK,"A",{href:!0});var rht=s(MX);zKo=r(rht,"from_pretrained()"),rht.forEach(t),QKo=r(NK," class method or the "),EX=n(NK,"A",{href:!0});var tht=s(EX);WKo=r(tht,"from_config()"),tht.forEach(t),HKo=r(NK,` class
method.`),NK.forEach(t),UKo=i(al),n8=n(al,"P",{});var SNe=s(n8);JKo=r(SNe,"This class cannot be instantiated directly using "),hpe=n(SNe,"CODE",{});var aht=s(hpe);YKo=r(aht,"__init__()"),aht.forEach(t),KKo=r(SNe," (throws an error)."),SNe.forEach(t),ZKo=i(al),vt=n(al,"DIV",{class:!0});var P0=s(vt);T(s8.$$.fragment,P0),eZo=i(P0),upe=n(P0,"P",{});var nht=s(upe);oZo=r(nht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),nht.forEach(t),rZo=i(P0),Ed=n(P0,"P",{});var jK=s(Ed);tZo=r(jK,`Note:
Loading a model from its configuration file does `),ppe=n(jK,"STRONG",{});var sht=s(ppe);aZo=r(sht,"not"),sht.forEach(t),nZo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(jK,"A",{href:!0});var lht=s(CX);sZo=r(lht,"from_pretrained()"),lht.forEach(t),lZo=r(jK," to load the model weights."),jK.forEach(t),iZo=i(P0),T(zT.$$.fragment,P0),P0.forEach(t),dZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(l8.$$.fragment,_a),cZo=i(_a),_pe=n(_a,"P",{});var iht=s(_pe);mZo=r(iht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),iht.forEach(t),fZo=i(_a),Qa=n(_a,"P",{});var I0=s(Qa);gZo=r(I0,"The model class to instantiate is selected based on the "),bpe=n(I0,"CODE",{});var dht=s(bpe);hZo=r(dht,"model_type"),dht.forEach(t),uZo=r(I0,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(I0,"CODE",{});var cht=s(Fpe);pZo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),_Zo=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(I0,"CODE",{});var mht=s(vpe);bZo=r(mht,"pretrained_model_name_or_path"),mht.forEach(t),FZo=r(I0,":"),I0.forEach(t),vZo=i(_a),Cd=n(_a,"UL",{});var DK=s(Cd);QT=n(DK,"LI",{});var B9e=s(QT);Tpe=n(B9e,"STRONG",{});var fht=s(Tpe);TZo=r(fht,"deit"),fht.forEach(t),MZo=r(B9e," \u2014 "),wX=n(B9e,"A",{href:!0});var ght=s(wX);EZo=r(ght,"DeiTForMaskedImageModeling"),ght.forEach(t),CZo=r(B9e," (DeiT model)"),B9e.forEach(t),wZo=i(DK),WT=n(DK,"LI",{});var P9e=s(WT);Mpe=n(P9e,"STRONG",{});var hht=s(Mpe);AZo=r(hht,"swin"),hht.forEach(t),yZo=r(P9e," \u2014 "),AX=n(P9e,"A",{href:!0});var uht=s(AX);LZo=r(uht,"SwinForMaskedImageModeling"),uht.forEach(t),xZo=r(P9e," (Swin model)"),P9e.forEach(t),$Zo=i(DK),HT=n(DK,"LI",{});var I9e=s(HT);Epe=n(I9e,"STRONG",{});var pht=s(Epe);kZo=r(pht,"vit"),pht.forEach(t),SZo=r(I9e," \u2014 "),yX=n(I9e,"A",{href:!0});var _ht=s(yX);RZo=r(_ht,"ViTForMaskedImageModeling"),_ht.forEach(t),BZo=r(I9e," (ViT model)"),I9e.forEach(t),DK.forEach(t),PZo=i(_a),UT=n(_a,"P",{});var q9e=s(UT);IZo=r(q9e,"The model is set in evaluation mode by default using "),Cpe=n(q9e,"CODE",{});var bht=s(Cpe);qZo=r(bht,"model.eval()"),bht.forEach(t),NZo=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(q9e,"CODE",{});var Fht=s(wpe);jZo=r(Fht,"model.train()"),Fht.forEach(t),q9e.forEach(t),DZo=i(_a),T(JT.$$.fragment,_a),_a.forEach(t),al.forEach(t),LIe=i(m),wd=n(m,"H2",{class:!0});var RNe=s(wd);YT=n(RNe,"A",{id:!0,class:!0,href:!0});var vht=s(YT);Ape=n(vht,"SPAN",{});var Tht=s(Ape);T(i8.$$.fragment,Tht),Tht.forEach(t),vht.forEach(t),GZo=i(RNe),ype=n(RNe,"SPAN",{});var Mht=s(ype);OZo=r(Mht,"AutoModelForObjectDetection"),Mht.forEach(t),RNe.forEach(t),xIe=i(m),Wo=n(m,"DIV",{class:!0});var nl=s(Wo);T(d8.$$.fragment,nl),VZo=i(nl),Ad=n(nl,"P",{});var GK=s(Ad);XZo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),LX=n(GK,"A",{href:!0});var Eht=s(LX);zZo=r(Eht,"from_pretrained()"),Eht.forEach(t),QZo=r(GK," class method or the "),xX=n(GK,"A",{href:!0});var Cht=s(xX);WZo=r(Cht,"from_config()"),Cht.forEach(t),HZo=r(GK,` class
method.`),GK.forEach(t),UZo=i(nl),c8=n(nl,"P",{});var BNe=s(c8);JZo=r(BNe,"This class cannot be instantiated directly using "),Lpe=n(BNe,"CODE",{});var wht=s(Lpe);YZo=r(wht,"__init__()"),wht.forEach(t),KZo=r(BNe," (throws an error)."),BNe.forEach(t),ZZo=i(nl),Tt=n(nl,"DIV",{class:!0});var q0=s(Tt);T(m8.$$.fragment,q0),eer=i(q0),xpe=n(q0,"P",{});var Aht=s(xpe);oer=r(Aht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Aht.forEach(t),rer=i(q0),yd=n(q0,"P",{});var OK=s(yd);ter=r(OK,`Note:
Loading a model from its configuration file does `),$pe=n(OK,"STRONG",{});var yht=s($pe);aer=r(yht,"not"),yht.forEach(t),ner=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(OK,"A",{href:!0});var Lht=s($X);ser=r(Lht,"from_pretrained()"),Lht.forEach(t),ler=r(OK," to load the model weights."),OK.forEach(t),ier=i(q0),T(KT.$$.fragment,q0),q0.forEach(t),der=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(f8.$$.fragment,ba),cer=i(ba),kpe=n(ba,"P",{});var xht=s(kpe);mer=r(xht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),xht.forEach(t),fer=i(ba),Wa=n(ba,"P",{});var N0=s(Wa);ger=r(N0,"The model class to instantiate is selected based on the "),Spe=n(N0,"CODE",{});var $ht=s(Spe);her=r($ht,"model_type"),$ht.forEach(t),uer=r(N0,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(N0,"CODE",{});var kht=s(Rpe);per=r(kht,"pretrained_model_name_or_path"),kht.forEach(t),_er=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(N0,"CODE",{});var Sht=s(Bpe);ber=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),Fer=r(N0,":"),N0.forEach(t),ver=i(ba),g8=n(ba,"UL",{});var PNe=s(g8);ZT=n(PNe,"LI",{});var N9e=s(ZT);Ppe=n(N9e,"STRONG",{});var Rht=s(Ppe);Ter=r(Rht,"detr"),Rht.forEach(t),Mer=r(N9e," \u2014 "),kX=n(N9e,"A",{href:!0});var Bht=s(kX);Eer=r(Bht,"DetrForObjectDetection"),Bht.forEach(t),Cer=r(N9e," (DETR model)"),N9e.forEach(t),wer=i(PNe),eM=n(PNe,"LI",{});var j9e=s(eM);Ipe=n(j9e,"STRONG",{});var Pht=s(Ipe);Aer=r(Pht,"yolos"),Pht.forEach(t),yer=r(j9e," \u2014 "),SX=n(j9e,"A",{href:!0});var Iht=s(SX);Ler=r(Iht,"YolosForObjectDetection"),Iht.forEach(t),xer=r(j9e," (YOLOS model)"),j9e.forEach(t),PNe.forEach(t),$er=i(ba),oM=n(ba,"P",{});var D9e=s(oM);ker=r(D9e,"The model is set in evaluation mode by default using "),qpe=n(D9e,"CODE",{});var qht=s(qpe);Ser=r(qht,"model.eval()"),qht.forEach(t),Rer=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(D9e,"CODE",{});var Nht=s(Npe);Ber=r(Nht,"model.train()"),Nht.forEach(t),D9e.forEach(t),Per=i(ba),T(rM.$$.fragment,ba),ba.forEach(t),nl.forEach(t),$Ie=i(m),Ld=n(m,"H2",{class:!0});var INe=s(Ld);tM=n(INe,"A",{id:!0,class:!0,href:!0});var jht=s(tM);jpe=n(jht,"SPAN",{});var Dht=s(jpe);T(h8.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),Ier=i(INe),Dpe=n(INe,"SPAN",{});var Ght=s(Dpe);qer=r(Ght,"AutoModelForImageSegmentation"),Ght.forEach(t),INe.forEach(t),kIe=i(m),Ho=n(m,"DIV",{class:!0});var sl=s(Ho);T(u8.$$.fragment,sl),Ner=i(sl),xd=n(sl,"P",{});var VK=s(xd);jer=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),RX=n(VK,"A",{href:!0});var Oht=s(RX);Der=r(Oht,"from_pretrained()"),Oht.forEach(t),Ger=r(VK," class method or the "),BX=n(VK,"A",{href:!0});var Vht=s(BX);Oer=r(Vht,"from_config()"),Vht.forEach(t),Ver=r(VK,` class
method.`),VK.forEach(t),Xer=i(sl),p8=n(sl,"P",{});var qNe=s(p8);zer=r(qNe,"This class cannot be instantiated directly using "),Gpe=n(qNe,"CODE",{});var Xht=s(Gpe);Qer=r(Xht,"__init__()"),Xht.forEach(t),Wer=r(qNe," (throws an error)."),qNe.forEach(t),Her=i(sl),Mt=n(sl,"DIV",{class:!0});var j0=s(Mt);T(_8.$$.fragment,j0),Uer=i(j0),Ope=n(j0,"P",{});var zht=s(Ope);Jer=r(zht,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zht.forEach(t),Yer=i(j0),$d=n(j0,"P",{});var XK=s($d);Ker=r(XK,`Note:
Loading a model from its configuration file does `),Vpe=n(XK,"STRONG",{});var Qht=s(Vpe);Zer=r(Qht,"not"),Qht.forEach(t),eor=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(XK,"A",{href:!0});var Wht=s(PX);oor=r(Wht,"from_pretrained()"),Wht.forEach(t),ror=r(XK," to load the model weights."),XK.forEach(t),tor=i(j0),T(aM.$$.fragment,j0),j0.forEach(t),aor=i(sl),uo=n(sl,"DIV",{class:!0});var Fa=s(uo);T(b8.$$.fragment,Fa),nor=i(Fa),Xpe=n(Fa,"P",{});var Hht=s(Xpe);sor=r(Hht,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Hht.forEach(t),lor=i(Fa),Ha=n(Fa,"P",{});var D0=s(Ha);ior=r(D0,"The model class to instantiate is selected based on the "),zpe=n(D0,"CODE",{});var Uht=s(zpe);dor=r(Uht,"model_type"),Uht.forEach(t),cor=r(D0,` property of the config object (either
passed as an argument or loaded from `),Qpe=n(D0,"CODE",{});var Jht=s(Qpe);mor=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),gor=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(D0,"CODE",{});var Yht=s(Wpe);hor=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),uor=r(D0,":"),D0.forEach(t),por=i(Fa),Hpe=n(Fa,"UL",{});var Kht=s(Hpe);nM=n(Kht,"LI",{});var G9e=s(nM);Upe=n(G9e,"STRONG",{});var Zht=s(Upe);_or=r(Zht,"detr"),Zht.forEach(t),bor=r(G9e," \u2014 "),IX=n(G9e,"A",{href:!0});var eut=s(IX);For=r(eut,"DetrForSegmentation"),eut.forEach(t),vor=r(G9e," (DETR model)"),G9e.forEach(t),Kht.forEach(t),Tor=i(Fa),sM=n(Fa,"P",{});var O9e=s(sM);Mor=r(O9e,"The model is set in evaluation mode by default using "),Jpe=n(O9e,"CODE",{});var out=s(Jpe);Eor=r(out,"model.eval()"),out.forEach(t),Cor=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(O9e,"CODE",{});var rut=s(Ype);wor=r(rut,"model.train()"),rut.forEach(t),O9e.forEach(t),Aor=i(Fa),T(lM.$$.fragment,Fa),Fa.forEach(t),sl.forEach(t),SIe=i(m),kd=n(m,"H2",{class:!0});var NNe=s(kd);iM=n(NNe,"A",{id:!0,class:!0,href:!0});var tut=s(iM);Kpe=n(tut,"SPAN",{});var aut=s(Kpe);T(F8.$$.fragment,aut),aut.forEach(t),tut.forEach(t),yor=i(NNe),Zpe=n(NNe,"SPAN",{});var nut=s(Zpe);Lor=r(nut,"AutoModelForSemanticSegmentation"),nut.forEach(t),NNe.forEach(t),RIe=i(m),Uo=n(m,"DIV",{class:!0});var ll=s(Uo);T(v8.$$.fragment,ll),xor=i(ll),Sd=n(ll,"P",{});var zK=s(Sd);$or=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),qX=n(zK,"A",{href:!0});var sut=s(qX);kor=r(sut,"from_pretrained()"),sut.forEach(t),Sor=r(zK," class method or the "),NX=n(zK,"A",{href:!0});var lut=s(NX);Ror=r(lut,"from_config()"),lut.forEach(t),Bor=r(zK,` class
method.`),zK.forEach(t),Por=i(ll),T8=n(ll,"P",{});var jNe=s(T8);Ior=r(jNe,"This class cannot be instantiated directly using "),e_e=n(jNe,"CODE",{});var iut=s(e_e);qor=r(iut,"__init__()"),iut.forEach(t),Nor=r(jNe," (throws an error)."),jNe.forEach(t),jor=i(ll),Et=n(ll,"DIV",{class:!0});var G0=s(Et);T(M8.$$.fragment,G0),Dor=i(G0),o_e=n(G0,"P",{});var dut=s(o_e);Gor=r(dut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dut.forEach(t),Oor=i(G0),Rd=n(G0,"P",{});var QK=s(Rd);Vor=r(QK,`Note:
Loading a model from its configuration file does `),r_e=n(QK,"STRONG",{});var cut=s(r_e);Xor=r(cut,"not"),cut.forEach(t),zor=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(QK,"A",{href:!0});var mut=s(jX);Qor=r(mut,"from_pretrained()"),mut.forEach(t),Wor=r(QK," to load the model weights."),QK.forEach(t),Hor=i(G0),T(dM.$$.fragment,G0),G0.forEach(t),Uor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(E8.$$.fragment,va),Jor=i(va),t_e=n(va,"P",{});var fut=s(t_e);Yor=r(fut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fut.forEach(t),Kor=i(va),Ua=n(va,"P",{});var O0=s(Ua);Zor=r(O0,"The model class to instantiate is selected based on the "),a_e=n(O0,"CODE",{});var gut=s(a_e);err=r(gut,"model_type"),gut.forEach(t),orr=r(O0,` property of the config object (either
passed as an argument or loaded from `),n_e=n(O0,"CODE",{});var hut=s(n_e);rrr=r(hut,"pretrained_model_name_or_path"),hut.forEach(t),trr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(O0,"CODE",{});var uut=s(s_e);arr=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),nrr=r(O0,":"),O0.forEach(t),srr=i(va),Ja=n(va,"UL",{});var V0=s(Ja);cM=n(V0,"LI",{});var V9e=s(cM);l_e=n(V9e,"STRONG",{});var put=s(l_e);lrr=r(put,"beit"),put.forEach(t),irr=r(V9e," \u2014 "),DX=n(V9e,"A",{href:!0});var _ut=s(DX);drr=r(_ut,"BeitForSemanticSegmentation"),_ut.forEach(t),crr=r(V9e," (BEiT model)"),V9e.forEach(t),mrr=i(V0),mM=n(V0,"LI",{});var X9e=s(mM);i_e=n(X9e,"STRONG",{});var but=s(i_e);frr=r(but,"data2vec-vision"),but.forEach(t),grr=r(X9e," \u2014 "),GX=n(X9e,"A",{href:!0});var Fut=s(GX);hrr=r(Fut,"Data2VecVisionForSemanticSegmentation"),Fut.forEach(t),urr=r(X9e," (Data2VecVision model)"),X9e.forEach(t),prr=i(V0),fM=n(V0,"LI",{});var z9e=s(fM);d_e=n(z9e,"STRONG",{});var vut=s(d_e);_rr=r(vut,"dpt"),vut.forEach(t),brr=r(z9e," \u2014 "),OX=n(z9e,"A",{href:!0});var Tut=s(OX);Frr=r(Tut,"DPTForSemanticSegmentation"),Tut.forEach(t),vrr=r(z9e," (DPT model)"),z9e.forEach(t),Trr=i(V0),gM=n(V0,"LI",{});var Q9e=s(gM);c_e=n(Q9e,"STRONG",{});var Mut=s(c_e);Mrr=r(Mut,"segformer"),Mut.forEach(t),Err=r(Q9e," \u2014 "),VX=n(Q9e,"A",{href:!0});var Eut=s(VX);Crr=r(Eut,"SegformerForSemanticSegmentation"),Eut.forEach(t),wrr=r(Q9e," (SegFormer model)"),Q9e.forEach(t),V0.forEach(t),Arr=i(va),hM=n(va,"P",{});var W9e=s(hM);yrr=r(W9e,"The model is set in evaluation mode by default using "),m_e=n(W9e,"CODE",{});var Cut=s(m_e);Lrr=r(Cut,"model.eval()"),Cut.forEach(t),xrr=r(W9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(W9e,"CODE",{});var wut=s(f_e);$rr=r(wut,"model.train()"),wut.forEach(t),W9e.forEach(t),krr=i(va),T(uM.$$.fragment,va),va.forEach(t),ll.forEach(t),BIe=i(m),Bd=n(m,"H2",{class:!0});var DNe=s(Bd);pM=n(DNe,"A",{id:!0,class:!0,href:!0});var Aut=s(pM);g_e=n(Aut,"SPAN",{});var yut=s(g_e);T(C8.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),Srr=i(DNe),h_e=n(DNe,"SPAN",{});var Lut=s(h_e);Rrr=r(Lut,"AutoModelForInstanceSegmentation"),Lut.forEach(t),DNe.forEach(t),PIe=i(m),Jo=n(m,"DIV",{class:!0});var il=s(Jo);T(w8.$$.fragment,il),Brr=i(il),Pd=n(il,"P",{});var WK=s(Pd);Prr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XX=n(WK,"A",{href:!0});var xut=s(XX);Irr=r(xut,"from_pretrained()"),xut.forEach(t),qrr=r(WK," class method or the "),zX=n(WK,"A",{href:!0});var $ut=s(zX);Nrr=r($ut,"from_config()"),$ut.forEach(t),jrr=r(WK,` class
method.`),WK.forEach(t),Drr=i(il),A8=n(il,"P",{});var GNe=s(A8);Grr=r(GNe,"This class cannot be instantiated directly using "),u_e=n(GNe,"CODE",{});var kut=s(u_e);Orr=r(kut,"__init__()"),kut.forEach(t),Vrr=r(GNe," (throws an error)."),GNe.forEach(t),Xrr=i(il),Ct=n(il,"DIV",{class:!0});var X0=s(Ct);T(y8.$$.fragment,X0),zrr=i(X0),p_e=n(X0,"P",{});var Sut=s(p_e);Qrr=r(Sut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Sut.forEach(t),Wrr=i(X0),Id=n(X0,"P",{});var HK=s(Id);Hrr=r(HK,`Note:
Loading a model from its configuration file does `),__e=n(HK,"STRONG",{});var Rut=s(__e);Urr=r(Rut,"not"),Rut.forEach(t),Jrr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(HK,"A",{href:!0});var But=s(QX);Yrr=r(But,"from_pretrained()"),But.forEach(t),Krr=r(HK," to load the model weights."),HK.forEach(t),Zrr=i(X0),T(_M.$$.fragment,X0),X0.forEach(t),etr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(L8.$$.fragment,Ta),otr=i(Ta),b_e=n(Ta,"P",{});var Put=s(b_e);rtr=r(Put,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Put.forEach(t),ttr=i(Ta),Ya=n(Ta,"P",{});var z0=s(Ya);atr=r(z0,"The model class to instantiate is selected based on the "),F_e=n(z0,"CODE",{});var Iut=s(F_e);ntr=r(Iut,"model_type"),Iut.forEach(t),str=r(z0,` property of the config object (either
passed as an argument or loaded from `),v_e=n(z0,"CODE",{});var qut=s(v_e);ltr=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),itr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(z0,"CODE",{});var Nut=s(T_e);dtr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),ctr=r(z0,":"),z0.forEach(t),mtr=i(Ta),M_e=n(Ta,"UL",{});var jut=s(M_e);bM=n(jut,"LI",{});var H9e=s(bM);E_e=n(H9e,"STRONG",{});var Dut=s(E_e);ftr=r(Dut,"maskformer"),Dut.forEach(t),gtr=r(H9e," \u2014 "),WX=n(H9e,"A",{href:!0});var Gut=s(WX);htr=r(Gut,"MaskFormerForInstanceSegmentation"),Gut.forEach(t),utr=r(H9e," (MaskFormer model)"),H9e.forEach(t),jut.forEach(t),ptr=i(Ta),FM=n(Ta,"P",{});var U9e=s(FM);_tr=r(U9e,"The model is set in evaluation mode by default using "),C_e=n(U9e,"CODE",{});var Out=s(C_e);btr=r(Out,"model.eval()"),Out.forEach(t),Ftr=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(U9e,"CODE",{});var Vut=s(w_e);vtr=r(Vut,"model.train()"),Vut.forEach(t),U9e.forEach(t),Ttr=i(Ta),T(vM.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),IIe=i(m),qd=n(m,"H2",{class:!0});var ONe=s(qd);TM=n(ONe,"A",{id:!0,class:!0,href:!0});var Xut=s(TM);A_e=n(Xut,"SPAN",{});var zut=s(A_e);T(x8.$$.fragment,zut),zut.forEach(t),Xut.forEach(t),Mtr=i(ONe),y_e=n(ONe,"SPAN",{});var Qut=s(y_e);Etr=r(Qut,"TFAutoModel"),Qut.forEach(t),ONe.forEach(t),qIe=i(m),Yo=n(m,"DIV",{class:!0});var dl=s(Yo);T($8.$$.fragment,dl),Ctr=i(dl),Nd=n(dl,"P",{});var UK=s(Nd);wtr=r(UK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HX=n(UK,"A",{href:!0});var Wut=s(HX);Atr=r(Wut,"from_pretrained()"),Wut.forEach(t),ytr=r(UK," class method or the "),UX=n(UK,"A",{href:!0});var Hut=s(UX);Ltr=r(Hut,"from_config()"),Hut.forEach(t),xtr=r(UK,` class
method.`),UK.forEach(t),$tr=i(dl),k8=n(dl,"P",{});var VNe=s(k8);ktr=r(VNe,"This class cannot be instantiated directly using "),L_e=n(VNe,"CODE",{});var Uut=s(L_e);Str=r(Uut,"__init__()"),Uut.forEach(t),Rtr=r(VNe," (throws an error)."),VNe.forEach(t),Btr=i(dl),wt=n(dl,"DIV",{class:!0});var Q0=s(wt);T(S8.$$.fragment,Q0),Ptr=i(Q0),x_e=n(Q0,"P",{});var Jut=s(x_e);Itr=r(Jut,"Instantiates one of the base model classes of the library from a configuration."),Jut.forEach(t),qtr=i(Q0),jd=n(Q0,"P",{});var JK=s(jd);Ntr=r(JK,`Note:
Loading a model from its configuration file does `),$_e=n(JK,"STRONG",{});var Yut=s($_e);jtr=r(Yut,"not"),Yut.forEach(t),Dtr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(JK,"A",{href:!0});var Kut=s(JX);Gtr=r(Kut,"from_pretrained()"),Kut.forEach(t),Otr=r(JK," to load the model weights."),JK.forEach(t),Vtr=i(Q0),T(MM.$$.fragment,Q0),Q0.forEach(t),Xtr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(R8.$$.fragment,cl),ztr=i(cl),k_e=n(cl,"P",{});var Zut=s(k_e);Qtr=r(Zut,"Instantiate one of the base model classes of the library from a pretrained model."),Zut.forEach(t),Wtr=i(cl),Ka=n(cl,"P",{});var W0=s(Ka);Htr=r(W0,"The model class to instantiate is selected based on the "),S_e=n(W0,"CODE",{});var ept=s(S_e);Utr=r(ept,"model_type"),ept.forEach(t),Jtr=r(W0,` property of the config object (either
passed as an argument or loaded from `),R_e=n(W0,"CODE",{});var opt=s(R_e);Ytr=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),Ktr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(W0,"CODE",{});var rpt=s(B_e);Ztr=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),ear=r(W0,":"),W0.forEach(t),oar=i(cl),N=n(cl,"UL",{});var D=s(N);EM=n(D,"LI",{});var J9e=s(EM);P_e=n(J9e,"STRONG",{});var tpt=s(P_e);rar=r(tpt,"albert"),tpt.forEach(t),tar=r(J9e," \u2014 "),YX=n(J9e,"A",{href:!0});var apt=s(YX);aar=r(apt,"TFAlbertModel"),apt.forEach(t),nar=r(J9e," (ALBERT model)"),J9e.forEach(t),sar=i(D),CM=n(D,"LI",{});var Y9e=s(CM);I_e=n(Y9e,"STRONG",{});var npt=s(I_e);lar=r(npt,"bart"),npt.forEach(t),iar=r(Y9e," \u2014 "),KX=n(Y9e,"A",{href:!0});var spt=s(KX);dar=r(spt,"TFBartModel"),spt.forEach(t),car=r(Y9e," (BART model)"),Y9e.forEach(t),mar=i(D),wM=n(D,"LI",{});var K9e=s(wM);q_e=n(K9e,"STRONG",{});var lpt=s(q_e);far=r(lpt,"bert"),lpt.forEach(t),gar=r(K9e," \u2014 "),ZX=n(K9e,"A",{href:!0});var ipt=s(ZX);har=r(ipt,"TFBertModel"),ipt.forEach(t),uar=r(K9e," (BERT model)"),K9e.forEach(t),par=i(D),AM=n(D,"LI",{});var Z9e=s(AM);N_e=n(Z9e,"STRONG",{});var dpt=s(N_e);_ar=r(dpt,"blenderbot"),dpt.forEach(t),bar=r(Z9e," \u2014 "),ez=n(Z9e,"A",{href:!0});var cpt=s(ez);Far=r(cpt,"TFBlenderbotModel"),cpt.forEach(t),Tar=r(Z9e," (Blenderbot model)"),Z9e.forEach(t),Mar=i(D),yM=n(D,"LI",{});var e$e=s(yM);j_e=n(e$e,"STRONG",{});var mpt=s(j_e);Ear=r(mpt,"blenderbot-small"),mpt.forEach(t),Car=r(e$e," \u2014 "),oz=n(e$e,"A",{href:!0});var fpt=s(oz);war=r(fpt,"TFBlenderbotSmallModel"),fpt.forEach(t),Aar=r(e$e," (BlenderbotSmall model)"),e$e.forEach(t),yar=i(D),LM=n(D,"LI",{});var o$e=s(LM);D_e=n(o$e,"STRONG",{});var gpt=s(D_e);Lar=r(gpt,"camembert"),gpt.forEach(t),xar=r(o$e," \u2014 "),rz=n(o$e,"A",{href:!0});var hpt=s(rz);$ar=r(hpt,"TFCamembertModel"),hpt.forEach(t),kar=r(o$e," (CamemBERT model)"),o$e.forEach(t),Sar=i(D),xM=n(D,"LI",{});var r$e=s(xM);G_e=n(r$e,"STRONG",{});var upt=s(G_e);Rar=r(upt,"clip"),upt.forEach(t),Bar=r(r$e," \u2014 "),tz=n(r$e,"A",{href:!0});var ppt=s(tz);Par=r(ppt,"TFCLIPModel"),ppt.forEach(t),Iar=r(r$e," (CLIP model)"),r$e.forEach(t),qar=i(D),$M=n(D,"LI",{});var t$e=s($M);O_e=n(t$e,"STRONG",{});var _pt=s(O_e);Nar=r(_pt,"convbert"),_pt.forEach(t),jar=r(t$e," \u2014 "),az=n(t$e,"A",{href:!0});var bpt=s(az);Dar=r(bpt,"TFConvBertModel"),bpt.forEach(t),Gar=r(t$e," (ConvBERT model)"),t$e.forEach(t),Oar=i(D),kM=n(D,"LI",{});var a$e=s(kM);V_e=n(a$e,"STRONG",{});var Fpt=s(V_e);Var=r(Fpt,"convnext"),Fpt.forEach(t),Xar=r(a$e," \u2014 "),nz=n(a$e,"A",{href:!0});var vpt=s(nz);zar=r(vpt,"TFConvNextModel"),vpt.forEach(t),Qar=r(a$e," (ConvNext model)"),a$e.forEach(t),War=i(D),SM=n(D,"LI",{});var n$e=s(SM);X_e=n(n$e,"STRONG",{});var Tpt=s(X_e);Har=r(Tpt,"ctrl"),Tpt.forEach(t),Uar=r(n$e," \u2014 "),sz=n(n$e,"A",{href:!0});var Mpt=s(sz);Jar=r(Mpt,"TFCTRLModel"),Mpt.forEach(t),Yar=r(n$e," (CTRL model)"),n$e.forEach(t),Kar=i(D),RM=n(D,"LI",{});var s$e=s(RM);z_e=n(s$e,"STRONG",{});var Ept=s(z_e);Zar=r(Ept,"data2vec-vision"),Ept.forEach(t),enr=r(s$e," \u2014 "),lz=n(s$e,"A",{href:!0});var Cpt=s(lz);onr=r(Cpt,"TFData2VecVisionModel"),Cpt.forEach(t),rnr=r(s$e," (Data2VecVision model)"),s$e.forEach(t),tnr=i(D),BM=n(D,"LI",{});var l$e=s(BM);Q_e=n(l$e,"STRONG",{});var wpt=s(Q_e);anr=r(wpt,"deberta"),wpt.forEach(t),nnr=r(l$e," \u2014 "),iz=n(l$e,"A",{href:!0});var Apt=s(iz);snr=r(Apt,"TFDebertaModel"),Apt.forEach(t),lnr=r(l$e," (DeBERTa model)"),l$e.forEach(t),inr=i(D),PM=n(D,"LI",{});var i$e=s(PM);W_e=n(i$e,"STRONG",{});var ypt=s(W_e);dnr=r(ypt,"deberta-v2"),ypt.forEach(t),cnr=r(i$e," \u2014 "),dz=n(i$e,"A",{href:!0});var Lpt=s(dz);mnr=r(Lpt,"TFDebertaV2Model"),Lpt.forEach(t),fnr=r(i$e," (DeBERTa-v2 model)"),i$e.forEach(t),gnr=i(D),IM=n(D,"LI",{});var d$e=s(IM);H_e=n(d$e,"STRONG",{});var xpt=s(H_e);hnr=r(xpt,"distilbert"),xpt.forEach(t),unr=r(d$e," \u2014 "),cz=n(d$e,"A",{href:!0});var $pt=s(cz);pnr=r($pt,"TFDistilBertModel"),$pt.forEach(t),_nr=r(d$e," (DistilBERT model)"),d$e.forEach(t),bnr=i(D),qM=n(D,"LI",{});var c$e=s(qM);U_e=n(c$e,"STRONG",{});var kpt=s(U_e);Fnr=r(kpt,"dpr"),kpt.forEach(t),vnr=r(c$e," \u2014 "),mz=n(c$e,"A",{href:!0});var Spt=s(mz);Tnr=r(Spt,"TFDPRQuestionEncoder"),Spt.forEach(t),Mnr=r(c$e," (DPR model)"),c$e.forEach(t),Enr=i(D),NM=n(D,"LI",{});var m$e=s(NM);J_e=n(m$e,"STRONG",{});var Rpt=s(J_e);Cnr=r(Rpt,"electra"),Rpt.forEach(t),wnr=r(m$e," \u2014 "),fz=n(m$e,"A",{href:!0});var Bpt=s(fz);Anr=r(Bpt,"TFElectraModel"),Bpt.forEach(t),ynr=r(m$e," (ELECTRA model)"),m$e.forEach(t),Lnr=i(D),jM=n(D,"LI",{});var f$e=s(jM);Y_e=n(f$e,"STRONG",{});var Ppt=s(Y_e);xnr=r(Ppt,"flaubert"),Ppt.forEach(t),$nr=r(f$e," \u2014 "),gz=n(f$e,"A",{href:!0});var Ipt=s(gz);knr=r(Ipt,"TFFlaubertModel"),Ipt.forEach(t),Snr=r(f$e," (FlauBERT model)"),f$e.forEach(t),Rnr=i(D),Bs=n(D,"LI",{});var c$=s(Bs);K_e=n(c$,"STRONG",{});var qpt=s(K_e);Bnr=r(qpt,"funnel"),qpt.forEach(t),Pnr=r(c$," \u2014 "),hz=n(c$,"A",{href:!0});var Npt=s(hz);Inr=r(Npt,"TFFunnelModel"),Npt.forEach(t),qnr=r(c$," or "),uz=n(c$,"A",{href:!0});var jpt=s(uz);Nnr=r(jpt,"TFFunnelBaseModel"),jpt.forEach(t),jnr=r(c$," (Funnel Transformer model)"),c$.forEach(t),Dnr=i(D),DM=n(D,"LI",{});var g$e=s(DM);Z_e=n(g$e,"STRONG",{});var Dpt=s(Z_e);Gnr=r(Dpt,"gpt2"),Dpt.forEach(t),Onr=r(g$e," \u2014 "),pz=n(g$e,"A",{href:!0});var Gpt=s(pz);Vnr=r(Gpt,"TFGPT2Model"),Gpt.forEach(t),Xnr=r(g$e," (OpenAI GPT-2 model)"),g$e.forEach(t),znr=i(D),GM=n(D,"LI",{});var h$e=s(GM);ebe=n(h$e,"STRONG",{});var Opt=s(ebe);Qnr=r(Opt,"gptj"),Opt.forEach(t),Wnr=r(h$e," \u2014 "),_z=n(h$e,"A",{href:!0});var Vpt=s(_z);Hnr=r(Vpt,"TFGPTJModel"),Vpt.forEach(t),Unr=r(h$e," (GPT-J model)"),h$e.forEach(t),Jnr=i(D),OM=n(D,"LI",{});var u$e=s(OM);obe=n(u$e,"STRONG",{});var Xpt=s(obe);Ynr=r(Xpt,"hubert"),Xpt.forEach(t),Knr=r(u$e," \u2014 "),bz=n(u$e,"A",{href:!0});var zpt=s(bz);Znr=r(zpt,"TFHubertModel"),zpt.forEach(t),esr=r(u$e," (Hubert model)"),u$e.forEach(t),osr=i(D),VM=n(D,"LI",{});var p$e=s(VM);rbe=n(p$e,"STRONG",{});var Qpt=s(rbe);rsr=r(Qpt,"layoutlm"),Qpt.forEach(t),tsr=r(p$e," \u2014 "),Fz=n(p$e,"A",{href:!0});var Wpt=s(Fz);asr=r(Wpt,"TFLayoutLMModel"),Wpt.forEach(t),nsr=r(p$e," (LayoutLM model)"),p$e.forEach(t),ssr=i(D),XM=n(D,"LI",{});var _$e=s(XM);tbe=n(_$e,"STRONG",{});var Hpt=s(tbe);lsr=r(Hpt,"led"),Hpt.forEach(t),isr=r(_$e," \u2014 "),vz=n(_$e,"A",{href:!0});var Upt=s(vz);dsr=r(Upt,"TFLEDModel"),Upt.forEach(t),csr=r(_$e," (LED model)"),_$e.forEach(t),msr=i(D),zM=n(D,"LI",{});var b$e=s(zM);abe=n(b$e,"STRONG",{});var Jpt=s(abe);fsr=r(Jpt,"longformer"),Jpt.forEach(t),gsr=r(b$e," \u2014 "),Tz=n(b$e,"A",{href:!0});var Ypt=s(Tz);hsr=r(Ypt,"TFLongformerModel"),Ypt.forEach(t),usr=r(b$e," (Longformer model)"),b$e.forEach(t),psr=i(D),QM=n(D,"LI",{});var F$e=s(QM);nbe=n(F$e,"STRONG",{});var Kpt=s(nbe);_sr=r(Kpt,"lxmert"),Kpt.forEach(t),bsr=r(F$e," \u2014 "),Mz=n(F$e,"A",{href:!0});var Zpt=s(Mz);Fsr=r(Zpt,"TFLxmertModel"),Zpt.forEach(t),vsr=r(F$e," (LXMERT model)"),F$e.forEach(t),Tsr=i(D),WM=n(D,"LI",{});var v$e=s(WM);sbe=n(v$e,"STRONG",{});var e_t=s(sbe);Msr=r(e_t,"marian"),e_t.forEach(t),Esr=r(v$e," \u2014 "),Ez=n(v$e,"A",{href:!0});var o_t=s(Ez);Csr=r(o_t,"TFMarianModel"),o_t.forEach(t),wsr=r(v$e," (Marian model)"),v$e.forEach(t),Asr=i(D),HM=n(D,"LI",{});var T$e=s(HM);lbe=n(T$e,"STRONG",{});var r_t=s(lbe);ysr=r(r_t,"mbart"),r_t.forEach(t),Lsr=r(T$e," \u2014 "),Cz=n(T$e,"A",{href:!0});var t_t=s(Cz);xsr=r(t_t,"TFMBartModel"),t_t.forEach(t),$sr=r(T$e," (mBART model)"),T$e.forEach(t),ksr=i(D),UM=n(D,"LI",{});var M$e=s(UM);ibe=n(M$e,"STRONG",{});var a_t=s(ibe);Ssr=r(a_t,"mobilebert"),a_t.forEach(t),Rsr=r(M$e," \u2014 "),wz=n(M$e,"A",{href:!0});var n_t=s(wz);Bsr=r(n_t,"TFMobileBertModel"),n_t.forEach(t),Psr=r(M$e," (MobileBERT model)"),M$e.forEach(t),Isr=i(D),JM=n(D,"LI",{});var E$e=s(JM);dbe=n(E$e,"STRONG",{});var s_t=s(dbe);qsr=r(s_t,"mpnet"),s_t.forEach(t),Nsr=r(E$e," \u2014 "),Az=n(E$e,"A",{href:!0});var l_t=s(Az);jsr=r(l_t,"TFMPNetModel"),l_t.forEach(t),Dsr=r(E$e," (MPNet model)"),E$e.forEach(t),Gsr=i(D),YM=n(D,"LI",{});var C$e=s(YM);cbe=n(C$e,"STRONG",{});var i_t=s(cbe);Osr=r(i_t,"mt5"),i_t.forEach(t),Vsr=r(C$e," \u2014 "),yz=n(C$e,"A",{href:!0});var d_t=s(yz);Xsr=r(d_t,"TFMT5Model"),d_t.forEach(t),zsr=r(C$e," (mT5 model)"),C$e.forEach(t),Qsr=i(D),KM=n(D,"LI",{});var w$e=s(KM);mbe=n(w$e,"STRONG",{});var c_t=s(mbe);Wsr=r(c_t,"openai-gpt"),c_t.forEach(t),Hsr=r(w$e," \u2014 "),Lz=n(w$e,"A",{href:!0});var m_t=s(Lz);Usr=r(m_t,"TFOpenAIGPTModel"),m_t.forEach(t),Jsr=r(w$e," (OpenAI GPT model)"),w$e.forEach(t),Ysr=i(D),ZM=n(D,"LI",{});var A$e=s(ZM);fbe=n(A$e,"STRONG",{});var f_t=s(fbe);Ksr=r(f_t,"pegasus"),f_t.forEach(t),Zsr=r(A$e," \u2014 "),xz=n(A$e,"A",{href:!0});var g_t=s(xz);elr=r(g_t,"TFPegasusModel"),g_t.forEach(t),olr=r(A$e," (Pegasus model)"),A$e.forEach(t),rlr=i(D),e4=n(D,"LI",{});var y$e=s(e4);gbe=n(y$e,"STRONG",{});var h_t=s(gbe);tlr=r(h_t,"rembert"),h_t.forEach(t),alr=r(y$e," \u2014 "),$z=n(y$e,"A",{href:!0});var u_t=s($z);nlr=r(u_t,"TFRemBertModel"),u_t.forEach(t),slr=r(y$e," (RemBERT model)"),y$e.forEach(t),llr=i(D),o4=n(D,"LI",{});var L$e=s(o4);hbe=n(L$e,"STRONG",{});var p_t=s(hbe);ilr=r(p_t,"roberta"),p_t.forEach(t),dlr=r(L$e," \u2014 "),kz=n(L$e,"A",{href:!0});var __t=s(kz);clr=r(__t,"TFRobertaModel"),__t.forEach(t),mlr=r(L$e," (RoBERTa model)"),L$e.forEach(t),flr=i(D),r4=n(D,"LI",{});var x$e=s(r4);ube=n(x$e,"STRONG",{});var b_t=s(ube);glr=r(b_t,"roformer"),b_t.forEach(t),hlr=r(x$e," \u2014 "),Sz=n(x$e,"A",{href:!0});var F_t=s(Sz);ulr=r(F_t,"TFRoFormerModel"),F_t.forEach(t),plr=r(x$e," (RoFormer model)"),x$e.forEach(t),_lr=i(D),t4=n(D,"LI",{});var $$e=s(t4);pbe=n($$e,"STRONG",{});var v_t=s(pbe);blr=r(v_t,"speech_to_text"),v_t.forEach(t),Flr=r($$e," \u2014 "),Rz=n($$e,"A",{href:!0});var T_t=s(Rz);vlr=r(T_t,"TFSpeech2TextModel"),T_t.forEach(t),Tlr=r($$e," (Speech2Text model)"),$$e.forEach(t),Mlr=i(D),a4=n(D,"LI",{});var k$e=s(a4);_be=n(k$e,"STRONG",{});var M_t=s(_be);Elr=r(M_t,"t5"),M_t.forEach(t),Clr=r(k$e," \u2014 "),Bz=n(k$e,"A",{href:!0});var E_t=s(Bz);wlr=r(E_t,"TFT5Model"),E_t.forEach(t),Alr=r(k$e," (T5 model)"),k$e.forEach(t),ylr=i(D),n4=n(D,"LI",{});var S$e=s(n4);bbe=n(S$e,"STRONG",{});var C_t=s(bbe);Llr=r(C_t,"tapas"),C_t.forEach(t),xlr=r(S$e," \u2014 "),Pz=n(S$e,"A",{href:!0});var w_t=s(Pz);$lr=r(w_t,"TFTapasModel"),w_t.forEach(t),klr=r(S$e," (TAPAS model)"),S$e.forEach(t),Slr=i(D),s4=n(D,"LI",{});var R$e=s(s4);Fbe=n(R$e,"STRONG",{});var A_t=s(Fbe);Rlr=r(A_t,"transfo-xl"),A_t.forEach(t),Blr=r(R$e," \u2014 "),Iz=n(R$e,"A",{href:!0});var y_t=s(Iz);Plr=r(y_t,"TFTransfoXLModel"),y_t.forEach(t),Ilr=r(R$e," (Transformer-XL model)"),R$e.forEach(t),qlr=i(D),l4=n(D,"LI",{});var B$e=s(l4);vbe=n(B$e,"STRONG",{});var L_t=s(vbe);Nlr=r(L_t,"vit"),L_t.forEach(t),jlr=r(B$e," \u2014 "),qz=n(B$e,"A",{href:!0});var x_t=s(qz);Dlr=r(x_t,"TFViTModel"),x_t.forEach(t),Glr=r(B$e," (ViT model)"),B$e.forEach(t),Olr=i(D),i4=n(D,"LI",{});var P$e=s(i4);Tbe=n(P$e,"STRONG",{});var $_t=s(Tbe);Vlr=r($_t,"vit_mae"),$_t.forEach(t),Xlr=r(P$e," \u2014 "),Nz=n(P$e,"A",{href:!0});var k_t=s(Nz);zlr=r(k_t,"TFViTMAEModel"),k_t.forEach(t),Qlr=r(P$e," (ViTMAE model)"),P$e.forEach(t),Wlr=i(D),d4=n(D,"LI",{});var I$e=s(d4);Mbe=n(I$e,"STRONG",{});var S_t=s(Mbe);Hlr=r(S_t,"wav2vec2"),S_t.forEach(t),Ulr=r(I$e," \u2014 "),jz=n(I$e,"A",{href:!0});var R_t=s(jz);Jlr=r(R_t,"TFWav2Vec2Model"),R_t.forEach(t),Ylr=r(I$e," (Wav2Vec2 model)"),I$e.forEach(t),Klr=i(D),c4=n(D,"LI",{});var q$e=s(c4);Ebe=n(q$e,"STRONG",{});var B_t=s(Ebe);Zlr=r(B_t,"xlm"),B_t.forEach(t),eir=r(q$e," \u2014 "),Dz=n(q$e,"A",{href:!0});var P_t=s(Dz);oir=r(P_t,"TFXLMModel"),P_t.forEach(t),rir=r(q$e," (XLM model)"),q$e.forEach(t),tir=i(D),m4=n(D,"LI",{});var N$e=s(m4);Cbe=n(N$e,"STRONG",{});var I_t=s(Cbe);air=r(I_t,"xlm-roberta"),I_t.forEach(t),nir=r(N$e," \u2014 "),Gz=n(N$e,"A",{href:!0});var q_t=s(Gz);sir=r(q_t,"TFXLMRobertaModel"),q_t.forEach(t),lir=r(N$e," (XLM-RoBERTa model)"),N$e.forEach(t),iir=i(D),f4=n(D,"LI",{});var j$e=s(f4);wbe=n(j$e,"STRONG",{});var N_t=s(wbe);dir=r(N_t,"xlnet"),N_t.forEach(t),cir=r(j$e," \u2014 "),Oz=n(j$e,"A",{href:!0});var j_t=s(Oz);mir=r(j_t,"TFXLNetModel"),j_t.forEach(t),fir=r(j$e," (XLNet model)"),j$e.forEach(t),D.forEach(t),gir=i(cl),T(g4.$$.fragment,cl),cl.forEach(t),dl.forEach(t),NIe=i(m),Dd=n(m,"H2",{class:!0});var XNe=s(Dd);h4=n(XNe,"A",{id:!0,class:!0,href:!0});var D_t=s(h4);Abe=n(D_t,"SPAN",{});var G_t=s(Abe);T(B8.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),hir=i(XNe),ybe=n(XNe,"SPAN",{});var O_t=s(ybe);uir=r(O_t,"TFAutoModelForPreTraining"),O_t.forEach(t),XNe.forEach(t),jIe=i(m),Ko=n(m,"DIV",{class:!0});var ml=s(Ko);T(P8.$$.fragment,ml),pir=i(ml),Gd=n(ml,"P",{});var YK=s(Gd);_ir=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vz=n(YK,"A",{href:!0});var V_t=s(Vz);bir=r(V_t,"from_pretrained()"),V_t.forEach(t),Fir=r(YK," class method or the "),Xz=n(YK,"A",{href:!0});var X_t=s(Xz);vir=r(X_t,"from_config()"),X_t.forEach(t),Tir=r(YK,` class
method.`),YK.forEach(t),Mir=i(ml),I8=n(ml,"P",{});var zNe=s(I8);Eir=r(zNe,"This class cannot be instantiated directly using "),Lbe=n(zNe,"CODE",{});var z_t=s(Lbe);Cir=r(z_t,"__init__()"),z_t.forEach(t),wir=r(zNe," (throws an error)."),zNe.forEach(t),Air=i(ml),At=n(ml,"DIV",{class:!0});var H0=s(At);T(q8.$$.fragment,H0),yir=i(H0),xbe=n(H0,"P",{});var Q_t=s(xbe);Lir=r(Q_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q_t.forEach(t),xir=i(H0),Od=n(H0,"P",{});var KK=s(Od);$ir=r(KK,`Note:
Loading a model from its configuration file does `),$be=n(KK,"STRONG",{});var W_t=s($be);kir=r(W_t,"not"),W_t.forEach(t),Sir=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(KK,"A",{href:!0});var H_t=s(zz);Rir=r(H_t,"from_pretrained()"),H_t.forEach(t),Bir=r(KK," to load the model weights."),KK.forEach(t),Pir=i(H0),T(u4.$$.fragment,H0),H0.forEach(t),Iir=i(ml),Ar=n(ml,"DIV",{class:!0});var fl=s(Ar);T(N8.$$.fragment,fl),qir=i(fl),kbe=n(fl,"P",{});var U_t=s(kbe);Nir=r(U_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),U_t.forEach(t),jir=i(fl),Za=n(fl,"P",{});var U0=s(Za);Dir=r(U0,"The model class to instantiate is selected based on the "),Sbe=n(U0,"CODE",{});var J_t=s(Sbe);Gir=r(J_t,"model_type"),J_t.forEach(t),Oir=r(U0,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(U0,"CODE",{});var Y_t=s(Rbe);Vir=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),Xir=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(U0,"CODE",{});var K_t=s(Bbe);zir=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),Qir=r(U0,":"),U0.forEach(t),Wir=i(fl),se=n(fl,"UL",{});var le=s(se);p4=n(le,"LI",{});var D$e=s(p4);Pbe=n(D$e,"STRONG",{});var Z_t=s(Pbe);Hir=r(Z_t,"albert"),Z_t.forEach(t),Uir=r(D$e," \u2014 "),Qz=n(D$e,"A",{href:!0});var ebt=s(Qz);Jir=r(ebt,"TFAlbertForPreTraining"),ebt.forEach(t),Yir=r(D$e," (ALBERT model)"),D$e.forEach(t),Kir=i(le),_4=n(le,"LI",{});var G$e=s(_4);Ibe=n(G$e,"STRONG",{});var obt=s(Ibe);Zir=r(obt,"bart"),obt.forEach(t),edr=r(G$e," \u2014 "),Wz=n(G$e,"A",{href:!0});var rbt=s(Wz);odr=r(rbt,"TFBartForConditionalGeneration"),rbt.forEach(t),rdr=r(G$e," (BART model)"),G$e.forEach(t),tdr=i(le),b4=n(le,"LI",{});var O$e=s(b4);qbe=n(O$e,"STRONG",{});var tbt=s(qbe);adr=r(tbt,"bert"),tbt.forEach(t),ndr=r(O$e," \u2014 "),Hz=n(O$e,"A",{href:!0});var abt=s(Hz);sdr=r(abt,"TFBertForPreTraining"),abt.forEach(t),ldr=r(O$e," (BERT model)"),O$e.forEach(t),idr=i(le),F4=n(le,"LI",{});var V$e=s(F4);Nbe=n(V$e,"STRONG",{});var nbt=s(Nbe);ddr=r(nbt,"camembert"),nbt.forEach(t),cdr=r(V$e," \u2014 "),Uz=n(V$e,"A",{href:!0});var sbt=s(Uz);mdr=r(sbt,"TFCamembertForMaskedLM"),sbt.forEach(t),fdr=r(V$e," (CamemBERT model)"),V$e.forEach(t),gdr=i(le),v4=n(le,"LI",{});var X$e=s(v4);jbe=n(X$e,"STRONG",{});var lbt=s(jbe);hdr=r(lbt,"ctrl"),lbt.forEach(t),udr=r(X$e," \u2014 "),Jz=n(X$e,"A",{href:!0});var ibt=s(Jz);pdr=r(ibt,"TFCTRLLMHeadModel"),ibt.forEach(t),_dr=r(X$e," (CTRL model)"),X$e.forEach(t),bdr=i(le),T4=n(le,"LI",{});var z$e=s(T4);Dbe=n(z$e,"STRONG",{});var dbt=s(Dbe);Fdr=r(dbt,"distilbert"),dbt.forEach(t),vdr=r(z$e," \u2014 "),Yz=n(z$e,"A",{href:!0});var cbt=s(Yz);Tdr=r(cbt,"TFDistilBertForMaskedLM"),cbt.forEach(t),Mdr=r(z$e," (DistilBERT model)"),z$e.forEach(t),Edr=i(le),M4=n(le,"LI",{});var Q$e=s(M4);Gbe=n(Q$e,"STRONG",{});var mbt=s(Gbe);Cdr=r(mbt,"electra"),mbt.forEach(t),wdr=r(Q$e," \u2014 "),Kz=n(Q$e,"A",{href:!0});var fbt=s(Kz);Adr=r(fbt,"TFElectraForPreTraining"),fbt.forEach(t),ydr=r(Q$e," (ELECTRA model)"),Q$e.forEach(t),Ldr=i(le),E4=n(le,"LI",{});var W$e=s(E4);Obe=n(W$e,"STRONG",{});var gbt=s(Obe);xdr=r(gbt,"flaubert"),gbt.forEach(t),$dr=r(W$e," \u2014 "),Zz=n(W$e,"A",{href:!0});var hbt=s(Zz);kdr=r(hbt,"TFFlaubertWithLMHeadModel"),hbt.forEach(t),Sdr=r(W$e," (FlauBERT model)"),W$e.forEach(t),Rdr=i(le),C4=n(le,"LI",{});var H$e=s(C4);Vbe=n(H$e,"STRONG",{});var ubt=s(Vbe);Bdr=r(ubt,"funnel"),ubt.forEach(t),Pdr=r(H$e," \u2014 "),eQ=n(H$e,"A",{href:!0});var pbt=s(eQ);Idr=r(pbt,"TFFunnelForPreTraining"),pbt.forEach(t),qdr=r(H$e," (Funnel Transformer model)"),H$e.forEach(t),Ndr=i(le),w4=n(le,"LI",{});var U$e=s(w4);Xbe=n(U$e,"STRONG",{});var _bt=s(Xbe);jdr=r(_bt,"gpt2"),_bt.forEach(t),Ddr=r(U$e," \u2014 "),oQ=n(U$e,"A",{href:!0});var bbt=s(oQ);Gdr=r(bbt,"TFGPT2LMHeadModel"),bbt.forEach(t),Odr=r(U$e," (OpenAI GPT-2 model)"),U$e.forEach(t),Vdr=i(le),A4=n(le,"LI",{});var J$e=s(A4);zbe=n(J$e,"STRONG",{});var Fbt=s(zbe);Xdr=r(Fbt,"layoutlm"),Fbt.forEach(t),zdr=r(J$e," \u2014 "),rQ=n(J$e,"A",{href:!0});var vbt=s(rQ);Qdr=r(vbt,"TFLayoutLMForMaskedLM"),vbt.forEach(t),Wdr=r(J$e," (LayoutLM model)"),J$e.forEach(t),Hdr=i(le),y4=n(le,"LI",{});var Y$e=s(y4);Qbe=n(Y$e,"STRONG",{});var Tbt=s(Qbe);Udr=r(Tbt,"lxmert"),Tbt.forEach(t),Jdr=r(Y$e," \u2014 "),tQ=n(Y$e,"A",{href:!0});var Mbt=s(tQ);Ydr=r(Mbt,"TFLxmertForPreTraining"),Mbt.forEach(t),Kdr=r(Y$e," (LXMERT model)"),Y$e.forEach(t),Zdr=i(le),L4=n(le,"LI",{});var K$e=s(L4);Wbe=n(K$e,"STRONG",{});var Ebt=s(Wbe);ecr=r(Ebt,"mobilebert"),Ebt.forEach(t),ocr=r(K$e," \u2014 "),aQ=n(K$e,"A",{href:!0});var Cbt=s(aQ);rcr=r(Cbt,"TFMobileBertForPreTraining"),Cbt.forEach(t),tcr=r(K$e," (MobileBERT model)"),K$e.forEach(t),acr=i(le),x4=n(le,"LI",{});var Z$e=s(x4);Hbe=n(Z$e,"STRONG",{});var wbt=s(Hbe);ncr=r(wbt,"mpnet"),wbt.forEach(t),scr=r(Z$e," \u2014 "),nQ=n(Z$e,"A",{href:!0});var Abt=s(nQ);lcr=r(Abt,"TFMPNetForMaskedLM"),Abt.forEach(t),icr=r(Z$e," (MPNet model)"),Z$e.forEach(t),dcr=i(le),$4=n(le,"LI",{});var eke=s($4);Ube=n(eke,"STRONG",{});var ybt=s(Ube);ccr=r(ybt,"openai-gpt"),ybt.forEach(t),mcr=r(eke," \u2014 "),sQ=n(eke,"A",{href:!0});var Lbt=s(sQ);fcr=r(Lbt,"TFOpenAIGPTLMHeadModel"),Lbt.forEach(t),gcr=r(eke," (OpenAI GPT model)"),eke.forEach(t),hcr=i(le),k4=n(le,"LI",{});var oke=s(k4);Jbe=n(oke,"STRONG",{});var xbt=s(Jbe);ucr=r(xbt,"roberta"),xbt.forEach(t),pcr=r(oke," \u2014 "),lQ=n(oke,"A",{href:!0});var $bt=s(lQ);_cr=r($bt,"TFRobertaForMaskedLM"),$bt.forEach(t),bcr=r(oke," (RoBERTa model)"),oke.forEach(t),Fcr=i(le),S4=n(le,"LI",{});var rke=s(S4);Ybe=n(rke,"STRONG",{});var kbt=s(Ybe);vcr=r(kbt,"t5"),kbt.forEach(t),Tcr=r(rke," \u2014 "),iQ=n(rke,"A",{href:!0});var Sbt=s(iQ);Mcr=r(Sbt,"TFT5ForConditionalGeneration"),Sbt.forEach(t),Ecr=r(rke," (T5 model)"),rke.forEach(t),Ccr=i(le),R4=n(le,"LI",{});var tke=s(R4);Kbe=n(tke,"STRONG",{});var Rbt=s(Kbe);wcr=r(Rbt,"tapas"),Rbt.forEach(t),Acr=r(tke," \u2014 "),dQ=n(tke,"A",{href:!0});var Bbt=s(dQ);ycr=r(Bbt,"TFTapasForMaskedLM"),Bbt.forEach(t),Lcr=r(tke," (TAPAS model)"),tke.forEach(t),xcr=i(le),B4=n(le,"LI",{});var ake=s(B4);Zbe=n(ake,"STRONG",{});var Pbt=s(Zbe);$cr=r(Pbt,"transfo-xl"),Pbt.forEach(t),kcr=r(ake," \u2014 "),cQ=n(ake,"A",{href:!0});var Ibt=s(cQ);Scr=r(Ibt,"TFTransfoXLLMHeadModel"),Ibt.forEach(t),Rcr=r(ake," (Transformer-XL model)"),ake.forEach(t),Bcr=i(le),P4=n(le,"LI",{});var nke=s(P4);e2e=n(nke,"STRONG",{});var qbt=s(e2e);Pcr=r(qbt,"vit_mae"),qbt.forEach(t),Icr=r(nke," \u2014 "),mQ=n(nke,"A",{href:!0});var Nbt=s(mQ);qcr=r(Nbt,"TFViTMAEForPreTraining"),Nbt.forEach(t),Ncr=r(nke," (ViTMAE model)"),nke.forEach(t),jcr=i(le),I4=n(le,"LI",{});var ske=s(I4);o2e=n(ske,"STRONG",{});var jbt=s(o2e);Dcr=r(jbt,"xlm"),jbt.forEach(t),Gcr=r(ske," \u2014 "),fQ=n(ske,"A",{href:!0});var Dbt=s(fQ);Ocr=r(Dbt,"TFXLMWithLMHeadModel"),Dbt.forEach(t),Vcr=r(ske," (XLM model)"),ske.forEach(t),Xcr=i(le),q4=n(le,"LI",{});var lke=s(q4);r2e=n(lke,"STRONG",{});var Gbt=s(r2e);zcr=r(Gbt,"xlm-roberta"),Gbt.forEach(t),Qcr=r(lke," \u2014 "),gQ=n(lke,"A",{href:!0});var Obt=s(gQ);Wcr=r(Obt,"TFXLMRobertaForMaskedLM"),Obt.forEach(t),Hcr=r(lke," (XLM-RoBERTa model)"),lke.forEach(t),Ucr=i(le),N4=n(le,"LI",{});var ike=s(N4);t2e=n(ike,"STRONG",{});var Vbt=s(t2e);Jcr=r(Vbt,"xlnet"),Vbt.forEach(t),Ycr=r(ike," \u2014 "),hQ=n(ike,"A",{href:!0});var Xbt=s(hQ);Kcr=r(Xbt,"TFXLNetLMHeadModel"),Xbt.forEach(t),Zcr=r(ike," (XLNet model)"),ike.forEach(t),le.forEach(t),emr=i(fl),T(j4.$$.fragment,fl),fl.forEach(t),ml.forEach(t),DIe=i(m),Vd=n(m,"H2",{class:!0});var QNe=s(Vd);D4=n(QNe,"A",{id:!0,class:!0,href:!0});var zbt=s(D4);a2e=n(zbt,"SPAN",{});var Qbt=s(a2e);T(j8.$$.fragment,Qbt),Qbt.forEach(t),zbt.forEach(t),omr=i(QNe),n2e=n(QNe,"SPAN",{});var Wbt=s(n2e);rmr=r(Wbt,"TFAutoModelForCausalLM"),Wbt.forEach(t),QNe.forEach(t),GIe=i(m),Zo=n(m,"DIV",{class:!0});var gl=s(Zo);T(D8.$$.fragment,gl),tmr=i(gl),Xd=n(gl,"P",{});var ZK=s(Xd);amr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uQ=n(ZK,"A",{href:!0});var Hbt=s(uQ);nmr=r(Hbt,"from_pretrained()"),Hbt.forEach(t),smr=r(ZK," class method or the "),pQ=n(ZK,"A",{href:!0});var Ubt=s(pQ);lmr=r(Ubt,"from_config()"),Ubt.forEach(t),imr=r(ZK,` class
method.`),ZK.forEach(t),dmr=i(gl),G8=n(gl,"P",{});var WNe=s(G8);cmr=r(WNe,"This class cannot be instantiated directly using "),s2e=n(WNe,"CODE",{});var Jbt=s(s2e);mmr=r(Jbt,"__init__()"),Jbt.forEach(t),fmr=r(WNe," (throws an error)."),WNe.forEach(t),gmr=i(gl),yt=n(gl,"DIV",{class:!0});var J0=s(yt);T(O8.$$.fragment,J0),hmr=i(J0),l2e=n(J0,"P",{});var Ybt=s(l2e);umr=r(Ybt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ybt.forEach(t),pmr=i(J0),zd=n(J0,"P",{});var eZ=s(zd);_mr=r(eZ,`Note:
Loading a model from its configuration file does `),i2e=n(eZ,"STRONG",{});var Kbt=s(i2e);bmr=r(Kbt,"not"),Kbt.forEach(t),Fmr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(eZ,"A",{href:!0});var Zbt=s(_Q);vmr=r(Zbt,"from_pretrained()"),Zbt.forEach(t),Tmr=r(eZ," to load the model weights."),eZ.forEach(t),Mmr=i(J0),T(G4.$$.fragment,J0),J0.forEach(t),Emr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(V8.$$.fragment,hl),Cmr=i(hl),d2e=n(hl,"P",{});var e2t=s(d2e);wmr=r(e2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e2t.forEach(t),Amr=i(hl),en=n(hl,"P",{});var Y0=s(en);ymr=r(Y0,"The model class to instantiate is selected based on the "),c2e=n(Y0,"CODE",{});var o2t=s(c2e);Lmr=r(o2t,"model_type"),o2t.forEach(t),xmr=r(Y0,` property of the config object (either
passed as an argument or loaded from `),m2e=n(Y0,"CODE",{});var r2t=s(m2e);$mr=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),kmr=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(Y0,"CODE",{});var t2t=s(f2e);Smr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),Rmr=r(Y0,":"),Y0.forEach(t),Bmr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);O4=n(Ce,"LI",{});var dke=s(O4);g2e=n(dke,"STRONG",{});var a2t=s(g2e);Pmr=r(a2t,"bert"),a2t.forEach(t),Imr=r(dke," \u2014 "),bQ=n(dke,"A",{href:!0});var n2t=s(bQ);qmr=r(n2t,"TFBertLMHeadModel"),n2t.forEach(t),Nmr=r(dke," (BERT model)"),dke.forEach(t),jmr=i(Ce),V4=n(Ce,"LI",{});var cke=s(V4);h2e=n(cke,"STRONG",{});var s2t=s(h2e);Dmr=r(s2t,"camembert"),s2t.forEach(t),Gmr=r(cke," \u2014 "),FQ=n(cke,"A",{href:!0});var l2t=s(FQ);Omr=r(l2t,"TFCamembertForCausalLM"),l2t.forEach(t),Vmr=r(cke," (CamemBERT model)"),cke.forEach(t),Xmr=i(Ce),X4=n(Ce,"LI",{});var mke=s(X4);u2e=n(mke,"STRONG",{});var i2t=s(u2e);zmr=r(i2t,"ctrl"),i2t.forEach(t),Qmr=r(mke," \u2014 "),vQ=n(mke,"A",{href:!0});var d2t=s(vQ);Wmr=r(d2t,"TFCTRLLMHeadModel"),d2t.forEach(t),Hmr=r(mke," (CTRL model)"),mke.forEach(t),Umr=i(Ce),z4=n(Ce,"LI",{});var fke=s(z4);p2e=n(fke,"STRONG",{});var c2t=s(p2e);Jmr=r(c2t,"gpt2"),c2t.forEach(t),Ymr=r(fke," \u2014 "),TQ=n(fke,"A",{href:!0});var m2t=s(TQ);Kmr=r(m2t,"TFGPT2LMHeadModel"),m2t.forEach(t),Zmr=r(fke," (OpenAI GPT-2 model)"),fke.forEach(t),efr=i(Ce),Q4=n(Ce,"LI",{});var gke=s(Q4);_2e=n(gke,"STRONG",{});var f2t=s(_2e);ofr=r(f2t,"gptj"),f2t.forEach(t),rfr=r(gke," \u2014 "),MQ=n(gke,"A",{href:!0});var g2t=s(MQ);tfr=r(g2t,"TFGPTJForCausalLM"),g2t.forEach(t),afr=r(gke," (GPT-J model)"),gke.forEach(t),nfr=i(Ce),W4=n(Ce,"LI",{});var hke=s(W4);b2e=n(hke,"STRONG",{});var h2t=s(b2e);sfr=r(h2t,"openai-gpt"),h2t.forEach(t),lfr=r(hke," \u2014 "),EQ=n(hke,"A",{href:!0});var u2t=s(EQ);ifr=r(u2t,"TFOpenAIGPTLMHeadModel"),u2t.forEach(t),dfr=r(hke," (OpenAI GPT model)"),hke.forEach(t),cfr=i(Ce),H4=n(Ce,"LI",{});var uke=s(H4);F2e=n(uke,"STRONG",{});var p2t=s(F2e);mfr=r(p2t,"rembert"),p2t.forEach(t),ffr=r(uke," \u2014 "),CQ=n(uke,"A",{href:!0});var _2t=s(CQ);gfr=r(_2t,"TFRemBertForCausalLM"),_2t.forEach(t),hfr=r(uke," (RemBERT model)"),uke.forEach(t),ufr=i(Ce),U4=n(Ce,"LI",{});var pke=s(U4);v2e=n(pke,"STRONG",{});var b2t=s(v2e);pfr=r(b2t,"roberta"),b2t.forEach(t),_fr=r(pke," \u2014 "),wQ=n(pke,"A",{href:!0});var F2t=s(wQ);bfr=r(F2t,"TFRobertaForCausalLM"),F2t.forEach(t),Ffr=r(pke," (RoBERTa model)"),pke.forEach(t),vfr=i(Ce),J4=n(Ce,"LI",{});var _ke=s(J4);T2e=n(_ke,"STRONG",{});var v2t=s(T2e);Tfr=r(v2t,"roformer"),v2t.forEach(t),Mfr=r(_ke," \u2014 "),AQ=n(_ke,"A",{href:!0});var T2t=s(AQ);Efr=r(T2t,"TFRoFormerForCausalLM"),T2t.forEach(t),Cfr=r(_ke," (RoFormer model)"),_ke.forEach(t),wfr=i(Ce),Y4=n(Ce,"LI",{});var bke=s(Y4);M2e=n(bke,"STRONG",{});var M2t=s(M2e);Afr=r(M2t,"transfo-xl"),M2t.forEach(t),yfr=r(bke," \u2014 "),yQ=n(bke,"A",{href:!0});var E2t=s(yQ);Lfr=r(E2t,"TFTransfoXLLMHeadModel"),E2t.forEach(t),xfr=r(bke," (Transformer-XL model)"),bke.forEach(t),$fr=i(Ce),K4=n(Ce,"LI",{});var Fke=s(K4);E2e=n(Fke,"STRONG",{});var C2t=s(E2e);kfr=r(C2t,"xlm"),C2t.forEach(t),Sfr=r(Fke," \u2014 "),LQ=n(Fke,"A",{href:!0});var w2t=s(LQ);Rfr=r(w2t,"TFXLMWithLMHeadModel"),w2t.forEach(t),Bfr=r(Fke," (XLM model)"),Fke.forEach(t),Pfr=i(Ce),Z4=n(Ce,"LI",{});var vke=s(Z4);C2e=n(vke,"STRONG",{});var A2t=s(C2e);Ifr=r(A2t,"xlnet"),A2t.forEach(t),qfr=r(vke," \u2014 "),xQ=n(vke,"A",{href:!0});var y2t=s(xQ);Nfr=r(y2t,"TFXLNetLMHeadModel"),y2t.forEach(t),jfr=r(vke," (XLNet model)"),vke.forEach(t),Ce.forEach(t),Dfr=i(hl),T(eE.$$.fragment,hl),hl.forEach(t),gl.forEach(t),OIe=i(m),Qd=n(m,"H2",{class:!0});var HNe=s(Qd);oE=n(HNe,"A",{id:!0,class:!0,href:!0});var L2t=s(oE);w2e=n(L2t,"SPAN",{});var x2t=s(w2e);T(X8.$$.fragment,x2t),x2t.forEach(t),L2t.forEach(t),Gfr=i(HNe),A2e=n(HNe,"SPAN",{});var $2t=s(A2e);Ofr=r($2t,"TFAutoModelForImageClassification"),$2t.forEach(t),HNe.forEach(t),VIe=i(m),er=n(m,"DIV",{class:!0});var ul=s(er);T(z8.$$.fragment,ul),Vfr=i(ul),Wd=n(ul,"P",{});var oZ=s(Wd);Xfr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$Q=n(oZ,"A",{href:!0});var k2t=s($Q);zfr=r(k2t,"from_pretrained()"),k2t.forEach(t),Qfr=r(oZ," class method or the "),kQ=n(oZ,"A",{href:!0});var S2t=s(kQ);Wfr=r(S2t,"from_config()"),S2t.forEach(t),Hfr=r(oZ,` class
method.`),oZ.forEach(t),Ufr=i(ul),Q8=n(ul,"P",{});var UNe=s(Q8);Jfr=r(UNe,"This class cannot be instantiated directly using "),y2e=n(UNe,"CODE",{});var R2t=s(y2e);Yfr=r(R2t,"__init__()"),R2t.forEach(t),Kfr=r(UNe," (throws an error)."),UNe.forEach(t),Zfr=i(ul),Lt=n(ul,"DIV",{class:!0});var K0=s(Lt);T(W8.$$.fragment,K0),egr=i(K0),L2e=n(K0,"P",{});var B2t=s(L2e);ogr=r(B2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B2t.forEach(t),rgr=i(K0),Hd=n(K0,"P",{});var rZ=s(Hd);tgr=r(rZ,`Note:
Loading a model from its configuration file does `),x2e=n(rZ,"STRONG",{});var P2t=s(x2e);agr=r(P2t,"not"),P2t.forEach(t),ngr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(rZ,"A",{href:!0});var I2t=s(SQ);sgr=r(I2t,"from_pretrained()"),I2t.forEach(t),lgr=r(rZ," to load the model weights."),rZ.forEach(t),igr=i(K0),T(rE.$$.fragment,K0),K0.forEach(t),dgr=i(ul),Lr=n(ul,"DIV",{class:!0});var pl=s(Lr);T(H8.$$.fragment,pl),cgr=i(pl),$2e=n(pl,"P",{});var q2t=s($2e);mgr=r(q2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q2t.forEach(t),fgr=i(pl),on=n(pl,"P",{});var Z0=s(on);ggr=r(Z0,"The model class to instantiate is selected based on the "),k2e=n(Z0,"CODE",{});var N2t=s(k2e);hgr=r(N2t,"model_type"),N2t.forEach(t),ugr=r(Z0,` property of the config object (either
passed as an argument or loaded from `),S2e=n(Z0,"CODE",{});var j2t=s(S2e);pgr=r(j2t,"pretrained_model_name_or_path"),j2t.forEach(t),_gr=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(Z0,"CODE",{});var D2t=s(R2e);bgr=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),Fgr=r(Z0,":"),Z0.forEach(t),vgr=i(pl),Ud=n(pl,"UL",{});var tZ=s(Ud);tE=n(tZ,"LI",{});var Tke=s(tE);B2e=n(Tke,"STRONG",{});var G2t=s(B2e);Tgr=r(G2t,"convnext"),G2t.forEach(t),Mgr=r(Tke," \u2014 "),RQ=n(Tke,"A",{href:!0});var O2t=s(RQ);Egr=r(O2t,"TFConvNextForImageClassification"),O2t.forEach(t),Cgr=r(Tke," (ConvNext model)"),Tke.forEach(t),wgr=i(tZ),aE=n(tZ,"LI",{});var Mke=s(aE);P2e=n(Mke,"STRONG",{});var V2t=s(P2e);Agr=r(V2t,"data2vec-vision"),V2t.forEach(t),ygr=r(Mke," \u2014 "),BQ=n(Mke,"A",{href:!0});var X2t=s(BQ);Lgr=r(X2t,"TFData2VecVisionForImageClassification"),X2t.forEach(t),xgr=r(Mke," (Data2VecVision model)"),Mke.forEach(t),$gr=i(tZ),nE=n(tZ,"LI",{});var Eke=s(nE);I2e=n(Eke,"STRONG",{});var z2t=s(I2e);kgr=r(z2t,"vit"),z2t.forEach(t),Sgr=r(Eke," \u2014 "),PQ=n(Eke,"A",{href:!0});var Q2t=s(PQ);Rgr=r(Q2t,"TFViTForImageClassification"),Q2t.forEach(t),Bgr=r(Eke," (ViT model)"),Eke.forEach(t),tZ.forEach(t),Pgr=i(pl),T(sE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),XIe=i(m),Jd=n(m,"H2",{class:!0});var JNe=s(Jd);lE=n(JNe,"A",{id:!0,class:!0,href:!0});var W2t=s(lE);q2e=n(W2t,"SPAN",{});var H2t=s(q2e);T(U8.$$.fragment,H2t),H2t.forEach(t),W2t.forEach(t),Igr=i(JNe),N2e=n(JNe,"SPAN",{});var U2t=s(N2e);qgr=r(U2t,"TFAutoModelForMaskedLM"),U2t.forEach(t),JNe.forEach(t),zIe=i(m),or=n(m,"DIV",{class:!0});var _l=s(or);T(J8.$$.fragment,_l),Ngr=i(_l),Yd=n(_l,"P",{});var aZ=s(Yd);jgr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IQ=n(aZ,"A",{href:!0});var J2t=s(IQ);Dgr=r(J2t,"from_pretrained()"),J2t.forEach(t),Ggr=r(aZ," class method or the "),qQ=n(aZ,"A",{href:!0});var Y2t=s(qQ);Ogr=r(Y2t,"from_config()"),Y2t.forEach(t),Vgr=r(aZ,` class
method.`),aZ.forEach(t),Xgr=i(_l),Y8=n(_l,"P",{});var YNe=s(Y8);zgr=r(YNe,"This class cannot be instantiated directly using "),j2e=n(YNe,"CODE",{});var K2t=s(j2e);Qgr=r(K2t,"__init__()"),K2t.forEach(t),Wgr=r(YNe," (throws an error)."),YNe.forEach(t),Hgr=i(_l),xt=n(_l,"DIV",{class:!0});var e6=s(xt);T(K8.$$.fragment,e6),Ugr=i(e6),D2e=n(e6,"P",{});var Z2t=s(D2e);Jgr=r(Z2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z2t.forEach(t),Ygr=i(e6),Kd=n(e6,"P",{});var nZ=s(Kd);Kgr=r(nZ,`Note:
Loading a model from its configuration file does `),G2e=n(nZ,"STRONG",{});var eFt=s(G2e);Zgr=r(eFt,"not"),eFt.forEach(t),ehr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(nZ,"A",{href:!0});var oFt=s(NQ);ohr=r(oFt,"from_pretrained()"),oFt.forEach(t),rhr=r(nZ," to load the model weights."),nZ.forEach(t),thr=i(e6),T(iE.$$.fragment,e6),e6.forEach(t),ahr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(Z8.$$.fragment,bl),nhr=i(bl),O2e=n(bl,"P",{});var rFt=s(O2e);shr=r(rFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rFt.forEach(t),lhr=i(bl),rn=n(bl,"P",{});var o6=s(rn);ihr=r(o6,"The model class to instantiate is selected based on the "),V2e=n(o6,"CODE",{});var tFt=s(V2e);dhr=r(tFt,"model_type"),tFt.forEach(t),chr=r(o6,` property of the config object (either
passed as an argument or loaded from `),X2e=n(o6,"CODE",{});var aFt=s(X2e);mhr=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),fhr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(o6,"CODE",{});var nFt=s(z2e);ghr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),hhr=r(o6,":"),o6.forEach(t),uhr=i(bl),ie=n(bl,"UL",{});var me=s(ie);dE=n(me,"LI",{});var Cke=s(dE);Q2e=n(Cke,"STRONG",{});var sFt=s(Q2e);phr=r(sFt,"albert"),sFt.forEach(t),_hr=r(Cke," \u2014 "),jQ=n(Cke,"A",{href:!0});var lFt=s(jQ);bhr=r(lFt,"TFAlbertForMaskedLM"),lFt.forEach(t),Fhr=r(Cke," (ALBERT model)"),Cke.forEach(t),vhr=i(me),cE=n(me,"LI",{});var wke=s(cE);W2e=n(wke,"STRONG",{});var iFt=s(W2e);Thr=r(iFt,"bert"),iFt.forEach(t),Mhr=r(wke," \u2014 "),DQ=n(wke,"A",{href:!0});var dFt=s(DQ);Ehr=r(dFt,"TFBertForMaskedLM"),dFt.forEach(t),Chr=r(wke," (BERT model)"),wke.forEach(t),whr=i(me),mE=n(me,"LI",{});var Ake=s(mE);H2e=n(Ake,"STRONG",{});var cFt=s(H2e);Ahr=r(cFt,"camembert"),cFt.forEach(t),yhr=r(Ake," \u2014 "),GQ=n(Ake,"A",{href:!0});var mFt=s(GQ);Lhr=r(mFt,"TFCamembertForMaskedLM"),mFt.forEach(t),xhr=r(Ake," (CamemBERT model)"),Ake.forEach(t),$hr=i(me),fE=n(me,"LI",{});var yke=s(fE);U2e=n(yke,"STRONG",{});var fFt=s(U2e);khr=r(fFt,"convbert"),fFt.forEach(t),Shr=r(yke," \u2014 "),OQ=n(yke,"A",{href:!0});var gFt=s(OQ);Rhr=r(gFt,"TFConvBertForMaskedLM"),gFt.forEach(t),Bhr=r(yke," (ConvBERT model)"),yke.forEach(t),Phr=i(me),gE=n(me,"LI",{});var Lke=s(gE);J2e=n(Lke,"STRONG",{});var hFt=s(J2e);Ihr=r(hFt,"deberta"),hFt.forEach(t),qhr=r(Lke," \u2014 "),VQ=n(Lke,"A",{href:!0});var uFt=s(VQ);Nhr=r(uFt,"TFDebertaForMaskedLM"),uFt.forEach(t),jhr=r(Lke," (DeBERTa model)"),Lke.forEach(t),Dhr=i(me),hE=n(me,"LI",{});var xke=s(hE);Y2e=n(xke,"STRONG",{});var pFt=s(Y2e);Ghr=r(pFt,"deberta-v2"),pFt.forEach(t),Ohr=r(xke," \u2014 "),XQ=n(xke,"A",{href:!0});var _Ft=s(XQ);Vhr=r(_Ft,"TFDebertaV2ForMaskedLM"),_Ft.forEach(t),Xhr=r(xke," (DeBERTa-v2 model)"),xke.forEach(t),zhr=i(me),uE=n(me,"LI",{});var $ke=s(uE);K2e=n($ke,"STRONG",{});var bFt=s(K2e);Qhr=r(bFt,"distilbert"),bFt.forEach(t),Whr=r($ke," \u2014 "),zQ=n($ke,"A",{href:!0});var FFt=s(zQ);Hhr=r(FFt,"TFDistilBertForMaskedLM"),FFt.forEach(t),Uhr=r($ke," (DistilBERT model)"),$ke.forEach(t),Jhr=i(me),pE=n(me,"LI",{});var kke=s(pE);Z2e=n(kke,"STRONG",{});var vFt=s(Z2e);Yhr=r(vFt,"electra"),vFt.forEach(t),Khr=r(kke," \u2014 "),QQ=n(kke,"A",{href:!0});var TFt=s(QQ);Zhr=r(TFt,"TFElectraForMaskedLM"),TFt.forEach(t),eur=r(kke," (ELECTRA model)"),kke.forEach(t),our=i(me),_E=n(me,"LI",{});var Ske=s(_E);eFe=n(Ske,"STRONG",{});var MFt=s(eFe);rur=r(MFt,"flaubert"),MFt.forEach(t),tur=r(Ske," \u2014 "),WQ=n(Ske,"A",{href:!0});var EFt=s(WQ);aur=r(EFt,"TFFlaubertWithLMHeadModel"),EFt.forEach(t),nur=r(Ske," (FlauBERT model)"),Ske.forEach(t),sur=i(me),bE=n(me,"LI",{});var Rke=s(bE);oFe=n(Rke,"STRONG",{});var CFt=s(oFe);lur=r(CFt,"funnel"),CFt.forEach(t),iur=r(Rke," \u2014 "),HQ=n(Rke,"A",{href:!0});var wFt=s(HQ);dur=r(wFt,"TFFunnelForMaskedLM"),wFt.forEach(t),cur=r(Rke," (Funnel Transformer model)"),Rke.forEach(t),mur=i(me),FE=n(me,"LI",{});var Bke=s(FE);rFe=n(Bke,"STRONG",{});var AFt=s(rFe);fur=r(AFt,"layoutlm"),AFt.forEach(t),gur=r(Bke," \u2014 "),UQ=n(Bke,"A",{href:!0});var yFt=s(UQ);hur=r(yFt,"TFLayoutLMForMaskedLM"),yFt.forEach(t),uur=r(Bke," (LayoutLM model)"),Bke.forEach(t),pur=i(me),vE=n(me,"LI",{});var Pke=s(vE);tFe=n(Pke,"STRONG",{});var LFt=s(tFe);_ur=r(LFt,"longformer"),LFt.forEach(t),bur=r(Pke," \u2014 "),JQ=n(Pke,"A",{href:!0});var xFt=s(JQ);Fur=r(xFt,"TFLongformerForMaskedLM"),xFt.forEach(t),vur=r(Pke," (Longformer model)"),Pke.forEach(t),Tur=i(me),TE=n(me,"LI",{});var Ike=s(TE);aFe=n(Ike,"STRONG",{});var $Ft=s(aFe);Mur=r($Ft,"mobilebert"),$Ft.forEach(t),Eur=r(Ike," \u2014 "),YQ=n(Ike,"A",{href:!0});var kFt=s(YQ);Cur=r(kFt,"TFMobileBertForMaskedLM"),kFt.forEach(t),wur=r(Ike," (MobileBERT model)"),Ike.forEach(t),Aur=i(me),ME=n(me,"LI",{});var qke=s(ME);nFe=n(qke,"STRONG",{});var SFt=s(nFe);yur=r(SFt,"mpnet"),SFt.forEach(t),Lur=r(qke," \u2014 "),KQ=n(qke,"A",{href:!0});var RFt=s(KQ);xur=r(RFt,"TFMPNetForMaskedLM"),RFt.forEach(t),$ur=r(qke," (MPNet model)"),qke.forEach(t),kur=i(me),EE=n(me,"LI",{});var Nke=s(EE);sFe=n(Nke,"STRONG",{});var BFt=s(sFe);Sur=r(BFt,"rembert"),BFt.forEach(t),Rur=r(Nke," \u2014 "),ZQ=n(Nke,"A",{href:!0});var PFt=s(ZQ);Bur=r(PFt,"TFRemBertForMaskedLM"),PFt.forEach(t),Pur=r(Nke," (RemBERT model)"),Nke.forEach(t),Iur=i(me),CE=n(me,"LI",{});var jke=s(CE);lFe=n(jke,"STRONG",{});var IFt=s(lFe);qur=r(IFt,"roberta"),IFt.forEach(t),Nur=r(jke," \u2014 "),eW=n(jke,"A",{href:!0});var qFt=s(eW);jur=r(qFt,"TFRobertaForMaskedLM"),qFt.forEach(t),Dur=r(jke," (RoBERTa model)"),jke.forEach(t),Gur=i(me),wE=n(me,"LI",{});var Dke=s(wE);iFe=n(Dke,"STRONG",{});var NFt=s(iFe);Our=r(NFt,"roformer"),NFt.forEach(t),Vur=r(Dke," \u2014 "),oW=n(Dke,"A",{href:!0});var jFt=s(oW);Xur=r(jFt,"TFRoFormerForMaskedLM"),jFt.forEach(t),zur=r(Dke," (RoFormer model)"),Dke.forEach(t),Qur=i(me),AE=n(me,"LI",{});var Gke=s(AE);dFe=n(Gke,"STRONG",{});var DFt=s(dFe);Wur=r(DFt,"tapas"),DFt.forEach(t),Hur=r(Gke," \u2014 "),rW=n(Gke,"A",{href:!0});var GFt=s(rW);Uur=r(GFt,"TFTapasForMaskedLM"),GFt.forEach(t),Jur=r(Gke," (TAPAS model)"),Gke.forEach(t),Yur=i(me),yE=n(me,"LI",{});var Oke=s(yE);cFe=n(Oke,"STRONG",{});var OFt=s(cFe);Kur=r(OFt,"xlm"),OFt.forEach(t),Zur=r(Oke," \u2014 "),tW=n(Oke,"A",{href:!0});var VFt=s(tW);epr=r(VFt,"TFXLMWithLMHeadModel"),VFt.forEach(t),opr=r(Oke," (XLM model)"),Oke.forEach(t),rpr=i(me),LE=n(me,"LI",{});var Vke=s(LE);mFe=n(Vke,"STRONG",{});var XFt=s(mFe);tpr=r(XFt,"xlm-roberta"),XFt.forEach(t),apr=r(Vke," \u2014 "),aW=n(Vke,"A",{href:!0});var zFt=s(aW);npr=r(zFt,"TFXLMRobertaForMaskedLM"),zFt.forEach(t),spr=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),me.forEach(t),lpr=i(bl),T(xE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),QIe=i(m),Zd=n(m,"H2",{class:!0});var KNe=s(Zd);$E=n(KNe,"A",{id:!0,class:!0,href:!0});var QFt=s($E);fFe=n(QFt,"SPAN",{});var WFt=s(fFe);T(ex.$$.fragment,WFt),WFt.forEach(t),QFt.forEach(t),ipr=i(KNe),gFe=n(KNe,"SPAN",{});var HFt=s(gFe);dpr=r(HFt,"TFAutoModelForSeq2SeqLM"),HFt.forEach(t),KNe.forEach(t),WIe=i(m),rr=n(m,"DIV",{class:!0});var Fl=s(rr);T(ox.$$.fragment,Fl),cpr=i(Fl),ec=n(Fl,"P",{});var sZ=s(ec);mpr=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nW=n(sZ,"A",{href:!0});var UFt=s(nW);fpr=r(UFt,"from_pretrained()"),UFt.forEach(t),gpr=r(sZ," class method or the "),sW=n(sZ,"A",{href:!0});var JFt=s(sW);hpr=r(JFt,"from_config()"),JFt.forEach(t),upr=r(sZ,` class
method.`),sZ.forEach(t),ppr=i(Fl),rx=n(Fl,"P",{});var ZNe=s(rx);_pr=r(ZNe,"This class cannot be instantiated directly using "),hFe=n(ZNe,"CODE",{});var YFt=s(hFe);bpr=r(YFt,"__init__()"),YFt.forEach(t),Fpr=r(ZNe," (throws an error)."),ZNe.forEach(t),vpr=i(Fl),$t=n(Fl,"DIV",{class:!0});var r6=s($t);T(tx.$$.fragment,r6),Tpr=i(r6),uFe=n(r6,"P",{});var KFt=s(uFe);Mpr=r(KFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KFt.forEach(t),Epr=i(r6),oc=n(r6,"P",{});var lZ=s(oc);Cpr=r(lZ,`Note:
Loading a model from its configuration file does `),pFe=n(lZ,"STRONG",{});var ZFt=s(pFe);wpr=r(ZFt,"not"),ZFt.forEach(t),Apr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(lZ,"A",{href:!0});var evt=s(lW);ypr=r(evt,"from_pretrained()"),evt.forEach(t),Lpr=r(lZ," to load the model weights."),lZ.forEach(t),xpr=i(r6),T(kE.$$.fragment,r6),r6.forEach(t),$pr=i(Fl),$r=n(Fl,"DIV",{class:!0});var vl=s($r);T(ax.$$.fragment,vl),kpr=i(vl),_Fe=n(vl,"P",{});var ovt=s(_Fe);Spr=r(ovt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ovt.forEach(t),Rpr=i(vl),tn=n(vl,"P",{});var t6=s(tn);Bpr=r(t6,"The model class to instantiate is selected based on the "),bFe=n(t6,"CODE",{});var rvt=s(bFe);Ppr=r(rvt,"model_type"),rvt.forEach(t),Ipr=r(t6,` property of the config object (either
passed as an argument or loaded from `),FFe=n(t6,"CODE",{});var tvt=s(FFe);qpr=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),Npr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(t6,"CODE",{});var avt=s(vFe);jpr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),Dpr=r(t6,":"),t6.forEach(t),Gpr=i(vl),ye=n(vl,"UL",{});var Re=s(ye);SE=n(Re,"LI",{});var Xke=s(SE);TFe=n(Xke,"STRONG",{});var nvt=s(TFe);Opr=r(nvt,"bart"),nvt.forEach(t),Vpr=r(Xke," \u2014 "),iW=n(Xke,"A",{href:!0});var svt=s(iW);Xpr=r(svt,"TFBartForConditionalGeneration"),svt.forEach(t),zpr=r(Xke," (BART model)"),Xke.forEach(t),Qpr=i(Re),RE=n(Re,"LI",{});var zke=s(RE);MFe=n(zke,"STRONG",{});var lvt=s(MFe);Wpr=r(lvt,"blenderbot"),lvt.forEach(t),Hpr=r(zke," \u2014 "),dW=n(zke,"A",{href:!0});var ivt=s(dW);Upr=r(ivt,"TFBlenderbotForConditionalGeneration"),ivt.forEach(t),Jpr=r(zke," (Blenderbot model)"),zke.forEach(t),Ypr=i(Re),BE=n(Re,"LI",{});var Qke=s(BE);EFe=n(Qke,"STRONG",{});var dvt=s(EFe);Kpr=r(dvt,"blenderbot-small"),dvt.forEach(t),Zpr=r(Qke," \u2014 "),cW=n(Qke,"A",{href:!0});var cvt=s(cW);e_r=r(cvt,"TFBlenderbotSmallForConditionalGeneration"),cvt.forEach(t),o_r=r(Qke," (BlenderbotSmall model)"),Qke.forEach(t),r_r=i(Re),PE=n(Re,"LI",{});var Wke=s(PE);CFe=n(Wke,"STRONG",{});var mvt=s(CFe);t_r=r(mvt,"encoder-decoder"),mvt.forEach(t),a_r=r(Wke," \u2014 "),mW=n(Wke,"A",{href:!0});var fvt=s(mW);n_r=r(fvt,"TFEncoderDecoderModel"),fvt.forEach(t),s_r=r(Wke," (Encoder decoder model)"),Wke.forEach(t),l_r=i(Re),IE=n(Re,"LI",{});var Hke=s(IE);wFe=n(Hke,"STRONG",{});var gvt=s(wFe);i_r=r(gvt,"led"),gvt.forEach(t),d_r=r(Hke," \u2014 "),fW=n(Hke,"A",{href:!0});var hvt=s(fW);c_r=r(hvt,"TFLEDForConditionalGeneration"),hvt.forEach(t),m_r=r(Hke," (LED model)"),Hke.forEach(t),f_r=i(Re),qE=n(Re,"LI",{});var Uke=s(qE);AFe=n(Uke,"STRONG",{});var uvt=s(AFe);g_r=r(uvt,"marian"),uvt.forEach(t),h_r=r(Uke," \u2014 "),gW=n(Uke,"A",{href:!0});var pvt=s(gW);u_r=r(pvt,"TFMarianMTModel"),pvt.forEach(t),p_r=r(Uke," (Marian model)"),Uke.forEach(t),__r=i(Re),NE=n(Re,"LI",{});var Jke=s(NE);yFe=n(Jke,"STRONG",{});var _vt=s(yFe);b_r=r(_vt,"mbart"),_vt.forEach(t),F_r=r(Jke," \u2014 "),hW=n(Jke,"A",{href:!0});var bvt=s(hW);v_r=r(bvt,"TFMBartForConditionalGeneration"),bvt.forEach(t),T_r=r(Jke," (mBART model)"),Jke.forEach(t),M_r=i(Re),jE=n(Re,"LI",{});var Yke=s(jE);LFe=n(Yke,"STRONG",{});var Fvt=s(LFe);E_r=r(Fvt,"mt5"),Fvt.forEach(t),C_r=r(Yke," \u2014 "),uW=n(Yke,"A",{href:!0});var vvt=s(uW);w_r=r(vvt,"TFMT5ForConditionalGeneration"),vvt.forEach(t),A_r=r(Yke," (mT5 model)"),Yke.forEach(t),y_r=i(Re),DE=n(Re,"LI",{});var Kke=s(DE);xFe=n(Kke,"STRONG",{});var Tvt=s(xFe);L_r=r(Tvt,"pegasus"),Tvt.forEach(t),x_r=r(Kke," \u2014 "),pW=n(Kke,"A",{href:!0});var Mvt=s(pW);$_r=r(Mvt,"TFPegasusForConditionalGeneration"),Mvt.forEach(t),k_r=r(Kke," (Pegasus model)"),Kke.forEach(t),S_r=i(Re),GE=n(Re,"LI",{});var Zke=s(GE);$Fe=n(Zke,"STRONG",{});var Evt=s($Fe);R_r=r(Evt,"t5"),Evt.forEach(t),B_r=r(Zke," \u2014 "),_W=n(Zke,"A",{href:!0});var Cvt=s(_W);P_r=r(Cvt,"TFT5ForConditionalGeneration"),Cvt.forEach(t),I_r=r(Zke," (T5 model)"),Zke.forEach(t),Re.forEach(t),q_r=i(vl),T(OE.$$.fragment,vl),vl.forEach(t),Fl.forEach(t),HIe=i(m),rc=n(m,"H2",{class:!0});var eje=s(rc);VE=n(eje,"A",{id:!0,class:!0,href:!0});var wvt=s(VE);kFe=n(wvt,"SPAN",{});var Avt=s(kFe);T(nx.$$.fragment,Avt),Avt.forEach(t),wvt.forEach(t),N_r=i(eje),SFe=n(eje,"SPAN",{});var yvt=s(SFe);j_r=r(yvt,"TFAutoModelForSequenceClassification"),yvt.forEach(t),eje.forEach(t),UIe=i(m),tr=n(m,"DIV",{class:!0});var Tl=s(tr);T(sx.$$.fragment,Tl),D_r=i(Tl),tc=n(Tl,"P",{});var iZ=s(tc);G_r=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bW=n(iZ,"A",{href:!0});var Lvt=s(bW);O_r=r(Lvt,"from_pretrained()"),Lvt.forEach(t),V_r=r(iZ," class method or the "),FW=n(iZ,"A",{href:!0});var xvt=s(FW);X_r=r(xvt,"from_config()"),xvt.forEach(t),z_r=r(iZ,` class
method.`),iZ.forEach(t),Q_r=i(Tl),lx=n(Tl,"P",{});var oje=s(lx);W_r=r(oje,"This class cannot be instantiated directly using "),RFe=n(oje,"CODE",{});var $vt=s(RFe);H_r=r($vt,"__init__()"),$vt.forEach(t),U_r=r(oje," (throws an error)."),oje.forEach(t),J_r=i(Tl),kt=n(Tl,"DIV",{class:!0});var a6=s(kt);T(ix.$$.fragment,a6),Y_r=i(a6),BFe=n(a6,"P",{});var kvt=s(BFe);K_r=r(kvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kvt.forEach(t),Z_r=i(a6),ac=n(a6,"P",{});var dZ=s(ac);ebr=r(dZ,`Note:
Loading a model from its configuration file does `),PFe=n(dZ,"STRONG",{});var Svt=s(PFe);obr=r(Svt,"not"),Svt.forEach(t),rbr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(dZ,"A",{href:!0});var Rvt=s(vW);tbr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),abr=r(dZ," to load the model weights."),dZ.forEach(t),nbr=i(a6),T(XE.$$.fragment,a6),a6.forEach(t),sbr=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(dx.$$.fragment,Ml),lbr=i(Ml),IFe=n(Ml,"P",{});var Bvt=s(IFe);ibr=r(Bvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bvt.forEach(t),dbr=i(Ml),an=n(Ml,"P",{});var n6=s(an);cbr=r(n6,"The model class to instantiate is selected based on the "),qFe=n(n6,"CODE",{});var Pvt=s(qFe);mbr=r(Pvt,"model_type"),Pvt.forEach(t),fbr=r(n6,` property of the config object (either
passed as an argument or loaded from `),NFe=n(n6,"CODE",{});var Ivt=s(NFe);gbr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),hbr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(n6,"CODE",{});var qvt=s(jFe);ubr=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),pbr=r(n6,":"),n6.forEach(t),_br=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);zE=n(te,"LI",{});var eSe=s(zE);DFe=n(eSe,"STRONG",{});var Nvt=s(DFe);bbr=r(Nvt,"albert"),Nvt.forEach(t),Fbr=r(eSe," \u2014 "),TW=n(eSe,"A",{href:!0});var jvt=s(TW);vbr=r(jvt,"TFAlbertForSequenceClassification"),jvt.forEach(t),Tbr=r(eSe," (ALBERT model)"),eSe.forEach(t),Mbr=i(te),QE=n(te,"LI",{});var oSe=s(QE);GFe=n(oSe,"STRONG",{});var Dvt=s(GFe);Ebr=r(Dvt,"bert"),Dvt.forEach(t),Cbr=r(oSe," \u2014 "),MW=n(oSe,"A",{href:!0});var Gvt=s(MW);wbr=r(Gvt,"TFBertForSequenceClassification"),Gvt.forEach(t),Abr=r(oSe," (BERT model)"),oSe.forEach(t),ybr=i(te),WE=n(te,"LI",{});var rSe=s(WE);OFe=n(rSe,"STRONG",{});var Ovt=s(OFe);Lbr=r(Ovt,"camembert"),Ovt.forEach(t),xbr=r(rSe," \u2014 "),EW=n(rSe,"A",{href:!0});var Vvt=s(EW);$br=r(Vvt,"TFCamembertForSequenceClassification"),Vvt.forEach(t),kbr=r(rSe," (CamemBERT model)"),rSe.forEach(t),Sbr=i(te),HE=n(te,"LI",{});var tSe=s(HE);VFe=n(tSe,"STRONG",{});var Xvt=s(VFe);Rbr=r(Xvt,"convbert"),Xvt.forEach(t),Bbr=r(tSe," \u2014 "),CW=n(tSe,"A",{href:!0});var zvt=s(CW);Pbr=r(zvt,"TFConvBertForSequenceClassification"),zvt.forEach(t),Ibr=r(tSe," (ConvBERT model)"),tSe.forEach(t),qbr=i(te),UE=n(te,"LI",{});var aSe=s(UE);XFe=n(aSe,"STRONG",{});var Qvt=s(XFe);Nbr=r(Qvt,"ctrl"),Qvt.forEach(t),jbr=r(aSe," \u2014 "),wW=n(aSe,"A",{href:!0});var Wvt=s(wW);Dbr=r(Wvt,"TFCTRLForSequenceClassification"),Wvt.forEach(t),Gbr=r(aSe," (CTRL model)"),aSe.forEach(t),Obr=i(te),JE=n(te,"LI",{});var nSe=s(JE);zFe=n(nSe,"STRONG",{});var Hvt=s(zFe);Vbr=r(Hvt,"deberta"),Hvt.forEach(t),Xbr=r(nSe," \u2014 "),AW=n(nSe,"A",{href:!0});var Uvt=s(AW);zbr=r(Uvt,"TFDebertaForSequenceClassification"),Uvt.forEach(t),Qbr=r(nSe," (DeBERTa model)"),nSe.forEach(t),Wbr=i(te),YE=n(te,"LI",{});var sSe=s(YE);QFe=n(sSe,"STRONG",{});var Jvt=s(QFe);Hbr=r(Jvt,"deberta-v2"),Jvt.forEach(t),Ubr=r(sSe," \u2014 "),yW=n(sSe,"A",{href:!0});var Yvt=s(yW);Jbr=r(Yvt,"TFDebertaV2ForSequenceClassification"),Yvt.forEach(t),Ybr=r(sSe," (DeBERTa-v2 model)"),sSe.forEach(t),Kbr=i(te),KE=n(te,"LI",{});var lSe=s(KE);WFe=n(lSe,"STRONG",{});var Kvt=s(WFe);Zbr=r(Kvt,"distilbert"),Kvt.forEach(t),e2r=r(lSe," \u2014 "),LW=n(lSe,"A",{href:!0});var Zvt=s(LW);o2r=r(Zvt,"TFDistilBertForSequenceClassification"),Zvt.forEach(t),r2r=r(lSe," (DistilBERT model)"),lSe.forEach(t),t2r=i(te),ZE=n(te,"LI",{});var iSe=s(ZE);HFe=n(iSe,"STRONG",{});var e1t=s(HFe);a2r=r(e1t,"electra"),e1t.forEach(t),n2r=r(iSe," \u2014 "),xW=n(iSe,"A",{href:!0});var o1t=s(xW);s2r=r(o1t,"TFElectraForSequenceClassification"),o1t.forEach(t),l2r=r(iSe," (ELECTRA model)"),iSe.forEach(t),i2r=i(te),e5=n(te,"LI",{});var dSe=s(e5);UFe=n(dSe,"STRONG",{});var r1t=s(UFe);d2r=r(r1t,"flaubert"),r1t.forEach(t),c2r=r(dSe," \u2014 "),$W=n(dSe,"A",{href:!0});var t1t=s($W);m2r=r(t1t,"TFFlaubertForSequenceClassification"),t1t.forEach(t),f2r=r(dSe," (FlauBERT model)"),dSe.forEach(t),g2r=i(te),o5=n(te,"LI",{});var cSe=s(o5);JFe=n(cSe,"STRONG",{});var a1t=s(JFe);h2r=r(a1t,"funnel"),a1t.forEach(t),u2r=r(cSe," \u2014 "),kW=n(cSe,"A",{href:!0});var n1t=s(kW);p2r=r(n1t,"TFFunnelForSequenceClassification"),n1t.forEach(t),_2r=r(cSe," (Funnel Transformer model)"),cSe.forEach(t),b2r=i(te),r5=n(te,"LI",{});var mSe=s(r5);YFe=n(mSe,"STRONG",{});var s1t=s(YFe);F2r=r(s1t,"gpt2"),s1t.forEach(t),v2r=r(mSe," \u2014 "),SW=n(mSe,"A",{href:!0});var l1t=s(SW);T2r=r(l1t,"TFGPT2ForSequenceClassification"),l1t.forEach(t),M2r=r(mSe," (OpenAI GPT-2 model)"),mSe.forEach(t),E2r=i(te),t5=n(te,"LI",{});var fSe=s(t5);KFe=n(fSe,"STRONG",{});var i1t=s(KFe);C2r=r(i1t,"gptj"),i1t.forEach(t),w2r=r(fSe," \u2014 "),RW=n(fSe,"A",{href:!0});var d1t=s(RW);A2r=r(d1t,"TFGPTJForSequenceClassification"),d1t.forEach(t),y2r=r(fSe," (GPT-J model)"),fSe.forEach(t),L2r=i(te),a5=n(te,"LI",{});var gSe=s(a5);ZFe=n(gSe,"STRONG",{});var c1t=s(ZFe);x2r=r(c1t,"layoutlm"),c1t.forEach(t),$2r=r(gSe," \u2014 "),BW=n(gSe,"A",{href:!0});var m1t=s(BW);k2r=r(m1t,"TFLayoutLMForSequenceClassification"),m1t.forEach(t),S2r=r(gSe," (LayoutLM model)"),gSe.forEach(t),R2r=i(te),n5=n(te,"LI",{});var hSe=s(n5);eve=n(hSe,"STRONG",{});var f1t=s(eve);B2r=r(f1t,"longformer"),f1t.forEach(t),P2r=r(hSe," \u2014 "),PW=n(hSe,"A",{href:!0});var g1t=s(PW);I2r=r(g1t,"TFLongformerForSequenceClassification"),g1t.forEach(t),q2r=r(hSe," (Longformer model)"),hSe.forEach(t),N2r=i(te),s5=n(te,"LI",{});var uSe=s(s5);ove=n(uSe,"STRONG",{});var h1t=s(ove);j2r=r(h1t,"mobilebert"),h1t.forEach(t),D2r=r(uSe," \u2014 "),IW=n(uSe,"A",{href:!0});var u1t=s(IW);G2r=r(u1t,"TFMobileBertForSequenceClassification"),u1t.forEach(t),O2r=r(uSe," (MobileBERT model)"),uSe.forEach(t),V2r=i(te),l5=n(te,"LI",{});var pSe=s(l5);rve=n(pSe,"STRONG",{});var p1t=s(rve);X2r=r(p1t,"mpnet"),p1t.forEach(t),z2r=r(pSe," \u2014 "),qW=n(pSe,"A",{href:!0});var _1t=s(qW);Q2r=r(_1t,"TFMPNetForSequenceClassification"),_1t.forEach(t),W2r=r(pSe," (MPNet model)"),pSe.forEach(t),H2r=i(te),i5=n(te,"LI",{});var _Se=s(i5);tve=n(_Se,"STRONG",{});var b1t=s(tve);U2r=r(b1t,"openai-gpt"),b1t.forEach(t),J2r=r(_Se," \u2014 "),NW=n(_Se,"A",{href:!0});var F1t=s(NW);Y2r=r(F1t,"TFOpenAIGPTForSequenceClassification"),F1t.forEach(t),K2r=r(_Se," (OpenAI GPT model)"),_Se.forEach(t),Z2r=i(te),d5=n(te,"LI",{});var bSe=s(d5);ave=n(bSe,"STRONG",{});var v1t=s(ave);eFr=r(v1t,"rembert"),v1t.forEach(t),oFr=r(bSe," \u2014 "),jW=n(bSe,"A",{href:!0});var T1t=s(jW);rFr=r(T1t,"TFRemBertForSequenceClassification"),T1t.forEach(t),tFr=r(bSe," (RemBERT model)"),bSe.forEach(t),aFr=i(te),c5=n(te,"LI",{});var FSe=s(c5);nve=n(FSe,"STRONG",{});var M1t=s(nve);nFr=r(M1t,"roberta"),M1t.forEach(t),sFr=r(FSe," \u2014 "),DW=n(FSe,"A",{href:!0});var E1t=s(DW);lFr=r(E1t,"TFRobertaForSequenceClassification"),E1t.forEach(t),iFr=r(FSe," (RoBERTa model)"),FSe.forEach(t),dFr=i(te),m5=n(te,"LI",{});var vSe=s(m5);sve=n(vSe,"STRONG",{});var C1t=s(sve);cFr=r(C1t,"roformer"),C1t.forEach(t),mFr=r(vSe," \u2014 "),GW=n(vSe,"A",{href:!0});var w1t=s(GW);fFr=r(w1t,"TFRoFormerForSequenceClassification"),w1t.forEach(t),gFr=r(vSe," (RoFormer model)"),vSe.forEach(t),hFr=i(te),f5=n(te,"LI",{});var TSe=s(f5);lve=n(TSe,"STRONG",{});var A1t=s(lve);uFr=r(A1t,"tapas"),A1t.forEach(t),pFr=r(TSe," \u2014 "),OW=n(TSe,"A",{href:!0});var y1t=s(OW);_Fr=r(y1t,"TFTapasForSequenceClassification"),y1t.forEach(t),bFr=r(TSe," (TAPAS model)"),TSe.forEach(t),FFr=i(te),g5=n(te,"LI",{});var MSe=s(g5);ive=n(MSe,"STRONG",{});var L1t=s(ive);vFr=r(L1t,"transfo-xl"),L1t.forEach(t),TFr=r(MSe," \u2014 "),VW=n(MSe,"A",{href:!0});var x1t=s(VW);MFr=r(x1t,"TFTransfoXLForSequenceClassification"),x1t.forEach(t),EFr=r(MSe," (Transformer-XL model)"),MSe.forEach(t),CFr=i(te),h5=n(te,"LI",{});var ESe=s(h5);dve=n(ESe,"STRONG",{});var $1t=s(dve);wFr=r($1t,"xlm"),$1t.forEach(t),AFr=r(ESe," \u2014 "),XW=n(ESe,"A",{href:!0});var k1t=s(XW);yFr=r(k1t,"TFXLMForSequenceClassification"),k1t.forEach(t),LFr=r(ESe," (XLM model)"),ESe.forEach(t),xFr=i(te),u5=n(te,"LI",{});var CSe=s(u5);cve=n(CSe,"STRONG",{});var S1t=s(cve);$Fr=r(S1t,"xlm-roberta"),S1t.forEach(t),kFr=r(CSe," \u2014 "),zW=n(CSe,"A",{href:!0});var R1t=s(zW);SFr=r(R1t,"TFXLMRobertaForSequenceClassification"),R1t.forEach(t),RFr=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),BFr=i(te),p5=n(te,"LI",{});var wSe=s(p5);mve=n(wSe,"STRONG",{});var B1t=s(mve);PFr=r(B1t,"xlnet"),B1t.forEach(t),IFr=r(wSe," \u2014 "),QW=n(wSe,"A",{href:!0});var P1t=s(QW);qFr=r(P1t,"TFXLNetForSequenceClassification"),P1t.forEach(t),NFr=r(wSe," (XLNet model)"),wSe.forEach(t),te.forEach(t),jFr=i(Ml),T(_5.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),JIe=i(m),nc=n(m,"H2",{class:!0});var rje=s(nc);b5=n(rje,"A",{id:!0,class:!0,href:!0});var I1t=s(b5);fve=n(I1t,"SPAN",{});var q1t=s(fve);T(cx.$$.fragment,q1t),q1t.forEach(t),I1t.forEach(t),DFr=i(rje),gve=n(rje,"SPAN",{});var N1t=s(gve);GFr=r(N1t,"TFAutoModelForMultipleChoice"),N1t.forEach(t),rje.forEach(t),YIe=i(m),ar=n(m,"DIV",{class:!0});var El=s(ar);T(mx.$$.fragment,El),OFr=i(El),sc=n(El,"P",{});var cZ=s(sc);VFr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WW=n(cZ,"A",{href:!0});var j1t=s(WW);XFr=r(j1t,"from_pretrained()"),j1t.forEach(t),zFr=r(cZ," class method or the "),HW=n(cZ,"A",{href:!0});var D1t=s(HW);QFr=r(D1t,"from_config()"),D1t.forEach(t),WFr=r(cZ,` class
method.`),cZ.forEach(t),HFr=i(El),fx=n(El,"P",{});var tje=s(fx);UFr=r(tje,"This class cannot be instantiated directly using "),hve=n(tje,"CODE",{});var G1t=s(hve);JFr=r(G1t,"__init__()"),G1t.forEach(t),YFr=r(tje," (throws an error)."),tje.forEach(t),KFr=i(El),St=n(El,"DIV",{class:!0});var s6=s(St);T(gx.$$.fragment,s6),ZFr=i(s6),uve=n(s6,"P",{});var O1t=s(uve);evr=r(O1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O1t.forEach(t),ovr=i(s6),lc=n(s6,"P",{});var mZ=s(lc);rvr=r(mZ,`Note:
Loading a model from its configuration file does `),pve=n(mZ,"STRONG",{});var V1t=s(pve);tvr=r(V1t,"not"),V1t.forEach(t),avr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(mZ,"A",{href:!0});var X1t=s(UW);nvr=r(X1t,"from_pretrained()"),X1t.forEach(t),svr=r(mZ," to load the model weights."),mZ.forEach(t),lvr=i(s6),T(F5.$$.fragment,s6),s6.forEach(t),ivr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(hx.$$.fragment,Cl),dvr=i(Cl),_ve=n(Cl,"P",{});var z1t=s(_ve);cvr=r(z1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z1t.forEach(t),mvr=i(Cl),nn=n(Cl,"P",{});var l6=s(nn);fvr=r(l6,"The model class to instantiate is selected based on the "),bve=n(l6,"CODE",{});var Q1t=s(bve);gvr=r(Q1t,"model_type"),Q1t.forEach(t),hvr=r(l6,` property of the config object (either
passed as an argument or loaded from `),Fve=n(l6,"CODE",{});var W1t=s(Fve);uvr=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),pvr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(l6,"CODE",{});var H1t=s(vve);_vr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),bvr=r(l6,":"),l6.forEach(t),Fvr=i(Cl),he=n(Cl,"UL",{});var pe=s(he);v5=n(pe,"LI",{});var ASe=s(v5);Tve=n(ASe,"STRONG",{});var U1t=s(Tve);vvr=r(U1t,"albert"),U1t.forEach(t),Tvr=r(ASe," \u2014 "),JW=n(ASe,"A",{href:!0});var J1t=s(JW);Mvr=r(J1t,"TFAlbertForMultipleChoice"),J1t.forEach(t),Evr=r(ASe," (ALBERT model)"),ASe.forEach(t),Cvr=i(pe),T5=n(pe,"LI",{});var ySe=s(T5);Mve=n(ySe,"STRONG",{});var Y1t=s(Mve);wvr=r(Y1t,"bert"),Y1t.forEach(t),Avr=r(ySe," \u2014 "),YW=n(ySe,"A",{href:!0});var K1t=s(YW);yvr=r(K1t,"TFBertForMultipleChoice"),K1t.forEach(t),Lvr=r(ySe," (BERT model)"),ySe.forEach(t),xvr=i(pe),M5=n(pe,"LI",{});var LSe=s(M5);Eve=n(LSe,"STRONG",{});var Z1t=s(Eve);$vr=r(Z1t,"camembert"),Z1t.forEach(t),kvr=r(LSe," \u2014 "),KW=n(LSe,"A",{href:!0});var eTt=s(KW);Svr=r(eTt,"TFCamembertForMultipleChoice"),eTt.forEach(t),Rvr=r(LSe," (CamemBERT model)"),LSe.forEach(t),Bvr=i(pe),E5=n(pe,"LI",{});var xSe=s(E5);Cve=n(xSe,"STRONG",{});var oTt=s(Cve);Pvr=r(oTt,"convbert"),oTt.forEach(t),Ivr=r(xSe," \u2014 "),ZW=n(xSe,"A",{href:!0});var rTt=s(ZW);qvr=r(rTt,"TFConvBertForMultipleChoice"),rTt.forEach(t),Nvr=r(xSe," (ConvBERT model)"),xSe.forEach(t),jvr=i(pe),C5=n(pe,"LI",{});var $Se=s(C5);wve=n($Se,"STRONG",{});var tTt=s(wve);Dvr=r(tTt,"distilbert"),tTt.forEach(t),Gvr=r($Se," \u2014 "),eH=n($Se,"A",{href:!0});var aTt=s(eH);Ovr=r(aTt,"TFDistilBertForMultipleChoice"),aTt.forEach(t),Vvr=r($Se," (DistilBERT model)"),$Se.forEach(t),Xvr=i(pe),w5=n(pe,"LI",{});var kSe=s(w5);Ave=n(kSe,"STRONG",{});var nTt=s(Ave);zvr=r(nTt,"electra"),nTt.forEach(t),Qvr=r(kSe," \u2014 "),oH=n(kSe,"A",{href:!0});var sTt=s(oH);Wvr=r(sTt,"TFElectraForMultipleChoice"),sTt.forEach(t),Hvr=r(kSe," (ELECTRA model)"),kSe.forEach(t),Uvr=i(pe),A5=n(pe,"LI",{});var SSe=s(A5);yve=n(SSe,"STRONG",{});var lTt=s(yve);Jvr=r(lTt,"flaubert"),lTt.forEach(t),Yvr=r(SSe," \u2014 "),rH=n(SSe,"A",{href:!0});var iTt=s(rH);Kvr=r(iTt,"TFFlaubertForMultipleChoice"),iTt.forEach(t),Zvr=r(SSe," (FlauBERT model)"),SSe.forEach(t),e1r=i(pe),y5=n(pe,"LI",{});var RSe=s(y5);Lve=n(RSe,"STRONG",{});var dTt=s(Lve);o1r=r(dTt,"funnel"),dTt.forEach(t),r1r=r(RSe," \u2014 "),tH=n(RSe,"A",{href:!0});var cTt=s(tH);t1r=r(cTt,"TFFunnelForMultipleChoice"),cTt.forEach(t),a1r=r(RSe," (Funnel Transformer model)"),RSe.forEach(t),n1r=i(pe),L5=n(pe,"LI",{});var BSe=s(L5);xve=n(BSe,"STRONG",{});var mTt=s(xve);s1r=r(mTt,"longformer"),mTt.forEach(t),l1r=r(BSe," \u2014 "),aH=n(BSe,"A",{href:!0});var fTt=s(aH);i1r=r(fTt,"TFLongformerForMultipleChoice"),fTt.forEach(t),d1r=r(BSe," (Longformer model)"),BSe.forEach(t),c1r=i(pe),x5=n(pe,"LI",{});var PSe=s(x5);$ve=n(PSe,"STRONG",{});var gTt=s($ve);m1r=r(gTt,"mobilebert"),gTt.forEach(t),f1r=r(PSe," \u2014 "),nH=n(PSe,"A",{href:!0});var hTt=s(nH);g1r=r(hTt,"TFMobileBertForMultipleChoice"),hTt.forEach(t),h1r=r(PSe," (MobileBERT model)"),PSe.forEach(t),u1r=i(pe),$5=n(pe,"LI",{});var ISe=s($5);kve=n(ISe,"STRONG",{});var uTt=s(kve);p1r=r(uTt,"mpnet"),uTt.forEach(t),_1r=r(ISe," \u2014 "),sH=n(ISe,"A",{href:!0});var pTt=s(sH);b1r=r(pTt,"TFMPNetForMultipleChoice"),pTt.forEach(t),F1r=r(ISe," (MPNet model)"),ISe.forEach(t),v1r=i(pe),k5=n(pe,"LI",{});var qSe=s(k5);Sve=n(qSe,"STRONG",{});var _Tt=s(Sve);T1r=r(_Tt,"rembert"),_Tt.forEach(t),M1r=r(qSe," \u2014 "),lH=n(qSe,"A",{href:!0});var bTt=s(lH);E1r=r(bTt,"TFRemBertForMultipleChoice"),bTt.forEach(t),C1r=r(qSe," (RemBERT model)"),qSe.forEach(t),w1r=i(pe),S5=n(pe,"LI",{});var NSe=s(S5);Rve=n(NSe,"STRONG",{});var FTt=s(Rve);A1r=r(FTt,"roberta"),FTt.forEach(t),y1r=r(NSe," \u2014 "),iH=n(NSe,"A",{href:!0});var vTt=s(iH);L1r=r(vTt,"TFRobertaForMultipleChoice"),vTt.forEach(t),x1r=r(NSe," (RoBERTa model)"),NSe.forEach(t),$1r=i(pe),R5=n(pe,"LI",{});var jSe=s(R5);Bve=n(jSe,"STRONG",{});var TTt=s(Bve);k1r=r(TTt,"roformer"),TTt.forEach(t),S1r=r(jSe," \u2014 "),dH=n(jSe,"A",{href:!0});var MTt=s(dH);R1r=r(MTt,"TFRoFormerForMultipleChoice"),MTt.forEach(t),B1r=r(jSe," (RoFormer model)"),jSe.forEach(t),P1r=i(pe),B5=n(pe,"LI",{});var DSe=s(B5);Pve=n(DSe,"STRONG",{});var ETt=s(Pve);I1r=r(ETt,"xlm"),ETt.forEach(t),q1r=r(DSe," \u2014 "),cH=n(DSe,"A",{href:!0});var CTt=s(cH);N1r=r(CTt,"TFXLMForMultipleChoice"),CTt.forEach(t),j1r=r(DSe," (XLM model)"),DSe.forEach(t),D1r=i(pe),P5=n(pe,"LI",{});var GSe=s(P5);Ive=n(GSe,"STRONG",{});var wTt=s(Ive);G1r=r(wTt,"xlm-roberta"),wTt.forEach(t),O1r=r(GSe," \u2014 "),mH=n(GSe,"A",{href:!0});var ATt=s(mH);V1r=r(ATt,"TFXLMRobertaForMultipleChoice"),ATt.forEach(t),X1r=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),z1r=i(pe),I5=n(pe,"LI",{});var OSe=s(I5);qve=n(OSe,"STRONG",{});var yTt=s(qve);Q1r=r(yTt,"xlnet"),yTt.forEach(t),W1r=r(OSe," \u2014 "),fH=n(OSe,"A",{href:!0});var LTt=s(fH);H1r=r(LTt,"TFXLNetForMultipleChoice"),LTt.forEach(t),U1r=r(OSe," (XLNet model)"),OSe.forEach(t),pe.forEach(t),J1r=i(Cl),T(q5.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),KIe=i(m),ic=n(m,"H2",{class:!0});var aje=s(ic);N5=n(aje,"A",{id:!0,class:!0,href:!0});var xTt=s(N5);Nve=n(xTt,"SPAN",{});var $Tt=s(Nve);T(ux.$$.fragment,$Tt),$Tt.forEach(t),xTt.forEach(t),Y1r=i(aje),jve=n(aje,"SPAN",{});var kTt=s(jve);K1r=r(kTt,"TFAutoModelForNextSentencePrediction"),kTt.forEach(t),aje.forEach(t),ZIe=i(m),nr=n(m,"DIV",{class:!0});var wl=s(nr);T(px.$$.fragment,wl),Z1r=i(wl),dc=n(wl,"P",{});var fZ=s(dc);eTr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gH=n(fZ,"A",{href:!0});var STt=s(gH);oTr=r(STt,"from_pretrained()"),STt.forEach(t),rTr=r(fZ," class method or the "),hH=n(fZ,"A",{href:!0});var RTt=s(hH);tTr=r(RTt,"from_config()"),RTt.forEach(t),aTr=r(fZ,` class
method.`),fZ.forEach(t),nTr=i(wl),_x=n(wl,"P",{});var nje=s(_x);sTr=r(nje,"This class cannot be instantiated directly using "),Dve=n(nje,"CODE",{});var BTt=s(Dve);lTr=r(BTt,"__init__()"),BTt.forEach(t),iTr=r(nje," (throws an error)."),nje.forEach(t),dTr=i(wl),Rt=n(wl,"DIV",{class:!0});var i6=s(Rt);T(bx.$$.fragment,i6),cTr=i(i6),Gve=n(i6,"P",{});var PTt=s(Gve);mTr=r(PTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PTt.forEach(t),fTr=i(i6),cc=n(i6,"P",{});var gZ=s(cc);gTr=r(gZ,`Note:
Loading a model from its configuration file does `),Ove=n(gZ,"STRONG",{});var ITt=s(Ove);hTr=r(ITt,"not"),ITt.forEach(t),uTr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(gZ,"A",{href:!0});var qTt=s(uH);pTr=r(qTt,"from_pretrained()"),qTt.forEach(t),_Tr=r(gZ," to load the model weights."),gZ.forEach(t),bTr=i(i6),T(j5.$$.fragment,i6),i6.forEach(t),FTr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(Fx.$$.fragment,Al),vTr=i(Al),Vve=n(Al,"P",{});var NTt=s(Vve);TTr=r(NTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NTt.forEach(t),MTr=i(Al),sn=n(Al,"P",{});var d6=s(sn);ETr=r(d6,"The model class to instantiate is selected based on the "),Xve=n(d6,"CODE",{});var jTt=s(Xve);CTr=r(jTt,"model_type"),jTt.forEach(t),wTr=r(d6,` property of the config object (either
passed as an argument or loaded from `),zve=n(d6,"CODE",{});var DTt=s(zve);ATr=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),yTr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(d6,"CODE",{});var GTt=s(Qve);LTr=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),xTr=r(d6,":"),d6.forEach(t),$Tr=i(Al),vx=n(Al,"UL",{});var sje=s(vx);D5=n(sje,"LI",{});var VSe=s(D5);Wve=n(VSe,"STRONG",{});var OTt=s(Wve);kTr=r(OTt,"bert"),OTt.forEach(t),STr=r(VSe," \u2014 "),pH=n(VSe,"A",{href:!0});var VTt=s(pH);RTr=r(VTt,"TFBertForNextSentencePrediction"),VTt.forEach(t),BTr=r(VSe," (BERT model)"),VSe.forEach(t),PTr=i(sje),G5=n(sje,"LI",{});var XSe=s(G5);Hve=n(XSe,"STRONG",{});var XTt=s(Hve);ITr=r(XTt,"mobilebert"),XTt.forEach(t),qTr=r(XSe," \u2014 "),_H=n(XSe,"A",{href:!0});var zTt=s(_H);NTr=r(zTt,"TFMobileBertForNextSentencePrediction"),zTt.forEach(t),jTr=r(XSe," (MobileBERT model)"),XSe.forEach(t),sje.forEach(t),DTr=i(Al),T(O5.$$.fragment,Al),Al.forEach(t),wl.forEach(t),eqe=i(m),mc=n(m,"H2",{class:!0});var lje=s(mc);V5=n(lje,"A",{id:!0,class:!0,href:!0});var QTt=s(V5);Uve=n(QTt,"SPAN",{});var WTt=s(Uve);T(Tx.$$.fragment,WTt),WTt.forEach(t),QTt.forEach(t),GTr=i(lje),Jve=n(lje,"SPAN",{});var HTt=s(Jve);OTr=r(HTt,"TFAutoModelForTableQuestionAnswering"),HTt.forEach(t),lje.forEach(t),oqe=i(m),sr=n(m,"DIV",{class:!0});var yl=s(sr);T(Mx.$$.fragment,yl),VTr=i(yl),fc=n(yl,"P",{});var hZ=s(fc);XTr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bH=n(hZ,"A",{href:!0});var UTt=s(bH);zTr=r(UTt,"from_pretrained()"),UTt.forEach(t),QTr=r(hZ," class method or the "),FH=n(hZ,"A",{href:!0});var JTt=s(FH);WTr=r(JTt,"from_config()"),JTt.forEach(t),HTr=r(hZ,` class
method.`),hZ.forEach(t),UTr=i(yl),Ex=n(yl,"P",{});var ije=s(Ex);JTr=r(ije,"This class cannot be instantiated directly using "),Yve=n(ije,"CODE",{});var YTt=s(Yve);YTr=r(YTt,"__init__()"),YTt.forEach(t),KTr=r(ije," (throws an error)."),ije.forEach(t),ZTr=i(yl),Bt=n(yl,"DIV",{class:!0});var c6=s(Bt);T(Cx.$$.fragment,c6),eMr=i(c6),Kve=n(c6,"P",{});var KTt=s(Kve);oMr=r(KTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KTt.forEach(t),rMr=i(c6),gc=n(c6,"P",{});var uZ=s(gc);tMr=r(uZ,`Note:
Loading a model from its configuration file does `),Zve=n(uZ,"STRONG",{});var ZTt=s(Zve);aMr=r(ZTt,"not"),ZTt.forEach(t),nMr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(uZ,"A",{href:!0});var eMt=s(vH);sMr=r(eMt,"from_pretrained()"),eMt.forEach(t),lMr=r(uZ," to load the model weights."),uZ.forEach(t),iMr=i(c6),T(X5.$$.fragment,c6),c6.forEach(t),dMr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(wx.$$.fragment,Ll),cMr=i(Ll),e1e=n(Ll,"P",{});var oMt=s(e1e);mMr=r(oMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),oMt.forEach(t),fMr=i(Ll),ln=n(Ll,"P",{});var m6=s(ln);gMr=r(m6,"The model class to instantiate is selected based on the "),o1e=n(m6,"CODE",{});var rMt=s(o1e);hMr=r(rMt,"model_type"),rMt.forEach(t),uMr=r(m6,` property of the config object (either
passed as an argument or loaded from `),r1e=n(m6,"CODE",{});var tMt=s(r1e);pMr=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),_Mr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(m6,"CODE",{});var aMt=s(t1e);bMr=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),FMr=r(m6,":"),m6.forEach(t),vMr=i(Ll),a1e=n(Ll,"UL",{});var nMt=s(a1e);z5=n(nMt,"LI",{});var zSe=s(z5);n1e=n(zSe,"STRONG",{});var sMt=s(n1e);TMr=r(sMt,"tapas"),sMt.forEach(t),MMr=r(zSe," \u2014 "),TH=n(zSe,"A",{href:!0});var lMt=s(TH);EMr=r(lMt,"TFTapasForQuestionAnswering"),lMt.forEach(t),CMr=r(zSe," (TAPAS model)"),zSe.forEach(t),nMt.forEach(t),wMr=i(Ll),T(Q5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),rqe=i(m),hc=n(m,"H2",{class:!0});var dje=s(hc);W5=n(dje,"A",{id:!0,class:!0,href:!0});var iMt=s(W5);s1e=n(iMt,"SPAN",{});var dMt=s(s1e);T(Ax.$$.fragment,dMt),dMt.forEach(t),iMt.forEach(t),AMr=i(dje),l1e=n(dje,"SPAN",{});var cMt=s(l1e);yMr=r(cMt,"TFAutoModelForTokenClassification"),cMt.forEach(t),dje.forEach(t),tqe=i(m),lr=n(m,"DIV",{class:!0});var xl=s(lr);T(yx.$$.fragment,xl),LMr=i(xl),uc=n(xl,"P",{});var pZ=s(uc);xMr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MH=n(pZ,"A",{href:!0});var mMt=s(MH);$Mr=r(mMt,"from_pretrained()"),mMt.forEach(t),kMr=r(pZ," class method or the "),EH=n(pZ,"A",{href:!0});var fMt=s(EH);SMr=r(fMt,"from_config()"),fMt.forEach(t),RMr=r(pZ,` class
method.`),pZ.forEach(t),BMr=i(xl),Lx=n(xl,"P",{});var cje=s(Lx);PMr=r(cje,"This class cannot be instantiated directly using "),i1e=n(cje,"CODE",{});var gMt=s(i1e);IMr=r(gMt,"__init__()"),gMt.forEach(t),qMr=r(cje," (throws an error)."),cje.forEach(t),NMr=i(xl),Pt=n(xl,"DIV",{class:!0});var f6=s(Pt);T(xx.$$.fragment,f6),jMr=i(f6),d1e=n(f6,"P",{});var hMt=s(d1e);DMr=r(hMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hMt.forEach(t),GMr=i(f6),pc=n(f6,"P",{});var _Z=s(pc);OMr=r(_Z,`Note:
Loading a model from its configuration file does `),c1e=n(_Z,"STRONG",{});var uMt=s(c1e);VMr=r(uMt,"not"),uMt.forEach(t),XMr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(_Z,"A",{href:!0});var pMt=s(CH);zMr=r(pMt,"from_pretrained()"),pMt.forEach(t),QMr=r(_Z," to load the model weights."),_Z.forEach(t),WMr=i(f6),T(H5.$$.fragment,f6),f6.forEach(t),HMr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T($x.$$.fragment,$l),UMr=i($l),m1e=n($l,"P",{});var _Mt=s(m1e);JMr=r(_Mt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Mt.forEach(t),YMr=i($l),dn=n($l,"P",{});var g6=s(dn);KMr=r(g6,"The model class to instantiate is selected based on the "),f1e=n(g6,"CODE",{});var bMt=s(f1e);ZMr=r(bMt,"model_type"),bMt.forEach(t),e4r=r(g6,` property of the config object (either
passed as an argument or loaded from `),g1e=n(g6,"CODE",{});var FMt=s(g1e);o4r=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),r4r=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(g6,"CODE",{});var vMt=s(h1e);t4r=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),a4r=r(g6,":"),g6.forEach(t),n4r=i($l),de=n($l,"UL",{});var fe=s(de);U5=n(fe,"LI",{});var QSe=s(U5);u1e=n(QSe,"STRONG",{});var TMt=s(u1e);s4r=r(TMt,"albert"),TMt.forEach(t),l4r=r(QSe," \u2014 "),wH=n(QSe,"A",{href:!0});var MMt=s(wH);i4r=r(MMt,"TFAlbertForTokenClassification"),MMt.forEach(t),d4r=r(QSe," (ALBERT model)"),QSe.forEach(t),c4r=i(fe),J5=n(fe,"LI",{});var WSe=s(J5);p1e=n(WSe,"STRONG",{});var EMt=s(p1e);m4r=r(EMt,"bert"),EMt.forEach(t),f4r=r(WSe," \u2014 "),AH=n(WSe,"A",{href:!0});var CMt=s(AH);g4r=r(CMt,"TFBertForTokenClassification"),CMt.forEach(t),h4r=r(WSe," (BERT model)"),WSe.forEach(t),u4r=i(fe),Y5=n(fe,"LI",{});var HSe=s(Y5);_1e=n(HSe,"STRONG",{});var wMt=s(_1e);p4r=r(wMt,"camembert"),wMt.forEach(t),_4r=r(HSe," \u2014 "),yH=n(HSe,"A",{href:!0});var AMt=s(yH);b4r=r(AMt,"TFCamembertForTokenClassification"),AMt.forEach(t),F4r=r(HSe," (CamemBERT model)"),HSe.forEach(t),v4r=i(fe),K5=n(fe,"LI",{});var USe=s(K5);b1e=n(USe,"STRONG",{});var yMt=s(b1e);T4r=r(yMt,"convbert"),yMt.forEach(t),M4r=r(USe," \u2014 "),LH=n(USe,"A",{href:!0});var LMt=s(LH);E4r=r(LMt,"TFConvBertForTokenClassification"),LMt.forEach(t),C4r=r(USe," (ConvBERT model)"),USe.forEach(t),w4r=i(fe),Z5=n(fe,"LI",{});var JSe=s(Z5);F1e=n(JSe,"STRONG",{});var xMt=s(F1e);A4r=r(xMt,"deberta"),xMt.forEach(t),y4r=r(JSe," \u2014 "),xH=n(JSe,"A",{href:!0});var $Mt=s(xH);L4r=r($Mt,"TFDebertaForTokenClassification"),$Mt.forEach(t),x4r=r(JSe," (DeBERTa model)"),JSe.forEach(t),$4r=i(fe),eC=n(fe,"LI",{});var YSe=s(eC);v1e=n(YSe,"STRONG",{});var kMt=s(v1e);k4r=r(kMt,"deberta-v2"),kMt.forEach(t),S4r=r(YSe," \u2014 "),$H=n(YSe,"A",{href:!0});var SMt=s($H);R4r=r(SMt,"TFDebertaV2ForTokenClassification"),SMt.forEach(t),B4r=r(YSe," (DeBERTa-v2 model)"),YSe.forEach(t),P4r=i(fe),oC=n(fe,"LI",{});var KSe=s(oC);T1e=n(KSe,"STRONG",{});var RMt=s(T1e);I4r=r(RMt,"distilbert"),RMt.forEach(t),q4r=r(KSe," \u2014 "),kH=n(KSe,"A",{href:!0});var BMt=s(kH);N4r=r(BMt,"TFDistilBertForTokenClassification"),BMt.forEach(t),j4r=r(KSe," (DistilBERT model)"),KSe.forEach(t),D4r=i(fe),rC=n(fe,"LI",{});var ZSe=s(rC);M1e=n(ZSe,"STRONG",{});var PMt=s(M1e);G4r=r(PMt,"electra"),PMt.forEach(t),O4r=r(ZSe," \u2014 "),SH=n(ZSe,"A",{href:!0});var IMt=s(SH);V4r=r(IMt,"TFElectraForTokenClassification"),IMt.forEach(t),X4r=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),z4r=i(fe),tC=n(fe,"LI",{});var eRe=s(tC);E1e=n(eRe,"STRONG",{});var qMt=s(E1e);Q4r=r(qMt,"flaubert"),qMt.forEach(t),W4r=r(eRe," \u2014 "),RH=n(eRe,"A",{href:!0});var NMt=s(RH);H4r=r(NMt,"TFFlaubertForTokenClassification"),NMt.forEach(t),U4r=r(eRe," (FlauBERT model)"),eRe.forEach(t),J4r=i(fe),aC=n(fe,"LI",{});var oRe=s(aC);C1e=n(oRe,"STRONG",{});var jMt=s(C1e);Y4r=r(jMt,"funnel"),jMt.forEach(t),K4r=r(oRe," \u2014 "),BH=n(oRe,"A",{href:!0});var DMt=s(BH);Z4r=r(DMt,"TFFunnelForTokenClassification"),DMt.forEach(t),eEr=r(oRe," (Funnel Transformer model)"),oRe.forEach(t),oEr=i(fe),nC=n(fe,"LI",{});var rRe=s(nC);w1e=n(rRe,"STRONG",{});var GMt=s(w1e);rEr=r(GMt,"layoutlm"),GMt.forEach(t),tEr=r(rRe," \u2014 "),PH=n(rRe,"A",{href:!0});var OMt=s(PH);aEr=r(OMt,"TFLayoutLMForTokenClassification"),OMt.forEach(t),nEr=r(rRe," (LayoutLM model)"),rRe.forEach(t),sEr=i(fe),sC=n(fe,"LI",{});var tRe=s(sC);A1e=n(tRe,"STRONG",{});var VMt=s(A1e);lEr=r(VMt,"longformer"),VMt.forEach(t),iEr=r(tRe," \u2014 "),IH=n(tRe,"A",{href:!0});var XMt=s(IH);dEr=r(XMt,"TFLongformerForTokenClassification"),XMt.forEach(t),cEr=r(tRe," (Longformer model)"),tRe.forEach(t),mEr=i(fe),lC=n(fe,"LI",{});var aRe=s(lC);y1e=n(aRe,"STRONG",{});var zMt=s(y1e);fEr=r(zMt,"mobilebert"),zMt.forEach(t),gEr=r(aRe," \u2014 "),qH=n(aRe,"A",{href:!0});var QMt=s(qH);hEr=r(QMt,"TFMobileBertForTokenClassification"),QMt.forEach(t),uEr=r(aRe," (MobileBERT model)"),aRe.forEach(t),pEr=i(fe),iC=n(fe,"LI",{});var nRe=s(iC);L1e=n(nRe,"STRONG",{});var WMt=s(L1e);_Er=r(WMt,"mpnet"),WMt.forEach(t),bEr=r(nRe," \u2014 "),NH=n(nRe,"A",{href:!0});var HMt=s(NH);FEr=r(HMt,"TFMPNetForTokenClassification"),HMt.forEach(t),vEr=r(nRe," (MPNet model)"),nRe.forEach(t),TEr=i(fe),dC=n(fe,"LI",{});var sRe=s(dC);x1e=n(sRe,"STRONG",{});var UMt=s(x1e);MEr=r(UMt,"rembert"),UMt.forEach(t),EEr=r(sRe," \u2014 "),jH=n(sRe,"A",{href:!0});var JMt=s(jH);CEr=r(JMt,"TFRemBertForTokenClassification"),JMt.forEach(t),wEr=r(sRe," (RemBERT model)"),sRe.forEach(t),AEr=i(fe),cC=n(fe,"LI",{});var lRe=s(cC);$1e=n(lRe,"STRONG",{});var YMt=s($1e);yEr=r(YMt,"roberta"),YMt.forEach(t),LEr=r(lRe," \u2014 "),DH=n(lRe,"A",{href:!0});var KMt=s(DH);xEr=r(KMt,"TFRobertaForTokenClassification"),KMt.forEach(t),$Er=r(lRe," (RoBERTa model)"),lRe.forEach(t),kEr=i(fe),mC=n(fe,"LI",{});var iRe=s(mC);k1e=n(iRe,"STRONG",{});var ZMt=s(k1e);SEr=r(ZMt,"roformer"),ZMt.forEach(t),REr=r(iRe," \u2014 "),GH=n(iRe,"A",{href:!0});var e4t=s(GH);BEr=r(e4t,"TFRoFormerForTokenClassification"),e4t.forEach(t),PEr=r(iRe," (RoFormer model)"),iRe.forEach(t),IEr=i(fe),fC=n(fe,"LI",{});var dRe=s(fC);S1e=n(dRe,"STRONG",{});var o4t=s(S1e);qEr=r(o4t,"xlm"),o4t.forEach(t),NEr=r(dRe," \u2014 "),OH=n(dRe,"A",{href:!0});var r4t=s(OH);jEr=r(r4t,"TFXLMForTokenClassification"),r4t.forEach(t),DEr=r(dRe," (XLM model)"),dRe.forEach(t),GEr=i(fe),gC=n(fe,"LI",{});var cRe=s(gC);R1e=n(cRe,"STRONG",{});var t4t=s(R1e);OEr=r(t4t,"xlm-roberta"),t4t.forEach(t),VEr=r(cRe," \u2014 "),VH=n(cRe,"A",{href:!0});var a4t=s(VH);XEr=r(a4t,"TFXLMRobertaForTokenClassification"),a4t.forEach(t),zEr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),QEr=i(fe),hC=n(fe,"LI",{});var mRe=s(hC);B1e=n(mRe,"STRONG",{});var n4t=s(B1e);WEr=r(n4t,"xlnet"),n4t.forEach(t),HEr=r(mRe," \u2014 "),XH=n(mRe,"A",{href:!0});var s4t=s(XH);UEr=r(s4t,"TFXLNetForTokenClassification"),s4t.forEach(t),JEr=r(mRe," (XLNet model)"),mRe.forEach(t),fe.forEach(t),YEr=i($l),T(uC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),aqe=i(m),_c=n(m,"H2",{class:!0});var mje=s(_c);pC=n(mje,"A",{id:!0,class:!0,href:!0});var l4t=s(pC);P1e=n(l4t,"SPAN",{});var i4t=s(P1e);T(kx.$$.fragment,i4t),i4t.forEach(t),l4t.forEach(t),KEr=i(mje),I1e=n(mje,"SPAN",{});var d4t=s(I1e);ZEr=r(d4t,"TFAutoModelForQuestionAnswering"),d4t.forEach(t),mje.forEach(t),nqe=i(m),ir=n(m,"DIV",{class:!0});var kl=s(ir);T(Sx.$$.fragment,kl),e5r=i(kl),bc=n(kl,"P",{});var bZ=s(bc);o5r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zH=n(bZ,"A",{href:!0});var c4t=s(zH);r5r=r(c4t,"from_pretrained()"),c4t.forEach(t),t5r=r(bZ," class method or the "),QH=n(bZ,"A",{href:!0});var m4t=s(QH);a5r=r(m4t,"from_config()"),m4t.forEach(t),n5r=r(bZ,` class
method.`),bZ.forEach(t),s5r=i(kl),Rx=n(kl,"P",{});var fje=s(Rx);l5r=r(fje,"This class cannot be instantiated directly using "),q1e=n(fje,"CODE",{});var f4t=s(q1e);i5r=r(f4t,"__init__()"),f4t.forEach(t),d5r=r(fje," (throws an error)."),fje.forEach(t),c5r=i(kl),It=n(kl,"DIV",{class:!0});var h6=s(It);T(Bx.$$.fragment,h6),m5r=i(h6),N1e=n(h6,"P",{});var g4t=s(N1e);f5r=r(g4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g4t.forEach(t),g5r=i(h6),Fc=n(h6,"P",{});var FZ=s(Fc);h5r=r(FZ,`Note:
Loading a model from its configuration file does `),j1e=n(FZ,"STRONG",{});var h4t=s(j1e);u5r=r(h4t,"not"),h4t.forEach(t),p5r=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(FZ,"A",{href:!0});var u4t=s(WH);_5r=r(u4t,"from_pretrained()"),u4t.forEach(t),b5r=r(FZ," to load the model weights."),FZ.forEach(t),F5r=i(h6),T(_C.$$.fragment,h6),h6.forEach(t),v5r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(Px.$$.fragment,Sl),T5r=i(Sl),D1e=n(Sl,"P",{});var p4t=s(D1e);M5r=r(p4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),p4t.forEach(t),E5r=i(Sl),cn=n(Sl,"P",{});var u6=s(cn);C5r=r(u6,"The model class to instantiate is selected based on the "),G1e=n(u6,"CODE",{});var _4t=s(G1e);w5r=r(_4t,"model_type"),_4t.forEach(t),A5r=r(u6,` property of the config object (either
passed as an argument or loaded from `),O1e=n(u6,"CODE",{});var b4t=s(O1e);y5r=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),L5r=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(u6,"CODE",{});var F4t=s(V1e);x5r=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),$5r=r(u6,":"),u6.forEach(t),k5r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);bC=n(ge,"LI",{});var fRe=s(bC);X1e=n(fRe,"STRONG",{});var v4t=s(X1e);S5r=r(v4t,"albert"),v4t.forEach(t),R5r=r(fRe," \u2014 "),HH=n(fRe,"A",{href:!0});var T4t=s(HH);B5r=r(T4t,"TFAlbertForQuestionAnswering"),T4t.forEach(t),P5r=r(fRe," (ALBERT model)"),fRe.forEach(t),I5r=i(ge),FC=n(ge,"LI",{});var gRe=s(FC);z1e=n(gRe,"STRONG",{});var M4t=s(z1e);q5r=r(M4t,"bert"),M4t.forEach(t),N5r=r(gRe," \u2014 "),UH=n(gRe,"A",{href:!0});var E4t=s(UH);j5r=r(E4t,"TFBertForQuestionAnswering"),E4t.forEach(t),D5r=r(gRe," (BERT model)"),gRe.forEach(t),G5r=i(ge),vC=n(ge,"LI",{});var hRe=s(vC);Q1e=n(hRe,"STRONG",{});var C4t=s(Q1e);O5r=r(C4t,"camembert"),C4t.forEach(t),V5r=r(hRe," \u2014 "),JH=n(hRe,"A",{href:!0});var w4t=s(JH);X5r=r(w4t,"TFCamembertForQuestionAnswering"),w4t.forEach(t),z5r=r(hRe," (CamemBERT model)"),hRe.forEach(t),Q5r=i(ge),TC=n(ge,"LI",{});var uRe=s(TC);W1e=n(uRe,"STRONG",{});var A4t=s(W1e);W5r=r(A4t,"convbert"),A4t.forEach(t),H5r=r(uRe," \u2014 "),YH=n(uRe,"A",{href:!0});var y4t=s(YH);U5r=r(y4t,"TFConvBertForQuestionAnswering"),y4t.forEach(t),J5r=r(uRe," (ConvBERT model)"),uRe.forEach(t),Y5r=i(ge),MC=n(ge,"LI",{});var pRe=s(MC);H1e=n(pRe,"STRONG",{});var L4t=s(H1e);K5r=r(L4t,"deberta"),L4t.forEach(t),Z5r=r(pRe," \u2014 "),KH=n(pRe,"A",{href:!0});var x4t=s(KH);eCr=r(x4t,"TFDebertaForQuestionAnswering"),x4t.forEach(t),oCr=r(pRe," (DeBERTa model)"),pRe.forEach(t),rCr=i(ge),EC=n(ge,"LI",{});var _Re=s(EC);U1e=n(_Re,"STRONG",{});var $4t=s(U1e);tCr=r($4t,"deberta-v2"),$4t.forEach(t),aCr=r(_Re," \u2014 "),ZH=n(_Re,"A",{href:!0});var k4t=s(ZH);nCr=r(k4t,"TFDebertaV2ForQuestionAnswering"),k4t.forEach(t),sCr=r(_Re," (DeBERTa-v2 model)"),_Re.forEach(t),lCr=i(ge),CC=n(ge,"LI",{});var bRe=s(CC);J1e=n(bRe,"STRONG",{});var S4t=s(J1e);iCr=r(S4t,"distilbert"),S4t.forEach(t),dCr=r(bRe," \u2014 "),eU=n(bRe,"A",{href:!0});var R4t=s(eU);cCr=r(R4t,"TFDistilBertForQuestionAnswering"),R4t.forEach(t),mCr=r(bRe," (DistilBERT model)"),bRe.forEach(t),fCr=i(ge),wC=n(ge,"LI",{});var FRe=s(wC);Y1e=n(FRe,"STRONG",{});var B4t=s(Y1e);gCr=r(B4t,"electra"),B4t.forEach(t),hCr=r(FRe," \u2014 "),oU=n(FRe,"A",{href:!0});var P4t=s(oU);uCr=r(P4t,"TFElectraForQuestionAnswering"),P4t.forEach(t),pCr=r(FRe," (ELECTRA model)"),FRe.forEach(t),_Cr=i(ge),AC=n(ge,"LI",{});var vRe=s(AC);K1e=n(vRe,"STRONG",{});var I4t=s(K1e);bCr=r(I4t,"flaubert"),I4t.forEach(t),FCr=r(vRe," \u2014 "),rU=n(vRe,"A",{href:!0});var q4t=s(rU);vCr=r(q4t,"TFFlaubertForQuestionAnsweringSimple"),q4t.forEach(t),TCr=r(vRe," (FlauBERT model)"),vRe.forEach(t),MCr=i(ge),yC=n(ge,"LI",{});var TRe=s(yC);Z1e=n(TRe,"STRONG",{});var N4t=s(Z1e);ECr=r(N4t,"funnel"),N4t.forEach(t),CCr=r(TRe," \u2014 "),tU=n(TRe,"A",{href:!0});var j4t=s(tU);wCr=r(j4t,"TFFunnelForQuestionAnswering"),j4t.forEach(t),ACr=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),yCr=i(ge),LC=n(ge,"LI",{});var MRe=s(LC);eTe=n(MRe,"STRONG",{});var D4t=s(eTe);LCr=r(D4t,"gptj"),D4t.forEach(t),xCr=r(MRe," \u2014 "),aU=n(MRe,"A",{href:!0});var G4t=s(aU);$Cr=r(G4t,"TFGPTJForQuestionAnswering"),G4t.forEach(t),kCr=r(MRe," (GPT-J model)"),MRe.forEach(t),SCr=i(ge),xC=n(ge,"LI",{});var ERe=s(xC);oTe=n(ERe,"STRONG",{});var O4t=s(oTe);RCr=r(O4t,"longformer"),O4t.forEach(t),BCr=r(ERe," \u2014 "),nU=n(ERe,"A",{href:!0});var V4t=s(nU);PCr=r(V4t,"TFLongformerForQuestionAnswering"),V4t.forEach(t),ICr=r(ERe," (Longformer model)"),ERe.forEach(t),qCr=i(ge),$C=n(ge,"LI",{});var CRe=s($C);rTe=n(CRe,"STRONG",{});var X4t=s(rTe);NCr=r(X4t,"mobilebert"),X4t.forEach(t),jCr=r(CRe," \u2014 "),sU=n(CRe,"A",{href:!0});var z4t=s(sU);DCr=r(z4t,"TFMobileBertForQuestionAnswering"),z4t.forEach(t),GCr=r(CRe," (MobileBERT model)"),CRe.forEach(t),OCr=i(ge),kC=n(ge,"LI",{});var wRe=s(kC);tTe=n(wRe,"STRONG",{});var Q4t=s(tTe);VCr=r(Q4t,"mpnet"),Q4t.forEach(t),XCr=r(wRe," \u2014 "),lU=n(wRe,"A",{href:!0});var W4t=s(lU);zCr=r(W4t,"TFMPNetForQuestionAnswering"),W4t.forEach(t),QCr=r(wRe," (MPNet model)"),wRe.forEach(t),WCr=i(ge),SC=n(ge,"LI",{});var ARe=s(SC);aTe=n(ARe,"STRONG",{});var H4t=s(aTe);HCr=r(H4t,"rembert"),H4t.forEach(t),UCr=r(ARe," \u2014 "),iU=n(ARe,"A",{href:!0});var U4t=s(iU);JCr=r(U4t,"TFRemBertForQuestionAnswering"),U4t.forEach(t),YCr=r(ARe," (RemBERT model)"),ARe.forEach(t),KCr=i(ge),RC=n(ge,"LI",{});var yRe=s(RC);nTe=n(yRe,"STRONG",{});var J4t=s(nTe);ZCr=r(J4t,"roberta"),J4t.forEach(t),e3r=r(yRe," \u2014 "),dU=n(yRe,"A",{href:!0});var Y4t=s(dU);o3r=r(Y4t,"TFRobertaForQuestionAnswering"),Y4t.forEach(t),r3r=r(yRe," (RoBERTa model)"),yRe.forEach(t),t3r=i(ge),BC=n(ge,"LI",{});var LRe=s(BC);sTe=n(LRe,"STRONG",{});var K4t=s(sTe);a3r=r(K4t,"roformer"),K4t.forEach(t),n3r=r(LRe," \u2014 "),cU=n(LRe,"A",{href:!0});var Z4t=s(cU);s3r=r(Z4t,"TFRoFormerForQuestionAnswering"),Z4t.forEach(t),l3r=r(LRe," (RoFormer model)"),LRe.forEach(t),i3r=i(ge),PC=n(ge,"LI",{});var xRe=s(PC);lTe=n(xRe,"STRONG",{});var eEt=s(lTe);d3r=r(eEt,"xlm"),eEt.forEach(t),c3r=r(xRe," \u2014 "),mU=n(xRe,"A",{href:!0});var oEt=s(mU);m3r=r(oEt,"TFXLMForQuestionAnsweringSimple"),oEt.forEach(t),f3r=r(xRe," (XLM model)"),xRe.forEach(t),g3r=i(ge),IC=n(ge,"LI",{});var $Re=s(IC);iTe=n($Re,"STRONG",{});var rEt=s(iTe);h3r=r(rEt,"xlm-roberta"),rEt.forEach(t),u3r=r($Re," \u2014 "),fU=n($Re,"A",{href:!0});var tEt=s(fU);p3r=r(tEt,"TFXLMRobertaForQuestionAnswering"),tEt.forEach(t),_3r=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),b3r=i(ge),qC=n(ge,"LI",{});var kRe=s(qC);dTe=n(kRe,"STRONG",{});var aEt=s(dTe);F3r=r(aEt,"xlnet"),aEt.forEach(t),v3r=r(kRe," \u2014 "),gU=n(kRe,"A",{href:!0});var nEt=s(gU);T3r=r(nEt,"TFXLNetForQuestionAnsweringSimple"),nEt.forEach(t),M3r=r(kRe," (XLNet model)"),kRe.forEach(t),ge.forEach(t),E3r=i(Sl),T(NC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),sqe=i(m),vc=n(m,"H2",{class:!0});var gje=s(vc);jC=n(gje,"A",{id:!0,class:!0,href:!0});var sEt=s(jC);cTe=n(sEt,"SPAN",{});var lEt=s(cTe);T(Ix.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),C3r=i(gje),mTe=n(gje,"SPAN",{});var iEt=s(mTe);w3r=r(iEt,"TFAutoModelForVision2Seq"),iEt.forEach(t),gje.forEach(t),lqe=i(m),dr=n(m,"DIV",{class:!0});var Rl=s(dr);T(qx.$$.fragment,Rl),A3r=i(Rl),Tc=n(Rl,"P",{});var vZ=s(Tc);y3r=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hU=n(vZ,"A",{href:!0});var dEt=s(hU);L3r=r(dEt,"from_pretrained()"),dEt.forEach(t),x3r=r(vZ," class method or the "),uU=n(vZ,"A",{href:!0});var cEt=s(uU);$3r=r(cEt,"from_config()"),cEt.forEach(t),k3r=r(vZ,` class
method.`),vZ.forEach(t),S3r=i(Rl),Nx=n(Rl,"P",{});var hje=s(Nx);R3r=r(hje,"This class cannot be instantiated directly using "),fTe=n(hje,"CODE",{});var mEt=s(fTe);B3r=r(mEt,"__init__()"),mEt.forEach(t),P3r=r(hje," (throws an error)."),hje.forEach(t),I3r=i(Rl),qt=n(Rl,"DIV",{class:!0});var p6=s(qt);T(jx.$$.fragment,p6),q3r=i(p6),gTe=n(p6,"P",{});var fEt=s(gTe);N3r=r(fEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fEt.forEach(t),j3r=i(p6),Mc=n(p6,"P",{});var TZ=s(Mc);D3r=r(TZ,`Note:
Loading a model from its configuration file does `),hTe=n(TZ,"STRONG",{});var gEt=s(hTe);G3r=r(gEt,"not"),gEt.forEach(t),O3r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(TZ,"A",{href:!0});var hEt=s(pU);V3r=r(hEt,"from_pretrained()"),hEt.forEach(t),X3r=r(TZ," to load the model weights."),TZ.forEach(t),z3r=i(p6),T(DC.$$.fragment,p6),p6.forEach(t),Q3r=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(Dx.$$.fragment,Bl),W3r=i(Bl),uTe=n(Bl,"P",{});var uEt=s(uTe);H3r=r(uEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uEt.forEach(t),U3r=i(Bl),mn=n(Bl,"P",{});var _6=s(mn);J3r=r(_6,"The model class to instantiate is selected based on the "),pTe=n(_6,"CODE",{});var pEt=s(pTe);Y3r=r(pEt,"model_type"),pEt.forEach(t),K3r=r(_6,` property of the config object (either
passed as an argument or loaded from `),_Te=n(_6,"CODE",{});var _Et=s(_Te);Z3r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),ewr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(_6,"CODE",{});var bEt=s(bTe);owr=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),rwr=r(_6,":"),_6.forEach(t),twr=i(Bl),FTe=n(Bl,"UL",{});var FEt=s(FTe);GC=n(FEt,"LI",{});var SRe=s(GC);vTe=n(SRe,"STRONG",{});var vEt=s(vTe);awr=r(vEt,"vision-encoder-decoder"),vEt.forEach(t),nwr=r(SRe," \u2014 "),_U=n(SRe,"A",{href:!0});var TEt=s(_U);swr=r(TEt,"TFVisionEncoderDecoderModel"),TEt.forEach(t),lwr=r(SRe," (Vision Encoder decoder model)"),SRe.forEach(t),FEt.forEach(t),iwr=i(Bl),T(OC.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),iqe=i(m),Ec=n(m,"H2",{class:!0});var uje=s(Ec);VC=n(uje,"A",{id:!0,class:!0,href:!0});var MEt=s(VC);TTe=n(MEt,"SPAN",{});var EEt=s(TTe);T(Gx.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),dwr=i(uje),MTe=n(uje,"SPAN",{});var CEt=s(MTe);cwr=r(CEt,"TFAutoModelForSpeechSeq2Seq"),CEt.forEach(t),uje.forEach(t),dqe=i(m),cr=n(m,"DIV",{class:!0});var Pl=s(cr);T(Ox.$$.fragment,Pl),mwr=i(Pl),Cc=n(Pl,"P",{});var MZ=s(Cc);fwr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bU=n(MZ,"A",{href:!0});var wEt=s(bU);gwr=r(wEt,"from_pretrained()"),wEt.forEach(t),hwr=r(MZ," class method or the "),FU=n(MZ,"A",{href:!0});var AEt=s(FU);uwr=r(AEt,"from_config()"),AEt.forEach(t),pwr=r(MZ,` class
method.`),MZ.forEach(t),_wr=i(Pl),Vx=n(Pl,"P",{});var pje=s(Vx);bwr=r(pje,"This class cannot be instantiated directly using "),ETe=n(pje,"CODE",{});var yEt=s(ETe);Fwr=r(yEt,"__init__()"),yEt.forEach(t),vwr=r(pje," (throws an error)."),pje.forEach(t),Twr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var b6=s(Nt);T(Xx.$$.fragment,b6),Mwr=i(b6),CTe=n(b6,"P",{});var LEt=s(CTe);Ewr=r(LEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LEt.forEach(t),Cwr=i(b6),wc=n(b6,"P",{});var EZ=s(wc);wwr=r(EZ,`Note:
Loading a model from its configuration file does `),wTe=n(EZ,"STRONG",{});var xEt=s(wTe);Awr=r(xEt,"not"),xEt.forEach(t),ywr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(EZ,"A",{href:!0});var $Et=s(vU);Lwr=r($Et,"from_pretrained()"),$Et.forEach(t),xwr=r(EZ," to load the model weights."),EZ.forEach(t),$wr=i(b6),T(XC.$$.fragment,b6),b6.forEach(t),kwr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(zx.$$.fragment,Il),Swr=i(Il),ATe=n(Il,"P",{});var kEt=s(ATe);Rwr=r(kEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kEt.forEach(t),Bwr=i(Il),fn=n(Il,"P",{});var F6=s(fn);Pwr=r(F6,"The model class to instantiate is selected based on the "),yTe=n(F6,"CODE",{});var SEt=s(yTe);Iwr=r(SEt,"model_type"),SEt.forEach(t),qwr=r(F6,` property of the config object (either
passed as an argument or loaded from `),LTe=n(F6,"CODE",{});var REt=s(LTe);Nwr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),jwr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(F6,"CODE",{});var BEt=s(xTe);Dwr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),Gwr=r(F6,":"),F6.forEach(t),Owr=i(Il),$Te=n(Il,"UL",{});var PEt=s($Te);zC=n(PEt,"LI",{});var RRe=s(zC);kTe=n(RRe,"STRONG",{});var IEt=s(kTe);Vwr=r(IEt,"speech_to_text"),IEt.forEach(t),Xwr=r(RRe," \u2014 "),TU=n(RRe,"A",{href:!0});var qEt=s(TU);zwr=r(qEt,"TFSpeech2TextForConditionalGeneration"),qEt.forEach(t),Qwr=r(RRe," (Speech2Text model)"),RRe.forEach(t),PEt.forEach(t),Wwr=i(Il),T(QC.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),cqe=i(m),Ac=n(m,"H2",{class:!0});var _je=s(Ac);WC=n(_je,"A",{id:!0,class:!0,href:!0});var NEt=s(WC);STe=n(NEt,"SPAN",{});var jEt=s(STe);T(Qx.$$.fragment,jEt),jEt.forEach(t),NEt.forEach(t),Hwr=i(_je),RTe=n(_je,"SPAN",{});var DEt=s(RTe);Uwr=r(DEt,"FlaxAutoModel"),DEt.forEach(t),_je.forEach(t),mqe=i(m),mr=n(m,"DIV",{class:!0});var ql=s(mr);T(Wx.$$.fragment,ql),Jwr=i(ql),yc=n(ql,"P",{});var CZ=s(yc);Ywr=r(CZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MU=n(CZ,"A",{href:!0});var GEt=s(MU);Kwr=r(GEt,"from_pretrained()"),GEt.forEach(t),Zwr=r(CZ," class method or the "),EU=n(CZ,"A",{href:!0});var OEt=s(EU);eAr=r(OEt,"from_config()"),OEt.forEach(t),oAr=r(CZ,` class
method.`),CZ.forEach(t),rAr=i(ql),Hx=n(ql,"P",{});var bje=s(Hx);tAr=r(bje,"This class cannot be instantiated directly using "),BTe=n(bje,"CODE",{});var VEt=s(BTe);aAr=r(VEt,"__init__()"),VEt.forEach(t),nAr=r(bje," (throws an error)."),bje.forEach(t),sAr=i(ql),jt=n(ql,"DIV",{class:!0});var v6=s(jt);T(Ux.$$.fragment,v6),lAr=i(v6),PTe=n(v6,"P",{});var XEt=s(PTe);iAr=r(XEt,"Instantiates one of the base model classes of the library from a configuration."),XEt.forEach(t),dAr=i(v6),Lc=n(v6,"P",{});var wZ=s(Lc);cAr=r(wZ,`Note:
Loading a model from its configuration file does `),ITe=n(wZ,"STRONG",{});var zEt=s(ITe);mAr=r(zEt,"not"),zEt.forEach(t),fAr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(wZ,"A",{href:!0});var QEt=s(CU);gAr=r(QEt,"from_pretrained()"),QEt.forEach(t),hAr=r(wZ," to load the model weights."),wZ.forEach(t),uAr=i(v6),T(HC.$$.fragment,v6),v6.forEach(t),pAr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(Jx.$$.fragment,Nl),_Ar=i(Nl),qTe=n(Nl,"P",{});var WEt=s(qTe);bAr=r(WEt,"Instantiate one of the base model classes of the library from a pretrained model."),WEt.forEach(t),FAr=i(Nl),gn=n(Nl,"P",{});var T6=s(gn);vAr=r(T6,"The model class to instantiate is selected based on the "),NTe=n(T6,"CODE",{});var HEt=s(NTe);TAr=r(HEt,"model_type"),HEt.forEach(t),MAr=r(T6,` property of the config object (either
passed as an argument or loaded from `),jTe=n(T6,"CODE",{});var UEt=s(jTe);EAr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),CAr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(T6,"CODE",{});var JEt=s(DTe);wAr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),AAr=r(T6,":"),T6.forEach(t),yAr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);UC=n(ne,"LI",{});var BRe=s(UC);GTe=n(BRe,"STRONG",{});var YEt=s(GTe);LAr=r(YEt,"albert"),YEt.forEach(t),xAr=r(BRe," \u2014 "),wU=n(BRe,"A",{href:!0});var KEt=s(wU);$Ar=r(KEt,"FlaxAlbertModel"),KEt.forEach(t),kAr=r(BRe," (ALBERT model)"),BRe.forEach(t),SAr=i(ne),JC=n(ne,"LI",{});var PRe=s(JC);OTe=n(PRe,"STRONG",{});var ZEt=s(OTe);RAr=r(ZEt,"bart"),ZEt.forEach(t),BAr=r(PRe," \u2014 "),AU=n(PRe,"A",{href:!0});var e5t=s(AU);PAr=r(e5t,"FlaxBartModel"),e5t.forEach(t),IAr=r(PRe," (BART model)"),PRe.forEach(t),qAr=i(ne),YC=n(ne,"LI",{});var IRe=s(YC);VTe=n(IRe,"STRONG",{});var o5t=s(VTe);NAr=r(o5t,"beit"),o5t.forEach(t),jAr=r(IRe," \u2014 "),yU=n(IRe,"A",{href:!0});var r5t=s(yU);DAr=r(r5t,"FlaxBeitModel"),r5t.forEach(t),GAr=r(IRe," (BEiT model)"),IRe.forEach(t),OAr=i(ne),KC=n(ne,"LI",{});var qRe=s(KC);XTe=n(qRe,"STRONG",{});var t5t=s(XTe);VAr=r(t5t,"bert"),t5t.forEach(t),XAr=r(qRe," \u2014 "),LU=n(qRe,"A",{href:!0});var a5t=s(LU);zAr=r(a5t,"FlaxBertModel"),a5t.forEach(t),QAr=r(qRe," (BERT model)"),qRe.forEach(t),WAr=i(ne),ZC=n(ne,"LI",{});var NRe=s(ZC);zTe=n(NRe,"STRONG",{});var n5t=s(zTe);HAr=r(n5t,"big_bird"),n5t.forEach(t),UAr=r(NRe," \u2014 "),xU=n(NRe,"A",{href:!0});var s5t=s(xU);JAr=r(s5t,"FlaxBigBirdModel"),s5t.forEach(t),YAr=r(NRe," (BigBird model)"),NRe.forEach(t),KAr=i(ne),e3=n(ne,"LI",{});var jRe=s(e3);QTe=n(jRe,"STRONG",{});var l5t=s(QTe);ZAr=r(l5t,"blenderbot"),l5t.forEach(t),e0r=r(jRe," \u2014 "),$U=n(jRe,"A",{href:!0});var i5t=s($U);o0r=r(i5t,"FlaxBlenderbotModel"),i5t.forEach(t),r0r=r(jRe," (Blenderbot model)"),jRe.forEach(t),t0r=i(ne),o3=n(ne,"LI",{});var DRe=s(o3);WTe=n(DRe,"STRONG",{});var d5t=s(WTe);a0r=r(d5t,"blenderbot-small"),d5t.forEach(t),n0r=r(DRe," \u2014 "),kU=n(DRe,"A",{href:!0});var c5t=s(kU);s0r=r(c5t,"FlaxBlenderbotSmallModel"),c5t.forEach(t),l0r=r(DRe," (BlenderbotSmall model)"),DRe.forEach(t),i0r=i(ne),r3=n(ne,"LI",{});var GRe=s(r3);HTe=n(GRe,"STRONG",{});var m5t=s(HTe);d0r=r(m5t,"clip"),m5t.forEach(t),c0r=r(GRe," \u2014 "),SU=n(GRe,"A",{href:!0});var f5t=s(SU);m0r=r(f5t,"FlaxCLIPModel"),f5t.forEach(t),f0r=r(GRe," (CLIP model)"),GRe.forEach(t),g0r=i(ne),t3=n(ne,"LI",{});var ORe=s(t3);UTe=n(ORe,"STRONG",{});var g5t=s(UTe);h0r=r(g5t,"distilbert"),g5t.forEach(t),u0r=r(ORe," \u2014 "),RU=n(ORe,"A",{href:!0});var h5t=s(RU);p0r=r(h5t,"FlaxDistilBertModel"),h5t.forEach(t),_0r=r(ORe," (DistilBERT model)"),ORe.forEach(t),b0r=i(ne),a3=n(ne,"LI",{});var VRe=s(a3);JTe=n(VRe,"STRONG",{});var u5t=s(JTe);F0r=r(u5t,"electra"),u5t.forEach(t),v0r=r(VRe," \u2014 "),BU=n(VRe,"A",{href:!0});var p5t=s(BU);T0r=r(p5t,"FlaxElectraModel"),p5t.forEach(t),M0r=r(VRe," (ELECTRA model)"),VRe.forEach(t),E0r=i(ne),n3=n(ne,"LI",{});var XRe=s(n3);YTe=n(XRe,"STRONG",{});var _5t=s(YTe);C0r=r(_5t,"gpt2"),_5t.forEach(t),w0r=r(XRe," \u2014 "),PU=n(XRe,"A",{href:!0});var b5t=s(PU);A0r=r(b5t,"FlaxGPT2Model"),b5t.forEach(t),y0r=r(XRe," (OpenAI GPT-2 model)"),XRe.forEach(t),L0r=i(ne),s3=n(ne,"LI",{});var zRe=s(s3);KTe=n(zRe,"STRONG",{});var F5t=s(KTe);x0r=r(F5t,"gpt_neo"),F5t.forEach(t),$0r=r(zRe," \u2014 "),IU=n(zRe,"A",{href:!0});var v5t=s(IU);k0r=r(v5t,"FlaxGPTNeoModel"),v5t.forEach(t),S0r=r(zRe," (GPT Neo model)"),zRe.forEach(t),R0r=i(ne),l3=n(ne,"LI",{});var QRe=s(l3);ZTe=n(QRe,"STRONG",{});var T5t=s(ZTe);B0r=r(T5t,"gptj"),T5t.forEach(t),P0r=r(QRe," \u2014 "),qU=n(QRe,"A",{href:!0});var M5t=s(qU);I0r=r(M5t,"FlaxGPTJModel"),M5t.forEach(t),q0r=r(QRe," (GPT-J model)"),QRe.forEach(t),N0r=i(ne),i3=n(ne,"LI",{});var WRe=s(i3);eMe=n(WRe,"STRONG",{});var E5t=s(eMe);j0r=r(E5t,"marian"),E5t.forEach(t),D0r=r(WRe," \u2014 "),NU=n(WRe,"A",{href:!0});var C5t=s(NU);G0r=r(C5t,"FlaxMarianModel"),C5t.forEach(t),O0r=r(WRe," (Marian model)"),WRe.forEach(t),V0r=i(ne),d3=n(ne,"LI",{});var HRe=s(d3);oMe=n(HRe,"STRONG",{});var w5t=s(oMe);X0r=r(w5t,"mbart"),w5t.forEach(t),z0r=r(HRe," \u2014 "),jU=n(HRe,"A",{href:!0});var A5t=s(jU);Q0r=r(A5t,"FlaxMBartModel"),A5t.forEach(t),W0r=r(HRe," (mBART model)"),HRe.forEach(t),H0r=i(ne),c3=n(ne,"LI",{});var URe=s(c3);rMe=n(URe,"STRONG",{});var y5t=s(rMe);U0r=r(y5t,"mt5"),y5t.forEach(t),J0r=r(URe," \u2014 "),DU=n(URe,"A",{href:!0});var L5t=s(DU);Y0r=r(L5t,"FlaxMT5Model"),L5t.forEach(t),K0r=r(URe," (mT5 model)"),URe.forEach(t),Z0r=i(ne),m3=n(ne,"LI",{});var JRe=s(m3);tMe=n(JRe,"STRONG",{});var x5t=s(tMe);e6r=r(x5t,"pegasus"),x5t.forEach(t),o6r=r(JRe," \u2014 "),GU=n(JRe,"A",{href:!0});var $5t=s(GU);r6r=r($5t,"FlaxPegasusModel"),$5t.forEach(t),t6r=r(JRe," (Pegasus model)"),JRe.forEach(t),a6r=i(ne),f3=n(ne,"LI",{});var YRe=s(f3);aMe=n(YRe,"STRONG",{});var k5t=s(aMe);n6r=r(k5t,"roberta"),k5t.forEach(t),s6r=r(YRe," \u2014 "),OU=n(YRe,"A",{href:!0});var S5t=s(OU);l6r=r(S5t,"FlaxRobertaModel"),S5t.forEach(t),i6r=r(YRe," (RoBERTa model)"),YRe.forEach(t),d6r=i(ne),g3=n(ne,"LI",{});var KRe=s(g3);nMe=n(KRe,"STRONG",{});var R5t=s(nMe);c6r=r(R5t,"roformer"),R5t.forEach(t),m6r=r(KRe," \u2014 "),VU=n(KRe,"A",{href:!0});var B5t=s(VU);f6r=r(B5t,"FlaxRoFormerModel"),B5t.forEach(t),g6r=r(KRe," (RoFormer model)"),KRe.forEach(t),h6r=i(ne),h3=n(ne,"LI",{});var ZRe=s(h3);sMe=n(ZRe,"STRONG",{});var P5t=s(sMe);u6r=r(P5t,"t5"),P5t.forEach(t),p6r=r(ZRe," \u2014 "),XU=n(ZRe,"A",{href:!0});var I5t=s(XU);_6r=r(I5t,"FlaxT5Model"),I5t.forEach(t),b6r=r(ZRe," (T5 model)"),ZRe.forEach(t),F6r=i(ne),u3=n(ne,"LI",{});var eBe=s(u3);lMe=n(eBe,"STRONG",{});var q5t=s(lMe);v6r=r(q5t,"vision-text-dual-encoder"),q5t.forEach(t),T6r=r(eBe," \u2014 "),zU=n(eBe,"A",{href:!0});var N5t=s(zU);M6r=r(N5t,"FlaxVisionTextDualEncoderModel"),N5t.forEach(t),E6r=r(eBe," (VisionTextDualEncoder model)"),eBe.forEach(t),C6r=i(ne),p3=n(ne,"LI",{});var oBe=s(p3);iMe=n(oBe,"STRONG",{});var j5t=s(iMe);w6r=r(j5t,"vit"),j5t.forEach(t),A6r=r(oBe," \u2014 "),QU=n(oBe,"A",{href:!0});var D5t=s(QU);y6r=r(D5t,"FlaxViTModel"),D5t.forEach(t),L6r=r(oBe," (ViT model)"),oBe.forEach(t),x6r=i(ne),_3=n(ne,"LI",{});var rBe=s(_3);dMe=n(rBe,"STRONG",{});var G5t=s(dMe);$6r=r(G5t,"wav2vec2"),G5t.forEach(t),k6r=r(rBe," \u2014 "),WU=n(rBe,"A",{href:!0});var O5t=s(WU);S6r=r(O5t,"FlaxWav2Vec2Model"),O5t.forEach(t),R6r=r(rBe," (Wav2Vec2 model)"),rBe.forEach(t),B6r=i(ne),b3=n(ne,"LI",{});var tBe=s(b3);cMe=n(tBe,"STRONG",{});var V5t=s(cMe);P6r=r(V5t,"xglm"),V5t.forEach(t),I6r=r(tBe," \u2014 "),HU=n(tBe,"A",{href:!0});var X5t=s(HU);q6r=r(X5t,"FlaxXGLMModel"),X5t.forEach(t),N6r=r(tBe," (XGLM model)"),tBe.forEach(t),j6r=i(ne),F3=n(ne,"LI",{});var aBe=s(F3);mMe=n(aBe,"STRONG",{});var z5t=s(mMe);D6r=r(z5t,"xlm-roberta"),z5t.forEach(t),G6r=r(aBe," \u2014 "),UU=n(aBe,"A",{href:!0});var Q5t=s(UU);O6r=r(Q5t,"FlaxXLMRobertaModel"),Q5t.forEach(t),V6r=r(aBe," (XLM-RoBERTa model)"),aBe.forEach(t),ne.forEach(t),X6r=i(Nl),T(v3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),fqe=i(m),xc=n(m,"H2",{class:!0});var Fje=s(xc);T3=n(Fje,"A",{id:!0,class:!0,href:!0});var W5t=s(T3);fMe=n(W5t,"SPAN",{});var H5t=s(fMe);T(Yx.$$.fragment,H5t),H5t.forEach(t),W5t.forEach(t),z6r=i(Fje),gMe=n(Fje,"SPAN",{});var U5t=s(gMe);Q6r=r(U5t,"FlaxAutoModelForCausalLM"),U5t.forEach(t),Fje.forEach(t),gqe=i(m),fr=n(m,"DIV",{class:!0});var jl=s(fr);T(Kx.$$.fragment,jl),W6r=i(jl),$c=n(jl,"P",{});var AZ=s($c);H6r=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JU=n(AZ,"A",{href:!0});var J5t=s(JU);U6r=r(J5t,"from_pretrained()"),J5t.forEach(t),J6r=r(AZ," class method or the "),YU=n(AZ,"A",{href:!0});var Y5t=s(YU);Y6r=r(Y5t,"from_config()"),Y5t.forEach(t),K6r=r(AZ,` class
method.`),AZ.forEach(t),Z6r=i(jl),Zx=n(jl,"P",{});var vje=s(Zx);eyr=r(vje,"This class cannot be instantiated directly using "),hMe=n(vje,"CODE",{});var K5t=s(hMe);oyr=r(K5t,"__init__()"),K5t.forEach(t),ryr=r(vje," (throws an error)."),vje.forEach(t),tyr=i(jl),Dt=n(jl,"DIV",{class:!0});var M6=s(Dt);T(e7.$$.fragment,M6),ayr=i(M6),uMe=n(M6,"P",{});var Z5t=s(uMe);nyr=r(Z5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z5t.forEach(t),syr=i(M6),kc=n(M6,"P",{});var yZ=s(kc);lyr=r(yZ,`Note:
Loading a model from its configuration file does `),pMe=n(yZ,"STRONG",{});var eCt=s(pMe);iyr=r(eCt,"not"),eCt.forEach(t),dyr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(yZ,"A",{href:!0});var oCt=s(KU);cyr=r(oCt,"from_pretrained()"),oCt.forEach(t),myr=r(yZ," to load the model weights."),yZ.forEach(t),fyr=i(M6),T(M3.$$.fragment,M6),M6.forEach(t),gyr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(o7.$$.fragment,Dl),hyr=i(Dl),_Me=n(Dl,"P",{});var rCt=s(_Me);uyr=r(rCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rCt.forEach(t),pyr=i(Dl),hn=n(Dl,"P",{});var E6=s(hn);_yr=r(E6,"The model class to instantiate is selected based on the "),bMe=n(E6,"CODE",{});var tCt=s(bMe);byr=r(tCt,"model_type"),tCt.forEach(t),Fyr=r(E6,` property of the config object (either
passed as an argument or loaded from `),FMe=n(E6,"CODE",{});var aCt=s(FMe);vyr=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),Tyr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(E6,"CODE",{});var nCt=s(vMe);Myr=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),Eyr=r(E6,":"),E6.forEach(t),Cyr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);E3=n(Oe,"LI",{});var nBe=s(E3);TMe=n(nBe,"STRONG",{});var sCt=s(TMe);wyr=r(sCt,"bart"),sCt.forEach(t),Ayr=r(nBe," \u2014 "),ZU=n(nBe,"A",{href:!0});var lCt=s(ZU);yyr=r(lCt,"FlaxBartForCausalLM"),lCt.forEach(t),Lyr=r(nBe," (BART model)"),nBe.forEach(t),xyr=i(Oe),C3=n(Oe,"LI",{});var sBe=s(C3);MMe=n(sBe,"STRONG",{});var iCt=s(MMe);$yr=r(iCt,"bert"),iCt.forEach(t),kyr=r(sBe," \u2014 "),eJ=n(sBe,"A",{href:!0});var dCt=s(eJ);Syr=r(dCt,"FlaxBertForCausalLM"),dCt.forEach(t),Ryr=r(sBe," (BERT model)"),sBe.forEach(t),Byr=i(Oe),w3=n(Oe,"LI",{});var lBe=s(w3);EMe=n(lBe,"STRONG",{});var cCt=s(EMe);Pyr=r(cCt,"big_bird"),cCt.forEach(t),Iyr=r(lBe," \u2014 "),oJ=n(lBe,"A",{href:!0});var mCt=s(oJ);qyr=r(mCt,"FlaxBigBirdForCausalLM"),mCt.forEach(t),Nyr=r(lBe," (BigBird model)"),lBe.forEach(t),jyr=i(Oe),A3=n(Oe,"LI",{});var iBe=s(A3);CMe=n(iBe,"STRONG",{});var fCt=s(CMe);Dyr=r(fCt,"electra"),fCt.forEach(t),Gyr=r(iBe," \u2014 "),rJ=n(iBe,"A",{href:!0});var gCt=s(rJ);Oyr=r(gCt,"FlaxElectraForCausalLM"),gCt.forEach(t),Vyr=r(iBe," (ELECTRA model)"),iBe.forEach(t),Xyr=i(Oe),y3=n(Oe,"LI",{});var dBe=s(y3);wMe=n(dBe,"STRONG",{});var hCt=s(wMe);zyr=r(hCt,"gpt2"),hCt.forEach(t),Qyr=r(dBe," \u2014 "),tJ=n(dBe,"A",{href:!0});var uCt=s(tJ);Wyr=r(uCt,"FlaxGPT2LMHeadModel"),uCt.forEach(t),Hyr=r(dBe," (OpenAI GPT-2 model)"),dBe.forEach(t),Uyr=i(Oe),L3=n(Oe,"LI",{});var cBe=s(L3);AMe=n(cBe,"STRONG",{});var pCt=s(AMe);Jyr=r(pCt,"gpt_neo"),pCt.forEach(t),Yyr=r(cBe," \u2014 "),aJ=n(cBe,"A",{href:!0});var _Ct=s(aJ);Kyr=r(_Ct,"FlaxGPTNeoForCausalLM"),_Ct.forEach(t),Zyr=r(cBe," (GPT Neo model)"),cBe.forEach(t),eLr=i(Oe),x3=n(Oe,"LI",{});var mBe=s(x3);yMe=n(mBe,"STRONG",{});var bCt=s(yMe);oLr=r(bCt,"gptj"),bCt.forEach(t),rLr=r(mBe," \u2014 "),nJ=n(mBe,"A",{href:!0});var FCt=s(nJ);tLr=r(FCt,"FlaxGPTJForCausalLM"),FCt.forEach(t),aLr=r(mBe," (GPT-J model)"),mBe.forEach(t),nLr=i(Oe),$3=n(Oe,"LI",{});var fBe=s($3);LMe=n(fBe,"STRONG",{});var vCt=s(LMe);sLr=r(vCt,"roberta"),vCt.forEach(t),lLr=r(fBe," \u2014 "),sJ=n(fBe,"A",{href:!0});var TCt=s(sJ);iLr=r(TCt,"FlaxRobertaForCausalLM"),TCt.forEach(t),dLr=r(fBe," (RoBERTa model)"),fBe.forEach(t),cLr=i(Oe),k3=n(Oe,"LI",{});var gBe=s(k3);xMe=n(gBe,"STRONG",{});var MCt=s(xMe);mLr=r(MCt,"xglm"),MCt.forEach(t),fLr=r(gBe," \u2014 "),lJ=n(gBe,"A",{href:!0});var ECt=s(lJ);gLr=r(ECt,"FlaxXGLMForCausalLM"),ECt.forEach(t),hLr=r(gBe," (XGLM model)"),gBe.forEach(t),Oe.forEach(t),uLr=i(Dl),T(S3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),hqe=i(m),Sc=n(m,"H2",{class:!0});var Tje=s(Sc);R3=n(Tje,"A",{id:!0,class:!0,href:!0});var CCt=s(R3);$Me=n(CCt,"SPAN",{});var wCt=s($Me);T(r7.$$.fragment,wCt),wCt.forEach(t),CCt.forEach(t),pLr=i(Tje),kMe=n(Tje,"SPAN",{});var ACt=s(kMe);_Lr=r(ACt,"FlaxAutoModelForPreTraining"),ACt.forEach(t),Tje.forEach(t),uqe=i(m),gr=n(m,"DIV",{class:!0});var Gl=s(gr);T(t7.$$.fragment,Gl),bLr=i(Gl),Rc=n(Gl,"P",{});var LZ=s(Rc);FLr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iJ=n(LZ,"A",{href:!0});var yCt=s(iJ);vLr=r(yCt,"from_pretrained()"),yCt.forEach(t),TLr=r(LZ," class method or the "),dJ=n(LZ,"A",{href:!0});var LCt=s(dJ);MLr=r(LCt,"from_config()"),LCt.forEach(t),ELr=r(LZ,` class
method.`),LZ.forEach(t),CLr=i(Gl),a7=n(Gl,"P",{});var Mje=s(a7);wLr=r(Mje,"This class cannot be instantiated directly using "),SMe=n(Mje,"CODE",{});var xCt=s(SMe);ALr=r(xCt,"__init__()"),xCt.forEach(t),yLr=r(Mje," (throws an error)."),Mje.forEach(t),LLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var C6=s(Gt);T(n7.$$.fragment,C6),xLr=i(C6),RMe=n(C6,"P",{});var $Ct=s(RMe);$Lr=r($Ct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$Ct.forEach(t),kLr=i(C6),Bc=n(C6,"P",{});var xZ=s(Bc);SLr=r(xZ,`Note:
Loading a model from its configuration file does `),BMe=n(xZ,"STRONG",{});var kCt=s(BMe);RLr=r(kCt,"not"),kCt.forEach(t),BLr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(xZ,"A",{href:!0});var SCt=s(cJ);PLr=r(SCt,"from_pretrained()"),SCt.forEach(t),ILr=r(xZ," to load the model weights."),xZ.forEach(t),qLr=i(C6),T(B3.$$.fragment,C6),C6.forEach(t),NLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(s7.$$.fragment,Ol),jLr=i(Ol),PMe=n(Ol,"P",{});var RCt=s(PMe);DLr=r(RCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),RCt.forEach(t),GLr=i(Ol),un=n(Ol,"P",{});var w6=s(un);OLr=r(w6,"The model class to instantiate is selected based on the "),IMe=n(w6,"CODE",{});var BCt=s(IMe);VLr=r(BCt,"model_type"),BCt.forEach(t),XLr=r(w6,` property of the config object (either
passed as an argument or loaded from `),qMe=n(w6,"CODE",{});var PCt=s(qMe);zLr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),QLr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(w6,"CODE",{});var ICt=s(NMe);WLr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),HLr=r(w6,":"),w6.forEach(t),ULr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);P3=n(we,"LI",{});var hBe=s(P3);jMe=n(hBe,"STRONG",{});var qCt=s(jMe);JLr=r(qCt,"albert"),qCt.forEach(t),YLr=r(hBe," \u2014 "),mJ=n(hBe,"A",{href:!0});var NCt=s(mJ);KLr=r(NCt,"FlaxAlbertForPreTraining"),NCt.forEach(t),ZLr=r(hBe," (ALBERT model)"),hBe.forEach(t),e8r=i(we),I3=n(we,"LI",{});var uBe=s(I3);DMe=n(uBe,"STRONG",{});var jCt=s(DMe);o8r=r(jCt,"bart"),jCt.forEach(t),r8r=r(uBe," \u2014 "),fJ=n(uBe,"A",{href:!0});var DCt=s(fJ);t8r=r(DCt,"FlaxBartForConditionalGeneration"),DCt.forEach(t),a8r=r(uBe," (BART model)"),uBe.forEach(t),n8r=i(we),q3=n(we,"LI",{});var pBe=s(q3);GMe=n(pBe,"STRONG",{});var GCt=s(GMe);s8r=r(GCt,"bert"),GCt.forEach(t),l8r=r(pBe," \u2014 "),gJ=n(pBe,"A",{href:!0});var OCt=s(gJ);i8r=r(OCt,"FlaxBertForPreTraining"),OCt.forEach(t),d8r=r(pBe," (BERT model)"),pBe.forEach(t),c8r=i(we),N3=n(we,"LI",{});var _Be=s(N3);OMe=n(_Be,"STRONG",{});var VCt=s(OMe);m8r=r(VCt,"big_bird"),VCt.forEach(t),f8r=r(_Be," \u2014 "),hJ=n(_Be,"A",{href:!0});var XCt=s(hJ);g8r=r(XCt,"FlaxBigBirdForPreTraining"),XCt.forEach(t),h8r=r(_Be," (BigBird model)"),_Be.forEach(t),u8r=i(we),j3=n(we,"LI",{});var bBe=s(j3);VMe=n(bBe,"STRONG",{});var zCt=s(VMe);p8r=r(zCt,"electra"),zCt.forEach(t),_8r=r(bBe," \u2014 "),uJ=n(bBe,"A",{href:!0});var QCt=s(uJ);b8r=r(QCt,"FlaxElectraForPreTraining"),QCt.forEach(t),F8r=r(bBe," (ELECTRA model)"),bBe.forEach(t),v8r=i(we),D3=n(we,"LI",{});var FBe=s(D3);XMe=n(FBe,"STRONG",{});var WCt=s(XMe);T8r=r(WCt,"mbart"),WCt.forEach(t),M8r=r(FBe," \u2014 "),pJ=n(FBe,"A",{href:!0});var HCt=s(pJ);E8r=r(HCt,"FlaxMBartForConditionalGeneration"),HCt.forEach(t),C8r=r(FBe," (mBART model)"),FBe.forEach(t),w8r=i(we),G3=n(we,"LI",{});var vBe=s(G3);zMe=n(vBe,"STRONG",{});var UCt=s(zMe);A8r=r(UCt,"mt5"),UCt.forEach(t),y8r=r(vBe," \u2014 "),_J=n(vBe,"A",{href:!0});var JCt=s(_J);L8r=r(JCt,"FlaxMT5ForConditionalGeneration"),JCt.forEach(t),x8r=r(vBe," (mT5 model)"),vBe.forEach(t),$8r=i(we),O3=n(we,"LI",{});var TBe=s(O3);QMe=n(TBe,"STRONG",{});var YCt=s(QMe);k8r=r(YCt,"roberta"),YCt.forEach(t),S8r=r(TBe," \u2014 "),bJ=n(TBe,"A",{href:!0});var KCt=s(bJ);R8r=r(KCt,"FlaxRobertaForMaskedLM"),KCt.forEach(t),B8r=r(TBe," (RoBERTa model)"),TBe.forEach(t),P8r=i(we),V3=n(we,"LI",{});var MBe=s(V3);WMe=n(MBe,"STRONG",{});var ZCt=s(WMe);I8r=r(ZCt,"roformer"),ZCt.forEach(t),q8r=r(MBe," \u2014 "),FJ=n(MBe,"A",{href:!0});var e3t=s(FJ);N8r=r(e3t,"FlaxRoFormerForMaskedLM"),e3t.forEach(t),j8r=r(MBe," (RoFormer model)"),MBe.forEach(t),D8r=i(we),X3=n(we,"LI",{});var EBe=s(X3);HMe=n(EBe,"STRONG",{});var o3t=s(HMe);G8r=r(o3t,"t5"),o3t.forEach(t),O8r=r(EBe," \u2014 "),vJ=n(EBe,"A",{href:!0});var r3t=s(vJ);V8r=r(r3t,"FlaxT5ForConditionalGeneration"),r3t.forEach(t),X8r=r(EBe," (T5 model)"),EBe.forEach(t),z8r=i(we),z3=n(we,"LI",{});var CBe=s(z3);UMe=n(CBe,"STRONG",{});var t3t=s(UMe);Q8r=r(t3t,"wav2vec2"),t3t.forEach(t),W8r=r(CBe," \u2014 "),TJ=n(CBe,"A",{href:!0});var a3t=s(TJ);H8r=r(a3t,"FlaxWav2Vec2ForPreTraining"),a3t.forEach(t),U8r=r(CBe," (Wav2Vec2 model)"),CBe.forEach(t),J8r=i(we),Q3=n(we,"LI",{});var wBe=s(Q3);JMe=n(wBe,"STRONG",{});var n3t=s(JMe);Y8r=r(n3t,"xlm-roberta"),n3t.forEach(t),K8r=r(wBe," \u2014 "),MJ=n(wBe,"A",{href:!0});var s3t=s(MJ);Z8r=r(s3t,"FlaxXLMRobertaForMaskedLM"),s3t.forEach(t),exr=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),we.forEach(t),oxr=i(Ol),T(W3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),pqe=i(m),Pc=n(m,"H2",{class:!0});var Eje=s(Pc);H3=n(Eje,"A",{id:!0,class:!0,href:!0});var l3t=s(H3);YMe=n(l3t,"SPAN",{});var i3t=s(YMe);T(l7.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),rxr=i(Eje),KMe=n(Eje,"SPAN",{});var d3t=s(KMe);txr=r(d3t,"FlaxAutoModelForMaskedLM"),d3t.forEach(t),Eje.forEach(t),_qe=i(m),hr=n(m,"DIV",{class:!0});var Vl=s(hr);T(i7.$$.fragment,Vl),axr=i(Vl),Ic=n(Vl,"P",{});var $Z=s(Ic);nxr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EJ=n($Z,"A",{href:!0});var c3t=s(EJ);sxr=r(c3t,"from_pretrained()"),c3t.forEach(t),lxr=r($Z," class method or the "),CJ=n($Z,"A",{href:!0});var m3t=s(CJ);ixr=r(m3t,"from_config()"),m3t.forEach(t),dxr=r($Z,` class
method.`),$Z.forEach(t),cxr=i(Vl),d7=n(Vl,"P",{});var Cje=s(d7);mxr=r(Cje,"This class cannot be instantiated directly using "),ZMe=n(Cje,"CODE",{});var f3t=s(ZMe);fxr=r(f3t,"__init__()"),f3t.forEach(t),gxr=r(Cje," (throws an error)."),Cje.forEach(t),hxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var A6=s(Ot);T(c7.$$.fragment,A6),uxr=i(A6),e4e=n(A6,"P",{});var g3t=s(e4e);pxr=r(g3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g3t.forEach(t),_xr=i(A6),qc=n(A6,"P",{});var kZ=s(qc);bxr=r(kZ,`Note:
Loading a model from its configuration file does `),o4e=n(kZ,"STRONG",{});var h3t=s(o4e);Fxr=r(h3t,"not"),h3t.forEach(t),vxr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(kZ,"A",{href:!0});var u3t=s(wJ);Txr=r(u3t,"from_pretrained()"),u3t.forEach(t),Mxr=r(kZ," to load the model weights."),kZ.forEach(t),Exr=i(A6),T(U3.$$.fragment,A6),A6.forEach(t),Cxr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(m7.$$.fragment,Xl),wxr=i(Xl),r4e=n(Xl,"P",{});var p3t=s(r4e);Axr=r(p3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),p3t.forEach(t),yxr=i(Xl),pn=n(Xl,"P",{});var y6=s(pn);Lxr=r(y6,"The model class to instantiate is selected based on the "),t4e=n(y6,"CODE",{});var _3t=s(t4e);xxr=r(_3t,"model_type"),_3t.forEach(t),$xr=r(y6,` property of the config object (either
passed as an argument or loaded from `),a4e=n(y6,"CODE",{});var b3t=s(a4e);kxr=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),Sxr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(y6,"CODE",{});var F3t=s(n4e);Rxr=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),Bxr=r(y6,":"),y6.forEach(t),Pxr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);J3=n(Be,"LI",{});var ABe=s(J3);s4e=n(ABe,"STRONG",{});var v3t=s(s4e);Ixr=r(v3t,"albert"),v3t.forEach(t),qxr=r(ABe," \u2014 "),AJ=n(ABe,"A",{href:!0});var T3t=s(AJ);Nxr=r(T3t,"FlaxAlbertForMaskedLM"),T3t.forEach(t),jxr=r(ABe," (ALBERT model)"),ABe.forEach(t),Dxr=i(Be),Y3=n(Be,"LI",{});var yBe=s(Y3);l4e=n(yBe,"STRONG",{});var M3t=s(l4e);Gxr=r(M3t,"bart"),M3t.forEach(t),Oxr=r(yBe," \u2014 "),yJ=n(yBe,"A",{href:!0});var E3t=s(yJ);Vxr=r(E3t,"FlaxBartForConditionalGeneration"),E3t.forEach(t),Xxr=r(yBe," (BART model)"),yBe.forEach(t),zxr=i(Be),K3=n(Be,"LI",{});var LBe=s(K3);i4e=n(LBe,"STRONG",{});var C3t=s(i4e);Qxr=r(C3t,"bert"),C3t.forEach(t),Wxr=r(LBe," \u2014 "),LJ=n(LBe,"A",{href:!0});var w3t=s(LJ);Hxr=r(w3t,"FlaxBertForMaskedLM"),w3t.forEach(t),Uxr=r(LBe," (BERT model)"),LBe.forEach(t),Jxr=i(Be),Z3=n(Be,"LI",{});var xBe=s(Z3);d4e=n(xBe,"STRONG",{});var A3t=s(d4e);Yxr=r(A3t,"big_bird"),A3t.forEach(t),Kxr=r(xBe," \u2014 "),xJ=n(xBe,"A",{href:!0});var y3t=s(xJ);Zxr=r(y3t,"FlaxBigBirdForMaskedLM"),y3t.forEach(t),e7r=r(xBe," (BigBird model)"),xBe.forEach(t),o7r=i(Be),ew=n(Be,"LI",{});var $Be=s(ew);c4e=n($Be,"STRONG",{});var L3t=s(c4e);r7r=r(L3t,"distilbert"),L3t.forEach(t),t7r=r($Be," \u2014 "),$J=n($Be,"A",{href:!0});var x3t=s($J);a7r=r(x3t,"FlaxDistilBertForMaskedLM"),x3t.forEach(t),n7r=r($Be," (DistilBERT model)"),$Be.forEach(t),s7r=i(Be),ow=n(Be,"LI",{});var kBe=s(ow);m4e=n(kBe,"STRONG",{});var $3t=s(m4e);l7r=r($3t,"electra"),$3t.forEach(t),i7r=r(kBe," \u2014 "),kJ=n(kBe,"A",{href:!0});var k3t=s(kJ);d7r=r(k3t,"FlaxElectraForMaskedLM"),k3t.forEach(t),c7r=r(kBe," (ELECTRA model)"),kBe.forEach(t),m7r=i(Be),rw=n(Be,"LI",{});var SBe=s(rw);f4e=n(SBe,"STRONG",{});var S3t=s(f4e);f7r=r(S3t,"mbart"),S3t.forEach(t),g7r=r(SBe," \u2014 "),SJ=n(SBe,"A",{href:!0});var R3t=s(SJ);h7r=r(R3t,"FlaxMBartForConditionalGeneration"),R3t.forEach(t),u7r=r(SBe," (mBART model)"),SBe.forEach(t),p7r=i(Be),tw=n(Be,"LI",{});var RBe=s(tw);g4e=n(RBe,"STRONG",{});var B3t=s(g4e);_7r=r(B3t,"roberta"),B3t.forEach(t),b7r=r(RBe," \u2014 "),RJ=n(RBe,"A",{href:!0});var P3t=s(RJ);F7r=r(P3t,"FlaxRobertaForMaskedLM"),P3t.forEach(t),v7r=r(RBe," (RoBERTa model)"),RBe.forEach(t),T7r=i(Be),aw=n(Be,"LI",{});var BBe=s(aw);h4e=n(BBe,"STRONG",{});var I3t=s(h4e);M7r=r(I3t,"roformer"),I3t.forEach(t),E7r=r(BBe," \u2014 "),BJ=n(BBe,"A",{href:!0});var q3t=s(BJ);C7r=r(q3t,"FlaxRoFormerForMaskedLM"),q3t.forEach(t),w7r=r(BBe," (RoFormer model)"),BBe.forEach(t),A7r=i(Be),nw=n(Be,"LI",{});var PBe=s(nw);u4e=n(PBe,"STRONG",{});var N3t=s(u4e);y7r=r(N3t,"xlm-roberta"),N3t.forEach(t),L7r=r(PBe," \u2014 "),PJ=n(PBe,"A",{href:!0});var j3t=s(PJ);x7r=r(j3t,"FlaxXLMRobertaForMaskedLM"),j3t.forEach(t),$7r=r(PBe," (XLM-RoBERTa model)"),PBe.forEach(t),Be.forEach(t),k7r=i(Xl),T(sw.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),bqe=i(m),Nc=n(m,"H2",{class:!0});var wje=s(Nc);lw=n(wje,"A",{id:!0,class:!0,href:!0});var D3t=s(lw);p4e=n(D3t,"SPAN",{});var G3t=s(p4e);T(f7.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),S7r=i(wje),_4e=n(wje,"SPAN",{});var O3t=s(_4e);R7r=r(O3t,"FlaxAutoModelForSeq2SeqLM"),O3t.forEach(t),wje.forEach(t),Fqe=i(m),ur=n(m,"DIV",{class:!0});var zl=s(ur);T(g7.$$.fragment,zl),B7r=i(zl),jc=n(zl,"P",{});var SZ=s(jc);P7r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IJ=n(SZ,"A",{href:!0});var V3t=s(IJ);I7r=r(V3t,"from_pretrained()"),V3t.forEach(t),q7r=r(SZ," class method or the "),qJ=n(SZ,"A",{href:!0});var X3t=s(qJ);N7r=r(X3t,"from_config()"),X3t.forEach(t),j7r=r(SZ,` class
method.`),SZ.forEach(t),D7r=i(zl),h7=n(zl,"P",{});var Aje=s(h7);G7r=r(Aje,"This class cannot be instantiated directly using "),b4e=n(Aje,"CODE",{});var z3t=s(b4e);O7r=r(z3t,"__init__()"),z3t.forEach(t),V7r=r(Aje," (throws an error)."),Aje.forEach(t),X7r=i(zl),Vt=n(zl,"DIV",{class:!0});var L6=s(Vt);T(u7.$$.fragment,L6),z7r=i(L6),F4e=n(L6,"P",{});var Q3t=s(F4e);Q7r=r(Q3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q3t.forEach(t),W7r=i(L6),Dc=n(L6,"P",{});var RZ=s(Dc);H7r=r(RZ,`Note:
Loading a model from its configuration file does `),v4e=n(RZ,"STRONG",{});var W3t=s(v4e);U7r=r(W3t,"not"),W3t.forEach(t),J7r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(RZ,"A",{href:!0});var H3t=s(NJ);Y7r=r(H3t,"from_pretrained()"),H3t.forEach(t),K7r=r(RZ," to load the model weights."),RZ.forEach(t),Z7r=i(L6),T(iw.$$.fragment,L6),L6.forEach(t),e9r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(p7.$$.fragment,Ql),o9r=i(Ql),T4e=n(Ql,"P",{});var U3t=s(T4e);r9r=r(U3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),U3t.forEach(t),t9r=i(Ql),_n=n(Ql,"P",{});var x6=s(_n);a9r=r(x6,"The model class to instantiate is selected based on the "),M4e=n(x6,"CODE",{});var J3t=s(M4e);n9r=r(J3t,"model_type"),J3t.forEach(t),s9r=r(x6,` property of the config object (either
passed as an argument or loaded from `),E4e=n(x6,"CODE",{});var Y3t=s(E4e);l9r=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),i9r=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(x6,"CODE",{});var K3t=s(C4e);d9r=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),c9r=r(x6,":"),x6.forEach(t),m9r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);dw=n(Ve,"LI",{});var IBe=s(dw);w4e=n(IBe,"STRONG",{});var Z3t=s(w4e);f9r=r(Z3t,"bart"),Z3t.forEach(t),g9r=r(IBe," \u2014 "),jJ=n(IBe,"A",{href:!0});var ewt=s(jJ);h9r=r(ewt,"FlaxBartForConditionalGeneration"),ewt.forEach(t),u9r=r(IBe," (BART model)"),IBe.forEach(t),p9r=i(Ve),cw=n(Ve,"LI",{});var qBe=s(cw);A4e=n(qBe,"STRONG",{});var owt=s(A4e);_9r=r(owt,"blenderbot"),owt.forEach(t),b9r=r(qBe," \u2014 "),DJ=n(qBe,"A",{href:!0});var rwt=s(DJ);F9r=r(rwt,"FlaxBlenderbotForConditionalGeneration"),rwt.forEach(t),v9r=r(qBe," (Blenderbot model)"),qBe.forEach(t),T9r=i(Ve),mw=n(Ve,"LI",{});var NBe=s(mw);y4e=n(NBe,"STRONG",{});var twt=s(y4e);M9r=r(twt,"blenderbot-small"),twt.forEach(t),E9r=r(NBe," \u2014 "),GJ=n(NBe,"A",{href:!0});var awt=s(GJ);C9r=r(awt,"FlaxBlenderbotSmallForConditionalGeneration"),awt.forEach(t),w9r=r(NBe," (BlenderbotSmall model)"),NBe.forEach(t),A9r=i(Ve),fw=n(Ve,"LI",{});var jBe=s(fw);L4e=n(jBe,"STRONG",{});var nwt=s(L4e);y9r=r(nwt,"encoder-decoder"),nwt.forEach(t),L9r=r(jBe," \u2014 "),OJ=n(jBe,"A",{href:!0});var swt=s(OJ);x9r=r(swt,"FlaxEncoderDecoderModel"),swt.forEach(t),$9r=r(jBe," (Encoder decoder model)"),jBe.forEach(t),k9r=i(Ve),gw=n(Ve,"LI",{});var DBe=s(gw);x4e=n(DBe,"STRONG",{});var lwt=s(x4e);S9r=r(lwt,"marian"),lwt.forEach(t),R9r=r(DBe," \u2014 "),VJ=n(DBe,"A",{href:!0});var iwt=s(VJ);B9r=r(iwt,"FlaxMarianMTModel"),iwt.forEach(t),P9r=r(DBe," (Marian model)"),DBe.forEach(t),I9r=i(Ve),hw=n(Ve,"LI",{});var GBe=s(hw);$4e=n(GBe,"STRONG",{});var dwt=s($4e);q9r=r(dwt,"mbart"),dwt.forEach(t),N9r=r(GBe," \u2014 "),XJ=n(GBe,"A",{href:!0});var cwt=s(XJ);j9r=r(cwt,"FlaxMBartForConditionalGeneration"),cwt.forEach(t),D9r=r(GBe," (mBART model)"),GBe.forEach(t),G9r=i(Ve),uw=n(Ve,"LI",{});var OBe=s(uw);k4e=n(OBe,"STRONG",{});var mwt=s(k4e);O9r=r(mwt,"mt5"),mwt.forEach(t),V9r=r(OBe," \u2014 "),zJ=n(OBe,"A",{href:!0});var fwt=s(zJ);X9r=r(fwt,"FlaxMT5ForConditionalGeneration"),fwt.forEach(t),z9r=r(OBe," (mT5 model)"),OBe.forEach(t),Q9r=i(Ve),pw=n(Ve,"LI",{});var VBe=s(pw);S4e=n(VBe,"STRONG",{});var gwt=s(S4e);W9r=r(gwt,"pegasus"),gwt.forEach(t),H9r=r(VBe," \u2014 "),QJ=n(VBe,"A",{href:!0});var hwt=s(QJ);U9r=r(hwt,"FlaxPegasusForConditionalGeneration"),hwt.forEach(t),J9r=r(VBe," (Pegasus model)"),VBe.forEach(t),Y9r=i(Ve),_w=n(Ve,"LI",{});var XBe=s(_w);R4e=n(XBe,"STRONG",{});var uwt=s(R4e);K9r=r(uwt,"t5"),uwt.forEach(t),Z9r=r(XBe," \u2014 "),WJ=n(XBe,"A",{href:!0});var pwt=s(WJ);e$r=r(pwt,"FlaxT5ForConditionalGeneration"),pwt.forEach(t),o$r=r(XBe," (T5 model)"),XBe.forEach(t),Ve.forEach(t),r$r=i(Ql),T(bw.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),vqe=i(m),Gc=n(m,"H2",{class:!0});var yje=s(Gc);Fw=n(yje,"A",{id:!0,class:!0,href:!0});var _wt=s(Fw);B4e=n(_wt,"SPAN",{});var bwt=s(B4e);T(_7.$$.fragment,bwt),bwt.forEach(t),_wt.forEach(t),t$r=i(yje),P4e=n(yje,"SPAN",{});var Fwt=s(P4e);a$r=r(Fwt,"FlaxAutoModelForSequenceClassification"),Fwt.forEach(t),yje.forEach(t),Tqe=i(m),pr=n(m,"DIV",{class:!0});var Wl=s(pr);T(b7.$$.fragment,Wl),n$r=i(Wl),Oc=n(Wl,"P",{});var BZ=s(Oc);s$r=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HJ=n(BZ,"A",{href:!0});var vwt=s(HJ);l$r=r(vwt,"from_pretrained()"),vwt.forEach(t),i$r=r(BZ," class method or the "),UJ=n(BZ,"A",{href:!0});var Twt=s(UJ);d$r=r(Twt,"from_config()"),Twt.forEach(t),c$r=r(BZ,` class
method.`),BZ.forEach(t),m$r=i(Wl),F7=n(Wl,"P",{});var Lje=s(F7);f$r=r(Lje,"This class cannot be instantiated directly using "),I4e=n(Lje,"CODE",{});var Mwt=s(I4e);g$r=r(Mwt,"__init__()"),Mwt.forEach(t),h$r=r(Lje," (throws an error)."),Lje.forEach(t),u$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var $6=s(Xt);T(v7.$$.fragment,$6),p$r=i($6),q4e=n($6,"P",{});var Ewt=s(q4e);_$r=r(Ewt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ewt.forEach(t),b$r=i($6),Vc=n($6,"P",{});var PZ=s(Vc);F$r=r(PZ,`Note:
Loading a model from its configuration file does `),N4e=n(PZ,"STRONG",{});var Cwt=s(N4e);v$r=r(Cwt,"not"),Cwt.forEach(t),T$r=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(PZ,"A",{href:!0});var wwt=s(JJ);M$r=r(wwt,"from_pretrained()"),wwt.forEach(t),E$r=r(PZ," to load the model weights."),PZ.forEach(t),C$r=i($6),T(vw.$$.fragment,$6),$6.forEach(t),w$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(T7.$$.fragment,Hl),A$r=i(Hl),j4e=n(Hl,"P",{});var Awt=s(j4e);y$r=r(Awt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Awt.forEach(t),L$r=i(Hl),bn=n(Hl,"P",{});var k6=s(bn);x$r=r(k6,"The model class to instantiate is selected based on the "),D4e=n(k6,"CODE",{});var ywt=s(D4e);$$r=r(ywt,"model_type"),ywt.forEach(t),k$r=r(k6,` property of the config object (either
passed as an argument or loaded from `),G4e=n(k6,"CODE",{});var Lwt=s(G4e);S$r=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),R$r=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(k6,"CODE",{});var xwt=s(O4e);B$r=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),P$r=r(k6,":"),k6.forEach(t),I$r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);Tw=n(Pe,"LI",{});var zBe=s(Tw);V4e=n(zBe,"STRONG",{});var $wt=s(V4e);q$r=r($wt,"albert"),$wt.forEach(t),N$r=r(zBe," \u2014 "),YJ=n(zBe,"A",{href:!0});var kwt=s(YJ);j$r=r(kwt,"FlaxAlbertForSequenceClassification"),kwt.forEach(t),D$r=r(zBe," (ALBERT model)"),zBe.forEach(t),G$r=i(Pe),Mw=n(Pe,"LI",{});var QBe=s(Mw);X4e=n(QBe,"STRONG",{});var Swt=s(X4e);O$r=r(Swt,"bart"),Swt.forEach(t),V$r=r(QBe," \u2014 "),KJ=n(QBe,"A",{href:!0});var Rwt=s(KJ);X$r=r(Rwt,"FlaxBartForSequenceClassification"),Rwt.forEach(t),z$r=r(QBe," (BART model)"),QBe.forEach(t),Q$r=i(Pe),Ew=n(Pe,"LI",{});var WBe=s(Ew);z4e=n(WBe,"STRONG",{});var Bwt=s(z4e);W$r=r(Bwt,"bert"),Bwt.forEach(t),H$r=r(WBe," \u2014 "),ZJ=n(WBe,"A",{href:!0});var Pwt=s(ZJ);U$r=r(Pwt,"FlaxBertForSequenceClassification"),Pwt.forEach(t),J$r=r(WBe," (BERT model)"),WBe.forEach(t),Y$r=i(Pe),Cw=n(Pe,"LI",{});var HBe=s(Cw);Q4e=n(HBe,"STRONG",{});var Iwt=s(Q4e);K$r=r(Iwt,"big_bird"),Iwt.forEach(t),Z$r=r(HBe," \u2014 "),eY=n(HBe,"A",{href:!0});var qwt=s(eY);ekr=r(qwt,"FlaxBigBirdForSequenceClassification"),qwt.forEach(t),okr=r(HBe," (BigBird model)"),HBe.forEach(t),rkr=i(Pe),ww=n(Pe,"LI",{});var UBe=s(ww);W4e=n(UBe,"STRONG",{});var Nwt=s(W4e);tkr=r(Nwt,"distilbert"),Nwt.forEach(t),akr=r(UBe," \u2014 "),oY=n(UBe,"A",{href:!0});var jwt=s(oY);nkr=r(jwt,"FlaxDistilBertForSequenceClassification"),jwt.forEach(t),skr=r(UBe," (DistilBERT model)"),UBe.forEach(t),lkr=i(Pe),Aw=n(Pe,"LI",{});var JBe=s(Aw);H4e=n(JBe,"STRONG",{});var Dwt=s(H4e);ikr=r(Dwt,"electra"),Dwt.forEach(t),dkr=r(JBe," \u2014 "),rY=n(JBe,"A",{href:!0});var Gwt=s(rY);ckr=r(Gwt,"FlaxElectraForSequenceClassification"),Gwt.forEach(t),mkr=r(JBe," (ELECTRA model)"),JBe.forEach(t),fkr=i(Pe),yw=n(Pe,"LI",{});var YBe=s(yw);U4e=n(YBe,"STRONG",{});var Owt=s(U4e);gkr=r(Owt,"mbart"),Owt.forEach(t),hkr=r(YBe," \u2014 "),tY=n(YBe,"A",{href:!0});var Vwt=s(tY);ukr=r(Vwt,"FlaxMBartForSequenceClassification"),Vwt.forEach(t),pkr=r(YBe," (mBART model)"),YBe.forEach(t),_kr=i(Pe),Lw=n(Pe,"LI",{});var KBe=s(Lw);J4e=n(KBe,"STRONG",{});var Xwt=s(J4e);bkr=r(Xwt,"roberta"),Xwt.forEach(t),Fkr=r(KBe," \u2014 "),aY=n(KBe,"A",{href:!0});var zwt=s(aY);vkr=r(zwt,"FlaxRobertaForSequenceClassification"),zwt.forEach(t),Tkr=r(KBe," (RoBERTa model)"),KBe.forEach(t),Mkr=i(Pe),xw=n(Pe,"LI",{});var ZBe=s(xw);Y4e=n(ZBe,"STRONG",{});var Qwt=s(Y4e);Ekr=r(Qwt,"roformer"),Qwt.forEach(t),Ckr=r(ZBe," \u2014 "),nY=n(ZBe,"A",{href:!0});var Wwt=s(nY);wkr=r(Wwt,"FlaxRoFormerForSequenceClassification"),Wwt.forEach(t),Akr=r(ZBe," (RoFormer model)"),ZBe.forEach(t),ykr=i(Pe),$w=n(Pe,"LI",{});var ePe=s($w);K4e=n(ePe,"STRONG",{});var Hwt=s(K4e);Lkr=r(Hwt,"xlm-roberta"),Hwt.forEach(t),xkr=r(ePe," \u2014 "),sY=n(ePe,"A",{href:!0});var Uwt=s(sY);$kr=r(Uwt,"FlaxXLMRobertaForSequenceClassification"),Uwt.forEach(t),kkr=r(ePe," (XLM-RoBERTa model)"),ePe.forEach(t),Pe.forEach(t),Skr=i(Hl),T(kw.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Mqe=i(m),Xc=n(m,"H2",{class:!0});var xje=s(Xc);Sw=n(xje,"A",{id:!0,class:!0,href:!0});var Jwt=s(Sw);Z4e=n(Jwt,"SPAN",{});var Ywt=s(Z4e);T(M7.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),Rkr=i(xje),eEe=n(xje,"SPAN",{});var Kwt=s(eEe);Bkr=r(Kwt,"FlaxAutoModelForQuestionAnswering"),Kwt.forEach(t),xje.forEach(t),Eqe=i(m),_r=n(m,"DIV",{class:!0});var Ul=s(_r);T(E7.$$.fragment,Ul),Pkr=i(Ul),zc=n(Ul,"P",{});var IZ=s(zc);Ikr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lY=n(IZ,"A",{href:!0});var Zwt=s(lY);qkr=r(Zwt,"from_pretrained()"),Zwt.forEach(t),Nkr=r(IZ," class method or the "),iY=n(IZ,"A",{href:!0});var eAt=s(iY);jkr=r(eAt,"from_config()"),eAt.forEach(t),Dkr=r(IZ,` class
method.`),IZ.forEach(t),Gkr=i(Ul),C7=n(Ul,"P",{});var $je=s(C7);Okr=r($je,"This class cannot be instantiated directly using "),oEe=n($je,"CODE",{});var oAt=s(oEe);Vkr=r(oAt,"__init__()"),oAt.forEach(t),Xkr=r($je," (throws an error)."),$je.forEach(t),zkr=i(Ul),zt=n(Ul,"DIV",{class:!0});var S6=s(zt);T(w7.$$.fragment,S6),Qkr=i(S6),rEe=n(S6,"P",{});var rAt=s(rEe);Wkr=r(rAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rAt.forEach(t),Hkr=i(S6),Qc=n(S6,"P",{});var qZ=s(Qc);Ukr=r(qZ,`Note:
Loading a model from its configuration file does `),tEe=n(qZ,"STRONG",{});var tAt=s(tEe);Jkr=r(tAt,"not"),tAt.forEach(t),Ykr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(qZ,"A",{href:!0});var aAt=s(dY);Kkr=r(aAt,"from_pretrained()"),aAt.forEach(t),Zkr=r(qZ," to load the model weights."),qZ.forEach(t),eSr=i(S6),T(Rw.$$.fragment,S6),S6.forEach(t),oSr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(A7.$$.fragment,Jl),rSr=i(Jl),aEe=n(Jl,"P",{});var nAt=s(aEe);tSr=r(nAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nAt.forEach(t),aSr=i(Jl),Fn=n(Jl,"P",{});var R6=s(Fn);nSr=r(R6,"The model class to instantiate is selected based on the "),nEe=n(R6,"CODE",{});var sAt=s(nEe);sSr=r(sAt,"model_type"),sAt.forEach(t),lSr=r(R6,` property of the config object (either
passed as an argument or loaded from `),sEe=n(R6,"CODE",{});var lAt=s(sEe);iSr=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),dSr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lEe=n(R6,"CODE",{});var iAt=s(lEe);cSr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),mSr=r(R6,":"),R6.forEach(t),fSr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);Bw=n(Ie,"LI",{});var oPe=s(Bw);iEe=n(oPe,"STRONG",{});var dAt=s(iEe);gSr=r(dAt,"albert"),dAt.forEach(t),hSr=r(oPe," \u2014 "),cY=n(oPe,"A",{href:!0});var cAt=s(cY);uSr=r(cAt,"FlaxAlbertForQuestionAnswering"),cAt.forEach(t),pSr=r(oPe," (ALBERT model)"),oPe.forEach(t),_Sr=i(Ie),Pw=n(Ie,"LI",{});var rPe=s(Pw);dEe=n(rPe,"STRONG",{});var mAt=s(dEe);bSr=r(mAt,"bart"),mAt.forEach(t),FSr=r(rPe," \u2014 "),mY=n(rPe,"A",{href:!0});var fAt=s(mY);vSr=r(fAt,"FlaxBartForQuestionAnswering"),fAt.forEach(t),TSr=r(rPe," (BART model)"),rPe.forEach(t),MSr=i(Ie),Iw=n(Ie,"LI",{});var tPe=s(Iw);cEe=n(tPe,"STRONG",{});var gAt=s(cEe);ESr=r(gAt,"bert"),gAt.forEach(t),CSr=r(tPe," \u2014 "),fY=n(tPe,"A",{href:!0});var hAt=s(fY);wSr=r(hAt,"FlaxBertForQuestionAnswering"),hAt.forEach(t),ASr=r(tPe," (BERT model)"),tPe.forEach(t),ySr=i(Ie),qw=n(Ie,"LI",{});var aPe=s(qw);mEe=n(aPe,"STRONG",{});var uAt=s(mEe);LSr=r(uAt,"big_bird"),uAt.forEach(t),xSr=r(aPe," \u2014 "),gY=n(aPe,"A",{href:!0});var pAt=s(gY);$Sr=r(pAt,"FlaxBigBirdForQuestionAnswering"),pAt.forEach(t),kSr=r(aPe," (BigBird model)"),aPe.forEach(t),SSr=i(Ie),Nw=n(Ie,"LI",{});var nPe=s(Nw);fEe=n(nPe,"STRONG",{});var _At=s(fEe);RSr=r(_At,"distilbert"),_At.forEach(t),BSr=r(nPe," \u2014 "),hY=n(nPe,"A",{href:!0});var bAt=s(hY);PSr=r(bAt,"FlaxDistilBertForQuestionAnswering"),bAt.forEach(t),ISr=r(nPe," (DistilBERT model)"),nPe.forEach(t),qSr=i(Ie),jw=n(Ie,"LI",{});var sPe=s(jw);gEe=n(sPe,"STRONG",{});var FAt=s(gEe);NSr=r(FAt,"electra"),FAt.forEach(t),jSr=r(sPe," \u2014 "),uY=n(sPe,"A",{href:!0});var vAt=s(uY);DSr=r(vAt,"FlaxElectraForQuestionAnswering"),vAt.forEach(t),GSr=r(sPe," (ELECTRA model)"),sPe.forEach(t),OSr=i(Ie),Dw=n(Ie,"LI",{});var lPe=s(Dw);hEe=n(lPe,"STRONG",{});var TAt=s(hEe);VSr=r(TAt,"mbart"),TAt.forEach(t),XSr=r(lPe," \u2014 "),pY=n(lPe,"A",{href:!0});var MAt=s(pY);zSr=r(MAt,"FlaxMBartForQuestionAnswering"),MAt.forEach(t),QSr=r(lPe," (mBART model)"),lPe.forEach(t),WSr=i(Ie),Gw=n(Ie,"LI",{});var iPe=s(Gw);uEe=n(iPe,"STRONG",{});var EAt=s(uEe);HSr=r(EAt,"roberta"),EAt.forEach(t),USr=r(iPe," \u2014 "),_Y=n(iPe,"A",{href:!0});var CAt=s(_Y);JSr=r(CAt,"FlaxRobertaForQuestionAnswering"),CAt.forEach(t),YSr=r(iPe," (RoBERTa model)"),iPe.forEach(t),KSr=i(Ie),Ow=n(Ie,"LI",{});var dPe=s(Ow);pEe=n(dPe,"STRONG",{});var wAt=s(pEe);ZSr=r(wAt,"roformer"),wAt.forEach(t),eRr=r(dPe," \u2014 "),bY=n(dPe,"A",{href:!0});var AAt=s(bY);oRr=r(AAt,"FlaxRoFormerForQuestionAnswering"),AAt.forEach(t),rRr=r(dPe," (RoFormer model)"),dPe.forEach(t),tRr=i(Ie),Vw=n(Ie,"LI",{});var cPe=s(Vw);_Ee=n(cPe,"STRONG",{});var yAt=s(_Ee);aRr=r(yAt,"xlm-roberta"),yAt.forEach(t),nRr=r(cPe," \u2014 "),FY=n(cPe,"A",{href:!0});var LAt=s(FY);sRr=r(LAt,"FlaxXLMRobertaForQuestionAnswering"),LAt.forEach(t),lRr=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),Ie.forEach(t),iRr=i(Jl),T(Xw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Cqe=i(m),Wc=n(m,"H2",{class:!0});var kje=s(Wc);zw=n(kje,"A",{id:!0,class:!0,href:!0});var xAt=s(zw);bEe=n(xAt,"SPAN",{});var $At=s(bEe);T(y7.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),dRr=i(kje),FEe=n(kje,"SPAN",{});var kAt=s(FEe);cRr=r(kAt,"FlaxAutoModelForTokenClassification"),kAt.forEach(t),kje.forEach(t),wqe=i(m),br=n(m,"DIV",{class:!0});var Yl=s(br);T(L7.$$.fragment,Yl),mRr=i(Yl),Hc=n(Yl,"P",{});var NZ=s(Hc);fRr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vY=n(NZ,"A",{href:!0});var SAt=s(vY);gRr=r(SAt,"from_pretrained()"),SAt.forEach(t),hRr=r(NZ," class method or the "),TY=n(NZ,"A",{href:!0});var RAt=s(TY);uRr=r(RAt,"from_config()"),RAt.forEach(t),pRr=r(NZ,` class
method.`),NZ.forEach(t),_Rr=i(Yl),x7=n(Yl,"P",{});var Sje=s(x7);bRr=r(Sje,"This class cannot be instantiated directly using "),vEe=n(Sje,"CODE",{});var BAt=s(vEe);FRr=r(BAt,"__init__()"),BAt.forEach(t),vRr=r(Sje," (throws an error)."),Sje.forEach(t),TRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var B6=s(Qt);T($7.$$.fragment,B6),MRr=i(B6),TEe=n(B6,"P",{});var PAt=s(TEe);ERr=r(PAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PAt.forEach(t),CRr=i(B6),Uc=n(B6,"P",{});var jZ=s(Uc);wRr=r(jZ,`Note:
Loading a model from its configuration file does `),MEe=n(jZ,"STRONG",{});var IAt=s(MEe);ARr=r(IAt,"not"),IAt.forEach(t),yRr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(jZ,"A",{href:!0});var qAt=s(MY);LRr=r(qAt,"from_pretrained()"),qAt.forEach(t),xRr=r(jZ," to load the model weights."),jZ.forEach(t),$Rr=i(B6),T(Qw.$$.fragment,B6),B6.forEach(t),kRr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(k7.$$.fragment,Kl),SRr=i(Kl),EEe=n(Kl,"P",{});var NAt=s(EEe);RRr=r(NAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NAt.forEach(t),BRr=i(Kl),vn=n(Kl,"P",{});var P6=s(vn);PRr=r(P6,"The model class to instantiate is selected based on the "),CEe=n(P6,"CODE",{});var jAt=s(CEe);IRr=r(jAt,"model_type"),jAt.forEach(t),qRr=r(P6,` property of the config object (either
passed as an argument or loaded from `),wEe=n(P6,"CODE",{});var DAt=s(wEe);NRr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),jRr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(P6,"CODE",{});var GAt=s(AEe);DRr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),GRr=r(P6,":"),P6.forEach(t),ORr=i(Kl),De=n(Kl,"UL",{});var vo=s(De);Ww=n(vo,"LI",{});var mPe=s(Ww);yEe=n(mPe,"STRONG",{});var OAt=s(yEe);VRr=r(OAt,"albert"),OAt.forEach(t),XRr=r(mPe," \u2014 "),EY=n(mPe,"A",{href:!0});var VAt=s(EY);zRr=r(VAt,"FlaxAlbertForTokenClassification"),VAt.forEach(t),QRr=r(mPe," (ALBERT model)"),mPe.forEach(t),WRr=i(vo),Hw=n(vo,"LI",{});var fPe=s(Hw);LEe=n(fPe,"STRONG",{});var XAt=s(LEe);HRr=r(XAt,"bert"),XAt.forEach(t),URr=r(fPe," \u2014 "),CY=n(fPe,"A",{href:!0});var zAt=s(CY);JRr=r(zAt,"FlaxBertForTokenClassification"),zAt.forEach(t),YRr=r(fPe," (BERT model)"),fPe.forEach(t),KRr=i(vo),Uw=n(vo,"LI",{});var gPe=s(Uw);xEe=n(gPe,"STRONG",{});var QAt=s(xEe);ZRr=r(QAt,"big_bird"),QAt.forEach(t),eBr=r(gPe," \u2014 "),wY=n(gPe,"A",{href:!0});var WAt=s(wY);oBr=r(WAt,"FlaxBigBirdForTokenClassification"),WAt.forEach(t),rBr=r(gPe," (BigBird model)"),gPe.forEach(t),tBr=i(vo),Jw=n(vo,"LI",{});var hPe=s(Jw);$Ee=n(hPe,"STRONG",{});var HAt=s($Ee);aBr=r(HAt,"distilbert"),HAt.forEach(t),nBr=r(hPe," \u2014 "),AY=n(hPe,"A",{href:!0});var UAt=s(AY);sBr=r(UAt,"FlaxDistilBertForTokenClassification"),UAt.forEach(t),lBr=r(hPe," (DistilBERT model)"),hPe.forEach(t),iBr=i(vo),Yw=n(vo,"LI",{});var uPe=s(Yw);kEe=n(uPe,"STRONG",{});var JAt=s(kEe);dBr=r(JAt,"electra"),JAt.forEach(t),cBr=r(uPe," \u2014 "),yY=n(uPe,"A",{href:!0});var YAt=s(yY);mBr=r(YAt,"FlaxElectraForTokenClassification"),YAt.forEach(t),fBr=r(uPe," (ELECTRA model)"),uPe.forEach(t),gBr=i(vo),Kw=n(vo,"LI",{});var pPe=s(Kw);SEe=n(pPe,"STRONG",{});var KAt=s(SEe);hBr=r(KAt,"roberta"),KAt.forEach(t),uBr=r(pPe," \u2014 "),LY=n(pPe,"A",{href:!0});var ZAt=s(LY);pBr=r(ZAt,"FlaxRobertaForTokenClassification"),ZAt.forEach(t),_Br=r(pPe," (RoBERTa model)"),pPe.forEach(t),bBr=i(vo),Zw=n(vo,"LI",{});var _Pe=s(Zw);REe=n(_Pe,"STRONG",{});var e0t=s(REe);FBr=r(e0t,"roformer"),e0t.forEach(t),vBr=r(_Pe," \u2014 "),xY=n(_Pe,"A",{href:!0});var o0t=s(xY);TBr=r(o0t,"FlaxRoFormerForTokenClassification"),o0t.forEach(t),MBr=r(_Pe," (RoFormer model)"),_Pe.forEach(t),EBr=i(vo),eA=n(vo,"LI",{});var bPe=s(eA);BEe=n(bPe,"STRONG",{});var r0t=s(BEe);CBr=r(r0t,"xlm-roberta"),r0t.forEach(t),wBr=r(bPe," \u2014 "),$Y=n(bPe,"A",{href:!0});var t0t=s($Y);ABr=r(t0t,"FlaxXLMRobertaForTokenClassification"),t0t.forEach(t),yBr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),vo.forEach(t),LBr=i(Kl),T(oA.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Aqe=i(m),Jc=n(m,"H2",{class:!0});var Rje=s(Jc);rA=n(Rje,"A",{id:!0,class:!0,href:!0});var a0t=s(rA);PEe=n(a0t,"SPAN",{});var n0t=s(PEe);T(S7.$$.fragment,n0t),n0t.forEach(t),a0t.forEach(t),xBr=i(Rje),IEe=n(Rje,"SPAN",{});var s0t=s(IEe);$Br=r(s0t,"FlaxAutoModelForMultipleChoice"),s0t.forEach(t),Rje.forEach(t),yqe=i(m),Fr=n(m,"DIV",{class:!0});var Zl=s(Fr);T(R7.$$.fragment,Zl),kBr=i(Zl),Yc=n(Zl,"P",{});var DZ=s(Yc);SBr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=n(DZ,"A",{href:!0});var l0t=s(kY);RBr=r(l0t,"from_pretrained()"),l0t.forEach(t),BBr=r(DZ," class method or the "),SY=n(DZ,"A",{href:!0});var i0t=s(SY);PBr=r(i0t,"from_config()"),i0t.forEach(t),IBr=r(DZ,` class
method.`),DZ.forEach(t),qBr=i(Zl),B7=n(Zl,"P",{});var Bje=s(B7);NBr=r(Bje,"This class cannot be instantiated directly using "),qEe=n(Bje,"CODE",{});var d0t=s(qEe);jBr=r(d0t,"__init__()"),d0t.forEach(t),DBr=r(Bje," (throws an error)."),Bje.forEach(t),GBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var I6=s(Wt);T(P7.$$.fragment,I6),OBr=i(I6),NEe=n(I6,"P",{});var c0t=s(NEe);VBr=r(c0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),c0t.forEach(t),XBr=i(I6),Kc=n(I6,"P",{});var GZ=s(Kc);zBr=r(GZ,`Note:
Loading a model from its configuration file does `),jEe=n(GZ,"STRONG",{});var m0t=s(jEe);QBr=r(m0t,"not"),m0t.forEach(t),WBr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(GZ,"A",{href:!0});var f0t=s(RY);HBr=r(f0t,"from_pretrained()"),f0t.forEach(t),UBr=r(GZ," to load the model weights."),GZ.forEach(t),JBr=i(I6),T(tA.$$.fragment,I6),I6.forEach(t),YBr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(I7.$$.fragment,ei),KBr=i(ei),DEe=n(ei,"P",{});var g0t=s(DEe);ZBr=r(g0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g0t.forEach(t),ePr=i(ei),Tn=n(ei,"P",{});var q6=s(Tn);oPr=r(q6,"The model class to instantiate is selected based on the "),GEe=n(q6,"CODE",{});var h0t=s(GEe);rPr=r(h0t,"model_type"),h0t.forEach(t),tPr=r(q6,` property of the config object (either
passed as an argument or loaded from `),OEe=n(q6,"CODE",{});var u0t=s(OEe);aPr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),nPr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=n(q6,"CODE",{});var p0t=s(VEe);sPr=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),lPr=r(q6,":"),q6.forEach(t),iPr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);aA=n(To,"LI",{});var FPe=s(aA);XEe=n(FPe,"STRONG",{});var _0t=s(XEe);dPr=r(_0t,"albert"),_0t.forEach(t),cPr=r(FPe," \u2014 "),BY=n(FPe,"A",{href:!0});var b0t=s(BY);mPr=r(b0t,"FlaxAlbertForMultipleChoice"),b0t.forEach(t),fPr=r(FPe," (ALBERT model)"),FPe.forEach(t),gPr=i(To),nA=n(To,"LI",{});var vPe=s(nA);zEe=n(vPe,"STRONG",{});var F0t=s(zEe);hPr=r(F0t,"bert"),F0t.forEach(t),uPr=r(vPe," \u2014 "),PY=n(vPe,"A",{href:!0});var v0t=s(PY);pPr=r(v0t,"FlaxBertForMultipleChoice"),v0t.forEach(t),_Pr=r(vPe," (BERT model)"),vPe.forEach(t),bPr=i(To),sA=n(To,"LI",{});var TPe=s(sA);QEe=n(TPe,"STRONG",{});var T0t=s(QEe);FPr=r(T0t,"big_bird"),T0t.forEach(t),vPr=r(TPe," \u2014 "),IY=n(TPe,"A",{href:!0});var M0t=s(IY);TPr=r(M0t,"FlaxBigBirdForMultipleChoice"),M0t.forEach(t),MPr=r(TPe," (BigBird model)"),TPe.forEach(t),EPr=i(To),lA=n(To,"LI",{});var MPe=s(lA);WEe=n(MPe,"STRONG",{});var E0t=s(WEe);CPr=r(E0t,"distilbert"),E0t.forEach(t),wPr=r(MPe," \u2014 "),qY=n(MPe,"A",{href:!0});var C0t=s(qY);APr=r(C0t,"FlaxDistilBertForMultipleChoice"),C0t.forEach(t),yPr=r(MPe," (DistilBERT model)"),MPe.forEach(t),LPr=i(To),iA=n(To,"LI",{});var EPe=s(iA);HEe=n(EPe,"STRONG",{});var w0t=s(HEe);xPr=r(w0t,"electra"),w0t.forEach(t),$Pr=r(EPe," \u2014 "),NY=n(EPe,"A",{href:!0});var A0t=s(NY);kPr=r(A0t,"FlaxElectraForMultipleChoice"),A0t.forEach(t),SPr=r(EPe," (ELECTRA model)"),EPe.forEach(t),RPr=i(To),dA=n(To,"LI",{});var CPe=s(dA);UEe=n(CPe,"STRONG",{});var y0t=s(UEe);BPr=r(y0t,"roberta"),y0t.forEach(t),PPr=r(CPe," \u2014 "),jY=n(CPe,"A",{href:!0});var L0t=s(jY);IPr=r(L0t,"FlaxRobertaForMultipleChoice"),L0t.forEach(t),qPr=r(CPe," (RoBERTa model)"),CPe.forEach(t),NPr=i(To),cA=n(To,"LI",{});var wPe=s(cA);JEe=n(wPe,"STRONG",{});var x0t=s(JEe);jPr=r(x0t,"roformer"),x0t.forEach(t),DPr=r(wPe," \u2014 "),DY=n(wPe,"A",{href:!0});var $0t=s(DY);GPr=r($0t,"FlaxRoFormerForMultipleChoice"),$0t.forEach(t),OPr=r(wPe," (RoFormer model)"),wPe.forEach(t),VPr=i(To),mA=n(To,"LI",{});var APe=s(mA);YEe=n(APe,"STRONG",{});var k0t=s(YEe);XPr=r(k0t,"xlm-roberta"),k0t.forEach(t),zPr=r(APe," \u2014 "),GY=n(APe,"A",{href:!0});var S0t=s(GY);QPr=r(S0t,"FlaxXLMRobertaForMultipleChoice"),S0t.forEach(t),WPr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),To.forEach(t),HPr=i(ei),T(fA.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Lqe=i(m),Zc=n(m,"H2",{class:!0});var Pje=s(Zc);gA=n(Pje,"A",{id:!0,class:!0,href:!0});var R0t=s(gA);KEe=n(R0t,"SPAN",{});var B0t=s(KEe);T(q7.$$.fragment,B0t),B0t.forEach(t),R0t.forEach(t),UPr=i(Pje),ZEe=n(Pje,"SPAN",{});var P0t=s(ZEe);JPr=r(P0t,"FlaxAutoModelForNextSentencePrediction"),P0t.forEach(t),Pje.forEach(t),xqe=i(m),vr=n(m,"DIV",{class:!0});var oi=s(vr);T(N7.$$.fragment,oi),YPr=i(oi),em=n(oi,"P",{});var OZ=s(em);KPr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OY=n(OZ,"A",{href:!0});var I0t=s(OY);ZPr=r(I0t,"from_pretrained()"),I0t.forEach(t),eIr=r(OZ," class method or the "),VY=n(OZ,"A",{href:!0});var q0t=s(VY);oIr=r(q0t,"from_config()"),q0t.forEach(t),rIr=r(OZ,` class
method.`),OZ.forEach(t),tIr=i(oi),j7=n(oi,"P",{});var Ije=s(j7);aIr=r(Ije,"This class cannot be instantiated directly using "),e5e=n(Ije,"CODE",{});var N0t=s(e5e);nIr=r(N0t,"__init__()"),N0t.forEach(t),sIr=r(Ije," (throws an error)."),Ije.forEach(t),lIr=i(oi),Ht=n(oi,"DIV",{class:!0});var N6=s(Ht);T(D7.$$.fragment,N6),iIr=i(N6),o5e=n(N6,"P",{});var j0t=s(o5e);dIr=r(j0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j0t.forEach(t),cIr=i(N6),om=n(N6,"P",{});var VZ=s(om);mIr=r(VZ,`Note:
Loading a model from its configuration file does `),r5e=n(VZ,"STRONG",{});var D0t=s(r5e);fIr=r(D0t,"not"),D0t.forEach(t),gIr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(VZ,"A",{href:!0});var G0t=s(XY);hIr=r(G0t,"from_pretrained()"),G0t.forEach(t),uIr=r(VZ," to load the model weights."),VZ.forEach(t),pIr=i(N6),T(hA.$$.fragment,N6),N6.forEach(t),_Ir=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(G7.$$.fragment,ri),bIr=i(ri),t5e=n(ri,"P",{});var O0t=s(t5e);FIr=r(O0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),O0t.forEach(t),vIr=i(ri),Mn=n(ri,"P",{});var j6=s(Mn);TIr=r(j6,"The model class to instantiate is selected based on the "),a5e=n(j6,"CODE",{});var V0t=s(a5e);MIr=r(V0t,"model_type"),V0t.forEach(t),EIr=r(j6,` property of the config object (either
passed as an argument or loaded from `),n5e=n(j6,"CODE",{});var X0t=s(n5e);CIr=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),wIr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(j6,"CODE",{});var z0t=s(s5e);AIr=r(z0t,"pretrained_model_name_or_path"),z0t.forEach(t),yIr=r(j6,":"),j6.forEach(t),LIr=i(ri),l5e=n(ri,"UL",{});var Q0t=s(l5e);uA=n(Q0t,"LI",{});var yPe=s(uA);i5e=n(yPe,"STRONG",{});var W0t=s(i5e);xIr=r(W0t,"bert"),W0t.forEach(t),$Ir=r(yPe," \u2014 "),zY=n(yPe,"A",{href:!0});var H0t=s(zY);kIr=r(H0t,"FlaxBertForNextSentencePrediction"),H0t.forEach(t),SIr=r(yPe," (BERT model)"),yPe.forEach(t),Q0t.forEach(t),RIr=i(ri),T(pA.$$.fragment,ri),ri.forEach(t),oi.forEach(t),$qe=i(m),rm=n(m,"H2",{class:!0});var qje=s(rm);_A=n(qje,"A",{id:!0,class:!0,href:!0});var U0t=s(_A);d5e=n(U0t,"SPAN",{});var J0t=s(d5e);T(O7.$$.fragment,J0t),J0t.forEach(t),U0t.forEach(t),BIr=i(qje),c5e=n(qje,"SPAN",{});var Y0t=s(c5e);PIr=r(Y0t,"FlaxAutoModelForImageClassification"),Y0t.forEach(t),qje.forEach(t),kqe=i(m),Tr=n(m,"DIV",{class:!0});var ti=s(Tr);T(V7.$$.fragment,ti),IIr=i(ti),tm=n(ti,"P",{});var XZ=s(tm);qIr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QY=n(XZ,"A",{href:!0});var K0t=s(QY);NIr=r(K0t,"from_pretrained()"),K0t.forEach(t),jIr=r(XZ," class method or the "),WY=n(XZ,"A",{href:!0});var Z0t=s(WY);DIr=r(Z0t,"from_config()"),Z0t.forEach(t),GIr=r(XZ,` class
method.`),XZ.forEach(t),OIr=i(ti),X7=n(ti,"P",{});var Nje=s(X7);VIr=r(Nje,"This class cannot be instantiated directly using "),m5e=n(Nje,"CODE",{});var e6t=s(m5e);XIr=r(e6t,"__init__()"),e6t.forEach(t),zIr=r(Nje," (throws an error)."),Nje.forEach(t),QIr=i(ti),Ut=n(ti,"DIV",{class:!0});var D6=s(Ut);T(z7.$$.fragment,D6),WIr=i(D6),f5e=n(D6,"P",{});var o6t=s(f5e);HIr=r(o6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o6t.forEach(t),UIr=i(D6),am=n(D6,"P",{});var zZ=s(am);JIr=r(zZ,`Note:
Loading a model from its configuration file does `),g5e=n(zZ,"STRONG",{});var r6t=s(g5e);YIr=r(r6t,"not"),r6t.forEach(t),KIr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(zZ,"A",{href:!0});var t6t=s(HY);ZIr=r(t6t,"from_pretrained()"),t6t.forEach(t),eqr=r(zZ," to load the model weights."),zZ.forEach(t),oqr=i(D6),T(bA.$$.fragment,D6),D6.forEach(t),rqr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Q7.$$.fragment,ai),tqr=i(ai),h5e=n(ai,"P",{});var a6t=s(h5e);aqr=r(a6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),a6t.forEach(t),nqr=i(ai),En=n(ai,"P",{});var G6=s(En);sqr=r(G6,"The model class to instantiate is selected based on the "),u5e=n(G6,"CODE",{});var n6t=s(u5e);lqr=r(n6t,"model_type"),n6t.forEach(t),iqr=r(G6,` property of the config object (either
passed as an argument or loaded from `),p5e=n(G6,"CODE",{});var s6t=s(p5e);dqr=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),cqr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(G6,"CODE",{});var l6t=s(_5e);mqr=r(l6t,"pretrained_model_name_or_path"),l6t.forEach(t),fqr=r(G6,":"),G6.forEach(t),gqr=i(ai),W7=n(ai,"UL",{});var jje=s(W7);FA=n(jje,"LI",{});var LPe=s(FA);b5e=n(LPe,"STRONG",{});var i6t=s(b5e);hqr=r(i6t,"beit"),i6t.forEach(t),uqr=r(LPe," \u2014 "),UY=n(LPe,"A",{href:!0});var d6t=s(UY);pqr=r(d6t,"FlaxBeitForImageClassification"),d6t.forEach(t),_qr=r(LPe," (BEiT model)"),LPe.forEach(t),bqr=i(jje),vA=n(jje,"LI",{});var xPe=s(vA);F5e=n(xPe,"STRONG",{});var c6t=s(F5e);Fqr=r(c6t,"vit"),c6t.forEach(t),vqr=r(xPe," \u2014 "),JY=n(xPe,"A",{href:!0});var m6t=s(JY);Tqr=r(m6t,"FlaxViTForImageClassification"),m6t.forEach(t),Mqr=r(xPe," (ViT model)"),xPe.forEach(t),jje.forEach(t),Eqr=i(ai),T(TA.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Sqe=i(m),nm=n(m,"H2",{class:!0});var Dje=s(nm);MA=n(Dje,"A",{id:!0,class:!0,href:!0});var f6t=s(MA);v5e=n(f6t,"SPAN",{});var g6t=s(v5e);T(H7.$$.fragment,g6t),g6t.forEach(t),f6t.forEach(t),Cqr=i(Dje),T5e=n(Dje,"SPAN",{});var h6t=s(T5e);wqr=r(h6t,"FlaxAutoModelForVision2Seq"),h6t.forEach(t),Dje.forEach(t),Rqe=i(m),Mr=n(m,"DIV",{class:!0});var ni=s(Mr);T(U7.$$.fragment,ni),Aqr=i(ni),sm=n(ni,"P",{});var QZ=s(sm);yqr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YY=n(QZ,"A",{href:!0});var u6t=s(YY);Lqr=r(u6t,"from_pretrained()"),u6t.forEach(t),xqr=r(QZ," class method or the "),KY=n(QZ,"A",{href:!0});var p6t=s(KY);$qr=r(p6t,"from_config()"),p6t.forEach(t),kqr=r(QZ,` class
method.`),QZ.forEach(t),Sqr=i(ni),J7=n(ni,"P",{});var Gje=s(J7);Rqr=r(Gje,"This class cannot be instantiated directly using "),M5e=n(Gje,"CODE",{});var _6t=s(M5e);Bqr=r(_6t,"__init__()"),_6t.forEach(t),Pqr=r(Gje," (throws an error)."),Gje.forEach(t),Iqr=i(ni),Jt=n(ni,"DIV",{class:!0});var O6=s(Jt);T(Y7.$$.fragment,O6),qqr=i(O6),E5e=n(O6,"P",{});var b6t=s(E5e);Nqr=r(b6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b6t.forEach(t),jqr=i(O6),lm=n(O6,"P",{});var WZ=s(lm);Dqr=r(WZ,`Note:
Loading a model from its configuration file does `),C5e=n(WZ,"STRONG",{});var F6t=s(C5e);Gqr=r(F6t,"not"),F6t.forEach(t),Oqr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(WZ,"A",{href:!0});var v6t=s(ZY);Vqr=r(v6t,"from_pretrained()"),v6t.forEach(t),Xqr=r(WZ," to load the model weights."),WZ.forEach(t),zqr=i(O6),T(EA.$$.fragment,O6),O6.forEach(t),Qqr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(K7.$$.fragment,si),Wqr=i(si),w5e=n(si,"P",{});var T6t=s(w5e);Hqr=r(T6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T6t.forEach(t),Uqr=i(si),Cn=n(si,"P",{});var V6=s(Cn);Jqr=r(V6,"The model class to instantiate is selected based on the "),A5e=n(V6,"CODE",{});var M6t=s(A5e);Yqr=r(M6t,"model_type"),M6t.forEach(t),Kqr=r(V6,` property of the config object (either
passed as an argument or loaded from `),y5e=n(V6,"CODE",{});var E6t=s(y5e);Zqr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),eNr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(V6,"CODE",{});var C6t=s(L5e);oNr=r(C6t,"pretrained_model_name_or_path"),C6t.forEach(t),rNr=r(V6,":"),V6.forEach(t),tNr=i(si),x5e=n(si,"UL",{});var w6t=s(x5e);CA=n(w6t,"LI",{});var $Pe=s(CA);$5e=n($Pe,"STRONG",{});var A6t=s($5e);aNr=r(A6t,"vision-encoder-decoder"),A6t.forEach(t),nNr=r($Pe," \u2014 "),eK=n($Pe,"A",{href:!0});var y6t=s(eK);sNr=r(y6t,"FlaxVisionEncoderDecoderModel"),y6t.forEach(t),lNr=r($Pe," (Vision Encoder decoder model)"),$Pe.forEach(t),w6t.forEach(t),iNr=i(si),T(wA.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kLt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(An,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(um,"id","extending-the-auto-classes"),c(um,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(um,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(_m,"id","transformers.AutoConfig"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(_$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(b$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(F$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(v$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(T$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(M$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(E$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(C$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(w$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(A$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(y$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(L$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(x$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c($$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(k$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(S$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(P$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(N$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(Z$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(sk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(mk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(bk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c($k,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Ok,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(Qk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(nS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(hS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(uS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(pS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_S,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(bS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(FS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(vS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(TS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(MS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(ES,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(CS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(wS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(AS,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(yS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(LS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(xS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($S,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(SS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(RS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(BS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(PS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(IS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(qS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(NS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(jS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(DS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(GS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(OS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(VS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(XS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(zS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(HS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(US,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(YS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(KS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(ZS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(eR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(oR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(rR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(tR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(aR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(sR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(_R,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(MR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(CR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(LR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c($R,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(SR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(RR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(IR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(qR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(jR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(DR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(GR,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(OR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(QR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(HR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(LB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(RB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(NB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(WB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(eP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(oP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(rP,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(tP,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(aP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(sP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(lP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(iP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(dP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(fP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(gP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_P,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(FP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(vP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(TP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(MP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(EP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(AP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(yP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(LP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($P,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(kP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(SP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(BP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(NP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(jP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(DP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(GP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(OP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(VP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(XP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(zP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(QP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(WP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(HP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(UP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(JP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(YP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(KP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(ZP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(eI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(oI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(rI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(tI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(aI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(nI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(sI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(lI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(iI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(dI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(cI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(mI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(fI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(gI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(hI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(uI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(pI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(_I,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(bI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(FI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(vI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(TI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(MI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(EI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(CI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(wI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(AI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(yI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(LI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(xI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c($I,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(kI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(SI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(RI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(BI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(PI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(II,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(qI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(NI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(jI,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(DI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(GI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(OI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(VI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(XI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(zI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(QI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(WI,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(HI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(UI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(JI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(YI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(KI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(eq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(oq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(rq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(tq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(aq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(nq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(sq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(lq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(iq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(dq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(cq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(mq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(fq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(gq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(hq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(uq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(pq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(_q,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(bq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(vq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(wq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ip,"id","transformers.AutoModelForPreTraining"),c(Ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ip,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(yq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($q,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Sq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Rq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Bq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Pq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Nq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Dq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Gq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Vq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Xq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Qq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Hq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Uq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Jq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Yq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Kq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Zq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(eN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(rN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(lN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(iN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(dN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(cN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(mN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(fN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(uN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A_,"id","transformers.AutoModelForCausalLM"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(pN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_N,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(vN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(TN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(MN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(EN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(CN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(wN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(AN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(yN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(LN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(xN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c($N,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(kN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(SN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(RN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(BN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(PN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(IN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(NN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(jN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(DN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(GN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(ON,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(VN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(XN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(zN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(QN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(WN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(HN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(UN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(JN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(KN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ZN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(ej,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fb,"id","transformers.AutoModelForMaskedLM"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(oj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(nj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(lj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ij,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(cj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(uj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(_j,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(bj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(vj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Mj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Aj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(yj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(xj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c($j,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Bj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Pj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(qj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForSeq2SeqLM"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Nj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Oj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Vj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Xj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(zj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Wj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Hj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Uj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Yj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Kj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Zj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(eD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(oD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(rD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForSequenceClassification"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(tD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(lD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(iD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(dD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(cD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(mD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(fD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(gD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(hD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(uD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(pD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(_D,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(bD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(FD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(vD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(TD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(ED,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(CD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(yD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(LD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c($D,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(kD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(SD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(RD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(PD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ID,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(qD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(ND,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(DD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(GD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(OD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(VD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(XD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(zD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(QD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(WD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(HD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(UD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(JD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(YD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForMultipleChoice"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(KD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(rG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(tG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(aG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(nG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(sG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(lG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(iG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(dG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(cG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(mG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(fG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(gG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(hG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(uG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(pG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_G,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(bG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(FG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(vG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(TG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(MG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(EG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(CG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(wG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(AG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(yG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(LG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(xG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForNextSentencePrediction"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c($G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(BG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(PG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(IG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForTokenClassification"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(rO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(tO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(aO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(nO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(sO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(lO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(iO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(dO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(mO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(fO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(uO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(pO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(_O,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForQuestionAnswering"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(vO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(CO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(wO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(AO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(yO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(LO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(xO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c($O,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(kO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(SO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(RO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(BO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(PO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(IO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(qO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(NO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(jO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(DO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(GO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(OO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(VO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(XO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(zO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(QO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(WO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(HO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(UO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(JO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(YO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(KO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(eV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(oV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(rV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(tV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(aV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(nV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(sV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(lV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForTableQuestionAnswering"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(iV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S1,"id","transformers.AutoModelForImageClassification"),c(S1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S1,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(fV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(TV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(MV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(EV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(CV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(AV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c($V,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForVision2Seq"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K1,"id","transformers.AutoModelForAudioClassification"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(jV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(DV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(GV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(OV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(VV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(XV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForAudioFrameClassification"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(QV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForCTC"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForCTC"),c(fd,"class","relative group"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(tX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(aX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(nX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(sX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(lX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(iX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(dX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForSpeechSeq2Seq"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(cX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(hX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForAudioXVector"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(FX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(vX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(TX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForMaskedImageModeling"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(MX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(AX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(yX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForObjectDetection"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(LX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(SX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.AutoModelForImageSegmentation"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(RX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.AutoModelForSemanticSegmentation"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(GX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(OX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(VX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForInstanceSegmentation"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModel"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(HX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(KX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(ZX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(ez,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(oz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(rz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(tz,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(az,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(nz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(sz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(lz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(iz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(dz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(cz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(mz,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(fz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(gz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(hz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(uz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(pz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(_z,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(bz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(Fz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(vz,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(wz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Az,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(yz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(Lz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(xz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c($z,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(kz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Pz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(qz,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(jz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Dz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Oz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForPreTraining"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Wz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Hz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Uz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Jz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Yz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Kz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Zz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(oQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(rQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(aQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(nQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(lQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(dQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(fQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.TFAutoModelForCausalLM"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(FQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(MQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(CQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForImageClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(BQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(PQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForMaskedLM"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(DQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(GQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(HQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(eW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(rW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForSeq2SeqLM"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(cW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(mW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(fW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(gW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(hW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(uW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(pW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(_W,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.TFAutoModelForSequenceClassification"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(bW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.TFAutoModelForMultipleChoice"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(YW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(KW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(ZW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(eH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(oH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(rH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(tH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(aH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(nH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(sH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(lH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(iH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(dH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(cH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(mH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(fH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(_H,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.TFAutoModelForTokenClassification"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c($H,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForQuestionAnswering"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(UH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(JH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(YH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(KH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(ZH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(eU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(oU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(rU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(tU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(aU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(nU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(sU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(lU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(iU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(dU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(cU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(mU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(fU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(gU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForVision2Seq"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForVision2Seq"),c(vc,"class","relative group"),c(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModel"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(AU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(yU,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(LU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(xU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c($U,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(kU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(SU,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(RU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(BU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(PU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(IU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(qU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(NU,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(jU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(DU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(GU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(OU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(VU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(XU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(zU,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(QU,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(WU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(HU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(UU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.FlaxAutoModelForCausalLM"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(eJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(oJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(rJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(tJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(aJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(nJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(sJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(lJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForPreTraining"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(iJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(hJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(uJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_J,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(bJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(FJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(TJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(MJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForMaskedLM"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(yJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(xJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c($J,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(kJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(SJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(BJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(IJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(GJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(OJ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(VJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(XJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(WJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(KJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ZJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(eY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(oY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(rY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(tY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(mY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(gY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(hY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(uY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(_Y,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(bY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(FY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zw,"id","transformers.FlaxAutoModelForTokenClassification"),c(zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(rA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(PY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(IY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(NY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(jY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(DY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(GY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(gA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_A,"id","transformers.FlaxAutoModelForImageClassification"),c(_A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_A,"href","#transformers.FlaxAutoModelForImageClassification"),c(rm,"class","relative group"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(JY,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MA,"id","transformers.FlaxAutoModelForVision2Seq"),c(MA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nm,"class","relative group"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,F,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,li),b(m,mm,_),b(m,et,_),e(et,ii),e(et,di),e(di,X6),e(et,fm),b(m,qe,_),b(m,Xe,_),e(Xe,ci),e(Xe,An),e(An,z6),e(Xe,yn),e(Xe,Ln),e(Ln,Q6),e(Xe,mi),e(Xe,xn),e(xn,W6),e(Xe,fi),b(m,gm,_),M(Ma,m,_),b(m,ze,_),b(m,Ae,_),e(Ae,m$),e(Ae,gi),e(gi,f$),e(Ae,g$),b(m,Eo,_),b(m,Ea,_),e(Ea,h$),e(Ea,hm),e(hm,u$),e(Ea,Oje),b(m,kPe,_),b(m,hi,_),e(hi,um),e(um,HZ),M(H6,HZ,null),e(hi,Vje),e(hi,UZ),e(UZ,Xje),b(m,SPe,_),b(m,$n,_),e($n,zje),e($n,JZ),e(JZ,Qje),e($n,Wje),e($n,YZ),e(YZ,Hje),e($n,Uje),b(m,RPe,_),M(U6,m,_),b(m,BPe,_),b(m,p$,_),e(p$,Jje),b(m,PPe,_),M(pm,m,_),b(m,IPe,_),b(m,ui,_),e(ui,_m),e(_m,KZ),M(J6,KZ,null),e(ui,Yje),e(ui,ZZ),e(ZZ,Kje),b(m,qPe,_),b(m,Co,_),M(Y6,Co,null),e(Co,Zje),e(Co,K6),e(K6,eDe),e(K6,_$),e(_$,oDe),e(K6,rDe),e(Co,tDe),e(Co,Z6),e(Z6,aDe),e(Z6,eee),e(eee,nDe),e(Z6,sDe),e(Co,lDe),e(Co,Er),M(ey,Er,null),e(Er,iDe),e(Er,oee),e(oee,dDe),e(Er,cDe),e(Er,pi),e(pi,mDe),e(pi,ree),e(ree,fDe),e(pi,gDe),e(pi,tee),e(tee,hDe),e(pi,uDe),e(Er,pDe),e(Er,y),e(y,bm),e(bm,aee),e(aee,_De),e(bm,bDe),e(bm,b$),e(b$,FDe),e(bm,vDe),e(y,TDe),e(y,Fm),e(Fm,nee),e(nee,MDe),e(Fm,EDe),e(Fm,F$),e(F$,CDe),e(Fm,wDe),e(y,ADe),e(y,vm),e(vm,see),e(see,yDe),e(vm,LDe),e(vm,v$),e(v$,xDe),e(vm,$De),e(y,kDe),e(y,Tm),e(Tm,lee),e(lee,SDe),e(Tm,RDe),e(Tm,T$),e(T$,BDe),e(Tm,PDe),e(y,IDe),e(y,Mm),e(Mm,iee),e(iee,qDe),e(Mm,NDe),e(Mm,M$),e(M$,jDe),e(Mm,DDe),e(y,GDe),e(y,Em),e(Em,dee),e(dee,ODe),e(Em,VDe),e(Em,E$),e(E$,XDe),e(Em,zDe),e(y,QDe),e(y,Cm),e(Cm,cee),e(cee,WDe),e(Cm,HDe),e(Cm,C$),e(C$,UDe),e(Cm,JDe),e(y,YDe),e(y,wm),e(wm,mee),e(mee,KDe),e(wm,ZDe),e(wm,w$),e(w$,eGe),e(wm,oGe),e(y,rGe),e(y,Am),e(Am,fee),e(fee,tGe),e(Am,aGe),e(Am,A$),e(A$,nGe),e(Am,sGe),e(y,lGe),e(y,ym),e(ym,gee),e(gee,iGe),e(ym,dGe),e(ym,y$),e(y$,cGe),e(ym,mGe),e(y,fGe),e(y,Lm),e(Lm,hee),e(hee,gGe),e(Lm,hGe),e(Lm,L$),e(L$,uGe),e(Lm,pGe),e(y,_Ge),e(y,xm),e(xm,uee),e(uee,bGe),e(xm,FGe),e(xm,x$),e(x$,vGe),e(xm,TGe),e(y,MGe),e(y,$m),e($m,pee),e(pee,EGe),e($m,CGe),e($m,$$),e($$,wGe),e($m,AGe),e(y,yGe),e(y,km),e(km,_ee),e(_ee,LGe),e(km,xGe),e(km,k$),e(k$,$Ge),e(km,kGe),e(y,SGe),e(y,Sm),e(Sm,bee),e(bee,RGe),e(Sm,BGe),e(Sm,S$),e(S$,PGe),e(Sm,IGe),e(y,qGe),e(y,Rm),e(Rm,Fee),e(Fee,NGe),e(Rm,jGe),e(Rm,R$),e(R$,DGe),e(Rm,GGe),e(y,OGe),e(y,Bm),e(Bm,vee),e(vee,VGe),e(Bm,XGe),e(Bm,B$),e(B$,zGe),e(Bm,QGe),e(y,WGe),e(y,Pm),e(Pm,Tee),e(Tee,HGe),e(Pm,UGe),e(Pm,P$),e(P$,JGe),e(Pm,YGe),e(y,KGe),e(y,Im),e(Im,Mee),e(Mee,ZGe),e(Im,eOe),e(Im,I$),e(I$,oOe),e(Im,rOe),e(y,tOe),e(y,qm),e(qm,Eee),e(Eee,aOe),e(qm,nOe),e(qm,q$),e(q$,sOe),e(qm,lOe),e(y,iOe),e(y,Nm),e(Nm,Cee),e(Cee,dOe),e(Nm,cOe),e(Nm,N$),e(N$,mOe),e(Nm,fOe),e(y,gOe),e(y,jm),e(jm,wee),e(wee,hOe),e(jm,uOe),e(jm,j$),e(j$,pOe),e(jm,_Oe),e(y,bOe),e(y,Dm),e(Dm,Aee),e(Aee,FOe),e(Dm,vOe),e(Dm,D$),e(D$,TOe),e(Dm,MOe),e(y,EOe),e(y,Gm),e(Gm,yee),e(yee,COe),e(Gm,wOe),e(Gm,G$),e(G$,AOe),e(Gm,yOe),e(y,LOe),e(y,Om),e(Om,Lee),e(Lee,xOe),e(Om,$Oe),e(Om,O$),e(O$,kOe),e(Om,SOe),e(y,ROe),e(y,Vm),e(Vm,xee),e(xee,BOe),e(Vm,POe),e(Vm,V$),e(V$,IOe),e(Vm,qOe),e(y,NOe),e(y,Xm),e(Xm,$ee),e($ee,jOe),e(Xm,DOe),e(Xm,X$),e(X$,GOe),e(Xm,OOe),e(y,VOe),e(y,zm),e(zm,kee),e(kee,XOe),e(zm,zOe),e(zm,z$),e(z$,QOe),e(zm,WOe),e(y,HOe),e(y,Qm),e(Qm,See),e(See,UOe),e(Qm,JOe),e(Qm,Q$),e(Q$,YOe),e(Qm,KOe),e(y,ZOe),e(y,Wm),e(Wm,Ree),e(Ree,eVe),e(Wm,oVe),e(Wm,W$),e(W$,rVe),e(Wm,tVe),e(y,aVe),e(y,Hm),e(Hm,Bee),e(Bee,nVe),e(Hm,sVe),e(Hm,H$),e(H$,lVe),e(Hm,iVe),e(y,dVe),e(y,Um),e(Um,Pee),e(Pee,cVe),e(Um,mVe),e(Um,U$),e(U$,fVe),e(Um,gVe),e(y,hVe),e(y,Jm),e(Jm,Iee),e(Iee,uVe),e(Jm,pVe),e(Jm,J$),e(J$,_Ve),e(Jm,bVe),e(y,FVe),e(y,Ym),e(Ym,qee),e(qee,vVe),e(Ym,TVe),e(Ym,Y$),e(Y$,MVe),e(Ym,EVe),e(y,CVe),e(y,Km),e(Km,Nee),e(Nee,wVe),e(Km,AVe),e(Km,K$),e(K$,yVe),e(Km,LVe),e(y,xVe),e(y,Zm),e(Zm,jee),e(jee,$Ve),e(Zm,kVe),e(Zm,Z$),e(Z$,SVe),e(Zm,RVe),e(y,BVe),e(y,ef),e(ef,Dee),e(Dee,PVe),e(ef,IVe),e(ef,ek),e(ek,qVe),e(ef,NVe),e(y,jVe),e(y,of),e(of,Gee),e(Gee,DVe),e(of,GVe),e(of,ok),e(ok,OVe),e(of,VVe),e(y,XVe),e(y,rf),e(rf,Oee),e(Oee,zVe),e(rf,QVe),e(rf,rk),e(rk,WVe),e(rf,HVe),e(y,UVe),e(y,tf),e(tf,Vee),e(Vee,JVe),e(tf,YVe),e(tf,tk),e(tk,KVe),e(tf,ZVe),e(y,eXe),e(y,af),e(af,Xee),e(Xee,oXe),e(af,rXe),e(af,ak),e(ak,tXe),e(af,aXe),e(y,nXe),e(y,nf),e(nf,zee),e(zee,sXe),e(nf,lXe),e(nf,nk),e(nk,iXe),e(nf,dXe),e(y,cXe),e(y,sf),e(sf,Qee),e(Qee,mXe),e(sf,fXe),e(sf,sk),e(sk,gXe),e(sf,hXe),e(y,uXe),e(y,lf),e(lf,Wee),e(Wee,pXe),e(lf,_Xe),e(lf,lk),e(lk,bXe),e(lf,FXe),e(y,vXe),e(y,df),e(df,Hee),e(Hee,TXe),e(df,MXe),e(df,ik),e(ik,EXe),e(df,CXe),e(y,wXe),e(y,cf),e(cf,Uee),e(Uee,AXe),e(cf,yXe),e(cf,dk),e(dk,LXe),e(cf,xXe),e(y,$Xe),e(y,mf),e(mf,Jee),e(Jee,kXe),e(mf,SXe),e(mf,ck),e(ck,RXe),e(mf,BXe),e(y,PXe),e(y,ff),e(ff,Yee),e(Yee,IXe),e(ff,qXe),e(ff,mk),e(mk,NXe),e(ff,jXe),e(y,DXe),e(y,gf),e(gf,Kee),e(Kee,GXe),e(gf,OXe),e(gf,fk),e(fk,VXe),e(gf,XXe),e(y,zXe),e(y,hf),e(hf,Zee),e(Zee,QXe),e(hf,WXe),e(hf,gk),e(gk,HXe),e(hf,UXe),e(y,JXe),e(y,uf),e(uf,eoe),e(eoe,YXe),e(uf,KXe),e(uf,hk),e(hk,ZXe),e(uf,eze),e(y,oze),e(y,pf),e(pf,ooe),e(ooe,rze),e(pf,tze),e(pf,uk),e(uk,aze),e(pf,nze),e(y,sze),e(y,_f),e(_f,roe),e(roe,lze),e(_f,ize),e(_f,pk),e(pk,dze),e(_f,cze),e(y,mze),e(y,bf),e(bf,toe),e(toe,fze),e(bf,gze),e(bf,_k),e(_k,hze),e(bf,uze),e(y,pze),e(y,Ff),e(Ff,aoe),e(aoe,_ze),e(Ff,bze),e(Ff,bk),e(bk,Fze),e(Ff,vze),e(y,Tze),e(y,vf),e(vf,noe),e(noe,Mze),e(vf,Eze),e(vf,Fk),e(Fk,Cze),e(vf,wze),e(y,Aze),e(y,Tf),e(Tf,soe),e(soe,yze),e(Tf,Lze),e(Tf,vk),e(vk,xze),e(Tf,$ze),e(y,kze),e(y,Mf),e(Mf,loe),e(loe,Sze),e(Mf,Rze),e(Mf,Tk),e(Tk,Bze),e(Mf,Pze),e(y,Ize),e(y,Ef),e(Ef,ioe),e(ioe,qze),e(Ef,Nze),e(Ef,Mk),e(Mk,jze),e(Ef,Dze),e(y,Gze),e(y,Cf),e(Cf,doe),e(doe,Oze),e(Cf,Vze),e(Cf,Ek),e(Ek,Xze),e(Cf,zze),e(y,Qze),e(y,wf),e(wf,coe),e(coe,Wze),e(wf,Hze),e(wf,Ck),e(Ck,Uze),e(wf,Jze),e(y,Yze),e(y,Af),e(Af,moe),e(moe,Kze),e(Af,Zze),e(Af,wk),e(wk,eQe),e(Af,oQe),e(y,rQe),e(y,yf),e(yf,foe),e(foe,tQe),e(yf,aQe),e(yf,Ak),e(Ak,nQe),e(yf,sQe),e(y,lQe),e(y,Lf),e(Lf,goe),e(goe,iQe),e(Lf,dQe),e(Lf,yk),e(yk,cQe),e(Lf,mQe),e(y,fQe),e(y,xf),e(xf,hoe),e(hoe,gQe),e(xf,hQe),e(xf,Lk),e(Lk,uQe),e(xf,pQe),e(y,_Qe),e(y,$f),e($f,uoe),e(uoe,bQe),e($f,FQe),e($f,xk),e(xk,vQe),e($f,TQe),e(y,MQe),e(y,kf),e(kf,poe),e(poe,EQe),e(kf,CQe),e(kf,$k),e($k,wQe),e(kf,AQe),e(y,yQe),e(y,Sf),e(Sf,_oe),e(_oe,LQe),e(Sf,xQe),e(Sf,kk),e(kk,$Qe),e(Sf,kQe),e(y,SQe),e(y,Rf),e(Rf,boe),e(boe,RQe),e(Rf,BQe),e(Rf,Sk),e(Sk,PQe),e(Rf,IQe),e(y,qQe),e(y,Bf),e(Bf,Foe),e(Foe,NQe),e(Bf,jQe),e(Bf,Rk),e(Rk,DQe),e(Bf,GQe),e(y,OQe),e(y,Pf),e(Pf,voe),e(voe,VQe),e(Pf,XQe),e(Pf,Bk),e(Bk,zQe),e(Pf,QQe),e(y,WQe),e(y,If),e(If,Toe),e(Toe,HQe),e(If,UQe),e(If,Pk),e(Pk,JQe),e(If,YQe),e(y,KQe),e(y,qf),e(qf,Moe),e(Moe,ZQe),e(qf,eWe),e(qf,Ik),e(Ik,oWe),e(qf,rWe),e(y,tWe),e(y,Nf),e(Nf,Eoe),e(Eoe,aWe),e(Nf,nWe),e(Nf,qk),e(qk,sWe),e(Nf,lWe),e(y,iWe),e(y,jf),e(jf,Coe),e(Coe,dWe),e(jf,cWe),e(jf,Nk),e(Nk,mWe),e(jf,fWe),e(y,gWe),e(y,Df),e(Df,woe),e(woe,hWe),e(Df,uWe),e(Df,jk),e(jk,pWe),e(Df,_We),e(y,bWe),e(y,Gf),e(Gf,Aoe),e(Aoe,FWe),e(Gf,vWe),e(Gf,Dk),e(Dk,TWe),e(Gf,MWe),e(y,EWe),e(y,Of),e(Of,yoe),e(yoe,CWe),e(Of,wWe),e(Of,Gk),e(Gk,AWe),e(Of,yWe),e(y,LWe),e(y,Vf),e(Vf,Loe),e(Loe,xWe),e(Vf,$We),e(Vf,Ok),e(Ok,kWe),e(Vf,SWe),e(y,RWe),e(y,Xf),e(Xf,xoe),e(xoe,BWe),e(Xf,PWe),e(Xf,Vk),e(Vk,IWe),e(Xf,qWe),e(y,NWe),e(y,zf),e(zf,$oe),e($oe,jWe),e(zf,DWe),e(zf,Xk),e(Xk,GWe),e(zf,OWe),e(y,VWe),e(y,Qf),e(Qf,koe),e(koe,XWe),e(Qf,zWe),e(Qf,zk),e(zk,QWe),e(Qf,WWe),e(y,HWe),e(y,Wf),e(Wf,Soe),e(Soe,UWe),e(Wf,JWe),e(Wf,Qk),e(Qk,YWe),e(Wf,KWe),e(y,ZWe),e(y,Hf),e(Hf,Roe),e(Roe,eHe),e(Hf,oHe),e(Hf,Wk),e(Wk,rHe),e(Hf,tHe),e(y,aHe),e(y,Uf),e(Uf,Boe),e(Boe,nHe),e(Uf,sHe),e(Uf,Hk),e(Hk,lHe),e(Uf,iHe),e(y,dHe),e(y,Jf),e(Jf,Poe),e(Poe,cHe),e(Jf,mHe),e(Jf,Uk),e(Uk,fHe),e(Jf,gHe),e(y,hHe),e(y,Yf),e(Yf,Ioe),e(Ioe,uHe),e(Yf,pHe),e(Yf,Jk),e(Jk,_He),e(Yf,bHe),e(y,FHe),e(y,Kf),e(Kf,qoe),e(qoe,vHe),e(Kf,THe),e(Kf,Yk),e(Yk,MHe),e(Kf,EHe),e(y,CHe),e(y,Zf),e(Zf,Noe),e(Noe,wHe),e(Zf,AHe),e(Zf,Kk),e(Kk,yHe),e(Zf,LHe),e(y,xHe),e(y,eg),e(eg,joe),e(joe,$He),e(eg,kHe),e(eg,Zk),e(Zk,SHe),e(eg,RHe),e(y,BHe),e(y,og),e(og,Doe),e(Doe,PHe),e(og,IHe),e(og,eS),e(eS,qHe),e(og,NHe),e(y,jHe),e(y,rg),e(rg,Goe),e(Goe,DHe),e(rg,GHe),e(rg,oS),e(oS,OHe),e(rg,VHe),e(y,XHe),e(y,tg),e(tg,Ooe),e(Ooe,zHe),e(tg,QHe),e(tg,rS),e(rS,WHe),e(tg,HHe),e(y,UHe),e(y,ag),e(ag,Voe),e(Voe,JHe),e(ag,YHe),e(ag,tS),e(tS,KHe),e(ag,ZHe),e(y,eUe),e(y,ng),e(ng,Xoe),e(Xoe,oUe),e(ng,rUe),e(ng,aS),e(aS,tUe),e(ng,aUe),e(y,nUe),e(y,sg),e(sg,zoe),e(zoe,sUe),e(sg,lUe),e(sg,nS),e(nS,iUe),e(sg,dUe),e(y,cUe),e(y,lg),e(lg,Qoe),e(Qoe,mUe),e(lg,fUe),e(lg,sS),e(sS,gUe),e(lg,hUe),e(y,uUe),e(y,ig),e(ig,Woe),e(Woe,pUe),e(ig,_Ue),e(ig,lS),e(lS,bUe),e(ig,FUe),e(y,vUe),e(y,dg),e(dg,Hoe),e(Hoe,TUe),e(dg,MUe),e(dg,iS),e(iS,EUe),e(dg,CUe),e(y,wUe),e(y,cg),e(cg,Uoe),e(Uoe,AUe),e(cg,yUe),e(cg,dS),e(dS,LUe),e(cg,xUe),e(y,$Ue),e(y,mg),e(mg,Joe),e(Joe,kUe),e(mg,SUe),e(mg,cS),e(cS,RUe),e(mg,BUe),e(y,PUe),e(y,fg),e(fg,Yoe),e(Yoe,IUe),e(fg,qUe),e(fg,mS),e(mS,NUe),e(fg,jUe),e(y,DUe),e(y,gg),e(gg,Koe),e(Koe,GUe),e(gg,OUe),e(gg,fS),e(fS,VUe),e(gg,XUe),e(y,zUe),e(y,hg),e(hg,Zoe),e(Zoe,QUe),e(hg,WUe),e(hg,gS),e(gS,HUe),e(hg,UUe),e(Er,JUe),M(ug,Er,null),e(Co,YUe),e(Co,pg),M(oy,pg,null),e(pg,KUe),e(pg,ere),e(ere,ZUe),b(m,NPe,_),b(m,_i,_),e(_i,_g),e(_g,ore),M(ry,ore,null),e(_i,eJe),e(_i,rre),e(rre,oJe),b(m,jPe,_),b(m,wo,_),M(ty,wo,null),e(wo,rJe),e(wo,ay),e(ay,tJe),e(ay,hS),e(hS,aJe),e(ay,nJe),e(wo,sJe),e(wo,ny),e(ny,lJe),e(ny,tre),e(tre,iJe),e(ny,dJe),e(wo,cJe),e(wo,Cr),M(sy,Cr,null),e(Cr,mJe),e(Cr,are),e(are,fJe),e(Cr,gJe),e(Cr,Ca),e(Ca,hJe),e(Ca,nre),e(nre,uJe),e(Ca,pJe),e(Ca,sre),e(sre,_Je),e(Ca,bJe),e(Ca,lre),e(lre,FJe),e(Ca,vJe),e(Cr,TJe),e(Cr,k),e(k,kn),e(kn,ire),e(ire,MJe),e(kn,EJe),e(kn,uS),e(uS,CJe),e(kn,wJe),e(kn,pS),e(pS,AJe),e(kn,yJe),e(k,LJe),e(k,Sn),e(Sn,dre),e(dre,xJe),e(Sn,$Je),e(Sn,_S),e(_S,kJe),e(Sn,SJe),e(Sn,bS),e(bS,RJe),e(Sn,BJe),e(k,PJe),e(k,Rn),e(Rn,cre),e(cre,IJe),e(Rn,qJe),e(Rn,FS),e(FS,NJe),e(Rn,jJe),e(Rn,vS),e(vS,DJe),e(Rn,GJe),e(k,OJe),e(k,bg),e(bg,mre),e(mre,VJe),e(bg,XJe),e(bg,TS),e(TS,zJe),e(bg,QJe),e(k,WJe),e(k,Bn),e(Bn,fre),e(fre,HJe),e(Bn,UJe),e(Bn,MS),e(MS,JJe),e(Bn,YJe),e(Bn,ES),e(ES,KJe),e(Bn,ZJe),e(k,eYe),e(k,Fg),e(Fg,gre),e(gre,oYe),e(Fg,rYe),e(Fg,CS),e(CS,tYe),e(Fg,aYe),e(k,nYe),e(k,vg),e(vg,hre),e(hre,sYe),e(vg,lYe),e(vg,wS),e(wS,iYe),e(vg,dYe),e(k,cYe),e(k,Tg),e(Tg,ure),e(ure,mYe),e(Tg,fYe),e(Tg,AS),e(AS,gYe),e(Tg,hYe),e(k,uYe),e(k,Pn),e(Pn,pre),e(pre,pYe),e(Pn,_Ye),e(Pn,yS),e(yS,bYe),e(Pn,FYe),e(Pn,LS),e(LS,vYe),e(Pn,TYe),e(k,MYe),e(k,In),e(In,_re),e(_re,EYe),e(In,CYe),e(In,xS),e(xS,wYe),e(In,AYe),e(In,$S),e($S,yYe),e(In,LYe),e(k,xYe),e(k,qn),e(qn,bre),e(bre,$Ye),e(qn,kYe),e(qn,kS),e(kS,SYe),e(qn,RYe),e(qn,SS),e(SS,BYe),e(qn,PYe),e(k,IYe),e(k,Mg),e(Mg,Fre),e(Fre,qYe),e(Mg,NYe),e(Mg,RS),e(RS,jYe),e(Mg,DYe),e(k,GYe),e(k,Eg),e(Eg,vre),e(vre,OYe),e(Eg,VYe),e(Eg,BS),e(BS,XYe),e(Eg,zYe),e(k,QYe),e(k,Nn),e(Nn,Tre),e(Tre,WYe),e(Nn,HYe),e(Nn,PS),e(PS,UYe),e(Nn,JYe),e(Nn,IS),e(IS,YYe),e(Nn,KYe),e(k,ZYe),e(k,Cg),e(Cg,Mre),e(Mre,eKe),e(Cg,oKe),e(Cg,qS),e(qS,rKe),e(Cg,tKe),e(k,aKe),e(k,jn),e(jn,Ere),e(Ere,nKe),e(jn,sKe),e(jn,NS),e(NS,lKe),e(jn,iKe),e(jn,jS),e(jS,dKe),e(jn,cKe),e(k,mKe),e(k,Dn),e(Dn,Cre),e(Cre,fKe),e(Dn,gKe),e(Dn,DS),e(DS,hKe),e(Dn,uKe),e(Dn,GS),e(GS,pKe),e(Dn,_Ke),e(k,bKe),e(k,Gn),e(Gn,wre),e(wre,FKe),e(Gn,vKe),e(Gn,OS),e(OS,TKe),e(Gn,MKe),e(Gn,VS),e(VS,EKe),e(Gn,CKe),e(k,wKe),e(k,wg),e(wg,Are),e(Are,AKe),e(wg,yKe),e(wg,XS),e(XS,LKe),e(wg,xKe),e(k,$Ke),e(k,On),e(On,yre),e(yre,kKe),e(On,SKe),e(On,zS),e(zS,RKe),e(On,BKe),e(On,QS),e(QS,PKe),e(On,IKe),e(k,qKe),e(k,Vn),e(Vn,Lre),e(Lre,NKe),e(Vn,jKe),e(Vn,WS),e(WS,DKe),e(Vn,GKe),e(Vn,HS),e(HS,OKe),e(Vn,VKe),e(k,XKe),e(k,Xn),e(Xn,xre),e(xre,zKe),e(Xn,QKe),e(Xn,US),e(US,WKe),e(Xn,HKe),e(Xn,JS),e(JS,UKe),e(Xn,JKe),e(k,YKe),e(k,zn),e(zn,$re),e($re,KKe),e(zn,ZKe),e(zn,YS),e(YS,eZe),e(zn,oZe),e(zn,KS),e(KS,rZe),e(zn,tZe),e(k,aZe),e(k,Qn),e(Qn,kre),e(kre,nZe),e(Qn,sZe),e(Qn,ZS),e(ZS,lZe),e(Qn,iZe),e(Qn,eR),e(eR,dZe),e(Qn,cZe),e(k,mZe),e(k,Wn),e(Wn,Sre),e(Sre,fZe),e(Wn,gZe),e(Wn,oR),e(oR,hZe),e(Wn,uZe),e(Wn,rR),e(rR,pZe),e(Wn,_Ze),e(k,bZe),e(k,Ag),e(Ag,Rre),e(Rre,FZe),e(Ag,vZe),e(Ag,tR),e(tR,TZe),e(Ag,MZe),e(k,EZe),e(k,Hn),e(Hn,Bre),e(Bre,CZe),e(Hn,wZe),e(Hn,aR),e(aR,AZe),e(Hn,yZe),e(Hn,nR),e(nR,LZe),e(Hn,xZe),e(k,$Ze),e(k,yg),e(yg,Pre),e(Pre,kZe),e(yg,SZe),e(yg,sR),e(sR,RZe),e(yg,BZe),e(k,PZe),e(k,Un),e(Un,Ire),e(Ire,IZe),e(Un,qZe),e(Un,lR),e(lR,NZe),e(Un,jZe),e(Un,iR),e(iR,DZe),e(Un,GZe),e(k,OZe),e(k,Jn),e(Jn,qre),e(qre,VZe),e(Jn,XZe),e(Jn,dR),e(dR,zZe),e(Jn,QZe),e(Jn,cR),e(cR,WZe),e(Jn,HZe),e(k,UZe),e(k,Yn),e(Yn,Nre),e(Nre,JZe),e(Yn,YZe),e(Yn,mR),e(mR,KZe),e(Yn,ZZe),e(Yn,fR),e(fR,eeo),e(Yn,oeo),e(k,reo),e(k,Kn),e(Kn,jre),e(jre,teo),e(Kn,aeo),e(Kn,gR),e(gR,neo),e(Kn,seo),e(Kn,hR),e(hR,leo),e(Kn,ieo),e(k,deo),e(k,Zn),e(Zn,Dre),e(Dre,ceo),e(Zn,meo),e(Zn,uR),e(uR,feo),e(Zn,geo),e(Zn,pR),e(pR,heo),e(Zn,ueo),e(k,peo),e(k,Lg),e(Lg,Gre),e(Gre,_eo),e(Lg,beo),e(Lg,_R),e(_R,Feo),e(Lg,veo),e(k,Teo),e(k,es),e(es,Ore),e(Ore,Meo),e(es,Eeo),e(es,bR),e(bR,Ceo),e(es,weo),e(es,FR),e(FR,Aeo),e(es,yeo),e(k,Leo),e(k,os),e(os,Vre),e(Vre,xeo),e(os,$eo),e(os,vR),e(vR,keo),e(os,Seo),e(os,TR),e(TR,Reo),e(os,Beo),e(k,Peo),e(k,rs),e(rs,Xre),e(Xre,Ieo),e(rs,qeo),e(rs,MR),e(MR,Neo),e(rs,jeo),e(rs,ER),e(ER,Deo),e(rs,Geo),e(k,Oeo),e(k,ts),e(ts,zre),e(zre,Veo),e(ts,Xeo),e(ts,CR),e(CR,zeo),e(ts,Qeo),e(ts,wR),e(wR,Weo),e(ts,Heo),e(k,Ueo),e(k,as),e(as,Qre),e(Qre,Jeo),e(as,Yeo),e(as,AR),e(AR,Keo),e(as,Zeo),e(as,yR),e(yR,eoo),e(as,ooo),e(k,roo),e(k,ns),e(ns,Wre),e(Wre,too),e(ns,aoo),e(ns,LR),e(LR,noo),e(ns,soo),e(ns,xR),e(xR,loo),e(ns,ioo),e(k,doo),e(k,xg),e(xg,Hre),e(Hre,coo),e(xg,moo),e(xg,$R),e($R,foo),e(xg,goo),e(k,hoo),e(k,ss),e(ss,Ure),e(Ure,uoo),e(ss,poo),e(ss,kR),e(kR,_oo),e(ss,boo),e(ss,SR),e(SR,Foo),e(ss,voo),e(k,Too),e(k,$g),e($g,Jre),e(Jre,Moo),e($g,Eoo),e($g,RR),e(RR,Coo),e($g,woo),e(k,Aoo),e(k,kg),e(kg,Yre),e(Yre,yoo),e(kg,Loo),e(kg,BR),e(BR,xoo),e(kg,$oo),e(k,koo),e(k,ls),e(ls,Kre),e(Kre,Soo),e(ls,Roo),e(ls,PR),e(PR,Boo),e(ls,Poo),e(ls,IR),e(IR,Ioo),e(ls,qoo),e(k,Noo),e(k,is),e(is,Zre),e(Zre,joo),e(is,Doo),e(is,qR),e(qR,Goo),e(is,Ooo),e(is,NR),e(NR,Voo),e(is,Xoo),e(k,zoo),e(k,ds),e(ds,ete),e(ete,Qoo),e(ds,Woo),e(ds,jR),e(jR,Hoo),e(ds,Uoo),e(ds,DR),e(DR,Joo),e(ds,Yoo),e(k,Koo),e(k,Sg),e(Sg,ote),e(ote,Zoo),e(Sg,ero),e(Sg,GR),e(GR,oro),e(Sg,rro),e(k,tro),e(k,cs),e(cs,rte),e(rte,aro),e(cs,nro),e(cs,OR),e(OR,sro),e(cs,lro),e(cs,VR),e(VR,iro),e(cs,dro),e(k,cro),e(k,ms),e(ms,tte),e(tte,mro),e(ms,fro),e(ms,XR),e(XR,gro),e(ms,hro),e(ms,zR),e(zR,uro),e(ms,pro),e(k,_ro),e(k,fs),e(fs,ate),e(ate,bro),e(fs,Fro),e(fs,QR),e(QR,vro),e(fs,Tro),e(fs,WR),e(WR,Mro),e(fs,Ero),e(k,Cro),e(k,gs),e(gs,nte),e(nte,wro),e(gs,Aro),e(gs,HR),e(HR,yro),e(gs,Lro),e(gs,UR),e(UR,xro),e(gs,$ro),e(k,kro),e(k,hs),e(hs,ste),e(ste,Sro),e(hs,Rro),e(hs,JR),e(JR,Bro),e(hs,Pro),e(hs,YR),e(YR,Iro),e(hs,qro),e(k,Nro),e(k,Rg),e(Rg,lte),e(lte,jro),e(Rg,Dro),e(Rg,KR),e(KR,Gro),e(Rg,Oro),e(k,Vro),e(k,us),e(us,ite),e(ite,Xro),e(us,zro),e(us,ZR),e(ZR,Qro),e(us,Wro),e(us,eB),e(eB,Hro),e(us,Uro),e(k,Jro),e(k,Bg),e(Bg,dte),e(dte,Yro),e(Bg,Kro),e(Bg,oB),e(oB,Zro),e(Bg,eto),e(k,oto),e(k,Pg),e(Pg,cte),e(cte,rto),e(Pg,tto),e(Pg,rB),e(rB,ato),e(Pg,nto),e(k,sto),e(k,Ig),e(Ig,mte),e(mte,lto),e(Ig,ito),e(Ig,tB),e(tB,dto),e(Ig,cto),e(k,mto),e(k,qg),e(qg,fte),e(fte,fto),e(qg,gto),e(qg,aB),e(aB,hto),e(qg,uto),e(k,pto),e(k,ps),e(ps,gte),e(gte,_to),e(ps,bto),e(ps,nB),e(nB,Fto),e(ps,vto),e(ps,sB),e(sB,Tto),e(ps,Mto),e(k,Eto),e(k,Ng),e(Ng,hte),e(hte,Cto),e(Ng,wto),e(Ng,lB),e(lB,Ato),e(Ng,yto),e(k,Lto),e(k,_s),e(_s,ute),e(ute,xto),e(_s,$to),e(_s,iB),e(iB,kto),e(_s,Sto),e(_s,dB),e(dB,Rto),e(_s,Bto),e(k,Pto),e(k,bs),e(bs,pte),e(pte,Ito),e(bs,qto),e(bs,cB),e(cB,Nto),e(bs,jto),e(bs,mB),e(mB,Dto),e(bs,Gto),e(k,Oto),e(k,Fs),e(Fs,_te),e(_te,Vto),e(Fs,Xto),e(Fs,fB),e(fB,zto),e(Fs,Qto),e(Fs,gB),e(gB,Wto),e(Fs,Hto),e(k,Uto),e(k,vs),e(vs,bte),e(bte,Jto),e(vs,Yto),e(vs,hB),e(hB,Kto),e(vs,Zto),e(vs,uB),e(uB,eao),e(vs,oao),e(k,rao),e(k,Ts),e(Ts,Fte),e(Fte,tao),e(Ts,aao),e(Ts,pB),e(pB,nao),e(Ts,sao),e(Ts,_B),e(_B,lao),e(Ts,iao),e(k,dao),e(k,Ms),e(Ms,vte),e(vte,cao),e(Ms,mao),e(Ms,bB),e(bB,fao),e(Ms,gao),e(Ms,FB),e(FB,hao),e(Ms,uao),e(k,pao),e(k,jg),e(jg,Tte),e(Tte,_ao),e(jg,bao),e(jg,vB),e(vB,Fao),e(jg,vao),e(k,Tao),e(k,Dg),e(Dg,Mte),e(Mte,Mao),e(Dg,Eao),e(Dg,TB),e(TB,Cao),e(Dg,wao),e(k,Aao),e(k,Es),e(Es,Ete),e(Ete,yao),e(Es,Lao),e(Es,MB),e(MB,xao),e(Es,$ao),e(Es,EB),e(EB,kao),e(Es,Sao),e(k,Rao),e(k,Cs),e(Cs,Cte),e(Cte,Bao),e(Cs,Pao),e(Cs,CB),e(CB,Iao),e(Cs,qao),e(Cs,wB),e(wB,Nao),e(Cs,jao),e(k,Dao),e(k,ws),e(ws,wte),e(wte,Gao),e(ws,Oao),e(ws,AB),e(AB,Vao),e(ws,Xao),e(ws,yB),e(yB,zao),e(ws,Qao),e(k,Wao),e(k,Gg),e(Gg,Ate),e(Ate,Hao),e(Gg,Uao),e(Gg,LB),e(LB,Jao),e(Gg,Yao),e(k,Kao),e(k,Og),e(Og,yte),e(yte,Zao),e(Og,eno),e(Og,xB),e(xB,ono),e(Og,rno),e(k,tno),e(k,Vg),e(Vg,Lte),e(Lte,ano),e(Vg,nno),e(Vg,$B),e($B,sno),e(Vg,lno),e(k,ino),e(k,As),e(As,xte),e(xte,dno),e(As,cno),e(As,kB),e(kB,mno),e(As,fno),e(As,SB),e(SB,gno),e(As,hno),e(k,uno),e(k,Xg),e(Xg,$te),e($te,pno),e(Xg,_no),e(Xg,RB),e(RB,bno),e(Xg,Fno),e(k,vno),e(k,zg),e(zg,kte),e(kte,Tno),e(zg,Mno),e(zg,BB),e(BB,Eno),e(zg,Cno),e(k,wno),e(k,ys),e(ys,Ste),e(Ste,Ano),e(ys,yno),e(ys,PB),e(PB,Lno),e(ys,xno),e(ys,IB),e(IB,$no),e(ys,kno),e(k,Sno),e(k,Qg),e(Qg,Rte),e(Rte,Rno),e(Qg,Bno),e(Qg,qB),e(qB,Pno),e(Qg,Ino),e(k,qno),e(k,Wg),e(Wg,Bte),e(Bte,Nno),e(Wg,jno),e(Wg,NB),e(NB,Dno),e(Wg,Gno),e(k,Ono),e(k,Ls),e(Ls,Pte),e(Pte,Vno),e(Ls,Xno),e(Ls,jB),e(jB,zno),e(Ls,Qno),e(Ls,DB),e(DB,Wno),e(Ls,Hno),e(k,Uno),e(k,xs),e(xs,Ite),e(Ite,Jno),e(xs,Yno),e(xs,GB),e(GB,Kno),e(xs,Zno),e(xs,OB),e(OB,eso),e(xs,oso),e(k,rso),e(k,$s),e($s,qte),e(qte,tso),e($s,aso),e($s,VB),e(VB,nso),e($s,sso),e($s,XB),e(XB,lso),e($s,iso),e(k,dso),e(k,ks),e(ks,Nte),e(Nte,cso),e(ks,mso),e(ks,zB),e(zB,fso),e(ks,gso),e(ks,QB),e(QB,hso),e(ks,uso),e(Cr,pso),M(Hg,Cr,null),e(wo,_so),e(wo,Ug),M(ly,Ug,null),e(Ug,bso),e(Ug,jte),e(jte,Fso),b(m,DPe,_),b(m,bi,_),e(bi,Jg),e(Jg,Dte),M(iy,Dte,null),e(bi,vso),e(bi,Gte),e(Gte,Tso),b(m,GPe,_),b(m,Ao,_),M(dy,Ao,null),e(Ao,Mso),e(Ao,cy),e(cy,Eso),e(cy,WB),e(WB,Cso),e(cy,wso),e(Ao,Aso),e(Ao,my),e(my,yso),e(my,Ote),e(Ote,Lso),e(my,xso),e(Ao,$so),e(Ao,Qe),M(fy,Qe,null),e(Qe,kso),e(Qe,Vte),e(Vte,Sso),e(Qe,Rso),e(Qe,wa),e(wa,Bso),e(wa,Xte),e(Xte,Pso),e(wa,Iso),e(wa,zte),e(zte,qso),e(wa,Nso),e(wa,Qte),e(Qte,jso),e(wa,Dso),e(Qe,Gso),e(Qe,oe),e(oe,Yg),e(Yg,Wte),e(Wte,Oso),e(Yg,Vso),e(Yg,HB),e(HB,Xso),e(Yg,zso),e(oe,Qso),e(oe,Kg),e(Kg,Hte),e(Hte,Wso),e(Kg,Hso),e(Kg,UB),e(UB,Uso),e(Kg,Jso),e(oe,Yso),e(oe,Zg),e(Zg,Ute),e(Ute,Kso),e(Zg,Zso),e(Zg,JB),e(JB,elo),e(Zg,olo),e(oe,rlo),e(oe,eh),e(eh,Jte),e(Jte,tlo),e(eh,alo),e(eh,YB),e(YB,nlo),e(eh,slo),e(oe,llo),e(oe,oh),e(oh,Yte),e(Yte,ilo),e(oh,dlo),e(oh,KB),e(KB,clo),e(oh,mlo),e(oe,flo),e(oe,rh),e(rh,Kte),e(Kte,glo),e(rh,hlo),e(rh,ZB),e(ZB,ulo),e(rh,plo),e(oe,_lo),e(oe,th),e(th,Zte),e(Zte,blo),e(th,Flo),e(th,eP),e(eP,vlo),e(th,Tlo),e(oe,Mlo),e(oe,ah),e(ah,eae),e(eae,Elo),e(ah,Clo),e(ah,oP),e(oP,wlo),e(ah,Alo),e(oe,ylo),e(oe,nh),e(nh,oae),e(oae,Llo),e(nh,xlo),e(nh,rP),e(rP,$lo),e(nh,klo),e(oe,Slo),e(oe,sh),e(sh,rae),e(rae,Rlo),e(sh,Blo),e(sh,tP),e(tP,Plo),e(sh,Ilo),e(oe,qlo),e(oe,lh),e(lh,tae),e(tae,Nlo),e(lh,jlo),e(lh,aP),e(aP,Dlo),e(lh,Glo),e(oe,Olo),e(oe,ih),e(ih,aae),e(aae,Vlo),e(ih,Xlo),e(ih,nP),e(nP,zlo),e(ih,Qlo),e(oe,Wlo),e(oe,dh),e(dh,nae),e(nae,Hlo),e(dh,Ulo),e(dh,sP),e(sP,Jlo),e(dh,Ylo),e(oe,Klo),e(oe,ch),e(ch,sae),e(sae,Zlo),e(ch,eio),e(ch,lP),e(lP,oio),e(ch,rio),e(oe,tio),e(oe,mh),e(mh,lae),e(lae,aio),e(mh,nio),e(mh,iP),e(iP,sio),e(mh,lio),e(oe,iio),e(oe,fh),e(fh,iae),e(iae,dio),e(fh,cio),e(fh,dP),e(dP,mio),e(fh,fio),e(oe,gio),e(oe,gh),e(gh,dae),e(dae,hio),e(gh,uio),e(gh,cP),e(cP,pio),e(gh,_io),e(oe,bio),e(oe,hh),e(hh,cae),e(cae,Fio),e(hh,vio),e(hh,mP),e(mP,Tio),e(hh,Mio),e(oe,Eio),e(oe,uh),e(uh,mae),e(mae,Cio),e(uh,wio),e(uh,fP),e(fP,Aio),e(uh,yio),e(oe,Lio),e(oe,ph),e(ph,fae),e(fae,xio),e(ph,$io),e(ph,gP),e(gP,kio),e(ph,Sio),e(oe,Rio),e(oe,_h),e(_h,gae),e(gae,Bio),e(_h,Pio),e(_h,hP),e(hP,Iio),e(_h,qio),e(oe,Nio),e(oe,bh),e(bh,hae),e(hae,jio),e(bh,Dio),e(bh,uP),e(uP,Gio),e(bh,Oio),e(oe,Vio),e(oe,Fh),e(Fh,uae),e(uae,Xio),e(Fh,zio),e(Fh,pP),e(pP,Qio),e(Fh,Wio),e(oe,Hio),e(oe,vh),e(vh,pae),e(pae,Uio),e(vh,Jio),e(vh,_P),e(_P,Yio),e(vh,Kio),e(oe,Zio),e(oe,Th),e(Th,_ae),e(_ae,edo),e(Th,odo),e(Th,bP),e(bP,rdo),e(Th,tdo),e(Qe,ado),M(Mh,Qe,null),e(Qe,ndo),M(Eh,Qe,null),e(Ao,sdo),e(Ao,Ch),M(gy,Ch,null),e(Ch,ldo),e(Ch,bae),e(bae,ido),b(m,OPe,_),b(m,Fi,_),e(Fi,wh),e(wh,Fae),M(hy,Fae,null),e(Fi,ddo),e(Fi,vae),e(vae,cdo),b(m,VPe,_),b(m,yo,_),M(uy,yo,null),e(yo,mdo),e(yo,py),e(py,fdo),e(py,FP),e(FP,gdo),e(py,hdo),e(yo,udo),e(yo,_y),e(_y,pdo),e(_y,Tae),e(Tae,_do),e(_y,bdo),e(yo,Fdo),e(yo,We),M(by,We,null),e(We,vdo),e(We,Mae),e(Mae,Tdo),e(We,Mdo),e(We,vi),e(vi,Edo),e(vi,Eae),e(Eae,Cdo),e(vi,wdo),e(vi,Cae),e(Cae,Ado),e(vi,ydo),e(We,Ldo),e(We,_e),e(_e,Ah),e(Ah,wae),e(wae,xdo),e(Ah,$do),e(Ah,vP),e(vP,kdo),e(Ah,Sdo),e(_e,Rdo),e(_e,yh),e(yh,Aae),e(Aae,Bdo),e(yh,Pdo),e(yh,yae),e(yae,Ido),e(yh,qdo),e(_e,Ndo),e(_e,Lh),e(Lh,Lae),e(Lae,jdo),e(Lh,Ddo),e(Lh,TP),e(TP,Gdo),e(Lh,Odo),e(_e,Vdo),e(_e,xh),e(xh,xae),e(xae,Xdo),e(xh,zdo),e(xh,MP),e(MP,Qdo),e(xh,Wdo),e(_e,Hdo),e(_e,$h),e($h,$ae),e($ae,Udo),e($h,Jdo),e($h,EP),e(EP,Ydo),e($h,Kdo),e(_e,Zdo),e(_e,kh),e(kh,kae),e(kae,eco),e(kh,oco),e(kh,CP),e(CP,rco),e(kh,tco),e(_e,aco),e(_e,Sh),e(Sh,Sae),e(Sae,nco),e(Sh,sco),e(Sh,wP),e(wP,lco),e(Sh,ico),e(_e,dco),e(_e,Rh),e(Rh,Rae),e(Rae,cco),e(Rh,mco),e(Rh,AP),e(AP,fco),e(Rh,gco),e(_e,hco),e(_e,Bh),e(Bh,Bae),e(Bae,uco),e(Bh,pco),e(Bh,yP),e(yP,_co),e(Bh,bco),e(_e,Fco),e(_e,Ph),e(Ph,Pae),e(Pae,vco),e(Ph,Tco),e(Ph,LP),e(LP,Mco),e(Ph,Eco),e(_e,Cco),e(_e,Ih),e(Ih,Iae),e(Iae,wco),e(Ih,Aco),e(Ih,xP),e(xP,yco),e(Ih,Lco),e(_e,xco),e(_e,qh),e(qh,qae),e(qae,$co),e(qh,kco),e(qh,$P),e($P,Sco),e(qh,Rco),e(_e,Bco),e(_e,Nh),e(Nh,Nae),e(Nae,Pco),e(Nh,Ico),e(Nh,kP),e(kP,qco),e(Nh,Nco),e(_e,jco),e(_e,jh),e(jh,jae),e(jae,Dco),e(jh,Gco),e(jh,SP),e(SP,Oco),e(jh,Vco),e(_e,Xco),e(_e,Dh),e(Dh,Dae),e(Dae,zco),e(Dh,Qco),e(Dh,RP),e(RP,Wco),e(Dh,Hco),e(We,Uco),M(Gh,We,null),e(We,Jco),M(Oh,We,null),e(yo,Yco),e(yo,Vh),M(Fy,Vh,null),e(Vh,Kco),e(Vh,Gae),e(Gae,Zco),b(m,XPe,_),b(m,Ti,_),e(Ti,Xh),e(Xh,Oae),M(vy,Oae,null),e(Ti,emo),e(Ti,Vae),e(Vae,omo),b(m,zPe,_),b(m,Lo,_),M(Ty,Lo,null),e(Lo,rmo),e(Lo,Mi),e(Mi,tmo),e(Mi,BP),e(BP,amo),e(Mi,nmo),e(Mi,PP),e(PP,smo),e(Mi,lmo),e(Lo,imo),e(Lo,My),e(My,dmo),e(My,Xae),e(Xae,cmo),e(My,mmo),e(Lo,fmo),e(Lo,ot),M(Ey,ot,null),e(ot,gmo),e(ot,zae),e(zae,hmo),e(ot,umo),e(ot,Ei),e(Ei,pmo),e(Ei,Qae),e(Qae,_mo),e(Ei,bmo),e(Ei,IP),e(IP,Fmo),e(Ei,vmo),e(ot,Tmo),M(zh,ot,null),e(Lo,Mmo),e(Lo,He),M(Cy,He,null),e(He,Emo),e(He,Wae),e(Wae,Cmo),e(He,wmo),e(He,Aa),e(Aa,Amo),e(Aa,Hae),e(Hae,ymo),e(Aa,Lmo),e(Aa,Uae),e(Uae,xmo),e(Aa,$mo),e(Aa,Jae),e(Jae,kmo),e(Aa,Smo),e(He,Rmo),e(He,x),e(x,Qh),e(Qh,Yae),e(Yae,Bmo),e(Qh,Pmo),e(Qh,qP),e(qP,Imo),e(Qh,qmo),e(x,Nmo),e(x,Wh),e(Wh,Kae),e(Kae,jmo),e(Wh,Dmo),e(Wh,NP),e(NP,Gmo),e(Wh,Omo),e(x,Vmo),e(x,Hh),e(Hh,Zae),e(Zae,Xmo),e(Hh,zmo),e(Hh,jP),e(jP,Qmo),e(Hh,Wmo),e(x,Hmo),e(x,Uh),e(Uh,ene),e(ene,Umo),e(Uh,Jmo),e(Uh,DP),e(DP,Ymo),e(Uh,Kmo),e(x,Zmo),e(x,Jh),e(Jh,one),e(one,efo),e(Jh,ofo),e(Jh,GP),e(GP,rfo),e(Jh,tfo),e(x,afo),e(x,Yh),e(Yh,rne),e(rne,nfo),e(Yh,sfo),e(Yh,OP),e(OP,lfo),e(Yh,ifo),e(x,dfo),e(x,Kh),e(Kh,tne),e(tne,cfo),e(Kh,mfo),e(Kh,VP),e(VP,ffo),e(Kh,gfo),e(x,hfo),e(x,Zh),e(Zh,ane),e(ane,ufo),e(Zh,pfo),e(Zh,XP),e(XP,_fo),e(Zh,bfo),e(x,Ffo),e(x,eu),e(eu,nne),e(nne,vfo),e(eu,Tfo),e(eu,zP),e(zP,Mfo),e(eu,Efo),e(x,Cfo),e(x,ou),e(ou,sne),e(sne,wfo),e(ou,Afo),e(ou,QP),e(QP,yfo),e(ou,Lfo),e(x,xfo),e(x,ru),e(ru,lne),e(lne,$fo),e(ru,kfo),e(ru,WP),e(WP,Sfo),e(ru,Rfo),e(x,Bfo),e(x,tu),e(tu,ine),e(ine,Pfo),e(tu,Ifo),e(tu,HP),e(HP,qfo),e(tu,Nfo),e(x,jfo),e(x,au),e(au,dne),e(dne,Dfo),e(au,Gfo),e(au,UP),e(UP,Ofo),e(au,Vfo),e(x,Xfo),e(x,nu),e(nu,cne),e(cne,zfo),e(nu,Qfo),e(nu,JP),e(JP,Wfo),e(nu,Hfo),e(x,Ufo),e(x,su),e(su,mne),e(mne,Jfo),e(su,Yfo),e(su,YP),e(YP,Kfo),e(su,Zfo),e(x,ego),e(x,lu),e(lu,fne),e(fne,ogo),e(lu,rgo),e(lu,KP),e(KP,tgo),e(lu,ago),e(x,ngo),e(x,iu),e(iu,gne),e(gne,sgo),e(iu,lgo),e(iu,ZP),e(ZP,igo),e(iu,dgo),e(x,cgo),e(x,du),e(du,hne),e(hne,mgo),e(du,fgo),e(du,eI),e(eI,ggo),e(du,hgo),e(x,ugo),e(x,cu),e(cu,une),e(une,pgo),e(cu,_go),e(cu,oI),e(oI,bgo),e(cu,Fgo),e(x,vgo),e(x,mu),e(mu,pne),e(pne,Tgo),e(mu,Mgo),e(mu,rI),e(rI,Ego),e(mu,Cgo),e(x,wgo),e(x,fu),e(fu,_ne),e(_ne,Ago),e(fu,ygo),e(fu,tI),e(tI,Lgo),e(fu,xgo),e(x,$go),e(x,gu),e(gu,bne),e(bne,kgo),e(gu,Sgo),e(gu,aI),e(aI,Rgo),e(gu,Bgo),e(x,Pgo),e(x,hu),e(hu,Fne),e(Fne,Igo),e(hu,qgo),e(hu,nI),e(nI,Ngo),e(hu,jgo),e(x,Dgo),e(x,uu),e(uu,vne),e(vne,Ggo),e(uu,Ogo),e(uu,sI),e(sI,Vgo),e(uu,Xgo),e(x,zgo),e(x,pu),e(pu,Tne),e(Tne,Qgo),e(pu,Wgo),e(pu,lI),e(lI,Hgo),e(pu,Ugo),e(x,Jgo),e(x,_u),e(_u,Mne),e(Mne,Ygo),e(_u,Kgo),e(_u,iI),e(iI,Zgo),e(_u,eho),e(x,oho),e(x,bu),e(bu,Ene),e(Ene,rho),e(bu,tho),e(bu,dI),e(dI,aho),e(bu,nho),e(x,sho),e(x,Fu),e(Fu,Cne),e(Cne,lho),e(Fu,iho),e(Fu,cI),e(cI,dho),e(Fu,cho),e(x,mho),e(x,vu),e(vu,wne),e(wne,fho),e(vu,gho),e(vu,mI),e(mI,hho),e(vu,uho),e(x,pho),e(x,Tu),e(Tu,Ane),e(Ane,_ho),e(Tu,bho),e(Tu,fI),e(fI,Fho),e(Tu,vho),e(x,Tho),e(x,Mu),e(Mu,yne),e(yne,Mho),e(Mu,Eho),e(Mu,gI),e(gI,Cho),e(Mu,who),e(x,Aho),e(x,Ss),e(Ss,Lne),e(Lne,yho),e(Ss,Lho),e(Ss,hI),e(hI,xho),e(Ss,$ho),e(Ss,uI),e(uI,kho),e(Ss,Sho),e(x,Rho),e(x,Eu),e(Eu,xne),e(xne,Bho),e(Eu,Pho),e(Eu,pI),e(pI,Iho),e(Eu,qho),e(x,Nho),e(x,Cu),e(Cu,$ne),e($ne,jho),e(Cu,Dho),e(Cu,_I),e(_I,Gho),e(Cu,Oho),e(x,Vho),e(x,wu),e(wu,kne),e(kne,Xho),e(wu,zho),e(wu,bI),e(bI,Qho),e(wu,Who),e(x,Hho),e(x,Au),e(Au,Sne),e(Sne,Uho),e(Au,Jho),e(Au,FI),e(FI,Yho),e(Au,Kho),e(x,Zho),e(x,yu),e(yu,Rne),e(Rne,euo),e(yu,ouo),e(yu,vI),e(vI,ruo),e(yu,tuo),e(x,auo),e(x,Lu),e(Lu,Bne),e(Bne,nuo),e(Lu,suo),e(Lu,TI),e(TI,luo),e(Lu,iuo),e(x,duo),e(x,xu),e(xu,Pne),e(Pne,cuo),e(xu,muo),e(xu,MI),e(MI,fuo),e(xu,guo),e(x,huo),e(x,$u),e($u,Ine),e(Ine,uuo),e($u,puo),e($u,EI),e(EI,_uo),e($u,buo),e(x,Fuo),e(x,ku),e(ku,qne),e(qne,vuo),e(ku,Tuo),e(ku,CI),e(CI,Muo),e(ku,Euo),e(x,Cuo),e(x,Su),e(Su,Nne),e(Nne,wuo),e(Su,Auo),e(Su,wI),e(wI,yuo),e(Su,Luo),e(x,xuo),e(x,Ru),e(Ru,jne),e(jne,$uo),e(Ru,kuo),e(Ru,AI),e(AI,Suo),e(Ru,Ruo),e(x,Buo),e(x,Bu),e(Bu,Dne),e(Dne,Puo),e(Bu,Iuo),e(Bu,yI),e(yI,quo),e(Bu,Nuo),e(x,juo),e(x,Pu),e(Pu,Gne),e(Gne,Duo),e(Pu,Guo),e(Pu,LI),e(LI,Ouo),e(Pu,Vuo),e(x,Xuo),e(x,Iu),e(Iu,One),e(One,zuo),e(Iu,Quo),e(Iu,xI),e(xI,Wuo),e(Iu,Huo),e(x,Uuo),e(x,qu),e(qu,Vne),e(Vne,Juo),e(qu,Yuo),e(qu,$I),e($I,Kuo),e(qu,Zuo),e(x,epo),e(x,Nu),e(Nu,Xne),e(Xne,opo),e(Nu,rpo),e(Nu,kI),e(kI,tpo),e(Nu,apo),e(x,npo),e(x,ju),e(ju,zne),e(zne,spo),e(ju,lpo),e(ju,SI),e(SI,ipo),e(ju,dpo),e(x,cpo),e(x,Du),e(Du,Qne),e(Qne,mpo),e(Du,fpo),e(Du,RI),e(RI,gpo),e(Du,hpo),e(x,upo),e(x,Gu),e(Gu,Wne),e(Wne,ppo),e(Gu,_po),e(Gu,BI),e(BI,bpo),e(Gu,Fpo),e(x,vpo),e(x,Ou),e(Ou,Hne),e(Hne,Tpo),e(Ou,Mpo),e(Ou,PI),e(PI,Epo),e(Ou,Cpo),e(x,wpo),e(x,Vu),e(Vu,Une),e(Une,Apo),e(Vu,ypo),e(Vu,II),e(II,Lpo),e(Vu,xpo),e(x,$po),e(x,Xu),e(Xu,Jne),e(Jne,kpo),e(Xu,Spo),e(Xu,qI),e(qI,Rpo),e(Xu,Bpo),e(x,Ppo),e(x,zu),e(zu,Yne),e(Yne,Ipo),e(zu,qpo),e(zu,NI),e(NI,Npo),e(zu,jpo),e(x,Dpo),e(x,Qu),e(Qu,Kne),e(Kne,Gpo),e(Qu,Opo),e(Qu,jI),e(jI,Vpo),e(Qu,Xpo),e(x,zpo),e(x,Wu),e(Wu,Zne),e(Zne,Qpo),e(Wu,Wpo),e(Wu,DI),e(DI,Hpo),e(Wu,Upo),e(x,Jpo),e(x,Hu),e(Hu,ese),e(ese,Ypo),e(Hu,Kpo),e(Hu,GI),e(GI,Zpo),e(Hu,e_o),e(x,o_o),e(x,Uu),e(Uu,ose),e(ose,r_o),e(Uu,t_o),e(Uu,OI),e(OI,a_o),e(Uu,n_o),e(x,s_o),e(x,Ju),e(Ju,rse),e(rse,l_o),e(Ju,i_o),e(Ju,VI),e(VI,d_o),e(Ju,c_o),e(x,m_o),e(x,Yu),e(Yu,tse),e(tse,f_o),e(Yu,g_o),e(Yu,XI),e(XI,h_o),e(Yu,u_o),e(x,p_o),e(x,Ku),e(Ku,ase),e(ase,__o),e(Ku,b_o),e(Ku,zI),e(zI,F_o),e(Ku,v_o),e(x,T_o),e(x,Zu),e(Zu,nse),e(nse,M_o),e(Zu,E_o),e(Zu,QI),e(QI,C_o),e(Zu,w_o),e(x,A_o),e(x,ep),e(ep,sse),e(sse,y_o),e(ep,L_o),e(ep,WI),e(WI,x_o),e(ep,$_o),e(x,k_o),e(x,op),e(op,lse),e(lse,S_o),e(op,R_o),e(op,HI),e(HI,B_o),e(op,P_o),e(x,I_o),e(x,rp),e(rp,ise),e(ise,q_o),e(rp,N_o),e(rp,UI),e(UI,j_o),e(rp,D_o),e(x,G_o),e(x,tp),e(tp,dse),e(dse,O_o),e(tp,V_o),e(tp,JI),e(JI,X_o),e(tp,z_o),e(x,Q_o),e(x,ap),e(ap,cse),e(cse,W_o),e(ap,H_o),e(ap,YI),e(YI,U_o),e(ap,J_o),e(x,Y_o),e(x,np),e(np,mse),e(mse,K_o),e(np,Z_o),e(np,KI),e(KI,ebo),e(np,obo),e(x,rbo),e(x,sp),e(sp,fse),e(fse,tbo),e(sp,abo),e(sp,ZI),e(ZI,nbo),e(sp,sbo),e(x,lbo),e(x,lp),e(lp,gse),e(gse,ibo),e(lp,dbo),e(lp,eq),e(eq,cbo),e(lp,mbo),e(x,fbo),e(x,ip),e(ip,hse),e(hse,gbo),e(ip,hbo),e(ip,oq),e(oq,ubo),e(ip,pbo),e(x,_bo),e(x,dp),e(dp,use),e(use,bbo),e(dp,Fbo),e(dp,rq),e(rq,vbo),e(dp,Tbo),e(x,Mbo),e(x,cp),e(cp,pse),e(pse,Ebo),e(cp,Cbo),e(cp,tq),e(tq,wbo),e(cp,Abo),e(x,ybo),e(x,mp),e(mp,_se),e(_se,Lbo),e(mp,xbo),e(mp,aq),e(aq,$bo),e(mp,kbo),e(x,Sbo),e(x,fp),e(fp,bse),e(bse,Rbo),e(fp,Bbo),e(fp,nq),e(nq,Pbo),e(fp,Ibo),e(x,qbo),e(x,gp),e(gp,Fse),e(Fse,Nbo),e(gp,jbo),e(gp,sq),e(sq,Dbo),e(gp,Gbo),e(x,Obo),e(x,hp),e(hp,vse),e(vse,Vbo),e(hp,Xbo),e(hp,lq),e(lq,zbo),e(hp,Qbo),e(x,Wbo),e(x,up),e(up,Tse),e(Tse,Hbo),e(up,Ubo),e(up,iq),e(iq,Jbo),e(up,Ybo),e(x,Kbo),e(x,pp),e(pp,Mse),e(Mse,Zbo),e(pp,e2o),e(pp,dq),e(dq,o2o),e(pp,r2o),e(x,t2o),e(x,_p),e(_p,Ese),e(Ese,a2o),e(_p,n2o),e(_p,cq),e(cq,s2o),e(_p,l2o),e(x,i2o),e(x,bp),e(bp,Cse),e(Cse,d2o),e(bp,c2o),e(bp,mq),e(mq,m2o),e(bp,f2o),e(x,g2o),e(x,Fp),e(Fp,wse),e(wse,h2o),e(Fp,u2o),e(Fp,fq),e(fq,p2o),e(Fp,_2o),e(x,b2o),e(x,vp),e(vp,Ase),e(Ase,F2o),e(vp,v2o),e(vp,gq),e(gq,T2o),e(vp,M2o),e(x,E2o),e(x,Tp),e(Tp,yse),e(yse,C2o),e(Tp,w2o),e(Tp,hq),e(hq,A2o),e(Tp,y2o),e(x,L2o),e(x,Mp),e(Mp,Lse),e(Lse,x2o),e(Mp,$2o),e(Mp,uq),e(uq,k2o),e(Mp,S2o),e(x,R2o),e(x,Ep),e(Ep,xse),e(xse,B2o),e(Ep,P2o),e(Ep,pq),e(pq,I2o),e(Ep,q2o),e(x,N2o),e(x,Cp),e(Cp,$se),e($se,j2o),e(Cp,D2o),e(Cp,_q),e(_q,G2o),e(Cp,O2o),e(x,V2o),e(x,wp),e(wp,kse),e(kse,X2o),e(wp,z2o),e(wp,bq),e(bq,Q2o),e(wp,W2o),e(x,H2o),e(x,Ap),e(Ap,Sse),e(Sse,U2o),e(Ap,J2o),e(Ap,Fq),e(Fq,Y2o),e(Ap,K2o),e(x,Z2o),e(x,yp),e(yp,Rse),e(Rse,eFo),e(yp,oFo),e(yp,vq),e(vq,rFo),e(yp,tFo),e(x,aFo),e(x,Lp),e(Lp,Bse),e(Bse,nFo),e(Lp,sFo),e(Lp,Tq),e(Tq,lFo),e(Lp,iFo),e(x,dFo),e(x,xp),e(xp,Pse),e(Pse,cFo),e(xp,mFo),e(xp,Mq),e(Mq,fFo),e(xp,gFo),e(x,hFo),e(x,$p),e($p,Ise),e(Ise,uFo),e($p,pFo),e($p,Eq),e(Eq,_Fo),e($p,bFo),e(x,FFo),e(x,kp),e(kp,qse),e(qse,vFo),e(kp,TFo),e(kp,Cq),e(Cq,MFo),e(kp,EFo),e(x,CFo),e(x,Sp),e(Sp,Nse),e(Nse,wFo),e(Sp,AFo),e(Sp,wq),e(wq,yFo),e(Sp,LFo),e(x,xFo),e(x,Rp),e(Rp,jse),e(jse,$Fo),e(Rp,kFo),e(Rp,Aq),e(Aq,SFo),e(Rp,RFo),e(He,BFo),e(He,Bp),e(Bp,PFo),e(Bp,Dse),e(Dse,IFo),e(Bp,qFo),e(Bp,Gse),e(Gse,NFo),e(He,jFo),M(Pp,He,null),b(m,QPe,_),b(m,Ci,_),e(Ci,Ip),e(Ip,Ose),M(wy,Ose,null),e(Ci,DFo),e(Ci,Vse),e(Vse,GFo),b(m,WPe,_),b(m,xo,_),M(Ay,xo,null),e(xo,OFo),e(xo,wi),e(wi,VFo),e(wi,yq),e(yq,XFo),e(wi,zFo),e(wi,Lq),e(Lq,QFo),e(wi,WFo),e(xo,HFo),e(xo,yy),e(yy,UFo),e(yy,Xse),e(Xse,JFo),e(yy,YFo),e(xo,KFo),e(xo,rt),M(Ly,rt,null),e(rt,ZFo),e(rt,zse),e(zse,evo),e(rt,ovo),e(rt,Ai),e(Ai,rvo),e(Ai,Qse),e(Qse,tvo),e(Ai,avo),e(Ai,xq),e(xq,nvo),e(Ai,svo),e(rt,lvo),M(qp,rt,null),e(xo,ivo),e(xo,Ue),M(xy,Ue,null),e(Ue,dvo),e(Ue,Wse),e(Wse,cvo),e(Ue,mvo),e(Ue,ya),e(ya,fvo),e(ya,Hse),e(Hse,gvo),e(ya,hvo),e(ya,Use),e(Use,uvo),e(ya,pvo),e(ya,Jse),e(Jse,_vo),e(ya,bvo),e(Ue,Fvo),e(Ue,G),e(G,Np),e(Np,Yse),e(Yse,vvo),e(Np,Tvo),e(Np,$q),e($q,Mvo),e(Np,Evo),e(G,Cvo),e(G,jp),e(jp,Kse),e(Kse,wvo),e(jp,Avo),e(jp,kq),e(kq,yvo),e(jp,Lvo),e(G,xvo),e(G,Dp),e(Dp,Zse),e(Zse,$vo),e(Dp,kvo),e(Dp,Sq),e(Sq,Svo),e(Dp,Rvo),e(G,Bvo),e(G,Gp),e(Gp,ele),e(ele,Pvo),e(Gp,Ivo),e(Gp,Rq),e(Rq,qvo),e(Gp,Nvo),e(G,jvo),e(G,Op),e(Op,ole),e(ole,Dvo),e(Op,Gvo),e(Op,Bq),e(Bq,Ovo),e(Op,Vvo),e(G,Xvo),e(G,Vp),e(Vp,rle),e(rle,zvo),e(Vp,Qvo),e(Vp,Pq),e(Pq,Wvo),e(Vp,Hvo),e(G,Uvo),e(G,Xp),e(Xp,tle),e(tle,Jvo),e(Xp,Yvo),e(Xp,Iq),e(Iq,Kvo),e(Xp,Zvo),e(G,e1o),e(G,zp),e(zp,ale),e(ale,o1o),e(zp,r1o),e(zp,qq),e(qq,t1o),e(zp,a1o),e(G,n1o),e(G,Qp),e(Qp,nle),e(nle,s1o),e(Qp,l1o),e(Qp,Nq),e(Nq,i1o),e(Qp,d1o),e(G,c1o),e(G,Wp),e(Wp,sle),e(sle,m1o),e(Wp,f1o),e(Wp,jq),e(jq,g1o),e(Wp,h1o),e(G,u1o),e(G,Hp),e(Hp,lle),e(lle,p1o),e(Hp,_1o),e(Hp,Dq),e(Dq,b1o),e(Hp,F1o),e(G,v1o),e(G,Up),e(Up,ile),e(ile,T1o),e(Up,M1o),e(Up,Gq),e(Gq,E1o),e(Up,C1o),e(G,w1o),e(G,Jp),e(Jp,dle),e(dle,A1o),e(Jp,y1o),e(Jp,Oq),e(Oq,L1o),e(Jp,x1o),e(G,$1o),e(G,Yp),e(Yp,cle),e(cle,k1o),e(Yp,S1o),e(Yp,Vq),e(Vq,R1o),e(Yp,B1o),e(G,P1o),e(G,Kp),e(Kp,mle),e(mle,I1o),e(Kp,q1o),e(Kp,Xq),e(Xq,N1o),e(Kp,j1o),e(G,D1o),e(G,Zp),e(Zp,fle),e(fle,G1o),e(Zp,O1o),e(Zp,zq),e(zq,V1o),e(Zp,X1o),e(G,z1o),e(G,e_),e(e_,gle),e(gle,Q1o),e(e_,W1o),e(e_,Qq),e(Qq,H1o),e(e_,U1o),e(G,J1o),e(G,o_),e(o_,hle),e(hle,Y1o),e(o_,K1o),e(o_,Wq),e(Wq,Z1o),e(o_,eTo),e(G,oTo),e(G,r_),e(r_,ule),e(ule,rTo),e(r_,tTo),e(r_,Hq),e(Hq,aTo),e(r_,nTo),e(G,sTo),e(G,t_),e(t_,ple),e(ple,lTo),e(t_,iTo),e(t_,Uq),e(Uq,dTo),e(t_,cTo),e(G,mTo),e(G,a_),e(a_,_le),e(_le,fTo),e(a_,gTo),e(a_,Jq),e(Jq,hTo),e(a_,uTo),e(G,pTo),e(G,n_),e(n_,ble),e(ble,_To),e(n_,bTo),e(n_,Yq),e(Yq,FTo),e(n_,vTo),e(G,TTo),e(G,s_),e(s_,Fle),e(Fle,MTo),e(s_,ETo),e(s_,Kq),e(Kq,CTo),e(s_,wTo),e(G,ATo),e(G,l_),e(l_,vle),e(vle,yTo),e(l_,LTo),e(l_,Zq),e(Zq,xTo),e(l_,$To),e(G,kTo),e(G,i_),e(i_,Tle),e(Tle,STo),e(i_,RTo),e(i_,eN),e(eN,BTo),e(i_,PTo),e(G,ITo),e(G,d_),e(d_,Mle),e(Mle,qTo),e(d_,NTo),e(d_,oN),e(oN,jTo),e(d_,DTo),e(G,GTo),e(G,c_),e(c_,Ele),e(Ele,OTo),e(c_,VTo),e(c_,rN),e(rN,XTo),e(c_,zTo),e(G,QTo),e(G,m_),e(m_,Cle),e(Cle,WTo),e(m_,HTo),e(m_,tN),e(tN,UTo),e(m_,JTo),e(G,YTo),e(G,f_),e(f_,wle),e(wle,KTo),e(f_,ZTo),e(f_,aN),e(aN,eMo),e(f_,oMo),e(G,rMo),e(G,g_),e(g_,Ale),e(Ale,tMo),e(g_,aMo),e(g_,nN),e(nN,nMo),e(g_,sMo),e(G,lMo),e(G,h_),e(h_,yle),e(yle,iMo),e(h_,dMo),e(h_,sN),e(sN,cMo),e(h_,mMo),e(G,fMo),e(G,u_),e(u_,Lle),e(Lle,gMo),e(u_,hMo),e(u_,lN),e(lN,uMo),e(u_,pMo),e(G,_Mo),e(G,p_),e(p_,xle),e(xle,bMo),e(p_,FMo),e(p_,iN),e(iN,vMo),e(p_,TMo),e(G,MMo),e(G,__),e(__,$le),e($le,EMo),e(__,CMo),e(__,dN),e(dN,wMo),e(__,AMo),e(G,yMo),e(G,b_),e(b_,kle),e(kle,LMo),e(b_,xMo),e(b_,cN),e(cN,$Mo),e(b_,kMo),e(G,SMo),e(G,F_),e(F_,Sle),e(Sle,RMo),e(F_,BMo),e(F_,mN),e(mN,PMo),e(F_,IMo),e(G,qMo),e(G,v_),e(v_,Rle),e(Rle,NMo),e(v_,jMo),e(v_,fN),e(fN,DMo),e(v_,GMo),e(G,OMo),e(G,T_),e(T_,Ble),e(Ble,VMo),e(T_,XMo),e(T_,gN),e(gN,zMo),e(T_,QMo),e(G,WMo),e(G,M_),e(M_,Ple),e(Ple,HMo),e(M_,UMo),e(M_,hN),e(hN,JMo),e(M_,YMo),e(G,KMo),e(G,E_),e(E_,Ile),e(Ile,ZMo),e(E_,e4o),e(E_,uN),e(uN,o4o),e(E_,r4o),e(Ue,t4o),e(Ue,C_),e(C_,a4o),e(C_,qle),e(qle,n4o),e(C_,s4o),e(C_,Nle),e(Nle,l4o),e(Ue,i4o),M(w_,Ue,null),b(m,HPe,_),b(m,yi,_),e(yi,A_),e(A_,jle),M($y,jle,null),e(yi,d4o),e(yi,Dle),e(Dle,c4o),b(m,UPe,_),b(m,$o,_),M(ky,$o,null),e($o,m4o),e($o,Li),e(Li,f4o),e(Li,pN),e(pN,g4o),e(Li,h4o),e(Li,_N),e(_N,u4o),e(Li,p4o),e($o,_4o),e($o,Sy),e(Sy,b4o),e(Sy,Gle),e(Gle,F4o),e(Sy,v4o),e($o,T4o),e($o,tt),M(Ry,tt,null),e(tt,M4o),e(tt,Ole),e(Ole,E4o),e(tt,C4o),e(tt,xi),e(xi,w4o),e(xi,Vle),e(Vle,A4o),e(xi,y4o),e(xi,bN),e(bN,L4o),e(xi,x4o),e(tt,$4o),M(y_,tt,null),e($o,k4o),e($o,Je),M(By,Je,null),e(Je,S4o),e(Je,Xle),e(Xle,R4o),e(Je,B4o),e(Je,La),e(La,P4o),e(La,zle),e(zle,I4o),e(La,q4o),e(La,Qle),e(Qle,N4o),e(La,j4o),e(La,Wle),e(Wle,D4o),e(La,G4o),e(Je,O4o),e(Je,z),e(z,L_),e(L_,Hle),e(Hle,V4o),e(L_,X4o),e(L_,FN),e(FN,z4o),e(L_,Q4o),e(z,W4o),e(z,x_),e(x_,Ule),e(Ule,H4o),e(x_,U4o),e(x_,vN),e(vN,J4o),e(x_,Y4o),e(z,K4o),e(z,$_),e($_,Jle),e(Jle,Z4o),e($_,eEo),e($_,TN),e(TN,oEo),e($_,rEo),e(z,tEo),e(z,k_),e(k_,Yle),e(Yle,aEo),e(k_,nEo),e(k_,MN),e(MN,sEo),e(k_,lEo),e(z,iEo),e(z,S_),e(S_,Kle),e(Kle,dEo),e(S_,cEo),e(S_,EN),e(EN,mEo),e(S_,fEo),e(z,gEo),e(z,R_),e(R_,Zle),e(Zle,hEo),e(R_,uEo),e(R_,CN),e(CN,pEo),e(R_,_Eo),e(z,bEo),e(z,B_),e(B_,eie),e(eie,FEo),e(B_,vEo),e(B_,wN),e(wN,TEo),e(B_,MEo),e(z,EEo),e(z,P_),e(P_,oie),e(oie,CEo),e(P_,wEo),e(P_,AN),e(AN,AEo),e(P_,yEo),e(z,LEo),e(z,I_),e(I_,rie),e(rie,xEo),e(I_,$Eo),e(I_,yN),e(yN,kEo),e(I_,SEo),e(z,REo),e(z,q_),e(q_,tie),e(tie,BEo),e(q_,PEo),e(q_,LN),e(LN,IEo),e(q_,qEo),e(z,NEo),e(z,N_),e(N_,aie),e(aie,jEo),e(N_,DEo),e(N_,xN),e(xN,GEo),e(N_,OEo),e(z,VEo),e(z,j_),e(j_,nie),e(nie,XEo),e(j_,zEo),e(j_,$N),e($N,QEo),e(j_,WEo),e(z,HEo),e(z,D_),e(D_,sie),e(sie,UEo),e(D_,JEo),e(D_,kN),e(kN,YEo),e(D_,KEo),e(z,ZEo),e(z,G_),e(G_,lie),e(lie,e5o),e(G_,o5o),e(G_,SN),e(SN,r5o),e(G_,t5o),e(z,a5o),e(z,O_),e(O_,iie),e(iie,n5o),e(O_,s5o),e(O_,RN),e(RN,l5o),e(O_,i5o),e(z,d5o),e(z,V_),e(V_,die),e(die,c5o),e(V_,m5o),e(V_,BN),e(BN,f5o),e(V_,g5o),e(z,h5o),e(z,X_),e(X_,cie),e(cie,u5o),e(X_,p5o),e(X_,PN),e(PN,_5o),e(X_,b5o),e(z,F5o),e(z,z_),e(z_,mie),e(mie,v5o),e(z_,T5o),e(z_,IN),e(IN,M5o),e(z_,E5o),e(z,C5o),e(z,Q_),e(Q_,fie),e(fie,w5o),e(Q_,A5o),e(Q_,qN),e(qN,y5o),e(Q_,L5o),e(z,x5o),e(z,W_),e(W_,gie),e(gie,$5o),e(W_,k5o),e(W_,NN),e(NN,S5o),e(W_,R5o),e(z,B5o),e(z,H_),e(H_,hie),e(hie,P5o),e(H_,I5o),e(H_,jN),e(jN,q5o),e(H_,N5o),e(z,j5o),e(z,U_),e(U_,uie),e(uie,D5o),e(U_,G5o),e(U_,DN),e(DN,O5o),e(U_,V5o),e(z,X5o),e(z,J_),e(J_,pie),e(pie,z5o),e(J_,Q5o),e(J_,GN),e(GN,W5o),e(J_,H5o),e(z,U5o),e(z,Y_),e(Y_,_ie),e(_ie,J5o),e(Y_,Y5o),e(Y_,ON),e(ON,K5o),e(Y_,Z5o),e(z,eCo),e(z,K_),e(K_,bie),e(bie,oCo),e(K_,rCo),e(K_,VN),e(VN,tCo),e(K_,aCo),e(z,nCo),e(z,Z_),e(Z_,Fie),e(Fie,sCo),e(Z_,lCo),e(Z_,XN),e(XN,iCo),e(Z_,dCo),e(z,cCo),e(z,eb),e(eb,vie),e(vie,mCo),e(eb,fCo),e(eb,zN),e(zN,gCo),e(eb,hCo),e(z,uCo),e(z,ob),e(ob,Tie),e(Tie,pCo),e(ob,_Co),e(ob,QN),e(QN,bCo),e(ob,FCo),e(z,vCo),e(z,rb),e(rb,Mie),e(Mie,TCo),e(rb,MCo),e(rb,WN),e(WN,ECo),e(rb,CCo),e(z,wCo),e(z,tb),e(tb,Eie),e(Eie,ACo),e(tb,yCo),e(tb,HN),e(HN,LCo),e(tb,xCo),e(z,$Co),e(z,ab),e(ab,Cie),e(Cie,kCo),e(ab,SCo),e(ab,UN),e(UN,RCo),e(ab,BCo),e(z,PCo),e(z,nb),e(nb,wie),e(wie,ICo),e(nb,qCo),e(nb,JN),e(JN,NCo),e(nb,jCo),e(z,DCo),e(z,sb),e(sb,Aie),e(Aie,GCo),e(sb,OCo),e(sb,YN),e(YN,VCo),e(sb,XCo),e(z,zCo),e(z,lb),e(lb,yie),e(yie,QCo),e(lb,WCo),e(lb,KN),e(KN,HCo),e(lb,UCo),e(z,JCo),e(z,ib),e(ib,Lie),e(Lie,YCo),e(ib,KCo),e(ib,ZN),e(ZN,ZCo),e(ib,e3o),e(z,o3o),e(z,db),e(db,xie),e(xie,r3o),e(db,t3o),e(db,ej),e(ej,a3o),e(db,n3o),e(Je,s3o),e(Je,cb),e(cb,l3o),e(cb,$ie),e($ie,i3o),e(cb,d3o),e(cb,kie),e(kie,c3o),e(Je,m3o),M(mb,Je,null),b(m,JPe,_),b(m,$i,_),e($i,fb),e(fb,Sie),M(Py,Sie,null),e($i,f3o),e($i,Rie),e(Rie,g3o),b(m,YPe,_),b(m,ko,_),M(Iy,ko,null),e(ko,h3o),e(ko,ki),e(ki,u3o),e(ki,oj),e(oj,p3o),e(ki,_3o),e(ki,rj),e(rj,b3o),e(ki,F3o),e(ko,v3o),e(ko,qy),e(qy,T3o),e(qy,Bie),e(Bie,M3o),e(qy,E3o),e(ko,C3o),e(ko,at),M(Ny,at,null),e(at,w3o),e(at,Pie),e(Pie,A3o),e(at,y3o),e(at,Si),e(Si,L3o),e(Si,Iie),e(Iie,x3o),e(Si,$3o),e(Si,tj),e(tj,k3o),e(Si,S3o),e(at,R3o),M(gb,at,null),e(ko,B3o),e(ko,Ye),M(jy,Ye,null),e(Ye,P3o),e(Ye,qie),e(qie,I3o),e(Ye,q3o),e(Ye,xa),e(xa,N3o),e(xa,Nie),e(Nie,j3o),e(xa,D3o),e(xa,jie),e(jie,G3o),e(xa,O3o),e(xa,Die),e(Die,V3o),e(xa,X3o),e(Ye,z3o),e(Ye,Q),e(Q,hb),e(hb,Gie),e(Gie,Q3o),e(hb,W3o),e(hb,aj),e(aj,H3o),e(hb,U3o),e(Q,J3o),e(Q,ub),e(ub,Oie),e(Oie,Y3o),e(ub,K3o),e(ub,nj),e(nj,Z3o),e(ub,ewo),e(Q,owo),e(Q,pb),e(pb,Vie),e(Vie,rwo),e(pb,two),e(pb,sj),e(sj,awo),e(pb,nwo),e(Q,swo),e(Q,_b),e(_b,Xie),e(Xie,lwo),e(_b,iwo),e(_b,lj),e(lj,dwo),e(_b,cwo),e(Q,mwo),e(Q,bb),e(bb,zie),e(zie,fwo),e(bb,gwo),e(bb,ij),e(ij,hwo),e(bb,uwo),e(Q,pwo),e(Q,Fb),e(Fb,Qie),e(Qie,_wo),e(Fb,bwo),e(Fb,dj),e(dj,Fwo),e(Fb,vwo),e(Q,Two),e(Q,vb),e(vb,Wie),e(Wie,Mwo),e(vb,Ewo),e(vb,cj),e(cj,Cwo),e(vb,wwo),e(Q,Awo),e(Q,Tb),e(Tb,Hie),e(Hie,ywo),e(Tb,Lwo),e(Tb,mj),e(mj,xwo),e(Tb,$wo),e(Q,kwo),e(Q,Mb),e(Mb,Uie),e(Uie,Swo),e(Mb,Rwo),e(Mb,fj),e(fj,Bwo),e(Mb,Pwo),e(Q,Iwo),e(Q,Eb),e(Eb,Jie),e(Jie,qwo),e(Eb,Nwo),e(Eb,gj),e(gj,jwo),e(Eb,Dwo),e(Q,Gwo),e(Q,Cb),e(Cb,Yie),e(Yie,Owo),e(Cb,Vwo),e(Cb,hj),e(hj,Xwo),e(Cb,zwo),e(Q,Qwo),e(Q,wb),e(wb,Kie),e(Kie,Wwo),e(wb,Hwo),e(wb,uj),e(uj,Uwo),e(wb,Jwo),e(Q,Ywo),e(Q,Ab),e(Ab,Zie),e(Zie,Kwo),e(Ab,Zwo),e(Ab,pj),e(pj,eAo),e(Ab,oAo),e(Q,rAo),e(Q,yb),e(yb,ede),e(ede,tAo),e(yb,aAo),e(yb,_j),e(_j,nAo),e(yb,sAo),e(Q,lAo),e(Q,Lb),e(Lb,ode),e(ode,iAo),e(Lb,dAo),e(Lb,bj),e(bj,cAo),e(Lb,mAo),e(Q,fAo),e(Q,xb),e(xb,rde),e(rde,gAo),e(xb,hAo),e(xb,Fj),e(Fj,uAo),e(xb,pAo),e(Q,_Ao),e(Q,$b),e($b,tde),e(tde,bAo),e($b,FAo),e($b,vj),e(vj,vAo),e($b,TAo),e(Q,MAo),e(Q,kb),e(kb,ade),e(ade,EAo),e(kb,CAo),e(kb,Tj),e(Tj,wAo),e(kb,AAo),e(Q,yAo),e(Q,Sb),e(Sb,nde),e(nde,LAo),e(Sb,xAo),e(Sb,Mj),e(Mj,$Ao),e(Sb,kAo),e(Q,SAo),e(Q,Rb),e(Rb,sde),e(sde,RAo),e(Rb,BAo),e(Rb,Ej),e(Ej,PAo),e(Rb,IAo),e(Q,qAo),e(Q,Bb),e(Bb,lde),e(lde,NAo),e(Bb,jAo),e(Bb,Cj),e(Cj,DAo),e(Bb,GAo),e(Q,OAo),e(Q,Pb),e(Pb,ide),e(ide,VAo),e(Pb,XAo),e(Pb,wj),e(wj,zAo),e(Pb,QAo),e(Q,WAo),e(Q,Ib),e(Ib,dde),e(dde,HAo),e(Ib,UAo),e(Ib,Aj),e(Aj,JAo),e(Ib,YAo),e(Q,KAo),e(Q,qb),e(qb,cde),e(cde,ZAo),e(qb,e0o),e(qb,yj),e(yj,o0o),e(qb,r0o),e(Q,t0o),e(Q,Nb),e(Nb,mde),e(mde,a0o),e(Nb,n0o),e(Nb,Lj),e(Lj,s0o),e(Nb,l0o),e(Q,i0o),e(Q,jb),e(jb,fde),e(fde,d0o),e(jb,c0o),e(jb,xj),e(xj,m0o),e(jb,f0o),e(Q,g0o),e(Q,Db),e(Db,gde),e(gde,h0o),e(Db,u0o),e(Db,$j),e($j,p0o),e(Db,_0o),e(Q,b0o),e(Q,Gb),e(Gb,hde),e(hde,F0o),e(Gb,v0o),e(Gb,kj),e(kj,T0o),e(Gb,M0o),e(Q,E0o),e(Q,Ob),e(Ob,ude),e(ude,C0o),e(Ob,w0o),e(Ob,Sj),e(Sj,A0o),e(Ob,y0o),e(Q,L0o),e(Q,Vb),e(Vb,pde),e(pde,x0o),e(Vb,$0o),e(Vb,Rj),e(Rj,k0o),e(Vb,S0o),e(Q,R0o),e(Q,Xb),e(Xb,_de),e(_de,B0o),e(Xb,P0o),e(Xb,bde),e(bde,I0o),e(Xb,q0o),e(Q,N0o),e(Q,zb),e(zb,Fde),e(Fde,j0o),e(zb,D0o),e(zb,Bj),e(Bj,G0o),e(zb,O0o),e(Q,V0o),e(Q,Qb),e(Qb,vde),e(vde,X0o),e(Qb,z0o),e(Qb,Pj),e(Pj,Q0o),e(Qb,W0o),e(Q,H0o),e(Q,Wb),e(Wb,Tde),e(Tde,U0o),e(Wb,J0o),e(Wb,Ij),e(Ij,Y0o),e(Wb,K0o),e(Q,Z0o),e(Q,Hb),e(Hb,Mde),e(Mde,e6o),e(Hb,o6o),e(Hb,qj),e(qj,r6o),e(Hb,t6o),e(Ye,a6o),e(Ye,Ub),e(Ub,n6o),e(Ub,Ede),e(Ede,s6o),e(Ub,l6o),e(Ub,Cde),e(Cde,i6o),e(Ye,d6o),M(Jb,Ye,null),b(m,KPe,_),b(m,Ri,_),e(Ri,Yb),e(Yb,wde),M(Dy,wde,null),e(Ri,c6o),e(Ri,Ade),e(Ade,m6o),b(m,ZPe,_),b(m,So,_),M(Gy,So,null),e(So,f6o),e(So,Bi),e(Bi,g6o),e(Bi,Nj),e(Nj,h6o),e(Bi,u6o),e(Bi,jj),e(jj,p6o),e(Bi,_6o),e(So,b6o),e(So,Oy),e(Oy,F6o),e(Oy,yde),e(yde,v6o),e(Oy,T6o),e(So,M6o),e(So,nt),M(Vy,nt,null),e(nt,E6o),e(nt,Lde),e(Lde,C6o),e(nt,w6o),e(nt,Pi),e(Pi,A6o),e(Pi,xde),e(xde,y6o),e(Pi,L6o),e(Pi,Dj),e(Dj,x6o),e(Pi,$6o),e(nt,k6o),M(Kb,nt,null),e(So,S6o),e(So,Ke),M(Xy,Ke,null),e(Ke,R6o),e(Ke,$de),e($de,B6o),e(Ke,P6o),e(Ke,$a),e($a,I6o),e($a,kde),e(kde,q6o),e($a,N6o),e($a,Sde),e(Sde,j6o),e($a,D6o),e($a,Rde),e(Rde,G6o),e($a,O6o),e(Ke,V6o),e(Ke,ue),e(ue,Zb),e(Zb,Bde),e(Bde,X6o),e(Zb,z6o),e(Zb,Gj),e(Gj,Q6o),e(Zb,W6o),e(ue,H6o),e(ue,e2),e(e2,Pde),e(Pde,U6o),e(e2,J6o),e(e2,Oj),e(Oj,Y6o),e(e2,K6o),e(ue,Z6o),e(ue,o2),e(o2,Ide),e(Ide,eyo),e(o2,oyo),e(o2,Vj),e(Vj,ryo),e(o2,tyo),e(ue,ayo),e(ue,r2),e(r2,qde),e(qde,nyo),e(r2,syo),e(r2,Xj),e(Xj,lyo),e(r2,iyo),e(ue,dyo),e(ue,t2),e(t2,Nde),e(Nde,cyo),e(t2,myo),e(t2,zj),e(zj,fyo),e(t2,gyo),e(ue,hyo),e(ue,a2),e(a2,jde),e(jde,uyo),e(a2,pyo),e(a2,Qj),e(Qj,_yo),e(a2,byo),e(ue,Fyo),e(ue,n2),e(n2,Dde),e(Dde,vyo),e(n2,Tyo),e(n2,Wj),e(Wj,Myo),e(n2,Eyo),e(ue,Cyo),e(ue,s2),e(s2,Gde),e(Gde,wyo),e(s2,Ayo),e(s2,Hj),e(Hj,yyo),e(s2,Lyo),e(ue,xyo),e(ue,l2),e(l2,Ode),e(Ode,$yo),e(l2,kyo),e(l2,Uj),e(Uj,Syo),e(l2,Ryo),e(ue,Byo),e(ue,i2),e(i2,Vde),e(Vde,Pyo),e(i2,Iyo),e(i2,Jj),e(Jj,qyo),e(i2,Nyo),e(ue,jyo),e(ue,d2),e(d2,Xde),e(Xde,Dyo),e(d2,Gyo),e(d2,Yj),e(Yj,Oyo),e(d2,Vyo),e(ue,Xyo),e(ue,c2),e(c2,zde),e(zde,zyo),e(c2,Qyo),e(c2,Kj),e(Kj,Wyo),e(c2,Hyo),e(ue,Uyo),e(ue,m2),e(m2,Qde),e(Qde,Jyo),e(m2,Yyo),e(m2,Zj),e(Zj,Kyo),e(m2,Zyo),e(ue,eLo),e(ue,f2),e(f2,Wde),e(Wde,oLo),e(f2,rLo),e(f2,eD),e(eD,tLo),e(f2,aLo),e(ue,nLo),e(ue,g2),e(g2,Hde),e(Hde,sLo),e(g2,lLo),e(g2,oD),e(oD,iLo),e(g2,dLo),e(ue,cLo),e(ue,h2),e(h2,Ude),e(Ude,mLo),e(h2,fLo),e(h2,rD),e(rD,gLo),e(h2,hLo),e(Ke,uLo),e(Ke,u2),e(u2,pLo),e(u2,Jde),e(Jde,_Lo),e(u2,bLo),e(u2,Yde),e(Yde,FLo),e(Ke,vLo),M(p2,Ke,null),b(m,eIe,_),b(m,Ii,_),e(Ii,_2),e(_2,Kde),M(zy,Kde,null),e(Ii,TLo),e(Ii,Zde),e(Zde,MLo),b(m,oIe,_),b(m,Ro,_),M(Qy,Ro,null),e(Ro,ELo),e(Ro,qi),e(qi,CLo),e(qi,tD),e(tD,wLo),e(qi,ALo),e(qi,aD),e(aD,yLo),e(qi,LLo),e(Ro,xLo),e(Ro,Wy),e(Wy,$Lo),e(Wy,ece),e(ece,kLo),e(Wy,SLo),e(Ro,RLo),e(Ro,st),M(Hy,st,null),e(st,BLo),e(st,oce),e(oce,PLo),e(st,ILo),e(st,Ni),e(Ni,qLo),e(Ni,rce),e(rce,NLo),e(Ni,jLo),e(Ni,nD),e(nD,DLo),e(Ni,GLo),e(st,OLo),M(b2,st,null),e(Ro,VLo),e(Ro,Ze),M(Uy,Ze,null),e(Ze,XLo),e(Ze,tce),e(tce,zLo),e(Ze,QLo),e(Ze,ka),e(ka,WLo),e(ka,ace),e(ace,HLo),e(ka,ULo),e(ka,nce),e(nce,JLo),e(ka,YLo),e(ka,sce),e(sce,KLo),e(ka,ZLo),e(Ze,e8o),e(Ze,q),e(q,F2),e(F2,lce),e(lce,o8o),e(F2,r8o),e(F2,sD),e(sD,t8o),e(F2,a8o),e(q,n8o),e(q,v2),e(v2,ice),e(ice,s8o),e(v2,l8o),e(v2,lD),e(lD,i8o),e(v2,d8o),e(q,c8o),e(q,T2),e(T2,dce),e(dce,m8o),e(T2,f8o),e(T2,iD),e(iD,g8o),e(T2,h8o),e(q,u8o),e(q,M2),e(M2,cce),e(cce,p8o),e(M2,_8o),e(M2,dD),e(dD,b8o),e(M2,F8o),e(q,v8o),e(q,E2),e(E2,mce),e(mce,T8o),e(E2,M8o),e(E2,cD),e(cD,E8o),e(E2,C8o),e(q,w8o),e(q,C2),e(C2,fce),e(fce,A8o),e(C2,y8o),e(C2,mD),e(mD,L8o),e(C2,x8o),e(q,$8o),e(q,w2),e(w2,gce),e(gce,k8o),e(w2,S8o),e(w2,fD),e(fD,R8o),e(w2,B8o),e(q,P8o),e(q,A2),e(A2,hce),e(hce,I8o),e(A2,q8o),e(A2,gD),e(gD,N8o),e(A2,j8o),e(q,D8o),e(q,y2),e(y2,uce),e(uce,G8o),e(y2,O8o),e(y2,hD),e(hD,V8o),e(y2,X8o),e(q,z8o),e(q,L2),e(L2,pce),e(pce,Q8o),e(L2,W8o),e(L2,uD),e(uD,H8o),e(L2,U8o),e(q,J8o),e(q,x2),e(x2,_ce),e(_ce,Y8o),e(x2,K8o),e(x2,pD),e(pD,Z8o),e(x2,exo),e(q,oxo),e(q,$2),e($2,bce),e(bce,rxo),e($2,txo),e($2,_D),e(_D,axo),e($2,nxo),e(q,sxo),e(q,k2),e(k2,Fce),e(Fce,lxo),e(k2,ixo),e(k2,bD),e(bD,dxo),e(k2,cxo),e(q,mxo),e(q,S2),e(S2,vce),e(vce,fxo),e(S2,gxo),e(S2,FD),e(FD,hxo),e(S2,uxo),e(q,pxo),e(q,R2),e(R2,Tce),e(Tce,_xo),e(R2,bxo),e(R2,vD),e(vD,Fxo),e(R2,vxo),e(q,Txo),e(q,B2),e(B2,Mce),e(Mce,Mxo),e(B2,Exo),e(B2,TD),e(TD,Cxo),e(B2,wxo),e(q,Axo),e(q,P2),e(P2,Ece),e(Ece,yxo),e(P2,Lxo),e(P2,MD),e(MD,xxo),e(P2,$xo),e(q,kxo),e(q,I2),e(I2,Cce),e(Cce,Sxo),e(I2,Rxo),e(I2,ED),e(ED,Bxo),e(I2,Pxo),e(q,Ixo),e(q,q2),e(q2,wce),e(wce,qxo),e(q2,Nxo),e(q2,CD),e(CD,jxo),e(q2,Dxo),e(q,Gxo),e(q,N2),e(N2,Ace),e(Ace,Oxo),e(N2,Vxo),e(N2,wD),e(wD,Xxo),e(N2,zxo),e(q,Qxo),e(q,j2),e(j2,yce),e(yce,Wxo),e(j2,Hxo),e(j2,AD),e(AD,Uxo),e(j2,Jxo),e(q,Yxo),e(q,D2),e(D2,Lce),e(Lce,Kxo),e(D2,Zxo),e(D2,yD),e(yD,e7o),e(D2,o7o),e(q,r7o),e(q,G2),e(G2,xce),e(xce,t7o),e(G2,a7o),e(G2,LD),e(LD,n7o),e(G2,s7o),e(q,l7o),e(q,O2),e(O2,$ce),e($ce,i7o),e(O2,d7o),e(O2,xD),e(xD,c7o),e(O2,m7o),e(q,f7o),e(q,V2),e(V2,kce),e(kce,g7o),e(V2,h7o),e(V2,$D),e($D,u7o),e(V2,p7o),e(q,_7o),e(q,X2),e(X2,Sce),e(Sce,b7o),e(X2,F7o),e(X2,kD),e(kD,v7o),e(X2,T7o),e(q,M7o),e(q,z2),e(z2,Rce),e(Rce,E7o),e(z2,C7o),e(z2,SD),e(SD,w7o),e(z2,A7o),e(q,y7o),e(q,Q2),e(Q2,Bce),e(Bce,L7o),e(Q2,x7o),e(Q2,RD),e(RD,$7o),e(Q2,k7o),e(q,S7o),e(q,W2),e(W2,Pce),e(Pce,R7o),e(W2,B7o),e(W2,BD),e(BD,P7o),e(W2,I7o),e(q,q7o),e(q,H2),e(H2,Ice),e(Ice,N7o),e(H2,j7o),e(H2,PD),e(PD,D7o),e(H2,G7o),e(q,O7o),e(q,U2),e(U2,qce),e(qce,V7o),e(U2,X7o),e(U2,ID),e(ID,z7o),e(U2,Q7o),e(q,W7o),e(q,J2),e(J2,Nce),e(Nce,H7o),e(J2,U7o),e(J2,qD),e(qD,J7o),e(J2,Y7o),e(q,K7o),e(q,Y2),e(Y2,jce),e(jce,Z7o),e(Y2,e9o),e(Y2,ND),e(ND,o9o),e(Y2,r9o),e(q,t9o),e(q,K2),e(K2,Dce),e(Dce,a9o),e(K2,n9o),e(K2,jD),e(jD,s9o),e(K2,l9o),e(q,i9o),e(q,Z2),e(Z2,Gce),e(Gce,d9o),e(Z2,c9o),e(Z2,DD),e(DD,m9o),e(Z2,f9o),e(q,g9o),e(q,eF),e(eF,Oce),e(Oce,h9o),e(eF,u9o),e(eF,GD),e(GD,p9o),e(eF,_9o),e(q,b9o),e(q,oF),e(oF,Vce),e(Vce,F9o),e(oF,v9o),e(oF,OD),e(OD,T9o),e(oF,M9o),e(q,E9o),e(q,rF),e(rF,Xce),e(Xce,C9o),e(rF,w9o),e(rF,VD),e(VD,A9o),e(rF,y9o),e(q,L9o),e(q,tF),e(tF,zce),e(zce,x9o),e(tF,$9o),e(tF,XD),e(XD,k9o),e(tF,S9o),e(q,R9o),e(q,aF),e(aF,Qce),e(Qce,B9o),e(aF,P9o),e(aF,zD),e(zD,I9o),e(aF,q9o),e(q,N9o),e(q,nF),e(nF,Wce),e(Wce,j9o),e(nF,D9o),e(nF,QD),e(QD,G9o),e(nF,O9o),e(q,V9o),e(q,sF),e(sF,Hce),e(Hce,X9o),e(sF,z9o),e(sF,WD),e(WD,Q9o),e(sF,W9o),e(q,H9o),e(q,lF),e(lF,Uce),e(Uce,U9o),e(lF,J9o),e(lF,HD),e(HD,Y9o),e(lF,K9o),e(q,Z9o),e(q,iF),e(iF,Jce),e(Jce,e$o),e(iF,o$o),e(iF,UD),e(UD,r$o),e(iF,t$o),e(q,a$o),e(q,dF),e(dF,Yce),e(Yce,n$o),e(dF,s$o),e(dF,JD),e(JD,l$o),e(dF,i$o),e(q,d$o),e(q,cF),e(cF,Kce),e(Kce,c$o),e(cF,m$o),e(cF,YD),e(YD,f$o),e(cF,g$o),e(Ze,h$o),e(Ze,mF),e(mF,u$o),e(mF,Zce),e(Zce,p$o),e(mF,_$o),e(mF,eme),e(eme,b$o),e(Ze,F$o),M(fF,Ze,null),b(m,rIe,_),b(m,ji,_),e(ji,gF),e(gF,ome),M(Jy,ome,null),e(ji,v$o),e(ji,rme),e(rme,T$o),b(m,tIe,_),b(m,Bo,_),M(Yy,Bo,null),e(Bo,M$o),e(Bo,Di),e(Di,E$o),e(Di,KD),e(KD,C$o),e(Di,w$o),e(Di,ZD),e(ZD,A$o),e(Di,y$o),e(Bo,L$o),e(Bo,Ky),e(Ky,x$o),e(Ky,tme),e(tme,$$o),e(Ky,k$o),e(Bo,S$o),e(Bo,lt),M(Zy,lt,null),e(lt,R$o),e(lt,ame),e(ame,B$o),e(lt,P$o),e(lt,Gi),e(Gi,I$o),e(Gi,nme),e(nme,q$o),e(Gi,N$o),e(Gi,eG),e(eG,j$o),e(Gi,D$o),e(lt,G$o),M(hF,lt,null),e(Bo,O$o),e(Bo,eo),M(eL,eo,null),e(eo,V$o),e(eo,sme),e(sme,X$o),e(eo,z$o),e(eo,Sa),e(Sa,Q$o),e(Sa,lme),e(lme,W$o),e(Sa,H$o),e(Sa,ime),e(ime,U$o),e(Sa,J$o),e(Sa,dme),e(dme,Y$o),e(Sa,K$o),e(eo,Z$o),e(eo,Y),e(Y,uF),e(uF,cme),e(cme,eko),e(uF,oko),e(uF,oG),e(oG,rko),e(uF,tko),e(Y,ako),e(Y,pF),e(pF,mme),e(mme,nko),e(pF,sko),e(pF,rG),e(rG,lko),e(pF,iko),e(Y,dko),e(Y,_F),e(_F,fme),e(fme,cko),e(_F,mko),e(_F,tG),e(tG,fko),e(_F,gko),e(Y,hko),e(Y,bF),e(bF,gme),e(gme,uko),e(bF,pko),e(bF,aG),e(aG,_ko),e(bF,bko),e(Y,Fko),e(Y,FF),e(FF,hme),e(hme,vko),e(FF,Tko),e(FF,nG),e(nG,Mko),e(FF,Eko),e(Y,Cko),e(Y,vF),e(vF,ume),e(ume,wko),e(vF,Ako),e(vF,sG),e(sG,yko),e(vF,Lko),e(Y,xko),e(Y,TF),e(TF,pme),e(pme,$ko),e(TF,kko),e(TF,lG),e(lG,Sko),e(TF,Rko),e(Y,Bko),e(Y,MF),e(MF,_me),e(_me,Pko),e(MF,Iko),e(MF,iG),e(iG,qko),e(MF,Nko),e(Y,jko),e(Y,EF),e(EF,bme),e(bme,Dko),e(EF,Gko),e(EF,dG),e(dG,Oko),e(EF,Vko),e(Y,Xko),e(Y,CF),e(CF,Fme),e(Fme,zko),e(CF,Qko),e(CF,cG),e(cG,Wko),e(CF,Hko),e(Y,Uko),e(Y,wF),e(wF,vme),e(vme,Jko),e(wF,Yko),e(wF,mG),e(mG,Kko),e(wF,Zko),e(Y,eSo),e(Y,AF),e(AF,Tme),e(Tme,oSo),e(AF,rSo),e(AF,fG),e(fG,tSo),e(AF,aSo),e(Y,nSo),e(Y,yF),e(yF,Mme),e(Mme,sSo),e(yF,lSo),e(yF,gG),e(gG,iSo),e(yF,dSo),e(Y,cSo),e(Y,LF),e(LF,Eme),e(Eme,mSo),e(LF,fSo),e(LF,hG),e(hG,gSo),e(LF,hSo),e(Y,uSo),e(Y,xF),e(xF,Cme),e(Cme,pSo),e(xF,_So),e(xF,uG),e(uG,bSo),e(xF,FSo),e(Y,vSo),e(Y,$F),e($F,wme),e(wme,TSo),e($F,MSo),e($F,pG),e(pG,ESo),e($F,CSo),e(Y,wSo),e(Y,kF),e(kF,Ame),e(Ame,ASo),e(kF,ySo),e(kF,_G),e(_G,LSo),e(kF,xSo),e(Y,$So),e(Y,SF),e(SF,yme),e(yme,kSo),e(SF,SSo),e(SF,bG),e(bG,RSo),e(SF,BSo),e(Y,PSo),e(Y,RF),e(RF,Lme),e(Lme,ISo),e(RF,qSo),e(RF,FG),e(FG,NSo),e(RF,jSo),e(Y,DSo),e(Y,BF),e(BF,xme),e(xme,GSo),e(BF,OSo),e(BF,vG),e(vG,VSo),e(BF,XSo),e(Y,zSo),e(Y,PF),e(PF,$me),e($me,QSo),e(PF,WSo),e(PF,TG),e(TG,HSo),e(PF,USo),e(Y,JSo),e(Y,IF),e(IF,kme),e(kme,YSo),e(IF,KSo),e(IF,MG),e(MG,ZSo),e(IF,eRo),e(Y,oRo),e(Y,qF),e(qF,Sme),e(Sme,rRo),e(qF,tRo),e(qF,EG),e(EG,aRo),e(qF,nRo),e(Y,sRo),e(Y,NF),e(NF,Rme),e(Rme,lRo),e(NF,iRo),e(NF,CG),e(CG,dRo),e(NF,cRo),e(Y,mRo),e(Y,jF),e(jF,Bme),e(Bme,fRo),e(jF,gRo),e(jF,wG),e(wG,hRo),e(jF,uRo),e(Y,pRo),e(Y,DF),e(DF,Pme),e(Pme,_Ro),e(DF,bRo),e(DF,AG),e(AG,FRo),e(DF,vRo),e(Y,TRo),e(Y,GF),e(GF,Ime),e(Ime,MRo),e(GF,ERo),e(GF,yG),e(yG,CRo),e(GF,wRo),e(Y,ARo),e(Y,OF),e(OF,qme),e(qme,yRo),e(OF,LRo),e(OF,LG),e(LG,xRo),e(OF,$Ro),e(Y,kRo),e(Y,VF),e(VF,Nme),e(Nme,SRo),e(VF,RRo),e(VF,xG),e(xG,BRo),e(VF,PRo),e(eo,IRo),e(eo,XF),e(XF,qRo),e(XF,jme),e(jme,NRo),e(XF,jRo),e(XF,Dme),e(Dme,DRo),e(eo,GRo),M(zF,eo,null),b(m,aIe,_),b(m,Oi,_),e(Oi,QF),e(QF,Gme),M(oL,Gme,null),e(Oi,ORo),e(Oi,Ome),e(Ome,VRo),b(m,nIe,_),b(m,Po,_),M(rL,Po,null),e(Po,XRo),e(Po,Vi),e(Vi,zRo),e(Vi,$G),e($G,QRo),e(Vi,WRo),e(Vi,kG),e(kG,HRo),e(Vi,URo),e(Po,JRo),e(Po,tL),e(tL,YRo),e(tL,Vme),e(Vme,KRo),e(tL,ZRo),e(Po,eBo),e(Po,it),M(aL,it,null),e(it,oBo),e(it,Xme),e(Xme,rBo),e(it,tBo),e(it,Xi),e(Xi,aBo),e(Xi,zme),e(zme,nBo),e(Xi,sBo),e(Xi,SG),e(SG,lBo),e(Xi,iBo),e(it,dBo),M(WF,it,null),e(Po,cBo),e(Po,oo),M(nL,oo,null),e(oo,mBo),e(oo,Qme),e(Qme,fBo),e(oo,gBo),e(oo,Ra),e(Ra,hBo),e(Ra,Wme),e(Wme,uBo),e(Ra,pBo),e(Ra,Hme),e(Hme,_Bo),e(Ra,bBo),e(Ra,Ume),e(Ume,FBo),e(Ra,vBo),e(oo,TBo),e(oo,Yr),e(Yr,HF),e(HF,Jme),e(Jme,MBo),e(HF,EBo),e(HF,RG),e(RG,CBo),e(HF,wBo),e(Yr,ABo),e(Yr,UF),e(UF,Yme),e(Yme,yBo),e(UF,LBo),e(UF,BG),e(BG,xBo),e(UF,$Bo),e(Yr,kBo),e(Yr,JF),e(JF,Kme),e(Kme,SBo),e(JF,RBo),e(JF,PG),e(PG,BBo),e(JF,PBo),e(Yr,IBo),e(Yr,YF),e(YF,Zme),e(Zme,qBo),e(YF,NBo),e(YF,IG),e(IG,jBo),e(YF,DBo),e(Yr,GBo),e(Yr,KF),e(KF,efe),e(efe,OBo),e(KF,VBo),e(KF,qG),e(qG,XBo),e(KF,zBo),e(oo,QBo),e(oo,ZF),e(ZF,WBo),e(ZF,ofe),e(ofe,HBo),e(ZF,UBo),e(ZF,rfe),e(rfe,JBo),e(oo,YBo),M(ev,oo,null),b(m,sIe,_),b(m,zi,_),e(zi,ov),e(ov,tfe),M(sL,tfe,null),e(zi,KBo),e(zi,afe),e(afe,ZBo),b(m,lIe,_),b(m,Io,_),M(lL,Io,null),e(Io,ePo),e(Io,Qi),e(Qi,oPo),e(Qi,NG),e(NG,rPo),e(Qi,tPo),e(Qi,jG),e(jG,aPo),e(Qi,nPo),e(Io,sPo),e(Io,iL),e(iL,lPo),e(iL,nfe),e(nfe,iPo),e(iL,dPo),e(Io,cPo),e(Io,dt),M(dL,dt,null),e(dt,mPo),e(dt,sfe),e(sfe,fPo),e(dt,gPo),e(dt,Wi),e(Wi,hPo),e(Wi,lfe),e(lfe,uPo),e(Wi,pPo),e(Wi,DG),e(DG,_Po),e(Wi,bPo),e(dt,FPo),M(rv,dt,null),e(Io,vPo),e(Io,ro),M(cL,ro,null),e(ro,TPo),e(ro,ife),e(ife,MPo),e(ro,EPo),e(ro,Ba),e(Ba,CPo),e(Ba,dfe),e(dfe,wPo),e(Ba,APo),e(Ba,cfe),e(cfe,yPo),e(Ba,LPo),e(Ba,mfe),e(mfe,xPo),e(Ba,$Po),e(ro,kPo),e(ro,U),e(U,tv),e(tv,ffe),e(ffe,SPo),e(tv,RPo),e(tv,GG),e(GG,BPo),e(tv,PPo),e(U,IPo),e(U,av),e(av,gfe),e(gfe,qPo),e(av,NPo),e(av,OG),e(OG,jPo),e(av,DPo),e(U,GPo),e(U,nv),e(nv,hfe),e(hfe,OPo),e(nv,VPo),e(nv,VG),e(VG,XPo),e(nv,zPo),e(U,QPo),e(U,sv),e(sv,ufe),e(ufe,WPo),e(sv,HPo),e(sv,XG),e(XG,UPo),e(sv,JPo),e(U,YPo),e(U,lv),e(lv,pfe),e(pfe,KPo),e(lv,ZPo),e(lv,zG),e(zG,eIo),e(lv,oIo),e(U,rIo),e(U,iv),e(iv,_fe),e(_fe,tIo),e(iv,aIo),e(iv,QG),e(QG,nIo),e(iv,sIo),e(U,lIo),e(U,dv),e(dv,bfe),e(bfe,iIo),e(dv,dIo),e(dv,WG),e(WG,cIo),e(dv,mIo),e(U,fIo),e(U,cv),e(cv,Ffe),e(Ffe,gIo),e(cv,hIo),e(cv,HG),e(HG,uIo),e(cv,pIo),e(U,_Io),e(U,mv),e(mv,vfe),e(vfe,bIo),e(mv,FIo),e(mv,UG),e(UG,vIo),e(mv,TIo),e(U,MIo),e(U,fv),e(fv,Tfe),e(Tfe,EIo),e(fv,CIo),e(fv,JG),e(JG,wIo),e(fv,AIo),e(U,yIo),e(U,gv),e(gv,Mfe),e(Mfe,LIo),e(gv,xIo),e(gv,YG),e(YG,$Io),e(gv,kIo),e(U,SIo),e(U,hv),e(hv,Efe),e(Efe,RIo),e(hv,BIo),e(hv,KG),e(KG,PIo),e(hv,IIo),e(U,qIo),e(U,uv),e(uv,Cfe),e(Cfe,NIo),e(uv,jIo),e(uv,ZG),e(ZG,DIo),e(uv,GIo),e(U,OIo),e(U,pv),e(pv,wfe),e(wfe,VIo),e(pv,XIo),e(pv,eO),e(eO,zIo),e(pv,QIo),e(U,WIo),e(U,_v),e(_v,Afe),e(Afe,HIo),e(_v,UIo),e(_v,oO),e(oO,JIo),e(_v,YIo),e(U,KIo),e(U,bv),e(bv,yfe),e(yfe,ZIo),e(bv,eqo),e(bv,rO),e(rO,oqo),e(bv,rqo),e(U,tqo),e(U,Fv),e(Fv,Lfe),e(Lfe,aqo),e(Fv,nqo),e(Fv,tO),e(tO,sqo),e(Fv,lqo),e(U,iqo),e(U,vv),e(vv,xfe),e(xfe,dqo),e(vv,cqo),e(vv,aO),e(aO,mqo),e(vv,fqo),e(U,gqo),e(U,Tv),e(Tv,$fe),e($fe,hqo),e(Tv,uqo),e(Tv,nO),e(nO,pqo),e(Tv,_qo),e(U,bqo),e(U,Mv),e(Mv,kfe),e(kfe,Fqo),e(Mv,vqo),e(Mv,sO),e(sO,Tqo),e(Mv,Mqo),e(U,Eqo),e(U,Ev),e(Ev,Sfe),e(Sfe,Cqo),e(Ev,wqo),e(Ev,lO),e(lO,Aqo),e(Ev,yqo),e(U,Lqo),e(U,Cv),e(Cv,Rfe),e(Rfe,xqo),e(Cv,$qo),e(Cv,iO),e(iO,kqo),e(Cv,Sqo),e(U,Rqo),e(U,wv),e(wv,Bfe),e(Bfe,Bqo),e(wv,Pqo),e(wv,dO),e(dO,Iqo),e(wv,qqo),e(U,Nqo),e(U,Av),e(Av,Pfe),e(Pfe,jqo),e(Av,Dqo),e(Av,cO),e(cO,Gqo),e(Av,Oqo),e(U,Vqo),e(U,yv),e(yv,Ife),e(Ife,Xqo),e(yv,zqo),e(yv,mO),e(mO,Qqo),e(yv,Wqo),e(U,Hqo),e(U,Lv),e(Lv,qfe),e(qfe,Uqo),e(Lv,Jqo),e(Lv,fO),e(fO,Yqo),e(Lv,Kqo),e(U,Zqo),e(U,xv),e(xv,Nfe),e(Nfe,eNo),e(xv,oNo),e(xv,gO),e(gO,rNo),e(xv,tNo),e(U,aNo),e(U,$v),e($v,jfe),e(jfe,nNo),e($v,sNo),e($v,hO),e(hO,lNo),e($v,iNo),e(U,dNo),e(U,kv),e(kv,Dfe),e(Dfe,cNo),e(kv,mNo),e(kv,uO),e(uO,fNo),e(kv,gNo),e(U,hNo),e(U,Sv),e(Sv,Gfe),e(Gfe,uNo),e(Sv,pNo),e(Sv,pO),e(pO,_No),e(Sv,bNo),e(U,FNo),e(U,Rv),e(Rv,Ofe),e(Ofe,vNo),e(Rv,TNo),e(Rv,_O),e(_O,MNo),e(Rv,ENo),e(U,CNo),e(U,Bv),e(Bv,Vfe),e(Vfe,wNo),e(Bv,ANo),e(Bv,bO),e(bO,yNo),e(Bv,LNo),e(U,xNo),e(U,Pv),e(Pv,Xfe),e(Xfe,$No),e(Pv,kNo),e(Pv,FO),e(FO,SNo),e(Pv,RNo),e(ro,BNo),e(ro,Iv),e(Iv,PNo),e(Iv,zfe),e(zfe,INo),e(Iv,qNo),e(Iv,Qfe),e(Qfe,NNo),e(ro,jNo),M(qv,ro,null),b(m,iIe,_),b(m,Hi,_),e(Hi,Nv),e(Nv,Wfe),M(mL,Wfe,null),e(Hi,DNo),e(Hi,Hfe),e(Hfe,GNo),b(m,dIe,_),b(m,qo,_),M(fL,qo,null),e(qo,ONo),e(qo,Ui),e(Ui,VNo),e(Ui,vO),e(vO,XNo),e(Ui,zNo),e(Ui,TO),e(TO,QNo),e(Ui,WNo),e(qo,HNo),e(qo,gL),e(gL,UNo),e(gL,Ufe),e(Ufe,JNo),e(gL,YNo),e(qo,KNo),e(qo,ct),M(hL,ct,null),e(ct,ZNo),e(ct,Jfe),e(Jfe,ejo),e(ct,ojo),e(ct,Ji),e(Ji,rjo),e(Ji,Yfe),e(Yfe,tjo),e(Ji,ajo),e(Ji,MO),e(MO,njo),e(Ji,sjo),e(ct,ljo),M(jv,ct,null),e(qo,ijo),e(qo,to),M(uL,to,null),e(to,djo),e(to,Kfe),e(Kfe,cjo),e(to,mjo),e(to,Pa),e(Pa,fjo),e(Pa,Zfe),e(Zfe,gjo),e(Pa,hjo),e(Pa,ege),e(ege,ujo),e(Pa,pjo),e(Pa,oge),e(oge,_jo),e(Pa,bjo),e(to,Fjo),e(to,O),e(O,Dv),e(Dv,rge),e(rge,vjo),e(Dv,Tjo),e(Dv,EO),e(EO,Mjo),e(Dv,Ejo),e(O,Cjo),e(O,Gv),e(Gv,tge),e(tge,wjo),e(Gv,Ajo),e(Gv,CO),e(CO,yjo),e(Gv,Ljo),e(O,xjo),e(O,Ov),e(Ov,age),e(age,$jo),e(Ov,kjo),e(Ov,wO),e(wO,Sjo),e(Ov,Rjo),e(O,Bjo),e(O,Vv),e(Vv,nge),e(nge,Pjo),e(Vv,Ijo),e(Vv,AO),e(AO,qjo),e(Vv,Njo),e(O,jjo),e(O,Xv),e(Xv,sge),e(sge,Djo),e(Xv,Gjo),e(Xv,yO),e(yO,Ojo),e(Xv,Vjo),e(O,Xjo),e(O,zv),e(zv,lge),e(lge,zjo),e(zv,Qjo),e(zv,LO),e(LO,Wjo),e(zv,Hjo),e(O,Ujo),e(O,Qv),e(Qv,ige),e(ige,Jjo),e(Qv,Yjo),e(Qv,xO),e(xO,Kjo),e(Qv,Zjo),e(O,eDo),e(O,Wv),e(Wv,dge),e(dge,oDo),e(Wv,rDo),e(Wv,$O),e($O,tDo),e(Wv,aDo),e(O,nDo),e(O,Hv),e(Hv,cge),e(cge,sDo),e(Hv,lDo),e(Hv,kO),e(kO,iDo),e(Hv,dDo),e(O,cDo),e(O,Uv),e(Uv,mge),e(mge,mDo),e(Uv,fDo),e(Uv,SO),e(SO,gDo),e(Uv,hDo),e(O,uDo),e(O,Jv),e(Jv,fge),e(fge,pDo),e(Jv,_Do),e(Jv,RO),e(RO,bDo),e(Jv,FDo),e(O,vDo),e(O,Yv),e(Yv,gge),e(gge,TDo),e(Yv,MDo),e(Yv,BO),e(BO,EDo),e(Yv,CDo),e(O,wDo),e(O,Kv),e(Kv,hge),e(hge,ADo),e(Kv,yDo),e(Kv,PO),e(PO,LDo),e(Kv,xDo),e(O,$Do),e(O,Zv),e(Zv,uge),e(uge,kDo),e(Zv,SDo),e(Zv,IO),e(IO,RDo),e(Zv,BDo),e(O,PDo),e(O,e1),e(e1,pge),e(pge,IDo),e(e1,qDo),e(e1,qO),e(qO,NDo),e(e1,jDo),e(O,DDo),e(O,o1),e(o1,_ge),e(_ge,GDo),e(o1,ODo),e(o1,NO),e(NO,VDo),e(o1,XDo),e(O,zDo),e(O,r1),e(r1,bge),e(bge,QDo),e(r1,WDo),e(r1,jO),e(jO,HDo),e(r1,UDo),e(O,JDo),e(O,t1),e(t1,Fge),e(Fge,YDo),e(t1,KDo),e(t1,DO),e(DO,ZDo),e(t1,eGo),e(O,oGo),e(O,a1),e(a1,vge),e(vge,rGo),e(a1,tGo),e(a1,GO),e(GO,aGo),e(a1,nGo),e(O,sGo),e(O,n1),e(n1,Tge),e(Tge,lGo),e(n1,iGo),e(n1,OO),e(OO,dGo),e(n1,cGo),e(O,mGo),e(O,s1),e(s1,Mge),e(Mge,fGo),e(s1,gGo),e(s1,VO),e(VO,hGo),e(s1,uGo),e(O,pGo),e(O,l1),e(l1,Ege),e(Ege,_Go),e(l1,bGo),e(l1,XO),e(XO,FGo),e(l1,vGo),e(O,TGo),e(O,i1),e(i1,Cge),e(Cge,MGo),e(i1,EGo),e(i1,zO),e(zO,CGo),e(i1,wGo),e(O,AGo),e(O,d1),e(d1,wge),e(wge,yGo),e(d1,LGo),e(d1,QO),e(QO,xGo),e(d1,$Go),e(O,kGo),e(O,c1),e(c1,Age),e(Age,SGo),e(c1,RGo),e(c1,WO),e(WO,BGo),e(c1,PGo),e(O,IGo),e(O,m1),e(m1,yge),e(yge,qGo),e(m1,NGo),e(m1,HO),e(HO,jGo),e(m1,DGo),e(O,GGo),e(O,f1),e(f1,Lge),e(Lge,OGo),e(f1,VGo),e(f1,UO),e(UO,XGo),e(f1,zGo),e(O,QGo),e(O,g1),e(g1,xge),e(xge,WGo),e(g1,HGo),e(g1,JO),e(JO,UGo),e(g1,JGo),e(O,YGo),e(O,h1),e(h1,$ge),e($ge,KGo),e(h1,ZGo),e(h1,YO),e(YO,eOo),e(h1,oOo),e(O,rOo),e(O,u1),e(u1,kge),e(kge,tOo),e(u1,aOo),e(u1,KO),e(KO,nOo),e(u1,sOo),e(O,lOo),e(O,p1),e(p1,Sge),e(Sge,iOo),e(p1,dOo),e(p1,ZO),e(ZO,cOo),e(p1,mOo),e(O,fOo),e(O,_1),e(_1,Rge),e(Rge,gOo),e(_1,hOo),e(_1,eV),e(eV,uOo),e(_1,pOo),e(O,_Oo),e(O,b1),e(b1,Bge),e(Bge,bOo),e(b1,FOo),e(b1,oV),e(oV,vOo),e(b1,TOo),e(O,MOo),e(O,F1),e(F1,Pge),e(Pge,EOo),e(F1,COo),e(F1,rV),e(rV,wOo),e(F1,AOo),e(O,yOo),e(O,v1),e(v1,Ige),e(Ige,LOo),e(v1,xOo),e(v1,tV),e(tV,$Oo),e(v1,kOo),e(O,SOo),e(O,T1),e(T1,qge),e(qge,ROo),e(T1,BOo),e(T1,aV),e(aV,POo),e(T1,IOo),e(O,qOo),e(O,M1),e(M1,Nge),e(Nge,NOo),e(M1,jOo),e(M1,nV),e(nV,DOo),e(M1,GOo),e(O,OOo),e(O,E1),e(E1,jge),e(jge,VOo),e(E1,XOo),e(E1,sV),e(sV,zOo),e(E1,QOo),e(O,WOo),e(O,C1),e(C1,Dge),e(Dge,HOo),e(C1,UOo),e(C1,lV),e(lV,JOo),e(C1,YOo),e(to,KOo),e(to,w1),e(w1,ZOo),e(w1,Gge),e(Gge,eVo),e(w1,oVo),e(w1,Oge),e(Oge,rVo),e(to,tVo),M(A1,to,null),b(m,cIe,_),b(m,Yi,_),e(Yi,y1),e(y1,Vge),M(pL,Vge,null),e(Yi,aVo),e(Yi,Xge),e(Xge,nVo),b(m,mIe,_),b(m,No,_),M(_L,No,null),e(No,sVo),e(No,Ki),e(Ki,lVo),e(Ki,iV),e(iV,iVo),e(Ki,dVo),e(Ki,dV),e(dV,cVo),e(Ki,mVo),e(No,fVo),e(No,bL),e(bL,gVo),e(bL,zge),e(zge,hVo),e(bL,uVo),e(No,pVo),e(No,mt),M(FL,mt,null),e(mt,_Vo),e(mt,Qge),e(Qge,bVo),e(mt,FVo),e(mt,Zi),e(Zi,vVo),e(Zi,Wge),e(Wge,TVo),e(Zi,MVo),e(Zi,cV),e(cV,EVo),e(Zi,CVo),e(mt,wVo),M(L1,mt,null),e(No,AVo),e(No,ao),M(vL,ao,null),e(ao,yVo),e(ao,Hge),e(Hge,LVo),e(ao,xVo),e(ao,Ia),e(Ia,$Vo),e(Ia,Uge),e(Uge,kVo),e(Ia,SVo),e(Ia,Jge),e(Jge,RVo),e(Ia,BVo),e(Ia,Yge),e(Yge,PVo),e(Ia,IVo),e(ao,qVo),e(ao,Kge),e(Kge,x1),e(x1,Zge),e(Zge,NVo),e(x1,jVo),e(x1,mV),e(mV,DVo),e(x1,GVo),e(ao,OVo),e(ao,$1),e($1,VVo),e($1,ehe),e(ehe,XVo),e($1,zVo),e($1,ohe),e(ohe,QVo),e(ao,WVo),M(k1,ao,null),b(m,fIe,_),b(m,ed,_),e(ed,S1),e(S1,rhe),M(TL,rhe,null),e(ed,HVo),e(ed,the),e(the,UVo),b(m,gIe,_),b(m,jo,_),M(ML,jo,null),e(jo,JVo),e(jo,od),e(od,YVo),e(od,fV),e(fV,KVo),e(od,ZVo),e(od,gV),e(gV,eXo),e(od,oXo),e(jo,rXo),e(jo,EL),e(EL,tXo),e(EL,ahe),e(ahe,aXo),e(EL,nXo),e(jo,sXo),e(jo,ft),M(CL,ft,null),e(ft,lXo),e(ft,nhe),e(nhe,iXo),e(ft,dXo),e(ft,rd),e(rd,cXo),e(rd,she),e(she,mXo),e(rd,fXo),e(rd,hV),e(hV,gXo),e(rd,hXo),e(ft,uXo),M(R1,ft,null),e(jo,pXo),e(jo,no),M(wL,no,null),e(no,_Xo),e(no,lhe),e(lhe,bXo),e(no,FXo),e(no,qa),e(qa,vXo),e(qa,ihe),e(ihe,TXo),e(qa,MXo),e(qa,dhe),e(dhe,EXo),e(qa,CXo),e(qa,che),e(che,wXo),e(qa,AXo),e(no,yXo),e(no,ve),e(ve,B1),e(B1,mhe),e(mhe,LXo),e(B1,xXo),e(B1,uV),e(uV,$Xo),e(B1,kXo),e(ve,SXo),e(ve,P1),e(P1,fhe),e(fhe,RXo),e(P1,BXo),e(P1,pV),e(pV,PXo),e(P1,IXo),e(ve,qXo),e(ve,I1),e(I1,ghe),e(ghe,NXo),e(I1,jXo),e(I1,_V),e(_V,DXo),e(I1,GXo),e(ve,OXo),e(ve,Rs),e(Rs,hhe),e(hhe,VXo),e(Rs,XXo),e(Rs,bV),e(bV,zXo),e(Rs,QXo),e(Rs,FV),e(FV,WXo),e(Rs,HXo),e(ve,UXo),e(ve,q1),e(q1,uhe),e(uhe,JXo),e(q1,YXo),e(q1,vV),e(vV,KXo),e(q1,ZXo),e(ve,ezo),e(ve,gt),e(gt,phe),e(phe,ozo),e(gt,rzo),e(gt,TV),e(TV,tzo),e(gt,azo),e(gt,MV),e(MV,nzo),e(gt,szo),e(gt,EV),e(EV,lzo),e(gt,izo),e(ve,dzo),e(ve,N1),e(N1,_he),e(_he,czo),e(N1,mzo),e(N1,CV),e(CV,fzo),e(N1,gzo),e(ve,hzo),e(ve,j1),e(j1,bhe),e(bhe,uzo),e(j1,pzo),e(j1,wV),e(wV,_zo),e(j1,bzo),e(ve,Fzo),e(ve,D1),e(D1,Fhe),e(Fhe,vzo),e(D1,Tzo),e(D1,AV),e(AV,Mzo),e(D1,Ezo),e(ve,Czo),e(ve,G1),e(G1,vhe),e(vhe,wzo),e(G1,Azo),e(G1,yV),e(yV,yzo),e(G1,Lzo),e(ve,xzo),e(ve,O1),e(O1,The),e(The,$zo),e(O1,kzo),e(O1,LV),e(LV,Szo),e(O1,Rzo),e(ve,Bzo),e(ve,V1),e(V1,Mhe),e(Mhe,Pzo),e(V1,Izo),e(V1,xV),e(xV,qzo),e(V1,Nzo),e(ve,jzo),e(ve,X1),e(X1,Ehe),e(Ehe,Dzo),e(X1,Gzo),e(X1,$V),e($V,Ozo),e(X1,Vzo),e(no,Xzo),e(no,z1),e(z1,zzo),e(z1,Che),e(Che,Qzo),e(z1,Wzo),e(z1,whe),e(whe,Hzo),e(no,Uzo),M(Q1,no,null),b(m,hIe,_),b(m,td,_),e(td,W1),e(W1,Ahe),M(AL,Ahe,null),e(td,Jzo),e(td,yhe),e(yhe,Yzo),b(m,uIe,_),b(m,Do,_),M(yL,Do,null),e(Do,Kzo),e(Do,ad),e(ad,Zzo),e(ad,kV),e(kV,eQo),e(ad,oQo),e(ad,SV),e(SV,rQo),e(ad,tQo),e(Do,aQo),e(Do,LL),e(LL,nQo),e(LL,Lhe),e(Lhe,sQo),e(LL,lQo),e(Do,iQo),e(Do,ht),M(xL,ht,null),e(ht,dQo),e(ht,xhe),e(xhe,cQo),e(ht,mQo),e(ht,nd),e(nd,fQo),e(nd,$he),e($he,gQo),e(nd,hQo),e(nd,RV),e(RV,uQo),e(nd,pQo),e(ht,_Qo),M(H1,ht,null),e(Do,bQo),e(Do,so),M($L,so,null),e(so,FQo),e(so,khe),e(khe,vQo),e(so,TQo),e(so,Na),e(Na,MQo),e(Na,She),e(She,EQo),e(Na,CQo),e(Na,Rhe),e(Rhe,wQo),e(Na,AQo),e(Na,Bhe),e(Bhe,yQo),e(Na,LQo),e(so,xQo),e(so,Phe),e(Phe,U1),e(U1,Ihe),e(Ihe,$Qo),e(U1,kQo),e(U1,BV),e(BV,SQo),e(U1,RQo),e(so,BQo),e(so,J1),e(J1,PQo),e(J1,qhe),e(qhe,IQo),e(J1,qQo),e(J1,Nhe),e(Nhe,NQo),e(so,jQo),M(Y1,so,null),b(m,pIe,_),b(m,sd,_),e(sd,K1),e(K1,jhe),M(kL,jhe,null),e(sd,DQo),e(sd,Dhe),e(Dhe,GQo),b(m,_Ie,_),b(m,Go,_),M(SL,Go,null),e(Go,OQo),e(Go,ld),e(ld,VQo),e(ld,PV),e(PV,XQo),e(ld,zQo),e(ld,IV),e(IV,QQo),e(ld,WQo),e(Go,HQo),e(Go,RL),e(RL,UQo),e(RL,Ghe),e(Ghe,JQo),e(RL,YQo),e(Go,KQo),e(Go,ut),M(BL,ut,null),e(ut,ZQo),e(ut,Ohe),e(Ohe,eWo),e(ut,oWo),e(ut,id),e(id,rWo),e(id,Vhe),e(Vhe,tWo),e(id,aWo),e(id,qV),e(qV,nWo),e(id,sWo),e(ut,lWo),M(Z1,ut,null),e(Go,iWo),e(Go,lo),M(PL,lo,null),e(lo,dWo),e(lo,Xhe),e(Xhe,cWo),e(lo,mWo),e(lo,ja),e(ja,fWo),e(ja,zhe),e(zhe,gWo),e(ja,hWo),e(ja,Qhe),e(Qhe,uWo),e(ja,pWo),e(ja,Whe),e(Whe,_Wo),e(ja,bWo),e(lo,FWo),e(lo,Ne),e(Ne,eT),e(eT,Hhe),e(Hhe,vWo),e(eT,TWo),e(eT,NV),e(NV,MWo),e(eT,EWo),e(Ne,CWo),e(Ne,oT),e(oT,Uhe),e(Uhe,wWo),e(oT,AWo),e(oT,jV),e(jV,yWo),e(oT,LWo),e(Ne,xWo),e(Ne,rT),e(rT,Jhe),e(Jhe,$Wo),e(rT,kWo),e(rT,DV),e(DV,SWo),e(rT,RWo),e(Ne,BWo),e(Ne,tT),e(tT,Yhe),e(Yhe,PWo),e(tT,IWo),e(tT,GV),e(GV,qWo),e(tT,NWo),e(Ne,jWo),e(Ne,aT),e(aT,Khe),e(Khe,DWo),e(aT,GWo),e(aT,OV),e(OV,OWo),e(aT,VWo),e(Ne,XWo),e(Ne,nT),e(nT,Zhe),e(Zhe,zWo),e(nT,QWo),e(nT,VV),e(VV,WWo),e(nT,HWo),e(Ne,UWo),e(Ne,sT),e(sT,eue),e(eue,JWo),e(sT,YWo),e(sT,XV),e(XV,KWo),e(sT,ZWo),e(Ne,eHo),e(Ne,lT),e(lT,oue),e(oue,oHo),e(lT,rHo),e(lT,zV),e(zV,tHo),e(lT,aHo),e(lo,nHo),e(lo,iT),e(iT,sHo),e(iT,rue),e(rue,lHo),e(iT,iHo),e(iT,tue),e(tue,dHo),e(lo,cHo),M(dT,lo,null),b(m,bIe,_),b(m,dd,_),e(dd,cT),e(cT,aue),M(IL,aue,null),e(dd,mHo),e(dd,nue),e(nue,fHo),b(m,FIe,_),b(m,Oo,_),M(qL,Oo,null),e(Oo,gHo),e(Oo,cd),e(cd,hHo),e(cd,QV),e(QV,uHo),e(cd,pHo),e(cd,WV),e(WV,_Ho),e(cd,bHo),e(Oo,FHo),e(Oo,NL),e(NL,vHo),e(NL,sue),e(sue,THo),e(NL,MHo),e(Oo,EHo),e(Oo,pt),M(jL,pt,null),e(pt,CHo),e(pt,lue),e(lue,wHo),e(pt,AHo),e(pt,md),e(md,yHo),e(md,iue),e(iue,LHo),e(md,xHo),e(md,HV),e(HV,$Ho),e(md,kHo),e(pt,SHo),M(mT,pt,null),e(Oo,RHo),e(Oo,io),M(DL,io,null),e(io,BHo),e(io,due),e(due,PHo),e(io,IHo),e(io,Da),e(Da,qHo),e(Da,cue),e(cue,NHo),e(Da,jHo),e(Da,mue),e(mue,DHo),e(Da,GHo),e(Da,fue),e(fue,OHo),e(Da,VHo),e(io,XHo),e(io,Ga),e(Ga,fT),e(fT,gue),e(gue,zHo),e(fT,QHo),e(fT,UV),e(UV,WHo),e(fT,HHo),e(Ga,UHo),e(Ga,gT),e(gT,hue),e(hue,JHo),e(gT,YHo),e(gT,JV),e(JV,KHo),e(gT,ZHo),e(Ga,eUo),e(Ga,hT),e(hT,uue),e(uue,oUo),e(hT,rUo),e(hT,YV),e(YV,tUo),e(hT,aUo),e(Ga,nUo),e(Ga,uT),e(uT,pue),e(pue,sUo),e(uT,lUo),e(uT,KV),e(KV,iUo),e(uT,dUo),e(io,cUo),e(io,pT),e(pT,mUo),e(pT,_ue),e(_ue,fUo),e(pT,gUo),e(pT,bue),e(bue,hUo),e(io,uUo),M(_T,io,null),b(m,vIe,_),b(m,fd,_),e(fd,bT),e(bT,Fue),M(GL,Fue,null),e(fd,pUo),e(fd,vue),e(vue,_Uo),b(m,TIe,_),b(m,Vo,_),M(OL,Vo,null),e(Vo,bUo),e(Vo,gd),e(gd,FUo),e(gd,ZV),e(ZV,vUo),e(gd,TUo),e(gd,eX),e(eX,MUo),e(gd,EUo),e(Vo,CUo),e(Vo,VL),e(VL,wUo),e(VL,Tue),e(Tue,AUo),e(VL,yUo),e(Vo,LUo),e(Vo,_t),M(XL,_t,null),e(_t,xUo),e(_t,Mue),e(Mue,$Uo),e(_t,kUo),e(_t,hd),e(hd,SUo),e(hd,Eue),e(Eue,RUo),e(hd,BUo),e(hd,oX),e(oX,PUo),e(hd,IUo),e(_t,qUo),M(FT,_t,null),e(Vo,NUo),e(Vo,co),M(zL,co,null),e(co,jUo),e(co,Cue),e(Cue,DUo),e(co,GUo),e(co,Oa),e(Oa,OUo),e(Oa,wue),e(wue,VUo),e(Oa,XUo),e(Oa,Aue),e(Aue,zUo),e(Oa,QUo),e(Oa,yue),e(yue,WUo),e(Oa,HUo),e(co,UUo),e(co,je),e(je,vT),e(vT,Lue),e(Lue,JUo),e(vT,YUo),e(vT,rX),e(rX,KUo),e(vT,ZUo),e(je,eJo),e(je,TT),e(TT,xue),e(xue,oJo),e(TT,rJo),e(TT,tX),e(tX,tJo),e(TT,aJo),e(je,nJo),e(je,MT),e(MT,$ue),e($ue,sJo),e(MT,lJo),e(MT,aX),e(aX,iJo),e(MT,dJo),e(je,cJo),e(je,ET),e(ET,kue),e(kue,mJo),e(ET,fJo),e(ET,nX),e(nX,gJo),e(ET,hJo),e(je,uJo),e(je,CT),e(CT,Sue),e(Sue,pJo),e(CT,_Jo),e(CT,sX),e(sX,bJo),e(CT,FJo),e(je,vJo),e(je,wT),e(wT,Rue),e(Rue,TJo),e(wT,MJo),e(wT,lX),e(lX,EJo),e(wT,CJo),e(je,wJo),e(je,AT),e(AT,Bue),e(Bue,AJo),e(AT,yJo),e(AT,iX),e(iX,LJo),e(AT,xJo),e(je,$Jo),e(je,yT),e(yT,Pue),e(Pue,kJo),e(yT,SJo),e(yT,dX),e(dX,RJo),e(yT,BJo),e(co,PJo),e(co,LT),e(LT,IJo),e(LT,Iue),e(Iue,qJo),e(LT,NJo),e(LT,que),e(que,jJo),e(co,DJo),M(xT,co,null),b(m,MIe,_),b(m,ud,_),e(ud,$T),e($T,Nue),M(QL,Nue,null),e(ud,GJo),e(ud,jue),e(jue,OJo),b(m,EIe,_),b(m,Xo,_),M(WL,Xo,null),e(Xo,VJo),e(Xo,pd),e(pd,XJo),e(pd,cX),e(cX,zJo),e(pd,QJo),e(pd,mX),e(mX,WJo),e(pd,HJo),e(Xo,UJo),e(Xo,HL),e(HL,JJo),e(HL,Due),e(Due,YJo),e(HL,KJo),e(Xo,ZJo),e(Xo,bt),M(UL,bt,null),e(bt,eYo),e(bt,Gue),e(Gue,oYo),e(bt,rYo),e(bt,_d),e(_d,tYo),e(_d,Oue),e(Oue,aYo),e(_d,nYo),e(_d,fX),e(fX,sYo),e(_d,lYo),e(bt,iYo),M(kT,bt,null),e(Xo,dYo),e(Xo,mo),M(JL,mo,null),e(mo,cYo),e(mo,Vue),e(Vue,mYo),e(mo,fYo),e(mo,Va),e(Va,gYo),e(Va,Xue),e(Xue,hYo),e(Va,uYo),e(Va,zue),e(zue,pYo),e(Va,_Yo),e(Va,Que),e(Que,bYo),e(Va,FYo),e(mo,vYo),e(mo,YL),e(YL,ST),e(ST,Wue),e(Wue,TYo),e(ST,MYo),e(ST,gX),e(gX,EYo),e(ST,CYo),e(YL,wYo),e(YL,RT),e(RT,Hue),e(Hue,AYo),e(RT,yYo),e(RT,hX),e(hX,LYo),e(RT,xYo),e(mo,$Yo),e(mo,BT),e(BT,kYo),e(BT,Uue),e(Uue,SYo),e(BT,RYo),e(BT,Jue),e(Jue,BYo),e(mo,PYo),M(PT,mo,null),b(m,CIe,_),b(m,bd,_),e(bd,IT),e(IT,Yue),M(KL,Yue,null),e(bd,IYo),e(bd,Kue),e(Kue,qYo),b(m,wIe,_),b(m,zo,_),M(ZL,zo,null),e(zo,NYo),e(zo,Fd),e(Fd,jYo),e(Fd,uX),e(uX,DYo),e(Fd,GYo),e(Fd,pX),e(pX,OYo),e(Fd,VYo),e(zo,XYo),e(zo,e8),e(e8,zYo),e(e8,Zue),e(Zue,QYo),e(e8,WYo),e(zo,HYo),e(zo,Ft),M(o8,Ft,null),e(Ft,UYo),e(Ft,epe),e(epe,JYo),e(Ft,YYo),e(Ft,vd),e(vd,KYo),e(vd,ope),e(ope,ZYo),e(vd,eKo),e(vd,_X),e(_X,oKo),e(vd,rKo),e(Ft,tKo),M(qT,Ft,null),e(zo,aKo),e(zo,fo),M(r8,fo,null),e(fo,nKo),e(fo,rpe),e(rpe,sKo),e(fo,lKo),e(fo,Xa),e(Xa,iKo),e(Xa,tpe),e(tpe,dKo),e(Xa,cKo),e(Xa,ape),e(ape,mKo),e(Xa,fKo),e(Xa,npe),e(npe,gKo),e(Xa,hKo),e(fo,uKo),e(fo,za),e(za,NT),e(NT,spe),e(spe,pKo),e(NT,_Ko),e(NT,bX),e(bX,bKo),e(NT,FKo),e(za,vKo),e(za,jT),e(jT,lpe),e(lpe,TKo),e(jT,MKo),e(jT,FX),e(FX,EKo),e(jT,CKo),e(za,wKo),e(za,DT),e(DT,ipe),e(ipe,AKo),e(DT,yKo),e(DT,vX),e(vX,LKo),e(DT,xKo),e(za,$Ko),e(za,GT),e(GT,dpe),e(dpe,kKo),e(GT,SKo),e(GT,TX),e(TX,RKo),e(GT,BKo),e(fo,PKo),e(fo,OT),e(OT,IKo),e(OT,cpe),e(cpe,qKo),e(OT,NKo),e(OT,mpe),e(mpe,jKo),e(fo,DKo),M(VT,fo,null),b(m,AIe,_),b(m,Td,_),e(Td,XT),e(XT,fpe),M(t8,fpe,null),e(Td,GKo),e(Td,gpe),e(gpe,OKo),b(m,yIe,_),b(m,Qo,_),M(a8,Qo,null),e(Qo,VKo),e(Qo,Md),e(Md,XKo),e(Md,MX),e(MX,zKo),e(Md,QKo),e(Md,EX),e(EX,WKo),e(Md,HKo),e(Qo,UKo),e(Qo,n8),e(n8,JKo),e(n8,hpe),e(hpe,YKo),e(n8,KKo),e(Qo,ZKo),e(Qo,vt),M(s8,vt,null),e(vt,eZo),e(vt,upe),e(upe,oZo),e(vt,rZo),e(vt,Ed),e(Ed,tZo),e(Ed,ppe),e(ppe,aZo),e(Ed,nZo),e(Ed,CX),e(CX,sZo),e(Ed,lZo),e(vt,iZo),M(zT,vt,null),e(Qo,dZo),e(Qo,go),M(l8,go,null),e(go,cZo),e(go,_pe),e(_pe,mZo),e(go,fZo),e(go,Qa),e(Qa,gZo),e(Qa,bpe),e(bpe,hZo),e(Qa,uZo),e(Qa,Fpe),e(Fpe,pZo),e(Qa,_Zo),e(Qa,vpe),e(vpe,bZo),e(Qa,FZo),e(go,vZo),e(go,Cd),e(Cd,QT),e(QT,Tpe),e(Tpe,TZo),e(QT,MZo),e(QT,wX),e(wX,EZo),e(QT,CZo),e(Cd,wZo),e(Cd,WT),e(WT,Mpe),e(Mpe,AZo),e(WT,yZo),e(WT,AX),e(AX,LZo),e(WT,xZo),e(Cd,$Zo),e(Cd,HT),e(HT,Epe),e(Epe,kZo),e(HT,SZo),e(HT,yX),e(yX,RZo),e(HT,BZo),e(go,PZo),e(go,UT),e(UT,IZo),e(UT,Cpe),e(Cpe,qZo),e(UT,NZo),e(UT,wpe),e(wpe,jZo),e(go,DZo),M(JT,go,null),b(m,LIe,_),b(m,wd,_),e(wd,YT),e(YT,Ape),M(i8,Ape,null),e(wd,GZo),e(wd,ype),e(ype,OZo),b(m,xIe,_),b(m,Wo,_),M(d8,Wo,null),e(Wo,VZo),e(Wo,Ad),e(Ad,XZo),e(Ad,LX),e(LX,zZo),e(Ad,QZo),e(Ad,xX),e(xX,WZo),e(Ad,HZo),e(Wo,UZo),e(Wo,c8),e(c8,JZo),e(c8,Lpe),e(Lpe,YZo),e(c8,KZo),e(Wo,ZZo),e(Wo,Tt),M(m8,Tt,null),e(Tt,eer),e(Tt,xpe),e(xpe,oer),e(Tt,rer),e(Tt,yd),e(yd,ter),e(yd,$pe),e($pe,aer),e(yd,ner),e(yd,$X),e($X,ser),e(yd,ler),e(Tt,ier),M(KT,Tt,null),e(Wo,der),e(Wo,ho),M(f8,ho,null),e(ho,cer),e(ho,kpe),e(kpe,mer),e(ho,fer),e(ho,Wa),e(Wa,ger),e(Wa,Spe),e(Spe,her),e(Wa,uer),e(Wa,Rpe),e(Rpe,per),e(Wa,_er),e(Wa,Bpe),e(Bpe,ber),e(Wa,Fer),e(ho,ver),e(ho,g8),e(g8,ZT),e(ZT,Ppe),e(Ppe,Ter),e(ZT,Mer),e(ZT,kX),e(kX,Eer),e(ZT,Cer),e(g8,wer),e(g8,eM),e(eM,Ipe),e(Ipe,Aer),e(eM,yer),e(eM,SX),e(SX,Ler),e(eM,xer),e(ho,$er),e(ho,oM),e(oM,ker),e(oM,qpe),e(qpe,Ser),e(oM,Rer),e(oM,Npe),e(Npe,Ber),e(ho,Per),M(rM,ho,null),b(m,$Ie,_),b(m,Ld,_),e(Ld,tM),e(tM,jpe),M(h8,jpe,null),e(Ld,Ier),e(Ld,Dpe),e(Dpe,qer),b(m,kIe,_),b(m,Ho,_),M(u8,Ho,null),e(Ho,Ner),e(Ho,xd),e(xd,jer),e(xd,RX),e(RX,Der),e(xd,Ger),e(xd,BX),e(BX,Oer),e(xd,Ver),e(Ho,Xer),e(Ho,p8),e(p8,zer),e(p8,Gpe),e(Gpe,Qer),e(p8,Wer),e(Ho,Her),e(Ho,Mt),M(_8,Mt,null),e(Mt,Uer),e(Mt,Ope),e(Ope,Jer),e(Mt,Yer),e(Mt,$d),e($d,Ker),e($d,Vpe),e(Vpe,Zer),e($d,eor),e($d,PX),e(PX,oor),e($d,ror),e(Mt,tor),M(aM,Mt,null),e(Ho,aor),e(Ho,uo),M(b8,uo,null),e(uo,nor),e(uo,Xpe),e(Xpe,sor),e(uo,lor),e(uo,Ha),e(Ha,ior),e(Ha,zpe),e(zpe,dor),e(Ha,cor),e(Ha,Qpe),e(Qpe,mor),e(Ha,gor),e(Ha,Wpe),e(Wpe,hor),e(Ha,uor),e(uo,por),e(uo,Hpe),e(Hpe,nM),e(nM,Upe),e(Upe,_or),e(nM,bor),e(nM,IX),e(IX,For),e(nM,vor),e(uo,Tor),e(uo,sM),e(sM,Mor),e(sM,Jpe),e(Jpe,Eor),e(sM,Cor),e(sM,Ype),e(Ype,wor),e(uo,Aor),M(lM,uo,null),b(m,SIe,_),b(m,kd,_),e(kd,iM),e(iM,Kpe),M(F8,Kpe,null),e(kd,yor),e(kd,Zpe),e(Zpe,Lor),b(m,RIe,_),b(m,Uo,_),M(v8,Uo,null),e(Uo,xor),e(Uo,Sd),e(Sd,$or),e(Sd,qX),e(qX,kor),e(Sd,Sor),e(Sd,NX),e(NX,Ror),e(Sd,Bor),e(Uo,Por),e(Uo,T8),e(T8,Ior),e(T8,e_e),e(e_e,qor),e(T8,Nor),e(Uo,jor),e(Uo,Et),M(M8,Et,null),e(Et,Dor),e(Et,o_e),e(o_e,Gor),e(Et,Oor),e(Et,Rd),e(Rd,Vor),e(Rd,r_e),e(r_e,Xor),e(Rd,zor),e(Rd,jX),e(jX,Qor),e(Rd,Wor),e(Et,Hor),M(dM,Et,null),e(Uo,Uor),e(Uo,po),M(E8,po,null),e(po,Jor),e(po,t_e),e(t_e,Yor),e(po,Kor),e(po,Ua),e(Ua,Zor),e(Ua,a_e),e(a_e,err),e(Ua,orr),e(Ua,n_e),e(n_e,rrr),e(Ua,trr),e(Ua,s_e),e(s_e,arr),e(Ua,nrr),e(po,srr),e(po,Ja),e(Ja,cM),e(cM,l_e),e(l_e,lrr),e(cM,irr),e(cM,DX),e(DX,drr),e(cM,crr),e(Ja,mrr),e(Ja,mM),e(mM,i_e),e(i_e,frr),e(mM,grr),e(mM,GX),e(GX,hrr),e(mM,urr),e(Ja,prr),e(Ja,fM),e(fM,d_e),e(d_e,_rr),e(fM,brr),e(fM,OX),e(OX,Frr),e(fM,vrr),e(Ja,Trr),e(Ja,gM),e(gM,c_e),e(c_e,Mrr),e(gM,Err),e(gM,VX),e(VX,Crr),e(gM,wrr),e(po,Arr),e(po,hM),e(hM,yrr),e(hM,m_e),e(m_e,Lrr),e(hM,xrr),e(hM,f_e),e(f_e,$rr),e(po,krr),M(uM,po,null),b(m,BIe,_),b(m,Bd,_),e(Bd,pM),e(pM,g_e),M(C8,g_e,null),e(Bd,Srr),e(Bd,h_e),e(h_e,Rrr),b(m,PIe,_),b(m,Jo,_),M(w8,Jo,null),e(Jo,Brr),e(Jo,Pd),e(Pd,Prr),e(Pd,XX),e(XX,Irr),e(Pd,qrr),e(Pd,zX),e(zX,Nrr),e(Pd,jrr),e(Jo,Drr),e(Jo,A8),e(A8,Grr),e(A8,u_e),e(u_e,Orr),e(A8,Vrr),e(Jo,Xrr),e(Jo,Ct),M(y8,Ct,null),e(Ct,zrr),e(Ct,p_e),e(p_e,Qrr),e(Ct,Wrr),e(Ct,Id),e(Id,Hrr),e(Id,__e),e(__e,Urr),e(Id,Jrr),e(Id,QX),e(QX,Yrr),e(Id,Krr),e(Ct,Zrr),M(_M,Ct,null),e(Jo,etr),e(Jo,_o),M(L8,_o,null),e(_o,otr),e(_o,b_e),e(b_e,rtr),e(_o,ttr),e(_o,Ya),e(Ya,atr),e(Ya,F_e),e(F_e,ntr),e(Ya,str),e(Ya,v_e),e(v_e,ltr),e(Ya,itr),e(Ya,T_e),e(T_e,dtr),e(Ya,ctr),e(_o,mtr),e(_o,M_e),e(M_e,bM),e(bM,E_e),e(E_e,ftr),e(bM,gtr),e(bM,WX),e(WX,htr),e(bM,utr),e(_o,ptr),e(_o,FM),e(FM,_tr),e(FM,C_e),e(C_e,btr),e(FM,Ftr),e(FM,w_e),e(w_e,vtr),e(_o,Ttr),M(vM,_o,null),b(m,IIe,_),b(m,qd,_),e(qd,TM),e(TM,A_e),M(x8,A_e,null),e(qd,Mtr),e(qd,y_e),e(y_e,Etr),b(m,qIe,_),b(m,Yo,_),M($8,Yo,null),e(Yo,Ctr),e(Yo,Nd),e(Nd,wtr),e(Nd,HX),e(HX,Atr),e(Nd,ytr),e(Nd,UX),e(UX,Ltr),e(Nd,xtr),e(Yo,$tr),e(Yo,k8),e(k8,ktr),e(k8,L_e),e(L_e,Str),e(k8,Rtr),e(Yo,Btr),e(Yo,wt),M(S8,wt,null),e(wt,Ptr),e(wt,x_e),e(x_e,Itr),e(wt,qtr),e(wt,jd),e(jd,Ntr),e(jd,$_e),e($_e,jtr),e(jd,Dtr),e(jd,JX),e(JX,Gtr),e(jd,Otr),e(wt,Vtr),M(MM,wt,null),e(Yo,Xtr),e(Yo,wr),M(R8,wr,null),e(wr,ztr),e(wr,k_e),e(k_e,Qtr),e(wr,Wtr),e(wr,Ka),e(Ka,Htr),e(Ka,S_e),e(S_e,Utr),e(Ka,Jtr),e(Ka,R_e),e(R_e,Ytr),e(Ka,Ktr),e(Ka,B_e),e(B_e,Ztr),e(Ka,ear),e(wr,oar),e(wr,N),e(N,EM),e(EM,P_e),e(P_e,rar),e(EM,tar),e(EM,YX),e(YX,aar),e(EM,nar),e(N,sar),e(N,CM),e(CM,I_e),e(I_e,lar),e(CM,iar),e(CM,KX),e(KX,dar),e(CM,car),e(N,mar),e(N,wM),e(wM,q_e),e(q_e,far),e(wM,gar),e(wM,ZX),e(ZX,har),e(wM,uar),e(N,par),e(N,AM),e(AM,N_e),e(N_e,_ar),e(AM,bar),e(AM,ez),e(ez,Far),e(AM,Tar),e(N,Mar),e(N,yM),e(yM,j_e),e(j_e,Ear),e(yM,Car),e(yM,oz),e(oz,war),e(yM,Aar),e(N,yar),e(N,LM),e(LM,D_e),e(D_e,Lar),e(LM,xar),e(LM,rz),e(rz,$ar),e(LM,kar),e(N,Sar),e(N,xM),e(xM,G_e),e(G_e,Rar),e(xM,Bar),e(xM,tz),e(tz,Par),e(xM,Iar),e(N,qar),e(N,$M),e($M,O_e),e(O_e,Nar),e($M,jar),e($M,az),e(az,Dar),e($M,Gar),e(N,Oar),e(N,kM),e(kM,V_e),e(V_e,Var),e(kM,Xar),e(kM,nz),e(nz,zar),e(kM,Qar),e(N,War),e(N,SM),e(SM,X_e),e(X_e,Har),e(SM,Uar),e(SM,sz),e(sz,Jar),e(SM,Yar),e(N,Kar),e(N,RM),e(RM,z_e),e(z_e,Zar),e(RM,enr),e(RM,lz),e(lz,onr),e(RM,rnr),e(N,tnr),e(N,BM),e(BM,Q_e),e(Q_e,anr),e(BM,nnr),e(BM,iz),e(iz,snr),e(BM,lnr),e(N,inr),e(N,PM),e(PM,W_e),e(W_e,dnr),e(PM,cnr),e(PM,dz),e(dz,mnr),e(PM,fnr),e(N,gnr),e(N,IM),e(IM,H_e),e(H_e,hnr),e(IM,unr),e(IM,cz),e(cz,pnr),e(IM,_nr),e(N,bnr),e(N,qM),e(qM,U_e),e(U_e,Fnr),e(qM,vnr),e(qM,mz),e(mz,Tnr),e(qM,Mnr),e(N,Enr),e(N,NM),e(NM,J_e),e(J_e,Cnr),e(NM,wnr),e(NM,fz),e(fz,Anr),e(NM,ynr),e(N,Lnr),e(N,jM),e(jM,Y_e),e(Y_e,xnr),e(jM,$nr),e(jM,gz),e(gz,knr),e(jM,Snr),e(N,Rnr),e(N,Bs),e(Bs,K_e),e(K_e,Bnr),e(Bs,Pnr),e(Bs,hz),e(hz,Inr),e(Bs,qnr),e(Bs,uz),e(uz,Nnr),e(Bs,jnr),e(N,Dnr),e(N,DM),e(DM,Z_e),e(Z_e,Gnr),e(DM,Onr),e(DM,pz),e(pz,Vnr),e(DM,Xnr),e(N,znr),e(N,GM),e(GM,ebe),e(ebe,Qnr),e(GM,Wnr),e(GM,_z),e(_z,Hnr),e(GM,Unr),e(N,Jnr),e(N,OM),e(OM,obe),e(obe,Ynr),e(OM,Knr),e(OM,bz),e(bz,Znr),e(OM,esr),e(N,osr),e(N,VM),e(VM,rbe),e(rbe,rsr),e(VM,tsr),e(VM,Fz),e(Fz,asr),e(VM,nsr),e(N,ssr),e(N,XM),e(XM,tbe),e(tbe,lsr),e(XM,isr),e(XM,vz),e(vz,dsr),e(XM,csr),e(N,msr),e(N,zM),e(zM,abe),e(abe,fsr),e(zM,gsr),e(zM,Tz),e(Tz,hsr),e(zM,usr),e(N,psr),e(N,QM),e(QM,nbe),e(nbe,_sr),e(QM,bsr),e(QM,Mz),e(Mz,Fsr),e(QM,vsr),e(N,Tsr),e(N,WM),e(WM,sbe),e(sbe,Msr),e(WM,Esr),e(WM,Ez),e(Ez,Csr),e(WM,wsr),e(N,Asr),e(N,HM),e(HM,lbe),e(lbe,ysr),e(HM,Lsr),e(HM,Cz),e(Cz,xsr),e(HM,$sr),e(N,ksr),e(N,UM),e(UM,ibe),e(ibe,Ssr),e(UM,Rsr),e(UM,wz),e(wz,Bsr),e(UM,Psr),e(N,Isr),e(N,JM),e(JM,dbe),e(dbe,qsr),e(JM,Nsr),e(JM,Az),e(Az,jsr),e(JM,Dsr),e(N,Gsr),e(N,YM),e(YM,cbe),e(cbe,Osr),e(YM,Vsr),e(YM,yz),e(yz,Xsr),e(YM,zsr),e(N,Qsr),e(N,KM),e(KM,mbe),e(mbe,Wsr),e(KM,Hsr),e(KM,Lz),e(Lz,Usr),e(KM,Jsr),e(N,Ysr),e(N,ZM),e(ZM,fbe),e(fbe,Ksr),e(ZM,Zsr),e(ZM,xz),e(xz,elr),e(ZM,olr),e(N,rlr),e(N,e4),e(e4,gbe),e(gbe,tlr),e(e4,alr),e(e4,$z),e($z,nlr),e(e4,slr),e(N,llr),e(N,o4),e(o4,hbe),e(hbe,ilr),e(o4,dlr),e(o4,kz),e(kz,clr),e(o4,mlr),e(N,flr),e(N,r4),e(r4,ube),e(ube,glr),e(r4,hlr),e(r4,Sz),e(Sz,ulr),e(r4,plr),e(N,_lr),e(N,t4),e(t4,pbe),e(pbe,blr),e(t4,Flr),e(t4,Rz),e(Rz,vlr),e(t4,Tlr),e(N,Mlr),e(N,a4),e(a4,_be),e(_be,Elr),e(a4,Clr),e(a4,Bz),e(Bz,wlr),e(a4,Alr),e(N,ylr),e(N,n4),e(n4,bbe),e(bbe,Llr),e(n4,xlr),e(n4,Pz),e(Pz,$lr),e(n4,klr),e(N,Slr),e(N,s4),e(s4,Fbe),e(Fbe,Rlr),e(s4,Blr),e(s4,Iz),e(Iz,Plr),e(s4,Ilr),e(N,qlr),e(N,l4),e(l4,vbe),e(vbe,Nlr),e(l4,jlr),e(l4,qz),e(qz,Dlr),e(l4,Glr),e(N,Olr),e(N,i4),e(i4,Tbe),e(Tbe,Vlr),e(i4,Xlr),e(i4,Nz),e(Nz,zlr),e(i4,Qlr),e(N,Wlr),e(N,d4),e(d4,Mbe),e(Mbe,Hlr),e(d4,Ulr),e(d4,jz),e(jz,Jlr),e(d4,Ylr),e(N,Klr),e(N,c4),e(c4,Ebe),e(Ebe,Zlr),e(c4,eir),e(c4,Dz),e(Dz,oir),e(c4,rir),e(N,tir),e(N,m4),e(m4,Cbe),e(Cbe,air),e(m4,nir),e(m4,Gz),e(Gz,sir),e(m4,lir),e(N,iir),e(N,f4),e(f4,wbe),e(wbe,dir),e(f4,cir),e(f4,Oz),e(Oz,mir),e(f4,fir),e(wr,gir),M(g4,wr,null),b(m,NIe,_),b(m,Dd,_),e(Dd,h4),e(h4,Abe),M(B8,Abe,null),e(Dd,hir),e(Dd,ybe),e(ybe,uir),b(m,jIe,_),b(m,Ko,_),M(P8,Ko,null),e(Ko,pir),e(Ko,Gd),e(Gd,_ir),e(Gd,Vz),e(Vz,bir),e(Gd,Fir),e(Gd,Xz),e(Xz,vir),e(Gd,Tir),e(Ko,Mir),e(Ko,I8),e(I8,Eir),e(I8,Lbe),e(Lbe,Cir),e(I8,wir),e(Ko,Air),e(Ko,At),M(q8,At,null),e(At,yir),e(At,xbe),e(xbe,Lir),e(At,xir),e(At,Od),e(Od,$ir),e(Od,$be),e($be,kir),e(Od,Sir),e(Od,zz),e(zz,Rir),e(Od,Bir),e(At,Pir),M(u4,At,null),e(Ko,Iir),e(Ko,Ar),M(N8,Ar,null),e(Ar,qir),e(Ar,kbe),e(kbe,Nir),e(Ar,jir),e(Ar,Za),e(Za,Dir),e(Za,Sbe),e(Sbe,Gir),e(Za,Oir),e(Za,Rbe),e(Rbe,Vir),e(Za,Xir),e(Za,Bbe),e(Bbe,zir),e(Za,Qir),e(Ar,Wir),e(Ar,se),e(se,p4),e(p4,Pbe),e(Pbe,Hir),e(p4,Uir),e(p4,Qz),e(Qz,Jir),e(p4,Yir),e(se,Kir),e(se,_4),e(_4,Ibe),e(Ibe,Zir),e(_4,edr),e(_4,Wz),e(Wz,odr),e(_4,rdr),e(se,tdr),e(se,b4),e(b4,qbe),e(qbe,adr),e(b4,ndr),e(b4,Hz),e(Hz,sdr),e(b4,ldr),e(se,idr),e(se,F4),e(F4,Nbe),e(Nbe,ddr),e(F4,cdr),e(F4,Uz),e(Uz,mdr),e(F4,fdr),e(se,gdr),e(se,v4),e(v4,jbe),e(jbe,hdr),e(v4,udr),e(v4,Jz),e(Jz,pdr),e(v4,_dr),e(se,bdr),e(se,T4),e(T4,Dbe),e(Dbe,Fdr),e(T4,vdr),e(T4,Yz),e(Yz,Tdr),e(T4,Mdr),e(se,Edr),e(se,M4),e(M4,Gbe),e(Gbe,Cdr),e(M4,wdr),e(M4,Kz),e(Kz,Adr),e(M4,ydr),e(se,Ldr),e(se,E4),e(E4,Obe),e(Obe,xdr),e(E4,$dr),e(E4,Zz),e(Zz,kdr),e(E4,Sdr),e(se,Rdr),e(se,C4),e(C4,Vbe),e(Vbe,Bdr),e(C4,Pdr),e(C4,eQ),e(eQ,Idr),e(C4,qdr),e(se,Ndr),e(se,w4),e(w4,Xbe),e(Xbe,jdr),e(w4,Ddr),e(w4,oQ),e(oQ,Gdr),e(w4,Odr),e(se,Vdr),e(se,A4),e(A4,zbe),e(zbe,Xdr),e(A4,zdr),e(A4,rQ),e(rQ,Qdr),e(A4,Wdr),e(se,Hdr),e(se,y4),e(y4,Qbe),e(Qbe,Udr),e(y4,Jdr),e(y4,tQ),e(tQ,Ydr),e(y4,Kdr),e(se,Zdr),e(se,L4),e(L4,Wbe),e(Wbe,ecr),e(L4,ocr),e(L4,aQ),e(aQ,rcr),e(L4,tcr),e(se,acr),e(se,x4),e(x4,Hbe),e(Hbe,ncr),e(x4,scr),e(x4,nQ),e(nQ,lcr),e(x4,icr),e(se,dcr),e(se,$4),e($4,Ube),e(Ube,ccr),e($4,mcr),e($4,sQ),e(sQ,fcr),e($4,gcr),e(se,hcr),e(se,k4),e(k4,Jbe),e(Jbe,ucr),e(k4,pcr),e(k4,lQ),e(lQ,_cr),e(k4,bcr),e(se,Fcr),e(se,S4),e(S4,Ybe),e(Ybe,vcr),e(S4,Tcr),e(S4,iQ),e(iQ,Mcr),e(S4,Ecr),e(se,Ccr),e(se,R4),e(R4,Kbe),e(Kbe,wcr),e(R4,Acr),e(R4,dQ),e(dQ,ycr),e(R4,Lcr),e(se,xcr),e(se,B4),e(B4,Zbe),e(Zbe,$cr),e(B4,kcr),e(B4,cQ),e(cQ,Scr),e(B4,Rcr),e(se,Bcr),e(se,P4),e(P4,e2e),e(e2e,Pcr),e(P4,Icr),e(P4,mQ),e(mQ,qcr),e(P4,Ncr),e(se,jcr),e(se,I4),e(I4,o2e),e(o2e,Dcr),e(I4,Gcr),e(I4,fQ),e(fQ,Ocr),e(I4,Vcr),e(se,Xcr),e(se,q4),e(q4,r2e),e(r2e,zcr),e(q4,Qcr),e(q4,gQ),e(gQ,Wcr),e(q4,Hcr),e(se,Ucr),e(se,N4),e(N4,t2e),e(t2e,Jcr),e(N4,Ycr),e(N4,hQ),e(hQ,Kcr),e(N4,Zcr),e(Ar,emr),M(j4,Ar,null),b(m,DIe,_),b(m,Vd,_),e(Vd,D4),e(D4,a2e),M(j8,a2e,null),e(Vd,omr),e(Vd,n2e),e(n2e,rmr),b(m,GIe,_),b(m,Zo,_),M(D8,Zo,null),e(Zo,tmr),e(Zo,Xd),e(Xd,amr),e(Xd,uQ),e(uQ,nmr),e(Xd,smr),e(Xd,pQ),e(pQ,lmr),e(Xd,imr),e(Zo,dmr),e(Zo,G8),e(G8,cmr),e(G8,s2e),e(s2e,mmr),e(G8,fmr),e(Zo,gmr),e(Zo,yt),M(O8,yt,null),e(yt,hmr),e(yt,l2e),e(l2e,umr),e(yt,pmr),e(yt,zd),e(zd,_mr),e(zd,i2e),e(i2e,bmr),e(zd,Fmr),e(zd,_Q),e(_Q,vmr),e(zd,Tmr),e(yt,Mmr),M(G4,yt,null),e(Zo,Emr),e(Zo,yr),M(V8,yr,null),e(yr,Cmr),e(yr,d2e),e(d2e,wmr),e(yr,Amr),e(yr,en),e(en,ymr),e(en,c2e),e(c2e,Lmr),e(en,xmr),e(en,m2e),e(m2e,$mr),e(en,kmr),e(en,f2e),e(f2e,Smr),e(en,Rmr),e(yr,Bmr),e(yr,Te),e(Te,O4),e(O4,g2e),e(g2e,Pmr),e(O4,Imr),e(O4,bQ),e(bQ,qmr),e(O4,Nmr),e(Te,jmr),e(Te,V4),e(V4,h2e),e(h2e,Dmr),e(V4,Gmr),e(V4,FQ),e(FQ,Omr),e(V4,Vmr),e(Te,Xmr),e(Te,X4),e(X4,u2e),e(u2e,zmr),e(X4,Qmr),e(X4,vQ),e(vQ,Wmr),e(X4,Hmr),e(Te,Umr),e(Te,z4),e(z4,p2e),e(p2e,Jmr),e(z4,Ymr),e(z4,TQ),e(TQ,Kmr),e(z4,Zmr),e(Te,efr),e(Te,Q4),e(Q4,_2e),e(_2e,ofr),e(Q4,rfr),e(Q4,MQ),e(MQ,tfr),e(Q4,afr),e(Te,nfr),e(Te,W4),e(W4,b2e),e(b2e,sfr),e(W4,lfr),e(W4,EQ),e(EQ,ifr),e(W4,dfr),e(Te,cfr),e(Te,H4),e(H4,F2e),e(F2e,mfr),e(H4,ffr),e(H4,CQ),e(CQ,gfr),e(H4,hfr),e(Te,ufr),e(Te,U4),e(U4,v2e),e(v2e,pfr),e(U4,_fr),e(U4,wQ),e(wQ,bfr),e(U4,Ffr),e(Te,vfr),e(Te,J4),e(J4,T2e),e(T2e,Tfr),e(J4,Mfr),e(J4,AQ),e(AQ,Efr),e(J4,Cfr),e(Te,wfr),e(Te,Y4),e(Y4,M2e),e(M2e,Afr),e(Y4,yfr),e(Y4,yQ),e(yQ,Lfr),e(Y4,xfr),e(Te,$fr),e(Te,K4),e(K4,E2e),e(E2e,kfr),e(K4,Sfr),e(K4,LQ),e(LQ,Rfr),e(K4,Bfr),e(Te,Pfr),e(Te,Z4),e(Z4,C2e),e(C2e,Ifr),e(Z4,qfr),e(Z4,xQ),e(xQ,Nfr),e(Z4,jfr),e(yr,Dfr),M(eE,yr,null),b(m,OIe,_),b(m,Qd,_),e(Qd,oE),e(oE,w2e),M(X8,w2e,null),e(Qd,Gfr),e(Qd,A2e),e(A2e,Ofr),b(m,VIe,_),b(m,er,_),M(z8,er,null),e(er,Vfr),e(er,Wd),e(Wd,Xfr),e(Wd,$Q),e($Q,zfr),e(Wd,Qfr),e(Wd,kQ),e(kQ,Wfr),e(Wd,Hfr),e(er,Ufr),e(er,Q8),e(Q8,Jfr),e(Q8,y2e),e(y2e,Yfr),e(Q8,Kfr),e(er,Zfr),e(er,Lt),M(W8,Lt,null),e(Lt,egr),e(Lt,L2e),e(L2e,ogr),e(Lt,rgr),e(Lt,Hd),e(Hd,tgr),e(Hd,x2e),e(x2e,agr),e(Hd,ngr),e(Hd,SQ),e(SQ,sgr),e(Hd,lgr),e(Lt,igr),M(rE,Lt,null),e(er,dgr),e(er,Lr),M(H8,Lr,null),e(Lr,cgr),e(Lr,$2e),e($2e,mgr),e(Lr,fgr),e(Lr,on),e(on,ggr),e(on,k2e),e(k2e,hgr),e(on,ugr),e(on,S2e),e(S2e,pgr),e(on,_gr),e(on,R2e),e(R2e,bgr),e(on,Fgr),e(Lr,vgr),e(Lr,Ud),e(Ud,tE),e(tE,B2e),e(B2e,Tgr),e(tE,Mgr),e(tE,RQ),e(RQ,Egr),e(tE,Cgr),e(Ud,wgr),e(Ud,aE),e(aE,P2e),e(P2e,Agr),e(aE,ygr),e(aE,BQ),e(BQ,Lgr),e(aE,xgr),e(Ud,$gr),e(Ud,nE),e(nE,I2e),e(I2e,kgr),e(nE,Sgr),e(nE,PQ),e(PQ,Rgr),e(nE,Bgr),e(Lr,Pgr),M(sE,Lr,null),b(m,XIe,_),b(m,Jd,_),e(Jd,lE),e(lE,q2e),M(U8,q2e,null),e(Jd,Igr),e(Jd,N2e),e(N2e,qgr),b(m,zIe,_),b(m,or,_),M(J8,or,null),e(or,Ngr),e(or,Yd),e(Yd,jgr),e(Yd,IQ),e(IQ,Dgr),e(Yd,Ggr),e(Yd,qQ),e(qQ,Ogr),e(Yd,Vgr),e(or,Xgr),e(or,Y8),e(Y8,zgr),e(Y8,j2e),e(j2e,Qgr),e(Y8,Wgr),e(or,Hgr),e(or,xt),M(K8,xt,null),e(xt,Ugr),e(xt,D2e),e(D2e,Jgr),e(xt,Ygr),e(xt,Kd),e(Kd,Kgr),e(Kd,G2e),e(G2e,Zgr),e(Kd,ehr),e(Kd,NQ),e(NQ,ohr),e(Kd,rhr),e(xt,thr),M(iE,xt,null),e(or,ahr),e(or,xr),M(Z8,xr,null),e(xr,nhr),e(xr,O2e),e(O2e,shr),e(xr,lhr),e(xr,rn),e(rn,ihr),e(rn,V2e),e(V2e,dhr),e(rn,chr),e(rn,X2e),e(X2e,mhr),e(rn,fhr),e(rn,z2e),e(z2e,ghr),e(rn,hhr),e(xr,uhr),e(xr,ie),e(ie,dE),e(dE,Q2e),e(Q2e,phr),e(dE,_hr),e(dE,jQ),e(jQ,bhr),e(dE,Fhr),e(ie,vhr),e(ie,cE),e(cE,W2e),e(W2e,Thr),e(cE,Mhr),e(cE,DQ),e(DQ,Ehr),e(cE,Chr),e(ie,whr),e(ie,mE),e(mE,H2e),e(H2e,Ahr),e(mE,yhr),e(mE,GQ),e(GQ,Lhr),e(mE,xhr),e(ie,$hr),e(ie,fE),e(fE,U2e),e(U2e,khr),e(fE,Shr),e(fE,OQ),e(OQ,Rhr),e(fE,Bhr),e(ie,Phr),e(ie,gE),e(gE,J2e),e(J2e,Ihr),e(gE,qhr),e(gE,VQ),e(VQ,Nhr),e(gE,jhr),e(ie,Dhr),e(ie,hE),e(hE,Y2e),e(Y2e,Ghr),e(hE,Ohr),e(hE,XQ),e(XQ,Vhr),e(hE,Xhr),e(ie,zhr),e(ie,uE),e(uE,K2e),e(K2e,Qhr),e(uE,Whr),e(uE,zQ),e(zQ,Hhr),e(uE,Uhr),e(ie,Jhr),e(ie,pE),e(pE,Z2e),e(Z2e,Yhr),e(pE,Khr),e(pE,QQ),e(QQ,Zhr),e(pE,eur),e(ie,our),e(ie,_E),e(_E,eFe),e(eFe,rur),e(_E,tur),e(_E,WQ),e(WQ,aur),e(_E,nur),e(ie,sur),e(ie,bE),e(bE,oFe),e(oFe,lur),e(bE,iur),e(bE,HQ),e(HQ,dur),e(bE,cur),e(ie,mur),e(ie,FE),e(FE,rFe),e(rFe,fur),e(FE,gur),e(FE,UQ),e(UQ,hur),e(FE,uur),e(ie,pur),e(ie,vE),e(vE,tFe),e(tFe,_ur),e(vE,bur),e(vE,JQ),e(JQ,Fur),e(vE,vur),e(ie,Tur),e(ie,TE),e(TE,aFe),e(aFe,Mur),e(TE,Eur),e(TE,YQ),e(YQ,Cur),e(TE,wur),e(ie,Aur),e(ie,ME),e(ME,nFe),e(nFe,yur),e(ME,Lur),e(ME,KQ),e(KQ,xur),e(ME,$ur),e(ie,kur),e(ie,EE),e(EE,sFe),e(sFe,Sur),e(EE,Rur),e(EE,ZQ),e(ZQ,Bur),e(EE,Pur),e(ie,Iur),e(ie,CE),e(CE,lFe),e(lFe,qur),e(CE,Nur),e(CE,eW),e(eW,jur),e(CE,Dur),e(ie,Gur),e(ie,wE),e(wE,iFe),e(iFe,Our),e(wE,Vur),e(wE,oW),e(oW,Xur),e(wE,zur),e(ie,Qur),e(ie,AE),e(AE,dFe),e(dFe,Wur),e(AE,Hur),e(AE,rW),e(rW,Uur),e(AE,Jur),e(ie,Yur),e(ie,yE),e(yE,cFe),e(cFe,Kur),e(yE,Zur),e(yE,tW),e(tW,epr),e(yE,opr),e(ie,rpr),e(ie,LE),e(LE,mFe),e(mFe,tpr),e(LE,apr),e(LE,aW),e(aW,npr),e(LE,spr),e(xr,lpr),M(xE,xr,null),b(m,QIe,_),b(m,Zd,_),e(Zd,$E),e($E,fFe),M(ex,fFe,null),e(Zd,ipr),e(Zd,gFe),e(gFe,dpr),b(m,WIe,_),b(m,rr,_),M(ox,rr,null),e(rr,cpr),e(rr,ec),e(ec,mpr),e(ec,nW),e(nW,fpr),e(ec,gpr),e(ec,sW),e(sW,hpr),e(ec,upr),e(rr,ppr),e(rr,rx),e(rx,_pr),e(rx,hFe),e(hFe,bpr),e(rx,Fpr),e(rr,vpr),e(rr,$t),M(tx,$t,null),e($t,Tpr),e($t,uFe),e(uFe,Mpr),e($t,Epr),e($t,oc),e(oc,Cpr),e(oc,pFe),e(pFe,wpr),e(oc,Apr),e(oc,lW),e(lW,ypr),e(oc,Lpr),e($t,xpr),M(kE,$t,null),e(rr,$pr),e(rr,$r),M(ax,$r,null),e($r,kpr),e($r,_Fe),e(_Fe,Spr),e($r,Rpr),e($r,tn),e(tn,Bpr),e(tn,bFe),e(bFe,Ppr),e(tn,Ipr),e(tn,FFe),e(FFe,qpr),e(tn,Npr),e(tn,vFe),e(vFe,jpr),e(tn,Dpr),e($r,Gpr),e($r,ye),e(ye,SE),e(SE,TFe),e(TFe,Opr),e(SE,Vpr),e(SE,iW),e(iW,Xpr),e(SE,zpr),e(ye,Qpr),e(ye,RE),e(RE,MFe),e(MFe,Wpr),e(RE,Hpr),e(RE,dW),e(dW,Upr),e(RE,Jpr),e(ye,Ypr),e(ye,BE),e(BE,EFe),e(EFe,Kpr),e(BE,Zpr),e(BE,cW),e(cW,e_r),e(BE,o_r),e(ye,r_r),e(ye,PE),e(PE,CFe),e(CFe,t_r),e(PE,a_r),e(PE,mW),e(mW,n_r),e(PE,s_r),e(ye,l_r),e(ye,IE),e(IE,wFe),e(wFe,i_r),e(IE,d_r),e(IE,fW),e(fW,c_r),e(IE,m_r),e(ye,f_r),e(ye,qE),e(qE,AFe),e(AFe,g_r),e(qE,h_r),e(qE,gW),e(gW,u_r),e(qE,p_r),e(ye,__r),e(ye,NE),e(NE,yFe),e(yFe,b_r),e(NE,F_r),e(NE,hW),e(hW,v_r),e(NE,T_r),e(ye,M_r),e(ye,jE),e(jE,LFe),e(LFe,E_r),e(jE,C_r),e(jE,uW),e(uW,w_r),e(jE,A_r),e(ye,y_r),e(ye,DE),e(DE,xFe),e(xFe,L_r),e(DE,x_r),e(DE,pW),e(pW,$_r),e(DE,k_r),e(ye,S_r),e(ye,GE),e(GE,$Fe),e($Fe,R_r),e(GE,B_r),e(GE,_W),e(_W,P_r),e(GE,I_r),e($r,q_r),M(OE,$r,null),b(m,HIe,_),b(m,rc,_),e(rc,VE),e(VE,kFe),M(nx,kFe,null),e(rc,N_r),e(rc,SFe),e(SFe,j_r),b(m,UIe,_),b(m,tr,_),M(sx,tr,null),e(tr,D_r),e(tr,tc),e(tc,G_r),e(tc,bW),e(bW,O_r),e(tc,V_r),e(tc,FW),e(FW,X_r),e(tc,z_r),e(tr,Q_r),e(tr,lx),e(lx,W_r),e(lx,RFe),e(RFe,H_r),e(lx,U_r),e(tr,J_r),e(tr,kt),M(ix,kt,null),e(kt,Y_r),e(kt,BFe),e(BFe,K_r),e(kt,Z_r),e(kt,ac),e(ac,ebr),e(ac,PFe),e(PFe,obr),e(ac,rbr),e(ac,vW),e(vW,tbr),e(ac,abr),e(kt,nbr),M(XE,kt,null),e(tr,sbr),e(tr,kr),M(dx,kr,null),e(kr,lbr),e(kr,IFe),e(IFe,ibr),e(kr,dbr),e(kr,an),e(an,cbr),e(an,qFe),e(qFe,mbr),e(an,fbr),e(an,NFe),e(NFe,gbr),e(an,hbr),e(an,jFe),e(jFe,ubr),e(an,pbr),e(kr,_br),e(kr,Z),e(Z,zE),e(zE,DFe),e(DFe,bbr),e(zE,Fbr),e(zE,TW),e(TW,vbr),e(zE,Tbr),e(Z,Mbr),e(Z,QE),e(QE,GFe),e(GFe,Ebr),e(QE,Cbr),e(QE,MW),e(MW,wbr),e(QE,Abr),e(Z,ybr),e(Z,WE),e(WE,OFe),e(OFe,Lbr),e(WE,xbr),e(WE,EW),e(EW,$br),e(WE,kbr),e(Z,Sbr),e(Z,HE),e(HE,VFe),e(VFe,Rbr),e(HE,Bbr),e(HE,CW),e(CW,Pbr),e(HE,Ibr),e(Z,qbr),e(Z,UE),e(UE,XFe),e(XFe,Nbr),e(UE,jbr),e(UE,wW),e(wW,Dbr),e(UE,Gbr),e(Z,Obr),e(Z,JE),e(JE,zFe),e(zFe,Vbr),e(JE,Xbr),e(JE,AW),e(AW,zbr),e(JE,Qbr),e(Z,Wbr),e(Z,YE),e(YE,QFe),e(QFe,Hbr),e(YE,Ubr),e(YE,yW),e(yW,Jbr),e(YE,Ybr),e(Z,Kbr),e(Z,KE),e(KE,WFe),e(WFe,Zbr),e(KE,e2r),e(KE,LW),e(LW,o2r),e(KE,r2r),e(Z,t2r),e(Z,ZE),e(ZE,HFe),e(HFe,a2r),e(ZE,n2r),e(ZE,xW),e(xW,s2r),e(ZE,l2r),e(Z,i2r),e(Z,e5),e(e5,UFe),e(UFe,d2r),e(e5,c2r),e(e5,$W),e($W,m2r),e(e5,f2r),e(Z,g2r),e(Z,o5),e(o5,JFe),e(JFe,h2r),e(o5,u2r),e(o5,kW),e(kW,p2r),e(o5,_2r),e(Z,b2r),e(Z,r5),e(r5,YFe),e(YFe,F2r),e(r5,v2r),e(r5,SW),e(SW,T2r),e(r5,M2r),e(Z,E2r),e(Z,t5),e(t5,KFe),e(KFe,C2r),e(t5,w2r),e(t5,RW),e(RW,A2r),e(t5,y2r),e(Z,L2r),e(Z,a5),e(a5,ZFe),e(ZFe,x2r),e(a5,$2r),e(a5,BW),e(BW,k2r),e(a5,S2r),e(Z,R2r),e(Z,n5),e(n5,eve),e(eve,B2r),e(n5,P2r),e(n5,PW),e(PW,I2r),e(n5,q2r),e(Z,N2r),e(Z,s5),e(s5,ove),e(ove,j2r),e(s5,D2r),e(s5,IW),e(IW,G2r),e(s5,O2r),e(Z,V2r),e(Z,l5),e(l5,rve),e(rve,X2r),e(l5,z2r),e(l5,qW),e(qW,Q2r),e(l5,W2r),e(Z,H2r),e(Z,i5),e(i5,tve),e(tve,U2r),e(i5,J2r),e(i5,NW),e(NW,Y2r),e(i5,K2r),e(Z,Z2r),e(Z,d5),e(d5,ave),e(ave,eFr),e(d5,oFr),e(d5,jW),e(jW,rFr),e(d5,tFr),e(Z,aFr),e(Z,c5),e(c5,nve),e(nve,nFr),e(c5,sFr),e(c5,DW),e(DW,lFr),e(c5,iFr),e(Z,dFr),e(Z,m5),e(m5,sve),e(sve,cFr),e(m5,mFr),e(m5,GW),e(GW,fFr),e(m5,gFr),e(Z,hFr),e(Z,f5),e(f5,lve),e(lve,uFr),e(f5,pFr),e(f5,OW),e(OW,_Fr),e(f5,bFr),e(Z,FFr),e(Z,g5),e(g5,ive),e(ive,vFr),e(g5,TFr),e(g5,VW),e(VW,MFr),e(g5,EFr),e(Z,CFr),e(Z,h5),e(h5,dve),e(dve,wFr),e(h5,AFr),e(h5,XW),e(XW,yFr),e(h5,LFr),e(Z,xFr),e(Z,u5),e(u5,cve),e(cve,$Fr),e(u5,kFr),e(u5,zW),e(zW,SFr),e(u5,RFr),e(Z,BFr),e(Z,p5),e(p5,mve),e(mve,PFr),e(p5,IFr),e(p5,QW),e(QW,qFr),e(p5,NFr),e(kr,jFr),M(_5,kr,null),b(m,JIe,_),b(m,nc,_),e(nc,b5),e(b5,fve),M(cx,fve,null),e(nc,DFr),e(nc,gve),e(gve,GFr),b(m,YIe,_),b(m,ar,_),M(mx,ar,null),e(ar,OFr),e(ar,sc),e(sc,VFr),e(sc,WW),e(WW,XFr),e(sc,zFr),e(sc,HW),e(HW,QFr),e(sc,WFr),e(ar,HFr),e(ar,fx),e(fx,UFr),e(fx,hve),e(hve,JFr),e(fx,YFr),e(ar,KFr),e(ar,St),M(gx,St,null),e(St,ZFr),e(St,uve),e(uve,evr),e(St,ovr),e(St,lc),e(lc,rvr),e(lc,pve),e(pve,tvr),e(lc,avr),e(lc,UW),e(UW,nvr),e(lc,svr),e(St,lvr),M(F5,St,null),e(ar,ivr),e(ar,Sr),M(hx,Sr,null),e(Sr,dvr),e(Sr,_ve),e(_ve,cvr),e(Sr,mvr),e(Sr,nn),e(nn,fvr),e(nn,bve),e(bve,gvr),e(nn,hvr),e(nn,Fve),e(Fve,uvr),e(nn,pvr),e(nn,vve),e(vve,_vr),e(nn,bvr),e(Sr,Fvr),e(Sr,he),e(he,v5),e(v5,Tve),e(Tve,vvr),e(v5,Tvr),e(v5,JW),e(JW,Mvr),e(v5,Evr),e(he,Cvr),e(he,T5),e(T5,Mve),e(Mve,wvr),e(T5,Avr),e(T5,YW),e(YW,yvr),e(T5,Lvr),e(he,xvr),e(he,M5),e(M5,Eve),e(Eve,$vr),e(M5,kvr),e(M5,KW),e(KW,Svr),e(M5,Rvr),e(he,Bvr),e(he,E5),e(E5,Cve),e(Cve,Pvr),e(E5,Ivr),e(E5,ZW),e(ZW,qvr),e(E5,Nvr),e(he,jvr),e(he,C5),e(C5,wve),e(wve,Dvr),e(C5,Gvr),e(C5,eH),e(eH,Ovr),e(C5,Vvr),e(he,Xvr),e(he,w5),e(w5,Ave),e(Ave,zvr),e(w5,Qvr),e(w5,oH),e(oH,Wvr),e(w5,Hvr),e(he,Uvr),e(he,A5),e(A5,yve),e(yve,Jvr),e(A5,Yvr),e(A5,rH),e(rH,Kvr),e(A5,Zvr),e(he,e1r),e(he,y5),e(y5,Lve),e(Lve,o1r),e(y5,r1r),e(y5,tH),e(tH,t1r),e(y5,a1r),e(he,n1r),e(he,L5),e(L5,xve),e(xve,s1r),e(L5,l1r),e(L5,aH),e(aH,i1r),e(L5,d1r),e(he,c1r),e(he,x5),e(x5,$ve),e($ve,m1r),e(x5,f1r),e(x5,nH),e(nH,g1r),e(x5,h1r),e(he,u1r),e(he,$5),e($5,kve),e(kve,p1r),e($5,_1r),e($5,sH),e(sH,b1r),e($5,F1r),e(he,v1r),e(he,k5),e(k5,Sve),e(Sve,T1r),e(k5,M1r),e(k5,lH),e(lH,E1r),e(k5,C1r),e(he,w1r),e(he,S5),e(S5,Rve),e(Rve,A1r),e(S5,y1r),e(S5,iH),e(iH,L1r),e(S5,x1r),e(he,$1r),e(he,R5),e(R5,Bve),e(Bve,k1r),e(R5,S1r),e(R5,dH),e(dH,R1r),e(R5,B1r),e(he,P1r),e(he,B5),e(B5,Pve),e(Pve,I1r),e(B5,q1r),e(B5,cH),e(cH,N1r),e(B5,j1r),e(he,D1r),e(he,P5),e(P5,Ive),e(Ive,G1r),e(P5,O1r),e(P5,mH),e(mH,V1r),e(P5,X1r),e(he,z1r),e(he,I5),e(I5,qve),e(qve,Q1r),e(I5,W1r),e(I5,fH),e(fH,H1r),e(I5,U1r),e(Sr,J1r),M(q5,Sr,null),b(m,KIe,_),b(m,ic,_),e(ic,N5),e(N5,Nve),M(ux,Nve,null),e(ic,Y1r),e(ic,jve),e(jve,K1r),b(m,ZIe,_),b(m,nr,_),M(px,nr,null),e(nr,Z1r),e(nr,dc),e(dc,eTr),e(dc,gH),e(gH,oTr),e(dc,rTr),e(dc,hH),e(hH,tTr),e(dc,aTr),e(nr,nTr),e(nr,_x),e(_x,sTr),e(_x,Dve),e(Dve,lTr),e(_x,iTr),e(nr,dTr),e(nr,Rt),M(bx,Rt,null),e(Rt,cTr),e(Rt,Gve),e(Gve,mTr),e(Rt,fTr),e(Rt,cc),e(cc,gTr),e(cc,Ove),e(Ove,hTr),e(cc,uTr),e(cc,uH),e(uH,pTr),e(cc,_Tr),e(Rt,bTr),M(j5,Rt,null),e(nr,FTr),e(nr,Rr),M(Fx,Rr,null),e(Rr,vTr),e(Rr,Vve),e(Vve,TTr),e(Rr,MTr),e(Rr,sn),e(sn,ETr),e(sn,Xve),e(Xve,CTr),e(sn,wTr),e(sn,zve),e(zve,ATr),e(sn,yTr),e(sn,Qve),e(Qve,LTr),e(sn,xTr),e(Rr,$Tr),e(Rr,vx),e(vx,D5),e(D5,Wve),e(Wve,kTr),e(D5,STr),e(D5,pH),e(pH,RTr),e(D5,BTr),e(vx,PTr),e(vx,G5),e(G5,Hve),e(Hve,ITr),e(G5,qTr),e(G5,_H),e(_H,NTr),e(G5,jTr),e(Rr,DTr),M(O5,Rr,null),b(m,eqe,_),b(m,mc,_),e(mc,V5),e(V5,Uve),M(Tx,Uve,null),e(mc,GTr),e(mc,Jve),e(Jve,OTr),b(m,oqe,_),b(m,sr,_),M(Mx,sr,null),e(sr,VTr),e(sr,fc),e(fc,XTr),e(fc,bH),e(bH,zTr),e(fc,QTr),e(fc,FH),e(FH,WTr),e(fc,HTr),e(sr,UTr),e(sr,Ex),e(Ex,JTr),e(Ex,Yve),e(Yve,YTr),e(Ex,KTr),e(sr,ZTr),e(sr,Bt),M(Cx,Bt,null),e(Bt,eMr),e(Bt,Kve),e(Kve,oMr),e(Bt,rMr),e(Bt,gc),e(gc,tMr),e(gc,Zve),e(Zve,aMr),e(gc,nMr),e(gc,vH),e(vH,sMr),e(gc,lMr),e(Bt,iMr),M(X5,Bt,null),e(sr,dMr),e(sr,Br),M(wx,Br,null),e(Br,cMr),e(Br,e1e),e(e1e,mMr),e(Br,fMr),e(Br,ln),e(ln,gMr),e(ln,o1e),e(o1e,hMr),e(ln,uMr),e(ln,r1e),e(r1e,pMr),e(ln,_Mr),e(ln,t1e),e(t1e,bMr),e(ln,FMr),e(Br,vMr),e(Br,a1e),e(a1e,z5),e(z5,n1e),e(n1e,TMr),e(z5,MMr),e(z5,TH),e(TH,EMr),e(z5,CMr),e(Br,wMr),M(Q5,Br,null),b(m,rqe,_),b(m,hc,_),e(hc,W5),e(W5,s1e),M(Ax,s1e,null),e(hc,AMr),e(hc,l1e),e(l1e,yMr),b(m,tqe,_),b(m,lr,_),M(yx,lr,null),e(lr,LMr),e(lr,uc),e(uc,xMr),e(uc,MH),e(MH,$Mr),e(uc,kMr),e(uc,EH),e(EH,SMr),e(uc,RMr),e(lr,BMr),e(lr,Lx),e(Lx,PMr),e(Lx,i1e),e(i1e,IMr),e(Lx,qMr),e(lr,NMr),e(lr,Pt),M(xx,Pt,null),e(Pt,jMr),e(Pt,d1e),e(d1e,DMr),e(Pt,GMr),e(Pt,pc),e(pc,OMr),e(pc,c1e),e(c1e,VMr),e(pc,XMr),e(pc,CH),e(CH,zMr),e(pc,QMr),e(Pt,WMr),M(H5,Pt,null),e(lr,HMr),e(lr,Pr),M($x,Pr,null),e(Pr,UMr),e(Pr,m1e),e(m1e,JMr),e(Pr,YMr),e(Pr,dn),e(dn,KMr),e(dn,f1e),e(f1e,ZMr),e(dn,e4r),e(dn,g1e),e(g1e,o4r),e(dn,r4r),e(dn,h1e),e(h1e,t4r),e(dn,a4r),e(Pr,n4r),e(Pr,de),e(de,U5),e(U5,u1e),e(u1e,s4r),e(U5,l4r),e(U5,wH),e(wH,i4r),e(U5,d4r),e(de,c4r),e(de,J5),e(J5,p1e),e(p1e,m4r),e(J5,f4r),e(J5,AH),e(AH,g4r),e(J5,h4r),e(de,u4r),e(de,Y5),e(Y5,_1e),e(_1e,p4r),e(Y5,_4r),e(Y5,yH),e(yH,b4r),e(Y5,F4r),e(de,v4r),e(de,K5),e(K5,b1e),e(b1e,T4r),e(K5,M4r),e(K5,LH),e(LH,E4r),e(K5,C4r),e(de,w4r),e(de,Z5),e(Z5,F1e),e(F1e,A4r),e(Z5,y4r),e(Z5,xH),e(xH,L4r),e(Z5,x4r),e(de,$4r),e(de,eC),e(eC,v1e),e(v1e,k4r),e(eC,S4r),e(eC,$H),e($H,R4r),e(eC,B4r),e(de,P4r),e(de,oC),e(oC,T1e),e(T1e,I4r),e(oC,q4r),e(oC,kH),e(kH,N4r),e(oC,j4r),e(de,D4r),e(de,rC),e(rC,M1e),e(M1e,G4r),e(rC,O4r),e(rC,SH),e(SH,V4r),e(rC,X4r),e(de,z4r),e(de,tC),e(tC,E1e),e(E1e,Q4r),e(tC,W4r),e(tC,RH),e(RH,H4r),e(tC,U4r),e(de,J4r),e(de,aC),e(aC,C1e),e(C1e,Y4r),e(aC,K4r),e(aC,BH),e(BH,Z4r),e(aC,eEr),e(de,oEr),e(de,nC),e(nC,w1e),e(w1e,rEr),e(nC,tEr),e(nC,PH),e(PH,aEr),e(nC,nEr),e(de,sEr),e(de,sC),e(sC,A1e),e(A1e,lEr),e(sC,iEr),e(sC,IH),e(IH,dEr),e(sC,cEr),e(de,mEr),e(de,lC),e(lC,y1e),e(y1e,fEr),e(lC,gEr),e(lC,qH),e(qH,hEr),e(lC,uEr),e(de,pEr),e(de,iC),e(iC,L1e),e(L1e,_Er),e(iC,bEr),e(iC,NH),e(NH,FEr),e(iC,vEr),e(de,TEr),e(de,dC),e(dC,x1e),e(x1e,MEr),e(dC,EEr),e(dC,jH),e(jH,CEr),e(dC,wEr),e(de,AEr),e(de,cC),e(cC,$1e),e($1e,yEr),e(cC,LEr),e(cC,DH),e(DH,xEr),e(cC,$Er),e(de,kEr),e(de,mC),e(mC,k1e),e(k1e,SEr),e(mC,REr),e(mC,GH),e(GH,BEr),e(mC,PEr),e(de,IEr),e(de,fC),e(fC,S1e),e(S1e,qEr),e(fC,NEr),e(fC,OH),e(OH,jEr),e(fC,DEr),e(de,GEr),e(de,gC),e(gC,R1e),e(R1e,OEr),e(gC,VEr),e(gC,VH),e(VH,XEr),e(gC,zEr),e(de,QEr),e(de,hC),e(hC,B1e),e(B1e,WEr),e(hC,HEr),e(hC,XH),e(XH,UEr),e(hC,JEr),e(Pr,YEr),M(uC,Pr,null),b(m,aqe,_),b(m,_c,_),e(_c,pC),e(pC,P1e),M(kx,P1e,null),e(_c,KEr),e(_c,I1e),e(I1e,ZEr),b(m,nqe,_),b(m,ir,_),M(Sx,ir,null),e(ir,e5r),e(ir,bc),e(bc,o5r),e(bc,zH),e(zH,r5r),e(bc,t5r),e(bc,QH),e(QH,a5r),e(bc,n5r),e(ir,s5r),e(ir,Rx),e(Rx,l5r),e(Rx,q1e),e(q1e,i5r),e(Rx,d5r),e(ir,c5r),e(ir,It),M(Bx,It,null),e(It,m5r),e(It,N1e),e(N1e,f5r),e(It,g5r),e(It,Fc),e(Fc,h5r),e(Fc,j1e),e(j1e,u5r),e(Fc,p5r),e(Fc,WH),e(WH,_5r),e(Fc,b5r),e(It,F5r),M(_C,It,null),e(ir,v5r),e(ir,Ir),M(Px,Ir,null),e(Ir,T5r),e(Ir,D1e),e(D1e,M5r),e(Ir,E5r),e(Ir,cn),e(cn,C5r),e(cn,G1e),e(G1e,w5r),e(cn,A5r),e(cn,O1e),e(O1e,y5r),e(cn,L5r),e(cn,V1e),e(V1e,x5r),e(cn,$5r),e(Ir,k5r),e(Ir,ce),e(ce,bC),e(bC,X1e),e(X1e,S5r),e(bC,R5r),e(bC,HH),e(HH,B5r),e(bC,P5r),e(ce,I5r),e(ce,FC),e(FC,z1e),e(z1e,q5r),e(FC,N5r),e(FC,UH),e(UH,j5r),e(FC,D5r),e(ce,G5r),e(ce,vC),e(vC,Q1e),e(Q1e,O5r),e(vC,V5r),e(vC,JH),e(JH,X5r),e(vC,z5r),e(ce,Q5r),e(ce,TC),e(TC,W1e),e(W1e,W5r),e(TC,H5r),e(TC,YH),e(YH,U5r),e(TC,J5r),e(ce,Y5r),e(ce,MC),e(MC,H1e),e(H1e,K5r),e(MC,Z5r),e(MC,KH),e(KH,eCr),e(MC,oCr),e(ce,rCr),e(ce,EC),e(EC,U1e),e(U1e,tCr),e(EC,aCr),e(EC,ZH),e(ZH,nCr),e(EC,sCr),e(ce,lCr),e(ce,CC),e(CC,J1e),e(J1e,iCr),e(CC,dCr),e(CC,eU),e(eU,cCr),e(CC,mCr),e(ce,fCr),e(ce,wC),e(wC,Y1e),e(Y1e,gCr),e(wC,hCr),e(wC,oU),e(oU,uCr),e(wC,pCr),e(ce,_Cr),e(ce,AC),e(AC,K1e),e(K1e,bCr),e(AC,FCr),e(AC,rU),e(rU,vCr),e(AC,TCr),e(ce,MCr),e(ce,yC),e(yC,Z1e),e(Z1e,ECr),e(yC,CCr),e(yC,tU),e(tU,wCr),e(yC,ACr),e(ce,yCr),e(ce,LC),e(LC,eTe),e(eTe,LCr),e(LC,xCr),e(LC,aU),e(aU,$Cr),e(LC,kCr),e(ce,SCr),e(ce,xC),e(xC,oTe),e(oTe,RCr),e(xC,BCr),e(xC,nU),e(nU,PCr),e(xC,ICr),e(ce,qCr),e(ce,$C),e($C,rTe),e(rTe,NCr),e($C,jCr),e($C,sU),e(sU,DCr),e($C,GCr),e(ce,OCr),e(ce,kC),e(kC,tTe),e(tTe,VCr),e(kC,XCr),e(kC,lU),e(lU,zCr),e(kC,QCr),e(ce,WCr),e(ce,SC),e(SC,aTe),e(aTe,HCr),e(SC,UCr),e(SC,iU),e(iU,JCr),e(SC,YCr),e(ce,KCr),e(ce,RC),e(RC,nTe),e(nTe,ZCr),e(RC,e3r),e(RC,dU),e(dU,o3r),e(RC,r3r),e(ce,t3r),e(ce,BC),e(BC,sTe),e(sTe,a3r),e(BC,n3r),e(BC,cU),e(cU,s3r),e(BC,l3r),e(ce,i3r),e(ce,PC),e(PC,lTe),e(lTe,d3r),e(PC,c3r),e(PC,mU),e(mU,m3r),e(PC,f3r),e(ce,g3r),e(ce,IC),e(IC,iTe),e(iTe,h3r),e(IC,u3r),e(IC,fU),e(fU,p3r),e(IC,_3r),e(ce,b3r),e(ce,qC),e(qC,dTe),e(dTe,F3r),e(qC,v3r),e(qC,gU),e(gU,T3r),e(qC,M3r),e(Ir,E3r),M(NC,Ir,null),b(m,sqe,_),b(m,vc,_),e(vc,jC),e(jC,cTe),M(Ix,cTe,null),e(vc,C3r),e(vc,mTe),e(mTe,w3r),b(m,lqe,_),b(m,dr,_),M(qx,dr,null),e(dr,A3r),e(dr,Tc),e(Tc,y3r),e(Tc,hU),e(hU,L3r),e(Tc,x3r),e(Tc,uU),e(uU,$3r),e(Tc,k3r),e(dr,S3r),e(dr,Nx),e(Nx,R3r),e(Nx,fTe),e(fTe,B3r),e(Nx,P3r),e(dr,I3r),e(dr,qt),M(jx,qt,null),e(qt,q3r),e(qt,gTe),e(gTe,N3r),e(qt,j3r),e(qt,Mc),e(Mc,D3r),e(Mc,hTe),e(hTe,G3r),e(Mc,O3r),e(Mc,pU),e(pU,V3r),e(Mc,X3r),e(qt,z3r),M(DC,qt,null),e(dr,Q3r),e(dr,qr),M(Dx,qr,null),e(qr,W3r),e(qr,uTe),e(uTe,H3r),e(qr,U3r),e(qr,mn),e(mn,J3r),e(mn,pTe),e(pTe,Y3r),e(mn,K3r),e(mn,_Te),e(_Te,Z3r),e(mn,ewr),e(mn,bTe),e(bTe,owr),e(mn,rwr),e(qr,twr),e(qr,FTe),e(FTe,GC),e(GC,vTe),e(vTe,awr),e(GC,nwr),e(GC,_U),e(_U,swr),e(GC,lwr),e(qr,iwr),M(OC,qr,null),b(m,iqe,_),b(m,Ec,_),e(Ec,VC),e(VC,TTe),M(Gx,TTe,null),e(Ec,dwr),e(Ec,MTe),e(MTe,cwr),b(m,dqe,_),b(m,cr,_),M(Ox,cr,null),e(cr,mwr),e(cr,Cc),e(Cc,fwr),e(Cc,bU),e(bU,gwr),e(Cc,hwr),e(Cc,FU),e(FU,uwr),e(Cc,pwr),e(cr,_wr),e(cr,Vx),e(Vx,bwr),e(Vx,ETe),e(ETe,Fwr),e(Vx,vwr),e(cr,Twr),e(cr,Nt),M(Xx,Nt,null),e(Nt,Mwr),e(Nt,CTe),e(CTe,Ewr),e(Nt,Cwr),e(Nt,wc),e(wc,wwr),e(wc,wTe),e(wTe,Awr),e(wc,ywr),e(wc,vU),e(vU,Lwr),e(wc,xwr),e(Nt,$wr),M(XC,Nt,null),e(cr,kwr),e(cr,Nr),M(zx,Nr,null),e(Nr,Swr),e(Nr,ATe),e(ATe,Rwr),e(Nr,Bwr),e(Nr,fn),e(fn,Pwr),e(fn,yTe),e(yTe,Iwr),e(fn,qwr),e(fn,LTe),e(LTe,Nwr),e(fn,jwr),e(fn,xTe),e(xTe,Dwr),e(fn,Gwr),e(Nr,Owr),e(Nr,$Te),e($Te,zC),e(zC,kTe),e(kTe,Vwr),e(zC,Xwr),e(zC,TU),e(TU,zwr),e(zC,Qwr),e(Nr,Wwr),M(QC,Nr,null),b(m,cqe,_),b(m,Ac,_),e(Ac,WC),e(WC,STe),M(Qx,STe,null),e(Ac,Hwr),e(Ac,RTe),e(RTe,Uwr),b(m,mqe,_),b(m,mr,_),M(Wx,mr,null),e(mr,Jwr),e(mr,yc),e(yc,Ywr),e(yc,MU),e(MU,Kwr),e(yc,Zwr),e(yc,EU),e(EU,eAr),e(yc,oAr),e(mr,rAr),e(mr,Hx),e(Hx,tAr),e(Hx,BTe),e(BTe,aAr),e(Hx,nAr),e(mr,sAr),e(mr,jt),M(Ux,jt,null),e(jt,lAr),e(jt,PTe),e(PTe,iAr),e(jt,dAr),e(jt,Lc),e(Lc,cAr),e(Lc,ITe),e(ITe,mAr),e(Lc,fAr),e(Lc,CU),e(CU,gAr),e(Lc,hAr),e(jt,uAr),M(HC,jt,null),e(mr,pAr),e(mr,jr),M(Jx,jr,null),e(jr,_Ar),e(jr,qTe),e(qTe,bAr),e(jr,FAr),e(jr,gn),e(gn,vAr),e(gn,NTe),e(NTe,TAr),e(gn,MAr),e(gn,jTe),e(jTe,EAr),e(gn,CAr),e(gn,DTe),e(DTe,wAr),e(gn,AAr),e(jr,yAr),e(jr,re),e(re,UC),e(UC,GTe),e(GTe,LAr),e(UC,xAr),e(UC,wU),e(wU,$Ar),e(UC,kAr),e(re,SAr),e(re,JC),e(JC,OTe),e(OTe,RAr),e(JC,BAr),e(JC,AU),e(AU,PAr),e(JC,IAr),e(re,qAr),e(re,YC),e(YC,VTe),e(VTe,NAr),e(YC,jAr),e(YC,yU),e(yU,DAr),e(YC,GAr),e(re,OAr),e(re,KC),e(KC,XTe),e(XTe,VAr),e(KC,XAr),e(KC,LU),e(LU,zAr),e(KC,QAr),e(re,WAr),e(re,ZC),e(ZC,zTe),e(zTe,HAr),e(ZC,UAr),e(ZC,xU),e(xU,JAr),e(ZC,YAr),e(re,KAr),e(re,e3),e(e3,QTe),e(QTe,ZAr),e(e3,e0r),e(e3,$U),e($U,o0r),e(e3,r0r),e(re,t0r),e(re,o3),e(o3,WTe),e(WTe,a0r),e(o3,n0r),e(o3,kU),e(kU,s0r),e(o3,l0r),e(re,i0r),e(re,r3),e(r3,HTe),e(HTe,d0r),e(r3,c0r),e(r3,SU),e(SU,m0r),e(r3,f0r),e(re,g0r),e(re,t3),e(t3,UTe),e(UTe,h0r),e(t3,u0r),e(t3,RU),e(RU,p0r),e(t3,_0r),e(re,b0r),e(re,a3),e(a3,JTe),e(JTe,F0r),e(a3,v0r),e(a3,BU),e(BU,T0r),e(a3,M0r),e(re,E0r),e(re,n3),e(n3,YTe),e(YTe,C0r),e(n3,w0r),e(n3,PU),e(PU,A0r),e(n3,y0r),e(re,L0r),e(re,s3),e(s3,KTe),e(KTe,x0r),e(s3,$0r),e(s3,IU),e(IU,k0r),e(s3,S0r),e(re,R0r),e(re,l3),e(l3,ZTe),e(ZTe,B0r),e(l3,P0r),e(l3,qU),e(qU,I0r),e(l3,q0r),e(re,N0r),e(re,i3),e(i3,eMe),e(eMe,j0r),e(i3,D0r),e(i3,NU),e(NU,G0r),e(i3,O0r),e(re,V0r),e(re,d3),e(d3,oMe),e(oMe,X0r),e(d3,z0r),e(d3,jU),e(jU,Q0r),e(d3,W0r),e(re,H0r),e(re,c3),e(c3,rMe),e(rMe,U0r),e(c3,J0r),e(c3,DU),e(DU,Y0r),e(c3,K0r),e(re,Z0r),e(re,m3),e(m3,tMe),e(tMe,e6r),e(m3,o6r),e(m3,GU),e(GU,r6r),e(m3,t6r),e(re,a6r),e(re,f3),e(f3,aMe),e(aMe,n6r),e(f3,s6r),e(f3,OU),e(OU,l6r),e(f3,i6r),e(re,d6r),e(re,g3),e(g3,nMe),e(nMe,c6r),e(g3,m6r),e(g3,VU),e(VU,f6r),e(g3,g6r),e(re,h6r),e(re,h3),e(h3,sMe),e(sMe,u6r),e(h3,p6r),e(h3,XU),e(XU,_6r),e(h3,b6r),e(re,F6r),e(re,u3),e(u3,lMe),e(lMe,v6r),e(u3,T6r),e(u3,zU),e(zU,M6r),e(u3,E6r),e(re,C6r),e(re,p3),e(p3,iMe),e(iMe,w6r),e(p3,A6r),e(p3,QU),e(QU,y6r),e(p3,L6r),e(re,x6r),e(re,_3),e(_3,dMe),e(dMe,$6r),e(_3,k6r),e(_3,WU),e(WU,S6r),e(_3,R6r),e(re,B6r),e(re,b3),e(b3,cMe),e(cMe,P6r),e(b3,I6r),e(b3,HU),e(HU,q6r),e(b3,N6r),e(re,j6r),e(re,F3),e(F3,mMe),e(mMe,D6r),e(F3,G6r),e(F3,UU),e(UU,O6r),e(F3,V6r),e(jr,X6r),M(v3,jr,null),b(m,fqe,_),b(m,xc,_),e(xc,T3),e(T3,fMe),M(Yx,fMe,null),e(xc,z6r),e(xc,gMe),e(gMe,Q6r),b(m,gqe,_),b(m,fr,_),M(Kx,fr,null),e(fr,W6r),e(fr,$c),e($c,H6r),e($c,JU),e(JU,U6r),e($c,J6r),e($c,YU),e(YU,Y6r),e($c,K6r),e(fr,Z6r),e(fr,Zx),e(Zx,eyr),e(Zx,hMe),e(hMe,oyr),e(Zx,ryr),e(fr,tyr),e(fr,Dt),M(e7,Dt,null),e(Dt,ayr),e(Dt,uMe),e(uMe,nyr),e(Dt,syr),e(Dt,kc),e(kc,lyr),e(kc,pMe),e(pMe,iyr),e(kc,dyr),e(kc,KU),e(KU,cyr),e(kc,myr),e(Dt,fyr),M(M3,Dt,null),e(fr,gyr),e(fr,Dr),M(o7,Dr,null),e(Dr,hyr),e(Dr,_Me),e(_Me,uyr),e(Dr,pyr),e(Dr,hn),e(hn,_yr),e(hn,bMe),e(bMe,byr),e(hn,Fyr),e(hn,FMe),e(FMe,vyr),e(hn,Tyr),e(hn,vMe),e(vMe,Myr),e(hn,Eyr),e(Dr,Cyr),e(Dr,ke),e(ke,E3),e(E3,TMe),e(TMe,wyr),e(E3,Ayr),e(E3,ZU),e(ZU,yyr),e(E3,Lyr),e(ke,xyr),e(ke,C3),e(C3,MMe),e(MMe,$yr),e(C3,kyr),e(C3,eJ),e(eJ,Syr),e(C3,Ryr),e(ke,Byr),e(ke,w3),e(w3,EMe),e(EMe,Pyr),e(w3,Iyr),e(w3,oJ),e(oJ,qyr),e(w3,Nyr),e(ke,jyr),e(ke,A3),e(A3,CMe),e(CMe,Dyr),e(A3,Gyr),e(A3,rJ),e(rJ,Oyr),e(A3,Vyr),e(ke,Xyr),e(ke,y3),e(y3,wMe),e(wMe,zyr),e(y3,Qyr),e(y3,tJ),e(tJ,Wyr),e(y3,Hyr),e(ke,Uyr),e(ke,L3),e(L3,AMe),e(AMe,Jyr),e(L3,Yyr),e(L3,aJ),e(aJ,Kyr),e(L3,Zyr),e(ke,eLr),e(ke,x3),e(x3,yMe),e(yMe,oLr),e(x3,rLr),e(x3,nJ),e(nJ,tLr),e(x3,aLr),e(ke,nLr),e(ke,$3),e($3,LMe),e(LMe,sLr),e($3,lLr),e($3,sJ),e(sJ,iLr),e($3,dLr),e(ke,cLr),e(ke,k3),e(k3,xMe),e(xMe,mLr),e(k3,fLr),e(k3,lJ),e(lJ,gLr),e(k3,hLr),e(Dr,uLr),M(S3,Dr,null),b(m,hqe,_),b(m,Sc,_),e(Sc,R3),e(R3,$Me),M(r7,$Me,null),e(Sc,pLr),e(Sc,kMe),e(kMe,_Lr),b(m,uqe,_),b(m,gr,_),M(t7,gr,null),e(gr,bLr),e(gr,Rc),e(Rc,FLr),e(Rc,iJ),e(iJ,vLr),e(Rc,TLr),e(Rc,dJ),e(dJ,MLr),e(Rc,ELr),e(gr,CLr),e(gr,a7),e(a7,wLr),e(a7,SMe),e(SMe,ALr),e(a7,yLr),e(gr,LLr),e(gr,Gt),M(n7,Gt,null),e(Gt,xLr),e(Gt,RMe),e(RMe,$Lr),e(Gt,kLr),e(Gt,Bc),e(Bc,SLr),e(Bc,BMe),e(BMe,RLr),e(Bc,BLr),e(Bc,cJ),e(cJ,PLr),e(Bc,ILr),e(Gt,qLr),M(B3,Gt,null),e(gr,NLr),e(gr,Gr),M(s7,Gr,null),e(Gr,jLr),e(Gr,PMe),e(PMe,DLr),e(Gr,GLr),e(Gr,un),e(un,OLr),e(un,IMe),e(IMe,VLr),e(un,XLr),e(un,qMe),e(qMe,zLr),e(un,QLr),e(un,NMe),e(NMe,WLr),e(un,HLr),e(Gr,ULr),e(Gr,Me),e(Me,P3),e(P3,jMe),e(jMe,JLr),e(P3,YLr),e(P3,mJ),e(mJ,KLr),e(P3,ZLr),e(Me,e8r),e(Me,I3),e(I3,DMe),e(DMe,o8r),e(I3,r8r),e(I3,fJ),e(fJ,t8r),e(I3,a8r),e(Me,n8r),e(Me,q3),e(q3,GMe),e(GMe,s8r),e(q3,l8r),e(q3,gJ),e(gJ,i8r),e(q3,d8r),e(Me,c8r),e(Me,N3),e(N3,OMe),e(OMe,m8r),e(N3,f8r),e(N3,hJ),e(hJ,g8r),e(N3,h8r),e(Me,u8r),e(Me,j3),e(j3,VMe),e(VMe,p8r),e(j3,_8r),e(j3,uJ),e(uJ,b8r),e(j3,F8r),e(Me,v8r),e(Me,D3),e(D3,XMe),e(XMe,T8r),e(D3,M8r),e(D3,pJ),e(pJ,E8r),e(D3,C8r),e(Me,w8r),e(Me,G3),e(G3,zMe),e(zMe,A8r),e(G3,y8r),e(G3,_J),e(_J,L8r),e(G3,x8r),e(Me,$8r),e(Me,O3),e(O3,QMe),e(QMe,k8r),e(O3,S8r),e(O3,bJ),e(bJ,R8r),e(O3,B8r),e(Me,P8r),e(Me,V3),e(V3,WMe),e(WMe,I8r),e(V3,q8r),e(V3,FJ),e(FJ,N8r),e(V3,j8r),e(Me,D8r),e(Me,X3),e(X3,HMe),e(HMe,G8r),e(X3,O8r),e(X3,vJ),e(vJ,V8r),e(X3,X8r),e(Me,z8r),e(Me,z3),e(z3,UMe),e(UMe,Q8r),e(z3,W8r),e(z3,TJ),e(TJ,H8r),e(z3,U8r),e(Me,J8r),e(Me,Q3),e(Q3,JMe),e(JMe,Y8r),e(Q3,K8r),e(Q3,MJ),e(MJ,Z8r),e(Q3,exr),e(Gr,oxr),M(W3,Gr,null),b(m,pqe,_),b(m,Pc,_),e(Pc,H3),e(H3,YMe),M(l7,YMe,null),e(Pc,rxr),e(Pc,KMe),e(KMe,txr),b(m,_qe,_),b(m,hr,_),M(i7,hr,null),e(hr,axr),e(hr,Ic),e(Ic,nxr),e(Ic,EJ),e(EJ,sxr),e(Ic,lxr),e(Ic,CJ),e(CJ,ixr),e(Ic,dxr),e(hr,cxr),e(hr,d7),e(d7,mxr),e(d7,ZMe),e(ZMe,fxr),e(d7,gxr),e(hr,hxr),e(hr,Ot),M(c7,Ot,null),e(Ot,uxr),e(Ot,e4e),e(e4e,pxr),e(Ot,_xr),e(Ot,qc),e(qc,bxr),e(qc,o4e),e(o4e,Fxr),e(qc,vxr),e(qc,wJ),e(wJ,Txr),e(qc,Mxr),e(Ot,Exr),M(U3,Ot,null),e(hr,Cxr),e(hr,Or),M(m7,Or,null),e(Or,wxr),e(Or,r4e),e(r4e,Axr),e(Or,yxr),e(Or,pn),e(pn,Lxr),e(pn,t4e),e(t4e,xxr),e(pn,$xr),e(pn,a4e),e(a4e,kxr),e(pn,Sxr),e(pn,n4e),e(n4e,Rxr),e(pn,Bxr),e(Or,Pxr),e(Or,Le),e(Le,J3),e(J3,s4e),e(s4e,Ixr),e(J3,qxr),e(J3,AJ),e(AJ,Nxr),e(J3,jxr),e(Le,Dxr),e(Le,Y3),e(Y3,l4e),e(l4e,Gxr),e(Y3,Oxr),e(Y3,yJ),e(yJ,Vxr),e(Y3,Xxr),e(Le,zxr),e(Le,K3),e(K3,i4e),e(i4e,Qxr),e(K3,Wxr),e(K3,LJ),e(LJ,Hxr),e(K3,Uxr),e(Le,Jxr),e(Le,Z3),e(Z3,d4e),e(d4e,Yxr),e(Z3,Kxr),e(Z3,xJ),e(xJ,Zxr),e(Z3,e7r),e(Le,o7r),e(Le,ew),e(ew,c4e),e(c4e,r7r),e(ew,t7r),e(ew,$J),e($J,a7r),e(ew,n7r),e(Le,s7r),e(Le,ow),e(ow,m4e),e(m4e,l7r),e(ow,i7r),e(ow,kJ),e(kJ,d7r),e(ow,c7r),e(Le,m7r),e(Le,rw),e(rw,f4e),e(f4e,f7r),e(rw,g7r),e(rw,SJ),e(SJ,h7r),e(rw,u7r),e(Le,p7r),e(Le,tw),e(tw,g4e),e(g4e,_7r),e(tw,b7r),e(tw,RJ),e(RJ,F7r),e(tw,v7r),e(Le,T7r),e(Le,aw),e(aw,h4e),e(h4e,M7r),e(aw,E7r),e(aw,BJ),e(BJ,C7r),e(aw,w7r),e(Le,A7r),e(Le,nw),e(nw,u4e),e(u4e,y7r),e(nw,L7r),e(nw,PJ),e(PJ,x7r),e(nw,$7r),e(Or,k7r),M(sw,Or,null),b(m,bqe,_),b(m,Nc,_),e(Nc,lw),e(lw,p4e),M(f7,p4e,null),e(Nc,S7r),e(Nc,_4e),e(_4e,R7r),b(m,Fqe,_),b(m,ur,_),M(g7,ur,null),e(ur,B7r),e(ur,jc),e(jc,P7r),e(jc,IJ),e(IJ,I7r),e(jc,q7r),e(jc,qJ),e(qJ,N7r),e(jc,j7r),e(ur,D7r),e(ur,h7),e(h7,G7r),e(h7,b4e),e(b4e,O7r),e(h7,V7r),e(ur,X7r),e(ur,Vt),M(u7,Vt,null),e(Vt,z7r),e(Vt,F4e),e(F4e,Q7r),e(Vt,W7r),e(Vt,Dc),e(Dc,H7r),e(Dc,v4e),e(v4e,U7r),e(Dc,J7r),e(Dc,NJ),e(NJ,Y7r),e(Dc,K7r),e(Vt,Z7r),M(iw,Vt,null),e(ur,e9r),e(ur,Vr),M(p7,Vr,null),e(Vr,o9r),e(Vr,T4e),e(T4e,r9r),e(Vr,t9r),e(Vr,_n),e(_n,a9r),e(_n,M4e),e(M4e,n9r),e(_n,s9r),e(_n,E4e),e(E4e,l9r),e(_n,i9r),e(_n,C4e),e(C4e,d9r),e(_n,c9r),e(Vr,m9r),e(Vr,Se),e(Se,dw),e(dw,w4e),e(w4e,f9r),e(dw,g9r),e(dw,jJ),e(jJ,h9r),e(dw,u9r),e(Se,p9r),e(Se,cw),e(cw,A4e),e(A4e,_9r),e(cw,b9r),e(cw,DJ),e(DJ,F9r),e(cw,v9r),e(Se,T9r),e(Se,mw),e(mw,y4e),e(y4e,M9r),e(mw,E9r),e(mw,GJ),e(GJ,C9r),e(mw,w9r),e(Se,A9r),e(Se,fw),e(fw,L4e),e(L4e,y9r),e(fw,L9r),e(fw,OJ),e(OJ,x9r),e(fw,$9r),e(Se,k9r),e(Se,gw),e(gw,x4e),e(x4e,S9r),e(gw,R9r),e(gw,VJ),e(VJ,B9r),e(gw,P9r),e(Se,I9r),e(Se,hw),e(hw,$4e),e($4e,q9r),e(hw,N9r),e(hw,XJ),e(XJ,j9r),e(hw,D9r),e(Se,G9r),e(Se,uw),e(uw,k4e),e(k4e,O9r),e(uw,V9r),e(uw,zJ),e(zJ,X9r),e(uw,z9r),e(Se,Q9r),e(Se,pw),e(pw,S4e),e(S4e,W9r),e(pw,H9r),e(pw,QJ),e(QJ,U9r),e(pw,J9r),e(Se,Y9r),e(Se,_w),e(_w,R4e),e(R4e,K9r),e(_w,Z9r),e(_w,WJ),e(WJ,e$r),e(_w,o$r),e(Vr,r$r),M(bw,Vr,null),b(m,vqe,_),b(m,Gc,_),e(Gc,Fw),e(Fw,B4e),M(_7,B4e,null),e(Gc,t$r),e(Gc,P4e),e(P4e,a$r),b(m,Tqe,_),b(m,pr,_),M(b7,pr,null),e(pr,n$r),e(pr,Oc),e(Oc,s$r),e(Oc,HJ),e(HJ,l$r),e(Oc,i$r),e(Oc,UJ),e(UJ,d$r),e(Oc,c$r),e(pr,m$r),e(pr,F7),e(F7,f$r),e(F7,I4e),e(I4e,g$r),e(F7,h$r),e(pr,u$r),e(pr,Xt),M(v7,Xt,null),e(Xt,p$r),e(Xt,q4e),e(q4e,_$r),e(Xt,b$r),e(Xt,Vc),e(Vc,F$r),e(Vc,N4e),e(N4e,v$r),e(Vc,T$r),e(Vc,JJ),e(JJ,M$r),e(Vc,E$r),e(Xt,C$r),M(vw,Xt,null),e(pr,w$r),e(pr,Xr),M(T7,Xr,null),e(Xr,A$r),e(Xr,j4e),e(j4e,y$r),e(Xr,L$r),e(Xr,bn),e(bn,x$r),e(bn,D4e),e(D4e,$$r),e(bn,k$r),e(bn,G4e),e(G4e,S$r),e(bn,R$r),e(bn,O4e),e(O4e,B$r),e(bn,P$r),e(Xr,I$r),e(Xr,xe),e(xe,Tw),e(Tw,V4e),e(V4e,q$r),e(Tw,N$r),e(Tw,YJ),e(YJ,j$r),e(Tw,D$r),e(xe,G$r),e(xe,Mw),e(Mw,X4e),e(X4e,O$r),e(Mw,V$r),e(Mw,KJ),e(KJ,X$r),e(Mw,z$r),e(xe,Q$r),e(xe,Ew),e(Ew,z4e),e(z4e,W$r),e(Ew,H$r),e(Ew,ZJ),e(ZJ,U$r),e(Ew,J$r),e(xe,Y$r),e(xe,Cw),e(Cw,Q4e),e(Q4e,K$r),e(Cw,Z$r),e(Cw,eY),e(eY,ekr),e(Cw,okr),e(xe,rkr),e(xe,ww),e(ww,W4e),e(W4e,tkr),e(ww,akr),e(ww,oY),e(oY,nkr),e(ww,skr),e(xe,lkr),e(xe,Aw),e(Aw,H4e),e(H4e,ikr),e(Aw,dkr),e(Aw,rY),e(rY,ckr),e(Aw,mkr),e(xe,fkr),e(xe,yw),e(yw,U4e),e(U4e,gkr),e(yw,hkr),e(yw,tY),e(tY,ukr),e(yw,pkr),e(xe,_kr),e(xe,Lw),e(Lw,J4e),e(J4e,bkr),e(Lw,Fkr),e(Lw,aY),e(aY,vkr),e(Lw,Tkr),e(xe,Mkr),e(xe,xw),e(xw,Y4e),e(Y4e,Ekr),e(xw,Ckr),e(xw,nY),e(nY,wkr),e(xw,Akr),e(xe,ykr),e(xe,$w),e($w,K4e),e(K4e,Lkr),e($w,xkr),e($w,sY),e(sY,$kr),e($w,kkr),e(Xr,Skr),M(kw,Xr,null),b(m,Mqe,_),b(m,Xc,_),e(Xc,Sw),e(Sw,Z4e),M(M7,Z4e,null),e(Xc,Rkr),e(Xc,eEe),e(eEe,Bkr),b(m,Eqe,_),b(m,_r,_),M(E7,_r,null),e(_r,Pkr),e(_r,zc),e(zc,Ikr),e(zc,lY),e(lY,qkr),e(zc,Nkr),e(zc,iY),e(iY,jkr),e(zc,Dkr),e(_r,Gkr),e(_r,C7),e(C7,Okr),e(C7,oEe),e(oEe,Vkr),e(C7,Xkr),e(_r,zkr),e(_r,zt),M(w7,zt,null),e(zt,Qkr),e(zt,rEe),e(rEe,Wkr),e(zt,Hkr),e(zt,Qc),e(Qc,Ukr),e(Qc,tEe),e(tEe,Jkr),e(Qc,Ykr),e(Qc,dY),e(dY,Kkr),e(Qc,Zkr),e(zt,eSr),M(Rw,zt,null),e(_r,oSr),e(_r,zr),M(A7,zr,null),e(zr,rSr),e(zr,aEe),e(aEe,tSr),e(zr,aSr),e(zr,Fn),e(Fn,nSr),e(Fn,nEe),e(nEe,sSr),e(Fn,lSr),e(Fn,sEe),e(sEe,iSr),e(Fn,dSr),e(Fn,lEe),e(lEe,cSr),e(Fn,mSr),e(zr,fSr),e(zr,$e),e($e,Bw),e(Bw,iEe),e(iEe,gSr),e(Bw,hSr),e(Bw,cY),e(cY,uSr),e(Bw,pSr),e($e,_Sr),e($e,Pw),e(Pw,dEe),e(dEe,bSr),e(Pw,FSr),e(Pw,mY),e(mY,vSr),e(Pw,TSr),e($e,MSr),e($e,Iw),e(Iw,cEe),e(cEe,ESr),e(Iw,CSr),e(Iw,fY),e(fY,wSr),e(Iw,ASr),e($e,ySr),e($e,qw),e(qw,mEe),e(mEe,LSr),e(qw,xSr),e(qw,gY),e(gY,$Sr),e(qw,kSr),e($e,SSr),e($e,Nw),e(Nw,fEe),e(fEe,RSr),e(Nw,BSr),e(Nw,hY),e(hY,PSr),e(Nw,ISr),e($e,qSr),e($e,jw),e(jw,gEe),e(gEe,NSr),e(jw,jSr),e(jw,uY),e(uY,DSr),e(jw,GSr),e($e,OSr),e($e,Dw),e(Dw,hEe),e(hEe,VSr),e(Dw,XSr),e(Dw,pY),e(pY,zSr),e(Dw,QSr),e($e,WSr),e($e,Gw),e(Gw,uEe),e(uEe,HSr),e(Gw,USr),e(Gw,_Y),e(_Y,JSr),e(Gw,YSr),e($e,KSr),e($e,Ow),e(Ow,pEe),e(pEe,ZSr),e(Ow,eRr),e(Ow,bY),e(bY,oRr),e(Ow,rRr),e($e,tRr),e($e,Vw),e(Vw,_Ee),e(_Ee,aRr),e(Vw,nRr),e(Vw,FY),e(FY,sRr),e(Vw,lRr),e(zr,iRr),M(Xw,zr,null),b(m,Cqe,_),b(m,Wc,_),e(Wc,zw),e(zw,bEe),M(y7,bEe,null),e(Wc,dRr),e(Wc,FEe),e(FEe,cRr),b(m,wqe,_),b(m,br,_),M(L7,br,null),e(br,mRr),e(br,Hc),e(Hc,fRr),e(Hc,vY),e(vY,gRr),e(Hc,hRr),e(Hc,TY),e(TY,uRr),e(Hc,pRr),e(br,_Rr),e(br,x7),e(x7,bRr),e(x7,vEe),e(vEe,FRr),e(x7,vRr),e(br,TRr),e(br,Qt),M($7,Qt,null),e(Qt,MRr),e(Qt,TEe),e(TEe,ERr),e(Qt,CRr),e(Qt,Uc),e(Uc,wRr),e(Uc,MEe),e(MEe,ARr),e(Uc,yRr),e(Uc,MY),e(MY,LRr),e(Uc,xRr),e(Qt,$Rr),M(Qw,Qt,null),e(br,kRr),e(br,Qr),M(k7,Qr,null),e(Qr,SRr),e(Qr,EEe),e(EEe,RRr),e(Qr,BRr),e(Qr,vn),e(vn,PRr),e(vn,CEe),e(CEe,IRr),e(vn,qRr),e(vn,wEe),e(wEe,NRr),e(vn,jRr),e(vn,AEe),e(AEe,DRr),e(vn,GRr),e(Qr,ORr),e(Qr,De),e(De,Ww),e(Ww,yEe),e(yEe,VRr),e(Ww,XRr),e(Ww,EY),e(EY,zRr),e(Ww,QRr),e(De,WRr),e(De,Hw),e(Hw,LEe),e(LEe,HRr),e(Hw,URr),e(Hw,CY),e(CY,JRr),e(Hw,YRr),e(De,KRr),e(De,Uw),e(Uw,xEe),e(xEe,ZRr),e(Uw,eBr),e(Uw,wY),e(wY,oBr),e(Uw,rBr),e(De,tBr),e(De,Jw),e(Jw,$Ee),e($Ee,aBr),e(Jw,nBr),e(Jw,AY),e(AY,sBr),e(Jw,lBr),e(De,iBr),e(De,Yw),e(Yw,kEe),e(kEe,dBr),e(Yw,cBr),e(Yw,yY),e(yY,mBr),e(Yw,fBr),e(De,gBr),e(De,Kw),e(Kw,SEe),e(SEe,hBr),e(Kw,uBr),e(Kw,LY),e(LY,pBr),e(Kw,_Br),e(De,bBr),e(De,Zw),e(Zw,REe),e(REe,FBr),e(Zw,vBr),e(Zw,xY),e(xY,TBr),e(Zw,MBr),e(De,EBr),e(De,eA),e(eA,BEe),e(BEe,CBr),e(eA,wBr),e(eA,$Y),e($Y,ABr),e(eA,yBr),e(Qr,LBr),M(oA,Qr,null),b(m,Aqe,_),b(m,Jc,_),e(Jc,rA),e(rA,PEe),M(S7,PEe,null),e(Jc,xBr),e(Jc,IEe),e(IEe,$Br),b(m,yqe,_),b(m,Fr,_),M(R7,Fr,null),e(Fr,kBr),e(Fr,Yc),e(Yc,SBr),e(Yc,kY),e(kY,RBr),e(Yc,BBr),e(Yc,SY),e(SY,PBr),e(Yc,IBr),e(Fr,qBr),e(Fr,B7),e(B7,NBr),e(B7,qEe),e(qEe,jBr),e(B7,DBr),e(Fr,GBr),e(Fr,Wt),M(P7,Wt,null),e(Wt,OBr),e(Wt,NEe),e(NEe,VBr),e(Wt,XBr),e(Wt,Kc),e(Kc,zBr),e(Kc,jEe),e(jEe,QBr),e(Kc,WBr),e(Kc,RY),e(RY,HBr),e(Kc,UBr),e(Wt,JBr),M(tA,Wt,null),e(Fr,YBr),e(Fr,Wr),M(I7,Wr,null),e(Wr,KBr),e(Wr,DEe),e(DEe,ZBr),e(Wr,ePr),e(Wr,Tn),e(Tn,oPr),e(Tn,GEe),e(GEe,rPr),e(Tn,tPr),e(Tn,OEe),e(OEe,aPr),e(Tn,nPr),e(Tn,VEe),e(VEe,sPr),e(Tn,lPr),e(Wr,iPr),e(Wr,Ge),e(Ge,aA),e(aA,XEe),e(XEe,dPr),e(aA,cPr),e(aA,BY),e(BY,mPr),e(aA,fPr),e(Ge,gPr),e(Ge,nA),e(nA,zEe),e(zEe,hPr),e(nA,uPr),e(nA,PY),e(PY,pPr),e(nA,_Pr),e(Ge,bPr),e(Ge,sA),e(sA,QEe),e(QEe,FPr),e(sA,vPr),e(sA,IY),e(IY,TPr),e(sA,MPr),e(Ge,EPr),e(Ge,lA),e(lA,WEe),e(WEe,CPr),e(lA,wPr),e(lA,qY),e(qY,APr),e(lA,yPr),e(Ge,LPr),e(Ge,iA),e(iA,HEe),e(HEe,xPr),e(iA,$Pr),e(iA,NY),e(NY,kPr),e(iA,SPr),e(Ge,RPr),e(Ge,dA),e(dA,UEe),e(UEe,BPr),e(dA,PPr),e(dA,jY),e(jY,IPr),e(dA,qPr),e(Ge,NPr),e(Ge,cA),e(cA,JEe),e(JEe,jPr),e(cA,DPr),e(cA,DY),e(DY,GPr),e(cA,OPr),e(Ge,VPr),e(Ge,mA),e(mA,YEe),e(YEe,XPr),e(mA,zPr),e(mA,GY),e(GY,QPr),e(mA,WPr),e(Wr,HPr),M(fA,Wr,null),b(m,Lqe,_),b(m,Zc,_),e(Zc,gA),e(gA,KEe),M(q7,KEe,null),e(Zc,UPr),e(Zc,ZEe),e(ZEe,JPr),b(m,xqe,_),b(m,vr,_),M(N7,vr,null),e(vr,YPr),e(vr,em),e(em,KPr),e(em,OY),e(OY,ZPr),e(em,eIr),e(em,VY),e(VY,oIr),e(em,rIr),e(vr,tIr),e(vr,j7),e(j7,aIr),e(j7,e5e),e(e5e,nIr),e(j7,sIr),e(vr,lIr),e(vr,Ht),M(D7,Ht,null),e(Ht,iIr),e(Ht,o5e),e(o5e,dIr),e(Ht,cIr),e(Ht,om),e(om,mIr),e(om,r5e),e(r5e,fIr),e(om,gIr),e(om,XY),e(XY,hIr),e(om,uIr),e(Ht,pIr),M(hA,Ht,null),e(vr,_Ir),e(vr,Hr),M(G7,Hr,null),e(Hr,bIr),e(Hr,t5e),e(t5e,FIr),e(Hr,vIr),e(Hr,Mn),e(Mn,TIr),e(Mn,a5e),e(a5e,MIr),e(Mn,EIr),e(Mn,n5e),e(n5e,CIr),e(Mn,wIr),e(Mn,s5e),e(s5e,AIr),e(Mn,yIr),e(Hr,LIr),e(Hr,l5e),e(l5e,uA),e(uA,i5e),e(i5e,xIr),e(uA,$Ir),e(uA,zY),e(zY,kIr),e(uA,SIr),e(Hr,RIr),M(pA,Hr,null),b(m,$qe,_),b(m,rm,_),e(rm,_A),e(_A,d5e),M(O7,d5e,null),e(rm,BIr),e(rm,c5e),e(c5e,PIr),b(m,kqe,_),b(m,Tr,_),M(V7,Tr,null),e(Tr,IIr),e(Tr,tm),e(tm,qIr),e(tm,QY),e(QY,NIr),e(tm,jIr),e(tm,WY),e(WY,DIr),e(tm,GIr),e(Tr,OIr),e(Tr,X7),e(X7,VIr),e(X7,m5e),e(m5e,XIr),e(X7,zIr),e(Tr,QIr),e(Tr,Ut),M(z7,Ut,null),e(Ut,WIr),e(Ut,f5e),e(f5e,HIr),e(Ut,UIr),e(Ut,am),e(am,JIr),e(am,g5e),e(g5e,YIr),e(am,KIr),e(am,HY),e(HY,ZIr),e(am,eqr),e(Ut,oqr),M(bA,Ut,null),e(Tr,rqr),e(Tr,Ur),M(Q7,Ur,null),e(Ur,tqr),e(Ur,h5e),e(h5e,aqr),e(Ur,nqr),e(Ur,En),e(En,sqr),e(En,u5e),e(u5e,lqr),e(En,iqr),e(En,p5e),e(p5e,dqr),e(En,cqr),e(En,_5e),e(_5e,mqr),e(En,fqr),e(Ur,gqr),e(Ur,W7),e(W7,FA),e(FA,b5e),e(b5e,hqr),e(FA,uqr),e(FA,UY),e(UY,pqr),e(FA,_qr),e(W7,bqr),e(W7,vA),e(vA,F5e),e(F5e,Fqr),e(vA,vqr),e(vA,JY),e(JY,Tqr),e(vA,Mqr),e(Ur,Eqr),M(TA,Ur,null),b(m,Sqe,_),b(m,nm,_),e(nm,MA),e(MA,v5e),M(H7,v5e,null),e(nm,Cqr),e(nm,T5e),e(T5e,wqr),b(m,Rqe,_),b(m,Mr,_),M(U7,Mr,null),e(Mr,Aqr),e(Mr,sm),e(sm,yqr),e(sm,YY),e(YY,Lqr),e(sm,xqr),e(sm,KY),e(KY,$qr),e(sm,kqr),e(Mr,Sqr),e(Mr,J7),e(J7,Rqr),e(J7,M5e),e(M5e,Bqr),e(J7,Pqr),e(Mr,Iqr),e(Mr,Jt),M(Y7,Jt,null),e(Jt,qqr),e(Jt,E5e),e(E5e,Nqr),e(Jt,jqr),e(Jt,lm),e(lm,Dqr),e(lm,C5e),e(C5e,Gqr),e(lm,Oqr),e(lm,ZY),e(ZY,Vqr),e(lm,Xqr),e(Jt,zqr),M(EA,Jt,null),e(Mr,Qqr),e(Mr,Jr),M(K7,Jr,null),e(Jr,Wqr),e(Jr,w5e),e(w5e,Hqr),e(Jr,Uqr),e(Jr,Cn),e(Cn,Jqr),e(Cn,A5e),e(A5e,Yqr),e(Cn,Kqr),e(Cn,y5e),e(y5e,Zqr),e(Cn,eNr),e(Cn,L5e),e(L5e,oNr),e(Cn,rNr),e(Jr,tNr),e(Jr,x5e),e(x5e,CA),e(CA,$5e),e($5e,aNr),e(CA,nNr),e(CA,eK),e(eK,sNr),e(CA,lNr),e(Jr,iNr),M(wA,Jr,null),Bqe=!0},p(m,[_]){const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:m}),pm.$set(Z7);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:m}),ug.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:m}),Hg.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:m}),Mh.$set(R5e);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:m}),Eh.$set(e9);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:m}),Gh.$set(B5e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:m}),Oh.$set(wn);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:m}),zh.$set(P5e);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:m}),Pp.$set(I5e);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:m}),qp.$set(q5e);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:m}),w_.$set(o9);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:m}),y_.$set(N5e);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:m}),mb.$set(r9);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:m}),gb.$set(j5e);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:m}),Jb.$set(t9);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),Kb.$set(D5e);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),p2.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),b2.$set(O5e);const im={};_&2&&(im.$$scope={dirty:_,ctx:m}),fF.$set(im);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),hF.$set(V5e);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),zF.$set(X5e);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),WF.$set(z5e);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:m}),ev.$set(a9);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),rv.$set(Q5e);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),qv.$set(W5e);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),jv.$set(H5e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:m}),A1.$set(Kr);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:m}),L1.$set(n9);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),k1.$set(U5e);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:m}),R1.$set(s9);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),Q1.$set(J5e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:m}),H1.$set(Zr);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),Y1.$set(Y5e);const dm={};_&2&&(dm.$$scope={dirty:_,ctx:m}),Z1.$set(dm);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),dT.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),mT.$set(Z5e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),_T.$set(L);const AA={};_&2&&(AA.$$scope={dirty:_,ctx:m}),FT.$set(AA);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:m}),xT.$set(eCe);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:m}),kT.$set(oCe);const yA={};_&2&&(yA.$$scope={dirty:_,ctx:m}),PT.$set(yA);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:m}),qT.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:m}),VT.$set(tCe);const LA={};_&2&&(LA.$$scope={dirty:_,ctx:m}),zT.$set(LA);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:m}),JT.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:m}),KT.$set(nCe);const xA={};_&2&&(xA.$$scope={dirty:_,ctx:m}),rM.$set(xA);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:m}),aM.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:m}),lM.$set(lCe);const $A={};_&2&&($A.$$scope={dirty:_,ctx:m}),dM.$set($A);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:m}),uM.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:m}),_M.$set(dCe);const kA={};_&2&&(kA.$$scope={dirty:_,ctx:m}),vM.$set(kA);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:m}),MM.$set(cCe);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:m}),g4.$set(mCe);const SA={};_&2&&(SA.$$scope={dirty:_,ctx:m}),u4.$set(SA);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:m}),j4.$set(fCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:m}),G4.$set(gCe);const RA={};_&2&&(RA.$$scope={dirty:_,ctx:m}),eE.$set(RA);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:m}),rE.$set(hCe);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:m}),sE.$set(uCe);const BA={};_&2&&(BA.$$scope={dirty:_,ctx:m}),iE.$set(BA);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:m}),xE.$set(pCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:m}),kE.$set(_Ce);const PA={};_&2&&(PA.$$scope={dirty:_,ctx:m}),OE.$set(PA);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:m}),XE.$set(bCe);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:m}),_5.$set(FCe);const IA={};_&2&&(IA.$$scope={dirty:_,ctx:m}),F5.$set(IA);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:m}),q5.$set(vCe);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:m}),j5.$set(TCe);const qA={};_&2&&(qA.$$scope={dirty:_,ctx:m}),O5.$set(qA);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:m}),X5.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:m}),Q5.$set(ECe);const NA={};_&2&&(NA.$$scope={dirty:_,ctx:m}),H5.$set(NA);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:m}),uC.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:m}),_C.$set(wCe);const jA={};_&2&&(jA.$$scope={dirty:_,ctx:m}),NC.$set(jA);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:m}),DC.$set(ACe);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:m}),OC.$set(yCe);const DA={};_&2&&(DA.$$scope={dirty:_,ctx:m}),XC.$set(DA);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:m}),QC.$set(LCe);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:m}),HC.$set(xCe);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),v3.$set(GA);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:m}),M3.$set($Ce);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:m}),S3.$set(kCe);const OA={};_&2&&(OA.$$scope={dirty:_,ctx:m}),B3.$set(OA);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:m}),W3.$set(SCe);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:m}),U3.$set(RCe);const VA={};_&2&&(VA.$$scope={dirty:_,ctx:m}),sw.$set(VA);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:m}),iw.$set(BCe);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:m}),bw.$set(PCe);const XA={};_&2&&(XA.$$scope={dirty:_,ctx:m}),vw.$set(XA);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:m}),kw.$set(ICe);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:m}),Rw.$set(qCe);const zA={};_&2&&(zA.$$scope={dirty:_,ctx:m}),Xw.$set(zA);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:m}),Qw.$set(NCe);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:m}),oA.$set(jCe);const QA={};_&2&&(QA.$$scope={dirty:_,ctx:m}),tA.$set(QA);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:m}),fA.$set(DCe);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:m}),hA.$set(GCe);const WA={};_&2&&(WA.$$scope={dirty:_,ctx:m}),pA.$set(WA);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:m}),bA.$set(OCe);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:m}),TA.$set(VCe);const HA={};_&2&&(HA.$$scope={dirty:_,ctx:m}),EA.$set(HA);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:m}),wA.$set(XCe)},i(m){Bqe||(E(d.$$.fragment,m),E(Ma.$$.fragment,m),E(H6.$$.fragment,m),E(U6.$$.fragment,m),E(pm.$$.fragment,m),E(J6.$$.fragment,m),E(Y6.$$.fragment,m),E(ey.$$.fragment,m),E(ug.$$.fragment,m),E(oy.$$.fragment,m),E(ry.$$.fragment,m),E(ty.$$.fragment,m),E(sy.$$.fragment,m),E(Hg.$$.fragment,m),E(ly.$$.fragment,m),E(iy.$$.fragment,m),E(dy.$$.fragment,m),E(fy.$$.fragment,m),E(Mh.$$.fragment,m),E(Eh.$$.fragment,m),E(gy.$$.fragment,m),E(hy.$$.fragment,m),E(uy.$$.fragment,m),E(by.$$.fragment,m),E(Gh.$$.fragment,m),E(Oh.$$.fragment,m),E(Fy.$$.fragment,m),E(vy.$$.fragment,m),E(Ty.$$.fragment,m),E(Ey.$$.fragment,m),E(zh.$$.fragment,m),E(Cy.$$.fragment,m),E(Pp.$$.fragment,m),E(wy.$$.fragment,m),E(Ay.$$.fragment,m),E(Ly.$$.fragment,m),E(qp.$$.fragment,m),E(xy.$$.fragment,m),E(w_.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Ry.$$.fragment,m),E(y_.$$.fragment,m),E(By.$$.fragment,m),E(mb.$$.fragment,m),E(Py.$$.fragment,m),E(Iy.$$.fragment,m),E(Ny.$$.fragment,m),E(gb.$$.fragment,m),E(jy.$$.fragment,m),E(Jb.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Vy.$$.fragment,m),E(Kb.$$.fragment,m),E(Xy.$$.fragment,m),E(p2.$$.fragment,m),E(zy.$$.fragment,m),E(Qy.$$.fragment,m),E(Hy.$$.fragment,m),E(b2.$$.fragment,m),E(Uy.$$.fragment,m),E(fF.$$.fragment,m),E(Jy.$$.fragment,m),E(Yy.$$.fragment,m),E(Zy.$$.fragment,m),E(hF.$$.fragment,m),E(eL.$$.fragment,m),E(zF.$$.fragment,m),E(oL.$$.fragment,m),E(rL.$$.fragment,m),E(aL.$$.fragment,m),E(WF.$$.fragment,m),E(nL.$$.fragment,m),E(ev.$$.fragment,m),E(sL.$$.fragment,m),E(lL.$$.fragment,m),E(dL.$$.fragment,m),E(rv.$$.fragment,m),E(cL.$$.fragment,m),E(qv.$$.fragment,m),E(mL.$$.fragment,m),E(fL.$$.fragment,m),E(hL.$$.fragment,m),E(jv.$$.fragment,m),E(uL.$$.fragment,m),E(A1.$$.fragment,m),E(pL.$$.fragment,m),E(_L.$$.fragment,m),E(FL.$$.fragment,m),E(L1.$$.fragment,m),E(vL.$$.fragment,m),E(k1.$$.fragment,m),E(TL.$$.fragment,m),E(ML.$$.fragment,m),E(CL.$$.fragment,m),E(R1.$$.fragment,m),E(wL.$$.fragment,m),E(Q1.$$.fragment,m),E(AL.$$.fragment,m),E(yL.$$.fragment,m),E(xL.$$.fragment,m),E(H1.$$.fragment,m),E($L.$$.fragment,m),E(Y1.$$.fragment,m),E(kL.$$.fragment,m),E(SL.$$.fragment,m),E(BL.$$.fragment,m),E(Z1.$$.fragment,m),E(PL.$$.fragment,m),E(dT.$$.fragment,m),E(IL.$$.fragment,m),E(qL.$$.fragment,m),E(jL.$$.fragment,m),E(mT.$$.fragment,m),E(DL.$$.fragment,m),E(_T.$$.fragment,m),E(GL.$$.fragment,m),E(OL.$$.fragment,m),E(XL.$$.fragment,m),E(FT.$$.fragment,m),E(zL.$$.fragment,m),E(xT.$$.fragment,m),E(QL.$$.fragment,m),E(WL.$$.fragment,m),E(UL.$$.fragment,m),E(kT.$$.fragment,m),E(JL.$$.fragment,m),E(PT.$$.fragment,m),E(KL.$$.fragment,m),E(ZL.$$.fragment,m),E(o8.$$.fragment,m),E(qT.$$.fragment,m),E(r8.$$.fragment,m),E(VT.$$.fragment,m),E(t8.$$.fragment,m),E(a8.$$.fragment,m),E(s8.$$.fragment,m),E(zT.$$.fragment,m),E(l8.$$.fragment,m),E(JT.$$.fragment,m),E(i8.$$.fragment,m),E(d8.$$.fragment,m),E(m8.$$.fragment,m),E(KT.$$.fragment,m),E(f8.$$.fragment,m),E(rM.$$.fragment,m),E(h8.$$.fragment,m),E(u8.$$.fragment,m),E(_8.$$.fragment,m),E(aM.$$.fragment,m),E(b8.$$.fragment,m),E(lM.$$.fragment,m),E(F8.$$.fragment,m),E(v8.$$.fragment,m),E(M8.$$.fragment,m),E(dM.$$.fragment,m),E(E8.$$.fragment,m),E(uM.$$.fragment,m),E(C8.$$.fragment,m),E(w8.$$.fragment,m),E(y8.$$.fragment,m),E(_M.$$.fragment,m),E(L8.$$.fragment,m),E(vM.$$.fragment,m),E(x8.$$.fragment,m),E($8.$$.fragment,m),E(S8.$$.fragment,m),E(MM.$$.fragment,m),E(R8.$$.fragment,m),E(g4.$$.fragment,m),E(B8.$$.fragment,m),E(P8.$$.fragment,m),E(q8.$$.fragment,m),E(u4.$$.fragment,m),E(N8.$$.fragment,m),E(j4.$$.fragment,m),E(j8.$$.fragment,m),E(D8.$$.fragment,m),E(O8.$$.fragment,m),E(G4.$$.fragment,m),E(V8.$$.fragment,m),E(eE.$$.fragment,m),E(X8.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(rE.$$.fragment,m),E(H8.$$.fragment,m),E(sE.$$.fragment,m),E(U8.$$.fragment,m),E(J8.$$.fragment,m),E(K8.$$.fragment,m),E(iE.$$.fragment,m),E(Z8.$$.fragment,m),E(xE.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(tx.$$.fragment,m),E(kE.$$.fragment,m),E(ax.$$.fragment,m),E(OE.$$.fragment,m),E(nx.$$.fragment,m),E(sx.$$.fragment,m),E(ix.$$.fragment,m),E(XE.$$.fragment,m),E(dx.$$.fragment,m),E(_5.$$.fragment,m),E(cx.$$.fragment,m),E(mx.$$.fragment,m),E(gx.$$.fragment,m),E(F5.$$.fragment,m),E(hx.$$.fragment,m),E(q5.$$.fragment,m),E(ux.$$.fragment,m),E(px.$$.fragment,m),E(bx.$$.fragment,m),E(j5.$$.fragment,m),E(Fx.$$.fragment,m),E(O5.$$.fragment,m),E(Tx.$$.fragment,m),E(Mx.$$.fragment,m),E(Cx.$$.fragment,m),E(X5.$$.fragment,m),E(wx.$$.fragment,m),E(Q5.$$.fragment,m),E(Ax.$$.fragment,m),E(yx.$$.fragment,m),E(xx.$$.fragment,m),E(H5.$$.fragment,m),E($x.$$.fragment,m),E(uC.$$.fragment,m),E(kx.$$.fragment,m),E(Sx.$$.fragment,m),E(Bx.$$.fragment,m),E(_C.$$.fragment,m),E(Px.$$.fragment,m),E(NC.$$.fragment,m),E(Ix.$$.fragment,m),E(qx.$$.fragment,m),E(jx.$$.fragment,m),E(DC.$$.fragment,m),E(Dx.$$.fragment,m),E(OC.$$.fragment,m),E(Gx.$$.fragment,m),E(Ox.$$.fragment,m),E(Xx.$$.fragment,m),E(XC.$$.fragment,m),E(zx.$$.fragment,m),E(QC.$$.fragment,m),E(Qx.$$.fragment,m),E(Wx.$$.fragment,m),E(Ux.$$.fragment,m),E(HC.$$.fragment,m),E(Jx.$$.fragment,m),E(v3.$$.fragment,m),E(Yx.$$.fragment,m),E(Kx.$$.fragment,m),E(e7.$$.fragment,m),E(M3.$$.fragment,m),E(o7.$$.fragment,m),E(S3.$$.fragment,m),E(r7.$$.fragment,m),E(t7.$$.fragment,m),E(n7.$$.fragment,m),E(B3.$$.fragment,m),E(s7.$$.fragment,m),E(W3.$$.fragment,m),E(l7.$$.fragment,m),E(i7.$$.fragment,m),E(c7.$$.fragment,m),E(U3.$$.fragment,m),E(m7.$$.fragment,m),E(sw.$$.fragment,m),E(f7.$$.fragment,m),E(g7.$$.fragment,m),E(u7.$$.fragment,m),E(iw.$$.fragment,m),E(p7.$$.fragment,m),E(bw.$$.fragment,m),E(_7.$$.fragment,m),E(b7.$$.fragment,m),E(v7.$$.fragment,m),E(vw.$$.fragment,m),E(T7.$$.fragment,m),E(kw.$$.fragment,m),E(M7.$$.fragment,m),E(E7.$$.fragment,m),E(w7.$$.fragment,m),E(Rw.$$.fragment,m),E(A7.$$.fragment,m),E(Xw.$$.fragment,m),E(y7.$$.fragment,m),E(L7.$$.fragment,m),E($7.$$.fragment,m),E(Qw.$$.fragment,m),E(k7.$$.fragment,m),E(oA.$$.fragment,m),E(S7.$$.fragment,m),E(R7.$$.fragment,m),E(P7.$$.fragment,m),E(tA.$$.fragment,m),E(I7.$$.fragment,m),E(fA.$$.fragment,m),E(q7.$$.fragment,m),E(N7.$$.fragment,m),E(D7.$$.fragment,m),E(hA.$$.fragment,m),E(G7.$$.fragment,m),E(pA.$$.fragment,m),E(O7.$$.fragment,m),E(V7.$$.fragment,m),E(z7.$$.fragment,m),E(bA.$$.fragment,m),E(Q7.$$.fragment,m),E(TA.$$.fragment,m),E(H7.$$.fragment,m),E(U7.$$.fragment,m),E(Y7.$$.fragment,m),E(EA.$$.fragment,m),E(K7.$$.fragment,m),E(wA.$$.fragment,m),Bqe=!0)},o(m){C(d.$$.fragment,m),C(Ma.$$.fragment,m),C(H6.$$.fragment,m),C(U6.$$.fragment,m),C(pm.$$.fragment,m),C(J6.$$.fragment,m),C(Y6.$$.fragment,m),C(ey.$$.fragment,m),C(ug.$$.fragment,m),C(oy.$$.fragment,m),C(ry.$$.fragment,m),C(ty.$$.fragment,m),C(sy.$$.fragment,m),C(Hg.$$.fragment,m),C(ly.$$.fragment,m),C(iy.$$.fragment,m),C(dy.$$.fragment,m),C(fy.$$.fragment,m),C(Mh.$$.fragment,m),C(Eh.$$.fragment,m),C(gy.$$.fragment,m),C(hy.$$.fragment,m),C(uy.$$.fragment,m),C(by.$$.fragment,m),C(Gh.$$.fragment,m),C(Oh.$$.fragment,m),C(Fy.$$.fragment,m),C(vy.$$.fragment,m),C(Ty.$$.fragment,m),C(Ey.$$.fragment,m),C(zh.$$.fragment,m),C(Cy.$$.fragment,m),C(Pp.$$.fragment,m),C(wy.$$.fragment,m),C(Ay.$$.fragment,m),C(Ly.$$.fragment,m),C(qp.$$.fragment,m),C(xy.$$.fragment,m),C(w_.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Ry.$$.fragment,m),C(y_.$$.fragment,m),C(By.$$.fragment,m),C(mb.$$.fragment,m),C(Py.$$.fragment,m),C(Iy.$$.fragment,m),C(Ny.$$.fragment,m),C(gb.$$.fragment,m),C(jy.$$.fragment,m),C(Jb.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Vy.$$.fragment,m),C(Kb.$$.fragment,m),C(Xy.$$.fragment,m),C(p2.$$.fragment,m),C(zy.$$.fragment,m),C(Qy.$$.fragment,m),C(Hy.$$.fragment,m),C(b2.$$.fragment,m),C(Uy.$$.fragment,m),C(fF.$$.fragment,m),C(Jy.$$.fragment,m),C(Yy.$$.fragment,m),C(Zy.$$.fragment,m),C(hF.$$.fragment,m),C(eL.$$.fragment,m),C(zF.$$.fragment,m),C(oL.$$.fragment,m),C(rL.$$.fragment,m),C(aL.$$.fragment,m),C(WF.$$.fragment,m),C(nL.$$.fragment,m),C(ev.$$.fragment,m),C(sL.$$.fragment,m),C(lL.$$.fragment,m),C(dL.$$.fragment,m),C(rv.$$.fragment,m),C(cL.$$.fragment,m),C(qv.$$.fragment,m),C(mL.$$.fragment,m),C(fL.$$.fragment,m),C(hL.$$.fragment,m),C(jv.$$.fragment,m),C(uL.$$.fragment,m),C(A1.$$.fragment,m),C(pL.$$.fragment,m),C(_L.$$.fragment,m),C(FL.$$.fragment,m),C(L1.$$.fragment,m),C(vL.$$.fragment,m),C(k1.$$.fragment,m),C(TL.$$.fragment,m),C(ML.$$.fragment,m),C(CL.$$.fragment,m),C(R1.$$.fragment,m),C(wL.$$.fragment,m),C(Q1.$$.fragment,m),C(AL.$$.fragment,m),C(yL.$$.fragment,m),C(xL.$$.fragment,m),C(H1.$$.fragment,m),C($L.$$.fragment,m),C(Y1.$$.fragment,m),C(kL.$$.fragment,m),C(SL.$$.fragment,m),C(BL.$$.fragment,m),C(Z1.$$.fragment,m),C(PL.$$.fragment,m),C(dT.$$.fragment,m),C(IL.$$.fragment,m),C(qL.$$.fragment,m),C(jL.$$.fragment,m),C(mT.$$.fragment,m),C(DL.$$.fragment,m),C(_T.$$.fragment,m),C(GL.$$.fragment,m),C(OL.$$.fragment,m),C(XL.$$.fragment,m),C(FT.$$.fragment,m),C(zL.$$.fragment,m),C(xT.$$.fragment,m),C(QL.$$.fragment,m),C(WL.$$.fragment,m),C(UL.$$.fragment,m),C(kT.$$.fragment,m),C(JL.$$.fragment,m),C(PT.$$.fragment,m),C(KL.$$.fragment,m),C(ZL.$$.fragment,m),C(o8.$$.fragment,m),C(qT.$$.fragment,m),C(r8.$$.fragment,m),C(VT.$$.fragment,m),C(t8.$$.fragment,m),C(a8.$$.fragment,m),C(s8.$$.fragment,m),C(zT.$$.fragment,m),C(l8.$$.fragment,m),C(JT.$$.fragment,m),C(i8.$$.fragment,m),C(d8.$$.fragment,m),C(m8.$$.fragment,m),C(KT.$$.fragment,m),C(f8.$$.fragment,m),C(rM.$$.fragment,m),C(h8.$$.fragment,m),C(u8.$$.fragment,m),C(_8.$$.fragment,m),C(aM.$$.fragment,m),C(b8.$$.fragment,m),C(lM.$$.fragment,m),C(F8.$$.fragment,m),C(v8.$$.fragment,m),C(M8.$$.fragment,m),C(dM.$$.fragment,m),C(E8.$$.fragment,m),C(uM.$$.fragment,m),C(C8.$$.fragment,m),C(w8.$$.fragment,m),C(y8.$$.fragment,m),C(_M.$$.fragment,m),C(L8.$$.fragment,m),C(vM.$$.fragment,m),C(x8.$$.fragment,m),C($8.$$.fragment,m),C(S8.$$.fragment,m),C(MM.$$.fragment,m),C(R8.$$.fragment,m),C(g4.$$.fragment,m),C(B8.$$.fragment,m),C(P8.$$.fragment,m),C(q8.$$.fragment,m),C(u4.$$.fragment,m),C(N8.$$.fragment,m),C(j4.$$.fragment,m),C(j8.$$.fragment,m),C(D8.$$.fragment,m),C(O8.$$.fragment,m),C(G4.$$.fragment,m),C(V8.$$.fragment,m),C(eE.$$.fragment,m),C(X8.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(rE.$$.fragment,m),C(H8.$$.fragment,m),C(sE.$$.fragment,m),C(U8.$$.fragment,m),C(J8.$$.fragment,m),C(K8.$$.fragment,m),C(iE.$$.fragment,m),C(Z8.$$.fragment,m),C(xE.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(tx.$$.fragment,m),C(kE.$$.fragment,m),C(ax.$$.fragment,m),C(OE.$$.fragment,m),C(nx.$$.fragment,m),C(sx.$$.fragment,m),C(ix.$$.fragment,m),C(XE.$$.fragment,m),C(dx.$$.fragment,m),C(_5.$$.fragment,m),C(cx.$$.fragment,m),C(mx.$$.fragment,m),C(gx.$$.fragment,m),C(F5.$$.fragment,m),C(hx.$$.fragment,m),C(q5.$$.fragment,m),C(ux.$$.fragment,m),C(px.$$.fragment,m),C(bx.$$.fragment,m),C(j5.$$.fragment,m),C(Fx.$$.fragment,m),C(O5.$$.fragment,m),C(Tx.$$.fragment,m),C(Mx.$$.fragment,m),C(Cx.$$.fragment,m),C(X5.$$.fragment,m),C(wx.$$.fragment,m),C(Q5.$$.fragment,m),C(Ax.$$.fragment,m),C(yx.$$.fragment,m),C(xx.$$.fragment,m),C(H5.$$.fragment,m),C($x.$$.fragment,m),C(uC.$$.fragment,m),C(kx.$$.fragment,m),C(Sx.$$.fragment,m),C(Bx.$$.fragment,m),C(_C.$$.fragment,m),C(Px.$$.fragment,m),C(NC.$$.fragment,m),C(Ix.$$.fragment,m),C(qx.$$.fragment,m),C(jx.$$.fragment,m),C(DC.$$.fragment,m),C(Dx.$$.fragment,m),C(OC.$$.fragment,m),C(Gx.$$.fragment,m),C(Ox.$$.fragment,m),C(Xx.$$.fragment,m),C(XC.$$.fragment,m),C(zx.$$.fragment,m),C(QC.$$.fragment,m),C(Qx.$$.fragment,m),C(Wx.$$.fragment,m),C(Ux.$$.fragment,m),C(HC.$$.fragment,m),C(Jx.$$.fragment,m),C(v3.$$.fragment,m),C(Yx.$$.fragment,m),C(Kx.$$.fragment,m),C(e7.$$.fragment,m),C(M3.$$.fragment,m),C(o7.$$.fragment,m),C(S3.$$.fragment,m),C(r7.$$.fragment,m),C(t7.$$.fragment,m),C(n7.$$.fragment,m),C(B3.$$.fragment,m),C(s7.$$.fragment,m),C(W3.$$.fragment,m),C(l7.$$.fragment,m),C(i7.$$.fragment,m),C(c7.$$.fragment,m),C(U3.$$.fragment,m),C(m7.$$.fragment,m),C(sw.$$.fragment,m),C(f7.$$.fragment,m),C(g7.$$.fragment,m),C(u7.$$.fragment,m),C(iw.$$.fragment,m),C(p7.$$.fragment,m),C(bw.$$.fragment,m),C(_7.$$.fragment,m),C(b7.$$.fragment,m),C(v7.$$.fragment,m),C(vw.$$.fragment,m),C(T7.$$.fragment,m),C(kw.$$.fragment,m),C(M7.$$.fragment,m),C(E7.$$.fragment,m),C(w7.$$.fragment,m),C(Rw.$$.fragment,m),C(A7.$$.fragment,m),C(Xw.$$.fragment,m),C(y7.$$.fragment,m),C(L7.$$.fragment,m),C($7.$$.fragment,m),C(Qw.$$.fragment,m),C(k7.$$.fragment,m),C(oA.$$.fragment,m),C(S7.$$.fragment,m),C(R7.$$.fragment,m),C(P7.$$.fragment,m),C(tA.$$.fragment,m),C(I7.$$.fragment,m),C(fA.$$.fragment,m),C(q7.$$.fragment,m),C(N7.$$.fragment,m),C(D7.$$.fragment,m),C(hA.$$.fragment,m),C(G7.$$.fragment,m),C(pA.$$.fragment,m),C(O7.$$.fragment,m),C(V7.$$.fragment,m),C(z7.$$.fragment,m),C(bA.$$.fragment,m),C(Q7.$$.fragment,m),C(TA.$$.fragment,m),C(H7.$$.fragment,m),C(U7.$$.fragment,m),C(Y7.$$.fragment,m),C(EA.$$.fragment,m),C(K7.$$.fragment,m),C(wA.$$.fragment,m),Bqe=!1},d(m){t(g),m&&t(F),m&&t(u),w(d),m&&t(mm),m&&t(et),m&&t(qe),m&&t(Xe),m&&t(gm),w(Ma,m),m&&t(ze),m&&t(Ae),m&&t(Eo),m&&t(Ea),m&&t(kPe),m&&t(hi),w(H6),m&&t(SPe),m&&t($n),m&&t(RPe),w(U6,m),m&&t(BPe),m&&t(p$),m&&t(PPe),w(pm,m),m&&t(IPe),m&&t(ui),w(J6),m&&t(qPe),m&&t(Co),w(Y6),w(ey),w(ug),w(oy),m&&t(NPe),m&&t(_i),w(ry),m&&t(jPe),m&&t(wo),w(ty),w(sy),w(Hg),w(ly),m&&t(DPe),m&&t(bi),w(iy),m&&t(GPe),m&&t(Ao),w(dy),w(fy),w(Mh),w(Eh),w(gy),m&&t(OPe),m&&t(Fi),w(hy),m&&t(VPe),m&&t(yo),w(uy),w(by),w(Gh),w(Oh),w(Fy),m&&t(XPe),m&&t(Ti),w(vy),m&&t(zPe),m&&t(Lo),w(Ty),w(Ey),w(zh),w(Cy),w(Pp),m&&t(QPe),m&&t(Ci),w(wy),m&&t(WPe),m&&t(xo),w(Ay),w(Ly),w(qp),w(xy),w(w_),m&&t(HPe),m&&t(yi),w($y),m&&t(UPe),m&&t($o),w(ky),w(Ry),w(y_),w(By),w(mb),m&&t(JPe),m&&t($i),w(Py),m&&t(YPe),m&&t(ko),w(Iy),w(Ny),w(gb),w(jy),w(Jb),m&&t(KPe),m&&t(Ri),w(Dy),m&&t(ZPe),m&&t(So),w(Gy),w(Vy),w(Kb),w(Xy),w(p2),m&&t(eIe),m&&t(Ii),w(zy),m&&t(oIe),m&&t(Ro),w(Qy),w(Hy),w(b2),w(Uy),w(fF),m&&t(rIe),m&&t(ji),w(Jy),m&&t(tIe),m&&t(Bo),w(Yy),w(Zy),w(hF),w(eL),w(zF),m&&t(aIe),m&&t(Oi),w(oL),m&&t(nIe),m&&t(Po),w(rL),w(aL),w(WF),w(nL),w(ev),m&&t(sIe),m&&t(zi),w(sL),m&&t(lIe),m&&t(Io),w(lL),w(dL),w(rv),w(cL),w(qv),m&&t(iIe),m&&t(Hi),w(mL),m&&t(dIe),m&&t(qo),w(fL),w(hL),w(jv),w(uL),w(A1),m&&t(cIe),m&&t(Yi),w(pL),m&&t(mIe),m&&t(No),w(_L),w(FL),w(L1),w(vL),w(k1),m&&t(fIe),m&&t(ed),w(TL),m&&t(gIe),m&&t(jo),w(ML),w(CL),w(R1),w(wL),w(Q1),m&&t(hIe),m&&t(td),w(AL),m&&t(uIe),m&&t(Do),w(yL),w(xL),w(H1),w($L),w(Y1),m&&t(pIe),m&&t(sd),w(kL),m&&t(_Ie),m&&t(Go),w(SL),w(BL),w(Z1),w(PL),w(dT),m&&t(bIe),m&&t(dd),w(IL),m&&t(FIe),m&&t(Oo),w(qL),w(jL),w(mT),w(DL),w(_T),m&&t(vIe),m&&t(fd),w(GL),m&&t(TIe),m&&t(Vo),w(OL),w(XL),w(FT),w(zL),w(xT),m&&t(MIe),m&&t(ud),w(QL),m&&t(EIe),m&&t(Xo),w(WL),w(UL),w(kT),w(JL),w(PT),m&&t(CIe),m&&t(bd),w(KL),m&&t(wIe),m&&t(zo),w(ZL),w(o8),w(qT),w(r8),w(VT),m&&t(AIe),m&&t(Td),w(t8),m&&t(yIe),m&&t(Qo),w(a8),w(s8),w(zT),w(l8),w(JT),m&&t(LIe),m&&t(wd),w(i8),m&&t(xIe),m&&t(Wo),w(d8),w(m8),w(KT),w(f8),w(rM),m&&t($Ie),m&&t(Ld),w(h8),m&&t(kIe),m&&t(Ho),w(u8),w(_8),w(aM),w(b8),w(lM),m&&t(SIe),m&&t(kd),w(F8),m&&t(RIe),m&&t(Uo),w(v8),w(M8),w(dM),w(E8),w(uM),m&&t(BIe),m&&t(Bd),w(C8),m&&t(PIe),m&&t(Jo),w(w8),w(y8),w(_M),w(L8),w(vM),m&&t(IIe),m&&t(qd),w(x8),m&&t(qIe),m&&t(Yo),w($8),w(S8),w(MM),w(R8),w(g4),m&&t(NIe),m&&t(Dd),w(B8),m&&t(jIe),m&&t(Ko),w(P8),w(q8),w(u4),w(N8),w(j4),m&&t(DIe),m&&t(Vd),w(j8),m&&t(GIe),m&&t(Zo),w(D8),w(O8),w(G4),w(V8),w(eE),m&&t(OIe),m&&t(Qd),w(X8),m&&t(VIe),m&&t(er),w(z8),w(W8),w(rE),w(H8),w(sE),m&&t(XIe),m&&t(Jd),w(U8),m&&t(zIe),m&&t(or),w(J8),w(K8),w(iE),w(Z8),w(xE),m&&t(QIe),m&&t(Zd),w(ex),m&&t(WIe),m&&t(rr),w(ox),w(tx),w(kE),w(ax),w(OE),m&&t(HIe),m&&t(rc),w(nx),m&&t(UIe),m&&t(tr),w(sx),w(ix),w(XE),w(dx),w(_5),m&&t(JIe),m&&t(nc),w(cx),m&&t(YIe),m&&t(ar),w(mx),w(gx),w(F5),w(hx),w(q5),m&&t(KIe),m&&t(ic),w(ux),m&&t(ZIe),m&&t(nr),w(px),w(bx),w(j5),w(Fx),w(O5),m&&t(eqe),m&&t(mc),w(Tx),m&&t(oqe),m&&t(sr),w(Mx),w(Cx),w(X5),w(wx),w(Q5),m&&t(rqe),m&&t(hc),w(Ax),m&&t(tqe),m&&t(lr),w(yx),w(xx),w(H5),w($x),w(uC),m&&t(aqe),m&&t(_c),w(kx),m&&t(nqe),m&&t(ir),w(Sx),w(Bx),w(_C),w(Px),w(NC),m&&t(sqe),m&&t(vc),w(Ix),m&&t(lqe),m&&t(dr),w(qx),w(jx),w(DC),w(Dx),w(OC),m&&t(iqe),m&&t(Ec),w(Gx),m&&t(dqe),m&&t(cr),w(Ox),w(Xx),w(XC),w(zx),w(QC),m&&t(cqe),m&&t(Ac),w(Qx),m&&t(mqe),m&&t(mr),w(Wx),w(Ux),w(HC),w(Jx),w(v3),m&&t(fqe),m&&t(xc),w(Yx),m&&t(gqe),m&&t(fr),w(Kx),w(e7),w(M3),w(o7),w(S3),m&&t(hqe),m&&t(Sc),w(r7),m&&t(uqe),m&&t(gr),w(t7),w(n7),w(B3),w(s7),w(W3),m&&t(pqe),m&&t(Pc),w(l7),m&&t(_qe),m&&t(hr),w(i7),w(c7),w(U3),w(m7),w(sw),m&&t(bqe),m&&t(Nc),w(f7),m&&t(Fqe),m&&t(ur),w(g7),w(u7),w(iw),w(p7),w(bw),m&&t(vqe),m&&t(Gc),w(_7),m&&t(Tqe),m&&t(pr),w(b7),w(v7),w(vw),w(T7),w(kw),m&&t(Mqe),m&&t(Xc),w(M7),m&&t(Eqe),m&&t(_r),w(E7),w(w7),w(Rw),w(A7),w(Xw),m&&t(Cqe),m&&t(Wc),w(y7),m&&t(wqe),m&&t(br),w(L7),w($7),w(Qw),w(k7),w(oA),m&&t(Aqe),m&&t(Jc),w(S7),m&&t(yqe),m&&t(Fr),w(R7),w(P7),w(tA),w(I7),w(fA),m&&t(Lqe),m&&t(Zc),w(q7),m&&t(xqe),m&&t(vr),w(N7),w(D7),w(hA),w(G7),w(pA),m&&t($qe),m&&t(rm),w(O7),m&&t(kqe),m&&t(Tr),w(V7),w(z7),w(bA),w(Q7),w(TA),m&&t(Sqe),m&&t(nm),w(H7),m&&t(Rqe),m&&t(Mr),w(U7),w(Y7),w(EA),w(K7),w(wA)}}}const kLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SLt(A){return S6t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jLt extends L6t{constructor(g){super();x6t(this,g,SLt,$Lt,$6t,{})}}export{jLt as default,kLt as metadata};
