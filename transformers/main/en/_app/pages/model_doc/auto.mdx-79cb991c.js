import{S as N4t,i as j4t,s as D4t,e as a,k as l,w as m,t as o,M as q4t,c as n,d as t,m as i,a as s,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p,v as G4t}from"../../chunks/vendor-6b77c823.js";import{T as Vxr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function O4t(Pm){let K,io,de,Ee,lo,me,Ce,Vo,Ii,$m,ma,Ni,ji,ty,Im,Be,co,Di,Gn,ay,On,Xn,ny,qi,Vn,sy,Gi,Nm,qa;return{c(){K=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),$m=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),ty=o(")."),Im=l(),Be=a("p"),co=o("Likewise, if your "),Di=a("code"),Gn=o("NewModel"),ay=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),ny=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),sy=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Nm=o("NewModelConfig"),qa=o(")."),this.h()},l(mo){K=n(mo,"P",{});var ue=s(K);io=r(ue,"If your "),de=n(ue,"CODE",{});var J8=s(de);Ee=r(J8,"NewModelConfig"),J8.forEach(t),lo=r(ue," is a subclass of "),me=n(ue,"CODE",{});var Oi=s(me);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(ue,`, make sure its
`),Ii=n(ue,"CODE",{});var Y8=s(Ii);$m=r(Y8,"model_type"),Y8.forEach(t),ma=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var K8=s(Ni);ji=r(K8,'"new-model"'),K8.forEach(t),ty=r(ue,")."),ue.forEach(t),Im=i(mo),Be=n(mo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);Gn=r(Ga,"NewModel"),Ga.forEach(t),ay=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var Z8=s(On);Xn=r(Z8,"PreTrainedModel"),Z8.forEach(t),ny=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var jm=s(qi);Vn=r(jm,"config_class"),jm.forEach(t),sy=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var e9=s(Gi);Nm=r(e9,"NewModelConfig"),e9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ue){b(mo,K,ue),e(K,io),e(K,de),e(de,Ee),e(K,lo),e(K,me),e(me,Ce),e(K,Vo),e(K,Ii),e(Ii,$m),e(K,ma),e(K,Ni),e(Ni,ji),e(K,ty),b(mo,Im,ue),b(mo,Be,ue),e(Be,co),e(Be,Di),e(Di,Gn),e(Be,ay),e(Be,On),e(On,Xn),e(Be,ny),e(Be,qi),e(qi,Vn),e(Be,sy),e(Be,Gi),e(Gi,Nm),e(Be,qa)},d(mo){mo&&t(K),mo&&t(Im),mo&&t(Be)}}}function X4t(Pm){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){K=n(me,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(me){me&&t(K)}}}function V4t(Pm){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){K=n(me,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(me){me&&t(K)}}}function z4t(Pm){let K,io,de,Ee,lo,me,Ce,Vo,Ii,$m,ma,Ni,ji,ty,Im,Be,co,Di,Gn,ay,On,Xn,ny,qi,Vn,sy,Gi,Nm,qa,mo,ue,J8,Oi,Y8,K8,zo,Ga,Z8,jm,e9,s$e,Wxe,Xi,Dm,PQ,ly,l$e,$Q,i$e,Qxe,zn,d$e,IQ,c$e,m$e,NQ,f$e,g$e,Hxe,iy,Uxe,o9,h$e,Jxe,qm,Yxe,Vi,Gm,jQ,dy,u$e,DQ,p$e,Kxe,Wo,cy,_$e,my,b$e,r9,v$e,T$e,F$e,fy,C$e,qQ,M$e,E$e,y$e,fo,gy,w$e,GQ,A$e,L$e,zi,B$e,OQ,x$e,k$e,XQ,R$e,S$e,P$e,v,Om,VQ,$$e,I$e,t9,N$e,j$e,D$e,Xm,zQ,q$e,G$e,a9,O$e,X$e,V$e,Vm,WQ,z$e,W$e,n9,Q$e,H$e,U$e,zm,QQ,J$e,Y$e,s9,K$e,Z$e,eIe,Wm,HQ,oIe,rIe,l9,tIe,aIe,nIe,Qm,UQ,sIe,lIe,i9,iIe,dIe,cIe,Hm,JQ,mIe,fIe,d9,gIe,hIe,uIe,Um,YQ,pIe,_Ie,c9,bIe,vIe,TIe,Jm,KQ,FIe,CIe,m9,MIe,EIe,yIe,Ym,ZQ,wIe,AIe,f9,LIe,BIe,xIe,Km,eH,kIe,RIe,g9,SIe,PIe,$Ie,Zm,oH,IIe,NIe,h9,jIe,DIe,qIe,ef,rH,GIe,OIe,u9,XIe,VIe,zIe,of,tH,WIe,QIe,p9,HIe,UIe,JIe,rf,aH,YIe,KIe,_9,ZIe,eNe,oNe,tf,nH,rNe,tNe,b9,aNe,nNe,sNe,af,sH,lNe,iNe,v9,dNe,cNe,mNe,nf,lH,fNe,gNe,T9,hNe,uNe,pNe,sf,iH,_Ne,bNe,F9,vNe,TNe,FNe,lf,dH,CNe,MNe,C9,ENe,yNe,wNe,df,cH,ANe,LNe,M9,BNe,xNe,kNe,cf,mH,RNe,SNe,E9,PNe,$Ne,INe,mf,fH,NNe,jNe,y9,DNe,qNe,GNe,ff,gH,ONe,XNe,w9,VNe,zNe,WNe,gf,hH,QNe,HNe,A9,UNe,JNe,YNe,hf,uH,KNe,ZNe,L9,eje,oje,rje,uf,pH,tje,aje,B9,nje,sje,lje,pf,_H,ije,dje,x9,cje,mje,fje,_f,bH,gje,hje,k9,uje,pje,_je,bf,vH,bje,vje,R9,Tje,Fje,Cje,vf,TH,Mje,Eje,S9,yje,wje,Aje,Tf,FH,Lje,Bje,P9,xje,kje,Rje,Ff,CH,Sje,Pje,$9,$je,Ije,Nje,Cf,MH,jje,Dje,I9,qje,Gje,Oje,Mf,EH,Xje,Vje,N9,zje,Wje,Qje,Ef,yH,Hje,Uje,j9,Jje,Yje,Kje,yf,wH,Zje,eDe,D9,oDe,rDe,tDe,wf,AH,aDe,nDe,q9,sDe,lDe,iDe,Af,LH,dDe,cDe,G9,mDe,fDe,gDe,Lf,BH,hDe,uDe,O9,pDe,_De,bDe,Bf,xH,vDe,TDe,X9,FDe,CDe,MDe,xf,kH,EDe,yDe,V9,wDe,ADe,LDe,kf,RH,BDe,xDe,z9,kDe,RDe,SDe,Rf,SH,PDe,$De,W9,IDe,NDe,jDe,Sf,PH,DDe,qDe,Q9,GDe,ODe,XDe,Pf,$H,VDe,zDe,H9,WDe,QDe,HDe,$f,IH,UDe,JDe,U9,YDe,KDe,ZDe,If,NH,eqe,oqe,J9,rqe,tqe,aqe,Nf,jH,nqe,sqe,Y9,lqe,iqe,dqe,jf,DH,cqe,mqe,K9,fqe,gqe,hqe,Df,qH,uqe,pqe,Z9,_qe,bqe,vqe,qf,GH,Tqe,Fqe,eB,Cqe,Mqe,Eqe,Gf,OH,yqe,wqe,oB,Aqe,Lqe,Bqe,Of,XH,xqe,kqe,rB,Rqe,Sqe,Pqe,Xf,VH,$qe,Iqe,tB,Nqe,jqe,Dqe,Vf,zH,qqe,Gqe,aB,Oqe,Xqe,Vqe,zf,WH,zqe,Wqe,nB,Qqe,Hqe,Uqe,Wf,QH,Jqe,Yqe,sB,Kqe,Zqe,eGe,Qf,HH,oGe,rGe,lB,tGe,aGe,nGe,Hf,UH,sGe,lGe,iB,iGe,dGe,cGe,Uf,JH,mGe,fGe,dB,gGe,hGe,uGe,Jf,YH,pGe,_Ge,cB,bGe,vGe,TGe,Yf,KH,FGe,CGe,mB,MGe,EGe,yGe,Kf,ZH,wGe,AGe,fB,LGe,BGe,xGe,Zf,eU,kGe,RGe,gB,SGe,PGe,$Ge,eg,oU,IGe,NGe,hB,jGe,DGe,qGe,og,rU,GGe,OGe,uB,XGe,VGe,zGe,rg,tU,WGe,QGe,pB,HGe,UGe,JGe,tg,aU,YGe,KGe,_B,ZGe,eOe,oOe,ag,nU,rOe,tOe,bB,aOe,nOe,sOe,ng,sU,lOe,iOe,vB,dOe,cOe,mOe,sg,lU,fOe,gOe,TB,hOe,uOe,pOe,lg,iU,_Oe,bOe,FB,vOe,TOe,FOe,ig,dU,COe,MOe,CB,EOe,yOe,wOe,dg,cU,AOe,LOe,MB,BOe,xOe,kOe,cg,mU,ROe,SOe,EB,POe,$Oe,IOe,mg,fU,NOe,jOe,yB,DOe,qOe,GOe,fg,gU,OOe,XOe,wB,VOe,zOe,WOe,gg,hU,QOe,HOe,AB,UOe,JOe,YOe,hg,uU,KOe,ZOe,LB,eXe,oXe,rXe,ug,pU,tXe,aXe,BB,nXe,sXe,lXe,pg,_U,iXe,dXe,xB,cXe,mXe,fXe,_g,bU,gXe,hXe,kB,uXe,pXe,_Xe,bg,vU,bXe,vXe,RB,TXe,FXe,CXe,vg,TU,MXe,EXe,SB,yXe,wXe,AXe,Tg,FU,LXe,BXe,PB,xXe,kXe,RXe,Fg,CU,SXe,PXe,$B,$Xe,IXe,NXe,Cg,MU,jXe,DXe,IB,qXe,GXe,OXe,Mg,EU,XXe,VXe,NB,zXe,WXe,QXe,Eg,yU,HXe,UXe,jB,JXe,YXe,KXe,yg,wU,ZXe,eVe,DB,oVe,rVe,tVe,wg,AU,aVe,nVe,qB,sVe,lVe,iVe,Ag,LU,dVe,cVe,GB,mVe,fVe,gVe,Lg,BU,hVe,uVe,OB,pVe,_Ve,bVe,Bg,xU,vVe,TVe,XB,FVe,CVe,MVe,xg,kU,EVe,yVe,VB,wVe,AVe,LVe,kg,RU,BVe,xVe,zB,kVe,RVe,SVe,SU,PVe,$Ve,hy,IVe,Rg,uy,NVe,PU,jVe,Zxe,Wi,Sg,$U,py,DVe,IU,qVe,eke,Qo,_y,GVe,by,OVe,WB,XVe,VVe,zVe,vy,WVe,NU,QVe,HVe,UVe,go,Ty,JVe,jU,YVe,KVe,Oa,ZVe,DU,eze,oze,qU,rze,tze,GU,aze,nze,sze,E,Wn,OU,lze,ize,QB,dze,cze,HB,mze,fze,gze,Qn,XU,hze,uze,UB,pze,_ze,JB,bze,vze,Tze,Hn,VU,Fze,Cze,YB,Mze,Eze,KB,yze,wze,Aze,Pg,zU,Lze,Bze,ZB,xze,kze,Rze,Un,WU,Sze,Pze,ex,$ze,Ize,ox,Nze,jze,Dze,$g,QU,qze,Gze,rx,Oze,Xze,Vze,Ig,HU,zze,Wze,tx,Qze,Hze,Uze,Ng,UU,Jze,Yze,ax,Kze,Zze,eWe,Jn,JU,oWe,rWe,nx,tWe,aWe,sx,nWe,sWe,lWe,Yn,YU,iWe,dWe,lx,cWe,mWe,ix,fWe,gWe,hWe,Kn,KU,uWe,pWe,dx,_We,bWe,cx,vWe,TWe,FWe,jg,ZU,CWe,MWe,mx,EWe,yWe,wWe,Dg,eJ,AWe,LWe,fx,BWe,xWe,kWe,Zn,oJ,RWe,SWe,gx,PWe,$We,hx,IWe,NWe,jWe,qg,rJ,DWe,qWe,ux,GWe,OWe,XWe,es,tJ,VWe,zWe,px,WWe,QWe,_x,HWe,UWe,JWe,os,aJ,YWe,KWe,bx,ZWe,eQe,vx,oQe,rQe,tQe,rs,nJ,aQe,nQe,Tx,sQe,lQe,sJ,iQe,dQe,cQe,Gg,lJ,mQe,fQe,Fx,gQe,hQe,uQe,ts,iJ,pQe,_Qe,Cx,bQe,vQe,Mx,TQe,FQe,CQe,Og,dJ,MQe,EQe,Ex,yQe,wQe,AQe,as,cJ,LQe,BQe,yx,xQe,kQe,wx,RQe,SQe,PQe,ns,mJ,$Qe,IQe,Ax,NQe,jQe,Lx,DQe,qQe,GQe,ss,fJ,OQe,XQe,Bx,VQe,zQe,xx,WQe,QQe,HQe,Xg,gJ,UQe,JQe,kx,YQe,KQe,ZQe,ls,hJ,eHe,oHe,Rx,rHe,tHe,Sx,aHe,nHe,sHe,Vg,uJ,lHe,iHe,Px,dHe,cHe,mHe,is,pJ,fHe,gHe,$x,hHe,uHe,Ix,pHe,_He,bHe,ds,_J,vHe,THe,Nx,FHe,CHe,jx,MHe,EHe,yHe,cs,bJ,wHe,AHe,Dx,LHe,BHe,qx,xHe,kHe,RHe,ms,vJ,SHe,PHe,Gx,$He,IHe,Ox,NHe,jHe,DHe,zg,TJ,qHe,GHe,Xx,OHe,XHe,VHe,fs,FJ,zHe,WHe,Vx,QHe,HHe,zx,UHe,JHe,YHe,gs,CJ,KHe,ZHe,Wx,eUe,oUe,Qx,rUe,tUe,aUe,hs,MJ,nUe,sUe,Hx,lUe,iUe,Ux,dUe,cUe,mUe,us,EJ,fUe,gUe,Jx,hUe,uUe,Yx,pUe,_Ue,bUe,ps,yJ,vUe,TUe,Kx,FUe,CUe,Zx,MUe,EUe,yUe,_s,wJ,wUe,AUe,ek,LUe,BUe,ok,xUe,kUe,RUe,Wg,AJ,SUe,PUe,rk,$Ue,IUe,NUe,bs,LJ,jUe,DUe,tk,qUe,GUe,ak,OUe,XUe,VUe,Qg,BJ,zUe,WUe,nk,QUe,HUe,UUe,Hg,xJ,JUe,YUe,sk,KUe,ZUe,eJe,vs,kJ,oJe,rJe,lk,tJe,aJe,ik,nJe,sJe,lJe,Ts,RJ,iJe,dJe,dk,cJe,mJe,ck,fJe,gJe,hJe,Ug,SJ,uJe,pJe,mk,_Je,bJe,vJe,Fs,PJ,TJe,FJe,fk,CJe,MJe,gk,EJe,yJe,wJe,Cs,$J,AJe,LJe,hk,BJe,xJe,uk,kJe,RJe,SJe,Ms,IJ,PJe,$Je,pk,IJe,NJe,_k,jJe,DJe,qJe,Es,NJ,GJe,OJe,bk,XJe,VJe,vk,zJe,WJe,QJe,ys,jJ,HJe,UJe,Tk,JJe,YJe,Fk,KJe,ZJe,eYe,Jg,DJ,oYe,rYe,Ck,tYe,aYe,nYe,Yg,qJ,sYe,lYe,Mk,iYe,dYe,cYe,Kg,GJ,mYe,fYe,Ek,gYe,hYe,uYe,Zg,OJ,pYe,_Ye,yk,bYe,vYe,TYe,ws,XJ,FYe,CYe,wk,MYe,EYe,Ak,yYe,wYe,AYe,eh,VJ,LYe,BYe,Lk,xYe,kYe,RYe,As,zJ,SYe,PYe,Bk,$Ye,IYe,xk,NYe,jYe,DYe,Ls,WJ,qYe,GYe,kk,OYe,XYe,Rk,VYe,zYe,WYe,Bs,QJ,QYe,HYe,Sk,UYe,JYe,Pk,YYe,KYe,ZYe,xs,HJ,eKe,oKe,$k,rKe,tKe,Ik,aKe,nKe,sKe,ks,UJ,lKe,iKe,Nk,dKe,cKe,jk,mKe,fKe,gKe,Rs,JJ,hKe,uKe,Dk,pKe,_Ke,qk,bKe,vKe,TKe,oh,YJ,FKe,CKe,Gk,MKe,EKe,yKe,rh,KJ,wKe,AKe,Ok,LKe,BKe,xKe,Ss,ZJ,kKe,RKe,Xk,SKe,PKe,Vk,$Ke,IKe,NKe,Ps,eY,jKe,DKe,zk,qKe,GKe,Wk,OKe,XKe,VKe,$s,oY,zKe,WKe,Qk,QKe,HKe,Hk,UKe,JKe,YKe,th,rY,KKe,ZKe,Uk,eZe,oZe,rZe,ah,tY,tZe,aZe,Jk,nZe,sZe,lZe,nh,aY,iZe,dZe,Yk,cZe,mZe,fZe,sh,nY,gZe,hZe,Kk,uZe,pZe,_Ze,Is,sY,bZe,vZe,Zk,TZe,FZe,eR,CZe,MZe,EZe,lh,lY,yZe,wZe,oR,AZe,LZe,BZe,ih,iY,xZe,kZe,rR,RZe,SZe,PZe,Ns,dY,$Ze,IZe,tR,NZe,jZe,aR,DZe,qZe,GZe,js,cY,OZe,XZe,nR,VZe,zZe,sR,WZe,QZe,HZe,mY,UZe,JZe,Fy,YZe,dh,Cy,KZe,fY,ZZe,oke,Qi,ch,gY,My,eeo,hY,oeo,rke,Ho,Ey,reo,yy,teo,lR,aeo,neo,seo,wy,leo,uY,ieo,deo,ceo,$e,Ay,meo,pY,feo,geo,Xa,heo,_Y,ueo,peo,bY,_eo,beo,vY,veo,Teo,Feo,re,mh,TY,Ceo,Meo,iR,Eeo,yeo,weo,fh,FY,Aeo,Leo,dR,Beo,xeo,keo,gh,CY,Reo,Seo,cR,Peo,$eo,Ieo,hh,MY,Neo,jeo,mR,Deo,qeo,Geo,uh,EY,Oeo,Xeo,fR,Veo,zeo,Weo,ph,yY,Qeo,Heo,gR,Ueo,Jeo,Yeo,_h,wY,Keo,Zeo,hR,eoo,ooo,roo,bh,AY,too,aoo,uR,noo,soo,loo,vh,LY,ioo,doo,pR,coo,moo,foo,Th,BY,goo,hoo,_R,uoo,poo,_oo,Fh,xY,boo,voo,bR,Too,Foo,Coo,Ch,kY,Moo,Eoo,vR,yoo,woo,Aoo,Mh,RY,Loo,Boo,TR,xoo,koo,Roo,Eh,SY,Soo,Poo,FR,$oo,Ioo,Noo,yh,PY,joo,Doo,CR,qoo,Goo,Ooo,wh,$Y,Xoo,Voo,MR,zoo,Woo,Qoo,Ah,IY,Hoo,Uoo,ER,Joo,Yoo,Koo,Lh,NY,Zoo,ero,yR,oro,rro,tro,Bh,aro,jY,nro,sro,Ly,lro,xh,By,iro,DY,dro,tke,Hi,kh,qY,xy,cro,GY,mro,ake,Uo,ky,fro,Ry,gro,wR,hro,uro,pro,Sy,_ro,OY,bro,vro,Tro,Ie,Py,Fro,XY,Cro,Mro,Ui,Ero,VY,yro,wro,zY,Aro,Lro,Bro,xe,Rh,WY,xro,kro,AR,Rro,Sro,Pro,Sh,QY,$ro,Iro,LR,Nro,jro,Dro,Ph,HY,qro,Gro,BR,Oro,Xro,Vro,$h,UY,zro,Wro,xR,Qro,Hro,Uro,Ih,JY,Jro,Yro,kR,Kro,Zro,eto,Nh,YY,oto,rto,RR,tto,ato,nto,jh,KY,sto,lto,SR,ito,dto,cto,Dh,ZY,mto,fto,PR,gto,hto,uto,qh,pto,eK,_to,bto,$y,vto,Gh,Iy,Tto,oK,Fto,nke,Ji,Oh,rK,Ny,Cto,tK,Mto,ske,Jo,jy,Eto,Yi,yto,aK,wto,Ato,nK,Lto,Bto,xto,Dy,kto,sK,Rto,Sto,Pto,Vr,qy,$to,lK,Ito,Nto,Ki,jto,iK,Dto,qto,dK,Gto,Oto,Xto,cK,Vto,zto,Gy,Wto,Ne,Oy,Qto,mK,Hto,Uto,Va,Jto,fK,Yto,Kto,gK,Zto,eao,hK,oao,rao,tao,F,Xh,uK,aao,nao,$R,sao,lao,iao,Vh,pK,dao,cao,IR,mao,fao,gao,zh,_K,hao,uao,NR,pao,_ao,bao,Wh,bK,vao,Tao,jR,Fao,Cao,Mao,Qh,vK,Eao,yao,DR,wao,Aao,Lao,Hh,TK,Bao,xao,qR,kao,Rao,Sao,Uh,FK,Pao,$ao,GR,Iao,Nao,jao,Jh,CK,Dao,qao,OR,Gao,Oao,Xao,Yh,MK,Vao,zao,XR,Wao,Qao,Hao,Kh,EK,Uao,Jao,VR,Yao,Kao,Zao,Zh,yK,eno,ono,zR,rno,tno,ano,eu,wK,nno,sno,WR,lno,ino,dno,ou,AK,cno,mno,QR,fno,gno,hno,ru,LK,uno,pno,HR,_no,bno,vno,tu,BK,Tno,Fno,UR,Cno,Mno,Eno,au,xK,yno,wno,JR,Ano,Lno,Bno,nu,kK,xno,kno,YR,Rno,Sno,Pno,su,RK,$no,Ino,KR,Nno,jno,Dno,lu,SK,qno,Gno,ZR,Ono,Xno,Vno,iu,PK,zno,Wno,eS,Qno,Hno,Uno,du,$K,Jno,Yno,oS,Kno,Zno,eso,cu,IK,oso,rso,rS,tso,aso,nso,mu,NK,sso,lso,tS,iso,dso,cso,fu,jK,mso,fso,aS,gso,hso,uso,gu,DK,pso,_so,nS,bso,vso,Tso,hu,qK,Fso,Cso,sS,Mso,Eso,yso,uu,GK,wso,Aso,lS,Lso,Bso,xso,Ds,OK,kso,Rso,iS,Sso,Pso,dS,$so,Iso,Nso,pu,XK,jso,Dso,cS,qso,Gso,Oso,_u,VK,Xso,Vso,mS,zso,Wso,Qso,bu,zK,Hso,Uso,fS,Jso,Yso,Kso,vu,WK,Zso,elo,gS,olo,rlo,tlo,Tu,QK,alo,nlo,hS,slo,llo,ilo,Fu,HK,dlo,clo,uS,mlo,flo,glo,Cu,UK,hlo,ulo,pS,plo,_lo,blo,Mu,JK,vlo,Tlo,_S,Flo,Clo,Mlo,Eu,YK,Elo,ylo,bS,wlo,Alo,Llo,yu,KK,Blo,xlo,vS,klo,Rlo,Slo,wu,ZK,Plo,$lo,TS,Ilo,Nlo,jlo,Au,eZ,Dlo,qlo,FS,Glo,Olo,Xlo,Lu,oZ,Vlo,zlo,CS,Wlo,Qlo,Hlo,Bu,rZ,Ulo,Jlo,MS,Ylo,Klo,Zlo,xu,tZ,eio,oio,ES,rio,tio,aio,ku,aZ,nio,sio,yS,lio,iio,dio,Ru,nZ,cio,mio,wS,fio,gio,hio,Su,sZ,uio,pio,AS,_io,bio,vio,Pu,lZ,Tio,Fio,LS,Cio,Mio,Eio,$u,iZ,yio,wio,BS,Aio,Lio,Bio,Iu,dZ,xio,kio,xS,Rio,Sio,Pio,Nu,cZ,$io,Iio,kS,Nio,jio,Dio,ju,mZ,qio,Gio,RS,Oio,Xio,Vio,Du,fZ,zio,Wio,SS,Qio,Hio,Uio,qu,gZ,Jio,Yio,PS,Kio,Zio,edo,Gu,hZ,odo,rdo,$S,tdo,ado,ndo,Ou,uZ,sdo,ldo,IS,ido,ddo,cdo,Xu,pZ,mdo,fdo,NS,gdo,hdo,udo,Vu,_Z,pdo,_do,jS,bdo,vdo,Tdo,zu,bZ,Fdo,Cdo,DS,Mdo,Edo,ydo,Wu,vZ,wdo,Ado,qS,Ldo,Bdo,xdo,Qu,TZ,kdo,Rdo,GS,Sdo,Pdo,$do,Hu,FZ,Ido,Ndo,OS,jdo,Ddo,qdo,Uu,CZ,Gdo,Odo,XS,Xdo,Vdo,zdo,Ju,MZ,Wdo,Qdo,VS,Hdo,Udo,Jdo,Yu,EZ,Ydo,Kdo,zS,Zdo,eco,oco,Ku,yZ,rco,tco,WS,aco,nco,sco,Zu,wZ,lco,ico,QS,dco,cco,mco,ep,AZ,fco,gco,HS,hco,uco,pco,op,LZ,_co,bco,US,vco,Tco,Fco,rp,BZ,Cco,Mco,JS,Eco,yco,wco,tp,xZ,Aco,Lco,YS,Bco,xco,kco,ap,kZ,Rco,Sco,KS,Pco,$co,Ico,np,RZ,Nco,jco,ZS,Dco,qco,Gco,sp,SZ,Oco,Xco,eP,Vco,zco,Wco,lp,PZ,Qco,Hco,oP,Uco,Jco,Yco,ip,$Z,Kco,Zco,rP,emo,omo,rmo,dp,IZ,tmo,amo,tP,nmo,smo,lmo,cp,NZ,imo,dmo,aP,cmo,mmo,fmo,mp,jZ,gmo,hmo,nP,umo,pmo,_mo,fp,DZ,bmo,vmo,sP,Tmo,Fmo,Cmo,gp,qZ,Mmo,Emo,lP,ymo,wmo,Amo,hp,GZ,Lmo,Bmo,iP,xmo,kmo,Rmo,up,OZ,Smo,Pmo,dP,$mo,Imo,Nmo,pp,XZ,jmo,Dmo,cP,qmo,Gmo,Omo,_p,VZ,Xmo,Vmo,mP,zmo,Wmo,Qmo,bp,zZ,Hmo,Umo,fP,Jmo,Ymo,Kmo,vp,WZ,Zmo,efo,gP,ofo,rfo,tfo,Tp,QZ,afo,nfo,hP,sfo,lfo,ifo,Fp,HZ,dfo,cfo,uP,mfo,ffo,gfo,Cp,UZ,hfo,ufo,pP,pfo,_fo,bfo,Mp,JZ,vfo,Tfo,_P,Ffo,Cfo,Mfo,Ep,Efo,YZ,yfo,wfo,KZ,Afo,Lfo,ZZ,Bfo,xfo,Xy,lke,Zi,yp,eee,Vy,kfo,oee,Rfo,ike,Yo,zy,Sfo,ed,Pfo,ree,$fo,Ifo,tee,Nfo,jfo,Dfo,Wy,qfo,aee,Gfo,Ofo,Xfo,zr,Qy,Vfo,nee,zfo,Wfo,od,Qfo,see,Hfo,Ufo,lee,Jfo,Yfo,Kfo,iee,Zfo,ego,Hy,ogo,je,Uy,rgo,dee,tgo,ago,za,ngo,cee,sgo,lgo,mee,igo,dgo,fee,cgo,mgo,fgo,k,wp,gee,ggo,hgo,bP,ugo,pgo,_go,Ap,hee,bgo,vgo,vP,Tgo,Fgo,Cgo,Lp,uee,Mgo,Ego,TP,ygo,wgo,Ago,Bp,pee,Lgo,Bgo,FP,xgo,kgo,Rgo,xp,_ee,Sgo,Pgo,CP,$go,Igo,Ngo,kp,bee,jgo,Dgo,MP,qgo,Ggo,Ogo,Rp,vee,Xgo,Vgo,EP,zgo,Wgo,Qgo,Sp,Tee,Hgo,Ugo,yP,Jgo,Ygo,Kgo,Pp,Fee,Zgo,eho,wP,oho,rho,tho,$p,Cee,aho,nho,AP,sho,lho,iho,Ip,Mee,dho,cho,LP,mho,fho,gho,Np,Eee,hho,uho,BP,pho,_ho,bho,jp,yee,vho,Tho,xP,Fho,Cho,Mho,Dp,wee,Eho,yho,kP,who,Aho,Lho,qp,Aee,Bho,xho,RP,kho,Rho,Sho,Gp,Lee,Pho,$ho,SP,Iho,Nho,jho,Op,Bee,Dho,qho,PP,Gho,Oho,Xho,Xp,xee,Vho,zho,$P,Who,Qho,Hho,Vp,kee,Uho,Jho,IP,Yho,Kho,Zho,zp,Ree,euo,ouo,NP,ruo,tuo,auo,Wp,See,nuo,suo,jP,luo,iuo,duo,Qp,Pee,cuo,muo,DP,fuo,guo,huo,Hp,$ee,uuo,puo,qP,_uo,buo,vuo,Up,Iee,Tuo,Fuo,GP,Cuo,Muo,Euo,Jp,Nee,yuo,wuo,OP,Auo,Luo,Buo,Yp,jee,xuo,kuo,XP,Ruo,Suo,Puo,Kp,Dee,$uo,Iuo,VP,Nuo,juo,Duo,Zp,qee,quo,Guo,zP,Ouo,Xuo,Vuo,e_,Gee,zuo,Wuo,WP,Quo,Huo,Uuo,o_,Oee,Juo,Yuo,QP,Kuo,Zuo,epo,r_,Xee,opo,rpo,HP,tpo,apo,npo,t_,Vee,spo,lpo,UP,ipo,dpo,cpo,a_,zee,mpo,fpo,JP,gpo,hpo,upo,n_,Wee,ppo,_po,YP,bpo,vpo,Tpo,s_,Qee,Fpo,Cpo,KP,Mpo,Epo,ypo,l_,Hee,wpo,Apo,ZP,Lpo,Bpo,xpo,i_,Uee,kpo,Rpo,e$,Spo,Ppo,$po,d_,Jee,Ipo,Npo,o$,jpo,Dpo,qpo,c_,Yee,Gpo,Opo,r$,Xpo,Vpo,zpo,m_,Wpo,Kee,Qpo,Hpo,Zee,Upo,Jpo,eoe,Ypo,Kpo,Jy,dke,rd,f_,ooe,Yy,Zpo,roe,e_o,cke,Ko,Ky,o_o,td,r_o,toe,t_o,a_o,aoe,n_o,s_o,l_o,Zy,i_o,noe,d_o,c_o,m_o,Wr,ew,f_o,soe,g_o,h_o,ad,u_o,loe,p_o,__o,ioe,b_o,v_o,T_o,doe,F_o,C_o,ow,M_o,De,rw,E_o,coe,y_o,w_o,Wa,A_o,moe,L_o,B_o,foe,x_o,k_o,goe,R_o,S_o,P_o,$,g_,hoe,$_o,I_o,t$,N_o,j_o,D_o,h_,uoe,q_o,G_o,a$,O_o,X_o,V_o,u_,poe,z_o,W_o,n$,Q_o,H_o,U_o,p_,_oe,J_o,Y_o,s$,K_o,Z_o,ebo,__,boe,obo,rbo,l$,tbo,abo,nbo,b_,voe,sbo,lbo,i$,ibo,dbo,cbo,v_,Toe,mbo,fbo,d$,gbo,hbo,ubo,T_,Foe,pbo,_bo,c$,bbo,vbo,Tbo,F_,Coe,Fbo,Cbo,m$,Mbo,Ebo,ybo,C_,Moe,wbo,Abo,f$,Lbo,Bbo,xbo,M_,Eoe,kbo,Rbo,g$,Sbo,Pbo,$bo,E_,yoe,Ibo,Nbo,h$,jbo,Dbo,qbo,y_,woe,Gbo,Obo,u$,Xbo,Vbo,zbo,w_,Aoe,Wbo,Qbo,p$,Hbo,Ubo,Jbo,A_,Loe,Ybo,Kbo,_$,Zbo,e2o,o2o,L_,Boe,r2o,t2o,b$,a2o,n2o,s2o,B_,xoe,l2o,i2o,v$,d2o,c2o,m2o,x_,koe,f2o,g2o,T$,h2o,u2o,p2o,k_,Roe,_2o,b2o,F$,v2o,T2o,F2o,R_,Soe,C2o,M2o,C$,E2o,y2o,w2o,S_,Poe,A2o,L2o,M$,B2o,x2o,k2o,P_,$oe,R2o,S2o,E$,P2o,$2o,I2o,$_,Ioe,N2o,j2o,y$,D2o,q2o,G2o,I_,Noe,O2o,X2o,w$,V2o,z2o,W2o,N_,joe,Q2o,H2o,A$,U2o,J2o,Y2o,j_,Doe,K2o,Z2o,L$,evo,ovo,rvo,D_,qoe,tvo,avo,B$,nvo,svo,lvo,q_,Goe,ivo,dvo,x$,cvo,mvo,fvo,G_,Ooe,gvo,hvo,k$,uvo,pvo,_vo,O_,Xoe,bvo,vvo,R$,Tvo,Fvo,Cvo,X_,Voe,Mvo,Evo,S$,yvo,wvo,Avo,V_,zoe,Lvo,Bvo,P$,xvo,kvo,Rvo,z_,Woe,Svo,Pvo,$$,$vo,Ivo,Nvo,W_,Qoe,jvo,Dvo,I$,qvo,Gvo,Ovo,Q_,Hoe,Xvo,Vvo,N$,zvo,Wvo,Qvo,H_,Hvo,Uoe,Uvo,Jvo,Joe,Yvo,Kvo,Yoe,Zvo,eTo,tw,mke,nd,U_,Koe,aw,oTo,Zoe,rTo,fke,Zo,nw,tTo,sd,aTo,ere,nTo,sTo,ore,lTo,iTo,dTo,sw,cTo,rre,mTo,fTo,gTo,Qr,lw,hTo,tre,uTo,pTo,ld,_To,are,bTo,vTo,nre,TTo,FTo,CTo,sre,MTo,ETo,iw,yTo,qe,dw,wTo,lre,ATo,LTo,Qa,BTo,ire,xTo,kTo,dre,RTo,STo,cre,PTo,$To,ITo,I,J_,mre,NTo,jTo,j$,DTo,qTo,GTo,Y_,fre,OTo,XTo,D$,VTo,zTo,WTo,K_,gre,QTo,HTo,q$,UTo,JTo,YTo,Z_,hre,KTo,ZTo,G$,e1o,o1o,r1o,eb,ure,t1o,a1o,O$,n1o,s1o,l1o,ob,pre,i1o,d1o,X$,c1o,m1o,f1o,rb,_re,g1o,h1o,V$,u1o,p1o,_1o,tb,bre,b1o,v1o,z$,T1o,F1o,C1o,ab,vre,M1o,E1o,W$,y1o,w1o,A1o,nb,Tre,L1o,B1o,Q$,x1o,k1o,R1o,sb,Fre,S1o,P1o,H$,$1o,I1o,N1o,lb,Cre,j1o,D1o,U$,q1o,G1o,O1o,ib,Mre,X1o,V1o,J$,z1o,W1o,Q1o,db,Ere,H1o,U1o,Y$,J1o,Y1o,K1o,cb,yre,Z1o,eFo,K$,oFo,rFo,tFo,mb,wre,aFo,nFo,Z$,sFo,lFo,iFo,fb,Are,dFo,cFo,eI,mFo,fFo,gFo,gb,Lre,hFo,uFo,oI,pFo,_Fo,bFo,hb,Bre,vFo,TFo,rI,FFo,CFo,MFo,ub,xre,EFo,yFo,tI,wFo,AFo,LFo,pb,kre,BFo,xFo,aI,kFo,RFo,SFo,_b,Rre,PFo,$Fo,nI,IFo,NFo,jFo,bb,Sre,DFo,qFo,sI,GFo,OFo,XFo,vb,Pre,VFo,zFo,lI,WFo,QFo,HFo,Tb,$re,UFo,JFo,iI,YFo,KFo,ZFo,Fb,Ire,eCo,oCo,dI,rCo,tCo,aCo,Cb,Nre,nCo,sCo,cI,lCo,iCo,dCo,Mb,jre,cCo,mCo,mI,fCo,gCo,hCo,Eb,Dre,uCo,pCo,fI,_Co,bCo,vCo,yb,qre,TCo,FCo,gI,CCo,MCo,ECo,wb,Gre,yCo,wCo,Ore,ACo,LCo,BCo,Ab,Xre,xCo,kCo,hI,RCo,SCo,PCo,Lb,Vre,$Co,ICo,uI,NCo,jCo,DCo,Bb,zre,qCo,GCo,pI,OCo,XCo,VCo,xb,Wre,zCo,WCo,_I,QCo,HCo,UCo,kb,JCo,Qre,YCo,KCo,Hre,ZCo,eMo,Ure,oMo,rMo,cw,gke,id,Rb,Jre,mw,tMo,Yre,aMo,hke,er,fw,nMo,dd,sMo,Kre,lMo,iMo,Zre,dMo,cMo,mMo,gw,fMo,ete,gMo,hMo,uMo,Hr,hw,pMo,ote,_Mo,bMo,cd,vMo,rte,TMo,FMo,tte,CMo,MMo,EMo,ate,yMo,wMo,uw,AMo,Ge,pw,LMo,nte,BMo,xMo,Ha,kMo,ste,RMo,SMo,lte,PMo,$Mo,ite,IMo,NMo,jMo,se,Sb,dte,DMo,qMo,bI,GMo,OMo,XMo,Pb,cte,VMo,zMo,vI,WMo,QMo,HMo,$b,mte,UMo,JMo,TI,YMo,KMo,ZMo,Ib,fte,e4o,o4o,FI,r4o,t4o,a4o,Nb,gte,n4o,s4o,CI,l4o,i4o,d4o,jb,hte,c4o,m4o,MI,f4o,g4o,h4o,Db,ute,u4o,p4o,EI,_4o,b4o,v4o,qb,pte,T4o,F4o,yI,C4o,M4o,E4o,Gb,_te,y4o,w4o,wI,A4o,L4o,B4o,Ob,bte,x4o,k4o,AI,R4o,S4o,P4o,Xb,vte,$4o,I4o,LI,N4o,j4o,D4o,Vb,Tte,q4o,G4o,BI,O4o,X4o,V4o,zb,Fte,z4o,W4o,xI,Q4o,H4o,U4o,Wb,Cte,J4o,Y4o,kI,K4o,Z4o,eEo,Qb,Mte,oEo,rEo,RI,tEo,aEo,nEo,Hb,Ete,sEo,lEo,SI,iEo,dEo,cEo,Ub,mEo,yte,fEo,gEo,wte,hEo,uEo,Ate,pEo,_Eo,_w,uke,md,Jb,Lte,bw,bEo,Bte,vEo,pke,or,vw,TEo,fd,FEo,xte,CEo,MEo,kte,EEo,yEo,wEo,Tw,AEo,Rte,LEo,BEo,xEo,Ur,Fw,kEo,Ste,REo,SEo,gd,PEo,Pte,$Eo,IEo,$te,NEo,jEo,DEo,Ite,qEo,GEo,Cw,OEo,Oe,Mw,XEo,Nte,VEo,zEo,Ua,WEo,jte,QEo,HEo,Dte,UEo,JEo,qte,YEo,KEo,ZEo,A,Yb,Gte,e3o,o3o,PI,r3o,t3o,a3o,Kb,Ote,n3o,s3o,$I,l3o,i3o,d3o,Zb,Xte,c3o,m3o,II,f3o,g3o,h3o,e2,Vte,u3o,p3o,NI,_3o,b3o,v3o,o2,zte,T3o,F3o,jI,C3o,M3o,E3o,r2,Wte,y3o,w3o,DI,A3o,L3o,B3o,t2,Qte,x3o,k3o,qI,R3o,S3o,P3o,a2,Hte,$3o,I3o,GI,N3o,j3o,D3o,n2,Ute,q3o,G3o,OI,O3o,X3o,V3o,s2,Jte,z3o,W3o,XI,Q3o,H3o,U3o,l2,Yte,J3o,Y3o,VI,K3o,Z3o,e5o,i2,Kte,o5o,r5o,zI,t5o,a5o,n5o,d2,Zte,s5o,l5o,WI,i5o,d5o,c5o,c2,eae,m5o,f5o,QI,g5o,h5o,u5o,m2,oae,p5o,_5o,HI,b5o,v5o,T5o,f2,rae,F5o,C5o,UI,M5o,E5o,y5o,g2,tae,w5o,A5o,JI,L5o,B5o,x5o,h2,aae,k5o,R5o,YI,S5o,P5o,$5o,u2,nae,I5o,N5o,KI,j5o,D5o,q5o,p2,sae,G5o,O5o,ZI,X5o,V5o,z5o,_2,lae,W5o,Q5o,eN,H5o,U5o,J5o,b2,iae,Y5o,K5o,oN,Z5o,eyo,oyo,v2,dae,ryo,tyo,rN,ayo,nyo,syo,T2,cae,lyo,iyo,tN,dyo,cyo,myo,F2,mae,fyo,gyo,aN,hyo,uyo,pyo,C2,fae,_yo,byo,nN,vyo,Tyo,Fyo,M2,gae,Cyo,Myo,sN,Eyo,yyo,wyo,E2,hae,Ayo,Lyo,lN,Byo,xyo,kyo,y2,uae,Ryo,Syo,iN,Pyo,$yo,Iyo,w2,pae,Nyo,jyo,dN,Dyo,qyo,Gyo,A2,_ae,Oyo,Xyo,cN,Vyo,zyo,Wyo,L2,bae,Qyo,Hyo,mN,Uyo,Jyo,Yyo,B2,vae,Kyo,Zyo,fN,ewo,owo,rwo,x2,Tae,two,awo,gN,nwo,swo,lwo,k2,Fae,iwo,dwo,hN,cwo,mwo,fwo,R2,Cae,gwo,hwo,uN,uwo,pwo,_wo,S2,Mae,bwo,vwo,pN,Two,Fwo,Cwo,P2,Eae,Mwo,Ewo,_N,ywo,wwo,Awo,$2,yae,Lwo,Bwo,bN,xwo,kwo,Rwo,I2,wae,Swo,Pwo,vN,$wo,Iwo,Nwo,N2,Aae,jwo,Dwo,TN,qwo,Gwo,Owo,j2,Lae,Xwo,Vwo,FN,zwo,Wwo,Qwo,D2,Bae,Hwo,Uwo,CN,Jwo,Ywo,Kwo,q2,xae,Zwo,e6o,MN,o6o,r6o,t6o,G2,kae,a6o,n6o,EN,s6o,l6o,i6o,O2,Rae,d6o,c6o,yN,m6o,f6o,g6o,X2,h6o,Sae,u6o,p6o,Pae,_6o,b6o,$ae,v6o,T6o,Ew,_ke,hd,V2,Iae,yw,F6o,Nae,C6o,bke,rr,ww,M6o,ud,E6o,jae,y6o,w6o,Dae,A6o,L6o,B6o,Aw,x6o,qae,k6o,R6o,S6o,Jr,Lw,P6o,Gae,$6o,I6o,pd,N6o,Oae,j6o,D6o,Xae,q6o,G6o,O6o,Vae,X6o,V6o,Bw,z6o,Xe,xw,W6o,zae,Q6o,H6o,Ja,U6o,Wae,J6o,Y6o,Qae,K6o,Z6o,Hae,eAo,oAo,rAo,G,z2,Uae,tAo,aAo,wN,nAo,sAo,lAo,W2,Jae,iAo,dAo,AN,cAo,mAo,fAo,Q2,Yae,gAo,hAo,LN,uAo,pAo,_Ao,H2,Kae,bAo,vAo,BN,TAo,FAo,CAo,U2,Zae,MAo,EAo,xN,yAo,wAo,AAo,J2,ene,LAo,BAo,kN,xAo,kAo,RAo,Y2,one,SAo,PAo,RN,$Ao,IAo,NAo,K2,rne,jAo,DAo,SN,qAo,GAo,OAo,Z2,tne,XAo,VAo,PN,zAo,WAo,QAo,ev,ane,HAo,UAo,$N,JAo,YAo,KAo,ov,nne,ZAo,e0o,IN,o0o,r0o,t0o,rv,sne,a0o,n0o,NN,s0o,l0o,i0o,tv,lne,d0o,c0o,jN,m0o,f0o,g0o,av,ine,h0o,u0o,DN,p0o,_0o,b0o,nv,dne,v0o,T0o,qN,F0o,C0o,M0o,sv,cne,E0o,y0o,GN,w0o,A0o,L0o,lv,mne,B0o,x0o,ON,k0o,R0o,S0o,iv,fne,P0o,$0o,XN,I0o,N0o,j0o,dv,gne,D0o,q0o,VN,G0o,O0o,X0o,cv,hne,V0o,z0o,zN,W0o,Q0o,H0o,mv,une,U0o,J0o,WN,Y0o,K0o,Z0o,fv,pne,eLo,oLo,QN,rLo,tLo,aLo,gv,_ne,nLo,sLo,HN,lLo,iLo,dLo,hv,bne,cLo,mLo,UN,fLo,gLo,hLo,uv,vne,uLo,pLo,JN,_Lo,bLo,vLo,pv,Tne,TLo,FLo,YN,CLo,MLo,ELo,_v,Fne,yLo,wLo,KN,ALo,LLo,BLo,bv,Cne,xLo,kLo,ZN,RLo,SLo,PLo,vv,$Lo,Mne,ILo,NLo,Ene,jLo,DLo,yne,qLo,GLo,kw,vke,_d,Tv,wne,Rw,OLo,Ane,XLo,Tke,tr,Sw,VLo,bd,zLo,Lne,WLo,QLo,Bne,HLo,ULo,JLo,Pw,YLo,xne,KLo,ZLo,e7o,Yr,$w,o7o,kne,r7o,t7o,vd,a7o,Rne,n7o,s7o,Sne,l7o,i7o,d7o,Pne,c7o,m7o,Iw,f7o,Ve,Nw,g7o,$ne,h7o,u7o,Ya,p7o,Ine,_7o,b7o,Nne,v7o,T7o,jne,F7o,C7o,M7o,da,Fv,Dne,E7o,y7o,ej,w7o,A7o,L7o,Cv,qne,B7o,x7o,oj,k7o,R7o,S7o,Mv,Gne,P7o,$7o,rj,I7o,N7o,j7o,Ev,One,D7o,q7o,tj,G7o,O7o,X7o,yv,Xne,V7o,z7o,aj,W7o,Q7o,H7o,wv,U7o,Vne,J7o,Y7o,zne,K7o,Z7o,Wne,e8o,o8o,jw,Fke,Td,Av,Qne,Dw,r8o,Hne,t8o,Cke,ar,qw,a8o,Fd,n8o,Une,s8o,l8o,Jne,i8o,d8o,c8o,Gw,m8o,Yne,f8o,g8o,h8o,Kr,Ow,u8o,Kne,p8o,_8o,Cd,b8o,Zne,v8o,T8o,ese,F8o,C8o,M8o,ose,E8o,y8o,Xw,w8o,ze,Vw,A8o,rse,L8o,B8o,Ka,x8o,tse,k8o,R8o,ase,S8o,P8o,nse,$8o,I8o,N8o,D,Lv,sse,j8o,D8o,nj,q8o,G8o,O8o,Bv,lse,X8o,V8o,sj,z8o,W8o,Q8o,xv,ise,H8o,U8o,lj,J8o,Y8o,K8o,kv,dse,Z8o,e9o,ij,o9o,r9o,t9o,Rv,cse,a9o,n9o,dj,s9o,l9o,i9o,Sv,mse,d9o,c9o,cj,m9o,f9o,g9o,Pv,fse,h9o,u9o,mj,p9o,_9o,b9o,$v,gse,v9o,T9o,fj,F9o,C9o,M9o,Iv,hse,E9o,y9o,gj,w9o,A9o,L9o,Nv,use,B9o,x9o,hj,k9o,R9o,S9o,jv,pse,P9o,$9o,uj,I9o,N9o,j9o,Dv,_se,D9o,q9o,pj,G9o,O9o,X9o,qv,bse,V9o,z9o,_j,W9o,Q9o,H9o,Gv,vse,U9o,J9o,bj,Y9o,K9o,Z9o,Ov,Tse,eBo,oBo,vj,rBo,tBo,aBo,Xv,Fse,nBo,sBo,Tj,lBo,iBo,dBo,Vv,Cse,cBo,mBo,Fj,fBo,gBo,hBo,zv,Mse,uBo,pBo,Cj,_Bo,bBo,vBo,Wv,Ese,TBo,FBo,Mj,CBo,MBo,EBo,Qv,yse,yBo,wBo,Ej,ABo,LBo,BBo,Hv,wse,xBo,kBo,yj,RBo,SBo,PBo,Uv,Ase,$Bo,IBo,wj,NBo,jBo,DBo,Jv,Lse,qBo,GBo,Aj,OBo,XBo,VBo,Yv,Bse,zBo,WBo,Lj,QBo,HBo,UBo,Kv,xse,JBo,YBo,Bj,KBo,ZBo,exo,Zv,kse,oxo,rxo,xj,txo,axo,nxo,eT,Rse,sxo,lxo,kj,ixo,dxo,cxo,oT,Sse,mxo,fxo,Rj,gxo,hxo,uxo,rT,Pse,pxo,_xo,Sj,bxo,vxo,Txo,tT,$se,Fxo,Cxo,Pj,Mxo,Exo,yxo,aT,Ise,wxo,Axo,$j,Lxo,Bxo,xxo,nT,Nse,kxo,Rxo,Ij,Sxo,Pxo,$xo,sT,jse,Ixo,Nxo,Nj,jxo,Dxo,qxo,lT,Gxo,Dse,Oxo,Xxo,qse,Vxo,zxo,Gse,Wxo,Qxo,zw,Mke,Md,iT,Ose,Ww,Hxo,Xse,Uxo,Eke,nr,Qw,Jxo,Ed,Yxo,Vse,Kxo,Zxo,zse,eko,oko,rko,Hw,tko,Wse,ako,nko,sko,Zr,Uw,lko,Qse,iko,dko,yd,cko,Hse,mko,fko,Use,gko,hko,uko,Jse,pko,_ko,Jw,bko,We,Yw,vko,Yse,Tko,Fko,Za,Cko,Kse,Mko,Eko,Zse,yko,wko,ele,Ako,Lko,Bko,R,dT,ole,xko,kko,jj,Rko,Sko,Pko,cT,rle,$ko,Iko,Dj,Nko,jko,Dko,mT,tle,qko,Gko,qj,Oko,Xko,Vko,fT,ale,zko,Wko,Gj,Qko,Hko,Uko,gT,nle,Jko,Yko,Oj,Kko,Zko,eRo,hT,sle,oRo,rRo,Xj,tRo,aRo,nRo,uT,lle,sRo,lRo,Vj,iRo,dRo,cRo,pT,ile,mRo,fRo,zj,gRo,hRo,uRo,_T,dle,pRo,_Ro,Wj,bRo,vRo,TRo,bT,cle,FRo,CRo,Qj,MRo,ERo,yRo,vT,mle,wRo,ARo,Hj,LRo,BRo,xRo,TT,fle,kRo,RRo,Uj,SRo,PRo,$Ro,FT,gle,IRo,NRo,Jj,jRo,DRo,qRo,CT,hle,GRo,ORo,Yj,XRo,VRo,zRo,MT,ule,WRo,QRo,Kj,HRo,URo,JRo,ET,ple,YRo,KRo,Zj,ZRo,eSo,oSo,yT,_le,rSo,tSo,eD,aSo,nSo,sSo,wT,ble,lSo,iSo,oD,dSo,cSo,mSo,AT,vle,fSo,gSo,rD,hSo,uSo,pSo,LT,Tle,_So,bSo,tD,vSo,TSo,FSo,BT,Fle,CSo,MSo,aD,ESo,ySo,wSo,xT,Cle,ASo,LSo,nD,BSo,xSo,kSo,kT,Mle,RSo,SSo,sD,PSo,$So,ISo,RT,Ele,NSo,jSo,lD,DSo,qSo,GSo,ST,yle,OSo,XSo,iD,VSo,zSo,WSo,PT,wle,QSo,HSo,dD,USo,JSo,YSo,$T,Ale,KSo,ZSo,cD,ePo,oPo,rPo,IT,Lle,tPo,aPo,mD,nPo,sPo,lPo,NT,Ble,iPo,dPo,fD,cPo,mPo,fPo,jT,xle,gPo,hPo,gD,uPo,pPo,_Po,DT,kle,bPo,vPo,hD,TPo,FPo,CPo,qT,Rle,MPo,EPo,uD,yPo,wPo,APo,GT,Sle,LPo,BPo,pD,xPo,kPo,RPo,OT,Ple,SPo,PPo,_D,$Po,IPo,NPo,XT,$le,jPo,DPo,bD,qPo,GPo,OPo,VT,Ile,XPo,VPo,vD,zPo,WPo,QPo,zT,Nle,HPo,UPo,TD,JPo,YPo,KPo,WT,jle,ZPo,e$o,FD,o$o,r$o,t$o,QT,Dle,a$o,n$o,CD,s$o,l$o,i$o,HT,d$o,qle,c$o,m$o,Gle,f$o,g$o,Ole,h$o,u$o,Kw,yke,wd,UT,Xle,Zw,p$o,Vle,_$o,wke,sr,e6,b$o,Ad,v$o,zle,T$o,F$o,Wle,C$o,M$o,E$o,o6,y$o,Qle,w$o,A$o,L$o,et,r6,B$o,Hle,x$o,k$o,Ld,R$o,Ule,S$o,P$o,Jle,$$o,I$o,N$o,Yle,j$o,D$o,t6,q$o,Qe,a6,G$o,Kle,O$o,X$o,en,V$o,Zle,z$o,W$o,eie,Q$o,H$o,oie,U$o,J$o,Y$o,rie,JT,tie,K$o,Z$o,MD,eIo,oIo,rIo,YT,tIo,aie,aIo,nIo,nie,sIo,lIo,sie,iIo,dIo,n6,Ake,Bd,KT,lie,s6,cIo,iie,mIo,Lke,lr,l6,fIo,xd,gIo,die,hIo,uIo,cie,pIo,_Io,bIo,i6,vIo,mie,TIo,FIo,CIo,ot,d6,MIo,fie,EIo,yIo,kd,wIo,gie,AIo,LIo,hie,BIo,xIo,kIo,uie,RIo,SIo,c6,PIo,He,m6,$Io,pie,IIo,NIo,on,jIo,_ie,DIo,qIo,bie,GIo,OIo,vie,XIo,VIo,zIo,fe,ZT,Tie,WIo,QIo,ED,HIo,UIo,JIo,e1,Fie,YIo,KIo,yD,ZIo,eNo,oNo,qs,Cie,rNo,tNo,wD,aNo,nNo,AD,sNo,lNo,iNo,o1,Mie,dNo,cNo,LD,mNo,fNo,gNo,fa,Eie,hNo,uNo,BD,pNo,_No,xD,bNo,vNo,kD,TNo,FNo,CNo,r1,yie,MNo,ENo,RD,yNo,wNo,ANo,t1,wie,LNo,BNo,SD,xNo,kNo,RNo,a1,Aie,SNo,PNo,PD,$No,INo,NNo,n1,Lie,jNo,DNo,$D,qNo,GNo,ONo,s1,Bie,XNo,VNo,ID,zNo,WNo,QNo,l1,xie,HNo,UNo,ND,JNo,YNo,KNo,i1,ZNo,kie,ejo,ojo,Rie,rjo,tjo,Sie,ajo,njo,f6,Bke,Rd,d1,Pie,g6,sjo,$ie,ljo,xke,ir,h6,ijo,Sd,djo,Iie,cjo,mjo,Nie,fjo,gjo,hjo,u6,ujo,jie,pjo,_jo,bjo,rt,p6,vjo,Die,Tjo,Fjo,Pd,Cjo,qie,Mjo,Ejo,Gie,yjo,wjo,Ajo,Oie,Ljo,Bjo,_6,xjo,Ue,b6,kjo,Xie,Rjo,Sjo,rn,Pjo,Vie,$jo,Ijo,zie,Njo,jjo,Wie,Djo,qjo,Gjo,Qie,c1,Hie,Ojo,Xjo,jD,Vjo,zjo,Wjo,m1,Qjo,Uie,Hjo,Ujo,Jie,Jjo,Yjo,Yie,Kjo,Zjo,v6,kke,$d,f1,Kie,T6,eDo,Zie,oDo,Rke,dr,F6,rDo,Id,tDo,ede,aDo,nDo,ode,sDo,lDo,iDo,C6,dDo,rde,cDo,mDo,fDo,tt,M6,gDo,tde,hDo,uDo,Nd,pDo,ade,_Do,bDo,nde,vDo,TDo,FDo,sde,CDo,MDo,E6,EDo,Je,y6,yDo,lde,wDo,ADo,tn,LDo,ide,BDo,xDo,dde,kDo,RDo,cde,SDo,PDo,$Do,ke,g1,mde,IDo,NDo,DD,jDo,DDo,qDo,h1,fde,GDo,ODo,qD,XDo,VDo,zDo,u1,gde,WDo,QDo,GD,HDo,UDo,JDo,p1,hde,YDo,KDo,OD,ZDo,eqo,oqo,_1,ude,rqo,tqo,XD,aqo,nqo,sqo,b1,pde,lqo,iqo,VD,dqo,cqo,mqo,v1,_de,fqo,gqo,zD,hqo,uqo,pqo,T1,bde,_qo,bqo,WD,vqo,Tqo,Fqo,F1,Cqo,vde,Mqo,Eqo,Tde,yqo,wqo,Fde,Aqo,Lqo,w6,Ske,jd,C1,Cde,A6,Bqo,Mde,xqo,Pke,cr,L6,kqo,Dd,Rqo,Ede,Sqo,Pqo,yde,$qo,Iqo,Nqo,B6,jqo,wde,Dqo,qqo,Gqo,at,x6,Oqo,Ade,Xqo,Vqo,qd,zqo,Lde,Wqo,Qqo,Bde,Hqo,Uqo,Jqo,xde,Yqo,Kqo,k6,Zqo,Ye,R6,eGo,kde,oGo,rGo,an,tGo,Rde,aGo,nGo,Sde,sGo,lGo,Pde,iGo,dGo,cGo,nn,M1,$de,mGo,fGo,QD,gGo,hGo,uGo,E1,Ide,pGo,_Go,HD,bGo,vGo,TGo,y1,Nde,FGo,CGo,UD,MGo,EGo,yGo,w1,jde,wGo,AGo,JD,LGo,BGo,xGo,A1,kGo,Dde,RGo,SGo,qde,PGo,$Go,Gde,IGo,NGo,S6,$ke,Gd,L1,Ode,P6,jGo,Xde,DGo,Ike,mr,$6,qGo,Od,GGo,Vde,OGo,XGo,zde,VGo,zGo,WGo,I6,QGo,Wde,HGo,UGo,JGo,nt,N6,YGo,Qde,KGo,ZGo,Xd,eOo,Hde,oOo,rOo,Ude,tOo,aOo,nOo,Jde,sOo,lOo,j6,iOo,Ke,D6,dOo,Yde,cOo,mOo,sn,fOo,Kde,gOo,hOo,Zde,uOo,pOo,ece,_Oo,bOo,vOo,Re,B1,oce,TOo,FOo,YD,COo,MOo,EOo,x1,rce,yOo,wOo,KD,AOo,LOo,BOo,k1,tce,xOo,kOo,ZD,ROo,SOo,POo,R1,ace,$Oo,IOo,eq,NOo,jOo,DOo,S1,nce,qOo,GOo,oq,OOo,XOo,VOo,P1,sce,zOo,WOo,rq,QOo,HOo,UOo,$1,lce,JOo,YOo,tq,KOo,ZOo,eXo,I1,ice,oXo,rXo,aq,tXo,aXo,nXo,N1,sXo,dce,lXo,iXo,cce,dXo,cXo,mce,mXo,fXo,q6,Nke,Vd,j1,fce,G6,gXo,gce,hXo,jke,fr,O6,uXo,zd,pXo,hce,_Xo,bXo,uce,vXo,TXo,FXo,X6,CXo,pce,MXo,EXo,yXo,st,V6,wXo,_ce,AXo,LXo,Wd,BXo,bce,xXo,kXo,vce,RXo,SXo,PXo,Tce,$Xo,IXo,z6,NXo,Ze,W6,jXo,Fce,DXo,qXo,ln,GXo,Cce,OXo,XXo,Mce,VXo,zXo,Ece,WXo,QXo,HXo,Q6,D1,yce,UXo,JXo,nq,YXo,KXo,ZXo,q1,wce,eVo,oVo,sq,rVo,tVo,aVo,G1,nVo,Ace,sVo,lVo,Lce,iVo,dVo,Bce,cVo,mVo,H6,Dke,Qd,O1,xce,U6,fVo,kce,gVo,qke,gr,J6,hVo,Hd,uVo,Rce,pVo,_Vo,Sce,bVo,vVo,TVo,Y6,FVo,Pce,CVo,MVo,EVo,lt,K6,yVo,$ce,wVo,AVo,Ud,LVo,Ice,BVo,xVo,Nce,kVo,RVo,SVo,jce,PVo,$Vo,Z6,IVo,eo,eA,NVo,Dce,jVo,DVo,dn,qVo,qce,GVo,OVo,Gce,XVo,VVo,Oce,zVo,WVo,QVo,cn,X1,Xce,HVo,UVo,lq,JVo,YVo,KVo,V1,Vce,ZVo,ezo,iq,ozo,rzo,tzo,z1,zce,azo,nzo,dq,szo,lzo,izo,W1,Wce,dzo,czo,cq,mzo,fzo,gzo,Q1,hzo,Qce,uzo,pzo,Hce,_zo,bzo,Uce,vzo,Tzo,oA,Gke,Jd,H1,Jce,rA,Fzo,Yce,Czo,Oke,hr,tA,Mzo,Yd,Ezo,Kce,yzo,wzo,Zce,Azo,Lzo,Bzo,aA,xzo,eme,kzo,Rzo,Szo,it,nA,Pzo,ome,$zo,Izo,Kd,Nzo,rme,jzo,Dzo,tme,qzo,Gzo,Ozo,ame,Xzo,Vzo,sA,zzo,oo,lA,Wzo,nme,Qzo,Hzo,mn,Uzo,sme,Jzo,Yzo,lme,Kzo,Zzo,ime,eWo,oWo,rWo,Zd,U1,dme,tWo,aWo,mq,nWo,sWo,lWo,J1,cme,iWo,dWo,fq,cWo,mWo,fWo,Y1,mme,gWo,hWo,gq,uWo,pWo,_Wo,K1,bWo,fme,vWo,TWo,gme,FWo,CWo,hme,MWo,EWo,iA,Xke,ec,Z1,ume,dA,yWo,pme,wWo,Vke,ur,cA,AWo,oc,LWo,_me,BWo,xWo,bme,kWo,RWo,SWo,mA,PWo,vme,$Wo,IWo,NWo,dt,fA,jWo,Tme,DWo,qWo,rc,GWo,Fme,OWo,XWo,Cme,VWo,zWo,WWo,Mme,QWo,HWo,gA,UWo,ro,hA,JWo,Eme,YWo,KWo,fn,ZWo,yme,eQo,oQo,wme,rQo,tQo,Ame,aQo,nQo,sQo,Lme,eF,Bme,lQo,iQo,hq,dQo,cQo,mQo,oF,fQo,xme,gQo,hQo,kme,uQo,pQo,Rme,_Qo,bQo,uA,zke,tc,rF,Sme,pA,vQo,Pme,TQo,Wke,pr,_A,FQo,ac,CQo,$me,MQo,EQo,Ime,yQo,wQo,AQo,bA,LQo,Nme,BQo,xQo,kQo,ct,vA,RQo,jme,SQo,PQo,nc,$Qo,Dme,IQo,NQo,qme,jQo,DQo,qQo,Gme,GQo,OQo,TA,XQo,to,FA,VQo,Ome,zQo,WQo,gn,QQo,Xme,HQo,UQo,Vme,JQo,YQo,zme,KQo,ZQo,eHo,Wme,tF,Qme,oHo,rHo,uq,tHo,aHo,nHo,aF,sHo,Hme,lHo,iHo,Ume,dHo,cHo,Jme,mHo,fHo,CA,Qke,sc,nF,Yme,MA,gHo,Kme,hHo,Hke,_r,EA,uHo,lc,pHo,Zme,_Ho,bHo,efe,vHo,THo,FHo,yA,CHo,ofe,MHo,EHo,yHo,mt,wA,wHo,rfe,AHo,LHo,ic,BHo,tfe,xHo,kHo,afe,RHo,SHo,PHo,nfe,$Ho,IHo,AA,NHo,ao,LA,jHo,sfe,DHo,qHo,hn,GHo,lfe,OHo,XHo,ife,VHo,zHo,dfe,WHo,QHo,HHo,BA,sF,cfe,UHo,JHo,pq,YHo,KHo,ZHo,lF,mfe,eUo,oUo,_q,rUo,tUo,aUo,iF,nUo,ffe,sUo,lUo,gfe,iUo,dUo,hfe,cUo,mUo,xA,Uke,dc,dF,ufe,kA,fUo,pfe,gUo,Jke,br,RA,hUo,cc,uUo,_fe,pUo,_Uo,bfe,bUo,vUo,TUo,SA,FUo,vfe,CUo,MUo,EUo,ft,PA,yUo,Tfe,wUo,AUo,mc,LUo,Ffe,BUo,xUo,Cfe,kUo,RUo,SUo,Mfe,PUo,$Uo,$A,IUo,no,IA,NUo,Efe,jUo,DUo,un,qUo,yfe,GUo,OUo,wfe,XUo,VUo,Afe,zUo,WUo,QUo,Lfe,cF,Bfe,HUo,UUo,bq,JUo,YUo,KUo,mF,ZUo,xfe,eJo,oJo,kfe,rJo,tJo,Rfe,aJo,nJo,NA,Yke,fc,fF,Sfe,jA,sJo,Pfe,lJo,Kke,vr,DA,iJo,gc,dJo,$fe,cJo,mJo,Ife,fJo,gJo,hJo,qA,uJo,Nfe,pJo,_Jo,bJo,gt,GA,vJo,jfe,TJo,FJo,hc,CJo,Dfe,MJo,EJo,qfe,yJo,wJo,AJo,Gfe,LJo,BJo,OA,xJo,ho,XA,kJo,Ofe,RJo,SJo,pn,PJo,Xfe,$Jo,IJo,Vfe,NJo,jJo,zfe,DJo,qJo,GJo,B,gF,Wfe,OJo,XJo,vq,VJo,zJo,WJo,hF,Qfe,QJo,HJo,Tq,UJo,JJo,YJo,uF,Hfe,KJo,ZJo,Fq,eYo,oYo,rYo,pF,Ufe,tYo,aYo,Cq,nYo,sYo,lYo,_F,Jfe,iYo,dYo,Mq,cYo,mYo,fYo,bF,Yfe,gYo,hYo,Eq,uYo,pYo,_Yo,vF,Kfe,bYo,vYo,yq,TYo,FYo,CYo,TF,Zfe,MYo,EYo,wq,yYo,wYo,AYo,FF,ege,LYo,BYo,Aq,xYo,kYo,RYo,CF,oge,SYo,PYo,Lq,$Yo,IYo,NYo,MF,rge,jYo,DYo,Bq,qYo,GYo,OYo,EF,tge,XYo,VYo,xq,zYo,WYo,QYo,yF,age,HYo,UYo,kq,JYo,YYo,KYo,wF,nge,ZYo,eKo,Rq,oKo,rKo,tKo,AF,sge,aKo,nKo,Sq,sKo,lKo,iKo,LF,lge,dKo,cKo,Pq,mKo,fKo,gKo,Gs,ige,hKo,uKo,$q,pKo,_Ko,Iq,bKo,vKo,TKo,BF,dge,FKo,CKo,Nq,MKo,EKo,yKo,xF,cge,wKo,AKo,jq,LKo,BKo,xKo,kF,mge,kKo,RKo,Dq,SKo,PKo,$Ko,RF,fge,IKo,NKo,qq,jKo,DKo,qKo,SF,gge,GKo,OKo,Gq,XKo,VKo,zKo,PF,hge,WKo,QKo,Oq,HKo,UKo,JKo,$F,uge,YKo,KKo,Xq,ZKo,eZo,oZo,IF,pge,rZo,tZo,Vq,aZo,nZo,sZo,NF,_ge,lZo,iZo,zq,dZo,cZo,mZo,jF,bge,fZo,gZo,Wq,hZo,uZo,pZo,DF,vge,_Zo,bZo,Qq,vZo,TZo,FZo,qF,Tge,CZo,MZo,Hq,EZo,yZo,wZo,GF,Fge,AZo,LZo,Uq,BZo,xZo,kZo,OF,Cge,RZo,SZo,Jq,PZo,$Zo,IZo,XF,Mge,NZo,jZo,Yq,DZo,qZo,GZo,VF,Ege,OZo,XZo,Kq,VZo,zZo,WZo,zF,yge,QZo,HZo,Zq,UZo,JZo,YZo,WF,wge,KZo,ZZo,eG,eer,oer,rer,QF,Age,ter,aer,oG,ner,ser,ler,HF,Lge,ier,der,rG,cer,mer,fer,UF,Bge,ger,her,tG,uer,per,_er,JF,xge,ber,ver,aG,Ter,Fer,Cer,YF,kge,Mer,Eer,nG,yer,wer,Aer,KF,Rge,Ler,Ber,sG,xer,ker,Rer,ZF,Sge,Ser,Per,lG,$er,Ier,Ner,Pge,jer,Der,VA,Zke,uc,eC,$ge,zA,qer,Ige,Ger,eRe,Tr,WA,Oer,pc,Xer,Nge,Ver,zer,jge,Wer,Qer,Her,QA,Uer,Dge,Jer,Yer,Ker,ht,HA,Zer,qge,eor,oor,_c,ror,Gge,tor,aor,Oge,nor,sor,lor,Xge,ior,dor,UA,cor,uo,JA,mor,Vge,gor,hor,_n,uor,zge,por,_or,Wge,bor,vor,Qge,Tor,For,Cor,H,oC,Hge,Mor,Eor,iG,yor,wor,Aor,rC,Uge,Lor,Bor,dG,xor,kor,Ror,tC,Jge,Sor,Por,cG,$or,Ior,Nor,aC,Yge,jor,Dor,mG,qor,Gor,Oor,nC,Kge,Xor,Vor,fG,zor,Wor,Qor,sC,Zge,Hor,Uor,gG,Jor,Yor,Kor,lC,ehe,Zor,err,hG,orr,rrr,trr,iC,ohe,arr,nrr,uG,srr,lrr,irr,dC,rhe,drr,crr,pG,mrr,frr,grr,cC,the,hrr,urr,_G,prr,_rr,brr,mC,ahe,vrr,Trr,bG,Frr,Crr,Mrr,fC,nhe,Err,yrr,vG,wrr,Arr,Lrr,gC,she,Brr,xrr,TG,krr,Rrr,Srr,hC,lhe,Prr,$rr,FG,Irr,Nrr,jrr,uC,ihe,Drr,qrr,CG,Grr,Orr,Xrr,pC,dhe,Vrr,zrr,MG,Wrr,Qrr,Hrr,_C,che,Urr,Jrr,EG,Yrr,Krr,Zrr,bC,mhe,etr,otr,yG,rtr,ttr,atr,vC,fhe,ntr,str,wG,ltr,itr,dtr,TC,ghe,ctr,mtr,AG,ftr,gtr,htr,FC,hhe,utr,ptr,LG,_tr,btr,vtr,CC,uhe,Ttr,Ftr,BG,Ctr,Mtr,Etr,phe,ytr,wtr,YA,oRe,bc,MC,_he,KA,Atr,bhe,Ltr,rRe,Fr,ZA,Btr,vc,xtr,vhe,ktr,Rtr,The,Str,Ptr,$tr,e0,Itr,Fhe,Ntr,jtr,Dtr,ut,o0,qtr,Che,Gtr,Otr,Tc,Xtr,Mhe,Vtr,ztr,Ehe,Wtr,Qtr,Htr,yhe,Utr,Jtr,r0,Ytr,po,t0,Ktr,whe,Ztr,ear,bn,oar,Ahe,rar,tar,Lhe,aar,nar,Bhe,sar,lar,iar,ge,EC,xhe,dar,car,xG,mar,far,gar,yC,khe,har,uar,kG,par,_ar,bar,wC,Rhe,Tar,Far,RG,Car,Mar,Ear,AC,She,yar,war,SG,Aar,Lar,Bar,LC,Phe,xar,kar,PG,Rar,Sar,Par,BC,$he,$ar,Iar,$G,Nar,jar,Dar,xC,Ihe,qar,Gar,IG,Oar,Xar,Var,kC,Nhe,zar,War,NG,Qar,Har,Uar,RC,jhe,Jar,Yar,jG,Kar,Zar,enr,SC,Dhe,onr,rnr,DG,tnr,anr,nnr,PC,qhe,snr,lnr,qG,inr,dnr,cnr,Ghe,mnr,fnr,a0,tRe,Fc,$C,Ohe,n0,gnr,Xhe,hnr,aRe,Cr,s0,unr,Cc,pnr,Vhe,_nr,bnr,zhe,vnr,Tnr,Fnr,l0,Cnr,Whe,Mnr,Enr,ynr,pt,i0,wnr,Qhe,Anr,Lnr,Mc,Bnr,Hhe,xnr,knr,Uhe,Rnr,Snr,Pnr,Jhe,$nr,Inr,d0,Nnr,_o,c0,jnr,Yhe,Dnr,qnr,vn,Gnr,Khe,Onr,Xnr,Zhe,Vnr,znr,eue,Wnr,Qnr,Hnr,m0,IC,oue,Unr,Jnr,GG,Ynr,Knr,Znr,NC,rue,esr,osr,OG,rsr,tsr,asr,tue,nsr,ssr,f0,nRe,Ec,jC,aue,g0,lsr,nue,isr,sRe,Mr,h0,dsr,yc,csr,sue,msr,fsr,lue,gsr,hsr,usr,u0,psr,iue,_sr,bsr,vsr,_t,p0,Tsr,due,Fsr,Csr,wc,Msr,cue,Esr,ysr,mue,wsr,Asr,Lsr,fue,Bsr,xsr,_0,ksr,bo,b0,Rsr,gue,Ssr,Psr,Tn,$sr,hue,Isr,Nsr,uue,jsr,Dsr,pue,qsr,Gsr,Osr,J,DC,_ue,Xsr,Vsr,XG,zsr,Wsr,Qsr,qC,bue,Hsr,Usr,VG,Jsr,Ysr,Ksr,GC,vue,Zsr,elr,zG,olr,rlr,tlr,OC,Tue,alr,nlr,WG,slr,llr,ilr,XC,Fue,dlr,clr,QG,mlr,flr,glr,VC,Cue,hlr,ulr,HG,plr,_lr,blr,zC,Mue,vlr,Tlr,UG,Flr,Clr,Mlr,WC,Eue,Elr,ylr,JG,wlr,Alr,Llr,QC,yue,Blr,xlr,YG,klr,Rlr,Slr,HC,wue,Plr,$lr,KG,Ilr,Nlr,jlr,UC,Aue,Dlr,qlr,ZG,Glr,Olr,Xlr,JC,Lue,Vlr,zlr,eO,Wlr,Qlr,Hlr,YC,Bue,Ulr,Jlr,oO,Ylr,Klr,Zlr,KC,xue,eir,oir,rO,rir,tir,air,ZC,kue,nir,sir,tO,lir,iir,dir,eM,Rue,cir,mir,aO,fir,gir,hir,oM,Sue,uir,pir,nO,_ir,bir,vir,rM,Pue,Tir,Fir,sO,Cir,Mir,Eir,tM,$ue,yir,wir,lO,Air,Lir,Bir,aM,Iue,xir,kir,iO,Rir,Sir,Pir,Nue,$ir,Iir,v0,lRe,Ac,nM,jue,T0,Nir,Due,jir,iRe,Er,F0,Dir,Lc,qir,que,Gir,Oir,Gue,Xir,Vir,zir,C0,Wir,Oue,Qir,Hir,Uir,bt,M0,Jir,Xue,Yir,Kir,Bc,Zir,Vue,edr,odr,zue,rdr,tdr,adr,Wue,ndr,sdr,E0,ldr,vo,y0,idr,Que,ddr,cdr,Fn,mdr,Hue,fdr,gdr,Uue,hdr,udr,Jue,pdr,_dr,bdr,pe,sM,Yue,vdr,Tdr,dO,Fdr,Cdr,Mdr,lM,Kue,Edr,ydr,cO,wdr,Adr,Ldr,iM,Zue,Bdr,xdr,mO,kdr,Rdr,Sdr,dM,epe,Pdr,$dr,fO,Idr,Ndr,jdr,cM,ope,Ddr,qdr,gO,Gdr,Odr,Xdr,mM,rpe,Vdr,zdr,hO,Wdr,Qdr,Hdr,fM,tpe,Udr,Jdr,uO,Ydr,Kdr,Zdr,gM,ape,ecr,ocr,pO,rcr,tcr,acr,hM,npe,ncr,scr,_O,lcr,icr,dcr,uM,spe,ccr,mcr,bO,fcr,gcr,hcr,lpe,ucr,pcr,w0,dRe,xc,pM,ipe,A0,_cr,dpe,bcr,cRe,yr,L0,vcr,kc,Tcr,cpe,Fcr,Ccr,mpe,Mcr,Ecr,ycr,B0,wcr,fpe,Acr,Lcr,Bcr,vt,x0,xcr,gpe,kcr,Rcr,Rc,Scr,hpe,Pcr,$cr,upe,Icr,Ncr,jcr,ppe,Dcr,qcr,k0,Gcr,To,R0,Ocr,_pe,Xcr,Vcr,Cn,zcr,bpe,Wcr,Qcr,vpe,Hcr,Ucr,Tpe,Jcr,Ycr,Kcr,V,_M,Fpe,Zcr,emr,vO,omr,rmr,tmr,bM,Cpe,amr,nmr,TO,smr,lmr,imr,vM,Mpe,dmr,cmr,FO,mmr,fmr,gmr,TM,Epe,hmr,umr,CO,pmr,_mr,bmr,FM,ype,vmr,Tmr,MO,Fmr,Cmr,Mmr,CM,wpe,Emr,ymr,EO,wmr,Amr,Lmr,MM,Ape,Bmr,xmr,yO,kmr,Rmr,Smr,EM,Lpe,Pmr,$mr,wO,Imr,Nmr,jmr,yM,Bpe,Dmr,qmr,AO,Gmr,Omr,Xmr,wM,xpe,Vmr,zmr,LO,Wmr,Qmr,Hmr,AM,kpe,Umr,Jmr,BO,Ymr,Kmr,Zmr,LM,Rpe,efr,ofr,xO,rfr,tfr,afr,BM,Spe,nfr,sfr,kO,lfr,ifr,dfr,xM,Ppe,cfr,mfr,RO,ffr,gfr,hfr,kM,$pe,ufr,pfr,SO,_fr,bfr,vfr,RM,Ipe,Tfr,Ffr,PO,Cfr,Mfr,Efr,SM,Npe,yfr,wfr,$O,Afr,Lfr,Bfr,PM,jpe,xfr,kfr,IO,Rfr,Sfr,Pfr,$M,Dpe,$fr,Ifr,NO,Nfr,jfr,Dfr,IM,qpe,qfr,Gfr,jO,Ofr,Xfr,Vfr,NM,Gpe,zfr,Wfr,DO,Qfr,Hfr,Ufr,jM,Ope,Jfr,Yfr,qO,Kfr,Zfr,egr,DM,Xpe,ogr,rgr,GO,tgr,agr,ngr,qM,Vpe,sgr,lgr,OO,igr,dgr,cgr,GM,zpe,mgr,fgr,XO,ggr,hgr,ugr,Wpe,pgr,_gr,S0,mRe,Sc,OM,Qpe,P0,bgr,Hpe,vgr,fRe,wr,$0,Tgr,Pc,Fgr,Upe,Cgr,Mgr,Jpe,Egr,ygr,wgr,I0,Agr,Ype,Lgr,Bgr,xgr,Tt,N0,kgr,Kpe,Rgr,Sgr,$c,Pgr,Zpe,$gr,Igr,e_e,Ngr,jgr,Dgr,o_e,qgr,Ggr,j0,Ogr,Fo,D0,Xgr,r_e,Vgr,zgr,Mn,Wgr,t_e,Qgr,Hgr,a_e,Ugr,Jgr,n_e,Ygr,Kgr,Zgr,ae,XM,s_e,ehr,ohr,VO,rhr,thr,ahr,VM,l_e,nhr,shr,zO,lhr,ihr,dhr,zM,i_e,chr,mhr,WO,fhr,ghr,hhr,WM,d_e,uhr,phr,QO,_hr,bhr,vhr,QM,c_e,Thr,Fhr,HO,Chr,Mhr,Ehr,HM,m_e,yhr,whr,UO,Ahr,Lhr,Bhr,UM,f_e,xhr,khr,JO,Rhr,Shr,Phr,JM,g_e,$hr,Ihr,YO,Nhr,jhr,Dhr,YM,h_e,qhr,Ghr,KO,Ohr,Xhr,Vhr,KM,u_e,zhr,Whr,ZO,Qhr,Hhr,Uhr,ZM,p_e,Jhr,Yhr,eX,Khr,Zhr,eur,e4,__e,our,rur,oX,tur,aur,nur,o4,b_e,sur,lur,rX,iur,dur,cur,r4,v_e,mur,fur,tX,gur,hur,uur,t4,T_e,pur,_ur,aX,bur,vur,Tur,a4,F_e,Fur,Cur,nX,Mur,Eur,yur,n4,C_e,wur,Aur,sX,Lur,Bur,xur,M_e,kur,Rur,q0,gRe,Ic,s4,E_e,G0,Sur,y_e,Pur,hRe,Ar,O0,$ur,Nc,Iur,w_e,Nur,jur,A_e,Dur,qur,Gur,X0,Our,L_e,Xur,Vur,zur,Ft,V0,Wur,B_e,Qur,Hur,jc,Uur,x_e,Jur,Yur,k_e,Kur,Zur,epr,R_e,opr,rpr,z0,tpr,Co,W0,apr,S_e,npr,spr,En,lpr,P_e,ipr,dpr,$_e,cpr,mpr,I_e,fpr,gpr,hpr,N_e,l4,j_e,upr,ppr,lX,_pr,bpr,vpr,D_e,Tpr,Fpr,Q0,uRe,Dc,i4,q_e,H0,Cpr,G_e,Mpr,pRe,Lr,U0,Epr,qc,ypr,O_e,wpr,Apr,X_e,Lpr,Bpr,xpr,J0,kpr,V_e,Rpr,Spr,Ppr,Ct,Y0,$pr,z_e,Ipr,Npr,Gc,jpr,W_e,Dpr,qpr,Q_e,Gpr,Opr,Xpr,H_e,Vpr,zpr,K0,Wpr,Mo,Z0,Qpr,U_e,Hpr,Upr,yn,Jpr,J_e,Ypr,Kpr,Y_e,Zpr,e_r,K_e,o_r,r_r,t_r,Y,d4,Z_e,a_r,n_r,iX,s_r,l_r,i_r,c4,ebe,d_r,c_r,dX,m_r,f_r,g_r,m4,obe,h_r,u_r,cX,p_r,__r,b_r,f4,rbe,v_r,T_r,mX,F_r,C_r,M_r,g4,tbe,E_r,y_r,fX,w_r,A_r,L_r,h4,abe,B_r,x_r,gX,k_r,R_r,S_r,u4,nbe,P_r,$_r,hX,I_r,N_r,j_r,p4,sbe,D_r,q_r,uX,G_r,O_r,X_r,_4,lbe,V_r,z_r,pX,W_r,Q_r,H_r,b4,ibe,U_r,J_r,_X,Y_r,K_r,Z_r,v4,dbe,ebr,obr,bX,rbr,tbr,abr,T4,cbe,nbr,sbr,vX,lbr,ibr,dbr,F4,mbe,cbr,mbr,TX,fbr,gbr,hbr,C4,fbe,ubr,pbr,FX,_br,bbr,vbr,M4,gbe,Tbr,Fbr,CX,Cbr,Mbr,Ebr,E4,hbe,ybr,wbr,MX,Abr,Lbr,Bbr,y4,ube,xbr,kbr,EX,Rbr,Sbr,Pbr,w4,pbe,$br,Ibr,yX,Nbr,jbr,Dbr,A4,_be,qbr,Gbr,wX,Obr,Xbr,Vbr,L4,bbe,zbr,Wbr,AX,Qbr,Hbr,Ubr,vbe,Jbr,Ybr,eL,_Re,Oc,B4,Tbe,oL,Kbr,Fbe,Zbr,bRe,Br,rL,e2r,Xc,o2r,Cbe,r2r,t2r,Mbe,a2r,n2r,s2r,tL,l2r,Ebe,i2r,d2r,c2r,Mt,aL,m2r,ybe,f2r,g2r,Vc,h2r,wbe,u2r,p2r,Abe,_2r,b2r,v2r,Lbe,T2r,F2r,nL,C2r,Eo,sL,M2r,Bbe,E2r,y2r,wn,w2r,xbe,A2r,L2r,kbe,B2r,x2r,Rbe,k2r,R2r,S2r,Z,x4,Sbe,P2r,$2r,LX,I2r,N2r,j2r,k4,Pbe,D2r,q2r,BX,G2r,O2r,X2r,R4,$be,V2r,z2r,xX,W2r,Q2r,H2r,S4,Ibe,U2r,J2r,kX,Y2r,K2r,Z2r,P4,Nbe,evr,ovr,RX,rvr,tvr,avr,$4,jbe,nvr,svr,SX,lvr,ivr,dvr,I4,Dbe,cvr,mvr,PX,fvr,gvr,hvr,N4,qbe,uvr,pvr,$X,_vr,bvr,vvr,j4,Gbe,Tvr,Fvr,IX,Cvr,Mvr,Evr,D4,Obe,yvr,wvr,NX,Avr,Lvr,Bvr,q4,Xbe,xvr,kvr,jX,Rvr,Svr,Pvr,G4,Vbe,$vr,Ivr,DX,Nvr,jvr,Dvr,O4,zbe,qvr,Gvr,qX,Ovr,Xvr,Vvr,X4,Wbe,zvr,Wvr,GX,Qvr,Hvr,Uvr,V4,Qbe,Jvr,Yvr,OX,Kvr,Zvr,eTr,z4,Hbe,oTr,rTr,XX,tTr,aTr,nTr,W4,Ube,sTr,lTr,VX,iTr,dTr,cTr,Q4,Jbe,mTr,fTr,zX,gTr,hTr,uTr,H4,Ybe,pTr,_Tr,WX,bTr,vTr,TTr,Kbe,FTr,CTr,lL,vRe,zc,U4,Zbe,iL,MTr,e2e,ETr,TRe,xr,dL,yTr,Wc,wTr,o2e,ATr,LTr,r2e,BTr,xTr,kTr,cL,RTr,t2e,STr,PTr,$Tr,Et,mL,ITr,a2e,NTr,jTr,Qc,DTr,n2e,qTr,GTr,s2e,OTr,XTr,VTr,l2e,zTr,WTr,fL,QTr,yo,gL,HTr,i2e,UTr,JTr,An,YTr,d2e,KTr,ZTr,c2e,e1r,o1r,m2e,r1r,t1r,a1r,f2e,J4,g2e,n1r,s1r,QX,l1r,i1r,d1r,h2e,c1r,m1r,hL,FRe,Hc,Y4,u2e,uL,f1r,p2e,g1r,CRe,kr,pL,h1r,Uc,u1r,_2e,p1r,_1r,b2e,b1r,v1r,T1r,_L,F1r,v2e,C1r,M1r,E1r,yt,bL,y1r,T2e,w1r,A1r,Jc,L1r,F2e,B1r,x1r,C2e,k1r,R1r,S1r,M2e,P1r,$1r,vL,I1r,wo,TL,N1r,E2e,j1r,D1r,Ln,q1r,y2e,G1r,O1r,w2e,X1r,V1r,A2e,z1r,W1r,Q1r,L2e,K4,B2e,H1r,U1r,HX,J1r,Y1r,K1r,x2e,Z1r,eFr,FL,MRe,Yc,Z4,k2e,CL,oFr,R2e,rFr,ERe,Rr,ML,tFr,Kc,aFr,S2e,nFr,sFr,P2e,lFr,iFr,dFr,EL,cFr,$2e,mFr,fFr,gFr,wt,yL,hFr,I2e,uFr,pFr,Zc,_Fr,N2e,bFr,vFr,j2e,TFr,FFr,CFr,D2e,MFr,EFr,wL,yFr,Ao,AL,wFr,q2e,AFr,LFr,Bn,BFr,G2e,xFr,kFr,O2e,RFr,SFr,X2e,PFr,$Fr,IFr,z,eE,V2e,NFr,jFr,UX,DFr,qFr,GFr,oE,z2e,OFr,XFr,JX,VFr,zFr,WFr,rE,W2e,QFr,HFr,YX,UFr,JFr,YFr,tE,Q2e,KFr,ZFr,KX,eCr,oCr,rCr,aE,H2e,tCr,aCr,ZX,nCr,sCr,lCr,nE,U2e,iCr,dCr,eV,cCr,mCr,fCr,sE,J2e,gCr,hCr,oV,uCr,pCr,_Cr,lE,Y2e,bCr,vCr,rV,TCr,FCr,CCr,iE,K2e,MCr,ECr,tV,yCr,wCr,ACr,dE,Z2e,LCr,BCr,aV,xCr,kCr,RCr,cE,eve,SCr,PCr,nV,$Cr,ICr,NCr,mE,ove,jCr,DCr,sV,qCr,GCr,OCr,fE,rve,XCr,VCr,lV,zCr,WCr,QCr,gE,tve,HCr,UCr,iV,JCr,YCr,KCr,hE,ave,ZCr,eMr,dV,oMr,rMr,tMr,uE,nve,aMr,nMr,cV,sMr,lMr,iMr,pE,sve,dMr,cMr,mV,mMr,fMr,gMr,_E,lve,hMr,uMr,fV,pMr,_Mr,bMr,bE,ive,vMr,TMr,gV,FMr,CMr,MMr,vE,dve,EMr,yMr,hV,wMr,AMr,LMr,TE,cve,BMr,xMr,uV,kMr,RMr,SMr,FE,mve,PMr,$Mr,pV,IMr,NMr,jMr,CE,fve,DMr,qMr,_V,GMr,OMr,XMr,ME,gve,VMr,zMr,bV,WMr,QMr,HMr,EE,hve,UMr,JMr,vV,YMr,KMr,ZMr,uve,e4r,o4r,LL,yRe,em,yE,pve,BL,r4r,_ve,t4r,wRe,Sr,xL,a4r,om,n4r,bve,s4r,l4r,vve,i4r,d4r,c4r,kL,m4r,Tve,f4r,g4r,h4r,At,RL,u4r,Fve,p4r,_4r,rm,b4r,Cve,v4r,T4r,Mve,F4r,C4r,M4r,Eve,E4r,y4r,SL,w4r,Lo,PL,A4r,yve,L4r,B4r,xn,x4r,wve,k4r,R4r,Ave,S4r,P4r,Lve,$4r,I4r,N4r,ca,wE,Bve,j4r,D4r,TV,q4r,G4r,O4r,AE,xve,X4r,V4r,FV,z4r,W4r,Q4r,LE,kve,H4r,U4r,CV,J4r,Y4r,K4r,BE,Rve,Z4r,eEr,MV,oEr,rEr,tEr,xE,Sve,aEr,nEr,EV,sEr,lEr,iEr,Pve,dEr,cEr,$L,ARe,tm,kE,$ve,IL,mEr,Ive,fEr,LRe,Pr,NL,gEr,am,hEr,Nve,uEr,pEr,jve,_Er,bEr,vEr,jL,TEr,Dve,FEr,CEr,MEr,Lt,DL,EEr,qve,yEr,wEr,nm,AEr,Gve,LEr,BEr,Ove,xEr,kEr,REr,Xve,SEr,PEr,qL,$Er,Bo,GL,IEr,Vve,NEr,jEr,kn,DEr,zve,qEr,GEr,Wve,OEr,XEr,Qve,VEr,zEr,WEr,ce,RE,Hve,QEr,HEr,yV,UEr,JEr,YEr,SE,Uve,KEr,ZEr,wV,e3r,o3r,r3r,PE,Jve,t3r,a3r,AV,n3r,s3r,l3r,$E,Yve,i3r,d3r,LV,c3r,m3r,f3r,IE,Kve,g3r,h3r,BV,u3r,p3r,_3r,NE,Zve,b3r,v3r,xV,T3r,F3r,C3r,jE,eTe,M3r,E3r,kV,y3r,w3r,A3r,DE,oTe,L3r,B3r,RV,x3r,k3r,R3r,qE,rTe,S3r,P3r,SV,$3r,I3r,N3r,GE,tTe,j3r,D3r,PV,q3r,G3r,O3r,OE,aTe,X3r,V3r,$V,z3r,W3r,Q3r,XE,nTe,H3r,U3r,IV,J3r,Y3r,K3r,sTe,Z3r,e5r,OL,BRe,sm,VE,lTe,XL,o5r,iTe,r5r,xRe,$r,VL,t5r,lm,a5r,dTe,n5r,s5r,cTe,l5r,i5r,d5r,zL,c5r,mTe,m5r,f5r,g5r,Bt,WL,h5r,fTe,u5r,p5r,im,_5r,gTe,b5r,v5r,hTe,T5r,F5r,C5r,uTe,M5r,E5r,QL,y5r,xo,HL,w5r,pTe,A5r,L5r,Rn,B5r,_Te,x5r,k5r,bTe,R5r,S5r,vTe,P5r,$5r,I5r,_e,zE,TTe,N5r,j5r,NV,D5r,q5r,G5r,WE,FTe,O5r,X5r,jV,V5r,z5r,W5r,QE,CTe,Q5r,H5r,DV,U5r,J5r,Y5r,HE,MTe,K5r,Z5r,qV,eyr,oyr,ryr,UE,ETe,tyr,ayr,GV,nyr,syr,lyr,JE,yTe,iyr,dyr,OV,cyr,myr,fyr,YE,wTe,gyr,hyr,XV,uyr,pyr,_yr,KE,ATe,byr,vyr,VV,Tyr,Fyr,Cyr,ZE,LTe,Myr,Eyr,zV,yyr,wyr,Ayr,e3,BTe,Lyr,Byr,WV,xyr,kyr,Ryr,xTe,Syr,Pyr,UL,kRe,dm,o3,kTe,JL,$yr,RTe,Iyr,RRe,Ir,YL,Nyr,cm,jyr,STe,Dyr,qyr,PTe,Gyr,Oyr,Xyr,KL,Vyr,$Te,zyr,Wyr,Qyr,xt,ZL,Hyr,ITe,Uyr,Jyr,mm,Yyr,NTe,Kyr,Zyr,jTe,ewr,owr,rwr,DTe,twr,awr,e7,nwr,ko,o7,swr,qTe,lwr,iwr,Sn,dwr,GTe,cwr,mwr,OTe,fwr,gwr,XTe,hwr,uwr,pwr,Me,r3,VTe,_wr,bwr,QV,vwr,Twr,Fwr,t3,zTe,Cwr,Mwr,HV,Ewr,ywr,wwr,a3,WTe,Awr,Lwr,UV,Bwr,xwr,kwr,n3,QTe,Rwr,Swr,JV,Pwr,$wr,Iwr,s3,HTe,Nwr,jwr,YV,Dwr,qwr,Gwr,l3,UTe,Owr,Xwr,KV,Vwr,zwr,Wwr,i3,JTe,Qwr,Hwr,ZV,Uwr,Jwr,Ywr,d3,YTe,Kwr,Zwr,ez,e6r,o6r,r6r,c3,KTe,t6r,a6r,oz,n6r,s6r,l6r,ZTe,i6r,d6r,r7,SRe,fm,m3,e1e,t7,c6r,o1e,m6r,PRe,Nr,a7,f6r,gm,g6r,r1e,h6r,u6r,t1e,p6r,_6r,b6r,n7,v6r,a1e,T6r,F6r,C6r,kt,s7,M6r,n1e,E6r,y6r,hm,w6r,s1e,A6r,L6r,l1e,B6r,x6r,k6r,i1e,R6r,S6r,l7,P6r,Ro,i7,$6r,d1e,I6r,N6r,Pn,j6r,c1e,D6r,q6r,m1e,G6r,O6r,f1e,X6r,V6r,z6r,be,f3,g1e,W6r,Q6r,rz,H6r,U6r,J6r,g3,h1e,Y6r,K6r,tz,Z6r,eAr,oAr,h3,u1e,rAr,tAr,az,aAr,nAr,sAr,u3,p1e,lAr,iAr,nz,dAr,cAr,mAr,p3,_1e,fAr,gAr,sz,hAr,uAr,pAr,_3,b1e,_Ar,bAr,lz,vAr,TAr,FAr,b3,v1e,CAr,MAr,iz,EAr,yAr,wAr,v3,T1e,AAr,LAr,dz,BAr,xAr,kAr,T3,F1e,RAr,SAr,cz,PAr,$Ar,IAr,F3,C1e,NAr,jAr,mz,DAr,qAr,GAr,M1e,OAr,XAr,d7,$Re,um,C3,E1e,c7,VAr,y1e,zAr,IRe,jr,m7,WAr,pm,QAr,w1e,HAr,UAr,A1e,JAr,YAr,KAr,f7,ZAr,L1e,e0r,o0r,r0r,Rt,g7,t0r,B1e,a0r,n0r,_m,s0r,x1e,l0r,i0r,k1e,d0r,c0r,m0r,R1e,f0r,g0r,h7,h0r,So,u7,u0r,S1e,p0r,_0r,$n,b0r,P1e,v0r,T0r,$1e,F0r,C0r,I1e,M0r,E0r,y0r,ve,M3,N1e,w0r,A0r,fz,L0r,B0r,x0r,E3,j1e,k0r,R0r,gz,S0r,P0r,$0r,y3,D1e,I0r,N0r,hz,j0r,D0r,q0r,w3,q1e,G0r,O0r,uz,X0r,V0r,z0r,A3,G1e,W0r,Q0r,pz,H0r,U0r,J0r,L3,O1e,Y0r,K0r,_z,Z0r,eLr,oLr,B3,X1e,rLr,tLr,bz,aLr,nLr,sLr,x3,V1e,lLr,iLr,vz,dLr,cLr,mLr,k3,z1e,fLr,gLr,Tz,hLr,uLr,pLr,R3,W1e,_Lr,bLr,Fz,vLr,TLr,FLr,Q1e,CLr,MLr,p7,NRe,bm,S3,H1e,_7,ELr,U1e,yLr,jRe,Dr,b7,wLr,vm,ALr,J1e,LLr,BLr,Y1e,xLr,kLr,RLr,v7,SLr,K1e,PLr,$Lr,ILr,St,T7,NLr,Z1e,jLr,DLr,Tm,qLr,eFe,GLr,OLr,oFe,XLr,VLr,zLr,rFe,WLr,QLr,F7,HLr,Po,C7,ULr,tFe,JLr,YLr,In,KLr,aFe,ZLr,e7r,nFe,o7r,r7r,sFe,t7r,a7r,n7r,Se,P3,lFe,s7r,l7r,Cz,i7r,d7r,c7r,$3,iFe,m7r,f7r,Mz,g7r,h7r,u7r,I3,dFe,p7r,_7r,Ez,b7r,v7r,T7r,N3,cFe,F7r,C7r,yz,M7r,E7r,y7r,j3,mFe,w7r,A7r,wz,L7r,B7r,x7r,D3,fFe,k7r,R7r,Az,S7r,P7r,$7r,q3,gFe,I7r,N7r,Lz,j7r,D7r,q7r,G3,hFe,G7r,O7r,Bz,X7r,V7r,z7r,uFe,W7r,Q7r,M7,DRe,Fm,O3,pFe,E7,H7r,_Fe,U7r,qRe,qr,y7,J7r,Cm,Y7r,bFe,K7r,Z7r,vFe,e8r,o8r,r8r,w7,t8r,TFe,a8r,n8r,s8r,Pt,A7,l8r,FFe,i8r,d8r,Mm,c8r,CFe,m8r,f8r,MFe,g8r,h8r,u8r,EFe,p8r,_8r,L7,b8r,$o,B7,v8r,yFe,T8r,F8r,Nn,C8r,wFe,M8r,E8r,AFe,y8r,w8r,LFe,A8r,L8r,B8r,Pe,X3,BFe,x8r,k8r,xz,R8r,S8r,P8r,V3,xFe,$8r,I8r,kz,N8r,j8r,D8r,z3,kFe,q8r,G8r,Rz,O8r,X8r,V8r,W3,RFe,z8r,W8r,Sz,Q8r,H8r,U8r,Q3,SFe,J8r,Y8r,Pz,K8r,Z8r,e9r,H3,PFe,o9r,r9r,$z,t9r,a9r,n9r,U3,$Fe,s9r,l9r,Iz,i9r,d9r,c9r,J3,IFe,m9r,f9r,Nz,g9r,h9r,u9r,NFe,p9r,_9r,x7,GRe,Em,Y3,jFe,k7,b9r,DFe,v9r,ORe,Gr,R7,T9r,ym,F9r,qFe,C9r,M9r,GFe,E9r,y9r,w9r,S7,A9r,OFe,L9r,B9r,x9r,$t,P7,k9r,XFe,R9r,S9r,wm,P9r,VFe,$9r,I9r,zFe,N9r,j9r,D9r,WFe,q9r,G9r,$7,O9r,Io,I7,X9r,QFe,V9r,z9r,jn,W9r,HFe,Q9r,H9r,UFe,U9r,J9r,JFe,Y9r,K9r,Z9r,YFe,K3,KFe,eBr,oBr,jz,rBr,tBr,aBr,ZFe,nBr,sBr,N7,XRe,Am,Z3,eCe,j7,lBr,oCe,iBr,VRe,Or,D7,dBr,Lm,cBr,rCe,mBr,fBr,tCe,gBr,hBr,uBr,q7,pBr,aCe,_Br,bBr,vBr,It,G7,TBr,nCe,FBr,CBr,Bm,MBr,sCe,EBr,yBr,lCe,wBr,ABr,LBr,iCe,BBr,xBr,O7,kBr,No,X7,RBr,dCe,SBr,PBr,Dn,$Br,cCe,IBr,NBr,mCe,jBr,DBr,fCe,qBr,GBr,OBr,V7,e5,gCe,XBr,VBr,Dz,zBr,WBr,QBr,o5,hCe,HBr,UBr,qz,JBr,YBr,KBr,uCe,ZBr,exr,z7,zRe,xm,r5,pCe,W7,oxr,_Ce,rxr,WRe,Xr,Q7,txr,km,axr,bCe,nxr,sxr,vCe,lxr,ixr,dxr,H7,cxr,TCe,mxr,fxr,gxr,Nt,U7,hxr,FCe,uxr,pxr,Rm,_xr,CCe,bxr,vxr,MCe,Txr,Fxr,Cxr,ECe,Mxr,Exr,J7,yxr,jo,Y7,wxr,yCe,Axr,Lxr,qn,Bxr,wCe,xxr,kxr,ACe,Rxr,Sxr,LCe,Pxr,$xr,Ixr,BCe,t5,xCe,Nxr,jxr,Gz,Dxr,qxr,Gxr,kCe,Oxr,Xxr,K7,QRe;return me=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ly=new X({}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qm=new Vxr({props:{warning:!0,$$slots:{default:[O4t]},$$scope:{ctx:Pm}}}),dy=new X({}),cy=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L536"}}),gy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L559",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),hy=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),uy=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L681",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),py=new X({}),_y=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L352"}}),Ty=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),Fy=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Cy=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),My=new X({}),Ey=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),Ay=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Bh=new Vxr({props:{$$slots:{default:[X4t]},$$scope:{ctx:Pm}}}),Ly=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),By=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),xy=new X({}),ky=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L71"}}),Py=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),qh=new Vxr({props:{$$slots:{default:[V4t]},$$scope:{ctx:Pm}}}),$y=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Iy=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),Ny=new X({}),jy=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L702"}}),qy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Gy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),Oy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new X({}),zy=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L709"}}),Qy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Uy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L724"}}),ew=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new X({}),nw=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L731"}}),lw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),dw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new X({}),fw=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L738"}}),hw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new X({}),vw=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L747"}}),Fw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new X({}),ww=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L781"}}),Lw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),xw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new X({}),Sw=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L788"}}),$w=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new X({}),qw=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L774"}}),Ow=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Vw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new X({}),Qw=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L756"}}),Uw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new X({}),e6=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L763"}}),r6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),a6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s6=new X({}),l6=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L797"}}),d6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),m6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g6=new X({}),h6=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L836"}}),p6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),_6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),b6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T6=new X({}),F6=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),M6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),y6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A6=new X({}),L6=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L866"}}),x6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),R6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P6=new X({}),$6=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L850"}}),N6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),D6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G6=new X({}),O6=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L857"}}),V6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),z6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),W6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U6=new X({}),J6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L875"}}),K6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Z6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),eA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new X({}),tA=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L882"}}),nA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),lA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new X({}),cA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L829"}}),fA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),hA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L804"}}),vA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),FA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),wA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),LA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new X({}),RA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L820"}}),PA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),IA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),GA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),XA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new X({}),WA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),HA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),JA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new X({}),ZA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),o0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),t0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new X({}),s0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),i0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),c0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),p0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),b0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new X({}),F0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),M0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),y0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new X({}),L0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),x0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),R0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),N0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),D0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),V0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),W0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new X({}),U0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Y0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Z0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oL=new X({}),rL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),aL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),sL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new X({}),dL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),mL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),gL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uL=new X({}),pL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),bL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),TL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new X({}),ML=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),yL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),AL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new X({}),xL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),RL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),PL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IL=new X({}),NL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),DL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),GL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XL=new X({}),VL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),WL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),HL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JL=new X({}),YL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),ZL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),o7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t7=new X({}),a7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),s7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),l7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),i7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c7=new X({}),m7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),g7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),h7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),u7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_7=new X({}),b7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),T7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),F7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),C7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E7=new X({}),y7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),A7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),L7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),B7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k7=new X({}),R7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),P7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),$7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),I7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j7=new X({}),D7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),G7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),O7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),X7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W7=new X({}),Q7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),U7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),J7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),Y7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){K=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),m(me.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),$m=l(),ma=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),ty=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),Di=o("Instantiating one of "),Gn=a("a"),ay=o("AutoConfig"),On=o(", "),Xn=a("a"),ny=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),sy=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),m(qa.$$.fragment),mo=l(),ue=a("p"),J8=o("will create a model that is an instance of "),Oi=a("a"),Y8=o("BertModel"),K8=o("."),zo=l(),Ga=a("p"),Z8=o("There is one class of "),jm=a("code"),e9=o("AutoModel"),s$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Wxe=l(),Xi=a("h2"),Dm=a("a"),PQ=a("span"),m(ly.$$.fragment),l$e=l(),$Q=a("span"),i$e=o("Extending the Auto Classes"),Qxe=l(),zn=a("p"),d$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),IQ=a("code"),c$e=o("NewModel"),m$e=o(", make sure you have a "),NQ=a("code"),f$e=o("NewModelConfig"),g$e=o(` then you can add those to the auto
classes like this:`),Hxe=l(),m(iy.$$.fragment),Uxe=l(),o9=a("p"),h$e=o("You will then be able to use the auto classes like you would usually do!"),Jxe=l(),m(qm.$$.fragment),Yxe=l(),Vi=a("h2"),Gm=a("a"),jQ=a("span"),m(dy.$$.fragment),u$e=l(),DQ=a("span"),p$e=o("AutoConfig"),Kxe=l(),Wo=a("div"),m(cy.$$.fragment),_$e=l(),my=a("p"),b$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),r9=a("a"),v$e=o("from_pretrained()"),T$e=o(" class method."),F$e=l(),fy=a("p"),C$e=o("This class cannot be instantiated directly using "),qQ=a("code"),M$e=o("__init__()"),E$e=o(" (throws an error)."),y$e=l(),fo=a("div"),m(gy.$$.fragment),w$e=l(),GQ=a("p"),A$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),L$e=l(),zi=a("p"),B$e=o("The configuration class to instantiate is selected based on the "),OQ=a("code"),x$e=o("model_type"),k$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XQ=a("code"),R$e=o("pretrained_model_name_or_path"),S$e=o(":"),P$e=l(),v=a("ul"),Om=a("li"),VQ=a("strong"),$$e=o("albert"),I$e=o(" \u2014 "),t9=a("a"),N$e=o("AlbertConfig"),j$e=o(" (ALBERT model)"),D$e=l(),Xm=a("li"),zQ=a("strong"),q$e=o("bart"),G$e=o(" \u2014 "),a9=a("a"),O$e=o("BartConfig"),X$e=o(" (BART model)"),V$e=l(),Vm=a("li"),WQ=a("strong"),z$e=o("beit"),W$e=o(" \u2014 "),n9=a("a"),Q$e=o("BeitConfig"),H$e=o(" (BEiT model)"),U$e=l(),zm=a("li"),QQ=a("strong"),J$e=o("bert"),Y$e=o(" \u2014 "),s9=a("a"),K$e=o("BertConfig"),Z$e=o(" (BERT model)"),eIe=l(),Wm=a("li"),HQ=a("strong"),oIe=o("bert-generation"),rIe=o(" \u2014 "),l9=a("a"),tIe=o("BertGenerationConfig"),aIe=o(" (Bert Generation model)"),nIe=l(),Qm=a("li"),UQ=a("strong"),sIe=o("big_bird"),lIe=o(" \u2014 "),i9=a("a"),iIe=o("BigBirdConfig"),dIe=o(" (BigBird model)"),cIe=l(),Hm=a("li"),JQ=a("strong"),mIe=o("bigbird_pegasus"),fIe=o(" \u2014 "),d9=a("a"),gIe=o("BigBirdPegasusConfig"),hIe=o(" (BigBirdPegasus model)"),uIe=l(),Um=a("li"),YQ=a("strong"),pIe=o("blenderbot"),_Ie=o(" \u2014 "),c9=a("a"),bIe=o("BlenderbotConfig"),vIe=o(" (Blenderbot model)"),TIe=l(),Jm=a("li"),KQ=a("strong"),FIe=o("blenderbot-small"),CIe=o(" \u2014 "),m9=a("a"),MIe=o("BlenderbotSmallConfig"),EIe=o(" (BlenderbotSmall model)"),yIe=l(),Ym=a("li"),ZQ=a("strong"),wIe=o("camembert"),AIe=o(" \u2014 "),f9=a("a"),LIe=o("CamembertConfig"),BIe=o(" (CamemBERT model)"),xIe=l(),Km=a("li"),eH=a("strong"),kIe=o("canine"),RIe=o(" \u2014 "),g9=a("a"),SIe=o("CanineConfig"),PIe=o(" (Canine model)"),$Ie=l(),Zm=a("li"),oH=a("strong"),IIe=o("clip"),NIe=o(" \u2014 "),h9=a("a"),jIe=o("CLIPConfig"),DIe=o(" (CLIP model)"),qIe=l(),ef=a("li"),rH=a("strong"),GIe=o("convbert"),OIe=o(" \u2014 "),u9=a("a"),XIe=o("ConvBertConfig"),VIe=o(" (ConvBERT model)"),zIe=l(),of=a("li"),tH=a("strong"),WIe=o("convnext"),QIe=o(" \u2014 "),p9=a("a"),HIe=o("ConvNextConfig"),UIe=o(" (ConvNext model)"),JIe=l(),rf=a("li"),aH=a("strong"),YIe=o("ctrl"),KIe=o(" \u2014 "),_9=a("a"),ZIe=o("CTRLConfig"),eNe=o(" (CTRL model)"),oNe=l(),tf=a("li"),nH=a("strong"),rNe=o("data2vec-audio"),tNe=o(" \u2014 "),b9=a("a"),aNe=o("Data2VecAudioConfig"),nNe=o(" (Data2VecAudio model)"),sNe=l(),af=a("li"),sH=a("strong"),lNe=o("data2vec-text"),iNe=o(" \u2014 "),v9=a("a"),dNe=o("Data2VecTextConfig"),cNe=o(" (Data2VecText model)"),mNe=l(),nf=a("li"),lH=a("strong"),fNe=o("deberta"),gNe=o(" \u2014 "),T9=a("a"),hNe=o("DebertaConfig"),uNe=o(" (DeBERTa model)"),pNe=l(),sf=a("li"),iH=a("strong"),_Ne=o("deberta-v2"),bNe=o(" \u2014 "),F9=a("a"),vNe=o("DebertaV2Config"),TNe=o(" (DeBERTa-v2 model)"),FNe=l(),lf=a("li"),dH=a("strong"),CNe=o("deit"),MNe=o(" \u2014 "),C9=a("a"),ENe=o("DeiTConfig"),yNe=o(" (DeiT model)"),wNe=l(),df=a("li"),cH=a("strong"),ANe=o("detr"),LNe=o(" \u2014 "),M9=a("a"),BNe=o("DetrConfig"),xNe=o(" (DETR model)"),kNe=l(),cf=a("li"),mH=a("strong"),RNe=o("distilbert"),SNe=o(" \u2014 "),E9=a("a"),PNe=o("DistilBertConfig"),$Ne=o(" (DistilBERT model)"),INe=l(),mf=a("li"),fH=a("strong"),NNe=o("dpr"),jNe=o(" \u2014 "),y9=a("a"),DNe=o("DPRConfig"),qNe=o(" (DPR model)"),GNe=l(),ff=a("li"),gH=a("strong"),ONe=o("electra"),XNe=o(" \u2014 "),w9=a("a"),VNe=o("ElectraConfig"),zNe=o(" (ELECTRA model)"),WNe=l(),gf=a("li"),hH=a("strong"),QNe=o("encoder-decoder"),HNe=o(" \u2014 "),A9=a("a"),UNe=o("EncoderDecoderConfig"),JNe=o(" (Encoder decoder model)"),YNe=l(),hf=a("li"),uH=a("strong"),KNe=o("flaubert"),ZNe=o(" \u2014 "),L9=a("a"),eje=o("FlaubertConfig"),oje=o(" (FlauBERT model)"),rje=l(),uf=a("li"),pH=a("strong"),tje=o("fnet"),aje=o(" \u2014 "),B9=a("a"),nje=o("FNetConfig"),sje=o(" (FNet model)"),lje=l(),pf=a("li"),_H=a("strong"),ije=o("fsmt"),dje=o(" \u2014 "),x9=a("a"),cje=o("FSMTConfig"),mje=o(" (FairSeq Machine-Translation model)"),fje=l(),_f=a("li"),bH=a("strong"),gje=o("funnel"),hje=o(" \u2014 "),k9=a("a"),uje=o("FunnelConfig"),pje=o(" (Funnel Transformer model)"),_je=l(),bf=a("li"),vH=a("strong"),bje=o("glpn"),vje=o(" \u2014 "),R9=a("a"),Tje=o("GLPNConfig"),Fje=o(" (GLPN model)"),Cje=l(),vf=a("li"),TH=a("strong"),Mje=o("gpt2"),Eje=o(" \u2014 "),S9=a("a"),yje=o("GPT2Config"),wje=o(" (OpenAI GPT-2 model)"),Aje=l(),Tf=a("li"),FH=a("strong"),Lje=o("gpt_neo"),Bje=o(" \u2014 "),P9=a("a"),xje=o("GPTNeoConfig"),kje=o(" (GPT Neo model)"),Rje=l(),Ff=a("li"),CH=a("strong"),Sje=o("gptj"),Pje=o(" \u2014 "),$9=a("a"),$je=o("GPTJConfig"),Ije=o(" (GPT-J model)"),Nje=l(),Cf=a("li"),MH=a("strong"),jje=o("hubert"),Dje=o(" \u2014 "),I9=a("a"),qje=o("HubertConfig"),Gje=o(" (Hubert model)"),Oje=l(),Mf=a("li"),EH=a("strong"),Xje=o("ibert"),Vje=o(" \u2014 "),N9=a("a"),zje=o("IBertConfig"),Wje=o(" (I-BERT model)"),Qje=l(),Ef=a("li"),yH=a("strong"),Hje=o("imagegpt"),Uje=o(" \u2014 "),j9=a("a"),Jje=o("ImageGPTConfig"),Yje=o(" (ImageGPT model)"),Kje=l(),yf=a("li"),wH=a("strong"),Zje=o("layoutlm"),eDe=o(" \u2014 "),D9=a("a"),oDe=o("LayoutLMConfig"),rDe=o(" (LayoutLM model)"),tDe=l(),wf=a("li"),AH=a("strong"),aDe=o("layoutlmv2"),nDe=o(" \u2014 "),q9=a("a"),sDe=o("LayoutLMv2Config"),lDe=o(" (LayoutLMv2 model)"),iDe=l(),Af=a("li"),LH=a("strong"),dDe=o("led"),cDe=o(" \u2014 "),G9=a("a"),mDe=o("LEDConfig"),fDe=o(" (LED model)"),gDe=l(),Lf=a("li"),BH=a("strong"),hDe=o("longformer"),uDe=o(" \u2014 "),O9=a("a"),pDe=o("LongformerConfig"),_De=o(" (Longformer model)"),bDe=l(),Bf=a("li"),xH=a("strong"),vDe=o("luke"),TDe=o(" \u2014 "),X9=a("a"),FDe=o("LukeConfig"),CDe=o(" (LUKE model)"),MDe=l(),xf=a("li"),kH=a("strong"),EDe=o("lxmert"),yDe=o(" \u2014 "),V9=a("a"),wDe=o("LxmertConfig"),ADe=o(" (LXMERT model)"),LDe=l(),kf=a("li"),RH=a("strong"),BDe=o("m2m_100"),xDe=o(" \u2014 "),z9=a("a"),kDe=o("M2M100Config"),RDe=o(" (M2M100 model)"),SDe=l(),Rf=a("li"),SH=a("strong"),PDe=o("marian"),$De=o(" \u2014 "),W9=a("a"),IDe=o("MarianConfig"),NDe=o(" (Marian model)"),jDe=l(),Sf=a("li"),PH=a("strong"),DDe=o("maskformer"),qDe=o(" \u2014 "),Q9=a("a"),GDe=o("MaskFormerConfig"),ODe=o(" (MaskFormer model)"),XDe=l(),Pf=a("li"),$H=a("strong"),VDe=o("mbart"),zDe=o(" \u2014 "),H9=a("a"),WDe=o("MBartConfig"),QDe=o(" (mBART model)"),HDe=l(),$f=a("li"),IH=a("strong"),UDe=o("megatron-bert"),JDe=o(" \u2014 "),U9=a("a"),YDe=o("MegatronBertConfig"),KDe=o(" (MegatronBert model)"),ZDe=l(),If=a("li"),NH=a("strong"),eqe=o("mobilebert"),oqe=o(" \u2014 "),J9=a("a"),rqe=o("MobileBertConfig"),tqe=o(" (MobileBERT model)"),aqe=l(),Nf=a("li"),jH=a("strong"),nqe=o("mpnet"),sqe=o(" \u2014 "),Y9=a("a"),lqe=o("MPNetConfig"),iqe=o(" (MPNet model)"),dqe=l(),jf=a("li"),DH=a("strong"),cqe=o("mt5"),mqe=o(" \u2014 "),K9=a("a"),fqe=o("MT5Config"),gqe=o(" (mT5 model)"),hqe=l(),Df=a("li"),qH=a("strong"),uqe=o("nystromformer"),pqe=o(" \u2014 "),Z9=a("a"),_qe=o("NystromformerConfig"),bqe=o(" (Nystromformer model)"),vqe=l(),qf=a("li"),GH=a("strong"),Tqe=o("openai-gpt"),Fqe=o(" \u2014 "),eB=a("a"),Cqe=o("OpenAIGPTConfig"),Mqe=o(" (OpenAI GPT model)"),Eqe=l(),Gf=a("li"),OH=a("strong"),yqe=o("pegasus"),wqe=o(" \u2014 "),oB=a("a"),Aqe=o("PegasusConfig"),Lqe=o(" (Pegasus model)"),Bqe=l(),Of=a("li"),XH=a("strong"),xqe=o("perceiver"),kqe=o(" \u2014 "),rB=a("a"),Rqe=o("PerceiverConfig"),Sqe=o(" (Perceiver model)"),Pqe=l(),Xf=a("li"),VH=a("strong"),$qe=o("plbart"),Iqe=o(" \u2014 "),tB=a("a"),Nqe=o("PLBartConfig"),jqe=o(" (PLBart model)"),Dqe=l(),Vf=a("li"),zH=a("strong"),qqe=o("poolformer"),Gqe=o(" \u2014 "),aB=a("a"),Oqe=o("PoolFormerConfig"),Xqe=o(" (PoolFormer model)"),Vqe=l(),zf=a("li"),WH=a("strong"),zqe=o("prophetnet"),Wqe=o(" \u2014 "),nB=a("a"),Qqe=o("ProphetNetConfig"),Hqe=o(" (ProphetNet model)"),Uqe=l(),Wf=a("li"),QH=a("strong"),Jqe=o("qdqbert"),Yqe=o(" \u2014 "),sB=a("a"),Kqe=o("QDQBertConfig"),Zqe=o(" (QDQBert model)"),eGe=l(),Qf=a("li"),HH=a("strong"),oGe=o("rag"),rGe=o(" \u2014 "),lB=a("a"),tGe=o("RagConfig"),aGe=o(" (RAG model)"),nGe=l(),Hf=a("li"),UH=a("strong"),sGe=o("realm"),lGe=o(" \u2014 "),iB=a("a"),iGe=o("RealmConfig"),dGe=o(" (Realm model)"),cGe=l(),Uf=a("li"),JH=a("strong"),mGe=o("reformer"),fGe=o(" \u2014 "),dB=a("a"),gGe=o("ReformerConfig"),hGe=o(" (Reformer model)"),uGe=l(),Jf=a("li"),YH=a("strong"),pGe=o("rembert"),_Ge=o(" \u2014 "),cB=a("a"),bGe=o("RemBertConfig"),vGe=o(" (RemBERT model)"),TGe=l(),Yf=a("li"),KH=a("strong"),FGe=o("resnet"),CGe=o(" \u2014 "),mB=a("a"),MGe=o("ResNetConfig"),EGe=o(" (ResNet model)"),yGe=l(),Kf=a("li"),ZH=a("strong"),wGe=o("retribert"),AGe=o(" \u2014 "),fB=a("a"),LGe=o("RetriBertConfig"),BGe=o(" (RetriBERT model)"),xGe=l(),Zf=a("li"),eU=a("strong"),kGe=o("roberta"),RGe=o(" \u2014 "),gB=a("a"),SGe=o("RobertaConfig"),PGe=o(" (RoBERTa model)"),$Ge=l(),eg=a("li"),oU=a("strong"),IGe=o("roformer"),NGe=o(" \u2014 "),hB=a("a"),jGe=o("RoFormerConfig"),DGe=o(" (RoFormer model)"),qGe=l(),og=a("li"),rU=a("strong"),GGe=o("segformer"),OGe=o(" \u2014 "),uB=a("a"),XGe=o("SegformerConfig"),VGe=o(" (SegFormer model)"),zGe=l(),rg=a("li"),tU=a("strong"),WGe=o("sew"),QGe=o(" \u2014 "),pB=a("a"),HGe=o("SEWConfig"),UGe=o(" (SEW model)"),JGe=l(),tg=a("li"),aU=a("strong"),YGe=o("sew-d"),KGe=o(" \u2014 "),_B=a("a"),ZGe=o("SEWDConfig"),eOe=o(" (SEW-D model)"),oOe=l(),ag=a("li"),nU=a("strong"),rOe=o("speech-encoder-decoder"),tOe=o(" \u2014 "),bB=a("a"),aOe=o("SpeechEncoderDecoderConfig"),nOe=o(" (Speech Encoder decoder model)"),sOe=l(),ng=a("li"),sU=a("strong"),lOe=o("speech_to_text"),iOe=o(" \u2014 "),vB=a("a"),dOe=o("Speech2TextConfig"),cOe=o(" (Speech2Text model)"),mOe=l(),sg=a("li"),lU=a("strong"),fOe=o("speech_to_text_2"),gOe=o(" \u2014 "),TB=a("a"),hOe=o("Speech2Text2Config"),uOe=o(" (Speech2Text2 model)"),pOe=l(),lg=a("li"),iU=a("strong"),_Oe=o("splinter"),bOe=o(" \u2014 "),FB=a("a"),vOe=o("SplinterConfig"),TOe=o(" (Splinter model)"),FOe=l(),ig=a("li"),dU=a("strong"),COe=o("squeezebert"),MOe=o(" \u2014 "),CB=a("a"),EOe=o("SqueezeBertConfig"),yOe=o(" (SqueezeBERT model)"),wOe=l(),dg=a("li"),cU=a("strong"),AOe=o("swin"),LOe=o(" \u2014 "),MB=a("a"),BOe=o("SwinConfig"),xOe=o(" (Swin model)"),kOe=l(),cg=a("li"),mU=a("strong"),ROe=o("t5"),SOe=o(" \u2014 "),EB=a("a"),POe=o("T5Config"),$Oe=o(" (T5 model)"),IOe=l(),mg=a("li"),fU=a("strong"),NOe=o("tapas"),jOe=o(" \u2014 "),yB=a("a"),DOe=o("TapasConfig"),qOe=o(" (TAPAS model)"),GOe=l(),fg=a("li"),gU=a("strong"),OOe=o("transfo-xl"),XOe=o(" \u2014 "),wB=a("a"),VOe=o("TransfoXLConfig"),zOe=o(" (Transformer-XL model)"),WOe=l(),gg=a("li"),hU=a("strong"),QOe=o("trocr"),HOe=o(" \u2014 "),AB=a("a"),UOe=o("TrOCRConfig"),JOe=o(" (TrOCR model)"),YOe=l(),hg=a("li"),uU=a("strong"),KOe=o("unispeech"),ZOe=o(" \u2014 "),LB=a("a"),eXe=o("UniSpeechConfig"),oXe=o(" (UniSpeech model)"),rXe=l(),ug=a("li"),pU=a("strong"),tXe=o("unispeech-sat"),aXe=o(" \u2014 "),BB=a("a"),nXe=o("UniSpeechSatConfig"),sXe=o(" (UniSpeechSat model)"),lXe=l(),pg=a("li"),_U=a("strong"),iXe=o("van"),dXe=o(" \u2014 "),xB=a("a"),cXe=o("VanConfig"),mXe=o(" (VAN model)"),fXe=l(),_g=a("li"),bU=a("strong"),gXe=o("vilt"),hXe=o(" \u2014 "),kB=a("a"),uXe=o("ViltConfig"),pXe=o(" (ViLT model)"),_Xe=l(),bg=a("li"),vU=a("strong"),bXe=o("vision-encoder-decoder"),vXe=o(" \u2014 "),RB=a("a"),TXe=o("VisionEncoderDecoderConfig"),FXe=o(" (Vision Encoder decoder model)"),CXe=l(),vg=a("li"),TU=a("strong"),MXe=o("vision-text-dual-encoder"),EXe=o(" \u2014 "),SB=a("a"),yXe=o("VisionTextDualEncoderConfig"),wXe=o(" (VisionTextDualEncoder model)"),AXe=l(),Tg=a("li"),FU=a("strong"),LXe=o("visual_bert"),BXe=o(" \u2014 "),PB=a("a"),xXe=o("VisualBertConfig"),kXe=o(" (VisualBert model)"),RXe=l(),Fg=a("li"),CU=a("strong"),SXe=o("vit"),PXe=o(" \u2014 "),$B=a("a"),$Xe=o("ViTConfig"),IXe=o(" (ViT model)"),NXe=l(),Cg=a("li"),MU=a("strong"),jXe=o("vit_mae"),DXe=o(" \u2014 "),IB=a("a"),qXe=o("ViTMAEConfig"),GXe=o(" (ViTMAE model)"),OXe=l(),Mg=a("li"),EU=a("strong"),XXe=o("wav2vec2"),VXe=o(" \u2014 "),NB=a("a"),zXe=o("Wav2Vec2Config"),WXe=o(" (Wav2Vec2 model)"),QXe=l(),Eg=a("li"),yU=a("strong"),HXe=o("wavlm"),UXe=o(" \u2014 "),jB=a("a"),JXe=o("WavLMConfig"),YXe=o(" (WavLM model)"),KXe=l(),yg=a("li"),wU=a("strong"),ZXe=o("xglm"),eVe=o(" \u2014 "),DB=a("a"),oVe=o("XGLMConfig"),rVe=o(" (XGLM model)"),tVe=l(),wg=a("li"),AU=a("strong"),aVe=o("xlm"),nVe=o(" \u2014 "),qB=a("a"),sVe=o("XLMConfig"),lVe=o(" (XLM model)"),iVe=l(),Ag=a("li"),LU=a("strong"),dVe=o("xlm-prophetnet"),cVe=o(" \u2014 "),GB=a("a"),mVe=o("XLMProphetNetConfig"),fVe=o(" (XLMProphetNet model)"),gVe=l(),Lg=a("li"),BU=a("strong"),hVe=o("xlm-roberta"),uVe=o(" \u2014 "),OB=a("a"),pVe=o("XLMRobertaConfig"),_Ve=o(" (XLM-RoBERTa model)"),bVe=l(),Bg=a("li"),xU=a("strong"),vVe=o("xlm-roberta-xl"),TVe=o(" \u2014 "),XB=a("a"),FVe=o("XLMRobertaXLConfig"),CVe=o(" (XLM-RoBERTa-XL model)"),MVe=l(),xg=a("li"),kU=a("strong"),EVe=o("xlnet"),yVe=o(" \u2014 "),VB=a("a"),wVe=o("XLNetConfig"),AVe=o(" (XLNet model)"),LVe=l(),kg=a("li"),RU=a("strong"),BVe=o("yoso"),xVe=o(" \u2014 "),zB=a("a"),kVe=o("YosoConfig"),RVe=o(" (YOSO model)"),SVe=l(),SU=a("p"),PVe=o("Examples:"),$Ve=l(),m(hy.$$.fragment),IVe=l(),Rg=a("div"),m(uy.$$.fragment),NVe=l(),PU=a("p"),jVe=o("Register a new configuration for this class."),Zxe=l(),Wi=a("h2"),Sg=a("a"),$U=a("span"),m(py.$$.fragment),DVe=l(),IU=a("span"),qVe=o("AutoTokenizer"),eke=l(),Qo=a("div"),m(_y.$$.fragment),GVe=l(),by=a("p"),OVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WB=a("a"),XVe=o("AutoTokenizer.from_pretrained()"),VVe=o(" class method."),zVe=l(),vy=a("p"),WVe=o("This class cannot be instantiated directly using "),NU=a("code"),QVe=o("__init__()"),HVe=o(" (throws an error)."),UVe=l(),go=a("div"),m(Ty.$$.fragment),JVe=l(),jU=a("p"),YVe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KVe=l(),Oa=a("p"),ZVe=o("The tokenizer class to instantiate is selected based on the "),DU=a("code"),eze=o("model_type"),oze=o(` property of the config object (either
passed as an argument or loaded from `),qU=a("code"),rze=o("pretrained_model_name_or_path"),tze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GU=a("code"),aze=o("pretrained_model_name_or_path"),nze=o(":"),sze=l(),E=a("ul"),Wn=a("li"),OU=a("strong"),lze=o("albert"),ize=o(" \u2014 "),QB=a("a"),dze=o("AlbertTokenizer"),cze=o(" or "),HB=a("a"),mze=o("AlbertTokenizerFast"),fze=o(" (ALBERT model)"),gze=l(),Qn=a("li"),XU=a("strong"),hze=o("bart"),uze=o(" \u2014 "),UB=a("a"),pze=o("BartTokenizer"),_ze=o(" or "),JB=a("a"),bze=o("BartTokenizerFast"),vze=o(" (BART model)"),Tze=l(),Hn=a("li"),VU=a("strong"),Fze=o("barthez"),Cze=o(" \u2014 "),YB=a("a"),Mze=o("BarthezTokenizer"),Eze=o(" or "),KB=a("a"),yze=o("BarthezTokenizerFast"),wze=o(" (BARThez model)"),Aze=l(),Pg=a("li"),zU=a("strong"),Lze=o("bartpho"),Bze=o(" \u2014 "),ZB=a("a"),xze=o("BartphoTokenizer"),kze=o(" (BARTpho model)"),Rze=l(),Un=a("li"),WU=a("strong"),Sze=o("bert"),Pze=o(" \u2014 "),ex=a("a"),$ze=o("BertTokenizer"),Ize=o(" or "),ox=a("a"),Nze=o("BertTokenizerFast"),jze=o(" (BERT model)"),Dze=l(),$g=a("li"),QU=a("strong"),qze=o("bert-generation"),Gze=o(" \u2014 "),rx=a("a"),Oze=o("BertGenerationTokenizer"),Xze=o(" (Bert Generation model)"),Vze=l(),Ig=a("li"),HU=a("strong"),zze=o("bert-japanese"),Wze=o(" \u2014 "),tx=a("a"),Qze=o("BertJapaneseTokenizer"),Hze=o(" (BertJapanese model)"),Uze=l(),Ng=a("li"),UU=a("strong"),Jze=o("bertweet"),Yze=o(" \u2014 "),ax=a("a"),Kze=o("BertweetTokenizer"),Zze=o(" (Bertweet model)"),eWe=l(),Jn=a("li"),JU=a("strong"),oWe=o("big_bird"),rWe=o(" \u2014 "),nx=a("a"),tWe=o("BigBirdTokenizer"),aWe=o(" or "),sx=a("a"),nWe=o("BigBirdTokenizerFast"),sWe=o(" (BigBird model)"),lWe=l(),Yn=a("li"),YU=a("strong"),iWe=o("bigbird_pegasus"),dWe=o(" \u2014 "),lx=a("a"),cWe=o("PegasusTokenizer"),mWe=o(" or "),ix=a("a"),fWe=o("PegasusTokenizerFast"),gWe=o(" (BigBirdPegasus model)"),hWe=l(),Kn=a("li"),KU=a("strong"),uWe=o("blenderbot"),pWe=o(" \u2014 "),dx=a("a"),_We=o("BlenderbotTokenizer"),bWe=o(" or "),cx=a("a"),vWe=o("BlenderbotTokenizerFast"),TWe=o(" (Blenderbot model)"),FWe=l(),jg=a("li"),ZU=a("strong"),CWe=o("blenderbot-small"),MWe=o(" \u2014 "),mx=a("a"),EWe=o("BlenderbotSmallTokenizer"),yWe=o(" (BlenderbotSmall model)"),wWe=l(),Dg=a("li"),eJ=a("strong"),AWe=o("byt5"),LWe=o(" \u2014 "),fx=a("a"),BWe=o("ByT5Tokenizer"),xWe=o(" (ByT5 model)"),kWe=l(),Zn=a("li"),oJ=a("strong"),RWe=o("camembert"),SWe=o(" \u2014 "),gx=a("a"),PWe=o("CamembertTokenizer"),$We=o(" or "),hx=a("a"),IWe=o("CamembertTokenizerFast"),NWe=o(" (CamemBERT model)"),jWe=l(),qg=a("li"),rJ=a("strong"),DWe=o("canine"),qWe=o(" \u2014 "),ux=a("a"),GWe=o("CanineTokenizer"),OWe=o(" (Canine model)"),XWe=l(),es=a("li"),tJ=a("strong"),VWe=o("clip"),zWe=o(" \u2014 "),px=a("a"),WWe=o("CLIPTokenizer"),QWe=o(" or "),_x=a("a"),HWe=o("CLIPTokenizerFast"),UWe=o(" (CLIP model)"),JWe=l(),os=a("li"),aJ=a("strong"),YWe=o("convbert"),KWe=o(" \u2014 "),bx=a("a"),ZWe=o("ConvBertTokenizer"),eQe=o(" or "),vx=a("a"),oQe=o("ConvBertTokenizerFast"),rQe=o(" (ConvBERT model)"),tQe=l(),rs=a("li"),nJ=a("strong"),aQe=o("cpm"),nQe=o(" \u2014 "),Tx=a("a"),sQe=o("CpmTokenizer"),lQe=o(" or "),sJ=a("code"),iQe=o("CpmTokenizerFast"),dQe=o(" (CPM model)"),cQe=l(),Gg=a("li"),lJ=a("strong"),mQe=o("ctrl"),fQe=o(" \u2014 "),Fx=a("a"),gQe=o("CTRLTokenizer"),hQe=o(" (CTRL model)"),uQe=l(),ts=a("li"),iJ=a("strong"),pQe=o("deberta"),_Qe=o(" \u2014 "),Cx=a("a"),bQe=o("DebertaTokenizer"),vQe=o(" or "),Mx=a("a"),TQe=o("DebertaTokenizerFast"),FQe=o(" (DeBERTa model)"),CQe=l(),Og=a("li"),dJ=a("strong"),MQe=o("deberta-v2"),EQe=o(" \u2014 "),Ex=a("a"),yQe=o("DebertaV2Tokenizer"),wQe=o(" (DeBERTa-v2 model)"),AQe=l(),as=a("li"),cJ=a("strong"),LQe=o("distilbert"),BQe=o(" \u2014 "),yx=a("a"),xQe=o("DistilBertTokenizer"),kQe=o(" or "),wx=a("a"),RQe=o("DistilBertTokenizerFast"),SQe=o(" (DistilBERT model)"),PQe=l(),ns=a("li"),mJ=a("strong"),$Qe=o("dpr"),IQe=o(" \u2014 "),Ax=a("a"),NQe=o("DPRQuestionEncoderTokenizer"),jQe=o(" or "),Lx=a("a"),DQe=o("DPRQuestionEncoderTokenizerFast"),qQe=o(" (DPR model)"),GQe=l(),ss=a("li"),fJ=a("strong"),OQe=o("electra"),XQe=o(" \u2014 "),Bx=a("a"),VQe=o("ElectraTokenizer"),zQe=o(" or "),xx=a("a"),WQe=o("ElectraTokenizerFast"),QQe=o(" (ELECTRA model)"),HQe=l(),Xg=a("li"),gJ=a("strong"),UQe=o("flaubert"),JQe=o(" \u2014 "),kx=a("a"),YQe=o("FlaubertTokenizer"),KQe=o(" (FlauBERT model)"),ZQe=l(),ls=a("li"),hJ=a("strong"),eHe=o("fnet"),oHe=o(" \u2014 "),Rx=a("a"),rHe=o("FNetTokenizer"),tHe=o(" or "),Sx=a("a"),aHe=o("FNetTokenizerFast"),nHe=o(" (FNet model)"),sHe=l(),Vg=a("li"),uJ=a("strong"),lHe=o("fsmt"),iHe=o(" \u2014 "),Px=a("a"),dHe=o("FSMTTokenizer"),cHe=o(" (FairSeq Machine-Translation model)"),mHe=l(),is=a("li"),pJ=a("strong"),fHe=o("funnel"),gHe=o(" \u2014 "),$x=a("a"),hHe=o("FunnelTokenizer"),uHe=o(" or "),Ix=a("a"),pHe=o("FunnelTokenizerFast"),_He=o(" (Funnel Transformer model)"),bHe=l(),ds=a("li"),_J=a("strong"),vHe=o("gpt2"),THe=o(" \u2014 "),Nx=a("a"),FHe=o("GPT2Tokenizer"),CHe=o(" or "),jx=a("a"),MHe=o("GPT2TokenizerFast"),EHe=o(" (OpenAI GPT-2 model)"),yHe=l(),cs=a("li"),bJ=a("strong"),wHe=o("gpt_neo"),AHe=o(" \u2014 "),Dx=a("a"),LHe=o("GPT2Tokenizer"),BHe=o(" or "),qx=a("a"),xHe=o("GPT2TokenizerFast"),kHe=o(" (GPT Neo model)"),RHe=l(),ms=a("li"),vJ=a("strong"),SHe=o("herbert"),PHe=o(" \u2014 "),Gx=a("a"),$He=o("HerbertTokenizer"),IHe=o(" or "),Ox=a("a"),NHe=o("HerbertTokenizerFast"),jHe=o(" (HerBERT model)"),DHe=l(),zg=a("li"),TJ=a("strong"),qHe=o("hubert"),GHe=o(" \u2014 "),Xx=a("a"),OHe=o("Wav2Vec2CTCTokenizer"),XHe=o(" (Hubert model)"),VHe=l(),fs=a("li"),FJ=a("strong"),zHe=o("ibert"),WHe=o(" \u2014 "),Vx=a("a"),QHe=o("RobertaTokenizer"),HHe=o(" or "),zx=a("a"),UHe=o("RobertaTokenizerFast"),JHe=o(" (I-BERT model)"),YHe=l(),gs=a("li"),CJ=a("strong"),KHe=o("layoutlm"),ZHe=o(" \u2014 "),Wx=a("a"),eUe=o("LayoutLMTokenizer"),oUe=o(" or "),Qx=a("a"),rUe=o("LayoutLMTokenizerFast"),tUe=o(" (LayoutLM model)"),aUe=l(),hs=a("li"),MJ=a("strong"),nUe=o("layoutlmv2"),sUe=o(" \u2014 "),Hx=a("a"),lUe=o("LayoutLMv2Tokenizer"),iUe=o(" or "),Ux=a("a"),dUe=o("LayoutLMv2TokenizerFast"),cUe=o(" (LayoutLMv2 model)"),mUe=l(),us=a("li"),EJ=a("strong"),fUe=o("layoutxlm"),gUe=o(" \u2014 "),Jx=a("a"),hUe=o("LayoutXLMTokenizer"),uUe=o(" or "),Yx=a("a"),pUe=o("LayoutXLMTokenizerFast"),_Ue=o(" (LayoutXLM model)"),bUe=l(),ps=a("li"),yJ=a("strong"),vUe=o("led"),TUe=o(" \u2014 "),Kx=a("a"),FUe=o("LEDTokenizer"),CUe=o(" or "),Zx=a("a"),MUe=o("LEDTokenizerFast"),EUe=o(" (LED model)"),yUe=l(),_s=a("li"),wJ=a("strong"),wUe=o("longformer"),AUe=o(" \u2014 "),ek=a("a"),LUe=o("LongformerTokenizer"),BUe=o(" or "),ok=a("a"),xUe=o("LongformerTokenizerFast"),kUe=o(" (Longformer model)"),RUe=l(),Wg=a("li"),AJ=a("strong"),SUe=o("luke"),PUe=o(" \u2014 "),rk=a("a"),$Ue=o("LukeTokenizer"),IUe=o(" (LUKE model)"),NUe=l(),bs=a("li"),LJ=a("strong"),jUe=o("lxmert"),DUe=o(" \u2014 "),tk=a("a"),qUe=o("LxmertTokenizer"),GUe=o(" or "),ak=a("a"),OUe=o("LxmertTokenizerFast"),XUe=o(" (LXMERT model)"),VUe=l(),Qg=a("li"),BJ=a("strong"),zUe=o("m2m_100"),WUe=o(" \u2014 "),nk=a("a"),QUe=o("M2M100Tokenizer"),HUe=o(" (M2M100 model)"),UUe=l(),Hg=a("li"),xJ=a("strong"),JUe=o("marian"),YUe=o(" \u2014 "),sk=a("a"),KUe=o("MarianTokenizer"),ZUe=o(" (Marian model)"),eJe=l(),vs=a("li"),kJ=a("strong"),oJe=o("mbart"),rJe=o(" \u2014 "),lk=a("a"),tJe=o("MBartTokenizer"),aJe=o(" or "),ik=a("a"),nJe=o("MBartTokenizerFast"),sJe=o(" (mBART model)"),lJe=l(),Ts=a("li"),RJ=a("strong"),iJe=o("mbart50"),dJe=o(" \u2014 "),dk=a("a"),cJe=o("MBart50Tokenizer"),mJe=o(" or "),ck=a("a"),fJe=o("MBart50TokenizerFast"),gJe=o(" (mBART-50 model)"),hJe=l(),Ug=a("li"),SJ=a("strong"),uJe=o("mluke"),pJe=o(" \u2014 "),mk=a("a"),_Je=o("MLukeTokenizer"),bJe=o(" (mLUKE model)"),vJe=l(),Fs=a("li"),PJ=a("strong"),TJe=o("mobilebert"),FJe=o(" \u2014 "),fk=a("a"),CJe=o("MobileBertTokenizer"),MJe=o(" or "),gk=a("a"),EJe=o("MobileBertTokenizerFast"),yJe=o(" (MobileBERT model)"),wJe=l(),Cs=a("li"),$J=a("strong"),AJe=o("mpnet"),LJe=o(" \u2014 "),hk=a("a"),BJe=o("MPNetTokenizer"),xJe=o(" or "),uk=a("a"),kJe=o("MPNetTokenizerFast"),RJe=o(" (MPNet model)"),SJe=l(),Ms=a("li"),IJ=a("strong"),PJe=o("mt5"),$Je=o(" \u2014 "),pk=a("a"),IJe=o("MT5Tokenizer"),NJe=o(" or "),_k=a("a"),jJe=o("MT5TokenizerFast"),DJe=o(" (mT5 model)"),qJe=l(),Es=a("li"),NJ=a("strong"),GJe=o("openai-gpt"),OJe=o(" \u2014 "),bk=a("a"),XJe=o("OpenAIGPTTokenizer"),VJe=o(" or "),vk=a("a"),zJe=o("OpenAIGPTTokenizerFast"),WJe=o(" (OpenAI GPT model)"),QJe=l(),ys=a("li"),jJ=a("strong"),HJe=o("pegasus"),UJe=o(" \u2014 "),Tk=a("a"),JJe=o("PegasusTokenizer"),YJe=o(" or "),Fk=a("a"),KJe=o("PegasusTokenizerFast"),ZJe=o(" (Pegasus model)"),eYe=l(),Jg=a("li"),DJ=a("strong"),oYe=o("perceiver"),rYe=o(" \u2014 "),Ck=a("a"),tYe=o("PerceiverTokenizer"),aYe=o(" (Perceiver model)"),nYe=l(),Yg=a("li"),qJ=a("strong"),sYe=o("phobert"),lYe=o(" \u2014 "),Mk=a("a"),iYe=o("PhobertTokenizer"),dYe=o(" (PhoBERT model)"),cYe=l(),Kg=a("li"),GJ=a("strong"),mYe=o("plbart"),fYe=o(" \u2014 "),Ek=a("a"),gYe=o("PLBartTokenizer"),hYe=o(" (PLBart model)"),uYe=l(),Zg=a("li"),OJ=a("strong"),pYe=o("prophetnet"),_Ye=o(" \u2014 "),yk=a("a"),bYe=o("ProphetNetTokenizer"),vYe=o(" (ProphetNet model)"),TYe=l(),ws=a("li"),XJ=a("strong"),FYe=o("qdqbert"),CYe=o(" \u2014 "),wk=a("a"),MYe=o("BertTokenizer"),EYe=o(" or "),Ak=a("a"),yYe=o("BertTokenizerFast"),wYe=o(" (QDQBert model)"),AYe=l(),eh=a("li"),VJ=a("strong"),LYe=o("rag"),BYe=o(" \u2014 "),Lk=a("a"),xYe=o("RagTokenizer"),kYe=o(" (RAG model)"),RYe=l(),As=a("li"),zJ=a("strong"),SYe=o("realm"),PYe=o(" \u2014 "),Bk=a("a"),$Ye=o("RealmTokenizer"),IYe=o(" or "),xk=a("a"),NYe=o("RealmTokenizerFast"),jYe=o(" (Realm model)"),DYe=l(),Ls=a("li"),WJ=a("strong"),qYe=o("reformer"),GYe=o(" \u2014 "),kk=a("a"),OYe=o("ReformerTokenizer"),XYe=o(" or "),Rk=a("a"),VYe=o("ReformerTokenizerFast"),zYe=o(" (Reformer model)"),WYe=l(),Bs=a("li"),QJ=a("strong"),QYe=o("rembert"),HYe=o(" \u2014 "),Sk=a("a"),UYe=o("RemBertTokenizer"),JYe=o(" or "),Pk=a("a"),YYe=o("RemBertTokenizerFast"),KYe=o(" (RemBERT model)"),ZYe=l(),xs=a("li"),HJ=a("strong"),eKe=o("retribert"),oKe=o(" \u2014 "),$k=a("a"),rKe=o("RetriBertTokenizer"),tKe=o(" or "),Ik=a("a"),aKe=o("RetriBertTokenizerFast"),nKe=o(" (RetriBERT model)"),sKe=l(),ks=a("li"),UJ=a("strong"),lKe=o("roberta"),iKe=o(" \u2014 "),Nk=a("a"),dKe=o("RobertaTokenizer"),cKe=o(" or "),jk=a("a"),mKe=o("RobertaTokenizerFast"),fKe=o(" (RoBERTa model)"),gKe=l(),Rs=a("li"),JJ=a("strong"),hKe=o("roformer"),uKe=o(" \u2014 "),Dk=a("a"),pKe=o("RoFormerTokenizer"),_Ke=o(" or "),qk=a("a"),bKe=o("RoFormerTokenizerFast"),vKe=o(" (RoFormer model)"),TKe=l(),oh=a("li"),YJ=a("strong"),FKe=o("speech_to_text"),CKe=o(" \u2014 "),Gk=a("a"),MKe=o("Speech2TextTokenizer"),EKe=o(" (Speech2Text model)"),yKe=l(),rh=a("li"),KJ=a("strong"),wKe=o("speech_to_text_2"),AKe=o(" \u2014 "),Ok=a("a"),LKe=o("Speech2Text2Tokenizer"),BKe=o(" (Speech2Text2 model)"),xKe=l(),Ss=a("li"),ZJ=a("strong"),kKe=o("splinter"),RKe=o(" \u2014 "),Xk=a("a"),SKe=o("SplinterTokenizer"),PKe=o(" or "),Vk=a("a"),$Ke=o("SplinterTokenizerFast"),IKe=o(" (Splinter model)"),NKe=l(),Ps=a("li"),eY=a("strong"),jKe=o("squeezebert"),DKe=o(" \u2014 "),zk=a("a"),qKe=o("SqueezeBertTokenizer"),GKe=o(" or "),Wk=a("a"),OKe=o("SqueezeBertTokenizerFast"),XKe=o(" (SqueezeBERT model)"),VKe=l(),$s=a("li"),oY=a("strong"),zKe=o("t5"),WKe=o(" \u2014 "),Qk=a("a"),QKe=o("T5Tokenizer"),HKe=o(" or "),Hk=a("a"),UKe=o("T5TokenizerFast"),JKe=o(" (T5 model)"),YKe=l(),th=a("li"),rY=a("strong"),KKe=o("tapas"),ZKe=o(" \u2014 "),Uk=a("a"),eZe=o("TapasTokenizer"),oZe=o(" (TAPAS model)"),rZe=l(),ah=a("li"),tY=a("strong"),tZe=o("transfo-xl"),aZe=o(" \u2014 "),Jk=a("a"),nZe=o("TransfoXLTokenizer"),sZe=o(" (Transformer-XL model)"),lZe=l(),nh=a("li"),aY=a("strong"),iZe=o("wav2vec2"),dZe=o(" \u2014 "),Yk=a("a"),cZe=o("Wav2Vec2CTCTokenizer"),mZe=o(" (Wav2Vec2 model)"),fZe=l(),sh=a("li"),nY=a("strong"),gZe=o("wav2vec2_phoneme"),hZe=o(" \u2014 "),Kk=a("a"),uZe=o("Wav2Vec2PhonemeCTCTokenizer"),pZe=o(" (Wav2Vec2Phoneme model)"),_Ze=l(),Is=a("li"),sY=a("strong"),bZe=o("xglm"),vZe=o(" \u2014 "),Zk=a("a"),TZe=o("XGLMTokenizer"),FZe=o(" or "),eR=a("a"),CZe=o("XGLMTokenizerFast"),MZe=o(" (XGLM model)"),EZe=l(),lh=a("li"),lY=a("strong"),yZe=o("xlm"),wZe=o(" \u2014 "),oR=a("a"),AZe=o("XLMTokenizer"),LZe=o(" (XLM model)"),BZe=l(),ih=a("li"),iY=a("strong"),xZe=o("xlm-prophetnet"),kZe=o(" \u2014 "),rR=a("a"),RZe=o("XLMProphetNetTokenizer"),SZe=o(" (XLMProphetNet model)"),PZe=l(),Ns=a("li"),dY=a("strong"),$Ze=o("xlm-roberta"),IZe=o(" \u2014 "),tR=a("a"),NZe=o("XLMRobertaTokenizer"),jZe=o(" or "),aR=a("a"),DZe=o("XLMRobertaTokenizerFast"),qZe=o(" (XLM-RoBERTa model)"),GZe=l(),js=a("li"),cY=a("strong"),OZe=o("xlnet"),XZe=o(" \u2014 "),nR=a("a"),VZe=o("XLNetTokenizer"),zZe=o(" or "),sR=a("a"),WZe=o("XLNetTokenizerFast"),QZe=o(" (XLNet model)"),HZe=l(),mY=a("p"),UZe=o("Examples:"),JZe=l(),m(Fy.$$.fragment),YZe=l(),dh=a("div"),m(Cy.$$.fragment),KZe=l(),fY=a("p"),ZZe=o("Register a new tokenizer in this mapping."),oke=l(),Qi=a("h2"),ch=a("a"),gY=a("span"),m(My.$$.fragment),eeo=l(),hY=a("span"),oeo=o("AutoFeatureExtractor"),rke=l(),Ho=a("div"),m(Ey.$$.fragment),reo=l(),yy=a("p"),teo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lR=a("a"),aeo=o("AutoFeatureExtractor.from_pretrained()"),neo=o(" class method."),seo=l(),wy=a("p"),leo=o("This class cannot be instantiated directly using "),uY=a("code"),ieo=o("__init__()"),deo=o(" (throws an error)."),ceo=l(),$e=a("div"),m(Ay.$$.fragment),meo=l(),pY=a("p"),feo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),geo=l(),Xa=a("p"),heo=o("The feature extractor class to instantiate is selected based on the "),_Y=a("code"),ueo=o("model_type"),peo=o(` property of the config object
(either passed as an argument or loaded from `),bY=a("code"),_eo=o("pretrained_model_name_or_path"),beo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),vY=a("code"),veo=o("pretrained_model_name_or_path"),Teo=o(":"),Feo=l(),re=a("ul"),mh=a("li"),TY=a("strong"),Ceo=o("beit"),Meo=o(" \u2014 "),iR=a("a"),Eeo=o("BeitFeatureExtractor"),yeo=o(" (BEiT model)"),weo=l(),fh=a("li"),FY=a("strong"),Aeo=o("clip"),Leo=o(" \u2014 "),dR=a("a"),Beo=o("CLIPFeatureExtractor"),xeo=o(" (CLIP model)"),keo=l(),gh=a("li"),CY=a("strong"),Reo=o("convnext"),Seo=o(" \u2014 "),cR=a("a"),Peo=o("ConvNextFeatureExtractor"),$eo=o(" (ConvNext model)"),Ieo=l(),hh=a("li"),MY=a("strong"),Neo=o("deit"),jeo=o(" \u2014 "),mR=a("a"),Deo=o("DeiTFeatureExtractor"),qeo=o(" (DeiT model)"),Geo=l(),uh=a("li"),EY=a("strong"),Oeo=o("detr"),Xeo=o(" \u2014 "),fR=a("a"),Veo=o("DetrFeatureExtractor"),zeo=o(" (DETR model)"),Weo=l(),ph=a("li"),yY=a("strong"),Qeo=o("hubert"),Heo=o(" \u2014 "),gR=a("a"),Ueo=o("Wav2Vec2FeatureExtractor"),Jeo=o(" (Hubert model)"),Yeo=l(),_h=a("li"),wY=a("strong"),Keo=o("layoutlmv2"),Zeo=o(" \u2014 "),hR=a("a"),eoo=o("LayoutLMv2FeatureExtractor"),ooo=o(" (LayoutLMv2 model)"),roo=l(),bh=a("li"),AY=a("strong"),too=o("maskformer"),aoo=o(" \u2014 "),uR=a("a"),noo=o("MaskFormerFeatureExtractor"),soo=o(" (MaskFormer model)"),loo=l(),vh=a("li"),LY=a("strong"),ioo=o("perceiver"),doo=o(" \u2014 "),pR=a("a"),coo=o("PerceiverFeatureExtractor"),moo=o(" (Perceiver model)"),foo=l(),Th=a("li"),BY=a("strong"),goo=o("poolformer"),hoo=o(" \u2014 "),_R=a("a"),uoo=o("PoolFormerFeatureExtractor"),poo=o(" (PoolFormer model)"),_oo=l(),Fh=a("li"),xY=a("strong"),boo=o("resnet"),voo=o(" \u2014 "),bR=a("a"),Too=o("ConvNextFeatureExtractor"),Foo=o(" (ResNet model)"),Coo=l(),Ch=a("li"),kY=a("strong"),Moo=o("segformer"),Eoo=o(" \u2014 "),vR=a("a"),yoo=o("SegformerFeatureExtractor"),woo=o(" (SegFormer model)"),Aoo=l(),Mh=a("li"),RY=a("strong"),Loo=o("speech_to_text"),Boo=o(" \u2014 "),TR=a("a"),xoo=o("Speech2TextFeatureExtractor"),koo=o(" (Speech2Text model)"),Roo=l(),Eh=a("li"),SY=a("strong"),Soo=o("swin"),Poo=o(" \u2014 "),FR=a("a"),$oo=o("ViTFeatureExtractor"),Ioo=o(" (Swin model)"),Noo=l(),yh=a("li"),PY=a("strong"),joo=o("van"),Doo=o(" \u2014 "),CR=a("a"),qoo=o("ConvNextFeatureExtractor"),Goo=o(" (VAN model)"),Ooo=l(),wh=a("li"),$Y=a("strong"),Xoo=o("vit"),Voo=o(" \u2014 "),MR=a("a"),zoo=o("ViTFeatureExtractor"),Woo=o(" (ViT model)"),Qoo=l(),Ah=a("li"),IY=a("strong"),Hoo=o("vit_mae"),Uoo=o(" \u2014 "),ER=a("a"),Joo=o("ViTFeatureExtractor"),Yoo=o(" (ViTMAE model)"),Koo=l(),Lh=a("li"),NY=a("strong"),Zoo=o("wav2vec2"),ero=o(" \u2014 "),yR=a("a"),oro=o("Wav2Vec2FeatureExtractor"),rro=o(" (Wav2Vec2 model)"),tro=l(),m(Bh.$$.fragment),aro=l(),jY=a("p"),nro=o("Examples:"),sro=l(),m(Ly.$$.fragment),lro=l(),xh=a("div"),m(By.$$.fragment),iro=l(),DY=a("p"),dro=o("Register a new feature extractor for this class."),tke=l(),Hi=a("h2"),kh=a("a"),qY=a("span"),m(xy.$$.fragment),cro=l(),GY=a("span"),mro=o("AutoProcessor"),ake=l(),Uo=a("div"),m(ky.$$.fragment),fro=l(),Ry=a("p"),gro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wR=a("a"),hro=o("AutoProcessor.from_pretrained()"),uro=o(" class method."),pro=l(),Sy=a("p"),_ro=o("This class cannot be instantiated directly using "),OY=a("code"),bro=o("__init__()"),vro=o(" (throws an error)."),Tro=l(),Ie=a("div"),m(Py.$$.fragment),Fro=l(),XY=a("p"),Cro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mro=l(),Ui=a("p"),Ero=o("The processor class to instantiate is selected based on the "),VY=a("code"),yro=o("model_type"),wro=o(` property of the config object (either
passed as an argument or loaded from `),zY=a("code"),Aro=o("pretrained_model_name_or_path"),Lro=o(" if possible):"),Bro=l(),xe=a("ul"),Rh=a("li"),WY=a("strong"),xro=o("clip"),kro=o(" \u2014 "),AR=a("a"),Rro=o("CLIPProcessor"),Sro=o(" (CLIP model)"),Pro=l(),Sh=a("li"),QY=a("strong"),$ro=o("layoutlmv2"),Iro=o(" \u2014 "),LR=a("a"),Nro=o("LayoutLMv2Processor"),jro=o(" (LayoutLMv2 model)"),Dro=l(),Ph=a("li"),HY=a("strong"),qro=o("layoutxlm"),Gro=o(" \u2014 "),BR=a("a"),Oro=o("LayoutXLMProcessor"),Xro=o(" (LayoutXLM model)"),Vro=l(),$h=a("li"),UY=a("strong"),zro=o("speech_to_text"),Wro=o(" \u2014 "),xR=a("a"),Qro=o("Speech2TextProcessor"),Hro=o(" (Speech2Text model)"),Uro=l(),Ih=a("li"),JY=a("strong"),Jro=o("speech_to_text_2"),Yro=o(" \u2014 "),kR=a("a"),Kro=o("Speech2Text2Processor"),Zro=o(" (Speech2Text2 model)"),eto=l(),Nh=a("li"),YY=a("strong"),oto=o("trocr"),rto=o(" \u2014 "),RR=a("a"),tto=o("TrOCRProcessor"),ato=o(" (TrOCR model)"),nto=l(),jh=a("li"),KY=a("strong"),sto=o("vision-text-dual-encoder"),lto=o(" \u2014 "),SR=a("a"),ito=o("VisionTextDualEncoderProcessor"),dto=o(" (VisionTextDualEncoder model)"),cto=l(),Dh=a("li"),ZY=a("strong"),mto=o("wav2vec2"),fto=o(" \u2014 "),PR=a("a"),gto=o("Wav2Vec2Processor"),hto=o(" (Wav2Vec2 model)"),uto=l(),m(qh.$$.fragment),pto=l(),eK=a("p"),_to=o("Examples:"),bto=l(),m($y.$$.fragment),vto=l(),Gh=a("div"),m(Iy.$$.fragment),Tto=l(),oK=a("p"),Fto=o("Register a new processor for this class."),nke=l(),Ji=a("h2"),Oh=a("a"),rK=a("span"),m(Ny.$$.fragment),Cto=l(),tK=a("span"),Mto=o("AutoModel"),ske=l(),Jo=a("div"),m(jy.$$.fragment),Eto=l(),Yi=a("p"),yto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aK=a("code"),wto=o("from_pretrained()"),Ato=o("class method or the "),nK=a("code"),Lto=o("from_config()"),Bto=o(`class
method.`),xto=l(),Dy=a("p"),kto=o("This class cannot be instantiated directly using "),sK=a("code"),Rto=o("__init__()"),Sto=o(" (throws an error)."),Pto=l(),Vr=a("div"),m(qy.$$.fragment),$to=l(),lK=a("p"),Ito=o("Instantiates one of the base model classes of the library from a configuration."),Nto=l(),Ki=a("p"),jto=o(`Note:
Loading a model from its configuration file does `),iK=a("strong"),Dto=o("not"),qto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("code"),Gto=o("from_pretrained()"),Oto=o("to load the model weights."),Xto=l(),cK=a("p"),Vto=o("Examples:"),zto=l(),m(Gy.$$.fragment),Wto=l(),Ne=a("div"),m(Oy.$$.fragment),Qto=l(),mK=a("p"),Hto=o("Instantiate one of the base model classes of the library from a pretrained model."),Uto=l(),Va=a("p"),Jto=o("The model class to instantiate is selected based on the "),fK=a("code"),Yto=o("model_type"),Kto=o(` property of the config object (either
passed as an argument or loaded from `),gK=a("code"),Zto=o("pretrained_model_name_or_path"),eao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hK=a("code"),oao=o("pretrained_model_name_or_path"),rao=o(":"),tao=l(),F=a("ul"),Xh=a("li"),uK=a("strong"),aao=o("albert"),nao=o(" \u2014 "),$R=a("a"),sao=o("AlbertModel"),lao=o(" (ALBERT model)"),iao=l(),Vh=a("li"),pK=a("strong"),dao=o("bart"),cao=o(" \u2014 "),IR=a("a"),mao=o("BartModel"),fao=o(" (BART model)"),gao=l(),zh=a("li"),_K=a("strong"),hao=o("beit"),uao=o(" \u2014 "),NR=a("a"),pao=o("BeitModel"),_ao=o(" (BEiT model)"),bao=l(),Wh=a("li"),bK=a("strong"),vao=o("bert"),Tao=o(" \u2014 "),jR=a("a"),Fao=o("BertModel"),Cao=o(" (BERT model)"),Mao=l(),Qh=a("li"),vK=a("strong"),Eao=o("bert-generation"),yao=o(" \u2014 "),DR=a("a"),wao=o("BertGenerationEncoder"),Aao=o(" (Bert Generation model)"),Lao=l(),Hh=a("li"),TK=a("strong"),Bao=o("big_bird"),xao=o(" \u2014 "),qR=a("a"),kao=o("BigBirdModel"),Rao=o(" (BigBird model)"),Sao=l(),Uh=a("li"),FK=a("strong"),Pao=o("bigbird_pegasus"),$ao=o(" \u2014 "),GR=a("a"),Iao=o("BigBirdPegasusModel"),Nao=o(" (BigBirdPegasus model)"),jao=l(),Jh=a("li"),CK=a("strong"),Dao=o("blenderbot"),qao=o(" \u2014 "),OR=a("a"),Gao=o("BlenderbotModel"),Oao=o(" (Blenderbot model)"),Xao=l(),Yh=a("li"),MK=a("strong"),Vao=o("blenderbot-small"),zao=o(" \u2014 "),XR=a("a"),Wao=o("BlenderbotSmallModel"),Qao=o(" (BlenderbotSmall model)"),Hao=l(),Kh=a("li"),EK=a("strong"),Uao=o("camembert"),Jao=o(" \u2014 "),VR=a("a"),Yao=o("CamembertModel"),Kao=o(" (CamemBERT model)"),Zao=l(),Zh=a("li"),yK=a("strong"),eno=o("canine"),ono=o(" \u2014 "),zR=a("a"),rno=o("CanineModel"),tno=o(" (Canine model)"),ano=l(),eu=a("li"),wK=a("strong"),nno=o("clip"),sno=o(" \u2014 "),WR=a("a"),lno=o("CLIPModel"),ino=o(" (CLIP model)"),dno=l(),ou=a("li"),AK=a("strong"),cno=o("convbert"),mno=o(" \u2014 "),QR=a("a"),fno=o("ConvBertModel"),gno=o(" (ConvBERT model)"),hno=l(),ru=a("li"),LK=a("strong"),uno=o("convnext"),pno=o(" \u2014 "),HR=a("a"),_no=o("ConvNextModel"),bno=o(" (ConvNext model)"),vno=l(),tu=a("li"),BK=a("strong"),Tno=o("ctrl"),Fno=o(" \u2014 "),UR=a("a"),Cno=o("CTRLModel"),Mno=o(" (CTRL model)"),Eno=l(),au=a("li"),xK=a("strong"),yno=o("data2vec-audio"),wno=o(" \u2014 "),JR=a("a"),Ano=o("Data2VecAudioModel"),Lno=o(" (Data2VecAudio model)"),Bno=l(),nu=a("li"),kK=a("strong"),xno=o("data2vec-text"),kno=o(" \u2014 "),YR=a("a"),Rno=o("Data2VecTextModel"),Sno=o(" (Data2VecText model)"),Pno=l(),su=a("li"),RK=a("strong"),$no=o("deberta"),Ino=o(" \u2014 "),KR=a("a"),Nno=o("DebertaModel"),jno=o(" (DeBERTa model)"),Dno=l(),lu=a("li"),SK=a("strong"),qno=o("deberta-v2"),Gno=o(" \u2014 "),ZR=a("a"),Ono=o("DebertaV2Model"),Xno=o(" (DeBERTa-v2 model)"),Vno=l(),iu=a("li"),PK=a("strong"),zno=o("deit"),Wno=o(" \u2014 "),eS=a("a"),Qno=o("DeiTModel"),Hno=o(" (DeiT model)"),Uno=l(),du=a("li"),$K=a("strong"),Jno=o("detr"),Yno=o(" \u2014 "),oS=a("a"),Kno=o("DetrModel"),Zno=o(" (DETR model)"),eso=l(),cu=a("li"),IK=a("strong"),oso=o("distilbert"),rso=o(" \u2014 "),rS=a("a"),tso=o("DistilBertModel"),aso=o(" (DistilBERT model)"),nso=l(),mu=a("li"),NK=a("strong"),sso=o("dpr"),lso=o(" \u2014 "),tS=a("a"),iso=o("DPRQuestionEncoder"),dso=o(" (DPR model)"),cso=l(),fu=a("li"),jK=a("strong"),mso=o("electra"),fso=o(" \u2014 "),aS=a("a"),gso=o("ElectraModel"),hso=o(" (ELECTRA model)"),uso=l(),gu=a("li"),DK=a("strong"),pso=o("flaubert"),_so=o(" \u2014 "),nS=a("a"),bso=o("FlaubertModel"),vso=o(" (FlauBERT model)"),Tso=l(),hu=a("li"),qK=a("strong"),Fso=o("fnet"),Cso=o(" \u2014 "),sS=a("a"),Mso=o("FNetModel"),Eso=o(" (FNet model)"),yso=l(),uu=a("li"),GK=a("strong"),wso=o("fsmt"),Aso=o(" \u2014 "),lS=a("a"),Lso=o("FSMTModel"),Bso=o(" (FairSeq Machine-Translation model)"),xso=l(),Ds=a("li"),OK=a("strong"),kso=o("funnel"),Rso=o(" \u2014 "),iS=a("a"),Sso=o("FunnelModel"),Pso=o(" or "),dS=a("a"),$so=o("FunnelBaseModel"),Iso=o(" (Funnel Transformer model)"),Nso=l(),pu=a("li"),XK=a("strong"),jso=o("glpn"),Dso=o(" \u2014 "),cS=a("a"),qso=o("GLPNModel"),Gso=o(" (GLPN model)"),Oso=l(),_u=a("li"),VK=a("strong"),Xso=o("gpt2"),Vso=o(" \u2014 "),mS=a("a"),zso=o("GPT2Model"),Wso=o(" (OpenAI GPT-2 model)"),Qso=l(),bu=a("li"),zK=a("strong"),Hso=o("gpt_neo"),Uso=o(" \u2014 "),fS=a("a"),Jso=o("GPTNeoModel"),Yso=o(" (GPT Neo model)"),Kso=l(),vu=a("li"),WK=a("strong"),Zso=o("gptj"),elo=o(" \u2014 "),gS=a("a"),olo=o("GPTJModel"),rlo=o(" (GPT-J model)"),tlo=l(),Tu=a("li"),QK=a("strong"),alo=o("hubert"),nlo=o(" \u2014 "),hS=a("a"),slo=o("HubertModel"),llo=o(" (Hubert model)"),ilo=l(),Fu=a("li"),HK=a("strong"),dlo=o("ibert"),clo=o(" \u2014 "),uS=a("a"),mlo=o("IBertModel"),flo=o(" (I-BERT model)"),glo=l(),Cu=a("li"),UK=a("strong"),hlo=o("imagegpt"),ulo=o(" \u2014 "),pS=a("a"),plo=o("ImageGPTModel"),_lo=o(" (ImageGPT model)"),blo=l(),Mu=a("li"),JK=a("strong"),vlo=o("layoutlm"),Tlo=o(" \u2014 "),_S=a("a"),Flo=o("LayoutLMModel"),Clo=o(" (LayoutLM model)"),Mlo=l(),Eu=a("li"),YK=a("strong"),Elo=o("layoutlmv2"),ylo=o(" \u2014 "),bS=a("a"),wlo=o("LayoutLMv2Model"),Alo=o(" (LayoutLMv2 model)"),Llo=l(),yu=a("li"),KK=a("strong"),Blo=o("led"),xlo=o(" \u2014 "),vS=a("a"),klo=o("LEDModel"),Rlo=o(" (LED model)"),Slo=l(),wu=a("li"),ZK=a("strong"),Plo=o("longformer"),$lo=o(" \u2014 "),TS=a("a"),Ilo=o("LongformerModel"),Nlo=o(" (Longformer model)"),jlo=l(),Au=a("li"),eZ=a("strong"),Dlo=o("luke"),qlo=o(" \u2014 "),FS=a("a"),Glo=o("LukeModel"),Olo=o(" (LUKE model)"),Xlo=l(),Lu=a("li"),oZ=a("strong"),Vlo=o("lxmert"),zlo=o(" \u2014 "),CS=a("a"),Wlo=o("LxmertModel"),Qlo=o(" (LXMERT model)"),Hlo=l(),Bu=a("li"),rZ=a("strong"),Ulo=o("m2m_100"),Jlo=o(" \u2014 "),MS=a("a"),Ylo=o("M2M100Model"),Klo=o(" (M2M100 model)"),Zlo=l(),xu=a("li"),tZ=a("strong"),eio=o("marian"),oio=o(" \u2014 "),ES=a("a"),rio=o("MarianModel"),tio=o(" (Marian model)"),aio=l(),ku=a("li"),aZ=a("strong"),nio=o("maskformer"),sio=o(" \u2014 "),yS=a("a"),lio=o("MaskFormerModel"),iio=o(" (MaskFormer model)"),dio=l(),Ru=a("li"),nZ=a("strong"),cio=o("mbart"),mio=o(" \u2014 "),wS=a("a"),fio=o("MBartModel"),gio=o(" (mBART model)"),hio=l(),Su=a("li"),sZ=a("strong"),uio=o("megatron-bert"),pio=o(" \u2014 "),AS=a("a"),_io=o("MegatronBertModel"),bio=o(" (MegatronBert model)"),vio=l(),Pu=a("li"),lZ=a("strong"),Tio=o("mobilebert"),Fio=o(" \u2014 "),LS=a("a"),Cio=o("MobileBertModel"),Mio=o(" (MobileBERT model)"),Eio=l(),$u=a("li"),iZ=a("strong"),yio=o("mpnet"),wio=o(" \u2014 "),BS=a("a"),Aio=o("MPNetModel"),Lio=o(" (MPNet model)"),Bio=l(),Iu=a("li"),dZ=a("strong"),xio=o("mt5"),kio=o(" \u2014 "),xS=a("a"),Rio=o("MT5Model"),Sio=o(" (mT5 model)"),Pio=l(),Nu=a("li"),cZ=a("strong"),$io=o("nystromformer"),Iio=o(" \u2014 "),kS=a("a"),Nio=o("NystromformerModel"),jio=o(" (Nystromformer model)"),Dio=l(),ju=a("li"),mZ=a("strong"),qio=o("openai-gpt"),Gio=o(" \u2014 "),RS=a("a"),Oio=o("OpenAIGPTModel"),Xio=o(" (OpenAI GPT model)"),Vio=l(),Du=a("li"),fZ=a("strong"),zio=o("pegasus"),Wio=o(" \u2014 "),SS=a("a"),Qio=o("PegasusModel"),Hio=o(" (Pegasus model)"),Uio=l(),qu=a("li"),gZ=a("strong"),Jio=o("perceiver"),Yio=o(" \u2014 "),PS=a("a"),Kio=o("PerceiverModel"),Zio=o(" (Perceiver model)"),edo=l(),Gu=a("li"),hZ=a("strong"),odo=o("plbart"),rdo=o(" \u2014 "),$S=a("a"),tdo=o("PLBartModel"),ado=o(" (PLBart model)"),ndo=l(),Ou=a("li"),uZ=a("strong"),sdo=o("poolformer"),ldo=o(" \u2014 "),IS=a("a"),ido=o("PoolFormerModel"),ddo=o(" (PoolFormer model)"),cdo=l(),Xu=a("li"),pZ=a("strong"),mdo=o("prophetnet"),fdo=o(" \u2014 "),NS=a("a"),gdo=o("ProphetNetModel"),hdo=o(" (ProphetNet model)"),udo=l(),Vu=a("li"),_Z=a("strong"),pdo=o("qdqbert"),_do=o(" \u2014 "),jS=a("a"),bdo=o("QDQBertModel"),vdo=o(" (QDQBert model)"),Tdo=l(),zu=a("li"),bZ=a("strong"),Fdo=o("reformer"),Cdo=o(" \u2014 "),DS=a("a"),Mdo=o("ReformerModel"),Edo=o(" (Reformer model)"),ydo=l(),Wu=a("li"),vZ=a("strong"),wdo=o("rembert"),Ado=o(" \u2014 "),qS=a("a"),Ldo=o("RemBertModel"),Bdo=o(" (RemBERT model)"),xdo=l(),Qu=a("li"),TZ=a("strong"),kdo=o("resnet"),Rdo=o(" \u2014 "),GS=a("a"),Sdo=o("ResNetModel"),Pdo=o(" (ResNet model)"),$do=l(),Hu=a("li"),FZ=a("strong"),Ido=o("retribert"),Ndo=o(" \u2014 "),OS=a("a"),jdo=o("RetriBertModel"),Ddo=o(" (RetriBERT model)"),qdo=l(),Uu=a("li"),CZ=a("strong"),Gdo=o("roberta"),Odo=o(" \u2014 "),XS=a("a"),Xdo=o("RobertaModel"),Vdo=o(" (RoBERTa model)"),zdo=l(),Ju=a("li"),MZ=a("strong"),Wdo=o("roformer"),Qdo=o(" \u2014 "),VS=a("a"),Hdo=o("RoFormerModel"),Udo=o(" (RoFormer model)"),Jdo=l(),Yu=a("li"),EZ=a("strong"),Ydo=o("segformer"),Kdo=o(" \u2014 "),zS=a("a"),Zdo=o("SegformerModel"),eco=o(" (SegFormer model)"),oco=l(),Ku=a("li"),yZ=a("strong"),rco=o("sew"),tco=o(" \u2014 "),WS=a("a"),aco=o("SEWModel"),nco=o(" (SEW model)"),sco=l(),Zu=a("li"),wZ=a("strong"),lco=o("sew-d"),ico=o(" \u2014 "),QS=a("a"),dco=o("SEWDModel"),cco=o(" (SEW-D model)"),mco=l(),ep=a("li"),AZ=a("strong"),fco=o("speech_to_text"),gco=o(" \u2014 "),HS=a("a"),hco=o("Speech2TextModel"),uco=o(" (Speech2Text model)"),pco=l(),op=a("li"),LZ=a("strong"),_co=o("splinter"),bco=o(" \u2014 "),US=a("a"),vco=o("SplinterModel"),Tco=o(" (Splinter model)"),Fco=l(),rp=a("li"),BZ=a("strong"),Cco=o("squeezebert"),Mco=o(" \u2014 "),JS=a("a"),Eco=o("SqueezeBertModel"),yco=o(" (SqueezeBERT model)"),wco=l(),tp=a("li"),xZ=a("strong"),Aco=o("swin"),Lco=o(" \u2014 "),YS=a("a"),Bco=o("SwinModel"),xco=o(" (Swin model)"),kco=l(),ap=a("li"),kZ=a("strong"),Rco=o("t5"),Sco=o(" \u2014 "),KS=a("a"),Pco=o("T5Model"),$co=o(" (T5 model)"),Ico=l(),np=a("li"),RZ=a("strong"),Nco=o("tapas"),jco=o(" \u2014 "),ZS=a("a"),Dco=o("TapasModel"),qco=o(" (TAPAS model)"),Gco=l(),sp=a("li"),SZ=a("strong"),Oco=o("transfo-xl"),Xco=o(" \u2014 "),eP=a("a"),Vco=o("TransfoXLModel"),zco=o(" (Transformer-XL model)"),Wco=l(),lp=a("li"),PZ=a("strong"),Qco=o("unispeech"),Hco=o(" \u2014 "),oP=a("a"),Uco=o("UniSpeechModel"),Jco=o(" (UniSpeech model)"),Yco=l(),ip=a("li"),$Z=a("strong"),Kco=o("unispeech-sat"),Zco=o(" \u2014 "),rP=a("a"),emo=o("UniSpeechSatModel"),omo=o(" (UniSpeechSat model)"),rmo=l(),dp=a("li"),IZ=a("strong"),tmo=o("van"),amo=o(" \u2014 "),tP=a("a"),nmo=o("VanModel"),smo=o(" (VAN model)"),lmo=l(),cp=a("li"),NZ=a("strong"),imo=o("vilt"),dmo=o(" \u2014 "),aP=a("a"),cmo=o("ViltModel"),mmo=o(" (ViLT model)"),fmo=l(),mp=a("li"),jZ=a("strong"),gmo=o("vision-text-dual-encoder"),hmo=o(" \u2014 "),nP=a("a"),umo=o("VisionTextDualEncoderModel"),pmo=o(" (VisionTextDualEncoder model)"),_mo=l(),fp=a("li"),DZ=a("strong"),bmo=o("visual_bert"),vmo=o(" \u2014 "),sP=a("a"),Tmo=o("VisualBertModel"),Fmo=o(" (VisualBert model)"),Cmo=l(),gp=a("li"),qZ=a("strong"),Mmo=o("vit"),Emo=o(" \u2014 "),lP=a("a"),ymo=o("ViTModel"),wmo=o(" (ViT model)"),Amo=l(),hp=a("li"),GZ=a("strong"),Lmo=o("vit_mae"),Bmo=o(" \u2014 "),iP=a("a"),xmo=o("ViTMAEModel"),kmo=o(" (ViTMAE model)"),Rmo=l(),up=a("li"),OZ=a("strong"),Smo=o("wav2vec2"),Pmo=o(" \u2014 "),dP=a("a"),$mo=o("Wav2Vec2Model"),Imo=o(" (Wav2Vec2 model)"),Nmo=l(),pp=a("li"),XZ=a("strong"),jmo=o("wavlm"),Dmo=o(" \u2014 "),cP=a("a"),qmo=o("WavLMModel"),Gmo=o(" (WavLM model)"),Omo=l(),_p=a("li"),VZ=a("strong"),Xmo=o("xglm"),Vmo=o(" \u2014 "),mP=a("a"),zmo=o("XGLMModel"),Wmo=o(" (XGLM model)"),Qmo=l(),bp=a("li"),zZ=a("strong"),Hmo=o("xlm"),Umo=o(" \u2014 "),fP=a("a"),Jmo=o("XLMModel"),Ymo=o(" (XLM model)"),Kmo=l(),vp=a("li"),WZ=a("strong"),Zmo=o("xlm-prophetnet"),efo=o(" \u2014 "),gP=a("a"),ofo=o("XLMProphetNetModel"),rfo=o(" (XLMProphetNet model)"),tfo=l(),Tp=a("li"),QZ=a("strong"),afo=o("xlm-roberta"),nfo=o(" \u2014 "),hP=a("a"),sfo=o("XLMRobertaModel"),lfo=o(" (XLM-RoBERTa model)"),ifo=l(),Fp=a("li"),HZ=a("strong"),dfo=o("xlm-roberta-xl"),cfo=o(" \u2014 "),uP=a("a"),mfo=o("XLMRobertaXLModel"),ffo=o(" (XLM-RoBERTa-XL model)"),gfo=l(),Cp=a("li"),UZ=a("strong"),hfo=o("xlnet"),ufo=o(" \u2014 "),pP=a("a"),pfo=o("XLNetModel"),_fo=o(" (XLNet model)"),bfo=l(),Mp=a("li"),JZ=a("strong"),vfo=o("yoso"),Tfo=o(" \u2014 "),_P=a("a"),Ffo=o("YosoModel"),Cfo=o(" (YOSO model)"),Mfo=l(),Ep=a("p"),Efo=o("The model is set in evaluation mode by default using "),YZ=a("code"),yfo=o("model.eval()"),wfo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KZ=a("code"),Afo=o("model.train()"),Lfo=l(),ZZ=a("p"),Bfo=o("Examples:"),xfo=l(),m(Xy.$$.fragment),lke=l(),Zi=a("h2"),yp=a("a"),eee=a("span"),m(Vy.$$.fragment),kfo=l(),oee=a("span"),Rfo=o("AutoModelForPreTraining"),ike=l(),Yo=a("div"),m(zy.$$.fragment),Sfo=l(),ed=a("p"),Pfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ree=a("code"),$fo=o("from_pretrained()"),Ifo=o("class method or the "),tee=a("code"),Nfo=o("from_config()"),jfo=o(`class
method.`),Dfo=l(),Wy=a("p"),qfo=o("This class cannot be instantiated directly using "),aee=a("code"),Gfo=o("__init__()"),Ofo=o(" (throws an error)."),Xfo=l(),zr=a("div"),m(Qy.$$.fragment),Vfo=l(),nee=a("p"),zfo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wfo=l(),od=a("p"),Qfo=o(`Note:
Loading a model from its configuration file does `),see=a("strong"),Hfo=o("not"),Ufo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=a("code"),Jfo=o("from_pretrained()"),Yfo=o("to load the model weights."),Kfo=l(),iee=a("p"),Zfo=o("Examples:"),ego=l(),m(Hy.$$.fragment),ogo=l(),je=a("div"),m(Uy.$$.fragment),rgo=l(),dee=a("p"),tgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ago=l(),za=a("p"),ngo=o("The model class to instantiate is selected based on the "),cee=a("code"),sgo=o("model_type"),lgo=o(` property of the config object (either
passed as an argument or loaded from `),mee=a("code"),igo=o("pretrained_model_name_or_path"),dgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fee=a("code"),cgo=o("pretrained_model_name_or_path"),mgo=o(":"),fgo=l(),k=a("ul"),wp=a("li"),gee=a("strong"),ggo=o("albert"),hgo=o(" \u2014 "),bP=a("a"),ugo=o("AlbertForPreTraining"),pgo=o(" (ALBERT model)"),_go=l(),Ap=a("li"),hee=a("strong"),bgo=o("bart"),vgo=o(" \u2014 "),vP=a("a"),Tgo=o("BartForConditionalGeneration"),Fgo=o(" (BART model)"),Cgo=l(),Lp=a("li"),uee=a("strong"),Mgo=o("bert"),Ego=o(" \u2014 "),TP=a("a"),ygo=o("BertForPreTraining"),wgo=o(" (BERT model)"),Ago=l(),Bp=a("li"),pee=a("strong"),Lgo=o("big_bird"),Bgo=o(" \u2014 "),FP=a("a"),xgo=o("BigBirdForPreTraining"),kgo=o(" (BigBird model)"),Rgo=l(),xp=a("li"),_ee=a("strong"),Sgo=o("camembert"),Pgo=o(" \u2014 "),CP=a("a"),$go=o("CamembertForMaskedLM"),Igo=o(" (CamemBERT model)"),Ngo=l(),kp=a("li"),bee=a("strong"),jgo=o("ctrl"),Dgo=o(" \u2014 "),MP=a("a"),qgo=o("CTRLLMHeadModel"),Ggo=o(" (CTRL model)"),Ogo=l(),Rp=a("li"),vee=a("strong"),Xgo=o("data2vec-text"),Vgo=o(" \u2014 "),EP=a("a"),zgo=o("Data2VecTextForMaskedLM"),Wgo=o(" (Data2VecText model)"),Qgo=l(),Sp=a("li"),Tee=a("strong"),Hgo=o("deberta"),Ugo=o(" \u2014 "),yP=a("a"),Jgo=o("DebertaForMaskedLM"),Ygo=o(" (DeBERTa model)"),Kgo=l(),Pp=a("li"),Fee=a("strong"),Zgo=o("deberta-v2"),eho=o(" \u2014 "),wP=a("a"),oho=o("DebertaV2ForMaskedLM"),rho=o(" (DeBERTa-v2 model)"),tho=l(),$p=a("li"),Cee=a("strong"),aho=o("distilbert"),nho=o(" \u2014 "),AP=a("a"),sho=o("DistilBertForMaskedLM"),lho=o(" (DistilBERT model)"),iho=l(),Ip=a("li"),Mee=a("strong"),dho=o("electra"),cho=o(" \u2014 "),LP=a("a"),mho=o("ElectraForPreTraining"),fho=o(" (ELECTRA model)"),gho=l(),Np=a("li"),Eee=a("strong"),hho=o("flaubert"),uho=o(" \u2014 "),BP=a("a"),pho=o("FlaubertWithLMHeadModel"),_ho=o(" (FlauBERT model)"),bho=l(),jp=a("li"),yee=a("strong"),vho=o("fnet"),Tho=o(" \u2014 "),xP=a("a"),Fho=o("FNetForPreTraining"),Cho=o(" (FNet model)"),Mho=l(),Dp=a("li"),wee=a("strong"),Eho=o("fsmt"),yho=o(" \u2014 "),kP=a("a"),who=o("FSMTForConditionalGeneration"),Aho=o(" (FairSeq Machine-Translation model)"),Lho=l(),qp=a("li"),Aee=a("strong"),Bho=o("funnel"),xho=o(" \u2014 "),RP=a("a"),kho=o("FunnelForPreTraining"),Rho=o(" (Funnel Transformer model)"),Sho=l(),Gp=a("li"),Lee=a("strong"),Pho=o("gpt2"),$ho=o(" \u2014 "),SP=a("a"),Iho=o("GPT2LMHeadModel"),Nho=o(" (OpenAI GPT-2 model)"),jho=l(),Op=a("li"),Bee=a("strong"),Dho=o("ibert"),qho=o(" \u2014 "),PP=a("a"),Gho=o("IBertForMaskedLM"),Oho=o(" (I-BERT model)"),Xho=l(),Xp=a("li"),xee=a("strong"),Vho=o("layoutlm"),zho=o(" \u2014 "),$P=a("a"),Who=o("LayoutLMForMaskedLM"),Qho=o(" (LayoutLM model)"),Hho=l(),Vp=a("li"),kee=a("strong"),Uho=o("longformer"),Jho=o(" \u2014 "),IP=a("a"),Yho=o("LongformerForMaskedLM"),Kho=o(" (Longformer model)"),Zho=l(),zp=a("li"),Ree=a("strong"),euo=o("lxmert"),ouo=o(" \u2014 "),NP=a("a"),ruo=o("LxmertForPreTraining"),tuo=o(" (LXMERT model)"),auo=l(),Wp=a("li"),See=a("strong"),nuo=o("megatron-bert"),suo=o(" \u2014 "),jP=a("a"),luo=o("MegatronBertForPreTraining"),iuo=o(" (MegatronBert model)"),duo=l(),Qp=a("li"),Pee=a("strong"),cuo=o("mobilebert"),muo=o(" \u2014 "),DP=a("a"),fuo=o("MobileBertForPreTraining"),guo=o(" (MobileBERT model)"),huo=l(),Hp=a("li"),$ee=a("strong"),uuo=o("mpnet"),puo=o(" \u2014 "),qP=a("a"),_uo=o("MPNetForMaskedLM"),buo=o(" (MPNet model)"),vuo=l(),Up=a("li"),Iee=a("strong"),Tuo=o("openai-gpt"),Fuo=o(" \u2014 "),GP=a("a"),Cuo=o("OpenAIGPTLMHeadModel"),Muo=o(" (OpenAI GPT model)"),Euo=l(),Jp=a("li"),Nee=a("strong"),yuo=o("retribert"),wuo=o(" \u2014 "),OP=a("a"),Auo=o("RetriBertModel"),Luo=o(" (RetriBERT model)"),Buo=l(),Yp=a("li"),jee=a("strong"),xuo=o("roberta"),kuo=o(" \u2014 "),XP=a("a"),Ruo=o("RobertaForMaskedLM"),Suo=o(" (RoBERTa model)"),Puo=l(),Kp=a("li"),Dee=a("strong"),$uo=o("squeezebert"),Iuo=o(" \u2014 "),VP=a("a"),Nuo=o("SqueezeBertForMaskedLM"),juo=o(" (SqueezeBERT model)"),Duo=l(),Zp=a("li"),qee=a("strong"),quo=o("t5"),Guo=o(" \u2014 "),zP=a("a"),Ouo=o("T5ForConditionalGeneration"),Xuo=o(" (T5 model)"),Vuo=l(),e_=a("li"),Gee=a("strong"),zuo=o("tapas"),Wuo=o(" \u2014 "),WP=a("a"),Quo=o("TapasForMaskedLM"),Huo=o(" (TAPAS model)"),Uuo=l(),o_=a("li"),Oee=a("strong"),Juo=o("transfo-xl"),Yuo=o(" \u2014 "),QP=a("a"),Kuo=o("TransfoXLLMHeadModel"),Zuo=o(" (Transformer-XL model)"),epo=l(),r_=a("li"),Xee=a("strong"),opo=o("unispeech"),rpo=o(" \u2014 "),HP=a("a"),tpo=o("UniSpeechForPreTraining"),apo=o(" (UniSpeech model)"),npo=l(),t_=a("li"),Vee=a("strong"),spo=o("unispeech-sat"),lpo=o(" \u2014 "),UP=a("a"),ipo=o("UniSpeechSatForPreTraining"),dpo=o(" (UniSpeechSat model)"),cpo=l(),a_=a("li"),zee=a("strong"),mpo=o("visual_bert"),fpo=o(" \u2014 "),JP=a("a"),gpo=o("VisualBertForPreTraining"),hpo=o(" (VisualBert model)"),upo=l(),n_=a("li"),Wee=a("strong"),ppo=o("vit_mae"),_po=o(" \u2014 "),YP=a("a"),bpo=o("ViTMAEForPreTraining"),vpo=o(" (ViTMAE model)"),Tpo=l(),s_=a("li"),Qee=a("strong"),Fpo=o("wav2vec2"),Cpo=o(" \u2014 "),KP=a("a"),Mpo=o("Wav2Vec2ForPreTraining"),Epo=o(" (Wav2Vec2 model)"),ypo=l(),l_=a("li"),Hee=a("strong"),wpo=o("xlm"),Apo=o(" \u2014 "),ZP=a("a"),Lpo=o("XLMWithLMHeadModel"),Bpo=o(" (XLM model)"),xpo=l(),i_=a("li"),Uee=a("strong"),kpo=o("xlm-roberta"),Rpo=o(" \u2014 "),e$=a("a"),Spo=o("XLMRobertaForMaskedLM"),Ppo=o(" (XLM-RoBERTa model)"),$po=l(),d_=a("li"),Jee=a("strong"),Ipo=o("xlm-roberta-xl"),Npo=o(" \u2014 "),o$=a("a"),jpo=o("XLMRobertaXLForMaskedLM"),Dpo=o(" (XLM-RoBERTa-XL model)"),qpo=l(),c_=a("li"),Yee=a("strong"),Gpo=o("xlnet"),Opo=o(" \u2014 "),r$=a("a"),Xpo=o("XLNetLMHeadModel"),Vpo=o(" (XLNet model)"),zpo=l(),m_=a("p"),Wpo=o("The model is set in evaluation mode by default using "),Kee=a("code"),Qpo=o("model.eval()"),Hpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zee=a("code"),Upo=o("model.train()"),Jpo=l(),eoe=a("p"),Ypo=o("Examples:"),Kpo=l(),m(Jy.$$.fragment),dke=l(),rd=a("h2"),f_=a("a"),ooe=a("span"),m(Yy.$$.fragment),Zpo=l(),roe=a("span"),e_o=o("AutoModelForCausalLM"),cke=l(),Ko=a("div"),m(Ky.$$.fragment),o_o=l(),td=a("p"),r_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),toe=a("code"),t_o=o("from_pretrained()"),a_o=o("class method or the "),aoe=a("code"),n_o=o("from_config()"),s_o=o(`class
method.`),l_o=l(),Zy=a("p"),i_o=o("This class cannot be instantiated directly using "),noe=a("code"),d_o=o("__init__()"),c_o=o(" (throws an error)."),m_o=l(),Wr=a("div"),m(ew.$$.fragment),f_o=l(),soe=a("p"),g_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),h_o=l(),ad=a("p"),u_o=o(`Note:
Loading a model from its configuration file does `),loe=a("strong"),p_o=o("not"),__o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("code"),b_o=o("from_pretrained()"),v_o=o("to load the model weights."),T_o=l(),doe=a("p"),F_o=o("Examples:"),C_o=l(),m(ow.$$.fragment),M_o=l(),De=a("div"),m(rw.$$.fragment),E_o=l(),coe=a("p"),y_o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w_o=l(),Wa=a("p"),A_o=o("The model class to instantiate is selected based on the "),moe=a("code"),L_o=o("model_type"),B_o=o(` property of the config object (either
passed as an argument or loaded from `),foe=a("code"),x_o=o("pretrained_model_name_or_path"),k_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),goe=a("code"),R_o=o("pretrained_model_name_or_path"),S_o=o(":"),P_o=l(),$=a("ul"),g_=a("li"),hoe=a("strong"),$_o=o("bart"),I_o=o(" \u2014 "),t$=a("a"),N_o=o("BartForCausalLM"),j_o=o(" (BART model)"),D_o=l(),h_=a("li"),uoe=a("strong"),q_o=o("bert"),G_o=o(" \u2014 "),a$=a("a"),O_o=o("BertLMHeadModel"),X_o=o(" (BERT model)"),V_o=l(),u_=a("li"),poe=a("strong"),z_o=o("bert-generation"),W_o=o(" \u2014 "),n$=a("a"),Q_o=o("BertGenerationDecoder"),H_o=o(" (Bert Generation model)"),U_o=l(),p_=a("li"),_oe=a("strong"),J_o=o("big_bird"),Y_o=o(" \u2014 "),s$=a("a"),K_o=o("BigBirdForCausalLM"),Z_o=o(" (BigBird model)"),ebo=l(),__=a("li"),boe=a("strong"),obo=o("bigbird_pegasus"),rbo=o(" \u2014 "),l$=a("a"),tbo=o("BigBirdPegasusForCausalLM"),abo=o(" (BigBirdPegasus model)"),nbo=l(),b_=a("li"),voe=a("strong"),sbo=o("blenderbot"),lbo=o(" \u2014 "),i$=a("a"),ibo=o("BlenderbotForCausalLM"),dbo=o(" (Blenderbot model)"),cbo=l(),v_=a("li"),Toe=a("strong"),mbo=o("blenderbot-small"),fbo=o(" \u2014 "),d$=a("a"),gbo=o("BlenderbotSmallForCausalLM"),hbo=o(" (BlenderbotSmall model)"),ubo=l(),T_=a("li"),Foe=a("strong"),pbo=o("camembert"),_bo=o(" \u2014 "),c$=a("a"),bbo=o("CamembertForCausalLM"),vbo=o(" (CamemBERT model)"),Tbo=l(),F_=a("li"),Coe=a("strong"),Fbo=o("ctrl"),Cbo=o(" \u2014 "),m$=a("a"),Mbo=o("CTRLLMHeadModel"),Ebo=o(" (CTRL model)"),ybo=l(),C_=a("li"),Moe=a("strong"),wbo=o("data2vec-text"),Abo=o(" \u2014 "),f$=a("a"),Lbo=o("Data2VecTextForCausalLM"),Bbo=o(" (Data2VecText model)"),xbo=l(),M_=a("li"),Eoe=a("strong"),kbo=o("electra"),Rbo=o(" \u2014 "),g$=a("a"),Sbo=o("ElectraForCausalLM"),Pbo=o(" (ELECTRA model)"),$bo=l(),E_=a("li"),yoe=a("strong"),Ibo=o("gpt2"),Nbo=o(" \u2014 "),h$=a("a"),jbo=o("GPT2LMHeadModel"),Dbo=o(" (OpenAI GPT-2 model)"),qbo=l(),y_=a("li"),woe=a("strong"),Gbo=o("gpt_neo"),Obo=o(" \u2014 "),u$=a("a"),Xbo=o("GPTNeoForCausalLM"),Vbo=o(" (GPT Neo model)"),zbo=l(),w_=a("li"),Aoe=a("strong"),Wbo=o("gptj"),Qbo=o(" \u2014 "),p$=a("a"),Hbo=o("GPTJForCausalLM"),Ubo=o(" (GPT-J model)"),Jbo=l(),A_=a("li"),Loe=a("strong"),Ybo=o("marian"),Kbo=o(" \u2014 "),_$=a("a"),Zbo=o("MarianForCausalLM"),e2o=o(" (Marian model)"),o2o=l(),L_=a("li"),Boe=a("strong"),r2o=o("mbart"),t2o=o(" \u2014 "),b$=a("a"),a2o=o("MBartForCausalLM"),n2o=o(" (mBART model)"),s2o=l(),B_=a("li"),xoe=a("strong"),l2o=o("megatron-bert"),i2o=o(" \u2014 "),v$=a("a"),d2o=o("MegatronBertForCausalLM"),c2o=o(" (MegatronBert model)"),m2o=l(),x_=a("li"),koe=a("strong"),f2o=o("openai-gpt"),g2o=o(" \u2014 "),T$=a("a"),h2o=o("OpenAIGPTLMHeadModel"),u2o=o(" (OpenAI GPT model)"),p2o=l(),k_=a("li"),Roe=a("strong"),_2o=o("pegasus"),b2o=o(" \u2014 "),F$=a("a"),v2o=o("PegasusForCausalLM"),T2o=o(" (Pegasus model)"),F2o=l(),R_=a("li"),Soe=a("strong"),C2o=o("plbart"),M2o=o(" \u2014 "),C$=a("a"),E2o=o("PLBartForCausalLM"),y2o=o(" (PLBart model)"),w2o=l(),S_=a("li"),Poe=a("strong"),A2o=o("prophetnet"),L2o=o(" \u2014 "),M$=a("a"),B2o=o("ProphetNetForCausalLM"),x2o=o(" (ProphetNet model)"),k2o=l(),P_=a("li"),$oe=a("strong"),R2o=o("qdqbert"),S2o=o(" \u2014 "),E$=a("a"),P2o=o("QDQBertLMHeadModel"),$2o=o(" (QDQBert model)"),I2o=l(),$_=a("li"),Ioe=a("strong"),N2o=o("reformer"),j2o=o(" \u2014 "),y$=a("a"),D2o=o("ReformerModelWithLMHead"),q2o=o(" (Reformer model)"),G2o=l(),I_=a("li"),Noe=a("strong"),O2o=o("rembert"),X2o=o(" \u2014 "),w$=a("a"),V2o=o("RemBertForCausalLM"),z2o=o(" (RemBERT model)"),W2o=l(),N_=a("li"),joe=a("strong"),Q2o=o("roberta"),H2o=o(" \u2014 "),A$=a("a"),U2o=o("RobertaForCausalLM"),J2o=o(" (RoBERTa model)"),Y2o=l(),j_=a("li"),Doe=a("strong"),K2o=o("roformer"),Z2o=o(" \u2014 "),L$=a("a"),evo=o("RoFormerForCausalLM"),ovo=o(" (RoFormer model)"),rvo=l(),D_=a("li"),qoe=a("strong"),tvo=o("speech_to_text_2"),avo=o(" \u2014 "),B$=a("a"),nvo=o("Speech2Text2ForCausalLM"),svo=o(" (Speech2Text2 model)"),lvo=l(),q_=a("li"),Goe=a("strong"),ivo=o("transfo-xl"),dvo=o(" \u2014 "),x$=a("a"),cvo=o("TransfoXLLMHeadModel"),mvo=o(" (Transformer-XL model)"),fvo=l(),G_=a("li"),Ooe=a("strong"),gvo=o("trocr"),hvo=o(" \u2014 "),k$=a("a"),uvo=o("TrOCRForCausalLM"),pvo=o(" (TrOCR model)"),_vo=l(),O_=a("li"),Xoe=a("strong"),bvo=o("xglm"),vvo=o(" \u2014 "),R$=a("a"),Tvo=o("XGLMForCausalLM"),Fvo=o(" (XGLM model)"),Cvo=l(),X_=a("li"),Voe=a("strong"),Mvo=o("xlm"),Evo=o(" \u2014 "),S$=a("a"),yvo=o("XLMWithLMHeadModel"),wvo=o(" (XLM model)"),Avo=l(),V_=a("li"),zoe=a("strong"),Lvo=o("xlm-prophetnet"),Bvo=o(" \u2014 "),P$=a("a"),xvo=o("XLMProphetNetForCausalLM"),kvo=o(" (XLMProphetNet model)"),Rvo=l(),z_=a("li"),Woe=a("strong"),Svo=o("xlm-roberta"),Pvo=o(" \u2014 "),$$=a("a"),$vo=o("XLMRobertaForCausalLM"),Ivo=o(" (XLM-RoBERTa model)"),Nvo=l(),W_=a("li"),Qoe=a("strong"),jvo=o("xlm-roberta-xl"),Dvo=o(" \u2014 "),I$=a("a"),qvo=o("XLMRobertaXLForCausalLM"),Gvo=o(" (XLM-RoBERTa-XL model)"),Ovo=l(),Q_=a("li"),Hoe=a("strong"),Xvo=o("xlnet"),Vvo=o(" \u2014 "),N$=a("a"),zvo=o("XLNetLMHeadModel"),Wvo=o(" (XLNet model)"),Qvo=l(),H_=a("p"),Hvo=o("The model is set in evaluation mode by default using "),Uoe=a("code"),Uvo=o("model.eval()"),Jvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=a("code"),Yvo=o("model.train()"),Kvo=l(),Yoe=a("p"),Zvo=o("Examples:"),eTo=l(),m(tw.$$.fragment),mke=l(),nd=a("h2"),U_=a("a"),Koe=a("span"),m(aw.$$.fragment),oTo=l(),Zoe=a("span"),rTo=o("AutoModelForMaskedLM"),fke=l(),Zo=a("div"),m(nw.$$.fragment),tTo=l(),sd=a("p"),aTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ere=a("code"),nTo=o("from_pretrained()"),sTo=o("class method or the "),ore=a("code"),lTo=o("from_config()"),iTo=o(`class
method.`),dTo=l(),sw=a("p"),cTo=o("This class cannot be instantiated directly using "),rre=a("code"),mTo=o("__init__()"),fTo=o(" (throws an error)."),gTo=l(),Qr=a("div"),m(lw.$$.fragment),hTo=l(),tre=a("p"),uTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pTo=l(),ld=a("p"),_To=o(`Note:
Loading a model from its configuration file does `),are=a("strong"),bTo=o("not"),vTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("code"),TTo=o("from_pretrained()"),FTo=o("to load the model weights."),CTo=l(),sre=a("p"),MTo=o("Examples:"),ETo=l(),m(iw.$$.fragment),yTo=l(),qe=a("div"),m(dw.$$.fragment),wTo=l(),lre=a("p"),ATo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LTo=l(),Qa=a("p"),BTo=o("The model class to instantiate is selected based on the "),ire=a("code"),xTo=o("model_type"),kTo=o(` property of the config object (either
passed as an argument or loaded from `),dre=a("code"),RTo=o("pretrained_model_name_or_path"),STo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=a("code"),PTo=o("pretrained_model_name_or_path"),$To=o(":"),ITo=l(),I=a("ul"),J_=a("li"),mre=a("strong"),NTo=o("albert"),jTo=o(" \u2014 "),j$=a("a"),DTo=o("AlbertForMaskedLM"),qTo=o(" (ALBERT model)"),GTo=l(),Y_=a("li"),fre=a("strong"),OTo=o("bart"),XTo=o(" \u2014 "),D$=a("a"),VTo=o("BartForConditionalGeneration"),zTo=o(" (BART model)"),WTo=l(),K_=a("li"),gre=a("strong"),QTo=o("bert"),HTo=o(" \u2014 "),q$=a("a"),UTo=o("BertForMaskedLM"),JTo=o(" (BERT model)"),YTo=l(),Z_=a("li"),hre=a("strong"),KTo=o("big_bird"),ZTo=o(" \u2014 "),G$=a("a"),e1o=o("BigBirdForMaskedLM"),o1o=o(" (BigBird model)"),r1o=l(),eb=a("li"),ure=a("strong"),t1o=o("camembert"),a1o=o(" \u2014 "),O$=a("a"),n1o=o("CamembertForMaskedLM"),s1o=o(" (CamemBERT model)"),l1o=l(),ob=a("li"),pre=a("strong"),i1o=o("convbert"),d1o=o(" \u2014 "),X$=a("a"),c1o=o("ConvBertForMaskedLM"),m1o=o(" (ConvBERT model)"),f1o=l(),rb=a("li"),_re=a("strong"),g1o=o("data2vec-text"),h1o=o(" \u2014 "),V$=a("a"),u1o=o("Data2VecTextForMaskedLM"),p1o=o(" (Data2VecText model)"),_1o=l(),tb=a("li"),bre=a("strong"),b1o=o("deberta"),v1o=o(" \u2014 "),z$=a("a"),T1o=o("DebertaForMaskedLM"),F1o=o(" (DeBERTa model)"),C1o=l(),ab=a("li"),vre=a("strong"),M1o=o("deberta-v2"),E1o=o(" \u2014 "),W$=a("a"),y1o=o("DebertaV2ForMaskedLM"),w1o=o(" (DeBERTa-v2 model)"),A1o=l(),nb=a("li"),Tre=a("strong"),L1o=o("distilbert"),B1o=o(" \u2014 "),Q$=a("a"),x1o=o("DistilBertForMaskedLM"),k1o=o(" (DistilBERT model)"),R1o=l(),sb=a("li"),Fre=a("strong"),S1o=o("electra"),P1o=o(" \u2014 "),H$=a("a"),$1o=o("ElectraForMaskedLM"),I1o=o(" (ELECTRA model)"),N1o=l(),lb=a("li"),Cre=a("strong"),j1o=o("flaubert"),D1o=o(" \u2014 "),U$=a("a"),q1o=o("FlaubertWithLMHeadModel"),G1o=o(" (FlauBERT model)"),O1o=l(),ib=a("li"),Mre=a("strong"),X1o=o("fnet"),V1o=o(" \u2014 "),J$=a("a"),z1o=o("FNetForMaskedLM"),W1o=o(" (FNet model)"),Q1o=l(),db=a("li"),Ere=a("strong"),H1o=o("funnel"),U1o=o(" \u2014 "),Y$=a("a"),J1o=o("FunnelForMaskedLM"),Y1o=o(" (Funnel Transformer model)"),K1o=l(),cb=a("li"),yre=a("strong"),Z1o=o("ibert"),eFo=o(" \u2014 "),K$=a("a"),oFo=o("IBertForMaskedLM"),rFo=o(" (I-BERT model)"),tFo=l(),mb=a("li"),wre=a("strong"),aFo=o("layoutlm"),nFo=o(" \u2014 "),Z$=a("a"),sFo=o("LayoutLMForMaskedLM"),lFo=o(" (LayoutLM model)"),iFo=l(),fb=a("li"),Are=a("strong"),dFo=o("longformer"),cFo=o(" \u2014 "),eI=a("a"),mFo=o("LongformerForMaskedLM"),fFo=o(" (Longformer model)"),gFo=l(),gb=a("li"),Lre=a("strong"),hFo=o("mbart"),uFo=o(" \u2014 "),oI=a("a"),pFo=o("MBartForConditionalGeneration"),_Fo=o(" (mBART model)"),bFo=l(),hb=a("li"),Bre=a("strong"),vFo=o("megatron-bert"),TFo=o(" \u2014 "),rI=a("a"),FFo=o("MegatronBertForMaskedLM"),CFo=o(" (MegatronBert model)"),MFo=l(),ub=a("li"),xre=a("strong"),EFo=o("mobilebert"),yFo=o(" \u2014 "),tI=a("a"),wFo=o("MobileBertForMaskedLM"),AFo=o(" (MobileBERT model)"),LFo=l(),pb=a("li"),kre=a("strong"),BFo=o("mpnet"),xFo=o(" \u2014 "),aI=a("a"),kFo=o("MPNetForMaskedLM"),RFo=o(" (MPNet model)"),SFo=l(),_b=a("li"),Rre=a("strong"),PFo=o("nystromformer"),$Fo=o(" \u2014 "),nI=a("a"),IFo=o("NystromformerForMaskedLM"),NFo=o(" (Nystromformer model)"),jFo=l(),bb=a("li"),Sre=a("strong"),DFo=o("perceiver"),qFo=o(" \u2014 "),sI=a("a"),GFo=o("PerceiverForMaskedLM"),OFo=o(" (Perceiver model)"),XFo=l(),vb=a("li"),Pre=a("strong"),VFo=o("qdqbert"),zFo=o(" \u2014 "),lI=a("a"),WFo=o("QDQBertForMaskedLM"),QFo=o(" (QDQBert model)"),HFo=l(),Tb=a("li"),$re=a("strong"),UFo=o("reformer"),JFo=o(" \u2014 "),iI=a("a"),YFo=o("ReformerForMaskedLM"),KFo=o(" (Reformer model)"),ZFo=l(),Fb=a("li"),Ire=a("strong"),eCo=o("rembert"),oCo=o(" \u2014 "),dI=a("a"),rCo=o("RemBertForMaskedLM"),tCo=o(" (RemBERT model)"),aCo=l(),Cb=a("li"),Nre=a("strong"),nCo=o("roberta"),sCo=o(" \u2014 "),cI=a("a"),lCo=o("RobertaForMaskedLM"),iCo=o(" (RoBERTa model)"),dCo=l(),Mb=a("li"),jre=a("strong"),cCo=o("roformer"),mCo=o(" \u2014 "),mI=a("a"),fCo=o("RoFormerForMaskedLM"),gCo=o(" (RoFormer model)"),hCo=l(),Eb=a("li"),Dre=a("strong"),uCo=o("squeezebert"),pCo=o(" \u2014 "),fI=a("a"),_Co=o("SqueezeBertForMaskedLM"),bCo=o(" (SqueezeBERT model)"),vCo=l(),yb=a("li"),qre=a("strong"),TCo=o("tapas"),FCo=o(" \u2014 "),gI=a("a"),CCo=o("TapasForMaskedLM"),MCo=o(" (TAPAS model)"),ECo=l(),wb=a("li"),Gre=a("strong"),yCo=o("wav2vec2"),wCo=o(" \u2014 "),Ore=a("code"),ACo=o("Wav2Vec2ForMaskedLM"),LCo=o("(Wav2Vec2 model)"),BCo=l(),Ab=a("li"),Xre=a("strong"),xCo=o("xlm"),kCo=o(" \u2014 "),hI=a("a"),RCo=o("XLMWithLMHeadModel"),SCo=o(" (XLM model)"),PCo=l(),Lb=a("li"),Vre=a("strong"),$Co=o("xlm-roberta"),ICo=o(" \u2014 "),uI=a("a"),NCo=o("XLMRobertaForMaskedLM"),jCo=o(" (XLM-RoBERTa model)"),DCo=l(),Bb=a("li"),zre=a("strong"),qCo=o("xlm-roberta-xl"),GCo=o(" \u2014 "),pI=a("a"),OCo=o("XLMRobertaXLForMaskedLM"),XCo=o(" (XLM-RoBERTa-XL model)"),VCo=l(),xb=a("li"),Wre=a("strong"),zCo=o("yoso"),WCo=o(" \u2014 "),_I=a("a"),QCo=o("YosoForMaskedLM"),HCo=o(" (YOSO model)"),UCo=l(),kb=a("p"),JCo=o("The model is set in evaluation mode by default using "),Qre=a("code"),YCo=o("model.eval()"),KCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hre=a("code"),ZCo=o("model.train()"),eMo=l(),Ure=a("p"),oMo=o("Examples:"),rMo=l(),m(cw.$$.fragment),gke=l(),id=a("h2"),Rb=a("a"),Jre=a("span"),m(mw.$$.fragment),tMo=l(),Yre=a("span"),aMo=o("AutoModelForSeq2SeqLM"),hke=l(),er=a("div"),m(fw.$$.fragment),nMo=l(),dd=a("p"),sMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kre=a("code"),lMo=o("from_pretrained()"),iMo=o("class method or the "),Zre=a("code"),dMo=o("from_config()"),cMo=o(`class
method.`),mMo=l(),gw=a("p"),fMo=o("This class cannot be instantiated directly using "),ete=a("code"),gMo=o("__init__()"),hMo=o(" (throws an error)."),uMo=l(),Hr=a("div"),m(hw.$$.fragment),pMo=l(),ote=a("p"),_Mo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bMo=l(),cd=a("p"),vMo=o(`Note:
Loading a model from its configuration file does `),rte=a("strong"),TMo=o("not"),FMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=a("code"),CMo=o("from_pretrained()"),MMo=o("to load the model weights."),EMo=l(),ate=a("p"),yMo=o("Examples:"),wMo=l(),m(uw.$$.fragment),AMo=l(),Ge=a("div"),m(pw.$$.fragment),LMo=l(),nte=a("p"),BMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xMo=l(),Ha=a("p"),kMo=o("The model class to instantiate is selected based on the "),ste=a("code"),RMo=o("model_type"),SMo=o(` property of the config object (either
passed as an argument or loaded from `),lte=a("code"),PMo=o("pretrained_model_name_or_path"),$Mo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=a("code"),IMo=o("pretrained_model_name_or_path"),NMo=o(":"),jMo=l(),se=a("ul"),Sb=a("li"),dte=a("strong"),DMo=o("bart"),qMo=o(" \u2014 "),bI=a("a"),GMo=o("BartForConditionalGeneration"),OMo=o(" (BART model)"),XMo=l(),Pb=a("li"),cte=a("strong"),VMo=o("bigbird_pegasus"),zMo=o(" \u2014 "),vI=a("a"),WMo=o("BigBirdPegasusForConditionalGeneration"),QMo=o(" (BigBirdPegasus model)"),HMo=l(),$b=a("li"),mte=a("strong"),UMo=o("blenderbot"),JMo=o(" \u2014 "),TI=a("a"),YMo=o("BlenderbotForConditionalGeneration"),KMo=o(" (Blenderbot model)"),ZMo=l(),Ib=a("li"),fte=a("strong"),e4o=o("blenderbot-small"),o4o=o(" \u2014 "),FI=a("a"),r4o=o("BlenderbotSmallForConditionalGeneration"),t4o=o(" (BlenderbotSmall model)"),a4o=l(),Nb=a("li"),gte=a("strong"),n4o=o("encoder-decoder"),s4o=o(" \u2014 "),CI=a("a"),l4o=o("EncoderDecoderModel"),i4o=o(" (Encoder decoder model)"),d4o=l(),jb=a("li"),hte=a("strong"),c4o=o("fsmt"),m4o=o(" \u2014 "),MI=a("a"),f4o=o("FSMTForConditionalGeneration"),g4o=o(" (FairSeq Machine-Translation model)"),h4o=l(),Db=a("li"),ute=a("strong"),u4o=o("led"),p4o=o(" \u2014 "),EI=a("a"),_4o=o("LEDForConditionalGeneration"),b4o=o(" (LED model)"),v4o=l(),qb=a("li"),pte=a("strong"),T4o=o("m2m_100"),F4o=o(" \u2014 "),yI=a("a"),C4o=o("M2M100ForConditionalGeneration"),M4o=o(" (M2M100 model)"),E4o=l(),Gb=a("li"),_te=a("strong"),y4o=o("marian"),w4o=o(" \u2014 "),wI=a("a"),A4o=o("MarianMTModel"),L4o=o(" (Marian model)"),B4o=l(),Ob=a("li"),bte=a("strong"),x4o=o("mbart"),k4o=o(" \u2014 "),AI=a("a"),R4o=o("MBartForConditionalGeneration"),S4o=o(" (mBART model)"),P4o=l(),Xb=a("li"),vte=a("strong"),$4o=o("mt5"),I4o=o(" \u2014 "),LI=a("a"),N4o=o("MT5ForConditionalGeneration"),j4o=o(" (mT5 model)"),D4o=l(),Vb=a("li"),Tte=a("strong"),q4o=o("pegasus"),G4o=o(" \u2014 "),BI=a("a"),O4o=o("PegasusForConditionalGeneration"),X4o=o(" (Pegasus model)"),V4o=l(),zb=a("li"),Fte=a("strong"),z4o=o("plbart"),W4o=o(" \u2014 "),xI=a("a"),Q4o=o("PLBartForConditionalGeneration"),H4o=o(" (PLBart model)"),U4o=l(),Wb=a("li"),Cte=a("strong"),J4o=o("prophetnet"),Y4o=o(" \u2014 "),kI=a("a"),K4o=o("ProphetNetForConditionalGeneration"),Z4o=o(" (ProphetNet model)"),eEo=l(),Qb=a("li"),Mte=a("strong"),oEo=o("t5"),rEo=o(" \u2014 "),RI=a("a"),tEo=o("T5ForConditionalGeneration"),aEo=o(" (T5 model)"),nEo=l(),Hb=a("li"),Ete=a("strong"),sEo=o("xlm-prophetnet"),lEo=o(" \u2014 "),SI=a("a"),iEo=o("XLMProphetNetForConditionalGeneration"),dEo=o(" (XLMProphetNet model)"),cEo=l(),Ub=a("p"),mEo=o("The model is set in evaluation mode by default using "),yte=a("code"),fEo=o("model.eval()"),gEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wte=a("code"),hEo=o("model.train()"),uEo=l(),Ate=a("p"),pEo=o("Examples:"),_Eo=l(),m(_w.$$.fragment),uke=l(),md=a("h2"),Jb=a("a"),Lte=a("span"),m(bw.$$.fragment),bEo=l(),Bte=a("span"),vEo=o("AutoModelForSequenceClassification"),pke=l(),or=a("div"),m(vw.$$.fragment),TEo=l(),fd=a("p"),FEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xte=a("code"),CEo=o("from_pretrained()"),MEo=o("class method or the "),kte=a("code"),EEo=o("from_config()"),yEo=o(`class
method.`),wEo=l(),Tw=a("p"),AEo=o("This class cannot be instantiated directly using "),Rte=a("code"),LEo=o("__init__()"),BEo=o(" (throws an error)."),xEo=l(),Ur=a("div"),m(Fw.$$.fragment),kEo=l(),Ste=a("p"),REo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SEo=l(),gd=a("p"),PEo=o(`Note:
Loading a model from its configuration file does `),Pte=a("strong"),$Eo=o("not"),IEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=a("code"),NEo=o("from_pretrained()"),jEo=o("to load the model weights."),DEo=l(),Ite=a("p"),qEo=o("Examples:"),GEo=l(),m(Cw.$$.fragment),OEo=l(),Oe=a("div"),m(Mw.$$.fragment),XEo=l(),Nte=a("p"),VEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zEo=l(),Ua=a("p"),WEo=o("The model class to instantiate is selected based on the "),jte=a("code"),QEo=o("model_type"),HEo=o(` property of the config object (either
passed as an argument or loaded from `),Dte=a("code"),UEo=o("pretrained_model_name_or_path"),JEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qte=a("code"),YEo=o("pretrained_model_name_or_path"),KEo=o(":"),ZEo=l(),A=a("ul"),Yb=a("li"),Gte=a("strong"),e3o=o("albert"),o3o=o(" \u2014 "),PI=a("a"),r3o=o("AlbertForSequenceClassification"),t3o=o(" (ALBERT model)"),a3o=l(),Kb=a("li"),Ote=a("strong"),n3o=o("bart"),s3o=o(" \u2014 "),$I=a("a"),l3o=o("BartForSequenceClassification"),i3o=o(" (BART model)"),d3o=l(),Zb=a("li"),Xte=a("strong"),c3o=o("bert"),m3o=o(" \u2014 "),II=a("a"),f3o=o("BertForSequenceClassification"),g3o=o(" (BERT model)"),h3o=l(),e2=a("li"),Vte=a("strong"),u3o=o("big_bird"),p3o=o(" \u2014 "),NI=a("a"),_3o=o("BigBirdForSequenceClassification"),b3o=o(" (BigBird model)"),v3o=l(),o2=a("li"),zte=a("strong"),T3o=o("bigbird_pegasus"),F3o=o(" \u2014 "),jI=a("a"),C3o=o("BigBirdPegasusForSequenceClassification"),M3o=o(" (BigBirdPegasus model)"),E3o=l(),r2=a("li"),Wte=a("strong"),y3o=o("camembert"),w3o=o(" \u2014 "),DI=a("a"),A3o=o("CamembertForSequenceClassification"),L3o=o(" (CamemBERT model)"),B3o=l(),t2=a("li"),Qte=a("strong"),x3o=o("canine"),k3o=o(" \u2014 "),qI=a("a"),R3o=o("CanineForSequenceClassification"),S3o=o(" (Canine model)"),P3o=l(),a2=a("li"),Hte=a("strong"),$3o=o("convbert"),I3o=o(" \u2014 "),GI=a("a"),N3o=o("ConvBertForSequenceClassification"),j3o=o(" (ConvBERT model)"),D3o=l(),n2=a("li"),Ute=a("strong"),q3o=o("ctrl"),G3o=o(" \u2014 "),OI=a("a"),O3o=o("CTRLForSequenceClassification"),X3o=o(" (CTRL model)"),V3o=l(),s2=a("li"),Jte=a("strong"),z3o=o("data2vec-text"),W3o=o(" \u2014 "),XI=a("a"),Q3o=o("Data2VecTextForSequenceClassification"),H3o=o(" (Data2VecText model)"),U3o=l(),l2=a("li"),Yte=a("strong"),J3o=o("deberta"),Y3o=o(" \u2014 "),VI=a("a"),K3o=o("DebertaForSequenceClassification"),Z3o=o(" (DeBERTa model)"),e5o=l(),i2=a("li"),Kte=a("strong"),o5o=o("deberta-v2"),r5o=o(" \u2014 "),zI=a("a"),t5o=o("DebertaV2ForSequenceClassification"),a5o=o(" (DeBERTa-v2 model)"),n5o=l(),d2=a("li"),Zte=a("strong"),s5o=o("distilbert"),l5o=o(" \u2014 "),WI=a("a"),i5o=o("DistilBertForSequenceClassification"),d5o=o(" (DistilBERT model)"),c5o=l(),c2=a("li"),eae=a("strong"),m5o=o("electra"),f5o=o(" \u2014 "),QI=a("a"),g5o=o("ElectraForSequenceClassification"),h5o=o(" (ELECTRA model)"),u5o=l(),m2=a("li"),oae=a("strong"),p5o=o("flaubert"),_5o=o(" \u2014 "),HI=a("a"),b5o=o("FlaubertForSequenceClassification"),v5o=o(" (FlauBERT model)"),T5o=l(),f2=a("li"),rae=a("strong"),F5o=o("fnet"),C5o=o(" \u2014 "),UI=a("a"),M5o=o("FNetForSequenceClassification"),E5o=o(" (FNet model)"),y5o=l(),g2=a("li"),tae=a("strong"),w5o=o("funnel"),A5o=o(" \u2014 "),JI=a("a"),L5o=o("FunnelForSequenceClassification"),B5o=o(" (Funnel Transformer model)"),x5o=l(),h2=a("li"),aae=a("strong"),k5o=o("gpt2"),R5o=o(" \u2014 "),YI=a("a"),S5o=o("GPT2ForSequenceClassification"),P5o=o(" (OpenAI GPT-2 model)"),$5o=l(),u2=a("li"),nae=a("strong"),I5o=o("gpt_neo"),N5o=o(" \u2014 "),KI=a("a"),j5o=o("GPTNeoForSequenceClassification"),D5o=o(" (GPT Neo model)"),q5o=l(),p2=a("li"),sae=a("strong"),G5o=o("gptj"),O5o=o(" \u2014 "),ZI=a("a"),X5o=o("GPTJForSequenceClassification"),V5o=o(" (GPT-J model)"),z5o=l(),_2=a("li"),lae=a("strong"),W5o=o("ibert"),Q5o=o(" \u2014 "),eN=a("a"),H5o=o("IBertForSequenceClassification"),U5o=o(" (I-BERT model)"),J5o=l(),b2=a("li"),iae=a("strong"),Y5o=o("layoutlm"),K5o=o(" \u2014 "),oN=a("a"),Z5o=o("LayoutLMForSequenceClassification"),eyo=o(" (LayoutLM model)"),oyo=l(),v2=a("li"),dae=a("strong"),ryo=o("layoutlmv2"),tyo=o(" \u2014 "),rN=a("a"),ayo=o("LayoutLMv2ForSequenceClassification"),nyo=o(" (LayoutLMv2 model)"),syo=l(),T2=a("li"),cae=a("strong"),lyo=o("led"),iyo=o(" \u2014 "),tN=a("a"),dyo=o("LEDForSequenceClassification"),cyo=o(" (LED model)"),myo=l(),F2=a("li"),mae=a("strong"),fyo=o("longformer"),gyo=o(" \u2014 "),aN=a("a"),hyo=o("LongformerForSequenceClassification"),uyo=o(" (Longformer model)"),pyo=l(),C2=a("li"),fae=a("strong"),_yo=o("mbart"),byo=o(" \u2014 "),nN=a("a"),vyo=o("MBartForSequenceClassification"),Tyo=o(" (mBART model)"),Fyo=l(),M2=a("li"),gae=a("strong"),Cyo=o("megatron-bert"),Myo=o(" \u2014 "),sN=a("a"),Eyo=o("MegatronBertForSequenceClassification"),yyo=o(" (MegatronBert model)"),wyo=l(),E2=a("li"),hae=a("strong"),Ayo=o("mobilebert"),Lyo=o(" \u2014 "),lN=a("a"),Byo=o("MobileBertForSequenceClassification"),xyo=o(" (MobileBERT model)"),kyo=l(),y2=a("li"),uae=a("strong"),Ryo=o("mpnet"),Syo=o(" \u2014 "),iN=a("a"),Pyo=o("MPNetForSequenceClassification"),$yo=o(" (MPNet model)"),Iyo=l(),w2=a("li"),pae=a("strong"),Nyo=o("nystromformer"),jyo=o(" \u2014 "),dN=a("a"),Dyo=o("NystromformerForSequenceClassification"),qyo=o(" (Nystromformer model)"),Gyo=l(),A2=a("li"),_ae=a("strong"),Oyo=o("openai-gpt"),Xyo=o(" \u2014 "),cN=a("a"),Vyo=o("OpenAIGPTForSequenceClassification"),zyo=o(" (OpenAI GPT model)"),Wyo=l(),L2=a("li"),bae=a("strong"),Qyo=o("perceiver"),Hyo=o(" \u2014 "),mN=a("a"),Uyo=o("PerceiverForSequenceClassification"),Jyo=o(" (Perceiver model)"),Yyo=l(),B2=a("li"),vae=a("strong"),Kyo=o("plbart"),Zyo=o(" \u2014 "),fN=a("a"),ewo=o("PLBartForSequenceClassification"),owo=o(" (PLBart model)"),rwo=l(),x2=a("li"),Tae=a("strong"),two=o("qdqbert"),awo=o(" \u2014 "),gN=a("a"),nwo=o("QDQBertForSequenceClassification"),swo=o(" (QDQBert model)"),lwo=l(),k2=a("li"),Fae=a("strong"),iwo=o("reformer"),dwo=o(" \u2014 "),hN=a("a"),cwo=o("ReformerForSequenceClassification"),mwo=o(" (Reformer model)"),fwo=l(),R2=a("li"),Cae=a("strong"),gwo=o("rembert"),hwo=o(" \u2014 "),uN=a("a"),uwo=o("RemBertForSequenceClassification"),pwo=o(" (RemBERT model)"),_wo=l(),S2=a("li"),Mae=a("strong"),bwo=o("roberta"),vwo=o(" \u2014 "),pN=a("a"),Two=o("RobertaForSequenceClassification"),Fwo=o(" (RoBERTa model)"),Cwo=l(),P2=a("li"),Eae=a("strong"),Mwo=o("roformer"),Ewo=o(" \u2014 "),_N=a("a"),ywo=o("RoFormerForSequenceClassification"),wwo=o(" (RoFormer model)"),Awo=l(),$2=a("li"),yae=a("strong"),Lwo=o("squeezebert"),Bwo=o(" \u2014 "),bN=a("a"),xwo=o("SqueezeBertForSequenceClassification"),kwo=o(" (SqueezeBERT model)"),Rwo=l(),I2=a("li"),wae=a("strong"),Swo=o("tapas"),Pwo=o(" \u2014 "),vN=a("a"),$wo=o("TapasForSequenceClassification"),Iwo=o(" (TAPAS model)"),Nwo=l(),N2=a("li"),Aae=a("strong"),jwo=o("transfo-xl"),Dwo=o(" \u2014 "),TN=a("a"),qwo=o("TransfoXLForSequenceClassification"),Gwo=o(" (Transformer-XL model)"),Owo=l(),j2=a("li"),Lae=a("strong"),Xwo=o("xlm"),Vwo=o(" \u2014 "),FN=a("a"),zwo=o("XLMForSequenceClassification"),Wwo=o(" (XLM model)"),Qwo=l(),D2=a("li"),Bae=a("strong"),Hwo=o("xlm-roberta"),Uwo=o(" \u2014 "),CN=a("a"),Jwo=o("XLMRobertaForSequenceClassification"),Ywo=o(" (XLM-RoBERTa model)"),Kwo=l(),q2=a("li"),xae=a("strong"),Zwo=o("xlm-roberta-xl"),e6o=o(" \u2014 "),MN=a("a"),o6o=o("XLMRobertaXLForSequenceClassification"),r6o=o(" (XLM-RoBERTa-XL model)"),t6o=l(),G2=a("li"),kae=a("strong"),a6o=o("xlnet"),n6o=o(" \u2014 "),EN=a("a"),s6o=o("XLNetForSequenceClassification"),l6o=o(" (XLNet model)"),i6o=l(),O2=a("li"),Rae=a("strong"),d6o=o("yoso"),c6o=o(" \u2014 "),yN=a("a"),m6o=o("YosoForSequenceClassification"),f6o=o(" (YOSO model)"),g6o=l(),X2=a("p"),h6o=o("The model is set in evaluation mode by default using "),Sae=a("code"),u6o=o("model.eval()"),p6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pae=a("code"),_6o=o("model.train()"),b6o=l(),$ae=a("p"),v6o=o("Examples:"),T6o=l(),m(Ew.$$.fragment),_ke=l(),hd=a("h2"),V2=a("a"),Iae=a("span"),m(yw.$$.fragment),F6o=l(),Nae=a("span"),C6o=o("AutoModelForMultipleChoice"),bke=l(),rr=a("div"),m(ww.$$.fragment),M6o=l(),ud=a("p"),E6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jae=a("code"),y6o=o("from_pretrained()"),w6o=o("class method or the "),Dae=a("code"),A6o=o("from_config()"),L6o=o(`class
method.`),B6o=l(),Aw=a("p"),x6o=o("This class cannot be instantiated directly using "),qae=a("code"),k6o=o("__init__()"),R6o=o(" (throws an error)."),S6o=l(),Jr=a("div"),m(Lw.$$.fragment),P6o=l(),Gae=a("p"),$6o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I6o=l(),pd=a("p"),N6o=o(`Note:
Loading a model from its configuration file does `),Oae=a("strong"),j6o=o("not"),D6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=a("code"),q6o=o("from_pretrained()"),G6o=o("to load the model weights."),O6o=l(),Vae=a("p"),X6o=o("Examples:"),V6o=l(),m(Bw.$$.fragment),z6o=l(),Xe=a("div"),m(xw.$$.fragment),W6o=l(),zae=a("p"),Q6o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H6o=l(),Ja=a("p"),U6o=o("The model class to instantiate is selected based on the "),Wae=a("code"),J6o=o("model_type"),Y6o=o(` property of the config object (either
passed as an argument or loaded from `),Qae=a("code"),K6o=o("pretrained_model_name_or_path"),Z6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hae=a("code"),eAo=o("pretrained_model_name_or_path"),oAo=o(":"),rAo=l(),G=a("ul"),z2=a("li"),Uae=a("strong"),tAo=o("albert"),aAo=o(" \u2014 "),wN=a("a"),nAo=o("AlbertForMultipleChoice"),sAo=o(" (ALBERT model)"),lAo=l(),W2=a("li"),Jae=a("strong"),iAo=o("bert"),dAo=o(" \u2014 "),AN=a("a"),cAo=o("BertForMultipleChoice"),mAo=o(" (BERT model)"),fAo=l(),Q2=a("li"),Yae=a("strong"),gAo=o("big_bird"),hAo=o(" \u2014 "),LN=a("a"),uAo=o("BigBirdForMultipleChoice"),pAo=o(" (BigBird model)"),_Ao=l(),H2=a("li"),Kae=a("strong"),bAo=o("camembert"),vAo=o(" \u2014 "),BN=a("a"),TAo=o("CamembertForMultipleChoice"),FAo=o(" (CamemBERT model)"),CAo=l(),U2=a("li"),Zae=a("strong"),MAo=o("canine"),EAo=o(" \u2014 "),xN=a("a"),yAo=o("CanineForMultipleChoice"),wAo=o(" (Canine model)"),AAo=l(),J2=a("li"),ene=a("strong"),LAo=o("convbert"),BAo=o(" \u2014 "),kN=a("a"),xAo=o("ConvBertForMultipleChoice"),kAo=o(" (ConvBERT model)"),RAo=l(),Y2=a("li"),one=a("strong"),SAo=o("data2vec-text"),PAo=o(" \u2014 "),RN=a("a"),$Ao=o("Data2VecTextForMultipleChoice"),IAo=o(" (Data2VecText model)"),NAo=l(),K2=a("li"),rne=a("strong"),jAo=o("distilbert"),DAo=o(" \u2014 "),SN=a("a"),qAo=o("DistilBertForMultipleChoice"),GAo=o(" (DistilBERT model)"),OAo=l(),Z2=a("li"),tne=a("strong"),XAo=o("electra"),VAo=o(" \u2014 "),PN=a("a"),zAo=o("ElectraForMultipleChoice"),WAo=o(" (ELECTRA model)"),QAo=l(),ev=a("li"),ane=a("strong"),HAo=o("flaubert"),UAo=o(" \u2014 "),$N=a("a"),JAo=o("FlaubertForMultipleChoice"),YAo=o(" (FlauBERT model)"),KAo=l(),ov=a("li"),nne=a("strong"),ZAo=o("fnet"),e0o=o(" \u2014 "),IN=a("a"),o0o=o("FNetForMultipleChoice"),r0o=o(" (FNet model)"),t0o=l(),rv=a("li"),sne=a("strong"),a0o=o("funnel"),n0o=o(" \u2014 "),NN=a("a"),s0o=o("FunnelForMultipleChoice"),l0o=o(" (Funnel Transformer model)"),i0o=l(),tv=a("li"),lne=a("strong"),d0o=o("ibert"),c0o=o(" \u2014 "),jN=a("a"),m0o=o("IBertForMultipleChoice"),f0o=o(" (I-BERT model)"),g0o=l(),av=a("li"),ine=a("strong"),h0o=o("longformer"),u0o=o(" \u2014 "),DN=a("a"),p0o=o("LongformerForMultipleChoice"),_0o=o(" (Longformer model)"),b0o=l(),nv=a("li"),dne=a("strong"),v0o=o("megatron-bert"),T0o=o(" \u2014 "),qN=a("a"),F0o=o("MegatronBertForMultipleChoice"),C0o=o(" (MegatronBert model)"),M0o=l(),sv=a("li"),cne=a("strong"),E0o=o("mobilebert"),y0o=o(" \u2014 "),GN=a("a"),w0o=o("MobileBertForMultipleChoice"),A0o=o(" (MobileBERT model)"),L0o=l(),lv=a("li"),mne=a("strong"),B0o=o("mpnet"),x0o=o(" \u2014 "),ON=a("a"),k0o=o("MPNetForMultipleChoice"),R0o=o(" (MPNet model)"),S0o=l(),iv=a("li"),fne=a("strong"),P0o=o("nystromformer"),$0o=o(" \u2014 "),XN=a("a"),I0o=o("NystromformerForMultipleChoice"),N0o=o(" (Nystromformer model)"),j0o=l(),dv=a("li"),gne=a("strong"),D0o=o("qdqbert"),q0o=o(" \u2014 "),VN=a("a"),G0o=o("QDQBertForMultipleChoice"),O0o=o(" (QDQBert model)"),X0o=l(),cv=a("li"),hne=a("strong"),V0o=o("rembert"),z0o=o(" \u2014 "),zN=a("a"),W0o=o("RemBertForMultipleChoice"),Q0o=o(" (RemBERT model)"),H0o=l(),mv=a("li"),une=a("strong"),U0o=o("roberta"),J0o=o(" \u2014 "),WN=a("a"),Y0o=o("RobertaForMultipleChoice"),K0o=o(" (RoBERTa model)"),Z0o=l(),fv=a("li"),pne=a("strong"),eLo=o("roformer"),oLo=o(" \u2014 "),QN=a("a"),rLo=o("RoFormerForMultipleChoice"),tLo=o(" (RoFormer model)"),aLo=l(),gv=a("li"),_ne=a("strong"),nLo=o("squeezebert"),sLo=o(" \u2014 "),HN=a("a"),lLo=o("SqueezeBertForMultipleChoice"),iLo=o(" (SqueezeBERT model)"),dLo=l(),hv=a("li"),bne=a("strong"),cLo=o("xlm"),mLo=o(" \u2014 "),UN=a("a"),fLo=o("XLMForMultipleChoice"),gLo=o(" (XLM model)"),hLo=l(),uv=a("li"),vne=a("strong"),uLo=o("xlm-roberta"),pLo=o(" \u2014 "),JN=a("a"),_Lo=o("XLMRobertaForMultipleChoice"),bLo=o(" (XLM-RoBERTa model)"),vLo=l(),pv=a("li"),Tne=a("strong"),TLo=o("xlm-roberta-xl"),FLo=o(" \u2014 "),YN=a("a"),CLo=o("XLMRobertaXLForMultipleChoice"),MLo=o(" (XLM-RoBERTa-XL model)"),ELo=l(),_v=a("li"),Fne=a("strong"),yLo=o("xlnet"),wLo=o(" \u2014 "),KN=a("a"),ALo=o("XLNetForMultipleChoice"),LLo=o(" (XLNet model)"),BLo=l(),bv=a("li"),Cne=a("strong"),xLo=o("yoso"),kLo=o(" \u2014 "),ZN=a("a"),RLo=o("YosoForMultipleChoice"),SLo=o(" (YOSO model)"),PLo=l(),vv=a("p"),$Lo=o("The model is set in evaluation mode by default using "),Mne=a("code"),ILo=o("model.eval()"),NLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=a("code"),jLo=o("model.train()"),DLo=l(),yne=a("p"),qLo=o("Examples:"),GLo=l(),m(kw.$$.fragment),vke=l(),_d=a("h2"),Tv=a("a"),wne=a("span"),m(Rw.$$.fragment),OLo=l(),Ane=a("span"),XLo=o("AutoModelForNextSentencePrediction"),Tke=l(),tr=a("div"),m(Sw.$$.fragment),VLo=l(),bd=a("p"),zLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Lne=a("code"),WLo=o("from_pretrained()"),QLo=o("class method or the "),Bne=a("code"),HLo=o("from_config()"),ULo=o(`class
method.`),JLo=l(),Pw=a("p"),YLo=o("This class cannot be instantiated directly using "),xne=a("code"),KLo=o("__init__()"),ZLo=o(" (throws an error)."),e7o=l(),Yr=a("div"),m($w.$$.fragment),o7o=l(),kne=a("p"),r7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t7o=l(),vd=a("p"),a7o=o(`Note:
Loading a model from its configuration file does `),Rne=a("strong"),n7o=o("not"),s7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=a("code"),l7o=o("from_pretrained()"),i7o=o("to load the model weights."),d7o=l(),Pne=a("p"),c7o=o("Examples:"),m7o=l(),m(Iw.$$.fragment),f7o=l(),Ve=a("div"),m(Nw.$$.fragment),g7o=l(),$ne=a("p"),h7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u7o=l(),Ya=a("p"),p7o=o("The model class to instantiate is selected based on the "),Ine=a("code"),_7o=o("model_type"),b7o=o(` property of the config object (either
passed as an argument or loaded from `),Nne=a("code"),v7o=o("pretrained_model_name_or_path"),T7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=a("code"),F7o=o("pretrained_model_name_or_path"),C7o=o(":"),M7o=l(),da=a("ul"),Fv=a("li"),Dne=a("strong"),E7o=o("bert"),y7o=o(" \u2014 "),ej=a("a"),w7o=o("BertForNextSentencePrediction"),A7o=o(" (BERT model)"),L7o=l(),Cv=a("li"),qne=a("strong"),B7o=o("fnet"),x7o=o(" \u2014 "),oj=a("a"),k7o=o("FNetForNextSentencePrediction"),R7o=o(" (FNet model)"),S7o=l(),Mv=a("li"),Gne=a("strong"),P7o=o("megatron-bert"),$7o=o(" \u2014 "),rj=a("a"),I7o=o("MegatronBertForNextSentencePrediction"),N7o=o(" (MegatronBert model)"),j7o=l(),Ev=a("li"),One=a("strong"),D7o=o("mobilebert"),q7o=o(" \u2014 "),tj=a("a"),G7o=o("MobileBertForNextSentencePrediction"),O7o=o(" (MobileBERT model)"),X7o=l(),yv=a("li"),Xne=a("strong"),V7o=o("qdqbert"),z7o=o(" \u2014 "),aj=a("a"),W7o=o("QDQBertForNextSentencePrediction"),Q7o=o(" (QDQBert model)"),H7o=l(),wv=a("p"),U7o=o("The model is set in evaluation mode by default using "),Vne=a("code"),J7o=o("model.eval()"),Y7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=a("code"),K7o=o("model.train()"),Z7o=l(),Wne=a("p"),e8o=o("Examples:"),o8o=l(),m(jw.$$.fragment),Fke=l(),Td=a("h2"),Av=a("a"),Qne=a("span"),m(Dw.$$.fragment),r8o=l(),Hne=a("span"),t8o=o("AutoModelForTokenClassification"),Cke=l(),ar=a("div"),m(qw.$$.fragment),a8o=l(),Fd=a("p"),n8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Une=a("code"),s8o=o("from_pretrained()"),l8o=o("class method or the "),Jne=a("code"),i8o=o("from_config()"),d8o=o(`class
method.`),c8o=l(),Gw=a("p"),m8o=o("This class cannot be instantiated directly using "),Yne=a("code"),f8o=o("__init__()"),g8o=o(" (throws an error)."),h8o=l(),Kr=a("div"),m(Ow.$$.fragment),u8o=l(),Kne=a("p"),p8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_8o=l(),Cd=a("p"),b8o=o(`Note:
Loading a model from its configuration file does `),Zne=a("strong"),v8o=o("not"),T8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ese=a("code"),F8o=o("from_pretrained()"),C8o=o("to load the model weights."),M8o=l(),ose=a("p"),E8o=o("Examples:"),y8o=l(),m(Xw.$$.fragment),w8o=l(),ze=a("div"),m(Vw.$$.fragment),A8o=l(),rse=a("p"),L8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B8o=l(),Ka=a("p"),x8o=o("The model class to instantiate is selected based on the "),tse=a("code"),k8o=o("model_type"),R8o=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),S8o=o("pretrained_model_name_or_path"),P8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=a("code"),$8o=o("pretrained_model_name_or_path"),I8o=o(":"),N8o=l(),D=a("ul"),Lv=a("li"),sse=a("strong"),j8o=o("albert"),D8o=o(" \u2014 "),nj=a("a"),q8o=o("AlbertForTokenClassification"),G8o=o(" (ALBERT model)"),O8o=l(),Bv=a("li"),lse=a("strong"),X8o=o("bert"),V8o=o(" \u2014 "),sj=a("a"),z8o=o("BertForTokenClassification"),W8o=o(" (BERT model)"),Q8o=l(),xv=a("li"),ise=a("strong"),H8o=o("big_bird"),U8o=o(" \u2014 "),lj=a("a"),J8o=o("BigBirdForTokenClassification"),Y8o=o(" (BigBird model)"),K8o=l(),kv=a("li"),dse=a("strong"),Z8o=o("camembert"),e9o=o(" \u2014 "),ij=a("a"),o9o=o("CamembertForTokenClassification"),r9o=o(" (CamemBERT model)"),t9o=l(),Rv=a("li"),cse=a("strong"),a9o=o("canine"),n9o=o(" \u2014 "),dj=a("a"),s9o=o("CanineForTokenClassification"),l9o=o(" (Canine model)"),i9o=l(),Sv=a("li"),mse=a("strong"),d9o=o("convbert"),c9o=o(" \u2014 "),cj=a("a"),m9o=o("ConvBertForTokenClassification"),f9o=o(" (ConvBERT model)"),g9o=l(),Pv=a("li"),fse=a("strong"),h9o=o("data2vec-text"),u9o=o(" \u2014 "),mj=a("a"),p9o=o("Data2VecTextForTokenClassification"),_9o=o(" (Data2VecText model)"),b9o=l(),$v=a("li"),gse=a("strong"),v9o=o("deberta"),T9o=o(" \u2014 "),fj=a("a"),F9o=o("DebertaForTokenClassification"),C9o=o(" (DeBERTa model)"),M9o=l(),Iv=a("li"),hse=a("strong"),E9o=o("deberta-v2"),y9o=o(" \u2014 "),gj=a("a"),w9o=o("DebertaV2ForTokenClassification"),A9o=o(" (DeBERTa-v2 model)"),L9o=l(),Nv=a("li"),use=a("strong"),B9o=o("distilbert"),x9o=o(" \u2014 "),hj=a("a"),k9o=o("DistilBertForTokenClassification"),R9o=o(" (DistilBERT model)"),S9o=l(),jv=a("li"),pse=a("strong"),P9o=o("electra"),$9o=o(" \u2014 "),uj=a("a"),I9o=o("ElectraForTokenClassification"),N9o=o(" (ELECTRA model)"),j9o=l(),Dv=a("li"),_se=a("strong"),D9o=o("flaubert"),q9o=o(" \u2014 "),pj=a("a"),G9o=o("FlaubertForTokenClassification"),O9o=o(" (FlauBERT model)"),X9o=l(),qv=a("li"),bse=a("strong"),V9o=o("fnet"),z9o=o(" \u2014 "),_j=a("a"),W9o=o("FNetForTokenClassification"),Q9o=o(" (FNet model)"),H9o=l(),Gv=a("li"),vse=a("strong"),U9o=o("funnel"),J9o=o(" \u2014 "),bj=a("a"),Y9o=o("FunnelForTokenClassification"),K9o=o(" (Funnel Transformer model)"),Z9o=l(),Ov=a("li"),Tse=a("strong"),eBo=o("gpt2"),oBo=o(" \u2014 "),vj=a("a"),rBo=o("GPT2ForTokenClassification"),tBo=o(" (OpenAI GPT-2 model)"),aBo=l(),Xv=a("li"),Fse=a("strong"),nBo=o("ibert"),sBo=o(" \u2014 "),Tj=a("a"),lBo=o("IBertForTokenClassification"),iBo=o(" (I-BERT model)"),dBo=l(),Vv=a("li"),Cse=a("strong"),cBo=o("layoutlm"),mBo=o(" \u2014 "),Fj=a("a"),fBo=o("LayoutLMForTokenClassification"),gBo=o(" (LayoutLM model)"),hBo=l(),zv=a("li"),Mse=a("strong"),uBo=o("layoutlmv2"),pBo=o(" \u2014 "),Cj=a("a"),_Bo=o("LayoutLMv2ForTokenClassification"),bBo=o(" (LayoutLMv2 model)"),vBo=l(),Wv=a("li"),Ese=a("strong"),TBo=o("longformer"),FBo=o(" \u2014 "),Mj=a("a"),CBo=o("LongformerForTokenClassification"),MBo=o(" (Longformer model)"),EBo=l(),Qv=a("li"),yse=a("strong"),yBo=o("megatron-bert"),wBo=o(" \u2014 "),Ej=a("a"),ABo=o("MegatronBertForTokenClassification"),LBo=o(" (MegatronBert model)"),BBo=l(),Hv=a("li"),wse=a("strong"),xBo=o("mobilebert"),kBo=o(" \u2014 "),yj=a("a"),RBo=o("MobileBertForTokenClassification"),SBo=o(" (MobileBERT model)"),PBo=l(),Uv=a("li"),Ase=a("strong"),$Bo=o("mpnet"),IBo=o(" \u2014 "),wj=a("a"),NBo=o("MPNetForTokenClassification"),jBo=o(" (MPNet model)"),DBo=l(),Jv=a("li"),Lse=a("strong"),qBo=o("nystromformer"),GBo=o(" \u2014 "),Aj=a("a"),OBo=o("NystromformerForTokenClassification"),XBo=o(" (Nystromformer model)"),VBo=l(),Yv=a("li"),Bse=a("strong"),zBo=o("qdqbert"),WBo=o(" \u2014 "),Lj=a("a"),QBo=o("QDQBertForTokenClassification"),HBo=o(" (QDQBert model)"),UBo=l(),Kv=a("li"),xse=a("strong"),JBo=o("rembert"),YBo=o(" \u2014 "),Bj=a("a"),KBo=o("RemBertForTokenClassification"),ZBo=o(" (RemBERT model)"),exo=l(),Zv=a("li"),kse=a("strong"),oxo=o("roberta"),rxo=o(" \u2014 "),xj=a("a"),txo=o("RobertaForTokenClassification"),axo=o(" (RoBERTa model)"),nxo=l(),eT=a("li"),Rse=a("strong"),sxo=o("roformer"),lxo=o(" \u2014 "),kj=a("a"),ixo=o("RoFormerForTokenClassification"),dxo=o(" (RoFormer model)"),cxo=l(),oT=a("li"),Sse=a("strong"),mxo=o("squeezebert"),fxo=o(" \u2014 "),Rj=a("a"),gxo=o("SqueezeBertForTokenClassification"),hxo=o(" (SqueezeBERT model)"),uxo=l(),rT=a("li"),Pse=a("strong"),pxo=o("xlm"),_xo=o(" \u2014 "),Sj=a("a"),bxo=o("XLMForTokenClassification"),vxo=o(" (XLM model)"),Txo=l(),tT=a("li"),$se=a("strong"),Fxo=o("xlm-roberta"),Cxo=o(" \u2014 "),Pj=a("a"),Mxo=o("XLMRobertaForTokenClassification"),Exo=o(" (XLM-RoBERTa model)"),yxo=l(),aT=a("li"),Ise=a("strong"),wxo=o("xlm-roberta-xl"),Axo=o(" \u2014 "),$j=a("a"),Lxo=o("XLMRobertaXLForTokenClassification"),Bxo=o(" (XLM-RoBERTa-XL model)"),xxo=l(),nT=a("li"),Nse=a("strong"),kxo=o("xlnet"),Rxo=o(" \u2014 "),Ij=a("a"),Sxo=o("XLNetForTokenClassification"),Pxo=o(" (XLNet model)"),$xo=l(),sT=a("li"),jse=a("strong"),Ixo=o("yoso"),Nxo=o(" \u2014 "),Nj=a("a"),jxo=o("YosoForTokenClassification"),Dxo=o(" (YOSO model)"),qxo=l(),lT=a("p"),Gxo=o("The model is set in evaluation mode by default using "),Dse=a("code"),Oxo=o("model.eval()"),Xxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=a("code"),Vxo=o("model.train()"),zxo=l(),Gse=a("p"),Wxo=o("Examples:"),Qxo=l(),m(zw.$$.fragment),Mke=l(),Md=a("h2"),iT=a("a"),Ose=a("span"),m(Ww.$$.fragment),Hxo=l(),Xse=a("span"),Uxo=o("AutoModelForQuestionAnswering"),Eke=l(),nr=a("div"),m(Qw.$$.fragment),Jxo=l(),Ed=a("p"),Yxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vse=a("code"),Kxo=o("from_pretrained()"),Zxo=o("class method or the "),zse=a("code"),eko=o("from_config()"),oko=o(`class
method.`),rko=l(),Hw=a("p"),tko=o("This class cannot be instantiated directly using "),Wse=a("code"),ako=o("__init__()"),nko=o(" (throws an error)."),sko=l(),Zr=a("div"),m(Uw.$$.fragment),lko=l(),Qse=a("p"),iko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dko=l(),yd=a("p"),cko=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),mko=o("not"),fko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=a("code"),gko=o("from_pretrained()"),hko=o("to load the model weights."),uko=l(),Jse=a("p"),pko=o("Examples:"),_ko=l(),m(Jw.$$.fragment),bko=l(),We=a("div"),m(Yw.$$.fragment),vko=l(),Yse=a("p"),Tko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Fko=l(),Za=a("p"),Cko=o("The model class to instantiate is selected based on the "),Kse=a("code"),Mko=o("model_type"),Eko=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),yko=o("pretrained_model_name_or_path"),wko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),Ako=o("pretrained_model_name_or_path"),Lko=o(":"),Bko=l(),R=a("ul"),dT=a("li"),ole=a("strong"),xko=o("albert"),kko=o(" \u2014 "),jj=a("a"),Rko=o("AlbertForQuestionAnswering"),Sko=o(" (ALBERT model)"),Pko=l(),cT=a("li"),rle=a("strong"),$ko=o("bart"),Iko=o(" \u2014 "),Dj=a("a"),Nko=o("BartForQuestionAnswering"),jko=o(" (BART model)"),Dko=l(),mT=a("li"),tle=a("strong"),qko=o("bert"),Gko=o(" \u2014 "),qj=a("a"),Oko=o("BertForQuestionAnswering"),Xko=o(" (BERT model)"),Vko=l(),fT=a("li"),ale=a("strong"),zko=o("big_bird"),Wko=o(" \u2014 "),Gj=a("a"),Qko=o("BigBirdForQuestionAnswering"),Hko=o(" (BigBird model)"),Uko=l(),gT=a("li"),nle=a("strong"),Jko=o("bigbird_pegasus"),Yko=o(" \u2014 "),Oj=a("a"),Kko=o("BigBirdPegasusForQuestionAnswering"),Zko=o(" (BigBirdPegasus model)"),eRo=l(),hT=a("li"),sle=a("strong"),oRo=o("camembert"),rRo=o(" \u2014 "),Xj=a("a"),tRo=o("CamembertForQuestionAnswering"),aRo=o(" (CamemBERT model)"),nRo=l(),uT=a("li"),lle=a("strong"),sRo=o("canine"),lRo=o(" \u2014 "),Vj=a("a"),iRo=o("CanineForQuestionAnswering"),dRo=o(" (Canine model)"),cRo=l(),pT=a("li"),ile=a("strong"),mRo=o("convbert"),fRo=o(" \u2014 "),zj=a("a"),gRo=o("ConvBertForQuestionAnswering"),hRo=o(" (ConvBERT model)"),uRo=l(),_T=a("li"),dle=a("strong"),pRo=o("data2vec-text"),_Ro=o(" \u2014 "),Wj=a("a"),bRo=o("Data2VecTextForQuestionAnswering"),vRo=o(" (Data2VecText model)"),TRo=l(),bT=a("li"),cle=a("strong"),FRo=o("deberta"),CRo=o(" \u2014 "),Qj=a("a"),MRo=o("DebertaForQuestionAnswering"),ERo=o(" (DeBERTa model)"),yRo=l(),vT=a("li"),mle=a("strong"),wRo=o("deberta-v2"),ARo=o(" \u2014 "),Hj=a("a"),LRo=o("DebertaV2ForQuestionAnswering"),BRo=o(" (DeBERTa-v2 model)"),xRo=l(),TT=a("li"),fle=a("strong"),kRo=o("distilbert"),RRo=o(" \u2014 "),Uj=a("a"),SRo=o("DistilBertForQuestionAnswering"),PRo=o(" (DistilBERT model)"),$Ro=l(),FT=a("li"),gle=a("strong"),IRo=o("electra"),NRo=o(" \u2014 "),Jj=a("a"),jRo=o("ElectraForQuestionAnswering"),DRo=o(" (ELECTRA model)"),qRo=l(),CT=a("li"),hle=a("strong"),GRo=o("flaubert"),ORo=o(" \u2014 "),Yj=a("a"),XRo=o("FlaubertForQuestionAnsweringSimple"),VRo=o(" (FlauBERT model)"),zRo=l(),MT=a("li"),ule=a("strong"),WRo=o("fnet"),QRo=o(" \u2014 "),Kj=a("a"),HRo=o("FNetForQuestionAnswering"),URo=o(" (FNet model)"),JRo=l(),ET=a("li"),ple=a("strong"),YRo=o("funnel"),KRo=o(" \u2014 "),Zj=a("a"),ZRo=o("FunnelForQuestionAnswering"),eSo=o(" (Funnel Transformer model)"),oSo=l(),yT=a("li"),_le=a("strong"),rSo=o("gptj"),tSo=o(" \u2014 "),eD=a("a"),aSo=o("GPTJForQuestionAnswering"),nSo=o(" (GPT-J model)"),sSo=l(),wT=a("li"),ble=a("strong"),lSo=o("ibert"),iSo=o(" \u2014 "),oD=a("a"),dSo=o("IBertForQuestionAnswering"),cSo=o(" (I-BERT model)"),mSo=l(),AT=a("li"),vle=a("strong"),fSo=o("layoutlmv2"),gSo=o(" \u2014 "),rD=a("a"),hSo=o("LayoutLMv2ForQuestionAnswering"),uSo=o(" (LayoutLMv2 model)"),pSo=l(),LT=a("li"),Tle=a("strong"),_So=o("led"),bSo=o(" \u2014 "),tD=a("a"),vSo=o("LEDForQuestionAnswering"),TSo=o(" (LED model)"),FSo=l(),BT=a("li"),Fle=a("strong"),CSo=o("longformer"),MSo=o(" \u2014 "),aD=a("a"),ESo=o("LongformerForQuestionAnswering"),ySo=o(" (Longformer model)"),wSo=l(),xT=a("li"),Cle=a("strong"),ASo=o("lxmert"),LSo=o(" \u2014 "),nD=a("a"),BSo=o("LxmertForQuestionAnswering"),xSo=o(" (LXMERT model)"),kSo=l(),kT=a("li"),Mle=a("strong"),RSo=o("mbart"),SSo=o(" \u2014 "),sD=a("a"),PSo=o("MBartForQuestionAnswering"),$So=o(" (mBART model)"),ISo=l(),RT=a("li"),Ele=a("strong"),NSo=o("megatron-bert"),jSo=o(" \u2014 "),lD=a("a"),DSo=o("MegatronBertForQuestionAnswering"),qSo=o(" (MegatronBert model)"),GSo=l(),ST=a("li"),yle=a("strong"),OSo=o("mobilebert"),XSo=o(" \u2014 "),iD=a("a"),VSo=o("MobileBertForQuestionAnswering"),zSo=o(" (MobileBERT model)"),WSo=l(),PT=a("li"),wle=a("strong"),QSo=o("mpnet"),HSo=o(" \u2014 "),dD=a("a"),USo=o("MPNetForQuestionAnswering"),JSo=o(" (MPNet model)"),YSo=l(),$T=a("li"),Ale=a("strong"),KSo=o("nystromformer"),ZSo=o(" \u2014 "),cD=a("a"),ePo=o("NystromformerForQuestionAnswering"),oPo=o(" (Nystromformer model)"),rPo=l(),IT=a("li"),Lle=a("strong"),tPo=o("qdqbert"),aPo=o(" \u2014 "),mD=a("a"),nPo=o("QDQBertForQuestionAnswering"),sPo=o(" (QDQBert model)"),lPo=l(),NT=a("li"),Ble=a("strong"),iPo=o("reformer"),dPo=o(" \u2014 "),fD=a("a"),cPo=o("ReformerForQuestionAnswering"),mPo=o(" (Reformer model)"),fPo=l(),jT=a("li"),xle=a("strong"),gPo=o("rembert"),hPo=o(" \u2014 "),gD=a("a"),uPo=o("RemBertForQuestionAnswering"),pPo=o(" (RemBERT model)"),_Po=l(),DT=a("li"),kle=a("strong"),bPo=o("roberta"),vPo=o(" \u2014 "),hD=a("a"),TPo=o("RobertaForQuestionAnswering"),FPo=o(" (RoBERTa model)"),CPo=l(),qT=a("li"),Rle=a("strong"),MPo=o("roformer"),EPo=o(" \u2014 "),uD=a("a"),yPo=o("RoFormerForQuestionAnswering"),wPo=o(" (RoFormer model)"),APo=l(),GT=a("li"),Sle=a("strong"),LPo=o("splinter"),BPo=o(" \u2014 "),pD=a("a"),xPo=o("SplinterForQuestionAnswering"),kPo=o(" (Splinter model)"),RPo=l(),OT=a("li"),Ple=a("strong"),SPo=o("squeezebert"),PPo=o(" \u2014 "),_D=a("a"),$Po=o("SqueezeBertForQuestionAnswering"),IPo=o(" (SqueezeBERT model)"),NPo=l(),XT=a("li"),$le=a("strong"),jPo=o("xlm"),DPo=o(" \u2014 "),bD=a("a"),qPo=o("XLMForQuestionAnsweringSimple"),GPo=o(" (XLM model)"),OPo=l(),VT=a("li"),Ile=a("strong"),XPo=o("xlm-roberta"),VPo=o(" \u2014 "),vD=a("a"),zPo=o("XLMRobertaForQuestionAnswering"),WPo=o(" (XLM-RoBERTa model)"),QPo=l(),zT=a("li"),Nle=a("strong"),HPo=o("xlm-roberta-xl"),UPo=o(" \u2014 "),TD=a("a"),JPo=o("XLMRobertaXLForQuestionAnswering"),YPo=o(" (XLM-RoBERTa-XL model)"),KPo=l(),WT=a("li"),jle=a("strong"),ZPo=o("xlnet"),e$o=o(" \u2014 "),FD=a("a"),o$o=o("XLNetForQuestionAnsweringSimple"),r$o=o(" (XLNet model)"),t$o=l(),QT=a("li"),Dle=a("strong"),a$o=o("yoso"),n$o=o(" \u2014 "),CD=a("a"),s$o=o("YosoForQuestionAnswering"),l$o=o(" (YOSO model)"),i$o=l(),HT=a("p"),d$o=o("The model is set in evaluation mode by default using "),qle=a("code"),c$o=o("model.eval()"),m$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=a("code"),f$o=o("model.train()"),g$o=l(),Ole=a("p"),h$o=o("Examples:"),u$o=l(),m(Kw.$$.fragment),yke=l(),wd=a("h2"),UT=a("a"),Xle=a("span"),m(Zw.$$.fragment),p$o=l(),Vle=a("span"),_$o=o("AutoModelForTableQuestionAnswering"),wke=l(),sr=a("div"),m(e6.$$.fragment),b$o=l(),Ad=a("p"),v$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zle=a("code"),T$o=o("from_pretrained()"),F$o=o("class method or the "),Wle=a("code"),C$o=o("from_config()"),M$o=o(`class
method.`),E$o=l(),o6=a("p"),y$o=o("This class cannot be instantiated directly using "),Qle=a("code"),w$o=o("__init__()"),A$o=o(" (throws an error)."),L$o=l(),et=a("div"),m(r6.$$.fragment),B$o=l(),Hle=a("p"),x$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),k$o=l(),Ld=a("p"),R$o=o(`Note:
Loading a model from its configuration file does `),Ule=a("strong"),S$o=o("not"),P$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jle=a("code"),$$o=o("from_pretrained()"),I$o=o("to load the model weights."),N$o=l(),Yle=a("p"),j$o=o("Examples:"),D$o=l(),m(t6.$$.fragment),q$o=l(),Qe=a("div"),m(a6.$$.fragment),G$o=l(),Kle=a("p"),O$o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),X$o=l(),en=a("p"),V$o=o("The model class to instantiate is selected based on the "),Zle=a("code"),z$o=o("model_type"),W$o=o(` property of the config object (either
passed as an argument or loaded from `),eie=a("code"),Q$o=o("pretrained_model_name_or_path"),H$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oie=a("code"),U$o=o("pretrained_model_name_or_path"),J$o=o(":"),Y$o=l(),rie=a("ul"),JT=a("li"),tie=a("strong"),K$o=o("tapas"),Z$o=o(" \u2014 "),MD=a("a"),eIo=o("TapasForQuestionAnswering"),oIo=o(" (TAPAS model)"),rIo=l(),YT=a("p"),tIo=o("The model is set in evaluation mode by default using "),aie=a("code"),aIo=o("model.eval()"),nIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=a("code"),sIo=o("model.train()"),lIo=l(),sie=a("p"),iIo=o("Examples:"),dIo=l(),m(n6.$$.fragment),Ake=l(),Bd=a("h2"),KT=a("a"),lie=a("span"),m(s6.$$.fragment),cIo=l(),iie=a("span"),mIo=o("AutoModelForImageClassification"),Lke=l(),lr=a("div"),m(l6.$$.fragment),fIo=l(),xd=a("p"),gIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),die=a("code"),hIo=o("from_pretrained()"),uIo=o("class method or the "),cie=a("code"),pIo=o("from_config()"),_Io=o(`class
method.`),bIo=l(),i6=a("p"),vIo=o("This class cannot be instantiated directly using "),mie=a("code"),TIo=o("__init__()"),FIo=o(" (throws an error)."),CIo=l(),ot=a("div"),m(d6.$$.fragment),MIo=l(),fie=a("p"),EIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yIo=l(),kd=a("p"),wIo=o(`Note:
Loading a model from its configuration file does `),gie=a("strong"),AIo=o("not"),LIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hie=a("code"),BIo=o("from_pretrained()"),xIo=o("to load the model weights."),kIo=l(),uie=a("p"),RIo=o("Examples:"),SIo=l(),m(c6.$$.fragment),PIo=l(),He=a("div"),m(m6.$$.fragment),$Io=l(),pie=a("p"),IIo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NIo=l(),on=a("p"),jIo=o("The model class to instantiate is selected based on the "),_ie=a("code"),DIo=o("model_type"),qIo=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),GIo=o("pretrained_model_name_or_path"),OIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=a("code"),XIo=o("pretrained_model_name_or_path"),VIo=o(":"),zIo=l(),fe=a("ul"),ZT=a("li"),Tie=a("strong"),WIo=o("beit"),QIo=o(" \u2014 "),ED=a("a"),HIo=o("BeitForImageClassification"),UIo=o(" (BEiT model)"),JIo=l(),e1=a("li"),Fie=a("strong"),YIo=o("convnext"),KIo=o(" \u2014 "),yD=a("a"),ZIo=o("ConvNextForImageClassification"),eNo=o(" (ConvNext model)"),oNo=l(),qs=a("li"),Cie=a("strong"),rNo=o("deit"),tNo=o(" \u2014 "),wD=a("a"),aNo=o("DeiTForImageClassification"),nNo=o(" or "),AD=a("a"),sNo=o("DeiTForImageClassificationWithTeacher"),lNo=o(" (DeiT model)"),iNo=l(),o1=a("li"),Mie=a("strong"),dNo=o("imagegpt"),cNo=o(" \u2014 "),LD=a("a"),mNo=o("ImageGPTForImageClassification"),fNo=o(" (ImageGPT model)"),gNo=l(),fa=a("li"),Eie=a("strong"),hNo=o("perceiver"),uNo=o(" \u2014 "),BD=a("a"),pNo=o("PerceiverForImageClassificationLearned"),_No=o(" or "),xD=a("a"),bNo=o("PerceiverForImageClassificationFourier"),vNo=o(" or "),kD=a("a"),TNo=o("PerceiverForImageClassificationConvProcessing"),FNo=o(" (Perceiver model)"),CNo=l(),r1=a("li"),yie=a("strong"),MNo=o("poolformer"),ENo=o(" \u2014 "),RD=a("a"),yNo=o("PoolFormerForImageClassification"),wNo=o(" (PoolFormer model)"),ANo=l(),t1=a("li"),wie=a("strong"),LNo=o("resnet"),BNo=o(" \u2014 "),SD=a("a"),xNo=o("ResNetForImageClassification"),kNo=o(" (ResNet model)"),RNo=l(),a1=a("li"),Aie=a("strong"),SNo=o("segformer"),PNo=o(" \u2014 "),PD=a("a"),$No=o("SegformerForImageClassification"),INo=o(" (SegFormer model)"),NNo=l(),n1=a("li"),Lie=a("strong"),jNo=o("swin"),DNo=o(" \u2014 "),$D=a("a"),qNo=o("SwinForImageClassification"),GNo=o(" (Swin model)"),ONo=l(),s1=a("li"),Bie=a("strong"),XNo=o("van"),VNo=o(" \u2014 "),ID=a("a"),zNo=o("VanForImageClassification"),WNo=o(" (VAN model)"),QNo=l(),l1=a("li"),xie=a("strong"),HNo=o("vit"),UNo=o(" \u2014 "),ND=a("a"),JNo=o("ViTForImageClassification"),YNo=o(" (ViT model)"),KNo=l(),i1=a("p"),ZNo=o("The model is set in evaluation mode by default using "),kie=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=a("code"),rjo=o("model.train()"),tjo=l(),Sie=a("p"),ajo=o("Examples:"),njo=l(),m(f6.$$.fragment),Bke=l(),Rd=a("h2"),d1=a("a"),Pie=a("span"),m(g6.$$.fragment),sjo=l(),$ie=a("span"),ljo=o("AutoModelForVision2Seq"),xke=l(),ir=a("div"),m(h6.$$.fragment),ijo=l(),Sd=a("p"),djo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Iie=a("code"),cjo=o("from_pretrained()"),mjo=o("class method or the "),Nie=a("code"),fjo=o("from_config()"),gjo=o(`class
method.`),hjo=l(),u6=a("p"),ujo=o("This class cannot be instantiated directly using "),jie=a("code"),pjo=o("__init__()"),_jo=o(" (throws an error)."),bjo=l(),rt=a("div"),m(p6.$$.fragment),vjo=l(),Die=a("p"),Tjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fjo=l(),Pd=a("p"),Cjo=o(`Note:
Loading a model from its configuration file does `),qie=a("strong"),Mjo=o("not"),Ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gie=a("code"),yjo=o("from_pretrained()"),wjo=o("to load the model weights."),Ajo=l(),Oie=a("p"),Ljo=o("Examples:"),Bjo=l(),m(_6.$$.fragment),xjo=l(),Ue=a("div"),m(b6.$$.fragment),kjo=l(),Xie=a("p"),Rjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Sjo=l(),rn=a("p"),Pjo=o("The model class to instantiate is selected based on the "),Vie=a("code"),$jo=o("model_type"),Ijo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),Njo=o("pretrained_model_name_or_path"),jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),Djo=o("pretrained_model_name_or_path"),qjo=o(":"),Gjo=l(),Qie=a("ul"),c1=a("li"),Hie=a("strong"),Ojo=o("vision-encoder-decoder"),Xjo=o(" \u2014 "),jD=a("a"),Vjo=o("VisionEncoderDecoderModel"),zjo=o(" (Vision Encoder decoder model)"),Wjo=l(),m1=a("p"),Qjo=o("The model is set in evaluation mode by default using "),Uie=a("code"),Hjo=o("model.eval()"),Ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),Jjo=o("model.train()"),Yjo=l(),Yie=a("p"),Kjo=o("Examples:"),Zjo=l(),m(v6.$$.fragment),kke=l(),$d=a("h2"),f1=a("a"),Kie=a("span"),m(T6.$$.fragment),eDo=l(),Zie=a("span"),oDo=o("AutoModelForAudioClassification"),Rke=l(),dr=a("div"),m(F6.$$.fragment),rDo=l(),Id=a("p"),tDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ede=a("code"),aDo=o("from_pretrained()"),nDo=o("class method or the "),ode=a("code"),sDo=o("from_config()"),lDo=o(`class
method.`),iDo=l(),C6=a("p"),dDo=o("This class cannot be instantiated directly using "),rde=a("code"),cDo=o("__init__()"),mDo=o(" (throws an error)."),fDo=l(),tt=a("div"),m(M6.$$.fragment),gDo=l(),tde=a("p"),hDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uDo=l(),Nd=a("p"),pDo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),_Do=o("not"),bDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=a("code"),vDo=o("from_pretrained()"),TDo=o("to load the model weights."),FDo=l(),sde=a("p"),CDo=o("Examples:"),MDo=l(),m(E6.$$.fragment),EDo=l(),Je=a("div"),m(y6.$$.fragment),yDo=l(),lde=a("p"),wDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ADo=l(),tn=a("p"),LDo=o("The model class to instantiate is selected based on the "),ide=a("code"),BDo=o("model_type"),xDo=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),kDo=o("pretrained_model_name_or_path"),RDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),SDo=o("pretrained_model_name_or_path"),PDo=o(":"),$Do=l(),ke=a("ul"),g1=a("li"),mde=a("strong"),IDo=o("data2vec-audio"),NDo=o(" \u2014 "),DD=a("a"),jDo=o("Data2VecAudioForSequenceClassification"),DDo=o(" (Data2VecAudio model)"),qDo=l(),h1=a("li"),fde=a("strong"),GDo=o("hubert"),ODo=o(" \u2014 "),qD=a("a"),XDo=o("HubertForSequenceClassification"),VDo=o(" (Hubert model)"),zDo=l(),u1=a("li"),gde=a("strong"),WDo=o("sew"),QDo=o(" \u2014 "),GD=a("a"),HDo=o("SEWForSequenceClassification"),UDo=o(" (SEW model)"),JDo=l(),p1=a("li"),hde=a("strong"),YDo=o("sew-d"),KDo=o(" \u2014 "),OD=a("a"),ZDo=o("SEWDForSequenceClassification"),eqo=o(" (SEW-D model)"),oqo=l(),_1=a("li"),ude=a("strong"),rqo=o("unispeech"),tqo=o(" \u2014 "),XD=a("a"),aqo=o("UniSpeechForSequenceClassification"),nqo=o(" (UniSpeech model)"),sqo=l(),b1=a("li"),pde=a("strong"),lqo=o("unispeech-sat"),iqo=o(" \u2014 "),VD=a("a"),dqo=o("UniSpeechSatForSequenceClassification"),cqo=o(" (UniSpeechSat model)"),mqo=l(),v1=a("li"),_de=a("strong"),fqo=o("wav2vec2"),gqo=o(" \u2014 "),zD=a("a"),hqo=o("Wav2Vec2ForSequenceClassification"),uqo=o(" (Wav2Vec2 model)"),pqo=l(),T1=a("li"),bde=a("strong"),_qo=o("wavlm"),bqo=o(" \u2014 "),WD=a("a"),vqo=o("WavLMForSequenceClassification"),Tqo=o(" (WavLM model)"),Fqo=l(),F1=a("p"),Cqo=o("The model is set in evaluation mode by default using "),vde=a("code"),Mqo=o("model.eval()"),Eqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=a("code"),yqo=o("model.train()"),wqo=l(),Fde=a("p"),Aqo=o("Examples:"),Lqo=l(),m(w6.$$.fragment),Ske=l(),jd=a("h2"),C1=a("a"),Cde=a("span"),m(A6.$$.fragment),Bqo=l(),Mde=a("span"),xqo=o("AutoModelForAudioFrameClassification"),Pke=l(),cr=a("div"),m(L6.$$.fragment),kqo=l(),Dd=a("p"),Rqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ede=a("code"),Sqo=o("from_pretrained()"),Pqo=o("class method or the "),yde=a("code"),$qo=o("from_config()"),Iqo=o(`class
method.`),Nqo=l(),B6=a("p"),jqo=o("This class cannot be instantiated directly using "),wde=a("code"),Dqo=o("__init__()"),qqo=o(" (throws an error)."),Gqo=l(),at=a("div"),m(x6.$$.fragment),Oqo=l(),Ade=a("p"),Xqo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Vqo=l(),qd=a("p"),zqo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),Wqo=o("not"),Qqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bde=a("code"),Hqo=o("from_pretrained()"),Uqo=o("to load the model weights."),Jqo=l(),xde=a("p"),Yqo=o("Examples:"),Kqo=l(),m(k6.$$.fragment),Zqo=l(),Ye=a("div"),m(R6.$$.fragment),eGo=l(),kde=a("p"),oGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rGo=l(),an=a("p"),tGo=o("The model class to instantiate is selected based on the "),Rde=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),nn=a("ul"),M1=a("li"),$de=a("strong"),mGo=o("data2vec-audio"),fGo=o(" \u2014 "),QD=a("a"),gGo=o("Data2VecAudioForAudioFrameClassification"),hGo=o(" (Data2VecAudio model)"),uGo=l(),E1=a("li"),Ide=a("strong"),pGo=o("unispeech-sat"),_Go=o(" \u2014 "),HD=a("a"),bGo=o("UniSpeechSatForAudioFrameClassification"),vGo=o(" (UniSpeechSat model)"),TGo=l(),y1=a("li"),Nde=a("strong"),FGo=o("wav2vec2"),CGo=o(" \u2014 "),UD=a("a"),MGo=o("Wav2Vec2ForAudioFrameClassification"),EGo=o(" (Wav2Vec2 model)"),yGo=l(),w1=a("li"),jde=a("strong"),wGo=o("wavlm"),AGo=o(" \u2014 "),JD=a("a"),LGo=o("WavLMForAudioFrameClassification"),BGo=o(" (WavLM model)"),xGo=l(),A1=a("p"),kGo=o("The model is set in evaluation mode by default using "),Dde=a("code"),RGo=o("model.eval()"),SGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=a("code"),PGo=o("model.train()"),$Go=l(),Gde=a("p"),IGo=o("Examples:"),NGo=l(),m(S6.$$.fragment),$ke=l(),Gd=a("h2"),L1=a("a"),Ode=a("span"),m(P6.$$.fragment),jGo=l(),Xde=a("span"),DGo=o("AutoModelForCTC"),Ike=l(),mr=a("div"),m($6.$$.fragment),qGo=l(),Od=a("p"),GGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Vde=a("code"),OGo=o("from_pretrained()"),XGo=o("class method or the "),zde=a("code"),VGo=o("from_config()"),zGo=o(`class
method.`),WGo=l(),I6=a("p"),QGo=o("This class cannot be instantiated directly using "),Wde=a("code"),HGo=o("__init__()"),UGo=o(" (throws an error)."),JGo=l(),nt=a("div"),m(N6.$$.fragment),YGo=l(),Qde=a("p"),KGo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZGo=l(),Xd=a("p"),eOo=o(`Note:
Loading a model from its configuration file does `),Hde=a("strong"),oOo=o("not"),rOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ude=a("code"),tOo=o("from_pretrained()"),aOo=o("to load the model weights."),nOo=l(),Jde=a("p"),sOo=o("Examples:"),lOo=l(),m(j6.$$.fragment),iOo=l(),Ke=a("div"),m(D6.$$.fragment),dOo=l(),Yde=a("p"),cOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mOo=l(),sn=a("p"),fOo=o("The model class to instantiate is selected based on the "),Kde=a("code"),gOo=o("model_type"),hOo=o(` property of the config object (either
passed as an argument or loaded from `),Zde=a("code"),uOo=o("pretrained_model_name_or_path"),pOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=a("code"),_Oo=o("pretrained_model_name_or_path"),bOo=o(":"),vOo=l(),Re=a("ul"),B1=a("li"),oce=a("strong"),TOo=o("data2vec-audio"),FOo=o(" \u2014 "),YD=a("a"),COo=o("Data2VecAudioForCTC"),MOo=o(" (Data2VecAudio model)"),EOo=l(),x1=a("li"),rce=a("strong"),yOo=o("hubert"),wOo=o(" \u2014 "),KD=a("a"),AOo=o("HubertForCTC"),LOo=o(" (Hubert model)"),BOo=l(),k1=a("li"),tce=a("strong"),xOo=o("sew"),kOo=o(" \u2014 "),ZD=a("a"),ROo=o("SEWForCTC"),SOo=o(" (SEW model)"),POo=l(),R1=a("li"),ace=a("strong"),$Oo=o("sew-d"),IOo=o(" \u2014 "),eq=a("a"),NOo=o("SEWDForCTC"),jOo=o(" (SEW-D model)"),DOo=l(),S1=a("li"),nce=a("strong"),qOo=o("unispeech"),GOo=o(" \u2014 "),oq=a("a"),OOo=o("UniSpeechForCTC"),XOo=o(" (UniSpeech model)"),VOo=l(),P1=a("li"),sce=a("strong"),zOo=o("unispeech-sat"),WOo=o(" \u2014 "),rq=a("a"),QOo=o("UniSpeechSatForCTC"),HOo=o(" (UniSpeechSat model)"),UOo=l(),$1=a("li"),lce=a("strong"),JOo=o("wav2vec2"),YOo=o(" \u2014 "),tq=a("a"),KOo=o("Wav2Vec2ForCTC"),ZOo=o(" (Wav2Vec2 model)"),eXo=l(),I1=a("li"),ice=a("strong"),oXo=o("wavlm"),rXo=o(" \u2014 "),aq=a("a"),tXo=o("WavLMForCTC"),aXo=o(" (WavLM model)"),nXo=l(),N1=a("p"),sXo=o("The model is set in evaluation mode by default using "),dce=a("code"),lXo=o("model.eval()"),iXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=a("code"),dXo=o("model.train()"),cXo=l(),mce=a("p"),mXo=o("Examples:"),fXo=l(),m(q6.$$.fragment),Nke=l(),Vd=a("h2"),j1=a("a"),fce=a("span"),m(G6.$$.fragment),gXo=l(),gce=a("span"),hXo=o("AutoModelForSpeechSeq2Seq"),jke=l(),fr=a("div"),m(O6.$$.fragment),uXo=l(),zd=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hce=a("code"),_Xo=o("from_pretrained()"),bXo=o("class method or the "),uce=a("code"),vXo=o("from_config()"),TXo=o(`class
method.`),FXo=l(),X6=a("p"),CXo=o("This class cannot be instantiated directly using "),pce=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),yXo=l(),st=a("div"),m(V6.$$.fragment),wXo=l(),_ce=a("p"),AXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LXo=l(),Wd=a("p"),BXo=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),xXo=o("not"),kXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=a("code"),RXo=o("from_pretrained()"),SXo=o("to load the model weights."),PXo=l(),Tce=a("p"),$Xo=o("Examples:"),IXo=l(),m(z6.$$.fragment),NXo=l(),Ze=a("div"),m(W6.$$.fragment),jXo=l(),Fce=a("p"),DXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qXo=l(),ln=a("p"),GXo=o("The model class to instantiate is selected based on the "),Cce=a("code"),OXo=o("model_type"),XXo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),VXo=o("pretrained_model_name_or_path"),zXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=a("code"),WXo=o("pretrained_model_name_or_path"),QXo=o(":"),HXo=l(),Q6=a("ul"),D1=a("li"),yce=a("strong"),UXo=o("speech-encoder-decoder"),JXo=o(" \u2014 "),nq=a("a"),YXo=o("SpeechEncoderDecoderModel"),KXo=o(" (Speech Encoder decoder model)"),ZXo=l(),q1=a("li"),wce=a("strong"),eVo=o("speech_to_text"),oVo=o(" \u2014 "),sq=a("a"),rVo=o("Speech2TextForConditionalGeneration"),tVo=o(" (Speech2Text model)"),aVo=l(),G1=a("p"),nVo=o("The model is set in evaluation mode by default using "),Ace=a("code"),sVo=o("model.eval()"),lVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),iVo=o("model.train()"),dVo=l(),Bce=a("p"),cVo=o("Examples:"),mVo=l(),m(H6.$$.fragment),Dke=l(),Qd=a("h2"),O1=a("a"),xce=a("span"),m(U6.$$.fragment),fVo=l(),kce=a("span"),gVo=o("AutoModelForAudioXVector"),qke=l(),gr=a("div"),m(J6.$$.fragment),hVo=l(),Hd=a("p"),uVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Rce=a("code"),pVo=o("from_pretrained()"),_Vo=o("class method or the "),Sce=a("code"),bVo=o("from_config()"),vVo=o(`class
method.`),TVo=l(),Y6=a("p"),FVo=o("This class cannot be instantiated directly using "),Pce=a("code"),CVo=o("__init__()"),MVo=o(" (throws an error)."),EVo=l(),lt=a("div"),m(K6.$$.fragment),yVo=l(),$ce=a("p"),wVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),AVo=l(),Ud=a("p"),LVo=o(`Note:
Loading a model from its configuration file does `),Ice=a("strong"),BVo=o("not"),xVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=a("code"),kVo=o("from_pretrained()"),RVo=o("to load the model weights."),SVo=l(),jce=a("p"),PVo=o("Examples:"),$Vo=l(),m(Z6.$$.fragment),IVo=l(),eo=a("div"),m(eA.$$.fragment),NVo=l(),Dce=a("p"),jVo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),DVo=l(),dn=a("p"),qVo=o("The model class to instantiate is selected based on the "),qce=a("code"),GVo=o("model_type"),OVo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),XVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),zVo=o("pretrained_model_name_or_path"),WVo=o(":"),QVo=l(),cn=a("ul"),X1=a("li"),Xce=a("strong"),HVo=o("data2vec-audio"),UVo=o(" \u2014 "),lq=a("a"),JVo=o("Data2VecAudioForXVector"),YVo=o(" (Data2VecAudio model)"),KVo=l(),V1=a("li"),Vce=a("strong"),ZVo=o("unispeech-sat"),ezo=o(" \u2014 "),iq=a("a"),ozo=o("UniSpeechSatForXVector"),rzo=o(" (UniSpeechSat model)"),tzo=l(),z1=a("li"),zce=a("strong"),azo=o("wav2vec2"),nzo=o(" \u2014 "),dq=a("a"),szo=o("Wav2Vec2ForXVector"),lzo=o(" (Wav2Vec2 model)"),izo=l(),W1=a("li"),Wce=a("strong"),dzo=o("wavlm"),czo=o(" \u2014 "),cq=a("a"),mzo=o("WavLMForXVector"),fzo=o(" (WavLM model)"),gzo=l(),Q1=a("p"),hzo=o("The model is set in evaluation mode by default using "),Qce=a("code"),uzo=o("model.eval()"),pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=a("code"),_zo=o("model.train()"),bzo=l(),Uce=a("p"),vzo=o("Examples:"),Tzo=l(),m(oA.$$.fragment),Gke=l(),Jd=a("h2"),H1=a("a"),Jce=a("span"),m(rA.$$.fragment),Fzo=l(),Yce=a("span"),Czo=o("AutoModelForMaskedImageModeling"),Oke=l(),hr=a("div"),m(tA.$$.fragment),Mzo=l(),Yd=a("p"),Ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Kce=a("code"),yzo=o("from_pretrained()"),wzo=o("class method or the "),Zce=a("code"),Azo=o("from_config()"),Lzo=o(`class
method.`),Bzo=l(),aA=a("p"),xzo=o("This class cannot be instantiated directly using "),eme=a("code"),kzo=o("__init__()"),Rzo=o(" (throws an error)."),Szo=l(),it=a("div"),m(nA.$$.fragment),Pzo=l(),ome=a("p"),$zo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Izo=l(),Kd=a("p"),Nzo=o(`Note:
Loading a model from its configuration file does `),rme=a("strong"),jzo=o("not"),Dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tme=a("code"),qzo=o("from_pretrained()"),Gzo=o("to load the model weights."),Ozo=l(),ame=a("p"),Xzo=o("Examples:"),Vzo=l(),m(sA.$$.fragment),zzo=l(),oo=a("div"),m(lA.$$.fragment),Wzo=l(),nme=a("p"),Qzo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Hzo=l(),mn=a("p"),Uzo=o("The model class to instantiate is selected based on the "),sme=a("code"),Jzo=o("model_type"),Yzo=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),Kzo=o("pretrained_model_name_or_path"),Zzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(":"),rWo=l(),Zd=a("ul"),U1=a("li"),dme=a("strong"),tWo=o("deit"),aWo=o(" \u2014 "),mq=a("a"),nWo=o("DeiTForMaskedImageModeling"),sWo=o(" (DeiT model)"),lWo=l(),J1=a("li"),cme=a("strong"),iWo=o("swin"),dWo=o(" \u2014 "),fq=a("a"),cWo=o("SwinForMaskedImageModeling"),mWo=o(" (Swin model)"),fWo=l(),Y1=a("li"),mme=a("strong"),gWo=o("vit"),hWo=o(" \u2014 "),gq=a("a"),uWo=o("ViTForMaskedImageModeling"),pWo=o(" (ViT model)"),_Wo=l(),K1=a("p"),bWo=o("The model is set in evaluation mode by default using "),fme=a("code"),vWo=o("model.eval()"),TWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),FWo=o("model.train()"),CWo=l(),hme=a("p"),MWo=o("Examples:"),EWo=l(),m(iA.$$.fragment),Xke=l(),ec=a("h2"),Z1=a("a"),ume=a("span"),m(dA.$$.fragment),yWo=l(),pme=a("span"),wWo=o("AutoModelForObjectDetection"),Vke=l(),ur=a("div"),m(cA.$$.fragment),AWo=l(),oc=a("p"),LWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_me=a("code"),BWo=o("from_pretrained()"),xWo=o("class method or the "),bme=a("code"),kWo=o("from_config()"),RWo=o(`class
method.`),SWo=l(),mA=a("p"),PWo=o("This class cannot be instantiated directly using "),vme=a("code"),$Wo=o("__init__()"),IWo=o(" (throws an error)."),NWo=l(),dt=a("div"),m(fA.$$.fragment),jWo=l(),Tme=a("p"),DWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),qWo=l(),rc=a("p"),GWo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),OWo=o("not"),XWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=a("code"),VWo=o("from_pretrained()"),zWo=o("to load the model weights."),WWo=l(),Mme=a("p"),QWo=o("Examples:"),HWo=l(),m(gA.$$.fragment),UWo=l(),ro=a("div"),m(hA.$$.fragment),JWo=l(),Eme=a("p"),YWo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),KWo=l(),fn=a("p"),ZWo=o("The model class to instantiate is selected based on the "),yme=a("code"),eQo=o("model_type"),oQo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),aQo=o("pretrained_model_name_or_path"),nQo=o(":"),sQo=l(),Lme=a("ul"),eF=a("li"),Bme=a("strong"),lQo=o("detr"),iQo=o(" \u2014 "),hq=a("a"),dQo=o("DetrForObjectDetection"),cQo=o(" (DETR model)"),mQo=l(),oF=a("p"),fQo=o("The model is set in evaluation mode by default using "),xme=a("code"),gQo=o("model.eval()"),hQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),uQo=o("model.train()"),pQo=l(),Rme=a("p"),_Qo=o("Examples:"),bQo=l(),m(uA.$$.fragment),zke=l(),tc=a("h2"),rF=a("a"),Sme=a("span"),m(pA.$$.fragment),vQo=l(),Pme=a("span"),TQo=o("AutoModelForImageSegmentation"),Wke=l(),pr=a("div"),m(_A.$$.fragment),FQo=l(),ac=a("p"),CQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),$me=a("code"),MQo=o("from_pretrained()"),EQo=o("class method or the "),Ime=a("code"),yQo=o("from_config()"),wQo=o(`class
method.`),AQo=l(),bA=a("p"),LQo=o("This class cannot be instantiated directly using "),Nme=a("code"),BQo=o("__init__()"),xQo=o(" (throws an error)."),kQo=l(),ct=a("div"),m(vA.$$.fragment),RQo=l(),jme=a("p"),SQo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),PQo=l(),nc=a("p"),$Qo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),IQo=o("not"),NQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=a("code"),jQo=o("from_pretrained()"),DQo=o("to load the model weights."),qQo=l(),Gme=a("p"),GQo=o("Examples:"),OQo=l(),m(TA.$$.fragment),XQo=l(),to=a("div"),m(FA.$$.fragment),VQo=l(),Ome=a("p"),zQo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WQo=l(),gn=a("p"),QQo=o("The model class to instantiate is selected based on the "),Xme=a("code"),HQo=o("model_type"),UQo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),JQo=o("pretrained_model_name_or_path"),YQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),KQo=o("pretrained_model_name_or_path"),ZQo=o(":"),eHo=l(),Wme=a("ul"),tF=a("li"),Qme=a("strong"),oHo=o("detr"),rHo=o(" \u2014 "),uq=a("a"),tHo=o("DetrForSegmentation"),aHo=o(" (DETR model)"),nHo=l(),aF=a("p"),sHo=o("The model is set in evaluation mode by default using "),Hme=a("code"),lHo=o("model.eval()"),iHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),dHo=o("model.train()"),cHo=l(),Jme=a("p"),mHo=o("Examples:"),fHo=l(),m(CA.$$.fragment),Qke=l(),sc=a("h2"),nF=a("a"),Yme=a("span"),m(MA.$$.fragment),gHo=l(),Kme=a("span"),hHo=o("AutoModelForSemanticSegmentation"),Hke=l(),_r=a("div"),m(EA.$$.fragment),uHo=l(),lc=a("p"),pHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Zme=a("code"),_Ho=o("from_pretrained()"),bHo=o("class method or the "),efe=a("code"),vHo=o("from_config()"),THo=o(`class
method.`),FHo=l(),yA=a("p"),CHo=o("This class cannot be instantiated directly using "),ofe=a("code"),MHo=o("__init__()"),EHo=o(" (throws an error)."),yHo=l(),mt=a("div"),m(wA.$$.fragment),wHo=l(),rfe=a("p"),AHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),LHo=l(),ic=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),tfe=a("strong"),xHo=o("not"),kHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=a("code"),RHo=o("from_pretrained()"),SHo=o("to load the model weights."),PHo=l(),nfe=a("p"),$Ho=o("Examples:"),IHo=l(),m(AA.$$.fragment),NHo=l(),ao=a("div"),m(LA.$$.fragment),jHo=l(),sfe=a("p"),DHo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qHo=l(),hn=a("p"),GHo=o("The model class to instantiate is selected based on the "),lfe=a("code"),OHo=o("model_type"),XHo=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),VHo=o("pretrained_model_name_or_path"),zHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),WHo=o("pretrained_model_name_or_path"),QHo=o(":"),HHo=l(),BA=a("ul"),sF=a("li"),cfe=a("strong"),UHo=o("beit"),JHo=o(" \u2014 "),pq=a("a"),YHo=o("BeitForSemanticSegmentation"),KHo=o(" (BEiT model)"),ZHo=l(),lF=a("li"),mfe=a("strong"),eUo=o("segformer"),oUo=o(" \u2014 "),_q=a("a"),rUo=o("SegformerForSemanticSegmentation"),tUo=o(" (SegFormer model)"),aUo=l(),iF=a("p"),nUo=o("The model is set in evaluation mode by default using "),ffe=a("code"),sUo=o("model.eval()"),lUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),iUo=o("model.train()"),dUo=l(),hfe=a("p"),cUo=o("Examples:"),mUo=l(),m(xA.$$.fragment),Uke=l(),dc=a("h2"),dF=a("a"),ufe=a("span"),m(kA.$$.fragment),fUo=l(),pfe=a("span"),gUo=o("AutoModelForInstanceSegmentation"),Jke=l(),br=a("div"),m(RA.$$.fragment),hUo=l(),cc=a("p"),uUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_fe=a("code"),pUo=o("from_pretrained()"),_Uo=o("class method or the "),bfe=a("code"),bUo=o("from_config()"),vUo=o(`class
method.`),TUo=l(),SA=a("p"),FUo=o("This class cannot be instantiated directly using "),vfe=a("code"),CUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),ft=a("div"),m(PA.$$.fragment),yUo=l(),Tfe=a("p"),wUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),AUo=l(),mc=a("p"),LUo=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),BUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=a("code"),kUo=o("from_pretrained()"),RUo=o("to load the model weights."),SUo=l(),Mfe=a("p"),PUo=o("Examples:"),$Uo=l(),m($A.$$.fragment),IUo=l(),no=a("div"),m(IA.$$.fragment),NUo=l(),Efe=a("p"),jUo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),DUo=l(),un=a("p"),qUo=o("The model class to instantiate is selected based on the "),yfe=a("code"),GUo=o("model_type"),OUo=o(` property of the config object (either
passed as an argument or loaded from `),wfe=a("code"),XUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=a("code"),zUo=o("pretrained_model_name_or_path"),WUo=o(":"),QUo=l(),Lfe=a("ul"),cF=a("li"),Bfe=a("strong"),HUo=o("maskformer"),UUo=o(" \u2014 "),bq=a("a"),JUo=o("MaskFormerForInstanceSegmentation"),YUo=o(" (MaskFormer model)"),KUo=l(),mF=a("p"),ZUo=o("The model is set in evaluation mode by default using "),xfe=a("code"),eJo=o("model.eval()"),oJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),rJo=o("model.train()"),tJo=l(),Rfe=a("p"),aJo=o("Examples:"),nJo=l(),m(NA.$$.fragment),Yke=l(),fc=a("h2"),fF=a("a"),Sfe=a("span"),m(jA.$$.fragment),sJo=l(),Pfe=a("span"),lJo=o("TFAutoModel"),Kke=l(),vr=a("div"),m(DA.$$.fragment),iJo=l(),gc=a("p"),dJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$fe=a("code"),cJo=o("from_pretrained()"),mJo=o("class method or the "),Ife=a("code"),fJo=o("from_config()"),gJo=o(`class
method.`),hJo=l(),qA=a("p"),uJo=o("This class cannot be instantiated directly using "),Nfe=a("code"),pJo=o("__init__()"),_Jo=o(" (throws an error)."),bJo=l(),gt=a("div"),m(GA.$$.fragment),vJo=l(),jfe=a("p"),TJo=o("Instantiates one of the base model classes of the library from a configuration."),FJo=l(),hc=a("p"),CJo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=a("code"),yJo=o("from_pretrained()"),wJo=o("to load the model weights."),AJo=l(),Gfe=a("p"),LJo=o("Examples:"),BJo=l(),m(OA.$$.fragment),xJo=l(),ho=a("div"),m(XA.$$.fragment),kJo=l(),Ofe=a("p"),RJo=o("Instantiate one of the base model classes of the library from a pretrained model."),SJo=l(),pn=a("p"),PJo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),$Jo=o("model_type"),IJo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),DJo=o("pretrained_model_name_or_path"),qJo=o(":"),GJo=l(),B=a("ul"),gF=a("li"),Wfe=a("strong"),OJo=o("albert"),XJo=o(" \u2014 "),vq=a("a"),VJo=o("TFAlbertModel"),zJo=o(" (ALBERT model)"),WJo=l(),hF=a("li"),Qfe=a("strong"),QJo=o("bart"),HJo=o(" \u2014 "),Tq=a("a"),UJo=o("TFBartModel"),JJo=o(" (BART model)"),YJo=l(),uF=a("li"),Hfe=a("strong"),KJo=o("bert"),ZJo=o(" \u2014 "),Fq=a("a"),eYo=o("TFBertModel"),oYo=o(" (BERT model)"),rYo=l(),pF=a("li"),Ufe=a("strong"),tYo=o("blenderbot"),aYo=o(" \u2014 "),Cq=a("a"),nYo=o("TFBlenderbotModel"),sYo=o(" (Blenderbot model)"),lYo=l(),_F=a("li"),Jfe=a("strong"),iYo=o("blenderbot-small"),dYo=o(" \u2014 "),Mq=a("a"),cYo=o("TFBlenderbotSmallModel"),mYo=o(" (BlenderbotSmall model)"),fYo=l(),bF=a("li"),Yfe=a("strong"),gYo=o("camembert"),hYo=o(" \u2014 "),Eq=a("a"),uYo=o("TFCamembertModel"),pYo=o(" (CamemBERT model)"),_Yo=l(),vF=a("li"),Kfe=a("strong"),bYo=o("clip"),vYo=o(" \u2014 "),yq=a("a"),TYo=o("TFCLIPModel"),FYo=o(" (CLIP model)"),CYo=l(),TF=a("li"),Zfe=a("strong"),MYo=o("convbert"),EYo=o(" \u2014 "),wq=a("a"),yYo=o("TFConvBertModel"),wYo=o(" (ConvBERT model)"),AYo=l(),FF=a("li"),ege=a("strong"),LYo=o("convnext"),BYo=o(" \u2014 "),Aq=a("a"),xYo=o("TFConvNextModel"),kYo=o(" (ConvNext model)"),RYo=l(),CF=a("li"),oge=a("strong"),SYo=o("ctrl"),PYo=o(" \u2014 "),Lq=a("a"),$Yo=o("TFCTRLModel"),IYo=o(" (CTRL model)"),NYo=l(),MF=a("li"),rge=a("strong"),jYo=o("deberta"),DYo=o(" \u2014 "),Bq=a("a"),qYo=o("TFDebertaModel"),GYo=o(" (DeBERTa model)"),OYo=l(),EF=a("li"),tge=a("strong"),XYo=o("deberta-v2"),VYo=o(" \u2014 "),xq=a("a"),zYo=o("TFDebertaV2Model"),WYo=o(" (DeBERTa-v2 model)"),QYo=l(),yF=a("li"),age=a("strong"),HYo=o("distilbert"),UYo=o(" \u2014 "),kq=a("a"),JYo=o("TFDistilBertModel"),YYo=o(" (DistilBERT model)"),KYo=l(),wF=a("li"),nge=a("strong"),ZYo=o("dpr"),eKo=o(" \u2014 "),Rq=a("a"),oKo=o("TFDPRQuestionEncoder"),rKo=o(" (DPR model)"),tKo=l(),AF=a("li"),sge=a("strong"),aKo=o("electra"),nKo=o(" \u2014 "),Sq=a("a"),sKo=o("TFElectraModel"),lKo=o(" (ELECTRA model)"),iKo=l(),LF=a("li"),lge=a("strong"),dKo=o("flaubert"),cKo=o(" \u2014 "),Pq=a("a"),mKo=o("TFFlaubertModel"),fKo=o(" (FlauBERT model)"),gKo=l(),Gs=a("li"),ige=a("strong"),hKo=o("funnel"),uKo=o(" \u2014 "),$q=a("a"),pKo=o("TFFunnelModel"),_Ko=o(" or "),Iq=a("a"),bKo=o("TFFunnelBaseModel"),vKo=o(" (Funnel Transformer model)"),TKo=l(),BF=a("li"),dge=a("strong"),FKo=o("gpt2"),CKo=o(" \u2014 "),Nq=a("a"),MKo=o("TFGPT2Model"),EKo=o(" (OpenAI GPT-2 model)"),yKo=l(),xF=a("li"),cge=a("strong"),wKo=o("hubert"),AKo=o(" \u2014 "),jq=a("a"),LKo=o("TFHubertModel"),BKo=o(" (Hubert model)"),xKo=l(),kF=a("li"),mge=a("strong"),kKo=o("layoutlm"),RKo=o(" \u2014 "),Dq=a("a"),SKo=o("TFLayoutLMModel"),PKo=o(" (LayoutLM model)"),$Ko=l(),RF=a("li"),fge=a("strong"),IKo=o("led"),NKo=o(" \u2014 "),qq=a("a"),jKo=o("TFLEDModel"),DKo=o(" (LED model)"),qKo=l(),SF=a("li"),gge=a("strong"),GKo=o("longformer"),OKo=o(" \u2014 "),Gq=a("a"),XKo=o("TFLongformerModel"),VKo=o(" (Longformer model)"),zKo=l(),PF=a("li"),hge=a("strong"),WKo=o("lxmert"),QKo=o(" \u2014 "),Oq=a("a"),HKo=o("TFLxmertModel"),UKo=o(" (LXMERT model)"),JKo=l(),$F=a("li"),uge=a("strong"),YKo=o("marian"),KKo=o(" \u2014 "),Xq=a("a"),ZKo=o("TFMarianModel"),eZo=o(" (Marian model)"),oZo=l(),IF=a("li"),pge=a("strong"),rZo=o("mbart"),tZo=o(" \u2014 "),Vq=a("a"),aZo=o("TFMBartModel"),nZo=o(" (mBART model)"),sZo=l(),NF=a("li"),_ge=a("strong"),lZo=o("mobilebert"),iZo=o(" \u2014 "),zq=a("a"),dZo=o("TFMobileBertModel"),cZo=o(" (MobileBERT model)"),mZo=l(),jF=a("li"),bge=a("strong"),fZo=o("mpnet"),gZo=o(" \u2014 "),Wq=a("a"),hZo=o("TFMPNetModel"),uZo=o(" (MPNet model)"),pZo=l(),DF=a("li"),vge=a("strong"),_Zo=o("mt5"),bZo=o(" \u2014 "),Qq=a("a"),vZo=o("TFMT5Model"),TZo=o(" (mT5 model)"),FZo=l(),qF=a("li"),Tge=a("strong"),CZo=o("openai-gpt"),MZo=o(" \u2014 "),Hq=a("a"),EZo=o("TFOpenAIGPTModel"),yZo=o(" (OpenAI GPT model)"),wZo=l(),GF=a("li"),Fge=a("strong"),AZo=o("pegasus"),LZo=o(" \u2014 "),Uq=a("a"),BZo=o("TFPegasusModel"),xZo=o(" (Pegasus model)"),kZo=l(),OF=a("li"),Cge=a("strong"),RZo=o("rembert"),SZo=o(" \u2014 "),Jq=a("a"),PZo=o("TFRemBertModel"),$Zo=o(" (RemBERT model)"),IZo=l(),XF=a("li"),Mge=a("strong"),NZo=o("roberta"),jZo=o(" \u2014 "),Yq=a("a"),DZo=o("TFRobertaModel"),qZo=o(" (RoBERTa model)"),GZo=l(),VF=a("li"),Ege=a("strong"),OZo=o("roformer"),XZo=o(" \u2014 "),Kq=a("a"),VZo=o("TFRoFormerModel"),zZo=o(" (RoFormer model)"),WZo=l(),zF=a("li"),yge=a("strong"),QZo=o("speech_to_text"),HZo=o(" \u2014 "),Zq=a("a"),UZo=o("TFSpeech2TextModel"),JZo=o(" (Speech2Text model)"),YZo=l(),WF=a("li"),wge=a("strong"),KZo=o("t5"),ZZo=o(" \u2014 "),eG=a("a"),eer=o("TFT5Model"),oer=o(" (T5 model)"),rer=l(),QF=a("li"),Age=a("strong"),ter=o("tapas"),aer=o(" \u2014 "),oG=a("a"),ner=o("TFTapasModel"),ser=o(" (TAPAS model)"),ler=l(),HF=a("li"),Lge=a("strong"),ier=o("transfo-xl"),der=o(" \u2014 "),rG=a("a"),cer=o("TFTransfoXLModel"),mer=o(" (Transformer-XL model)"),fer=l(),UF=a("li"),Bge=a("strong"),ger=o("vit"),her=o(" \u2014 "),tG=a("a"),uer=o("TFViTModel"),per=o(" (ViT model)"),_er=l(),JF=a("li"),xge=a("strong"),ber=o("wav2vec2"),ver=o(" \u2014 "),aG=a("a"),Ter=o("TFWav2Vec2Model"),Fer=o(" (Wav2Vec2 model)"),Cer=l(),YF=a("li"),kge=a("strong"),Mer=o("xlm"),Eer=o(" \u2014 "),nG=a("a"),yer=o("TFXLMModel"),wer=o(" (XLM model)"),Aer=l(),KF=a("li"),Rge=a("strong"),Ler=o("xlm-roberta"),Ber=o(" \u2014 "),sG=a("a"),xer=o("TFXLMRobertaModel"),ker=o(" (XLM-RoBERTa model)"),Rer=l(),ZF=a("li"),Sge=a("strong"),Ser=o("xlnet"),Per=o(" \u2014 "),lG=a("a"),$er=o("TFXLNetModel"),Ier=o(" (XLNet model)"),Ner=l(),Pge=a("p"),jer=o("Examples:"),Der=l(),m(VA.$$.fragment),Zke=l(),uc=a("h2"),eC=a("a"),$ge=a("span"),m(zA.$$.fragment),qer=l(),Ige=a("span"),Ger=o("TFAutoModelForPreTraining"),eRe=l(),Tr=a("div"),m(WA.$$.fragment),Oer=l(),pc=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nge=a("code"),Ver=o("from_pretrained()"),zer=o("class method or the "),jge=a("code"),Wer=o("from_config()"),Qer=o(`class
method.`),Her=l(),QA=a("p"),Uer=o("This class cannot be instantiated directly using "),Dge=a("code"),Jer=o("__init__()"),Yer=o(" (throws an error)."),Ker=l(),ht=a("div"),m(HA.$$.fragment),Zer=l(),qge=a("p"),eor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oor=l(),_c=a("p"),ror=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),tor=o("not"),aor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oge=a("code"),nor=o("from_pretrained()"),sor=o("to load the model weights."),lor=l(),Xge=a("p"),ior=o("Examples:"),dor=l(),m(UA.$$.fragment),cor=l(),uo=a("div"),m(JA.$$.fragment),mor=l(),Vge=a("p"),gor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hor=l(),_n=a("p"),uor=o("The model class to instantiate is selected based on the "),zge=a("code"),por=o("model_type"),_or=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),bor=o("pretrained_model_name_or_path"),vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),Tor=o("pretrained_model_name_or_path"),For=o(":"),Cor=l(),H=a("ul"),oC=a("li"),Hge=a("strong"),Mor=o("albert"),Eor=o(" \u2014 "),iG=a("a"),yor=o("TFAlbertForPreTraining"),wor=o(" (ALBERT model)"),Aor=l(),rC=a("li"),Uge=a("strong"),Lor=o("bart"),Bor=o(" \u2014 "),dG=a("a"),xor=o("TFBartForConditionalGeneration"),kor=o(" (BART model)"),Ror=l(),tC=a("li"),Jge=a("strong"),Sor=o("bert"),Por=o(" \u2014 "),cG=a("a"),$or=o("TFBertForPreTraining"),Ior=o(" (BERT model)"),Nor=l(),aC=a("li"),Yge=a("strong"),jor=o("camembert"),Dor=o(" \u2014 "),mG=a("a"),qor=o("TFCamembertForMaskedLM"),Gor=o(" (CamemBERT model)"),Oor=l(),nC=a("li"),Kge=a("strong"),Xor=o("ctrl"),Vor=o(" \u2014 "),fG=a("a"),zor=o("TFCTRLLMHeadModel"),Wor=o(" (CTRL model)"),Qor=l(),sC=a("li"),Zge=a("strong"),Hor=o("distilbert"),Uor=o(" \u2014 "),gG=a("a"),Jor=o("TFDistilBertForMaskedLM"),Yor=o(" (DistilBERT model)"),Kor=l(),lC=a("li"),ehe=a("strong"),Zor=o("electra"),err=o(" \u2014 "),hG=a("a"),orr=o("TFElectraForPreTraining"),rrr=o(" (ELECTRA model)"),trr=l(),iC=a("li"),ohe=a("strong"),arr=o("flaubert"),nrr=o(" \u2014 "),uG=a("a"),srr=o("TFFlaubertWithLMHeadModel"),lrr=o(" (FlauBERT model)"),irr=l(),dC=a("li"),rhe=a("strong"),drr=o("funnel"),crr=o(" \u2014 "),pG=a("a"),mrr=o("TFFunnelForPreTraining"),frr=o(" (Funnel Transformer model)"),grr=l(),cC=a("li"),the=a("strong"),hrr=o("gpt2"),urr=o(" \u2014 "),_G=a("a"),prr=o("TFGPT2LMHeadModel"),_rr=o(" (OpenAI GPT-2 model)"),brr=l(),mC=a("li"),ahe=a("strong"),vrr=o("layoutlm"),Trr=o(" \u2014 "),bG=a("a"),Frr=o("TFLayoutLMForMaskedLM"),Crr=o(" (LayoutLM model)"),Mrr=l(),fC=a("li"),nhe=a("strong"),Err=o("lxmert"),yrr=o(" \u2014 "),vG=a("a"),wrr=o("TFLxmertForPreTraining"),Arr=o(" (LXMERT model)"),Lrr=l(),gC=a("li"),she=a("strong"),Brr=o("mobilebert"),xrr=o(" \u2014 "),TG=a("a"),krr=o("TFMobileBertForPreTraining"),Rrr=o(" (MobileBERT model)"),Srr=l(),hC=a("li"),lhe=a("strong"),Prr=o("mpnet"),$rr=o(" \u2014 "),FG=a("a"),Irr=o("TFMPNetForMaskedLM"),Nrr=o(" (MPNet model)"),jrr=l(),uC=a("li"),ihe=a("strong"),Drr=o("openai-gpt"),qrr=o(" \u2014 "),CG=a("a"),Grr=o("TFOpenAIGPTLMHeadModel"),Orr=o(" (OpenAI GPT model)"),Xrr=l(),pC=a("li"),dhe=a("strong"),Vrr=o("roberta"),zrr=o(" \u2014 "),MG=a("a"),Wrr=o("TFRobertaForMaskedLM"),Qrr=o(" (RoBERTa model)"),Hrr=l(),_C=a("li"),che=a("strong"),Urr=o("t5"),Jrr=o(" \u2014 "),EG=a("a"),Yrr=o("TFT5ForConditionalGeneration"),Krr=o(" (T5 model)"),Zrr=l(),bC=a("li"),mhe=a("strong"),etr=o("tapas"),otr=o(" \u2014 "),yG=a("a"),rtr=o("TFTapasForMaskedLM"),ttr=o(" (TAPAS model)"),atr=l(),vC=a("li"),fhe=a("strong"),ntr=o("transfo-xl"),str=o(" \u2014 "),wG=a("a"),ltr=o("TFTransfoXLLMHeadModel"),itr=o(" (Transformer-XL model)"),dtr=l(),TC=a("li"),ghe=a("strong"),ctr=o("xlm"),mtr=o(" \u2014 "),AG=a("a"),ftr=o("TFXLMWithLMHeadModel"),gtr=o(" (XLM model)"),htr=l(),FC=a("li"),hhe=a("strong"),utr=o("xlm-roberta"),ptr=o(" \u2014 "),LG=a("a"),_tr=o("TFXLMRobertaForMaskedLM"),btr=o(" (XLM-RoBERTa model)"),vtr=l(),CC=a("li"),uhe=a("strong"),Ttr=o("xlnet"),Ftr=o(" \u2014 "),BG=a("a"),Ctr=o("TFXLNetLMHeadModel"),Mtr=o(" (XLNet model)"),Etr=l(),phe=a("p"),ytr=o("Examples:"),wtr=l(),m(YA.$$.fragment),oRe=l(),bc=a("h2"),MC=a("a"),_he=a("span"),m(KA.$$.fragment),Atr=l(),bhe=a("span"),Ltr=o("TFAutoModelForCausalLM"),rRe=l(),Fr=a("div"),m(ZA.$$.fragment),Btr=l(),vc=a("p"),xtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vhe=a("code"),ktr=o("from_pretrained()"),Rtr=o("class method or the "),The=a("code"),Str=o("from_config()"),Ptr=o(`class
method.`),$tr=l(),e0=a("p"),Itr=o("This class cannot be instantiated directly using "),Fhe=a("code"),Ntr=o("__init__()"),jtr=o(" (throws an error)."),Dtr=l(),ut=a("div"),m(o0.$$.fragment),qtr=l(),Che=a("p"),Gtr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Otr=l(),Tc=a("p"),Xtr=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),Vtr=o("not"),ztr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=a("code"),Wtr=o("from_pretrained()"),Qtr=o("to load the model weights."),Htr=l(),yhe=a("p"),Utr=o("Examples:"),Jtr=l(),m(r0.$$.fragment),Ytr=l(),po=a("div"),m(t0.$$.fragment),Ktr=l(),whe=a("p"),Ztr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ear=l(),bn=a("p"),oar=o("The model class to instantiate is selected based on the "),Ahe=a("code"),rar=o("model_type"),tar=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),aar=o("pretrained_model_name_or_path"),nar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),sar=o("pretrained_model_name_or_path"),lar=o(":"),iar=l(),ge=a("ul"),EC=a("li"),xhe=a("strong"),dar=o("bert"),car=o(" \u2014 "),xG=a("a"),mar=o("TFBertLMHeadModel"),far=o(" (BERT model)"),gar=l(),yC=a("li"),khe=a("strong"),har=o("camembert"),uar=o(" \u2014 "),kG=a("a"),par=o("TFCamembertForCausalLM"),_ar=o(" (CamemBERT model)"),bar=l(),wC=a("li"),Rhe=a("strong"),Tar=o("ctrl"),Far=o(" \u2014 "),RG=a("a"),Car=o("TFCTRLLMHeadModel"),Mar=o(" (CTRL model)"),Ear=l(),AC=a("li"),She=a("strong"),yar=o("gpt2"),war=o(" \u2014 "),SG=a("a"),Aar=o("TFGPT2LMHeadModel"),Lar=o(" (OpenAI GPT-2 model)"),Bar=l(),LC=a("li"),Phe=a("strong"),xar=o("openai-gpt"),kar=o(" \u2014 "),PG=a("a"),Rar=o("TFOpenAIGPTLMHeadModel"),Sar=o(" (OpenAI GPT model)"),Par=l(),BC=a("li"),$he=a("strong"),$ar=o("rembert"),Iar=o(" \u2014 "),$G=a("a"),Nar=o("TFRemBertForCausalLM"),jar=o(" (RemBERT model)"),Dar=l(),xC=a("li"),Ihe=a("strong"),qar=o("roberta"),Gar=o(" \u2014 "),IG=a("a"),Oar=o("TFRobertaForCausalLM"),Xar=o(" (RoBERTa model)"),Var=l(),kC=a("li"),Nhe=a("strong"),zar=o("roformer"),War=o(" \u2014 "),NG=a("a"),Qar=o("TFRoFormerForCausalLM"),Har=o(" (RoFormer model)"),Uar=l(),RC=a("li"),jhe=a("strong"),Jar=o("transfo-xl"),Yar=o(" \u2014 "),jG=a("a"),Kar=o("TFTransfoXLLMHeadModel"),Zar=o(" (Transformer-XL model)"),enr=l(),SC=a("li"),Dhe=a("strong"),onr=o("xlm"),rnr=o(" \u2014 "),DG=a("a"),tnr=o("TFXLMWithLMHeadModel"),anr=o(" (XLM model)"),nnr=l(),PC=a("li"),qhe=a("strong"),snr=o("xlnet"),lnr=o(" \u2014 "),qG=a("a"),inr=o("TFXLNetLMHeadModel"),dnr=o(" (XLNet model)"),cnr=l(),Ghe=a("p"),mnr=o("Examples:"),fnr=l(),m(a0.$$.fragment),tRe=l(),Fc=a("h2"),$C=a("a"),Ohe=a("span"),m(n0.$$.fragment),gnr=l(),Xhe=a("span"),hnr=o("TFAutoModelForImageClassification"),aRe=l(),Cr=a("div"),m(s0.$$.fragment),unr=l(),Cc=a("p"),pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vhe=a("code"),_nr=o("from_pretrained()"),bnr=o("class method or the "),zhe=a("code"),vnr=o("from_config()"),Tnr=o(`class
method.`),Fnr=l(),l0=a("p"),Cnr=o("This class cannot be instantiated directly using "),Whe=a("code"),Mnr=o("__init__()"),Enr=o(" (throws an error)."),ynr=l(),pt=a("div"),m(i0.$$.fragment),wnr=l(),Qhe=a("p"),Anr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lnr=l(),Mc=a("p"),Bnr=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),xnr=o("not"),knr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uhe=a("code"),Rnr=o("from_pretrained()"),Snr=o("to load the model weights."),Pnr=l(),Jhe=a("p"),$nr=o("Examples:"),Inr=l(),m(d0.$$.fragment),Nnr=l(),_o=a("div"),m(c0.$$.fragment),jnr=l(),Yhe=a("p"),Dnr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qnr=l(),vn=a("p"),Gnr=o("The model class to instantiate is selected based on the "),Khe=a("code"),Onr=o("model_type"),Xnr=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),Vnr=o("pretrained_model_name_or_path"),znr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),Wnr=o("pretrained_model_name_or_path"),Qnr=o(":"),Hnr=l(),m0=a("ul"),IC=a("li"),oue=a("strong"),Unr=o("convnext"),Jnr=o(" \u2014 "),GG=a("a"),Ynr=o("TFConvNextForImageClassification"),Knr=o(" (ConvNext model)"),Znr=l(),NC=a("li"),rue=a("strong"),esr=o("vit"),osr=o(" \u2014 "),OG=a("a"),rsr=o("TFViTForImageClassification"),tsr=o(" (ViT model)"),asr=l(),tue=a("p"),nsr=o("Examples:"),ssr=l(),m(f0.$$.fragment),nRe=l(),Ec=a("h2"),jC=a("a"),aue=a("span"),m(g0.$$.fragment),lsr=l(),nue=a("span"),isr=o("TFAutoModelForMaskedLM"),sRe=l(),Mr=a("div"),m(h0.$$.fragment),dsr=l(),yc=a("p"),csr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sue=a("code"),msr=o("from_pretrained()"),fsr=o("class method or the "),lue=a("code"),gsr=o("from_config()"),hsr=o(`class
method.`),usr=l(),u0=a("p"),psr=o("This class cannot be instantiated directly using "),iue=a("code"),_sr=o("__init__()"),bsr=o(" (throws an error)."),vsr=l(),_t=a("div"),m(p0.$$.fragment),Tsr=l(),due=a("p"),Fsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Csr=l(),wc=a("p"),Msr=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),Esr=o("not"),ysr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mue=a("code"),wsr=o("from_pretrained()"),Asr=o("to load the model weights."),Lsr=l(),fue=a("p"),Bsr=o("Examples:"),xsr=l(),m(_0.$$.fragment),ksr=l(),bo=a("div"),m(b0.$$.fragment),Rsr=l(),gue=a("p"),Ssr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Psr=l(),Tn=a("p"),$sr=o("The model class to instantiate is selected based on the "),hue=a("code"),Isr=o("model_type"),Nsr=o(` property of the config object (either
passed as an argument or loaded from `),uue=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),qsr=o("pretrained_model_name_or_path"),Gsr=o(":"),Osr=l(),J=a("ul"),DC=a("li"),_ue=a("strong"),Xsr=o("albert"),Vsr=o(" \u2014 "),XG=a("a"),zsr=o("TFAlbertForMaskedLM"),Wsr=o(" (ALBERT model)"),Qsr=l(),qC=a("li"),bue=a("strong"),Hsr=o("bert"),Usr=o(" \u2014 "),VG=a("a"),Jsr=o("TFBertForMaskedLM"),Ysr=o(" (BERT model)"),Ksr=l(),GC=a("li"),vue=a("strong"),Zsr=o("camembert"),elr=o(" \u2014 "),zG=a("a"),olr=o("TFCamembertForMaskedLM"),rlr=o(" (CamemBERT model)"),tlr=l(),OC=a("li"),Tue=a("strong"),alr=o("convbert"),nlr=o(" \u2014 "),WG=a("a"),slr=o("TFConvBertForMaskedLM"),llr=o(" (ConvBERT model)"),ilr=l(),XC=a("li"),Fue=a("strong"),dlr=o("deberta"),clr=o(" \u2014 "),QG=a("a"),mlr=o("TFDebertaForMaskedLM"),flr=o(" (DeBERTa model)"),glr=l(),VC=a("li"),Cue=a("strong"),hlr=o("deberta-v2"),ulr=o(" \u2014 "),HG=a("a"),plr=o("TFDebertaV2ForMaskedLM"),_lr=o(" (DeBERTa-v2 model)"),blr=l(),zC=a("li"),Mue=a("strong"),vlr=o("distilbert"),Tlr=o(" \u2014 "),UG=a("a"),Flr=o("TFDistilBertForMaskedLM"),Clr=o(" (DistilBERT model)"),Mlr=l(),WC=a("li"),Eue=a("strong"),Elr=o("electra"),ylr=o(" \u2014 "),JG=a("a"),wlr=o("TFElectraForMaskedLM"),Alr=o(" (ELECTRA model)"),Llr=l(),QC=a("li"),yue=a("strong"),Blr=o("flaubert"),xlr=o(" \u2014 "),YG=a("a"),klr=o("TFFlaubertWithLMHeadModel"),Rlr=o(" (FlauBERT model)"),Slr=l(),HC=a("li"),wue=a("strong"),Plr=o("funnel"),$lr=o(" \u2014 "),KG=a("a"),Ilr=o("TFFunnelForMaskedLM"),Nlr=o(" (Funnel Transformer model)"),jlr=l(),UC=a("li"),Aue=a("strong"),Dlr=o("layoutlm"),qlr=o(" \u2014 "),ZG=a("a"),Glr=o("TFLayoutLMForMaskedLM"),Olr=o(" (LayoutLM model)"),Xlr=l(),JC=a("li"),Lue=a("strong"),Vlr=o("longformer"),zlr=o(" \u2014 "),eO=a("a"),Wlr=o("TFLongformerForMaskedLM"),Qlr=o(" (Longformer model)"),Hlr=l(),YC=a("li"),Bue=a("strong"),Ulr=o("mobilebert"),Jlr=o(" \u2014 "),oO=a("a"),Ylr=o("TFMobileBertForMaskedLM"),Klr=o(" (MobileBERT model)"),Zlr=l(),KC=a("li"),xue=a("strong"),eir=o("mpnet"),oir=o(" \u2014 "),rO=a("a"),rir=o("TFMPNetForMaskedLM"),tir=o(" (MPNet model)"),air=l(),ZC=a("li"),kue=a("strong"),nir=o("rembert"),sir=o(" \u2014 "),tO=a("a"),lir=o("TFRemBertForMaskedLM"),iir=o(" (RemBERT model)"),dir=l(),eM=a("li"),Rue=a("strong"),cir=o("roberta"),mir=o(" \u2014 "),aO=a("a"),fir=o("TFRobertaForMaskedLM"),gir=o(" (RoBERTa model)"),hir=l(),oM=a("li"),Sue=a("strong"),uir=o("roformer"),pir=o(" \u2014 "),nO=a("a"),_ir=o("TFRoFormerForMaskedLM"),bir=o(" (RoFormer model)"),vir=l(),rM=a("li"),Pue=a("strong"),Tir=o("tapas"),Fir=o(" \u2014 "),sO=a("a"),Cir=o("TFTapasForMaskedLM"),Mir=o(" (TAPAS model)"),Eir=l(),tM=a("li"),$ue=a("strong"),yir=o("xlm"),wir=o(" \u2014 "),lO=a("a"),Air=o("TFXLMWithLMHeadModel"),Lir=o(" (XLM model)"),Bir=l(),aM=a("li"),Iue=a("strong"),xir=o("xlm-roberta"),kir=o(" \u2014 "),iO=a("a"),Rir=o("TFXLMRobertaForMaskedLM"),Sir=o(" (XLM-RoBERTa model)"),Pir=l(),Nue=a("p"),$ir=o("Examples:"),Iir=l(),m(v0.$$.fragment),lRe=l(),Ac=a("h2"),nM=a("a"),jue=a("span"),m(T0.$$.fragment),Nir=l(),Due=a("span"),jir=o("TFAutoModelForSeq2SeqLM"),iRe=l(),Er=a("div"),m(F0.$$.fragment),Dir=l(),Lc=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),que=a("code"),Gir=o("from_pretrained()"),Oir=o("class method or the "),Gue=a("code"),Xir=o("from_config()"),Vir=o(`class
method.`),zir=l(),C0=a("p"),Wir=o("This class cannot be instantiated directly using "),Oue=a("code"),Qir=o("__init__()"),Hir=o(" (throws an error)."),Uir=l(),bt=a("div"),m(M0.$$.fragment),Jir=l(),Xue=a("p"),Yir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kir=l(),Bc=a("p"),Zir=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),edr=o("not"),odr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zue=a("code"),rdr=o("from_pretrained()"),tdr=o("to load the model weights."),adr=l(),Wue=a("p"),ndr=o("Examples:"),sdr=l(),m(E0.$$.fragment),ldr=l(),vo=a("div"),m(y0.$$.fragment),idr=l(),Que=a("p"),ddr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cdr=l(),Fn=a("p"),mdr=o("The model class to instantiate is selected based on the "),Hue=a("code"),fdr=o("model_type"),gdr=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),hdr=o("pretrained_model_name_or_path"),udr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(":"),bdr=l(),pe=a("ul"),sM=a("li"),Yue=a("strong"),vdr=o("bart"),Tdr=o(" \u2014 "),dO=a("a"),Fdr=o("TFBartForConditionalGeneration"),Cdr=o(" (BART model)"),Mdr=l(),lM=a("li"),Kue=a("strong"),Edr=o("blenderbot"),ydr=o(" \u2014 "),cO=a("a"),wdr=o("TFBlenderbotForConditionalGeneration"),Adr=o(" (Blenderbot model)"),Ldr=l(),iM=a("li"),Zue=a("strong"),Bdr=o("blenderbot-small"),xdr=o(" \u2014 "),mO=a("a"),kdr=o("TFBlenderbotSmallForConditionalGeneration"),Rdr=o(" (BlenderbotSmall model)"),Sdr=l(),dM=a("li"),epe=a("strong"),Pdr=o("encoder-decoder"),$dr=o(" \u2014 "),fO=a("a"),Idr=o("TFEncoderDecoderModel"),Ndr=o(" (Encoder decoder model)"),jdr=l(),cM=a("li"),ope=a("strong"),Ddr=o("led"),qdr=o(" \u2014 "),gO=a("a"),Gdr=o("TFLEDForConditionalGeneration"),Odr=o(" (LED model)"),Xdr=l(),mM=a("li"),rpe=a("strong"),Vdr=o("marian"),zdr=o(" \u2014 "),hO=a("a"),Wdr=o("TFMarianMTModel"),Qdr=o(" (Marian model)"),Hdr=l(),fM=a("li"),tpe=a("strong"),Udr=o("mbart"),Jdr=o(" \u2014 "),uO=a("a"),Ydr=o("TFMBartForConditionalGeneration"),Kdr=o(" (mBART model)"),Zdr=l(),gM=a("li"),ape=a("strong"),ecr=o("mt5"),ocr=o(" \u2014 "),pO=a("a"),rcr=o("TFMT5ForConditionalGeneration"),tcr=o(" (mT5 model)"),acr=l(),hM=a("li"),npe=a("strong"),ncr=o("pegasus"),scr=o(" \u2014 "),_O=a("a"),lcr=o("TFPegasusForConditionalGeneration"),icr=o(" (Pegasus model)"),dcr=l(),uM=a("li"),spe=a("strong"),ccr=o("t5"),mcr=o(" \u2014 "),bO=a("a"),fcr=o("TFT5ForConditionalGeneration"),gcr=o(" (T5 model)"),hcr=l(),lpe=a("p"),ucr=o("Examples:"),pcr=l(),m(w0.$$.fragment),dRe=l(),xc=a("h2"),pM=a("a"),ipe=a("span"),m(A0.$$.fragment),_cr=l(),dpe=a("span"),bcr=o("TFAutoModelForSequenceClassification"),cRe=l(),yr=a("div"),m(L0.$$.fragment),vcr=l(),kc=a("p"),Tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cpe=a("code"),Fcr=o("from_pretrained()"),Ccr=o("class method or the "),mpe=a("code"),Mcr=o("from_config()"),Ecr=o(`class
method.`),ycr=l(),B0=a("p"),wcr=o("This class cannot be instantiated directly using "),fpe=a("code"),Acr=o("__init__()"),Lcr=o(" (throws an error)."),Bcr=l(),vt=a("div"),m(x0.$$.fragment),xcr=l(),gpe=a("p"),kcr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rcr=l(),Rc=a("p"),Scr=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),Pcr=o("not"),$cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=a("code"),Icr=o("from_pretrained()"),Ncr=o("to load the model weights."),jcr=l(),ppe=a("p"),Dcr=o("Examples:"),qcr=l(),m(k0.$$.fragment),Gcr=l(),To=a("div"),m(R0.$$.fragment),Ocr=l(),_pe=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vcr=l(),Cn=a("p"),zcr=o("The model class to instantiate is selected based on the "),bpe=a("code"),Wcr=o("model_type"),Qcr=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),Hcr=o("pretrained_model_name_or_path"),Ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(":"),Kcr=l(),V=a("ul"),_M=a("li"),Fpe=a("strong"),Zcr=o("albert"),emr=o(" \u2014 "),vO=a("a"),omr=o("TFAlbertForSequenceClassification"),rmr=o(" (ALBERT model)"),tmr=l(),bM=a("li"),Cpe=a("strong"),amr=o("bert"),nmr=o(" \u2014 "),TO=a("a"),smr=o("TFBertForSequenceClassification"),lmr=o(" (BERT model)"),imr=l(),vM=a("li"),Mpe=a("strong"),dmr=o("camembert"),cmr=o(" \u2014 "),FO=a("a"),mmr=o("TFCamembertForSequenceClassification"),fmr=o(" (CamemBERT model)"),gmr=l(),TM=a("li"),Epe=a("strong"),hmr=o("convbert"),umr=o(" \u2014 "),CO=a("a"),pmr=o("TFConvBertForSequenceClassification"),_mr=o(" (ConvBERT model)"),bmr=l(),FM=a("li"),ype=a("strong"),vmr=o("ctrl"),Tmr=o(" \u2014 "),MO=a("a"),Fmr=o("TFCTRLForSequenceClassification"),Cmr=o(" (CTRL model)"),Mmr=l(),CM=a("li"),wpe=a("strong"),Emr=o("deberta"),ymr=o(" \u2014 "),EO=a("a"),wmr=o("TFDebertaForSequenceClassification"),Amr=o(" (DeBERTa model)"),Lmr=l(),MM=a("li"),Ape=a("strong"),Bmr=o("deberta-v2"),xmr=o(" \u2014 "),yO=a("a"),kmr=o("TFDebertaV2ForSequenceClassification"),Rmr=o(" (DeBERTa-v2 model)"),Smr=l(),EM=a("li"),Lpe=a("strong"),Pmr=o("distilbert"),$mr=o(" \u2014 "),wO=a("a"),Imr=o("TFDistilBertForSequenceClassification"),Nmr=o(" (DistilBERT model)"),jmr=l(),yM=a("li"),Bpe=a("strong"),Dmr=o("electra"),qmr=o(" \u2014 "),AO=a("a"),Gmr=o("TFElectraForSequenceClassification"),Omr=o(" (ELECTRA model)"),Xmr=l(),wM=a("li"),xpe=a("strong"),Vmr=o("flaubert"),zmr=o(" \u2014 "),LO=a("a"),Wmr=o("TFFlaubertForSequenceClassification"),Qmr=o(" (FlauBERT model)"),Hmr=l(),AM=a("li"),kpe=a("strong"),Umr=o("funnel"),Jmr=o(" \u2014 "),BO=a("a"),Ymr=o("TFFunnelForSequenceClassification"),Kmr=o(" (Funnel Transformer model)"),Zmr=l(),LM=a("li"),Rpe=a("strong"),efr=o("gpt2"),ofr=o(" \u2014 "),xO=a("a"),rfr=o("TFGPT2ForSequenceClassification"),tfr=o(" (OpenAI GPT-2 model)"),afr=l(),BM=a("li"),Spe=a("strong"),nfr=o("layoutlm"),sfr=o(" \u2014 "),kO=a("a"),lfr=o("TFLayoutLMForSequenceClassification"),ifr=o(" (LayoutLM model)"),dfr=l(),xM=a("li"),Ppe=a("strong"),cfr=o("longformer"),mfr=o(" \u2014 "),RO=a("a"),ffr=o("TFLongformerForSequenceClassification"),gfr=o(" (Longformer model)"),hfr=l(),kM=a("li"),$pe=a("strong"),ufr=o("mobilebert"),pfr=o(" \u2014 "),SO=a("a"),_fr=o("TFMobileBertForSequenceClassification"),bfr=o(" (MobileBERT model)"),vfr=l(),RM=a("li"),Ipe=a("strong"),Tfr=o("mpnet"),Ffr=o(" \u2014 "),PO=a("a"),Cfr=o("TFMPNetForSequenceClassification"),Mfr=o(" (MPNet model)"),Efr=l(),SM=a("li"),Npe=a("strong"),yfr=o("openai-gpt"),wfr=o(" \u2014 "),$O=a("a"),Afr=o("TFOpenAIGPTForSequenceClassification"),Lfr=o(" (OpenAI GPT model)"),Bfr=l(),PM=a("li"),jpe=a("strong"),xfr=o("rembert"),kfr=o(" \u2014 "),IO=a("a"),Rfr=o("TFRemBertForSequenceClassification"),Sfr=o(" (RemBERT model)"),Pfr=l(),$M=a("li"),Dpe=a("strong"),$fr=o("roberta"),Ifr=o(" \u2014 "),NO=a("a"),Nfr=o("TFRobertaForSequenceClassification"),jfr=o(" (RoBERTa model)"),Dfr=l(),IM=a("li"),qpe=a("strong"),qfr=o("roformer"),Gfr=o(" \u2014 "),jO=a("a"),Ofr=o("TFRoFormerForSequenceClassification"),Xfr=o(" (RoFormer model)"),Vfr=l(),NM=a("li"),Gpe=a("strong"),zfr=o("tapas"),Wfr=o(" \u2014 "),DO=a("a"),Qfr=o("TFTapasForSequenceClassification"),Hfr=o(" (TAPAS model)"),Ufr=l(),jM=a("li"),Ope=a("strong"),Jfr=o("transfo-xl"),Yfr=o(" \u2014 "),qO=a("a"),Kfr=o("TFTransfoXLForSequenceClassification"),Zfr=o(" (Transformer-XL model)"),egr=l(),DM=a("li"),Xpe=a("strong"),ogr=o("xlm"),rgr=o(" \u2014 "),GO=a("a"),tgr=o("TFXLMForSequenceClassification"),agr=o(" (XLM model)"),ngr=l(),qM=a("li"),Vpe=a("strong"),sgr=o("xlm-roberta"),lgr=o(" \u2014 "),OO=a("a"),igr=o("TFXLMRobertaForSequenceClassification"),dgr=o(" (XLM-RoBERTa model)"),cgr=l(),GM=a("li"),zpe=a("strong"),mgr=o("xlnet"),fgr=o(" \u2014 "),XO=a("a"),ggr=o("TFXLNetForSequenceClassification"),hgr=o(" (XLNet model)"),ugr=l(),Wpe=a("p"),pgr=o("Examples:"),_gr=l(),m(S0.$$.fragment),mRe=l(),Sc=a("h2"),OM=a("a"),Qpe=a("span"),m(P0.$$.fragment),bgr=l(),Hpe=a("span"),vgr=o("TFAutoModelForMultipleChoice"),fRe=l(),wr=a("div"),m($0.$$.fragment),Tgr=l(),Pc=a("p"),Fgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Upe=a("code"),Cgr=o("from_pretrained()"),Mgr=o("class method or the "),Jpe=a("code"),Egr=o("from_config()"),ygr=o(`class
method.`),wgr=l(),I0=a("p"),Agr=o("This class cannot be instantiated directly using "),Ype=a("code"),Lgr=o("__init__()"),Bgr=o(" (throws an error)."),xgr=l(),Tt=a("div"),m(N0.$$.fragment),kgr=l(),Kpe=a("p"),Rgr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sgr=l(),$c=a("p"),Pgr=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),$gr=o("not"),Igr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e_e=a("code"),Ngr=o("from_pretrained()"),jgr=o("to load the model weights."),Dgr=l(),o_e=a("p"),qgr=o("Examples:"),Ggr=l(),m(j0.$$.fragment),Ogr=l(),Fo=a("div"),m(D0.$$.fragment),Xgr=l(),r_e=a("p"),Vgr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zgr=l(),Mn=a("p"),Wgr=o("The model class to instantiate is selected based on the "),t_e=a("code"),Qgr=o("model_type"),Hgr=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),Ygr=o("pretrained_model_name_or_path"),Kgr=o(":"),Zgr=l(),ae=a("ul"),XM=a("li"),s_e=a("strong"),ehr=o("albert"),ohr=o(" \u2014 "),VO=a("a"),rhr=o("TFAlbertForMultipleChoice"),thr=o(" (ALBERT model)"),ahr=l(),VM=a("li"),l_e=a("strong"),nhr=o("bert"),shr=o(" \u2014 "),zO=a("a"),lhr=o("TFBertForMultipleChoice"),ihr=o(" (BERT model)"),dhr=l(),zM=a("li"),i_e=a("strong"),chr=o("camembert"),mhr=o(" \u2014 "),WO=a("a"),fhr=o("TFCamembertForMultipleChoice"),ghr=o(" (CamemBERT model)"),hhr=l(),WM=a("li"),d_e=a("strong"),uhr=o("convbert"),phr=o(" \u2014 "),QO=a("a"),_hr=o("TFConvBertForMultipleChoice"),bhr=o(" (ConvBERT model)"),vhr=l(),QM=a("li"),c_e=a("strong"),Thr=o("distilbert"),Fhr=o(" \u2014 "),HO=a("a"),Chr=o("TFDistilBertForMultipleChoice"),Mhr=o(" (DistilBERT model)"),Ehr=l(),HM=a("li"),m_e=a("strong"),yhr=o("electra"),whr=o(" \u2014 "),UO=a("a"),Ahr=o("TFElectraForMultipleChoice"),Lhr=o(" (ELECTRA model)"),Bhr=l(),UM=a("li"),f_e=a("strong"),xhr=o("flaubert"),khr=o(" \u2014 "),JO=a("a"),Rhr=o("TFFlaubertForMultipleChoice"),Shr=o(" (FlauBERT model)"),Phr=l(),JM=a("li"),g_e=a("strong"),$hr=o("funnel"),Ihr=o(" \u2014 "),YO=a("a"),Nhr=o("TFFunnelForMultipleChoice"),jhr=o(" (Funnel Transformer model)"),Dhr=l(),YM=a("li"),h_e=a("strong"),qhr=o("longformer"),Ghr=o(" \u2014 "),KO=a("a"),Ohr=o("TFLongformerForMultipleChoice"),Xhr=o(" (Longformer model)"),Vhr=l(),KM=a("li"),u_e=a("strong"),zhr=o("mobilebert"),Whr=o(" \u2014 "),ZO=a("a"),Qhr=o("TFMobileBertForMultipleChoice"),Hhr=o(" (MobileBERT model)"),Uhr=l(),ZM=a("li"),p_e=a("strong"),Jhr=o("mpnet"),Yhr=o(" \u2014 "),eX=a("a"),Khr=o("TFMPNetForMultipleChoice"),Zhr=o(" (MPNet model)"),eur=l(),e4=a("li"),__e=a("strong"),our=o("rembert"),rur=o(" \u2014 "),oX=a("a"),tur=o("TFRemBertForMultipleChoice"),aur=o(" (RemBERT model)"),nur=l(),o4=a("li"),b_e=a("strong"),sur=o("roberta"),lur=o(" \u2014 "),rX=a("a"),iur=o("TFRobertaForMultipleChoice"),dur=o(" (RoBERTa model)"),cur=l(),r4=a("li"),v_e=a("strong"),mur=o("roformer"),fur=o(" \u2014 "),tX=a("a"),gur=o("TFRoFormerForMultipleChoice"),hur=o(" (RoFormer model)"),uur=l(),t4=a("li"),T_e=a("strong"),pur=o("xlm"),_ur=o(" \u2014 "),aX=a("a"),bur=o("TFXLMForMultipleChoice"),vur=o(" (XLM model)"),Tur=l(),a4=a("li"),F_e=a("strong"),Fur=o("xlm-roberta"),Cur=o(" \u2014 "),nX=a("a"),Mur=o("TFXLMRobertaForMultipleChoice"),Eur=o(" (XLM-RoBERTa model)"),yur=l(),n4=a("li"),C_e=a("strong"),wur=o("xlnet"),Aur=o(" \u2014 "),sX=a("a"),Lur=o("TFXLNetForMultipleChoice"),Bur=o(" (XLNet model)"),xur=l(),M_e=a("p"),kur=o("Examples:"),Rur=l(),m(q0.$$.fragment),gRe=l(),Ic=a("h2"),s4=a("a"),E_e=a("span"),m(G0.$$.fragment),Sur=l(),y_e=a("span"),Pur=o("TFAutoModelForTableQuestionAnswering"),hRe=l(),Ar=a("div"),m(O0.$$.fragment),$ur=l(),Nc=a("p"),Iur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),w_e=a("code"),Nur=o("from_pretrained()"),jur=o("class method or the "),A_e=a("code"),Dur=o("from_config()"),qur=o(`class
method.`),Gur=l(),X0=a("p"),Our=o("This class cannot be instantiated directly using "),L_e=a("code"),Xur=o("__init__()"),Vur=o(" (throws an error)."),zur=l(),Ft=a("div"),m(V0.$$.fragment),Wur=l(),B_e=a("p"),Qur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hur=l(),jc=a("p"),Uur=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),Jur=o("not"),Yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=a("code"),Kur=o("from_pretrained()"),Zur=o("to load the model weights."),epr=l(),R_e=a("p"),opr=o("Examples:"),rpr=l(),m(z0.$$.fragment),tpr=l(),Co=a("div"),m(W0.$$.fragment),apr=l(),S_e=a("p"),npr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),spr=l(),En=a("p"),lpr=o("The model class to instantiate is selected based on the "),P_e=a("code"),ipr=o("model_type"),dpr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),cpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),fpr=o("pretrained_model_name_or_path"),gpr=o(":"),hpr=l(),N_e=a("ul"),l4=a("li"),j_e=a("strong"),upr=o("tapas"),ppr=o(" \u2014 "),lX=a("a"),_pr=o("TFTapasForQuestionAnswering"),bpr=o(" (TAPAS model)"),vpr=l(),D_e=a("p"),Tpr=o("Examples:"),Fpr=l(),m(Q0.$$.fragment),uRe=l(),Dc=a("h2"),i4=a("a"),q_e=a("span"),m(H0.$$.fragment),Cpr=l(),G_e=a("span"),Mpr=o("TFAutoModelForTokenClassification"),pRe=l(),Lr=a("div"),m(U0.$$.fragment),Epr=l(),qc=a("p"),ypr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),O_e=a("code"),wpr=o("from_pretrained()"),Apr=o("class method or the "),X_e=a("code"),Lpr=o("from_config()"),Bpr=o(`class
method.`),xpr=l(),J0=a("p"),kpr=o("This class cannot be instantiated directly using "),V_e=a("code"),Rpr=o("__init__()"),Spr=o(" (throws an error)."),Ppr=l(),Ct=a("div"),m(Y0.$$.fragment),$pr=l(),z_e=a("p"),Ipr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Npr=l(),Gc=a("p"),jpr=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),Dpr=o("not"),qpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q_e=a("code"),Gpr=o("from_pretrained()"),Opr=o("to load the model weights."),Xpr=l(),H_e=a("p"),Vpr=o("Examples:"),zpr=l(),m(K0.$$.fragment),Wpr=l(),Mo=a("div"),m(Z0.$$.fragment),Qpr=l(),U_e=a("p"),Hpr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Upr=l(),yn=a("p"),Jpr=o("The model class to instantiate is selected based on the "),J_e=a("code"),Ypr=o("model_type"),Kpr=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),Zpr=o("pretrained_model_name_or_path"),e_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(":"),t_r=l(),Y=a("ul"),d4=a("li"),Z_e=a("strong"),a_r=o("albert"),n_r=o(" \u2014 "),iX=a("a"),s_r=o("TFAlbertForTokenClassification"),l_r=o(" (ALBERT model)"),i_r=l(),c4=a("li"),ebe=a("strong"),d_r=o("bert"),c_r=o(" \u2014 "),dX=a("a"),m_r=o("TFBertForTokenClassification"),f_r=o(" (BERT model)"),g_r=l(),m4=a("li"),obe=a("strong"),h_r=o("camembert"),u_r=o(" \u2014 "),cX=a("a"),p_r=o("TFCamembertForTokenClassification"),__r=o(" (CamemBERT model)"),b_r=l(),f4=a("li"),rbe=a("strong"),v_r=o("convbert"),T_r=o(" \u2014 "),mX=a("a"),F_r=o("TFConvBertForTokenClassification"),C_r=o(" (ConvBERT model)"),M_r=l(),g4=a("li"),tbe=a("strong"),E_r=o("deberta"),y_r=o(" \u2014 "),fX=a("a"),w_r=o("TFDebertaForTokenClassification"),A_r=o(" (DeBERTa model)"),L_r=l(),h4=a("li"),abe=a("strong"),B_r=o("deberta-v2"),x_r=o(" \u2014 "),gX=a("a"),k_r=o("TFDebertaV2ForTokenClassification"),R_r=o(" (DeBERTa-v2 model)"),S_r=l(),u4=a("li"),nbe=a("strong"),P_r=o("distilbert"),$_r=o(" \u2014 "),hX=a("a"),I_r=o("TFDistilBertForTokenClassification"),N_r=o(" (DistilBERT model)"),j_r=l(),p4=a("li"),sbe=a("strong"),D_r=o("electra"),q_r=o(" \u2014 "),uX=a("a"),G_r=o("TFElectraForTokenClassification"),O_r=o(" (ELECTRA model)"),X_r=l(),_4=a("li"),lbe=a("strong"),V_r=o("flaubert"),z_r=o(" \u2014 "),pX=a("a"),W_r=o("TFFlaubertForTokenClassification"),Q_r=o(" (FlauBERT model)"),H_r=l(),b4=a("li"),ibe=a("strong"),U_r=o("funnel"),J_r=o(" \u2014 "),_X=a("a"),Y_r=o("TFFunnelForTokenClassification"),K_r=o(" (Funnel Transformer model)"),Z_r=l(),v4=a("li"),dbe=a("strong"),ebr=o("layoutlm"),obr=o(" \u2014 "),bX=a("a"),rbr=o("TFLayoutLMForTokenClassification"),tbr=o(" (LayoutLM model)"),abr=l(),T4=a("li"),cbe=a("strong"),nbr=o("longformer"),sbr=o(" \u2014 "),vX=a("a"),lbr=o("TFLongformerForTokenClassification"),ibr=o(" (Longformer model)"),dbr=l(),F4=a("li"),mbe=a("strong"),cbr=o("mobilebert"),mbr=o(" \u2014 "),TX=a("a"),fbr=o("TFMobileBertForTokenClassification"),gbr=o(" (MobileBERT model)"),hbr=l(),C4=a("li"),fbe=a("strong"),ubr=o("mpnet"),pbr=o(" \u2014 "),FX=a("a"),_br=o("TFMPNetForTokenClassification"),bbr=o(" (MPNet model)"),vbr=l(),M4=a("li"),gbe=a("strong"),Tbr=o("rembert"),Fbr=o(" \u2014 "),CX=a("a"),Cbr=o("TFRemBertForTokenClassification"),Mbr=o(" (RemBERT model)"),Ebr=l(),E4=a("li"),hbe=a("strong"),ybr=o("roberta"),wbr=o(" \u2014 "),MX=a("a"),Abr=o("TFRobertaForTokenClassification"),Lbr=o(" (RoBERTa model)"),Bbr=l(),y4=a("li"),ube=a("strong"),xbr=o("roformer"),kbr=o(" \u2014 "),EX=a("a"),Rbr=o("TFRoFormerForTokenClassification"),Sbr=o(" (RoFormer model)"),Pbr=l(),w4=a("li"),pbe=a("strong"),$br=o("xlm"),Ibr=o(" \u2014 "),yX=a("a"),Nbr=o("TFXLMForTokenClassification"),jbr=o(" (XLM model)"),Dbr=l(),A4=a("li"),_be=a("strong"),qbr=o("xlm-roberta"),Gbr=o(" \u2014 "),wX=a("a"),Obr=o("TFXLMRobertaForTokenClassification"),Xbr=o(" (XLM-RoBERTa model)"),Vbr=l(),L4=a("li"),bbe=a("strong"),zbr=o("xlnet"),Wbr=o(" \u2014 "),AX=a("a"),Qbr=o("TFXLNetForTokenClassification"),Hbr=o(" (XLNet model)"),Ubr=l(),vbe=a("p"),Jbr=o("Examples:"),Ybr=l(),m(eL.$$.fragment),_Re=l(),Oc=a("h2"),B4=a("a"),Tbe=a("span"),m(oL.$$.fragment),Kbr=l(),Fbe=a("span"),Zbr=o("TFAutoModelForQuestionAnswering"),bRe=l(),Br=a("div"),m(rL.$$.fragment),e2r=l(),Xc=a("p"),o2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cbe=a("code"),r2r=o("from_pretrained()"),t2r=o("class method or the "),Mbe=a("code"),a2r=o("from_config()"),n2r=o(`class
method.`),s2r=l(),tL=a("p"),l2r=o("This class cannot be instantiated directly using "),Ebe=a("code"),i2r=o("__init__()"),d2r=o(" (throws an error)."),c2r=l(),Mt=a("div"),m(aL.$$.fragment),m2r=l(),ybe=a("p"),f2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g2r=l(),Vc=a("p"),h2r=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),u2r=o("not"),p2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Abe=a("code"),_2r=o("from_pretrained()"),b2r=o("to load the model weights."),v2r=l(),Lbe=a("p"),T2r=o("Examples:"),F2r=l(),m(nL.$$.fragment),C2r=l(),Eo=a("div"),m(sL.$$.fragment),M2r=l(),Bbe=a("p"),E2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y2r=l(),wn=a("p"),w2r=o("The model class to instantiate is selected based on the "),xbe=a("code"),A2r=o("model_type"),L2r=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),B2r=o("pretrained_model_name_or_path"),x2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),k2r=o("pretrained_model_name_or_path"),R2r=o(":"),S2r=l(),Z=a("ul"),x4=a("li"),Sbe=a("strong"),P2r=o("albert"),$2r=o(" \u2014 "),LX=a("a"),I2r=o("TFAlbertForQuestionAnswering"),N2r=o(" (ALBERT model)"),j2r=l(),k4=a("li"),Pbe=a("strong"),D2r=o("bert"),q2r=o(" \u2014 "),BX=a("a"),G2r=o("TFBertForQuestionAnswering"),O2r=o(" (BERT model)"),X2r=l(),R4=a("li"),$be=a("strong"),V2r=o("camembert"),z2r=o(" \u2014 "),xX=a("a"),W2r=o("TFCamembertForQuestionAnswering"),Q2r=o(" (CamemBERT model)"),H2r=l(),S4=a("li"),Ibe=a("strong"),U2r=o("convbert"),J2r=o(" \u2014 "),kX=a("a"),Y2r=o("TFConvBertForQuestionAnswering"),K2r=o(" (ConvBERT model)"),Z2r=l(),P4=a("li"),Nbe=a("strong"),evr=o("deberta"),ovr=o(" \u2014 "),RX=a("a"),rvr=o("TFDebertaForQuestionAnswering"),tvr=o(" (DeBERTa model)"),avr=l(),$4=a("li"),jbe=a("strong"),nvr=o("deberta-v2"),svr=o(" \u2014 "),SX=a("a"),lvr=o("TFDebertaV2ForQuestionAnswering"),ivr=o(" (DeBERTa-v2 model)"),dvr=l(),I4=a("li"),Dbe=a("strong"),cvr=o("distilbert"),mvr=o(" \u2014 "),PX=a("a"),fvr=o("TFDistilBertForQuestionAnswering"),gvr=o(" (DistilBERT model)"),hvr=l(),N4=a("li"),qbe=a("strong"),uvr=o("electra"),pvr=o(" \u2014 "),$X=a("a"),_vr=o("TFElectraForQuestionAnswering"),bvr=o(" (ELECTRA model)"),vvr=l(),j4=a("li"),Gbe=a("strong"),Tvr=o("flaubert"),Fvr=o(" \u2014 "),IX=a("a"),Cvr=o("TFFlaubertForQuestionAnsweringSimple"),Mvr=o(" (FlauBERT model)"),Evr=l(),D4=a("li"),Obe=a("strong"),yvr=o("funnel"),wvr=o(" \u2014 "),NX=a("a"),Avr=o("TFFunnelForQuestionAnswering"),Lvr=o(" (Funnel Transformer model)"),Bvr=l(),q4=a("li"),Xbe=a("strong"),xvr=o("longformer"),kvr=o(" \u2014 "),jX=a("a"),Rvr=o("TFLongformerForQuestionAnswering"),Svr=o(" (Longformer model)"),Pvr=l(),G4=a("li"),Vbe=a("strong"),$vr=o("mobilebert"),Ivr=o(" \u2014 "),DX=a("a"),Nvr=o("TFMobileBertForQuestionAnswering"),jvr=o(" (MobileBERT model)"),Dvr=l(),O4=a("li"),zbe=a("strong"),qvr=o("mpnet"),Gvr=o(" \u2014 "),qX=a("a"),Ovr=o("TFMPNetForQuestionAnswering"),Xvr=o(" (MPNet model)"),Vvr=l(),X4=a("li"),Wbe=a("strong"),zvr=o("rembert"),Wvr=o(" \u2014 "),GX=a("a"),Qvr=o("TFRemBertForQuestionAnswering"),Hvr=o(" (RemBERT model)"),Uvr=l(),V4=a("li"),Qbe=a("strong"),Jvr=o("roberta"),Yvr=o(" \u2014 "),OX=a("a"),Kvr=o("TFRobertaForQuestionAnswering"),Zvr=o(" (RoBERTa model)"),eTr=l(),z4=a("li"),Hbe=a("strong"),oTr=o("roformer"),rTr=o(" \u2014 "),XX=a("a"),tTr=o("TFRoFormerForQuestionAnswering"),aTr=o(" (RoFormer model)"),nTr=l(),W4=a("li"),Ube=a("strong"),sTr=o("xlm"),lTr=o(" \u2014 "),VX=a("a"),iTr=o("TFXLMForQuestionAnsweringSimple"),dTr=o(" (XLM model)"),cTr=l(),Q4=a("li"),Jbe=a("strong"),mTr=o("xlm-roberta"),fTr=o(" \u2014 "),zX=a("a"),gTr=o("TFXLMRobertaForQuestionAnswering"),hTr=o(" (XLM-RoBERTa model)"),uTr=l(),H4=a("li"),Ybe=a("strong"),pTr=o("xlnet"),_Tr=o(" \u2014 "),WX=a("a"),bTr=o("TFXLNetForQuestionAnsweringSimple"),vTr=o(" (XLNet model)"),TTr=l(),Kbe=a("p"),FTr=o("Examples:"),CTr=l(),m(lL.$$.fragment),vRe=l(),zc=a("h2"),U4=a("a"),Zbe=a("span"),m(iL.$$.fragment),MTr=l(),e2e=a("span"),ETr=o("TFAutoModelForVision2Seq"),TRe=l(),xr=a("div"),m(dL.$$.fragment),yTr=l(),Wc=a("p"),wTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),o2e=a("code"),ATr=o("from_pretrained()"),LTr=o("class method or the "),r2e=a("code"),BTr=o("from_config()"),xTr=o(`class
method.`),kTr=l(),cL=a("p"),RTr=o("This class cannot be instantiated directly using "),t2e=a("code"),STr=o("__init__()"),PTr=o(" (throws an error)."),$Tr=l(),Et=a("div"),m(mL.$$.fragment),ITr=l(),a2e=a("p"),NTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jTr=l(),Qc=a("p"),DTr=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),qTr=o("not"),GTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s2e=a("code"),OTr=o("from_pretrained()"),XTr=o("to load the model weights."),VTr=l(),l2e=a("p"),zTr=o("Examples:"),WTr=l(),m(fL.$$.fragment),QTr=l(),yo=a("div"),m(gL.$$.fragment),HTr=l(),i2e=a("p"),UTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JTr=l(),An=a("p"),YTr=o("The model class to instantiate is selected based on the "),d2e=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),e1r=o("pretrained_model_name_or_path"),o1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),r1r=o("pretrained_model_name_or_path"),t1r=o(":"),a1r=l(),f2e=a("ul"),J4=a("li"),g2e=a("strong"),n1r=o("vision-encoder-decoder"),s1r=o(" \u2014 "),QX=a("a"),l1r=o("TFVisionEncoderDecoderModel"),i1r=o(" (Vision Encoder decoder model)"),d1r=l(),h2e=a("p"),c1r=o("Examples:"),m1r=l(),m(hL.$$.fragment),FRe=l(),Hc=a("h2"),Y4=a("a"),u2e=a("span"),m(uL.$$.fragment),f1r=l(),p2e=a("span"),g1r=o("TFAutoModelForSpeechSeq2Seq"),CRe=l(),kr=a("div"),m(pL.$$.fragment),h1r=l(),Uc=a("p"),u1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_2e=a("code"),p1r=o("from_pretrained()"),_1r=o("class method or the "),b2e=a("code"),b1r=o("from_config()"),v1r=o(`class
method.`),T1r=l(),_L=a("p"),F1r=o("This class cannot be instantiated directly using "),v2e=a("code"),C1r=o("__init__()"),M1r=o(" (throws an error)."),E1r=l(),yt=a("div"),m(bL.$$.fragment),y1r=l(),T2e=a("p"),w1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A1r=l(),Jc=a("p"),L1r=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),B1r=o("not"),x1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C2e=a("code"),k1r=o("from_pretrained()"),R1r=o("to load the model weights."),S1r=l(),M2e=a("p"),P1r=o("Examples:"),$1r=l(),m(vL.$$.fragment),I1r=l(),wo=a("div"),m(TL.$$.fragment),N1r=l(),E2e=a("p"),j1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),D1r=l(),Ln=a("p"),q1r=o("The model class to instantiate is selected based on the "),y2e=a("code"),G1r=o("model_type"),O1r=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),X1r=o("pretrained_model_name_or_path"),V1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),z1r=o("pretrained_model_name_or_path"),W1r=o(":"),Q1r=l(),L2e=a("ul"),K4=a("li"),B2e=a("strong"),H1r=o("speech_to_text"),U1r=o(" \u2014 "),HX=a("a"),J1r=o("TFSpeech2TextForConditionalGeneration"),Y1r=o(" (Speech2Text model)"),K1r=l(),x2e=a("p"),Z1r=o("Examples:"),eFr=l(),m(FL.$$.fragment),MRe=l(),Yc=a("h2"),Z4=a("a"),k2e=a("span"),m(CL.$$.fragment),oFr=l(),R2e=a("span"),rFr=o("FlaxAutoModel"),ERe=l(),Rr=a("div"),m(ML.$$.fragment),tFr=l(),Kc=a("p"),aFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),S2e=a("code"),nFr=o("from_pretrained()"),sFr=o("class method or the "),P2e=a("code"),lFr=o("from_config()"),iFr=o(`class
method.`),dFr=l(),EL=a("p"),cFr=o("This class cannot be instantiated directly using "),$2e=a("code"),mFr=o("__init__()"),fFr=o(" (throws an error)."),gFr=l(),wt=a("div"),m(yL.$$.fragment),hFr=l(),I2e=a("p"),uFr=o("Instantiates one of the base model classes of the library from a configuration."),pFr=l(),Zc=a("p"),_Fr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),bFr=o("not"),vFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),j2e=a("code"),TFr=o("from_pretrained()"),FFr=o("to load the model weights."),CFr=l(),D2e=a("p"),MFr=o("Examples:"),EFr=l(),m(wL.$$.fragment),yFr=l(),Ao=a("div"),m(AL.$$.fragment),wFr=l(),q2e=a("p"),AFr=o("Instantiate one of the base model classes of the library from a pretrained model."),LFr=l(),Bn=a("p"),BFr=o("The model class to instantiate is selected based on the "),G2e=a("code"),xFr=o("model_type"),kFr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),RFr=o("pretrained_model_name_or_path"),SFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),PFr=o("pretrained_model_name_or_path"),$Fr=o(":"),IFr=l(),z=a("ul"),eE=a("li"),V2e=a("strong"),NFr=o("albert"),jFr=o(" \u2014 "),UX=a("a"),DFr=o("FlaxAlbertModel"),qFr=o(" (ALBERT model)"),GFr=l(),oE=a("li"),z2e=a("strong"),OFr=o("bart"),XFr=o(" \u2014 "),JX=a("a"),VFr=o("FlaxBartModel"),zFr=o(" (BART model)"),WFr=l(),rE=a("li"),W2e=a("strong"),QFr=o("beit"),HFr=o(" \u2014 "),YX=a("a"),UFr=o("FlaxBeitModel"),JFr=o(" (BEiT model)"),YFr=l(),tE=a("li"),Q2e=a("strong"),KFr=o("bert"),ZFr=o(" \u2014 "),KX=a("a"),eCr=o("FlaxBertModel"),oCr=o(" (BERT model)"),rCr=l(),aE=a("li"),H2e=a("strong"),tCr=o("big_bird"),aCr=o(" \u2014 "),ZX=a("a"),nCr=o("FlaxBigBirdModel"),sCr=o(" (BigBird model)"),lCr=l(),nE=a("li"),U2e=a("strong"),iCr=o("blenderbot"),dCr=o(" \u2014 "),eV=a("a"),cCr=o("FlaxBlenderbotModel"),mCr=o(" (Blenderbot model)"),fCr=l(),sE=a("li"),J2e=a("strong"),gCr=o("blenderbot-small"),hCr=o(" \u2014 "),oV=a("a"),uCr=o("FlaxBlenderbotSmallModel"),pCr=o(" (BlenderbotSmall model)"),_Cr=l(),lE=a("li"),Y2e=a("strong"),bCr=o("clip"),vCr=o(" \u2014 "),rV=a("a"),TCr=o("FlaxCLIPModel"),FCr=o(" (CLIP model)"),CCr=l(),iE=a("li"),K2e=a("strong"),MCr=o("distilbert"),ECr=o(" \u2014 "),tV=a("a"),yCr=o("FlaxDistilBertModel"),wCr=o(" (DistilBERT model)"),ACr=l(),dE=a("li"),Z2e=a("strong"),LCr=o("electra"),BCr=o(" \u2014 "),aV=a("a"),xCr=o("FlaxElectraModel"),kCr=o(" (ELECTRA model)"),RCr=l(),cE=a("li"),eve=a("strong"),SCr=o("gpt2"),PCr=o(" \u2014 "),nV=a("a"),$Cr=o("FlaxGPT2Model"),ICr=o(" (OpenAI GPT-2 model)"),NCr=l(),mE=a("li"),ove=a("strong"),jCr=o("gpt_neo"),DCr=o(" \u2014 "),sV=a("a"),qCr=o("FlaxGPTNeoModel"),GCr=o(" (GPT Neo model)"),OCr=l(),fE=a("li"),rve=a("strong"),XCr=o("gptj"),VCr=o(" \u2014 "),lV=a("a"),zCr=o("FlaxGPTJModel"),WCr=o(" (GPT-J model)"),QCr=l(),gE=a("li"),tve=a("strong"),HCr=o("marian"),UCr=o(" \u2014 "),iV=a("a"),JCr=o("FlaxMarianModel"),YCr=o(" (Marian model)"),KCr=l(),hE=a("li"),ave=a("strong"),ZCr=o("mbart"),eMr=o(" \u2014 "),dV=a("a"),oMr=o("FlaxMBartModel"),rMr=o(" (mBART model)"),tMr=l(),uE=a("li"),nve=a("strong"),aMr=o("mt5"),nMr=o(" \u2014 "),cV=a("a"),sMr=o("FlaxMT5Model"),lMr=o(" (mT5 model)"),iMr=l(),pE=a("li"),sve=a("strong"),dMr=o("pegasus"),cMr=o(" \u2014 "),mV=a("a"),mMr=o("FlaxPegasusModel"),fMr=o(" (Pegasus model)"),gMr=l(),_E=a("li"),lve=a("strong"),hMr=o("roberta"),uMr=o(" \u2014 "),fV=a("a"),pMr=o("FlaxRobertaModel"),_Mr=o(" (RoBERTa model)"),bMr=l(),bE=a("li"),ive=a("strong"),vMr=o("roformer"),TMr=o(" \u2014 "),gV=a("a"),FMr=o("FlaxRoFormerModel"),CMr=o(" (RoFormer model)"),MMr=l(),vE=a("li"),dve=a("strong"),EMr=o("t5"),yMr=o(" \u2014 "),hV=a("a"),wMr=o("FlaxT5Model"),AMr=o(" (T5 model)"),LMr=l(),TE=a("li"),cve=a("strong"),BMr=o("vision-text-dual-encoder"),xMr=o(" \u2014 "),uV=a("a"),kMr=o("FlaxVisionTextDualEncoderModel"),RMr=o(" (VisionTextDualEncoder model)"),SMr=l(),FE=a("li"),mve=a("strong"),PMr=o("vit"),$Mr=o(" \u2014 "),pV=a("a"),IMr=o("FlaxViTModel"),NMr=o(" (ViT model)"),jMr=l(),CE=a("li"),fve=a("strong"),DMr=o("wav2vec2"),qMr=o(" \u2014 "),_V=a("a"),GMr=o("FlaxWav2Vec2Model"),OMr=o(" (Wav2Vec2 model)"),XMr=l(),ME=a("li"),gve=a("strong"),VMr=o("xglm"),zMr=o(" \u2014 "),bV=a("a"),WMr=o("FlaxXGLMModel"),QMr=o(" (XGLM model)"),HMr=l(),EE=a("li"),hve=a("strong"),UMr=o("xlm-roberta"),JMr=o(" \u2014 "),vV=a("a"),YMr=o("FlaxXLMRobertaModel"),KMr=o(" (XLM-RoBERTa model)"),ZMr=l(),uve=a("p"),e4r=o("Examples:"),o4r=l(),m(LL.$$.fragment),yRe=l(),em=a("h2"),yE=a("a"),pve=a("span"),m(BL.$$.fragment),r4r=l(),_ve=a("span"),t4r=o("FlaxAutoModelForCausalLM"),wRe=l(),Sr=a("div"),m(xL.$$.fragment),a4r=l(),om=a("p"),n4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bve=a("code"),s4r=o("from_pretrained()"),l4r=o("class method or the "),vve=a("code"),i4r=o("from_config()"),d4r=o(`class
method.`),c4r=l(),kL=a("p"),m4r=o("This class cannot be instantiated directly using "),Tve=a("code"),f4r=o("__init__()"),g4r=o(" (throws an error)."),h4r=l(),At=a("div"),m(RL.$$.fragment),u4r=l(),Fve=a("p"),p4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_4r=l(),rm=a("p"),b4r=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),v4r=o("not"),T4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mve=a("code"),F4r=o("from_pretrained()"),C4r=o("to load the model weights."),M4r=l(),Eve=a("p"),E4r=o("Examples:"),y4r=l(),m(SL.$$.fragment),w4r=l(),Lo=a("div"),m(PL.$$.fragment),A4r=l(),yve=a("p"),L4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B4r=l(),xn=a("p"),x4r=o("The model class to instantiate is selected based on the "),wve=a("code"),k4r=o("model_type"),R4r=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),S4r=o("pretrained_model_name_or_path"),P4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),$4r=o("pretrained_model_name_or_path"),I4r=o(":"),N4r=l(),ca=a("ul"),wE=a("li"),Bve=a("strong"),j4r=o("bart"),D4r=o(" \u2014 "),TV=a("a"),q4r=o("FlaxBartForCausalLM"),G4r=o(" (BART model)"),O4r=l(),AE=a("li"),xve=a("strong"),X4r=o("gpt2"),V4r=o(" \u2014 "),FV=a("a"),z4r=o("FlaxGPT2LMHeadModel"),W4r=o(" (OpenAI GPT-2 model)"),Q4r=l(),LE=a("li"),kve=a("strong"),H4r=o("gpt_neo"),U4r=o(" \u2014 "),CV=a("a"),J4r=o("FlaxGPTNeoForCausalLM"),Y4r=o(" (GPT Neo model)"),K4r=l(),BE=a("li"),Rve=a("strong"),Z4r=o("gptj"),eEr=o(" \u2014 "),MV=a("a"),oEr=o("FlaxGPTJForCausalLM"),rEr=o(" (GPT-J model)"),tEr=l(),xE=a("li"),Sve=a("strong"),aEr=o("xglm"),nEr=o(" \u2014 "),EV=a("a"),sEr=o("FlaxXGLMForCausalLM"),lEr=o(" (XGLM model)"),iEr=l(),Pve=a("p"),dEr=o("Examples:"),cEr=l(),m($L.$$.fragment),ARe=l(),tm=a("h2"),kE=a("a"),$ve=a("span"),m(IL.$$.fragment),mEr=l(),Ive=a("span"),fEr=o("FlaxAutoModelForPreTraining"),LRe=l(),Pr=a("div"),m(NL.$$.fragment),gEr=l(),am=a("p"),hEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nve=a("code"),uEr=o("from_pretrained()"),pEr=o("class method or the "),jve=a("code"),_Er=o("from_config()"),bEr=o(`class
method.`),vEr=l(),jL=a("p"),TEr=o("This class cannot be instantiated directly using "),Dve=a("code"),FEr=o("__init__()"),CEr=o(" (throws an error)."),MEr=l(),Lt=a("div"),m(DL.$$.fragment),EEr=l(),qve=a("p"),yEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wEr=l(),nm=a("p"),AEr=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),LEr=o("not"),BEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ove=a("code"),xEr=o("from_pretrained()"),kEr=o("to load the model weights."),REr=l(),Xve=a("p"),SEr=o("Examples:"),PEr=l(),m(qL.$$.fragment),$Er=l(),Bo=a("div"),m(GL.$$.fragment),IEr=l(),Vve=a("p"),NEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jEr=l(),kn=a("p"),DEr=o("The model class to instantiate is selected based on the "),zve=a("code"),qEr=o("model_type"),GEr=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),OEr=o("pretrained_model_name_or_path"),XEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),VEr=o("pretrained_model_name_or_path"),zEr=o(":"),WEr=l(),ce=a("ul"),RE=a("li"),Hve=a("strong"),QEr=o("albert"),HEr=o(" \u2014 "),yV=a("a"),UEr=o("FlaxAlbertForPreTraining"),JEr=o(" (ALBERT model)"),YEr=l(),SE=a("li"),Uve=a("strong"),KEr=o("bart"),ZEr=o(" \u2014 "),wV=a("a"),e3r=o("FlaxBartForConditionalGeneration"),o3r=o(" (BART model)"),r3r=l(),PE=a("li"),Jve=a("strong"),t3r=o("bert"),a3r=o(" \u2014 "),AV=a("a"),n3r=o("FlaxBertForPreTraining"),s3r=o(" (BERT model)"),l3r=l(),$E=a("li"),Yve=a("strong"),i3r=o("big_bird"),d3r=o(" \u2014 "),LV=a("a"),c3r=o("FlaxBigBirdForPreTraining"),m3r=o(" (BigBird model)"),f3r=l(),IE=a("li"),Kve=a("strong"),g3r=o("electra"),h3r=o(" \u2014 "),BV=a("a"),u3r=o("FlaxElectraForPreTraining"),p3r=o(" (ELECTRA model)"),_3r=l(),NE=a("li"),Zve=a("strong"),b3r=o("mbart"),v3r=o(" \u2014 "),xV=a("a"),T3r=o("FlaxMBartForConditionalGeneration"),F3r=o(" (mBART model)"),C3r=l(),jE=a("li"),eTe=a("strong"),M3r=o("mt5"),E3r=o(" \u2014 "),kV=a("a"),y3r=o("FlaxMT5ForConditionalGeneration"),w3r=o(" (mT5 model)"),A3r=l(),DE=a("li"),oTe=a("strong"),L3r=o("roberta"),B3r=o(" \u2014 "),RV=a("a"),x3r=o("FlaxRobertaForMaskedLM"),k3r=o(" (RoBERTa model)"),R3r=l(),qE=a("li"),rTe=a("strong"),S3r=o("roformer"),P3r=o(" \u2014 "),SV=a("a"),$3r=o("FlaxRoFormerForMaskedLM"),I3r=o(" (RoFormer model)"),N3r=l(),GE=a("li"),tTe=a("strong"),j3r=o("t5"),D3r=o(" \u2014 "),PV=a("a"),q3r=o("FlaxT5ForConditionalGeneration"),G3r=o(" (T5 model)"),O3r=l(),OE=a("li"),aTe=a("strong"),X3r=o("wav2vec2"),V3r=o(" \u2014 "),$V=a("a"),z3r=o("FlaxWav2Vec2ForPreTraining"),W3r=o(" (Wav2Vec2 model)"),Q3r=l(),XE=a("li"),nTe=a("strong"),H3r=o("xlm-roberta"),U3r=o(" \u2014 "),IV=a("a"),J3r=o("FlaxXLMRobertaForMaskedLM"),Y3r=o(" (XLM-RoBERTa model)"),K3r=l(),sTe=a("p"),Z3r=o("Examples:"),e5r=l(),m(OL.$$.fragment),BRe=l(),sm=a("h2"),VE=a("a"),lTe=a("span"),m(XL.$$.fragment),o5r=l(),iTe=a("span"),r5r=o("FlaxAutoModelForMaskedLM"),xRe=l(),$r=a("div"),m(VL.$$.fragment),t5r=l(),lm=a("p"),a5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dTe=a("code"),n5r=o("from_pretrained()"),s5r=o("class method or the "),cTe=a("code"),l5r=o("from_config()"),i5r=o(`class
method.`),d5r=l(),zL=a("p"),c5r=o("This class cannot be instantiated directly using "),mTe=a("code"),m5r=o("__init__()"),f5r=o(" (throws an error)."),g5r=l(),Bt=a("div"),m(WL.$$.fragment),h5r=l(),fTe=a("p"),u5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p5r=l(),im=a("p"),_5r=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),b5r=o("not"),v5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hTe=a("code"),T5r=o("from_pretrained()"),F5r=o("to load the model weights."),C5r=l(),uTe=a("p"),M5r=o("Examples:"),E5r=l(),m(QL.$$.fragment),y5r=l(),xo=a("div"),m(HL.$$.fragment),w5r=l(),pTe=a("p"),A5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L5r=l(),Rn=a("p"),B5r=o("The model class to instantiate is selected based on the "),_Te=a("code"),x5r=o("model_type"),k5r=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),R5r=o("pretrained_model_name_or_path"),S5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),P5r=o("pretrained_model_name_or_path"),$5r=o(":"),I5r=l(),_e=a("ul"),zE=a("li"),TTe=a("strong"),N5r=o("albert"),j5r=o(" \u2014 "),NV=a("a"),D5r=o("FlaxAlbertForMaskedLM"),q5r=o(" (ALBERT model)"),G5r=l(),WE=a("li"),FTe=a("strong"),O5r=o("bart"),X5r=o(" \u2014 "),jV=a("a"),V5r=o("FlaxBartForConditionalGeneration"),z5r=o(" (BART model)"),W5r=l(),QE=a("li"),CTe=a("strong"),Q5r=o("bert"),H5r=o(" \u2014 "),DV=a("a"),U5r=o("FlaxBertForMaskedLM"),J5r=o(" (BERT model)"),Y5r=l(),HE=a("li"),MTe=a("strong"),K5r=o("big_bird"),Z5r=o(" \u2014 "),qV=a("a"),eyr=o("FlaxBigBirdForMaskedLM"),oyr=o(" (BigBird model)"),ryr=l(),UE=a("li"),ETe=a("strong"),tyr=o("distilbert"),ayr=o(" \u2014 "),GV=a("a"),nyr=o("FlaxDistilBertForMaskedLM"),syr=o(" (DistilBERT model)"),lyr=l(),JE=a("li"),yTe=a("strong"),iyr=o("electra"),dyr=o(" \u2014 "),OV=a("a"),cyr=o("FlaxElectraForMaskedLM"),myr=o(" (ELECTRA model)"),fyr=l(),YE=a("li"),wTe=a("strong"),gyr=o("mbart"),hyr=o(" \u2014 "),XV=a("a"),uyr=o("FlaxMBartForConditionalGeneration"),pyr=o(" (mBART model)"),_yr=l(),KE=a("li"),ATe=a("strong"),byr=o("roberta"),vyr=o(" \u2014 "),VV=a("a"),Tyr=o("FlaxRobertaForMaskedLM"),Fyr=o(" (RoBERTa model)"),Cyr=l(),ZE=a("li"),LTe=a("strong"),Myr=o("roformer"),Eyr=o(" \u2014 "),zV=a("a"),yyr=o("FlaxRoFormerForMaskedLM"),wyr=o(" (RoFormer model)"),Ayr=l(),e3=a("li"),BTe=a("strong"),Lyr=o("xlm-roberta"),Byr=o(" \u2014 "),WV=a("a"),xyr=o("FlaxXLMRobertaForMaskedLM"),kyr=o(" (XLM-RoBERTa model)"),Ryr=l(),xTe=a("p"),Syr=o("Examples:"),Pyr=l(),m(UL.$$.fragment),kRe=l(),dm=a("h2"),o3=a("a"),kTe=a("span"),m(JL.$$.fragment),$yr=l(),RTe=a("span"),Iyr=o("FlaxAutoModelForSeq2SeqLM"),RRe=l(),Ir=a("div"),m(YL.$$.fragment),Nyr=l(),cm=a("p"),jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),STe=a("code"),Dyr=o("from_pretrained()"),qyr=o("class method or the "),PTe=a("code"),Gyr=o("from_config()"),Oyr=o(`class
method.`),Xyr=l(),KL=a("p"),Vyr=o("This class cannot be instantiated directly using "),$Te=a("code"),zyr=o("__init__()"),Wyr=o(" (throws an error)."),Qyr=l(),xt=a("div"),m(ZL.$$.fragment),Hyr=l(),ITe=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jyr=l(),mm=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jTe=a("code"),ewr=o("from_pretrained()"),owr=o("to load the model weights."),rwr=l(),DTe=a("p"),twr=o("Examples:"),awr=l(),m(e7.$$.fragment),nwr=l(),ko=a("div"),m(o7.$$.fragment),swr=l(),qTe=a("p"),lwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iwr=l(),Sn=a("p"),dwr=o("The model class to instantiate is selected based on the "),GTe=a("code"),cwr=o("model_type"),mwr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),fwr=o("pretrained_model_name_or_path"),gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),hwr=o("pretrained_model_name_or_path"),uwr=o(":"),pwr=l(),Me=a("ul"),r3=a("li"),VTe=a("strong"),_wr=o("bart"),bwr=o(" \u2014 "),QV=a("a"),vwr=o("FlaxBartForConditionalGeneration"),Twr=o(" (BART model)"),Fwr=l(),t3=a("li"),zTe=a("strong"),Cwr=o("blenderbot"),Mwr=o(" \u2014 "),HV=a("a"),Ewr=o("FlaxBlenderbotForConditionalGeneration"),ywr=o(" (Blenderbot model)"),wwr=l(),a3=a("li"),WTe=a("strong"),Awr=o("blenderbot-small"),Lwr=o(" \u2014 "),UV=a("a"),Bwr=o("FlaxBlenderbotSmallForConditionalGeneration"),xwr=o(" (BlenderbotSmall model)"),kwr=l(),n3=a("li"),QTe=a("strong"),Rwr=o("encoder-decoder"),Swr=o(" \u2014 "),JV=a("a"),Pwr=o("FlaxEncoderDecoderModel"),$wr=o(" (Encoder decoder model)"),Iwr=l(),s3=a("li"),HTe=a("strong"),Nwr=o("marian"),jwr=o(" \u2014 "),YV=a("a"),Dwr=o("FlaxMarianMTModel"),qwr=o(" (Marian model)"),Gwr=l(),l3=a("li"),UTe=a("strong"),Owr=o("mbart"),Xwr=o(" \u2014 "),KV=a("a"),Vwr=o("FlaxMBartForConditionalGeneration"),zwr=o(" (mBART model)"),Wwr=l(),i3=a("li"),JTe=a("strong"),Qwr=o("mt5"),Hwr=o(" \u2014 "),ZV=a("a"),Uwr=o("FlaxMT5ForConditionalGeneration"),Jwr=o(" (mT5 model)"),Ywr=l(),d3=a("li"),YTe=a("strong"),Kwr=o("pegasus"),Zwr=o(" \u2014 "),ez=a("a"),e6r=o("FlaxPegasusForConditionalGeneration"),o6r=o(" (Pegasus model)"),r6r=l(),c3=a("li"),KTe=a("strong"),t6r=o("t5"),a6r=o(" \u2014 "),oz=a("a"),n6r=o("FlaxT5ForConditionalGeneration"),s6r=o(" (T5 model)"),l6r=l(),ZTe=a("p"),i6r=o("Examples:"),d6r=l(),m(r7.$$.fragment),SRe=l(),fm=a("h2"),m3=a("a"),e1e=a("span"),m(t7.$$.fragment),c6r=l(),o1e=a("span"),m6r=o("FlaxAutoModelForSequenceClassification"),PRe=l(),Nr=a("div"),m(a7.$$.fragment),f6r=l(),gm=a("p"),g6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),r1e=a("code"),h6r=o("from_pretrained()"),u6r=o("class method or the "),t1e=a("code"),p6r=o("from_config()"),_6r=o(`class
method.`),b6r=l(),n7=a("p"),v6r=o("This class cannot be instantiated directly using "),a1e=a("code"),T6r=o("__init__()"),F6r=o(" (throws an error)."),C6r=l(),kt=a("div"),m(s7.$$.fragment),M6r=l(),n1e=a("p"),E6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y6r=l(),hm=a("p"),w6r=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),A6r=o("not"),L6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l1e=a("code"),B6r=o("from_pretrained()"),x6r=o("to load the model weights."),k6r=l(),i1e=a("p"),R6r=o("Examples:"),S6r=l(),m(l7.$$.fragment),P6r=l(),Ro=a("div"),m(i7.$$.fragment),$6r=l(),d1e=a("p"),I6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),N6r=l(),Pn=a("p"),j6r=o("The model class to instantiate is selected based on the "),c1e=a("code"),D6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),X6r=o("pretrained_model_name_or_path"),V6r=o(":"),z6r=l(),be=a("ul"),f3=a("li"),g1e=a("strong"),W6r=o("albert"),Q6r=o(" \u2014 "),rz=a("a"),H6r=o("FlaxAlbertForSequenceClassification"),U6r=o(" (ALBERT model)"),J6r=l(),g3=a("li"),h1e=a("strong"),Y6r=o("bart"),K6r=o(" \u2014 "),tz=a("a"),Z6r=o("FlaxBartForSequenceClassification"),eAr=o(" (BART model)"),oAr=l(),h3=a("li"),u1e=a("strong"),rAr=o("bert"),tAr=o(" \u2014 "),az=a("a"),aAr=o("FlaxBertForSequenceClassification"),nAr=o(" (BERT model)"),sAr=l(),u3=a("li"),p1e=a("strong"),lAr=o("big_bird"),iAr=o(" \u2014 "),nz=a("a"),dAr=o("FlaxBigBirdForSequenceClassification"),cAr=o(" (BigBird model)"),mAr=l(),p3=a("li"),_1e=a("strong"),fAr=o("distilbert"),gAr=o(" \u2014 "),sz=a("a"),hAr=o("FlaxDistilBertForSequenceClassification"),uAr=o(" (DistilBERT model)"),pAr=l(),_3=a("li"),b1e=a("strong"),_Ar=o("electra"),bAr=o(" \u2014 "),lz=a("a"),vAr=o("FlaxElectraForSequenceClassification"),TAr=o(" (ELECTRA model)"),FAr=l(),b3=a("li"),v1e=a("strong"),CAr=o("mbart"),MAr=o(" \u2014 "),iz=a("a"),EAr=o("FlaxMBartForSequenceClassification"),yAr=o(" (mBART model)"),wAr=l(),v3=a("li"),T1e=a("strong"),AAr=o("roberta"),LAr=o(" \u2014 "),dz=a("a"),BAr=o("FlaxRobertaForSequenceClassification"),xAr=o(" (RoBERTa model)"),kAr=l(),T3=a("li"),F1e=a("strong"),RAr=o("roformer"),SAr=o(" \u2014 "),cz=a("a"),PAr=o("FlaxRoFormerForSequenceClassification"),$Ar=o(" (RoFormer model)"),IAr=l(),F3=a("li"),C1e=a("strong"),NAr=o("xlm-roberta"),jAr=o(" \u2014 "),mz=a("a"),DAr=o("FlaxXLMRobertaForSequenceClassification"),qAr=o(" (XLM-RoBERTa model)"),GAr=l(),M1e=a("p"),OAr=o("Examples:"),XAr=l(),m(d7.$$.fragment),$Re=l(),um=a("h2"),C3=a("a"),E1e=a("span"),m(c7.$$.fragment),VAr=l(),y1e=a("span"),zAr=o("FlaxAutoModelForQuestionAnswering"),IRe=l(),jr=a("div"),m(m7.$$.fragment),WAr=l(),pm=a("p"),QAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),w1e=a("code"),HAr=o("from_pretrained()"),UAr=o("class method or the "),A1e=a("code"),JAr=o("from_config()"),YAr=o(`class
method.`),KAr=l(),f7=a("p"),ZAr=o("This class cannot be instantiated directly using "),L1e=a("code"),e0r=o("__init__()"),o0r=o(" (throws an error)."),r0r=l(),Rt=a("div"),m(g7.$$.fragment),t0r=l(),B1e=a("p"),a0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),n0r=l(),_m=a("p"),s0r=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),l0r=o("not"),i0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k1e=a("code"),d0r=o("from_pretrained()"),c0r=o("to load the model weights."),m0r=l(),R1e=a("p"),f0r=o("Examples:"),g0r=l(),m(h7.$$.fragment),h0r=l(),So=a("div"),m(u7.$$.fragment),u0r=l(),S1e=a("p"),p0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_0r=l(),$n=a("p"),b0r=o("The model class to instantiate is selected based on the "),P1e=a("code"),v0r=o("model_type"),T0r=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),F0r=o("pretrained_model_name_or_path"),C0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),M0r=o("pretrained_model_name_or_path"),E0r=o(":"),y0r=l(),ve=a("ul"),M3=a("li"),N1e=a("strong"),w0r=o("albert"),A0r=o(" \u2014 "),fz=a("a"),L0r=o("FlaxAlbertForQuestionAnswering"),B0r=o(" (ALBERT model)"),x0r=l(),E3=a("li"),j1e=a("strong"),k0r=o("bart"),R0r=o(" \u2014 "),gz=a("a"),S0r=o("FlaxBartForQuestionAnswering"),P0r=o(" (BART model)"),$0r=l(),y3=a("li"),D1e=a("strong"),I0r=o("bert"),N0r=o(" \u2014 "),hz=a("a"),j0r=o("FlaxBertForQuestionAnswering"),D0r=o(" (BERT model)"),q0r=l(),w3=a("li"),q1e=a("strong"),G0r=o("big_bird"),O0r=o(" \u2014 "),uz=a("a"),X0r=o("FlaxBigBirdForQuestionAnswering"),V0r=o(" (BigBird model)"),z0r=l(),A3=a("li"),G1e=a("strong"),W0r=o("distilbert"),Q0r=o(" \u2014 "),pz=a("a"),H0r=o("FlaxDistilBertForQuestionAnswering"),U0r=o(" (DistilBERT model)"),J0r=l(),L3=a("li"),O1e=a("strong"),Y0r=o("electra"),K0r=o(" \u2014 "),_z=a("a"),Z0r=o("FlaxElectraForQuestionAnswering"),eLr=o(" (ELECTRA model)"),oLr=l(),B3=a("li"),X1e=a("strong"),rLr=o("mbart"),tLr=o(" \u2014 "),bz=a("a"),aLr=o("FlaxMBartForQuestionAnswering"),nLr=o(" (mBART model)"),sLr=l(),x3=a("li"),V1e=a("strong"),lLr=o("roberta"),iLr=o(" \u2014 "),vz=a("a"),dLr=o("FlaxRobertaForQuestionAnswering"),cLr=o(" (RoBERTa model)"),mLr=l(),k3=a("li"),z1e=a("strong"),fLr=o("roformer"),gLr=o(" \u2014 "),Tz=a("a"),hLr=o("FlaxRoFormerForQuestionAnswering"),uLr=o(" (RoFormer model)"),pLr=l(),R3=a("li"),W1e=a("strong"),_Lr=o("xlm-roberta"),bLr=o(" \u2014 "),Fz=a("a"),vLr=o("FlaxXLMRobertaForQuestionAnswering"),TLr=o(" (XLM-RoBERTa model)"),FLr=l(),Q1e=a("p"),CLr=o("Examples:"),MLr=l(),m(p7.$$.fragment),NRe=l(),bm=a("h2"),S3=a("a"),H1e=a("span"),m(_7.$$.fragment),ELr=l(),U1e=a("span"),yLr=o("FlaxAutoModelForTokenClassification"),jRe=l(),Dr=a("div"),m(b7.$$.fragment),wLr=l(),vm=a("p"),ALr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),J1e=a("code"),LLr=o("from_pretrained()"),BLr=o("class method or the "),Y1e=a("code"),xLr=o("from_config()"),kLr=o(`class
method.`),RLr=l(),v7=a("p"),SLr=o("This class cannot be instantiated directly using "),K1e=a("code"),PLr=o("__init__()"),$Lr=o(" (throws an error)."),ILr=l(),St=a("div"),m(T7.$$.fragment),NLr=l(),Z1e=a("p"),jLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DLr=l(),Tm=a("p"),qLr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),GLr=o("not"),OLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oFe=a("code"),XLr=o("from_pretrained()"),VLr=o("to load the model weights."),zLr=l(),rFe=a("p"),WLr=o("Examples:"),QLr=l(),m(F7.$$.fragment),HLr=l(),Po=a("div"),m(C7.$$.fragment),ULr=l(),tFe=a("p"),JLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YLr=l(),In=a("p"),KLr=o("The model class to instantiate is selected based on the "),aFe=a("code"),ZLr=o("model_type"),e7r=o(` property of the config object (either
passed as an argument or loaded from `),nFe=a("code"),o7r=o("pretrained_model_name_or_path"),r7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=a("code"),t7r=o("pretrained_model_name_or_path"),a7r=o(":"),n7r=l(),Se=a("ul"),P3=a("li"),lFe=a("strong"),s7r=o("albert"),l7r=o(" \u2014 "),Cz=a("a"),i7r=o("FlaxAlbertForTokenClassification"),d7r=o(" (ALBERT model)"),c7r=l(),$3=a("li"),iFe=a("strong"),m7r=o("bert"),f7r=o(" \u2014 "),Mz=a("a"),g7r=o("FlaxBertForTokenClassification"),h7r=o(" (BERT model)"),u7r=l(),I3=a("li"),dFe=a("strong"),p7r=o("big_bird"),_7r=o(" \u2014 "),Ez=a("a"),b7r=o("FlaxBigBirdForTokenClassification"),v7r=o(" (BigBird model)"),T7r=l(),N3=a("li"),cFe=a("strong"),F7r=o("distilbert"),C7r=o(" \u2014 "),yz=a("a"),M7r=o("FlaxDistilBertForTokenClassification"),E7r=o(" (DistilBERT model)"),y7r=l(),j3=a("li"),mFe=a("strong"),w7r=o("electra"),A7r=o(" \u2014 "),wz=a("a"),L7r=o("FlaxElectraForTokenClassification"),B7r=o(" (ELECTRA model)"),x7r=l(),D3=a("li"),fFe=a("strong"),k7r=o("roberta"),R7r=o(" \u2014 "),Az=a("a"),S7r=o("FlaxRobertaForTokenClassification"),P7r=o(" (RoBERTa model)"),$7r=l(),q3=a("li"),gFe=a("strong"),I7r=o("roformer"),N7r=o(" \u2014 "),Lz=a("a"),j7r=o("FlaxRoFormerForTokenClassification"),D7r=o(" (RoFormer model)"),q7r=l(),G3=a("li"),hFe=a("strong"),G7r=o("xlm-roberta"),O7r=o(" \u2014 "),Bz=a("a"),X7r=o("FlaxXLMRobertaForTokenClassification"),V7r=o(" (XLM-RoBERTa model)"),z7r=l(),uFe=a("p"),W7r=o("Examples:"),Q7r=l(),m(M7.$$.fragment),DRe=l(),Fm=a("h2"),O3=a("a"),pFe=a("span"),m(E7.$$.fragment),H7r=l(),_Fe=a("span"),U7r=o("FlaxAutoModelForMultipleChoice"),qRe=l(),qr=a("div"),m(y7.$$.fragment),J7r=l(),Cm=a("p"),Y7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bFe=a("code"),K7r=o("from_pretrained()"),Z7r=o("class method or the "),vFe=a("code"),e8r=o("from_config()"),o8r=o(`class
method.`),r8r=l(),w7=a("p"),t8r=o("This class cannot be instantiated directly using "),TFe=a("code"),a8r=o("__init__()"),n8r=o(" (throws an error)."),s8r=l(),Pt=a("div"),m(A7.$$.fragment),l8r=l(),FFe=a("p"),i8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d8r=l(),Mm=a("p"),c8r=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),m8r=o("not"),f8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MFe=a("code"),g8r=o("from_pretrained()"),h8r=o("to load the model weights."),u8r=l(),EFe=a("p"),p8r=o("Examples:"),_8r=l(),m(L7.$$.fragment),b8r=l(),$o=a("div"),m(B7.$$.fragment),v8r=l(),yFe=a("p"),T8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F8r=l(),Nn=a("p"),C8r=o("The model class to instantiate is selected based on the "),wFe=a("code"),M8r=o("model_type"),E8r=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),y8r=o("pretrained_model_name_or_path"),w8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),A8r=o("pretrained_model_name_or_path"),L8r=o(":"),B8r=l(),Pe=a("ul"),X3=a("li"),BFe=a("strong"),x8r=o("albert"),k8r=o(" \u2014 "),xz=a("a"),R8r=o("FlaxAlbertForMultipleChoice"),S8r=o(" (ALBERT model)"),P8r=l(),V3=a("li"),xFe=a("strong"),$8r=o("bert"),I8r=o(" \u2014 "),kz=a("a"),N8r=o("FlaxBertForMultipleChoice"),j8r=o(" (BERT model)"),D8r=l(),z3=a("li"),kFe=a("strong"),q8r=o("big_bird"),G8r=o(" \u2014 "),Rz=a("a"),O8r=o("FlaxBigBirdForMultipleChoice"),X8r=o(" (BigBird model)"),V8r=l(),W3=a("li"),RFe=a("strong"),z8r=o("distilbert"),W8r=o(" \u2014 "),Sz=a("a"),Q8r=o("FlaxDistilBertForMultipleChoice"),H8r=o(" (DistilBERT model)"),U8r=l(),Q3=a("li"),SFe=a("strong"),J8r=o("electra"),Y8r=o(" \u2014 "),Pz=a("a"),K8r=o("FlaxElectraForMultipleChoice"),Z8r=o(" (ELECTRA model)"),e9r=l(),H3=a("li"),PFe=a("strong"),o9r=o("roberta"),r9r=o(" \u2014 "),$z=a("a"),t9r=o("FlaxRobertaForMultipleChoice"),a9r=o(" (RoBERTa model)"),n9r=l(),U3=a("li"),$Fe=a("strong"),s9r=o("roformer"),l9r=o(" \u2014 "),Iz=a("a"),i9r=o("FlaxRoFormerForMultipleChoice"),d9r=o(" (RoFormer model)"),c9r=l(),J3=a("li"),IFe=a("strong"),m9r=o("xlm-roberta"),f9r=o(" \u2014 "),Nz=a("a"),g9r=o("FlaxXLMRobertaForMultipleChoice"),h9r=o(" (XLM-RoBERTa model)"),u9r=l(),NFe=a("p"),p9r=o("Examples:"),_9r=l(),m(x7.$$.fragment),GRe=l(),Em=a("h2"),Y3=a("a"),jFe=a("span"),m(k7.$$.fragment),b9r=l(),DFe=a("span"),v9r=o("FlaxAutoModelForNextSentencePrediction"),ORe=l(),Gr=a("div"),m(R7.$$.fragment),T9r=l(),ym=a("p"),F9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qFe=a("code"),C9r=o("from_pretrained()"),M9r=o("class method or the "),GFe=a("code"),E9r=o("from_config()"),y9r=o(`class
method.`),w9r=l(),S7=a("p"),A9r=o("This class cannot be instantiated directly using "),OFe=a("code"),L9r=o("__init__()"),B9r=o(" (throws an error)."),x9r=l(),$t=a("div"),m(P7.$$.fragment),k9r=l(),XFe=a("p"),R9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S9r=l(),wm=a("p"),P9r=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),$9r=o("not"),I9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zFe=a("code"),N9r=o("from_pretrained()"),j9r=o("to load the model weights."),D9r=l(),WFe=a("p"),q9r=o("Examples:"),G9r=l(),m($7.$$.fragment),O9r=l(),Io=a("div"),m(I7.$$.fragment),X9r=l(),QFe=a("p"),V9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z9r=l(),jn=a("p"),W9r=o("The model class to instantiate is selected based on the "),HFe=a("code"),Q9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),U9r=o("pretrained_model_name_or_path"),J9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(":"),Z9r=l(),YFe=a("ul"),K3=a("li"),KFe=a("strong"),eBr=o("bert"),oBr=o(" \u2014 "),jz=a("a"),rBr=o("FlaxBertForNextSentencePrediction"),tBr=o(" (BERT model)"),aBr=l(),ZFe=a("p"),nBr=o("Examples:"),sBr=l(),m(N7.$$.fragment),XRe=l(),Am=a("h2"),Z3=a("a"),eCe=a("span"),m(j7.$$.fragment),lBr=l(),oCe=a("span"),iBr=o("FlaxAutoModelForImageClassification"),VRe=l(),Or=a("div"),m(D7.$$.fragment),dBr=l(),Lm=a("p"),cBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rCe=a("code"),mBr=o("from_pretrained()"),fBr=o("class method or the "),tCe=a("code"),gBr=o("from_config()"),hBr=o(`class
method.`),uBr=l(),q7=a("p"),pBr=o("This class cannot be instantiated directly using "),aCe=a("code"),_Br=o("__init__()"),bBr=o(" (throws an error)."),vBr=l(),It=a("div"),m(G7.$$.fragment),TBr=l(),nCe=a("p"),FBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),CBr=l(),Bm=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),sCe=a("strong"),EBr=o("not"),yBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lCe=a("code"),wBr=o("from_pretrained()"),ABr=o("to load the model weights."),LBr=l(),iCe=a("p"),BBr=o("Examples:"),xBr=l(),m(O7.$$.fragment),kBr=l(),No=a("div"),m(X7.$$.fragment),RBr=l(),dCe=a("p"),SBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PBr=l(),Dn=a("p"),$Br=o("The model class to instantiate is selected based on the "),cCe=a("code"),IBr=o("model_type"),NBr=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),jBr=o("pretrained_model_name_or_path"),DBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),qBr=o("pretrained_model_name_or_path"),GBr=o(":"),OBr=l(),V7=a("ul"),e5=a("li"),gCe=a("strong"),XBr=o("beit"),VBr=o(" \u2014 "),Dz=a("a"),zBr=o("FlaxBeitForImageClassification"),WBr=o(" (BEiT model)"),QBr=l(),o5=a("li"),hCe=a("strong"),HBr=o("vit"),UBr=o(" \u2014 "),qz=a("a"),JBr=o("FlaxViTForImageClassification"),YBr=o(" (ViT model)"),KBr=l(),uCe=a("p"),ZBr=o("Examples:"),exr=l(),m(z7.$$.fragment),zRe=l(),xm=a("h2"),r5=a("a"),pCe=a("span"),m(W7.$$.fragment),oxr=l(),_Ce=a("span"),rxr=o("FlaxAutoModelForVision2Seq"),WRe=l(),Xr=a("div"),m(Q7.$$.fragment),txr=l(),km=a("p"),axr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bCe=a("code"),nxr=o("from_pretrained()"),sxr=o("class method or the "),vCe=a("code"),lxr=o("from_config()"),ixr=o(`class
method.`),dxr=l(),H7=a("p"),cxr=o("This class cannot be instantiated directly using "),TCe=a("code"),mxr=o("__init__()"),fxr=o(" (throws an error)."),gxr=l(),Nt=a("div"),m(U7.$$.fragment),hxr=l(),FCe=a("p"),uxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pxr=l(),Rm=a("p"),_xr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),bxr=o("not"),vxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MCe=a("code"),Txr=o("from_pretrained()"),Fxr=o("to load the model weights."),Cxr=l(),ECe=a("p"),Mxr=o("Examples:"),Exr=l(),m(J7.$$.fragment),yxr=l(),jo=a("div"),m(Y7.$$.fragment),wxr=l(),yCe=a("p"),Axr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lxr=l(),qn=a("p"),Bxr=o("The model class to instantiate is selected based on the "),wCe=a("code"),xxr=o("model_type"),kxr=o(` property of the config object (either
passed as an argument or loaded from `),ACe=a("code"),Rxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LCe=a("code"),Pxr=o("pretrained_model_name_or_path"),$xr=o(":"),Ixr=l(),BCe=a("ul"),t5=a("li"),xCe=a("strong"),Nxr=o("vision-encoder-decoder"),jxr=o(" \u2014 "),Gz=a("a"),Dxr=o("FlaxVisionEncoderDecoderModel"),qxr=o(" (Vision Encoder decoder model)"),Gxr=l(),kCe=a("p"),Oxr=o("Examples:"),Xxr=l(),m(K7.$$.fragment),this.h()},l(c){const _=q4t('[data-svelte="svelte-1phssyn"]',document.head);K=n(_,"META",{name:!0,content:!0}),_.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var Z7=s(de);Ee=n(Z7,"A",{id:!0,class:!0,href:!0});var RCe=s(Ee);lo=n(RCe,"SPAN",{});var SCe=s(lo);f(me.$$.fragment,SCe),SCe.forEach(t),RCe.forEach(t),Ce=i(Z7),Vo=n(Z7,"SPAN",{});var zxr=s(Vo);Ii=r(zxr,"Auto Classes"),zxr.forEach(t),Z7.forEach(t),$m=i(c),ma=n(c,"P",{});var HRe=s(ma);Ni=r(HRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(HRe,"CODE",{});var Wxr=s(ji);ty=r(Wxr,"from_pretrained()"),Wxr.forEach(t),Im=r(HRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),HRe.forEach(t),Be=i(c),co=n(c,"P",{});var a5=s(co);Di=r(a5,"Instantiating one of "),Gn=n(a5,"A",{href:!0});var Qxr=s(Gn);ay=r(Qxr,"AutoConfig"),Qxr.forEach(t),On=r(a5,", "),Xn=n(a5,"A",{href:!0});var Hxr=s(Xn);ny=r(Hxr,"AutoModel"),Hxr.forEach(t),qi=r(a5,`, and
`),Vn=n(a5,"A",{href:!0});var Uxr=s(Vn);sy=r(Uxr,"AutoTokenizer"),Uxr.forEach(t),Gi=r(a5," will directly create a class of the relevant architecture. For instance"),a5.forEach(t),Nm=i(c),f(qa.$$.fragment,c),mo=i(c),ue=n(c,"P",{});var URe=s(ue);J8=r(URe,"will create a model that is an instance of "),Oi=n(URe,"A",{href:!0});var Jxr=s(Oi);Y8=r(Jxr,"BertModel"),Jxr.forEach(t),K8=r(URe,"."),URe.forEach(t),zo=i(c),Ga=n(c,"P",{});var JRe=s(Ga);Z8=r(JRe,"There is one class of "),jm=n(JRe,"CODE",{});var Yxr=s(jm);e9=r(Yxr,"AutoModel"),Yxr.forEach(t),s$e=r(JRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),JRe.forEach(t),Wxe=i(c),Xi=n(c,"H2",{class:!0});var YRe=s(Xi);Dm=n(YRe,"A",{id:!0,class:!0,href:!0});var Kxr=s(Dm);PQ=n(Kxr,"SPAN",{});var Zxr=s(PQ);f(ly.$$.fragment,Zxr),Zxr.forEach(t),Kxr.forEach(t),l$e=i(YRe),$Q=n(YRe,"SPAN",{});var ekr=s($Q);i$e=r(ekr,"Extending the Auto Classes"),ekr.forEach(t),YRe.forEach(t),Qxe=i(c),zn=n(c,"P",{});var Oz=s(zn);d$e=r(Oz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),IQ=n(Oz,"CODE",{});var okr=s(IQ);c$e=r(okr,"NewModel"),okr.forEach(t),m$e=r(Oz,", make sure you have a "),NQ=n(Oz,"CODE",{});var rkr=s(NQ);f$e=r(rkr,"NewModelConfig"),rkr.forEach(t),g$e=r(Oz,` then you can add those to the auto
classes like this:`),Oz.forEach(t),Hxe=i(c),f(iy.$$.fragment,c),Uxe=i(c),o9=n(c,"P",{});var tkr=s(o9);h$e=r(tkr,"You will then be able to use the auto classes like you would usually do!"),tkr.forEach(t),Jxe=i(c),f(qm.$$.fragment,c),Yxe=i(c),Vi=n(c,"H2",{class:!0});var KRe=s(Vi);Gm=n(KRe,"A",{id:!0,class:!0,href:!0});var akr=s(Gm);jQ=n(akr,"SPAN",{});var nkr=s(jQ);f(dy.$$.fragment,nkr),nkr.forEach(t),akr.forEach(t),u$e=i(KRe),DQ=n(KRe,"SPAN",{});var skr=s(DQ);p$e=r(skr,"AutoConfig"),skr.forEach(t),KRe.forEach(t),Kxe=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);f(cy.$$.fragment,Os),_$e=i(Os),my=n(Os,"P",{});var ZRe=s(my);b$e=r(ZRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),r9=n(ZRe,"A",{href:!0});var lkr=s(r9);v$e=r(lkr,"from_pretrained()"),lkr.forEach(t),T$e=r(ZRe," class method."),ZRe.forEach(t),F$e=i(Os),fy=n(Os,"P",{});var eSe=s(fy);C$e=r(eSe,"This class cannot be instantiated directly using "),qQ=n(eSe,"CODE",{});var ikr=s(qQ);M$e=r(ikr,"__init__()"),ikr.forEach(t),E$e=r(eSe," (throws an error)."),eSe.forEach(t),y$e=i(Os),fo=n(Os,"DIV",{class:!0});var ga=s(fo);f(gy.$$.fragment,ga),w$e=i(ga),GQ=n(ga,"P",{});var dkr=s(GQ);A$e=r(dkr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dkr.forEach(t),L$e=i(ga),zi=n(ga,"P",{});var Xz=s(zi);B$e=r(Xz,"The configuration class to instantiate is selected based on the "),OQ=n(Xz,"CODE",{});var ckr=s(OQ);x$e=r(ckr,"model_type"),ckr.forEach(t),k$e=r(Xz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XQ=n(Xz,"CODE",{});var mkr=s(XQ);R$e=r(mkr,"pretrained_model_name_or_path"),mkr.forEach(t),S$e=r(Xz,":"),Xz.forEach(t),P$e=i(ga),v=n(ga,"UL",{});var T=s(v);Om=n(T,"LI",{});var PCe=s(Om);VQ=n(PCe,"STRONG",{});var fkr=s(VQ);$$e=r(fkr,"albert"),fkr.forEach(t),I$e=r(PCe," \u2014 "),t9=n(PCe,"A",{href:!0});var gkr=s(t9);N$e=r(gkr,"AlbertConfig"),gkr.forEach(t),j$e=r(PCe," (ALBERT model)"),PCe.forEach(t),D$e=i(T),Xm=n(T,"LI",{});var $Ce=s(Xm);zQ=n($Ce,"STRONG",{});var hkr=s(zQ);q$e=r(hkr,"bart"),hkr.forEach(t),G$e=r($Ce," \u2014 "),a9=n($Ce,"A",{href:!0});var ukr=s(a9);O$e=r(ukr,"BartConfig"),ukr.forEach(t),X$e=r($Ce," (BART model)"),$Ce.forEach(t),V$e=i(T),Vm=n(T,"LI",{});var ICe=s(Vm);WQ=n(ICe,"STRONG",{});var pkr=s(WQ);z$e=r(pkr,"beit"),pkr.forEach(t),W$e=r(ICe," \u2014 "),n9=n(ICe,"A",{href:!0});var _kr=s(n9);Q$e=r(_kr,"BeitConfig"),_kr.forEach(t),H$e=r(ICe," (BEiT model)"),ICe.forEach(t),U$e=i(T),zm=n(T,"LI",{});var NCe=s(zm);QQ=n(NCe,"STRONG",{});var bkr=s(QQ);J$e=r(bkr,"bert"),bkr.forEach(t),Y$e=r(NCe," \u2014 "),s9=n(NCe,"A",{href:!0});var vkr=s(s9);K$e=r(vkr,"BertConfig"),vkr.forEach(t),Z$e=r(NCe," (BERT model)"),NCe.forEach(t),eIe=i(T),Wm=n(T,"LI",{});var jCe=s(Wm);HQ=n(jCe,"STRONG",{});var Tkr=s(HQ);oIe=r(Tkr,"bert-generation"),Tkr.forEach(t),rIe=r(jCe," \u2014 "),l9=n(jCe,"A",{href:!0});var Fkr=s(l9);tIe=r(Fkr,"BertGenerationConfig"),Fkr.forEach(t),aIe=r(jCe," (Bert Generation model)"),jCe.forEach(t),nIe=i(T),Qm=n(T,"LI",{});var DCe=s(Qm);UQ=n(DCe,"STRONG",{});var Ckr=s(UQ);sIe=r(Ckr,"big_bird"),Ckr.forEach(t),lIe=r(DCe," \u2014 "),i9=n(DCe,"A",{href:!0});var Mkr=s(i9);iIe=r(Mkr,"BigBirdConfig"),Mkr.forEach(t),dIe=r(DCe," (BigBird model)"),DCe.forEach(t),cIe=i(T),Hm=n(T,"LI",{});var qCe=s(Hm);JQ=n(qCe,"STRONG",{});var Ekr=s(JQ);mIe=r(Ekr,"bigbird_pegasus"),Ekr.forEach(t),fIe=r(qCe," \u2014 "),d9=n(qCe,"A",{href:!0});var ykr=s(d9);gIe=r(ykr,"BigBirdPegasusConfig"),ykr.forEach(t),hIe=r(qCe," (BigBirdPegasus model)"),qCe.forEach(t),uIe=i(T),Um=n(T,"LI",{});var GCe=s(Um);YQ=n(GCe,"STRONG",{});var wkr=s(YQ);pIe=r(wkr,"blenderbot"),wkr.forEach(t),_Ie=r(GCe," \u2014 "),c9=n(GCe,"A",{href:!0});var Akr=s(c9);bIe=r(Akr,"BlenderbotConfig"),Akr.forEach(t),vIe=r(GCe," (Blenderbot model)"),GCe.forEach(t),TIe=i(T),Jm=n(T,"LI",{});var OCe=s(Jm);KQ=n(OCe,"STRONG",{});var Lkr=s(KQ);FIe=r(Lkr,"blenderbot-small"),Lkr.forEach(t),CIe=r(OCe," \u2014 "),m9=n(OCe,"A",{href:!0});var Bkr=s(m9);MIe=r(Bkr,"BlenderbotSmallConfig"),Bkr.forEach(t),EIe=r(OCe," (BlenderbotSmall model)"),OCe.forEach(t),yIe=i(T),Ym=n(T,"LI",{});var XCe=s(Ym);ZQ=n(XCe,"STRONG",{});var xkr=s(ZQ);wIe=r(xkr,"camembert"),xkr.forEach(t),AIe=r(XCe," \u2014 "),f9=n(XCe,"A",{href:!0});var kkr=s(f9);LIe=r(kkr,"CamembertConfig"),kkr.forEach(t),BIe=r(XCe," (CamemBERT model)"),XCe.forEach(t),xIe=i(T),Km=n(T,"LI",{});var VCe=s(Km);eH=n(VCe,"STRONG",{});var Rkr=s(eH);kIe=r(Rkr,"canine"),Rkr.forEach(t),RIe=r(VCe," \u2014 "),g9=n(VCe,"A",{href:!0});var Skr=s(g9);SIe=r(Skr,"CanineConfig"),Skr.forEach(t),PIe=r(VCe," (Canine model)"),VCe.forEach(t),$Ie=i(T),Zm=n(T,"LI",{});var zCe=s(Zm);oH=n(zCe,"STRONG",{});var Pkr=s(oH);IIe=r(Pkr,"clip"),Pkr.forEach(t),NIe=r(zCe," \u2014 "),h9=n(zCe,"A",{href:!0});var $kr=s(h9);jIe=r($kr,"CLIPConfig"),$kr.forEach(t),DIe=r(zCe," (CLIP model)"),zCe.forEach(t),qIe=i(T),ef=n(T,"LI",{});var WCe=s(ef);rH=n(WCe,"STRONG",{});var Ikr=s(rH);GIe=r(Ikr,"convbert"),Ikr.forEach(t),OIe=r(WCe," \u2014 "),u9=n(WCe,"A",{href:!0});var Nkr=s(u9);XIe=r(Nkr,"ConvBertConfig"),Nkr.forEach(t),VIe=r(WCe," (ConvBERT model)"),WCe.forEach(t),zIe=i(T),of=n(T,"LI",{});var QCe=s(of);tH=n(QCe,"STRONG",{});var jkr=s(tH);WIe=r(jkr,"convnext"),jkr.forEach(t),QIe=r(QCe," \u2014 "),p9=n(QCe,"A",{href:!0});var Dkr=s(p9);HIe=r(Dkr,"ConvNextConfig"),Dkr.forEach(t),UIe=r(QCe," (ConvNext model)"),QCe.forEach(t),JIe=i(T),rf=n(T,"LI",{});var HCe=s(rf);aH=n(HCe,"STRONG",{});var qkr=s(aH);YIe=r(qkr,"ctrl"),qkr.forEach(t),KIe=r(HCe," \u2014 "),_9=n(HCe,"A",{href:!0});var Gkr=s(_9);ZIe=r(Gkr,"CTRLConfig"),Gkr.forEach(t),eNe=r(HCe," (CTRL model)"),HCe.forEach(t),oNe=i(T),tf=n(T,"LI",{});var UCe=s(tf);nH=n(UCe,"STRONG",{});var Okr=s(nH);rNe=r(Okr,"data2vec-audio"),Okr.forEach(t),tNe=r(UCe," \u2014 "),b9=n(UCe,"A",{href:!0});var Xkr=s(b9);aNe=r(Xkr,"Data2VecAudioConfig"),Xkr.forEach(t),nNe=r(UCe," (Data2VecAudio model)"),UCe.forEach(t),sNe=i(T),af=n(T,"LI",{});var JCe=s(af);sH=n(JCe,"STRONG",{});var Vkr=s(sH);lNe=r(Vkr,"data2vec-text"),Vkr.forEach(t),iNe=r(JCe," \u2014 "),v9=n(JCe,"A",{href:!0});var zkr=s(v9);dNe=r(zkr,"Data2VecTextConfig"),zkr.forEach(t),cNe=r(JCe," (Data2VecText model)"),JCe.forEach(t),mNe=i(T),nf=n(T,"LI",{});var YCe=s(nf);lH=n(YCe,"STRONG",{});var Wkr=s(lH);fNe=r(Wkr,"deberta"),Wkr.forEach(t),gNe=r(YCe," \u2014 "),T9=n(YCe,"A",{href:!0});var Qkr=s(T9);hNe=r(Qkr,"DebertaConfig"),Qkr.forEach(t),uNe=r(YCe," (DeBERTa model)"),YCe.forEach(t),pNe=i(T),sf=n(T,"LI",{});var KCe=s(sf);iH=n(KCe,"STRONG",{});var Hkr=s(iH);_Ne=r(Hkr,"deberta-v2"),Hkr.forEach(t),bNe=r(KCe," \u2014 "),F9=n(KCe,"A",{href:!0});var Ukr=s(F9);vNe=r(Ukr,"DebertaV2Config"),Ukr.forEach(t),TNe=r(KCe," (DeBERTa-v2 model)"),KCe.forEach(t),FNe=i(T),lf=n(T,"LI",{});var ZCe=s(lf);dH=n(ZCe,"STRONG",{});var Jkr=s(dH);CNe=r(Jkr,"deit"),Jkr.forEach(t),MNe=r(ZCe," \u2014 "),C9=n(ZCe,"A",{href:!0});var Ykr=s(C9);ENe=r(Ykr,"DeiTConfig"),Ykr.forEach(t),yNe=r(ZCe," (DeiT model)"),ZCe.forEach(t),wNe=i(T),df=n(T,"LI",{});var eMe=s(df);cH=n(eMe,"STRONG",{});var Kkr=s(cH);ANe=r(Kkr,"detr"),Kkr.forEach(t),LNe=r(eMe," \u2014 "),M9=n(eMe,"A",{href:!0});var Zkr=s(M9);BNe=r(Zkr,"DetrConfig"),Zkr.forEach(t),xNe=r(eMe," (DETR model)"),eMe.forEach(t),kNe=i(T),cf=n(T,"LI",{});var oMe=s(cf);mH=n(oMe,"STRONG",{});var eRr=s(mH);RNe=r(eRr,"distilbert"),eRr.forEach(t),SNe=r(oMe," \u2014 "),E9=n(oMe,"A",{href:!0});var oRr=s(E9);PNe=r(oRr,"DistilBertConfig"),oRr.forEach(t),$Ne=r(oMe," (DistilBERT model)"),oMe.forEach(t),INe=i(T),mf=n(T,"LI",{});var rMe=s(mf);fH=n(rMe,"STRONG",{});var rRr=s(fH);NNe=r(rRr,"dpr"),rRr.forEach(t),jNe=r(rMe," \u2014 "),y9=n(rMe,"A",{href:!0});var tRr=s(y9);DNe=r(tRr,"DPRConfig"),tRr.forEach(t),qNe=r(rMe," (DPR model)"),rMe.forEach(t),GNe=i(T),ff=n(T,"LI",{});var tMe=s(ff);gH=n(tMe,"STRONG",{});var aRr=s(gH);ONe=r(aRr,"electra"),aRr.forEach(t),XNe=r(tMe," \u2014 "),w9=n(tMe,"A",{href:!0});var nRr=s(w9);VNe=r(nRr,"ElectraConfig"),nRr.forEach(t),zNe=r(tMe," (ELECTRA model)"),tMe.forEach(t),WNe=i(T),gf=n(T,"LI",{});var aMe=s(gf);hH=n(aMe,"STRONG",{});var sRr=s(hH);QNe=r(sRr,"encoder-decoder"),sRr.forEach(t),HNe=r(aMe," \u2014 "),A9=n(aMe,"A",{href:!0});var lRr=s(A9);UNe=r(lRr,"EncoderDecoderConfig"),lRr.forEach(t),JNe=r(aMe," (Encoder decoder model)"),aMe.forEach(t),YNe=i(T),hf=n(T,"LI",{});var nMe=s(hf);uH=n(nMe,"STRONG",{});var iRr=s(uH);KNe=r(iRr,"flaubert"),iRr.forEach(t),ZNe=r(nMe," \u2014 "),L9=n(nMe,"A",{href:!0});var dRr=s(L9);eje=r(dRr,"FlaubertConfig"),dRr.forEach(t),oje=r(nMe," (FlauBERT model)"),nMe.forEach(t),rje=i(T),uf=n(T,"LI",{});var sMe=s(uf);pH=n(sMe,"STRONG",{});var cRr=s(pH);tje=r(cRr,"fnet"),cRr.forEach(t),aje=r(sMe," \u2014 "),B9=n(sMe,"A",{href:!0});var mRr=s(B9);nje=r(mRr,"FNetConfig"),mRr.forEach(t),sje=r(sMe," (FNet model)"),sMe.forEach(t),lje=i(T),pf=n(T,"LI",{});var lMe=s(pf);_H=n(lMe,"STRONG",{});var fRr=s(_H);ije=r(fRr,"fsmt"),fRr.forEach(t),dje=r(lMe," \u2014 "),x9=n(lMe,"A",{href:!0});var gRr=s(x9);cje=r(gRr,"FSMTConfig"),gRr.forEach(t),mje=r(lMe," (FairSeq Machine-Translation model)"),lMe.forEach(t),fje=i(T),_f=n(T,"LI",{});var iMe=s(_f);bH=n(iMe,"STRONG",{});var hRr=s(bH);gje=r(hRr,"funnel"),hRr.forEach(t),hje=r(iMe," \u2014 "),k9=n(iMe,"A",{href:!0});var uRr=s(k9);uje=r(uRr,"FunnelConfig"),uRr.forEach(t),pje=r(iMe," (Funnel Transformer model)"),iMe.forEach(t),_je=i(T),bf=n(T,"LI",{});var dMe=s(bf);vH=n(dMe,"STRONG",{});var pRr=s(vH);bje=r(pRr,"glpn"),pRr.forEach(t),vje=r(dMe," \u2014 "),R9=n(dMe,"A",{href:!0});var _Rr=s(R9);Tje=r(_Rr,"GLPNConfig"),_Rr.forEach(t),Fje=r(dMe," (GLPN model)"),dMe.forEach(t),Cje=i(T),vf=n(T,"LI",{});var cMe=s(vf);TH=n(cMe,"STRONG",{});var bRr=s(TH);Mje=r(bRr,"gpt2"),bRr.forEach(t),Eje=r(cMe," \u2014 "),S9=n(cMe,"A",{href:!0});var vRr=s(S9);yje=r(vRr,"GPT2Config"),vRr.forEach(t),wje=r(cMe," (OpenAI GPT-2 model)"),cMe.forEach(t),Aje=i(T),Tf=n(T,"LI",{});var mMe=s(Tf);FH=n(mMe,"STRONG",{});var TRr=s(FH);Lje=r(TRr,"gpt_neo"),TRr.forEach(t),Bje=r(mMe," \u2014 "),P9=n(mMe,"A",{href:!0});var FRr=s(P9);xje=r(FRr,"GPTNeoConfig"),FRr.forEach(t),kje=r(mMe," (GPT Neo model)"),mMe.forEach(t),Rje=i(T),Ff=n(T,"LI",{});var fMe=s(Ff);CH=n(fMe,"STRONG",{});var CRr=s(CH);Sje=r(CRr,"gptj"),CRr.forEach(t),Pje=r(fMe," \u2014 "),$9=n(fMe,"A",{href:!0});var MRr=s($9);$je=r(MRr,"GPTJConfig"),MRr.forEach(t),Ije=r(fMe," (GPT-J model)"),fMe.forEach(t),Nje=i(T),Cf=n(T,"LI",{});var gMe=s(Cf);MH=n(gMe,"STRONG",{});var ERr=s(MH);jje=r(ERr,"hubert"),ERr.forEach(t),Dje=r(gMe," \u2014 "),I9=n(gMe,"A",{href:!0});var yRr=s(I9);qje=r(yRr,"HubertConfig"),yRr.forEach(t),Gje=r(gMe," (Hubert model)"),gMe.forEach(t),Oje=i(T),Mf=n(T,"LI",{});var hMe=s(Mf);EH=n(hMe,"STRONG",{});var wRr=s(EH);Xje=r(wRr,"ibert"),wRr.forEach(t),Vje=r(hMe," \u2014 "),N9=n(hMe,"A",{href:!0});var ARr=s(N9);zje=r(ARr,"IBertConfig"),ARr.forEach(t),Wje=r(hMe," (I-BERT model)"),hMe.forEach(t),Qje=i(T),Ef=n(T,"LI",{});var uMe=s(Ef);yH=n(uMe,"STRONG",{});var LRr=s(yH);Hje=r(LRr,"imagegpt"),LRr.forEach(t),Uje=r(uMe," \u2014 "),j9=n(uMe,"A",{href:!0});var BRr=s(j9);Jje=r(BRr,"ImageGPTConfig"),BRr.forEach(t),Yje=r(uMe," (ImageGPT model)"),uMe.forEach(t),Kje=i(T),yf=n(T,"LI",{});var pMe=s(yf);wH=n(pMe,"STRONG",{});var xRr=s(wH);Zje=r(xRr,"layoutlm"),xRr.forEach(t),eDe=r(pMe," \u2014 "),D9=n(pMe,"A",{href:!0});var kRr=s(D9);oDe=r(kRr,"LayoutLMConfig"),kRr.forEach(t),rDe=r(pMe," (LayoutLM model)"),pMe.forEach(t),tDe=i(T),wf=n(T,"LI",{});var _Me=s(wf);AH=n(_Me,"STRONG",{});var RRr=s(AH);aDe=r(RRr,"layoutlmv2"),RRr.forEach(t),nDe=r(_Me," \u2014 "),q9=n(_Me,"A",{href:!0});var SRr=s(q9);sDe=r(SRr,"LayoutLMv2Config"),SRr.forEach(t),lDe=r(_Me," (LayoutLMv2 model)"),_Me.forEach(t),iDe=i(T),Af=n(T,"LI",{});var bMe=s(Af);LH=n(bMe,"STRONG",{});var PRr=s(LH);dDe=r(PRr,"led"),PRr.forEach(t),cDe=r(bMe," \u2014 "),G9=n(bMe,"A",{href:!0});var $Rr=s(G9);mDe=r($Rr,"LEDConfig"),$Rr.forEach(t),fDe=r(bMe," (LED model)"),bMe.forEach(t),gDe=i(T),Lf=n(T,"LI",{});var vMe=s(Lf);BH=n(vMe,"STRONG",{});var IRr=s(BH);hDe=r(IRr,"longformer"),IRr.forEach(t),uDe=r(vMe," \u2014 "),O9=n(vMe,"A",{href:!0});var NRr=s(O9);pDe=r(NRr,"LongformerConfig"),NRr.forEach(t),_De=r(vMe," (Longformer model)"),vMe.forEach(t),bDe=i(T),Bf=n(T,"LI",{});var TMe=s(Bf);xH=n(TMe,"STRONG",{});var jRr=s(xH);vDe=r(jRr,"luke"),jRr.forEach(t),TDe=r(TMe," \u2014 "),X9=n(TMe,"A",{href:!0});var DRr=s(X9);FDe=r(DRr,"LukeConfig"),DRr.forEach(t),CDe=r(TMe," (LUKE model)"),TMe.forEach(t),MDe=i(T),xf=n(T,"LI",{});var FMe=s(xf);kH=n(FMe,"STRONG",{});var qRr=s(kH);EDe=r(qRr,"lxmert"),qRr.forEach(t),yDe=r(FMe," \u2014 "),V9=n(FMe,"A",{href:!0});var GRr=s(V9);wDe=r(GRr,"LxmertConfig"),GRr.forEach(t),ADe=r(FMe," (LXMERT model)"),FMe.forEach(t),LDe=i(T),kf=n(T,"LI",{});var CMe=s(kf);RH=n(CMe,"STRONG",{});var ORr=s(RH);BDe=r(ORr,"m2m_100"),ORr.forEach(t),xDe=r(CMe," \u2014 "),z9=n(CMe,"A",{href:!0});var XRr=s(z9);kDe=r(XRr,"M2M100Config"),XRr.forEach(t),RDe=r(CMe," (M2M100 model)"),CMe.forEach(t),SDe=i(T),Rf=n(T,"LI",{});var MMe=s(Rf);SH=n(MMe,"STRONG",{});var VRr=s(SH);PDe=r(VRr,"marian"),VRr.forEach(t),$De=r(MMe," \u2014 "),W9=n(MMe,"A",{href:!0});var zRr=s(W9);IDe=r(zRr,"MarianConfig"),zRr.forEach(t),NDe=r(MMe," (Marian model)"),MMe.forEach(t),jDe=i(T),Sf=n(T,"LI",{});var EMe=s(Sf);PH=n(EMe,"STRONG",{});var WRr=s(PH);DDe=r(WRr,"maskformer"),WRr.forEach(t),qDe=r(EMe," \u2014 "),Q9=n(EMe,"A",{href:!0});var QRr=s(Q9);GDe=r(QRr,"MaskFormerConfig"),QRr.forEach(t),ODe=r(EMe," (MaskFormer model)"),EMe.forEach(t),XDe=i(T),Pf=n(T,"LI",{});var yMe=s(Pf);$H=n(yMe,"STRONG",{});var HRr=s($H);VDe=r(HRr,"mbart"),HRr.forEach(t),zDe=r(yMe," \u2014 "),H9=n(yMe,"A",{href:!0});var URr=s(H9);WDe=r(URr,"MBartConfig"),URr.forEach(t),QDe=r(yMe," (mBART model)"),yMe.forEach(t),HDe=i(T),$f=n(T,"LI",{});var wMe=s($f);IH=n(wMe,"STRONG",{});var JRr=s(IH);UDe=r(JRr,"megatron-bert"),JRr.forEach(t),JDe=r(wMe," \u2014 "),U9=n(wMe,"A",{href:!0});var YRr=s(U9);YDe=r(YRr,"MegatronBertConfig"),YRr.forEach(t),KDe=r(wMe," (MegatronBert model)"),wMe.forEach(t),ZDe=i(T),If=n(T,"LI",{});var AMe=s(If);NH=n(AMe,"STRONG",{});var KRr=s(NH);eqe=r(KRr,"mobilebert"),KRr.forEach(t),oqe=r(AMe," \u2014 "),J9=n(AMe,"A",{href:!0});var ZRr=s(J9);rqe=r(ZRr,"MobileBertConfig"),ZRr.forEach(t),tqe=r(AMe," (MobileBERT model)"),AMe.forEach(t),aqe=i(T),Nf=n(T,"LI",{});var LMe=s(Nf);jH=n(LMe,"STRONG",{});var eSr=s(jH);nqe=r(eSr,"mpnet"),eSr.forEach(t),sqe=r(LMe," \u2014 "),Y9=n(LMe,"A",{href:!0});var oSr=s(Y9);lqe=r(oSr,"MPNetConfig"),oSr.forEach(t),iqe=r(LMe," (MPNet model)"),LMe.forEach(t),dqe=i(T),jf=n(T,"LI",{});var BMe=s(jf);DH=n(BMe,"STRONG",{});var rSr=s(DH);cqe=r(rSr,"mt5"),rSr.forEach(t),mqe=r(BMe," \u2014 "),K9=n(BMe,"A",{href:!0});var tSr=s(K9);fqe=r(tSr,"MT5Config"),tSr.forEach(t),gqe=r(BMe," (mT5 model)"),BMe.forEach(t),hqe=i(T),Df=n(T,"LI",{});var xMe=s(Df);qH=n(xMe,"STRONG",{});var aSr=s(qH);uqe=r(aSr,"nystromformer"),aSr.forEach(t),pqe=r(xMe," \u2014 "),Z9=n(xMe,"A",{href:!0});var nSr=s(Z9);_qe=r(nSr,"NystromformerConfig"),nSr.forEach(t),bqe=r(xMe," (Nystromformer model)"),xMe.forEach(t),vqe=i(T),qf=n(T,"LI",{});var kMe=s(qf);GH=n(kMe,"STRONG",{});var sSr=s(GH);Tqe=r(sSr,"openai-gpt"),sSr.forEach(t),Fqe=r(kMe," \u2014 "),eB=n(kMe,"A",{href:!0});var lSr=s(eB);Cqe=r(lSr,"OpenAIGPTConfig"),lSr.forEach(t),Mqe=r(kMe," (OpenAI GPT model)"),kMe.forEach(t),Eqe=i(T),Gf=n(T,"LI",{});var RMe=s(Gf);OH=n(RMe,"STRONG",{});var iSr=s(OH);yqe=r(iSr,"pegasus"),iSr.forEach(t),wqe=r(RMe," \u2014 "),oB=n(RMe,"A",{href:!0});var dSr=s(oB);Aqe=r(dSr,"PegasusConfig"),dSr.forEach(t),Lqe=r(RMe," (Pegasus model)"),RMe.forEach(t),Bqe=i(T),Of=n(T,"LI",{});var SMe=s(Of);XH=n(SMe,"STRONG",{});var cSr=s(XH);xqe=r(cSr,"perceiver"),cSr.forEach(t),kqe=r(SMe," \u2014 "),rB=n(SMe,"A",{href:!0});var mSr=s(rB);Rqe=r(mSr,"PerceiverConfig"),mSr.forEach(t),Sqe=r(SMe," (Perceiver model)"),SMe.forEach(t),Pqe=i(T),Xf=n(T,"LI",{});var PMe=s(Xf);VH=n(PMe,"STRONG",{});var fSr=s(VH);$qe=r(fSr,"plbart"),fSr.forEach(t),Iqe=r(PMe," \u2014 "),tB=n(PMe,"A",{href:!0});var gSr=s(tB);Nqe=r(gSr,"PLBartConfig"),gSr.forEach(t),jqe=r(PMe," (PLBart model)"),PMe.forEach(t),Dqe=i(T),Vf=n(T,"LI",{});var $Me=s(Vf);zH=n($Me,"STRONG",{});var hSr=s(zH);qqe=r(hSr,"poolformer"),hSr.forEach(t),Gqe=r($Me," \u2014 "),aB=n($Me,"A",{href:!0});var uSr=s(aB);Oqe=r(uSr,"PoolFormerConfig"),uSr.forEach(t),Xqe=r($Me," (PoolFormer model)"),$Me.forEach(t),Vqe=i(T),zf=n(T,"LI",{});var IMe=s(zf);WH=n(IMe,"STRONG",{});var pSr=s(WH);zqe=r(pSr,"prophetnet"),pSr.forEach(t),Wqe=r(IMe," \u2014 "),nB=n(IMe,"A",{href:!0});var _Sr=s(nB);Qqe=r(_Sr,"ProphetNetConfig"),_Sr.forEach(t),Hqe=r(IMe," (ProphetNet model)"),IMe.forEach(t),Uqe=i(T),Wf=n(T,"LI",{});var NMe=s(Wf);QH=n(NMe,"STRONG",{});var bSr=s(QH);Jqe=r(bSr,"qdqbert"),bSr.forEach(t),Yqe=r(NMe," \u2014 "),sB=n(NMe,"A",{href:!0});var vSr=s(sB);Kqe=r(vSr,"QDQBertConfig"),vSr.forEach(t),Zqe=r(NMe," (QDQBert model)"),NMe.forEach(t),eGe=i(T),Qf=n(T,"LI",{});var jMe=s(Qf);HH=n(jMe,"STRONG",{});var TSr=s(HH);oGe=r(TSr,"rag"),TSr.forEach(t),rGe=r(jMe," \u2014 "),lB=n(jMe,"A",{href:!0});var FSr=s(lB);tGe=r(FSr,"RagConfig"),FSr.forEach(t),aGe=r(jMe," (RAG model)"),jMe.forEach(t),nGe=i(T),Hf=n(T,"LI",{});var DMe=s(Hf);UH=n(DMe,"STRONG",{});var CSr=s(UH);sGe=r(CSr,"realm"),CSr.forEach(t),lGe=r(DMe," \u2014 "),iB=n(DMe,"A",{href:!0});var MSr=s(iB);iGe=r(MSr,"RealmConfig"),MSr.forEach(t),dGe=r(DMe," (Realm model)"),DMe.forEach(t),cGe=i(T),Uf=n(T,"LI",{});var qMe=s(Uf);JH=n(qMe,"STRONG",{});var ESr=s(JH);mGe=r(ESr,"reformer"),ESr.forEach(t),fGe=r(qMe," \u2014 "),dB=n(qMe,"A",{href:!0});var ySr=s(dB);gGe=r(ySr,"ReformerConfig"),ySr.forEach(t),hGe=r(qMe," (Reformer model)"),qMe.forEach(t),uGe=i(T),Jf=n(T,"LI",{});var GMe=s(Jf);YH=n(GMe,"STRONG",{});var wSr=s(YH);pGe=r(wSr,"rembert"),wSr.forEach(t),_Ge=r(GMe," \u2014 "),cB=n(GMe,"A",{href:!0});var ASr=s(cB);bGe=r(ASr,"RemBertConfig"),ASr.forEach(t),vGe=r(GMe," (RemBERT model)"),GMe.forEach(t),TGe=i(T),Yf=n(T,"LI",{});var OMe=s(Yf);KH=n(OMe,"STRONG",{});var LSr=s(KH);FGe=r(LSr,"resnet"),LSr.forEach(t),CGe=r(OMe," \u2014 "),mB=n(OMe,"A",{href:!0});var BSr=s(mB);MGe=r(BSr,"ResNetConfig"),BSr.forEach(t),EGe=r(OMe," (ResNet model)"),OMe.forEach(t),yGe=i(T),Kf=n(T,"LI",{});var XMe=s(Kf);ZH=n(XMe,"STRONG",{});var xSr=s(ZH);wGe=r(xSr,"retribert"),xSr.forEach(t),AGe=r(XMe," \u2014 "),fB=n(XMe,"A",{href:!0});var kSr=s(fB);LGe=r(kSr,"RetriBertConfig"),kSr.forEach(t),BGe=r(XMe," (RetriBERT model)"),XMe.forEach(t),xGe=i(T),Zf=n(T,"LI",{});var VMe=s(Zf);eU=n(VMe,"STRONG",{});var RSr=s(eU);kGe=r(RSr,"roberta"),RSr.forEach(t),RGe=r(VMe," \u2014 "),gB=n(VMe,"A",{href:!0});var SSr=s(gB);SGe=r(SSr,"RobertaConfig"),SSr.forEach(t),PGe=r(VMe," (RoBERTa model)"),VMe.forEach(t),$Ge=i(T),eg=n(T,"LI",{});var zMe=s(eg);oU=n(zMe,"STRONG",{});var PSr=s(oU);IGe=r(PSr,"roformer"),PSr.forEach(t),NGe=r(zMe," \u2014 "),hB=n(zMe,"A",{href:!0});var $Sr=s(hB);jGe=r($Sr,"RoFormerConfig"),$Sr.forEach(t),DGe=r(zMe," (RoFormer model)"),zMe.forEach(t),qGe=i(T),og=n(T,"LI",{});var WMe=s(og);rU=n(WMe,"STRONG",{});var ISr=s(rU);GGe=r(ISr,"segformer"),ISr.forEach(t),OGe=r(WMe," \u2014 "),uB=n(WMe,"A",{href:!0});var NSr=s(uB);XGe=r(NSr,"SegformerConfig"),NSr.forEach(t),VGe=r(WMe," (SegFormer model)"),WMe.forEach(t),zGe=i(T),rg=n(T,"LI",{});var QMe=s(rg);tU=n(QMe,"STRONG",{});var jSr=s(tU);WGe=r(jSr,"sew"),jSr.forEach(t),QGe=r(QMe," \u2014 "),pB=n(QMe,"A",{href:!0});var DSr=s(pB);HGe=r(DSr,"SEWConfig"),DSr.forEach(t),UGe=r(QMe," (SEW model)"),QMe.forEach(t),JGe=i(T),tg=n(T,"LI",{});var HMe=s(tg);aU=n(HMe,"STRONG",{});var qSr=s(aU);YGe=r(qSr,"sew-d"),qSr.forEach(t),KGe=r(HMe," \u2014 "),_B=n(HMe,"A",{href:!0});var GSr=s(_B);ZGe=r(GSr,"SEWDConfig"),GSr.forEach(t),eOe=r(HMe," (SEW-D model)"),HMe.forEach(t),oOe=i(T),ag=n(T,"LI",{});var UMe=s(ag);nU=n(UMe,"STRONG",{});var OSr=s(nU);rOe=r(OSr,"speech-encoder-decoder"),OSr.forEach(t),tOe=r(UMe," \u2014 "),bB=n(UMe,"A",{href:!0});var XSr=s(bB);aOe=r(XSr,"SpeechEncoderDecoderConfig"),XSr.forEach(t),nOe=r(UMe," (Speech Encoder decoder model)"),UMe.forEach(t),sOe=i(T),ng=n(T,"LI",{});var JMe=s(ng);sU=n(JMe,"STRONG",{});var VSr=s(sU);lOe=r(VSr,"speech_to_text"),VSr.forEach(t),iOe=r(JMe," \u2014 "),vB=n(JMe,"A",{href:!0});var zSr=s(vB);dOe=r(zSr,"Speech2TextConfig"),zSr.forEach(t),cOe=r(JMe," (Speech2Text model)"),JMe.forEach(t),mOe=i(T),sg=n(T,"LI",{});var YMe=s(sg);lU=n(YMe,"STRONG",{});var WSr=s(lU);fOe=r(WSr,"speech_to_text_2"),WSr.forEach(t),gOe=r(YMe," \u2014 "),TB=n(YMe,"A",{href:!0});var QSr=s(TB);hOe=r(QSr,"Speech2Text2Config"),QSr.forEach(t),uOe=r(YMe," (Speech2Text2 model)"),YMe.forEach(t),pOe=i(T),lg=n(T,"LI",{});var KMe=s(lg);iU=n(KMe,"STRONG",{});var HSr=s(iU);_Oe=r(HSr,"splinter"),HSr.forEach(t),bOe=r(KMe," \u2014 "),FB=n(KMe,"A",{href:!0});var USr=s(FB);vOe=r(USr,"SplinterConfig"),USr.forEach(t),TOe=r(KMe," (Splinter model)"),KMe.forEach(t),FOe=i(T),ig=n(T,"LI",{});var ZMe=s(ig);dU=n(ZMe,"STRONG",{});var JSr=s(dU);COe=r(JSr,"squeezebert"),JSr.forEach(t),MOe=r(ZMe," \u2014 "),CB=n(ZMe,"A",{href:!0});var YSr=s(CB);EOe=r(YSr,"SqueezeBertConfig"),YSr.forEach(t),yOe=r(ZMe," (SqueezeBERT model)"),ZMe.forEach(t),wOe=i(T),dg=n(T,"LI",{});var e4e=s(dg);cU=n(e4e,"STRONG",{});var KSr=s(cU);AOe=r(KSr,"swin"),KSr.forEach(t),LOe=r(e4e," \u2014 "),MB=n(e4e,"A",{href:!0});var ZSr=s(MB);BOe=r(ZSr,"SwinConfig"),ZSr.forEach(t),xOe=r(e4e," (Swin model)"),e4e.forEach(t),kOe=i(T),cg=n(T,"LI",{});var o4e=s(cg);mU=n(o4e,"STRONG",{});var ePr=s(mU);ROe=r(ePr,"t5"),ePr.forEach(t),SOe=r(o4e," \u2014 "),EB=n(o4e,"A",{href:!0});var oPr=s(EB);POe=r(oPr,"T5Config"),oPr.forEach(t),$Oe=r(o4e," (T5 model)"),o4e.forEach(t),IOe=i(T),mg=n(T,"LI",{});var r4e=s(mg);fU=n(r4e,"STRONG",{});var rPr=s(fU);NOe=r(rPr,"tapas"),rPr.forEach(t),jOe=r(r4e," \u2014 "),yB=n(r4e,"A",{href:!0});var tPr=s(yB);DOe=r(tPr,"TapasConfig"),tPr.forEach(t),qOe=r(r4e," (TAPAS model)"),r4e.forEach(t),GOe=i(T),fg=n(T,"LI",{});var t4e=s(fg);gU=n(t4e,"STRONG",{});var aPr=s(gU);OOe=r(aPr,"transfo-xl"),aPr.forEach(t),XOe=r(t4e," \u2014 "),wB=n(t4e,"A",{href:!0});var nPr=s(wB);VOe=r(nPr,"TransfoXLConfig"),nPr.forEach(t),zOe=r(t4e," (Transformer-XL model)"),t4e.forEach(t),WOe=i(T),gg=n(T,"LI",{});var a4e=s(gg);hU=n(a4e,"STRONG",{});var sPr=s(hU);QOe=r(sPr,"trocr"),sPr.forEach(t),HOe=r(a4e," \u2014 "),AB=n(a4e,"A",{href:!0});var lPr=s(AB);UOe=r(lPr,"TrOCRConfig"),lPr.forEach(t),JOe=r(a4e," (TrOCR model)"),a4e.forEach(t),YOe=i(T),hg=n(T,"LI",{});var n4e=s(hg);uU=n(n4e,"STRONG",{});var iPr=s(uU);KOe=r(iPr,"unispeech"),iPr.forEach(t),ZOe=r(n4e," \u2014 "),LB=n(n4e,"A",{href:!0});var dPr=s(LB);eXe=r(dPr,"UniSpeechConfig"),dPr.forEach(t),oXe=r(n4e," (UniSpeech model)"),n4e.forEach(t),rXe=i(T),ug=n(T,"LI",{});var s4e=s(ug);pU=n(s4e,"STRONG",{});var cPr=s(pU);tXe=r(cPr,"unispeech-sat"),cPr.forEach(t),aXe=r(s4e," \u2014 "),BB=n(s4e,"A",{href:!0});var mPr=s(BB);nXe=r(mPr,"UniSpeechSatConfig"),mPr.forEach(t),sXe=r(s4e," (UniSpeechSat model)"),s4e.forEach(t),lXe=i(T),pg=n(T,"LI",{});var l4e=s(pg);_U=n(l4e,"STRONG",{});var fPr=s(_U);iXe=r(fPr,"van"),fPr.forEach(t),dXe=r(l4e," \u2014 "),xB=n(l4e,"A",{href:!0});var gPr=s(xB);cXe=r(gPr,"VanConfig"),gPr.forEach(t),mXe=r(l4e," (VAN model)"),l4e.forEach(t),fXe=i(T),_g=n(T,"LI",{});var i4e=s(_g);bU=n(i4e,"STRONG",{});var hPr=s(bU);gXe=r(hPr,"vilt"),hPr.forEach(t),hXe=r(i4e," \u2014 "),kB=n(i4e,"A",{href:!0});var uPr=s(kB);uXe=r(uPr,"ViltConfig"),uPr.forEach(t),pXe=r(i4e," (ViLT model)"),i4e.forEach(t),_Xe=i(T),bg=n(T,"LI",{});var d4e=s(bg);vU=n(d4e,"STRONG",{});var pPr=s(vU);bXe=r(pPr,"vision-encoder-decoder"),pPr.forEach(t),vXe=r(d4e," \u2014 "),RB=n(d4e,"A",{href:!0});var _Pr=s(RB);TXe=r(_Pr,"VisionEncoderDecoderConfig"),_Pr.forEach(t),FXe=r(d4e," (Vision Encoder decoder model)"),d4e.forEach(t),CXe=i(T),vg=n(T,"LI",{});var c4e=s(vg);TU=n(c4e,"STRONG",{});var bPr=s(TU);MXe=r(bPr,"vision-text-dual-encoder"),bPr.forEach(t),EXe=r(c4e," \u2014 "),SB=n(c4e,"A",{href:!0});var vPr=s(SB);yXe=r(vPr,"VisionTextDualEncoderConfig"),vPr.forEach(t),wXe=r(c4e," (VisionTextDualEncoder model)"),c4e.forEach(t),AXe=i(T),Tg=n(T,"LI",{});var m4e=s(Tg);FU=n(m4e,"STRONG",{});var TPr=s(FU);LXe=r(TPr,"visual_bert"),TPr.forEach(t),BXe=r(m4e," \u2014 "),PB=n(m4e,"A",{href:!0});var FPr=s(PB);xXe=r(FPr,"VisualBertConfig"),FPr.forEach(t),kXe=r(m4e," (VisualBert model)"),m4e.forEach(t),RXe=i(T),Fg=n(T,"LI",{});var f4e=s(Fg);CU=n(f4e,"STRONG",{});var CPr=s(CU);SXe=r(CPr,"vit"),CPr.forEach(t),PXe=r(f4e," \u2014 "),$B=n(f4e,"A",{href:!0});var MPr=s($B);$Xe=r(MPr,"ViTConfig"),MPr.forEach(t),IXe=r(f4e," (ViT model)"),f4e.forEach(t),NXe=i(T),Cg=n(T,"LI",{});var g4e=s(Cg);MU=n(g4e,"STRONG",{});var EPr=s(MU);jXe=r(EPr,"vit_mae"),EPr.forEach(t),DXe=r(g4e," \u2014 "),IB=n(g4e,"A",{href:!0});var yPr=s(IB);qXe=r(yPr,"ViTMAEConfig"),yPr.forEach(t),GXe=r(g4e," (ViTMAE model)"),g4e.forEach(t),OXe=i(T),Mg=n(T,"LI",{});var h4e=s(Mg);EU=n(h4e,"STRONG",{});var wPr=s(EU);XXe=r(wPr,"wav2vec2"),wPr.forEach(t),VXe=r(h4e," \u2014 "),NB=n(h4e,"A",{href:!0});var APr=s(NB);zXe=r(APr,"Wav2Vec2Config"),APr.forEach(t),WXe=r(h4e," (Wav2Vec2 model)"),h4e.forEach(t),QXe=i(T),Eg=n(T,"LI",{});var u4e=s(Eg);yU=n(u4e,"STRONG",{});var LPr=s(yU);HXe=r(LPr,"wavlm"),LPr.forEach(t),UXe=r(u4e," \u2014 "),jB=n(u4e,"A",{href:!0});var BPr=s(jB);JXe=r(BPr,"WavLMConfig"),BPr.forEach(t),YXe=r(u4e," (WavLM model)"),u4e.forEach(t),KXe=i(T),yg=n(T,"LI",{});var p4e=s(yg);wU=n(p4e,"STRONG",{});var xPr=s(wU);ZXe=r(xPr,"xglm"),xPr.forEach(t),eVe=r(p4e," \u2014 "),DB=n(p4e,"A",{href:!0});var kPr=s(DB);oVe=r(kPr,"XGLMConfig"),kPr.forEach(t),rVe=r(p4e," (XGLM model)"),p4e.forEach(t),tVe=i(T),wg=n(T,"LI",{});var _4e=s(wg);AU=n(_4e,"STRONG",{});var RPr=s(AU);aVe=r(RPr,"xlm"),RPr.forEach(t),nVe=r(_4e," \u2014 "),qB=n(_4e,"A",{href:!0});var SPr=s(qB);sVe=r(SPr,"XLMConfig"),SPr.forEach(t),lVe=r(_4e," (XLM model)"),_4e.forEach(t),iVe=i(T),Ag=n(T,"LI",{});var b4e=s(Ag);LU=n(b4e,"STRONG",{});var PPr=s(LU);dVe=r(PPr,"xlm-prophetnet"),PPr.forEach(t),cVe=r(b4e," \u2014 "),GB=n(b4e,"A",{href:!0});var $Pr=s(GB);mVe=r($Pr,"XLMProphetNetConfig"),$Pr.forEach(t),fVe=r(b4e," (XLMProphetNet model)"),b4e.forEach(t),gVe=i(T),Lg=n(T,"LI",{});var v4e=s(Lg);BU=n(v4e,"STRONG",{});var IPr=s(BU);hVe=r(IPr,"xlm-roberta"),IPr.forEach(t),uVe=r(v4e," \u2014 "),OB=n(v4e,"A",{href:!0});var NPr=s(OB);pVe=r(NPr,"XLMRobertaConfig"),NPr.forEach(t),_Ve=r(v4e," (XLM-RoBERTa model)"),v4e.forEach(t),bVe=i(T),Bg=n(T,"LI",{});var T4e=s(Bg);xU=n(T4e,"STRONG",{});var jPr=s(xU);vVe=r(jPr,"xlm-roberta-xl"),jPr.forEach(t),TVe=r(T4e," \u2014 "),XB=n(T4e,"A",{href:!0});var DPr=s(XB);FVe=r(DPr,"XLMRobertaXLConfig"),DPr.forEach(t),CVe=r(T4e," (XLM-RoBERTa-XL model)"),T4e.forEach(t),MVe=i(T),xg=n(T,"LI",{});var F4e=s(xg);kU=n(F4e,"STRONG",{});var qPr=s(kU);EVe=r(qPr,"xlnet"),qPr.forEach(t),yVe=r(F4e," \u2014 "),VB=n(F4e,"A",{href:!0});var GPr=s(VB);wVe=r(GPr,"XLNetConfig"),GPr.forEach(t),AVe=r(F4e," (XLNet model)"),F4e.forEach(t),LVe=i(T),kg=n(T,"LI",{});var C4e=s(kg);RU=n(C4e,"STRONG",{});var OPr=s(RU);BVe=r(OPr,"yoso"),OPr.forEach(t),xVe=r(C4e," \u2014 "),zB=n(C4e,"A",{href:!0});var XPr=s(zB);kVe=r(XPr,"YosoConfig"),XPr.forEach(t),RVe=r(C4e," (YOSO model)"),C4e.forEach(t),T.forEach(t),SVe=i(ga),SU=n(ga,"P",{});var VPr=s(SU);PVe=r(VPr,"Examples:"),VPr.forEach(t),$Ve=i(ga),f(hy.$$.fragment,ga),ga.forEach(t),IVe=i(Os),Rg=n(Os,"DIV",{class:!0});var oSe=s(Rg);f(uy.$$.fragment,oSe),NVe=i(oSe),PU=n(oSe,"P",{});var zPr=s(PU);jVe=r(zPr,"Register a new configuration for this class."),zPr.forEach(t),oSe.forEach(t),Os.forEach(t),Zxe=i(c),Wi=n(c,"H2",{class:!0});var rSe=s(Wi);Sg=n(rSe,"A",{id:!0,class:!0,href:!0});var WPr=s(Sg);$U=n(WPr,"SPAN",{});var QPr=s($U);f(py.$$.fragment,QPr),QPr.forEach(t),WPr.forEach(t),DVe=i(rSe),IU=n(rSe,"SPAN",{});var HPr=s(IU);qVe=r(HPr,"AutoTokenizer"),HPr.forEach(t),rSe.forEach(t),eke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);f(_y.$$.fragment,Xs),GVe=i(Xs),by=n(Xs,"P",{});var tSe=s(by);OVe=r(tSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WB=n(tSe,"A",{href:!0});var UPr=s(WB);XVe=r(UPr,"AutoTokenizer.from_pretrained()"),UPr.forEach(t),VVe=r(tSe," class method."),tSe.forEach(t),zVe=i(Xs),vy=n(Xs,"P",{});var aSe=s(vy);WVe=r(aSe,"This class cannot be instantiated directly using "),NU=n(aSe,"CODE",{});var JPr=s(NU);QVe=r(JPr,"__init__()"),JPr.forEach(t),HVe=r(aSe," (throws an error)."),aSe.forEach(t),UVe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);f(Ty.$$.fragment,ha),JVe=i(ha),jU=n(ha,"P",{});var YPr=s(jU);YVe=r(YPr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),YPr.forEach(t),KVe=i(ha),Oa=n(ha,"P",{});var n5=s(Oa);ZVe=r(n5,"The tokenizer class to instantiate is selected based on the "),DU=n(n5,"CODE",{});var KPr=s(DU);eze=r(KPr,"model_type"),KPr.forEach(t),oze=r(n5,` property of the config object (either
passed as an argument or loaded from `),qU=n(n5,"CODE",{});var ZPr=s(qU);rze=r(ZPr,"pretrained_model_name_or_path"),ZPr.forEach(t),tze=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GU=n(n5,"CODE",{});var e$r=s(GU);aze=r(e$r,"pretrained_model_name_or_path"),e$r.forEach(t),nze=r(n5,":"),n5.forEach(t),sze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var e8=s(Wn);OU=n(e8,"STRONG",{});var o$r=s(OU);lze=r(o$r,"albert"),o$r.forEach(t),ize=r(e8," \u2014 "),QB=n(e8,"A",{href:!0});var r$r=s(QB);dze=r(r$r,"AlbertTokenizer"),r$r.forEach(t),cze=r(e8," or "),HB=n(e8,"A",{href:!0});var t$r=s(HB);mze=r(t$r,"AlbertTokenizerFast"),t$r.forEach(t),fze=r(e8," (ALBERT model)"),e8.forEach(t),gze=i(y),Qn=n(y,"LI",{});var o8=s(Qn);XU=n(o8,"STRONG",{});var a$r=s(XU);hze=r(a$r,"bart"),a$r.forEach(t),uze=r(o8," \u2014 "),UB=n(o8,"A",{href:!0});var n$r=s(UB);pze=r(n$r,"BartTokenizer"),n$r.forEach(t),_ze=r(o8," or "),JB=n(o8,"A",{href:!0});var s$r=s(JB);bze=r(s$r,"BartTokenizerFast"),s$r.forEach(t),vze=r(o8," (BART model)"),o8.forEach(t),Tze=i(y),Hn=n(y,"LI",{});var r8=s(Hn);VU=n(r8,"STRONG",{});var l$r=s(VU);Fze=r(l$r,"barthez"),l$r.forEach(t),Cze=r(r8," \u2014 "),YB=n(r8,"A",{href:!0});var i$r=s(YB);Mze=r(i$r,"BarthezTokenizer"),i$r.forEach(t),Eze=r(r8," or "),KB=n(r8,"A",{href:!0});var d$r=s(KB);yze=r(d$r,"BarthezTokenizerFast"),d$r.forEach(t),wze=r(r8," (BARThez model)"),r8.forEach(t),Aze=i(y),Pg=n(y,"LI",{});var M4e=s(Pg);zU=n(M4e,"STRONG",{});var c$r=s(zU);Lze=r(c$r,"bartpho"),c$r.forEach(t),Bze=r(M4e," \u2014 "),ZB=n(M4e,"A",{href:!0});var m$r=s(ZB);xze=r(m$r,"BartphoTokenizer"),m$r.forEach(t),kze=r(M4e," (BARTpho model)"),M4e.forEach(t),Rze=i(y),Un=n(y,"LI",{});var t8=s(Un);WU=n(t8,"STRONG",{});var f$r=s(WU);Sze=r(f$r,"bert"),f$r.forEach(t),Pze=r(t8," \u2014 "),ex=n(t8,"A",{href:!0});var g$r=s(ex);$ze=r(g$r,"BertTokenizer"),g$r.forEach(t),Ize=r(t8," or "),ox=n(t8,"A",{href:!0});var h$r=s(ox);Nze=r(h$r,"BertTokenizerFast"),h$r.forEach(t),jze=r(t8," (BERT model)"),t8.forEach(t),Dze=i(y),$g=n(y,"LI",{});var E4e=s($g);QU=n(E4e,"STRONG",{});var u$r=s(QU);qze=r(u$r,"bert-generation"),u$r.forEach(t),Gze=r(E4e," \u2014 "),rx=n(E4e,"A",{href:!0});var p$r=s(rx);Oze=r(p$r,"BertGenerationTokenizer"),p$r.forEach(t),Xze=r(E4e," (Bert Generation model)"),E4e.forEach(t),Vze=i(y),Ig=n(y,"LI",{});var y4e=s(Ig);HU=n(y4e,"STRONG",{});var _$r=s(HU);zze=r(_$r,"bert-japanese"),_$r.forEach(t),Wze=r(y4e," \u2014 "),tx=n(y4e,"A",{href:!0});var b$r=s(tx);Qze=r(b$r,"BertJapaneseTokenizer"),b$r.forEach(t),Hze=r(y4e," (BertJapanese model)"),y4e.forEach(t),Uze=i(y),Ng=n(y,"LI",{});var w4e=s(Ng);UU=n(w4e,"STRONG",{});var v$r=s(UU);Jze=r(v$r,"bertweet"),v$r.forEach(t),Yze=r(w4e," \u2014 "),ax=n(w4e,"A",{href:!0});var T$r=s(ax);Kze=r(T$r,"BertweetTokenizer"),T$r.forEach(t),Zze=r(w4e," (Bertweet model)"),w4e.forEach(t),eWe=i(y),Jn=n(y,"LI",{});var a8=s(Jn);JU=n(a8,"STRONG",{});var F$r=s(JU);oWe=r(F$r,"big_bird"),F$r.forEach(t),rWe=r(a8," \u2014 "),nx=n(a8,"A",{href:!0});var C$r=s(nx);tWe=r(C$r,"BigBirdTokenizer"),C$r.forEach(t),aWe=r(a8," or "),sx=n(a8,"A",{href:!0});var M$r=s(sx);nWe=r(M$r,"BigBirdTokenizerFast"),M$r.forEach(t),sWe=r(a8," (BigBird model)"),a8.forEach(t),lWe=i(y),Yn=n(y,"LI",{});var n8=s(Yn);YU=n(n8,"STRONG",{});var E$r=s(YU);iWe=r(E$r,"bigbird_pegasus"),E$r.forEach(t),dWe=r(n8," \u2014 "),lx=n(n8,"A",{href:!0});var y$r=s(lx);cWe=r(y$r,"PegasusTokenizer"),y$r.forEach(t),mWe=r(n8," or "),ix=n(n8,"A",{href:!0});var w$r=s(ix);fWe=r(w$r,"PegasusTokenizerFast"),w$r.forEach(t),gWe=r(n8," (BigBirdPegasus model)"),n8.forEach(t),hWe=i(y),Kn=n(y,"LI",{});var s8=s(Kn);KU=n(s8,"STRONG",{});var A$r=s(KU);uWe=r(A$r,"blenderbot"),A$r.forEach(t),pWe=r(s8," \u2014 "),dx=n(s8,"A",{href:!0});var L$r=s(dx);_We=r(L$r,"BlenderbotTokenizer"),L$r.forEach(t),bWe=r(s8," or "),cx=n(s8,"A",{href:!0});var B$r=s(cx);vWe=r(B$r,"BlenderbotTokenizerFast"),B$r.forEach(t),TWe=r(s8," (Blenderbot model)"),s8.forEach(t),FWe=i(y),jg=n(y,"LI",{});var A4e=s(jg);ZU=n(A4e,"STRONG",{});var x$r=s(ZU);CWe=r(x$r,"blenderbot-small"),x$r.forEach(t),MWe=r(A4e," \u2014 "),mx=n(A4e,"A",{href:!0});var k$r=s(mx);EWe=r(k$r,"BlenderbotSmallTokenizer"),k$r.forEach(t),yWe=r(A4e," (BlenderbotSmall model)"),A4e.forEach(t),wWe=i(y),Dg=n(y,"LI",{});var L4e=s(Dg);eJ=n(L4e,"STRONG",{});var R$r=s(eJ);AWe=r(R$r,"byt5"),R$r.forEach(t),LWe=r(L4e," \u2014 "),fx=n(L4e,"A",{href:!0});var S$r=s(fx);BWe=r(S$r,"ByT5Tokenizer"),S$r.forEach(t),xWe=r(L4e," (ByT5 model)"),L4e.forEach(t),kWe=i(y),Zn=n(y,"LI",{});var l8=s(Zn);oJ=n(l8,"STRONG",{});var P$r=s(oJ);RWe=r(P$r,"camembert"),P$r.forEach(t),SWe=r(l8," \u2014 "),gx=n(l8,"A",{href:!0});var $$r=s(gx);PWe=r($$r,"CamembertTokenizer"),$$r.forEach(t),$We=r(l8," or "),hx=n(l8,"A",{href:!0});var I$r=s(hx);IWe=r(I$r,"CamembertTokenizerFast"),I$r.forEach(t),NWe=r(l8," (CamemBERT model)"),l8.forEach(t),jWe=i(y),qg=n(y,"LI",{});var B4e=s(qg);rJ=n(B4e,"STRONG",{});var N$r=s(rJ);DWe=r(N$r,"canine"),N$r.forEach(t),qWe=r(B4e," \u2014 "),ux=n(B4e,"A",{href:!0});var j$r=s(ux);GWe=r(j$r,"CanineTokenizer"),j$r.forEach(t),OWe=r(B4e," (Canine model)"),B4e.forEach(t),XWe=i(y),es=n(y,"LI",{});var i8=s(es);tJ=n(i8,"STRONG",{});var D$r=s(tJ);VWe=r(D$r,"clip"),D$r.forEach(t),zWe=r(i8," \u2014 "),px=n(i8,"A",{href:!0});var q$r=s(px);WWe=r(q$r,"CLIPTokenizer"),q$r.forEach(t),QWe=r(i8," or "),_x=n(i8,"A",{href:!0});var G$r=s(_x);HWe=r(G$r,"CLIPTokenizerFast"),G$r.forEach(t),UWe=r(i8," (CLIP model)"),i8.forEach(t),JWe=i(y),os=n(y,"LI",{});var d8=s(os);aJ=n(d8,"STRONG",{});var O$r=s(aJ);YWe=r(O$r,"convbert"),O$r.forEach(t),KWe=r(d8," \u2014 "),bx=n(d8,"A",{href:!0});var X$r=s(bx);ZWe=r(X$r,"ConvBertTokenizer"),X$r.forEach(t),eQe=r(d8," or "),vx=n(d8,"A",{href:!0});var V$r=s(vx);oQe=r(V$r,"ConvBertTokenizerFast"),V$r.forEach(t),rQe=r(d8," (ConvBERT model)"),d8.forEach(t),tQe=i(y),rs=n(y,"LI",{});var c8=s(rs);nJ=n(c8,"STRONG",{});var z$r=s(nJ);aQe=r(z$r,"cpm"),z$r.forEach(t),nQe=r(c8," \u2014 "),Tx=n(c8,"A",{href:!0});var W$r=s(Tx);sQe=r(W$r,"CpmTokenizer"),W$r.forEach(t),lQe=r(c8," or "),sJ=n(c8,"CODE",{});var Q$r=s(sJ);iQe=r(Q$r,"CpmTokenizerFast"),Q$r.forEach(t),dQe=r(c8," (CPM model)"),c8.forEach(t),cQe=i(y),Gg=n(y,"LI",{});var x4e=s(Gg);lJ=n(x4e,"STRONG",{});var H$r=s(lJ);mQe=r(H$r,"ctrl"),H$r.forEach(t),fQe=r(x4e," \u2014 "),Fx=n(x4e,"A",{href:!0});var U$r=s(Fx);gQe=r(U$r,"CTRLTokenizer"),U$r.forEach(t),hQe=r(x4e," (CTRL model)"),x4e.forEach(t),uQe=i(y),ts=n(y,"LI",{});var m8=s(ts);iJ=n(m8,"STRONG",{});var J$r=s(iJ);pQe=r(J$r,"deberta"),J$r.forEach(t),_Qe=r(m8," \u2014 "),Cx=n(m8,"A",{href:!0});var Y$r=s(Cx);bQe=r(Y$r,"DebertaTokenizer"),Y$r.forEach(t),vQe=r(m8," or "),Mx=n(m8,"A",{href:!0});var K$r=s(Mx);TQe=r(K$r,"DebertaTokenizerFast"),K$r.forEach(t),FQe=r(m8," (DeBERTa model)"),m8.forEach(t),CQe=i(y),Og=n(y,"LI",{});var k4e=s(Og);dJ=n(k4e,"STRONG",{});var Z$r=s(dJ);MQe=r(Z$r,"deberta-v2"),Z$r.forEach(t),EQe=r(k4e," \u2014 "),Ex=n(k4e,"A",{href:!0});var eIr=s(Ex);yQe=r(eIr,"DebertaV2Tokenizer"),eIr.forEach(t),wQe=r(k4e," (DeBERTa-v2 model)"),k4e.forEach(t),AQe=i(y),as=n(y,"LI",{});var f8=s(as);cJ=n(f8,"STRONG",{});var oIr=s(cJ);LQe=r(oIr,"distilbert"),oIr.forEach(t),BQe=r(f8," \u2014 "),yx=n(f8,"A",{href:!0});var rIr=s(yx);xQe=r(rIr,"DistilBertTokenizer"),rIr.forEach(t),kQe=r(f8," or "),wx=n(f8,"A",{href:!0});var tIr=s(wx);RQe=r(tIr,"DistilBertTokenizerFast"),tIr.forEach(t),SQe=r(f8," (DistilBERT model)"),f8.forEach(t),PQe=i(y),ns=n(y,"LI",{});var g8=s(ns);mJ=n(g8,"STRONG",{});var aIr=s(mJ);$Qe=r(aIr,"dpr"),aIr.forEach(t),IQe=r(g8," \u2014 "),Ax=n(g8,"A",{href:!0});var nIr=s(Ax);NQe=r(nIr,"DPRQuestionEncoderTokenizer"),nIr.forEach(t),jQe=r(g8," or "),Lx=n(g8,"A",{href:!0});var sIr=s(Lx);DQe=r(sIr,"DPRQuestionEncoderTokenizerFast"),sIr.forEach(t),qQe=r(g8," (DPR model)"),g8.forEach(t),GQe=i(y),ss=n(y,"LI",{});var h8=s(ss);fJ=n(h8,"STRONG",{});var lIr=s(fJ);OQe=r(lIr,"electra"),lIr.forEach(t),XQe=r(h8," \u2014 "),Bx=n(h8,"A",{href:!0});var iIr=s(Bx);VQe=r(iIr,"ElectraTokenizer"),iIr.forEach(t),zQe=r(h8," or "),xx=n(h8,"A",{href:!0});var dIr=s(xx);WQe=r(dIr,"ElectraTokenizerFast"),dIr.forEach(t),QQe=r(h8," (ELECTRA model)"),h8.forEach(t),HQe=i(y),Xg=n(y,"LI",{});var R4e=s(Xg);gJ=n(R4e,"STRONG",{});var cIr=s(gJ);UQe=r(cIr,"flaubert"),cIr.forEach(t),JQe=r(R4e," \u2014 "),kx=n(R4e,"A",{href:!0});var mIr=s(kx);YQe=r(mIr,"FlaubertTokenizer"),mIr.forEach(t),KQe=r(R4e," (FlauBERT model)"),R4e.forEach(t),ZQe=i(y),ls=n(y,"LI",{});var u8=s(ls);hJ=n(u8,"STRONG",{});var fIr=s(hJ);eHe=r(fIr,"fnet"),fIr.forEach(t),oHe=r(u8," \u2014 "),Rx=n(u8,"A",{href:!0});var gIr=s(Rx);rHe=r(gIr,"FNetTokenizer"),gIr.forEach(t),tHe=r(u8," or "),Sx=n(u8,"A",{href:!0});var hIr=s(Sx);aHe=r(hIr,"FNetTokenizerFast"),hIr.forEach(t),nHe=r(u8," (FNet model)"),u8.forEach(t),sHe=i(y),Vg=n(y,"LI",{});var S4e=s(Vg);uJ=n(S4e,"STRONG",{});var uIr=s(uJ);lHe=r(uIr,"fsmt"),uIr.forEach(t),iHe=r(S4e," \u2014 "),Px=n(S4e,"A",{href:!0});var pIr=s(Px);dHe=r(pIr,"FSMTTokenizer"),pIr.forEach(t),cHe=r(S4e," (FairSeq Machine-Translation model)"),S4e.forEach(t),mHe=i(y),is=n(y,"LI",{});var p8=s(is);pJ=n(p8,"STRONG",{});var _Ir=s(pJ);fHe=r(_Ir,"funnel"),_Ir.forEach(t),gHe=r(p8," \u2014 "),$x=n(p8,"A",{href:!0});var bIr=s($x);hHe=r(bIr,"FunnelTokenizer"),bIr.forEach(t),uHe=r(p8," or "),Ix=n(p8,"A",{href:!0});var vIr=s(Ix);pHe=r(vIr,"FunnelTokenizerFast"),vIr.forEach(t),_He=r(p8," (Funnel Transformer model)"),p8.forEach(t),bHe=i(y),ds=n(y,"LI",{});var _8=s(ds);_J=n(_8,"STRONG",{});var TIr=s(_J);vHe=r(TIr,"gpt2"),TIr.forEach(t),THe=r(_8," \u2014 "),Nx=n(_8,"A",{href:!0});var FIr=s(Nx);FHe=r(FIr,"GPT2Tokenizer"),FIr.forEach(t),CHe=r(_8," or "),jx=n(_8,"A",{href:!0});var CIr=s(jx);MHe=r(CIr,"GPT2TokenizerFast"),CIr.forEach(t),EHe=r(_8," (OpenAI GPT-2 model)"),_8.forEach(t),yHe=i(y),cs=n(y,"LI",{});var b8=s(cs);bJ=n(b8,"STRONG",{});var MIr=s(bJ);wHe=r(MIr,"gpt_neo"),MIr.forEach(t),AHe=r(b8," \u2014 "),Dx=n(b8,"A",{href:!0});var EIr=s(Dx);LHe=r(EIr,"GPT2Tokenizer"),EIr.forEach(t),BHe=r(b8," or "),qx=n(b8,"A",{href:!0});var yIr=s(qx);xHe=r(yIr,"GPT2TokenizerFast"),yIr.forEach(t),kHe=r(b8," (GPT Neo model)"),b8.forEach(t),RHe=i(y),ms=n(y,"LI",{});var v8=s(ms);vJ=n(v8,"STRONG",{});var wIr=s(vJ);SHe=r(wIr,"herbert"),wIr.forEach(t),PHe=r(v8," \u2014 "),Gx=n(v8,"A",{href:!0});var AIr=s(Gx);$He=r(AIr,"HerbertTokenizer"),AIr.forEach(t),IHe=r(v8," or "),Ox=n(v8,"A",{href:!0});var LIr=s(Ox);NHe=r(LIr,"HerbertTokenizerFast"),LIr.forEach(t),jHe=r(v8," (HerBERT model)"),v8.forEach(t),DHe=i(y),zg=n(y,"LI",{});var P4e=s(zg);TJ=n(P4e,"STRONG",{});var BIr=s(TJ);qHe=r(BIr,"hubert"),BIr.forEach(t),GHe=r(P4e," \u2014 "),Xx=n(P4e,"A",{href:!0});var xIr=s(Xx);OHe=r(xIr,"Wav2Vec2CTCTokenizer"),xIr.forEach(t),XHe=r(P4e," (Hubert model)"),P4e.forEach(t),VHe=i(y),fs=n(y,"LI",{});var T8=s(fs);FJ=n(T8,"STRONG",{});var kIr=s(FJ);zHe=r(kIr,"ibert"),kIr.forEach(t),WHe=r(T8," \u2014 "),Vx=n(T8,"A",{href:!0});var RIr=s(Vx);QHe=r(RIr,"RobertaTokenizer"),RIr.forEach(t),HHe=r(T8," or "),zx=n(T8,"A",{href:!0});var SIr=s(zx);UHe=r(SIr,"RobertaTokenizerFast"),SIr.forEach(t),JHe=r(T8," (I-BERT model)"),T8.forEach(t),YHe=i(y),gs=n(y,"LI",{});var F8=s(gs);CJ=n(F8,"STRONG",{});var PIr=s(CJ);KHe=r(PIr,"layoutlm"),PIr.forEach(t),ZHe=r(F8," \u2014 "),Wx=n(F8,"A",{href:!0});var $Ir=s(Wx);eUe=r($Ir,"LayoutLMTokenizer"),$Ir.forEach(t),oUe=r(F8," or "),Qx=n(F8,"A",{href:!0});var IIr=s(Qx);rUe=r(IIr,"LayoutLMTokenizerFast"),IIr.forEach(t),tUe=r(F8," (LayoutLM model)"),F8.forEach(t),aUe=i(y),hs=n(y,"LI",{});var C8=s(hs);MJ=n(C8,"STRONG",{});var NIr=s(MJ);nUe=r(NIr,"layoutlmv2"),NIr.forEach(t),sUe=r(C8," \u2014 "),Hx=n(C8,"A",{href:!0});var jIr=s(Hx);lUe=r(jIr,"LayoutLMv2Tokenizer"),jIr.forEach(t),iUe=r(C8," or "),Ux=n(C8,"A",{href:!0});var DIr=s(Ux);dUe=r(DIr,"LayoutLMv2TokenizerFast"),DIr.forEach(t),cUe=r(C8," (LayoutLMv2 model)"),C8.forEach(t),mUe=i(y),us=n(y,"LI",{});var M8=s(us);EJ=n(M8,"STRONG",{});var qIr=s(EJ);fUe=r(qIr,"layoutxlm"),qIr.forEach(t),gUe=r(M8," \u2014 "),Jx=n(M8,"A",{href:!0});var GIr=s(Jx);hUe=r(GIr,"LayoutXLMTokenizer"),GIr.forEach(t),uUe=r(M8," or "),Yx=n(M8,"A",{href:!0});var OIr=s(Yx);pUe=r(OIr,"LayoutXLMTokenizerFast"),OIr.forEach(t),_Ue=r(M8," (LayoutXLM model)"),M8.forEach(t),bUe=i(y),ps=n(y,"LI",{});var E8=s(ps);yJ=n(E8,"STRONG",{});var XIr=s(yJ);vUe=r(XIr,"led"),XIr.forEach(t),TUe=r(E8," \u2014 "),Kx=n(E8,"A",{href:!0});var VIr=s(Kx);FUe=r(VIr,"LEDTokenizer"),VIr.forEach(t),CUe=r(E8," or "),Zx=n(E8,"A",{href:!0});var zIr=s(Zx);MUe=r(zIr,"LEDTokenizerFast"),zIr.forEach(t),EUe=r(E8," (LED model)"),E8.forEach(t),yUe=i(y),_s=n(y,"LI",{});var y8=s(_s);wJ=n(y8,"STRONG",{});var WIr=s(wJ);wUe=r(WIr,"longformer"),WIr.forEach(t),AUe=r(y8," \u2014 "),ek=n(y8,"A",{href:!0});var QIr=s(ek);LUe=r(QIr,"LongformerTokenizer"),QIr.forEach(t),BUe=r(y8," or "),ok=n(y8,"A",{href:!0});var HIr=s(ok);xUe=r(HIr,"LongformerTokenizerFast"),HIr.forEach(t),kUe=r(y8," (Longformer model)"),y8.forEach(t),RUe=i(y),Wg=n(y,"LI",{});var $4e=s(Wg);AJ=n($4e,"STRONG",{});var UIr=s(AJ);SUe=r(UIr,"luke"),UIr.forEach(t),PUe=r($4e," \u2014 "),rk=n($4e,"A",{href:!0});var JIr=s(rk);$Ue=r(JIr,"LukeTokenizer"),JIr.forEach(t),IUe=r($4e," (LUKE model)"),$4e.forEach(t),NUe=i(y),bs=n(y,"LI",{});var w8=s(bs);LJ=n(w8,"STRONG",{});var YIr=s(LJ);jUe=r(YIr,"lxmert"),YIr.forEach(t),DUe=r(w8," \u2014 "),tk=n(w8,"A",{href:!0});var KIr=s(tk);qUe=r(KIr,"LxmertTokenizer"),KIr.forEach(t),GUe=r(w8," or "),ak=n(w8,"A",{href:!0});var ZIr=s(ak);OUe=r(ZIr,"LxmertTokenizerFast"),ZIr.forEach(t),XUe=r(w8," (LXMERT model)"),w8.forEach(t),VUe=i(y),Qg=n(y,"LI",{});var I4e=s(Qg);BJ=n(I4e,"STRONG",{});var eNr=s(BJ);zUe=r(eNr,"m2m_100"),eNr.forEach(t),WUe=r(I4e," \u2014 "),nk=n(I4e,"A",{href:!0});var oNr=s(nk);QUe=r(oNr,"M2M100Tokenizer"),oNr.forEach(t),HUe=r(I4e," (M2M100 model)"),I4e.forEach(t),UUe=i(y),Hg=n(y,"LI",{});var N4e=s(Hg);xJ=n(N4e,"STRONG",{});var rNr=s(xJ);JUe=r(rNr,"marian"),rNr.forEach(t),YUe=r(N4e," \u2014 "),sk=n(N4e,"A",{href:!0});var tNr=s(sk);KUe=r(tNr,"MarianTokenizer"),tNr.forEach(t),ZUe=r(N4e," (Marian model)"),N4e.forEach(t),eJe=i(y),vs=n(y,"LI",{});var A8=s(vs);kJ=n(A8,"STRONG",{});var aNr=s(kJ);oJe=r(aNr,"mbart"),aNr.forEach(t),rJe=r(A8," \u2014 "),lk=n(A8,"A",{href:!0});var nNr=s(lk);tJe=r(nNr,"MBartTokenizer"),nNr.forEach(t),aJe=r(A8," or "),ik=n(A8,"A",{href:!0});var sNr=s(ik);nJe=r(sNr,"MBartTokenizerFast"),sNr.forEach(t),sJe=r(A8," (mBART model)"),A8.forEach(t),lJe=i(y),Ts=n(y,"LI",{});var L8=s(Ts);RJ=n(L8,"STRONG",{});var lNr=s(RJ);iJe=r(lNr,"mbart50"),lNr.forEach(t),dJe=r(L8," \u2014 "),dk=n(L8,"A",{href:!0});var iNr=s(dk);cJe=r(iNr,"MBart50Tokenizer"),iNr.forEach(t),mJe=r(L8," or "),ck=n(L8,"A",{href:!0});var dNr=s(ck);fJe=r(dNr,"MBart50TokenizerFast"),dNr.forEach(t),gJe=r(L8," (mBART-50 model)"),L8.forEach(t),hJe=i(y),Ug=n(y,"LI",{});var j4e=s(Ug);SJ=n(j4e,"STRONG",{});var cNr=s(SJ);uJe=r(cNr,"mluke"),cNr.forEach(t),pJe=r(j4e," \u2014 "),mk=n(j4e,"A",{href:!0});var mNr=s(mk);_Je=r(mNr,"MLukeTokenizer"),mNr.forEach(t),bJe=r(j4e," (mLUKE model)"),j4e.forEach(t),vJe=i(y),Fs=n(y,"LI",{});var B8=s(Fs);PJ=n(B8,"STRONG",{});var fNr=s(PJ);TJe=r(fNr,"mobilebert"),fNr.forEach(t),FJe=r(B8," \u2014 "),fk=n(B8,"A",{href:!0});var gNr=s(fk);CJe=r(gNr,"MobileBertTokenizer"),gNr.forEach(t),MJe=r(B8," or "),gk=n(B8,"A",{href:!0});var hNr=s(gk);EJe=r(hNr,"MobileBertTokenizerFast"),hNr.forEach(t),yJe=r(B8," (MobileBERT model)"),B8.forEach(t),wJe=i(y),Cs=n(y,"LI",{});var x8=s(Cs);$J=n(x8,"STRONG",{});var uNr=s($J);AJe=r(uNr,"mpnet"),uNr.forEach(t),LJe=r(x8," \u2014 "),hk=n(x8,"A",{href:!0});var pNr=s(hk);BJe=r(pNr,"MPNetTokenizer"),pNr.forEach(t),xJe=r(x8," or "),uk=n(x8,"A",{href:!0});var _Nr=s(uk);kJe=r(_Nr,"MPNetTokenizerFast"),_Nr.forEach(t),RJe=r(x8," (MPNet model)"),x8.forEach(t),SJe=i(y),Ms=n(y,"LI",{});var k8=s(Ms);IJ=n(k8,"STRONG",{});var bNr=s(IJ);PJe=r(bNr,"mt5"),bNr.forEach(t),$Je=r(k8," \u2014 "),pk=n(k8,"A",{href:!0});var vNr=s(pk);IJe=r(vNr,"MT5Tokenizer"),vNr.forEach(t),NJe=r(k8," or "),_k=n(k8,"A",{href:!0});var TNr=s(_k);jJe=r(TNr,"MT5TokenizerFast"),TNr.forEach(t),DJe=r(k8," (mT5 model)"),k8.forEach(t),qJe=i(y),Es=n(y,"LI",{});var R8=s(Es);NJ=n(R8,"STRONG",{});var FNr=s(NJ);GJe=r(FNr,"openai-gpt"),FNr.forEach(t),OJe=r(R8," \u2014 "),bk=n(R8,"A",{href:!0});var CNr=s(bk);XJe=r(CNr,"OpenAIGPTTokenizer"),CNr.forEach(t),VJe=r(R8," or "),vk=n(R8,"A",{href:!0});var MNr=s(vk);zJe=r(MNr,"OpenAIGPTTokenizerFast"),MNr.forEach(t),WJe=r(R8," (OpenAI GPT model)"),R8.forEach(t),QJe=i(y),ys=n(y,"LI",{});var S8=s(ys);jJ=n(S8,"STRONG",{});var ENr=s(jJ);HJe=r(ENr,"pegasus"),ENr.forEach(t),UJe=r(S8," \u2014 "),Tk=n(S8,"A",{href:!0});var yNr=s(Tk);JJe=r(yNr,"PegasusTokenizer"),yNr.forEach(t),YJe=r(S8," or "),Fk=n(S8,"A",{href:!0});var wNr=s(Fk);KJe=r(wNr,"PegasusTokenizerFast"),wNr.forEach(t),ZJe=r(S8," (Pegasus model)"),S8.forEach(t),eYe=i(y),Jg=n(y,"LI",{});var D4e=s(Jg);DJ=n(D4e,"STRONG",{});var ANr=s(DJ);oYe=r(ANr,"perceiver"),ANr.forEach(t),rYe=r(D4e," \u2014 "),Ck=n(D4e,"A",{href:!0});var LNr=s(Ck);tYe=r(LNr,"PerceiverTokenizer"),LNr.forEach(t),aYe=r(D4e," (Perceiver model)"),D4e.forEach(t),nYe=i(y),Yg=n(y,"LI",{});var q4e=s(Yg);qJ=n(q4e,"STRONG",{});var BNr=s(qJ);sYe=r(BNr,"phobert"),BNr.forEach(t),lYe=r(q4e," \u2014 "),Mk=n(q4e,"A",{href:!0});var xNr=s(Mk);iYe=r(xNr,"PhobertTokenizer"),xNr.forEach(t),dYe=r(q4e," (PhoBERT model)"),q4e.forEach(t),cYe=i(y),Kg=n(y,"LI",{});var G4e=s(Kg);GJ=n(G4e,"STRONG",{});var kNr=s(GJ);mYe=r(kNr,"plbart"),kNr.forEach(t),fYe=r(G4e," \u2014 "),Ek=n(G4e,"A",{href:!0});var RNr=s(Ek);gYe=r(RNr,"PLBartTokenizer"),RNr.forEach(t),hYe=r(G4e," (PLBart model)"),G4e.forEach(t),uYe=i(y),Zg=n(y,"LI",{});var O4e=s(Zg);OJ=n(O4e,"STRONG",{});var SNr=s(OJ);pYe=r(SNr,"prophetnet"),SNr.forEach(t),_Ye=r(O4e," \u2014 "),yk=n(O4e,"A",{href:!0});var PNr=s(yk);bYe=r(PNr,"ProphetNetTokenizer"),PNr.forEach(t),vYe=r(O4e," (ProphetNet model)"),O4e.forEach(t),TYe=i(y),ws=n(y,"LI",{});var P8=s(ws);XJ=n(P8,"STRONG",{});var $Nr=s(XJ);FYe=r($Nr,"qdqbert"),$Nr.forEach(t),CYe=r(P8," \u2014 "),wk=n(P8,"A",{href:!0});var INr=s(wk);MYe=r(INr,"BertTokenizer"),INr.forEach(t),EYe=r(P8," or "),Ak=n(P8,"A",{href:!0});var NNr=s(Ak);yYe=r(NNr,"BertTokenizerFast"),NNr.forEach(t),wYe=r(P8," (QDQBert model)"),P8.forEach(t),AYe=i(y),eh=n(y,"LI",{});var X4e=s(eh);VJ=n(X4e,"STRONG",{});var jNr=s(VJ);LYe=r(jNr,"rag"),jNr.forEach(t),BYe=r(X4e," \u2014 "),Lk=n(X4e,"A",{href:!0});var DNr=s(Lk);xYe=r(DNr,"RagTokenizer"),DNr.forEach(t),kYe=r(X4e," (RAG model)"),X4e.forEach(t),RYe=i(y),As=n(y,"LI",{});var $8=s(As);zJ=n($8,"STRONG",{});var qNr=s(zJ);SYe=r(qNr,"realm"),qNr.forEach(t),PYe=r($8," \u2014 "),Bk=n($8,"A",{href:!0});var GNr=s(Bk);$Ye=r(GNr,"RealmTokenizer"),GNr.forEach(t),IYe=r($8," or "),xk=n($8,"A",{href:!0});var ONr=s(xk);NYe=r(ONr,"RealmTokenizerFast"),ONr.forEach(t),jYe=r($8," (Realm model)"),$8.forEach(t),DYe=i(y),Ls=n(y,"LI",{});var I8=s(Ls);WJ=n(I8,"STRONG",{});var XNr=s(WJ);qYe=r(XNr,"reformer"),XNr.forEach(t),GYe=r(I8," \u2014 "),kk=n(I8,"A",{href:!0});var VNr=s(kk);OYe=r(VNr,"ReformerTokenizer"),VNr.forEach(t),XYe=r(I8," or "),Rk=n(I8,"A",{href:!0});var zNr=s(Rk);VYe=r(zNr,"ReformerTokenizerFast"),zNr.forEach(t),zYe=r(I8," (Reformer model)"),I8.forEach(t),WYe=i(y),Bs=n(y,"LI",{});var N8=s(Bs);QJ=n(N8,"STRONG",{});var WNr=s(QJ);QYe=r(WNr,"rembert"),WNr.forEach(t),HYe=r(N8," \u2014 "),Sk=n(N8,"A",{href:!0});var QNr=s(Sk);UYe=r(QNr,"RemBertTokenizer"),QNr.forEach(t),JYe=r(N8," or "),Pk=n(N8,"A",{href:!0});var HNr=s(Pk);YYe=r(HNr,"RemBertTokenizerFast"),HNr.forEach(t),KYe=r(N8," (RemBERT model)"),N8.forEach(t),ZYe=i(y),xs=n(y,"LI",{});var j8=s(xs);HJ=n(j8,"STRONG",{});var UNr=s(HJ);eKe=r(UNr,"retribert"),UNr.forEach(t),oKe=r(j8," \u2014 "),$k=n(j8,"A",{href:!0});var JNr=s($k);rKe=r(JNr,"RetriBertTokenizer"),JNr.forEach(t),tKe=r(j8," or "),Ik=n(j8,"A",{href:!0});var YNr=s(Ik);aKe=r(YNr,"RetriBertTokenizerFast"),YNr.forEach(t),nKe=r(j8," (RetriBERT model)"),j8.forEach(t),sKe=i(y),ks=n(y,"LI",{});var D8=s(ks);UJ=n(D8,"STRONG",{});var KNr=s(UJ);lKe=r(KNr,"roberta"),KNr.forEach(t),iKe=r(D8," \u2014 "),Nk=n(D8,"A",{href:!0});var ZNr=s(Nk);dKe=r(ZNr,"RobertaTokenizer"),ZNr.forEach(t),cKe=r(D8," or "),jk=n(D8,"A",{href:!0});var ejr=s(jk);mKe=r(ejr,"RobertaTokenizerFast"),ejr.forEach(t),fKe=r(D8," (RoBERTa model)"),D8.forEach(t),gKe=i(y),Rs=n(y,"LI",{});var q8=s(Rs);JJ=n(q8,"STRONG",{});var ojr=s(JJ);hKe=r(ojr,"roformer"),ojr.forEach(t),uKe=r(q8," \u2014 "),Dk=n(q8,"A",{href:!0});var rjr=s(Dk);pKe=r(rjr,"RoFormerTokenizer"),rjr.forEach(t),_Ke=r(q8," or "),qk=n(q8,"A",{href:!0});var tjr=s(qk);bKe=r(tjr,"RoFormerTokenizerFast"),tjr.forEach(t),vKe=r(q8," (RoFormer model)"),q8.forEach(t),TKe=i(y),oh=n(y,"LI",{});var V4e=s(oh);YJ=n(V4e,"STRONG",{});var ajr=s(YJ);FKe=r(ajr,"speech_to_text"),ajr.forEach(t),CKe=r(V4e," \u2014 "),Gk=n(V4e,"A",{href:!0});var njr=s(Gk);MKe=r(njr,"Speech2TextTokenizer"),njr.forEach(t),EKe=r(V4e," (Speech2Text model)"),V4e.forEach(t),yKe=i(y),rh=n(y,"LI",{});var z4e=s(rh);KJ=n(z4e,"STRONG",{});var sjr=s(KJ);wKe=r(sjr,"speech_to_text_2"),sjr.forEach(t),AKe=r(z4e," \u2014 "),Ok=n(z4e,"A",{href:!0});var ljr=s(Ok);LKe=r(ljr,"Speech2Text2Tokenizer"),ljr.forEach(t),BKe=r(z4e," (Speech2Text2 model)"),z4e.forEach(t),xKe=i(y),Ss=n(y,"LI",{});var G8=s(Ss);ZJ=n(G8,"STRONG",{});var ijr=s(ZJ);kKe=r(ijr,"splinter"),ijr.forEach(t),RKe=r(G8," \u2014 "),Xk=n(G8,"A",{href:!0});var djr=s(Xk);SKe=r(djr,"SplinterTokenizer"),djr.forEach(t),PKe=r(G8," or "),Vk=n(G8,"A",{href:!0});var cjr=s(Vk);$Ke=r(cjr,"SplinterTokenizerFast"),cjr.forEach(t),IKe=r(G8," (Splinter model)"),G8.forEach(t),NKe=i(y),Ps=n(y,"LI",{});var O8=s(Ps);eY=n(O8,"STRONG",{});var mjr=s(eY);jKe=r(mjr,"squeezebert"),mjr.forEach(t),DKe=r(O8," \u2014 "),zk=n(O8,"A",{href:!0});var fjr=s(zk);qKe=r(fjr,"SqueezeBertTokenizer"),fjr.forEach(t),GKe=r(O8," or "),Wk=n(O8,"A",{href:!0});var gjr=s(Wk);OKe=r(gjr,"SqueezeBertTokenizerFast"),gjr.forEach(t),XKe=r(O8," (SqueezeBERT model)"),O8.forEach(t),VKe=i(y),$s=n(y,"LI",{});var X8=s($s);oY=n(X8,"STRONG",{});var hjr=s(oY);zKe=r(hjr,"t5"),hjr.forEach(t),WKe=r(X8," \u2014 "),Qk=n(X8,"A",{href:!0});var ujr=s(Qk);QKe=r(ujr,"T5Tokenizer"),ujr.forEach(t),HKe=r(X8," or "),Hk=n(X8,"A",{href:!0});var pjr=s(Hk);UKe=r(pjr,"T5TokenizerFast"),pjr.forEach(t),JKe=r(X8," (T5 model)"),X8.forEach(t),YKe=i(y),th=n(y,"LI",{});var W4e=s(th);rY=n(W4e,"STRONG",{});var _jr=s(rY);KKe=r(_jr,"tapas"),_jr.forEach(t),ZKe=r(W4e," \u2014 "),Uk=n(W4e,"A",{href:!0});var bjr=s(Uk);eZe=r(bjr,"TapasTokenizer"),bjr.forEach(t),oZe=r(W4e," (TAPAS model)"),W4e.forEach(t),rZe=i(y),ah=n(y,"LI",{});var Q4e=s(ah);tY=n(Q4e,"STRONG",{});var vjr=s(tY);tZe=r(vjr,"transfo-xl"),vjr.forEach(t),aZe=r(Q4e," \u2014 "),Jk=n(Q4e,"A",{href:!0});var Tjr=s(Jk);nZe=r(Tjr,"TransfoXLTokenizer"),Tjr.forEach(t),sZe=r(Q4e," (Transformer-XL model)"),Q4e.forEach(t),lZe=i(y),nh=n(y,"LI",{});var H4e=s(nh);aY=n(H4e,"STRONG",{});var Fjr=s(aY);iZe=r(Fjr,"wav2vec2"),Fjr.forEach(t),dZe=r(H4e," \u2014 "),Yk=n(H4e,"A",{href:!0});var Cjr=s(Yk);cZe=r(Cjr,"Wav2Vec2CTCTokenizer"),Cjr.forEach(t),mZe=r(H4e," (Wav2Vec2 model)"),H4e.forEach(t),fZe=i(y),sh=n(y,"LI",{});var U4e=s(sh);nY=n(U4e,"STRONG",{});var Mjr=s(nY);gZe=r(Mjr,"wav2vec2_phoneme"),Mjr.forEach(t),hZe=r(U4e," \u2014 "),Kk=n(U4e,"A",{href:!0});var Ejr=s(Kk);uZe=r(Ejr,"Wav2Vec2PhonemeCTCTokenizer"),Ejr.forEach(t),pZe=r(U4e," (Wav2Vec2Phoneme model)"),U4e.forEach(t),_Ze=i(y),Is=n(y,"LI",{});var V8=s(Is);sY=n(V8,"STRONG",{});var yjr=s(sY);bZe=r(yjr,"xglm"),yjr.forEach(t),vZe=r(V8," \u2014 "),Zk=n(V8,"A",{href:!0});var wjr=s(Zk);TZe=r(wjr,"XGLMTokenizer"),wjr.forEach(t),FZe=r(V8," or "),eR=n(V8,"A",{href:!0});var Ajr=s(eR);CZe=r(Ajr,"XGLMTokenizerFast"),Ajr.forEach(t),MZe=r(V8," (XGLM model)"),V8.forEach(t),EZe=i(y),lh=n(y,"LI",{});var J4e=s(lh);lY=n(J4e,"STRONG",{});var Ljr=s(lY);yZe=r(Ljr,"xlm"),Ljr.forEach(t),wZe=r(J4e," \u2014 "),oR=n(J4e,"A",{href:!0});var Bjr=s(oR);AZe=r(Bjr,"XLMTokenizer"),Bjr.forEach(t),LZe=r(J4e," (XLM model)"),J4e.forEach(t),BZe=i(y),ih=n(y,"LI",{});var Y4e=s(ih);iY=n(Y4e,"STRONG",{});var xjr=s(iY);xZe=r(xjr,"xlm-prophetnet"),xjr.forEach(t),kZe=r(Y4e," \u2014 "),rR=n(Y4e,"A",{href:!0});var kjr=s(rR);RZe=r(kjr,"XLMProphetNetTokenizer"),kjr.forEach(t),SZe=r(Y4e," (XLMProphetNet model)"),Y4e.forEach(t),PZe=i(y),Ns=n(y,"LI",{});var z8=s(Ns);dY=n(z8,"STRONG",{});var Rjr=s(dY);$Ze=r(Rjr,"xlm-roberta"),Rjr.forEach(t),IZe=r(z8," \u2014 "),tR=n(z8,"A",{href:!0});var Sjr=s(tR);NZe=r(Sjr,"XLMRobertaTokenizer"),Sjr.forEach(t),jZe=r(z8," or "),aR=n(z8,"A",{href:!0});var Pjr=s(aR);DZe=r(Pjr,"XLMRobertaTokenizerFast"),Pjr.forEach(t),qZe=r(z8," (XLM-RoBERTa model)"),z8.forEach(t),GZe=i(y),js=n(y,"LI",{});var W8=s(js);cY=n(W8,"STRONG",{});var $jr=s(cY);OZe=r($jr,"xlnet"),$jr.forEach(t),XZe=r(W8," \u2014 "),nR=n(W8,"A",{href:!0});var Ijr=s(nR);VZe=r(Ijr,"XLNetTokenizer"),Ijr.forEach(t),zZe=r(W8," or "),sR=n(W8,"A",{href:!0});var Njr=s(sR);WZe=r(Njr,"XLNetTokenizerFast"),Njr.forEach(t),QZe=r(W8," (XLNet model)"),W8.forEach(t),y.forEach(t),HZe=i(ha),mY=n(ha,"P",{});var jjr=s(mY);UZe=r(jjr,"Examples:"),jjr.forEach(t),JZe=i(ha),f(Fy.$$.fragment,ha),ha.forEach(t),YZe=i(Xs),dh=n(Xs,"DIV",{class:!0});var nSe=s(dh);f(Cy.$$.fragment,nSe),KZe=i(nSe),fY=n(nSe,"P",{});var Djr=s(fY);ZZe=r(Djr,"Register a new tokenizer in this mapping."),Djr.forEach(t),nSe.forEach(t),Xs.forEach(t),oke=i(c),Qi=n(c,"H2",{class:!0});var sSe=s(Qi);ch=n(sSe,"A",{id:!0,class:!0,href:!0});var qjr=s(ch);gY=n(qjr,"SPAN",{});var Gjr=s(gY);f(My.$$.fragment,Gjr),Gjr.forEach(t),qjr.forEach(t),eeo=i(sSe),hY=n(sSe,"SPAN",{});var Ojr=s(hY);oeo=r(Ojr,"AutoFeatureExtractor"),Ojr.forEach(t),sSe.forEach(t),rke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);f(Ey.$$.fragment,Vs),reo=i(Vs),yy=n(Vs,"P",{});var lSe=s(yy);teo=r(lSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lR=n(lSe,"A",{href:!0});var Xjr=s(lR);aeo=r(Xjr,"AutoFeatureExtractor.from_pretrained()"),Xjr.forEach(t),neo=r(lSe," class method."),lSe.forEach(t),seo=i(Vs),wy=n(Vs,"P",{});var iSe=s(wy);leo=r(iSe,"This class cannot be instantiated directly using "),uY=n(iSe,"CODE",{});var Vjr=s(uY);ieo=r(Vjr,"__init__()"),Vjr.forEach(t),deo=r(iSe," (throws an error)."),iSe.forEach(t),ceo=i(Vs),$e=n(Vs,"DIV",{class:!0});var jt=s($e);f(Ay.$$.fragment,jt),meo=i(jt),pY=n(jt,"P",{});var zjr=s(pY);feo=r(zjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),zjr.forEach(t),geo=i(jt),Xa=n(jt,"P",{});var s5=s(Xa);heo=r(s5,"The feature extractor class to instantiate is selected based on the "),_Y=n(s5,"CODE",{});var Wjr=s(_Y);ueo=r(Wjr,"model_type"),Wjr.forEach(t),peo=r(s5,` property of the config object
(either passed as an argument or loaded from `),bY=n(s5,"CODE",{});var Qjr=s(bY);_eo=r(Qjr,"pretrained_model_name_or_path"),Qjr.forEach(t),beo=r(s5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),vY=n(s5,"CODE",{});var Hjr=s(vY);veo=r(Hjr,"pretrained_model_name_or_path"),Hjr.forEach(t),Teo=r(s5,":"),s5.forEach(t),Feo=i(jt),re=n(jt,"UL",{});var ne=s(re);mh=n(ne,"LI",{});var K4e=s(mh);TY=n(K4e,"STRONG",{});var Ujr=s(TY);Ceo=r(Ujr,"beit"),Ujr.forEach(t),Meo=r(K4e," \u2014 "),iR=n(K4e,"A",{href:!0});var Jjr=s(iR);Eeo=r(Jjr,"BeitFeatureExtractor"),Jjr.forEach(t),yeo=r(K4e," (BEiT model)"),K4e.forEach(t),weo=i(ne),fh=n(ne,"LI",{});var Z4e=s(fh);FY=n(Z4e,"STRONG",{});var Yjr=s(FY);Aeo=r(Yjr,"clip"),Yjr.forEach(t),Leo=r(Z4e," \u2014 "),dR=n(Z4e,"A",{href:!0});var Kjr=s(dR);Beo=r(Kjr,"CLIPFeatureExtractor"),Kjr.forEach(t),xeo=r(Z4e," (CLIP model)"),Z4e.forEach(t),keo=i(ne),gh=n(ne,"LI",{});var eEe=s(gh);CY=n(eEe,"STRONG",{});var Zjr=s(CY);Reo=r(Zjr,"convnext"),Zjr.forEach(t),Seo=r(eEe," \u2014 "),cR=n(eEe,"A",{href:!0});var eDr=s(cR);Peo=r(eDr,"ConvNextFeatureExtractor"),eDr.forEach(t),$eo=r(eEe," (ConvNext model)"),eEe.forEach(t),Ieo=i(ne),hh=n(ne,"LI",{});var oEe=s(hh);MY=n(oEe,"STRONG",{});var oDr=s(MY);Neo=r(oDr,"deit"),oDr.forEach(t),jeo=r(oEe," \u2014 "),mR=n(oEe,"A",{href:!0});var rDr=s(mR);Deo=r(rDr,"DeiTFeatureExtractor"),rDr.forEach(t),qeo=r(oEe," (DeiT model)"),oEe.forEach(t),Geo=i(ne),uh=n(ne,"LI",{});var rEe=s(uh);EY=n(rEe,"STRONG",{});var tDr=s(EY);Oeo=r(tDr,"detr"),tDr.forEach(t),Xeo=r(rEe," \u2014 "),fR=n(rEe,"A",{href:!0});var aDr=s(fR);Veo=r(aDr,"DetrFeatureExtractor"),aDr.forEach(t),zeo=r(rEe," (DETR model)"),rEe.forEach(t),Weo=i(ne),ph=n(ne,"LI",{});var tEe=s(ph);yY=n(tEe,"STRONG",{});var nDr=s(yY);Qeo=r(nDr,"hubert"),nDr.forEach(t),Heo=r(tEe," \u2014 "),gR=n(tEe,"A",{href:!0});var sDr=s(gR);Ueo=r(sDr,"Wav2Vec2FeatureExtractor"),sDr.forEach(t),Jeo=r(tEe," (Hubert model)"),tEe.forEach(t),Yeo=i(ne),_h=n(ne,"LI",{});var aEe=s(_h);wY=n(aEe,"STRONG",{});var lDr=s(wY);Keo=r(lDr,"layoutlmv2"),lDr.forEach(t),Zeo=r(aEe," \u2014 "),hR=n(aEe,"A",{href:!0});var iDr=s(hR);eoo=r(iDr,"LayoutLMv2FeatureExtractor"),iDr.forEach(t),ooo=r(aEe," (LayoutLMv2 model)"),aEe.forEach(t),roo=i(ne),bh=n(ne,"LI",{});var nEe=s(bh);AY=n(nEe,"STRONG",{});var dDr=s(AY);too=r(dDr,"maskformer"),dDr.forEach(t),aoo=r(nEe," \u2014 "),uR=n(nEe,"A",{href:!0});var cDr=s(uR);noo=r(cDr,"MaskFormerFeatureExtractor"),cDr.forEach(t),soo=r(nEe," (MaskFormer model)"),nEe.forEach(t),loo=i(ne),vh=n(ne,"LI",{});var sEe=s(vh);LY=n(sEe,"STRONG",{});var mDr=s(LY);ioo=r(mDr,"perceiver"),mDr.forEach(t),doo=r(sEe," \u2014 "),pR=n(sEe,"A",{href:!0});var fDr=s(pR);coo=r(fDr,"PerceiverFeatureExtractor"),fDr.forEach(t),moo=r(sEe," (Perceiver model)"),sEe.forEach(t),foo=i(ne),Th=n(ne,"LI",{});var lEe=s(Th);BY=n(lEe,"STRONG",{});var gDr=s(BY);goo=r(gDr,"poolformer"),gDr.forEach(t),hoo=r(lEe," \u2014 "),_R=n(lEe,"A",{href:!0});var hDr=s(_R);uoo=r(hDr,"PoolFormerFeatureExtractor"),hDr.forEach(t),poo=r(lEe," (PoolFormer model)"),lEe.forEach(t),_oo=i(ne),Fh=n(ne,"LI",{});var iEe=s(Fh);xY=n(iEe,"STRONG",{});var uDr=s(xY);boo=r(uDr,"resnet"),uDr.forEach(t),voo=r(iEe," \u2014 "),bR=n(iEe,"A",{href:!0});var pDr=s(bR);Too=r(pDr,"ConvNextFeatureExtractor"),pDr.forEach(t),Foo=r(iEe," (ResNet model)"),iEe.forEach(t),Coo=i(ne),Ch=n(ne,"LI",{});var dEe=s(Ch);kY=n(dEe,"STRONG",{});var _Dr=s(kY);Moo=r(_Dr,"segformer"),_Dr.forEach(t),Eoo=r(dEe," \u2014 "),vR=n(dEe,"A",{href:!0});var bDr=s(vR);yoo=r(bDr,"SegformerFeatureExtractor"),bDr.forEach(t),woo=r(dEe," (SegFormer model)"),dEe.forEach(t),Aoo=i(ne),Mh=n(ne,"LI",{});var cEe=s(Mh);RY=n(cEe,"STRONG",{});var vDr=s(RY);Loo=r(vDr,"speech_to_text"),vDr.forEach(t),Boo=r(cEe," \u2014 "),TR=n(cEe,"A",{href:!0});var TDr=s(TR);xoo=r(TDr,"Speech2TextFeatureExtractor"),TDr.forEach(t),koo=r(cEe," (Speech2Text model)"),cEe.forEach(t),Roo=i(ne),Eh=n(ne,"LI",{});var mEe=s(Eh);SY=n(mEe,"STRONG",{});var FDr=s(SY);Soo=r(FDr,"swin"),FDr.forEach(t),Poo=r(mEe," \u2014 "),FR=n(mEe,"A",{href:!0});var CDr=s(FR);$oo=r(CDr,"ViTFeatureExtractor"),CDr.forEach(t),Ioo=r(mEe," (Swin model)"),mEe.forEach(t),Noo=i(ne),yh=n(ne,"LI",{});var fEe=s(yh);PY=n(fEe,"STRONG",{});var MDr=s(PY);joo=r(MDr,"van"),MDr.forEach(t),Doo=r(fEe," \u2014 "),CR=n(fEe,"A",{href:!0});var EDr=s(CR);qoo=r(EDr,"ConvNextFeatureExtractor"),EDr.forEach(t),Goo=r(fEe," (VAN model)"),fEe.forEach(t),Ooo=i(ne),wh=n(ne,"LI",{});var gEe=s(wh);$Y=n(gEe,"STRONG",{});var yDr=s($Y);Xoo=r(yDr,"vit"),yDr.forEach(t),Voo=r(gEe," \u2014 "),MR=n(gEe,"A",{href:!0});var wDr=s(MR);zoo=r(wDr,"ViTFeatureExtractor"),wDr.forEach(t),Woo=r(gEe," (ViT model)"),gEe.forEach(t),Qoo=i(ne),Ah=n(ne,"LI",{});var hEe=s(Ah);IY=n(hEe,"STRONG",{});var ADr=s(IY);Hoo=r(ADr,"vit_mae"),ADr.forEach(t),Uoo=r(hEe," \u2014 "),ER=n(hEe,"A",{href:!0});var LDr=s(ER);Joo=r(LDr,"ViTFeatureExtractor"),LDr.forEach(t),Yoo=r(hEe," (ViTMAE model)"),hEe.forEach(t),Koo=i(ne),Lh=n(ne,"LI",{});var uEe=s(Lh);NY=n(uEe,"STRONG",{});var BDr=s(NY);Zoo=r(BDr,"wav2vec2"),BDr.forEach(t),ero=r(uEe," \u2014 "),yR=n(uEe,"A",{href:!0});var xDr=s(yR);oro=r(xDr,"Wav2Vec2FeatureExtractor"),xDr.forEach(t),rro=r(uEe," (Wav2Vec2 model)"),uEe.forEach(t),ne.forEach(t),tro=i(jt),f(Bh.$$.fragment,jt),aro=i(jt),jY=n(jt,"P",{});var kDr=s(jY);nro=r(kDr,"Examples:"),kDr.forEach(t),sro=i(jt),f(Ly.$$.fragment,jt),jt.forEach(t),lro=i(Vs),xh=n(Vs,"DIV",{class:!0});var dSe=s(xh);f(By.$$.fragment,dSe),iro=i(dSe),DY=n(dSe,"P",{});var RDr=s(DY);dro=r(RDr,"Register a new feature extractor for this class."),RDr.forEach(t),dSe.forEach(t),Vs.forEach(t),tke=i(c),Hi=n(c,"H2",{class:!0});var cSe=s(Hi);kh=n(cSe,"A",{id:!0,class:!0,href:!0});var SDr=s(kh);qY=n(SDr,"SPAN",{});var PDr=s(qY);f(xy.$$.fragment,PDr),PDr.forEach(t),SDr.forEach(t),cro=i(cSe),GY=n(cSe,"SPAN",{});var $Dr=s(GY);mro=r($Dr,"AutoProcessor"),$Dr.forEach(t),cSe.forEach(t),ake=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);f(ky.$$.fragment,zs),fro=i(zs),Ry=n(zs,"P",{});var mSe=s(Ry);gro=r(mSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wR=n(mSe,"A",{href:!0});var IDr=s(wR);hro=r(IDr,"AutoProcessor.from_pretrained()"),IDr.forEach(t),uro=r(mSe," class method."),mSe.forEach(t),pro=i(zs),Sy=n(zs,"P",{});var fSe=s(Sy);_ro=r(fSe,"This class cannot be instantiated directly using "),OY=n(fSe,"CODE",{});var NDr=s(OY);bro=r(NDr,"__init__()"),NDr.forEach(t),vro=r(fSe," (throws an error)."),fSe.forEach(t),Tro=i(zs),Ie=n(zs,"DIV",{class:!0});var Dt=s(Ie);f(Py.$$.fragment,Dt),Fro=i(Dt),XY=n(Dt,"P",{});var jDr=s(XY);Cro=r(jDr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jDr.forEach(t),Mro=i(Dt),Ui=n(Dt,"P",{});var Vz=s(Ui);Ero=r(Vz,"The processor class to instantiate is selected based on the "),VY=n(Vz,"CODE",{});var DDr=s(VY);yro=r(DDr,"model_type"),DDr.forEach(t),wro=r(Vz,` property of the config object (either
passed as an argument or loaded from `),zY=n(Vz,"CODE",{});var qDr=s(zY);Aro=r(qDr,"pretrained_model_name_or_path"),qDr.forEach(t),Lro=r(Vz," if possible):"),Vz.forEach(t),Bro=i(Dt),xe=n(Dt,"UL",{});var Do=s(xe);Rh=n(Do,"LI",{});var pEe=s(Rh);WY=n(pEe,"STRONG",{});var GDr=s(WY);xro=r(GDr,"clip"),GDr.forEach(t),kro=r(pEe," \u2014 "),AR=n(pEe,"A",{href:!0});var ODr=s(AR);Rro=r(ODr,"CLIPProcessor"),ODr.forEach(t),Sro=r(pEe," (CLIP model)"),pEe.forEach(t),Pro=i(Do),Sh=n(Do,"LI",{});var _Ee=s(Sh);QY=n(_Ee,"STRONG",{});var XDr=s(QY);$ro=r(XDr,"layoutlmv2"),XDr.forEach(t),Iro=r(_Ee," \u2014 "),LR=n(_Ee,"A",{href:!0});var VDr=s(LR);Nro=r(VDr,"LayoutLMv2Processor"),VDr.forEach(t),jro=r(_Ee," (LayoutLMv2 model)"),_Ee.forEach(t),Dro=i(Do),Ph=n(Do,"LI",{});var bEe=s(Ph);HY=n(bEe,"STRONG",{});var zDr=s(HY);qro=r(zDr,"layoutxlm"),zDr.forEach(t),Gro=r(bEe," \u2014 "),BR=n(bEe,"A",{href:!0});var WDr=s(BR);Oro=r(WDr,"LayoutXLMProcessor"),WDr.forEach(t),Xro=r(bEe," (LayoutXLM model)"),bEe.forEach(t),Vro=i(Do),$h=n(Do,"LI",{});var vEe=s($h);UY=n(vEe,"STRONG",{});var QDr=s(UY);zro=r(QDr,"speech_to_text"),QDr.forEach(t),Wro=r(vEe," \u2014 "),xR=n(vEe,"A",{href:!0});var HDr=s(xR);Qro=r(HDr,"Speech2TextProcessor"),HDr.forEach(t),Hro=r(vEe," (Speech2Text model)"),vEe.forEach(t),Uro=i(Do),Ih=n(Do,"LI",{});var TEe=s(Ih);JY=n(TEe,"STRONG",{});var UDr=s(JY);Jro=r(UDr,"speech_to_text_2"),UDr.forEach(t),Yro=r(TEe," \u2014 "),kR=n(TEe,"A",{href:!0});var JDr=s(kR);Kro=r(JDr,"Speech2Text2Processor"),JDr.forEach(t),Zro=r(TEe," (Speech2Text2 model)"),TEe.forEach(t),eto=i(Do),Nh=n(Do,"LI",{});var FEe=s(Nh);YY=n(FEe,"STRONG",{});var YDr=s(YY);oto=r(YDr,"trocr"),YDr.forEach(t),rto=r(FEe," \u2014 "),RR=n(FEe,"A",{href:!0});var KDr=s(RR);tto=r(KDr,"TrOCRProcessor"),KDr.forEach(t),ato=r(FEe," (TrOCR model)"),FEe.forEach(t),nto=i(Do),jh=n(Do,"LI",{});var CEe=s(jh);KY=n(CEe,"STRONG",{});var ZDr=s(KY);sto=r(ZDr,"vision-text-dual-encoder"),ZDr.forEach(t),lto=r(CEe," \u2014 "),SR=n(CEe,"A",{href:!0});var eqr=s(SR);ito=r(eqr,"VisionTextDualEncoderProcessor"),eqr.forEach(t),dto=r(CEe," (VisionTextDualEncoder model)"),CEe.forEach(t),cto=i(Do),Dh=n(Do,"LI",{});var MEe=s(Dh);ZY=n(MEe,"STRONG",{});var oqr=s(ZY);mto=r(oqr,"wav2vec2"),oqr.forEach(t),fto=r(MEe," \u2014 "),PR=n(MEe,"A",{href:!0});var rqr=s(PR);gto=r(rqr,"Wav2Vec2Processor"),rqr.forEach(t),hto=r(MEe," (Wav2Vec2 model)"),MEe.forEach(t),Do.forEach(t),uto=i(Dt),f(qh.$$.fragment,Dt),pto=i(Dt),eK=n(Dt,"P",{});var tqr=s(eK);_to=r(tqr,"Examples:"),tqr.forEach(t),bto=i(Dt),f($y.$$.fragment,Dt),Dt.forEach(t),vto=i(zs),Gh=n(zs,"DIV",{class:!0});var gSe=s(Gh);f(Iy.$$.fragment,gSe),Tto=i(gSe),oK=n(gSe,"P",{});var aqr=s(oK);Fto=r(aqr,"Register a new processor for this class."),aqr.forEach(t),gSe.forEach(t),zs.forEach(t),nke=i(c),Ji=n(c,"H2",{class:!0});var hSe=s(Ji);Oh=n(hSe,"A",{id:!0,class:!0,href:!0});var nqr=s(Oh);rK=n(nqr,"SPAN",{});var sqr=s(rK);f(Ny.$$.fragment,sqr),sqr.forEach(t),nqr.forEach(t),Cto=i(hSe),tK=n(hSe,"SPAN",{});var lqr=s(tK);Mto=r(lqr,"AutoModel"),lqr.forEach(t),hSe.forEach(t),ske=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);f(jy.$$.fragment,Ws),Eto=i(Ws),Yi=n(Ws,"P",{});var zz=s(Yi);yto=r(zz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aK=n(zz,"CODE",{});var iqr=s(aK);wto=r(iqr,"from_pretrained()"),iqr.forEach(t),Ato=r(zz,"class method or the "),nK=n(zz,"CODE",{});var dqr=s(nK);Lto=r(dqr,"from_config()"),dqr.forEach(t),Bto=r(zz,`class
method.`),zz.forEach(t),xto=i(Ws),Dy=n(Ws,"P",{});var uSe=s(Dy);kto=r(uSe,"This class cannot be instantiated directly using "),sK=n(uSe,"CODE",{});var cqr=s(sK);Rto=r(cqr,"__init__()"),cqr.forEach(t),Sto=r(uSe," (throws an error)."),uSe.forEach(t),Pto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);f(qy.$$.fragment,Qs),$to=i(Qs),lK=n(Qs,"P",{});var mqr=s(lK);Ito=r(mqr,"Instantiates one of the base model classes of the library from a configuration."),mqr.forEach(t),Nto=i(Qs),Ki=n(Qs,"P",{});var Wz=s(Ki);jto=r(Wz,`Note:
Loading a model from its configuration file does `),iK=n(Wz,"STRONG",{});var fqr=s(iK);Dto=r(fqr,"not"),fqr.forEach(t),qto=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(Wz,"CODE",{});var gqr=s(dK);Gto=r(gqr,"from_pretrained()"),gqr.forEach(t),Oto=r(Wz,"to load the model weights."),Wz.forEach(t),Xto=i(Qs),cK=n(Qs,"P",{});var hqr=s(cK);Vto=r(hqr,"Examples:"),hqr.forEach(t),zto=i(Qs),f(Gy.$$.fragment,Qs),Qs.forEach(t),Wto=i(Ws),Ne=n(Ws,"DIV",{class:!0});var qt=s(Ne);f(Oy.$$.fragment,qt),Qto=i(qt),mK=n(qt,"P",{});var uqr=s(mK);Hto=r(uqr,"Instantiate one of the base model classes of the library from a pretrained model."),uqr.forEach(t),Uto=i(qt),Va=n(qt,"P",{});var l5=s(Va);Jto=r(l5,"The model class to instantiate is selected based on the "),fK=n(l5,"CODE",{});var pqr=s(fK);Yto=r(pqr,"model_type"),pqr.forEach(t),Kto=r(l5,` property of the config object (either
passed as an argument or loaded from `),gK=n(l5,"CODE",{});var _qr=s(gK);Zto=r(_qr,"pretrained_model_name_or_path"),_qr.forEach(t),eao=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hK=n(l5,"CODE",{});var bqr=s(hK);oao=r(bqr,"pretrained_model_name_or_path"),bqr.forEach(t),rao=r(l5,":"),l5.forEach(t),tao=i(qt),F=n(qt,"UL",{});var C=s(F);Xh=n(C,"LI",{});var EEe=s(Xh);uK=n(EEe,"STRONG",{});var vqr=s(uK);aao=r(vqr,"albert"),vqr.forEach(t),nao=r(EEe," \u2014 "),$R=n(EEe,"A",{href:!0});var Tqr=s($R);sao=r(Tqr,"AlbertModel"),Tqr.forEach(t),lao=r(EEe," (ALBERT model)"),EEe.forEach(t),iao=i(C),Vh=n(C,"LI",{});var yEe=s(Vh);pK=n(yEe,"STRONG",{});var Fqr=s(pK);dao=r(Fqr,"bart"),Fqr.forEach(t),cao=r(yEe," \u2014 "),IR=n(yEe,"A",{href:!0});var Cqr=s(IR);mao=r(Cqr,"BartModel"),Cqr.forEach(t),fao=r(yEe," (BART model)"),yEe.forEach(t),gao=i(C),zh=n(C,"LI",{});var wEe=s(zh);_K=n(wEe,"STRONG",{});var Mqr=s(_K);hao=r(Mqr,"beit"),Mqr.forEach(t),uao=r(wEe," \u2014 "),NR=n(wEe,"A",{href:!0});var Eqr=s(NR);pao=r(Eqr,"BeitModel"),Eqr.forEach(t),_ao=r(wEe," (BEiT model)"),wEe.forEach(t),bao=i(C),Wh=n(C,"LI",{});var AEe=s(Wh);bK=n(AEe,"STRONG",{});var yqr=s(bK);vao=r(yqr,"bert"),yqr.forEach(t),Tao=r(AEe," \u2014 "),jR=n(AEe,"A",{href:!0});var wqr=s(jR);Fao=r(wqr,"BertModel"),wqr.forEach(t),Cao=r(AEe," (BERT model)"),AEe.forEach(t),Mao=i(C),Qh=n(C,"LI",{});var LEe=s(Qh);vK=n(LEe,"STRONG",{});var Aqr=s(vK);Eao=r(Aqr,"bert-generation"),Aqr.forEach(t),yao=r(LEe," \u2014 "),DR=n(LEe,"A",{href:!0});var Lqr=s(DR);wao=r(Lqr,"BertGenerationEncoder"),Lqr.forEach(t),Aao=r(LEe," (Bert Generation model)"),LEe.forEach(t),Lao=i(C),Hh=n(C,"LI",{});var BEe=s(Hh);TK=n(BEe,"STRONG",{});var Bqr=s(TK);Bao=r(Bqr,"big_bird"),Bqr.forEach(t),xao=r(BEe," \u2014 "),qR=n(BEe,"A",{href:!0});var xqr=s(qR);kao=r(xqr,"BigBirdModel"),xqr.forEach(t),Rao=r(BEe," (BigBird model)"),BEe.forEach(t),Sao=i(C),Uh=n(C,"LI",{});var xEe=s(Uh);FK=n(xEe,"STRONG",{});var kqr=s(FK);Pao=r(kqr,"bigbird_pegasus"),kqr.forEach(t),$ao=r(xEe," \u2014 "),GR=n(xEe,"A",{href:!0});var Rqr=s(GR);Iao=r(Rqr,"BigBirdPegasusModel"),Rqr.forEach(t),Nao=r(xEe," (BigBirdPegasus model)"),xEe.forEach(t),jao=i(C),Jh=n(C,"LI",{});var kEe=s(Jh);CK=n(kEe,"STRONG",{});var Sqr=s(CK);Dao=r(Sqr,"blenderbot"),Sqr.forEach(t),qao=r(kEe," \u2014 "),OR=n(kEe,"A",{href:!0});var Pqr=s(OR);Gao=r(Pqr,"BlenderbotModel"),Pqr.forEach(t),Oao=r(kEe," (Blenderbot model)"),kEe.forEach(t),Xao=i(C),Yh=n(C,"LI",{});var REe=s(Yh);MK=n(REe,"STRONG",{});var $qr=s(MK);Vao=r($qr,"blenderbot-small"),$qr.forEach(t),zao=r(REe," \u2014 "),XR=n(REe,"A",{href:!0});var Iqr=s(XR);Wao=r(Iqr,"BlenderbotSmallModel"),Iqr.forEach(t),Qao=r(REe," (BlenderbotSmall model)"),REe.forEach(t),Hao=i(C),Kh=n(C,"LI",{});var SEe=s(Kh);EK=n(SEe,"STRONG",{});var Nqr=s(EK);Uao=r(Nqr,"camembert"),Nqr.forEach(t),Jao=r(SEe," \u2014 "),VR=n(SEe,"A",{href:!0});var jqr=s(VR);Yao=r(jqr,"CamembertModel"),jqr.forEach(t),Kao=r(SEe," (CamemBERT model)"),SEe.forEach(t),Zao=i(C),Zh=n(C,"LI",{});var PEe=s(Zh);yK=n(PEe,"STRONG",{});var Dqr=s(yK);eno=r(Dqr,"canine"),Dqr.forEach(t),ono=r(PEe," \u2014 "),zR=n(PEe,"A",{href:!0});var qqr=s(zR);rno=r(qqr,"CanineModel"),qqr.forEach(t),tno=r(PEe," (Canine model)"),PEe.forEach(t),ano=i(C),eu=n(C,"LI",{});var $Ee=s(eu);wK=n($Ee,"STRONG",{});var Gqr=s(wK);nno=r(Gqr,"clip"),Gqr.forEach(t),sno=r($Ee," \u2014 "),WR=n($Ee,"A",{href:!0});var Oqr=s(WR);lno=r(Oqr,"CLIPModel"),Oqr.forEach(t),ino=r($Ee," (CLIP model)"),$Ee.forEach(t),dno=i(C),ou=n(C,"LI",{});var IEe=s(ou);AK=n(IEe,"STRONG",{});var Xqr=s(AK);cno=r(Xqr,"convbert"),Xqr.forEach(t),mno=r(IEe," \u2014 "),QR=n(IEe,"A",{href:!0});var Vqr=s(QR);fno=r(Vqr,"ConvBertModel"),Vqr.forEach(t),gno=r(IEe," (ConvBERT model)"),IEe.forEach(t),hno=i(C),ru=n(C,"LI",{});var NEe=s(ru);LK=n(NEe,"STRONG",{});var zqr=s(LK);uno=r(zqr,"convnext"),zqr.forEach(t),pno=r(NEe," \u2014 "),HR=n(NEe,"A",{href:!0});var Wqr=s(HR);_no=r(Wqr,"ConvNextModel"),Wqr.forEach(t),bno=r(NEe," (ConvNext model)"),NEe.forEach(t),vno=i(C),tu=n(C,"LI",{});var jEe=s(tu);BK=n(jEe,"STRONG",{});var Qqr=s(BK);Tno=r(Qqr,"ctrl"),Qqr.forEach(t),Fno=r(jEe," \u2014 "),UR=n(jEe,"A",{href:!0});var Hqr=s(UR);Cno=r(Hqr,"CTRLModel"),Hqr.forEach(t),Mno=r(jEe," (CTRL model)"),jEe.forEach(t),Eno=i(C),au=n(C,"LI",{});var DEe=s(au);xK=n(DEe,"STRONG",{});var Uqr=s(xK);yno=r(Uqr,"data2vec-audio"),Uqr.forEach(t),wno=r(DEe," \u2014 "),JR=n(DEe,"A",{href:!0});var Jqr=s(JR);Ano=r(Jqr,"Data2VecAudioModel"),Jqr.forEach(t),Lno=r(DEe," (Data2VecAudio model)"),DEe.forEach(t),Bno=i(C),nu=n(C,"LI",{});var qEe=s(nu);kK=n(qEe,"STRONG",{});var Yqr=s(kK);xno=r(Yqr,"data2vec-text"),Yqr.forEach(t),kno=r(qEe," \u2014 "),YR=n(qEe,"A",{href:!0});var Kqr=s(YR);Rno=r(Kqr,"Data2VecTextModel"),Kqr.forEach(t),Sno=r(qEe," (Data2VecText model)"),qEe.forEach(t),Pno=i(C),su=n(C,"LI",{});var GEe=s(su);RK=n(GEe,"STRONG",{});var Zqr=s(RK);$no=r(Zqr,"deberta"),Zqr.forEach(t),Ino=r(GEe," \u2014 "),KR=n(GEe,"A",{href:!0});var eGr=s(KR);Nno=r(eGr,"DebertaModel"),eGr.forEach(t),jno=r(GEe," (DeBERTa model)"),GEe.forEach(t),Dno=i(C),lu=n(C,"LI",{});var OEe=s(lu);SK=n(OEe,"STRONG",{});var oGr=s(SK);qno=r(oGr,"deberta-v2"),oGr.forEach(t),Gno=r(OEe," \u2014 "),ZR=n(OEe,"A",{href:!0});var rGr=s(ZR);Ono=r(rGr,"DebertaV2Model"),rGr.forEach(t),Xno=r(OEe," (DeBERTa-v2 model)"),OEe.forEach(t),Vno=i(C),iu=n(C,"LI",{});var XEe=s(iu);PK=n(XEe,"STRONG",{});var tGr=s(PK);zno=r(tGr,"deit"),tGr.forEach(t),Wno=r(XEe," \u2014 "),eS=n(XEe,"A",{href:!0});var aGr=s(eS);Qno=r(aGr,"DeiTModel"),aGr.forEach(t),Hno=r(XEe," (DeiT model)"),XEe.forEach(t),Uno=i(C),du=n(C,"LI",{});var VEe=s(du);$K=n(VEe,"STRONG",{});var nGr=s($K);Jno=r(nGr,"detr"),nGr.forEach(t),Yno=r(VEe," \u2014 "),oS=n(VEe,"A",{href:!0});var sGr=s(oS);Kno=r(sGr,"DetrModel"),sGr.forEach(t),Zno=r(VEe," (DETR model)"),VEe.forEach(t),eso=i(C),cu=n(C,"LI",{});var zEe=s(cu);IK=n(zEe,"STRONG",{});var lGr=s(IK);oso=r(lGr,"distilbert"),lGr.forEach(t),rso=r(zEe," \u2014 "),rS=n(zEe,"A",{href:!0});var iGr=s(rS);tso=r(iGr,"DistilBertModel"),iGr.forEach(t),aso=r(zEe," (DistilBERT model)"),zEe.forEach(t),nso=i(C),mu=n(C,"LI",{});var WEe=s(mu);NK=n(WEe,"STRONG",{});var dGr=s(NK);sso=r(dGr,"dpr"),dGr.forEach(t),lso=r(WEe," \u2014 "),tS=n(WEe,"A",{href:!0});var cGr=s(tS);iso=r(cGr,"DPRQuestionEncoder"),cGr.forEach(t),dso=r(WEe," (DPR model)"),WEe.forEach(t),cso=i(C),fu=n(C,"LI",{});var QEe=s(fu);jK=n(QEe,"STRONG",{});var mGr=s(jK);mso=r(mGr,"electra"),mGr.forEach(t),fso=r(QEe," \u2014 "),aS=n(QEe,"A",{href:!0});var fGr=s(aS);gso=r(fGr,"ElectraModel"),fGr.forEach(t),hso=r(QEe," (ELECTRA model)"),QEe.forEach(t),uso=i(C),gu=n(C,"LI",{});var HEe=s(gu);DK=n(HEe,"STRONG",{});var gGr=s(DK);pso=r(gGr,"flaubert"),gGr.forEach(t),_so=r(HEe," \u2014 "),nS=n(HEe,"A",{href:!0});var hGr=s(nS);bso=r(hGr,"FlaubertModel"),hGr.forEach(t),vso=r(HEe," (FlauBERT model)"),HEe.forEach(t),Tso=i(C),hu=n(C,"LI",{});var UEe=s(hu);qK=n(UEe,"STRONG",{});var uGr=s(qK);Fso=r(uGr,"fnet"),uGr.forEach(t),Cso=r(UEe," \u2014 "),sS=n(UEe,"A",{href:!0});var pGr=s(sS);Mso=r(pGr,"FNetModel"),pGr.forEach(t),Eso=r(UEe," (FNet model)"),UEe.forEach(t),yso=i(C),uu=n(C,"LI",{});var JEe=s(uu);GK=n(JEe,"STRONG",{});var _Gr=s(GK);wso=r(_Gr,"fsmt"),_Gr.forEach(t),Aso=r(JEe," \u2014 "),lS=n(JEe,"A",{href:!0});var bGr=s(lS);Lso=r(bGr,"FSMTModel"),bGr.forEach(t),Bso=r(JEe," (FairSeq Machine-Translation model)"),JEe.forEach(t),xso=i(C),Ds=n(C,"LI",{});var Q8=s(Ds);OK=n(Q8,"STRONG",{});var vGr=s(OK);kso=r(vGr,"funnel"),vGr.forEach(t),Rso=r(Q8," \u2014 "),iS=n(Q8,"A",{href:!0});var TGr=s(iS);Sso=r(TGr,"FunnelModel"),TGr.forEach(t),Pso=r(Q8," or "),dS=n(Q8,"A",{href:!0});var FGr=s(dS);$so=r(FGr,"FunnelBaseModel"),FGr.forEach(t),Iso=r(Q8," (Funnel Transformer model)"),Q8.forEach(t),Nso=i(C),pu=n(C,"LI",{});var YEe=s(pu);XK=n(YEe,"STRONG",{});var CGr=s(XK);jso=r(CGr,"glpn"),CGr.forEach(t),Dso=r(YEe," \u2014 "),cS=n(YEe,"A",{href:!0});var MGr=s(cS);qso=r(MGr,"GLPNModel"),MGr.forEach(t),Gso=r(YEe," (GLPN model)"),YEe.forEach(t),Oso=i(C),_u=n(C,"LI",{});var KEe=s(_u);VK=n(KEe,"STRONG",{});var EGr=s(VK);Xso=r(EGr,"gpt2"),EGr.forEach(t),Vso=r(KEe," \u2014 "),mS=n(KEe,"A",{href:!0});var yGr=s(mS);zso=r(yGr,"GPT2Model"),yGr.forEach(t),Wso=r(KEe," (OpenAI GPT-2 model)"),KEe.forEach(t),Qso=i(C),bu=n(C,"LI",{});var ZEe=s(bu);zK=n(ZEe,"STRONG",{});var wGr=s(zK);Hso=r(wGr,"gpt_neo"),wGr.forEach(t),Uso=r(ZEe," \u2014 "),fS=n(ZEe,"A",{href:!0});var AGr=s(fS);Jso=r(AGr,"GPTNeoModel"),AGr.forEach(t),Yso=r(ZEe," (GPT Neo model)"),ZEe.forEach(t),Kso=i(C),vu=n(C,"LI",{});var e3e=s(vu);WK=n(e3e,"STRONG",{});var LGr=s(WK);Zso=r(LGr,"gptj"),LGr.forEach(t),elo=r(e3e," \u2014 "),gS=n(e3e,"A",{href:!0});var BGr=s(gS);olo=r(BGr,"GPTJModel"),BGr.forEach(t),rlo=r(e3e," (GPT-J model)"),e3e.forEach(t),tlo=i(C),Tu=n(C,"LI",{});var o3e=s(Tu);QK=n(o3e,"STRONG",{});var xGr=s(QK);alo=r(xGr,"hubert"),xGr.forEach(t),nlo=r(o3e," \u2014 "),hS=n(o3e,"A",{href:!0});var kGr=s(hS);slo=r(kGr,"HubertModel"),kGr.forEach(t),llo=r(o3e," (Hubert model)"),o3e.forEach(t),ilo=i(C),Fu=n(C,"LI",{});var r3e=s(Fu);HK=n(r3e,"STRONG",{});var RGr=s(HK);dlo=r(RGr,"ibert"),RGr.forEach(t),clo=r(r3e," \u2014 "),uS=n(r3e,"A",{href:!0});var SGr=s(uS);mlo=r(SGr,"IBertModel"),SGr.forEach(t),flo=r(r3e," (I-BERT model)"),r3e.forEach(t),glo=i(C),Cu=n(C,"LI",{});var t3e=s(Cu);UK=n(t3e,"STRONG",{});var PGr=s(UK);hlo=r(PGr,"imagegpt"),PGr.forEach(t),ulo=r(t3e," \u2014 "),pS=n(t3e,"A",{href:!0});var $Gr=s(pS);plo=r($Gr,"ImageGPTModel"),$Gr.forEach(t),_lo=r(t3e," (ImageGPT model)"),t3e.forEach(t),blo=i(C),Mu=n(C,"LI",{});var a3e=s(Mu);JK=n(a3e,"STRONG",{});var IGr=s(JK);vlo=r(IGr,"layoutlm"),IGr.forEach(t),Tlo=r(a3e," \u2014 "),_S=n(a3e,"A",{href:!0});var NGr=s(_S);Flo=r(NGr,"LayoutLMModel"),NGr.forEach(t),Clo=r(a3e," (LayoutLM model)"),a3e.forEach(t),Mlo=i(C),Eu=n(C,"LI",{});var n3e=s(Eu);YK=n(n3e,"STRONG",{});var jGr=s(YK);Elo=r(jGr,"layoutlmv2"),jGr.forEach(t),ylo=r(n3e," \u2014 "),bS=n(n3e,"A",{href:!0});var DGr=s(bS);wlo=r(DGr,"LayoutLMv2Model"),DGr.forEach(t),Alo=r(n3e," (LayoutLMv2 model)"),n3e.forEach(t),Llo=i(C),yu=n(C,"LI",{});var s3e=s(yu);KK=n(s3e,"STRONG",{});var qGr=s(KK);Blo=r(qGr,"led"),qGr.forEach(t),xlo=r(s3e," \u2014 "),vS=n(s3e,"A",{href:!0});var GGr=s(vS);klo=r(GGr,"LEDModel"),GGr.forEach(t),Rlo=r(s3e," (LED model)"),s3e.forEach(t),Slo=i(C),wu=n(C,"LI",{});var l3e=s(wu);ZK=n(l3e,"STRONG",{});var OGr=s(ZK);Plo=r(OGr,"longformer"),OGr.forEach(t),$lo=r(l3e," \u2014 "),TS=n(l3e,"A",{href:!0});var XGr=s(TS);Ilo=r(XGr,"LongformerModel"),XGr.forEach(t),Nlo=r(l3e," (Longformer model)"),l3e.forEach(t),jlo=i(C),Au=n(C,"LI",{});var i3e=s(Au);eZ=n(i3e,"STRONG",{});var VGr=s(eZ);Dlo=r(VGr,"luke"),VGr.forEach(t),qlo=r(i3e," \u2014 "),FS=n(i3e,"A",{href:!0});var zGr=s(FS);Glo=r(zGr,"LukeModel"),zGr.forEach(t),Olo=r(i3e," (LUKE model)"),i3e.forEach(t),Xlo=i(C),Lu=n(C,"LI",{});var d3e=s(Lu);oZ=n(d3e,"STRONG",{});var WGr=s(oZ);Vlo=r(WGr,"lxmert"),WGr.forEach(t),zlo=r(d3e," \u2014 "),CS=n(d3e,"A",{href:!0});var QGr=s(CS);Wlo=r(QGr,"LxmertModel"),QGr.forEach(t),Qlo=r(d3e," (LXMERT model)"),d3e.forEach(t),Hlo=i(C),Bu=n(C,"LI",{});var c3e=s(Bu);rZ=n(c3e,"STRONG",{});var HGr=s(rZ);Ulo=r(HGr,"m2m_100"),HGr.forEach(t),Jlo=r(c3e," \u2014 "),MS=n(c3e,"A",{href:!0});var UGr=s(MS);Ylo=r(UGr,"M2M100Model"),UGr.forEach(t),Klo=r(c3e," (M2M100 model)"),c3e.forEach(t),Zlo=i(C),xu=n(C,"LI",{});var m3e=s(xu);tZ=n(m3e,"STRONG",{});var JGr=s(tZ);eio=r(JGr,"marian"),JGr.forEach(t),oio=r(m3e," \u2014 "),ES=n(m3e,"A",{href:!0});var YGr=s(ES);rio=r(YGr,"MarianModel"),YGr.forEach(t),tio=r(m3e," (Marian model)"),m3e.forEach(t),aio=i(C),ku=n(C,"LI",{});var f3e=s(ku);aZ=n(f3e,"STRONG",{});var KGr=s(aZ);nio=r(KGr,"maskformer"),KGr.forEach(t),sio=r(f3e," \u2014 "),yS=n(f3e,"A",{href:!0});var ZGr=s(yS);lio=r(ZGr,"MaskFormerModel"),ZGr.forEach(t),iio=r(f3e," (MaskFormer model)"),f3e.forEach(t),dio=i(C),Ru=n(C,"LI",{});var g3e=s(Ru);nZ=n(g3e,"STRONG",{});var eOr=s(nZ);cio=r(eOr,"mbart"),eOr.forEach(t),mio=r(g3e," \u2014 "),wS=n(g3e,"A",{href:!0});var oOr=s(wS);fio=r(oOr,"MBartModel"),oOr.forEach(t),gio=r(g3e," (mBART model)"),g3e.forEach(t),hio=i(C),Su=n(C,"LI",{});var h3e=s(Su);sZ=n(h3e,"STRONG",{});var rOr=s(sZ);uio=r(rOr,"megatron-bert"),rOr.forEach(t),pio=r(h3e," \u2014 "),AS=n(h3e,"A",{href:!0});var tOr=s(AS);_io=r(tOr,"MegatronBertModel"),tOr.forEach(t),bio=r(h3e," (MegatronBert model)"),h3e.forEach(t),vio=i(C),Pu=n(C,"LI",{});var u3e=s(Pu);lZ=n(u3e,"STRONG",{});var aOr=s(lZ);Tio=r(aOr,"mobilebert"),aOr.forEach(t),Fio=r(u3e," \u2014 "),LS=n(u3e,"A",{href:!0});var nOr=s(LS);Cio=r(nOr,"MobileBertModel"),nOr.forEach(t),Mio=r(u3e," (MobileBERT model)"),u3e.forEach(t),Eio=i(C),$u=n(C,"LI",{});var p3e=s($u);iZ=n(p3e,"STRONG",{});var sOr=s(iZ);yio=r(sOr,"mpnet"),sOr.forEach(t),wio=r(p3e," \u2014 "),BS=n(p3e,"A",{href:!0});var lOr=s(BS);Aio=r(lOr,"MPNetModel"),lOr.forEach(t),Lio=r(p3e," (MPNet model)"),p3e.forEach(t),Bio=i(C),Iu=n(C,"LI",{});var _3e=s(Iu);dZ=n(_3e,"STRONG",{});var iOr=s(dZ);xio=r(iOr,"mt5"),iOr.forEach(t),kio=r(_3e," \u2014 "),xS=n(_3e,"A",{href:!0});var dOr=s(xS);Rio=r(dOr,"MT5Model"),dOr.forEach(t),Sio=r(_3e," (mT5 model)"),_3e.forEach(t),Pio=i(C),Nu=n(C,"LI",{});var b3e=s(Nu);cZ=n(b3e,"STRONG",{});var cOr=s(cZ);$io=r(cOr,"nystromformer"),cOr.forEach(t),Iio=r(b3e," \u2014 "),kS=n(b3e,"A",{href:!0});var mOr=s(kS);Nio=r(mOr,"NystromformerModel"),mOr.forEach(t),jio=r(b3e," (Nystromformer model)"),b3e.forEach(t),Dio=i(C),ju=n(C,"LI",{});var v3e=s(ju);mZ=n(v3e,"STRONG",{});var fOr=s(mZ);qio=r(fOr,"openai-gpt"),fOr.forEach(t),Gio=r(v3e," \u2014 "),RS=n(v3e,"A",{href:!0});var gOr=s(RS);Oio=r(gOr,"OpenAIGPTModel"),gOr.forEach(t),Xio=r(v3e," (OpenAI GPT model)"),v3e.forEach(t),Vio=i(C),Du=n(C,"LI",{});var T3e=s(Du);fZ=n(T3e,"STRONG",{});var hOr=s(fZ);zio=r(hOr,"pegasus"),hOr.forEach(t),Wio=r(T3e," \u2014 "),SS=n(T3e,"A",{href:!0});var uOr=s(SS);Qio=r(uOr,"PegasusModel"),uOr.forEach(t),Hio=r(T3e," (Pegasus model)"),T3e.forEach(t),Uio=i(C),qu=n(C,"LI",{});var F3e=s(qu);gZ=n(F3e,"STRONG",{});var pOr=s(gZ);Jio=r(pOr,"perceiver"),pOr.forEach(t),Yio=r(F3e," \u2014 "),PS=n(F3e,"A",{href:!0});var _Or=s(PS);Kio=r(_Or,"PerceiverModel"),_Or.forEach(t),Zio=r(F3e," (Perceiver model)"),F3e.forEach(t),edo=i(C),Gu=n(C,"LI",{});var C3e=s(Gu);hZ=n(C3e,"STRONG",{});var bOr=s(hZ);odo=r(bOr,"plbart"),bOr.forEach(t),rdo=r(C3e," \u2014 "),$S=n(C3e,"A",{href:!0});var vOr=s($S);tdo=r(vOr,"PLBartModel"),vOr.forEach(t),ado=r(C3e," (PLBart model)"),C3e.forEach(t),ndo=i(C),Ou=n(C,"LI",{});var M3e=s(Ou);uZ=n(M3e,"STRONG",{});var TOr=s(uZ);sdo=r(TOr,"poolformer"),TOr.forEach(t),ldo=r(M3e," \u2014 "),IS=n(M3e,"A",{href:!0});var FOr=s(IS);ido=r(FOr,"PoolFormerModel"),FOr.forEach(t),ddo=r(M3e," (PoolFormer model)"),M3e.forEach(t),cdo=i(C),Xu=n(C,"LI",{});var E3e=s(Xu);pZ=n(E3e,"STRONG",{});var COr=s(pZ);mdo=r(COr,"prophetnet"),COr.forEach(t),fdo=r(E3e," \u2014 "),NS=n(E3e,"A",{href:!0});var MOr=s(NS);gdo=r(MOr,"ProphetNetModel"),MOr.forEach(t),hdo=r(E3e," (ProphetNet model)"),E3e.forEach(t),udo=i(C),Vu=n(C,"LI",{});var y3e=s(Vu);_Z=n(y3e,"STRONG",{});var EOr=s(_Z);pdo=r(EOr,"qdqbert"),EOr.forEach(t),_do=r(y3e," \u2014 "),jS=n(y3e,"A",{href:!0});var yOr=s(jS);bdo=r(yOr,"QDQBertModel"),yOr.forEach(t),vdo=r(y3e," (QDQBert model)"),y3e.forEach(t),Tdo=i(C),zu=n(C,"LI",{});var w3e=s(zu);bZ=n(w3e,"STRONG",{});var wOr=s(bZ);Fdo=r(wOr,"reformer"),wOr.forEach(t),Cdo=r(w3e," \u2014 "),DS=n(w3e,"A",{href:!0});var AOr=s(DS);Mdo=r(AOr,"ReformerModel"),AOr.forEach(t),Edo=r(w3e," (Reformer model)"),w3e.forEach(t),ydo=i(C),Wu=n(C,"LI",{});var A3e=s(Wu);vZ=n(A3e,"STRONG",{});var LOr=s(vZ);wdo=r(LOr,"rembert"),LOr.forEach(t),Ado=r(A3e," \u2014 "),qS=n(A3e,"A",{href:!0});var BOr=s(qS);Ldo=r(BOr,"RemBertModel"),BOr.forEach(t),Bdo=r(A3e," (RemBERT model)"),A3e.forEach(t),xdo=i(C),Qu=n(C,"LI",{});var L3e=s(Qu);TZ=n(L3e,"STRONG",{});var xOr=s(TZ);kdo=r(xOr,"resnet"),xOr.forEach(t),Rdo=r(L3e," \u2014 "),GS=n(L3e,"A",{href:!0});var kOr=s(GS);Sdo=r(kOr,"ResNetModel"),kOr.forEach(t),Pdo=r(L3e," (ResNet model)"),L3e.forEach(t),$do=i(C),Hu=n(C,"LI",{});var B3e=s(Hu);FZ=n(B3e,"STRONG",{});var ROr=s(FZ);Ido=r(ROr,"retribert"),ROr.forEach(t),Ndo=r(B3e," \u2014 "),OS=n(B3e,"A",{href:!0});var SOr=s(OS);jdo=r(SOr,"RetriBertModel"),SOr.forEach(t),Ddo=r(B3e," (RetriBERT model)"),B3e.forEach(t),qdo=i(C),Uu=n(C,"LI",{});var x3e=s(Uu);CZ=n(x3e,"STRONG",{});var POr=s(CZ);Gdo=r(POr,"roberta"),POr.forEach(t),Odo=r(x3e," \u2014 "),XS=n(x3e,"A",{href:!0});var $Or=s(XS);Xdo=r($Or,"RobertaModel"),$Or.forEach(t),Vdo=r(x3e," (RoBERTa model)"),x3e.forEach(t),zdo=i(C),Ju=n(C,"LI",{});var k3e=s(Ju);MZ=n(k3e,"STRONG",{});var IOr=s(MZ);Wdo=r(IOr,"roformer"),IOr.forEach(t),Qdo=r(k3e," \u2014 "),VS=n(k3e,"A",{href:!0});var NOr=s(VS);Hdo=r(NOr,"RoFormerModel"),NOr.forEach(t),Udo=r(k3e," (RoFormer model)"),k3e.forEach(t),Jdo=i(C),Yu=n(C,"LI",{});var R3e=s(Yu);EZ=n(R3e,"STRONG",{});var jOr=s(EZ);Ydo=r(jOr,"segformer"),jOr.forEach(t),Kdo=r(R3e," \u2014 "),zS=n(R3e,"A",{href:!0});var DOr=s(zS);Zdo=r(DOr,"SegformerModel"),DOr.forEach(t),eco=r(R3e," (SegFormer model)"),R3e.forEach(t),oco=i(C),Ku=n(C,"LI",{});var S3e=s(Ku);yZ=n(S3e,"STRONG",{});var qOr=s(yZ);rco=r(qOr,"sew"),qOr.forEach(t),tco=r(S3e," \u2014 "),WS=n(S3e,"A",{href:!0});var GOr=s(WS);aco=r(GOr,"SEWModel"),GOr.forEach(t),nco=r(S3e," (SEW model)"),S3e.forEach(t),sco=i(C),Zu=n(C,"LI",{});var P3e=s(Zu);wZ=n(P3e,"STRONG",{});var OOr=s(wZ);lco=r(OOr,"sew-d"),OOr.forEach(t),ico=r(P3e," \u2014 "),QS=n(P3e,"A",{href:!0});var XOr=s(QS);dco=r(XOr,"SEWDModel"),XOr.forEach(t),cco=r(P3e," (SEW-D model)"),P3e.forEach(t),mco=i(C),ep=n(C,"LI",{});var $3e=s(ep);AZ=n($3e,"STRONG",{});var VOr=s(AZ);fco=r(VOr,"speech_to_text"),VOr.forEach(t),gco=r($3e," \u2014 "),HS=n($3e,"A",{href:!0});var zOr=s(HS);hco=r(zOr,"Speech2TextModel"),zOr.forEach(t),uco=r($3e," (Speech2Text model)"),$3e.forEach(t),pco=i(C),op=n(C,"LI",{});var I3e=s(op);LZ=n(I3e,"STRONG",{});var WOr=s(LZ);_co=r(WOr,"splinter"),WOr.forEach(t),bco=r(I3e," \u2014 "),US=n(I3e,"A",{href:!0});var QOr=s(US);vco=r(QOr,"SplinterModel"),QOr.forEach(t),Tco=r(I3e," (Splinter model)"),I3e.forEach(t),Fco=i(C),rp=n(C,"LI",{});var N3e=s(rp);BZ=n(N3e,"STRONG",{});var HOr=s(BZ);Cco=r(HOr,"squeezebert"),HOr.forEach(t),Mco=r(N3e," \u2014 "),JS=n(N3e,"A",{href:!0});var UOr=s(JS);Eco=r(UOr,"SqueezeBertModel"),UOr.forEach(t),yco=r(N3e," (SqueezeBERT model)"),N3e.forEach(t),wco=i(C),tp=n(C,"LI",{});var j3e=s(tp);xZ=n(j3e,"STRONG",{});var JOr=s(xZ);Aco=r(JOr,"swin"),JOr.forEach(t),Lco=r(j3e," \u2014 "),YS=n(j3e,"A",{href:!0});var YOr=s(YS);Bco=r(YOr,"SwinModel"),YOr.forEach(t),xco=r(j3e," (Swin model)"),j3e.forEach(t),kco=i(C),ap=n(C,"LI",{});var D3e=s(ap);kZ=n(D3e,"STRONG",{});var KOr=s(kZ);Rco=r(KOr,"t5"),KOr.forEach(t),Sco=r(D3e," \u2014 "),KS=n(D3e,"A",{href:!0});var ZOr=s(KS);Pco=r(ZOr,"T5Model"),ZOr.forEach(t),$co=r(D3e," (T5 model)"),D3e.forEach(t),Ico=i(C),np=n(C,"LI",{});var q3e=s(np);RZ=n(q3e,"STRONG",{});var eXr=s(RZ);Nco=r(eXr,"tapas"),eXr.forEach(t),jco=r(q3e," \u2014 "),ZS=n(q3e,"A",{href:!0});var oXr=s(ZS);Dco=r(oXr,"TapasModel"),oXr.forEach(t),qco=r(q3e," (TAPAS model)"),q3e.forEach(t),Gco=i(C),sp=n(C,"LI",{});var G3e=s(sp);SZ=n(G3e,"STRONG",{});var rXr=s(SZ);Oco=r(rXr,"transfo-xl"),rXr.forEach(t),Xco=r(G3e," \u2014 "),eP=n(G3e,"A",{href:!0});var tXr=s(eP);Vco=r(tXr,"TransfoXLModel"),tXr.forEach(t),zco=r(G3e," (Transformer-XL model)"),G3e.forEach(t),Wco=i(C),lp=n(C,"LI",{});var O3e=s(lp);PZ=n(O3e,"STRONG",{});var aXr=s(PZ);Qco=r(aXr,"unispeech"),aXr.forEach(t),Hco=r(O3e," \u2014 "),oP=n(O3e,"A",{href:!0});var nXr=s(oP);Uco=r(nXr,"UniSpeechModel"),nXr.forEach(t),Jco=r(O3e," (UniSpeech model)"),O3e.forEach(t),Yco=i(C),ip=n(C,"LI",{});var X3e=s(ip);$Z=n(X3e,"STRONG",{});var sXr=s($Z);Kco=r(sXr,"unispeech-sat"),sXr.forEach(t),Zco=r(X3e," \u2014 "),rP=n(X3e,"A",{href:!0});var lXr=s(rP);emo=r(lXr,"UniSpeechSatModel"),lXr.forEach(t),omo=r(X3e," (UniSpeechSat model)"),X3e.forEach(t),rmo=i(C),dp=n(C,"LI",{});var V3e=s(dp);IZ=n(V3e,"STRONG",{});var iXr=s(IZ);tmo=r(iXr,"van"),iXr.forEach(t),amo=r(V3e," \u2014 "),tP=n(V3e,"A",{href:!0});var dXr=s(tP);nmo=r(dXr,"VanModel"),dXr.forEach(t),smo=r(V3e," (VAN model)"),V3e.forEach(t),lmo=i(C),cp=n(C,"LI",{});var z3e=s(cp);NZ=n(z3e,"STRONG",{});var cXr=s(NZ);imo=r(cXr,"vilt"),cXr.forEach(t),dmo=r(z3e," \u2014 "),aP=n(z3e,"A",{href:!0});var mXr=s(aP);cmo=r(mXr,"ViltModel"),mXr.forEach(t),mmo=r(z3e," (ViLT model)"),z3e.forEach(t),fmo=i(C),mp=n(C,"LI",{});var W3e=s(mp);jZ=n(W3e,"STRONG",{});var fXr=s(jZ);gmo=r(fXr,"vision-text-dual-encoder"),fXr.forEach(t),hmo=r(W3e," \u2014 "),nP=n(W3e,"A",{href:!0});var gXr=s(nP);umo=r(gXr,"VisionTextDualEncoderModel"),gXr.forEach(t),pmo=r(W3e," (VisionTextDualEncoder model)"),W3e.forEach(t),_mo=i(C),fp=n(C,"LI",{});var Q3e=s(fp);DZ=n(Q3e,"STRONG",{});var hXr=s(DZ);bmo=r(hXr,"visual_bert"),hXr.forEach(t),vmo=r(Q3e," \u2014 "),sP=n(Q3e,"A",{href:!0});var uXr=s(sP);Tmo=r(uXr,"VisualBertModel"),uXr.forEach(t),Fmo=r(Q3e," (VisualBert model)"),Q3e.forEach(t),Cmo=i(C),gp=n(C,"LI",{});var H3e=s(gp);qZ=n(H3e,"STRONG",{});var pXr=s(qZ);Mmo=r(pXr,"vit"),pXr.forEach(t),Emo=r(H3e," \u2014 "),lP=n(H3e,"A",{href:!0});var _Xr=s(lP);ymo=r(_Xr,"ViTModel"),_Xr.forEach(t),wmo=r(H3e," (ViT model)"),H3e.forEach(t),Amo=i(C),hp=n(C,"LI",{});var U3e=s(hp);GZ=n(U3e,"STRONG",{});var bXr=s(GZ);Lmo=r(bXr,"vit_mae"),bXr.forEach(t),Bmo=r(U3e," \u2014 "),iP=n(U3e,"A",{href:!0});var vXr=s(iP);xmo=r(vXr,"ViTMAEModel"),vXr.forEach(t),kmo=r(U3e," (ViTMAE model)"),U3e.forEach(t),Rmo=i(C),up=n(C,"LI",{});var J3e=s(up);OZ=n(J3e,"STRONG",{});var TXr=s(OZ);Smo=r(TXr,"wav2vec2"),TXr.forEach(t),Pmo=r(J3e," \u2014 "),dP=n(J3e,"A",{href:!0});var FXr=s(dP);$mo=r(FXr,"Wav2Vec2Model"),FXr.forEach(t),Imo=r(J3e," (Wav2Vec2 model)"),J3e.forEach(t),Nmo=i(C),pp=n(C,"LI",{});var Y3e=s(pp);XZ=n(Y3e,"STRONG",{});var CXr=s(XZ);jmo=r(CXr,"wavlm"),CXr.forEach(t),Dmo=r(Y3e," \u2014 "),cP=n(Y3e,"A",{href:!0});var MXr=s(cP);qmo=r(MXr,"WavLMModel"),MXr.forEach(t),Gmo=r(Y3e," (WavLM model)"),Y3e.forEach(t),Omo=i(C),_p=n(C,"LI",{});var K3e=s(_p);VZ=n(K3e,"STRONG",{});var EXr=s(VZ);Xmo=r(EXr,"xglm"),EXr.forEach(t),Vmo=r(K3e," \u2014 "),mP=n(K3e,"A",{href:!0});var yXr=s(mP);zmo=r(yXr,"XGLMModel"),yXr.forEach(t),Wmo=r(K3e," (XGLM model)"),K3e.forEach(t),Qmo=i(C),bp=n(C,"LI",{});var Z3e=s(bp);zZ=n(Z3e,"STRONG",{});var wXr=s(zZ);Hmo=r(wXr,"xlm"),wXr.forEach(t),Umo=r(Z3e," \u2014 "),fP=n(Z3e,"A",{href:!0});var AXr=s(fP);Jmo=r(AXr,"XLMModel"),AXr.forEach(t),Ymo=r(Z3e," (XLM model)"),Z3e.forEach(t),Kmo=i(C),vp=n(C,"LI",{});var e5e=s(vp);WZ=n(e5e,"STRONG",{});var LXr=s(WZ);Zmo=r(LXr,"xlm-prophetnet"),LXr.forEach(t),efo=r(e5e," \u2014 "),gP=n(e5e,"A",{href:!0});var BXr=s(gP);ofo=r(BXr,"XLMProphetNetModel"),BXr.forEach(t),rfo=r(e5e," (XLMProphetNet model)"),e5e.forEach(t),tfo=i(C),Tp=n(C,"LI",{});var o5e=s(Tp);QZ=n(o5e,"STRONG",{});var xXr=s(QZ);afo=r(xXr,"xlm-roberta"),xXr.forEach(t),nfo=r(o5e," \u2014 "),hP=n(o5e,"A",{href:!0});var kXr=s(hP);sfo=r(kXr,"XLMRobertaModel"),kXr.forEach(t),lfo=r(o5e," (XLM-RoBERTa model)"),o5e.forEach(t),ifo=i(C),Fp=n(C,"LI",{});var r5e=s(Fp);HZ=n(r5e,"STRONG",{});var RXr=s(HZ);dfo=r(RXr,"xlm-roberta-xl"),RXr.forEach(t),cfo=r(r5e," \u2014 "),uP=n(r5e,"A",{href:!0});var SXr=s(uP);mfo=r(SXr,"XLMRobertaXLModel"),SXr.forEach(t),ffo=r(r5e," (XLM-RoBERTa-XL model)"),r5e.forEach(t),gfo=i(C),Cp=n(C,"LI",{});var t5e=s(Cp);UZ=n(t5e,"STRONG",{});var PXr=s(UZ);hfo=r(PXr,"xlnet"),PXr.forEach(t),ufo=r(t5e," \u2014 "),pP=n(t5e,"A",{href:!0});var $Xr=s(pP);pfo=r($Xr,"XLNetModel"),$Xr.forEach(t),_fo=r(t5e," (XLNet model)"),t5e.forEach(t),bfo=i(C),Mp=n(C,"LI",{});var a5e=s(Mp);JZ=n(a5e,"STRONG",{});var IXr=s(JZ);vfo=r(IXr,"yoso"),IXr.forEach(t),Tfo=r(a5e," \u2014 "),_P=n(a5e,"A",{href:!0});var NXr=s(_P);Ffo=r(NXr,"YosoModel"),NXr.forEach(t),Cfo=r(a5e," (YOSO model)"),a5e.forEach(t),C.forEach(t),Mfo=i(qt),Ep=n(qt,"P",{});var n5e=s(Ep);Efo=r(n5e,"The model is set in evaluation mode by default using "),YZ=n(n5e,"CODE",{});var jXr=s(YZ);yfo=r(jXr,"model.eval()"),jXr.forEach(t),wfo=r(n5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KZ=n(n5e,"CODE",{});var DXr=s(KZ);Afo=r(DXr,"model.train()"),DXr.forEach(t),n5e.forEach(t),Lfo=i(qt),ZZ=n(qt,"P",{});var qXr=s(ZZ);Bfo=r(qXr,"Examples:"),qXr.forEach(t),xfo=i(qt),f(Xy.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),lke=i(c),Zi=n(c,"H2",{class:!0});var pSe=s(Zi);yp=n(pSe,"A",{id:!0,class:!0,href:!0});var GXr=s(yp);eee=n(GXr,"SPAN",{});var OXr=s(eee);f(Vy.$$.fragment,OXr),OXr.forEach(t),GXr.forEach(t),kfo=i(pSe),oee=n(pSe,"SPAN",{});var XXr=s(oee);Rfo=r(XXr,"AutoModelForPreTraining"),XXr.forEach(t),pSe.forEach(t),ike=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);f(zy.$$.fragment,Hs),Sfo=i(Hs),ed=n(Hs,"P",{});var Qz=s(ed);Pfo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ree=n(Qz,"CODE",{});var VXr=s(ree);$fo=r(VXr,"from_pretrained()"),VXr.forEach(t),Ifo=r(Qz,"class method or the "),tee=n(Qz,"CODE",{});var zXr=s(tee);Nfo=r(zXr,"from_config()"),zXr.forEach(t),jfo=r(Qz,`class
method.`),Qz.forEach(t),Dfo=i(Hs),Wy=n(Hs,"P",{});var _Se=s(Wy);qfo=r(_Se,"This class cannot be instantiated directly using "),aee=n(_Se,"CODE",{});var WXr=s(aee);Gfo=r(WXr,"__init__()"),WXr.forEach(t),Ofo=r(_Se," (throws an error)."),_Se.forEach(t),Xfo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);f(Qy.$$.fragment,Us),Vfo=i(Us),nee=n(Us,"P",{});var QXr=s(nee);zfo=r(QXr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QXr.forEach(t),Wfo=i(Us),od=n(Us,"P",{});var Hz=s(od);Qfo=r(Hz,`Note:
Loading a model from its configuration file does `),see=n(Hz,"STRONG",{});var HXr=s(see);Hfo=r(HXr,"not"),HXr.forEach(t),Ufo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=n(Hz,"CODE",{});var UXr=s(lee);Jfo=r(UXr,"from_pretrained()"),UXr.forEach(t),Yfo=r(Hz,"to load the model weights."),Hz.forEach(t),Kfo=i(Us),iee=n(Us,"P",{});var JXr=s(iee);Zfo=r(JXr,"Examples:"),JXr.forEach(t),ego=i(Us),f(Hy.$$.fragment,Us),Us.forEach(t),ogo=i(Hs),je=n(Hs,"DIV",{class:!0});var Gt=s(je);f(Uy.$$.fragment,Gt),rgo=i(Gt),dee=n(Gt,"P",{});var YXr=s(dee);tgo=r(YXr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YXr.forEach(t),ago=i(Gt),za=n(Gt,"P",{});var i5=s(za);ngo=r(i5,"The model class to instantiate is selected based on the "),cee=n(i5,"CODE",{});var KXr=s(cee);sgo=r(KXr,"model_type"),KXr.forEach(t),lgo=r(i5,` property of the config object (either
passed as an argument or loaded from `),mee=n(i5,"CODE",{});var ZXr=s(mee);igo=r(ZXr,"pretrained_model_name_or_path"),ZXr.forEach(t),dgo=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fee=n(i5,"CODE",{});var eVr=s(fee);cgo=r(eVr,"pretrained_model_name_or_path"),eVr.forEach(t),mgo=r(i5,":"),i5.forEach(t),fgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);wp=n(S,"LI",{});var s5e=s(wp);gee=n(s5e,"STRONG",{});var oVr=s(gee);ggo=r(oVr,"albert"),oVr.forEach(t),hgo=r(s5e," \u2014 "),bP=n(s5e,"A",{href:!0});var rVr=s(bP);ugo=r(rVr,"AlbertForPreTraining"),rVr.forEach(t),pgo=r(s5e," (ALBERT model)"),s5e.forEach(t),_go=i(S),Ap=n(S,"LI",{});var l5e=s(Ap);hee=n(l5e,"STRONG",{});var tVr=s(hee);bgo=r(tVr,"bart"),tVr.forEach(t),vgo=r(l5e," \u2014 "),vP=n(l5e,"A",{href:!0});var aVr=s(vP);Tgo=r(aVr,"BartForConditionalGeneration"),aVr.forEach(t),Fgo=r(l5e," (BART model)"),l5e.forEach(t),Cgo=i(S),Lp=n(S,"LI",{});var i5e=s(Lp);uee=n(i5e,"STRONG",{});var nVr=s(uee);Mgo=r(nVr,"bert"),nVr.forEach(t),Ego=r(i5e," \u2014 "),TP=n(i5e,"A",{href:!0});var sVr=s(TP);ygo=r(sVr,"BertForPreTraining"),sVr.forEach(t),wgo=r(i5e," (BERT model)"),i5e.forEach(t),Ago=i(S),Bp=n(S,"LI",{});var d5e=s(Bp);pee=n(d5e,"STRONG",{});var lVr=s(pee);Lgo=r(lVr,"big_bird"),lVr.forEach(t),Bgo=r(d5e," \u2014 "),FP=n(d5e,"A",{href:!0});var iVr=s(FP);xgo=r(iVr,"BigBirdForPreTraining"),iVr.forEach(t),kgo=r(d5e," (BigBird model)"),d5e.forEach(t),Rgo=i(S),xp=n(S,"LI",{});var c5e=s(xp);_ee=n(c5e,"STRONG",{});var dVr=s(_ee);Sgo=r(dVr,"camembert"),dVr.forEach(t),Pgo=r(c5e," \u2014 "),CP=n(c5e,"A",{href:!0});var cVr=s(CP);$go=r(cVr,"CamembertForMaskedLM"),cVr.forEach(t),Igo=r(c5e," (CamemBERT model)"),c5e.forEach(t),Ngo=i(S),kp=n(S,"LI",{});var m5e=s(kp);bee=n(m5e,"STRONG",{});var mVr=s(bee);jgo=r(mVr,"ctrl"),mVr.forEach(t),Dgo=r(m5e," \u2014 "),MP=n(m5e,"A",{href:!0});var fVr=s(MP);qgo=r(fVr,"CTRLLMHeadModel"),fVr.forEach(t),Ggo=r(m5e," (CTRL model)"),m5e.forEach(t),Ogo=i(S),Rp=n(S,"LI",{});var f5e=s(Rp);vee=n(f5e,"STRONG",{});var gVr=s(vee);Xgo=r(gVr,"data2vec-text"),gVr.forEach(t),Vgo=r(f5e," \u2014 "),EP=n(f5e,"A",{href:!0});var hVr=s(EP);zgo=r(hVr,"Data2VecTextForMaskedLM"),hVr.forEach(t),Wgo=r(f5e," (Data2VecText model)"),f5e.forEach(t),Qgo=i(S),Sp=n(S,"LI",{});var g5e=s(Sp);Tee=n(g5e,"STRONG",{});var uVr=s(Tee);Hgo=r(uVr,"deberta"),uVr.forEach(t),Ugo=r(g5e," \u2014 "),yP=n(g5e,"A",{href:!0});var pVr=s(yP);Jgo=r(pVr,"DebertaForMaskedLM"),pVr.forEach(t),Ygo=r(g5e," (DeBERTa model)"),g5e.forEach(t),Kgo=i(S),Pp=n(S,"LI",{});var h5e=s(Pp);Fee=n(h5e,"STRONG",{});var _Vr=s(Fee);Zgo=r(_Vr,"deberta-v2"),_Vr.forEach(t),eho=r(h5e," \u2014 "),wP=n(h5e,"A",{href:!0});var bVr=s(wP);oho=r(bVr,"DebertaV2ForMaskedLM"),bVr.forEach(t),rho=r(h5e," (DeBERTa-v2 model)"),h5e.forEach(t),tho=i(S),$p=n(S,"LI",{});var u5e=s($p);Cee=n(u5e,"STRONG",{});var vVr=s(Cee);aho=r(vVr,"distilbert"),vVr.forEach(t),nho=r(u5e," \u2014 "),AP=n(u5e,"A",{href:!0});var TVr=s(AP);sho=r(TVr,"DistilBertForMaskedLM"),TVr.forEach(t),lho=r(u5e," (DistilBERT model)"),u5e.forEach(t),iho=i(S),Ip=n(S,"LI",{});var p5e=s(Ip);Mee=n(p5e,"STRONG",{});var FVr=s(Mee);dho=r(FVr,"electra"),FVr.forEach(t),cho=r(p5e," \u2014 "),LP=n(p5e,"A",{href:!0});var CVr=s(LP);mho=r(CVr,"ElectraForPreTraining"),CVr.forEach(t),fho=r(p5e," (ELECTRA model)"),p5e.forEach(t),gho=i(S),Np=n(S,"LI",{});var _5e=s(Np);Eee=n(_5e,"STRONG",{});var MVr=s(Eee);hho=r(MVr,"flaubert"),MVr.forEach(t),uho=r(_5e," \u2014 "),BP=n(_5e,"A",{href:!0});var EVr=s(BP);pho=r(EVr,"FlaubertWithLMHeadModel"),EVr.forEach(t),_ho=r(_5e," (FlauBERT model)"),_5e.forEach(t),bho=i(S),jp=n(S,"LI",{});var b5e=s(jp);yee=n(b5e,"STRONG",{});var yVr=s(yee);vho=r(yVr,"fnet"),yVr.forEach(t),Tho=r(b5e," \u2014 "),xP=n(b5e,"A",{href:!0});var wVr=s(xP);Fho=r(wVr,"FNetForPreTraining"),wVr.forEach(t),Cho=r(b5e," (FNet model)"),b5e.forEach(t),Mho=i(S),Dp=n(S,"LI",{});var v5e=s(Dp);wee=n(v5e,"STRONG",{});var AVr=s(wee);Eho=r(AVr,"fsmt"),AVr.forEach(t),yho=r(v5e," \u2014 "),kP=n(v5e,"A",{href:!0});var LVr=s(kP);who=r(LVr,"FSMTForConditionalGeneration"),LVr.forEach(t),Aho=r(v5e," (FairSeq Machine-Translation model)"),v5e.forEach(t),Lho=i(S),qp=n(S,"LI",{});var T5e=s(qp);Aee=n(T5e,"STRONG",{});var BVr=s(Aee);Bho=r(BVr,"funnel"),BVr.forEach(t),xho=r(T5e," \u2014 "),RP=n(T5e,"A",{href:!0});var xVr=s(RP);kho=r(xVr,"FunnelForPreTraining"),xVr.forEach(t),Rho=r(T5e," (Funnel Transformer model)"),T5e.forEach(t),Sho=i(S),Gp=n(S,"LI",{});var F5e=s(Gp);Lee=n(F5e,"STRONG",{});var kVr=s(Lee);Pho=r(kVr,"gpt2"),kVr.forEach(t),$ho=r(F5e," \u2014 "),SP=n(F5e,"A",{href:!0});var RVr=s(SP);Iho=r(RVr,"GPT2LMHeadModel"),RVr.forEach(t),Nho=r(F5e," (OpenAI GPT-2 model)"),F5e.forEach(t),jho=i(S),Op=n(S,"LI",{});var C5e=s(Op);Bee=n(C5e,"STRONG",{});var SVr=s(Bee);Dho=r(SVr,"ibert"),SVr.forEach(t),qho=r(C5e," \u2014 "),PP=n(C5e,"A",{href:!0});var PVr=s(PP);Gho=r(PVr,"IBertForMaskedLM"),PVr.forEach(t),Oho=r(C5e," (I-BERT model)"),C5e.forEach(t),Xho=i(S),Xp=n(S,"LI",{});var M5e=s(Xp);xee=n(M5e,"STRONG",{});var $Vr=s(xee);Vho=r($Vr,"layoutlm"),$Vr.forEach(t),zho=r(M5e," \u2014 "),$P=n(M5e,"A",{href:!0});var IVr=s($P);Who=r(IVr,"LayoutLMForMaskedLM"),IVr.forEach(t),Qho=r(M5e," (LayoutLM model)"),M5e.forEach(t),Hho=i(S),Vp=n(S,"LI",{});var E5e=s(Vp);kee=n(E5e,"STRONG",{});var NVr=s(kee);Uho=r(NVr,"longformer"),NVr.forEach(t),Jho=r(E5e," \u2014 "),IP=n(E5e,"A",{href:!0});var jVr=s(IP);Yho=r(jVr,"LongformerForMaskedLM"),jVr.forEach(t),Kho=r(E5e," (Longformer model)"),E5e.forEach(t),Zho=i(S),zp=n(S,"LI",{});var y5e=s(zp);Ree=n(y5e,"STRONG",{});var DVr=s(Ree);euo=r(DVr,"lxmert"),DVr.forEach(t),ouo=r(y5e," \u2014 "),NP=n(y5e,"A",{href:!0});var qVr=s(NP);ruo=r(qVr,"LxmertForPreTraining"),qVr.forEach(t),tuo=r(y5e," (LXMERT model)"),y5e.forEach(t),auo=i(S),Wp=n(S,"LI",{});var w5e=s(Wp);See=n(w5e,"STRONG",{});var GVr=s(See);nuo=r(GVr,"megatron-bert"),GVr.forEach(t),suo=r(w5e," \u2014 "),jP=n(w5e,"A",{href:!0});var OVr=s(jP);luo=r(OVr,"MegatronBertForPreTraining"),OVr.forEach(t),iuo=r(w5e," (MegatronBert model)"),w5e.forEach(t),duo=i(S),Qp=n(S,"LI",{});var A5e=s(Qp);Pee=n(A5e,"STRONG",{});var XVr=s(Pee);cuo=r(XVr,"mobilebert"),XVr.forEach(t),muo=r(A5e," \u2014 "),DP=n(A5e,"A",{href:!0});var VVr=s(DP);fuo=r(VVr,"MobileBertForPreTraining"),VVr.forEach(t),guo=r(A5e," (MobileBERT model)"),A5e.forEach(t),huo=i(S),Hp=n(S,"LI",{});var L5e=s(Hp);$ee=n(L5e,"STRONG",{});var zVr=s($ee);uuo=r(zVr,"mpnet"),zVr.forEach(t),puo=r(L5e," \u2014 "),qP=n(L5e,"A",{href:!0});var WVr=s(qP);_uo=r(WVr,"MPNetForMaskedLM"),WVr.forEach(t),buo=r(L5e," (MPNet model)"),L5e.forEach(t),vuo=i(S),Up=n(S,"LI",{});var B5e=s(Up);Iee=n(B5e,"STRONG",{});var QVr=s(Iee);Tuo=r(QVr,"openai-gpt"),QVr.forEach(t),Fuo=r(B5e," \u2014 "),GP=n(B5e,"A",{href:!0});var HVr=s(GP);Cuo=r(HVr,"OpenAIGPTLMHeadModel"),HVr.forEach(t),Muo=r(B5e," (OpenAI GPT model)"),B5e.forEach(t),Euo=i(S),Jp=n(S,"LI",{});var x5e=s(Jp);Nee=n(x5e,"STRONG",{});var UVr=s(Nee);yuo=r(UVr,"retribert"),UVr.forEach(t),wuo=r(x5e," \u2014 "),OP=n(x5e,"A",{href:!0});var JVr=s(OP);Auo=r(JVr,"RetriBertModel"),JVr.forEach(t),Luo=r(x5e," (RetriBERT model)"),x5e.forEach(t),Buo=i(S),Yp=n(S,"LI",{});var k5e=s(Yp);jee=n(k5e,"STRONG",{});var YVr=s(jee);xuo=r(YVr,"roberta"),YVr.forEach(t),kuo=r(k5e," \u2014 "),XP=n(k5e,"A",{href:!0});var KVr=s(XP);Ruo=r(KVr,"RobertaForMaskedLM"),KVr.forEach(t),Suo=r(k5e," (RoBERTa model)"),k5e.forEach(t),Puo=i(S),Kp=n(S,"LI",{});var R5e=s(Kp);Dee=n(R5e,"STRONG",{});var ZVr=s(Dee);$uo=r(ZVr,"squeezebert"),ZVr.forEach(t),Iuo=r(R5e," \u2014 "),VP=n(R5e,"A",{href:!0});var ezr=s(VP);Nuo=r(ezr,"SqueezeBertForMaskedLM"),ezr.forEach(t),juo=r(R5e," (SqueezeBERT model)"),R5e.forEach(t),Duo=i(S),Zp=n(S,"LI",{});var S5e=s(Zp);qee=n(S5e,"STRONG",{});var ozr=s(qee);quo=r(ozr,"t5"),ozr.forEach(t),Guo=r(S5e," \u2014 "),zP=n(S5e,"A",{href:!0});var rzr=s(zP);Ouo=r(rzr,"T5ForConditionalGeneration"),rzr.forEach(t),Xuo=r(S5e," (T5 model)"),S5e.forEach(t),Vuo=i(S),e_=n(S,"LI",{});var P5e=s(e_);Gee=n(P5e,"STRONG",{});var tzr=s(Gee);zuo=r(tzr,"tapas"),tzr.forEach(t),Wuo=r(P5e," \u2014 "),WP=n(P5e,"A",{href:!0});var azr=s(WP);Quo=r(azr,"TapasForMaskedLM"),azr.forEach(t),Huo=r(P5e," (TAPAS model)"),P5e.forEach(t),Uuo=i(S),o_=n(S,"LI",{});var $5e=s(o_);Oee=n($5e,"STRONG",{});var nzr=s(Oee);Juo=r(nzr,"transfo-xl"),nzr.forEach(t),Yuo=r($5e," \u2014 "),QP=n($5e,"A",{href:!0});var szr=s(QP);Kuo=r(szr,"TransfoXLLMHeadModel"),szr.forEach(t),Zuo=r($5e," (Transformer-XL model)"),$5e.forEach(t),epo=i(S),r_=n(S,"LI",{});var I5e=s(r_);Xee=n(I5e,"STRONG",{});var lzr=s(Xee);opo=r(lzr,"unispeech"),lzr.forEach(t),rpo=r(I5e," \u2014 "),HP=n(I5e,"A",{href:!0});var izr=s(HP);tpo=r(izr,"UniSpeechForPreTraining"),izr.forEach(t),apo=r(I5e," (UniSpeech model)"),I5e.forEach(t),npo=i(S),t_=n(S,"LI",{});var N5e=s(t_);Vee=n(N5e,"STRONG",{});var dzr=s(Vee);spo=r(dzr,"unispeech-sat"),dzr.forEach(t),lpo=r(N5e," \u2014 "),UP=n(N5e,"A",{href:!0});var czr=s(UP);ipo=r(czr,"UniSpeechSatForPreTraining"),czr.forEach(t),dpo=r(N5e," (UniSpeechSat model)"),N5e.forEach(t),cpo=i(S),a_=n(S,"LI",{});var j5e=s(a_);zee=n(j5e,"STRONG",{});var mzr=s(zee);mpo=r(mzr,"visual_bert"),mzr.forEach(t),fpo=r(j5e," \u2014 "),JP=n(j5e,"A",{href:!0});var fzr=s(JP);gpo=r(fzr,"VisualBertForPreTraining"),fzr.forEach(t),hpo=r(j5e," (VisualBert model)"),j5e.forEach(t),upo=i(S),n_=n(S,"LI",{});var D5e=s(n_);Wee=n(D5e,"STRONG",{});var gzr=s(Wee);ppo=r(gzr,"vit_mae"),gzr.forEach(t),_po=r(D5e," \u2014 "),YP=n(D5e,"A",{href:!0});var hzr=s(YP);bpo=r(hzr,"ViTMAEForPreTraining"),hzr.forEach(t),vpo=r(D5e," (ViTMAE model)"),D5e.forEach(t),Tpo=i(S),s_=n(S,"LI",{});var q5e=s(s_);Qee=n(q5e,"STRONG",{});var uzr=s(Qee);Fpo=r(uzr,"wav2vec2"),uzr.forEach(t),Cpo=r(q5e," \u2014 "),KP=n(q5e,"A",{href:!0});var pzr=s(KP);Mpo=r(pzr,"Wav2Vec2ForPreTraining"),pzr.forEach(t),Epo=r(q5e," (Wav2Vec2 model)"),q5e.forEach(t),ypo=i(S),l_=n(S,"LI",{});var G5e=s(l_);Hee=n(G5e,"STRONG",{});var _zr=s(Hee);wpo=r(_zr,"xlm"),_zr.forEach(t),Apo=r(G5e," \u2014 "),ZP=n(G5e,"A",{href:!0});var bzr=s(ZP);Lpo=r(bzr,"XLMWithLMHeadModel"),bzr.forEach(t),Bpo=r(G5e," (XLM model)"),G5e.forEach(t),xpo=i(S),i_=n(S,"LI",{});var O5e=s(i_);Uee=n(O5e,"STRONG",{});var vzr=s(Uee);kpo=r(vzr,"xlm-roberta"),vzr.forEach(t),Rpo=r(O5e," \u2014 "),e$=n(O5e,"A",{href:!0});var Tzr=s(e$);Spo=r(Tzr,"XLMRobertaForMaskedLM"),Tzr.forEach(t),Ppo=r(O5e," (XLM-RoBERTa model)"),O5e.forEach(t),$po=i(S),d_=n(S,"LI",{});var X5e=s(d_);Jee=n(X5e,"STRONG",{});var Fzr=s(Jee);Ipo=r(Fzr,"xlm-roberta-xl"),Fzr.forEach(t),Npo=r(X5e," \u2014 "),o$=n(X5e,"A",{href:!0});var Czr=s(o$);jpo=r(Czr,"XLMRobertaXLForMaskedLM"),Czr.forEach(t),Dpo=r(X5e," (XLM-RoBERTa-XL model)"),X5e.forEach(t),qpo=i(S),c_=n(S,"LI",{});var V5e=s(c_);Yee=n(V5e,"STRONG",{});var Mzr=s(Yee);Gpo=r(Mzr,"xlnet"),Mzr.forEach(t),Opo=r(V5e," \u2014 "),r$=n(V5e,"A",{href:!0});var Ezr=s(r$);Xpo=r(Ezr,"XLNetLMHeadModel"),Ezr.forEach(t),Vpo=r(V5e," (XLNet model)"),V5e.forEach(t),S.forEach(t),zpo=i(Gt),m_=n(Gt,"P",{});var z5e=s(m_);Wpo=r(z5e,"The model is set in evaluation mode by default using "),Kee=n(z5e,"CODE",{});var yzr=s(Kee);Qpo=r(yzr,"model.eval()"),yzr.forEach(t),Hpo=r(z5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zee=n(z5e,"CODE",{});var wzr=s(Zee);Upo=r(wzr,"model.train()"),wzr.forEach(t),z5e.forEach(t),Jpo=i(Gt),eoe=n(Gt,"P",{});var Azr=s(eoe);Ypo=r(Azr,"Examples:"),Azr.forEach(t),Kpo=i(Gt),f(Jy.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),dke=i(c),rd=n(c,"H2",{class:!0});var bSe=s(rd);f_=n(bSe,"A",{id:!0,class:!0,href:!0});var Lzr=s(f_);ooe=n(Lzr,"SPAN",{});var Bzr=s(ooe);f(Yy.$$.fragment,Bzr),Bzr.forEach(t),Lzr.forEach(t),Zpo=i(bSe),roe=n(bSe,"SPAN",{});var xzr=s(roe);e_o=r(xzr,"AutoModelForCausalLM"),xzr.forEach(t),bSe.forEach(t),cke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);f(Ky.$$.fragment,Js),o_o=i(Js),td=n(Js,"P",{});var Uz=s(td);r_o=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),toe=n(Uz,"CODE",{});var kzr=s(toe);t_o=r(kzr,"from_pretrained()"),kzr.forEach(t),a_o=r(Uz,"class method or the "),aoe=n(Uz,"CODE",{});var Rzr=s(aoe);n_o=r(Rzr,"from_config()"),Rzr.forEach(t),s_o=r(Uz,`class
method.`),Uz.forEach(t),l_o=i(Js),Zy=n(Js,"P",{});var vSe=s(Zy);i_o=r(vSe,"This class cannot be instantiated directly using "),noe=n(vSe,"CODE",{});var Szr=s(noe);d_o=r(Szr,"__init__()"),Szr.forEach(t),c_o=r(vSe," (throws an error)."),vSe.forEach(t),m_o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);f(ew.$$.fragment,Ys),f_o=i(Ys),soe=n(Ys,"P",{});var Pzr=s(soe);g_o=r(Pzr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pzr.forEach(t),h_o=i(Ys),ad=n(Ys,"P",{});var Jz=s(ad);u_o=r(Jz,`Note:
Loading a model from its configuration file does `),loe=n(Jz,"STRONG",{});var $zr=s(loe);p_o=r($zr,"not"),$zr.forEach(t),__o=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(Jz,"CODE",{});var Izr=s(ioe);b_o=r(Izr,"from_pretrained()"),Izr.forEach(t),v_o=r(Jz,"to load the model weights."),Jz.forEach(t),T_o=i(Ys),doe=n(Ys,"P",{});var Nzr=s(doe);F_o=r(Nzr,"Examples:"),Nzr.forEach(t),C_o=i(Ys),f(ow.$$.fragment,Ys),Ys.forEach(t),M_o=i(Js),De=n(Js,"DIV",{class:!0});var Ot=s(De);f(rw.$$.fragment,Ot),E_o=i(Ot),coe=n(Ot,"P",{});var jzr=s(coe);y_o=r(jzr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jzr.forEach(t),w_o=i(Ot),Wa=n(Ot,"P",{});var d5=s(Wa);A_o=r(d5,"The model class to instantiate is selected based on the "),moe=n(d5,"CODE",{});var Dzr=s(moe);L_o=r(Dzr,"model_type"),Dzr.forEach(t),B_o=r(d5,` property of the config object (either
passed as an argument or loaded from `),foe=n(d5,"CODE",{});var qzr=s(foe);x_o=r(qzr,"pretrained_model_name_or_path"),qzr.forEach(t),k_o=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),goe=n(d5,"CODE",{});var Gzr=s(goe);R_o=r(Gzr,"pretrained_model_name_or_path"),Gzr.forEach(t),S_o=r(d5,":"),d5.forEach(t),P_o=i(Ot),$=n(Ot,"UL",{});var N=s($);g_=n(N,"LI",{});var W5e=s(g_);hoe=n(W5e,"STRONG",{});var Ozr=s(hoe);$_o=r(Ozr,"bart"),Ozr.forEach(t),I_o=r(W5e," \u2014 "),t$=n(W5e,"A",{href:!0});var Xzr=s(t$);N_o=r(Xzr,"BartForCausalLM"),Xzr.forEach(t),j_o=r(W5e," (BART model)"),W5e.forEach(t),D_o=i(N),h_=n(N,"LI",{});var Q5e=s(h_);uoe=n(Q5e,"STRONG",{});var Vzr=s(uoe);q_o=r(Vzr,"bert"),Vzr.forEach(t),G_o=r(Q5e," \u2014 "),a$=n(Q5e,"A",{href:!0});var zzr=s(a$);O_o=r(zzr,"BertLMHeadModel"),zzr.forEach(t),X_o=r(Q5e," (BERT model)"),Q5e.forEach(t),V_o=i(N),u_=n(N,"LI",{});var H5e=s(u_);poe=n(H5e,"STRONG",{});var Wzr=s(poe);z_o=r(Wzr,"bert-generation"),Wzr.forEach(t),W_o=r(H5e," \u2014 "),n$=n(H5e,"A",{href:!0});var Qzr=s(n$);Q_o=r(Qzr,"BertGenerationDecoder"),Qzr.forEach(t),H_o=r(H5e," (Bert Generation model)"),H5e.forEach(t),U_o=i(N),p_=n(N,"LI",{});var U5e=s(p_);_oe=n(U5e,"STRONG",{});var Hzr=s(_oe);J_o=r(Hzr,"big_bird"),Hzr.forEach(t),Y_o=r(U5e," \u2014 "),s$=n(U5e,"A",{href:!0});var Uzr=s(s$);K_o=r(Uzr,"BigBirdForCausalLM"),Uzr.forEach(t),Z_o=r(U5e," (BigBird model)"),U5e.forEach(t),ebo=i(N),__=n(N,"LI",{});var J5e=s(__);boe=n(J5e,"STRONG",{});var Jzr=s(boe);obo=r(Jzr,"bigbird_pegasus"),Jzr.forEach(t),rbo=r(J5e," \u2014 "),l$=n(J5e,"A",{href:!0});var Yzr=s(l$);tbo=r(Yzr,"BigBirdPegasusForCausalLM"),Yzr.forEach(t),abo=r(J5e," (BigBirdPegasus model)"),J5e.forEach(t),nbo=i(N),b_=n(N,"LI",{});var Y5e=s(b_);voe=n(Y5e,"STRONG",{});var Kzr=s(voe);sbo=r(Kzr,"blenderbot"),Kzr.forEach(t),lbo=r(Y5e," \u2014 "),i$=n(Y5e,"A",{href:!0});var Zzr=s(i$);ibo=r(Zzr,"BlenderbotForCausalLM"),Zzr.forEach(t),dbo=r(Y5e," (Blenderbot model)"),Y5e.forEach(t),cbo=i(N),v_=n(N,"LI",{});var K5e=s(v_);Toe=n(K5e,"STRONG",{});var eWr=s(Toe);mbo=r(eWr,"blenderbot-small"),eWr.forEach(t),fbo=r(K5e," \u2014 "),d$=n(K5e,"A",{href:!0});var oWr=s(d$);gbo=r(oWr,"BlenderbotSmallForCausalLM"),oWr.forEach(t),hbo=r(K5e," (BlenderbotSmall model)"),K5e.forEach(t),ubo=i(N),T_=n(N,"LI",{});var Z5e=s(T_);Foe=n(Z5e,"STRONG",{});var rWr=s(Foe);pbo=r(rWr,"camembert"),rWr.forEach(t),_bo=r(Z5e," \u2014 "),c$=n(Z5e,"A",{href:!0});var tWr=s(c$);bbo=r(tWr,"CamembertForCausalLM"),tWr.forEach(t),vbo=r(Z5e," (CamemBERT model)"),Z5e.forEach(t),Tbo=i(N),F_=n(N,"LI",{});var eye=s(F_);Coe=n(eye,"STRONG",{});var aWr=s(Coe);Fbo=r(aWr,"ctrl"),aWr.forEach(t),Cbo=r(eye," \u2014 "),m$=n(eye,"A",{href:!0});var nWr=s(m$);Mbo=r(nWr,"CTRLLMHeadModel"),nWr.forEach(t),Ebo=r(eye," (CTRL model)"),eye.forEach(t),ybo=i(N),C_=n(N,"LI",{});var oye=s(C_);Moe=n(oye,"STRONG",{});var sWr=s(Moe);wbo=r(sWr,"data2vec-text"),sWr.forEach(t),Abo=r(oye," \u2014 "),f$=n(oye,"A",{href:!0});var lWr=s(f$);Lbo=r(lWr,"Data2VecTextForCausalLM"),lWr.forEach(t),Bbo=r(oye," (Data2VecText model)"),oye.forEach(t),xbo=i(N),M_=n(N,"LI",{});var rye=s(M_);Eoe=n(rye,"STRONG",{});var iWr=s(Eoe);kbo=r(iWr,"electra"),iWr.forEach(t),Rbo=r(rye," \u2014 "),g$=n(rye,"A",{href:!0});var dWr=s(g$);Sbo=r(dWr,"ElectraForCausalLM"),dWr.forEach(t),Pbo=r(rye," (ELECTRA model)"),rye.forEach(t),$bo=i(N),E_=n(N,"LI",{});var tye=s(E_);yoe=n(tye,"STRONG",{});var cWr=s(yoe);Ibo=r(cWr,"gpt2"),cWr.forEach(t),Nbo=r(tye," \u2014 "),h$=n(tye,"A",{href:!0});var mWr=s(h$);jbo=r(mWr,"GPT2LMHeadModel"),mWr.forEach(t),Dbo=r(tye," (OpenAI GPT-2 model)"),tye.forEach(t),qbo=i(N),y_=n(N,"LI",{});var aye=s(y_);woe=n(aye,"STRONG",{});var fWr=s(woe);Gbo=r(fWr,"gpt_neo"),fWr.forEach(t),Obo=r(aye," \u2014 "),u$=n(aye,"A",{href:!0});var gWr=s(u$);Xbo=r(gWr,"GPTNeoForCausalLM"),gWr.forEach(t),Vbo=r(aye," (GPT Neo model)"),aye.forEach(t),zbo=i(N),w_=n(N,"LI",{});var nye=s(w_);Aoe=n(nye,"STRONG",{});var hWr=s(Aoe);Wbo=r(hWr,"gptj"),hWr.forEach(t),Qbo=r(nye," \u2014 "),p$=n(nye,"A",{href:!0});var uWr=s(p$);Hbo=r(uWr,"GPTJForCausalLM"),uWr.forEach(t),Ubo=r(nye," (GPT-J model)"),nye.forEach(t),Jbo=i(N),A_=n(N,"LI",{});var sye=s(A_);Loe=n(sye,"STRONG",{});var pWr=s(Loe);Ybo=r(pWr,"marian"),pWr.forEach(t),Kbo=r(sye," \u2014 "),_$=n(sye,"A",{href:!0});var _Wr=s(_$);Zbo=r(_Wr,"MarianForCausalLM"),_Wr.forEach(t),e2o=r(sye," (Marian model)"),sye.forEach(t),o2o=i(N),L_=n(N,"LI",{});var lye=s(L_);Boe=n(lye,"STRONG",{});var bWr=s(Boe);r2o=r(bWr,"mbart"),bWr.forEach(t),t2o=r(lye," \u2014 "),b$=n(lye,"A",{href:!0});var vWr=s(b$);a2o=r(vWr,"MBartForCausalLM"),vWr.forEach(t),n2o=r(lye," (mBART model)"),lye.forEach(t),s2o=i(N),B_=n(N,"LI",{});var iye=s(B_);xoe=n(iye,"STRONG",{});var TWr=s(xoe);l2o=r(TWr,"megatron-bert"),TWr.forEach(t),i2o=r(iye," \u2014 "),v$=n(iye,"A",{href:!0});var FWr=s(v$);d2o=r(FWr,"MegatronBertForCausalLM"),FWr.forEach(t),c2o=r(iye," (MegatronBert model)"),iye.forEach(t),m2o=i(N),x_=n(N,"LI",{});var dye=s(x_);koe=n(dye,"STRONG",{});var CWr=s(koe);f2o=r(CWr,"openai-gpt"),CWr.forEach(t),g2o=r(dye," \u2014 "),T$=n(dye,"A",{href:!0});var MWr=s(T$);h2o=r(MWr,"OpenAIGPTLMHeadModel"),MWr.forEach(t),u2o=r(dye," (OpenAI GPT model)"),dye.forEach(t),p2o=i(N),k_=n(N,"LI",{});var cye=s(k_);Roe=n(cye,"STRONG",{});var EWr=s(Roe);_2o=r(EWr,"pegasus"),EWr.forEach(t),b2o=r(cye," \u2014 "),F$=n(cye,"A",{href:!0});var yWr=s(F$);v2o=r(yWr,"PegasusForCausalLM"),yWr.forEach(t),T2o=r(cye," (Pegasus model)"),cye.forEach(t),F2o=i(N),R_=n(N,"LI",{});var mye=s(R_);Soe=n(mye,"STRONG",{});var wWr=s(Soe);C2o=r(wWr,"plbart"),wWr.forEach(t),M2o=r(mye," \u2014 "),C$=n(mye,"A",{href:!0});var AWr=s(C$);E2o=r(AWr,"PLBartForCausalLM"),AWr.forEach(t),y2o=r(mye," (PLBart model)"),mye.forEach(t),w2o=i(N),S_=n(N,"LI",{});var fye=s(S_);Poe=n(fye,"STRONG",{});var LWr=s(Poe);A2o=r(LWr,"prophetnet"),LWr.forEach(t),L2o=r(fye," \u2014 "),M$=n(fye,"A",{href:!0});var BWr=s(M$);B2o=r(BWr,"ProphetNetForCausalLM"),BWr.forEach(t),x2o=r(fye," (ProphetNet model)"),fye.forEach(t),k2o=i(N),P_=n(N,"LI",{});var gye=s(P_);$oe=n(gye,"STRONG",{});var xWr=s($oe);R2o=r(xWr,"qdqbert"),xWr.forEach(t),S2o=r(gye," \u2014 "),E$=n(gye,"A",{href:!0});var kWr=s(E$);P2o=r(kWr,"QDQBertLMHeadModel"),kWr.forEach(t),$2o=r(gye," (QDQBert model)"),gye.forEach(t),I2o=i(N),$_=n(N,"LI",{});var hye=s($_);Ioe=n(hye,"STRONG",{});var RWr=s(Ioe);N2o=r(RWr,"reformer"),RWr.forEach(t),j2o=r(hye," \u2014 "),y$=n(hye,"A",{href:!0});var SWr=s(y$);D2o=r(SWr,"ReformerModelWithLMHead"),SWr.forEach(t),q2o=r(hye," (Reformer model)"),hye.forEach(t),G2o=i(N),I_=n(N,"LI",{});var uye=s(I_);Noe=n(uye,"STRONG",{});var PWr=s(Noe);O2o=r(PWr,"rembert"),PWr.forEach(t),X2o=r(uye," \u2014 "),w$=n(uye,"A",{href:!0});var $Wr=s(w$);V2o=r($Wr,"RemBertForCausalLM"),$Wr.forEach(t),z2o=r(uye," (RemBERT model)"),uye.forEach(t),W2o=i(N),N_=n(N,"LI",{});var pye=s(N_);joe=n(pye,"STRONG",{});var IWr=s(joe);Q2o=r(IWr,"roberta"),IWr.forEach(t),H2o=r(pye," \u2014 "),A$=n(pye,"A",{href:!0});var NWr=s(A$);U2o=r(NWr,"RobertaForCausalLM"),NWr.forEach(t),J2o=r(pye," (RoBERTa model)"),pye.forEach(t),Y2o=i(N),j_=n(N,"LI",{});var _ye=s(j_);Doe=n(_ye,"STRONG",{});var jWr=s(Doe);K2o=r(jWr,"roformer"),jWr.forEach(t),Z2o=r(_ye," \u2014 "),L$=n(_ye,"A",{href:!0});var DWr=s(L$);evo=r(DWr,"RoFormerForCausalLM"),DWr.forEach(t),ovo=r(_ye," (RoFormer model)"),_ye.forEach(t),rvo=i(N),D_=n(N,"LI",{});var bye=s(D_);qoe=n(bye,"STRONG",{});var qWr=s(qoe);tvo=r(qWr,"speech_to_text_2"),qWr.forEach(t),avo=r(bye," \u2014 "),B$=n(bye,"A",{href:!0});var GWr=s(B$);nvo=r(GWr,"Speech2Text2ForCausalLM"),GWr.forEach(t),svo=r(bye," (Speech2Text2 model)"),bye.forEach(t),lvo=i(N),q_=n(N,"LI",{});var vye=s(q_);Goe=n(vye,"STRONG",{});var OWr=s(Goe);ivo=r(OWr,"transfo-xl"),OWr.forEach(t),dvo=r(vye," \u2014 "),x$=n(vye,"A",{href:!0});var XWr=s(x$);cvo=r(XWr,"TransfoXLLMHeadModel"),XWr.forEach(t),mvo=r(vye," (Transformer-XL model)"),vye.forEach(t),fvo=i(N),G_=n(N,"LI",{});var Tye=s(G_);Ooe=n(Tye,"STRONG",{});var VWr=s(Ooe);gvo=r(VWr,"trocr"),VWr.forEach(t),hvo=r(Tye," \u2014 "),k$=n(Tye,"A",{href:!0});var zWr=s(k$);uvo=r(zWr,"TrOCRForCausalLM"),zWr.forEach(t),pvo=r(Tye," (TrOCR model)"),Tye.forEach(t),_vo=i(N),O_=n(N,"LI",{});var Fye=s(O_);Xoe=n(Fye,"STRONG",{});var WWr=s(Xoe);bvo=r(WWr,"xglm"),WWr.forEach(t),vvo=r(Fye," \u2014 "),R$=n(Fye,"A",{href:!0});var QWr=s(R$);Tvo=r(QWr,"XGLMForCausalLM"),QWr.forEach(t),Fvo=r(Fye," (XGLM model)"),Fye.forEach(t),Cvo=i(N),X_=n(N,"LI",{});var Cye=s(X_);Voe=n(Cye,"STRONG",{});var HWr=s(Voe);Mvo=r(HWr,"xlm"),HWr.forEach(t),Evo=r(Cye," \u2014 "),S$=n(Cye,"A",{href:!0});var UWr=s(S$);yvo=r(UWr,"XLMWithLMHeadModel"),UWr.forEach(t),wvo=r(Cye," (XLM model)"),Cye.forEach(t),Avo=i(N),V_=n(N,"LI",{});var Mye=s(V_);zoe=n(Mye,"STRONG",{});var JWr=s(zoe);Lvo=r(JWr,"xlm-prophetnet"),JWr.forEach(t),Bvo=r(Mye," \u2014 "),P$=n(Mye,"A",{href:!0});var YWr=s(P$);xvo=r(YWr,"XLMProphetNetForCausalLM"),YWr.forEach(t),kvo=r(Mye," (XLMProphetNet model)"),Mye.forEach(t),Rvo=i(N),z_=n(N,"LI",{});var Eye=s(z_);Woe=n(Eye,"STRONG",{});var KWr=s(Woe);Svo=r(KWr,"xlm-roberta"),KWr.forEach(t),Pvo=r(Eye," \u2014 "),$$=n(Eye,"A",{href:!0});var ZWr=s($$);$vo=r(ZWr,"XLMRobertaForCausalLM"),ZWr.forEach(t),Ivo=r(Eye," (XLM-RoBERTa model)"),Eye.forEach(t),Nvo=i(N),W_=n(N,"LI",{});var yye=s(W_);Qoe=n(yye,"STRONG",{});var eQr=s(Qoe);jvo=r(eQr,"xlm-roberta-xl"),eQr.forEach(t),Dvo=r(yye," \u2014 "),I$=n(yye,"A",{href:!0});var oQr=s(I$);qvo=r(oQr,"XLMRobertaXLForCausalLM"),oQr.forEach(t),Gvo=r(yye," (XLM-RoBERTa-XL model)"),yye.forEach(t),Ovo=i(N),Q_=n(N,"LI",{});var wye=s(Q_);Hoe=n(wye,"STRONG",{});var rQr=s(Hoe);Xvo=r(rQr,"xlnet"),rQr.forEach(t),Vvo=r(wye," \u2014 "),N$=n(wye,"A",{href:!0});var tQr=s(N$);zvo=r(tQr,"XLNetLMHeadModel"),tQr.forEach(t),Wvo=r(wye," (XLNet model)"),wye.forEach(t),N.forEach(t),Qvo=i(Ot),H_=n(Ot,"P",{});var Aye=s(H_);Hvo=r(Aye,"The model is set in evaluation mode by default using "),Uoe=n(Aye,"CODE",{});var aQr=s(Uoe);Uvo=r(aQr,"model.eval()"),aQr.forEach(t),Jvo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=n(Aye,"CODE",{});var nQr=s(Joe);Yvo=r(nQr,"model.train()"),nQr.forEach(t),Aye.forEach(t),Kvo=i(Ot),Yoe=n(Ot,"P",{});var sQr=s(Yoe);Zvo=r(sQr,"Examples:"),sQr.forEach(t),eTo=i(Ot),f(tw.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),mke=i(c),nd=n(c,"H2",{class:!0});var TSe=s(nd);U_=n(TSe,"A",{id:!0,class:!0,href:!0});var lQr=s(U_);Koe=n(lQr,"SPAN",{});var iQr=s(Koe);f(aw.$$.fragment,iQr),iQr.forEach(t),lQr.forEach(t),oTo=i(TSe),Zoe=n(TSe,"SPAN",{});var dQr=s(Zoe);rTo=r(dQr,"AutoModelForMaskedLM"),dQr.forEach(t),TSe.forEach(t),fke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);f(nw.$$.fragment,Ks),tTo=i(Ks),sd=n(Ks,"P",{});var Yz=s(sd);aTo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ere=n(Yz,"CODE",{});var cQr=s(ere);nTo=r(cQr,"from_pretrained()"),cQr.forEach(t),sTo=r(Yz,"class method or the "),ore=n(Yz,"CODE",{});var mQr=s(ore);lTo=r(mQr,"from_config()"),mQr.forEach(t),iTo=r(Yz,`class
method.`),Yz.forEach(t),dTo=i(Ks),sw=n(Ks,"P",{});var FSe=s(sw);cTo=r(FSe,"This class cannot be instantiated directly using "),rre=n(FSe,"CODE",{});var fQr=s(rre);mTo=r(fQr,"__init__()"),fQr.forEach(t),fTo=r(FSe," (throws an error)."),FSe.forEach(t),gTo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);f(lw.$$.fragment,Zs),hTo=i(Zs),tre=n(Zs,"P",{});var gQr=s(tre);uTo=r(gQr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gQr.forEach(t),pTo=i(Zs),ld=n(Zs,"P",{});var Kz=s(ld);_To=r(Kz,`Note:
Loading a model from its configuration file does `),are=n(Kz,"STRONG",{});var hQr=s(are);bTo=r(hQr,"not"),hQr.forEach(t),vTo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(Kz,"CODE",{});var uQr=s(nre);TTo=r(uQr,"from_pretrained()"),uQr.forEach(t),FTo=r(Kz,"to load the model weights."),Kz.forEach(t),CTo=i(Zs),sre=n(Zs,"P",{});var pQr=s(sre);MTo=r(pQr,"Examples:"),pQr.forEach(t),ETo=i(Zs),f(iw.$$.fragment,Zs),Zs.forEach(t),yTo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);f(dw.$$.fragment,Xt),wTo=i(Xt),lre=n(Xt,"P",{});var _Qr=s(lre);ATo=r(_Qr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Qr.forEach(t),LTo=i(Xt),Qa=n(Xt,"P",{});var c5=s(Qa);BTo=r(c5,"The model class to instantiate is selected based on the "),ire=n(c5,"CODE",{});var bQr=s(ire);xTo=r(bQr,"model_type"),bQr.forEach(t),kTo=r(c5,` property of the config object (either
passed as an argument or loaded from `),dre=n(c5,"CODE",{});var vQr=s(dre);RTo=r(vQr,"pretrained_model_name_or_path"),vQr.forEach(t),STo=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=n(c5,"CODE",{});var TQr=s(cre);PTo=r(TQr,"pretrained_model_name_or_path"),TQr.forEach(t),$To=r(c5,":"),c5.forEach(t),ITo=i(Xt),I=n(Xt,"UL",{});var j=s(I);J_=n(j,"LI",{});var Lye=s(J_);mre=n(Lye,"STRONG",{});var FQr=s(mre);NTo=r(FQr,"albert"),FQr.forEach(t),jTo=r(Lye," \u2014 "),j$=n(Lye,"A",{href:!0});var CQr=s(j$);DTo=r(CQr,"AlbertForMaskedLM"),CQr.forEach(t),qTo=r(Lye," (ALBERT model)"),Lye.forEach(t),GTo=i(j),Y_=n(j,"LI",{});var Bye=s(Y_);fre=n(Bye,"STRONG",{});var MQr=s(fre);OTo=r(MQr,"bart"),MQr.forEach(t),XTo=r(Bye," \u2014 "),D$=n(Bye,"A",{href:!0});var EQr=s(D$);VTo=r(EQr,"BartForConditionalGeneration"),EQr.forEach(t),zTo=r(Bye," (BART model)"),Bye.forEach(t),WTo=i(j),K_=n(j,"LI",{});var xye=s(K_);gre=n(xye,"STRONG",{});var yQr=s(gre);QTo=r(yQr,"bert"),yQr.forEach(t),HTo=r(xye," \u2014 "),q$=n(xye,"A",{href:!0});var wQr=s(q$);UTo=r(wQr,"BertForMaskedLM"),wQr.forEach(t),JTo=r(xye," (BERT model)"),xye.forEach(t),YTo=i(j),Z_=n(j,"LI",{});var kye=s(Z_);hre=n(kye,"STRONG",{});var AQr=s(hre);KTo=r(AQr,"big_bird"),AQr.forEach(t),ZTo=r(kye," \u2014 "),G$=n(kye,"A",{href:!0});var LQr=s(G$);e1o=r(LQr,"BigBirdForMaskedLM"),LQr.forEach(t),o1o=r(kye," (BigBird model)"),kye.forEach(t),r1o=i(j),eb=n(j,"LI",{});var Rye=s(eb);ure=n(Rye,"STRONG",{});var BQr=s(ure);t1o=r(BQr,"camembert"),BQr.forEach(t),a1o=r(Rye," \u2014 "),O$=n(Rye,"A",{href:!0});var xQr=s(O$);n1o=r(xQr,"CamembertForMaskedLM"),xQr.forEach(t),s1o=r(Rye," (CamemBERT model)"),Rye.forEach(t),l1o=i(j),ob=n(j,"LI",{});var Sye=s(ob);pre=n(Sye,"STRONG",{});var kQr=s(pre);i1o=r(kQr,"convbert"),kQr.forEach(t),d1o=r(Sye," \u2014 "),X$=n(Sye,"A",{href:!0});var RQr=s(X$);c1o=r(RQr,"ConvBertForMaskedLM"),RQr.forEach(t),m1o=r(Sye," (ConvBERT model)"),Sye.forEach(t),f1o=i(j),rb=n(j,"LI",{});var Pye=s(rb);_re=n(Pye,"STRONG",{});var SQr=s(_re);g1o=r(SQr,"data2vec-text"),SQr.forEach(t),h1o=r(Pye," \u2014 "),V$=n(Pye,"A",{href:!0});var PQr=s(V$);u1o=r(PQr,"Data2VecTextForMaskedLM"),PQr.forEach(t),p1o=r(Pye," (Data2VecText model)"),Pye.forEach(t),_1o=i(j),tb=n(j,"LI",{});var $ye=s(tb);bre=n($ye,"STRONG",{});var $Qr=s(bre);b1o=r($Qr,"deberta"),$Qr.forEach(t),v1o=r($ye," \u2014 "),z$=n($ye,"A",{href:!0});var IQr=s(z$);T1o=r(IQr,"DebertaForMaskedLM"),IQr.forEach(t),F1o=r($ye," (DeBERTa model)"),$ye.forEach(t),C1o=i(j),ab=n(j,"LI",{});var Iye=s(ab);vre=n(Iye,"STRONG",{});var NQr=s(vre);M1o=r(NQr,"deberta-v2"),NQr.forEach(t),E1o=r(Iye," \u2014 "),W$=n(Iye,"A",{href:!0});var jQr=s(W$);y1o=r(jQr,"DebertaV2ForMaskedLM"),jQr.forEach(t),w1o=r(Iye," (DeBERTa-v2 model)"),Iye.forEach(t),A1o=i(j),nb=n(j,"LI",{});var Nye=s(nb);Tre=n(Nye,"STRONG",{});var DQr=s(Tre);L1o=r(DQr,"distilbert"),DQr.forEach(t),B1o=r(Nye," \u2014 "),Q$=n(Nye,"A",{href:!0});var qQr=s(Q$);x1o=r(qQr,"DistilBertForMaskedLM"),qQr.forEach(t),k1o=r(Nye," (DistilBERT model)"),Nye.forEach(t),R1o=i(j),sb=n(j,"LI",{});var jye=s(sb);Fre=n(jye,"STRONG",{});var GQr=s(Fre);S1o=r(GQr,"electra"),GQr.forEach(t),P1o=r(jye," \u2014 "),H$=n(jye,"A",{href:!0});var OQr=s(H$);$1o=r(OQr,"ElectraForMaskedLM"),OQr.forEach(t),I1o=r(jye," (ELECTRA model)"),jye.forEach(t),N1o=i(j),lb=n(j,"LI",{});var Dye=s(lb);Cre=n(Dye,"STRONG",{});var XQr=s(Cre);j1o=r(XQr,"flaubert"),XQr.forEach(t),D1o=r(Dye," \u2014 "),U$=n(Dye,"A",{href:!0});var VQr=s(U$);q1o=r(VQr,"FlaubertWithLMHeadModel"),VQr.forEach(t),G1o=r(Dye," (FlauBERT model)"),Dye.forEach(t),O1o=i(j),ib=n(j,"LI",{});var qye=s(ib);Mre=n(qye,"STRONG",{});var zQr=s(Mre);X1o=r(zQr,"fnet"),zQr.forEach(t),V1o=r(qye," \u2014 "),J$=n(qye,"A",{href:!0});var WQr=s(J$);z1o=r(WQr,"FNetForMaskedLM"),WQr.forEach(t),W1o=r(qye," (FNet model)"),qye.forEach(t),Q1o=i(j),db=n(j,"LI",{});var Gye=s(db);Ere=n(Gye,"STRONG",{});var QQr=s(Ere);H1o=r(QQr,"funnel"),QQr.forEach(t),U1o=r(Gye," \u2014 "),Y$=n(Gye,"A",{href:!0});var HQr=s(Y$);J1o=r(HQr,"FunnelForMaskedLM"),HQr.forEach(t),Y1o=r(Gye," (Funnel Transformer model)"),Gye.forEach(t),K1o=i(j),cb=n(j,"LI",{});var Oye=s(cb);yre=n(Oye,"STRONG",{});var UQr=s(yre);Z1o=r(UQr,"ibert"),UQr.forEach(t),eFo=r(Oye," \u2014 "),K$=n(Oye,"A",{href:!0});var JQr=s(K$);oFo=r(JQr,"IBertForMaskedLM"),JQr.forEach(t),rFo=r(Oye," (I-BERT model)"),Oye.forEach(t),tFo=i(j),mb=n(j,"LI",{});var Xye=s(mb);wre=n(Xye,"STRONG",{});var YQr=s(wre);aFo=r(YQr,"layoutlm"),YQr.forEach(t),nFo=r(Xye," \u2014 "),Z$=n(Xye,"A",{href:!0});var KQr=s(Z$);sFo=r(KQr,"LayoutLMForMaskedLM"),KQr.forEach(t),lFo=r(Xye," (LayoutLM model)"),Xye.forEach(t),iFo=i(j),fb=n(j,"LI",{});var Vye=s(fb);Are=n(Vye,"STRONG",{});var ZQr=s(Are);dFo=r(ZQr,"longformer"),ZQr.forEach(t),cFo=r(Vye," \u2014 "),eI=n(Vye,"A",{href:!0});var eHr=s(eI);mFo=r(eHr,"LongformerForMaskedLM"),eHr.forEach(t),fFo=r(Vye," (Longformer model)"),Vye.forEach(t),gFo=i(j),gb=n(j,"LI",{});var zye=s(gb);Lre=n(zye,"STRONG",{});var oHr=s(Lre);hFo=r(oHr,"mbart"),oHr.forEach(t),uFo=r(zye," \u2014 "),oI=n(zye,"A",{href:!0});var rHr=s(oI);pFo=r(rHr,"MBartForConditionalGeneration"),rHr.forEach(t),_Fo=r(zye," (mBART model)"),zye.forEach(t),bFo=i(j),hb=n(j,"LI",{});var Wye=s(hb);Bre=n(Wye,"STRONG",{});var tHr=s(Bre);vFo=r(tHr,"megatron-bert"),tHr.forEach(t),TFo=r(Wye," \u2014 "),rI=n(Wye,"A",{href:!0});var aHr=s(rI);FFo=r(aHr,"MegatronBertForMaskedLM"),aHr.forEach(t),CFo=r(Wye," (MegatronBert model)"),Wye.forEach(t),MFo=i(j),ub=n(j,"LI",{});var Qye=s(ub);xre=n(Qye,"STRONG",{});var nHr=s(xre);EFo=r(nHr,"mobilebert"),nHr.forEach(t),yFo=r(Qye," \u2014 "),tI=n(Qye,"A",{href:!0});var sHr=s(tI);wFo=r(sHr,"MobileBertForMaskedLM"),sHr.forEach(t),AFo=r(Qye," (MobileBERT model)"),Qye.forEach(t),LFo=i(j),pb=n(j,"LI",{});var Hye=s(pb);kre=n(Hye,"STRONG",{});var lHr=s(kre);BFo=r(lHr,"mpnet"),lHr.forEach(t),xFo=r(Hye," \u2014 "),aI=n(Hye,"A",{href:!0});var iHr=s(aI);kFo=r(iHr,"MPNetForMaskedLM"),iHr.forEach(t),RFo=r(Hye," (MPNet model)"),Hye.forEach(t),SFo=i(j),_b=n(j,"LI",{});var Uye=s(_b);Rre=n(Uye,"STRONG",{});var dHr=s(Rre);PFo=r(dHr,"nystromformer"),dHr.forEach(t),$Fo=r(Uye," \u2014 "),nI=n(Uye,"A",{href:!0});var cHr=s(nI);IFo=r(cHr,"NystromformerForMaskedLM"),cHr.forEach(t),NFo=r(Uye," (Nystromformer model)"),Uye.forEach(t),jFo=i(j),bb=n(j,"LI",{});var Jye=s(bb);Sre=n(Jye,"STRONG",{});var mHr=s(Sre);DFo=r(mHr,"perceiver"),mHr.forEach(t),qFo=r(Jye," \u2014 "),sI=n(Jye,"A",{href:!0});var fHr=s(sI);GFo=r(fHr,"PerceiverForMaskedLM"),fHr.forEach(t),OFo=r(Jye," (Perceiver model)"),Jye.forEach(t),XFo=i(j),vb=n(j,"LI",{});var Yye=s(vb);Pre=n(Yye,"STRONG",{});var gHr=s(Pre);VFo=r(gHr,"qdqbert"),gHr.forEach(t),zFo=r(Yye," \u2014 "),lI=n(Yye,"A",{href:!0});var hHr=s(lI);WFo=r(hHr,"QDQBertForMaskedLM"),hHr.forEach(t),QFo=r(Yye," (QDQBert model)"),Yye.forEach(t),HFo=i(j),Tb=n(j,"LI",{});var Kye=s(Tb);$re=n(Kye,"STRONG",{});var uHr=s($re);UFo=r(uHr,"reformer"),uHr.forEach(t),JFo=r(Kye," \u2014 "),iI=n(Kye,"A",{href:!0});var pHr=s(iI);YFo=r(pHr,"ReformerForMaskedLM"),pHr.forEach(t),KFo=r(Kye," (Reformer model)"),Kye.forEach(t),ZFo=i(j),Fb=n(j,"LI",{});var Zye=s(Fb);Ire=n(Zye,"STRONG",{});var _Hr=s(Ire);eCo=r(_Hr,"rembert"),_Hr.forEach(t),oCo=r(Zye," \u2014 "),dI=n(Zye,"A",{href:!0});var bHr=s(dI);rCo=r(bHr,"RemBertForMaskedLM"),bHr.forEach(t),tCo=r(Zye," (RemBERT model)"),Zye.forEach(t),aCo=i(j),Cb=n(j,"LI",{});var ewe=s(Cb);Nre=n(ewe,"STRONG",{});var vHr=s(Nre);nCo=r(vHr,"roberta"),vHr.forEach(t),sCo=r(ewe," \u2014 "),cI=n(ewe,"A",{href:!0});var THr=s(cI);lCo=r(THr,"RobertaForMaskedLM"),THr.forEach(t),iCo=r(ewe," (RoBERTa model)"),ewe.forEach(t),dCo=i(j),Mb=n(j,"LI",{});var owe=s(Mb);jre=n(owe,"STRONG",{});var FHr=s(jre);cCo=r(FHr,"roformer"),FHr.forEach(t),mCo=r(owe," \u2014 "),mI=n(owe,"A",{href:!0});var CHr=s(mI);fCo=r(CHr,"RoFormerForMaskedLM"),CHr.forEach(t),gCo=r(owe," (RoFormer model)"),owe.forEach(t),hCo=i(j),Eb=n(j,"LI",{});var rwe=s(Eb);Dre=n(rwe,"STRONG",{});var MHr=s(Dre);uCo=r(MHr,"squeezebert"),MHr.forEach(t),pCo=r(rwe," \u2014 "),fI=n(rwe,"A",{href:!0});var EHr=s(fI);_Co=r(EHr,"SqueezeBertForMaskedLM"),EHr.forEach(t),bCo=r(rwe," (SqueezeBERT model)"),rwe.forEach(t),vCo=i(j),yb=n(j,"LI",{});var twe=s(yb);qre=n(twe,"STRONG",{});var yHr=s(qre);TCo=r(yHr,"tapas"),yHr.forEach(t),FCo=r(twe," \u2014 "),gI=n(twe,"A",{href:!0});var wHr=s(gI);CCo=r(wHr,"TapasForMaskedLM"),wHr.forEach(t),MCo=r(twe," (TAPAS model)"),twe.forEach(t),ECo=i(j),wb=n(j,"LI",{});var awe=s(wb);Gre=n(awe,"STRONG",{});var AHr=s(Gre);yCo=r(AHr,"wav2vec2"),AHr.forEach(t),wCo=r(awe," \u2014 "),Ore=n(awe,"CODE",{});var LHr=s(Ore);ACo=r(LHr,"Wav2Vec2ForMaskedLM"),LHr.forEach(t),LCo=r(awe,"(Wav2Vec2 model)"),awe.forEach(t),BCo=i(j),Ab=n(j,"LI",{});var nwe=s(Ab);Xre=n(nwe,"STRONG",{});var BHr=s(Xre);xCo=r(BHr,"xlm"),BHr.forEach(t),kCo=r(nwe," \u2014 "),hI=n(nwe,"A",{href:!0});var xHr=s(hI);RCo=r(xHr,"XLMWithLMHeadModel"),xHr.forEach(t),SCo=r(nwe," (XLM model)"),nwe.forEach(t),PCo=i(j),Lb=n(j,"LI",{});var swe=s(Lb);Vre=n(swe,"STRONG",{});var kHr=s(Vre);$Co=r(kHr,"xlm-roberta"),kHr.forEach(t),ICo=r(swe," \u2014 "),uI=n(swe,"A",{href:!0});var RHr=s(uI);NCo=r(RHr,"XLMRobertaForMaskedLM"),RHr.forEach(t),jCo=r(swe," (XLM-RoBERTa model)"),swe.forEach(t),DCo=i(j),Bb=n(j,"LI",{});var lwe=s(Bb);zre=n(lwe,"STRONG",{});var SHr=s(zre);qCo=r(SHr,"xlm-roberta-xl"),SHr.forEach(t),GCo=r(lwe," \u2014 "),pI=n(lwe,"A",{href:!0});var PHr=s(pI);OCo=r(PHr,"XLMRobertaXLForMaskedLM"),PHr.forEach(t),XCo=r(lwe," (XLM-RoBERTa-XL model)"),lwe.forEach(t),VCo=i(j),xb=n(j,"LI",{});var iwe=s(xb);Wre=n(iwe,"STRONG",{});var $Hr=s(Wre);zCo=r($Hr,"yoso"),$Hr.forEach(t),WCo=r(iwe," \u2014 "),_I=n(iwe,"A",{href:!0});var IHr=s(_I);QCo=r(IHr,"YosoForMaskedLM"),IHr.forEach(t),HCo=r(iwe," (YOSO model)"),iwe.forEach(t),j.forEach(t),UCo=i(Xt),kb=n(Xt,"P",{});var dwe=s(kb);JCo=r(dwe,"The model is set in evaluation mode by default using "),Qre=n(dwe,"CODE",{});var NHr=s(Qre);YCo=r(NHr,"model.eval()"),NHr.forEach(t),KCo=r(dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hre=n(dwe,"CODE",{});var jHr=s(Hre);ZCo=r(jHr,"model.train()"),jHr.forEach(t),dwe.forEach(t),eMo=i(Xt),Ure=n(Xt,"P",{});var DHr=s(Ure);oMo=r(DHr,"Examples:"),DHr.forEach(t),rMo=i(Xt),f(cw.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),gke=i(c),id=n(c,"H2",{class:!0});var CSe=s(id);Rb=n(CSe,"A",{id:!0,class:!0,href:!0});var qHr=s(Rb);Jre=n(qHr,"SPAN",{});var GHr=s(Jre);f(mw.$$.fragment,GHr),GHr.forEach(t),qHr.forEach(t),tMo=i(CSe),Yre=n(CSe,"SPAN",{});var OHr=s(Yre);aMo=r(OHr,"AutoModelForSeq2SeqLM"),OHr.forEach(t),CSe.forEach(t),hke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);f(fw.$$.fragment,el),nMo=i(el),dd=n(el,"P",{});var Zz=s(dd);sMo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kre=n(Zz,"CODE",{});var XHr=s(Kre);lMo=r(XHr,"from_pretrained()"),XHr.forEach(t),iMo=r(Zz,"class method or the "),Zre=n(Zz,"CODE",{});var VHr=s(Zre);dMo=r(VHr,"from_config()"),VHr.forEach(t),cMo=r(Zz,`class
method.`),Zz.forEach(t),mMo=i(el),gw=n(el,"P",{});var MSe=s(gw);fMo=r(MSe,"This class cannot be instantiated directly using "),ete=n(MSe,"CODE",{});var zHr=s(ete);gMo=r(zHr,"__init__()"),zHr.forEach(t),hMo=r(MSe," (throws an error)."),MSe.forEach(t),uMo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);f(hw.$$.fragment,ol),pMo=i(ol),ote=n(ol,"P",{});var WHr=s(ote);_Mo=r(WHr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WHr.forEach(t),bMo=i(ol),cd=n(ol,"P",{});var eW=s(cd);vMo=r(eW,`Note:
Loading a model from its configuration file does `),rte=n(eW,"STRONG",{});var QHr=s(rte);TMo=r(QHr,"not"),QHr.forEach(t),FMo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=n(eW,"CODE",{});var HHr=s(tte);CMo=r(HHr,"from_pretrained()"),HHr.forEach(t),MMo=r(eW,"to load the model weights."),eW.forEach(t),EMo=i(ol),ate=n(ol,"P",{});var UHr=s(ate);yMo=r(UHr,"Examples:"),UHr.forEach(t),wMo=i(ol),f(uw.$$.fragment,ol),ol.forEach(t),AMo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);f(pw.$$.fragment,Vt),LMo=i(Vt),nte=n(Vt,"P",{});var JHr=s(nte);BMo=r(JHr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JHr.forEach(t),xMo=i(Vt),Ha=n(Vt,"P",{});var m5=s(Ha);kMo=r(m5,"The model class to instantiate is selected based on the "),ste=n(m5,"CODE",{});var YHr=s(ste);RMo=r(YHr,"model_type"),YHr.forEach(t),SMo=r(m5,` property of the config object (either
passed as an argument or loaded from `),lte=n(m5,"CODE",{});var KHr=s(lte);PMo=r(KHr,"pretrained_model_name_or_path"),KHr.forEach(t),$Mo=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=n(m5,"CODE",{});var ZHr=s(ite);IMo=r(ZHr,"pretrained_model_name_or_path"),ZHr.forEach(t),NMo=r(m5,":"),m5.forEach(t),jMo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);Sb=n(ie,"LI",{});var cwe=s(Sb);dte=n(cwe,"STRONG",{});var eUr=s(dte);DMo=r(eUr,"bart"),eUr.forEach(t),qMo=r(cwe," \u2014 "),bI=n(cwe,"A",{href:!0});var oUr=s(bI);GMo=r(oUr,"BartForConditionalGeneration"),oUr.forEach(t),OMo=r(cwe," (BART model)"),cwe.forEach(t),XMo=i(ie),Pb=n(ie,"LI",{});var mwe=s(Pb);cte=n(mwe,"STRONG",{});var rUr=s(cte);VMo=r(rUr,"bigbird_pegasus"),rUr.forEach(t),zMo=r(mwe," \u2014 "),vI=n(mwe,"A",{href:!0});var tUr=s(vI);WMo=r(tUr,"BigBirdPegasusForConditionalGeneration"),tUr.forEach(t),QMo=r(mwe," (BigBirdPegasus model)"),mwe.forEach(t),HMo=i(ie),$b=n(ie,"LI",{});var fwe=s($b);mte=n(fwe,"STRONG",{});var aUr=s(mte);UMo=r(aUr,"blenderbot"),aUr.forEach(t),JMo=r(fwe," \u2014 "),TI=n(fwe,"A",{href:!0});var nUr=s(TI);YMo=r(nUr,"BlenderbotForConditionalGeneration"),nUr.forEach(t),KMo=r(fwe," (Blenderbot model)"),fwe.forEach(t),ZMo=i(ie),Ib=n(ie,"LI",{});var gwe=s(Ib);fte=n(gwe,"STRONG",{});var sUr=s(fte);e4o=r(sUr,"blenderbot-small"),sUr.forEach(t),o4o=r(gwe," \u2014 "),FI=n(gwe,"A",{href:!0});var lUr=s(FI);r4o=r(lUr,"BlenderbotSmallForConditionalGeneration"),lUr.forEach(t),t4o=r(gwe," (BlenderbotSmall model)"),gwe.forEach(t),a4o=i(ie),Nb=n(ie,"LI",{});var hwe=s(Nb);gte=n(hwe,"STRONG",{});var iUr=s(gte);n4o=r(iUr,"encoder-decoder"),iUr.forEach(t),s4o=r(hwe," \u2014 "),CI=n(hwe,"A",{href:!0});var dUr=s(CI);l4o=r(dUr,"EncoderDecoderModel"),dUr.forEach(t),i4o=r(hwe," (Encoder decoder model)"),hwe.forEach(t),d4o=i(ie),jb=n(ie,"LI",{});var uwe=s(jb);hte=n(uwe,"STRONG",{});var cUr=s(hte);c4o=r(cUr,"fsmt"),cUr.forEach(t),m4o=r(uwe," \u2014 "),MI=n(uwe,"A",{href:!0});var mUr=s(MI);f4o=r(mUr,"FSMTForConditionalGeneration"),mUr.forEach(t),g4o=r(uwe," (FairSeq Machine-Translation model)"),uwe.forEach(t),h4o=i(ie),Db=n(ie,"LI",{});var pwe=s(Db);ute=n(pwe,"STRONG",{});var fUr=s(ute);u4o=r(fUr,"led"),fUr.forEach(t),p4o=r(pwe," \u2014 "),EI=n(pwe,"A",{href:!0});var gUr=s(EI);_4o=r(gUr,"LEDForConditionalGeneration"),gUr.forEach(t),b4o=r(pwe," (LED model)"),pwe.forEach(t),v4o=i(ie),qb=n(ie,"LI",{});var _we=s(qb);pte=n(_we,"STRONG",{});var hUr=s(pte);T4o=r(hUr,"m2m_100"),hUr.forEach(t),F4o=r(_we," \u2014 "),yI=n(_we,"A",{href:!0});var uUr=s(yI);C4o=r(uUr,"M2M100ForConditionalGeneration"),uUr.forEach(t),M4o=r(_we," (M2M100 model)"),_we.forEach(t),E4o=i(ie),Gb=n(ie,"LI",{});var bwe=s(Gb);_te=n(bwe,"STRONG",{});var pUr=s(_te);y4o=r(pUr,"marian"),pUr.forEach(t),w4o=r(bwe," \u2014 "),wI=n(bwe,"A",{href:!0});var _Ur=s(wI);A4o=r(_Ur,"MarianMTModel"),_Ur.forEach(t),L4o=r(bwe," (Marian model)"),bwe.forEach(t),B4o=i(ie),Ob=n(ie,"LI",{});var vwe=s(Ob);bte=n(vwe,"STRONG",{});var bUr=s(bte);x4o=r(bUr,"mbart"),bUr.forEach(t),k4o=r(vwe," \u2014 "),AI=n(vwe,"A",{href:!0});var vUr=s(AI);R4o=r(vUr,"MBartForConditionalGeneration"),vUr.forEach(t),S4o=r(vwe," (mBART model)"),vwe.forEach(t),P4o=i(ie),Xb=n(ie,"LI",{});var Twe=s(Xb);vte=n(Twe,"STRONG",{});var TUr=s(vte);$4o=r(TUr,"mt5"),TUr.forEach(t),I4o=r(Twe," \u2014 "),LI=n(Twe,"A",{href:!0});var FUr=s(LI);N4o=r(FUr,"MT5ForConditionalGeneration"),FUr.forEach(t),j4o=r(Twe," (mT5 model)"),Twe.forEach(t),D4o=i(ie),Vb=n(ie,"LI",{});var Fwe=s(Vb);Tte=n(Fwe,"STRONG",{});var CUr=s(Tte);q4o=r(CUr,"pegasus"),CUr.forEach(t),G4o=r(Fwe," \u2014 "),BI=n(Fwe,"A",{href:!0});var MUr=s(BI);O4o=r(MUr,"PegasusForConditionalGeneration"),MUr.forEach(t),X4o=r(Fwe," (Pegasus model)"),Fwe.forEach(t),V4o=i(ie),zb=n(ie,"LI",{});var Cwe=s(zb);Fte=n(Cwe,"STRONG",{});var EUr=s(Fte);z4o=r(EUr,"plbart"),EUr.forEach(t),W4o=r(Cwe," \u2014 "),xI=n(Cwe,"A",{href:!0});var yUr=s(xI);Q4o=r(yUr,"PLBartForConditionalGeneration"),yUr.forEach(t),H4o=r(Cwe," (PLBart model)"),Cwe.forEach(t),U4o=i(ie),Wb=n(ie,"LI",{});var Mwe=s(Wb);Cte=n(Mwe,"STRONG",{});var wUr=s(Cte);J4o=r(wUr,"prophetnet"),wUr.forEach(t),Y4o=r(Mwe," \u2014 "),kI=n(Mwe,"A",{href:!0});var AUr=s(kI);K4o=r(AUr,"ProphetNetForConditionalGeneration"),AUr.forEach(t),Z4o=r(Mwe," (ProphetNet model)"),Mwe.forEach(t),eEo=i(ie),Qb=n(ie,"LI",{});var Ewe=s(Qb);Mte=n(Ewe,"STRONG",{});var LUr=s(Mte);oEo=r(LUr,"t5"),LUr.forEach(t),rEo=r(Ewe," \u2014 "),RI=n(Ewe,"A",{href:!0});var BUr=s(RI);tEo=r(BUr,"T5ForConditionalGeneration"),BUr.forEach(t),aEo=r(Ewe," (T5 model)"),Ewe.forEach(t),nEo=i(ie),Hb=n(ie,"LI",{});var ywe=s(Hb);Ete=n(ywe,"STRONG",{});var xUr=s(Ete);sEo=r(xUr,"xlm-prophetnet"),xUr.forEach(t),lEo=r(ywe," \u2014 "),SI=n(ywe,"A",{href:!0});var kUr=s(SI);iEo=r(kUr,"XLMProphetNetForConditionalGeneration"),kUr.forEach(t),dEo=r(ywe," (XLMProphetNet model)"),ywe.forEach(t),ie.forEach(t),cEo=i(Vt),Ub=n(Vt,"P",{});var wwe=s(Ub);mEo=r(wwe,"The model is set in evaluation mode by default using "),yte=n(wwe,"CODE",{});var RUr=s(yte);fEo=r(RUr,"model.eval()"),RUr.forEach(t),gEo=r(wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wte=n(wwe,"CODE",{});var SUr=s(wte);hEo=r(SUr,"model.train()"),SUr.forEach(t),wwe.forEach(t),uEo=i(Vt),Ate=n(Vt,"P",{});var PUr=s(Ate);pEo=r(PUr,"Examples:"),PUr.forEach(t),_Eo=i(Vt),f(_w.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),uke=i(c),md=n(c,"H2",{class:!0});var ESe=s(md);Jb=n(ESe,"A",{id:!0,class:!0,href:!0});var $Ur=s(Jb);Lte=n($Ur,"SPAN",{});var IUr=s(Lte);f(bw.$$.fragment,IUr),IUr.forEach(t),$Ur.forEach(t),bEo=i(ESe),Bte=n(ESe,"SPAN",{});var NUr=s(Bte);vEo=r(NUr,"AutoModelForSequenceClassification"),NUr.forEach(t),ESe.forEach(t),pke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);f(vw.$$.fragment,rl),TEo=i(rl),fd=n(rl,"P",{});var oW=s(fd);FEo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xte=n(oW,"CODE",{});var jUr=s(xte);CEo=r(jUr,"from_pretrained()"),jUr.forEach(t),MEo=r(oW,"class method or the "),kte=n(oW,"CODE",{});var DUr=s(kte);EEo=r(DUr,"from_config()"),DUr.forEach(t),yEo=r(oW,`class
method.`),oW.forEach(t),wEo=i(rl),Tw=n(rl,"P",{});var ySe=s(Tw);AEo=r(ySe,"This class cannot be instantiated directly using "),Rte=n(ySe,"CODE",{});var qUr=s(Rte);LEo=r(qUr,"__init__()"),qUr.forEach(t),BEo=r(ySe," (throws an error)."),ySe.forEach(t),xEo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);f(Fw.$$.fragment,tl),kEo=i(tl),Ste=n(tl,"P",{});var GUr=s(Ste);REo=r(GUr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GUr.forEach(t),SEo=i(tl),gd=n(tl,"P",{});var rW=s(gd);PEo=r(rW,`Note:
Loading a model from its configuration file does `),Pte=n(rW,"STRONG",{});var OUr=s(Pte);$Eo=r(OUr,"not"),OUr.forEach(t),IEo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=n(rW,"CODE",{});var XUr=s($te);NEo=r(XUr,"from_pretrained()"),XUr.forEach(t),jEo=r(rW,"to load the model weights."),rW.forEach(t),DEo=i(tl),Ite=n(tl,"P",{});var VUr=s(Ite);qEo=r(VUr,"Examples:"),VUr.forEach(t),GEo=i(tl),f(Cw.$$.fragment,tl),tl.forEach(t),OEo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);f(Mw.$$.fragment,zt),XEo=i(zt),Nte=n(zt,"P",{});var zUr=s(Nte);VEo=r(zUr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zUr.forEach(t),zEo=i(zt),Ua=n(zt,"P",{});var f5=s(Ua);WEo=r(f5,"The model class to instantiate is selected based on the "),jte=n(f5,"CODE",{});var WUr=s(jte);QEo=r(WUr,"model_type"),WUr.forEach(t),HEo=r(f5,` property of the config object (either
passed as an argument or loaded from `),Dte=n(f5,"CODE",{});var QUr=s(Dte);UEo=r(QUr,"pretrained_model_name_or_path"),QUr.forEach(t),JEo=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qte=n(f5,"CODE",{});var HUr=s(qte);YEo=r(HUr,"pretrained_model_name_or_path"),HUr.forEach(t),KEo=r(f5,":"),f5.forEach(t),ZEo=i(zt),A=n(zt,"UL",{});var L=s(A);Yb=n(L,"LI",{});var Awe=s(Yb);Gte=n(Awe,"STRONG",{});var UUr=s(Gte);e3o=r(UUr,"albert"),UUr.forEach(t),o3o=r(Awe," \u2014 "),PI=n(Awe,"A",{href:!0});var JUr=s(PI);r3o=r(JUr,"AlbertForSequenceClassification"),JUr.forEach(t),t3o=r(Awe," (ALBERT model)"),Awe.forEach(t),a3o=i(L),Kb=n(L,"LI",{});var Lwe=s(Kb);Ote=n(Lwe,"STRONG",{});var YUr=s(Ote);n3o=r(YUr,"bart"),YUr.forEach(t),s3o=r(Lwe," \u2014 "),$I=n(Lwe,"A",{href:!0});var KUr=s($I);l3o=r(KUr,"BartForSequenceClassification"),KUr.forEach(t),i3o=r(Lwe," (BART model)"),Lwe.forEach(t),d3o=i(L),Zb=n(L,"LI",{});var Bwe=s(Zb);Xte=n(Bwe,"STRONG",{});var ZUr=s(Xte);c3o=r(ZUr,"bert"),ZUr.forEach(t),m3o=r(Bwe," \u2014 "),II=n(Bwe,"A",{href:!0});var eJr=s(II);f3o=r(eJr,"BertForSequenceClassification"),eJr.forEach(t),g3o=r(Bwe," (BERT model)"),Bwe.forEach(t),h3o=i(L),e2=n(L,"LI",{});var xwe=s(e2);Vte=n(xwe,"STRONG",{});var oJr=s(Vte);u3o=r(oJr,"big_bird"),oJr.forEach(t),p3o=r(xwe," \u2014 "),NI=n(xwe,"A",{href:!0});var rJr=s(NI);_3o=r(rJr,"BigBirdForSequenceClassification"),rJr.forEach(t),b3o=r(xwe," (BigBird model)"),xwe.forEach(t),v3o=i(L),o2=n(L,"LI",{});var kwe=s(o2);zte=n(kwe,"STRONG",{});var tJr=s(zte);T3o=r(tJr,"bigbird_pegasus"),tJr.forEach(t),F3o=r(kwe," \u2014 "),jI=n(kwe,"A",{href:!0});var aJr=s(jI);C3o=r(aJr,"BigBirdPegasusForSequenceClassification"),aJr.forEach(t),M3o=r(kwe," (BigBirdPegasus model)"),kwe.forEach(t),E3o=i(L),r2=n(L,"LI",{});var Rwe=s(r2);Wte=n(Rwe,"STRONG",{});var nJr=s(Wte);y3o=r(nJr,"camembert"),nJr.forEach(t),w3o=r(Rwe," \u2014 "),DI=n(Rwe,"A",{href:!0});var sJr=s(DI);A3o=r(sJr,"CamembertForSequenceClassification"),sJr.forEach(t),L3o=r(Rwe," (CamemBERT model)"),Rwe.forEach(t),B3o=i(L),t2=n(L,"LI",{});var Swe=s(t2);Qte=n(Swe,"STRONG",{});var lJr=s(Qte);x3o=r(lJr,"canine"),lJr.forEach(t),k3o=r(Swe," \u2014 "),qI=n(Swe,"A",{href:!0});var iJr=s(qI);R3o=r(iJr,"CanineForSequenceClassification"),iJr.forEach(t),S3o=r(Swe," (Canine model)"),Swe.forEach(t),P3o=i(L),a2=n(L,"LI",{});var Pwe=s(a2);Hte=n(Pwe,"STRONG",{});var dJr=s(Hte);$3o=r(dJr,"convbert"),dJr.forEach(t),I3o=r(Pwe," \u2014 "),GI=n(Pwe,"A",{href:!0});var cJr=s(GI);N3o=r(cJr,"ConvBertForSequenceClassification"),cJr.forEach(t),j3o=r(Pwe," (ConvBERT model)"),Pwe.forEach(t),D3o=i(L),n2=n(L,"LI",{});var $we=s(n2);Ute=n($we,"STRONG",{});var mJr=s(Ute);q3o=r(mJr,"ctrl"),mJr.forEach(t),G3o=r($we," \u2014 "),OI=n($we,"A",{href:!0});var fJr=s(OI);O3o=r(fJr,"CTRLForSequenceClassification"),fJr.forEach(t),X3o=r($we," (CTRL model)"),$we.forEach(t),V3o=i(L),s2=n(L,"LI",{});var Iwe=s(s2);Jte=n(Iwe,"STRONG",{});var gJr=s(Jte);z3o=r(gJr,"data2vec-text"),gJr.forEach(t),W3o=r(Iwe," \u2014 "),XI=n(Iwe,"A",{href:!0});var hJr=s(XI);Q3o=r(hJr,"Data2VecTextForSequenceClassification"),hJr.forEach(t),H3o=r(Iwe," (Data2VecText model)"),Iwe.forEach(t),U3o=i(L),l2=n(L,"LI",{});var Nwe=s(l2);Yte=n(Nwe,"STRONG",{});var uJr=s(Yte);J3o=r(uJr,"deberta"),uJr.forEach(t),Y3o=r(Nwe," \u2014 "),VI=n(Nwe,"A",{href:!0});var pJr=s(VI);K3o=r(pJr,"DebertaForSequenceClassification"),pJr.forEach(t),Z3o=r(Nwe," (DeBERTa model)"),Nwe.forEach(t),e5o=i(L),i2=n(L,"LI",{});var jwe=s(i2);Kte=n(jwe,"STRONG",{});var _Jr=s(Kte);o5o=r(_Jr,"deberta-v2"),_Jr.forEach(t),r5o=r(jwe," \u2014 "),zI=n(jwe,"A",{href:!0});var bJr=s(zI);t5o=r(bJr,"DebertaV2ForSequenceClassification"),bJr.forEach(t),a5o=r(jwe," (DeBERTa-v2 model)"),jwe.forEach(t),n5o=i(L),d2=n(L,"LI",{});var Dwe=s(d2);Zte=n(Dwe,"STRONG",{});var vJr=s(Zte);s5o=r(vJr,"distilbert"),vJr.forEach(t),l5o=r(Dwe," \u2014 "),WI=n(Dwe,"A",{href:!0});var TJr=s(WI);i5o=r(TJr,"DistilBertForSequenceClassification"),TJr.forEach(t),d5o=r(Dwe," (DistilBERT model)"),Dwe.forEach(t),c5o=i(L),c2=n(L,"LI",{});var qwe=s(c2);eae=n(qwe,"STRONG",{});var FJr=s(eae);m5o=r(FJr,"electra"),FJr.forEach(t),f5o=r(qwe," \u2014 "),QI=n(qwe,"A",{href:!0});var CJr=s(QI);g5o=r(CJr,"ElectraForSequenceClassification"),CJr.forEach(t),h5o=r(qwe," (ELECTRA model)"),qwe.forEach(t),u5o=i(L),m2=n(L,"LI",{});var Gwe=s(m2);oae=n(Gwe,"STRONG",{});var MJr=s(oae);p5o=r(MJr,"flaubert"),MJr.forEach(t),_5o=r(Gwe," \u2014 "),HI=n(Gwe,"A",{href:!0});var EJr=s(HI);b5o=r(EJr,"FlaubertForSequenceClassification"),EJr.forEach(t),v5o=r(Gwe," (FlauBERT model)"),Gwe.forEach(t),T5o=i(L),f2=n(L,"LI",{});var Owe=s(f2);rae=n(Owe,"STRONG",{});var yJr=s(rae);F5o=r(yJr,"fnet"),yJr.forEach(t),C5o=r(Owe," \u2014 "),UI=n(Owe,"A",{href:!0});var wJr=s(UI);M5o=r(wJr,"FNetForSequenceClassification"),wJr.forEach(t),E5o=r(Owe," (FNet model)"),Owe.forEach(t),y5o=i(L),g2=n(L,"LI",{});var Xwe=s(g2);tae=n(Xwe,"STRONG",{});var AJr=s(tae);w5o=r(AJr,"funnel"),AJr.forEach(t),A5o=r(Xwe," \u2014 "),JI=n(Xwe,"A",{href:!0});var LJr=s(JI);L5o=r(LJr,"FunnelForSequenceClassification"),LJr.forEach(t),B5o=r(Xwe," (Funnel Transformer model)"),Xwe.forEach(t),x5o=i(L),h2=n(L,"LI",{});var Vwe=s(h2);aae=n(Vwe,"STRONG",{});var BJr=s(aae);k5o=r(BJr,"gpt2"),BJr.forEach(t),R5o=r(Vwe," \u2014 "),YI=n(Vwe,"A",{href:!0});var xJr=s(YI);S5o=r(xJr,"GPT2ForSequenceClassification"),xJr.forEach(t),P5o=r(Vwe," (OpenAI GPT-2 model)"),Vwe.forEach(t),$5o=i(L),u2=n(L,"LI",{});var zwe=s(u2);nae=n(zwe,"STRONG",{});var kJr=s(nae);I5o=r(kJr,"gpt_neo"),kJr.forEach(t),N5o=r(zwe," \u2014 "),KI=n(zwe,"A",{href:!0});var RJr=s(KI);j5o=r(RJr,"GPTNeoForSequenceClassification"),RJr.forEach(t),D5o=r(zwe," (GPT Neo model)"),zwe.forEach(t),q5o=i(L),p2=n(L,"LI",{});var Wwe=s(p2);sae=n(Wwe,"STRONG",{});var SJr=s(sae);G5o=r(SJr,"gptj"),SJr.forEach(t),O5o=r(Wwe," \u2014 "),ZI=n(Wwe,"A",{href:!0});var PJr=s(ZI);X5o=r(PJr,"GPTJForSequenceClassification"),PJr.forEach(t),V5o=r(Wwe," (GPT-J model)"),Wwe.forEach(t),z5o=i(L),_2=n(L,"LI",{});var Qwe=s(_2);lae=n(Qwe,"STRONG",{});var $Jr=s(lae);W5o=r($Jr,"ibert"),$Jr.forEach(t),Q5o=r(Qwe," \u2014 "),eN=n(Qwe,"A",{href:!0});var IJr=s(eN);H5o=r(IJr,"IBertForSequenceClassification"),IJr.forEach(t),U5o=r(Qwe," (I-BERT model)"),Qwe.forEach(t),J5o=i(L),b2=n(L,"LI",{});var Hwe=s(b2);iae=n(Hwe,"STRONG",{});var NJr=s(iae);Y5o=r(NJr,"layoutlm"),NJr.forEach(t),K5o=r(Hwe," \u2014 "),oN=n(Hwe,"A",{href:!0});var jJr=s(oN);Z5o=r(jJr,"LayoutLMForSequenceClassification"),jJr.forEach(t),eyo=r(Hwe," (LayoutLM model)"),Hwe.forEach(t),oyo=i(L),v2=n(L,"LI",{});var Uwe=s(v2);dae=n(Uwe,"STRONG",{});var DJr=s(dae);ryo=r(DJr,"layoutlmv2"),DJr.forEach(t),tyo=r(Uwe," \u2014 "),rN=n(Uwe,"A",{href:!0});var qJr=s(rN);ayo=r(qJr,"LayoutLMv2ForSequenceClassification"),qJr.forEach(t),nyo=r(Uwe," (LayoutLMv2 model)"),Uwe.forEach(t),syo=i(L),T2=n(L,"LI",{});var Jwe=s(T2);cae=n(Jwe,"STRONG",{});var GJr=s(cae);lyo=r(GJr,"led"),GJr.forEach(t),iyo=r(Jwe," \u2014 "),tN=n(Jwe,"A",{href:!0});var OJr=s(tN);dyo=r(OJr,"LEDForSequenceClassification"),OJr.forEach(t),cyo=r(Jwe," (LED model)"),Jwe.forEach(t),myo=i(L),F2=n(L,"LI",{});var Ywe=s(F2);mae=n(Ywe,"STRONG",{});var XJr=s(mae);fyo=r(XJr,"longformer"),XJr.forEach(t),gyo=r(Ywe," \u2014 "),aN=n(Ywe,"A",{href:!0});var VJr=s(aN);hyo=r(VJr,"LongformerForSequenceClassification"),VJr.forEach(t),uyo=r(Ywe," (Longformer model)"),Ywe.forEach(t),pyo=i(L),C2=n(L,"LI",{});var Kwe=s(C2);fae=n(Kwe,"STRONG",{});var zJr=s(fae);_yo=r(zJr,"mbart"),zJr.forEach(t),byo=r(Kwe," \u2014 "),nN=n(Kwe,"A",{href:!0});var WJr=s(nN);vyo=r(WJr,"MBartForSequenceClassification"),WJr.forEach(t),Tyo=r(Kwe," (mBART model)"),Kwe.forEach(t),Fyo=i(L),M2=n(L,"LI",{});var Zwe=s(M2);gae=n(Zwe,"STRONG",{});var QJr=s(gae);Cyo=r(QJr,"megatron-bert"),QJr.forEach(t),Myo=r(Zwe," \u2014 "),sN=n(Zwe,"A",{href:!0});var HJr=s(sN);Eyo=r(HJr,"MegatronBertForSequenceClassification"),HJr.forEach(t),yyo=r(Zwe," (MegatronBert model)"),Zwe.forEach(t),wyo=i(L),E2=n(L,"LI",{});var e6e=s(E2);hae=n(e6e,"STRONG",{});var UJr=s(hae);Ayo=r(UJr,"mobilebert"),UJr.forEach(t),Lyo=r(e6e," \u2014 "),lN=n(e6e,"A",{href:!0});var JJr=s(lN);Byo=r(JJr,"MobileBertForSequenceClassification"),JJr.forEach(t),xyo=r(e6e," (MobileBERT model)"),e6e.forEach(t),kyo=i(L),y2=n(L,"LI",{});var o6e=s(y2);uae=n(o6e,"STRONG",{});var YJr=s(uae);Ryo=r(YJr,"mpnet"),YJr.forEach(t),Syo=r(o6e," \u2014 "),iN=n(o6e,"A",{href:!0});var KJr=s(iN);Pyo=r(KJr,"MPNetForSequenceClassification"),KJr.forEach(t),$yo=r(o6e," (MPNet model)"),o6e.forEach(t),Iyo=i(L),w2=n(L,"LI",{});var r6e=s(w2);pae=n(r6e,"STRONG",{});var ZJr=s(pae);Nyo=r(ZJr,"nystromformer"),ZJr.forEach(t),jyo=r(r6e," \u2014 "),dN=n(r6e,"A",{href:!0});var eYr=s(dN);Dyo=r(eYr,"NystromformerForSequenceClassification"),eYr.forEach(t),qyo=r(r6e," (Nystromformer model)"),r6e.forEach(t),Gyo=i(L),A2=n(L,"LI",{});var t6e=s(A2);_ae=n(t6e,"STRONG",{});var oYr=s(_ae);Oyo=r(oYr,"openai-gpt"),oYr.forEach(t),Xyo=r(t6e," \u2014 "),cN=n(t6e,"A",{href:!0});var rYr=s(cN);Vyo=r(rYr,"OpenAIGPTForSequenceClassification"),rYr.forEach(t),zyo=r(t6e," (OpenAI GPT model)"),t6e.forEach(t),Wyo=i(L),L2=n(L,"LI",{});var a6e=s(L2);bae=n(a6e,"STRONG",{});var tYr=s(bae);Qyo=r(tYr,"perceiver"),tYr.forEach(t),Hyo=r(a6e," \u2014 "),mN=n(a6e,"A",{href:!0});var aYr=s(mN);Uyo=r(aYr,"PerceiverForSequenceClassification"),aYr.forEach(t),Jyo=r(a6e," (Perceiver model)"),a6e.forEach(t),Yyo=i(L),B2=n(L,"LI",{});var n6e=s(B2);vae=n(n6e,"STRONG",{});var nYr=s(vae);Kyo=r(nYr,"plbart"),nYr.forEach(t),Zyo=r(n6e," \u2014 "),fN=n(n6e,"A",{href:!0});var sYr=s(fN);ewo=r(sYr,"PLBartForSequenceClassification"),sYr.forEach(t),owo=r(n6e," (PLBart model)"),n6e.forEach(t),rwo=i(L),x2=n(L,"LI",{});var s6e=s(x2);Tae=n(s6e,"STRONG",{});var lYr=s(Tae);two=r(lYr,"qdqbert"),lYr.forEach(t),awo=r(s6e," \u2014 "),gN=n(s6e,"A",{href:!0});var iYr=s(gN);nwo=r(iYr,"QDQBertForSequenceClassification"),iYr.forEach(t),swo=r(s6e," (QDQBert model)"),s6e.forEach(t),lwo=i(L),k2=n(L,"LI",{});var l6e=s(k2);Fae=n(l6e,"STRONG",{});var dYr=s(Fae);iwo=r(dYr,"reformer"),dYr.forEach(t),dwo=r(l6e," \u2014 "),hN=n(l6e,"A",{href:!0});var cYr=s(hN);cwo=r(cYr,"ReformerForSequenceClassification"),cYr.forEach(t),mwo=r(l6e," (Reformer model)"),l6e.forEach(t),fwo=i(L),R2=n(L,"LI",{});var i6e=s(R2);Cae=n(i6e,"STRONG",{});var mYr=s(Cae);gwo=r(mYr,"rembert"),mYr.forEach(t),hwo=r(i6e," \u2014 "),uN=n(i6e,"A",{href:!0});var fYr=s(uN);uwo=r(fYr,"RemBertForSequenceClassification"),fYr.forEach(t),pwo=r(i6e," (RemBERT model)"),i6e.forEach(t),_wo=i(L),S2=n(L,"LI",{});var d6e=s(S2);Mae=n(d6e,"STRONG",{});var gYr=s(Mae);bwo=r(gYr,"roberta"),gYr.forEach(t),vwo=r(d6e," \u2014 "),pN=n(d6e,"A",{href:!0});var hYr=s(pN);Two=r(hYr,"RobertaForSequenceClassification"),hYr.forEach(t),Fwo=r(d6e," (RoBERTa model)"),d6e.forEach(t),Cwo=i(L),P2=n(L,"LI",{});var c6e=s(P2);Eae=n(c6e,"STRONG",{});var uYr=s(Eae);Mwo=r(uYr,"roformer"),uYr.forEach(t),Ewo=r(c6e," \u2014 "),_N=n(c6e,"A",{href:!0});var pYr=s(_N);ywo=r(pYr,"RoFormerForSequenceClassification"),pYr.forEach(t),wwo=r(c6e," (RoFormer model)"),c6e.forEach(t),Awo=i(L),$2=n(L,"LI",{});var m6e=s($2);yae=n(m6e,"STRONG",{});var _Yr=s(yae);Lwo=r(_Yr,"squeezebert"),_Yr.forEach(t),Bwo=r(m6e," \u2014 "),bN=n(m6e,"A",{href:!0});var bYr=s(bN);xwo=r(bYr,"SqueezeBertForSequenceClassification"),bYr.forEach(t),kwo=r(m6e," (SqueezeBERT model)"),m6e.forEach(t),Rwo=i(L),I2=n(L,"LI",{});var f6e=s(I2);wae=n(f6e,"STRONG",{});var vYr=s(wae);Swo=r(vYr,"tapas"),vYr.forEach(t),Pwo=r(f6e," \u2014 "),vN=n(f6e,"A",{href:!0});var TYr=s(vN);$wo=r(TYr,"TapasForSequenceClassification"),TYr.forEach(t),Iwo=r(f6e," (TAPAS model)"),f6e.forEach(t),Nwo=i(L),N2=n(L,"LI",{});var g6e=s(N2);Aae=n(g6e,"STRONG",{});var FYr=s(Aae);jwo=r(FYr,"transfo-xl"),FYr.forEach(t),Dwo=r(g6e," \u2014 "),TN=n(g6e,"A",{href:!0});var CYr=s(TN);qwo=r(CYr,"TransfoXLForSequenceClassification"),CYr.forEach(t),Gwo=r(g6e," (Transformer-XL model)"),g6e.forEach(t),Owo=i(L),j2=n(L,"LI",{});var h6e=s(j2);Lae=n(h6e,"STRONG",{});var MYr=s(Lae);Xwo=r(MYr,"xlm"),MYr.forEach(t),Vwo=r(h6e," \u2014 "),FN=n(h6e,"A",{href:!0});var EYr=s(FN);zwo=r(EYr,"XLMForSequenceClassification"),EYr.forEach(t),Wwo=r(h6e," (XLM model)"),h6e.forEach(t),Qwo=i(L),D2=n(L,"LI",{});var u6e=s(D2);Bae=n(u6e,"STRONG",{});var yYr=s(Bae);Hwo=r(yYr,"xlm-roberta"),yYr.forEach(t),Uwo=r(u6e," \u2014 "),CN=n(u6e,"A",{href:!0});var wYr=s(CN);Jwo=r(wYr,"XLMRobertaForSequenceClassification"),wYr.forEach(t),Ywo=r(u6e," (XLM-RoBERTa model)"),u6e.forEach(t),Kwo=i(L),q2=n(L,"LI",{});var p6e=s(q2);xae=n(p6e,"STRONG",{});var AYr=s(xae);Zwo=r(AYr,"xlm-roberta-xl"),AYr.forEach(t),e6o=r(p6e," \u2014 "),MN=n(p6e,"A",{href:!0});var LYr=s(MN);o6o=r(LYr,"XLMRobertaXLForSequenceClassification"),LYr.forEach(t),r6o=r(p6e," (XLM-RoBERTa-XL model)"),p6e.forEach(t),t6o=i(L),G2=n(L,"LI",{});var _6e=s(G2);kae=n(_6e,"STRONG",{});var BYr=s(kae);a6o=r(BYr,"xlnet"),BYr.forEach(t),n6o=r(_6e," \u2014 "),EN=n(_6e,"A",{href:!0});var xYr=s(EN);s6o=r(xYr,"XLNetForSequenceClassification"),xYr.forEach(t),l6o=r(_6e," (XLNet model)"),_6e.forEach(t),i6o=i(L),O2=n(L,"LI",{});var b6e=s(O2);Rae=n(b6e,"STRONG",{});var kYr=s(Rae);d6o=r(kYr,"yoso"),kYr.forEach(t),c6o=r(b6e," \u2014 "),yN=n(b6e,"A",{href:!0});var RYr=s(yN);m6o=r(RYr,"YosoForSequenceClassification"),RYr.forEach(t),f6o=r(b6e," (YOSO model)"),b6e.forEach(t),L.forEach(t),g6o=i(zt),X2=n(zt,"P",{});var v6e=s(X2);h6o=r(v6e,"The model is set in evaluation mode by default using "),Sae=n(v6e,"CODE",{});var SYr=s(Sae);u6o=r(SYr,"model.eval()"),SYr.forEach(t),p6o=r(v6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pae=n(v6e,"CODE",{});var PYr=s(Pae);_6o=r(PYr,"model.train()"),PYr.forEach(t),v6e.forEach(t),b6o=i(zt),$ae=n(zt,"P",{});var $Yr=s($ae);v6o=r($Yr,"Examples:"),$Yr.forEach(t),T6o=i(zt),f(Ew.$$.fragment,zt),zt.forEach(t),rl.forEach(t),_ke=i(c),hd=n(c,"H2",{class:!0});var wSe=s(hd);V2=n(wSe,"A",{id:!0,class:!0,href:!0});var IYr=s(V2);Iae=n(IYr,"SPAN",{});var NYr=s(Iae);f(yw.$$.fragment,NYr),NYr.forEach(t),IYr.forEach(t),F6o=i(wSe),Nae=n(wSe,"SPAN",{});var jYr=s(Nae);C6o=r(jYr,"AutoModelForMultipleChoice"),jYr.forEach(t),wSe.forEach(t),bke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);f(ww.$$.fragment,al),M6o=i(al),ud=n(al,"P",{});var tW=s(ud);E6o=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jae=n(tW,"CODE",{});var DYr=s(jae);y6o=r(DYr,"from_pretrained()"),DYr.forEach(t),w6o=r(tW,"class method or the "),Dae=n(tW,"CODE",{});var qYr=s(Dae);A6o=r(qYr,"from_config()"),qYr.forEach(t),L6o=r(tW,`class
method.`),tW.forEach(t),B6o=i(al),Aw=n(al,"P",{});var ASe=s(Aw);x6o=r(ASe,"This class cannot be instantiated directly using "),qae=n(ASe,"CODE",{});var GYr=s(qae);k6o=r(GYr,"__init__()"),GYr.forEach(t),R6o=r(ASe," (throws an error)."),ASe.forEach(t),S6o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);f(Lw.$$.fragment,nl),P6o=i(nl),Gae=n(nl,"P",{});var OYr=s(Gae);$6o=r(OYr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OYr.forEach(t),I6o=i(nl),pd=n(nl,"P",{});var aW=s(pd);N6o=r(aW,`Note:
Loading a model from its configuration file does `),Oae=n(aW,"STRONG",{});var XYr=s(Oae);j6o=r(XYr,"not"),XYr.forEach(t),D6o=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=n(aW,"CODE",{});var VYr=s(Xae);q6o=r(VYr,"from_pretrained()"),VYr.forEach(t),G6o=r(aW,"to load the model weights."),aW.forEach(t),O6o=i(nl),Vae=n(nl,"P",{});var zYr=s(Vae);X6o=r(zYr,"Examples:"),zYr.forEach(t),V6o=i(nl),f(Bw.$$.fragment,nl),nl.forEach(t),z6o=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);f(xw.$$.fragment,Wt),W6o=i(Wt),zae=n(Wt,"P",{});var WYr=s(zae);Q6o=r(WYr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WYr.forEach(t),H6o=i(Wt),Ja=n(Wt,"P",{});var g5=s(Ja);U6o=r(g5,"The model class to instantiate is selected based on the "),Wae=n(g5,"CODE",{});var QYr=s(Wae);J6o=r(QYr,"model_type"),QYr.forEach(t),Y6o=r(g5,` property of the config object (either
passed as an argument or loaded from `),Qae=n(g5,"CODE",{});var HYr=s(Qae);K6o=r(HYr,"pretrained_model_name_or_path"),HYr.forEach(t),Z6o=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hae=n(g5,"CODE",{});var UYr=s(Hae);eAo=r(UYr,"pretrained_model_name_or_path"),UYr.forEach(t),oAo=r(g5,":"),g5.forEach(t),rAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);z2=n(O,"LI",{});var T6e=s(z2);Uae=n(T6e,"STRONG",{});var JYr=s(Uae);tAo=r(JYr,"albert"),JYr.forEach(t),aAo=r(T6e," \u2014 "),wN=n(T6e,"A",{href:!0});var YYr=s(wN);nAo=r(YYr,"AlbertForMultipleChoice"),YYr.forEach(t),sAo=r(T6e," (ALBERT model)"),T6e.forEach(t),lAo=i(O),W2=n(O,"LI",{});var F6e=s(W2);Jae=n(F6e,"STRONG",{});var KYr=s(Jae);iAo=r(KYr,"bert"),KYr.forEach(t),dAo=r(F6e," \u2014 "),AN=n(F6e,"A",{href:!0});var ZYr=s(AN);cAo=r(ZYr,"BertForMultipleChoice"),ZYr.forEach(t),mAo=r(F6e," (BERT model)"),F6e.forEach(t),fAo=i(O),Q2=n(O,"LI",{});var C6e=s(Q2);Yae=n(C6e,"STRONG",{});var eKr=s(Yae);gAo=r(eKr,"big_bird"),eKr.forEach(t),hAo=r(C6e," \u2014 "),LN=n(C6e,"A",{href:!0});var oKr=s(LN);uAo=r(oKr,"BigBirdForMultipleChoice"),oKr.forEach(t),pAo=r(C6e," (BigBird model)"),C6e.forEach(t),_Ao=i(O),H2=n(O,"LI",{});var M6e=s(H2);Kae=n(M6e,"STRONG",{});var rKr=s(Kae);bAo=r(rKr,"camembert"),rKr.forEach(t),vAo=r(M6e," \u2014 "),BN=n(M6e,"A",{href:!0});var tKr=s(BN);TAo=r(tKr,"CamembertForMultipleChoice"),tKr.forEach(t),FAo=r(M6e," (CamemBERT model)"),M6e.forEach(t),CAo=i(O),U2=n(O,"LI",{});var E6e=s(U2);Zae=n(E6e,"STRONG",{});var aKr=s(Zae);MAo=r(aKr,"canine"),aKr.forEach(t),EAo=r(E6e," \u2014 "),xN=n(E6e,"A",{href:!0});var nKr=s(xN);yAo=r(nKr,"CanineForMultipleChoice"),nKr.forEach(t),wAo=r(E6e," (Canine model)"),E6e.forEach(t),AAo=i(O),J2=n(O,"LI",{});var y6e=s(J2);ene=n(y6e,"STRONG",{});var sKr=s(ene);LAo=r(sKr,"convbert"),sKr.forEach(t),BAo=r(y6e," \u2014 "),kN=n(y6e,"A",{href:!0});var lKr=s(kN);xAo=r(lKr,"ConvBertForMultipleChoice"),lKr.forEach(t),kAo=r(y6e," (ConvBERT model)"),y6e.forEach(t),RAo=i(O),Y2=n(O,"LI",{});var w6e=s(Y2);one=n(w6e,"STRONG",{});var iKr=s(one);SAo=r(iKr,"data2vec-text"),iKr.forEach(t),PAo=r(w6e," \u2014 "),RN=n(w6e,"A",{href:!0});var dKr=s(RN);$Ao=r(dKr,"Data2VecTextForMultipleChoice"),dKr.forEach(t),IAo=r(w6e," (Data2VecText model)"),w6e.forEach(t),NAo=i(O),K2=n(O,"LI",{});var A6e=s(K2);rne=n(A6e,"STRONG",{});var cKr=s(rne);jAo=r(cKr,"distilbert"),cKr.forEach(t),DAo=r(A6e," \u2014 "),SN=n(A6e,"A",{href:!0});var mKr=s(SN);qAo=r(mKr,"DistilBertForMultipleChoice"),mKr.forEach(t),GAo=r(A6e," (DistilBERT model)"),A6e.forEach(t),OAo=i(O),Z2=n(O,"LI",{});var L6e=s(Z2);tne=n(L6e,"STRONG",{});var fKr=s(tne);XAo=r(fKr,"electra"),fKr.forEach(t),VAo=r(L6e," \u2014 "),PN=n(L6e,"A",{href:!0});var gKr=s(PN);zAo=r(gKr,"ElectraForMultipleChoice"),gKr.forEach(t),WAo=r(L6e," (ELECTRA model)"),L6e.forEach(t),QAo=i(O),ev=n(O,"LI",{});var B6e=s(ev);ane=n(B6e,"STRONG",{});var hKr=s(ane);HAo=r(hKr,"flaubert"),hKr.forEach(t),UAo=r(B6e," \u2014 "),$N=n(B6e,"A",{href:!0});var uKr=s($N);JAo=r(uKr,"FlaubertForMultipleChoice"),uKr.forEach(t),YAo=r(B6e," (FlauBERT model)"),B6e.forEach(t),KAo=i(O),ov=n(O,"LI",{});var x6e=s(ov);nne=n(x6e,"STRONG",{});var pKr=s(nne);ZAo=r(pKr,"fnet"),pKr.forEach(t),e0o=r(x6e," \u2014 "),IN=n(x6e,"A",{href:!0});var _Kr=s(IN);o0o=r(_Kr,"FNetForMultipleChoice"),_Kr.forEach(t),r0o=r(x6e," (FNet model)"),x6e.forEach(t),t0o=i(O),rv=n(O,"LI",{});var k6e=s(rv);sne=n(k6e,"STRONG",{});var bKr=s(sne);a0o=r(bKr,"funnel"),bKr.forEach(t),n0o=r(k6e," \u2014 "),NN=n(k6e,"A",{href:!0});var vKr=s(NN);s0o=r(vKr,"FunnelForMultipleChoice"),vKr.forEach(t),l0o=r(k6e," (Funnel Transformer model)"),k6e.forEach(t),i0o=i(O),tv=n(O,"LI",{});var R6e=s(tv);lne=n(R6e,"STRONG",{});var TKr=s(lne);d0o=r(TKr,"ibert"),TKr.forEach(t),c0o=r(R6e," \u2014 "),jN=n(R6e,"A",{href:!0});var FKr=s(jN);m0o=r(FKr,"IBertForMultipleChoice"),FKr.forEach(t),f0o=r(R6e," (I-BERT model)"),R6e.forEach(t),g0o=i(O),av=n(O,"LI",{});var S6e=s(av);ine=n(S6e,"STRONG",{});var CKr=s(ine);h0o=r(CKr,"longformer"),CKr.forEach(t),u0o=r(S6e," \u2014 "),DN=n(S6e,"A",{href:!0});var MKr=s(DN);p0o=r(MKr,"LongformerForMultipleChoice"),MKr.forEach(t),_0o=r(S6e," (Longformer model)"),S6e.forEach(t),b0o=i(O),nv=n(O,"LI",{});var P6e=s(nv);dne=n(P6e,"STRONG",{});var EKr=s(dne);v0o=r(EKr,"megatron-bert"),EKr.forEach(t),T0o=r(P6e," \u2014 "),qN=n(P6e,"A",{href:!0});var yKr=s(qN);F0o=r(yKr,"MegatronBertForMultipleChoice"),yKr.forEach(t),C0o=r(P6e," (MegatronBert model)"),P6e.forEach(t),M0o=i(O),sv=n(O,"LI",{});var $6e=s(sv);cne=n($6e,"STRONG",{});var wKr=s(cne);E0o=r(wKr,"mobilebert"),wKr.forEach(t),y0o=r($6e," \u2014 "),GN=n($6e,"A",{href:!0});var AKr=s(GN);w0o=r(AKr,"MobileBertForMultipleChoice"),AKr.forEach(t),A0o=r($6e," (MobileBERT model)"),$6e.forEach(t),L0o=i(O),lv=n(O,"LI",{});var I6e=s(lv);mne=n(I6e,"STRONG",{});var LKr=s(mne);B0o=r(LKr,"mpnet"),LKr.forEach(t),x0o=r(I6e," \u2014 "),ON=n(I6e,"A",{href:!0});var BKr=s(ON);k0o=r(BKr,"MPNetForMultipleChoice"),BKr.forEach(t),R0o=r(I6e," (MPNet model)"),I6e.forEach(t),S0o=i(O),iv=n(O,"LI",{});var N6e=s(iv);fne=n(N6e,"STRONG",{});var xKr=s(fne);P0o=r(xKr,"nystromformer"),xKr.forEach(t),$0o=r(N6e," \u2014 "),XN=n(N6e,"A",{href:!0});var kKr=s(XN);I0o=r(kKr,"NystromformerForMultipleChoice"),kKr.forEach(t),N0o=r(N6e," (Nystromformer model)"),N6e.forEach(t),j0o=i(O),dv=n(O,"LI",{});var j6e=s(dv);gne=n(j6e,"STRONG",{});var RKr=s(gne);D0o=r(RKr,"qdqbert"),RKr.forEach(t),q0o=r(j6e," \u2014 "),VN=n(j6e,"A",{href:!0});var SKr=s(VN);G0o=r(SKr,"QDQBertForMultipleChoice"),SKr.forEach(t),O0o=r(j6e," (QDQBert model)"),j6e.forEach(t),X0o=i(O),cv=n(O,"LI",{});var D6e=s(cv);hne=n(D6e,"STRONG",{});var PKr=s(hne);V0o=r(PKr,"rembert"),PKr.forEach(t),z0o=r(D6e," \u2014 "),zN=n(D6e,"A",{href:!0});var $Kr=s(zN);W0o=r($Kr,"RemBertForMultipleChoice"),$Kr.forEach(t),Q0o=r(D6e," (RemBERT model)"),D6e.forEach(t),H0o=i(O),mv=n(O,"LI",{});var q6e=s(mv);une=n(q6e,"STRONG",{});var IKr=s(une);U0o=r(IKr,"roberta"),IKr.forEach(t),J0o=r(q6e," \u2014 "),WN=n(q6e,"A",{href:!0});var NKr=s(WN);Y0o=r(NKr,"RobertaForMultipleChoice"),NKr.forEach(t),K0o=r(q6e," (RoBERTa model)"),q6e.forEach(t),Z0o=i(O),fv=n(O,"LI",{});var G6e=s(fv);pne=n(G6e,"STRONG",{});var jKr=s(pne);eLo=r(jKr,"roformer"),jKr.forEach(t),oLo=r(G6e," \u2014 "),QN=n(G6e,"A",{href:!0});var DKr=s(QN);rLo=r(DKr,"RoFormerForMultipleChoice"),DKr.forEach(t),tLo=r(G6e," (RoFormer model)"),G6e.forEach(t),aLo=i(O),gv=n(O,"LI",{});var O6e=s(gv);_ne=n(O6e,"STRONG",{});var qKr=s(_ne);nLo=r(qKr,"squeezebert"),qKr.forEach(t),sLo=r(O6e," \u2014 "),HN=n(O6e,"A",{href:!0});var GKr=s(HN);lLo=r(GKr,"SqueezeBertForMultipleChoice"),GKr.forEach(t),iLo=r(O6e," (SqueezeBERT model)"),O6e.forEach(t),dLo=i(O),hv=n(O,"LI",{});var X6e=s(hv);bne=n(X6e,"STRONG",{});var OKr=s(bne);cLo=r(OKr,"xlm"),OKr.forEach(t),mLo=r(X6e," \u2014 "),UN=n(X6e,"A",{href:!0});var XKr=s(UN);fLo=r(XKr,"XLMForMultipleChoice"),XKr.forEach(t),gLo=r(X6e," (XLM model)"),X6e.forEach(t),hLo=i(O),uv=n(O,"LI",{});var V6e=s(uv);vne=n(V6e,"STRONG",{});var VKr=s(vne);uLo=r(VKr,"xlm-roberta"),VKr.forEach(t),pLo=r(V6e," \u2014 "),JN=n(V6e,"A",{href:!0});var zKr=s(JN);_Lo=r(zKr,"XLMRobertaForMultipleChoice"),zKr.forEach(t),bLo=r(V6e," (XLM-RoBERTa model)"),V6e.forEach(t),vLo=i(O),pv=n(O,"LI",{});var z6e=s(pv);Tne=n(z6e,"STRONG",{});var WKr=s(Tne);TLo=r(WKr,"xlm-roberta-xl"),WKr.forEach(t),FLo=r(z6e," \u2014 "),YN=n(z6e,"A",{href:!0});var QKr=s(YN);CLo=r(QKr,"XLMRobertaXLForMultipleChoice"),QKr.forEach(t),MLo=r(z6e," (XLM-RoBERTa-XL model)"),z6e.forEach(t),ELo=i(O),_v=n(O,"LI",{});var W6e=s(_v);Fne=n(W6e,"STRONG",{});var HKr=s(Fne);yLo=r(HKr,"xlnet"),HKr.forEach(t),wLo=r(W6e," \u2014 "),KN=n(W6e,"A",{href:!0});var UKr=s(KN);ALo=r(UKr,"XLNetForMultipleChoice"),UKr.forEach(t),LLo=r(W6e," (XLNet model)"),W6e.forEach(t),BLo=i(O),bv=n(O,"LI",{});var Q6e=s(bv);Cne=n(Q6e,"STRONG",{});var JKr=s(Cne);xLo=r(JKr,"yoso"),JKr.forEach(t),kLo=r(Q6e," \u2014 "),ZN=n(Q6e,"A",{href:!0});var YKr=s(ZN);RLo=r(YKr,"YosoForMultipleChoice"),YKr.forEach(t),SLo=r(Q6e," (YOSO model)"),Q6e.forEach(t),O.forEach(t),PLo=i(Wt),vv=n(Wt,"P",{});var H6e=s(vv);$Lo=r(H6e,"The model is set in evaluation mode by default using "),Mne=n(H6e,"CODE",{});var KKr=s(Mne);ILo=r(KKr,"model.eval()"),KKr.forEach(t),NLo=r(H6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=n(H6e,"CODE",{});var ZKr=s(Ene);jLo=r(ZKr,"model.train()"),ZKr.forEach(t),H6e.forEach(t),DLo=i(Wt),yne=n(Wt,"P",{});var eZr=s(yne);qLo=r(eZr,"Examples:"),eZr.forEach(t),GLo=i(Wt),f(kw.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),vke=i(c),_d=n(c,"H2",{class:!0});var LSe=s(_d);Tv=n(LSe,"A",{id:!0,class:!0,href:!0});var oZr=s(Tv);wne=n(oZr,"SPAN",{});var rZr=s(wne);f(Rw.$$.fragment,rZr),rZr.forEach(t),oZr.forEach(t),OLo=i(LSe),Ane=n(LSe,"SPAN",{});var tZr=s(Ane);XLo=r(tZr,"AutoModelForNextSentencePrediction"),tZr.forEach(t),LSe.forEach(t),Tke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);f(Sw.$$.fragment,sl),VLo=i(sl),bd=n(sl,"P",{});var nW=s(bd);zLo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Lne=n(nW,"CODE",{});var aZr=s(Lne);WLo=r(aZr,"from_pretrained()"),aZr.forEach(t),QLo=r(nW,"class method or the "),Bne=n(nW,"CODE",{});var nZr=s(Bne);HLo=r(nZr,"from_config()"),nZr.forEach(t),ULo=r(nW,`class
method.`),nW.forEach(t),JLo=i(sl),Pw=n(sl,"P",{});var BSe=s(Pw);YLo=r(BSe,"This class cannot be instantiated directly using "),xne=n(BSe,"CODE",{});var sZr=s(xne);KLo=r(sZr,"__init__()"),sZr.forEach(t),ZLo=r(BSe," (throws an error)."),BSe.forEach(t),e7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);f($w.$$.fragment,ll),o7o=i(ll),kne=n(ll,"P",{});var lZr=s(kne);r7o=r(lZr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lZr.forEach(t),t7o=i(ll),vd=n(ll,"P",{});var sW=s(vd);a7o=r(sW,`Note:
Loading a model from its configuration file does `),Rne=n(sW,"STRONG",{});var iZr=s(Rne);n7o=r(iZr,"not"),iZr.forEach(t),s7o=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=n(sW,"CODE",{});var dZr=s(Sne);l7o=r(dZr,"from_pretrained()"),dZr.forEach(t),i7o=r(sW,"to load the model weights."),sW.forEach(t),d7o=i(ll),Pne=n(ll,"P",{});var cZr=s(Pne);c7o=r(cZr,"Examples:"),cZr.forEach(t),m7o=i(ll),f(Iw.$$.fragment,ll),ll.forEach(t),f7o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);f(Nw.$$.fragment,Qt),g7o=i(Qt),$ne=n(Qt,"P",{});var mZr=s($ne);h7o=r(mZr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mZr.forEach(t),u7o=i(Qt),Ya=n(Qt,"P",{});var h5=s(Ya);p7o=r(h5,"The model class to instantiate is selected based on the "),Ine=n(h5,"CODE",{});var fZr=s(Ine);_7o=r(fZr,"model_type"),fZr.forEach(t),b7o=r(h5,` property of the config object (either
passed as an argument or loaded from `),Nne=n(h5,"CODE",{});var gZr=s(Nne);v7o=r(gZr,"pretrained_model_name_or_path"),gZr.forEach(t),T7o=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=n(h5,"CODE",{});var hZr=s(jne);F7o=r(hZr,"pretrained_model_name_or_path"),hZr.forEach(t),C7o=r(h5,":"),h5.forEach(t),M7o=i(Qt),da=n(Qt,"UL",{});var il=s(da);Fv=n(il,"LI",{});var U6e=s(Fv);Dne=n(U6e,"STRONG",{});var uZr=s(Dne);E7o=r(uZr,"bert"),uZr.forEach(t),y7o=r(U6e," \u2014 "),ej=n(U6e,"A",{href:!0});var pZr=s(ej);w7o=r(pZr,"BertForNextSentencePrediction"),pZr.forEach(t),A7o=r(U6e," (BERT model)"),U6e.forEach(t),L7o=i(il),Cv=n(il,"LI",{});var J6e=s(Cv);qne=n(J6e,"STRONG",{});var _Zr=s(qne);B7o=r(_Zr,"fnet"),_Zr.forEach(t),x7o=r(J6e," \u2014 "),oj=n(J6e,"A",{href:!0});var bZr=s(oj);k7o=r(bZr,"FNetForNextSentencePrediction"),bZr.forEach(t),R7o=r(J6e," (FNet model)"),J6e.forEach(t),S7o=i(il),Mv=n(il,"LI",{});var Y6e=s(Mv);Gne=n(Y6e,"STRONG",{});var vZr=s(Gne);P7o=r(vZr,"megatron-bert"),vZr.forEach(t),$7o=r(Y6e," \u2014 "),rj=n(Y6e,"A",{href:!0});var TZr=s(rj);I7o=r(TZr,"MegatronBertForNextSentencePrediction"),TZr.forEach(t),N7o=r(Y6e," (MegatronBert model)"),Y6e.forEach(t),j7o=i(il),Ev=n(il,"LI",{});var K6e=s(Ev);One=n(K6e,"STRONG",{});var FZr=s(One);D7o=r(FZr,"mobilebert"),FZr.forEach(t),q7o=r(K6e," \u2014 "),tj=n(K6e,"A",{href:!0});var CZr=s(tj);G7o=r(CZr,"MobileBertForNextSentencePrediction"),CZr.forEach(t),O7o=r(K6e," (MobileBERT model)"),K6e.forEach(t),X7o=i(il),yv=n(il,"LI",{});var Z6e=s(yv);Xne=n(Z6e,"STRONG",{});var MZr=s(Xne);V7o=r(MZr,"qdqbert"),MZr.forEach(t),z7o=r(Z6e," \u2014 "),aj=n(Z6e,"A",{href:!0});var EZr=s(aj);W7o=r(EZr,"QDQBertForNextSentencePrediction"),EZr.forEach(t),Q7o=r(Z6e," (QDQBert model)"),Z6e.forEach(t),il.forEach(t),H7o=i(Qt),wv=n(Qt,"P",{});var eAe=s(wv);U7o=r(eAe,"The model is set in evaluation mode by default using "),Vne=n(eAe,"CODE",{});var yZr=s(Vne);J7o=r(yZr,"model.eval()"),yZr.forEach(t),Y7o=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=n(eAe,"CODE",{});var wZr=s(zne);K7o=r(wZr,"model.train()"),wZr.forEach(t),eAe.forEach(t),Z7o=i(Qt),Wne=n(Qt,"P",{});var AZr=s(Wne);e8o=r(AZr,"Examples:"),AZr.forEach(t),o8o=i(Qt),f(jw.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Fke=i(c),Td=n(c,"H2",{class:!0});var xSe=s(Td);Av=n(xSe,"A",{id:!0,class:!0,href:!0});var LZr=s(Av);Qne=n(LZr,"SPAN",{});var BZr=s(Qne);f(Dw.$$.fragment,BZr),BZr.forEach(t),LZr.forEach(t),r8o=i(xSe),Hne=n(xSe,"SPAN",{});var xZr=s(Hne);t8o=r(xZr,"AutoModelForTokenClassification"),xZr.forEach(t),xSe.forEach(t),Cke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);f(qw.$$.fragment,dl),a8o=i(dl),Fd=n(dl,"P",{});var lW=s(Fd);n8o=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Une=n(lW,"CODE",{});var kZr=s(Une);s8o=r(kZr,"from_pretrained()"),kZr.forEach(t),l8o=r(lW,"class method or the "),Jne=n(lW,"CODE",{});var RZr=s(Jne);i8o=r(RZr,"from_config()"),RZr.forEach(t),d8o=r(lW,`class
method.`),lW.forEach(t),c8o=i(dl),Gw=n(dl,"P",{});var kSe=s(Gw);m8o=r(kSe,"This class cannot be instantiated directly using "),Yne=n(kSe,"CODE",{});var SZr=s(Yne);f8o=r(SZr,"__init__()"),SZr.forEach(t),g8o=r(kSe," (throws an error)."),kSe.forEach(t),h8o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);f(Ow.$$.fragment,cl),u8o=i(cl),Kne=n(cl,"P",{});var PZr=s(Kne);p8o=r(PZr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PZr.forEach(t),_8o=i(cl),Cd=n(cl,"P",{});var iW=s(Cd);b8o=r(iW,`Note:
Loading a model from its configuration file does `),Zne=n(iW,"STRONG",{});var $Zr=s(Zne);v8o=r($Zr,"not"),$Zr.forEach(t),T8o=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ese=n(iW,"CODE",{});var IZr=s(ese);F8o=r(IZr,"from_pretrained()"),IZr.forEach(t),C8o=r(iW,"to load the model weights."),iW.forEach(t),M8o=i(cl),ose=n(cl,"P",{});var NZr=s(ose);E8o=r(NZr,"Examples:"),NZr.forEach(t),y8o=i(cl),f(Xw.$$.fragment,cl),cl.forEach(t),w8o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);f(Vw.$$.fragment,Ht),A8o=i(Ht),rse=n(Ht,"P",{});var jZr=s(rse);L8o=r(jZr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jZr.forEach(t),B8o=i(Ht),Ka=n(Ht,"P",{});var u5=s(Ka);x8o=r(u5,"The model class to instantiate is selected based on the "),tse=n(u5,"CODE",{});var DZr=s(tse);k8o=r(DZr,"model_type"),DZr.forEach(t),R8o=r(u5,` property of the config object (either
passed as an argument or loaded from `),ase=n(u5,"CODE",{});var qZr=s(ase);S8o=r(qZr,"pretrained_model_name_or_path"),qZr.forEach(t),P8o=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=n(u5,"CODE",{});var GZr=s(nse);$8o=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),I8o=r(u5,":"),u5.forEach(t),N8o=i(Ht),D=n(Ht,"UL",{});var q=s(D);Lv=n(q,"LI",{});var oAe=s(Lv);sse=n(oAe,"STRONG",{});var OZr=s(sse);j8o=r(OZr,"albert"),OZr.forEach(t),D8o=r(oAe," \u2014 "),nj=n(oAe,"A",{href:!0});var XZr=s(nj);q8o=r(XZr,"AlbertForTokenClassification"),XZr.forEach(t),G8o=r(oAe," (ALBERT model)"),oAe.forEach(t),O8o=i(q),Bv=n(q,"LI",{});var rAe=s(Bv);lse=n(rAe,"STRONG",{});var VZr=s(lse);X8o=r(VZr,"bert"),VZr.forEach(t),V8o=r(rAe," \u2014 "),sj=n(rAe,"A",{href:!0});var zZr=s(sj);z8o=r(zZr,"BertForTokenClassification"),zZr.forEach(t),W8o=r(rAe," (BERT model)"),rAe.forEach(t),Q8o=i(q),xv=n(q,"LI",{});var tAe=s(xv);ise=n(tAe,"STRONG",{});var WZr=s(ise);H8o=r(WZr,"big_bird"),WZr.forEach(t),U8o=r(tAe," \u2014 "),lj=n(tAe,"A",{href:!0});var QZr=s(lj);J8o=r(QZr,"BigBirdForTokenClassification"),QZr.forEach(t),Y8o=r(tAe," (BigBird model)"),tAe.forEach(t),K8o=i(q),kv=n(q,"LI",{});var aAe=s(kv);dse=n(aAe,"STRONG",{});var HZr=s(dse);Z8o=r(HZr,"camembert"),HZr.forEach(t),e9o=r(aAe," \u2014 "),ij=n(aAe,"A",{href:!0});var UZr=s(ij);o9o=r(UZr,"CamembertForTokenClassification"),UZr.forEach(t),r9o=r(aAe," (CamemBERT model)"),aAe.forEach(t),t9o=i(q),Rv=n(q,"LI",{});var nAe=s(Rv);cse=n(nAe,"STRONG",{});var JZr=s(cse);a9o=r(JZr,"canine"),JZr.forEach(t),n9o=r(nAe," \u2014 "),dj=n(nAe,"A",{href:!0});var YZr=s(dj);s9o=r(YZr,"CanineForTokenClassification"),YZr.forEach(t),l9o=r(nAe," (Canine model)"),nAe.forEach(t),i9o=i(q),Sv=n(q,"LI",{});var sAe=s(Sv);mse=n(sAe,"STRONG",{});var KZr=s(mse);d9o=r(KZr,"convbert"),KZr.forEach(t),c9o=r(sAe," \u2014 "),cj=n(sAe,"A",{href:!0});var ZZr=s(cj);m9o=r(ZZr,"ConvBertForTokenClassification"),ZZr.forEach(t),f9o=r(sAe," (ConvBERT model)"),sAe.forEach(t),g9o=i(q),Pv=n(q,"LI",{});var lAe=s(Pv);fse=n(lAe,"STRONG",{});var eet=s(fse);h9o=r(eet,"data2vec-text"),eet.forEach(t),u9o=r(lAe," \u2014 "),mj=n(lAe,"A",{href:!0});var oet=s(mj);p9o=r(oet,"Data2VecTextForTokenClassification"),oet.forEach(t),_9o=r(lAe," (Data2VecText model)"),lAe.forEach(t),b9o=i(q),$v=n(q,"LI",{});var iAe=s($v);gse=n(iAe,"STRONG",{});var ret=s(gse);v9o=r(ret,"deberta"),ret.forEach(t),T9o=r(iAe," \u2014 "),fj=n(iAe,"A",{href:!0});var tet=s(fj);F9o=r(tet,"DebertaForTokenClassification"),tet.forEach(t),C9o=r(iAe," (DeBERTa model)"),iAe.forEach(t),M9o=i(q),Iv=n(q,"LI",{});var dAe=s(Iv);hse=n(dAe,"STRONG",{});var aet=s(hse);E9o=r(aet,"deberta-v2"),aet.forEach(t),y9o=r(dAe," \u2014 "),gj=n(dAe,"A",{href:!0});var net=s(gj);w9o=r(net,"DebertaV2ForTokenClassification"),net.forEach(t),A9o=r(dAe," (DeBERTa-v2 model)"),dAe.forEach(t),L9o=i(q),Nv=n(q,"LI",{});var cAe=s(Nv);use=n(cAe,"STRONG",{});var set=s(use);B9o=r(set,"distilbert"),set.forEach(t),x9o=r(cAe," \u2014 "),hj=n(cAe,"A",{href:!0});var iet=s(hj);k9o=r(iet,"DistilBertForTokenClassification"),iet.forEach(t),R9o=r(cAe," (DistilBERT model)"),cAe.forEach(t),S9o=i(q),jv=n(q,"LI",{});var mAe=s(jv);pse=n(mAe,"STRONG",{});var det=s(pse);P9o=r(det,"electra"),det.forEach(t),$9o=r(mAe," \u2014 "),uj=n(mAe,"A",{href:!0});var cet=s(uj);I9o=r(cet,"ElectraForTokenClassification"),cet.forEach(t),N9o=r(mAe," (ELECTRA model)"),mAe.forEach(t),j9o=i(q),Dv=n(q,"LI",{});var fAe=s(Dv);_se=n(fAe,"STRONG",{});var met=s(_se);D9o=r(met,"flaubert"),met.forEach(t),q9o=r(fAe," \u2014 "),pj=n(fAe,"A",{href:!0});var fet=s(pj);G9o=r(fet,"FlaubertForTokenClassification"),fet.forEach(t),O9o=r(fAe," (FlauBERT model)"),fAe.forEach(t),X9o=i(q),qv=n(q,"LI",{});var gAe=s(qv);bse=n(gAe,"STRONG",{});var get=s(bse);V9o=r(get,"fnet"),get.forEach(t),z9o=r(gAe," \u2014 "),_j=n(gAe,"A",{href:!0});var het=s(_j);W9o=r(het,"FNetForTokenClassification"),het.forEach(t),Q9o=r(gAe," (FNet model)"),gAe.forEach(t),H9o=i(q),Gv=n(q,"LI",{});var hAe=s(Gv);vse=n(hAe,"STRONG",{});var uet=s(vse);U9o=r(uet,"funnel"),uet.forEach(t),J9o=r(hAe," \u2014 "),bj=n(hAe,"A",{href:!0});var pet=s(bj);Y9o=r(pet,"FunnelForTokenClassification"),pet.forEach(t),K9o=r(hAe," (Funnel Transformer model)"),hAe.forEach(t),Z9o=i(q),Ov=n(q,"LI",{});var uAe=s(Ov);Tse=n(uAe,"STRONG",{});var _et=s(Tse);eBo=r(_et,"gpt2"),_et.forEach(t),oBo=r(uAe," \u2014 "),vj=n(uAe,"A",{href:!0});var bet=s(vj);rBo=r(bet,"GPT2ForTokenClassification"),bet.forEach(t),tBo=r(uAe," (OpenAI GPT-2 model)"),uAe.forEach(t),aBo=i(q),Xv=n(q,"LI",{});var pAe=s(Xv);Fse=n(pAe,"STRONG",{});var vet=s(Fse);nBo=r(vet,"ibert"),vet.forEach(t),sBo=r(pAe," \u2014 "),Tj=n(pAe,"A",{href:!0});var Tet=s(Tj);lBo=r(Tet,"IBertForTokenClassification"),Tet.forEach(t),iBo=r(pAe," (I-BERT model)"),pAe.forEach(t),dBo=i(q),Vv=n(q,"LI",{});var _Ae=s(Vv);Cse=n(_Ae,"STRONG",{});var Fet=s(Cse);cBo=r(Fet,"layoutlm"),Fet.forEach(t),mBo=r(_Ae," \u2014 "),Fj=n(_Ae,"A",{href:!0});var Cet=s(Fj);fBo=r(Cet,"LayoutLMForTokenClassification"),Cet.forEach(t),gBo=r(_Ae," (LayoutLM model)"),_Ae.forEach(t),hBo=i(q),zv=n(q,"LI",{});var bAe=s(zv);Mse=n(bAe,"STRONG",{});var Met=s(Mse);uBo=r(Met,"layoutlmv2"),Met.forEach(t),pBo=r(bAe," \u2014 "),Cj=n(bAe,"A",{href:!0});var Eet=s(Cj);_Bo=r(Eet,"LayoutLMv2ForTokenClassification"),Eet.forEach(t),bBo=r(bAe," (LayoutLMv2 model)"),bAe.forEach(t),vBo=i(q),Wv=n(q,"LI",{});var vAe=s(Wv);Ese=n(vAe,"STRONG",{});var yet=s(Ese);TBo=r(yet,"longformer"),yet.forEach(t),FBo=r(vAe," \u2014 "),Mj=n(vAe,"A",{href:!0});var wet=s(Mj);CBo=r(wet,"LongformerForTokenClassification"),wet.forEach(t),MBo=r(vAe," (Longformer model)"),vAe.forEach(t),EBo=i(q),Qv=n(q,"LI",{});var TAe=s(Qv);yse=n(TAe,"STRONG",{});var Aet=s(yse);yBo=r(Aet,"megatron-bert"),Aet.forEach(t),wBo=r(TAe," \u2014 "),Ej=n(TAe,"A",{href:!0});var Let=s(Ej);ABo=r(Let,"MegatronBertForTokenClassification"),Let.forEach(t),LBo=r(TAe," (MegatronBert model)"),TAe.forEach(t),BBo=i(q),Hv=n(q,"LI",{});var FAe=s(Hv);wse=n(FAe,"STRONG",{});var Bet=s(wse);xBo=r(Bet,"mobilebert"),Bet.forEach(t),kBo=r(FAe," \u2014 "),yj=n(FAe,"A",{href:!0});var xet=s(yj);RBo=r(xet,"MobileBertForTokenClassification"),xet.forEach(t),SBo=r(FAe," (MobileBERT model)"),FAe.forEach(t),PBo=i(q),Uv=n(q,"LI",{});var CAe=s(Uv);Ase=n(CAe,"STRONG",{});var ket=s(Ase);$Bo=r(ket,"mpnet"),ket.forEach(t),IBo=r(CAe," \u2014 "),wj=n(CAe,"A",{href:!0});var Ret=s(wj);NBo=r(Ret,"MPNetForTokenClassification"),Ret.forEach(t),jBo=r(CAe," (MPNet model)"),CAe.forEach(t),DBo=i(q),Jv=n(q,"LI",{});var MAe=s(Jv);Lse=n(MAe,"STRONG",{});var Set=s(Lse);qBo=r(Set,"nystromformer"),Set.forEach(t),GBo=r(MAe," \u2014 "),Aj=n(MAe,"A",{href:!0});var Pet=s(Aj);OBo=r(Pet,"NystromformerForTokenClassification"),Pet.forEach(t),XBo=r(MAe," (Nystromformer model)"),MAe.forEach(t),VBo=i(q),Yv=n(q,"LI",{});var EAe=s(Yv);Bse=n(EAe,"STRONG",{});var $et=s(Bse);zBo=r($et,"qdqbert"),$et.forEach(t),WBo=r(EAe," \u2014 "),Lj=n(EAe,"A",{href:!0});var Iet=s(Lj);QBo=r(Iet,"QDQBertForTokenClassification"),Iet.forEach(t),HBo=r(EAe," (QDQBert model)"),EAe.forEach(t),UBo=i(q),Kv=n(q,"LI",{});var yAe=s(Kv);xse=n(yAe,"STRONG",{});var Net=s(xse);JBo=r(Net,"rembert"),Net.forEach(t),YBo=r(yAe," \u2014 "),Bj=n(yAe,"A",{href:!0});var jet=s(Bj);KBo=r(jet,"RemBertForTokenClassification"),jet.forEach(t),ZBo=r(yAe," (RemBERT model)"),yAe.forEach(t),exo=i(q),Zv=n(q,"LI",{});var wAe=s(Zv);kse=n(wAe,"STRONG",{});var Det=s(kse);oxo=r(Det,"roberta"),Det.forEach(t),rxo=r(wAe," \u2014 "),xj=n(wAe,"A",{href:!0});var qet=s(xj);txo=r(qet,"RobertaForTokenClassification"),qet.forEach(t),axo=r(wAe," (RoBERTa model)"),wAe.forEach(t),nxo=i(q),eT=n(q,"LI",{});var AAe=s(eT);Rse=n(AAe,"STRONG",{});var Get=s(Rse);sxo=r(Get,"roformer"),Get.forEach(t),lxo=r(AAe," \u2014 "),kj=n(AAe,"A",{href:!0});var Oet=s(kj);ixo=r(Oet,"RoFormerForTokenClassification"),Oet.forEach(t),dxo=r(AAe," (RoFormer model)"),AAe.forEach(t),cxo=i(q),oT=n(q,"LI",{});var LAe=s(oT);Sse=n(LAe,"STRONG",{});var Xet=s(Sse);mxo=r(Xet,"squeezebert"),Xet.forEach(t),fxo=r(LAe," \u2014 "),Rj=n(LAe,"A",{href:!0});var Vet=s(Rj);gxo=r(Vet,"SqueezeBertForTokenClassification"),Vet.forEach(t),hxo=r(LAe," (SqueezeBERT model)"),LAe.forEach(t),uxo=i(q),rT=n(q,"LI",{});var BAe=s(rT);Pse=n(BAe,"STRONG",{});var zet=s(Pse);pxo=r(zet,"xlm"),zet.forEach(t),_xo=r(BAe," \u2014 "),Sj=n(BAe,"A",{href:!0});var Wet=s(Sj);bxo=r(Wet,"XLMForTokenClassification"),Wet.forEach(t),vxo=r(BAe," (XLM model)"),BAe.forEach(t),Txo=i(q),tT=n(q,"LI",{});var xAe=s(tT);$se=n(xAe,"STRONG",{});var Qet=s($se);Fxo=r(Qet,"xlm-roberta"),Qet.forEach(t),Cxo=r(xAe," \u2014 "),Pj=n(xAe,"A",{href:!0});var Het=s(Pj);Mxo=r(Het,"XLMRobertaForTokenClassification"),Het.forEach(t),Exo=r(xAe," (XLM-RoBERTa model)"),xAe.forEach(t),yxo=i(q),aT=n(q,"LI",{});var kAe=s(aT);Ise=n(kAe,"STRONG",{});var Uet=s(Ise);wxo=r(Uet,"xlm-roberta-xl"),Uet.forEach(t),Axo=r(kAe," \u2014 "),$j=n(kAe,"A",{href:!0});var Jet=s($j);Lxo=r(Jet,"XLMRobertaXLForTokenClassification"),Jet.forEach(t),Bxo=r(kAe," (XLM-RoBERTa-XL model)"),kAe.forEach(t),xxo=i(q),nT=n(q,"LI",{});var RAe=s(nT);Nse=n(RAe,"STRONG",{});var Yet=s(Nse);kxo=r(Yet,"xlnet"),Yet.forEach(t),Rxo=r(RAe," \u2014 "),Ij=n(RAe,"A",{href:!0});var Ket=s(Ij);Sxo=r(Ket,"XLNetForTokenClassification"),Ket.forEach(t),Pxo=r(RAe," (XLNet model)"),RAe.forEach(t),$xo=i(q),sT=n(q,"LI",{});var SAe=s(sT);jse=n(SAe,"STRONG",{});var Zet=s(jse);Ixo=r(Zet,"yoso"),Zet.forEach(t),Nxo=r(SAe," \u2014 "),Nj=n(SAe,"A",{href:!0});var eot=s(Nj);jxo=r(eot,"YosoForTokenClassification"),eot.forEach(t),Dxo=r(SAe," (YOSO model)"),SAe.forEach(t),q.forEach(t),qxo=i(Ht),lT=n(Ht,"P",{});var PAe=s(lT);Gxo=r(PAe,"The model is set in evaluation mode by default using "),Dse=n(PAe,"CODE",{});var oot=s(Dse);Oxo=r(oot,"model.eval()"),oot.forEach(t),Xxo=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=n(PAe,"CODE",{});var rot=s(qse);Vxo=r(rot,"model.train()"),rot.forEach(t),PAe.forEach(t),zxo=i(Ht),Gse=n(Ht,"P",{});var tot=s(Gse);Wxo=r(tot,"Examples:"),tot.forEach(t),Qxo=i(Ht),f(zw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Mke=i(c),Md=n(c,"H2",{class:!0});var RSe=s(Md);iT=n(RSe,"A",{id:!0,class:!0,href:!0});var aot=s(iT);Ose=n(aot,"SPAN",{});var not=s(Ose);f(Ww.$$.fragment,not),not.forEach(t),aot.forEach(t),Hxo=i(RSe),Xse=n(RSe,"SPAN",{});var sot=s(Xse);Uxo=r(sot,"AutoModelForQuestionAnswering"),sot.forEach(t),RSe.forEach(t),Eke=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);f(Qw.$$.fragment,ml),Jxo=i(ml),Ed=n(ml,"P",{});var dW=s(Ed);Yxo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vse=n(dW,"CODE",{});var lot=s(Vse);Kxo=r(lot,"from_pretrained()"),lot.forEach(t),Zxo=r(dW,"class method or the "),zse=n(dW,"CODE",{});var iot=s(zse);eko=r(iot,"from_config()"),iot.forEach(t),oko=r(dW,`class
method.`),dW.forEach(t),rko=i(ml),Hw=n(ml,"P",{});var SSe=s(Hw);tko=r(SSe,"This class cannot be instantiated directly using "),Wse=n(SSe,"CODE",{});var dot=s(Wse);ako=r(dot,"__init__()"),dot.forEach(t),nko=r(SSe," (throws an error)."),SSe.forEach(t),sko=i(ml),Zr=n(ml,"DIV",{class:!0});var fl=s(Zr);f(Uw.$$.fragment,fl),lko=i(fl),Qse=n(fl,"P",{});var cot=s(Qse);iko=r(cot,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cot.forEach(t),dko=i(fl),yd=n(fl,"P",{});var cW=s(yd);cko=r(cW,`Note:
Loading a model from its configuration file does `),Hse=n(cW,"STRONG",{});var mot=s(Hse);mko=r(mot,"not"),mot.forEach(t),fko=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=n(cW,"CODE",{});var fot=s(Use);gko=r(fot,"from_pretrained()"),fot.forEach(t),hko=r(cW,"to load the model weights."),cW.forEach(t),uko=i(fl),Jse=n(fl,"P",{});var got=s(Jse);pko=r(got,"Examples:"),got.forEach(t),_ko=i(fl),f(Jw.$$.fragment,fl),fl.forEach(t),bko=i(ml),We=n(ml,"DIV",{class:!0});var Ut=s(We);f(Yw.$$.fragment,Ut),vko=i(Ut),Yse=n(Ut,"P",{});var hot=s(Yse);Tko=r(hot,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hot.forEach(t),Fko=i(Ut),Za=n(Ut,"P",{});var p5=s(Za);Cko=r(p5,"The model class to instantiate is selected based on the "),Kse=n(p5,"CODE",{});var uot=s(Kse);Mko=r(uot,"model_type"),uot.forEach(t),Eko=r(p5,` property of the config object (either
passed as an argument or loaded from `),Zse=n(p5,"CODE",{});var pot=s(Zse);yko=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),wko=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(p5,"CODE",{});var _ot=s(ele);Ako=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),Lko=r(p5,":"),p5.forEach(t),Bko=i(Ut),R=n(Ut,"UL",{});var P=s(R);dT=n(P,"LI",{});var $Ae=s(dT);ole=n($Ae,"STRONG",{});var bot=s(ole);xko=r(bot,"albert"),bot.forEach(t),kko=r($Ae," \u2014 "),jj=n($Ae,"A",{href:!0});var vot=s(jj);Rko=r(vot,"AlbertForQuestionAnswering"),vot.forEach(t),Sko=r($Ae," (ALBERT model)"),$Ae.forEach(t),Pko=i(P),cT=n(P,"LI",{});var IAe=s(cT);rle=n(IAe,"STRONG",{});var Tot=s(rle);$ko=r(Tot,"bart"),Tot.forEach(t),Iko=r(IAe," \u2014 "),Dj=n(IAe,"A",{href:!0});var Fot=s(Dj);Nko=r(Fot,"BartForQuestionAnswering"),Fot.forEach(t),jko=r(IAe," (BART model)"),IAe.forEach(t),Dko=i(P),mT=n(P,"LI",{});var NAe=s(mT);tle=n(NAe,"STRONG",{});var Cot=s(tle);qko=r(Cot,"bert"),Cot.forEach(t),Gko=r(NAe," \u2014 "),qj=n(NAe,"A",{href:!0});var Mot=s(qj);Oko=r(Mot,"BertForQuestionAnswering"),Mot.forEach(t),Xko=r(NAe," (BERT model)"),NAe.forEach(t),Vko=i(P),fT=n(P,"LI",{});var jAe=s(fT);ale=n(jAe,"STRONG",{});var Eot=s(ale);zko=r(Eot,"big_bird"),Eot.forEach(t),Wko=r(jAe," \u2014 "),Gj=n(jAe,"A",{href:!0});var yot=s(Gj);Qko=r(yot,"BigBirdForQuestionAnswering"),yot.forEach(t),Hko=r(jAe," (BigBird model)"),jAe.forEach(t),Uko=i(P),gT=n(P,"LI",{});var DAe=s(gT);nle=n(DAe,"STRONG",{});var wot=s(nle);Jko=r(wot,"bigbird_pegasus"),wot.forEach(t),Yko=r(DAe," \u2014 "),Oj=n(DAe,"A",{href:!0});var Aot=s(Oj);Kko=r(Aot,"BigBirdPegasusForQuestionAnswering"),Aot.forEach(t),Zko=r(DAe," (BigBirdPegasus model)"),DAe.forEach(t),eRo=i(P),hT=n(P,"LI",{});var qAe=s(hT);sle=n(qAe,"STRONG",{});var Lot=s(sle);oRo=r(Lot,"camembert"),Lot.forEach(t),rRo=r(qAe," \u2014 "),Xj=n(qAe,"A",{href:!0});var Bot=s(Xj);tRo=r(Bot,"CamembertForQuestionAnswering"),Bot.forEach(t),aRo=r(qAe," (CamemBERT model)"),qAe.forEach(t),nRo=i(P),uT=n(P,"LI",{});var GAe=s(uT);lle=n(GAe,"STRONG",{});var xot=s(lle);sRo=r(xot,"canine"),xot.forEach(t),lRo=r(GAe," \u2014 "),Vj=n(GAe,"A",{href:!0});var kot=s(Vj);iRo=r(kot,"CanineForQuestionAnswering"),kot.forEach(t),dRo=r(GAe," (Canine model)"),GAe.forEach(t),cRo=i(P),pT=n(P,"LI",{});var OAe=s(pT);ile=n(OAe,"STRONG",{});var Rot=s(ile);mRo=r(Rot,"convbert"),Rot.forEach(t),fRo=r(OAe," \u2014 "),zj=n(OAe,"A",{href:!0});var Sot=s(zj);gRo=r(Sot,"ConvBertForQuestionAnswering"),Sot.forEach(t),hRo=r(OAe," (ConvBERT model)"),OAe.forEach(t),uRo=i(P),_T=n(P,"LI",{});var XAe=s(_T);dle=n(XAe,"STRONG",{});var Pot=s(dle);pRo=r(Pot,"data2vec-text"),Pot.forEach(t),_Ro=r(XAe," \u2014 "),Wj=n(XAe,"A",{href:!0});var $ot=s(Wj);bRo=r($ot,"Data2VecTextForQuestionAnswering"),$ot.forEach(t),vRo=r(XAe," (Data2VecText model)"),XAe.forEach(t),TRo=i(P),bT=n(P,"LI",{});var VAe=s(bT);cle=n(VAe,"STRONG",{});var Iot=s(cle);FRo=r(Iot,"deberta"),Iot.forEach(t),CRo=r(VAe," \u2014 "),Qj=n(VAe,"A",{href:!0});var Not=s(Qj);MRo=r(Not,"DebertaForQuestionAnswering"),Not.forEach(t),ERo=r(VAe," (DeBERTa model)"),VAe.forEach(t),yRo=i(P),vT=n(P,"LI",{});var zAe=s(vT);mle=n(zAe,"STRONG",{});var jot=s(mle);wRo=r(jot,"deberta-v2"),jot.forEach(t),ARo=r(zAe," \u2014 "),Hj=n(zAe,"A",{href:!0});var Dot=s(Hj);LRo=r(Dot,"DebertaV2ForQuestionAnswering"),Dot.forEach(t),BRo=r(zAe," (DeBERTa-v2 model)"),zAe.forEach(t),xRo=i(P),TT=n(P,"LI",{});var WAe=s(TT);fle=n(WAe,"STRONG",{});var qot=s(fle);kRo=r(qot,"distilbert"),qot.forEach(t),RRo=r(WAe," \u2014 "),Uj=n(WAe,"A",{href:!0});var Got=s(Uj);SRo=r(Got,"DistilBertForQuestionAnswering"),Got.forEach(t),PRo=r(WAe," (DistilBERT model)"),WAe.forEach(t),$Ro=i(P),FT=n(P,"LI",{});var QAe=s(FT);gle=n(QAe,"STRONG",{});var Oot=s(gle);IRo=r(Oot,"electra"),Oot.forEach(t),NRo=r(QAe," \u2014 "),Jj=n(QAe,"A",{href:!0});var Xot=s(Jj);jRo=r(Xot,"ElectraForQuestionAnswering"),Xot.forEach(t),DRo=r(QAe," (ELECTRA model)"),QAe.forEach(t),qRo=i(P),CT=n(P,"LI",{});var HAe=s(CT);hle=n(HAe,"STRONG",{});var Vot=s(hle);GRo=r(Vot,"flaubert"),Vot.forEach(t),ORo=r(HAe," \u2014 "),Yj=n(HAe,"A",{href:!0});var zot=s(Yj);XRo=r(zot,"FlaubertForQuestionAnsweringSimple"),zot.forEach(t),VRo=r(HAe," (FlauBERT model)"),HAe.forEach(t),zRo=i(P),MT=n(P,"LI",{});var UAe=s(MT);ule=n(UAe,"STRONG",{});var Wot=s(ule);WRo=r(Wot,"fnet"),Wot.forEach(t),QRo=r(UAe," \u2014 "),Kj=n(UAe,"A",{href:!0});var Qot=s(Kj);HRo=r(Qot,"FNetForQuestionAnswering"),Qot.forEach(t),URo=r(UAe," (FNet model)"),UAe.forEach(t),JRo=i(P),ET=n(P,"LI",{});var JAe=s(ET);ple=n(JAe,"STRONG",{});var Hot=s(ple);YRo=r(Hot,"funnel"),Hot.forEach(t),KRo=r(JAe," \u2014 "),Zj=n(JAe,"A",{href:!0});var Uot=s(Zj);ZRo=r(Uot,"FunnelForQuestionAnswering"),Uot.forEach(t),eSo=r(JAe," (Funnel Transformer model)"),JAe.forEach(t),oSo=i(P),yT=n(P,"LI",{});var YAe=s(yT);_le=n(YAe,"STRONG",{});var Jot=s(_le);rSo=r(Jot,"gptj"),Jot.forEach(t),tSo=r(YAe," \u2014 "),eD=n(YAe,"A",{href:!0});var Yot=s(eD);aSo=r(Yot,"GPTJForQuestionAnswering"),Yot.forEach(t),nSo=r(YAe," (GPT-J model)"),YAe.forEach(t),sSo=i(P),wT=n(P,"LI",{});var KAe=s(wT);ble=n(KAe,"STRONG",{});var Kot=s(ble);lSo=r(Kot,"ibert"),Kot.forEach(t),iSo=r(KAe," \u2014 "),oD=n(KAe,"A",{href:!0});var Zot=s(oD);dSo=r(Zot,"IBertForQuestionAnswering"),Zot.forEach(t),cSo=r(KAe," (I-BERT model)"),KAe.forEach(t),mSo=i(P),AT=n(P,"LI",{});var ZAe=s(AT);vle=n(ZAe,"STRONG",{});var ert=s(vle);fSo=r(ert,"layoutlmv2"),ert.forEach(t),gSo=r(ZAe," \u2014 "),rD=n(ZAe,"A",{href:!0});var ort=s(rD);hSo=r(ort,"LayoutLMv2ForQuestionAnswering"),ort.forEach(t),uSo=r(ZAe," (LayoutLMv2 model)"),ZAe.forEach(t),pSo=i(P),LT=n(P,"LI",{});var e0e=s(LT);Tle=n(e0e,"STRONG",{});var rrt=s(Tle);_So=r(rrt,"led"),rrt.forEach(t),bSo=r(e0e," \u2014 "),tD=n(e0e,"A",{href:!0});var trt=s(tD);vSo=r(trt,"LEDForQuestionAnswering"),trt.forEach(t),TSo=r(e0e," (LED model)"),e0e.forEach(t),FSo=i(P),BT=n(P,"LI",{});var o0e=s(BT);Fle=n(o0e,"STRONG",{});var art=s(Fle);CSo=r(art,"longformer"),art.forEach(t),MSo=r(o0e," \u2014 "),aD=n(o0e,"A",{href:!0});var nrt=s(aD);ESo=r(nrt,"LongformerForQuestionAnswering"),nrt.forEach(t),ySo=r(o0e," (Longformer model)"),o0e.forEach(t),wSo=i(P),xT=n(P,"LI",{});var r0e=s(xT);Cle=n(r0e,"STRONG",{});var srt=s(Cle);ASo=r(srt,"lxmert"),srt.forEach(t),LSo=r(r0e," \u2014 "),nD=n(r0e,"A",{href:!0});var lrt=s(nD);BSo=r(lrt,"LxmertForQuestionAnswering"),lrt.forEach(t),xSo=r(r0e," (LXMERT model)"),r0e.forEach(t),kSo=i(P),kT=n(P,"LI",{});var t0e=s(kT);Mle=n(t0e,"STRONG",{});var irt=s(Mle);RSo=r(irt,"mbart"),irt.forEach(t),SSo=r(t0e," \u2014 "),sD=n(t0e,"A",{href:!0});var drt=s(sD);PSo=r(drt,"MBartForQuestionAnswering"),drt.forEach(t),$So=r(t0e," (mBART model)"),t0e.forEach(t),ISo=i(P),RT=n(P,"LI",{});var a0e=s(RT);Ele=n(a0e,"STRONG",{});var crt=s(Ele);NSo=r(crt,"megatron-bert"),crt.forEach(t),jSo=r(a0e," \u2014 "),lD=n(a0e,"A",{href:!0});var mrt=s(lD);DSo=r(mrt,"MegatronBertForQuestionAnswering"),mrt.forEach(t),qSo=r(a0e," (MegatronBert model)"),a0e.forEach(t),GSo=i(P),ST=n(P,"LI",{});var n0e=s(ST);yle=n(n0e,"STRONG",{});var frt=s(yle);OSo=r(frt,"mobilebert"),frt.forEach(t),XSo=r(n0e," \u2014 "),iD=n(n0e,"A",{href:!0});var grt=s(iD);VSo=r(grt,"MobileBertForQuestionAnswering"),grt.forEach(t),zSo=r(n0e," (MobileBERT model)"),n0e.forEach(t),WSo=i(P),PT=n(P,"LI",{});var s0e=s(PT);wle=n(s0e,"STRONG",{});var hrt=s(wle);QSo=r(hrt,"mpnet"),hrt.forEach(t),HSo=r(s0e," \u2014 "),dD=n(s0e,"A",{href:!0});var urt=s(dD);USo=r(urt,"MPNetForQuestionAnswering"),urt.forEach(t),JSo=r(s0e," (MPNet model)"),s0e.forEach(t),YSo=i(P),$T=n(P,"LI",{});var l0e=s($T);Ale=n(l0e,"STRONG",{});var prt=s(Ale);KSo=r(prt,"nystromformer"),prt.forEach(t),ZSo=r(l0e," \u2014 "),cD=n(l0e,"A",{href:!0});var _rt=s(cD);ePo=r(_rt,"NystromformerForQuestionAnswering"),_rt.forEach(t),oPo=r(l0e," (Nystromformer model)"),l0e.forEach(t),rPo=i(P),IT=n(P,"LI",{});var i0e=s(IT);Lle=n(i0e,"STRONG",{});var brt=s(Lle);tPo=r(brt,"qdqbert"),brt.forEach(t),aPo=r(i0e," \u2014 "),mD=n(i0e,"A",{href:!0});var vrt=s(mD);nPo=r(vrt,"QDQBertForQuestionAnswering"),vrt.forEach(t),sPo=r(i0e," (QDQBert model)"),i0e.forEach(t),lPo=i(P),NT=n(P,"LI",{});var d0e=s(NT);Ble=n(d0e,"STRONG",{});var Trt=s(Ble);iPo=r(Trt,"reformer"),Trt.forEach(t),dPo=r(d0e," \u2014 "),fD=n(d0e,"A",{href:!0});var Frt=s(fD);cPo=r(Frt,"ReformerForQuestionAnswering"),Frt.forEach(t),mPo=r(d0e," (Reformer model)"),d0e.forEach(t),fPo=i(P),jT=n(P,"LI",{});var c0e=s(jT);xle=n(c0e,"STRONG",{});var Crt=s(xle);gPo=r(Crt,"rembert"),Crt.forEach(t),hPo=r(c0e," \u2014 "),gD=n(c0e,"A",{href:!0});var Mrt=s(gD);uPo=r(Mrt,"RemBertForQuestionAnswering"),Mrt.forEach(t),pPo=r(c0e," (RemBERT model)"),c0e.forEach(t),_Po=i(P),DT=n(P,"LI",{});var m0e=s(DT);kle=n(m0e,"STRONG",{});var Ert=s(kle);bPo=r(Ert,"roberta"),Ert.forEach(t),vPo=r(m0e," \u2014 "),hD=n(m0e,"A",{href:!0});var yrt=s(hD);TPo=r(yrt,"RobertaForQuestionAnswering"),yrt.forEach(t),FPo=r(m0e," (RoBERTa model)"),m0e.forEach(t),CPo=i(P),qT=n(P,"LI",{});var f0e=s(qT);Rle=n(f0e,"STRONG",{});var wrt=s(Rle);MPo=r(wrt,"roformer"),wrt.forEach(t),EPo=r(f0e," \u2014 "),uD=n(f0e,"A",{href:!0});var Art=s(uD);yPo=r(Art,"RoFormerForQuestionAnswering"),Art.forEach(t),wPo=r(f0e," (RoFormer model)"),f0e.forEach(t),APo=i(P),GT=n(P,"LI",{});var g0e=s(GT);Sle=n(g0e,"STRONG",{});var Lrt=s(Sle);LPo=r(Lrt,"splinter"),Lrt.forEach(t),BPo=r(g0e," \u2014 "),pD=n(g0e,"A",{href:!0});var Brt=s(pD);xPo=r(Brt,"SplinterForQuestionAnswering"),Brt.forEach(t),kPo=r(g0e," (Splinter model)"),g0e.forEach(t),RPo=i(P),OT=n(P,"LI",{});var h0e=s(OT);Ple=n(h0e,"STRONG",{});var xrt=s(Ple);SPo=r(xrt,"squeezebert"),xrt.forEach(t),PPo=r(h0e," \u2014 "),_D=n(h0e,"A",{href:!0});var krt=s(_D);$Po=r(krt,"SqueezeBertForQuestionAnswering"),krt.forEach(t),IPo=r(h0e," (SqueezeBERT model)"),h0e.forEach(t),NPo=i(P),XT=n(P,"LI",{});var u0e=s(XT);$le=n(u0e,"STRONG",{});var Rrt=s($le);jPo=r(Rrt,"xlm"),Rrt.forEach(t),DPo=r(u0e," \u2014 "),bD=n(u0e,"A",{href:!0});var Srt=s(bD);qPo=r(Srt,"XLMForQuestionAnsweringSimple"),Srt.forEach(t),GPo=r(u0e," (XLM model)"),u0e.forEach(t),OPo=i(P),VT=n(P,"LI",{});var p0e=s(VT);Ile=n(p0e,"STRONG",{});var Prt=s(Ile);XPo=r(Prt,"xlm-roberta"),Prt.forEach(t),VPo=r(p0e," \u2014 "),vD=n(p0e,"A",{href:!0});var $rt=s(vD);zPo=r($rt,"XLMRobertaForQuestionAnswering"),$rt.forEach(t),WPo=r(p0e," (XLM-RoBERTa model)"),p0e.forEach(t),QPo=i(P),zT=n(P,"LI",{});var _0e=s(zT);Nle=n(_0e,"STRONG",{});var Irt=s(Nle);HPo=r(Irt,"xlm-roberta-xl"),Irt.forEach(t),UPo=r(_0e," \u2014 "),TD=n(_0e,"A",{href:!0});var Nrt=s(TD);JPo=r(Nrt,"XLMRobertaXLForQuestionAnswering"),Nrt.forEach(t),YPo=r(_0e," (XLM-RoBERTa-XL model)"),_0e.forEach(t),KPo=i(P),WT=n(P,"LI",{});var b0e=s(WT);jle=n(b0e,"STRONG",{});var jrt=s(jle);ZPo=r(jrt,"xlnet"),jrt.forEach(t),e$o=r(b0e," \u2014 "),FD=n(b0e,"A",{href:!0});var Drt=s(FD);o$o=r(Drt,"XLNetForQuestionAnsweringSimple"),Drt.forEach(t),r$o=r(b0e," (XLNet model)"),b0e.forEach(t),t$o=i(P),QT=n(P,"LI",{});var v0e=s(QT);Dle=n(v0e,"STRONG",{});var qrt=s(Dle);a$o=r(qrt,"yoso"),qrt.forEach(t),n$o=r(v0e," \u2014 "),CD=n(v0e,"A",{href:!0});var Grt=s(CD);s$o=r(Grt,"YosoForQuestionAnswering"),Grt.forEach(t),l$o=r(v0e," (YOSO model)"),v0e.forEach(t),P.forEach(t),i$o=i(Ut),HT=n(Ut,"P",{});var T0e=s(HT);d$o=r(T0e,"The model is set in evaluation mode by default using "),qle=n(T0e,"CODE",{});var Ort=s(qle);c$o=r(Ort,"model.eval()"),Ort.forEach(t),m$o=r(T0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=n(T0e,"CODE",{});var Xrt=s(Gle);f$o=r(Xrt,"model.train()"),Xrt.forEach(t),T0e.forEach(t),g$o=i(Ut),Ole=n(Ut,"P",{});var Vrt=s(Ole);h$o=r(Vrt,"Examples:"),Vrt.forEach(t),u$o=i(Ut),f(Kw.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),yke=i(c),wd=n(c,"H2",{class:!0});var PSe=s(wd);UT=n(PSe,"A",{id:!0,class:!0,href:!0});var zrt=s(UT);Xle=n(zrt,"SPAN",{});var Wrt=s(Xle);f(Zw.$$.fragment,Wrt),Wrt.forEach(t),zrt.forEach(t),p$o=i(PSe),Vle=n(PSe,"SPAN",{});var Qrt=s(Vle);_$o=r(Qrt,"AutoModelForTableQuestionAnswering"),Qrt.forEach(t),PSe.forEach(t),wke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);f(e6.$$.fragment,gl),b$o=i(gl),Ad=n(gl,"P",{});var mW=s(Ad);v$o=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zle=n(mW,"CODE",{});var Hrt=s(zle);T$o=r(Hrt,"from_pretrained()"),Hrt.forEach(t),F$o=r(mW,"class method or the "),Wle=n(mW,"CODE",{});var Urt=s(Wle);C$o=r(Urt,"from_config()"),Urt.forEach(t),M$o=r(mW,`class
method.`),mW.forEach(t),E$o=i(gl),o6=n(gl,"P",{});var $Se=s(o6);y$o=r($Se,"This class cannot be instantiated directly using "),Qle=n($Se,"CODE",{});var Jrt=s(Qle);w$o=r(Jrt,"__init__()"),Jrt.forEach(t),A$o=r($Se," (throws an error)."),$Se.forEach(t),L$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);f(r6.$$.fragment,hl),B$o=i(hl),Hle=n(hl,"P",{});var Yrt=s(Hle);x$o=r(Yrt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Yrt.forEach(t),k$o=i(hl),Ld=n(hl,"P",{});var fW=s(Ld);R$o=r(fW,`Note:
Loading a model from its configuration file does `),Ule=n(fW,"STRONG",{});var Krt=s(Ule);S$o=r(Krt,"not"),Krt.forEach(t),P$o=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jle=n(fW,"CODE",{});var Zrt=s(Jle);$$o=r(Zrt,"from_pretrained()"),Zrt.forEach(t),I$o=r(fW,"to load the model weights."),fW.forEach(t),N$o=i(hl),Yle=n(hl,"P",{});var ett=s(Yle);j$o=r(ett,"Examples:"),ett.forEach(t),D$o=i(hl),f(t6.$$.fragment,hl),hl.forEach(t),q$o=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);f(a6.$$.fragment,Jt),G$o=i(Jt),Kle=n(Jt,"P",{});var ott=s(Kle);O$o=r(ott,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ott.forEach(t),X$o=i(Jt),en=n(Jt,"P",{});var _5=s(en);V$o=r(_5,"The model class to instantiate is selected based on the "),Zle=n(_5,"CODE",{});var rtt=s(Zle);z$o=r(rtt,"model_type"),rtt.forEach(t),W$o=r(_5,` property of the config object (either
passed as an argument or loaded from `),eie=n(_5,"CODE",{});var ttt=s(eie);Q$o=r(ttt,"pretrained_model_name_or_path"),ttt.forEach(t),H$o=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oie=n(_5,"CODE",{});var att=s(oie);U$o=r(att,"pretrained_model_name_or_path"),att.forEach(t),J$o=r(_5,":"),_5.forEach(t),Y$o=i(Jt),rie=n(Jt,"UL",{});var ntt=s(rie);JT=n(ntt,"LI",{});var F0e=s(JT);tie=n(F0e,"STRONG",{});var stt=s(tie);K$o=r(stt,"tapas"),stt.forEach(t),Z$o=r(F0e," \u2014 "),MD=n(F0e,"A",{href:!0});var ltt=s(MD);eIo=r(ltt,"TapasForQuestionAnswering"),ltt.forEach(t),oIo=r(F0e," (TAPAS model)"),F0e.forEach(t),ntt.forEach(t),rIo=i(Jt),YT=n(Jt,"P",{});var C0e=s(YT);tIo=r(C0e,"The model is set in evaluation mode by default using "),aie=n(C0e,"CODE",{});var itt=s(aie);aIo=r(itt,"model.eval()"),itt.forEach(t),nIo=r(C0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=n(C0e,"CODE",{});var dtt=s(nie);sIo=r(dtt,"model.train()"),dtt.forEach(t),C0e.forEach(t),lIo=i(Jt),sie=n(Jt,"P",{});var ctt=s(sie);iIo=r(ctt,"Examples:"),ctt.forEach(t),dIo=i(Jt),f(n6.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Ake=i(c),Bd=n(c,"H2",{class:!0});var ISe=s(Bd);KT=n(ISe,"A",{id:!0,class:!0,href:!0});var mtt=s(KT);lie=n(mtt,"SPAN",{});var ftt=s(lie);f(s6.$$.fragment,ftt),ftt.forEach(t),mtt.forEach(t),cIo=i(ISe),iie=n(ISe,"SPAN",{});var gtt=s(iie);mIo=r(gtt,"AutoModelForImageClassification"),gtt.forEach(t),ISe.forEach(t),Lke=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);f(l6.$$.fragment,ul),fIo=i(ul),xd=n(ul,"P",{});var gW=s(xd);gIo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),die=n(gW,"CODE",{});var htt=s(die);hIo=r(htt,"from_pretrained()"),htt.forEach(t),uIo=r(gW,"class method or the "),cie=n(gW,"CODE",{});var utt=s(cie);pIo=r(utt,"from_config()"),utt.forEach(t),_Io=r(gW,`class
method.`),gW.forEach(t),bIo=i(ul),i6=n(ul,"P",{});var NSe=s(i6);vIo=r(NSe,"This class cannot be instantiated directly using "),mie=n(NSe,"CODE",{});var ptt=s(mie);TIo=r(ptt,"__init__()"),ptt.forEach(t),FIo=r(NSe," (throws an error)."),NSe.forEach(t),CIo=i(ul),ot=n(ul,"DIV",{class:!0});var pl=s(ot);f(d6.$$.fragment,pl),MIo=i(pl),fie=n(pl,"P",{});var _tt=s(fie);EIo=r(_tt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_tt.forEach(t),yIo=i(pl),kd=n(pl,"P",{});var hW=s(kd);wIo=r(hW,`Note:
Loading a model from its configuration file does `),gie=n(hW,"STRONG",{});var btt=s(gie);AIo=r(btt,"not"),btt.forEach(t),LIo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hie=n(hW,"CODE",{});var vtt=s(hie);BIo=r(vtt,"from_pretrained()"),vtt.forEach(t),xIo=r(hW,"to load the model weights."),hW.forEach(t),kIo=i(pl),uie=n(pl,"P",{});var Ttt=s(uie);RIo=r(Ttt,"Examples:"),Ttt.forEach(t),SIo=i(pl),f(c6.$$.fragment,pl),pl.forEach(t),PIo=i(ul),He=n(ul,"DIV",{class:!0});var Yt=s(He);f(m6.$$.fragment,Yt),$Io=i(Yt),pie=n(Yt,"P",{});var Ftt=s(pie);IIo=r(Ftt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ftt.forEach(t),NIo=i(Yt),on=n(Yt,"P",{});var b5=s(on);jIo=r(b5,"The model class to instantiate is selected based on the "),_ie=n(b5,"CODE",{});var Ctt=s(_ie);DIo=r(Ctt,"model_type"),Ctt.forEach(t),qIo=r(b5,` property of the config object (either
passed as an argument or loaded from `),bie=n(b5,"CODE",{});var Mtt=s(bie);GIo=r(Mtt,"pretrained_model_name_or_path"),Mtt.forEach(t),OIo=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=n(b5,"CODE",{});var Ett=s(vie);XIo=r(Ett,"pretrained_model_name_or_path"),Ett.forEach(t),VIo=r(b5,":"),b5.forEach(t),zIo=i(Yt),fe=n(Yt,"UL",{});var Te=s(fe);ZT=n(Te,"LI",{});var M0e=s(ZT);Tie=n(M0e,"STRONG",{});var ytt=s(Tie);WIo=r(ytt,"beit"),ytt.forEach(t),QIo=r(M0e," \u2014 "),ED=n(M0e,"A",{href:!0});var wtt=s(ED);HIo=r(wtt,"BeitForImageClassification"),wtt.forEach(t),UIo=r(M0e," (BEiT model)"),M0e.forEach(t),JIo=i(Te),e1=n(Te,"LI",{});var E0e=s(e1);Fie=n(E0e,"STRONG",{});var Att=s(Fie);YIo=r(Att,"convnext"),Att.forEach(t),KIo=r(E0e," \u2014 "),yD=n(E0e,"A",{href:!0});var Ltt=s(yD);ZIo=r(Ltt,"ConvNextForImageClassification"),Ltt.forEach(t),eNo=r(E0e," (ConvNext model)"),E0e.forEach(t),oNo=i(Te),qs=n(Te,"LI",{});var H8=s(qs);Cie=n(H8,"STRONG",{});var Btt=s(Cie);rNo=r(Btt,"deit"),Btt.forEach(t),tNo=r(H8," \u2014 "),wD=n(H8,"A",{href:!0});var xtt=s(wD);aNo=r(xtt,"DeiTForImageClassification"),xtt.forEach(t),nNo=r(H8," or "),AD=n(H8,"A",{href:!0});var ktt=s(AD);sNo=r(ktt,"DeiTForImageClassificationWithTeacher"),ktt.forEach(t),lNo=r(H8," (DeiT model)"),H8.forEach(t),iNo=i(Te),o1=n(Te,"LI",{});var y0e=s(o1);Mie=n(y0e,"STRONG",{});var Rtt=s(Mie);dNo=r(Rtt,"imagegpt"),Rtt.forEach(t),cNo=r(y0e," \u2014 "),LD=n(y0e,"A",{href:!0});var Stt=s(LD);mNo=r(Stt,"ImageGPTForImageClassification"),Stt.forEach(t),fNo=r(y0e," (ImageGPT model)"),y0e.forEach(t),gNo=i(Te),fa=n(Te,"LI",{});var Sm=s(fa);Eie=n(Sm,"STRONG",{});var Ptt=s(Eie);hNo=r(Ptt,"perceiver"),Ptt.forEach(t),uNo=r(Sm," \u2014 "),BD=n(Sm,"A",{href:!0});var $tt=s(BD);pNo=r($tt,"PerceiverForImageClassificationLearned"),$tt.forEach(t),_No=r(Sm," or "),xD=n(Sm,"A",{href:!0});var Itt=s(xD);bNo=r(Itt,"PerceiverForImageClassificationFourier"),Itt.forEach(t),vNo=r(Sm," or "),kD=n(Sm,"A",{href:!0});var Ntt=s(kD);TNo=r(Ntt,"PerceiverForImageClassificationConvProcessing"),Ntt.forEach(t),FNo=r(Sm," (Perceiver model)"),Sm.forEach(t),CNo=i(Te),r1=n(Te,"LI",{});var w0e=s(r1);yie=n(w0e,"STRONG",{});var jtt=s(yie);MNo=r(jtt,"poolformer"),jtt.forEach(t),ENo=r(w0e," \u2014 "),RD=n(w0e,"A",{href:!0});var Dtt=s(RD);yNo=r(Dtt,"PoolFormerForImageClassification"),Dtt.forEach(t),wNo=r(w0e," (PoolFormer model)"),w0e.forEach(t),ANo=i(Te),t1=n(Te,"LI",{});var A0e=s(t1);wie=n(A0e,"STRONG",{});var qtt=s(wie);LNo=r(qtt,"resnet"),qtt.forEach(t),BNo=r(A0e," \u2014 "),SD=n(A0e,"A",{href:!0});var Gtt=s(SD);xNo=r(Gtt,"ResNetForImageClassification"),Gtt.forEach(t),kNo=r(A0e," (ResNet model)"),A0e.forEach(t),RNo=i(Te),a1=n(Te,"LI",{});var L0e=s(a1);Aie=n(L0e,"STRONG",{});var Ott=s(Aie);SNo=r(Ott,"segformer"),Ott.forEach(t),PNo=r(L0e," \u2014 "),PD=n(L0e,"A",{href:!0});var Xtt=s(PD);$No=r(Xtt,"SegformerForImageClassification"),Xtt.forEach(t),INo=r(L0e," (SegFormer model)"),L0e.forEach(t),NNo=i(Te),n1=n(Te,"LI",{});var B0e=s(n1);Lie=n(B0e,"STRONG",{});var Vtt=s(Lie);jNo=r(Vtt,"swin"),Vtt.forEach(t),DNo=r(B0e," \u2014 "),$D=n(B0e,"A",{href:!0});var ztt=s($D);qNo=r(ztt,"SwinForImageClassification"),ztt.forEach(t),GNo=r(B0e," (Swin model)"),B0e.forEach(t),ONo=i(Te),s1=n(Te,"LI",{});var x0e=s(s1);Bie=n(x0e,"STRONG",{});var Wtt=s(Bie);XNo=r(Wtt,"van"),Wtt.forEach(t),VNo=r(x0e," \u2014 "),ID=n(x0e,"A",{href:!0});var Qtt=s(ID);zNo=r(Qtt,"VanForImageClassification"),Qtt.forEach(t),WNo=r(x0e," (VAN model)"),x0e.forEach(t),QNo=i(Te),l1=n(Te,"LI",{});var k0e=s(l1);xie=n(k0e,"STRONG",{});var Htt=s(xie);HNo=r(Htt,"vit"),Htt.forEach(t),UNo=r(k0e," \u2014 "),ND=n(k0e,"A",{href:!0});var Utt=s(ND);JNo=r(Utt,"ViTForImageClassification"),Utt.forEach(t),YNo=r(k0e," (ViT model)"),k0e.forEach(t),Te.forEach(t),KNo=i(Yt),i1=n(Yt,"P",{});var R0e=s(i1);ZNo=r(R0e,"The model is set in evaluation mode by default using "),kie=n(R0e,"CODE",{});var Jtt=s(kie);ejo=r(Jtt,"model.eval()"),Jtt.forEach(t),ojo=r(R0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=n(R0e,"CODE",{});var Ytt=s(Rie);rjo=r(Ytt,"model.train()"),Ytt.forEach(t),R0e.forEach(t),tjo=i(Yt),Sie=n(Yt,"P",{});var Ktt=s(Sie);ajo=r(Ktt,"Examples:"),Ktt.forEach(t),njo=i(Yt),f(f6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),Bke=i(c),Rd=n(c,"H2",{class:!0});var jSe=s(Rd);d1=n(jSe,"A",{id:!0,class:!0,href:!0});var Ztt=s(d1);Pie=n(Ztt,"SPAN",{});var eat=s(Pie);f(g6.$$.fragment,eat),eat.forEach(t),Ztt.forEach(t),sjo=i(jSe),$ie=n(jSe,"SPAN",{});var oat=s($ie);ljo=r(oat,"AutoModelForVision2Seq"),oat.forEach(t),jSe.forEach(t),xke=i(c),ir=n(c,"DIV",{class:!0});var _l=s(ir);f(h6.$$.fragment,_l),ijo=i(_l),Sd=n(_l,"P",{});var uW=s(Sd);djo=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Iie=n(uW,"CODE",{});var rat=s(Iie);cjo=r(rat,"from_pretrained()"),rat.forEach(t),mjo=r(uW,"class method or the "),Nie=n(uW,"CODE",{});var tat=s(Nie);fjo=r(tat,"from_config()"),tat.forEach(t),gjo=r(uW,`class
method.`),uW.forEach(t),hjo=i(_l),u6=n(_l,"P",{});var DSe=s(u6);ujo=r(DSe,"This class cannot be instantiated directly using "),jie=n(DSe,"CODE",{});var aat=s(jie);pjo=r(aat,"__init__()"),aat.forEach(t),_jo=r(DSe," (throws an error)."),DSe.forEach(t),bjo=i(_l),rt=n(_l,"DIV",{class:!0});var bl=s(rt);f(p6.$$.fragment,bl),vjo=i(bl),Die=n(bl,"P",{});var nat=s(Die);Tjo=r(nat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nat.forEach(t),Fjo=i(bl),Pd=n(bl,"P",{});var pW=s(Pd);Cjo=r(pW,`Note:
Loading a model from its configuration file does `),qie=n(pW,"STRONG",{});var sat=s(qie);Mjo=r(sat,"not"),sat.forEach(t),Ejo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gie=n(pW,"CODE",{});var lat=s(Gie);yjo=r(lat,"from_pretrained()"),lat.forEach(t),wjo=r(pW,"to load the model weights."),pW.forEach(t),Ajo=i(bl),Oie=n(bl,"P",{});var iat=s(Oie);Ljo=r(iat,"Examples:"),iat.forEach(t),Bjo=i(bl),f(_6.$$.fragment,bl),bl.forEach(t),xjo=i(_l),Ue=n(_l,"DIV",{class:!0});var Kt=s(Ue);f(b6.$$.fragment,Kt),kjo=i(Kt),Xie=n(Kt,"P",{});var dat=s(Xie);Rjo=r(dat,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dat.forEach(t),Sjo=i(Kt),rn=n(Kt,"P",{});var v5=s(rn);Pjo=r(v5,"The model class to instantiate is selected based on the "),Vie=n(v5,"CODE",{});var cat=s(Vie);$jo=r(cat,"model_type"),cat.forEach(t),Ijo=r(v5,` property of the config object (either
passed as an argument or loaded from `),zie=n(v5,"CODE",{});var mat=s(zie);Njo=r(mat,"pretrained_model_name_or_path"),mat.forEach(t),jjo=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(v5,"CODE",{});var fat=s(Wie);Djo=r(fat,"pretrained_model_name_or_path"),fat.forEach(t),qjo=r(v5,":"),v5.forEach(t),Gjo=i(Kt),Qie=n(Kt,"UL",{});var gat=s(Qie);c1=n(gat,"LI",{});var S0e=s(c1);Hie=n(S0e,"STRONG",{});var hat=s(Hie);Ojo=r(hat,"vision-encoder-decoder"),hat.forEach(t),Xjo=r(S0e," \u2014 "),jD=n(S0e,"A",{href:!0});var uat=s(jD);Vjo=r(uat,"VisionEncoderDecoderModel"),uat.forEach(t),zjo=r(S0e," (Vision Encoder decoder model)"),S0e.forEach(t),gat.forEach(t),Wjo=i(Kt),m1=n(Kt,"P",{});var P0e=s(m1);Qjo=r(P0e,"The model is set in evaluation mode by default using "),Uie=n(P0e,"CODE",{});var pat=s(Uie);Hjo=r(pat,"model.eval()"),pat.forEach(t),Ujo=r(P0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(P0e,"CODE",{});var _at=s(Jie);Jjo=r(_at,"model.train()"),_at.forEach(t),P0e.forEach(t),Yjo=i(Kt),Yie=n(Kt,"P",{});var bat=s(Yie);Kjo=r(bat,"Examples:"),bat.forEach(t),Zjo=i(Kt),f(v6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),kke=i(c),$d=n(c,"H2",{class:!0});var qSe=s($d);f1=n(qSe,"A",{id:!0,class:!0,href:!0});var vat=s(f1);Kie=n(vat,"SPAN",{});var Tat=s(Kie);f(T6.$$.fragment,Tat),Tat.forEach(t),vat.forEach(t),eDo=i(qSe),Zie=n(qSe,"SPAN",{});var Fat=s(Zie);oDo=r(Fat,"AutoModelForAudioClassification"),Fat.forEach(t),qSe.forEach(t),Rke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);f(F6.$$.fragment,vl),rDo=i(vl),Id=n(vl,"P",{});var _W=s(Id);tDo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ede=n(_W,"CODE",{});var Cat=s(ede);aDo=r(Cat,"from_pretrained()"),Cat.forEach(t),nDo=r(_W,"class method or the "),ode=n(_W,"CODE",{});var Mat=s(ode);sDo=r(Mat,"from_config()"),Mat.forEach(t),lDo=r(_W,`class
method.`),_W.forEach(t),iDo=i(vl),C6=n(vl,"P",{});var GSe=s(C6);dDo=r(GSe,"This class cannot be instantiated directly using "),rde=n(GSe,"CODE",{});var Eat=s(rde);cDo=r(Eat,"__init__()"),Eat.forEach(t),mDo=r(GSe," (throws an error)."),GSe.forEach(t),fDo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);f(M6.$$.fragment,Tl),gDo=i(Tl),tde=n(Tl,"P",{});var yat=s(tde);hDo=r(yat,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),yat.forEach(t),uDo=i(Tl),Nd=n(Tl,"P",{});var bW=s(Nd);pDo=r(bW,`Note:
Loading a model from its configuration file does `),ade=n(bW,"STRONG",{});var wat=s(ade);_Do=r(wat,"not"),wat.forEach(t),bDo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=n(bW,"CODE",{});var Aat=s(nde);vDo=r(Aat,"from_pretrained()"),Aat.forEach(t),TDo=r(bW,"to load the model weights."),bW.forEach(t),FDo=i(Tl),sde=n(Tl,"P",{});var Lat=s(sde);CDo=r(Lat,"Examples:"),Lat.forEach(t),MDo=i(Tl),f(E6.$$.fragment,Tl),Tl.forEach(t),EDo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);f(y6.$$.fragment,Zt),yDo=i(Zt),lde=n(Zt,"P",{});var Bat=s(lde);wDo=r(Bat,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Bat.forEach(t),ADo=i(Zt),tn=n(Zt,"P",{});var T5=s(tn);LDo=r(T5,"The model class to instantiate is selected based on the "),ide=n(T5,"CODE",{});var xat=s(ide);BDo=r(xat,"model_type"),xat.forEach(t),xDo=r(T5,` property of the config object (either
passed as an argument or loaded from `),dde=n(T5,"CODE",{});var kat=s(dde);kDo=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),RDo=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(T5,"CODE",{});var Rat=s(cde);SDo=r(Rat,"pretrained_model_name_or_path"),Rat.forEach(t),PDo=r(T5,":"),T5.forEach(t),$Do=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);g1=n(qo,"LI",{});var $0e=s(g1);mde=n($0e,"STRONG",{});var Sat=s(mde);IDo=r(Sat,"data2vec-audio"),Sat.forEach(t),NDo=r($0e," \u2014 "),DD=n($0e,"A",{href:!0});var Pat=s(DD);jDo=r(Pat,"Data2VecAudioForSequenceClassification"),Pat.forEach(t),DDo=r($0e," (Data2VecAudio model)"),$0e.forEach(t),qDo=i(qo),h1=n(qo,"LI",{});var I0e=s(h1);fde=n(I0e,"STRONG",{});var $at=s(fde);GDo=r($at,"hubert"),$at.forEach(t),ODo=r(I0e," \u2014 "),qD=n(I0e,"A",{href:!0});var Iat=s(qD);XDo=r(Iat,"HubertForSequenceClassification"),Iat.forEach(t),VDo=r(I0e," (Hubert model)"),I0e.forEach(t),zDo=i(qo),u1=n(qo,"LI",{});var N0e=s(u1);gde=n(N0e,"STRONG",{});var Nat=s(gde);WDo=r(Nat,"sew"),Nat.forEach(t),QDo=r(N0e," \u2014 "),GD=n(N0e,"A",{href:!0});var jat=s(GD);HDo=r(jat,"SEWForSequenceClassification"),jat.forEach(t),UDo=r(N0e," (SEW model)"),N0e.forEach(t),JDo=i(qo),p1=n(qo,"LI",{});var j0e=s(p1);hde=n(j0e,"STRONG",{});var Dat=s(hde);YDo=r(Dat,"sew-d"),Dat.forEach(t),KDo=r(j0e," \u2014 "),OD=n(j0e,"A",{href:!0});var qat=s(OD);ZDo=r(qat,"SEWDForSequenceClassification"),qat.forEach(t),eqo=r(j0e," (SEW-D model)"),j0e.forEach(t),oqo=i(qo),_1=n(qo,"LI",{});var D0e=s(_1);ude=n(D0e,"STRONG",{});var Gat=s(ude);rqo=r(Gat,"unispeech"),Gat.forEach(t),tqo=r(D0e," \u2014 "),XD=n(D0e,"A",{href:!0});var Oat=s(XD);aqo=r(Oat,"UniSpeechForSequenceClassification"),Oat.forEach(t),nqo=r(D0e," (UniSpeech model)"),D0e.forEach(t),sqo=i(qo),b1=n(qo,"LI",{});var q0e=s(b1);pde=n(q0e,"STRONG",{});var Xat=s(pde);lqo=r(Xat,"unispeech-sat"),Xat.forEach(t),iqo=r(q0e," \u2014 "),VD=n(q0e,"A",{href:!0});var Vat=s(VD);dqo=r(Vat,"UniSpeechSatForSequenceClassification"),Vat.forEach(t),cqo=r(q0e," (UniSpeechSat model)"),q0e.forEach(t),mqo=i(qo),v1=n(qo,"LI",{});var G0e=s(v1);_de=n(G0e,"STRONG",{});var zat=s(_de);fqo=r(zat,"wav2vec2"),zat.forEach(t),gqo=r(G0e," \u2014 "),zD=n(G0e,"A",{href:!0});var Wat=s(zD);hqo=r(Wat,"Wav2Vec2ForSequenceClassification"),Wat.forEach(t),uqo=r(G0e," (Wav2Vec2 model)"),G0e.forEach(t),pqo=i(qo),T1=n(qo,"LI",{});var O0e=s(T1);bde=n(O0e,"STRONG",{});var Qat=s(bde);_qo=r(Qat,"wavlm"),Qat.forEach(t),bqo=r(O0e," \u2014 "),WD=n(O0e,"A",{href:!0});var Hat=s(WD);vqo=r(Hat,"WavLMForSequenceClassification"),Hat.forEach(t),Tqo=r(O0e," (WavLM model)"),O0e.forEach(t),qo.forEach(t),Fqo=i(Zt),F1=n(Zt,"P",{});var X0e=s(F1);Cqo=r(X0e,"The model is set in evaluation mode by default using "),vde=n(X0e,"CODE",{});var Uat=s(vde);Mqo=r(Uat,"model.eval()"),Uat.forEach(t),Eqo=r(X0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=n(X0e,"CODE",{});var Jat=s(Tde);yqo=r(Jat,"model.train()"),Jat.forEach(t),X0e.forEach(t),wqo=i(Zt),Fde=n(Zt,"P",{});var Yat=s(Fde);Aqo=r(Yat,"Examples:"),Yat.forEach(t),Lqo=i(Zt),f(w6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Ske=i(c),jd=n(c,"H2",{class:!0});var OSe=s(jd);C1=n(OSe,"A",{id:!0,class:!0,href:!0});var Kat=s(C1);Cde=n(Kat,"SPAN",{});var Zat=s(Cde);f(A6.$$.fragment,Zat),Zat.forEach(t),Kat.forEach(t),Bqo=i(OSe),Mde=n(OSe,"SPAN",{});var ent=s(Mde);xqo=r(ent,"AutoModelForAudioFrameClassification"),ent.forEach(t),OSe.forEach(t),Pke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);f(L6.$$.fragment,Fl),kqo=i(Fl),Dd=n(Fl,"P",{});var vW=s(Dd);Rqo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ede=n(vW,"CODE",{});var ont=s(Ede);Sqo=r(ont,"from_pretrained()"),ont.forEach(t),Pqo=r(vW,"class method or the "),yde=n(vW,"CODE",{});var rnt=s(yde);$qo=r(rnt,"from_config()"),rnt.forEach(t),Iqo=r(vW,`class
method.`),vW.forEach(t),Nqo=i(Fl),B6=n(Fl,"P",{});var XSe=s(B6);jqo=r(XSe,"This class cannot be instantiated directly using "),wde=n(XSe,"CODE",{});var tnt=s(wde);Dqo=r(tnt,"__init__()"),tnt.forEach(t),qqo=r(XSe," (throws an error)."),XSe.forEach(t),Gqo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);f(x6.$$.fragment,Cl),Oqo=i(Cl),Ade=n(Cl,"P",{});var ant=s(Ade);Xqo=r(ant,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ant.forEach(t),Vqo=i(Cl),qd=n(Cl,"P",{});var TW=s(qd);zqo=r(TW,`Note:
Loading a model from its configuration file does `),Lde=n(TW,"STRONG",{});var nnt=s(Lde);Wqo=r(nnt,"not"),nnt.forEach(t),Qqo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bde=n(TW,"CODE",{});var snt=s(Bde);Hqo=r(snt,"from_pretrained()"),snt.forEach(t),Uqo=r(TW,"to load the model weights."),TW.forEach(t),Jqo=i(Cl),xde=n(Cl,"P",{});var lnt=s(xde);Yqo=r(lnt,"Examples:"),lnt.forEach(t),Kqo=i(Cl),f(k6.$$.fragment,Cl),Cl.forEach(t),Zqo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);f(R6.$$.fragment,ea),eGo=i(ea),kde=n(ea,"P",{});var int=s(kde);oGo=r(int,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),int.forEach(t),rGo=i(ea),an=n(ea,"P",{});var F5=s(an);tGo=r(F5,"The model class to instantiate is selected based on the "),Rde=n(F5,"CODE",{});var dnt=s(Rde);aGo=r(dnt,"model_type"),dnt.forEach(t),nGo=r(F5,` property of the config object (either
passed as an argument or loaded from `),Sde=n(F5,"CODE",{});var cnt=s(Sde);sGo=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),lGo=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=n(F5,"CODE",{});var mnt=s(Pde);iGo=r(mnt,"pretrained_model_name_or_path"),mnt.forEach(t),dGo=r(F5,":"),F5.forEach(t),cGo=i(ea),nn=n(ea,"UL",{});var C5=s(nn);M1=n(C5,"LI",{});var V0e=s(M1);$de=n(V0e,"STRONG",{});var fnt=s($de);mGo=r(fnt,"data2vec-audio"),fnt.forEach(t),fGo=r(V0e," \u2014 "),QD=n(V0e,"A",{href:!0});var gnt=s(QD);gGo=r(gnt,"Data2VecAudioForAudioFrameClassification"),gnt.forEach(t),hGo=r(V0e," (Data2VecAudio model)"),V0e.forEach(t),uGo=i(C5),E1=n(C5,"LI",{});var z0e=s(E1);Ide=n(z0e,"STRONG",{});var hnt=s(Ide);pGo=r(hnt,"unispeech-sat"),hnt.forEach(t),_Go=r(z0e," \u2014 "),HD=n(z0e,"A",{href:!0});var unt=s(HD);bGo=r(unt,"UniSpeechSatForAudioFrameClassification"),unt.forEach(t),vGo=r(z0e," (UniSpeechSat model)"),z0e.forEach(t),TGo=i(C5),y1=n(C5,"LI",{});var W0e=s(y1);Nde=n(W0e,"STRONG",{});var pnt=s(Nde);FGo=r(pnt,"wav2vec2"),pnt.forEach(t),CGo=r(W0e," \u2014 "),UD=n(W0e,"A",{href:!0});var _nt=s(UD);MGo=r(_nt,"Wav2Vec2ForAudioFrameClassification"),_nt.forEach(t),EGo=r(W0e," (Wav2Vec2 model)"),W0e.forEach(t),yGo=i(C5),w1=n(C5,"LI",{});var Q0e=s(w1);jde=n(Q0e,"STRONG",{});var bnt=s(jde);wGo=r(bnt,"wavlm"),bnt.forEach(t),AGo=r(Q0e," \u2014 "),JD=n(Q0e,"A",{href:!0});var vnt=s(JD);LGo=r(vnt,"WavLMForAudioFrameClassification"),vnt.forEach(t),BGo=r(Q0e," (WavLM model)"),Q0e.forEach(t),C5.forEach(t),xGo=i(ea),A1=n(ea,"P",{});var H0e=s(A1);kGo=r(H0e,"The model is set in evaluation mode by default using "),Dde=n(H0e,"CODE",{});var Tnt=s(Dde);RGo=r(Tnt,"model.eval()"),Tnt.forEach(t),SGo=r(H0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=n(H0e,"CODE",{});var Fnt=s(qde);PGo=r(Fnt,"model.train()"),Fnt.forEach(t),H0e.forEach(t),$Go=i(ea),Gde=n(ea,"P",{});var Cnt=s(Gde);IGo=r(Cnt,"Examples:"),Cnt.forEach(t),NGo=i(ea),f(S6.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),$ke=i(c),Gd=n(c,"H2",{class:!0});var VSe=s(Gd);L1=n(VSe,"A",{id:!0,class:!0,href:!0});var Mnt=s(L1);Ode=n(Mnt,"SPAN",{});var Ent=s(Ode);f(P6.$$.fragment,Ent),Ent.forEach(t),Mnt.forEach(t),jGo=i(VSe),Xde=n(VSe,"SPAN",{});var ynt=s(Xde);DGo=r(ynt,"AutoModelForCTC"),ynt.forEach(t),VSe.forEach(t),Ike=i(c),mr=n(c,"DIV",{class:!0});var Ml=s(mr);f($6.$$.fragment,Ml),qGo=i(Ml),Od=n(Ml,"P",{});var FW=s(Od);GGo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Vde=n(FW,"CODE",{});var wnt=s(Vde);OGo=r(wnt,"from_pretrained()"),wnt.forEach(t),XGo=r(FW,"class method or the "),zde=n(FW,"CODE",{});var Ant=s(zde);VGo=r(Ant,"from_config()"),Ant.forEach(t),zGo=r(FW,`class
method.`),FW.forEach(t),WGo=i(Ml),I6=n(Ml,"P",{});var zSe=s(I6);QGo=r(zSe,"This class cannot be instantiated directly using "),Wde=n(zSe,"CODE",{});var Lnt=s(Wde);HGo=r(Lnt,"__init__()"),Lnt.forEach(t),UGo=r(zSe," (throws an error)."),zSe.forEach(t),JGo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);f(N6.$$.fragment,El),YGo=i(El),Qde=n(El,"P",{});var Bnt=s(Qde);KGo=r(Bnt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bnt.forEach(t),ZGo=i(El),Xd=n(El,"P",{});var CW=s(Xd);eOo=r(CW,`Note:
Loading a model from its configuration file does `),Hde=n(CW,"STRONG",{});var xnt=s(Hde);oOo=r(xnt,"not"),xnt.forEach(t),rOo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ude=n(CW,"CODE",{});var knt=s(Ude);tOo=r(knt,"from_pretrained()"),knt.forEach(t),aOo=r(CW,"to load the model weights."),CW.forEach(t),nOo=i(El),Jde=n(El,"P",{});var Rnt=s(Jde);sOo=r(Rnt,"Examples:"),Rnt.forEach(t),lOo=i(El),f(j6.$$.fragment,El),El.forEach(t),iOo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);f(D6.$$.fragment,oa),dOo=i(oa),Yde=n(oa,"P",{});var Snt=s(Yde);cOo=r(Snt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Snt.forEach(t),mOo=i(oa),sn=n(oa,"P",{});var M5=s(sn);fOo=r(M5,"The model class to instantiate is selected based on the "),Kde=n(M5,"CODE",{});var Pnt=s(Kde);gOo=r(Pnt,"model_type"),Pnt.forEach(t),hOo=r(M5,` property of the config object (either
passed as an argument or loaded from `),Zde=n(M5,"CODE",{});var $nt=s(Zde);uOo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),pOo=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=n(M5,"CODE",{});var Int=s(ece);_Oo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),bOo=r(M5,":"),M5.forEach(t),vOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);B1=n(Go,"LI",{});var U0e=s(B1);oce=n(U0e,"STRONG",{});var Nnt=s(oce);TOo=r(Nnt,"data2vec-audio"),Nnt.forEach(t),FOo=r(U0e," \u2014 "),YD=n(U0e,"A",{href:!0});var jnt=s(YD);COo=r(jnt,"Data2VecAudioForCTC"),jnt.forEach(t),MOo=r(U0e," (Data2VecAudio model)"),U0e.forEach(t),EOo=i(Go),x1=n(Go,"LI",{});var J0e=s(x1);rce=n(J0e,"STRONG",{});var Dnt=s(rce);yOo=r(Dnt,"hubert"),Dnt.forEach(t),wOo=r(J0e," \u2014 "),KD=n(J0e,"A",{href:!0});var qnt=s(KD);AOo=r(qnt,"HubertForCTC"),qnt.forEach(t),LOo=r(J0e," (Hubert model)"),J0e.forEach(t),BOo=i(Go),k1=n(Go,"LI",{});var Y0e=s(k1);tce=n(Y0e,"STRONG",{});var Gnt=s(tce);xOo=r(Gnt,"sew"),Gnt.forEach(t),kOo=r(Y0e," \u2014 "),ZD=n(Y0e,"A",{href:!0});var Ont=s(ZD);ROo=r(Ont,"SEWForCTC"),Ont.forEach(t),SOo=r(Y0e," (SEW model)"),Y0e.forEach(t),POo=i(Go),R1=n(Go,"LI",{});var K0e=s(R1);ace=n(K0e,"STRONG",{});var Xnt=s(ace);$Oo=r(Xnt,"sew-d"),Xnt.forEach(t),IOo=r(K0e," \u2014 "),eq=n(K0e,"A",{href:!0});var Vnt=s(eq);NOo=r(Vnt,"SEWDForCTC"),Vnt.forEach(t),jOo=r(K0e," (SEW-D model)"),K0e.forEach(t),DOo=i(Go),S1=n(Go,"LI",{});var Z0e=s(S1);nce=n(Z0e,"STRONG",{});var znt=s(nce);qOo=r(znt,"unispeech"),znt.forEach(t),GOo=r(Z0e," \u2014 "),oq=n(Z0e,"A",{href:!0});var Wnt=s(oq);OOo=r(Wnt,"UniSpeechForCTC"),Wnt.forEach(t),XOo=r(Z0e," (UniSpeech model)"),Z0e.forEach(t),VOo=i(Go),P1=n(Go,"LI",{});var eLe=s(P1);sce=n(eLe,"STRONG",{});var Qnt=s(sce);zOo=r(Qnt,"unispeech-sat"),Qnt.forEach(t),WOo=r(eLe," \u2014 "),rq=n(eLe,"A",{href:!0});var Hnt=s(rq);QOo=r(Hnt,"UniSpeechSatForCTC"),Hnt.forEach(t),HOo=r(eLe," (UniSpeechSat model)"),eLe.forEach(t),UOo=i(Go),$1=n(Go,"LI",{});var oLe=s($1);lce=n(oLe,"STRONG",{});var Unt=s(lce);JOo=r(Unt,"wav2vec2"),Unt.forEach(t),YOo=r(oLe," \u2014 "),tq=n(oLe,"A",{href:!0});var Jnt=s(tq);KOo=r(Jnt,"Wav2Vec2ForCTC"),Jnt.forEach(t),ZOo=r(oLe," (Wav2Vec2 model)"),oLe.forEach(t),eXo=i(Go),I1=n(Go,"LI",{});var rLe=s(I1);ice=n(rLe,"STRONG",{});var Ynt=s(ice);oXo=r(Ynt,"wavlm"),Ynt.forEach(t),rXo=r(rLe," \u2014 "),aq=n(rLe,"A",{href:!0});var Knt=s(aq);tXo=r(Knt,"WavLMForCTC"),Knt.forEach(t),aXo=r(rLe," (WavLM model)"),rLe.forEach(t),Go.forEach(t),nXo=i(oa),N1=n(oa,"P",{});var tLe=s(N1);sXo=r(tLe,"The model is set in evaluation mode by default using "),dce=n(tLe,"CODE",{});var Znt=s(dce);lXo=r(Znt,"model.eval()"),Znt.forEach(t),iXo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=n(tLe,"CODE",{});var est=s(cce);dXo=r(est,"model.train()"),est.forEach(t),tLe.forEach(t),cXo=i(oa),mce=n(oa,"P",{});var ost=s(mce);mXo=r(ost,"Examples:"),ost.forEach(t),fXo=i(oa),f(q6.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Nke=i(c),Vd=n(c,"H2",{class:!0});var WSe=s(Vd);j1=n(WSe,"A",{id:!0,class:!0,href:!0});var rst=s(j1);fce=n(rst,"SPAN",{});var tst=s(fce);f(G6.$$.fragment,tst),tst.forEach(t),rst.forEach(t),gXo=i(WSe),gce=n(WSe,"SPAN",{});var ast=s(gce);hXo=r(ast,"AutoModelForSpeechSeq2Seq"),ast.forEach(t),WSe.forEach(t),jke=i(c),fr=n(c,"DIV",{class:!0});var yl=s(fr);f(O6.$$.fragment,yl),uXo=i(yl),zd=n(yl,"P",{});var MW=s(zd);pXo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hce=n(MW,"CODE",{});var nst=s(hce);_Xo=r(nst,"from_pretrained()"),nst.forEach(t),bXo=r(MW,"class method or the "),uce=n(MW,"CODE",{});var sst=s(uce);vXo=r(sst,"from_config()"),sst.forEach(t),TXo=r(MW,`class
method.`),MW.forEach(t),FXo=i(yl),X6=n(yl,"P",{});var QSe=s(X6);CXo=r(QSe,"This class cannot be instantiated directly using "),pce=n(QSe,"CODE",{});var lst=s(pce);MXo=r(lst,"__init__()"),lst.forEach(t),EXo=r(QSe," (throws an error)."),QSe.forEach(t),yXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);f(V6.$$.fragment,wl),wXo=i(wl),_ce=n(wl,"P",{});var ist=s(_ce);AXo=r(ist,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ist.forEach(t),LXo=i(wl),Wd=n(wl,"P",{});var EW=s(Wd);BXo=r(EW,`Note:
Loading a model from its configuration file does `),bce=n(EW,"STRONG",{});var dst=s(bce);xXo=r(dst,"not"),dst.forEach(t),kXo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=n(EW,"CODE",{});var cst=s(vce);RXo=r(cst,"from_pretrained()"),cst.forEach(t),SXo=r(EW,"to load the model weights."),EW.forEach(t),PXo=i(wl),Tce=n(wl,"P",{});var mst=s(Tce);$Xo=r(mst,"Examples:"),mst.forEach(t),IXo=i(wl),f(z6.$$.fragment,wl),wl.forEach(t),NXo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);f(W6.$$.fragment,ra),jXo=i(ra),Fce=n(ra,"P",{});var fst=s(Fce);DXo=r(fst,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fst.forEach(t),qXo=i(ra),ln=n(ra,"P",{});var E5=s(ln);GXo=r(E5,"The model class to instantiate is selected based on the "),Cce=n(E5,"CODE",{});var gst=s(Cce);OXo=r(gst,"model_type"),gst.forEach(t),XXo=r(E5,` property of the config object (either
passed as an argument or loaded from `),Mce=n(E5,"CODE",{});var hst=s(Mce);VXo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),zXo=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=n(E5,"CODE",{});var ust=s(Ece);WXo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),QXo=r(E5,":"),E5.forEach(t),HXo=i(ra),Q6=n(ra,"UL",{});var HSe=s(Q6);D1=n(HSe,"LI",{});var aLe=s(D1);yce=n(aLe,"STRONG",{});var pst=s(yce);UXo=r(pst,"speech-encoder-decoder"),pst.forEach(t),JXo=r(aLe," \u2014 "),nq=n(aLe,"A",{href:!0});var _st=s(nq);YXo=r(_st,"SpeechEncoderDecoderModel"),_st.forEach(t),KXo=r(aLe," (Speech Encoder decoder model)"),aLe.forEach(t),ZXo=i(HSe),q1=n(HSe,"LI",{});var nLe=s(q1);wce=n(nLe,"STRONG",{});var bst=s(wce);eVo=r(bst,"speech_to_text"),bst.forEach(t),oVo=r(nLe," \u2014 "),sq=n(nLe,"A",{href:!0});var vst=s(sq);rVo=r(vst,"Speech2TextForConditionalGeneration"),vst.forEach(t),tVo=r(nLe," (Speech2Text model)"),nLe.forEach(t),HSe.forEach(t),aVo=i(ra),G1=n(ra,"P",{});var sLe=s(G1);nVo=r(sLe,"The model is set in evaluation mode by default using "),Ace=n(sLe,"CODE",{});var Tst=s(Ace);sVo=r(Tst,"model.eval()"),Tst.forEach(t),lVo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(sLe,"CODE",{});var Fst=s(Lce);iVo=r(Fst,"model.train()"),Fst.forEach(t),sLe.forEach(t),dVo=i(ra),Bce=n(ra,"P",{});var Cst=s(Bce);cVo=r(Cst,"Examples:"),Cst.forEach(t),mVo=i(ra),f(H6.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Dke=i(c),Qd=n(c,"H2",{class:!0});var USe=s(Qd);O1=n(USe,"A",{id:!0,class:!0,href:!0});var Mst=s(O1);xce=n(Mst,"SPAN",{});var Est=s(xce);f(U6.$$.fragment,Est),Est.forEach(t),Mst.forEach(t),fVo=i(USe),kce=n(USe,"SPAN",{});var yst=s(kce);gVo=r(yst,"AutoModelForAudioXVector"),yst.forEach(t),USe.forEach(t),qke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);f(J6.$$.fragment,Al),hVo=i(Al),Hd=n(Al,"P",{});var yW=s(Hd);uVo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Rce=n(yW,"CODE",{});var wst=s(Rce);pVo=r(wst,"from_pretrained()"),wst.forEach(t),_Vo=r(yW,"class method or the "),Sce=n(yW,"CODE",{});var Ast=s(Sce);bVo=r(Ast,"from_config()"),Ast.forEach(t),vVo=r(yW,`class
method.`),yW.forEach(t),TVo=i(Al),Y6=n(Al,"P",{});var JSe=s(Y6);FVo=r(JSe,"This class cannot be instantiated directly using "),Pce=n(JSe,"CODE",{});var Lst=s(Pce);CVo=r(Lst,"__init__()"),Lst.forEach(t),MVo=r(JSe," (throws an error)."),JSe.forEach(t),EVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);f(K6.$$.fragment,Ll),yVo=i(Ll),$ce=n(Ll,"P",{});var Bst=s($ce);wVo=r(Bst,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Bst.forEach(t),AVo=i(Ll),Ud=n(Ll,"P",{});var wW=s(Ud);LVo=r(wW,`Note:
Loading a model from its configuration file does `),Ice=n(wW,"STRONG",{});var xst=s(Ice);BVo=r(xst,"not"),xst.forEach(t),xVo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=n(wW,"CODE",{});var kst=s(Nce);kVo=r(kst,"from_pretrained()"),kst.forEach(t),RVo=r(wW,"to load the model weights."),wW.forEach(t),SVo=i(Ll),jce=n(Ll,"P",{});var Rst=s(jce);PVo=r(Rst,"Examples:"),Rst.forEach(t),$Vo=i(Ll),f(Z6.$$.fragment,Ll),Ll.forEach(t),IVo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);f(eA.$$.fragment,ta),NVo=i(ta),Dce=n(ta,"P",{});var Sst=s(Dce);jVo=r(Sst,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Sst.forEach(t),DVo=i(ta),dn=n(ta,"P",{});var y5=s(dn);qVo=r(y5,"The model class to instantiate is selected based on the "),qce=n(y5,"CODE",{});var Pst=s(qce);GVo=r(Pst,"model_type"),Pst.forEach(t),OVo=r(y5,` property of the config object (either
passed as an argument or loaded from `),Gce=n(y5,"CODE",{});var $st=s(Gce);XVo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),VVo=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(y5,"CODE",{});var Ist=s(Oce);zVo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),WVo=r(y5,":"),y5.forEach(t),QVo=i(ta),cn=n(ta,"UL",{});var w5=s(cn);X1=n(w5,"LI",{});var lLe=s(X1);Xce=n(lLe,"STRONG",{});var Nst=s(Xce);HVo=r(Nst,"data2vec-audio"),Nst.forEach(t),UVo=r(lLe," \u2014 "),lq=n(lLe,"A",{href:!0});var jst=s(lq);JVo=r(jst,"Data2VecAudioForXVector"),jst.forEach(t),YVo=r(lLe," (Data2VecAudio model)"),lLe.forEach(t),KVo=i(w5),V1=n(w5,"LI",{});var iLe=s(V1);Vce=n(iLe,"STRONG",{});var Dst=s(Vce);ZVo=r(Dst,"unispeech-sat"),Dst.forEach(t),ezo=r(iLe," \u2014 "),iq=n(iLe,"A",{href:!0});var qst=s(iq);ozo=r(qst,"UniSpeechSatForXVector"),qst.forEach(t),rzo=r(iLe," (UniSpeechSat model)"),iLe.forEach(t),tzo=i(w5),z1=n(w5,"LI",{});var dLe=s(z1);zce=n(dLe,"STRONG",{});var Gst=s(zce);azo=r(Gst,"wav2vec2"),Gst.forEach(t),nzo=r(dLe," \u2014 "),dq=n(dLe,"A",{href:!0});var Ost=s(dq);szo=r(Ost,"Wav2Vec2ForXVector"),Ost.forEach(t),lzo=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),izo=i(w5),W1=n(w5,"LI",{});var cLe=s(W1);Wce=n(cLe,"STRONG",{});var Xst=s(Wce);dzo=r(Xst,"wavlm"),Xst.forEach(t),czo=r(cLe," \u2014 "),cq=n(cLe,"A",{href:!0});var Vst=s(cq);mzo=r(Vst,"WavLMForXVector"),Vst.forEach(t),fzo=r(cLe," (WavLM model)"),cLe.forEach(t),w5.forEach(t),gzo=i(ta),Q1=n(ta,"P",{});var mLe=s(Q1);hzo=r(mLe,"The model is set in evaluation mode by default using "),Qce=n(mLe,"CODE",{});var zst=s(Qce);uzo=r(zst,"model.eval()"),zst.forEach(t),pzo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=n(mLe,"CODE",{});var Wst=s(Hce);_zo=r(Wst,"model.train()"),Wst.forEach(t),mLe.forEach(t),bzo=i(ta),Uce=n(ta,"P",{});var Qst=s(Uce);vzo=r(Qst,"Examples:"),Qst.forEach(t),Tzo=i(ta),f(oA.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Gke=i(c),Jd=n(c,"H2",{class:!0});var YSe=s(Jd);H1=n(YSe,"A",{id:!0,class:!0,href:!0});var Hst=s(H1);Jce=n(Hst,"SPAN",{});var Ust=s(Jce);f(rA.$$.fragment,Ust),Ust.forEach(t),Hst.forEach(t),Fzo=i(YSe),Yce=n(YSe,"SPAN",{});var Jst=s(Yce);Czo=r(Jst,"AutoModelForMaskedImageModeling"),Jst.forEach(t),YSe.forEach(t),Oke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);f(tA.$$.fragment,Bl),Mzo=i(Bl),Yd=n(Bl,"P",{});var AW=s(Yd);Ezo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Kce=n(AW,"CODE",{});var Yst=s(Kce);yzo=r(Yst,"from_pretrained()"),Yst.forEach(t),wzo=r(AW,"class method or the "),Zce=n(AW,"CODE",{});var Kst=s(Zce);Azo=r(Kst,"from_config()"),Kst.forEach(t),Lzo=r(AW,`class
method.`),AW.forEach(t),Bzo=i(Bl),aA=n(Bl,"P",{});var KSe=s(aA);xzo=r(KSe,"This class cannot be instantiated directly using "),eme=n(KSe,"CODE",{});var Zst=s(eme);kzo=r(Zst,"__init__()"),Zst.forEach(t),Rzo=r(KSe," (throws an error)."),KSe.forEach(t),Szo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);f(nA.$$.fragment,xl),Pzo=i(xl),ome=n(xl,"P",{});var elt=s(ome);$zo=r(elt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),elt.forEach(t),Izo=i(xl),Kd=n(xl,"P",{});var LW=s(Kd);Nzo=r(LW,`Note:
Loading a model from its configuration file does `),rme=n(LW,"STRONG",{});var olt=s(rme);jzo=r(olt,"not"),olt.forEach(t),Dzo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tme=n(LW,"CODE",{});var rlt=s(tme);qzo=r(rlt,"from_pretrained()"),rlt.forEach(t),Gzo=r(LW,"to load the model weights."),LW.forEach(t),Ozo=i(xl),ame=n(xl,"P",{});var tlt=s(ame);Xzo=r(tlt,"Examples:"),tlt.forEach(t),Vzo=i(xl),f(sA.$$.fragment,xl),xl.forEach(t),zzo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);f(lA.$$.fragment,aa),Wzo=i(aa),nme=n(aa,"P",{});var alt=s(nme);Qzo=r(alt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),alt.forEach(t),Hzo=i(aa),mn=n(aa,"P",{});var A5=s(mn);Uzo=r(A5,"The model class to instantiate is selected based on the "),sme=n(A5,"CODE",{});var nlt=s(sme);Jzo=r(nlt,"model_type"),nlt.forEach(t),Yzo=r(A5,` property of the config object (either
passed as an argument or loaded from `),lme=n(A5,"CODE",{});var slt=s(lme);Kzo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),Zzo=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(A5,"CODE",{});var llt=s(ime);eWo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),oWo=r(A5,":"),A5.forEach(t),rWo=i(aa),Zd=n(aa,"UL",{});var BW=s(Zd);U1=n(BW,"LI",{});var fLe=s(U1);dme=n(fLe,"STRONG",{});var ilt=s(dme);tWo=r(ilt,"deit"),ilt.forEach(t),aWo=r(fLe," \u2014 "),mq=n(fLe,"A",{href:!0});var dlt=s(mq);nWo=r(dlt,"DeiTForMaskedImageModeling"),dlt.forEach(t),sWo=r(fLe," (DeiT model)"),fLe.forEach(t),lWo=i(BW),J1=n(BW,"LI",{});var gLe=s(J1);cme=n(gLe,"STRONG",{});var clt=s(cme);iWo=r(clt,"swin"),clt.forEach(t),dWo=r(gLe," \u2014 "),fq=n(gLe,"A",{href:!0});var mlt=s(fq);cWo=r(mlt,"SwinForMaskedImageModeling"),mlt.forEach(t),mWo=r(gLe," (Swin model)"),gLe.forEach(t),fWo=i(BW),Y1=n(BW,"LI",{});var hLe=s(Y1);mme=n(hLe,"STRONG",{});var flt=s(mme);gWo=r(flt,"vit"),flt.forEach(t),hWo=r(hLe," \u2014 "),gq=n(hLe,"A",{href:!0});var glt=s(gq);uWo=r(glt,"ViTForMaskedImageModeling"),glt.forEach(t),pWo=r(hLe," (ViT model)"),hLe.forEach(t),BW.forEach(t),_Wo=i(aa),K1=n(aa,"P",{});var uLe=s(K1);bWo=r(uLe,"The model is set in evaluation mode by default using "),fme=n(uLe,"CODE",{});var hlt=s(fme);vWo=r(hlt,"model.eval()"),hlt.forEach(t),TWo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(uLe,"CODE",{});var ult=s(gme);FWo=r(ult,"model.train()"),ult.forEach(t),uLe.forEach(t),CWo=i(aa),hme=n(aa,"P",{});var plt=s(hme);MWo=r(plt,"Examples:"),plt.forEach(t),EWo=i(aa),f(iA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Xke=i(c),ec=n(c,"H2",{class:!0});var ZSe=s(ec);Z1=n(ZSe,"A",{id:!0,class:!0,href:!0});var _lt=s(Z1);ume=n(_lt,"SPAN",{});var blt=s(ume);f(dA.$$.fragment,blt),blt.forEach(t),_lt.forEach(t),yWo=i(ZSe),pme=n(ZSe,"SPAN",{});var vlt=s(pme);wWo=r(vlt,"AutoModelForObjectDetection"),vlt.forEach(t),ZSe.forEach(t),Vke=i(c),ur=n(c,"DIV",{class:!0});var kl=s(ur);f(cA.$$.fragment,kl),AWo=i(kl),oc=n(kl,"P",{});var xW=s(oc);LWo=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_me=n(xW,"CODE",{});var Tlt=s(_me);BWo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),xWo=r(xW,"class method or the "),bme=n(xW,"CODE",{});var Flt=s(bme);kWo=r(Flt,"from_config()"),Flt.forEach(t),RWo=r(xW,`class
method.`),xW.forEach(t),SWo=i(kl),mA=n(kl,"P",{});var ePe=s(mA);PWo=r(ePe,"This class cannot be instantiated directly using "),vme=n(ePe,"CODE",{});var Clt=s(vme);$Wo=r(Clt,"__init__()"),Clt.forEach(t),IWo=r(ePe," (throws an error)."),ePe.forEach(t),NWo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);f(fA.$$.fragment,Rl),jWo=i(Rl),Tme=n(Rl,"P",{});var Mlt=s(Tme);DWo=r(Mlt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mlt.forEach(t),qWo=i(Rl),rc=n(Rl,"P",{});var kW=s(rc);GWo=r(kW,`Note:
Loading a model from its configuration file does `),Fme=n(kW,"STRONG",{});var Elt=s(Fme);OWo=r(Elt,"not"),Elt.forEach(t),XWo=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=n(kW,"CODE",{});var ylt=s(Cme);VWo=r(ylt,"from_pretrained()"),ylt.forEach(t),zWo=r(kW,"to load the model weights."),kW.forEach(t),WWo=i(Rl),Mme=n(Rl,"P",{});var wlt=s(Mme);QWo=r(wlt,"Examples:"),wlt.forEach(t),HWo=i(Rl),f(gA.$$.fragment,Rl),Rl.forEach(t),UWo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);f(hA.$$.fragment,na),JWo=i(na),Eme=n(na,"P",{});var Alt=s(Eme);YWo=r(Alt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Alt.forEach(t),KWo=i(na),fn=n(na,"P",{});var L5=s(fn);ZWo=r(L5,"The model class to instantiate is selected based on the "),yme=n(L5,"CODE",{});var Llt=s(yme);eQo=r(Llt,"model_type"),Llt.forEach(t),oQo=r(L5,` property of the config object (either
passed as an argument or loaded from `),wme=n(L5,"CODE",{});var Blt=s(wme);rQo=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),tQo=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(L5,"CODE",{});var xlt=s(Ame);aQo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),nQo=r(L5,":"),L5.forEach(t),sQo=i(na),Lme=n(na,"UL",{});var klt=s(Lme);eF=n(klt,"LI",{});var pLe=s(eF);Bme=n(pLe,"STRONG",{});var Rlt=s(Bme);lQo=r(Rlt,"detr"),Rlt.forEach(t),iQo=r(pLe," \u2014 "),hq=n(pLe,"A",{href:!0});var Slt=s(hq);dQo=r(Slt,"DetrForObjectDetection"),Slt.forEach(t),cQo=r(pLe," (DETR model)"),pLe.forEach(t),klt.forEach(t),mQo=i(na),oF=n(na,"P",{});var _Le=s(oF);fQo=r(_Le,"The model is set in evaluation mode by default using "),xme=n(_Le,"CODE",{});var Plt=s(xme);gQo=r(Plt,"model.eval()"),Plt.forEach(t),hQo=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(_Le,"CODE",{});var $lt=s(kme);uQo=r($lt,"model.train()"),$lt.forEach(t),_Le.forEach(t),pQo=i(na),Rme=n(na,"P",{});var Ilt=s(Rme);_Qo=r(Ilt,"Examples:"),Ilt.forEach(t),bQo=i(na),f(uA.$$.fragment,na),na.forEach(t),kl.forEach(t),zke=i(c),tc=n(c,"H2",{class:!0});var oPe=s(tc);rF=n(oPe,"A",{id:!0,class:!0,href:!0});var Nlt=s(rF);Sme=n(Nlt,"SPAN",{});var jlt=s(Sme);f(pA.$$.fragment,jlt),jlt.forEach(t),Nlt.forEach(t),vQo=i(oPe),Pme=n(oPe,"SPAN",{});var Dlt=s(Pme);TQo=r(Dlt,"AutoModelForImageSegmentation"),Dlt.forEach(t),oPe.forEach(t),Wke=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);f(_A.$$.fragment,Sl),FQo=i(Sl),ac=n(Sl,"P",{});var RW=s(ac);CQo=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),$me=n(RW,"CODE",{});var qlt=s($me);MQo=r(qlt,"from_pretrained()"),qlt.forEach(t),EQo=r(RW,"class method or the "),Ime=n(RW,"CODE",{});var Glt=s(Ime);yQo=r(Glt,"from_config()"),Glt.forEach(t),wQo=r(RW,`class
method.`),RW.forEach(t),AQo=i(Sl),bA=n(Sl,"P",{});var rPe=s(bA);LQo=r(rPe,"This class cannot be instantiated directly using "),Nme=n(rPe,"CODE",{});var Olt=s(Nme);BQo=r(Olt,"__init__()"),Olt.forEach(t),xQo=r(rPe," (throws an error)."),rPe.forEach(t),kQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);f(vA.$$.fragment,Pl),RQo=i(Pl),jme=n(Pl,"P",{});var Xlt=s(jme);SQo=r(Xlt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Xlt.forEach(t),PQo=i(Pl),nc=n(Pl,"P",{});var SW=s(nc);$Qo=r(SW,`Note:
Loading a model from its configuration file does `),Dme=n(SW,"STRONG",{});var Vlt=s(Dme);IQo=r(Vlt,"not"),Vlt.forEach(t),NQo=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=n(SW,"CODE",{});var zlt=s(qme);jQo=r(zlt,"from_pretrained()"),zlt.forEach(t),DQo=r(SW,"to load the model weights."),SW.forEach(t),qQo=i(Pl),Gme=n(Pl,"P",{});var Wlt=s(Gme);GQo=r(Wlt,"Examples:"),Wlt.forEach(t),OQo=i(Pl),f(TA.$$.fragment,Pl),Pl.forEach(t),XQo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);f(FA.$$.fragment,sa),VQo=i(sa),Ome=n(sa,"P",{});var Qlt=s(Ome);zQo=r(Qlt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qlt.forEach(t),WQo=i(sa),gn=n(sa,"P",{});var B5=s(gn);QQo=r(B5,"The model class to instantiate is selected based on the "),Xme=n(B5,"CODE",{});var Hlt=s(Xme);HQo=r(Hlt,"model_type"),Hlt.forEach(t),UQo=r(B5,` property of the config object (either
passed as an argument or loaded from `),Vme=n(B5,"CODE",{});var Ult=s(Vme);JQo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),YQo=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(B5,"CODE",{});var Jlt=s(zme);KQo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),ZQo=r(B5,":"),B5.forEach(t),eHo=i(sa),Wme=n(sa,"UL",{});var Ylt=s(Wme);tF=n(Ylt,"LI",{});var bLe=s(tF);Qme=n(bLe,"STRONG",{});var Klt=s(Qme);oHo=r(Klt,"detr"),Klt.forEach(t),rHo=r(bLe," \u2014 "),uq=n(bLe,"A",{href:!0});var Zlt=s(uq);tHo=r(Zlt,"DetrForSegmentation"),Zlt.forEach(t),aHo=r(bLe," (DETR model)"),bLe.forEach(t),Ylt.forEach(t),nHo=i(sa),aF=n(sa,"P",{});var vLe=s(aF);sHo=r(vLe,"The model is set in evaluation mode by default using "),Hme=n(vLe,"CODE",{});var eit=s(Hme);lHo=r(eit,"model.eval()"),eit.forEach(t),iHo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(vLe,"CODE",{});var oit=s(Ume);dHo=r(oit,"model.train()"),oit.forEach(t),vLe.forEach(t),cHo=i(sa),Jme=n(sa,"P",{});var rit=s(Jme);mHo=r(rit,"Examples:"),rit.forEach(t),fHo=i(sa),f(CA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),Qke=i(c),sc=n(c,"H2",{class:!0});var tPe=s(sc);nF=n(tPe,"A",{id:!0,class:!0,href:!0});var tit=s(nF);Yme=n(tit,"SPAN",{});var ait=s(Yme);f(MA.$$.fragment,ait),ait.forEach(t),tit.forEach(t),gHo=i(tPe),Kme=n(tPe,"SPAN",{});var nit=s(Kme);hHo=r(nit,"AutoModelForSemanticSegmentation"),nit.forEach(t),tPe.forEach(t),Hke=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);f(EA.$$.fragment,$l),uHo=i($l),lc=n($l,"P",{});var PW=s(lc);pHo=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Zme=n(PW,"CODE",{});var sit=s(Zme);_Ho=r(sit,"from_pretrained()"),sit.forEach(t),bHo=r(PW,"class method or the "),efe=n(PW,"CODE",{});var lit=s(efe);vHo=r(lit,"from_config()"),lit.forEach(t),THo=r(PW,`class
method.`),PW.forEach(t),FHo=i($l),yA=n($l,"P",{});var aPe=s(yA);CHo=r(aPe,"This class cannot be instantiated directly using "),ofe=n(aPe,"CODE",{});var iit=s(ofe);MHo=r(iit,"__init__()"),iit.forEach(t),EHo=r(aPe," (throws an error)."),aPe.forEach(t),yHo=i($l),mt=n($l,"DIV",{class:!0});var Il=s(mt);f(wA.$$.fragment,Il),wHo=i(Il),rfe=n(Il,"P",{});var dit=s(rfe);AHo=r(dit,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dit.forEach(t),LHo=i(Il),ic=n(Il,"P",{});var $W=s(ic);BHo=r($W,`Note:
Loading a model from its configuration file does `),tfe=n($W,"STRONG",{});var cit=s(tfe);xHo=r(cit,"not"),cit.forEach(t),kHo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=n($W,"CODE",{});var mit=s(afe);RHo=r(mit,"from_pretrained()"),mit.forEach(t),SHo=r($W,"to load the model weights."),$W.forEach(t),PHo=i(Il),nfe=n(Il,"P",{});var fit=s(nfe);$Ho=r(fit,"Examples:"),fit.forEach(t),IHo=i(Il),f(AA.$$.fragment,Il),Il.forEach(t),NHo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);f(LA.$$.fragment,la),jHo=i(la),sfe=n(la,"P",{});var git=s(sfe);DHo=r(git,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),git.forEach(t),qHo=i(la),hn=n(la,"P",{});var x5=s(hn);GHo=r(x5,"The model class to instantiate is selected based on the "),lfe=n(x5,"CODE",{});var hit=s(lfe);OHo=r(hit,"model_type"),hit.forEach(t),XHo=r(x5,` property of the config object (either
passed as an argument or loaded from `),ife=n(x5,"CODE",{});var uit=s(ife);VHo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),zHo=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(x5,"CODE",{});var pit=s(dfe);WHo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),QHo=r(x5,":"),x5.forEach(t),HHo=i(la),BA=n(la,"UL",{});var nPe=s(BA);sF=n(nPe,"LI",{});var TLe=s(sF);cfe=n(TLe,"STRONG",{});var _it=s(cfe);UHo=r(_it,"beit"),_it.forEach(t),JHo=r(TLe," \u2014 "),pq=n(TLe,"A",{href:!0});var bit=s(pq);YHo=r(bit,"BeitForSemanticSegmentation"),bit.forEach(t),KHo=r(TLe," (BEiT model)"),TLe.forEach(t),ZHo=i(nPe),lF=n(nPe,"LI",{});var FLe=s(lF);mfe=n(FLe,"STRONG",{});var vit=s(mfe);eUo=r(vit,"segformer"),vit.forEach(t),oUo=r(FLe," \u2014 "),_q=n(FLe,"A",{href:!0});var Tit=s(_q);rUo=r(Tit,"SegformerForSemanticSegmentation"),Tit.forEach(t),tUo=r(FLe," (SegFormer model)"),FLe.forEach(t),nPe.forEach(t),aUo=i(la),iF=n(la,"P",{});var CLe=s(iF);nUo=r(CLe,"The model is set in evaluation mode by default using "),ffe=n(CLe,"CODE",{});var Fit=s(ffe);sUo=r(Fit,"model.eval()"),Fit.forEach(t),lUo=r(CLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=n(CLe,"CODE",{});var Cit=s(gfe);iUo=r(Cit,"model.train()"),Cit.forEach(t),CLe.forEach(t),dUo=i(la),hfe=n(la,"P",{});var Mit=s(hfe);cUo=r(Mit,"Examples:"),Mit.forEach(t),mUo=i(la),f(xA.$$.fragment,la),la.forEach(t),$l.forEach(t),Uke=i(c),dc=n(c,"H2",{class:!0});var sPe=s(dc);dF=n(sPe,"A",{id:!0,class:!0,href:!0});var Eit=s(dF);ufe=n(Eit,"SPAN",{});var yit=s(ufe);f(kA.$$.fragment,yit),yit.forEach(t),Eit.forEach(t),fUo=i(sPe),pfe=n(sPe,"SPAN",{});var wit=s(pfe);gUo=r(wit,"AutoModelForInstanceSegmentation"),wit.forEach(t),sPe.forEach(t),Jke=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);f(RA.$$.fragment,Nl),hUo=i(Nl),cc=n(Nl,"P",{});var IW=s(cc);uUo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_fe=n(IW,"CODE",{});var Ait=s(_fe);pUo=r(Ait,"from_pretrained()"),Ait.forEach(t),_Uo=r(IW,"class method or the "),bfe=n(IW,"CODE",{});var Lit=s(bfe);bUo=r(Lit,"from_config()"),Lit.forEach(t),vUo=r(IW,`class
method.`),IW.forEach(t),TUo=i(Nl),SA=n(Nl,"P",{});var lPe=s(SA);FUo=r(lPe,"This class cannot be instantiated directly using "),vfe=n(lPe,"CODE",{});var Bit=s(vfe);CUo=r(Bit,"__init__()"),Bit.forEach(t),MUo=r(lPe," (throws an error)."),lPe.forEach(t),EUo=i(Nl),ft=n(Nl,"DIV",{class:!0});var jl=s(ft);f(PA.$$.fragment,jl),yUo=i(jl),Tfe=n(jl,"P",{});var xit=s(Tfe);wUo=r(xit,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xit.forEach(t),AUo=i(jl),mc=n(jl,"P",{});var NW=s(mc);LUo=r(NW,`Note:
Loading a model from its configuration file does `),Ffe=n(NW,"STRONG",{});var kit=s(Ffe);BUo=r(kit,"not"),kit.forEach(t),xUo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=n(NW,"CODE",{});var Rit=s(Cfe);kUo=r(Rit,"from_pretrained()"),Rit.forEach(t),RUo=r(NW,"to load the model weights."),NW.forEach(t),SUo=i(jl),Mfe=n(jl,"P",{});var Sit=s(Mfe);PUo=r(Sit,"Examples:"),Sit.forEach(t),$Uo=i(jl),f($A.$$.fragment,jl),jl.forEach(t),IUo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);f(IA.$$.fragment,ia),NUo=i(ia),Efe=n(ia,"P",{});var Pit=s(Efe);jUo=r(Pit,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Pit.forEach(t),DUo=i(ia),un=n(ia,"P",{});var k5=s(un);qUo=r(k5,"The model class to instantiate is selected based on the "),yfe=n(k5,"CODE",{});var $it=s(yfe);GUo=r($it,"model_type"),$it.forEach(t),OUo=r(k5,` property of the config object (either
passed as an argument or loaded from `),wfe=n(k5,"CODE",{});var Iit=s(wfe);XUo=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),VUo=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=n(k5,"CODE",{});var Nit=s(Afe);zUo=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),WUo=r(k5,":"),k5.forEach(t),QUo=i(ia),Lfe=n(ia,"UL",{});var jit=s(Lfe);cF=n(jit,"LI",{});var MLe=s(cF);Bfe=n(MLe,"STRONG",{});var Dit=s(Bfe);HUo=r(Dit,"maskformer"),Dit.forEach(t),UUo=r(MLe," \u2014 "),bq=n(MLe,"A",{href:!0});var qit=s(bq);JUo=r(qit,"MaskFormerForInstanceSegmentation"),qit.forEach(t),YUo=r(MLe," (MaskFormer model)"),MLe.forEach(t),jit.forEach(t),KUo=i(ia),mF=n(ia,"P",{});var ELe=s(mF);ZUo=r(ELe,"The model is set in evaluation mode by default using "),xfe=n(ELe,"CODE",{});var Git=s(xfe);eJo=r(Git,"model.eval()"),Git.forEach(t),oJo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(ELe,"CODE",{});var Oit=s(kfe);rJo=r(Oit,"model.train()"),Oit.forEach(t),ELe.forEach(t),tJo=i(ia),Rfe=n(ia,"P",{});var Xit=s(Rfe);aJo=r(Xit,"Examples:"),Xit.forEach(t),nJo=i(ia),f(NA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),Yke=i(c),fc=n(c,"H2",{class:!0});var iPe=s(fc);fF=n(iPe,"A",{id:!0,class:!0,href:!0});var Vit=s(fF);Sfe=n(Vit,"SPAN",{});var zit=s(Sfe);f(jA.$$.fragment,zit),zit.forEach(t),Vit.forEach(t),sJo=i(iPe),Pfe=n(iPe,"SPAN",{});var Wit=s(Pfe);lJo=r(Wit,"TFAutoModel"),Wit.forEach(t),iPe.forEach(t),Kke=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);f(DA.$$.fragment,Dl),iJo=i(Dl),gc=n(Dl,"P",{});var jW=s(gc);dJo=r(jW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$fe=n(jW,"CODE",{});var Qit=s($fe);cJo=r(Qit,"from_pretrained()"),Qit.forEach(t),mJo=r(jW,"class method or the "),Ife=n(jW,"CODE",{});var Hit=s(Ife);fJo=r(Hit,"from_config()"),Hit.forEach(t),gJo=r(jW,`class
method.`),jW.forEach(t),hJo=i(Dl),qA=n(Dl,"P",{});var dPe=s(qA);uJo=r(dPe,"This class cannot be instantiated directly using "),Nfe=n(dPe,"CODE",{});var Uit=s(Nfe);pJo=r(Uit,"__init__()"),Uit.forEach(t),_Jo=r(dPe," (throws an error)."),dPe.forEach(t),bJo=i(Dl),gt=n(Dl,"DIV",{class:!0});var ql=s(gt);f(GA.$$.fragment,ql),vJo=i(ql),jfe=n(ql,"P",{});var Jit=s(jfe);TJo=r(Jit,"Instantiates one of the base model classes of the library from a configuration."),Jit.forEach(t),FJo=i(ql),hc=n(ql,"P",{});var DW=s(hc);CJo=r(DW,`Note:
Loading a model from its configuration file does `),Dfe=n(DW,"STRONG",{});var Yit=s(Dfe);MJo=r(Yit,"not"),Yit.forEach(t),EJo=r(DW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=n(DW,"CODE",{});var Kit=s(qfe);yJo=r(Kit,"from_pretrained()"),Kit.forEach(t),wJo=r(DW,"to load the model weights."),DW.forEach(t),AJo=i(ql),Gfe=n(ql,"P",{});var Zit=s(Gfe);LJo=r(Zit,"Examples:"),Zit.forEach(t),BJo=i(ql),f(OA.$$.fragment,ql),ql.forEach(t),xJo=i(Dl),ho=n(Dl,"DIV",{class:!0});var ua=s(ho);f(XA.$$.fragment,ua),kJo=i(ua),Ofe=n(ua,"P",{});var edt=s(Ofe);RJo=r(edt,"Instantiate one of the base model classes of the library from a pretrained model."),edt.forEach(t),SJo=i(ua),pn=n(ua,"P",{});var R5=s(pn);PJo=r(R5,"The model class to instantiate is selected based on the "),Xfe=n(R5,"CODE",{});var odt=s(Xfe);$Jo=r(odt,"model_type"),odt.forEach(t),IJo=r(R5,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(R5,"CODE",{});var rdt=s(Vfe);NJo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),jJo=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(R5,"CODE",{});var tdt=s(zfe);DJo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),qJo=r(R5,":"),R5.forEach(t),GJo=i(ua),B=n(ua,"UL",{});var x=s(B);gF=n(x,"LI",{});var yLe=s(gF);Wfe=n(yLe,"STRONG",{});var adt=s(Wfe);OJo=r(adt,"albert"),adt.forEach(t),XJo=r(yLe," \u2014 "),vq=n(yLe,"A",{href:!0});var ndt=s(vq);VJo=r(ndt,"TFAlbertModel"),ndt.forEach(t),zJo=r(yLe," (ALBERT model)"),yLe.forEach(t),WJo=i(x),hF=n(x,"LI",{});var wLe=s(hF);Qfe=n(wLe,"STRONG",{});var sdt=s(Qfe);QJo=r(sdt,"bart"),sdt.forEach(t),HJo=r(wLe," \u2014 "),Tq=n(wLe,"A",{href:!0});var ldt=s(Tq);UJo=r(ldt,"TFBartModel"),ldt.forEach(t),JJo=r(wLe," (BART model)"),wLe.forEach(t),YJo=i(x),uF=n(x,"LI",{});var ALe=s(uF);Hfe=n(ALe,"STRONG",{});var idt=s(Hfe);KJo=r(idt,"bert"),idt.forEach(t),ZJo=r(ALe," \u2014 "),Fq=n(ALe,"A",{href:!0});var ddt=s(Fq);eYo=r(ddt,"TFBertModel"),ddt.forEach(t),oYo=r(ALe," (BERT model)"),ALe.forEach(t),rYo=i(x),pF=n(x,"LI",{});var LLe=s(pF);Ufe=n(LLe,"STRONG",{});var cdt=s(Ufe);tYo=r(cdt,"blenderbot"),cdt.forEach(t),aYo=r(LLe," \u2014 "),Cq=n(LLe,"A",{href:!0});var mdt=s(Cq);nYo=r(mdt,"TFBlenderbotModel"),mdt.forEach(t),sYo=r(LLe," (Blenderbot model)"),LLe.forEach(t),lYo=i(x),_F=n(x,"LI",{});var BLe=s(_F);Jfe=n(BLe,"STRONG",{});var fdt=s(Jfe);iYo=r(fdt,"blenderbot-small"),fdt.forEach(t),dYo=r(BLe," \u2014 "),Mq=n(BLe,"A",{href:!0});var gdt=s(Mq);cYo=r(gdt,"TFBlenderbotSmallModel"),gdt.forEach(t),mYo=r(BLe," (BlenderbotSmall model)"),BLe.forEach(t),fYo=i(x),bF=n(x,"LI",{});var xLe=s(bF);Yfe=n(xLe,"STRONG",{});var hdt=s(Yfe);gYo=r(hdt,"camembert"),hdt.forEach(t),hYo=r(xLe," \u2014 "),Eq=n(xLe,"A",{href:!0});var udt=s(Eq);uYo=r(udt,"TFCamembertModel"),udt.forEach(t),pYo=r(xLe," (CamemBERT model)"),xLe.forEach(t),_Yo=i(x),vF=n(x,"LI",{});var kLe=s(vF);Kfe=n(kLe,"STRONG",{});var pdt=s(Kfe);bYo=r(pdt,"clip"),pdt.forEach(t),vYo=r(kLe," \u2014 "),yq=n(kLe,"A",{href:!0});var _dt=s(yq);TYo=r(_dt,"TFCLIPModel"),_dt.forEach(t),FYo=r(kLe," (CLIP model)"),kLe.forEach(t),CYo=i(x),TF=n(x,"LI",{});var RLe=s(TF);Zfe=n(RLe,"STRONG",{});var bdt=s(Zfe);MYo=r(bdt,"convbert"),bdt.forEach(t),EYo=r(RLe," \u2014 "),wq=n(RLe,"A",{href:!0});var vdt=s(wq);yYo=r(vdt,"TFConvBertModel"),vdt.forEach(t),wYo=r(RLe," (ConvBERT model)"),RLe.forEach(t),AYo=i(x),FF=n(x,"LI",{});var SLe=s(FF);ege=n(SLe,"STRONG",{});var Tdt=s(ege);LYo=r(Tdt,"convnext"),Tdt.forEach(t),BYo=r(SLe," \u2014 "),Aq=n(SLe,"A",{href:!0});var Fdt=s(Aq);xYo=r(Fdt,"TFConvNextModel"),Fdt.forEach(t),kYo=r(SLe," (ConvNext model)"),SLe.forEach(t),RYo=i(x),CF=n(x,"LI",{});var PLe=s(CF);oge=n(PLe,"STRONG",{});var Cdt=s(oge);SYo=r(Cdt,"ctrl"),Cdt.forEach(t),PYo=r(PLe," \u2014 "),Lq=n(PLe,"A",{href:!0});var Mdt=s(Lq);$Yo=r(Mdt,"TFCTRLModel"),Mdt.forEach(t),IYo=r(PLe," (CTRL model)"),PLe.forEach(t),NYo=i(x),MF=n(x,"LI",{});var $Le=s(MF);rge=n($Le,"STRONG",{});var Edt=s(rge);jYo=r(Edt,"deberta"),Edt.forEach(t),DYo=r($Le," \u2014 "),Bq=n($Le,"A",{href:!0});var ydt=s(Bq);qYo=r(ydt,"TFDebertaModel"),ydt.forEach(t),GYo=r($Le," (DeBERTa model)"),$Le.forEach(t),OYo=i(x),EF=n(x,"LI",{});var ILe=s(EF);tge=n(ILe,"STRONG",{});var wdt=s(tge);XYo=r(wdt,"deberta-v2"),wdt.forEach(t),VYo=r(ILe," \u2014 "),xq=n(ILe,"A",{href:!0});var Adt=s(xq);zYo=r(Adt,"TFDebertaV2Model"),Adt.forEach(t),WYo=r(ILe," (DeBERTa-v2 model)"),ILe.forEach(t),QYo=i(x),yF=n(x,"LI",{});var NLe=s(yF);age=n(NLe,"STRONG",{});var Ldt=s(age);HYo=r(Ldt,"distilbert"),Ldt.forEach(t),UYo=r(NLe," \u2014 "),kq=n(NLe,"A",{href:!0});var Bdt=s(kq);JYo=r(Bdt,"TFDistilBertModel"),Bdt.forEach(t),YYo=r(NLe," (DistilBERT model)"),NLe.forEach(t),KYo=i(x),wF=n(x,"LI",{});var jLe=s(wF);nge=n(jLe,"STRONG",{});var xdt=s(nge);ZYo=r(xdt,"dpr"),xdt.forEach(t),eKo=r(jLe," \u2014 "),Rq=n(jLe,"A",{href:!0});var kdt=s(Rq);oKo=r(kdt,"TFDPRQuestionEncoder"),kdt.forEach(t),rKo=r(jLe," (DPR model)"),jLe.forEach(t),tKo=i(x),AF=n(x,"LI",{});var DLe=s(AF);sge=n(DLe,"STRONG",{});var Rdt=s(sge);aKo=r(Rdt,"electra"),Rdt.forEach(t),nKo=r(DLe," \u2014 "),Sq=n(DLe,"A",{href:!0});var Sdt=s(Sq);sKo=r(Sdt,"TFElectraModel"),Sdt.forEach(t),lKo=r(DLe," (ELECTRA model)"),DLe.forEach(t),iKo=i(x),LF=n(x,"LI",{});var qLe=s(LF);lge=n(qLe,"STRONG",{});var Pdt=s(lge);dKo=r(Pdt,"flaubert"),Pdt.forEach(t),cKo=r(qLe," \u2014 "),Pq=n(qLe,"A",{href:!0});var $dt=s(Pq);mKo=r($dt,"TFFlaubertModel"),$dt.forEach(t),fKo=r(qLe," (FlauBERT model)"),qLe.forEach(t),gKo=i(x),Gs=n(x,"LI",{});var U8=s(Gs);ige=n(U8,"STRONG",{});var Idt=s(ige);hKo=r(Idt,"funnel"),Idt.forEach(t),uKo=r(U8," \u2014 "),$q=n(U8,"A",{href:!0});var Ndt=s($q);pKo=r(Ndt,"TFFunnelModel"),Ndt.forEach(t),_Ko=r(U8," or "),Iq=n(U8,"A",{href:!0});var jdt=s(Iq);bKo=r(jdt,"TFFunnelBaseModel"),jdt.forEach(t),vKo=r(U8," (Funnel Transformer model)"),U8.forEach(t),TKo=i(x),BF=n(x,"LI",{});var GLe=s(BF);dge=n(GLe,"STRONG",{});var Ddt=s(dge);FKo=r(Ddt,"gpt2"),Ddt.forEach(t),CKo=r(GLe," \u2014 "),Nq=n(GLe,"A",{href:!0});var qdt=s(Nq);MKo=r(qdt,"TFGPT2Model"),qdt.forEach(t),EKo=r(GLe," (OpenAI GPT-2 model)"),GLe.forEach(t),yKo=i(x),xF=n(x,"LI",{});var OLe=s(xF);cge=n(OLe,"STRONG",{});var Gdt=s(cge);wKo=r(Gdt,"hubert"),Gdt.forEach(t),AKo=r(OLe," \u2014 "),jq=n(OLe,"A",{href:!0});var Odt=s(jq);LKo=r(Odt,"TFHubertModel"),Odt.forEach(t),BKo=r(OLe," (Hubert model)"),OLe.forEach(t),xKo=i(x),kF=n(x,"LI",{});var XLe=s(kF);mge=n(XLe,"STRONG",{});var Xdt=s(mge);kKo=r(Xdt,"layoutlm"),Xdt.forEach(t),RKo=r(XLe," \u2014 "),Dq=n(XLe,"A",{href:!0});var Vdt=s(Dq);SKo=r(Vdt,"TFLayoutLMModel"),Vdt.forEach(t),PKo=r(XLe," (LayoutLM model)"),XLe.forEach(t),$Ko=i(x),RF=n(x,"LI",{});var VLe=s(RF);fge=n(VLe,"STRONG",{});var zdt=s(fge);IKo=r(zdt,"led"),zdt.forEach(t),NKo=r(VLe," \u2014 "),qq=n(VLe,"A",{href:!0});var Wdt=s(qq);jKo=r(Wdt,"TFLEDModel"),Wdt.forEach(t),DKo=r(VLe," (LED model)"),VLe.forEach(t),qKo=i(x),SF=n(x,"LI",{});var zLe=s(SF);gge=n(zLe,"STRONG",{});var Qdt=s(gge);GKo=r(Qdt,"longformer"),Qdt.forEach(t),OKo=r(zLe," \u2014 "),Gq=n(zLe,"A",{href:!0});var Hdt=s(Gq);XKo=r(Hdt,"TFLongformerModel"),Hdt.forEach(t),VKo=r(zLe," (Longformer model)"),zLe.forEach(t),zKo=i(x),PF=n(x,"LI",{});var WLe=s(PF);hge=n(WLe,"STRONG",{});var Udt=s(hge);WKo=r(Udt,"lxmert"),Udt.forEach(t),QKo=r(WLe," \u2014 "),Oq=n(WLe,"A",{href:!0});var Jdt=s(Oq);HKo=r(Jdt,"TFLxmertModel"),Jdt.forEach(t),UKo=r(WLe," (LXMERT model)"),WLe.forEach(t),JKo=i(x),$F=n(x,"LI",{});var QLe=s($F);uge=n(QLe,"STRONG",{});var Ydt=s(uge);YKo=r(Ydt,"marian"),Ydt.forEach(t),KKo=r(QLe," \u2014 "),Xq=n(QLe,"A",{href:!0});var Kdt=s(Xq);ZKo=r(Kdt,"TFMarianModel"),Kdt.forEach(t),eZo=r(QLe," (Marian model)"),QLe.forEach(t),oZo=i(x),IF=n(x,"LI",{});var HLe=s(IF);pge=n(HLe,"STRONG",{});var Zdt=s(pge);rZo=r(Zdt,"mbart"),Zdt.forEach(t),tZo=r(HLe," \u2014 "),Vq=n(HLe,"A",{href:!0});var ect=s(Vq);aZo=r(ect,"TFMBartModel"),ect.forEach(t),nZo=r(HLe," (mBART model)"),HLe.forEach(t),sZo=i(x),NF=n(x,"LI",{});var ULe=s(NF);_ge=n(ULe,"STRONG",{});var oct=s(_ge);lZo=r(oct,"mobilebert"),oct.forEach(t),iZo=r(ULe," \u2014 "),zq=n(ULe,"A",{href:!0});var rct=s(zq);dZo=r(rct,"TFMobileBertModel"),rct.forEach(t),cZo=r(ULe," (MobileBERT model)"),ULe.forEach(t),mZo=i(x),jF=n(x,"LI",{});var JLe=s(jF);bge=n(JLe,"STRONG",{});var tct=s(bge);fZo=r(tct,"mpnet"),tct.forEach(t),gZo=r(JLe," \u2014 "),Wq=n(JLe,"A",{href:!0});var act=s(Wq);hZo=r(act,"TFMPNetModel"),act.forEach(t),uZo=r(JLe," (MPNet model)"),JLe.forEach(t),pZo=i(x),DF=n(x,"LI",{});var YLe=s(DF);vge=n(YLe,"STRONG",{});var nct=s(vge);_Zo=r(nct,"mt5"),nct.forEach(t),bZo=r(YLe," \u2014 "),Qq=n(YLe,"A",{href:!0});var sct=s(Qq);vZo=r(sct,"TFMT5Model"),sct.forEach(t),TZo=r(YLe," (mT5 model)"),YLe.forEach(t),FZo=i(x),qF=n(x,"LI",{});var KLe=s(qF);Tge=n(KLe,"STRONG",{});var lct=s(Tge);CZo=r(lct,"openai-gpt"),lct.forEach(t),MZo=r(KLe," \u2014 "),Hq=n(KLe,"A",{href:!0});var ict=s(Hq);EZo=r(ict,"TFOpenAIGPTModel"),ict.forEach(t),yZo=r(KLe," (OpenAI GPT model)"),KLe.forEach(t),wZo=i(x),GF=n(x,"LI",{});var ZLe=s(GF);Fge=n(ZLe,"STRONG",{});var dct=s(Fge);AZo=r(dct,"pegasus"),dct.forEach(t),LZo=r(ZLe," \u2014 "),Uq=n(ZLe,"A",{href:!0});var cct=s(Uq);BZo=r(cct,"TFPegasusModel"),cct.forEach(t),xZo=r(ZLe," (Pegasus model)"),ZLe.forEach(t),kZo=i(x),OF=n(x,"LI",{});var e7e=s(OF);Cge=n(e7e,"STRONG",{});var mct=s(Cge);RZo=r(mct,"rembert"),mct.forEach(t),SZo=r(e7e," \u2014 "),Jq=n(e7e,"A",{href:!0});var fct=s(Jq);PZo=r(fct,"TFRemBertModel"),fct.forEach(t),$Zo=r(e7e," (RemBERT model)"),e7e.forEach(t),IZo=i(x),XF=n(x,"LI",{});var o7e=s(XF);Mge=n(o7e,"STRONG",{});var gct=s(Mge);NZo=r(gct,"roberta"),gct.forEach(t),jZo=r(o7e," \u2014 "),Yq=n(o7e,"A",{href:!0});var hct=s(Yq);DZo=r(hct,"TFRobertaModel"),hct.forEach(t),qZo=r(o7e," (RoBERTa model)"),o7e.forEach(t),GZo=i(x),VF=n(x,"LI",{});var r7e=s(VF);Ege=n(r7e,"STRONG",{});var uct=s(Ege);OZo=r(uct,"roformer"),uct.forEach(t),XZo=r(r7e," \u2014 "),Kq=n(r7e,"A",{href:!0});var pct=s(Kq);VZo=r(pct,"TFRoFormerModel"),pct.forEach(t),zZo=r(r7e," (RoFormer model)"),r7e.forEach(t),WZo=i(x),zF=n(x,"LI",{});var t7e=s(zF);yge=n(t7e,"STRONG",{});var _ct=s(yge);QZo=r(_ct,"speech_to_text"),_ct.forEach(t),HZo=r(t7e," \u2014 "),Zq=n(t7e,"A",{href:!0});var bct=s(Zq);UZo=r(bct,"TFSpeech2TextModel"),bct.forEach(t),JZo=r(t7e," (Speech2Text model)"),t7e.forEach(t),YZo=i(x),WF=n(x,"LI",{});var a7e=s(WF);wge=n(a7e,"STRONG",{});var vct=s(wge);KZo=r(vct,"t5"),vct.forEach(t),ZZo=r(a7e," \u2014 "),eG=n(a7e,"A",{href:!0});var Tct=s(eG);eer=r(Tct,"TFT5Model"),Tct.forEach(t),oer=r(a7e," (T5 model)"),a7e.forEach(t),rer=i(x),QF=n(x,"LI",{});var n7e=s(QF);Age=n(n7e,"STRONG",{});var Fct=s(Age);ter=r(Fct,"tapas"),Fct.forEach(t),aer=r(n7e," \u2014 "),oG=n(n7e,"A",{href:!0});var Cct=s(oG);ner=r(Cct,"TFTapasModel"),Cct.forEach(t),ser=r(n7e," (TAPAS model)"),n7e.forEach(t),ler=i(x),HF=n(x,"LI",{});var s7e=s(HF);Lge=n(s7e,"STRONG",{});var Mct=s(Lge);ier=r(Mct,"transfo-xl"),Mct.forEach(t),der=r(s7e," \u2014 "),rG=n(s7e,"A",{href:!0});var Ect=s(rG);cer=r(Ect,"TFTransfoXLModel"),Ect.forEach(t),mer=r(s7e," (Transformer-XL model)"),s7e.forEach(t),fer=i(x),UF=n(x,"LI",{});var l7e=s(UF);Bge=n(l7e,"STRONG",{});var yct=s(Bge);ger=r(yct,"vit"),yct.forEach(t),her=r(l7e," \u2014 "),tG=n(l7e,"A",{href:!0});var wct=s(tG);uer=r(wct,"TFViTModel"),wct.forEach(t),per=r(l7e," (ViT model)"),l7e.forEach(t),_er=i(x),JF=n(x,"LI",{});var i7e=s(JF);xge=n(i7e,"STRONG",{});var Act=s(xge);ber=r(Act,"wav2vec2"),Act.forEach(t),ver=r(i7e," \u2014 "),aG=n(i7e,"A",{href:!0});var Lct=s(aG);Ter=r(Lct,"TFWav2Vec2Model"),Lct.forEach(t),Fer=r(i7e," (Wav2Vec2 model)"),i7e.forEach(t),Cer=i(x),YF=n(x,"LI",{});var d7e=s(YF);kge=n(d7e,"STRONG",{});var Bct=s(kge);Mer=r(Bct,"xlm"),Bct.forEach(t),Eer=r(d7e," \u2014 "),nG=n(d7e,"A",{href:!0});var xct=s(nG);yer=r(xct,"TFXLMModel"),xct.forEach(t),wer=r(d7e," (XLM model)"),d7e.forEach(t),Aer=i(x),KF=n(x,"LI",{});var c7e=s(KF);Rge=n(c7e,"STRONG",{});var kct=s(Rge);Ler=r(kct,"xlm-roberta"),kct.forEach(t),Ber=r(c7e," \u2014 "),sG=n(c7e,"A",{href:!0});var Rct=s(sG);xer=r(Rct,"TFXLMRobertaModel"),Rct.forEach(t),ker=r(c7e," (XLM-RoBERTa model)"),c7e.forEach(t),Rer=i(x),ZF=n(x,"LI",{});var m7e=s(ZF);Sge=n(m7e,"STRONG",{});var Sct=s(Sge);Ser=r(Sct,"xlnet"),Sct.forEach(t),Per=r(m7e," \u2014 "),lG=n(m7e,"A",{href:!0});var Pct=s(lG);$er=r(Pct,"TFXLNetModel"),Pct.forEach(t),Ier=r(m7e," (XLNet model)"),m7e.forEach(t),x.forEach(t),Ner=i(ua),Pge=n(ua,"P",{});var $ct=s(Pge);jer=r($ct,"Examples:"),$ct.forEach(t),Der=i(ua),f(VA.$$.fragment,ua),ua.forEach(t),Dl.forEach(t),Zke=i(c),uc=n(c,"H2",{class:!0});var cPe=s(uc);eC=n(cPe,"A",{id:!0,class:!0,href:!0});var Ict=s(eC);$ge=n(Ict,"SPAN",{});var Nct=s($ge);f(zA.$$.fragment,Nct),Nct.forEach(t),Ict.forEach(t),qer=i(cPe),Ige=n(cPe,"SPAN",{});var jct=s(Ige);Ger=r(jct,"TFAutoModelForPreTraining"),jct.forEach(t),cPe.forEach(t),eRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);f(WA.$$.fragment,Gl),Oer=i(Gl),pc=n(Gl,"P",{});var qW=s(pc);Xer=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nge=n(qW,"CODE",{});var Dct=s(Nge);Ver=r(Dct,"from_pretrained()"),Dct.forEach(t),zer=r(qW,"class method or the "),jge=n(qW,"CODE",{});var qct=s(jge);Wer=r(qct,"from_config()"),qct.forEach(t),Qer=r(qW,`class
method.`),qW.forEach(t),Her=i(Gl),QA=n(Gl,"P",{});var mPe=s(QA);Uer=r(mPe,"This class cannot be instantiated directly using "),Dge=n(mPe,"CODE",{});var Gct=s(Dge);Jer=r(Gct,"__init__()"),Gct.forEach(t),Yer=r(mPe," (throws an error)."),mPe.forEach(t),Ker=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);f(HA.$$.fragment,Ol),Zer=i(Ol),qge=n(Ol,"P",{});var Oct=s(qge);eor=r(Oct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oct.forEach(t),oor=i(Ol),_c=n(Ol,"P",{});var GW=s(_c);ror=r(GW,`Note:
Loading a model from its configuration file does `),Gge=n(GW,"STRONG",{});var Xct=s(Gge);tor=r(Xct,"not"),Xct.forEach(t),aor=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oge=n(GW,"CODE",{});var Vct=s(Oge);nor=r(Vct,"from_pretrained()"),Vct.forEach(t),sor=r(GW,"to load the model weights."),GW.forEach(t),lor=i(Ol),Xge=n(Ol,"P",{});var zct=s(Xge);ior=r(zct,"Examples:"),zct.forEach(t),dor=i(Ol),f(UA.$$.fragment,Ol),Ol.forEach(t),cor=i(Gl),uo=n(Gl,"DIV",{class:!0});var pa=s(uo);f(JA.$$.fragment,pa),mor=i(pa),Vge=n(pa,"P",{});var Wct=s(Vge);gor=r(Wct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wct.forEach(t),hor=i(pa),_n=n(pa,"P",{});var S5=s(_n);uor=r(S5,"The model class to instantiate is selected based on the "),zge=n(S5,"CODE",{});var Qct=s(zge);por=r(Qct,"model_type"),Qct.forEach(t),_or=r(S5,` property of the config object (either
passed as an argument or loaded from `),Wge=n(S5,"CODE",{});var Hct=s(Wge);bor=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),vor=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(S5,"CODE",{});var Uct=s(Qge);Tor=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),For=r(S5,":"),S5.forEach(t),Cor=i(pa),H=n(pa,"UL",{});var U=s(H);oC=n(U,"LI",{});var f7e=s(oC);Hge=n(f7e,"STRONG",{});var Jct=s(Hge);Mor=r(Jct,"albert"),Jct.forEach(t),Eor=r(f7e," \u2014 "),iG=n(f7e,"A",{href:!0});var Yct=s(iG);yor=r(Yct,"TFAlbertForPreTraining"),Yct.forEach(t),wor=r(f7e," (ALBERT model)"),f7e.forEach(t),Aor=i(U),rC=n(U,"LI",{});var g7e=s(rC);Uge=n(g7e,"STRONG",{});var Kct=s(Uge);Lor=r(Kct,"bart"),Kct.forEach(t),Bor=r(g7e," \u2014 "),dG=n(g7e,"A",{href:!0});var Zct=s(dG);xor=r(Zct,"TFBartForConditionalGeneration"),Zct.forEach(t),kor=r(g7e," (BART model)"),g7e.forEach(t),Ror=i(U),tC=n(U,"LI",{});var h7e=s(tC);Jge=n(h7e,"STRONG",{});var emt=s(Jge);Sor=r(emt,"bert"),emt.forEach(t),Por=r(h7e," \u2014 "),cG=n(h7e,"A",{href:!0});var omt=s(cG);$or=r(omt,"TFBertForPreTraining"),omt.forEach(t),Ior=r(h7e," (BERT model)"),h7e.forEach(t),Nor=i(U),aC=n(U,"LI",{});var u7e=s(aC);Yge=n(u7e,"STRONG",{});var rmt=s(Yge);jor=r(rmt,"camembert"),rmt.forEach(t),Dor=r(u7e," \u2014 "),mG=n(u7e,"A",{href:!0});var tmt=s(mG);qor=r(tmt,"TFCamembertForMaskedLM"),tmt.forEach(t),Gor=r(u7e," (CamemBERT model)"),u7e.forEach(t),Oor=i(U),nC=n(U,"LI",{});var p7e=s(nC);Kge=n(p7e,"STRONG",{});var amt=s(Kge);Xor=r(amt,"ctrl"),amt.forEach(t),Vor=r(p7e," \u2014 "),fG=n(p7e,"A",{href:!0});var nmt=s(fG);zor=r(nmt,"TFCTRLLMHeadModel"),nmt.forEach(t),Wor=r(p7e," (CTRL model)"),p7e.forEach(t),Qor=i(U),sC=n(U,"LI",{});var _7e=s(sC);Zge=n(_7e,"STRONG",{});var smt=s(Zge);Hor=r(smt,"distilbert"),smt.forEach(t),Uor=r(_7e," \u2014 "),gG=n(_7e,"A",{href:!0});var lmt=s(gG);Jor=r(lmt,"TFDistilBertForMaskedLM"),lmt.forEach(t),Yor=r(_7e," (DistilBERT model)"),_7e.forEach(t),Kor=i(U),lC=n(U,"LI",{});var b7e=s(lC);ehe=n(b7e,"STRONG",{});var imt=s(ehe);Zor=r(imt,"electra"),imt.forEach(t),err=r(b7e," \u2014 "),hG=n(b7e,"A",{href:!0});var dmt=s(hG);orr=r(dmt,"TFElectraForPreTraining"),dmt.forEach(t),rrr=r(b7e," (ELECTRA model)"),b7e.forEach(t),trr=i(U),iC=n(U,"LI",{});var v7e=s(iC);ohe=n(v7e,"STRONG",{});var cmt=s(ohe);arr=r(cmt,"flaubert"),cmt.forEach(t),nrr=r(v7e," \u2014 "),uG=n(v7e,"A",{href:!0});var mmt=s(uG);srr=r(mmt,"TFFlaubertWithLMHeadModel"),mmt.forEach(t),lrr=r(v7e," (FlauBERT model)"),v7e.forEach(t),irr=i(U),dC=n(U,"LI",{});var T7e=s(dC);rhe=n(T7e,"STRONG",{});var fmt=s(rhe);drr=r(fmt,"funnel"),fmt.forEach(t),crr=r(T7e," \u2014 "),pG=n(T7e,"A",{href:!0});var gmt=s(pG);mrr=r(gmt,"TFFunnelForPreTraining"),gmt.forEach(t),frr=r(T7e," (Funnel Transformer model)"),T7e.forEach(t),grr=i(U),cC=n(U,"LI",{});var F7e=s(cC);the=n(F7e,"STRONG",{});var hmt=s(the);hrr=r(hmt,"gpt2"),hmt.forEach(t),urr=r(F7e," \u2014 "),_G=n(F7e,"A",{href:!0});var umt=s(_G);prr=r(umt,"TFGPT2LMHeadModel"),umt.forEach(t),_rr=r(F7e," (OpenAI GPT-2 model)"),F7e.forEach(t),brr=i(U),mC=n(U,"LI",{});var C7e=s(mC);ahe=n(C7e,"STRONG",{});var pmt=s(ahe);vrr=r(pmt,"layoutlm"),pmt.forEach(t),Trr=r(C7e," \u2014 "),bG=n(C7e,"A",{href:!0});var _mt=s(bG);Frr=r(_mt,"TFLayoutLMForMaskedLM"),_mt.forEach(t),Crr=r(C7e," (LayoutLM model)"),C7e.forEach(t),Mrr=i(U),fC=n(U,"LI",{});var M7e=s(fC);nhe=n(M7e,"STRONG",{});var bmt=s(nhe);Err=r(bmt,"lxmert"),bmt.forEach(t),yrr=r(M7e," \u2014 "),vG=n(M7e,"A",{href:!0});var vmt=s(vG);wrr=r(vmt,"TFLxmertForPreTraining"),vmt.forEach(t),Arr=r(M7e," (LXMERT model)"),M7e.forEach(t),Lrr=i(U),gC=n(U,"LI",{});var E7e=s(gC);she=n(E7e,"STRONG",{});var Tmt=s(she);Brr=r(Tmt,"mobilebert"),Tmt.forEach(t),xrr=r(E7e," \u2014 "),TG=n(E7e,"A",{href:!0});var Fmt=s(TG);krr=r(Fmt,"TFMobileBertForPreTraining"),Fmt.forEach(t),Rrr=r(E7e," (MobileBERT model)"),E7e.forEach(t),Srr=i(U),hC=n(U,"LI",{});var y7e=s(hC);lhe=n(y7e,"STRONG",{});var Cmt=s(lhe);Prr=r(Cmt,"mpnet"),Cmt.forEach(t),$rr=r(y7e," \u2014 "),FG=n(y7e,"A",{href:!0});var Mmt=s(FG);Irr=r(Mmt,"TFMPNetForMaskedLM"),Mmt.forEach(t),Nrr=r(y7e," (MPNet model)"),y7e.forEach(t),jrr=i(U),uC=n(U,"LI",{});var w7e=s(uC);ihe=n(w7e,"STRONG",{});var Emt=s(ihe);Drr=r(Emt,"openai-gpt"),Emt.forEach(t),qrr=r(w7e," \u2014 "),CG=n(w7e,"A",{href:!0});var ymt=s(CG);Grr=r(ymt,"TFOpenAIGPTLMHeadModel"),ymt.forEach(t),Orr=r(w7e," (OpenAI GPT model)"),w7e.forEach(t),Xrr=i(U),pC=n(U,"LI",{});var A7e=s(pC);dhe=n(A7e,"STRONG",{});var wmt=s(dhe);Vrr=r(wmt,"roberta"),wmt.forEach(t),zrr=r(A7e," \u2014 "),MG=n(A7e,"A",{href:!0});var Amt=s(MG);Wrr=r(Amt,"TFRobertaForMaskedLM"),Amt.forEach(t),Qrr=r(A7e," (RoBERTa model)"),A7e.forEach(t),Hrr=i(U),_C=n(U,"LI",{});var L7e=s(_C);che=n(L7e,"STRONG",{});var Lmt=s(che);Urr=r(Lmt,"t5"),Lmt.forEach(t),Jrr=r(L7e," \u2014 "),EG=n(L7e,"A",{href:!0});var Bmt=s(EG);Yrr=r(Bmt,"TFT5ForConditionalGeneration"),Bmt.forEach(t),Krr=r(L7e," (T5 model)"),L7e.forEach(t),Zrr=i(U),bC=n(U,"LI",{});var B7e=s(bC);mhe=n(B7e,"STRONG",{});var xmt=s(mhe);etr=r(xmt,"tapas"),xmt.forEach(t),otr=r(B7e," \u2014 "),yG=n(B7e,"A",{href:!0});var kmt=s(yG);rtr=r(kmt,"TFTapasForMaskedLM"),kmt.forEach(t),ttr=r(B7e," (TAPAS model)"),B7e.forEach(t),atr=i(U),vC=n(U,"LI",{});var x7e=s(vC);fhe=n(x7e,"STRONG",{});var Rmt=s(fhe);ntr=r(Rmt,"transfo-xl"),Rmt.forEach(t),str=r(x7e," \u2014 "),wG=n(x7e,"A",{href:!0});var Smt=s(wG);ltr=r(Smt,"TFTransfoXLLMHeadModel"),Smt.forEach(t),itr=r(x7e," (Transformer-XL model)"),x7e.forEach(t),dtr=i(U),TC=n(U,"LI",{});var k7e=s(TC);ghe=n(k7e,"STRONG",{});var Pmt=s(ghe);ctr=r(Pmt,"xlm"),Pmt.forEach(t),mtr=r(k7e," \u2014 "),AG=n(k7e,"A",{href:!0});var $mt=s(AG);ftr=r($mt,"TFXLMWithLMHeadModel"),$mt.forEach(t),gtr=r(k7e," (XLM model)"),k7e.forEach(t),htr=i(U),FC=n(U,"LI",{});var R7e=s(FC);hhe=n(R7e,"STRONG",{});var Imt=s(hhe);utr=r(Imt,"xlm-roberta"),Imt.forEach(t),ptr=r(R7e," \u2014 "),LG=n(R7e,"A",{href:!0});var Nmt=s(LG);_tr=r(Nmt,"TFXLMRobertaForMaskedLM"),Nmt.forEach(t),btr=r(R7e," (XLM-RoBERTa model)"),R7e.forEach(t),vtr=i(U),CC=n(U,"LI",{});var S7e=s(CC);uhe=n(S7e,"STRONG",{});var jmt=s(uhe);Ttr=r(jmt,"xlnet"),jmt.forEach(t),Ftr=r(S7e," \u2014 "),BG=n(S7e,"A",{href:!0});var Dmt=s(BG);Ctr=r(Dmt,"TFXLNetLMHeadModel"),Dmt.forEach(t),Mtr=r(S7e," (XLNet model)"),S7e.forEach(t),U.forEach(t),Etr=i(pa),phe=n(pa,"P",{});var qmt=s(phe);ytr=r(qmt,"Examples:"),qmt.forEach(t),wtr=i(pa),f(YA.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),oRe=i(c),bc=n(c,"H2",{class:!0});var fPe=s(bc);MC=n(fPe,"A",{id:!0,class:!0,href:!0});var Gmt=s(MC);_he=n(Gmt,"SPAN",{});var Omt=s(_he);f(KA.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),Atr=i(fPe),bhe=n(fPe,"SPAN",{});var Xmt=s(bhe);Ltr=r(Xmt,"TFAutoModelForCausalLM"),Xmt.forEach(t),fPe.forEach(t),rRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);f(ZA.$$.fragment,Xl),Btr=i(Xl),vc=n(Xl,"P",{});var OW=s(vc);xtr=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vhe=n(OW,"CODE",{});var Vmt=s(vhe);ktr=r(Vmt,"from_pretrained()"),Vmt.forEach(t),Rtr=r(OW,"class method or the "),The=n(OW,"CODE",{});var zmt=s(The);Str=r(zmt,"from_config()"),zmt.forEach(t),Ptr=r(OW,`class
method.`),OW.forEach(t),$tr=i(Xl),e0=n(Xl,"P",{});var gPe=s(e0);Itr=r(gPe,"This class cannot be instantiated directly using "),Fhe=n(gPe,"CODE",{});var Wmt=s(Fhe);Ntr=r(Wmt,"__init__()"),Wmt.forEach(t),jtr=r(gPe," (throws an error)."),gPe.forEach(t),Dtr=i(Xl),ut=n(Xl,"DIV",{class:!0});var Vl=s(ut);f(o0.$$.fragment,Vl),qtr=i(Vl),Che=n(Vl,"P",{});var Qmt=s(Che);Gtr=r(Qmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qmt.forEach(t),Otr=i(Vl),Tc=n(Vl,"P",{});var XW=s(Tc);Xtr=r(XW,`Note:
Loading a model from its configuration file does `),Mhe=n(XW,"STRONG",{});var Hmt=s(Mhe);Vtr=r(Hmt,"not"),Hmt.forEach(t),ztr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=n(XW,"CODE",{});var Umt=s(Ehe);Wtr=r(Umt,"from_pretrained()"),Umt.forEach(t),Qtr=r(XW,"to load the model weights."),XW.forEach(t),Htr=i(Vl),yhe=n(Vl,"P",{});var Jmt=s(yhe);Utr=r(Jmt,"Examples:"),Jmt.forEach(t),Jtr=i(Vl),f(r0.$$.fragment,Vl),Vl.forEach(t),Ytr=i(Xl),po=n(Xl,"DIV",{class:!0});var _a=s(po);f(t0.$$.fragment,_a),Ktr=i(_a),whe=n(_a,"P",{});var Ymt=s(whe);Ztr=r(Ymt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ymt.forEach(t),ear=i(_a),bn=n(_a,"P",{});var P5=s(bn);oar=r(P5,"The model class to instantiate is selected based on the "),Ahe=n(P5,"CODE",{});var Kmt=s(Ahe);rar=r(Kmt,"model_type"),Kmt.forEach(t),tar=r(P5,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(P5,"CODE",{});var Zmt=s(Lhe);aar=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),nar=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(P5,"CODE",{});var eft=s(Bhe);sar=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),lar=r(P5,":"),P5.forEach(t),iar=i(_a),ge=n(_a,"UL",{});var Fe=s(ge);EC=n(Fe,"LI",{});var P7e=s(EC);xhe=n(P7e,"STRONG",{});var oft=s(xhe);dar=r(oft,"bert"),oft.forEach(t),car=r(P7e," \u2014 "),xG=n(P7e,"A",{href:!0});var rft=s(xG);mar=r(rft,"TFBertLMHeadModel"),rft.forEach(t),far=r(P7e," (BERT model)"),P7e.forEach(t),gar=i(Fe),yC=n(Fe,"LI",{});var $7e=s(yC);khe=n($7e,"STRONG",{});var tft=s(khe);har=r(tft,"camembert"),tft.forEach(t),uar=r($7e," \u2014 "),kG=n($7e,"A",{href:!0});var aft=s(kG);par=r(aft,"TFCamembertForCausalLM"),aft.forEach(t),_ar=r($7e," (CamemBERT model)"),$7e.forEach(t),bar=i(Fe),wC=n(Fe,"LI",{});var I7e=s(wC);Rhe=n(I7e,"STRONG",{});var nft=s(Rhe);Tar=r(nft,"ctrl"),nft.forEach(t),Far=r(I7e," \u2014 "),RG=n(I7e,"A",{href:!0});var sft=s(RG);Car=r(sft,"TFCTRLLMHeadModel"),sft.forEach(t),Mar=r(I7e," (CTRL model)"),I7e.forEach(t),Ear=i(Fe),AC=n(Fe,"LI",{});var N7e=s(AC);She=n(N7e,"STRONG",{});var lft=s(She);yar=r(lft,"gpt2"),lft.forEach(t),war=r(N7e," \u2014 "),SG=n(N7e,"A",{href:!0});var ift=s(SG);Aar=r(ift,"TFGPT2LMHeadModel"),ift.forEach(t),Lar=r(N7e," (OpenAI GPT-2 model)"),N7e.forEach(t),Bar=i(Fe),LC=n(Fe,"LI",{});var j7e=s(LC);Phe=n(j7e,"STRONG",{});var dft=s(Phe);xar=r(dft,"openai-gpt"),dft.forEach(t),kar=r(j7e," \u2014 "),PG=n(j7e,"A",{href:!0});var cft=s(PG);Rar=r(cft,"TFOpenAIGPTLMHeadModel"),cft.forEach(t),Sar=r(j7e," (OpenAI GPT model)"),j7e.forEach(t),Par=i(Fe),BC=n(Fe,"LI",{});var D7e=s(BC);$he=n(D7e,"STRONG",{});var mft=s($he);$ar=r(mft,"rembert"),mft.forEach(t),Iar=r(D7e," \u2014 "),$G=n(D7e,"A",{href:!0});var fft=s($G);Nar=r(fft,"TFRemBertForCausalLM"),fft.forEach(t),jar=r(D7e," (RemBERT model)"),D7e.forEach(t),Dar=i(Fe),xC=n(Fe,"LI",{});var q7e=s(xC);Ihe=n(q7e,"STRONG",{});var gft=s(Ihe);qar=r(gft,"roberta"),gft.forEach(t),Gar=r(q7e," \u2014 "),IG=n(q7e,"A",{href:!0});var hft=s(IG);Oar=r(hft,"TFRobertaForCausalLM"),hft.forEach(t),Xar=r(q7e," (RoBERTa model)"),q7e.forEach(t),Var=i(Fe),kC=n(Fe,"LI",{});var G7e=s(kC);Nhe=n(G7e,"STRONG",{});var uft=s(Nhe);zar=r(uft,"roformer"),uft.forEach(t),War=r(G7e," \u2014 "),NG=n(G7e,"A",{href:!0});var pft=s(NG);Qar=r(pft,"TFRoFormerForCausalLM"),pft.forEach(t),Har=r(G7e," (RoFormer model)"),G7e.forEach(t),Uar=i(Fe),RC=n(Fe,"LI",{});var O7e=s(RC);jhe=n(O7e,"STRONG",{});var _ft=s(jhe);Jar=r(_ft,"transfo-xl"),_ft.forEach(t),Yar=r(O7e," \u2014 "),jG=n(O7e,"A",{href:!0});var bft=s(jG);Kar=r(bft,"TFTransfoXLLMHeadModel"),bft.forEach(t),Zar=r(O7e," (Transformer-XL model)"),O7e.forEach(t),enr=i(Fe),SC=n(Fe,"LI",{});var X7e=s(SC);Dhe=n(X7e,"STRONG",{});var vft=s(Dhe);onr=r(vft,"xlm"),vft.forEach(t),rnr=r(X7e," \u2014 "),DG=n(X7e,"A",{href:!0});var Tft=s(DG);tnr=r(Tft,"TFXLMWithLMHeadModel"),Tft.forEach(t),anr=r(X7e," (XLM model)"),X7e.forEach(t),nnr=i(Fe),PC=n(Fe,"LI",{});var V7e=s(PC);qhe=n(V7e,"STRONG",{});var Fft=s(qhe);snr=r(Fft,"xlnet"),Fft.forEach(t),lnr=r(V7e," \u2014 "),qG=n(V7e,"A",{href:!0});var Cft=s(qG);inr=r(Cft,"TFXLNetLMHeadModel"),Cft.forEach(t),dnr=r(V7e," (XLNet model)"),V7e.forEach(t),Fe.forEach(t),cnr=i(_a),Ghe=n(_a,"P",{});var Mft=s(Ghe);mnr=r(Mft,"Examples:"),Mft.forEach(t),fnr=i(_a),f(a0.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),tRe=i(c),Fc=n(c,"H2",{class:!0});var hPe=s(Fc);$C=n(hPe,"A",{id:!0,class:!0,href:!0});var Eft=s($C);Ohe=n(Eft,"SPAN",{});var yft=s(Ohe);f(n0.$$.fragment,yft),yft.forEach(t),Eft.forEach(t),gnr=i(hPe),Xhe=n(hPe,"SPAN",{});var wft=s(Xhe);hnr=r(wft,"TFAutoModelForImageClassification"),wft.forEach(t),hPe.forEach(t),aRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);f(s0.$$.fragment,zl),unr=i(zl),Cc=n(zl,"P",{});var VW=s(Cc);pnr=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vhe=n(VW,"CODE",{});var Aft=s(Vhe);_nr=r(Aft,"from_pretrained()"),Aft.forEach(t),bnr=r(VW,"class method or the "),zhe=n(VW,"CODE",{});var Lft=s(zhe);vnr=r(Lft,"from_config()"),Lft.forEach(t),Tnr=r(VW,`class
method.`),VW.forEach(t),Fnr=i(zl),l0=n(zl,"P",{});var uPe=s(l0);Cnr=r(uPe,"This class cannot be instantiated directly using "),Whe=n(uPe,"CODE",{});var Bft=s(Whe);Mnr=r(Bft,"__init__()"),Bft.forEach(t),Enr=r(uPe," (throws an error)."),uPe.forEach(t),ynr=i(zl),pt=n(zl,"DIV",{class:!0});var Wl=s(pt);f(i0.$$.fragment,Wl),wnr=i(Wl),Qhe=n(Wl,"P",{});var xft=s(Qhe);Anr=r(xft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xft.forEach(t),Lnr=i(Wl),Mc=n(Wl,"P",{});var zW=s(Mc);Bnr=r(zW,`Note:
Loading a model from its configuration file does `),Hhe=n(zW,"STRONG",{});var kft=s(Hhe);xnr=r(kft,"not"),kft.forEach(t),knr=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uhe=n(zW,"CODE",{});var Rft=s(Uhe);Rnr=r(Rft,"from_pretrained()"),Rft.forEach(t),Snr=r(zW,"to load the model weights."),zW.forEach(t),Pnr=i(Wl),Jhe=n(Wl,"P",{});var Sft=s(Jhe);$nr=r(Sft,"Examples:"),Sft.forEach(t),Inr=i(Wl),f(d0.$$.fragment,Wl),Wl.forEach(t),Nnr=i(zl),_o=n(zl,"DIV",{class:!0});var ba=s(_o);f(c0.$$.fragment,ba),jnr=i(ba),Yhe=n(ba,"P",{});var Pft=s(Yhe);Dnr=r(Pft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pft.forEach(t),qnr=i(ba),vn=n(ba,"P",{});var $5=s(vn);Gnr=r($5,"The model class to instantiate is selected based on the "),Khe=n($5,"CODE",{});var $ft=s(Khe);Onr=r($ft,"model_type"),$ft.forEach(t),Xnr=r($5,` property of the config object (either
passed as an argument or loaded from `),Zhe=n($5,"CODE",{});var Ift=s(Zhe);Vnr=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),znr=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n($5,"CODE",{});var Nft=s(eue);Wnr=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),Qnr=r($5,":"),$5.forEach(t),Hnr=i(ba),m0=n(ba,"UL",{});var pPe=s(m0);IC=n(pPe,"LI",{});var z7e=s(IC);oue=n(z7e,"STRONG",{});var jft=s(oue);Unr=r(jft,"convnext"),jft.forEach(t),Jnr=r(z7e," \u2014 "),GG=n(z7e,"A",{href:!0});var Dft=s(GG);Ynr=r(Dft,"TFConvNextForImageClassification"),Dft.forEach(t),Knr=r(z7e," (ConvNext model)"),z7e.forEach(t),Znr=i(pPe),NC=n(pPe,"LI",{});var W7e=s(NC);rue=n(W7e,"STRONG",{});var qft=s(rue);esr=r(qft,"vit"),qft.forEach(t),osr=r(W7e," \u2014 "),OG=n(W7e,"A",{href:!0});var Gft=s(OG);rsr=r(Gft,"TFViTForImageClassification"),Gft.forEach(t),tsr=r(W7e," (ViT model)"),W7e.forEach(t),pPe.forEach(t),asr=i(ba),tue=n(ba,"P",{});var Oft=s(tue);nsr=r(Oft,"Examples:"),Oft.forEach(t),ssr=i(ba),f(f0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),nRe=i(c),Ec=n(c,"H2",{class:!0});var _Pe=s(Ec);jC=n(_Pe,"A",{id:!0,class:!0,href:!0});var Xft=s(jC);aue=n(Xft,"SPAN",{});var Vft=s(aue);f(g0.$$.fragment,Vft),Vft.forEach(t),Xft.forEach(t),lsr=i(_Pe),nue=n(_Pe,"SPAN",{});var zft=s(nue);isr=r(zft,"TFAutoModelForMaskedLM"),zft.forEach(t),_Pe.forEach(t),sRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);f(h0.$$.fragment,Ql),dsr=i(Ql),yc=n(Ql,"P",{});var WW=s(yc);csr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sue=n(WW,"CODE",{});var Wft=s(sue);msr=r(Wft,"from_pretrained()"),Wft.forEach(t),fsr=r(WW,"class method or the "),lue=n(WW,"CODE",{});var Qft=s(lue);gsr=r(Qft,"from_config()"),Qft.forEach(t),hsr=r(WW,`class
method.`),WW.forEach(t),usr=i(Ql),u0=n(Ql,"P",{});var bPe=s(u0);psr=r(bPe,"This class cannot be instantiated directly using "),iue=n(bPe,"CODE",{});var Hft=s(iue);_sr=r(Hft,"__init__()"),Hft.forEach(t),bsr=r(bPe," (throws an error)."),bPe.forEach(t),vsr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);f(p0.$$.fragment,Hl),Tsr=i(Hl),due=n(Hl,"P",{});var Uft=s(due);Fsr=r(Uft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Uft.forEach(t),Csr=i(Hl),wc=n(Hl,"P",{});var QW=s(wc);Msr=r(QW,`Note:
Loading a model from its configuration file does `),cue=n(QW,"STRONG",{});var Jft=s(cue);Esr=r(Jft,"not"),Jft.forEach(t),ysr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mue=n(QW,"CODE",{});var Yft=s(mue);wsr=r(Yft,"from_pretrained()"),Yft.forEach(t),Asr=r(QW,"to load the model weights."),QW.forEach(t),Lsr=i(Hl),fue=n(Hl,"P",{});var Kft=s(fue);Bsr=r(Kft,"Examples:"),Kft.forEach(t),xsr=i(Hl),f(_0.$$.fragment,Hl),Hl.forEach(t),ksr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);f(b0.$$.fragment,va),Rsr=i(va),gue=n(va,"P",{});var Zft=s(gue);Ssr=r(Zft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zft.forEach(t),Psr=i(va),Tn=n(va,"P",{});var I5=s(Tn);$sr=r(I5,"The model class to instantiate is selected based on the "),hue=n(I5,"CODE",{});var egt=s(hue);Isr=r(egt,"model_type"),egt.forEach(t),Nsr=r(I5,` property of the config object (either
passed as an argument or loaded from `),uue=n(I5,"CODE",{});var ogt=s(uue);jsr=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),Dsr=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(I5,"CODE",{});var rgt=s(pue);qsr=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),Gsr=r(I5,":"),I5.forEach(t),Osr=i(va),J=n(va,"UL",{});var ee=s(J);DC=n(ee,"LI",{});var Q7e=s(DC);_ue=n(Q7e,"STRONG",{});var tgt=s(_ue);Xsr=r(tgt,"albert"),tgt.forEach(t),Vsr=r(Q7e," \u2014 "),XG=n(Q7e,"A",{href:!0});var agt=s(XG);zsr=r(agt,"TFAlbertForMaskedLM"),agt.forEach(t),Wsr=r(Q7e," (ALBERT model)"),Q7e.forEach(t),Qsr=i(ee),qC=n(ee,"LI",{});var H7e=s(qC);bue=n(H7e,"STRONG",{});var ngt=s(bue);Hsr=r(ngt,"bert"),ngt.forEach(t),Usr=r(H7e," \u2014 "),VG=n(H7e,"A",{href:!0});var sgt=s(VG);Jsr=r(sgt,"TFBertForMaskedLM"),sgt.forEach(t),Ysr=r(H7e," (BERT model)"),H7e.forEach(t),Ksr=i(ee),GC=n(ee,"LI",{});var U7e=s(GC);vue=n(U7e,"STRONG",{});var lgt=s(vue);Zsr=r(lgt,"camembert"),lgt.forEach(t),elr=r(U7e," \u2014 "),zG=n(U7e,"A",{href:!0});var igt=s(zG);olr=r(igt,"TFCamembertForMaskedLM"),igt.forEach(t),rlr=r(U7e," (CamemBERT model)"),U7e.forEach(t),tlr=i(ee),OC=n(ee,"LI",{});var J7e=s(OC);Tue=n(J7e,"STRONG",{});var dgt=s(Tue);alr=r(dgt,"convbert"),dgt.forEach(t),nlr=r(J7e," \u2014 "),WG=n(J7e,"A",{href:!0});var cgt=s(WG);slr=r(cgt,"TFConvBertForMaskedLM"),cgt.forEach(t),llr=r(J7e," (ConvBERT model)"),J7e.forEach(t),ilr=i(ee),XC=n(ee,"LI",{});var Y7e=s(XC);Fue=n(Y7e,"STRONG",{});var mgt=s(Fue);dlr=r(mgt,"deberta"),mgt.forEach(t),clr=r(Y7e," \u2014 "),QG=n(Y7e,"A",{href:!0});var fgt=s(QG);mlr=r(fgt,"TFDebertaForMaskedLM"),fgt.forEach(t),flr=r(Y7e," (DeBERTa model)"),Y7e.forEach(t),glr=i(ee),VC=n(ee,"LI",{});var K7e=s(VC);Cue=n(K7e,"STRONG",{});var ggt=s(Cue);hlr=r(ggt,"deberta-v2"),ggt.forEach(t),ulr=r(K7e," \u2014 "),HG=n(K7e,"A",{href:!0});var hgt=s(HG);plr=r(hgt,"TFDebertaV2ForMaskedLM"),hgt.forEach(t),_lr=r(K7e," (DeBERTa-v2 model)"),K7e.forEach(t),blr=i(ee),zC=n(ee,"LI",{});var Z7e=s(zC);Mue=n(Z7e,"STRONG",{});var ugt=s(Mue);vlr=r(ugt,"distilbert"),ugt.forEach(t),Tlr=r(Z7e," \u2014 "),UG=n(Z7e,"A",{href:!0});var pgt=s(UG);Flr=r(pgt,"TFDistilBertForMaskedLM"),pgt.forEach(t),Clr=r(Z7e," (DistilBERT model)"),Z7e.forEach(t),Mlr=i(ee),WC=n(ee,"LI",{});var e8e=s(WC);Eue=n(e8e,"STRONG",{});var _gt=s(Eue);Elr=r(_gt,"electra"),_gt.forEach(t),ylr=r(e8e," \u2014 "),JG=n(e8e,"A",{href:!0});var bgt=s(JG);wlr=r(bgt,"TFElectraForMaskedLM"),bgt.forEach(t),Alr=r(e8e," (ELECTRA model)"),e8e.forEach(t),Llr=i(ee),QC=n(ee,"LI",{});var o8e=s(QC);yue=n(o8e,"STRONG",{});var vgt=s(yue);Blr=r(vgt,"flaubert"),vgt.forEach(t),xlr=r(o8e," \u2014 "),YG=n(o8e,"A",{href:!0});var Tgt=s(YG);klr=r(Tgt,"TFFlaubertWithLMHeadModel"),Tgt.forEach(t),Rlr=r(o8e," (FlauBERT model)"),o8e.forEach(t),Slr=i(ee),HC=n(ee,"LI",{});var r8e=s(HC);wue=n(r8e,"STRONG",{});var Fgt=s(wue);Plr=r(Fgt,"funnel"),Fgt.forEach(t),$lr=r(r8e," \u2014 "),KG=n(r8e,"A",{href:!0});var Cgt=s(KG);Ilr=r(Cgt,"TFFunnelForMaskedLM"),Cgt.forEach(t),Nlr=r(r8e," (Funnel Transformer model)"),r8e.forEach(t),jlr=i(ee),UC=n(ee,"LI",{});var t8e=s(UC);Aue=n(t8e,"STRONG",{});var Mgt=s(Aue);Dlr=r(Mgt,"layoutlm"),Mgt.forEach(t),qlr=r(t8e," \u2014 "),ZG=n(t8e,"A",{href:!0});var Egt=s(ZG);Glr=r(Egt,"TFLayoutLMForMaskedLM"),Egt.forEach(t),Olr=r(t8e," (LayoutLM model)"),t8e.forEach(t),Xlr=i(ee),JC=n(ee,"LI",{});var a8e=s(JC);Lue=n(a8e,"STRONG",{});var ygt=s(Lue);Vlr=r(ygt,"longformer"),ygt.forEach(t),zlr=r(a8e," \u2014 "),eO=n(a8e,"A",{href:!0});var wgt=s(eO);Wlr=r(wgt,"TFLongformerForMaskedLM"),wgt.forEach(t),Qlr=r(a8e," (Longformer model)"),a8e.forEach(t),Hlr=i(ee),YC=n(ee,"LI",{});var n8e=s(YC);Bue=n(n8e,"STRONG",{});var Agt=s(Bue);Ulr=r(Agt,"mobilebert"),Agt.forEach(t),Jlr=r(n8e," \u2014 "),oO=n(n8e,"A",{href:!0});var Lgt=s(oO);Ylr=r(Lgt,"TFMobileBertForMaskedLM"),Lgt.forEach(t),Klr=r(n8e," (MobileBERT model)"),n8e.forEach(t),Zlr=i(ee),KC=n(ee,"LI",{});var s8e=s(KC);xue=n(s8e,"STRONG",{});var Bgt=s(xue);eir=r(Bgt,"mpnet"),Bgt.forEach(t),oir=r(s8e," \u2014 "),rO=n(s8e,"A",{href:!0});var xgt=s(rO);rir=r(xgt,"TFMPNetForMaskedLM"),xgt.forEach(t),tir=r(s8e," (MPNet model)"),s8e.forEach(t),air=i(ee),ZC=n(ee,"LI",{});var l8e=s(ZC);kue=n(l8e,"STRONG",{});var kgt=s(kue);nir=r(kgt,"rembert"),kgt.forEach(t),sir=r(l8e," \u2014 "),tO=n(l8e,"A",{href:!0});var Rgt=s(tO);lir=r(Rgt,"TFRemBertForMaskedLM"),Rgt.forEach(t),iir=r(l8e," (RemBERT model)"),l8e.forEach(t),dir=i(ee),eM=n(ee,"LI",{});var i8e=s(eM);Rue=n(i8e,"STRONG",{});var Sgt=s(Rue);cir=r(Sgt,"roberta"),Sgt.forEach(t),mir=r(i8e," \u2014 "),aO=n(i8e,"A",{href:!0});var Pgt=s(aO);fir=r(Pgt,"TFRobertaForMaskedLM"),Pgt.forEach(t),gir=r(i8e," (RoBERTa model)"),i8e.forEach(t),hir=i(ee),oM=n(ee,"LI",{});var d8e=s(oM);Sue=n(d8e,"STRONG",{});var $gt=s(Sue);uir=r($gt,"roformer"),$gt.forEach(t),pir=r(d8e," \u2014 "),nO=n(d8e,"A",{href:!0});var Igt=s(nO);_ir=r(Igt,"TFRoFormerForMaskedLM"),Igt.forEach(t),bir=r(d8e," (RoFormer model)"),d8e.forEach(t),vir=i(ee),rM=n(ee,"LI",{});var c8e=s(rM);Pue=n(c8e,"STRONG",{});var Ngt=s(Pue);Tir=r(Ngt,"tapas"),Ngt.forEach(t),Fir=r(c8e," \u2014 "),sO=n(c8e,"A",{href:!0});var jgt=s(sO);Cir=r(jgt,"TFTapasForMaskedLM"),jgt.forEach(t),Mir=r(c8e," (TAPAS model)"),c8e.forEach(t),Eir=i(ee),tM=n(ee,"LI",{});var m8e=s(tM);$ue=n(m8e,"STRONG",{});var Dgt=s($ue);yir=r(Dgt,"xlm"),Dgt.forEach(t),wir=r(m8e," \u2014 "),lO=n(m8e,"A",{href:!0});var qgt=s(lO);Air=r(qgt,"TFXLMWithLMHeadModel"),qgt.forEach(t),Lir=r(m8e," (XLM model)"),m8e.forEach(t),Bir=i(ee),aM=n(ee,"LI",{});var f8e=s(aM);Iue=n(f8e,"STRONG",{});var Ggt=s(Iue);xir=r(Ggt,"xlm-roberta"),Ggt.forEach(t),kir=r(f8e," \u2014 "),iO=n(f8e,"A",{href:!0});var Ogt=s(iO);Rir=r(Ogt,"TFXLMRobertaForMaskedLM"),Ogt.forEach(t),Sir=r(f8e," (XLM-RoBERTa model)"),f8e.forEach(t),ee.forEach(t),Pir=i(va),Nue=n(va,"P",{});var Xgt=s(Nue);$ir=r(Xgt,"Examples:"),Xgt.forEach(t),Iir=i(va),f(v0.$$.fragment,va),va.forEach(t),Ql.forEach(t),lRe=i(c),Ac=n(c,"H2",{class:!0});var vPe=s(Ac);nM=n(vPe,"A",{id:!0,class:!0,href:!0});var Vgt=s(nM);jue=n(Vgt,"SPAN",{});var zgt=s(jue);f(T0.$$.fragment,zgt),zgt.forEach(t),Vgt.forEach(t),Nir=i(vPe),Due=n(vPe,"SPAN",{});var Wgt=s(Due);jir=r(Wgt,"TFAutoModelForSeq2SeqLM"),Wgt.forEach(t),vPe.forEach(t),iRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);f(F0.$$.fragment,Ul),Dir=i(Ul),Lc=n(Ul,"P",{});var HW=s(Lc);qir=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),que=n(HW,"CODE",{});var Qgt=s(que);Gir=r(Qgt,"from_pretrained()"),Qgt.forEach(t),Oir=r(HW,"class method or the "),Gue=n(HW,"CODE",{});var Hgt=s(Gue);Xir=r(Hgt,"from_config()"),Hgt.forEach(t),Vir=r(HW,`class
method.`),HW.forEach(t),zir=i(Ul),C0=n(Ul,"P",{});var TPe=s(C0);Wir=r(TPe,"This class cannot be instantiated directly using "),Oue=n(TPe,"CODE",{});var Ugt=s(Oue);Qir=r(Ugt,"__init__()"),Ugt.forEach(t),Hir=r(TPe," (throws an error)."),TPe.forEach(t),Uir=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);f(M0.$$.fragment,Jl),Jir=i(Jl),Xue=n(Jl,"P",{});var Jgt=s(Xue);Yir=r(Jgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jgt.forEach(t),Kir=i(Jl),Bc=n(Jl,"P",{});var UW=s(Bc);Zir=r(UW,`Note:
Loading a model from its configuration file does `),Vue=n(UW,"STRONG",{});var Ygt=s(Vue);edr=r(Ygt,"not"),Ygt.forEach(t),odr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),zue=n(UW,"CODE",{});var Kgt=s(zue);rdr=r(Kgt,"from_pretrained()"),Kgt.forEach(t),tdr=r(UW,"to load the model weights."),UW.forEach(t),adr=i(Jl),Wue=n(Jl,"P",{});var Zgt=s(Wue);ndr=r(Zgt,"Examples:"),Zgt.forEach(t),sdr=i(Jl),f(E0.$$.fragment,Jl),Jl.forEach(t),ldr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);f(y0.$$.fragment,Ta),idr=i(Ta),Que=n(Ta,"P",{});var eht=s(Que);ddr=r(eht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eht.forEach(t),cdr=i(Ta),Fn=n(Ta,"P",{});var N5=s(Fn);mdr=r(N5,"The model class to instantiate is selected based on the "),Hue=n(N5,"CODE",{});var oht=s(Hue);fdr=r(oht,"model_type"),oht.forEach(t),gdr=r(N5,` property of the config object (either
passed as an argument or loaded from `),Uue=n(N5,"CODE",{});var rht=s(Uue);hdr=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),udr=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(N5,"CODE",{});var tht=s(Jue);pdr=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),_dr=r(N5,":"),N5.forEach(t),bdr=i(Ta),pe=n(Ta,"UL",{});var ye=s(pe);sM=n(ye,"LI",{});var g8e=s(sM);Yue=n(g8e,"STRONG",{});var aht=s(Yue);vdr=r(aht,"bart"),aht.forEach(t),Tdr=r(g8e," \u2014 "),dO=n(g8e,"A",{href:!0});var nht=s(dO);Fdr=r(nht,"TFBartForConditionalGeneration"),nht.forEach(t),Cdr=r(g8e," (BART model)"),g8e.forEach(t),Mdr=i(ye),lM=n(ye,"LI",{});var h8e=s(lM);Kue=n(h8e,"STRONG",{});var sht=s(Kue);Edr=r(sht,"blenderbot"),sht.forEach(t),ydr=r(h8e," \u2014 "),cO=n(h8e,"A",{href:!0});var lht=s(cO);wdr=r(lht,"TFBlenderbotForConditionalGeneration"),lht.forEach(t),Adr=r(h8e," (Blenderbot model)"),h8e.forEach(t),Ldr=i(ye),iM=n(ye,"LI",{});var u8e=s(iM);Zue=n(u8e,"STRONG",{});var iht=s(Zue);Bdr=r(iht,"blenderbot-small"),iht.forEach(t),xdr=r(u8e," \u2014 "),mO=n(u8e,"A",{href:!0});var dht=s(mO);kdr=r(dht,"TFBlenderbotSmallForConditionalGeneration"),dht.forEach(t),Rdr=r(u8e," (BlenderbotSmall model)"),u8e.forEach(t),Sdr=i(ye),dM=n(ye,"LI",{});var p8e=s(dM);epe=n(p8e,"STRONG",{});var cht=s(epe);Pdr=r(cht,"encoder-decoder"),cht.forEach(t),$dr=r(p8e," \u2014 "),fO=n(p8e,"A",{href:!0});var mht=s(fO);Idr=r(mht,"TFEncoderDecoderModel"),mht.forEach(t),Ndr=r(p8e," (Encoder decoder model)"),p8e.forEach(t),jdr=i(ye),cM=n(ye,"LI",{});var _8e=s(cM);ope=n(_8e,"STRONG",{});var fht=s(ope);Ddr=r(fht,"led"),fht.forEach(t),qdr=r(_8e," \u2014 "),gO=n(_8e,"A",{href:!0});var ght=s(gO);Gdr=r(ght,"TFLEDForConditionalGeneration"),ght.forEach(t),Odr=r(_8e," (LED model)"),_8e.forEach(t),Xdr=i(ye),mM=n(ye,"LI",{});var b8e=s(mM);rpe=n(b8e,"STRONG",{});var hht=s(rpe);Vdr=r(hht,"marian"),hht.forEach(t),zdr=r(b8e," \u2014 "),hO=n(b8e,"A",{href:!0});var uht=s(hO);Wdr=r(uht,"TFMarianMTModel"),uht.forEach(t),Qdr=r(b8e," (Marian model)"),b8e.forEach(t),Hdr=i(ye),fM=n(ye,"LI",{});var v8e=s(fM);tpe=n(v8e,"STRONG",{});var pht=s(tpe);Udr=r(pht,"mbart"),pht.forEach(t),Jdr=r(v8e," \u2014 "),uO=n(v8e,"A",{href:!0});var _ht=s(uO);Ydr=r(_ht,"TFMBartForConditionalGeneration"),_ht.forEach(t),Kdr=r(v8e," (mBART model)"),v8e.forEach(t),Zdr=i(ye),gM=n(ye,"LI",{});var T8e=s(gM);ape=n(T8e,"STRONG",{});var bht=s(ape);ecr=r(bht,"mt5"),bht.forEach(t),ocr=r(T8e," \u2014 "),pO=n(T8e,"A",{href:!0});var vht=s(pO);rcr=r(vht,"TFMT5ForConditionalGeneration"),vht.forEach(t),tcr=r(T8e," (mT5 model)"),T8e.forEach(t),acr=i(ye),hM=n(ye,"LI",{});var F8e=s(hM);npe=n(F8e,"STRONG",{});var Tht=s(npe);ncr=r(Tht,"pegasus"),Tht.forEach(t),scr=r(F8e," \u2014 "),_O=n(F8e,"A",{href:!0});var Fht=s(_O);lcr=r(Fht,"TFPegasusForConditionalGeneration"),Fht.forEach(t),icr=r(F8e," (Pegasus model)"),F8e.forEach(t),dcr=i(ye),uM=n(ye,"LI",{});var C8e=s(uM);spe=n(C8e,"STRONG",{});var Cht=s(spe);ccr=r(Cht,"t5"),Cht.forEach(t),mcr=r(C8e," \u2014 "),bO=n(C8e,"A",{href:!0});var Mht=s(bO);fcr=r(Mht,"TFT5ForConditionalGeneration"),Mht.forEach(t),gcr=r(C8e," (T5 model)"),C8e.forEach(t),ye.forEach(t),hcr=i(Ta),lpe=n(Ta,"P",{});var Eht=s(lpe);ucr=r(Eht,"Examples:"),Eht.forEach(t),pcr=i(Ta),f(w0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),dRe=i(c),xc=n(c,"H2",{class:!0});var FPe=s(xc);pM=n(FPe,"A",{id:!0,class:!0,href:!0});var yht=s(pM);ipe=n(yht,"SPAN",{});var wht=s(ipe);f(A0.$$.fragment,wht),wht.forEach(t),yht.forEach(t),_cr=i(FPe),dpe=n(FPe,"SPAN",{});var Aht=s(dpe);bcr=r(Aht,"TFAutoModelForSequenceClassification"),Aht.forEach(t),FPe.forEach(t),cRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);f(L0.$$.fragment,Yl),vcr=i(Yl),kc=n(Yl,"P",{});var JW=s(kc);Tcr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cpe=n(JW,"CODE",{});var Lht=s(cpe);Fcr=r(Lht,"from_pretrained()"),Lht.forEach(t),Ccr=r(JW,"class method or the "),mpe=n(JW,"CODE",{});var Bht=s(mpe);Mcr=r(Bht,"from_config()"),Bht.forEach(t),Ecr=r(JW,`class
method.`),JW.forEach(t),ycr=i(Yl),B0=n(Yl,"P",{});var CPe=s(B0);wcr=r(CPe,"This class cannot be instantiated directly using "),fpe=n(CPe,"CODE",{});var xht=s(fpe);Acr=r(xht,"__init__()"),xht.forEach(t),Lcr=r(CPe," (throws an error)."),CPe.forEach(t),Bcr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);f(x0.$$.fragment,Kl),xcr=i(Kl),gpe=n(Kl,"P",{});var kht=s(gpe);kcr=r(kht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kht.forEach(t),Rcr=i(Kl),Rc=n(Kl,"P",{});var YW=s(Rc);Scr=r(YW,`Note:
Loading a model from its configuration file does `),hpe=n(YW,"STRONG",{});var Rht=s(hpe);Pcr=r(Rht,"not"),Rht.forEach(t),$cr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=n(YW,"CODE",{});var Sht=s(upe);Icr=r(Sht,"from_pretrained()"),Sht.forEach(t),Ncr=r(YW,"to load the model weights."),YW.forEach(t),jcr=i(Kl),ppe=n(Kl,"P",{});var Pht=s(ppe);Dcr=r(Pht,"Examples:"),Pht.forEach(t),qcr=i(Kl),f(k0.$$.fragment,Kl),Kl.forEach(t),Gcr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);f(R0.$$.fragment,Fa),Ocr=i(Fa),_pe=n(Fa,"P",{});var $ht=s(_pe);Xcr=r($ht,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$ht.forEach(t),Vcr=i(Fa),Cn=n(Fa,"P",{});var j5=s(Cn);zcr=r(j5,"The model class to instantiate is selected based on the "),bpe=n(j5,"CODE",{});var Iht=s(bpe);Wcr=r(Iht,"model_type"),Iht.forEach(t),Qcr=r(j5,` property of the config object (either
passed as an argument or loaded from `),vpe=n(j5,"CODE",{});var Nht=s(vpe);Hcr=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),Ucr=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(j5,"CODE",{});var jht=s(Tpe);Jcr=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),Ycr=r(j5,":"),j5.forEach(t),Kcr=i(Fa),V=n(Fa,"UL",{});var W=s(V);_M=n(W,"LI",{});var M8e=s(_M);Fpe=n(M8e,"STRONG",{});var Dht=s(Fpe);Zcr=r(Dht,"albert"),Dht.forEach(t),emr=r(M8e," \u2014 "),vO=n(M8e,"A",{href:!0});var qht=s(vO);omr=r(qht,"TFAlbertForSequenceClassification"),qht.forEach(t),rmr=r(M8e," (ALBERT model)"),M8e.forEach(t),tmr=i(W),bM=n(W,"LI",{});var E8e=s(bM);Cpe=n(E8e,"STRONG",{});var Ght=s(Cpe);amr=r(Ght,"bert"),Ght.forEach(t),nmr=r(E8e," \u2014 "),TO=n(E8e,"A",{href:!0});var Oht=s(TO);smr=r(Oht,"TFBertForSequenceClassification"),Oht.forEach(t),lmr=r(E8e," (BERT model)"),E8e.forEach(t),imr=i(W),vM=n(W,"LI",{});var y8e=s(vM);Mpe=n(y8e,"STRONG",{});var Xht=s(Mpe);dmr=r(Xht,"camembert"),Xht.forEach(t),cmr=r(y8e," \u2014 "),FO=n(y8e,"A",{href:!0});var Vht=s(FO);mmr=r(Vht,"TFCamembertForSequenceClassification"),Vht.forEach(t),fmr=r(y8e," (CamemBERT model)"),y8e.forEach(t),gmr=i(W),TM=n(W,"LI",{});var w8e=s(TM);Epe=n(w8e,"STRONG",{});var zht=s(Epe);hmr=r(zht,"convbert"),zht.forEach(t),umr=r(w8e," \u2014 "),CO=n(w8e,"A",{href:!0});var Wht=s(CO);pmr=r(Wht,"TFConvBertForSequenceClassification"),Wht.forEach(t),_mr=r(w8e," (ConvBERT model)"),w8e.forEach(t),bmr=i(W),FM=n(W,"LI",{});var A8e=s(FM);ype=n(A8e,"STRONG",{});var Qht=s(ype);vmr=r(Qht,"ctrl"),Qht.forEach(t),Tmr=r(A8e," \u2014 "),MO=n(A8e,"A",{href:!0});var Hht=s(MO);Fmr=r(Hht,"TFCTRLForSequenceClassification"),Hht.forEach(t),Cmr=r(A8e," (CTRL model)"),A8e.forEach(t),Mmr=i(W),CM=n(W,"LI",{});var L8e=s(CM);wpe=n(L8e,"STRONG",{});var Uht=s(wpe);Emr=r(Uht,"deberta"),Uht.forEach(t),ymr=r(L8e," \u2014 "),EO=n(L8e,"A",{href:!0});var Jht=s(EO);wmr=r(Jht,"TFDebertaForSequenceClassification"),Jht.forEach(t),Amr=r(L8e," (DeBERTa model)"),L8e.forEach(t),Lmr=i(W),MM=n(W,"LI",{});var B8e=s(MM);Ape=n(B8e,"STRONG",{});var Yht=s(Ape);Bmr=r(Yht,"deberta-v2"),Yht.forEach(t),xmr=r(B8e," \u2014 "),yO=n(B8e,"A",{href:!0});var Kht=s(yO);kmr=r(Kht,"TFDebertaV2ForSequenceClassification"),Kht.forEach(t),Rmr=r(B8e," (DeBERTa-v2 model)"),B8e.forEach(t),Smr=i(W),EM=n(W,"LI",{});var x8e=s(EM);Lpe=n(x8e,"STRONG",{});var Zht=s(Lpe);Pmr=r(Zht,"distilbert"),Zht.forEach(t),$mr=r(x8e," \u2014 "),wO=n(x8e,"A",{href:!0});var eut=s(wO);Imr=r(eut,"TFDistilBertForSequenceClassification"),eut.forEach(t),Nmr=r(x8e," (DistilBERT model)"),x8e.forEach(t),jmr=i(W),yM=n(W,"LI",{});var k8e=s(yM);Bpe=n(k8e,"STRONG",{});var out=s(Bpe);Dmr=r(out,"electra"),out.forEach(t),qmr=r(k8e," \u2014 "),AO=n(k8e,"A",{href:!0});var rut=s(AO);Gmr=r(rut,"TFElectraForSequenceClassification"),rut.forEach(t),Omr=r(k8e," (ELECTRA model)"),k8e.forEach(t),Xmr=i(W),wM=n(W,"LI",{});var R8e=s(wM);xpe=n(R8e,"STRONG",{});var tut=s(xpe);Vmr=r(tut,"flaubert"),tut.forEach(t),zmr=r(R8e," \u2014 "),LO=n(R8e,"A",{href:!0});var aut=s(LO);Wmr=r(aut,"TFFlaubertForSequenceClassification"),aut.forEach(t),Qmr=r(R8e," (FlauBERT model)"),R8e.forEach(t),Hmr=i(W),AM=n(W,"LI",{});var S8e=s(AM);kpe=n(S8e,"STRONG",{});var nut=s(kpe);Umr=r(nut,"funnel"),nut.forEach(t),Jmr=r(S8e," \u2014 "),BO=n(S8e,"A",{href:!0});var sut=s(BO);Ymr=r(sut,"TFFunnelForSequenceClassification"),sut.forEach(t),Kmr=r(S8e," (Funnel Transformer model)"),S8e.forEach(t),Zmr=i(W),LM=n(W,"LI",{});var P8e=s(LM);Rpe=n(P8e,"STRONG",{});var lut=s(Rpe);efr=r(lut,"gpt2"),lut.forEach(t),ofr=r(P8e," \u2014 "),xO=n(P8e,"A",{href:!0});var iut=s(xO);rfr=r(iut,"TFGPT2ForSequenceClassification"),iut.forEach(t),tfr=r(P8e," (OpenAI GPT-2 model)"),P8e.forEach(t),afr=i(W),BM=n(W,"LI",{});var $8e=s(BM);Spe=n($8e,"STRONG",{});var dut=s(Spe);nfr=r(dut,"layoutlm"),dut.forEach(t),sfr=r($8e," \u2014 "),kO=n($8e,"A",{href:!0});var cut=s(kO);lfr=r(cut,"TFLayoutLMForSequenceClassification"),cut.forEach(t),ifr=r($8e," (LayoutLM model)"),$8e.forEach(t),dfr=i(W),xM=n(W,"LI",{});var I8e=s(xM);Ppe=n(I8e,"STRONG",{});var mut=s(Ppe);cfr=r(mut,"longformer"),mut.forEach(t),mfr=r(I8e," \u2014 "),RO=n(I8e,"A",{href:!0});var fut=s(RO);ffr=r(fut,"TFLongformerForSequenceClassification"),fut.forEach(t),gfr=r(I8e," (Longformer model)"),I8e.forEach(t),hfr=i(W),kM=n(W,"LI",{});var N8e=s(kM);$pe=n(N8e,"STRONG",{});var gut=s($pe);ufr=r(gut,"mobilebert"),gut.forEach(t),pfr=r(N8e," \u2014 "),SO=n(N8e,"A",{href:!0});var hut=s(SO);_fr=r(hut,"TFMobileBertForSequenceClassification"),hut.forEach(t),bfr=r(N8e," (MobileBERT model)"),N8e.forEach(t),vfr=i(W),RM=n(W,"LI",{});var j8e=s(RM);Ipe=n(j8e,"STRONG",{});var uut=s(Ipe);Tfr=r(uut,"mpnet"),uut.forEach(t),Ffr=r(j8e," \u2014 "),PO=n(j8e,"A",{href:!0});var put=s(PO);Cfr=r(put,"TFMPNetForSequenceClassification"),put.forEach(t),Mfr=r(j8e," (MPNet model)"),j8e.forEach(t),Efr=i(W),SM=n(W,"LI",{});var D8e=s(SM);Npe=n(D8e,"STRONG",{});var _ut=s(Npe);yfr=r(_ut,"openai-gpt"),_ut.forEach(t),wfr=r(D8e," \u2014 "),$O=n(D8e,"A",{href:!0});var but=s($O);Afr=r(but,"TFOpenAIGPTForSequenceClassification"),but.forEach(t),Lfr=r(D8e," (OpenAI GPT model)"),D8e.forEach(t),Bfr=i(W),PM=n(W,"LI",{});var q8e=s(PM);jpe=n(q8e,"STRONG",{});var vut=s(jpe);xfr=r(vut,"rembert"),vut.forEach(t),kfr=r(q8e," \u2014 "),IO=n(q8e,"A",{href:!0});var Tut=s(IO);Rfr=r(Tut,"TFRemBertForSequenceClassification"),Tut.forEach(t),Sfr=r(q8e," (RemBERT model)"),q8e.forEach(t),Pfr=i(W),$M=n(W,"LI",{});var G8e=s($M);Dpe=n(G8e,"STRONG",{});var Fut=s(Dpe);$fr=r(Fut,"roberta"),Fut.forEach(t),Ifr=r(G8e," \u2014 "),NO=n(G8e,"A",{href:!0});var Cut=s(NO);Nfr=r(Cut,"TFRobertaForSequenceClassification"),Cut.forEach(t),jfr=r(G8e," (RoBERTa model)"),G8e.forEach(t),Dfr=i(W),IM=n(W,"LI",{});var O8e=s(IM);qpe=n(O8e,"STRONG",{});var Mut=s(qpe);qfr=r(Mut,"roformer"),Mut.forEach(t),Gfr=r(O8e," \u2014 "),jO=n(O8e,"A",{href:!0});var Eut=s(jO);Ofr=r(Eut,"TFRoFormerForSequenceClassification"),Eut.forEach(t),Xfr=r(O8e," (RoFormer model)"),O8e.forEach(t),Vfr=i(W),NM=n(W,"LI",{});var X8e=s(NM);Gpe=n(X8e,"STRONG",{});var yut=s(Gpe);zfr=r(yut,"tapas"),yut.forEach(t),Wfr=r(X8e," \u2014 "),DO=n(X8e,"A",{href:!0});var wut=s(DO);Qfr=r(wut,"TFTapasForSequenceClassification"),wut.forEach(t),Hfr=r(X8e," (TAPAS model)"),X8e.forEach(t),Ufr=i(W),jM=n(W,"LI",{});var V8e=s(jM);Ope=n(V8e,"STRONG",{});var Aut=s(Ope);Jfr=r(Aut,"transfo-xl"),Aut.forEach(t),Yfr=r(V8e," \u2014 "),qO=n(V8e,"A",{href:!0});var Lut=s(qO);Kfr=r(Lut,"TFTransfoXLForSequenceClassification"),Lut.forEach(t),Zfr=r(V8e," (Transformer-XL model)"),V8e.forEach(t),egr=i(W),DM=n(W,"LI",{});var z8e=s(DM);Xpe=n(z8e,"STRONG",{});var But=s(Xpe);ogr=r(But,"xlm"),But.forEach(t),rgr=r(z8e," \u2014 "),GO=n(z8e,"A",{href:!0});var xut=s(GO);tgr=r(xut,"TFXLMForSequenceClassification"),xut.forEach(t),agr=r(z8e," (XLM model)"),z8e.forEach(t),ngr=i(W),qM=n(W,"LI",{});var W8e=s(qM);Vpe=n(W8e,"STRONG",{});var kut=s(Vpe);sgr=r(kut,"xlm-roberta"),kut.forEach(t),lgr=r(W8e," \u2014 "),OO=n(W8e,"A",{href:!0});var Rut=s(OO);igr=r(Rut,"TFXLMRobertaForSequenceClassification"),Rut.forEach(t),dgr=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),cgr=i(W),GM=n(W,"LI",{});var Q8e=s(GM);zpe=n(Q8e,"STRONG",{});var Sut=s(zpe);mgr=r(Sut,"xlnet"),Sut.forEach(t),fgr=r(Q8e," \u2014 "),XO=n(Q8e,"A",{href:!0});var Put=s(XO);ggr=r(Put,"TFXLNetForSequenceClassification"),Put.forEach(t),hgr=r(Q8e," (XLNet model)"),Q8e.forEach(t),W.forEach(t),ugr=i(Fa),Wpe=n(Fa,"P",{});var $ut=s(Wpe);pgr=r($ut,"Examples:"),$ut.forEach(t),_gr=i(Fa),f(S0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),mRe=i(c),Sc=n(c,"H2",{class:!0});var MPe=s(Sc);OM=n(MPe,"A",{id:!0,class:!0,href:!0});var Iut=s(OM);Qpe=n(Iut,"SPAN",{});var Nut=s(Qpe);f(P0.$$.fragment,Nut),Nut.forEach(t),Iut.forEach(t),bgr=i(MPe),Hpe=n(MPe,"SPAN",{});var jut=s(Hpe);vgr=r(jut,"TFAutoModelForMultipleChoice"),jut.forEach(t),MPe.forEach(t),fRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);f($0.$$.fragment,Zl),Tgr=i(Zl),Pc=n(Zl,"P",{});var KW=s(Pc);Fgr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Upe=n(KW,"CODE",{});var Dut=s(Upe);Cgr=r(Dut,"from_pretrained()"),Dut.forEach(t),Mgr=r(KW,"class method or the "),Jpe=n(KW,"CODE",{});var qut=s(Jpe);Egr=r(qut,"from_config()"),qut.forEach(t),ygr=r(KW,`class
method.`),KW.forEach(t),wgr=i(Zl),I0=n(Zl,"P",{});var EPe=s(I0);Agr=r(EPe,"This class cannot be instantiated directly using "),Ype=n(EPe,"CODE",{});var Gut=s(Ype);Lgr=r(Gut,"__init__()"),Gut.forEach(t),Bgr=r(EPe," (throws an error)."),EPe.forEach(t),xgr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);f(N0.$$.fragment,ei),kgr=i(ei),Kpe=n(ei,"P",{});var Out=s(Kpe);Rgr=r(Out,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Out.forEach(t),Sgr=i(ei),$c=n(ei,"P",{});var ZW=s($c);Pgr=r(ZW,`Note:
Loading a model from its configuration file does `),Zpe=n(ZW,"STRONG",{});var Xut=s(Zpe);$gr=r(Xut,"not"),Xut.forEach(t),Igr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),e_e=n(ZW,"CODE",{});var Vut=s(e_e);Ngr=r(Vut,"from_pretrained()"),Vut.forEach(t),jgr=r(ZW,"to load the model weights."),ZW.forEach(t),Dgr=i(ei),o_e=n(ei,"P",{});var zut=s(o_e);qgr=r(zut,"Examples:"),zut.forEach(t),Ggr=i(ei),f(j0.$$.fragment,ei),ei.forEach(t),Ogr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);f(D0.$$.fragment,Ca),Xgr=i(Ca),r_e=n(Ca,"P",{});var Wut=s(r_e);Vgr=r(Wut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wut.forEach(t),zgr=i(Ca),Mn=n(Ca,"P",{});var D5=s(Mn);Wgr=r(D5,"The model class to instantiate is selected based on the "),t_e=n(D5,"CODE",{});var Qut=s(t_e);Qgr=r(Qut,"model_type"),Qut.forEach(t),Hgr=r(D5,` property of the config object (either
passed as an argument or loaded from `),a_e=n(D5,"CODE",{});var Hut=s(a_e);Ugr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),Jgr=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(D5,"CODE",{});var Uut=s(n_e);Ygr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),Kgr=r(D5,":"),D5.forEach(t),Zgr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);XM=n(le,"LI",{});var H8e=s(XM);s_e=n(H8e,"STRONG",{});var Jut=s(s_e);ehr=r(Jut,"albert"),Jut.forEach(t),ohr=r(H8e," \u2014 "),VO=n(H8e,"A",{href:!0});var Yut=s(VO);rhr=r(Yut,"TFAlbertForMultipleChoice"),Yut.forEach(t),thr=r(H8e," (ALBERT model)"),H8e.forEach(t),ahr=i(le),VM=n(le,"LI",{});var U8e=s(VM);l_e=n(U8e,"STRONG",{});var Kut=s(l_e);nhr=r(Kut,"bert"),Kut.forEach(t),shr=r(U8e," \u2014 "),zO=n(U8e,"A",{href:!0});var Zut=s(zO);lhr=r(Zut,"TFBertForMultipleChoice"),Zut.forEach(t),ihr=r(U8e," (BERT model)"),U8e.forEach(t),dhr=i(le),zM=n(le,"LI",{});var J8e=s(zM);i_e=n(J8e,"STRONG",{});var ept=s(i_e);chr=r(ept,"camembert"),ept.forEach(t),mhr=r(J8e," \u2014 "),WO=n(J8e,"A",{href:!0});var opt=s(WO);fhr=r(opt,"TFCamembertForMultipleChoice"),opt.forEach(t),ghr=r(J8e," (CamemBERT model)"),J8e.forEach(t),hhr=i(le),WM=n(le,"LI",{});var Y8e=s(WM);d_e=n(Y8e,"STRONG",{});var rpt=s(d_e);uhr=r(rpt,"convbert"),rpt.forEach(t),phr=r(Y8e," \u2014 "),QO=n(Y8e,"A",{href:!0});var tpt=s(QO);_hr=r(tpt,"TFConvBertForMultipleChoice"),tpt.forEach(t),bhr=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),vhr=i(le),QM=n(le,"LI",{});var K8e=s(QM);c_e=n(K8e,"STRONG",{});var apt=s(c_e);Thr=r(apt,"distilbert"),apt.forEach(t),Fhr=r(K8e," \u2014 "),HO=n(K8e,"A",{href:!0});var npt=s(HO);Chr=r(npt,"TFDistilBertForMultipleChoice"),npt.forEach(t),Mhr=r(K8e," (DistilBERT model)"),K8e.forEach(t),Ehr=i(le),HM=n(le,"LI",{});var Z8e=s(HM);m_e=n(Z8e,"STRONG",{});var spt=s(m_e);yhr=r(spt,"electra"),spt.forEach(t),whr=r(Z8e," \u2014 "),UO=n(Z8e,"A",{href:!0});var lpt=s(UO);Ahr=r(lpt,"TFElectraForMultipleChoice"),lpt.forEach(t),Lhr=r(Z8e," (ELECTRA model)"),Z8e.forEach(t),Bhr=i(le),UM=n(le,"LI",{});var e9e=s(UM);f_e=n(e9e,"STRONG",{});var ipt=s(f_e);xhr=r(ipt,"flaubert"),ipt.forEach(t),khr=r(e9e," \u2014 "),JO=n(e9e,"A",{href:!0});var dpt=s(JO);Rhr=r(dpt,"TFFlaubertForMultipleChoice"),dpt.forEach(t),Shr=r(e9e," (FlauBERT model)"),e9e.forEach(t),Phr=i(le),JM=n(le,"LI",{});var o9e=s(JM);g_e=n(o9e,"STRONG",{});var cpt=s(g_e);$hr=r(cpt,"funnel"),cpt.forEach(t),Ihr=r(o9e," \u2014 "),YO=n(o9e,"A",{href:!0});var mpt=s(YO);Nhr=r(mpt,"TFFunnelForMultipleChoice"),mpt.forEach(t),jhr=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),Dhr=i(le),YM=n(le,"LI",{});var r9e=s(YM);h_e=n(r9e,"STRONG",{});var fpt=s(h_e);qhr=r(fpt,"longformer"),fpt.forEach(t),Ghr=r(r9e," \u2014 "),KO=n(r9e,"A",{href:!0});var gpt=s(KO);Ohr=r(gpt,"TFLongformerForMultipleChoice"),gpt.forEach(t),Xhr=r(r9e," (Longformer model)"),r9e.forEach(t),Vhr=i(le),KM=n(le,"LI",{});var t9e=s(KM);u_e=n(t9e,"STRONG",{});var hpt=s(u_e);zhr=r(hpt,"mobilebert"),hpt.forEach(t),Whr=r(t9e," \u2014 "),ZO=n(t9e,"A",{href:!0});var upt=s(ZO);Qhr=r(upt,"TFMobileBertForMultipleChoice"),upt.forEach(t),Hhr=r(t9e," (MobileBERT model)"),t9e.forEach(t),Uhr=i(le),ZM=n(le,"LI",{});var a9e=s(ZM);p_e=n(a9e,"STRONG",{});var ppt=s(p_e);Jhr=r(ppt,"mpnet"),ppt.forEach(t),Yhr=r(a9e," \u2014 "),eX=n(a9e,"A",{href:!0});var _pt=s(eX);Khr=r(_pt,"TFMPNetForMultipleChoice"),_pt.forEach(t),Zhr=r(a9e," (MPNet model)"),a9e.forEach(t),eur=i(le),e4=n(le,"LI",{});var n9e=s(e4);__e=n(n9e,"STRONG",{});var bpt=s(__e);our=r(bpt,"rembert"),bpt.forEach(t),rur=r(n9e," \u2014 "),oX=n(n9e,"A",{href:!0});var vpt=s(oX);tur=r(vpt,"TFRemBertForMultipleChoice"),vpt.forEach(t),aur=r(n9e," (RemBERT model)"),n9e.forEach(t),nur=i(le),o4=n(le,"LI",{});var s9e=s(o4);b_e=n(s9e,"STRONG",{});var Tpt=s(b_e);sur=r(Tpt,"roberta"),Tpt.forEach(t),lur=r(s9e," \u2014 "),rX=n(s9e,"A",{href:!0});var Fpt=s(rX);iur=r(Fpt,"TFRobertaForMultipleChoice"),Fpt.forEach(t),dur=r(s9e," (RoBERTa model)"),s9e.forEach(t),cur=i(le),r4=n(le,"LI",{});var l9e=s(r4);v_e=n(l9e,"STRONG",{});var Cpt=s(v_e);mur=r(Cpt,"roformer"),Cpt.forEach(t),fur=r(l9e," \u2014 "),tX=n(l9e,"A",{href:!0});var Mpt=s(tX);gur=r(Mpt,"TFRoFormerForMultipleChoice"),Mpt.forEach(t),hur=r(l9e," (RoFormer model)"),l9e.forEach(t),uur=i(le),t4=n(le,"LI",{});var i9e=s(t4);T_e=n(i9e,"STRONG",{});var Ept=s(T_e);pur=r(Ept,"xlm"),Ept.forEach(t),_ur=r(i9e," \u2014 "),aX=n(i9e,"A",{href:!0});var ypt=s(aX);bur=r(ypt,"TFXLMForMultipleChoice"),ypt.forEach(t),vur=r(i9e," (XLM model)"),i9e.forEach(t),Tur=i(le),a4=n(le,"LI",{});var d9e=s(a4);F_e=n(d9e,"STRONG",{});var wpt=s(F_e);Fur=r(wpt,"xlm-roberta"),wpt.forEach(t),Cur=r(d9e," \u2014 "),nX=n(d9e,"A",{href:!0});var Apt=s(nX);Mur=r(Apt,"TFXLMRobertaForMultipleChoice"),Apt.forEach(t),Eur=r(d9e," (XLM-RoBERTa model)"),d9e.forEach(t),yur=i(le),n4=n(le,"LI",{});var c9e=s(n4);C_e=n(c9e,"STRONG",{});var Lpt=s(C_e);wur=r(Lpt,"xlnet"),Lpt.forEach(t),Aur=r(c9e," \u2014 "),sX=n(c9e,"A",{href:!0});var Bpt=s(sX);Lur=r(Bpt,"TFXLNetForMultipleChoice"),Bpt.forEach(t),Bur=r(c9e," (XLNet model)"),c9e.forEach(t),le.forEach(t),xur=i(Ca),M_e=n(Ca,"P",{});var xpt=s(M_e);kur=r(xpt,"Examples:"),xpt.forEach(t),Rur=i(Ca),f(q0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),gRe=i(c),Ic=n(c,"H2",{class:!0});var yPe=s(Ic);s4=n(yPe,"A",{id:!0,class:!0,href:!0});var kpt=s(s4);E_e=n(kpt,"SPAN",{});var Rpt=s(E_e);f(G0.$$.fragment,Rpt),Rpt.forEach(t),kpt.forEach(t),Sur=i(yPe),y_e=n(yPe,"SPAN",{});var Spt=s(y_e);Pur=r(Spt,"TFAutoModelForTableQuestionAnswering"),Spt.forEach(t),yPe.forEach(t),hRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);f(O0.$$.fragment,oi),$ur=i(oi),Nc=n(oi,"P",{});var eQ=s(Nc);Iur=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),w_e=n(eQ,"CODE",{});var Ppt=s(w_e);Nur=r(Ppt,"from_pretrained()"),Ppt.forEach(t),jur=r(eQ,"class method or the "),A_e=n(eQ,"CODE",{});var $pt=s(A_e);Dur=r($pt,"from_config()"),$pt.forEach(t),qur=r(eQ,`class
method.`),eQ.forEach(t),Gur=i(oi),X0=n(oi,"P",{});var wPe=s(X0);Our=r(wPe,"This class cannot be instantiated directly using "),L_e=n(wPe,"CODE",{});var Ipt=s(L_e);Xur=r(Ipt,"__init__()"),Ipt.forEach(t),Vur=r(wPe," (throws an error)."),wPe.forEach(t),zur=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);f(V0.$$.fragment,ri),Wur=i(ri),B_e=n(ri,"P",{});var Npt=s(B_e);Qur=r(Npt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Npt.forEach(t),Hur=i(ri),jc=n(ri,"P",{});var oQ=s(jc);Uur=r(oQ,`Note:
Loading a model from its configuration file does `),x_e=n(oQ,"STRONG",{});var jpt=s(x_e);Jur=r(jpt,"not"),jpt.forEach(t),Yur=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=n(oQ,"CODE",{});var Dpt=s(k_e);Kur=r(Dpt,"from_pretrained()"),Dpt.forEach(t),Zur=r(oQ,"to load the model weights."),oQ.forEach(t),epr=i(ri),R_e=n(ri,"P",{});var qpt=s(R_e);opr=r(qpt,"Examples:"),qpt.forEach(t),rpr=i(ri),f(z0.$$.fragment,ri),ri.forEach(t),tpr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);f(W0.$$.fragment,Ma),apr=i(Ma),S_e=n(Ma,"P",{});var Gpt=s(S_e);npr=r(Gpt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Gpt.forEach(t),spr=i(Ma),En=n(Ma,"P",{});var q5=s(En);lpr=r(q5,"The model class to instantiate is selected based on the "),P_e=n(q5,"CODE",{});var Opt=s(P_e);ipr=r(Opt,"model_type"),Opt.forEach(t),dpr=r(q5,` property of the config object (either
passed as an argument or loaded from `),$_e=n(q5,"CODE",{});var Xpt=s($_e);cpr=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),mpr=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(q5,"CODE",{});var Vpt=s(I_e);fpr=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),gpr=r(q5,":"),q5.forEach(t),hpr=i(Ma),N_e=n(Ma,"UL",{});var zpt=s(N_e);l4=n(zpt,"LI",{});var m9e=s(l4);j_e=n(m9e,"STRONG",{});var Wpt=s(j_e);upr=r(Wpt,"tapas"),Wpt.forEach(t),ppr=r(m9e," \u2014 "),lX=n(m9e,"A",{href:!0});var Qpt=s(lX);_pr=r(Qpt,"TFTapasForQuestionAnswering"),Qpt.forEach(t),bpr=r(m9e," (TAPAS model)"),m9e.forEach(t),zpt.forEach(t),vpr=i(Ma),D_e=n(Ma,"P",{});var Hpt=s(D_e);Tpr=r(Hpt,"Examples:"),Hpt.forEach(t),Fpr=i(Ma),f(Q0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),uRe=i(c),Dc=n(c,"H2",{class:!0});var APe=s(Dc);i4=n(APe,"A",{id:!0,class:!0,href:!0});var Upt=s(i4);q_e=n(Upt,"SPAN",{});var Jpt=s(q_e);f(H0.$$.fragment,Jpt),Jpt.forEach(t),Upt.forEach(t),Cpr=i(APe),G_e=n(APe,"SPAN",{});var Ypt=s(G_e);Mpr=r(Ypt,"TFAutoModelForTokenClassification"),Ypt.forEach(t),APe.forEach(t),pRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);f(U0.$$.fragment,ti),Epr=i(ti),qc=n(ti,"P",{});var rQ=s(qc);ypr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),O_e=n(rQ,"CODE",{});var Kpt=s(O_e);wpr=r(Kpt,"from_pretrained()"),Kpt.forEach(t),Apr=r(rQ,"class method or the "),X_e=n(rQ,"CODE",{});var Zpt=s(X_e);Lpr=r(Zpt,"from_config()"),Zpt.forEach(t),Bpr=r(rQ,`class
method.`),rQ.forEach(t),xpr=i(ti),J0=n(ti,"P",{});var LPe=s(J0);kpr=r(LPe,"This class cannot be instantiated directly using "),V_e=n(LPe,"CODE",{});var e_t=s(V_e);Rpr=r(e_t,"__init__()"),e_t.forEach(t),Spr=r(LPe," (throws an error)."),LPe.forEach(t),Ppr=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);f(Y0.$$.fragment,ai),$pr=i(ai),z_e=n(ai,"P",{});var o_t=s(z_e);Ipr=r(o_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o_t.forEach(t),Npr=i(ai),Gc=n(ai,"P",{});var tQ=s(Gc);jpr=r(tQ,`Note:
Loading a model from its configuration file does `),W_e=n(tQ,"STRONG",{});var r_t=s(W_e);Dpr=r(r_t,"not"),r_t.forEach(t),qpr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q_e=n(tQ,"CODE",{});var t_t=s(Q_e);Gpr=r(t_t,"from_pretrained()"),t_t.forEach(t),Opr=r(tQ,"to load the model weights."),tQ.forEach(t),Xpr=i(ai),H_e=n(ai,"P",{});var a_t=s(H_e);Vpr=r(a_t,"Examples:"),a_t.forEach(t),zpr=i(ai),f(K0.$$.fragment,ai),ai.forEach(t),Wpr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);f(Z0.$$.fragment,Ea),Qpr=i(Ea),U_e=n(Ea,"P",{});var n_t=s(U_e);Hpr=r(n_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n_t.forEach(t),Upr=i(Ea),yn=n(Ea,"P",{});var G5=s(yn);Jpr=r(G5,"The model class to instantiate is selected based on the "),J_e=n(G5,"CODE",{});var s_t=s(J_e);Ypr=r(s_t,"model_type"),s_t.forEach(t),Kpr=r(G5,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(G5,"CODE",{});var l_t=s(Y_e);Zpr=r(l_t,"pretrained_model_name_or_path"),l_t.forEach(t),e_r=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(G5,"CODE",{});var i_t=s(K_e);o_r=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),r_r=r(G5,":"),G5.forEach(t),t_r=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);d4=n(oe,"LI",{});var f9e=s(d4);Z_e=n(f9e,"STRONG",{});var d_t=s(Z_e);a_r=r(d_t,"albert"),d_t.forEach(t),n_r=r(f9e," \u2014 "),iX=n(f9e,"A",{href:!0});var c_t=s(iX);s_r=r(c_t,"TFAlbertForTokenClassification"),c_t.forEach(t),l_r=r(f9e," (ALBERT model)"),f9e.forEach(t),i_r=i(oe),c4=n(oe,"LI",{});var g9e=s(c4);ebe=n(g9e,"STRONG",{});var m_t=s(ebe);d_r=r(m_t,"bert"),m_t.forEach(t),c_r=r(g9e," \u2014 "),dX=n(g9e,"A",{href:!0});var f_t=s(dX);m_r=r(f_t,"TFBertForTokenClassification"),f_t.forEach(t),f_r=r(g9e," (BERT model)"),g9e.forEach(t),g_r=i(oe),m4=n(oe,"LI",{});var h9e=s(m4);obe=n(h9e,"STRONG",{});var g_t=s(obe);h_r=r(g_t,"camembert"),g_t.forEach(t),u_r=r(h9e," \u2014 "),cX=n(h9e,"A",{href:!0});var h_t=s(cX);p_r=r(h_t,"TFCamembertForTokenClassification"),h_t.forEach(t),__r=r(h9e," (CamemBERT model)"),h9e.forEach(t),b_r=i(oe),f4=n(oe,"LI",{});var u9e=s(f4);rbe=n(u9e,"STRONG",{});var u_t=s(rbe);v_r=r(u_t,"convbert"),u_t.forEach(t),T_r=r(u9e," \u2014 "),mX=n(u9e,"A",{href:!0});var p_t=s(mX);F_r=r(p_t,"TFConvBertForTokenClassification"),p_t.forEach(t),C_r=r(u9e," (ConvBERT model)"),u9e.forEach(t),M_r=i(oe),g4=n(oe,"LI",{});var p9e=s(g4);tbe=n(p9e,"STRONG",{});var __t=s(tbe);E_r=r(__t,"deberta"),__t.forEach(t),y_r=r(p9e," \u2014 "),fX=n(p9e,"A",{href:!0});var b_t=s(fX);w_r=r(b_t,"TFDebertaForTokenClassification"),b_t.forEach(t),A_r=r(p9e," (DeBERTa model)"),p9e.forEach(t),L_r=i(oe),h4=n(oe,"LI",{});var _9e=s(h4);abe=n(_9e,"STRONG",{});var v_t=s(abe);B_r=r(v_t,"deberta-v2"),v_t.forEach(t),x_r=r(_9e," \u2014 "),gX=n(_9e,"A",{href:!0});var T_t=s(gX);k_r=r(T_t,"TFDebertaV2ForTokenClassification"),T_t.forEach(t),R_r=r(_9e," (DeBERTa-v2 model)"),_9e.forEach(t),S_r=i(oe),u4=n(oe,"LI",{});var b9e=s(u4);nbe=n(b9e,"STRONG",{});var F_t=s(nbe);P_r=r(F_t,"distilbert"),F_t.forEach(t),$_r=r(b9e," \u2014 "),hX=n(b9e,"A",{href:!0});var C_t=s(hX);I_r=r(C_t,"TFDistilBertForTokenClassification"),C_t.forEach(t),N_r=r(b9e," (DistilBERT model)"),b9e.forEach(t),j_r=i(oe),p4=n(oe,"LI",{});var v9e=s(p4);sbe=n(v9e,"STRONG",{});var M_t=s(sbe);D_r=r(M_t,"electra"),M_t.forEach(t),q_r=r(v9e," \u2014 "),uX=n(v9e,"A",{href:!0});var E_t=s(uX);G_r=r(E_t,"TFElectraForTokenClassification"),E_t.forEach(t),O_r=r(v9e," (ELECTRA model)"),v9e.forEach(t),X_r=i(oe),_4=n(oe,"LI",{});var T9e=s(_4);lbe=n(T9e,"STRONG",{});var y_t=s(lbe);V_r=r(y_t,"flaubert"),y_t.forEach(t),z_r=r(T9e," \u2014 "),pX=n(T9e,"A",{href:!0});var w_t=s(pX);W_r=r(w_t,"TFFlaubertForTokenClassification"),w_t.forEach(t),Q_r=r(T9e," (FlauBERT model)"),T9e.forEach(t),H_r=i(oe),b4=n(oe,"LI",{});var F9e=s(b4);ibe=n(F9e,"STRONG",{});var A_t=s(ibe);U_r=r(A_t,"funnel"),A_t.forEach(t),J_r=r(F9e," \u2014 "),_X=n(F9e,"A",{href:!0});var L_t=s(_X);Y_r=r(L_t,"TFFunnelForTokenClassification"),L_t.forEach(t),K_r=r(F9e," (Funnel Transformer model)"),F9e.forEach(t),Z_r=i(oe),v4=n(oe,"LI",{});var C9e=s(v4);dbe=n(C9e,"STRONG",{});var B_t=s(dbe);ebr=r(B_t,"layoutlm"),B_t.forEach(t),obr=r(C9e," \u2014 "),bX=n(C9e,"A",{href:!0});var x_t=s(bX);rbr=r(x_t,"TFLayoutLMForTokenClassification"),x_t.forEach(t),tbr=r(C9e," (LayoutLM model)"),C9e.forEach(t),abr=i(oe),T4=n(oe,"LI",{});var M9e=s(T4);cbe=n(M9e,"STRONG",{});var k_t=s(cbe);nbr=r(k_t,"longformer"),k_t.forEach(t),sbr=r(M9e," \u2014 "),vX=n(M9e,"A",{href:!0});var R_t=s(vX);lbr=r(R_t,"TFLongformerForTokenClassification"),R_t.forEach(t),ibr=r(M9e," (Longformer model)"),M9e.forEach(t),dbr=i(oe),F4=n(oe,"LI",{});var E9e=s(F4);mbe=n(E9e,"STRONG",{});var S_t=s(mbe);cbr=r(S_t,"mobilebert"),S_t.forEach(t),mbr=r(E9e," \u2014 "),TX=n(E9e,"A",{href:!0});var P_t=s(TX);fbr=r(P_t,"TFMobileBertForTokenClassification"),P_t.forEach(t),gbr=r(E9e," (MobileBERT model)"),E9e.forEach(t),hbr=i(oe),C4=n(oe,"LI",{});var y9e=s(C4);fbe=n(y9e,"STRONG",{});var $_t=s(fbe);ubr=r($_t,"mpnet"),$_t.forEach(t),pbr=r(y9e," \u2014 "),FX=n(y9e,"A",{href:!0});var I_t=s(FX);_br=r(I_t,"TFMPNetForTokenClassification"),I_t.forEach(t),bbr=r(y9e," (MPNet model)"),y9e.forEach(t),vbr=i(oe),M4=n(oe,"LI",{});var w9e=s(M4);gbe=n(w9e,"STRONG",{});var N_t=s(gbe);Tbr=r(N_t,"rembert"),N_t.forEach(t),Fbr=r(w9e," \u2014 "),CX=n(w9e,"A",{href:!0});var j_t=s(CX);Cbr=r(j_t,"TFRemBertForTokenClassification"),j_t.forEach(t),Mbr=r(w9e," (RemBERT model)"),w9e.forEach(t),Ebr=i(oe),E4=n(oe,"LI",{});var A9e=s(E4);hbe=n(A9e,"STRONG",{});var D_t=s(hbe);ybr=r(D_t,"roberta"),D_t.forEach(t),wbr=r(A9e," \u2014 "),MX=n(A9e,"A",{href:!0});var q_t=s(MX);Abr=r(q_t,"TFRobertaForTokenClassification"),q_t.forEach(t),Lbr=r(A9e," (RoBERTa model)"),A9e.forEach(t),Bbr=i(oe),y4=n(oe,"LI",{});var L9e=s(y4);ube=n(L9e,"STRONG",{});var G_t=s(ube);xbr=r(G_t,"roformer"),G_t.forEach(t),kbr=r(L9e," \u2014 "),EX=n(L9e,"A",{href:!0});var O_t=s(EX);Rbr=r(O_t,"TFRoFormerForTokenClassification"),O_t.forEach(t),Sbr=r(L9e," (RoFormer model)"),L9e.forEach(t),Pbr=i(oe),w4=n(oe,"LI",{});var B9e=s(w4);pbe=n(B9e,"STRONG",{});var X_t=s(pbe);$br=r(X_t,"xlm"),X_t.forEach(t),Ibr=r(B9e," \u2014 "),yX=n(B9e,"A",{href:!0});var V_t=s(yX);Nbr=r(V_t,"TFXLMForTokenClassification"),V_t.forEach(t),jbr=r(B9e," (XLM model)"),B9e.forEach(t),Dbr=i(oe),A4=n(oe,"LI",{});var x9e=s(A4);_be=n(x9e,"STRONG",{});var z_t=s(_be);qbr=r(z_t,"xlm-roberta"),z_t.forEach(t),Gbr=r(x9e," \u2014 "),wX=n(x9e,"A",{href:!0});var W_t=s(wX);Obr=r(W_t,"TFXLMRobertaForTokenClassification"),W_t.forEach(t),Xbr=r(x9e," (XLM-RoBERTa model)"),x9e.forEach(t),Vbr=i(oe),L4=n(oe,"LI",{});var k9e=s(L4);bbe=n(k9e,"STRONG",{});var Q_t=s(bbe);zbr=r(Q_t,"xlnet"),Q_t.forEach(t),Wbr=r(k9e," \u2014 "),AX=n(k9e,"A",{href:!0});var H_t=s(AX);Qbr=r(H_t,"TFXLNetForTokenClassification"),H_t.forEach(t),Hbr=r(k9e," (XLNet model)"),k9e.forEach(t),oe.forEach(t),Ubr=i(Ea),vbe=n(Ea,"P",{});var U_t=s(vbe);Jbr=r(U_t,"Examples:"),U_t.forEach(t),Ybr=i(Ea),f(eL.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),_Re=i(c),Oc=n(c,"H2",{class:!0});var BPe=s(Oc);B4=n(BPe,"A",{id:!0,class:!0,href:!0});var J_t=s(B4);Tbe=n(J_t,"SPAN",{});var Y_t=s(Tbe);f(oL.$$.fragment,Y_t),Y_t.forEach(t),J_t.forEach(t),Kbr=i(BPe),Fbe=n(BPe,"SPAN",{});var K_t=s(Fbe);Zbr=r(K_t,"TFAutoModelForQuestionAnswering"),K_t.forEach(t),BPe.forEach(t),bRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);f(rL.$$.fragment,ni),e2r=i(ni),Xc=n(ni,"P",{});var aQ=s(Xc);o2r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cbe=n(aQ,"CODE",{});var Z_t=s(Cbe);r2r=r(Z_t,"from_pretrained()"),Z_t.forEach(t),t2r=r(aQ,"class method or the "),Mbe=n(aQ,"CODE",{});var ebt=s(Mbe);a2r=r(ebt,"from_config()"),ebt.forEach(t),n2r=r(aQ,`class
method.`),aQ.forEach(t),s2r=i(ni),tL=n(ni,"P",{});var xPe=s(tL);l2r=r(xPe,"This class cannot be instantiated directly using "),Ebe=n(xPe,"CODE",{});var obt=s(Ebe);i2r=r(obt,"__init__()"),obt.forEach(t),d2r=r(xPe," (throws an error)."),xPe.forEach(t),c2r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);f(aL.$$.fragment,si),m2r=i(si),ybe=n(si,"P",{});var rbt=s(ybe);f2r=r(rbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rbt.forEach(t),g2r=i(si),Vc=n(si,"P",{});var nQ=s(Vc);h2r=r(nQ,`Note:
Loading a model from its configuration file does `),wbe=n(nQ,"STRONG",{});var tbt=s(wbe);u2r=r(tbt,"not"),tbt.forEach(t),p2r=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Abe=n(nQ,"CODE",{});var abt=s(Abe);_2r=r(abt,"from_pretrained()"),abt.forEach(t),b2r=r(nQ,"to load the model weights."),nQ.forEach(t),v2r=i(si),Lbe=n(si,"P",{});var nbt=s(Lbe);T2r=r(nbt,"Examples:"),nbt.forEach(t),F2r=i(si),f(nL.$$.fragment,si),si.forEach(t),C2r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);f(sL.$$.fragment,ya),M2r=i(ya),Bbe=n(ya,"P",{});var sbt=s(Bbe);E2r=r(sbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sbt.forEach(t),y2r=i(ya),wn=n(ya,"P",{});var O5=s(wn);w2r=r(O5,"The model class to instantiate is selected based on the "),xbe=n(O5,"CODE",{});var lbt=s(xbe);A2r=r(lbt,"model_type"),lbt.forEach(t),L2r=r(O5,` property of the config object (either
passed as an argument or loaded from `),kbe=n(O5,"CODE",{});var ibt=s(kbe);B2r=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),x2r=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(O5,"CODE",{});var dbt=s(Rbe);k2r=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),R2r=r(O5,":"),O5.forEach(t),S2r=i(ya),Z=n(ya,"UL",{});var te=s(Z);x4=n(te,"LI",{});var R9e=s(x4);Sbe=n(R9e,"STRONG",{});var cbt=s(Sbe);P2r=r(cbt,"albert"),cbt.forEach(t),$2r=r(R9e," \u2014 "),LX=n(R9e,"A",{href:!0});var mbt=s(LX);I2r=r(mbt,"TFAlbertForQuestionAnswering"),mbt.forEach(t),N2r=r(R9e," (ALBERT model)"),R9e.forEach(t),j2r=i(te),k4=n(te,"LI",{});var S9e=s(k4);Pbe=n(S9e,"STRONG",{});var fbt=s(Pbe);D2r=r(fbt,"bert"),fbt.forEach(t),q2r=r(S9e," \u2014 "),BX=n(S9e,"A",{href:!0});var gbt=s(BX);G2r=r(gbt,"TFBertForQuestionAnswering"),gbt.forEach(t),O2r=r(S9e," (BERT model)"),S9e.forEach(t),X2r=i(te),R4=n(te,"LI",{});var P9e=s(R4);$be=n(P9e,"STRONG",{});var hbt=s($be);V2r=r(hbt,"camembert"),hbt.forEach(t),z2r=r(P9e," \u2014 "),xX=n(P9e,"A",{href:!0});var ubt=s(xX);W2r=r(ubt,"TFCamembertForQuestionAnswering"),ubt.forEach(t),Q2r=r(P9e," (CamemBERT model)"),P9e.forEach(t),H2r=i(te),S4=n(te,"LI",{});var $9e=s(S4);Ibe=n($9e,"STRONG",{});var pbt=s(Ibe);U2r=r(pbt,"convbert"),pbt.forEach(t),J2r=r($9e," \u2014 "),kX=n($9e,"A",{href:!0});var _bt=s(kX);Y2r=r(_bt,"TFConvBertForQuestionAnswering"),_bt.forEach(t),K2r=r($9e," (ConvBERT model)"),$9e.forEach(t),Z2r=i(te),P4=n(te,"LI",{});var I9e=s(P4);Nbe=n(I9e,"STRONG",{});var bbt=s(Nbe);evr=r(bbt,"deberta"),bbt.forEach(t),ovr=r(I9e," \u2014 "),RX=n(I9e,"A",{href:!0});var vbt=s(RX);rvr=r(vbt,"TFDebertaForQuestionAnswering"),vbt.forEach(t),tvr=r(I9e," (DeBERTa model)"),I9e.forEach(t),avr=i(te),$4=n(te,"LI",{});var N9e=s($4);jbe=n(N9e,"STRONG",{});var Tbt=s(jbe);nvr=r(Tbt,"deberta-v2"),Tbt.forEach(t),svr=r(N9e," \u2014 "),SX=n(N9e,"A",{href:!0});var Fbt=s(SX);lvr=r(Fbt,"TFDebertaV2ForQuestionAnswering"),Fbt.forEach(t),ivr=r(N9e," (DeBERTa-v2 model)"),N9e.forEach(t),dvr=i(te),I4=n(te,"LI",{});var j9e=s(I4);Dbe=n(j9e,"STRONG",{});var Cbt=s(Dbe);cvr=r(Cbt,"distilbert"),Cbt.forEach(t),mvr=r(j9e," \u2014 "),PX=n(j9e,"A",{href:!0});var Mbt=s(PX);fvr=r(Mbt,"TFDistilBertForQuestionAnswering"),Mbt.forEach(t),gvr=r(j9e," (DistilBERT model)"),j9e.forEach(t),hvr=i(te),N4=n(te,"LI",{});var D9e=s(N4);qbe=n(D9e,"STRONG",{});var Ebt=s(qbe);uvr=r(Ebt,"electra"),Ebt.forEach(t),pvr=r(D9e," \u2014 "),$X=n(D9e,"A",{href:!0});var ybt=s($X);_vr=r(ybt,"TFElectraForQuestionAnswering"),ybt.forEach(t),bvr=r(D9e," (ELECTRA model)"),D9e.forEach(t),vvr=i(te),j4=n(te,"LI",{});var q9e=s(j4);Gbe=n(q9e,"STRONG",{});var wbt=s(Gbe);Tvr=r(wbt,"flaubert"),wbt.forEach(t),Fvr=r(q9e," \u2014 "),IX=n(q9e,"A",{href:!0});var Abt=s(IX);Cvr=r(Abt,"TFFlaubertForQuestionAnsweringSimple"),Abt.forEach(t),Mvr=r(q9e," (FlauBERT model)"),q9e.forEach(t),Evr=i(te),D4=n(te,"LI",{});var G9e=s(D4);Obe=n(G9e,"STRONG",{});var Lbt=s(Obe);yvr=r(Lbt,"funnel"),Lbt.forEach(t),wvr=r(G9e," \u2014 "),NX=n(G9e,"A",{href:!0});var Bbt=s(NX);Avr=r(Bbt,"TFFunnelForQuestionAnswering"),Bbt.forEach(t),Lvr=r(G9e," (Funnel Transformer model)"),G9e.forEach(t),Bvr=i(te),q4=n(te,"LI",{});var O9e=s(q4);Xbe=n(O9e,"STRONG",{});var xbt=s(Xbe);xvr=r(xbt,"longformer"),xbt.forEach(t),kvr=r(O9e," \u2014 "),jX=n(O9e,"A",{href:!0});var kbt=s(jX);Rvr=r(kbt,"TFLongformerForQuestionAnswering"),kbt.forEach(t),Svr=r(O9e," (Longformer model)"),O9e.forEach(t),Pvr=i(te),G4=n(te,"LI",{});var X9e=s(G4);Vbe=n(X9e,"STRONG",{});var Rbt=s(Vbe);$vr=r(Rbt,"mobilebert"),Rbt.forEach(t),Ivr=r(X9e," \u2014 "),DX=n(X9e,"A",{href:!0});var Sbt=s(DX);Nvr=r(Sbt,"TFMobileBertForQuestionAnswering"),Sbt.forEach(t),jvr=r(X9e," (MobileBERT model)"),X9e.forEach(t),Dvr=i(te),O4=n(te,"LI",{});var V9e=s(O4);zbe=n(V9e,"STRONG",{});var Pbt=s(zbe);qvr=r(Pbt,"mpnet"),Pbt.forEach(t),Gvr=r(V9e," \u2014 "),qX=n(V9e,"A",{href:!0});var $bt=s(qX);Ovr=r($bt,"TFMPNetForQuestionAnswering"),$bt.forEach(t),Xvr=r(V9e," (MPNet model)"),V9e.forEach(t),Vvr=i(te),X4=n(te,"LI",{});var z9e=s(X4);Wbe=n(z9e,"STRONG",{});var Ibt=s(Wbe);zvr=r(Ibt,"rembert"),Ibt.forEach(t),Wvr=r(z9e," \u2014 "),GX=n(z9e,"A",{href:!0});var Nbt=s(GX);Qvr=r(Nbt,"TFRemBertForQuestionAnswering"),Nbt.forEach(t),Hvr=r(z9e," (RemBERT model)"),z9e.forEach(t),Uvr=i(te),V4=n(te,"LI",{});var W9e=s(V4);Qbe=n(W9e,"STRONG",{});var jbt=s(Qbe);Jvr=r(jbt,"roberta"),jbt.forEach(t),Yvr=r(W9e," \u2014 "),OX=n(W9e,"A",{href:!0});var Dbt=s(OX);Kvr=r(Dbt,"TFRobertaForQuestionAnswering"),Dbt.forEach(t),Zvr=r(W9e," (RoBERTa model)"),W9e.forEach(t),eTr=i(te),z4=n(te,"LI",{});var Q9e=s(z4);Hbe=n(Q9e,"STRONG",{});var qbt=s(Hbe);oTr=r(qbt,"roformer"),qbt.forEach(t),rTr=r(Q9e," \u2014 "),XX=n(Q9e,"A",{href:!0});var Gbt=s(XX);tTr=r(Gbt,"TFRoFormerForQuestionAnswering"),Gbt.forEach(t),aTr=r(Q9e," (RoFormer model)"),Q9e.forEach(t),nTr=i(te),W4=n(te,"LI",{});var H9e=s(W4);Ube=n(H9e,"STRONG",{});var Obt=s(Ube);sTr=r(Obt,"xlm"),Obt.forEach(t),lTr=r(H9e," \u2014 "),VX=n(H9e,"A",{href:!0});var Xbt=s(VX);iTr=r(Xbt,"TFXLMForQuestionAnsweringSimple"),Xbt.forEach(t),dTr=r(H9e," (XLM model)"),H9e.forEach(t),cTr=i(te),Q4=n(te,"LI",{});var U9e=s(Q4);Jbe=n(U9e,"STRONG",{});var Vbt=s(Jbe);mTr=r(Vbt,"xlm-roberta"),Vbt.forEach(t),fTr=r(U9e," \u2014 "),zX=n(U9e,"A",{href:!0});var zbt=s(zX);gTr=r(zbt,"TFXLMRobertaForQuestionAnswering"),zbt.forEach(t),hTr=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),uTr=i(te),H4=n(te,"LI",{});var J9e=s(H4);Ybe=n(J9e,"STRONG",{});var Wbt=s(Ybe);pTr=r(Wbt,"xlnet"),Wbt.forEach(t),_Tr=r(J9e," \u2014 "),WX=n(J9e,"A",{href:!0});var Qbt=s(WX);bTr=r(Qbt,"TFXLNetForQuestionAnsweringSimple"),Qbt.forEach(t),vTr=r(J9e," (XLNet model)"),J9e.forEach(t),te.forEach(t),TTr=i(ya),Kbe=n(ya,"P",{});var Hbt=s(Kbe);FTr=r(Hbt,"Examples:"),Hbt.forEach(t),CTr=i(ya),f(lL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),vRe=i(c),zc=n(c,"H2",{class:!0});var kPe=s(zc);U4=n(kPe,"A",{id:!0,class:!0,href:!0});var Ubt=s(U4);Zbe=n(Ubt,"SPAN",{});var Jbt=s(Zbe);f(iL.$$.fragment,Jbt),Jbt.forEach(t),Ubt.forEach(t),MTr=i(kPe),e2e=n(kPe,"SPAN",{});var Ybt=s(e2e);ETr=r(Ybt,"TFAutoModelForVision2Seq"),Ybt.forEach(t),kPe.forEach(t),TRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);f(dL.$$.fragment,li),yTr=i(li),Wc=n(li,"P",{});var sQ=s(Wc);wTr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),o2e=n(sQ,"CODE",{});var Kbt=s(o2e);ATr=r(Kbt,"from_pretrained()"),Kbt.forEach(t),LTr=r(sQ,"class method or the "),r2e=n(sQ,"CODE",{});var Zbt=s(r2e);BTr=r(Zbt,"from_config()"),Zbt.forEach(t),xTr=r(sQ,`class
method.`),sQ.forEach(t),kTr=i(li),cL=n(li,"P",{});var RPe=s(cL);RTr=r(RPe,"This class cannot be instantiated directly using "),t2e=n(RPe,"CODE",{});var e2t=s(t2e);STr=r(e2t,"__init__()"),e2t.forEach(t),PTr=r(RPe," (throws an error)."),RPe.forEach(t),$Tr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);f(mL.$$.fragment,ii),ITr=i(ii),a2e=n(ii,"P",{});var o2t=s(a2e);NTr=r(o2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),o2t.forEach(t),jTr=i(ii),Qc=n(ii,"P",{});var lQ=s(Qc);DTr=r(lQ,`Note:
Loading a model from its configuration file does `),n2e=n(lQ,"STRONG",{});var r2t=s(n2e);qTr=r(r2t,"not"),r2t.forEach(t),GTr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),s2e=n(lQ,"CODE",{});var t2t=s(s2e);OTr=r(t2t,"from_pretrained()"),t2t.forEach(t),XTr=r(lQ,"to load the model weights."),lQ.forEach(t),VTr=i(ii),l2e=n(ii,"P",{});var a2t=s(l2e);zTr=r(a2t,"Examples:"),a2t.forEach(t),WTr=i(ii),f(fL.$$.fragment,ii),ii.forEach(t),QTr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);f(gL.$$.fragment,wa),HTr=i(wa),i2e=n(wa,"P",{});var n2t=s(i2e);UTr=r(n2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),n2t.forEach(t),JTr=i(wa),An=n(wa,"P",{});var X5=s(An);YTr=r(X5,"The model class to instantiate is selected based on the "),d2e=n(X5,"CODE",{});var s2t=s(d2e);KTr=r(s2t,"model_type"),s2t.forEach(t),ZTr=r(X5,` property of the config object (either
passed as an argument or loaded from `),c2e=n(X5,"CODE",{});var l2t=s(c2e);e1r=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),o1r=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(X5,"CODE",{});var i2t=s(m2e);r1r=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),t1r=r(X5,":"),X5.forEach(t),a1r=i(wa),f2e=n(wa,"UL",{});var d2t=s(f2e);J4=n(d2t,"LI",{});var Y9e=s(J4);g2e=n(Y9e,"STRONG",{});var c2t=s(g2e);n1r=r(c2t,"vision-encoder-decoder"),c2t.forEach(t),s1r=r(Y9e," \u2014 "),QX=n(Y9e,"A",{href:!0});var m2t=s(QX);l1r=r(m2t,"TFVisionEncoderDecoderModel"),m2t.forEach(t),i1r=r(Y9e," (Vision Encoder decoder model)"),Y9e.forEach(t),d2t.forEach(t),d1r=i(wa),h2e=n(wa,"P",{});var f2t=s(h2e);c1r=r(f2t,"Examples:"),f2t.forEach(t),m1r=i(wa),f(hL.$$.fragment,wa),wa.forEach(t),li.forEach(t),FRe=i(c),Hc=n(c,"H2",{class:!0});var SPe=s(Hc);Y4=n(SPe,"A",{id:!0,class:!0,href:!0});var g2t=s(Y4);u2e=n(g2t,"SPAN",{});var h2t=s(u2e);f(uL.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),f1r=i(SPe),p2e=n(SPe,"SPAN",{});var u2t=s(p2e);g1r=r(u2t,"TFAutoModelForSpeechSeq2Seq"),u2t.forEach(t),SPe.forEach(t),CRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);f(pL.$$.fragment,di),h1r=i(di),Uc=n(di,"P",{});var iQ=s(Uc);u1r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_2e=n(iQ,"CODE",{});var p2t=s(_2e);p1r=r(p2t,"from_pretrained()"),p2t.forEach(t),_1r=r(iQ,"class method or the "),b2e=n(iQ,"CODE",{});var _2t=s(b2e);b1r=r(_2t,"from_config()"),_2t.forEach(t),v1r=r(iQ,`class
method.`),iQ.forEach(t),T1r=i(di),_L=n(di,"P",{});var PPe=s(_L);F1r=r(PPe,"This class cannot be instantiated directly using "),v2e=n(PPe,"CODE",{});var b2t=s(v2e);C1r=r(b2t,"__init__()"),b2t.forEach(t),M1r=r(PPe," (throws an error)."),PPe.forEach(t),E1r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);f(bL.$$.fragment,ci),y1r=i(ci),T2e=n(ci,"P",{});var v2t=s(T2e);w1r=r(v2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),v2t.forEach(t),A1r=i(ci),Jc=n(ci,"P",{});var dQ=s(Jc);L1r=r(dQ,`Note:
Loading a model from its configuration file does `),F2e=n(dQ,"STRONG",{});var T2t=s(F2e);B1r=r(T2t,"not"),T2t.forEach(t),x1r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),C2e=n(dQ,"CODE",{});var F2t=s(C2e);k1r=r(F2t,"from_pretrained()"),F2t.forEach(t),R1r=r(dQ,"to load the model weights."),dQ.forEach(t),S1r=i(ci),M2e=n(ci,"P",{});var C2t=s(M2e);P1r=r(C2t,"Examples:"),C2t.forEach(t),$1r=i(ci),f(vL.$$.fragment,ci),ci.forEach(t),I1r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);f(TL.$$.fragment,Aa),N1r=i(Aa),E2e=n(Aa,"P",{});var M2t=s(E2e);j1r=r(M2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),M2t.forEach(t),D1r=i(Aa),Ln=n(Aa,"P",{});var V5=s(Ln);q1r=r(V5,"The model class to instantiate is selected based on the "),y2e=n(V5,"CODE",{});var E2t=s(y2e);G1r=r(E2t,"model_type"),E2t.forEach(t),O1r=r(V5,` property of the config object (either
passed as an argument or loaded from `),w2e=n(V5,"CODE",{});var y2t=s(w2e);X1r=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),V1r=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(V5,"CODE",{});var w2t=s(A2e);z1r=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),W1r=r(V5,":"),V5.forEach(t),Q1r=i(Aa),L2e=n(Aa,"UL",{});var A2t=s(L2e);K4=n(A2t,"LI",{});var K9e=s(K4);B2e=n(K9e,"STRONG",{});var L2t=s(B2e);H1r=r(L2t,"speech_to_text"),L2t.forEach(t),U1r=r(K9e," \u2014 "),HX=n(K9e,"A",{href:!0});var B2t=s(HX);J1r=r(B2t,"TFSpeech2TextForConditionalGeneration"),B2t.forEach(t),Y1r=r(K9e," (Speech2Text model)"),K9e.forEach(t),A2t.forEach(t),K1r=i(Aa),x2e=n(Aa,"P",{});var x2t=s(x2e);Z1r=r(x2t,"Examples:"),x2t.forEach(t),eFr=i(Aa),f(FL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),MRe=i(c),Yc=n(c,"H2",{class:!0});var $Pe=s(Yc);Z4=n($Pe,"A",{id:!0,class:!0,href:!0});var k2t=s(Z4);k2e=n(k2t,"SPAN",{});var R2t=s(k2e);f(CL.$$.fragment,R2t),R2t.forEach(t),k2t.forEach(t),oFr=i($Pe),R2e=n($Pe,"SPAN",{});var S2t=s(R2e);rFr=r(S2t,"FlaxAutoModel"),S2t.forEach(t),$Pe.forEach(t),ERe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);f(ML.$$.fragment,mi),tFr=i(mi),Kc=n(mi,"P",{});var cQ=s(Kc);aFr=r(cQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),S2e=n(cQ,"CODE",{});var P2t=s(S2e);nFr=r(P2t,"from_pretrained()"),P2t.forEach(t),sFr=r(cQ,"class method or the "),P2e=n(cQ,"CODE",{});var $2t=s(P2e);lFr=r($2t,"from_config()"),$2t.forEach(t),iFr=r(cQ,`class
method.`),cQ.forEach(t),dFr=i(mi),EL=n(mi,"P",{});var IPe=s(EL);cFr=r(IPe,"This class cannot be instantiated directly using "),$2e=n(IPe,"CODE",{});var I2t=s($2e);mFr=r(I2t,"__init__()"),I2t.forEach(t),fFr=r(IPe," (throws an error)."),IPe.forEach(t),gFr=i(mi),wt=n(mi,"DIV",{class:!0});var fi=s(wt);f(yL.$$.fragment,fi),hFr=i(fi),I2e=n(fi,"P",{});var N2t=s(I2e);uFr=r(N2t,"Instantiates one of the base model classes of the library from a configuration."),N2t.forEach(t),pFr=i(fi),Zc=n(fi,"P",{});var mQ=s(Zc);_Fr=r(mQ,`Note:
Loading a model from its configuration file does `),N2e=n(mQ,"STRONG",{});var j2t=s(N2e);bFr=r(j2t,"not"),j2t.forEach(t),vFr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),j2e=n(mQ,"CODE",{});var D2t=s(j2e);TFr=r(D2t,"from_pretrained()"),D2t.forEach(t),FFr=r(mQ,"to load the model weights."),mQ.forEach(t),CFr=i(fi),D2e=n(fi,"P",{});var q2t=s(D2e);MFr=r(q2t,"Examples:"),q2t.forEach(t),EFr=i(fi),f(wL.$$.fragment,fi),fi.forEach(t),yFr=i(mi),Ao=n(mi,"DIV",{class:!0});var La=s(Ao);f(AL.$$.fragment,La),wFr=i(La),q2e=n(La,"P",{});var G2t=s(q2e);AFr=r(G2t,"Instantiate one of the base model classes of the library from a pretrained model."),G2t.forEach(t),LFr=i(La),Bn=n(La,"P",{});var z5=s(Bn);BFr=r(z5,"The model class to instantiate is selected based on the "),G2e=n(z5,"CODE",{});var O2t=s(G2e);xFr=r(O2t,"model_type"),O2t.forEach(t),kFr=r(z5,` property of the config object (either
passed as an argument or loaded from `),O2e=n(z5,"CODE",{});var X2t=s(O2e);RFr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),SFr=r(z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(z5,"CODE",{});var V2t=s(X2e);PFr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),$Fr=r(z5,":"),z5.forEach(t),IFr=i(La),z=n(La,"UL",{});var Q=s(z);eE=n(Q,"LI",{});var Z9e=s(eE);V2e=n(Z9e,"STRONG",{});var z2t=s(V2e);NFr=r(z2t,"albert"),z2t.forEach(t),jFr=r(Z9e," \u2014 "),UX=n(Z9e,"A",{href:!0});var W2t=s(UX);DFr=r(W2t,"FlaxAlbertModel"),W2t.forEach(t),qFr=r(Z9e," (ALBERT model)"),Z9e.forEach(t),GFr=i(Q),oE=n(Q,"LI",{});var eBe=s(oE);z2e=n(eBe,"STRONG",{});var Q2t=s(z2e);OFr=r(Q2t,"bart"),Q2t.forEach(t),XFr=r(eBe," \u2014 "),JX=n(eBe,"A",{href:!0});var H2t=s(JX);VFr=r(H2t,"FlaxBartModel"),H2t.forEach(t),zFr=r(eBe," (BART model)"),eBe.forEach(t),WFr=i(Q),rE=n(Q,"LI",{});var oBe=s(rE);W2e=n(oBe,"STRONG",{});var U2t=s(W2e);QFr=r(U2t,"beit"),U2t.forEach(t),HFr=r(oBe," \u2014 "),YX=n(oBe,"A",{href:!0});var J2t=s(YX);UFr=r(J2t,"FlaxBeitModel"),J2t.forEach(t),JFr=r(oBe," (BEiT model)"),oBe.forEach(t),YFr=i(Q),tE=n(Q,"LI",{});var rBe=s(tE);Q2e=n(rBe,"STRONG",{});var Y2t=s(Q2e);KFr=r(Y2t,"bert"),Y2t.forEach(t),ZFr=r(rBe," \u2014 "),KX=n(rBe,"A",{href:!0});var K2t=s(KX);eCr=r(K2t,"FlaxBertModel"),K2t.forEach(t),oCr=r(rBe," (BERT model)"),rBe.forEach(t),rCr=i(Q),aE=n(Q,"LI",{});var tBe=s(aE);H2e=n(tBe,"STRONG",{});var Z2t=s(H2e);tCr=r(Z2t,"big_bird"),Z2t.forEach(t),aCr=r(tBe," \u2014 "),ZX=n(tBe,"A",{href:!0});var evt=s(ZX);nCr=r(evt,"FlaxBigBirdModel"),evt.forEach(t),sCr=r(tBe," (BigBird model)"),tBe.forEach(t),lCr=i(Q),nE=n(Q,"LI",{});var aBe=s(nE);U2e=n(aBe,"STRONG",{});var ovt=s(U2e);iCr=r(ovt,"blenderbot"),ovt.forEach(t),dCr=r(aBe," \u2014 "),eV=n(aBe,"A",{href:!0});var rvt=s(eV);cCr=r(rvt,"FlaxBlenderbotModel"),rvt.forEach(t),mCr=r(aBe," (Blenderbot model)"),aBe.forEach(t),fCr=i(Q),sE=n(Q,"LI",{});var nBe=s(sE);J2e=n(nBe,"STRONG",{});var tvt=s(J2e);gCr=r(tvt,"blenderbot-small"),tvt.forEach(t),hCr=r(nBe," \u2014 "),oV=n(nBe,"A",{href:!0});var avt=s(oV);uCr=r(avt,"FlaxBlenderbotSmallModel"),avt.forEach(t),pCr=r(nBe," (BlenderbotSmall model)"),nBe.forEach(t),_Cr=i(Q),lE=n(Q,"LI",{});var sBe=s(lE);Y2e=n(sBe,"STRONG",{});var nvt=s(Y2e);bCr=r(nvt,"clip"),nvt.forEach(t),vCr=r(sBe," \u2014 "),rV=n(sBe,"A",{href:!0});var svt=s(rV);TCr=r(svt,"FlaxCLIPModel"),svt.forEach(t),FCr=r(sBe," (CLIP model)"),sBe.forEach(t),CCr=i(Q),iE=n(Q,"LI",{});var lBe=s(iE);K2e=n(lBe,"STRONG",{});var lvt=s(K2e);MCr=r(lvt,"distilbert"),lvt.forEach(t),ECr=r(lBe," \u2014 "),tV=n(lBe,"A",{href:!0});var ivt=s(tV);yCr=r(ivt,"FlaxDistilBertModel"),ivt.forEach(t),wCr=r(lBe," (DistilBERT model)"),lBe.forEach(t),ACr=i(Q),dE=n(Q,"LI",{});var iBe=s(dE);Z2e=n(iBe,"STRONG",{});var dvt=s(Z2e);LCr=r(dvt,"electra"),dvt.forEach(t),BCr=r(iBe," \u2014 "),aV=n(iBe,"A",{href:!0});var cvt=s(aV);xCr=r(cvt,"FlaxElectraModel"),cvt.forEach(t),kCr=r(iBe," (ELECTRA model)"),iBe.forEach(t),RCr=i(Q),cE=n(Q,"LI",{});var dBe=s(cE);eve=n(dBe,"STRONG",{});var mvt=s(eve);SCr=r(mvt,"gpt2"),mvt.forEach(t),PCr=r(dBe," \u2014 "),nV=n(dBe,"A",{href:!0});var fvt=s(nV);$Cr=r(fvt,"FlaxGPT2Model"),fvt.forEach(t),ICr=r(dBe," (OpenAI GPT-2 model)"),dBe.forEach(t),NCr=i(Q),mE=n(Q,"LI",{});var cBe=s(mE);ove=n(cBe,"STRONG",{});var gvt=s(ove);jCr=r(gvt,"gpt_neo"),gvt.forEach(t),DCr=r(cBe," \u2014 "),sV=n(cBe,"A",{href:!0});var hvt=s(sV);qCr=r(hvt,"FlaxGPTNeoModel"),hvt.forEach(t),GCr=r(cBe," (GPT Neo model)"),cBe.forEach(t),OCr=i(Q),fE=n(Q,"LI",{});var mBe=s(fE);rve=n(mBe,"STRONG",{});var uvt=s(rve);XCr=r(uvt,"gptj"),uvt.forEach(t),VCr=r(mBe," \u2014 "),lV=n(mBe,"A",{href:!0});var pvt=s(lV);zCr=r(pvt,"FlaxGPTJModel"),pvt.forEach(t),WCr=r(mBe," (GPT-J model)"),mBe.forEach(t),QCr=i(Q),gE=n(Q,"LI",{});var fBe=s(gE);tve=n(fBe,"STRONG",{});var _vt=s(tve);HCr=r(_vt,"marian"),_vt.forEach(t),UCr=r(fBe," \u2014 "),iV=n(fBe,"A",{href:!0});var bvt=s(iV);JCr=r(bvt,"FlaxMarianModel"),bvt.forEach(t),YCr=r(fBe," (Marian model)"),fBe.forEach(t),KCr=i(Q),hE=n(Q,"LI",{});var gBe=s(hE);ave=n(gBe,"STRONG",{});var vvt=s(ave);ZCr=r(vvt,"mbart"),vvt.forEach(t),eMr=r(gBe," \u2014 "),dV=n(gBe,"A",{href:!0});var Tvt=s(dV);oMr=r(Tvt,"FlaxMBartModel"),Tvt.forEach(t),rMr=r(gBe," (mBART model)"),gBe.forEach(t),tMr=i(Q),uE=n(Q,"LI",{});var hBe=s(uE);nve=n(hBe,"STRONG",{});var Fvt=s(nve);aMr=r(Fvt,"mt5"),Fvt.forEach(t),nMr=r(hBe," \u2014 "),cV=n(hBe,"A",{href:!0});var Cvt=s(cV);sMr=r(Cvt,"FlaxMT5Model"),Cvt.forEach(t),lMr=r(hBe," (mT5 model)"),hBe.forEach(t),iMr=i(Q),pE=n(Q,"LI",{});var uBe=s(pE);sve=n(uBe,"STRONG",{});var Mvt=s(sve);dMr=r(Mvt,"pegasus"),Mvt.forEach(t),cMr=r(uBe," \u2014 "),mV=n(uBe,"A",{href:!0});var Evt=s(mV);mMr=r(Evt,"FlaxPegasusModel"),Evt.forEach(t),fMr=r(uBe," (Pegasus model)"),uBe.forEach(t),gMr=i(Q),_E=n(Q,"LI",{});var pBe=s(_E);lve=n(pBe,"STRONG",{});var yvt=s(lve);hMr=r(yvt,"roberta"),yvt.forEach(t),uMr=r(pBe," \u2014 "),fV=n(pBe,"A",{href:!0});var wvt=s(fV);pMr=r(wvt,"FlaxRobertaModel"),wvt.forEach(t),_Mr=r(pBe," (RoBERTa model)"),pBe.forEach(t),bMr=i(Q),bE=n(Q,"LI",{});var _Be=s(bE);ive=n(_Be,"STRONG",{});var Avt=s(ive);vMr=r(Avt,"roformer"),Avt.forEach(t),TMr=r(_Be," \u2014 "),gV=n(_Be,"A",{href:!0});var Lvt=s(gV);FMr=r(Lvt,"FlaxRoFormerModel"),Lvt.forEach(t),CMr=r(_Be," (RoFormer model)"),_Be.forEach(t),MMr=i(Q),vE=n(Q,"LI",{});var bBe=s(vE);dve=n(bBe,"STRONG",{});var Bvt=s(dve);EMr=r(Bvt,"t5"),Bvt.forEach(t),yMr=r(bBe," \u2014 "),hV=n(bBe,"A",{href:!0});var xvt=s(hV);wMr=r(xvt,"FlaxT5Model"),xvt.forEach(t),AMr=r(bBe," (T5 model)"),bBe.forEach(t),LMr=i(Q),TE=n(Q,"LI",{});var vBe=s(TE);cve=n(vBe,"STRONG",{});var kvt=s(cve);BMr=r(kvt,"vision-text-dual-encoder"),kvt.forEach(t),xMr=r(vBe," \u2014 "),uV=n(vBe,"A",{href:!0});var Rvt=s(uV);kMr=r(Rvt,"FlaxVisionTextDualEncoderModel"),Rvt.forEach(t),RMr=r(vBe," (VisionTextDualEncoder model)"),vBe.forEach(t),SMr=i(Q),FE=n(Q,"LI",{});var TBe=s(FE);mve=n(TBe,"STRONG",{});var Svt=s(mve);PMr=r(Svt,"vit"),Svt.forEach(t),$Mr=r(TBe," \u2014 "),pV=n(TBe,"A",{href:!0});var Pvt=s(pV);IMr=r(Pvt,"FlaxViTModel"),Pvt.forEach(t),NMr=r(TBe," (ViT model)"),TBe.forEach(t),jMr=i(Q),CE=n(Q,"LI",{});var FBe=s(CE);fve=n(FBe,"STRONG",{});var $vt=s(fve);DMr=r($vt,"wav2vec2"),$vt.forEach(t),qMr=r(FBe," \u2014 "),_V=n(FBe,"A",{href:!0});var Ivt=s(_V);GMr=r(Ivt,"FlaxWav2Vec2Model"),Ivt.forEach(t),OMr=r(FBe," (Wav2Vec2 model)"),FBe.forEach(t),XMr=i(Q),ME=n(Q,"LI",{});var CBe=s(ME);gve=n(CBe,"STRONG",{});var Nvt=s(gve);VMr=r(Nvt,"xglm"),Nvt.forEach(t),zMr=r(CBe," \u2014 "),bV=n(CBe,"A",{href:!0});var jvt=s(bV);WMr=r(jvt,"FlaxXGLMModel"),jvt.forEach(t),QMr=r(CBe," (XGLM model)"),CBe.forEach(t),HMr=i(Q),EE=n(Q,"LI",{});var MBe=s(EE);hve=n(MBe,"STRONG",{});var Dvt=s(hve);UMr=r(Dvt,"xlm-roberta"),Dvt.forEach(t),JMr=r(MBe," \u2014 "),vV=n(MBe,"A",{href:!0});var qvt=s(vV);YMr=r(qvt,"FlaxXLMRobertaModel"),qvt.forEach(t),KMr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),Q.forEach(t),ZMr=i(La),uve=n(La,"P",{});var Gvt=s(uve);e4r=r(Gvt,"Examples:"),Gvt.forEach(t),o4r=i(La),f(LL.$$.fragment,La),La.forEach(t),mi.forEach(t),yRe=i(c),em=n(c,"H2",{class:!0});var NPe=s(em);yE=n(NPe,"A",{id:!0,class:!0,href:!0});var Ovt=s(yE);pve=n(Ovt,"SPAN",{});var Xvt=s(pve);f(BL.$$.fragment,Xvt),Xvt.forEach(t),Ovt.forEach(t),r4r=i(NPe),_ve=n(NPe,"SPAN",{});var Vvt=s(_ve);t4r=r(Vvt,"FlaxAutoModelForCausalLM"),Vvt.forEach(t),NPe.forEach(t),wRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);f(xL.$$.fragment,gi),a4r=i(gi),om=n(gi,"P",{});var fQ=s(om);n4r=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bve=n(fQ,"CODE",{});var zvt=s(bve);s4r=r(zvt,"from_pretrained()"),zvt.forEach(t),l4r=r(fQ,"class method or the "),vve=n(fQ,"CODE",{});var Wvt=s(vve);i4r=r(Wvt,"from_config()"),Wvt.forEach(t),d4r=r(fQ,`class
method.`),fQ.forEach(t),c4r=i(gi),kL=n(gi,"P",{});var jPe=s(kL);m4r=r(jPe,"This class cannot be instantiated directly using "),Tve=n(jPe,"CODE",{});var Qvt=s(Tve);f4r=r(Qvt,"__init__()"),Qvt.forEach(t),g4r=r(jPe," (throws an error)."),jPe.forEach(t),h4r=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);f(RL.$$.fragment,hi),u4r=i(hi),Fve=n(hi,"P",{});var Hvt=s(Fve);p4r=r(Hvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hvt.forEach(t),_4r=i(hi),rm=n(hi,"P",{});var gQ=s(rm);b4r=r(gQ,`Note:
Loading a model from its configuration file does `),Cve=n(gQ,"STRONG",{});var Uvt=s(Cve);v4r=r(Uvt,"not"),Uvt.forEach(t),T4r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mve=n(gQ,"CODE",{});var Jvt=s(Mve);F4r=r(Jvt,"from_pretrained()"),Jvt.forEach(t),C4r=r(gQ,"to load the model weights."),gQ.forEach(t),M4r=i(hi),Eve=n(hi,"P",{});var Yvt=s(Eve);E4r=r(Yvt,"Examples:"),Yvt.forEach(t),y4r=i(hi),f(SL.$$.fragment,hi),hi.forEach(t),w4r=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);f(PL.$$.fragment,Ba),A4r=i(Ba),yve=n(Ba,"P",{});var Kvt=s(yve);L4r=r(Kvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kvt.forEach(t),B4r=i(Ba),xn=n(Ba,"P",{});var W5=s(xn);x4r=r(W5,"The model class to instantiate is selected based on the "),wve=n(W5,"CODE",{});var Zvt=s(wve);k4r=r(Zvt,"model_type"),Zvt.forEach(t),R4r=r(W5,` property of the config object (either
passed as an argument or loaded from `),Ave=n(W5,"CODE",{});var eTt=s(Ave);S4r=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),P4r=r(W5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(W5,"CODE",{});var oTt=s(Lve);$4r=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),I4r=r(W5,":"),W5.forEach(t),N4r=i(Ba),ca=n(Ba,"UL",{});var ui=s(ca);wE=n(ui,"LI",{});var EBe=s(wE);Bve=n(EBe,"STRONG",{});var rTt=s(Bve);j4r=r(rTt,"bart"),rTt.forEach(t),D4r=r(EBe," \u2014 "),TV=n(EBe,"A",{href:!0});var tTt=s(TV);q4r=r(tTt,"FlaxBartForCausalLM"),tTt.forEach(t),G4r=r(EBe," (BART model)"),EBe.forEach(t),O4r=i(ui),AE=n(ui,"LI",{});var yBe=s(AE);xve=n(yBe,"STRONG",{});var aTt=s(xve);X4r=r(aTt,"gpt2"),aTt.forEach(t),V4r=r(yBe," \u2014 "),FV=n(yBe,"A",{href:!0});var nTt=s(FV);z4r=r(nTt,"FlaxGPT2LMHeadModel"),nTt.forEach(t),W4r=r(yBe," (OpenAI GPT-2 model)"),yBe.forEach(t),Q4r=i(ui),LE=n(ui,"LI",{});var wBe=s(LE);kve=n(wBe,"STRONG",{});var sTt=s(kve);H4r=r(sTt,"gpt_neo"),sTt.forEach(t),U4r=r(wBe," \u2014 "),CV=n(wBe,"A",{href:!0});var lTt=s(CV);J4r=r(lTt,"FlaxGPTNeoForCausalLM"),lTt.forEach(t),Y4r=r(wBe," (GPT Neo model)"),wBe.forEach(t),K4r=i(ui),BE=n(ui,"LI",{});var ABe=s(BE);Rve=n(ABe,"STRONG",{});var iTt=s(Rve);Z4r=r(iTt,"gptj"),iTt.forEach(t),eEr=r(ABe," \u2014 "),MV=n(ABe,"A",{href:!0});var dTt=s(MV);oEr=r(dTt,"FlaxGPTJForCausalLM"),dTt.forEach(t),rEr=r(ABe," (GPT-J model)"),ABe.forEach(t),tEr=i(ui),xE=n(ui,"LI",{});var LBe=s(xE);Sve=n(LBe,"STRONG",{});var cTt=s(Sve);aEr=r(cTt,"xglm"),cTt.forEach(t),nEr=r(LBe," \u2014 "),EV=n(LBe,"A",{href:!0});var mTt=s(EV);sEr=r(mTt,"FlaxXGLMForCausalLM"),mTt.forEach(t),lEr=r(LBe," (XGLM model)"),LBe.forEach(t),ui.forEach(t),iEr=i(Ba),Pve=n(Ba,"P",{});var fTt=s(Pve);dEr=r(fTt,"Examples:"),fTt.forEach(t),cEr=i(Ba),f($L.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),ARe=i(c),tm=n(c,"H2",{class:!0});var DPe=s(tm);kE=n(DPe,"A",{id:!0,class:!0,href:!0});var gTt=s(kE);$ve=n(gTt,"SPAN",{});var hTt=s($ve);f(IL.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),mEr=i(DPe),Ive=n(DPe,"SPAN",{});var uTt=s(Ive);fEr=r(uTt,"FlaxAutoModelForPreTraining"),uTt.forEach(t),DPe.forEach(t),LRe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);f(NL.$$.fragment,pi),gEr=i(pi),am=n(pi,"P",{});var hQ=s(am);hEr=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nve=n(hQ,"CODE",{});var pTt=s(Nve);uEr=r(pTt,"from_pretrained()"),pTt.forEach(t),pEr=r(hQ,"class method or the "),jve=n(hQ,"CODE",{});var _Tt=s(jve);_Er=r(_Tt,"from_config()"),_Tt.forEach(t),bEr=r(hQ,`class
method.`),hQ.forEach(t),vEr=i(pi),jL=n(pi,"P",{});var qPe=s(jL);TEr=r(qPe,"This class cannot be instantiated directly using "),Dve=n(qPe,"CODE",{});var bTt=s(Dve);FEr=r(bTt,"__init__()"),bTt.forEach(t),CEr=r(qPe," (throws an error)."),qPe.forEach(t),MEr=i(pi),Lt=n(pi,"DIV",{class:!0});var _i=s(Lt);f(DL.$$.fragment,_i),EEr=i(_i),qve=n(_i,"P",{});var vTt=s(qve);yEr=r(vTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vTt.forEach(t),wEr=i(_i),nm=n(_i,"P",{});var uQ=s(nm);AEr=r(uQ,`Note:
Loading a model from its configuration file does `),Gve=n(uQ,"STRONG",{});var TTt=s(Gve);LEr=r(TTt,"not"),TTt.forEach(t),BEr=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ove=n(uQ,"CODE",{});var FTt=s(Ove);xEr=r(FTt,"from_pretrained()"),FTt.forEach(t),kEr=r(uQ,"to load the model weights."),uQ.forEach(t),REr=i(_i),Xve=n(_i,"P",{});var CTt=s(Xve);SEr=r(CTt,"Examples:"),CTt.forEach(t),PEr=i(_i),f(qL.$$.fragment,_i),_i.forEach(t),$Er=i(pi),Bo=n(pi,"DIV",{class:!0});var xa=s(Bo);f(GL.$$.fragment,xa),IEr=i(xa),Vve=n(xa,"P",{});var MTt=s(Vve);NEr=r(MTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MTt.forEach(t),jEr=i(xa),kn=n(xa,"P",{});var Q5=s(kn);DEr=r(Q5,"The model class to instantiate is selected based on the "),zve=n(Q5,"CODE",{});var ETt=s(zve);qEr=r(ETt,"model_type"),ETt.forEach(t),GEr=r(Q5,` property of the config object (either
passed as an argument or loaded from `),Wve=n(Q5,"CODE",{});var yTt=s(Wve);OEr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),XEr=r(Q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(Q5,"CODE",{});var wTt=s(Qve);VEr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),zEr=r(Q5,":"),Q5.forEach(t),WEr=i(xa),ce=n(xa,"UL",{});var he=s(ce);RE=n(he,"LI",{});var BBe=s(RE);Hve=n(BBe,"STRONG",{});var ATt=s(Hve);QEr=r(ATt,"albert"),ATt.forEach(t),HEr=r(BBe," \u2014 "),yV=n(BBe,"A",{href:!0});var LTt=s(yV);UEr=r(LTt,"FlaxAlbertForPreTraining"),LTt.forEach(t),JEr=r(BBe," (ALBERT model)"),BBe.forEach(t),YEr=i(he),SE=n(he,"LI",{});var xBe=s(SE);Uve=n(xBe,"STRONG",{});var BTt=s(Uve);KEr=r(BTt,"bart"),BTt.forEach(t),ZEr=r(xBe," \u2014 "),wV=n(xBe,"A",{href:!0});var xTt=s(wV);e3r=r(xTt,"FlaxBartForConditionalGeneration"),xTt.forEach(t),o3r=r(xBe," (BART model)"),xBe.forEach(t),r3r=i(he),PE=n(he,"LI",{});var kBe=s(PE);Jve=n(kBe,"STRONG",{});var kTt=s(Jve);t3r=r(kTt,"bert"),kTt.forEach(t),a3r=r(kBe," \u2014 "),AV=n(kBe,"A",{href:!0});var RTt=s(AV);n3r=r(RTt,"FlaxBertForPreTraining"),RTt.forEach(t),s3r=r(kBe," (BERT model)"),kBe.forEach(t),l3r=i(he),$E=n(he,"LI",{});var RBe=s($E);Yve=n(RBe,"STRONG",{});var STt=s(Yve);i3r=r(STt,"big_bird"),STt.forEach(t),d3r=r(RBe," \u2014 "),LV=n(RBe,"A",{href:!0});var PTt=s(LV);c3r=r(PTt,"FlaxBigBirdForPreTraining"),PTt.forEach(t),m3r=r(RBe," (BigBird model)"),RBe.forEach(t),f3r=i(he),IE=n(he,"LI",{});var SBe=s(IE);Kve=n(SBe,"STRONG",{});var $Tt=s(Kve);g3r=r($Tt,"electra"),$Tt.forEach(t),h3r=r(SBe," \u2014 "),BV=n(SBe,"A",{href:!0});var ITt=s(BV);u3r=r(ITt,"FlaxElectraForPreTraining"),ITt.forEach(t),p3r=r(SBe," (ELECTRA model)"),SBe.forEach(t),_3r=i(he),NE=n(he,"LI",{});var PBe=s(NE);Zve=n(PBe,"STRONG",{});var NTt=s(Zve);b3r=r(NTt,"mbart"),NTt.forEach(t),v3r=r(PBe," \u2014 "),xV=n(PBe,"A",{href:!0});var jTt=s(xV);T3r=r(jTt,"FlaxMBartForConditionalGeneration"),jTt.forEach(t),F3r=r(PBe," (mBART model)"),PBe.forEach(t),C3r=i(he),jE=n(he,"LI",{});var $Be=s(jE);eTe=n($Be,"STRONG",{});var DTt=s(eTe);M3r=r(DTt,"mt5"),DTt.forEach(t),E3r=r($Be," \u2014 "),kV=n($Be,"A",{href:!0});var qTt=s(kV);y3r=r(qTt,"FlaxMT5ForConditionalGeneration"),qTt.forEach(t),w3r=r($Be," (mT5 model)"),$Be.forEach(t),A3r=i(he),DE=n(he,"LI",{});var IBe=s(DE);oTe=n(IBe,"STRONG",{});var GTt=s(oTe);L3r=r(GTt,"roberta"),GTt.forEach(t),B3r=r(IBe," \u2014 "),RV=n(IBe,"A",{href:!0});var OTt=s(RV);x3r=r(OTt,"FlaxRobertaForMaskedLM"),OTt.forEach(t),k3r=r(IBe," (RoBERTa model)"),IBe.forEach(t),R3r=i(he),qE=n(he,"LI",{});var NBe=s(qE);rTe=n(NBe,"STRONG",{});var XTt=s(rTe);S3r=r(XTt,"roformer"),XTt.forEach(t),P3r=r(NBe," \u2014 "),SV=n(NBe,"A",{href:!0});var VTt=s(SV);$3r=r(VTt,"FlaxRoFormerForMaskedLM"),VTt.forEach(t),I3r=r(NBe," (RoFormer model)"),NBe.forEach(t),N3r=i(he),GE=n(he,"LI",{});var jBe=s(GE);tTe=n(jBe,"STRONG",{});var zTt=s(tTe);j3r=r(zTt,"t5"),zTt.forEach(t),D3r=r(jBe," \u2014 "),PV=n(jBe,"A",{href:!0});var WTt=s(PV);q3r=r(WTt,"FlaxT5ForConditionalGeneration"),WTt.forEach(t),G3r=r(jBe," (T5 model)"),jBe.forEach(t),O3r=i(he),OE=n(he,"LI",{});var DBe=s(OE);aTe=n(DBe,"STRONG",{});var QTt=s(aTe);X3r=r(QTt,"wav2vec2"),QTt.forEach(t),V3r=r(DBe," \u2014 "),$V=n(DBe,"A",{href:!0});var HTt=s($V);z3r=r(HTt,"FlaxWav2Vec2ForPreTraining"),HTt.forEach(t),W3r=r(DBe," (Wav2Vec2 model)"),DBe.forEach(t),Q3r=i(he),XE=n(he,"LI",{});var qBe=s(XE);nTe=n(qBe,"STRONG",{});var UTt=s(nTe);H3r=r(UTt,"xlm-roberta"),UTt.forEach(t),U3r=r(qBe," \u2014 "),IV=n(qBe,"A",{href:!0});var JTt=s(IV);J3r=r(JTt,"FlaxXLMRobertaForMaskedLM"),JTt.forEach(t),Y3r=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),he.forEach(t),K3r=i(xa),sTe=n(xa,"P",{});var YTt=s(sTe);Z3r=r(YTt,"Examples:"),YTt.forEach(t),e5r=i(xa),f(OL.$$.fragment,xa),xa.forEach(t),pi.forEach(t),BRe=i(c),sm=n(c,"H2",{class:!0});var GPe=s(sm);VE=n(GPe,"A",{id:!0,class:!0,href:!0});var KTt=s(VE);lTe=n(KTt,"SPAN",{});var ZTt=s(lTe);f(XL.$$.fragment,ZTt),ZTt.forEach(t),KTt.forEach(t),o5r=i(GPe),iTe=n(GPe,"SPAN",{});var e1t=s(iTe);r5r=r(e1t,"FlaxAutoModelForMaskedLM"),e1t.forEach(t),GPe.forEach(t),xRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);f(VL.$$.fragment,bi),t5r=i(bi),lm=n(bi,"P",{});var pQ=s(lm);a5r=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dTe=n(pQ,"CODE",{});var o1t=s(dTe);n5r=r(o1t,"from_pretrained()"),o1t.forEach(t),s5r=r(pQ,"class method or the "),cTe=n(pQ,"CODE",{});var r1t=s(cTe);l5r=r(r1t,"from_config()"),r1t.forEach(t),i5r=r(pQ,`class
method.`),pQ.forEach(t),d5r=i(bi),zL=n(bi,"P",{});var OPe=s(zL);c5r=r(OPe,"This class cannot be instantiated directly using "),mTe=n(OPe,"CODE",{});var t1t=s(mTe);m5r=r(t1t,"__init__()"),t1t.forEach(t),f5r=r(OPe," (throws an error)."),OPe.forEach(t),g5r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);f(WL.$$.fragment,vi),h5r=i(vi),fTe=n(vi,"P",{});var a1t=s(fTe);u5r=r(a1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),a1t.forEach(t),p5r=i(vi),im=n(vi,"P",{});var _Q=s(im);_5r=r(_Q,`Note:
Loading a model from its configuration file does `),gTe=n(_Q,"STRONG",{});var n1t=s(gTe);b5r=r(n1t,"not"),n1t.forEach(t),v5r=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),hTe=n(_Q,"CODE",{});var s1t=s(hTe);T5r=r(s1t,"from_pretrained()"),s1t.forEach(t),F5r=r(_Q,"to load the model weights."),_Q.forEach(t),C5r=i(vi),uTe=n(vi,"P",{});var l1t=s(uTe);M5r=r(l1t,"Examples:"),l1t.forEach(t),E5r=i(vi),f(QL.$$.fragment,vi),vi.forEach(t),y5r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);f(HL.$$.fragment,ka),w5r=i(ka),pTe=n(ka,"P",{});var i1t=s(pTe);A5r=r(i1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i1t.forEach(t),L5r=i(ka),Rn=n(ka,"P",{});var H5=s(Rn);B5r=r(H5,"The model class to instantiate is selected based on the "),_Te=n(H5,"CODE",{});var d1t=s(_Te);x5r=r(d1t,"model_type"),d1t.forEach(t),k5r=r(H5,` property of the config object (either
passed as an argument or loaded from `),bTe=n(H5,"CODE",{});var c1t=s(bTe);R5r=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),S5r=r(H5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(H5,"CODE",{});var m1t=s(vTe);P5r=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),$5r=r(H5,":"),H5.forEach(t),I5r=i(ka),_e=n(ka,"UL",{});var we=s(_e);zE=n(we,"LI",{});var GBe=s(zE);TTe=n(GBe,"STRONG",{});var f1t=s(TTe);N5r=r(f1t,"albert"),f1t.forEach(t),j5r=r(GBe," \u2014 "),NV=n(GBe,"A",{href:!0});var g1t=s(NV);D5r=r(g1t,"FlaxAlbertForMaskedLM"),g1t.forEach(t),q5r=r(GBe," (ALBERT model)"),GBe.forEach(t),G5r=i(we),WE=n(we,"LI",{});var OBe=s(WE);FTe=n(OBe,"STRONG",{});var h1t=s(FTe);O5r=r(h1t,"bart"),h1t.forEach(t),X5r=r(OBe," \u2014 "),jV=n(OBe,"A",{href:!0});var u1t=s(jV);V5r=r(u1t,"FlaxBartForConditionalGeneration"),u1t.forEach(t),z5r=r(OBe," (BART model)"),OBe.forEach(t),W5r=i(we),QE=n(we,"LI",{});var XBe=s(QE);CTe=n(XBe,"STRONG",{});var p1t=s(CTe);Q5r=r(p1t,"bert"),p1t.forEach(t),H5r=r(XBe," \u2014 "),DV=n(XBe,"A",{href:!0});var _1t=s(DV);U5r=r(_1t,"FlaxBertForMaskedLM"),_1t.forEach(t),J5r=r(XBe," (BERT model)"),XBe.forEach(t),Y5r=i(we),HE=n(we,"LI",{});var VBe=s(HE);MTe=n(VBe,"STRONG",{});var b1t=s(MTe);K5r=r(b1t,"big_bird"),b1t.forEach(t),Z5r=r(VBe," \u2014 "),qV=n(VBe,"A",{href:!0});var v1t=s(qV);eyr=r(v1t,"FlaxBigBirdForMaskedLM"),v1t.forEach(t),oyr=r(VBe," (BigBird model)"),VBe.forEach(t),ryr=i(we),UE=n(we,"LI",{});var zBe=s(UE);ETe=n(zBe,"STRONG",{});var T1t=s(ETe);tyr=r(T1t,"distilbert"),T1t.forEach(t),ayr=r(zBe," \u2014 "),GV=n(zBe,"A",{href:!0});var F1t=s(GV);nyr=r(F1t,"FlaxDistilBertForMaskedLM"),F1t.forEach(t),syr=r(zBe," (DistilBERT model)"),zBe.forEach(t),lyr=i(we),JE=n(we,"LI",{});var WBe=s(JE);yTe=n(WBe,"STRONG",{});var C1t=s(yTe);iyr=r(C1t,"electra"),C1t.forEach(t),dyr=r(WBe," \u2014 "),OV=n(WBe,"A",{href:!0});var M1t=s(OV);cyr=r(M1t,"FlaxElectraForMaskedLM"),M1t.forEach(t),myr=r(WBe," (ELECTRA model)"),WBe.forEach(t),fyr=i(we),YE=n(we,"LI",{});var QBe=s(YE);wTe=n(QBe,"STRONG",{});var E1t=s(wTe);gyr=r(E1t,"mbart"),E1t.forEach(t),hyr=r(QBe," \u2014 "),XV=n(QBe,"A",{href:!0});var y1t=s(XV);uyr=r(y1t,"FlaxMBartForConditionalGeneration"),y1t.forEach(t),pyr=r(QBe," (mBART model)"),QBe.forEach(t),_yr=i(we),KE=n(we,"LI",{});var HBe=s(KE);ATe=n(HBe,"STRONG",{});var w1t=s(ATe);byr=r(w1t,"roberta"),w1t.forEach(t),vyr=r(HBe," \u2014 "),VV=n(HBe,"A",{href:!0});var A1t=s(VV);Tyr=r(A1t,"FlaxRobertaForMaskedLM"),A1t.forEach(t),Fyr=r(HBe," (RoBERTa model)"),HBe.forEach(t),Cyr=i(we),ZE=n(we,"LI",{});var UBe=s(ZE);LTe=n(UBe,"STRONG",{});var L1t=s(LTe);Myr=r(L1t,"roformer"),L1t.forEach(t),Eyr=r(UBe," \u2014 "),zV=n(UBe,"A",{href:!0});var B1t=s(zV);yyr=r(B1t,"FlaxRoFormerForMaskedLM"),B1t.forEach(t),wyr=r(UBe," (RoFormer model)"),UBe.forEach(t),Ayr=i(we),e3=n(we,"LI",{});var JBe=s(e3);BTe=n(JBe,"STRONG",{});var x1t=s(BTe);Lyr=r(x1t,"xlm-roberta"),x1t.forEach(t),Byr=r(JBe," \u2014 "),WV=n(JBe,"A",{href:!0});var k1t=s(WV);xyr=r(k1t,"FlaxXLMRobertaForMaskedLM"),k1t.forEach(t),kyr=r(JBe," (XLM-RoBERTa model)"),JBe.forEach(t),we.forEach(t),Ryr=i(ka),xTe=n(ka,"P",{});var R1t=s(xTe);Syr=r(R1t,"Examples:"),R1t.forEach(t),Pyr=i(ka),f(UL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),kRe=i(c),dm=n(c,"H2",{class:!0});var XPe=s(dm);o3=n(XPe,"A",{id:!0,class:!0,href:!0});var S1t=s(o3);kTe=n(S1t,"SPAN",{});var P1t=s(kTe);f(JL.$$.fragment,P1t),P1t.forEach(t),S1t.forEach(t),$yr=i(XPe),RTe=n(XPe,"SPAN",{});var $1t=s(RTe);Iyr=r($1t,"FlaxAutoModelForSeq2SeqLM"),$1t.forEach(t),XPe.forEach(t),RRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);f(YL.$$.fragment,Ti),Nyr=i(Ti),cm=n(Ti,"P",{});var bQ=s(cm);jyr=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),STe=n(bQ,"CODE",{});var I1t=s(STe);Dyr=r(I1t,"from_pretrained()"),I1t.forEach(t),qyr=r(bQ,"class method or the "),PTe=n(bQ,"CODE",{});var N1t=s(PTe);Gyr=r(N1t,"from_config()"),N1t.forEach(t),Oyr=r(bQ,`class
method.`),bQ.forEach(t),Xyr=i(Ti),KL=n(Ti,"P",{});var VPe=s(KL);Vyr=r(VPe,"This class cannot be instantiated directly using "),$Te=n(VPe,"CODE",{});var j1t=s($Te);zyr=r(j1t,"__init__()"),j1t.forEach(t),Wyr=r(VPe," (throws an error)."),VPe.forEach(t),Qyr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);f(ZL.$$.fragment,Fi),Hyr=i(Fi),ITe=n(Fi,"P",{});var D1t=s(ITe);Uyr=r(D1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),D1t.forEach(t),Jyr=i(Fi),mm=n(Fi,"P",{});var vQ=s(mm);Yyr=r(vQ,`Note:
Loading a model from its configuration file does `),NTe=n(vQ,"STRONG",{});var q1t=s(NTe);Kyr=r(q1t,"not"),q1t.forEach(t),Zyr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jTe=n(vQ,"CODE",{});var G1t=s(jTe);ewr=r(G1t,"from_pretrained()"),G1t.forEach(t),owr=r(vQ,"to load the model weights."),vQ.forEach(t),rwr=i(Fi),DTe=n(Fi,"P",{});var O1t=s(DTe);twr=r(O1t,"Examples:"),O1t.forEach(t),awr=i(Fi),f(e7.$$.fragment,Fi),Fi.forEach(t),nwr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);f(o7.$$.fragment,Ra),swr=i(Ra),qTe=n(Ra,"P",{});var X1t=s(qTe);lwr=r(X1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X1t.forEach(t),iwr=i(Ra),Sn=n(Ra,"P",{});var U5=s(Sn);dwr=r(U5,"The model class to instantiate is selected based on the "),GTe=n(U5,"CODE",{});var V1t=s(GTe);cwr=r(V1t,"model_type"),V1t.forEach(t),mwr=r(U5,` property of the config object (either
passed as an argument or loaded from `),OTe=n(U5,"CODE",{});var z1t=s(OTe);fwr=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),gwr=r(U5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(U5,"CODE",{});var W1t=s(XTe);hwr=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),uwr=r(U5,":"),U5.forEach(t),pwr=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);r3=n(so,"LI",{});var YBe=s(r3);VTe=n(YBe,"STRONG",{});var Q1t=s(VTe);_wr=r(Q1t,"bart"),Q1t.forEach(t),bwr=r(YBe," \u2014 "),QV=n(YBe,"A",{href:!0});var H1t=s(QV);vwr=r(H1t,"FlaxBartForConditionalGeneration"),H1t.forEach(t),Twr=r(YBe," (BART model)"),YBe.forEach(t),Fwr=i(so),t3=n(so,"LI",{});var KBe=s(t3);zTe=n(KBe,"STRONG",{});var U1t=s(zTe);Cwr=r(U1t,"blenderbot"),U1t.forEach(t),Mwr=r(KBe," \u2014 "),HV=n(KBe,"A",{href:!0});var J1t=s(HV);Ewr=r(J1t,"FlaxBlenderbotForConditionalGeneration"),J1t.forEach(t),ywr=r(KBe," (Blenderbot model)"),KBe.forEach(t),wwr=i(so),a3=n(so,"LI",{});var ZBe=s(a3);WTe=n(ZBe,"STRONG",{});var Y1t=s(WTe);Awr=r(Y1t,"blenderbot-small"),Y1t.forEach(t),Lwr=r(ZBe," \u2014 "),UV=n(ZBe,"A",{href:!0});var K1t=s(UV);Bwr=r(K1t,"FlaxBlenderbotSmallForConditionalGeneration"),K1t.forEach(t),xwr=r(ZBe," (BlenderbotSmall model)"),ZBe.forEach(t),kwr=i(so),n3=n(so,"LI",{});var exe=s(n3);QTe=n(exe,"STRONG",{});var Z1t=s(QTe);Rwr=r(Z1t,"encoder-decoder"),Z1t.forEach(t),Swr=r(exe," \u2014 "),JV=n(exe,"A",{href:!0});var eFt=s(JV);Pwr=r(eFt,"FlaxEncoderDecoderModel"),eFt.forEach(t),$wr=r(exe," (Encoder decoder model)"),exe.forEach(t),Iwr=i(so),s3=n(so,"LI",{});var oxe=s(s3);HTe=n(oxe,"STRONG",{});var oFt=s(HTe);Nwr=r(oFt,"marian"),oFt.forEach(t),jwr=r(oxe," \u2014 "),YV=n(oxe,"A",{href:!0});var rFt=s(YV);Dwr=r(rFt,"FlaxMarianMTModel"),rFt.forEach(t),qwr=r(oxe," (Marian model)"),oxe.forEach(t),Gwr=i(so),l3=n(so,"LI",{});var rxe=s(l3);UTe=n(rxe,"STRONG",{});var tFt=s(UTe);Owr=r(tFt,"mbart"),tFt.forEach(t),Xwr=r(rxe," \u2014 "),KV=n(rxe,"A",{href:!0});var aFt=s(KV);Vwr=r(aFt,"FlaxMBartForConditionalGeneration"),aFt.forEach(t),zwr=r(rxe," (mBART model)"),rxe.forEach(t),Wwr=i(so),i3=n(so,"LI",{});var txe=s(i3);JTe=n(txe,"STRONG",{});var nFt=s(JTe);Qwr=r(nFt,"mt5"),nFt.forEach(t),Hwr=r(txe," \u2014 "),ZV=n(txe,"A",{href:!0});var sFt=s(ZV);Uwr=r(sFt,"FlaxMT5ForConditionalGeneration"),sFt.forEach(t),Jwr=r(txe," (mT5 model)"),txe.forEach(t),Ywr=i(so),d3=n(so,"LI",{});var axe=s(d3);YTe=n(axe,"STRONG",{});var lFt=s(YTe);Kwr=r(lFt,"pegasus"),lFt.forEach(t),Zwr=r(axe," \u2014 "),ez=n(axe,"A",{href:!0});var iFt=s(ez);e6r=r(iFt,"FlaxPegasusForConditionalGeneration"),iFt.forEach(t),o6r=r(axe," (Pegasus model)"),axe.forEach(t),r6r=i(so),c3=n(so,"LI",{});var nxe=s(c3);KTe=n(nxe,"STRONG",{});var dFt=s(KTe);t6r=r(dFt,"t5"),dFt.forEach(t),a6r=r(nxe," \u2014 "),oz=n(nxe,"A",{href:!0});var cFt=s(oz);n6r=r(cFt,"FlaxT5ForConditionalGeneration"),cFt.forEach(t),s6r=r(nxe," (T5 model)"),nxe.forEach(t),so.forEach(t),l6r=i(Ra),ZTe=n(Ra,"P",{});var mFt=s(ZTe);i6r=r(mFt,"Examples:"),mFt.forEach(t),d6r=i(Ra),f(r7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),SRe=i(c),fm=n(c,"H2",{class:!0});var zPe=s(fm);m3=n(zPe,"A",{id:!0,class:!0,href:!0});var fFt=s(m3);e1e=n(fFt,"SPAN",{});var gFt=s(e1e);f(t7.$$.fragment,gFt),gFt.forEach(t),fFt.forEach(t),c6r=i(zPe),o1e=n(zPe,"SPAN",{});var hFt=s(o1e);m6r=r(hFt,"FlaxAutoModelForSequenceClassification"),hFt.forEach(t),zPe.forEach(t),PRe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);f(a7.$$.fragment,Ci),f6r=i(Ci),gm=n(Ci,"P",{});var TQ=s(gm);g6r=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),r1e=n(TQ,"CODE",{});var uFt=s(r1e);h6r=r(uFt,"from_pretrained()"),uFt.forEach(t),u6r=r(TQ,"class method or the "),t1e=n(TQ,"CODE",{});var pFt=s(t1e);p6r=r(pFt,"from_config()"),pFt.forEach(t),_6r=r(TQ,`class
method.`),TQ.forEach(t),b6r=i(Ci),n7=n(Ci,"P",{});var WPe=s(n7);v6r=r(WPe,"This class cannot be instantiated directly using "),a1e=n(WPe,"CODE",{});var _Ft=s(a1e);T6r=r(_Ft,"__init__()"),_Ft.forEach(t),F6r=r(WPe," (throws an error)."),WPe.forEach(t),C6r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);f(s7.$$.fragment,Mi),M6r=i(Mi),n1e=n(Mi,"P",{});var bFt=s(n1e);E6r=r(bFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bFt.forEach(t),y6r=i(Mi),hm=n(Mi,"P",{});var FQ=s(hm);w6r=r(FQ,`Note:
Loading a model from its configuration file does `),s1e=n(FQ,"STRONG",{});var vFt=s(s1e);A6r=r(vFt,"not"),vFt.forEach(t),L6r=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),l1e=n(FQ,"CODE",{});var TFt=s(l1e);B6r=r(TFt,"from_pretrained()"),TFt.forEach(t),x6r=r(FQ,"to load the model weights."),FQ.forEach(t),k6r=i(Mi),i1e=n(Mi,"P",{});var FFt=s(i1e);R6r=r(FFt,"Examples:"),FFt.forEach(t),S6r=i(Mi),f(l7.$$.fragment,Mi),Mi.forEach(t),P6r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);f(i7.$$.fragment,Sa),$6r=i(Sa),d1e=n(Sa,"P",{});var CFt=s(d1e);I6r=r(CFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CFt.forEach(t),N6r=i(Sa),Pn=n(Sa,"P",{});var J5=s(Pn);j6r=r(J5,"The model class to instantiate is selected based on the "),c1e=n(J5,"CODE",{});var MFt=s(c1e);D6r=r(MFt,"model_type"),MFt.forEach(t),q6r=r(J5,` property of the config object (either
passed as an argument or loaded from `),m1e=n(J5,"CODE",{});var EFt=s(m1e);G6r=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),O6r=r(J5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(J5,"CODE",{});var yFt=s(f1e);X6r=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),V6r=r(J5,":"),J5.forEach(t),z6r=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);f3=n(Ae,"LI",{});var sxe=s(f3);g1e=n(sxe,"STRONG",{});var wFt=s(g1e);W6r=r(wFt,"albert"),wFt.forEach(t),Q6r=r(sxe," \u2014 "),rz=n(sxe,"A",{href:!0});var AFt=s(rz);H6r=r(AFt,"FlaxAlbertForSequenceClassification"),AFt.forEach(t),U6r=r(sxe," (ALBERT model)"),sxe.forEach(t),J6r=i(Ae),g3=n(Ae,"LI",{});var lxe=s(g3);h1e=n(lxe,"STRONG",{});var LFt=s(h1e);Y6r=r(LFt,"bart"),LFt.forEach(t),K6r=r(lxe," \u2014 "),tz=n(lxe,"A",{href:!0});var BFt=s(tz);Z6r=r(BFt,"FlaxBartForSequenceClassification"),BFt.forEach(t),eAr=r(lxe," (BART model)"),lxe.forEach(t),oAr=i(Ae),h3=n(Ae,"LI",{});var ixe=s(h3);u1e=n(ixe,"STRONG",{});var xFt=s(u1e);rAr=r(xFt,"bert"),xFt.forEach(t),tAr=r(ixe," \u2014 "),az=n(ixe,"A",{href:!0});var kFt=s(az);aAr=r(kFt,"FlaxBertForSequenceClassification"),kFt.forEach(t),nAr=r(ixe," (BERT model)"),ixe.forEach(t),sAr=i(Ae),u3=n(Ae,"LI",{});var dxe=s(u3);p1e=n(dxe,"STRONG",{});var RFt=s(p1e);lAr=r(RFt,"big_bird"),RFt.forEach(t),iAr=r(dxe," \u2014 "),nz=n(dxe,"A",{href:!0});var SFt=s(nz);dAr=r(SFt,"FlaxBigBirdForSequenceClassification"),SFt.forEach(t),cAr=r(dxe," (BigBird model)"),dxe.forEach(t),mAr=i(Ae),p3=n(Ae,"LI",{});var cxe=s(p3);_1e=n(cxe,"STRONG",{});var PFt=s(_1e);fAr=r(PFt,"distilbert"),PFt.forEach(t),gAr=r(cxe," \u2014 "),sz=n(cxe,"A",{href:!0});var $Ft=s(sz);hAr=r($Ft,"FlaxDistilBertForSequenceClassification"),$Ft.forEach(t),uAr=r(cxe," (DistilBERT model)"),cxe.forEach(t),pAr=i(Ae),_3=n(Ae,"LI",{});var mxe=s(_3);b1e=n(mxe,"STRONG",{});var IFt=s(b1e);_Ar=r(IFt,"electra"),IFt.forEach(t),bAr=r(mxe," \u2014 "),lz=n(mxe,"A",{href:!0});var NFt=s(lz);vAr=r(NFt,"FlaxElectraForSequenceClassification"),NFt.forEach(t),TAr=r(mxe," (ELECTRA model)"),mxe.forEach(t),FAr=i(Ae),b3=n(Ae,"LI",{});var fxe=s(b3);v1e=n(fxe,"STRONG",{});var jFt=s(v1e);CAr=r(jFt,"mbart"),jFt.forEach(t),MAr=r(fxe," \u2014 "),iz=n(fxe,"A",{href:!0});var DFt=s(iz);EAr=r(DFt,"FlaxMBartForSequenceClassification"),DFt.forEach(t),yAr=r(fxe," (mBART model)"),fxe.forEach(t),wAr=i(Ae),v3=n(Ae,"LI",{});var gxe=s(v3);T1e=n(gxe,"STRONG",{});var qFt=s(T1e);AAr=r(qFt,"roberta"),qFt.forEach(t),LAr=r(gxe," \u2014 "),dz=n(gxe,"A",{href:!0});var GFt=s(dz);BAr=r(GFt,"FlaxRobertaForSequenceClassification"),GFt.forEach(t),xAr=r(gxe," (RoBERTa model)"),gxe.forEach(t),kAr=i(Ae),T3=n(Ae,"LI",{});var hxe=s(T3);F1e=n(hxe,"STRONG",{});var OFt=s(F1e);RAr=r(OFt,"roformer"),OFt.forEach(t),SAr=r(hxe," \u2014 "),cz=n(hxe,"A",{href:!0});var XFt=s(cz);PAr=r(XFt,"FlaxRoFormerForSequenceClassification"),XFt.forEach(t),$Ar=r(hxe," (RoFormer model)"),hxe.forEach(t),IAr=i(Ae),F3=n(Ae,"LI",{});var uxe=s(F3);C1e=n(uxe,"STRONG",{});var VFt=s(C1e);NAr=r(VFt,"xlm-roberta"),VFt.forEach(t),jAr=r(uxe," \u2014 "),mz=n(uxe,"A",{href:!0});var zFt=s(mz);DAr=r(zFt,"FlaxXLMRobertaForSequenceClassification"),zFt.forEach(t),qAr=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),Ae.forEach(t),GAr=i(Sa),M1e=n(Sa,"P",{});var WFt=s(M1e);OAr=r(WFt,"Examples:"),WFt.forEach(t),XAr=i(Sa),f(d7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),$Re=i(c),um=n(c,"H2",{class:!0});var QPe=s(um);C3=n(QPe,"A",{id:!0,class:!0,href:!0});var QFt=s(C3);E1e=n(QFt,"SPAN",{});var HFt=s(E1e);f(c7.$$.fragment,HFt),HFt.forEach(t),QFt.forEach(t),VAr=i(QPe),y1e=n(QPe,"SPAN",{});var UFt=s(y1e);zAr=r(UFt,"FlaxAutoModelForQuestionAnswering"),UFt.forEach(t),QPe.forEach(t),IRe=i(c),jr=n(c,"DIV",{class:!0});var Ei=s(jr);f(m7.$$.fragment,Ei),WAr=i(Ei),pm=n(Ei,"P",{});var CQ=s(pm);QAr=r(CQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),w1e=n(CQ,"CODE",{});var JFt=s(w1e);HAr=r(JFt,"from_pretrained()"),JFt.forEach(t),UAr=r(CQ,"class method or the "),A1e=n(CQ,"CODE",{});var YFt=s(A1e);JAr=r(YFt,"from_config()"),YFt.forEach(t),YAr=r(CQ,`class
method.`),CQ.forEach(t),KAr=i(Ei),f7=n(Ei,"P",{});var HPe=s(f7);ZAr=r(HPe,"This class cannot be instantiated directly using "),L1e=n(HPe,"CODE",{});var KFt=s(L1e);e0r=r(KFt,"__init__()"),KFt.forEach(t),o0r=r(HPe," (throws an error)."),HPe.forEach(t),r0r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);f(g7.$$.fragment,yi),t0r=i(yi),B1e=n(yi,"P",{});var ZFt=s(B1e);a0r=r(ZFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ZFt.forEach(t),n0r=i(yi),_m=n(yi,"P",{});var MQ=s(_m);s0r=r(MQ,`Note:
Loading a model from its configuration file does `),x1e=n(MQ,"STRONG",{});var eCt=s(x1e);l0r=r(eCt,"not"),eCt.forEach(t),i0r=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),k1e=n(MQ,"CODE",{});var oCt=s(k1e);d0r=r(oCt,"from_pretrained()"),oCt.forEach(t),c0r=r(MQ,"to load the model weights."),MQ.forEach(t),m0r=i(yi),R1e=n(yi,"P",{});var rCt=s(R1e);f0r=r(rCt,"Examples:"),rCt.forEach(t),g0r=i(yi),f(h7.$$.fragment,yi),yi.forEach(t),h0r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);f(u7.$$.fragment,Pa),u0r=i(Pa),S1e=n(Pa,"P",{});var tCt=s(S1e);p0r=r(tCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tCt.forEach(t),_0r=i(Pa),$n=n(Pa,"P",{});var Y5=s($n);b0r=r(Y5,"The model class to instantiate is selected based on the "),P1e=n(Y5,"CODE",{});var aCt=s(P1e);v0r=r(aCt,"model_type"),aCt.forEach(t),T0r=r(Y5,` property of the config object (either
passed as an argument or loaded from `),$1e=n(Y5,"CODE",{});var nCt=s($1e);F0r=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),C0r=r(Y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(Y5,"CODE",{});var sCt=s(I1e);M0r=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),E0r=r(Y5,":"),Y5.forEach(t),y0r=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);M3=n(Le,"LI",{});var pxe=s(M3);N1e=n(pxe,"STRONG",{});var lCt=s(N1e);w0r=r(lCt,"albert"),lCt.forEach(t),A0r=r(pxe," \u2014 "),fz=n(pxe,"A",{href:!0});var iCt=s(fz);L0r=r(iCt,"FlaxAlbertForQuestionAnswering"),iCt.forEach(t),B0r=r(pxe," (ALBERT model)"),pxe.forEach(t),x0r=i(Le),E3=n(Le,"LI",{});var _xe=s(E3);j1e=n(_xe,"STRONG",{});var dCt=s(j1e);k0r=r(dCt,"bart"),dCt.forEach(t),R0r=r(_xe," \u2014 "),gz=n(_xe,"A",{href:!0});var cCt=s(gz);S0r=r(cCt,"FlaxBartForQuestionAnswering"),cCt.forEach(t),P0r=r(_xe," (BART model)"),_xe.forEach(t),$0r=i(Le),y3=n(Le,"LI",{});var bxe=s(y3);D1e=n(bxe,"STRONG",{});var mCt=s(D1e);I0r=r(mCt,"bert"),mCt.forEach(t),N0r=r(bxe," \u2014 "),hz=n(bxe,"A",{href:!0});var fCt=s(hz);j0r=r(fCt,"FlaxBertForQuestionAnswering"),fCt.forEach(t),D0r=r(bxe," (BERT model)"),bxe.forEach(t),q0r=i(Le),w3=n(Le,"LI",{});var vxe=s(w3);q1e=n(vxe,"STRONG",{});var gCt=s(q1e);G0r=r(gCt,"big_bird"),gCt.forEach(t),O0r=r(vxe," \u2014 "),uz=n(vxe,"A",{href:!0});var hCt=s(uz);X0r=r(hCt,"FlaxBigBirdForQuestionAnswering"),hCt.forEach(t),V0r=r(vxe," (BigBird model)"),vxe.forEach(t),z0r=i(Le),A3=n(Le,"LI",{});var Txe=s(A3);G1e=n(Txe,"STRONG",{});var uCt=s(G1e);W0r=r(uCt,"distilbert"),uCt.forEach(t),Q0r=r(Txe," \u2014 "),pz=n(Txe,"A",{href:!0});var pCt=s(pz);H0r=r(pCt,"FlaxDistilBertForQuestionAnswering"),pCt.forEach(t),U0r=r(Txe," (DistilBERT model)"),Txe.forEach(t),J0r=i(Le),L3=n(Le,"LI",{});var Fxe=s(L3);O1e=n(Fxe,"STRONG",{});var _Ct=s(O1e);Y0r=r(_Ct,"electra"),_Ct.forEach(t),K0r=r(Fxe," \u2014 "),_z=n(Fxe,"A",{href:!0});var bCt=s(_z);Z0r=r(bCt,"FlaxElectraForQuestionAnswering"),bCt.forEach(t),eLr=r(Fxe," (ELECTRA model)"),Fxe.forEach(t),oLr=i(Le),B3=n(Le,"LI",{});var Cxe=s(B3);X1e=n(Cxe,"STRONG",{});var vCt=s(X1e);rLr=r(vCt,"mbart"),vCt.forEach(t),tLr=r(Cxe," \u2014 "),bz=n(Cxe,"A",{href:!0});var TCt=s(bz);aLr=r(TCt,"FlaxMBartForQuestionAnswering"),TCt.forEach(t),nLr=r(Cxe," (mBART model)"),Cxe.forEach(t),sLr=i(Le),x3=n(Le,"LI",{});var Mxe=s(x3);V1e=n(Mxe,"STRONG",{});var FCt=s(V1e);lLr=r(FCt,"roberta"),FCt.forEach(t),iLr=r(Mxe," \u2014 "),vz=n(Mxe,"A",{href:!0});var CCt=s(vz);dLr=r(CCt,"FlaxRobertaForQuestionAnswering"),CCt.forEach(t),cLr=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),mLr=i(Le),k3=n(Le,"LI",{});var Exe=s(k3);z1e=n(Exe,"STRONG",{});var MCt=s(z1e);fLr=r(MCt,"roformer"),MCt.forEach(t),gLr=r(Exe," \u2014 "),Tz=n(Exe,"A",{href:!0});var ECt=s(Tz);hLr=r(ECt,"FlaxRoFormerForQuestionAnswering"),ECt.forEach(t),uLr=r(Exe," (RoFormer model)"),Exe.forEach(t),pLr=i(Le),R3=n(Le,"LI",{});var yxe=s(R3);W1e=n(yxe,"STRONG",{});var yCt=s(W1e);_Lr=r(yCt,"xlm-roberta"),yCt.forEach(t),bLr=r(yxe," \u2014 "),Fz=n(yxe,"A",{href:!0});var wCt=s(Fz);vLr=r(wCt,"FlaxXLMRobertaForQuestionAnswering"),wCt.forEach(t),TLr=r(yxe," (XLM-RoBERTa model)"),yxe.forEach(t),Le.forEach(t),FLr=i(Pa),Q1e=n(Pa,"P",{});var ACt=s(Q1e);CLr=r(ACt,"Examples:"),ACt.forEach(t),MLr=i(Pa),f(p7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),NRe=i(c),bm=n(c,"H2",{class:!0});var UPe=s(bm);S3=n(UPe,"A",{id:!0,class:!0,href:!0});var LCt=s(S3);H1e=n(LCt,"SPAN",{});var BCt=s(H1e);f(_7.$$.fragment,BCt),BCt.forEach(t),LCt.forEach(t),ELr=i(UPe),U1e=n(UPe,"SPAN",{});var xCt=s(U1e);yLr=r(xCt,"FlaxAutoModelForTokenClassification"),xCt.forEach(t),UPe.forEach(t),jRe=i(c),Dr=n(c,"DIV",{class:!0});var wi=s(Dr);f(b7.$$.fragment,wi),wLr=i(wi),vm=n(wi,"P",{});var EQ=s(vm);ALr=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),J1e=n(EQ,"CODE",{});var kCt=s(J1e);LLr=r(kCt,"from_pretrained()"),kCt.forEach(t),BLr=r(EQ,"class method or the "),Y1e=n(EQ,"CODE",{});var RCt=s(Y1e);xLr=r(RCt,"from_config()"),RCt.forEach(t),kLr=r(EQ,`class
method.`),EQ.forEach(t),RLr=i(wi),v7=n(wi,"P",{});var JPe=s(v7);SLr=r(JPe,"This class cannot be instantiated directly using "),K1e=n(JPe,"CODE",{});var SCt=s(K1e);PLr=r(SCt,"__init__()"),SCt.forEach(t),$Lr=r(JPe," (throws an error)."),JPe.forEach(t),ILr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);f(T7.$$.fragment,Ai),NLr=i(Ai),Z1e=n(Ai,"P",{});var PCt=s(Z1e);jLr=r(PCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PCt.forEach(t),DLr=i(Ai),Tm=n(Ai,"P",{});var yQ=s(Tm);qLr=r(yQ,`Note:
Loading a model from its configuration file does `),eFe=n(yQ,"STRONG",{});var $Ct=s(eFe);GLr=r($Ct,"not"),$Ct.forEach(t),OLr=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oFe=n(yQ,"CODE",{});var ICt=s(oFe);XLr=r(ICt,"from_pretrained()"),ICt.forEach(t),VLr=r(yQ,"to load the model weights."),yQ.forEach(t),zLr=i(Ai),rFe=n(Ai,"P",{});var NCt=s(rFe);WLr=r(NCt,"Examples:"),NCt.forEach(t),QLr=i(Ai),f(F7.$$.fragment,Ai),Ai.forEach(t),HLr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);f(C7.$$.fragment,$a),ULr=i($a),tFe=n($a,"P",{});var jCt=s(tFe);JLr=r(jCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jCt.forEach(t),YLr=i($a),In=n($a,"P",{});var K5=s(In);KLr=r(K5,"The model class to instantiate is selected based on the "),aFe=n(K5,"CODE",{});var DCt=s(aFe);ZLr=r(DCt,"model_type"),DCt.forEach(t),e7r=r(K5,` property of the config object (either
passed as an argument or loaded from `),nFe=n(K5,"CODE",{});var qCt=s(nFe);o7r=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),r7r=r(K5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=n(K5,"CODE",{});var GCt=s(sFe);t7r=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),a7r=r(K5,":"),K5.forEach(t),n7r=i($a),Se=n($a,"UL",{});var Oo=s(Se);P3=n(Oo,"LI",{});var wxe=s(P3);lFe=n(wxe,"STRONG",{});var OCt=s(lFe);s7r=r(OCt,"albert"),OCt.forEach(t),l7r=r(wxe," \u2014 "),Cz=n(wxe,"A",{href:!0});var XCt=s(Cz);i7r=r(XCt,"FlaxAlbertForTokenClassification"),XCt.forEach(t),d7r=r(wxe," (ALBERT model)"),wxe.forEach(t),c7r=i(Oo),$3=n(Oo,"LI",{});var Axe=s($3);iFe=n(Axe,"STRONG",{});var VCt=s(iFe);m7r=r(VCt,"bert"),VCt.forEach(t),f7r=r(Axe," \u2014 "),Mz=n(Axe,"A",{href:!0});var zCt=s(Mz);g7r=r(zCt,"FlaxBertForTokenClassification"),zCt.forEach(t),h7r=r(Axe," (BERT model)"),Axe.forEach(t),u7r=i(Oo),I3=n(Oo,"LI",{});var Lxe=s(I3);dFe=n(Lxe,"STRONG",{});var WCt=s(dFe);p7r=r(WCt,"big_bird"),WCt.forEach(t),_7r=r(Lxe," \u2014 "),Ez=n(Lxe,"A",{href:!0});var QCt=s(Ez);b7r=r(QCt,"FlaxBigBirdForTokenClassification"),QCt.forEach(t),v7r=r(Lxe," (BigBird model)"),Lxe.forEach(t),T7r=i(Oo),N3=n(Oo,"LI",{});var Bxe=s(N3);cFe=n(Bxe,"STRONG",{});var HCt=s(cFe);F7r=r(HCt,"distilbert"),HCt.forEach(t),C7r=r(Bxe," \u2014 "),yz=n(Bxe,"A",{href:!0});var UCt=s(yz);M7r=r(UCt,"FlaxDistilBertForTokenClassification"),UCt.forEach(t),E7r=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),y7r=i(Oo),j3=n(Oo,"LI",{});var xxe=s(j3);mFe=n(xxe,"STRONG",{});var JCt=s(mFe);w7r=r(JCt,"electra"),JCt.forEach(t),A7r=r(xxe," \u2014 "),wz=n(xxe,"A",{href:!0});var YCt=s(wz);L7r=r(YCt,"FlaxElectraForTokenClassification"),YCt.forEach(t),B7r=r(xxe," (ELECTRA model)"),xxe.forEach(t),x7r=i(Oo),D3=n(Oo,"LI",{});var kxe=s(D3);fFe=n(kxe,"STRONG",{});var KCt=s(fFe);k7r=r(KCt,"roberta"),KCt.forEach(t),R7r=r(kxe," \u2014 "),Az=n(kxe,"A",{href:!0});var ZCt=s(Az);S7r=r(ZCt,"FlaxRobertaForTokenClassification"),ZCt.forEach(t),P7r=r(kxe," (RoBERTa model)"),kxe.forEach(t),$7r=i(Oo),q3=n(Oo,"LI",{});var Rxe=s(q3);gFe=n(Rxe,"STRONG",{});var eMt=s(gFe);I7r=r(eMt,"roformer"),eMt.forEach(t),N7r=r(Rxe," \u2014 "),Lz=n(Rxe,"A",{href:!0});var oMt=s(Lz);j7r=r(oMt,"FlaxRoFormerForTokenClassification"),oMt.forEach(t),D7r=r(Rxe," (RoFormer model)"),Rxe.forEach(t),q7r=i(Oo),G3=n(Oo,"LI",{});var Sxe=s(G3);hFe=n(Sxe,"STRONG",{});var rMt=s(hFe);G7r=r(rMt,"xlm-roberta"),rMt.forEach(t),O7r=r(Sxe," \u2014 "),Bz=n(Sxe,"A",{href:!0});var tMt=s(Bz);X7r=r(tMt,"FlaxXLMRobertaForTokenClassification"),tMt.forEach(t),V7r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Oo.forEach(t),z7r=i($a),uFe=n($a,"P",{});var aMt=s(uFe);W7r=r(aMt,"Examples:"),aMt.forEach(t),Q7r=i($a),f(M7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),DRe=i(c),Fm=n(c,"H2",{class:!0});var YPe=s(Fm);O3=n(YPe,"A",{id:!0,class:!0,href:!0});var nMt=s(O3);pFe=n(nMt,"SPAN",{});var sMt=s(pFe);f(E7.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),H7r=i(YPe),_Fe=n(YPe,"SPAN",{});var lMt=s(_Fe);U7r=r(lMt,"FlaxAutoModelForMultipleChoice"),lMt.forEach(t),YPe.forEach(t),qRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);f(y7.$$.fragment,Li),J7r=i(Li),Cm=n(Li,"P",{});var wQ=s(Cm);Y7r=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bFe=n(wQ,"CODE",{});var iMt=s(bFe);K7r=r(iMt,"from_pretrained()"),iMt.forEach(t),Z7r=r(wQ,"class method or the "),vFe=n(wQ,"CODE",{});var dMt=s(vFe);e8r=r(dMt,"from_config()"),dMt.forEach(t),o8r=r(wQ,`class
method.`),wQ.forEach(t),r8r=i(Li),w7=n(Li,"P",{});var KPe=s(w7);t8r=r(KPe,"This class cannot be instantiated directly using "),TFe=n(KPe,"CODE",{});var cMt=s(TFe);a8r=r(cMt,"__init__()"),cMt.forEach(t),n8r=r(KPe," (throws an error)."),KPe.forEach(t),s8r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);f(A7.$$.fragment,Bi),l8r=i(Bi),FFe=n(Bi,"P",{});var mMt=s(FFe);i8r=r(mMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mMt.forEach(t),d8r=i(Bi),Mm=n(Bi,"P",{});var AQ=s(Mm);c8r=r(AQ,`Note:
Loading a model from its configuration file does `),CFe=n(AQ,"STRONG",{});var fMt=s(CFe);m8r=r(fMt,"not"),fMt.forEach(t),f8r=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MFe=n(AQ,"CODE",{});var gMt=s(MFe);g8r=r(gMt,"from_pretrained()"),gMt.forEach(t),h8r=r(AQ,"to load the model weights."),AQ.forEach(t),u8r=i(Bi),EFe=n(Bi,"P",{});var hMt=s(EFe);p8r=r(hMt,"Examples:"),hMt.forEach(t),_8r=i(Bi),f(L7.$$.fragment,Bi),Bi.forEach(t),b8r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);f(B7.$$.fragment,Ia),v8r=i(Ia),yFe=n(Ia,"P",{});var uMt=s(yFe);T8r=r(uMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uMt.forEach(t),F8r=i(Ia),Nn=n(Ia,"P",{});var Z5=s(Nn);C8r=r(Z5,"The model class to instantiate is selected based on the "),wFe=n(Z5,"CODE",{});var pMt=s(wFe);M8r=r(pMt,"model_type"),pMt.forEach(t),E8r=r(Z5,` property of the config object (either
passed as an argument or loaded from `),AFe=n(Z5,"CODE",{});var _Mt=s(AFe);y8r=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),w8r=r(Z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(Z5,"CODE",{});var bMt=s(LFe);A8r=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),L8r=r(Z5,":"),Z5.forEach(t),B8r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);X3=n(Xo,"LI",{});var Pxe=s(X3);BFe=n(Pxe,"STRONG",{});var vMt=s(BFe);x8r=r(vMt,"albert"),vMt.forEach(t),k8r=r(Pxe," \u2014 "),xz=n(Pxe,"A",{href:!0});var TMt=s(xz);R8r=r(TMt,"FlaxAlbertForMultipleChoice"),TMt.forEach(t),S8r=r(Pxe," (ALBERT model)"),Pxe.forEach(t),P8r=i(Xo),V3=n(Xo,"LI",{});var $xe=s(V3);xFe=n($xe,"STRONG",{});var FMt=s(xFe);$8r=r(FMt,"bert"),FMt.forEach(t),I8r=r($xe," \u2014 "),kz=n($xe,"A",{href:!0});var CMt=s(kz);N8r=r(CMt,"FlaxBertForMultipleChoice"),CMt.forEach(t),j8r=r($xe," (BERT model)"),$xe.forEach(t),D8r=i(Xo),z3=n(Xo,"LI",{});var Ixe=s(z3);kFe=n(Ixe,"STRONG",{});var MMt=s(kFe);q8r=r(MMt,"big_bird"),MMt.forEach(t),G8r=r(Ixe," \u2014 "),Rz=n(Ixe,"A",{href:!0});var EMt=s(Rz);O8r=r(EMt,"FlaxBigBirdForMultipleChoice"),EMt.forEach(t),X8r=r(Ixe," (BigBird model)"),Ixe.forEach(t),V8r=i(Xo),W3=n(Xo,"LI",{});var Nxe=s(W3);RFe=n(Nxe,"STRONG",{});var yMt=s(RFe);z8r=r(yMt,"distilbert"),yMt.forEach(t),W8r=r(Nxe," \u2014 "),Sz=n(Nxe,"A",{href:!0});var wMt=s(Sz);Q8r=r(wMt,"FlaxDistilBertForMultipleChoice"),wMt.forEach(t),H8r=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),U8r=i(Xo),Q3=n(Xo,"LI",{});var jxe=s(Q3);SFe=n(jxe,"STRONG",{});var AMt=s(SFe);J8r=r(AMt,"electra"),AMt.forEach(t),Y8r=r(jxe," \u2014 "),Pz=n(jxe,"A",{href:!0});var LMt=s(Pz);K8r=r(LMt,"FlaxElectraForMultipleChoice"),LMt.forEach(t),Z8r=r(jxe," (ELECTRA model)"),jxe.forEach(t),e9r=i(Xo),H3=n(Xo,"LI",{});var Dxe=s(H3);PFe=n(Dxe,"STRONG",{});var BMt=s(PFe);o9r=r(BMt,"roberta"),BMt.forEach(t),r9r=r(Dxe," \u2014 "),$z=n(Dxe,"A",{href:!0});var xMt=s($z);t9r=r(xMt,"FlaxRobertaForMultipleChoice"),xMt.forEach(t),a9r=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),n9r=i(Xo),U3=n(Xo,"LI",{});var qxe=s(U3);$Fe=n(qxe,"STRONG",{});var kMt=s($Fe);s9r=r(kMt,"roformer"),kMt.forEach(t),l9r=r(qxe," \u2014 "),Iz=n(qxe,"A",{href:!0});var RMt=s(Iz);i9r=r(RMt,"FlaxRoFormerForMultipleChoice"),RMt.forEach(t),d9r=r(qxe," (RoFormer model)"),qxe.forEach(t),c9r=i(Xo),J3=n(Xo,"LI",{});var Gxe=s(J3);IFe=n(Gxe,"STRONG",{});var SMt=s(IFe);m9r=r(SMt,"xlm-roberta"),SMt.forEach(t),f9r=r(Gxe," \u2014 "),Nz=n(Gxe,"A",{href:!0});var PMt=s(Nz);g9r=r(PMt,"FlaxXLMRobertaForMultipleChoice"),PMt.forEach(t),h9r=r(Gxe," (XLM-RoBERTa model)"),Gxe.forEach(t),Xo.forEach(t),u9r=i(Ia),NFe=n(Ia,"P",{});var $Mt=s(NFe);p9r=r($Mt,"Examples:"),$Mt.forEach(t),_9r=i(Ia),f(x7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),GRe=i(c),Em=n(c,"H2",{class:!0});var ZPe=s(Em);Y3=n(ZPe,"A",{id:!0,class:!0,href:!0});var IMt=s(Y3);jFe=n(IMt,"SPAN",{});var NMt=s(jFe);f(k7.$$.fragment,NMt),NMt.forEach(t),IMt.forEach(t),b9r=i(ZPe),DFe=n(ZPe,"SPAN",{});var jMt=s(DFe);v9r=r(jMt,"FlaxAutoModelForNextSentencePrediction"),jMt.forEach(t),ZPe.forEach(t),ORe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);f(R7.$$.fragment,xi),T9r=i(xi),ym=n(xi,"P",{});var LQ=s(ym);F9r=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qFe=n(LQ,"CODE",{});var DMt=s(qFe);C9r=r(DMt,"from_pretrained()"),DMt.forEach(t),M9r=r(LQ,"class method or the "),GFe=n(LQ,"CODE",{});var qMt=s(GFe);E9r=r(qMt,"from_config()"),qMt.forEach(t),y9r=r(LQ,`class
method.`),LQ.forEach(t),w9r=i(xi),S7=n(xi,"P",{});var e$e=s(S7);A9r=r(e$e,"This class cannot be instantiated directly using "),OFe=n(e$e,"CODE",{});var GMt=s(OFe);L9r=r(GMt,"__init__()"),GMt.forEach(t),B9r=r(e$e," (throws an error)."),e$e.forEach(t),x9r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);f(P7.$$.fragment,ki),k9r=i(ki),XFe=n(ki,"P",{});var OMt=s(XFe);R9r=r(OMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OMt.forEach(t),S9r=i(ki),wm=n(ki,"P",{});var BQ=s(wm);P9r=r(BQ,`Note:
Loading a model from its configuration file does `),VFe=n(BQ,"STRONG",{});var XMt=s(VFe);$9r=r(XMt,"not"),XMt.forEach(t),I9r=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zFe=n(BQ,"CODE",{});var VMt=s(zFe);N9r=r(VMt,"from_pretrained()"),VMt.forEach(t),j9r=r(BQ,"to load the model weights."),BQ.forEach(t),D9r=i(ki),WFe=n(ki,"P",{});var zMt=s(WFe);q9r=r(zMt,"Examples:"),zMt.forEach(t),G9r=i(ki),f($7.$$.fragment,ki),ki.forEach(t),O9r=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);f(I7.$$.fragment,Na),X9r=i(Na),QFe=n(Na,"P",{});var WMt=s(QFe);V9r=r(WMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WMt.forEach(t),z9r=i(Na),jn=n(Na,"P",{});var ey=s(jn);W9r=r(ey,"The model class to instantiate is selected based on the "),HFe=n(ey,"CODE",{});var QMt=s(HFe);Q9r=r(QMt,"model_type"),QMt.forEach(t),H9r=r(ey,` property of the config object (either
passed as an argument or loaded from `),UFe=n(ey,"CODE",{});var HMt=s(UFe);U9r=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),J9r=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(ey,"CODE",{});var UMt=s(JFe);Y9r=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),K9r=r(ey,":"),ey.forEach(t),Z9r=i(Na),YFe=n(Na,"UL",{});var JMt=s(YFe);K3=n(JMt,"LI",{});var Oxe=s(K3);KFe=n(Oxe,"STRONG",{});var YMt=s(KFe);eBr=r(YMt,"bert"),YMt.forEach(t),oBr=r(Oxe," \u2014 "),jz=n(Oxe,"A",{href:!0});var KMt=s(jz);rBr=r(KMt,"FlaxBertForNextSentencePrediction"),KMt.forEach(t),tBr=r(Oxe," (BERT model)"),Oxe.forEach(t),JMt.forEach(t),aBr=i(Na),ZFe=n(Na,"P",{});var ZMt=s(ZFe);nBr=r(ZMt,"Examples:"),ZMt.forEach(t),sBr=i(Na),f(N7.$$.fragment,Na),Na.forEach(t),xi.forEach(t),XRe=i(c),Am=n(c,"H2",{class:!0});var o$e=s(Am);Z3=n(o$e,"A",{id:!0,class:!0,href:!0});var e4t=s(Z3);eCe=n(e4t,"SPAN",{});var o4t=s(eCe);f(j7.$$.fragment,o4t),o4t.forEach(t),e4t.forEach(t),lBr=i(o$e),oCe=n(o$e,"SPAN",{});var r4t=s(oCe);iBr=r(r4t,"FlaxAutoModelForImageClassification"),r4t.forEach(t),o$e.forEach(t),VRe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);f(D7.$$.fragment,Ri),dBr=i(Ri),Lm=n(Ri,"P",{});var xQ=s(Lm);cBr=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rCe=n(xQ,"CODE",{});var t4t=s(rCe);mBr=r(t4t,"from_pretrained()"),t4t.forEach(t),fBr=r(xQ,"class method or the "),tCe=n(xQ,"CODE",{});var a4t=s(tCe);gBr=r(a4t,"from_config()"),a4t.forEach(t),hBr=r(xQ,`class
method.`),xQ.forEach(t),uBr=i(Ri),q7=n(Ri,"P",{});var r$e=s(q7);pBr=r(r$e,"This class cannot be instantiated directly using "),aCe=n(r$e,"CODE",{});var n4t=s(aCe);_Br=r(n4t,"__init__()"),n4t.forEach(t),bBr=r(r$e," (throws an error)."),r$e.forEach(t),vBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);f(G7.$$.fragment,Si),TBr=i(Si),nCe=n(Si,"P",{});var s4t=s(nCe);FBr=r(s4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),s4t.forEach(t),CBr=i(Si),Bm=n(Si,"P",{});var kQ=s(Bm);MBr=r(kQ,`Note:
Loading a model from its configuration file does `),sCe=n(kQ,"STRONG",{});var l4t=s(sCe);EBr=r(l4t,"not"),l4t.forEach(t),yBr=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lCe=n(kQ,"CODE",{});var i4t=s(lCe);wBr=r(i4t,"from_pretrained()"),i4t.forEach(t),ABr=r(kQ,"to load the model weights."),kQ.forEach(t),LBr=i(Si),iCe=n(Si,"P",{});var d4t=s(iCe);BBr=r(d4t,"Examples:"),d4t.forEach(t),xBr=i(Si),f(O7.$$.fragment,Si),Si.forEach(t),kBr=i(Ri),No=n(Ri,"DIV",{class:!0});var ja=s(No);f(X7.$$.fragment,ja),RBr=i(ja),dCe=n(ja,"P",{});var c4t=s(dCe);SBr=r(c4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),c4t.forEach(t),PBr=i(ja),Dn=n(ja,"P",{});var oy=s(Dn);$Br=r(oy,"The model class to instantiate is selected based on the "),cCe=n(oy,"CODE",{});var m4t=s(cCe);IBr=r(m4t,"model_type"),m4t.forEach(t),NBr=r(oy,` property of the config object (either
passed as an argument or loaded from `),mCe=n(oy,"CODE",{});var f4t=s(mCe);jBr=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),DBr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(oy,"CODE",{});var g4t=s(fCe);qBr=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),GBr=r(oy,":"),oy.forEach(t),OBr=i(ja),V7=n(ja,"UL",{});var t$e=s(V7);e5=n(t$e,"LI",{});var Xxe=s(e5);gCe=n(Xxe,"STRONG",{});var h4t=s(gCe);XBr=r(h4t,"beit"),h4t.forEach(t),VBr=r(Xxe," \u2014 "),Dz=n(Xxe,"A",{href:!0});var u4t=s(Dz);zBr=r(u4t,"FlaxBeitForImageClassification"),u4t.forEach(t),WBr=r(Xxe," (BEiT model)"),Xxe.forEach(t),QBr=i(t$e),o5=n(t$e,"LI",{});var Vxe=s(o5);hCe=n(Vxe,"STRONG",{});var p4t=s(hCe);HBr=r(p4t,"vit"),p4t.forEach(t),UBr=r(Vxe," \u2014 "),qz=n(Vxe,"A",{href:!0});var _4t=s(qz);JBr=r(_4t,"FlaxViTForImageClassification"),_4t.forEach(t),YBr=r(Vxe," (ViT model)"),Vxe.forEach(t),t$e.forEach(t),KBr=i(ja),uCe=n(ja,"P",{});var b4t=s(uCe);ZBr=r(b4t,"Examples:"),b4t.forEach(t),exr=i(ja),f(z7.$$.fragment,ja),ja.forEach(t),Ri.forEach(t),zRe=i(c),xm=n(c,"H2",{class:!0});var a$e=s(xm);r5=n(a$e,"A",{id:!0,class:!0,href:!0});var v4t=s(r5);pCe=n(v4t,"SPAN",{});var T4t=s(pCe);f(W7.$$.fragment,T4t),T4t.forEach(t),v4t.forEach(t),oxr=i(a$e),_Ce=n(a$e,"SPAN",{});var F4t=s(_Ce);rxr=r(F4t,"FlaxAutoModelForVision2Seq"),F4t.forEach(t),a$e.forEach(t),WRe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);f(Q7.$$.fragment,Pi),txr=i(Pi),km=n(Pi,"P",{});var RQ=s(km);axr=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bCe=n(RQ,"CODE",{});var C4t=s(bCe);nxr=r(C4t,"from_pretrained()"),C4t.forEach(t),sxr=r(RQ,"class method or the "),vCe=n(RQ,"CODE",{});var M4t=s(vCe);lxr=r(M4t,"from_config()"),M4t.forEach(t),ixr=r(RQ,`class
method.`),RQ.forEach(t),dxr=i(Pi),H7=n(Pi,"P",{});var n$e=s(H7);cxr=r(n$e,"This class cannot be instantiated directly using "),TCe=n(n$e,"CODE",{});var E4t=s(TCe);mxr=r(E4t,"__init__()"),E4t.forEach(t),fxr=r(n$e," (throws an error)."),n$e.forEach(t),gxr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);f(U7.$$.fragment,$i),hxr=i($i),FCe=n($i,"P",{});var y4t=s(FCe);uxr=r(y4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y4t.forEach(t),pxr=i($i),Rm=n($i,"P",{});var SQ=s(Rm);_xr=r(SQ,`Note:
Loading a model from its configuration file does `),CCe=n(SQ,"STRONG",{});var w4t=s(CCe);bxr=r(w4t,"not"),w4t.forEach(t),vxr=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MCe=n(SQ,"CODE",{});var A4t=s(MCe);Txr=r(A4t,"from_pretrained()"),A4t.forEach(t),Fxr=r(SQ,"to load the model weights."),SQ.forEach(t),Cxr=i($i),ECe=n($i,"P",{});var L4t=s(ECe);Mxr=r(L4t,"Examples:"),L4t.forEach(t),Exr=i($i),f(J7.$$.fragment,$i),$i.forEach(t),yxr=i(Pi),jo=n(Pi,"DIV",{class:!0});var Da=s(jo);f(Y7.$$.fragment,Da),wxr=i(Da),yCe=n(Da,"P",{});var B4t=s(yCe);Axr=r(B4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),B4t.forEach(t),Lxr=i(Da),qn=n(Da,"P",{});var ry=s(qn);Bxr=r(ry,"The model class to instantiate is selected based on the "),wCe=n(ry,"CODE",{});var x4t=s(wCe);xxr=r(x4t,"model_type"),x4t.forEach(t),kxr=r(ry,` property of the config object (either
passed as an argument or loaded from `),ACe=n(ry,"CODE",{});var k4t=s(ACe);Rxr=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),Sxr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LCe=n(ry,"CODE",{});var R4t=s(LCe);Pxr=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),$xr=r(ry,":"),ry.forEach(t),Ixr=i(Da),BCe=n(Da,"UL",{});var S4t=s(BCe);t5=n(S4t,"LI",{});var zxe=s(t5);xCe=n(zxe,"STRONG",{});var P4t=s(xCe);Nxr=r(P4t,"vision-encoder-decoder"),P4t.forEach(t),jxr=r(zxe," \u2014 "),Gz=n(zxe,"A",{href:!0});var $4t=s(Gz);Dxr=r($4t,"FlaxVisionEncoderDecoderModel"),$4t.forEach(t),qxr=r(zxe," (Vision Encoder decoder model)"),zxe.forEach(t),S4t.forEach(t),Gxr=i(Da),kCe=n(Da,"P",{});var I4t=s(kCe);Oxr=r(I4t,"Examples:"),I4t.forEach(t),Xxr=i(Da),f(K7.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){d(K,"name","hf:doc:metadata"),d(K,"content",JSON.stringify(W4t)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Dm,"id","extending-the-auto-classes"),d(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dm,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Gm,"id","transformers.AutoConfig"),d(Gm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gm,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(r9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(t9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(a9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(n9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(s9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(l9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(i9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(d9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(c9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(m9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(f9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(g9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(h9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(u9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(p9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(_9,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(b9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(v9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(T9,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(F9,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(C9,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(M9,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(E9,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(y9,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(w9,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(A9,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(L9,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(B9,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(x9,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(k9,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(R9,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(S9,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(P9,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d($9,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(I9,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(N9,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(j9,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(D9,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(q9,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(G9,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(O9,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(X9,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(V9,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(z9,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(W9,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(Q9,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(H9,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(U9,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(J9,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Y9,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(K9,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(Z9,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(eB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(oB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(rB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(tB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(aB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(nB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(sB,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(lB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(iB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(dB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(cB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(mB,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(fB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(gB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(hB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(uB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(pB,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(_B,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(bB,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(vB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(TB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(FB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(CB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(MB,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(EB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(yB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(wB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(AB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(LB,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(BB,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(xB,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(kB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(RB,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(SB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(PB,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d($B,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(IB,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(NB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(jB,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(DB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(qB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(GB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(OB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(XB,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(VB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(zB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(Rg,"class","docstring"),d(Wo,"class","docstring"),d(Sg,"id","transformers.AutoTokenizer"),d(Sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(WB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(QB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(HB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(UB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(JB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(YB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(KB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(ZB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(ex,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(ox,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(rx,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(tx,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(ax,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(nx,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(sx,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(lx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(ix,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(dx,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(cx,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(mx,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(fx,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(gx,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(hx,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(ux,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(px,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(_x,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(bx,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(vx,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Tx,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(Fx,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Cx,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Mx,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Ex,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(yx,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(wx,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Ax,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Lx,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Bx,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(xx,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(kx,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Rx,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(Sx,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Px,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d($x,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Ix,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Nx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(jx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Dx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(qx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Gx,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Ox,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Xx,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Vx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(zx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Wx,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Qx,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Hx,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Ux,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Jx,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Yx,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(Kx,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(Zx,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(ek,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(ok,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(rk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(tk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(ak,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(nk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(sk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(lk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(ik,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(dk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ck,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(mk,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(fk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(gk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(hk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(uk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(pk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(_k,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(bk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(vk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Tk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Fk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ck,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Mk,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Ek,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(yk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(wk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(Ak,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(Lk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(Bk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(xk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(kk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Rk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Sk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Pk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d($k,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Ik,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Nk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(jk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Dk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(qk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Gk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Ok,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Xk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Vk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(zk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Wk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Qk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(Hk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Uk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(Jk,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Yk,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Kk,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(Zk,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(eR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(oR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(rR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(tR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(aR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(nR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(sR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(dh,"class","docstring"),d(Qo,"class","docstring"),d(ch,"id","transformers.AutoFeatureExtractor"),d(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ch,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(lR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(iR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(dR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(cR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(mR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(fR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(gR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(hR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(uR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(pR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(_R,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(bR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(vR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(TR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(FR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(CR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(MR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ER,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(yR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(xh,"class","docstring"),d(Ho,"class","docstring"),d(kh,"id","transformers.AutoProcessor"),d(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(wR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(AR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(LR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(BR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(xR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(kR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(RR,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(SR,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(PR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Gh,"class","docstring"),d(Uo,"class","docstring"),d(Oh,"id","transformers.AutoModel"),d(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d($R,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(IR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(NR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(jR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(DR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(qR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(GR,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(OR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(XR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(VR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(zR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(WR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(QR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(HR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(UR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(JR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(YR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(KR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(ZR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(eS,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(oS,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(rS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(tS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(aS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(nS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(sS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(lS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(iS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(dS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(cS,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(mS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(fS,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(gS,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(hS,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(uS,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(pS,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(_S,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(bS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(vS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(TS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(FS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(CS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(MS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(ES,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(yS,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(wS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(AS,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(LS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(BS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(xS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(kS,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(RS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(SS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(PS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d($S,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(IS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(NS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(jS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(DS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(qS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(GS,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(OS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(XS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(VS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(zS,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(WS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(QS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(HS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(US,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(JS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(YS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(KS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(ZS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(eP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(oP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(rP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(tP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(aP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(nP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(sP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(lP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(iP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(dP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(cP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(mP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(fP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(gP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(hP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(uP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(pP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(_P,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring"),d(Jo,"class","docstring"),d(yp,"id","transformers.AutoModelForPreTraining"),d(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yp,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(bP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(vP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(TP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(FP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(CP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(MP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(EP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(yP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(wP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(AP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(LP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(BP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(xP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(kP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(RP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(SP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(PP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d($P,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(IP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(NP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(jP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(DP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(qP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(GP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(OP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(XP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(VP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(zP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(WP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(QP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(HP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(UP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(JP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(YP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(KP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(ZP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(e$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(o$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(r$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Yo,"class","docstring"),d(f_,"id","transformers.AutoModelForCausalLM"),d(f_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f_,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(t$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(a$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(n$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(s$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(l$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(i$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(d$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(c$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(m$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(f$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(g$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(h$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(u$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(p$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(_$,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(b$,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(v$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(T$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(F$,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(C$,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(M$,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(E$,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(y$,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(w$,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(A$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(L$,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(B$,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(x$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(k$,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(R$,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(S$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(P$,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d($$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(I$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(N$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(U_,"id","transformers.AutoModelForMaskedLM"),d(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U_,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(j$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(D$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(q$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(G$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(O$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(X$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(V$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(z$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(W$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Q$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(H$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(U$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(J$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Y$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(K$,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(Z$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(eI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(oI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(rI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(tI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(aI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(nI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(sI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(lI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(iI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(dI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(cI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(mI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(fI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(gI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(hI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(uI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(pI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(_I,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(Rb,"id","transformers.AutoModelForSeq2SeqLM"),d(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rb,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(bI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(vI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(TI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(FI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(CI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(MI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(EI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(yI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(wI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(AI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(LI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(BI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(xI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(kI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(RI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(SI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(Jb,"id","transformers.AutoModelForSequenceClassification"),d(Jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jb,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(PI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d($I,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(II,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(NI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(jI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(DI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(qI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(GI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(OI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(XI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(VI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(zI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(WI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(QI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(HI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(UI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(JI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(YI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(KI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(ZI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(eN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(oN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(rN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(tN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(aN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(nN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(sN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(lN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(iN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(dN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(cN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(mN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(fN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(gN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(hN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(uN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(pN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(_N,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(bN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(vN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(TN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(FN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(CN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(MN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(EN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(yN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(V2,"id","transformers.AutoModelForMultipleChoice"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(wN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(AN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(LN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(BN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(xN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(RN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(SN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(PN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($N,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(IN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(NN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(jN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(DN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(qN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(GN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(ON,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(XN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(VN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(zN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(WN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(QN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(HN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(UN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(JN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(YN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(KN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(ZN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(Tv,"id","transformers.AutoModelForNextSentencePrediction"),d(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tv,"href","#transformers.AutoModelForNextSentencePrediction"),d(_d,"class","relative group"),d(Yr,"class","docstring"),d(ej,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(Av,"id","transformers.AutoModelForTokenClassification"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(nj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(sj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(lj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(ij,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(dj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(cj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(mj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(fj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(gj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(hj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(uj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(pj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(_j,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(bj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(vj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Tj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Fj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Cj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Mj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Ej,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(yj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(wj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Aj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Lj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Bj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(xj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(kj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Rj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Sj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Pj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d($j,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Ij,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Nj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(iT,"id","transformers.AutoModelForQuestionAnswering"),d(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iT,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(jj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Dj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(qj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Gj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Oj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Xj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Vj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(zj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Wj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Qj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Hj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Uj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Jj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Yj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Kj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Zj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(eD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(oD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(rD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(tD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(aD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(nD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(sD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(lD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(iD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(dD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(cD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(mD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(fD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(gD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(hD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(uD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(pD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(_D,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(bD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(vD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(TD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(FD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(CD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(UT,"id","transformers.AutoModelForTableQuestionAnswering"),d(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(MD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(KT,"id","transformers.AutoModelForImageClassification"),d(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KT,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(ED,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(yD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(wD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(AD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(LD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(BD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(xD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(kD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(RD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(SD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(PD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d($D,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(ID,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(ND,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(d1,"id","transformers.AutoModelForVision2Seq"),d(d1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d1,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(jD,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(f1,"id","transformers.AutoModelForAudioClassification"),d(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f1,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(DD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(qD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(GD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(OD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(XD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(VD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(zD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(WD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(C1,"id","transformers.AutoModelForAudioFrameClassification"),d(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C1,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(at,"class","docstring"),d(QD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(HD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(UD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(JD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(L1,"id","transformers.AutoModelForCTC"),d(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L1,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(YD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(KD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(ZD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(eq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(oq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(rq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(tq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(aq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(mr,"class","docstring"),d(j1,"id","transformers.AutoModelForSpeechSeq2Seq"),d(j1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j1,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(nq,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(sq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(O1,"id","transformers.AutoModelForAudioXVector"),d(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O1,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(lq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(iq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(dq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(cq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(H1,"id","transformers.AutoModelForMaskedImageModeling"),d(H1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H1,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(mq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(fq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(gq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(Z1,"id","transformers.AutoModelForObjectDetection"),d(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z1,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(hq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(ur,"class","docstring"),d(rF,"id","transformers.AutoModelForImageSegmentation"),d(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(uq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(pr,"class","docstring"),d(nF,"id","transformers.AutoModelForSemanticSegmentation"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(mt,"class","docstring"),d(pq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(_q,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(dF,"id","transformers.AutoModelForInstanceSegmentation"),d(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dF,"href","#transformers.AutoModelForInstanceSegmentation"),d(dc,"class","relative group"),d(ft,"class","docstring"),d(bq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(fF,"id","transformers.TFAutoModel"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.TFAutoModel"),d(fc,"class","relative group"),d(gt,"class","docstring"),d(vq,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(Tq,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(Fq,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(Cq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Mq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Eq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(yq,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(wq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(Aq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(Lq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Bq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(xq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(kq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Rq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Sq,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(Pq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d($q,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(Iq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Nq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(jq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(Dq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(qq,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(Gq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(Oq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Xq,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(Vq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(zq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Wq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Qq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(Hq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Uq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Jq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(Yq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(Kq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(Zq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(eG,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(oG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(rG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(tG,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(aG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(nG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(sG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(lG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(eC,"id","transformers.TFAutoModelForPreTraining"),d(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eC,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(ht,"class","docstring"),d(iG,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(dG,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(mG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(fG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(gG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(hG,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(uG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(pG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(_G,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(bG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(vG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(TG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(FG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(CG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(MG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(EG,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(yG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(wG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(AG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(LG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(BG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring"),d(Tr,"class","docstring"),d(MC,"id","transformers.TFAutoModelForCausalLM"),d(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MC,"href","#transformers.TFAutoModelForCausalLM"),d(bc,"class","relative group"),d(ut,"class","docstring"),d(xG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(kG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(RG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(SG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(PG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d($G,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(IG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(NG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(jG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(DG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(qG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Fr,"class","docstring"),d($C,"id","transformers.TFAutoModelForImageClassification"),d($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($C,"href","#transformers.TFAutoModelForImageClassification"),d(Fc,"class","relative group"),d(pt,"class","docstring"),d(GG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(OG,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(Cr,"class","docstring"),d(jC,"id","transformers.TFAutoModelForMaskedLM"),d(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jC,"href","#transformers.TFAutoModelForMaskedLM"),d(Ec,"class","relative group"),d(_t,"class","docstring"),d(XG,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(VG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(zG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(WG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(QG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(HG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(UG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(JG,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(YG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(KG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(ZG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(eO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(oO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(rO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(tO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(aO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(nO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(sO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(lO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(iO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(nM,"id","transformers.TFAutoModelForSeq2SeqLM"),d(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nM,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ac,"class","relative group"),d(bt,"class","docstring"),d(dO,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(mO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(fO,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(gO,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(hO,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(uO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(pO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(_O,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(bO,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(pM,"id","transformers.TFAutoModelForSequenceClassification"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.TFAutoModelForSequenceClassification"),d(xc,"class","relative group"),d(vt,"class","docstring"),d(vO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(TO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(FO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(CO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(MO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(EO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(yO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(wO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(AO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(LO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(BO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(xO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(kO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(RO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(SO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(PO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d($O,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(IO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(NO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(jO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(DO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(qO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(GO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(OO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(XO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(OM,"id","transformers.TFAutoModelForMultipleChoice"),d(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OM,"href","#transformers.TFAutoModelForMultipleChoice"),d(Sc,"class","relative group"),d(Tt,"class","docstring"),d(VO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(zO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(WO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(QO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(HO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(UO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(JO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(YO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(KO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(ZO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(eX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(oX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(rX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(tX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(aX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(nX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(sX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(s4,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Ic,"class","relative group"),d(Ft,"class","docstring"),d(lX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(i4,"id","transformers.TFAutoModelForTokenClassification"),d(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i4,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Ct,"class","docstring"),d(iX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(dX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(cX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(mX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(fX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(gX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(hX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(uX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(pX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(_X,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(bX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(vX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(TX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(FX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(CX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(MX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(EX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(yX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(wX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(AX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(B4,"id","transformers.TFAutoModelForQuestionAnswering"),d(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B4,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Oc,"class","relative group"),d(Mt,"class","docstring"),d(LX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(BX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(xX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(kX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(RX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(SX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(PX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d($X,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(IX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(NX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(jX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(DX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(qX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(GX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(OX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(XX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(VX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(zX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(WX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(U4,"id","transformers.TFAutoModelForVision2Seq"),d(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U4,"href","#transformers.TFAutoModelForVision2Seq"),d(zc,"class","relative group"),d(Et,"class","docstring"),d(QX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(Y4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Hc,"class","relative group"),d(yt,"class","docstring"),d(HX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(Z4,"id","transformers.FlaxAutoModel"),d(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z4,"href","#transformers.FlaxAutoModel"),d(Yc,"class","relative group"),d(wt,"class","docstring"),d(UX,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(JX,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(YX,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(KX,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(ZX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(eV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(oV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(rV,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(tV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(aV,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(nV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(sV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(lV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(iV,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(dV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(cV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(mV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(fV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(gV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(hV,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(uV,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(pV,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(_V,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(bV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(vV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(yE,"id","transformers.FlaxAutoModelForCausalLM"),d(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yE,"href","#transformers.FlaxAutoModelForCausalLM"),d(em,"class","relative group"),d(At,"class","docstring"),d(TV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(FV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(CV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(MV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(EV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(kE,"id","transformers.FlaxAutoModelForPreTraining"),d(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kE,"href","#transformers.FlaxAutoModelForPreTraining"),d(tm,"class","relative group"),d(Lt,"class","docstring"),d(yV,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(wV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(AV,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(LV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(BV,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(xV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(kV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(RV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(PV,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d($V,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(IV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(VE,"id","transformers.FlaxAutoModelForMaskedLM"),d(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(sm,"class","relative group"),d(Bt,"class","docstring"),d(NV,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(jV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(DV,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(qV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(GV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(OV,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(XV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(VV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(WV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(o3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(dm,"class","relative group"),d(xt,"class","docstring"),d(QV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(HV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(UV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(JV,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(YV,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(KV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(ZV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(ez,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(oz,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(m3,"id","transformers.FlaxAutoModelForSequenceClassification"),d(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(fm,"class","relative group"),d(kt,"class","docstring"),d(rz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(tz,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(az,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(nz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(sz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(lz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(iz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(dz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(cz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(mz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(C3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(um,"class","relative group"),d(Rt,"class","docstring"),d(fz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(gz,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(hz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(uz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(pz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(_z,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(bz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(vz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Tz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Fz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(jr,"class","docstring"),d(S3,"id","transformers.FlaxAutoModelForTokenClassification"),d(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S3,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bm,"class","relative group"),d(St,"class","docstring"),d(Cz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Mz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Ez,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(yz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(wz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Az,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Lz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Bz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(O3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Fm,"class","relative group"),d(Pt,"class","docstring"),d(xz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(kz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Rz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Sz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Pz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d($z,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Iz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Nz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(Y3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Em,"class","relative group"),d($t,"class","docstring"),d(jz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(Z3,"id","transformers.FlaxAutoModelForImageClassification"),d(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z3,"href","#transformers.FlaxAutoModelForImageClassification"),d(Am,"class","relative group"),d(It,"class","docstring"),d(Dz,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(qz,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(r5,"id","transformers.FlaxAutoModelForVision2Seq"),d(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r5,"href","#transformers.FlaxAutoModelForVision2Seq"),d(xm,"class","relative group"),d(Nt,"class","docstring"),d(Gz,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring"),d(Xr,"class","docstring")},m(c,_){e(document.head,K),b(c,io,_),b(c,de,_),e(de,Ee),e(Ee,lo),g(me,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,$m,_),b(c,ma,_),e(ma,Ni),e(ma,ji),e(ji,ty),e(ma,Im),b(c,Be,_),b(c,co,_),e(co,Di),e(co,Gn),e(Gn,ay),e(co,On),e(co,Xn),e(Xn,ny),e(co,qi),e(co,Vn),e(Vn,sy),e(co,Gi),b(c,Nm,_),g(qa,c,_),b(c,mo,_),b(c,ue,_),e(ue,J8),e(ue,Oi),e(Oi,Y8),e(ue,K8),b(c,zo,_),b(c,Ga,_),e(Ga,Z8),e(Ga,jm),e(jm,e9),e(Ga,s$e),b(c,Wxe,_),b(c,Xi,_),e(Xi,Dm),e(Dm,PQ),g(ly,PQ,null),e(Xi,l$e),e(Xi,$Q),e($Q,i$e),b(c,Qxe,_),b(c,zn,_),e(zn,d$e),e(zn,IQ),e(IQ,c$e),e(zn,m$e),e(zn,NQ),e(NQ,f$e),e(zn,g$e),b(c,Hxe,_),g(iy,c,_),b(c,Uxe,_),b(c,o9,_),e(o9,h$e),b(c,Jxe,_),g(qm,c,_),b(c,Yxe,_),b(c,Vi,_),e(Vi,Gm),e(Gm,jQ),g(dy,jQ,null),e(Vi,u$e),e(Vi,DQ),e(DQ,p$e),b(c,Kxe,_),b(c,Wo,_),g(cy,Wo,null),e(Wo,_$e),e(Wo,my),e(my,b$e),e(my,r9),e(r9,v$e),e(my,T$e),e(Wo,F$e),e(Wo,fy),e(fy,C$e),e(fy,qQ),e(qQ,M$e),e(fy,E$e),e(Wo,y$e),e(Wo,fo),g(gy,fo,null),e(fo,w$e),e(fo,GQ),e(GQ,A$e),e(fo,L$e),e(fo,zi),e(zi,B$e),e(zi,OQ),e(OQ,x$e),e(zi,k$e),e(zi,XQ),e(XQ,R$e),e(zi,S$e),e(fo,P$e),e(fo,v),e(v,Om),e(Om,VQ),e(VQ,$$e),e(Om,I$e),e(Om,t9),e(t9,N$e),e(Om,j$e),e(v,D$e),e(v,Xm),e(Xm,zQ),e(zQ,q$e),e(Xm,G$e),e(Xm,a9),e(a9,O$e),e(Xm,X$e),e(v,V$e),e(v,Vm),e(Vm,WQ),e(WQ,z$e),e(Vm,W$e),e(Vm,n9),e(n9,Q$e),e(Vm,H$e),e(v,U$e),e(v,zm),e(zm,QQ),e(QQ,J$e),e(zm,Y$e),e(zm,s9),e(s9,K$e),e(zm,Z$e),e(v,eIe),e(v,Wm),e(Wm,HQ),e(HQ,oIe),e(Wm,rIe),e(Wm,l9),e(l9,tIe),e(Wm,aIe),e(v,nIe),e(v,Qm),e(Qm,UQ),e(UQ,sIe),e(Qm,lIe),e(Qm,i9),e(i9,iIe),e(Qm,dIe),e(v,cIe),e(v,Hm),e(Hm,JQ),e(JQ,mIe),e(Hm,fIe),e(Hm,d9),e(d9,gIe),e(Hm,hIe),e(v,uIe),e(v,Um),e(Um,YQ),e(YQ,pIe),e(Um,_Ie),e(Um,c9),e(c9,bIe),e(Um,vIe),e(v,TIe),e(v,Jm),e(Jm,KQ),e(KQ,FIe),e(Jm,CIe),e(Jm,m9),e(m9,MIe),e(Jm,EIe),e(v,yIe),e(v,Ym),e(Ym,ZQ),e(ZQ,wIe),e(Ym,AIe),e(Ym,f9),e(f9,LIe),e(Ym,BIe),e(v,xIe),e(v,Km),e(Km,eH),e(eH,kIe),e(Km,RIe),e(Km,g9),e(g9,SIe),e(Km,PIe),e(v,$Ie),e(v,Zm),e(Zm,oH),e(oH,IIe),e(Zm,NIe),e(Zm,h9),e(h9,jIe),e(Zm,DIe),e(v,qIe),e(v,ef),e(ef,rH),e(rH,GIe),e(ef,OIe),e(ef,u9),e(u9,XIe),e(ef,VIe),e(v,zIe),e(v,of),e(of,tH),e(tH,WIe),e(of,QIe),e(of,p9),e(p9,HIe),e(of,UIe),e(v,JIe),e(v,rf),e(rf,aH),e(aH,YIe),e(rf,KIe),e(rf,_9),e(_9,ZIe),e(rf,eNe),e(v,oNe),e(v,tf),e(tf,nH),e(nH,rNe),e(tf,tNe),e(tf,b9),e(b9,aNe),e(tf,nNe),e(v,sNe),e(v,af),e(af,sH),e(sH,lNe),e(af,iNe),e(af,v9),e(v9,dNe),e(af,cNe),e(v,mNe),e(v,nf),e(nf,lH),e(lH,fNe),e(nf,gNe),e(nf,T9),e(T9,hNe),e(nf,uNe),e(v,pNe),e(v,sf),e(sf,iH),e(iH,_Ne),e(sf,bNe),e(sf,F9),e(F9,vNe),e(sf,TNe),e(v,FNe),e(v,lf),e(lf,dH),e(dH,CNe),e(lf,MNe),e(lf,C9),e(C9,ENe),e(lf,yNe),e(v,wNe),e(v,df),e(df,cH),e(cH,ANe),e(df,LNe),e(df,M9),e(M9,BNe),e(df,xNe),e(v,kNe),e(v,cf),e(cf,mH),e(mH,RNe),e(cf,SNe),e(cf,E9),e(E9,PNe),e(cf,$Ne),e(v,INe),e(v,mf),e(mf,fH),e(fH,NNe),e(mf,jNe),e(mf,y9),e(y9,DNe),e(mf,qNe),e(v,GNe),e(v,ff),e(ff,gH),e(gH,ONe),e(ff,XNe),e(ff,w9),e(w9,VNe),e(ff,zNe),e(v,WNe),e(v,gf),e(gf,hH),e(hH,QNe),e(gf,HNe),e(gf,A9),e(A9,UNe),e(gf,JNe),e(v,YNe),e(v,hf),e(hf,uH),e(uH,KNe),e(hf,ZNe),e(hf,L9),e(L9,eje),e(hf,oje),e(v,rje),e(v,uf),e(uf,pH),e(pH,tje),e(uf,aje),e(uf,B9),e(B9,nje),e(uf,sje),e(v,lje),e(v,pf),e(pf,_H),e(_H,ije),e(pf,dje),e(pf,x9),e(x9,cje),e(pf,mje),e(v,fje),e(v,_f),e(_f,bH),e(bH,gje),e(_f,hje),e(_f,k9),e(k9,uje),e(_f,pje),e(v,_je),e(v,bf),e(bf,vH),e(vH,bje),e(bf,vje),e(bf,R9),e(R9,Tje),e(bf,Fje),e(v,Cje),e(v,vf),e(vf,TH),e(TH,Mje),e(vf,Eje),e(vf,S9),e(S9,yje),e(vf,wje),e(v,Aje),e(v,Tf),e(Tf,FH),e(FH,Lje),e(Tf,Bje),e(Tf,P9),e(P9,xje),e(Tf,kje),e(v,Rje),e(v,Ff),e(Ff,CH),e(CH,Sje),e(Ff,Pje),e(Ff,$9),e($9,$je),e(Ff,Ije),e(v,Nje),e(v,Cf),e(Cf,MH),e(MH,jje),e(Cf,Dje),e(Cf,I9),e(I9,qje),e(Cf,Gje),e(v,Oje),e(v,Mf),e(Mf,EH),e(EH,Xje),e(Mf,Vje),e(Mf,N9),e(N9,zje),e(Mf,Wje),e(v,Qje),e(v,Ef),e(Ef,yH),e(yH,Hje),e(Ef,Uje),e(Ef,j9),e(j9,Jje),e(Ef,Yje),e(v,Kje),e(v,yf),e(yf,wH),e(wH,Zje),e(yf,eDe),e(yf,D9),e(D9,oDe),e(yf,rDe),e(v,tDe),e(v,wf),e(wf,AH),e(AH,aDe),e(wf,nDe),e(wf,q9),e(q9,sDe),e(wf,lDe),e(v,iDe),e(v,Af),e(Af,LH),e(LH,dDe),e(Af,cDe),e(Af,G9),e(G9,mDe),e(Af,fDe),e(v,gDe),e(v,Lf),e(Lf,BH),e(BH,hDe),e(Lf,uDe),e(Lf,O9),e(O9,pDe),e(Lf,_De),e(v,bDe),e(v,Bf),e(Bf,xH),e(xH,vDe),e(Bf,TDe),e(Bf,X9),e(X9,FDe),e(Bf,CDe),e(v,MDe),e(v,xf),e(xf,kH),e(kH,EDe),e(xf,yDe),e(xf,V9),e(V9,wDe),e(xf,ADe),e(v,LDe),e(v,kf),e(kf,RH),e(RH,BDe),e(kf,xDe),e(kf,z9),e(z9,kDe),e(kf,RDe),e(v,SDe),e(v,Rf),e(Rf,SH),e(SH,PDe),e(Rf,$De),e(Rf,W9),e(W9,IDe),e(Rf,NDe),e(v,jDe),e(v,Sf),e(Sf,PH),e(PH,DDe),e(Sf,qDe),e(Sf,Q9),e(Q9,GDe),e(Sf,ODe),e(v,XDe),e(v,Pf),e(Pf,$H),e($H,VDe),e(Pf,zDe),e(Pf,H9),e(H9,WDe),e(Pf,QDe),e(v,HDe),e(v,$f),e($f,IH),e(IH,UDe),e($f,JDe),e($f,U9),e(U9,YDe),e($f,KDe),e(v,ZDe),e(v,If),e(If,NH),e(NH,eqe),e(If,oqe),e(If,J9),e(J9,rqe),e(If,tqe),e(v,aqe),e(v,Nf),e(Nf,jH),e(jH,nqe),e(Nf,sqe),e(Nf,Y9),e(Y9,lqe),e(Nf,iqe),e(v,dqe),e(v,jf),e(jf,DH),e(DH,cqe),e(jf,mqe),e(jf,K9),e(K9,fqe),e(jf,gqe),e(v,hqe),e(v,Df),e(Df,qH),e(qH,uqe),e(Df,pqe),e(Df,Z9),e(Z9,_qe),e(Df,bqe),e(v,vqe),e(v,qf),e(qf,GH),e(GH,Tqe),e(qf,Fqe),e(qf,eB),e(eB,Cqe),e(qf,Mqe),e(v,Eqe),e(v,Gf),e(Gf,OH),e(OH,yqe),e(Gf,wqe),e(Gf,oB),e(oB,Aqe),e(Gf,Lqe),e(v,Bqe),e(v,Of),e(Of,XH),e(XH,xqe),e(Of,kqe),e(Of,rB),e(rB,Rqe),e(Of,Sqe),e(v,Pqe),e(v,Xf),e(Xf,VH),e(VH,$qe),e(Xf,Iqe),e(Xf,tB),e(tB,Nqe),e(Xf,jqe),e(v,Dqe),e(v,Vf),e(Vf,zH),e(zH,qqe),e(Vf,Gqe),e(Vf,aB),e(aB,Oqe),e(Vf,Xqe),e(v,Vqe),e(v,zf),e(zf,WH),e(WH,zqe),e(zf,Wqe),e(zf,nB),e(nB,Qqe),e(zf,Hqe),e(v,Uqe),e(v,Wf),e(Wf,QH),e(QH,Jqe),e(Wf,Yqe),e(Wf,sB),e(sB,Kqe),e(Wf,Zqe),e(v,eGe),e(v,Qf),e(Qf,HH),e(HH,oGe),e(Qf,rGe),e(Qf,lB),e(lB,tGe),e(Qf,aGe),e(v,nGe),e(v,Hf),e(Hf,UH),e(UH,sGe),e(Hf,lGe),e(Hf,iB),e(iB,iGe),e(Hf,dGe),e(v,cGe),e(v,Uf),e(Uf,JH),e(JH,mGe),e(Uf,fGe),e(Uf,dB),e(dB,gGe),e(Uf,hGe),e(v,uGe),e(v,Jf),e(Jf,YH),e(YH,pGe),e(Jf,_Ge),e(Jf,cB),e(cB,bGe),e(Jf,vGe),e(v,TGe),e(v,Yf),e(Yf,KH),e(KH,FGe),e(Yf,CGe),e(Yf,mB),e(mB,MGe),e(Yf,EGe),e(v,yGe),e(v,Kf),e(Kf,ZH),e(ZH,wGe),e(Kf,AGe),e(Kf,fB),e(fB,LGe),e(Kf,BGe),e(v,xGe),e(v,Zf),e(Zf,eU),e(eU,kGe),e(Zf,RGe),e(Zf,gB),e(gB,SGe),e(Zf,PGe),e(v,$Ge),e(v,eg),e(eg,oU),e(oU,IGe),e(eg,NGe),e(eg,hB),e(hB,jGe),e(eg,DGe),e(v,qGe),e(v,og),e(og,rU),e(rU,GGe),e(og,OGe),e(og,uB),e(uB,XGe),e(og,VGe),e(v,zGe),e(v,rg),e(rg,tU),e(tU,WGe),e(rg,QGe),e(rg,pB),e(pB,HGe),e(rg,UGe),e(v,JGe),e(v,tg),e(tg,aU),e(aU,YGe),e(tg,KGe),e(tg,_B),e(_B,ZGe),e(tg,eOe),e(v,oOe),e(v,ag),e(ag,nU),e(nU,rOe),e(ag,tOe),e(ag,bB),e(bB,aOe),e(ag,nOe),e(v,sOe),e(v,ng),e(ng,sU),e(sU,lOe),e(ng,iOe),e(ng,vB),e(vB,dOe),e(ng,cOe),e(v,mOe),e(v,sg),e(sg,lU),e(lU,fOe),e(sg,gOe),e(sg,TB),e(TB,hOe),e(sg,uOe),e(v,pOe),e(v,lg),e(lg,iU),e(iU,_Oe),e(lg,bOe),e(lg,FB),e(FB,vOe),e(lg,TOe),e(v,FOe),e(v,ig),e(ig,dU),e(dU,COe),e(ig,MOe),e(ig,CB),e(CB,EOe),e(ig,yOe),e(v,wOe),e(v,dg),e(dg,cU),e(cU,AOe),e(dg,LOe),e(dg,MB),e(MB,BOe),e(dg,xOe),e(v,kOe),e(v,cg),e(cg,mU),e(mU,ROe),e(cg,SOe),e(cg,EB),e(EB,POe),e(cg,$Oe),e(v,IOe),e(v,mg),e(mg,fU),e(fU,NOe),e(mg,jOe),e(mg,yB),e(yB,DOe),e(mg,qOe),e(v,GOe),e(v,fg),e(fg,gU),e(gU,OOe),e(fg,XOe),e(fg,wB),e(wB,VOe),e(fg,zOe),e(v,WOe),e(v,gg),e(gg,hU),e(hU,QOe),e(gg,HOe),e(gg,AB),e(AB,UOe),e(gg,JOe),e(v,YOe),e(v,hg),e(hg,uU),e(uU,KOe),e(hg,ZOe),e(hg,LB),e(LB,eXe),e(hg,oXe),e(v,rXe),e(v,ug),e(ug,pU),e(pU,tXe),e(ug,aXe),e(ug,BB),e(BB,nXe),e(ug,sXe),e(v,lXe),e(v,pg),e(pg,_U),e(_U,iXe),e(pg,dXe),e(pg,xB),e(xB,cXe),e(pg,mXe),e(v,fXe),e(v,_g),e(_g,bU),e(bU,gXe),e(_g,hXe),e(_g,kB),e(kB,uXe),e(_g,pXe),e(v,_Xe),e(v,bg),e(bg,vU),e(vU,bXe),e(bg,vXe),e(bg,RB),e(RB,TXe),e(bg,FXe),e(v,CXe),e(v,vg),e(vg,TU),e(TU,MXe),e(vg,EXe),e(vg,SB),e(SB,yXe),e(vg,wXe),e(v,AXe),e(v,Tg),e(Tg,FU),e(FU,LXe),e(Tg,BXe),e(Tg,PB),e(PB,xXe),e(Tg,kXe),e(v,RXe),e(v,Fg),e(Fg,CU),e(CU,SXe),e(Fg,PXe),e(Fg,$B),e($B,$Xe),e(Fg,IXe),e(v,NXe),e(v,Cg),e(Cg,MU),e(MU,jXe),e(Cg,DXe),e(Cg,IB),e(IB,qXe),e(Cg,GXe),e(v,OXe),e(v,Mg),e(Mg,EU),e(EU,XXe),e(Mg,VXe),e(Mg,NB),e(NB,zXe),e(Mg,WXe),e(v,QXe),e(v,Eg),e(Eg,yU),e(yU,HXe),e(Eg,UXe),e(Eg,jB),e(jB,JXe),e(Eg,YXe),e(v,KXe),e(v,yg),e(yg,wU),e(wU,ZXe),e(yg,eVe),e(yg,DB),e(DB,oVe),e(yg,rVe),e(v,tVe),e(v,wg),e(wg,AU),e(AU,aVe),e(wg,nVe),e(wg,qB),e(qB,sVe),e(wg,lVe),e(v,iVe),e(v,Ag),e(Ag,LU),e(LU,dVe),e(Ag,cVe),e(Ag,GB),e(GB,mVe),e(Ag,fVe),e(v,gVe),e(v,Lg),e(Lg,BU),e(BU,hVe),e(Lg,uVe),e(Lg,OB),e(OB,pVe),e(Lg,_Ve),e(v,bVe),e(v,Bg),e(Bg,xU),e(xU,vVe),e(Bg,TVe),e(Bg,XB),e(XB,FVe),e(Bg,CVe),e(v,MVe),e(v,xg),e(xg,kU),e(kU,EVe),e(xg,yVe),e(xg,VB),e(VB,wVe),e(xg,AVe),e(v,LVe),e(v,kg),e(kg,RU),e(RU,BVe),e(kg,xVe),e(kg,zB),e(zB,kVe),e(kg,RVe),e(fo,SVe),e(fo,SU),e(SU,PVe),e(fo,$Ve),g(hy,fo,null),e(Wo,IVe),e(Wo,Rg),g(uy,Rg,null),e(Rg,NVe),e(Rg,PU),e(PU,jVe),b(c,Zxe,_),b(c,Wi,_),e(Wi,Sg),e(Sg,$U),g(py,$U,null),e(Wi,DVe),e(Wi,IU),e(IU,qVe),b(c,eke,_),b(c,Qo,_),g(_y,Qo,null),e(Qo,GVe),e(Qo,by),e(by,OVe),e(by,WB),e(WB,XVe),e(by,VVe),e(Qo,zVe),e(Qo,vy),e(vy,WVe),e(vy,NU),e(NU,QVe),e(vy,HVe),e(Qo,UVe),e(Qo,go),g(Ty,go,null),e(go,JVe),e(go,jU),e(jU,YVe),e(go,KVe),e(go,Oa),e(Oa,ZVe),e(Oa,DU),e(DU,eze),e(Oa,oze),e(Oa,qU),e(qU,rze),e(Oa,tze),e(Oa,GU),e(GU,aze),e(Oa,nze),e(go,sze),e(go,E),e(E,Wn),e(Wn,OU),e(OU,lze),e(Wn,ize),e(Wn,QB),e(QB,dze),e(Wn,cze),e(Wn,HB),e(HB,mze),e(Wn,fze),e(E,gze),e(E,Qn),e(Qn,XU),e(XU,hze),e(Qn,uze),e(Qn,UB),e(UB,pze),e(Qn,_ze),e(Qn,JB),e(JB,bze),e(Qn,vze),e(E,Tze),e(E,Hn),e(Hn,VU),e(VU,Fze),e(Hn,Cze),e(Hn,YB),e(YB,Mze),e(Hn,Eze),e(Hn,KB),e(KB,yze),e(Hn,wze),e(E,Aze),e(E,Pg),e(Pg,zU),e(zU,Lze),e(Pg,Bze),e(Pg,ZB),e(ZB,xze),e(Pg,kze),e(E,Rze),e(E,Un),e(Un,WU),e(WU,Sze),e(Un,Pze),e(Un,ex),e(ex,$ze),e(Un,Ize),e(Un,ox),e(ox,Nze),e(Un,jze),e(E,Dze),e(E,$g),e($g,QU),e(QU,qze),e($g,Gze),e($g,rx),e(rx,Oze),e($g,Xze),e(E,Vze),e(E,Ig),e(Ig,HU),e(HU,zze),e(Ig,Wze),e(Ig,tx),e(tx,Qze),e(Ig,Hze),e(E,Uze),e(E,Ng),e(Ng,UU),e(UU,Jze),e(Ng,Yze),e(Ng,ax),e(ax,Kze),e(Ng,Zze),e(E,eWe),e(E,Jn),e(Jn,JU),e(JU,oWe),e(Jn,rWe),e(Jn,nx),e(nx,tWe),e(Jn,aWe),e(Jn,sx),e(sx,nWe),e(Jn,sWe),e(E,lWe),e(E,Yn),e(Yn,YU),e(YU,iWe),e(Yn,dWe),e(Yn,lx),e(lx,cWe),e(Yn,mWe),e(Yn,ix),e(ix,fWe),e(Yn,gWe),e(E,hWe),e(E,Kn),e(Kn,KU),e(KU,uWe),e(Kn,pWe),e(Kn,dx),e(dx,_We),e(Kn,bWe),e(Kn,cx),e(cx,vWe),e(Kn,TWe),e(E,FWe),e(E,jg),e(jg,ZU),e(ZU,CWe),e(jg,MWe),e(jg,mx),e(mx,EWe),e(jg,yWe),e(E,wWe),e(E,Dg),e(Dg,eJ),e(eJ,AWe),e(Dg,LWe),e(Dg,fx),e(fx,BWe),e(Dg,xWe),e(E,kWe),e(E,Zn),e(Zn,oJ),e(oJ,RWe),e(Zn,SWe),e(Zn,gx),e(gx,PWe),e(Zn,$We),e(Zn,hx),e(hx,IWe),e(Zn,NWe),e(E,jWe),e(E,qg),e(qg,rJ),e(rJ,DWe),e(qg,qWe),e(qg,ux),e(ux,GWe),e(qg,OWe),e(E,XWe),e(E,es),e(es,tJ),e(tJ,VWe),e(es,zWe),e(es,px),e(px,WWe),e(es,QWe),e(es,_x),e(_x,HWe),e(es,UWe),e(E,JWe),e(E,os),e(os,aJ),e(aJ,YWe),e(os,KWe),e(os,bx),e(bx,ZWe),e(os,eQe),e(os,vx),e(vx,oQe),e(os,rQe),e(E,tQe),e(E,rs),e(rs,nJ),e(nJ,aQe),e(rs,nQe),e(rs,Tx),e(Tx,sQe),e(rs,lQe),e(rs,sJ),e(sJ,iQe),e(rs,dQe),e(E,cQe),e(E,Gg),e(Gg,lJ),e(lJ,mQe),e(Gg,fQe),e(Gg,Fx),e(Fx,gQe),e(Gg,hQe),e(E,uQe),e(E,ts),e(ts,iJ),e(iJ,pQe),e(ts,_Qe),e(ts,Cx),e(Cx,bQe),e(ts,vQe),e(ts,Mx),e(Mx,TQe),e(ts,FQe),e(E,CQe),e(E,Og),e(Og,dJ),e(dJ,MQe),e(Og,EQe),e(Og,Ex),e(Ex,yQe),e(Og,wQe),e(E,AQe),e(E,as),e(as,cJ),e(cJ,LQe),e(as,BQe),e(as,yx),e(yx,xQe),e(as,kQe),e(as,wx),e(wx,RQe),e(as,SQe),e(E,PQe),e(E,ns),e(ns,mJ),e(mJ,$Qe),e(ns,IQe),e(ns,Ax),e(Ax,NQe),e(ns,jQe),e(ns,Lx),e(Lx,DQe),e(ns,qQe),e(E,GQe),e(E,ss),e(ss,fJ),e(fJ,OQe),e(ss,XQe),e(ss,Bx),e(Bx,VQe),e(ss,zQe),e(ss,xx),e(xx,WQe),e(ss,QQe),e(E,HQe),e(E,Xg),e(Xg,gJ),e(gJ,UQe),e(Xg,JQe),e(Xg,kx),e(kx,YQe),e(Xg,KQe),e(E,ZQe),e(E,ls),e(ls,hJ),e(hJ,eHe),e(ls,oHe),e(ls,Rx),e(Rx,rHe),e(ls,tHe),e(ls,Sx),e(Sx,aHe),e(ls,nHe),e(E,sHe),e(E,Vg),e(Vg,uJ),e(uJ,lHe),e(Vg,iHe),e(Vg,Px),e(Px,dHe),e(Vg,cHe),e(E,mHe),e(E,is),e(is,pJ),e(pJ,fHe),e(is,gHe),e(is,$x),e($x,hHe),e(is,uHe),e(is,Ix),e(Ix,pHe),e(is,_He),e(E,bHe),e(E,ds),e(ds,_J),e(_J,vHe),e(ds,THe),e(ds,Nx),e(Nx,FHe),e(ds,CHe),e(ds,jx),e(jx,MHe),e(ds,EHe),e(E,yHe),e(E,cs),e(cs,bJ),e(bJ,wHe),e(cs,AHe),e(cs,Dx),e(Dx,LHe),e(cs,BHe),e(cs,qx),e(qx,xHe),e(cs,kHe),e(E,RHe),e(E,ms),e(ms,vJ),e(vJ,SHe),e(ms,PHe),e(ms,Gx),e(Gx,$He),e(ms,IHe),e(ms,Ox),e(Ox,NHe),e(ms,jHe),e(E,DHe),e(E,zg),e(zg,TJ),e(TJ,qHe),e(zg,GHe),e(zg,Xx),e(Xx,OHe),e(zg,XHe),e(E,VHe),e(E,fs),e(fs,FJ),e(FJ,zHe),e(fs,WHe),e(fs,Vx),e(Vx,QHe),e(fs,HHe),e(fs,zx),e(zx,UHe),e(fs,JHe),e(E,YHe),e(E,gs),e(gs,CJ),e(CJ,KHe),e(gs,ZHe),e(gs,Wx),e(Wx,eUe),e(gs,oUe),e(gs,Qx),e(Qx,rUe),e(gs,tUe),e(E,aUe),e(E,hs),e(hs,MJ),e(MJ,nUe),e(hs,sUe),e(hs,Hx),e(Hx,lUe),e(hs,iUe),e(hs,Ux),e(Ux,dUe),e(hs,cUe),e(E,mUe),e(E,us),e(us,EJ),e(EJ,fUe),e(us,gUe),e(us,Jx),e(Jx,hUe),e(us,uUe),e(us,Yx),e(Yx,pUe),e(us,_Ue),e(E,bUe),e(E,ps),e(ps,yJ),e(yJ,vUe),e(ps,TUe),e(ps,Kx),e(Kx,FUe),e(ps,CUe),e(ps,Zx),e(Zx,MUe),e(ps,EUe),e(E,yUe),e(E,_s),e(_s,wJ),e(wJ,wUe),e(_s,AUe),e(_s,ek),e(ek,LUe),e(_s,BUe),e(_s,ok),e(ok,xUe),e(_s,kUe),e(E,RUe),e(E,Wg),e(Wg,AJ),e(AJ,SUe),e(Wg,PUe),e(Wg,rk),e(rk,$Ue),e(Wg,IUe),e(E,NUe),e(E,bs),e(bs,LJ),e(LJ,jUe),e(bs,DUe),e(bs,tk),e(tk,qUe),e(bs,GUe),e(bs,ak),e(ak,OUe),e(bs,XUe),e(E,VUe),e(E,Qg),e(Qg,BJ),e(BJ,zUe),e(Qg,WUe),e(Qg,nk),e(nk,QUe),e(Qg,HUe),e(E,UUe),e(E,Hg),e(Hg,xJ),e(xJ,JUe),e(Hg,YUe),e(Hg,sk),e(sk,KUe),e(Hg,ZUe),e(E,eJe),e(E,vs),e(vs,kJ),e(kJ,oJe),e(vs,rJe),e(vs,lk),e(lk,tJe),e(vs,aJe),e(vs,ik),e(ik,nJe),e(vs,sJe),e(E,lJe),e(E,Ts),e(Ts,RJ),e(RJ,iJe),e(Ts,dJe),e(Ts,dk),e(dk,cJe),e(Ts,mJe),e(Ts,ck),e(ck,fJe),e(Ts,gJe),e(E,hJe),e(E,Ug),e(Ug,SJ),e(SJ,uJe),e(Ug,pJe),e(Ug,mk),e(mk,_Je),e(Ug,bJe),e(E,vJe),e(E,Fs),e(Fs,PJ),e(PJ,TJe),e(Fs,FJe),e(Fs,fk),e(fk,CJe),e(Fs,MJe),e(Fs,gk),e(gk,EJe),e(Fs,yJe),e(E,wJe),e(E,Cs),e(Cs,$J),e($J,AJe),e(Cs,LJe),e(Cs,hk),e(hk,BJe),e(Cs,xJe),e(Cs,uk),e(uk,kJe),e(Cs,RJe),e(E,SJe),e(E,Ms),e(Ms,IJ),e(IJ,PJe),e(Ms,$Je),e(Ms,pk),e(pk,IJe),e(Ms,NJe),e(Ms,_k),e(_k,jJe),e(Ms,DJe),e(E,qJe),e(E,Es),e(Es,NJ),e(NJ,GJe),e(Es,OJe),e(Es,bk),e(bk,XJe),e(Es,VJe),e(Es,vk),e(vk,zJe),e(Es,WJe),e(E,QJe),e(E,ys),e(ys,jJ),e(jJ,HJe),e(ys,UJe),e(ys,Tk),e(Tk,JJe),e(ys,YJe),e(ys,Fk),e(Fk,KJe),e(ys,ZJe),e(E,eYe),e(E,Jg),e(Jg,DJ),e(DJ,oYe),e(Jg,rYe),e(Jg,Ck),e(Ck,tYe),e(Jg,aYe),e(E,nYe),e(E,Yg),e(Yg,qJ),e(qJ,sYe),e(Yg,lYe),e(Yg,Mk),e(Mk,iYe),e(Yg,dYe),e(E,cYe),e(E,Kg),e(Kg,GJ),e(GJ,mYe),e(Kg,fYe),e(Kg,Ek),e(Ek,gYe),e(Kg,hYe),e(E,uYe),e(E,Zg),e(Zg,OJ),e(OJ,pYe),e(Zg,_Ye),e(Zg,yk),e(yk,bYe),e(Zg,vYe),e(E,TYe),e(E,ws),e(ws,XJ),e(XJ,FYe),e(ws,CYe),e(ws,wk),e(wk,MYe),e(ws,EYe),e(ws,Ak),e(Ak,yYe),e(ws,wYe),e(E,AYe),e(E,eh),e(eh,VJ),e(VJ,LYe),e(eh,BYe),e(eh,Lk),e(Lk,xYe),e(eh,kYe),e(E,RYe),e(E,As),e(As,zJ),e(zJ,SYe),e(As,PYe),e(As,Bk),e(Bk,$Ye),e(As,IYe),e(As,xk),e(xk,NYe),e(As,jYe),e(E,DYe),e(E,Ls),e(Ls,WJ),e(WJ,qYe),e(Ls,GYe),e(Ls,kk),e(kk,OYe),e(Ls,XYe),e(Ls,Rk),e(Rk,VYe),e(Ls,zYe),e(E,WYe),e(E,Bs),e(Bs,QJ),e(QJ,QYe),e(Bs,HYe),e(Bs,Sk),e(Sk,UYe),e(Bs,JYe),e(Bs,Pk),e(Pk,YYe),e(Bs,KYe),e(E,ZYe),e(E,xs),e(xs,HJ),e(HJ,eKe),e(xs,oKe),e(xs,$k),e($k,rKe),e(xs,tKe),e(xs,Ik),e(Ik,aKe),e(xs,nKe),e(E,sKe),e(E,ks),e(ks,UJ),e(UJ,lKe),e(ks,iKe),e(ks,Nk),e(Nk,dKe),e(ks,cKe),e(ks,jk),e(jk,mKe),e(ks,fKe),e(E,gKe),e(E,Rs),e(Rs,JJ),e(JJ,hKe),e(Rs,uKe),e(Rs,Dk),e(Dk,pKe),e(Rs,_Ke),e(Rs,qk),e(qk,bKe),e(Rs,vKe),e(E,TKe),e(E,oh),e(oh,YJ),e(YJ,FKe),e(oh,CKe),e(oh,Gk),e(Gk,MKe),e(oh,EKe),e(E,yKe),e(E,rh),e(rh,KJ),e(KJ,wKe),e(rh,AKe),e(rh,Ok),e(Ok,LKe),e(rh,BKe),e(E,xKe),e(E,Ss),e(Ss,ZJ),e(ZJ,kKe),e(Ss,RKe),e(Ss,Xk),e(Xk,SKe),e(Ss,PKe),e(Ss,Vk),e(Vk,$Ke),e(Ss,IKe),e(E,NKe),e(E,Ps),e(Ps,eY),e(eY,jKe),e(Ps,DKe),e(Ps,zk),e(zk,qKe),e(Ps,GKe),e(Ps,Wk),e(Wk,OKe),e(Ps,XKe),e(E,VKe),e(E,$s),e($s,oY),e(oY,zKe),e($s,WKe),e($s,Qk),e(Qk,QKe),e($s,HKe),e($s,Hk),e(Hk,UKe),e($s,JKe),e(E,YKe),e(E,th),e(th,rY),e(rY,KKe),e(th,ZKe),e(th,Uk),e(Uk,eZe),e(th,oZe),e(E,rZe),e(E,ah),e(ah,tY),e(tY,tZe),e(ah,aZe),e(ah,Jk),e(Jk,nZe),e(ah,sZe),e(E,lZe),e(E,nh),e(nh,aY),e(aY,iZe),e(nh,dZe),e(nh,Yk),e(Yk,cZe),e(nh,mZe),e(E,fZe),e(E,sh),e(sh,nY),e(nY,gZe),e(sh,hZe),e(sh,Kk),e(Kk,uZe),e(sh,pZe),e(E,_Ze),e(E,Is),e(Is,sY),e(sY,bZe),e(Is,vZe),e(Is,Zk),e(Zk,TZe),e(Is,FZe),e(Is,eR),e(eR,CZe),e(Is,MZe),e(E,EZe),e(E,lh),e(lh,lY),e(lY,yZe),e(lh,wZe),e(lh,oR),e(oR,AZe),e(lh,LZe),e(E,BZe),e(E,ih),e(ih,iY),e(iY,xZe),e(ih,kZe),e(ih,rR),e(rR,RZe),e(ih,SZe),e(E,PZe),e(E,Ns),e(Ns,dY),e(dY,$Ze),e(Ns,IZe),e(Ns,tR),e(tR,NZe),e(Ns,jZe),e(Ns,aR),e(aR,DZe),e(Ns,qZe),e(E,GZe),e(E,js),e(js,cY),e(cY,OZe),e(js,XZe),e(js,nR),e(nR,VZe),e(js,zZe),e(js,sR),e(sR,WZe),e(js,QZe),e(go,HZe),e(go,mY),e(mY,UZe),e(go,JZe),g(Fy,go,null),e(Qo,YZe),e(Qo,dh),g(Cy,dh,null),e(dh,KZe),e(dh,fY),e(fY,ZZe),b(c,oke,_),b(c,Qi,_),e(Qi,ch),e(ch,gY),g(My,gY,null),e(Qi,eeo),e(Qi,hY),e(hY,oeo),b(c,rke,_),b(c,Ho,_),g(Ey,Ho,null),e(Ho,reo),e(Ho,yy),e(yy,teo),e(yy,lR),e(lR,aeo),e(yy,neo),e(Ho,seo),e(Ho,wy),e(wy,leo),e(wy,uY),e(uY,ieo),e(wy,deo),e(Ho,ceo),e(Ho,$e),g(Ay,$e,null),e($e,meo),e($e,pY),e(pY,feo),e($e,geo),e($e,Xa),e(Xa,heo),e(Xa,_Y),e(_Y,ueo),e(Xa,peo),e(Xa,bY),e(bY,_eo),e(Xa,beo),e(Xa,vY),e(vY,veo),e(Xa,Teo),e($e,Feo),e($e,re),e(re,mh),e(mh,TY),e(TY,Ceo),e(mh,Meo),e(mh,iR),e(iR,Eeo),e(mh,yeo),e(re,weo),e(re,fh),e(fh,FY),e(FY,Aeo),e(fh,Leo),e(fh,dR),e(dR,Beo),e(fh,xeo),e(re,keo),e(re,gh),e(gh,CY),e(CY,Reo),e(gh,Seo),e(gh,cR),e(cR,Peo),e(gh,$eo),e(re,Ieo),e(re,hh),e(hh,MY),e(MY,Neo),e(hh,jeo),e(hh,mR),e(mR,Deo),e(hh,qeo),e(re,Geo),e(re,uh),e(uh,EY),e(EY,Oeo),e(uh,Xeo),e(uh,fR),e(fR,Veo),e(uh,zeo),e(re,Weo),e(re,ph),e(ph,yY),e(yY,Qeo),e(ph,Heo),e(ph,gR),e(gR,Ueo),e(ph,Jeo),e(re,Yeo),e(re,_h),e(_h,wY),e(wY,Keo),e(_h,Zeo),e(_h,hR),e(hR,eoo),e(_h,ooo),e(re,roo),e(re,bh),e(bh,AY),e(AY,too),e(bh,aoo),e(bh,uR),e(uR,noo),e(bh,soo),e(re,loo),e(re,vh),e(vh,LY),e(LY,ioo),e(vh,doo),e(vh,pR),e(pR,coo),e(vh,moo),e(re,foo),e(re,Th),e(Th,BY),e(BY,goo),e(Th,hoo),e(Th,_R),e(_R,uoo),e(Th,poo),e(re,_oo),e(re,Fh),e(Fh,xY),e(xY,boo),e(Fh,voo),e(Fh,bR),e(bR,Too),e(Fh,Foo),e(re,Coo),e(re,Ch),e(Ch,kY),e(kY,Moo),e(Ch,Eoo),e(Ch,vR),e(vR,yoo),e(Ch,woo),e(re,Aoo),e(re,Mh),e(Mh,RY),e(RY,Loo),e(Mh,Boo),e(Mh,TR),e(TR,xoo),e(Mh,koo),e(re,Roo),e(re,Eh),e(Eh,SY),e(SY,Soo),e(Eh,Poo),e(Eh,FR),e(FR,$oo),e(Eh,Ioo),e(re,Noo),e(re,yh),e(yh,PY),e(PY,joo),e(yh,Doo),e(yh,CR),e(CR,qoo),e(yh,Goo),e(re,Ooo),e(re,wh),e(wh,$Y),e($Y,Xoo),e(wh,Voo),e(wh,MR),e(MR,zoo),e(wh,Woo),e(re,Qoo),e(re,Ah),e(Ah,IY),e(IY,Hoo),e(Ah,Uoo),e(Ah,ER),e(ER,Joo),e(Ah,Yoo),e(re,Koo),e(re,Lh),e(Lh,NY),e(NY,Zoo),e(Lh,ero),e(Lh,yR),e(yR,oro),e(Lh,rro),e($e,tro),g(Bh,$e,null),e($e,aro),e($e,jY),e(jY,nro),e($e,sro),g(Ly,$e,null),e(Ho,lro),e(Ho,xh),g(By,xh,null),e(xh,iro),e(xh,DY),e(DY,dro),b(c,tke,_),b(c,Hi,_),e(Hi,kh),e(kh,qY),g(xy,qY,null),e(Hi,cro),e(Hi,GY),e(GY,mro),b(c,ake,_),b(c,Uo,_),g(ky,Uo,null),e(Uo,fro),e(Uo,Ry),e(Ry,gro),e(Ry,wR),e(wR,hro),e(Ry,uro),e(Uo,pro),e(Uo,Sy),e(Sy,_ro),e(Sy,OY),e(OY,bro),e(Sy,vro),e(Uo,Tro),e(Uo,Ie),g(Py,Ie,null),e(Ie,Fro),e(Ie,XY),e(XY,Cro),e(Ie,Mro),e(Ie,Ui),e(Ui,Ero),e(Ui,VY),e(VY,yro),e(Ui,wro),e(Ui,zY),e(zY,Aro),e(Ui,Lro),e(Ie,Bro),e(Ie,xe),e(xe,Rh),e(Rh,WY),e(WY,xro),e(Rh,kro),e(Rh,AR),e(AR,Rro),e(Rh,Sro),e(xe,Pro),e(xe,Sh),e(Sh,QY),e(QY,$ro),e(Sh,Iro),e(Sh,LR),e(LR,Nro),e(Sh,jro),e(xe,Dro),e(xe,Ph),e(Ph,HY),e(HY,qro),e(Ph,Gro),e(Ph,BR),e(BR,Oro),e(Ph,Xro),e(xe,Vro),e(xe,$h),e($h,UY),e(UY,zro),e($h,Wro),e($h,xR),e(xR,Qro),e($h,Hro),e(xe,Uro),e(xe,Ih),e(Ih,JY),e(JY,Jro),e(Ih,Yro),e(Ih,kR),e(kR,Kro),e(Ih,Zro),e(xe,eto),e(xe,Nh),e(Nh,YY),e(YY,oto),e(Nh,rto),e(Nh,RR),e(RR,tto),e(Nh,ato),e(xe,nto),e(xe,jh),e(jh,KY),e(KY,sto),e(jh,lto),e(jh,SR),e(SR,ito),e(jh,dto),e(xe,cto),e(xe,Dh),e(Dh,ZY),e(ZY,mto),e(Dh,fto),e(Dh,PR),e(PR,gto),e(Dh,hto),e(Ie,uto),g(qh,Ie,null),e(Ie,pto),e(Ie,eK),e(eK,_to),e(Ie,bto),g($y,Ie,null),e(Uo,vto),e(Uo,Gh),g(Iy,Gh,null),e(Gh,Tto),e(Gh,oK),e(oK,Fto),b(c,nke,_),b(c,Ji,_),e(Ji,Oh),e(Oh,rK),g(Ny,rK,null),e(Ji,Cto),e(Ji,tK),e(tK,Mto),b(c,ske,_),b(c,Jo,_),g(jy,Jo,null),e(Jo,Eto),e(Jo,Yi),e(Yi,yto),e(Yi,aK),e(aK,wto),e(Yi,Ato),e(Yi,nK),e(nK,Lto),e(Yi,Bto),e(Jo,xto),e(Jo,Dy),e(Dy,kto),e(Dy,sK),e(sK,Rto),e(Dy,Sto),e(Jo,Pto),e(Jo,Vr),g(qy,Vr,null),e(Vr,$to),e(Vr,lK),e(lK,Ito),e(Vr,Nto),e(Vr,Ki),e(Ki,jto),e(Ki,iK),e(iK,Dto),e(Ki,qto),e(Ki,dK),e(dK,Gto),e(Ki,Oto),e(Vr,Xto),e(Vr,cK),e(cK,Vto),e(Vr,zto),g(Gy,Vr,null),e(Jo,Wto),e(Jo,Ne),g(Oy,Ne,null),e(Ne,Qto),e(Ne,mK),e(mK,Hto),e(Ne,Uto),e(Ne,Va),e(Va,Jto),e(Va,fK),e(fK,Yto),e(Va,Kto),e(Va,gK),e(gK,Zto),e(Va,eao),e(Va,hK),e(hK,oao),e(Va,rao),e(Ne,tao),e(Ne,F),e(F,Xh),e(Xh,uK),e(uK,aao),e(Xh,nao),e(Xh,$R),e($R,sao),e(Xh,lao),e(F,iao),e(F,Vh),e(Vh,pK),e(pK,dao),e(Vh,cao),e(Vh,IR),e(IR,mao),e(Vh,fao),e(F,gao),e(F,zh),e(zh,_K),e(_K,hao),e(zh,uao),e(zh,NR),e(NR,pao),e(zh,_ao),e(F,bao),e(F,Wh),e(Wh,bK),e(bK,vao),e(Wh,Tao),e(Wh,jR),e(jR,Fao),e(Wh,Cao),e(F,Mao),e(F,Qh),e(Qh,vK),e(vK,Eao),e(Qh,yao),e(Qh,DR),e(DR,wao),e(Qh,Aao),e(F,Lao),e(F,Hh),e(Hh,TK),e(TK,Bao),e(Hh,xao),e(Hh,qR),e(qR,kao),e(Hh,Rao),e(F,Sao),e(F,Uh),e(Uh,FK),e(FK,Pao),e(Uh,$ao),e(Uh,GR),e(GR,Iao),e(Uh,Nao),e(F,jao),e(F,Jh),e(Jh,CK),e(CK,Dao),e(Jh,qao),e(Jh,OR),e(OR,Gao),e(Jh,Oao),e(F,Xao),e(F,Yh),e(Yh,MK),e(MK,Vao),e(Yh,zao),e(Yh,XR),e(XR,Wao),e(Yh,Qao),e(F,Hao),e(F,Kh),e(Kh,EK),e(EK,Uao),e(Kh,Jao),e(Kh,VR),e(VR,Yao),e(Kh,Kao),e(F,Zao),e(F,Zh),e(Zh,yK),e(yK,eno),e(Zh,ono),e(Zh,zR),e(zR,rno),e(Zh,tno),e(F,ano),e(F,eu),e(eu,wK),e(wK,nno),e(eu,sno),e(eu,WR),e(WR,lno),e(eu,ino),e(F,dno),e(F,ou),e(ou,AK),e(AK,cno),e(ou,mno),e(ou,QR),e(QR,fno),e(ou,gno),e(F,hno),e(F,ru),e(ru,LK),e(LK,uno),e(ru,pno),e(ru,HR),e(HR,_no),e(ru,bno),e(F,vno),e(F,tu),e(tu,BK),e(BK,Tno),e(tu,Fno),e(tu,UR),e(UR,Cno),e(tu,Mno),e(F,Eno),e(F,au),e(au,xK),e(xK,yno),e(au,wno),e(au,JR),e(JR,Ano),e(au,Lno),e(F,Bno),e(F,nu),e(nu,kK),e(kK,xno),e(nu,kno),e(nu,YR),e(YR,Rno),e(nu,Sno),e(F,Pno),e(F,su),e(su,RK),e(RK,$no),e(su,Ino),e(su,KR),e(KR,Nno),e(su,jno),e(F,Dno),e(F,lu),e(lu,SK),e(SK,qno),e(lu,Gno),e(lu,ZR),e(ZR,Ono),e(lu,Xno),e(F,Vno),e(F,iu),e(iu,PK),e(PK,zno),e(iu,Wno),e(iu,eS),e(eS,Qno),e(iu,Hno),e(F,Uno),e(F,du),e(du,$K),e($K,Jno),e(du,Yno),e(du,oS),e(oS,Kno),e(du,Zno),e(F,eso),e(F,cu),e(cu,IK),e(IK,oso),e(cu,rso),e(cu,rS),e(rS,tso),e(cu,aso),e(F,nso),e(F,mu),e(mu,NK),e(NK,sso),e(mu,lso),e(mu,tS),e(tS,iso),e(mu,dso),e(F,cso),e(F,fu),e(fu,jK),e(jK,mso),e(fu,fso),e(fu,aS),e(aS,gso),e(fu,hso),e(F,uso),e(F,gu),e(gu,DK),e(DK,pso),e(gu,_so),e(gu,nS),e(nS,bso),e(gu,vso),e(F,Tso),e(F,hu),e(hu,qK),e(qK,Fso),e(hu,Cso),e(hu,sS),e(sS,Mso),e(hu,Eso),e(F,yso),e(F,uu),e(uu,GK),e(GK,wso),e(uu,Aso),e(uu,lS),e(lS,Lso),e(uu,Bso),e(F,xso),e(F,Ds),e(Ds,OK),e(OK,kso),e(Ds,Rso),e(Ds,iS),e(iS,Sso),e(Ds,Pso),e(Ds,dS),e(dS,$so),e(Ds,Iso),e(F,Nso),e(F,pu),e(pu,XK),e(XK,jso),e(pu,Dso),e(pu,cS),e(cS,qso),e(pu,Gso),e(F,Oso),e(F,_u),e(_u,VK),e(VK,Xso),e(_u,Vso),e(_u,mS),e(mS,zso),e(_u,Wso),e(F,Qso),e(F,bu),e(bu,zK),e(zK,Hso),e(bu,Uso),e(bu,fS),e(fS,Jso),e(bu,Yso),e(F,Kso),e(F,vu),e(vu,WK),e(WK,Zso),e(vu,elo),e(vu,gS),e(gS,olo),e(vu,rlo),e(F,tlo),e(F,Tu),e(Tu,QK),e(QK,alo),e(Tu,nlo),e(Tu,hS),e(hS,slo),e(Tu,llo),e(F,ilo),e(F,Fu),e(Fu,HK),e(HK,dlo),e(Fu,clo),e(Fu,uS),e(uS,mlo),e(Fu,flo),e(F,glo),e(F,Cu),e(Cu,UK),e(UK,hlo),e(Cu,ulo),e(Cu,pS),e(pS,plo),e(Cu,_lo),e(F,blo),e(F,Mu),e(Mu,JK),e(JK,vlo),e(Mu,Tlo),e(Mu,_S),e(_S,Flo),e(Mu,Clo),e(F,Mlo),e(F,Eu),e(Eu,YK),e(YK,Elo),e(Eu,ylo),e(Eu,bS),e(bS,wlo),e(Eu,Alo),e(F,Llo),e(F,yu),e(yu,KK),e(KK,Blo),e(yu,xlo),e(yu,vS),e(vS,klo),e(yu,Rlo),e(F,Slo),e(F,wu),e(wu,ZK),e(ZK,Plo),e(wu,$lo),e(wu,TS),e(TS,Ilo),e(wu,Nlo),e(F,jlo),e(F,Au),e(Au,eZ),e(eZ,Dlo),e(Au,qlo),e(Au,FS),e(FS,Glo),e(Au,Olo),e(F,Xlo),e(F,Lu),e(Lu,oZ),e(oZ,Vlo),e(Lu,zlo),e(Lu,CS),e(CS,Wlo),e(Lu,Qlo),e(F,Hlo),e(F,Bu),e(Bu,rZ),e(rZ,Ulo),e(Bu,Jlo),e(Bu,MS),e(MS,Ylo),e(Bu,Klo),e(F,Zlo),e(F,xu),e(xu,tZ),e(tZ,eio),e(xu,oio),e(xu,ES),e(ES,rio),e(xu,tio),e(F,aio),e(F,ku),e(ku,aZ),e(aZ,nio),e(ku,sio),e(ku,yS),e(yS,lio),e(ku,iio),e(F,dio),e(F,Ru),e(Ru,nZ),e(nZ,cio),e(Ru,mio),e(Ru,wS),e(wS,fio),e(Ru,gio),e(F,hio),e(F,Su),e(Su,sZ),e(sZ,uio),e(Su,pio),e(Su,AS),e(AS,_io),e(Su,bio),e(F,vio),e(F,Pu),e(Pu,lZ),e(lZ,Tio),e(Pu,Fio),e(Pu,LS),e(LS,Cio),e(Pu,Mio),e(F,Eio),e(F,$u),e($u,iZ),e(iZ,yio),e($u,wio),e($u,BS),e(BS,Aio),e($u,Lio),e(F,Bio),e(F,Iu),e(Iu,dZ),e(dZ,xio),e(Iu,kio),e(Iu,xS),e(xS,Rio),e(Iu,Sio),e(F,Pio),e(F,Nu),e(Nu,cZ),e(cZ,$io),e(Nu,Iio),e(Nu,kS),e(kS,Nio),e(Nu,jio),e(F,Dio),e(F,ju),e(ju,mZ),e(mZ,qio),e(ju,Gio),e(ju,RS),e(RS,Oio),e(ju,Xio),e(F,Vio),e(F,Du),e(Du,fZ),e(fZ,zio),e(Du,Wio),e(Du,SS),e(SS,Qio),e(Du,Hio),e(F,Uio),e(F,qu),e(qu,gZ),e(gZ,Jio),e(qu,Yio),e(qu,PS),e(PS,Kio),e(qu,Zio),e(F,edo),e(F,Gu),e(Gu,hZ),e(hZ,odo),e(Gu,rdo),e(Gu,$S),e($S,tdo),e(Gu,ado),e(F,ndo),e(F,Ou),e(Ou,uZ),e(uZ,sdo),e(Ou,ldo),e(Ou,IS),e(IS,ido),e(Ou,ddo),e(F,cdo),e(F,Xu),e(Xu,pZ),e(pZ,mdo),e(Xu,fdo),e(Xu,NS),e(NS,gdo),e(Xu,hdo),e(F,udo),e(F,Vu),e(Vu,_Z),e(_Z,pdo),e(Vu,_do),e(Vu,jS),e(jS,bdo),e(Vu,vdo),e(F,Tdo),e(F,zu),e(zu,bZ),e(bZ,Fdo),e(zu,Cdo),e(zu,DS),e(DS,Mdo),e(zu,Edo),e(F,ydo),e(F,Wu),e(Wu,vZ),e(vZ,wdo),e(Wu,Ado),e(Wu,qS),e(qS,Ldo),e(Wu,Bdo),e(F,xdo),e(F,Qu),e(Qu,TZ),e(TZ,kdo),e(Qu,Rdo),e(Qu,GS),e(GS,Sdo),e(Qu,Pdo),e(F,$do),e(F,Hu),e(Hu,FZ),e(FZ,Ido),e(Hu,Ndo),e(Hu,OS),e(OS,jdo),e(Hu,Ddo),e(F,qdo),e(F,Uu),e(Uu,CZ),e(CZ,Gdo),e(Uu,Odo),e(Uu,XS),e(XS,Xdo),e(Uu,Vdo),e(F,zdo),e(F,Ju),e(Ju,MZ),e(MZ,Wdo),e(Ju,Qdo),e(Ju,VS),e(VS,Hdo),e(Ju,Udo),e(F,Jdo),e(F,Yu),e(Yu,EZ),e(EZ,Ydo),e(Yu,Kdo),e(Yu,zS),e(zS,Zdo),e(Yu,eco),e(F,oco),e(F,Ku),e(Ku,yZ),e(yZ,rco),e(Ku,tco),e(Ku,WS),e(WS,aco),e(Ku,nco),e(F,sco),e(F,Zu),e(Zu,wZ),e(wZ,lco),e(Zu,ico),e(Zu,QS),e(QS,dco),e(Zu,cco),e(F,mco),e(F,ep),e(ep,AZ),e(AZ,fco),e(ep,gco),e(ep,HS),e(HS,hco),e(ep,uco),e(F,pco),e(F,op),e(op,LZ),e(LZ,_co),e(op,bco),e(op,US),e(US,vco),e(op,Tco),e(F,Fco),e(F,rp),e(rp,BZ),e(BZ,Cco),e(rp,Mco),e(rp,JS),e(JS,Eco),e(rp,yco),e(F,wco),e(F,tp),e(tp,xZ),e(xZ,Aco),e(tp,Lco),e(tp,YS),e(YS,Bco),e(tp,xco),e(F,kco),e(F,ap),e(ap,kZ),e(kZ,Rco),e(ap,Sco),e(ap,KS),e(KS,Pco),e(ap,$co),e(F,Ico),e(F,np),e(np,RZ),e(RZ,Nco),e(np,jco),e(np,ZS),e(ZS,Dco),e(np,qco),e(F,Gco),e(F,sp),e(sp,SZ),e(SZ,Oco),e(sp,Xco),e(sp,eP),e(eP,Vco),e(sp,zco),e(F,Wco),e(F,lp),e(lp,PZ),e(PZ,Qco),e(lp,Hco),e(lp,oP),e(oP,Uco),e(lp,Jco),e(F,Yco),e(F,ip),e(ip,$Z),e($Z,Kco),e(ip,Zco),e(ip,rP),e(rP,emo),e(ip,omo),e(F,rmo),e(F,dp),e(dp,IZ),e(IZ,tmo),e(dp,amo),e(dp,tP),e(tP,nmo),e(dp,smo),e(F,lmo),e(F,cp),e(cp,NZ),e(NZ,imo),e(cp,dmo),e(cp,aP),e(aP,cmo),e(cp,mmo),e(F,fmo),e(F,mp),e(mp,jZ),e(jZ,gmo),e(mp,hmo),e(mp,nP),e(nP,umo),e(mp,pmo),e(F,_mo),e(F,fp),e(fp,DZ),e(DZ,bmo),e(fp,vmo),e(fp,sP),e(sP,Tmo),e(fp,Fmo),e(F,Cmo),e(F,gp),e(gp,qZ),e(qZ,Mmo),e(gp,Emo),e(gp,lP),e(lP,ymo),e(gp,wmo),e(F,Amo),e(F,hp),e(hp,GZ),e(GZ,Lmo),e(hp,Bmo),e(hp,iP),e(iP,xmo),e(hp,kmo),e(F,Rmo),e(F,up),e(up,OZ),e(OZ,Smo),e(up,Pmo),e(up,dP),e(dP,$mo),e(up,Imo),e(F,Nmo),e(F,pp),e(pp,XZ),e(XZ,jmo),e(pp,Dmo),e(pp,cP),e(cP,qmo),e(pp,Gmo),e(F,Omo),e(F,_p),e(_p,VZ),e(VZ,Xmo),e(_p,Vmo),e(_p,mP),e(mP,zmo),e(_p,Wmo),e(F,Qmo),e(F,bp),e(bp,zZ),e(zZ,Hmo),e(bp,Umo),e(bp,fP),e(fP,Jmo),e(bp,Ymo),e(F,Kmo),e(F,vp),e(vp,WZ),e(WZ,Zmo),e(vp,efo),e(vp,gP),e(gP,ofo),e(vp,rfo),e(F,tfo),e(F,Tp),e(Tp,QZ),e(QZ,afo),e(Tp,nfo),e(Tp,hP),e(hP,sfo),e(Tp,lfo),e(F,ifo),e(F,Fp),e(Fp,HZ),e(HZ,dfo),e(Fp,cfo),e(Fp,uP),e(uP,mfo),e(Fp,ffo),e(F,gfo),e(F,Cp),e(Cp,UZ),e(UZ,hfo),e(Cp,ufo),e(Cp,pP),e(pP,pfo),e(Cp,_fo),e(F,bfo),e(F,Mp),e(Mp,JZ),e(JZ,vfo),e(Mp,Tfo),e(Mp,_P),e(_P,Ffo),e(Mp,Cfo),e(Ne,Mfo),e(Ne,Ep),e(Ep,Efo),e(Ep,YZ),e(YZ,yfo),e(Ep,wfo),e(Ep,KZ),e(KZ,Afo),e(Ne,Lfo),e(Ne,ZZ),e(ZZ,Bfo),e(Ne,xfo),g(Xy,Ne,null),b(c,lke,_),b(c,Zi,_),e(Zi,yp),e(yp,eee),g(Vy,eee,null),e(Zi,kfo),e(Zi,oee),e(oee,Rfo),b(c,ike,_),b(c,Yo,_),g(zy,Yo,null),e(Yo,Sfo),e(Yo,ed),e(ed,Pfo),e(ed,ree),e(ree,$fo),e(ed,Ifo),e(ed,tee),e(tee,Nfo),e(ed,jfo),e(Yo,Dfo),e(Yo,Wy),e(Wy,qfo),e(Wy,aee),e(aee,Gfo),e(Wy,Ofo),e(Yo,Xfo),e(Yo,zr),g(Qy,zr,null),e(zr,Vfo),e(zr,nee),e(nee,zfo),e(zr,Wfo),e(zr,od),e(od,Qfo),e(od,see),e(see,Hfo),e(od,Ufo),e(od,lee),e(lee,Jfo),e(od,Yfo),e(zr,Kfo),e(zr,iee),e(iee,Zfo),e(zr,ego),g(Hy,zr,null),e(Yo,ogo),e(Yo,je),g(Uy,je,null),e(je,rgo),e(je,dee),e(dee,tgo),e(je,ago),e(je,za),e(za,ngo),e(za,cee),e(cee,sgo),e(za,lgo),e(za,mee),e(mee,igo),e(za,dgo),e(za,fee),e(fee,cgo),e(za,mgo),e(je,fgo),e(je,k),e(k,wp),e(wp,gee),e(gee,ggo),e(wp,hgo),e(wp,bP),e(bP,ugo),e(wp,pgo),e(k,_go),e(k,Ap),e(Ap,hee),e(hee,bgo),e(Ap,vgo),e(Ap,vP),e(vP,Tgo),e(Ap,Fgo),e(k,Cgo),e(k,Lp),e(Lp,uee),e(uee,Mgo),e(Lp,Ego),e(Lp,TP),e(TP,ygo),e(Lp,wgo),e(k,Ago),e(k,Bp),e(Bp,pee),e(pee,Lgo),e(Bp,Bgo),e(Bp,FP),e(FP,xgo),e(Bp,kgo),e(k,Rgo),e(k,xp),e(xp,_ee),e(_ee,Sgo),e(xp,Pgo),e(xp,CP),e(CP,$go),e(xp,Igo),e(k,Ngo),e(k,kp),e(kp,bee),e(bee,jgo),e(kp,Dgo),e(kp,MP),e(MP,qgo),e(kp,Ggo),e(k,Ogo),e(k,Rp),e(Rp,vee),e(vee,Xgo),e(Rp,Vgo),e(Rp,EP),e(EP,zgo),e(Rp,Wgo),e(k,Qgo),e(k,Sp),e(Sp,Tee),e(Tee,Hgo),e(Sp,Ugo),e(Sp,yP),e(yP,Jgo),e(Sp,Ygo),e(k,Kgo),e(k,Pp),e(Pp,Fee),e(Fee,Zgo),e(Pp,eho),e(Pp,wP),e(wP,oho),e(Pp,rho),e(k,tho),e(k,$p),e($p,Cee),e(Cee,aho),e($p,nho),e($p,AP),e(AP,sho),e($p,lho),e(k,iho),e(k,Ip),e(Ip,Mee),e(Mee,dho),e(Ip,cho),e(Ip,LP),e(LP,mho),e(Ip,fho),e(k,gho),e(k,Np),e(Np,Eee),e(Eee,hho),e(Np,uho),e(Np,BP),e(BP,pho),e(Np,_ho),e(k,bho),e(k,jp),e(jp,yee),e(yee,vho),e(jp,Tho),e(jp,xP),e(xP,Fho),e(jp,Cho),e(k,Mho),e(k,Dp),e(Dp,wee),e(wee,Eho),e(Dp,yho),e(Dp,kP),e(kP,who),e(Dp,Aho),e(k,Lho),e(k,qp),e(qp,Aee),e(Aee,Bho),e(qp,xho),e(qp,RP),e(RP,kho),e(qp,Rho),e(k,Sho),e(k,Gp),e(Gp,Lee),e(Lee,Pho),e(Gp,$ho),e(Gp,SP),e(SP,Iho),e(Gp,Nho),e(k,jho),e(k,Op),e(Op,Bee),e(Bee,Dho),e(Op,qho),e(Op,PP),e(PP,Gho),e(Op,Oho),e(k,Xho),e(k,Xp),e(Xp,xee),e(xee,Vho),e(Xp,zho),e(Xp,$P),e($P,Who),e(Xp,Qho),e(k,Hho),e(k,Vp),e(Vp,kee),e(kee,Uho),e(Vp,Jho),e(Vp,IP),e(IP,Yho),e(Vp,Kho),e(k,Zho),e(k,zp),e(zp,Ree),e(Ree,euo),e(zp,ouo),e(zp,NP),e(NP,ruo),e(zp,tuo),e(k,auo),e(k,Wp),e(Wp,See),e(See,nuo),e(Wp,suo),e(Wp,jP),e(jP,luo),e(Wp,iuo),e(k,duo),e(k,Qp),e(Qp,Pee),e(Pee,cuo),e(Qp,muo),e(Qp,DP),e(DP,fuo),e(Qp,guo),e(k,huo),e(k,Hp),e(Hp,$ee),e($ee,uuo),e(Hp,puo),e(Hp,qP),e(qP,_uo),e(Hp,buo),e(k,vuo),e(k,Up),e(Up,Iee),e(Iee,Tuo),e(Up,Fuo),e(Up,GP),e(GP,Cuo),e(Up,Muo),e(k,Euo),e(k,Jp),e(Jp,Nee),e(Nee,yuo),e(Jp,wuo),e(Jp,OP),e(OP,Auo),e(Jp,Luo),e(k,Buo),e(k,Yp),e(Yp,jee),e(jee,xuo),e(Yp,kuo),e(Yp,XP),e(XP,Ruo),e(Yp,Suo),e(k,Puo),e(k,Kp),e(Kp,Dee),e(Dee,$uo),e(Kp,Iuo),e(Kp,VP),e(VP,Nuo),e(Kp,juo),e(k,Duo),e(k,Zp),e(Zp,qee),e(qee,quo),e(Zp,Guo),e(Zp,zP),e(zP,Ouo),e(Zp,Xuo),e(k,Vuo),e(k,e_),e(e_,Gee),e(Gee,zuo),e(e_,Wuo),e(e_,WP),e(WP,Quo),e(e_,Huo),e(k,Uuo),e(k,o_),e(o_,Oee),e(Oee,Juo),e(o_,Yuo),e(o_,QP),e(QP,Kuo),e(o_,Zuo),e(k,epo),e(k,r_),e(r_,Xee),e(Xee,opo),e(r_,rpo),e(r_,HP),e(HP,tpo),e(r_,apo),e(k,npo),e(k,t_),e(t_,Vee),e(Vee,spo),e(t_,lpo),e(t_,UP),e(UP,ipo),e(t_,dpo),e(k,cpo),e(k,a_),e(a_,zee),e(zee,mpo),e(a_,fpo),e(a_,JP),e(JP,gpo),e(a_,hpo),e(k,upo),e(k,n_),e(n_,Wee),e(Wee,ppo),e(n_,_po),e(n_,YP),e(YP,bpo),e(n_,vpo),e(k,Tpo),e(k,s_),e(s_,Qee),e(Qee,Fpo),e(s_,Cpo),e(s_,KP),e(KP,Mpo),e(s_,Epo),e(k,ypo),e(k,l_),e(l_,Hee),e(Hee,wpo),e(l_,Apo),e(l_,ZP),e(ZP,Lpo),e(l_,Bpo),e(k,xpo),e(k,i_),e(i_,Uee),e(Uee,kpo),e(i_,Rpo),e(i_,e$),e(e$,Spo),e(i_,Ppo),e(k,$po),e(k,d_),e(d_,Jee),e(Jee,Ipo),e(d_,Npo),e(d_,o$),e(o$,jpo),e(d_,Dpo),e(k,qpo),e(k,c_),e(c_,Yee),e(Yee,Gpo),e(c_,Opo),e(c_,r$),e(r$,Xpo),e(c_,Vpo),e(je,zpo),e(je,m_),e(m_,Wpo),e(m_,Kee),e(Kee,Qpo),e(m_,Hpo),e(m_,Zee),e(Zee,Upo),e(je,Jpo),e(je,eoe),e(eoe,Ypo),e(je,Kpo),g(Jy,je,null),b(c,dke,_),b(c,rd,_),e(rd,f_),e(f_,ooe),g(Yy,ooe,null),e(rd,Zpo),e(rd,roe),e(roe,e_o),b(c,cke,_),b(c,Ko,_),g(Ky,Ko,null),e(Ko,o_o),e(Ko,td),e(td,r_o),e(td,toe),e(toe,t_o),e(td,a_o),e(td,aoe),e(aoe,n_o),e(td,s_o),e(Ko,l_o),e(Ko,Zy),e(Zy,i_o),e(Zy,noe),e(noe,d_o),e(Zy,c_o),e(Ko,m_o),e(Ko,Wr),g(ew,Wr,null),e(Wr,f_o),e(Wr,soe),e(soe,g_o),e(Wr,h_o),e(Wr,ad),e(ad,u_o),e(ad,loe),e(loe,p_o),e(ad,__o),e(ad,ioe),e(ioe,b_o),e(ad,v_o),e(Wr,T_o),e(Wr,doe),e(doe,F_o),e(Wr,C_o),g(ow,Wr,null),e(Ko,M_o),e(Ko,De),g(rw,De,null),e(De,E_o),e(De,coe),e(coe,y_o),e(De,w_o),e(De,Wa),e(Wa,A_o),e(Wa,moe),e(moe,L_o),e(Wa,B_o),e(Wa,foe),e(foe,x_o),e(Wa,k_o),e(Wa,goe),e(goe,R_o),e(Wa,S_o),e(De,P_o),e(De,$),e($,g_),e(g_,hoe),e(hoe,$_o),e(g_,I_o),e(g_,t$),e(t$,N_o),e(g_,j_o),e($,D_o),e($,h_),e(h_,uoe),e(uoe,q_o),e(h_,G_o),e(h_,a$),e(a$,O_o),e(h_,X_o),e($,V_o),e($,u_),e(u_,poe),e(poe,z_o),e(u_,W_o),e(u_,n$),e(n$,Q_o),e(u_,H_o),e($,U_o),e($,p_),e(p_,_oe),e(_oe,J_o),e(p_,Y_o),e(p_,s$),e(s$,K_o),e(p_,Z_o),e($,ebo),e($,__),e(__,boe),e(boe,obo),e(__,rbo),e(__,l$),e(l$,tbo),e(__,abo),e($,nbo),e($,b_),e(b_,voe),e(voe,sbo),e(b_,lbo),e(b_,i$),e(i$,ibo),e(b_,dbo),e($,cbo),e($,v_),e(v_,Toe),e(Toe,mbo),e(v_,fbo),e(v_,d$),e(d$,gbo),e(v_,hbo),e($,ubo),e($,T_),e(T_,Foe),e(Foe,pbo),e(T_,_bo),e(T_,c$),e(c$,bbo),e(T_,vbo),e($,Tbo),e($,F_),e(F_,Coe),e(Coe,Fbo),e(F_,Cbo),e(F_,m$),e(m$,Mbo),e(F_,Ebo),e($,ybo),e($,C_),e(C_,Moe),e(Moe,wbo),e(C_,Abo),e(C_,f$),e(f$,Lbo),e(C_,Bbo),e($,xbo),e($,M_),e(M_,Eoe),e(Eoe,kbo),e(M_,Rbo),e(M_,g$),e(g$,Sbo),e(M_,Pbo),e($,$bo),e($,E_),e(E_,yoe),e(yoe,Ibo),e(E_,Nbo),e(E_,h$),e(h$,jbo),e(E_,Dbo),e($,qbo),e($,y_),e(y_,woe),e(woe,Gbo),e(y_,Obo),e(y_,u$),e(u$,Xbo),e(y_,Vbo),e($,zbo),e($,w_),e(w_,Aoe),e(Aoe,Wbo),e(w_,Qbo),e(w_,p$),e(p$,Hbo),e(w_,Ubo),e($,Jbo),e($,A_),e(A_,Loe),e(Loe,Ybo),e(A_,Kbo),e(A_,_$),e(_$,Zbo),e(A_,e2o),e($,o2o),e($,L_),e(L_,Boe),e(Boe,r2o),e(L_,t2o),e(L_,b$),e(b$,a2o),e(L_,n2o),e($,s2o),e($,B_),e(B_,xoe),e(xoe,l2o),e(B_,i2o),e(B_,v$),e(v$,d2o),e(B_,c2o),e($,m2o),e($,x_),e(x_,koe),e(koe,f2o),e(x_,g2o),e(x_,T$),e(T$,h2o),e(x_,u2o),e($,p2o),e($,k_),e(k_,Roe),e(Roe,_2o),e(k_,b2o),e(k_,F$),e(F$,v2o),e(k_,T2o),e($,F2o),e($,R_),e(R_,Soe),e(Soe,C2o),e(R_,M2o),e(R_,C$),e(C$,E2o),e(R_,y2o),e($,w2o),e($,S_),e(S_,Poe),e(Poe,A2o),e(S_,L2o),e(S_,M$),e(M$,B2o),e(S_,x2o),e($,k2o),e($,P_),e(P_,$oe),e($oe,R2o),e(P_,S2o),e(P_,E$),e(E$,P2o),e(P_,$2o),e($,I2o),e($,$_),e($_,Ioe),e(Ioe,N2o),e($_,j2o),e($_,y$),e(y$,D2o),e($_,q2o),e($,G2o),e($,I_),e(I_,Noe),e(Noe,O2o),e(I_,X2o),e(I_,w$),e(w$,V2o),e(I_,z2o),e($,W2o),e($,N_),e(N_,joe),e(joe,Q2o),e(N_,H2o),e(N_,A$),e(A$,U2o),e(N_,J2o),e($,Y2o),e($,j_),e(j_,Doe),e(Doe,K2o),e(j_,Z2o),e(j_,L$),e(L$,evo),e(j_,ovo),e($,rvo),e($,D_),e(D_,qoe),e(qoe,tvo),e(D_,avo),e(D_,B$),e(B$,nvo),e(D_,svo),e($,lvo),e($,q_),e(q_,Goe),e(Goe,ivo),e(q_,dvo),e(q_,x$),e(x$,cvo),e(q_,mvo),e($,fvo),e($,G_),e(G_,Ooe),e(Ooe,gvo),e(G_,hvo),e(G_,k$),e(k$,uvo),e(G_,pvo),e($,_vo),e($,O_),e(O_,Xoe),e(Xoe,bvo),e(O_,vvo),e(O_,R$),e(R$,Tvo),e(O_,Fvo),e($,Cvo),e($,X_),e(X_,Voe),e(Voe,Mvo),e(X_,Evo),e(X_,S$),e(S$,yvo),e(X_,wvo),e($,Avo),e($,V_),e(V_,zoe),e(zoe,Lvo),e(V_,Bvo),e(V_,P$),e(P$,xvo),e(V_,kvo),e($,Rvo),e($,z_),e(z_,Woe),e(Woe,Svo),e(z_,Pvo),e(z_,$$),e($$,$vo),e(z_,Ivo),e($,Nvo),e($,W_),e(W_,Qoe),e(Qoe,jvo),e(W_,Dvo),e(W_,I$),e(I$,qvo),e(W_,Gvo),e($,Ovo),e($,Q_),e(Q_,Hoe),e(Hoe,Xvo),e(Q_,Vvo),e(Q_,N$),e(N$,zvo),e(Q_,Wvo),e(De,Qvo),e(De,H_),e(H_,Hvo),e(H_,Uoe),e(Uoe,Uvo),e(H_,Jvo),e(H_,Joe),e(Joe,Yvo),e(De,Kvo),e(De,Yoe),e(Yoe,Zvo),e(De,eTo),g(tw,De,null),b(c,mke,_),b(c,nd,_),e(nd,U_),e(U_,Koe),g(aw,Koe,null),e(nd,oTo),e(nd,Zoe),e(Zoe,rTo),b(c,fke,_),b(c,Zo,_),g(nw,Zo,null),e(Zo,tTo),e(Zo,sd),e(sd,aTo),e(sd,ere),e(ere,nTo),e(sd,sTo),e(sd,ore),e(ore,lTo),e(sd,iTo),e(Zo,dTo),e(Zo,sw),e(sw,cTo),e(sw,rre),e(rre,mTo),e(sw,fTo),e(Zo,gTo),e(Zo,Qr),g(lw,Qr,null),e(Qr,hTo),e(Qr,tre),e(tre,uTo),e(Qr,pTo),e(Qr,ld),e(ld,_To),e(ld,are),e(are,bTo),e(ld,vTo),e(ld,nre),e(nre,TTo),e(ld,FTo),e(Qr,CTo),e(Qr,sre),e(sre,MTo),e(Qr,ETo),g(iw,Qr,null),e(Zo,yTo),e(Zo,qe),g(dw,qe,null),e(qe,wTo),e(qe,lre),e(lre,ATo),e(qe,LTo),e(qe,Qa),e(Qa,BTo),e(Qa,ire),e(ire,xTo),e(Qa,kTo),e(Qa,dre),e(dre,RTo),e(Qa,STo),e(Qa,cre),e(cre,PTo),e(Qa,$To),e(qe,ITo),e(qe,I),e(I,J_),e(J_,mre),e(mre,NTo),e(J_,jTo),e(J_,j$),e(j$,DTo),e(J_,qTo),e(I,GTo),e(I,Y_),e(Y_,fre),e(fre,OTo),e(Y_,XTo),e(Y_,D$),e(D$,VTo),e(Y_,zTo),e(I,WTo),e(I,K_),e(K_,gre),e(gre,QTo),e(K_,HTo),e(K_,q$),e(q$,UTo),e(K_,JTo),e(I,YTo),e(I,Z_),e(Z_,hre),e(hre,KTo),e(Z_,ZTo),e(Z_,G$),e(G$,e1o),e(Z_,o1o),e(I,r1o),e(I,eb),e(eb,ure),e(ure,t1o),e(eb,a1o),e(eb,O$),e(O$,n1o),e(eb,s1o),e(I,l1o),e(I,ob),e(ob,pre),e(pre,i1o),e(ob,d1o),e(ob,X$),e(X$,c1o),e(ob,m1o),e(I,f1o),e(I,rb),e(rb,_re),e(_re,g1o),e(rb,h1o),e(rb,V$),e(V$,u1o),e(rb,p1o),e(I,_1o),e(I,tb),e(tb,bre),e(bre,b1o),e(tb,v1o),e(tb,z$),e(z$,T1o),e(tb,F1o),e(I,C1o),e(I,ab),e(ab,vre),e(vre,M1o),e(ab,E1o),e(ab,W$),e(W$,y1o),e(ab,w1o),e(I,A1o),e(I,nb),e(nb,Tre),e(Tre,L1o),e(nb,B1o),e(nb,Q$),e(Q$,x1o),e(nb,k1o),e(I,R1o),e(I,sb),e(sb,Fre),e(Fre,S1o),e(sb,P1o),e(sb,H$),e(H$,$1o),e(sb,I1o),e(I,N1o),e(I,lb),e(lb,Cre),e(Cre,j1o),e(lb,D1o),e(lb,U$),e(U$,q1o),e(lb,G1o),e(I,O1o),e(I,ib),e(ib,Mre),e(Mre,X1o),e(ib,V1o),e(ib,J$),e(J$,z1o),e(ib,W1o),e(I,Q1o),e(I,db),e(db,Ere),e(Ere,H1o),e(db,U1o),e(db,Y$),e(Y$,J1o),e(db,Y1o),e(I,K1o),e(I,cb),e(cb,yre),e(yre,Z1o),e(cb,eFo),e(cb,K$),e(K$,oFo),e(cb,rFo),e(I,tFo),e(I,mb),e(mb,wre),e(wre,aFo),e(mb,nFo),e(mb,Z$),e(Z$,sFo),e(mb,lFo),e(I,iFo),e(I,fb),e(fb,Are),e(Are,dFo),e(fb,cFo),e(fb,eI),e(eI,mFo),e(fb,fFo),e(I,gFo),e(I,gb),e(gb,Lre),e(Lre,hFo),e(gb,uFo),e(gb,oI),e(oI,pFo),e(gb,_Fo),e(I,bFo),e(I,hb),e(hb,Bre),e(Bre,vFo),e(hb,TFo),e(hb,rI),e(rI,FFo),e(hb,CFo),e(I,MFo),e(I,ub),e(ub,xre),e(xre,EFo),e(ub,yFo),e(ub,tI),e(tI,wFo),e(ub,AFo),e(I,LFo),e(I,pb),e(pb,kre),e(kre,BFo),e(pb,xFo),e(pb,aI),e(aI,kFo),e(pb,RFo),e(I,SFo),e(I,_b),e(_b,Rre),e(Rre,PFo),e(_b,$Fo),e(_b,nI),e(nI,IFo),e(_b,NFo),e(I,jFo),e(I,bb),e(bb,Sre),e(Sre,DFo),e(bb,qFo),e(bb,sI),e(sI,GFo),e(bb,OFo),e(I,XFo),e(I,vb),e(vb,Pre),e(Pre,VFo),e(vb,zFo),e(vb,lI),e(lI,WFo),e(vb,QFo),e(I,HFo),e(I,Tb),e(Tb,$re),e($re,UFo),e(Tb,JFo),e(Tb,iI),e(iI,YFo),e(Tb,KFo),e(I,ZFo),e(I,Fb),e(Fb,Ire),e(Ire,eCo),e(Fb,oCo),e(Fb,dI),e(dI,rCo),e(Fb,tCo),e(I,aCo),e(I,Cb),e(Cb,Nre),e(Nre,nCo),e(Cb,sCo),e(Cb,cI),e(cI,lCo),e(Cb,iCo),e(I,dCo),e(I,Mb),e(Mb,jre),e(jre,cCo),e(Mb,mCo),e(Mb,mI),e(mI,fCo),e(Mb,gCo),e(I,hCo),e(I,Eb),e(Eb,Dre),e(Dre,uCo),e(Eb,pCo),e(Eb,fI),e(fI,_Co),e(Eb,bCo),e(I,vCo),e(I,yb),e(yb,qre),e(qre,TCo),e(yb,FCo),e(yb,gI),e(gI,CCo),e(yb,MCo),e(I,ECo),e(I,wb),e(wb,Gre),e(Gre,yCo),e(wb,wCo),e(wb,Ore),e(Ore,ACo),e(wb,LCo),e(I,BCo),e(I,Ab),e(Ab,Xre),e(Xre,xCo),e(Ab,kCo),e(Ab,hI),e(hI,RCo),e(Ab,SCo),e(I,PCo),e(I,Lb),e(Lb,Vre),e(Vre,$Co),e(Lb,ICo),e(Lb,uI),e(uI,NCo),e(Lb,jCo),e(I,DCo),e(I,Bb),e(Bb,zre),e(zre,qCo),e(Bb,GCo),e(Bb,pI),e(pI,OCo),e(Bb,XCo),e(I,VCo),e(I,xb),e(xb,Wre),e(Wre,zCo),e(xb,WCo),e(xb,_I),e(_I,QCo),e(xb,HCo),e(qe,UCo),e(qe,kb),e(kb,JCo),e(kb,Qre),e(Qre,YCo),e(kb,KCo),e(kb,Hre),e(Hre,ZCo),e(qe,eMo),e(qe,Ure),e(Ure,oMo),e(qe,rMo),g(cw,qe,null),b(c,gke,_),b(c,id,_),e(id,Rb),e(Rb,Jre),g(mw,Jre,null),e(id,tMo),e(id,Yre),e(Yre,aMo),b(c,hke,_),b(c,er,_),g(fw,er,null),e(er,nMo),e(er,dd),e(dd,sMo),e(dd,Kre),e(Kre,lMo),e(dd,iMo),e(dd,Zre),e(Zre,dMo),e(dd,cMo),e(er,mMo),e(er,gw),e(gw,fMo),e(gw,ete),e(ete,gMo),e(gw,hMo),e(er,uMo),e(er,Hr),g(hw,Hr,null),e(Hr,pMo),e(Hr,ote),e(ote,_Mo),e(Hr,bMo),e(Hr,cd),e(cd,vMo),e(cd,rte),e(rte,TMo),e(cd,FMo),e(cd,tte),e(tte,CMo),e(cd,MMo),e(Hr,EMo),e(Hr,ate),e(ate,yMo),e(Hr,wMo),g(uw,Hr,null),e(er,AMo),e(er,Ge),g(pw,Ge,null),e(Ge,LMo),e(Ge,nte),e(nte,BMo),e(Ge,xMo),e(Ge,Ha),e(Ha,kMo),e(Ha,ste),e(ste,RMo),e(Ha,SMo),e(Ha,lte),e(lte,PMo),e(Ha,$Mo),e(Ha,ite),e(ite,IMo),e(Ha,NMo),e(Ge,jMo),e(Ge,se),e(se,Sb),e(Sb,dte),e(dte,DMo),e(Sb,qMo),e(Sb,bI),e(bI,GMo),e(Sb,OMo),e(se,XMo),e(se,Pb),e(Pb,cte),e(cte,VMo),e(Pb,zMo),e(Pb,vI),e(vI,WMo),e(Pb,QMo),e(se,HMo),e(se,$b),e($b,mte),e(mte,UMo),e($b,JMo),e($b,TI),e(TI,YMo),e($b,KMo),e(se,ZMo),e(se,Ib),e(Ib,fte),e(fte,e4o),e(Ib,o4o),e(Ib,FI),e(FI,r4o),e(Ib,t4o),e(se,a4o),e(se,Nb),e(Nb,gte),e(gte,n4o),e(Nb,s4o),e(Nb,CI),e(CI,l4o),e(Nb,i4o),e(se,d4o),e(se,jb),e(jb,hte),e(hte,c4o),e(jb,m4o),e(jb,MI),e(MI,f4o),e(jb,g4o),e(se,h4o),e(se,Db),e(Db,ute),e(ute,u4o),e(Db,p4o),e(Db,EI),e(EI,_4o),e(Db,b4o),e(se,v4o),e(se,qb),e(qb,pte),e(pte,T4o),e(qb,F4o),e(qb,yI),e(yI,C4o),e(qb,M4o),e(se,E4o),e(se,Gb),e(Gb,_te),e(_te,y4o),e(Gb,w4o),e(Gb,wI),e(wI,A4o),e(Gb,L4o),e(se,B4o),e(se,Ob),e(Ob,bte),e(bte,x4o),e(Ob,k4o),e(Ob,AI),e(AI,R4o),e(Ob,S4o),e(se,P4o),e(se,Xb),e(Xb,vte),e(vte,$4o),e(Xb,I4o),e(Xb,LI),e(LI,N4o),e(Xb,j4o),e(se,D4o),e(se,Vb),e(Vb,Tte),e(Tte,q4o),e(Vb,G4o),e(Vb,BI),e(BI,O4o),e(Vb,X4o),e(se,V4o),e(se,zb),e(zb,Fte),e(Fte,z4o),e(zb,W4o),e(zb,xI),e(xI,Q4o),e(zb,H4o),e(se,U4o),e(se,Wb),e(Wb,Cte),e(Cte,J4o),e(Wb,Y4o),e(Wb,kI),e(kI,K4o),e(Wb,Z4o),e(se,eEo),e(se,Qb),e(Qb,Mte),e(Mte,oEo),e(Qb,rEo),e(Qb,RI),e(RI,tEo),e(Qb,aEo),e(se,nEo),e(se,Hb),e(Hb,Ete),e(Ete,sEo),e(Hb,lEo),e(Hb,SI),e(SI,iEo),e(Hb,dEo),e(Ge,cEo),e(Ge,Ub),e(Ub,mEo),e(Ub,yte),e(yte,fEo),e(Ub,gEo),e(Ub,wte),e(wte,hEo),e(Ge,uEo),e(Ge,Ate),e(Ate,pEo),e(Ge,_Eo),g(_w,Ge,null),b(c,uke,_),b(c,md,_),e(md,Jb),e(Jb,Lte),g(bw,Lte,null),e(md,bEo),e(md,Bte),e(Bte,vEo),b(c,pke,_),b(c,or,_),g(vw,or,null),e(or,TEo),e(or,fd),e(fd,FEo),e(fd,xte),e(xte,CEo),e(fd,MEo),e(fd,kte),e(kte,EEo),e(fd,yEo),e(or,wEo),e(or,Tw),e(Tw,AEo),e(Tw,Rte),e(Rte,LEo),e(Tw,BEo),e(or,xEo),e(or,Ur),g(Fw,Ur,null),e(Ur,kEo),e(Ur,Ste),e(Ste,REo),e(Ur,SEo),e(Ur,gd),e(gd,PEo),e(gd,Pte),e(Pte,$Eo),e(gd,IEo),e(gd,$te),e($te,NEo),e(gd,jEo),e(Ur,DEo),e(Ur,Ite),e(Ite,qEo),e(Ur,GEo),g(Cw,Ur,null),e(or,OEo),e(or,Oe),g(Mw,Oe,null),e(Oe,XEo),e(Oe,Nte),e(Nte,VEo),e(Oe,zEo),e(Oe,Ua),e(Ua,WEo),e(Ua,jte),e(jte,QEo),e(Ua,HEo),e(Ua,Dte),e(Dte,UEo),e(Ua,JEo),e(Ua,qte),e(qte,YEo),e(Ua,KEo),e(Oe,ZEo),e(Oe,A),e(A,Yb),e(Yb,Gte),e(Gte,e3o),e(Yb,o3o),e(Yb,PI),e(PI,r3o),e(Yb,t3o),e(A,a3o),e(A,Kb),e(Kb,Ote),e(Ote,n3o),e(Kb,s3o),e(Kb,$I),e($I,l3o),e(Kb,i3o),e(A,d3o),e(A,Zb),e(Zb,Xte),e(Xte,c3o),e(Zb,m3o),e(Zb,II),e(II,f3o),e(Zb,g3o),e(A,h3o),e(A,e2),e(e2,Vte),e(Vte,u3o),e(e2,p3o),e(e2,NI),e(NI,_3o),e(e2,b3o),e(A,v3o),e(A,o2),e(o2,zte),e(zte,T3o),e(o2,F3o),e(o2,jI),e(jI,C3o),e(o2,M3o),e(A,E3o),e(A,r2),e(r2,Wte),e(Wte,y3o),e(r2,w3o),e(r2,DI),e(DI,A3o),e(r2,L3o),e(A,B3o),e(A,t2),e(t2,Qte),e(Qte,x3o),e(t2,k3o),e(t2,qI),e(qI,R3o),e(t2,S3o),e(A,P3o),e(A,a2),e(a2,Hte),e(Hte,$3o),e(a2,I3o),e(a2,GI),e(GI,N3o),e(a2,j3o),e(A,D3o),e(A,n2),e(n2,Ute),e(Ute,q3o),e(n2,G3o),e(n2,OI),e(OI,O3o),e(n2,X3o),e(A,V3o),e(A,s2),e(s2,Jte),e(Jte,z3o),e(s2,W3o),e(s2,XI),e(XI,Q3o),e(s2,H3o),e(A,U3o),e(A,l2),e(l2,Yte),e(Yte,J3o),e(l2,Y3o),e(l2,VI),e(VI,K3o),e(l2,Z3o),e(A,e5o),e(A,i2),e(i2,Kte),e(Kte,o5o),e(i2,r5o),e(i2,zI),e(zI,t5o),e(i2,a5o),e(A,n5o),e(A,d2),e(d2,Zte),e(Zte,s5o),e(d2,l5o),e(d2,WI),e(WI,i5o),e(d2,d5o),e(A,c5o),e(A,c2),e(c2,eae),e(eae,m5o),e(c2,f5o),e(c2,QI),e(QI,g5o),e(c2,h5o),e(A,u5o),e(A,m2),e(m2,oae),e(oae,p5o),e(m2,_5o),e(m2,HI),e(HI,b5o),e(m2,v5o),e(A,T5o),e(A,f2),e(f2,rae),e(rae,F5o),e(f2,C5o),e(f2,UI),e(UI,M5o),e(f2,E5o),e(A,y5o),e(A,g2),e(g2,tae),e(tae,w5o),e(g2,A5o),e(g2,JI),e(JI,L5o),e(g2,B5o),e(A,x5o),e(A,h2),e(h2,aae),e(aae,k5o),e(h2,R5o),e(h2,YI),e(YI,S5o),e(h2,P5o),e(A,$5o),e(A,u2),e(u2,nae),e(nae,I5o),e(u2,N5o),e(u2,KI),e(KI,j5o),e(u2,D5o),e(A,q5o),e(A,p2),e(p2,sae),e(sae,G5o),e(p2,O5o),e(p2,ZI),e(ZI,X5o),e(p2,V5o),e(A,z5o),e(A,_2),e(_2,lae),e(lae,W5o),e(_2,Q5o),e(_2,eN),e(eN,H5o),e(_2,U5o),e(A,J5o),e(A,b2),e(b2,iae),e(iae,Y5o),e(b2,K5o),e(b2,oN),e(oN,Z5o),e(b2,eyo),e(A,oyo),e(A,v2),e(v2,dae),e(dae,ryo),e(v2,tyo),e(v2,rN),e(rN,ayo),e(v2,nyo),e(A,syo),e(A,T2),e(T2,cae),e(cae,lyo),e(T2,iyo),e(T2,tN),e(tN,dyo),e(T2,cyo),e(A,myo),e(A,F2),e(F2,mae),e(mae,fyo),e(F2,gyo),e(F2,aN),e(aN,hyo),e(F2,uyo),e(A,pyo),e(A,C2),e(C2,fae),e(fae,_yo),e(C2,byo),e(C2,nN),e(nN,vyo),e(C2,Tyo),e(A,Fyo),e(A,M2),e(M2,gae),e(gae,Cyo),e(M2,Myo),e(M2,sN),e(sN,Eyo),e(M2,yyo),e(A,wyo),e(A,E2),e(E2,hae),e(hae,Ayo),e(E2,Lyo),e(E2,lN),e(lN,Byo),e(E2,xyo),e(A,kyo),e(A,y2),e(y2,uae),e(uae,Ryo),e(y2,Syo),e(y2,iN),e(iN,Pyo),e(y2,$yo),e(A,Iyo),e(A,w2),e(w2,pae),e(pae,Nyo),e(w2,jyo),e(w2,dN),e(dN,Dyo),e(w2,qyo),e(A,Gyo),e(A,A2),e(A2,_ae),e(_ae,Oyo),e(A2,Xyo),e(A2,cN),e(cN,Vyo),e(A2,zyo),e(A,Wyo),e(A,L2),e(L2,bae),e(bae,Qyo),e(L2,Hyo),e(L2,mN),e(mN,Uyo),e(L2,Jyo),e(A,Yyo),e(A,B2),e(B2,vae),e(vae,Kyo),e(B2,Zyo),e(B2,fN),e(fN,ewo),e(B2,owo),e(A,rwo),e(A,x2),e(x2,Tae),e(Tae,two),e(x2,awo),e(x2,gN),e(gN,nwo),e(x2,swo),e(A,lwo),e(A,k2),e(k2,Fae),e(Fae,iwo),e(k2,dwo),e(k2,hN),e(hN,cwo),e(k2,mwo),e(A,fwo),e(A,R2),e(R2,Cae),e(Cae,gwo),e(R2,hwo),e(R2,uN),e(uN,uwo),e(R2,pwo),e(A,_wo),e(A,S2),e(S2,Mae),e(Mae,bwo),e(S2,vwo),e(S2,pN),e(pN,Two),e(S2,Fwo),e(A,Cwo),e(A,P2),e(P2,Eae),e(Eae,Mwo),e(P2,Ewo),e(P2,_N),e(_N,ywo),e(P2,wwo),e(A,Awo),e(A,$2),e($2,yae),e(yae,Lwo),e($2,Bwo),e($2,bN),e(bN,xwo),e($2,kwo),e(A,Rwo),e(A,I2),e(I2,wae),e(wae,Swo),e(I2,Pwo),e(I2,vN),e(vN,$wo),e(I2,Iwo),e(A,Nwo),e(A,N2),e(N2,Aae),e(Aae,jwo),e(N2,Dwo),e(N2,TN),e(TN,qwo),e(N2,Gwo),e(A,Owo),e(A,j2),e(j2,Lae),e(Lae,Xwo),e(j2,Vwo),e(j2,FN),e(FN,zwo),e(j2,Wwo),e(A,Qwo),e(A,D2),e(D2,Bae),e(Bae,Hwo),e(D2,Uwo),e(D2,CN),e(CN,Jwo),e(D2,Ywo),e(A,Kwo),e(A,q2),e(q2,xae),e(xae,Zwo),e(q2,e6o),e(q2,MN),e(MN,o6o),e(q2,r6o),e(A,t6o),e(A,G2),e(G2,kae),e(kae,a6o),e(G2,n6o),e(G2,EN),e(EN,s6o),e(G2,l6o),e(A,i6o),e(A,O2),e(O2,Rae),e(Rae,d6o),e(O2,c6o),e(O2,yN),e(yN,m6o),e(O2,f6o),e(Oe,g6o),e(Oe,X2),e(X2,h6o),e(X2,Sae),e(Sae,u6o),e(X2,p6o),e(X2,Pae),e(Pae,_6o),e(Oe,b6o),e(Oe,$ae),e($ae,v6o),e(Oe,T6o),g(Ew,Oe,null),b(c,_ke,_),b(c,hd,_),e(hd,V2),e(V2,Iae),g(yw,Iae,null),e(hd,F6o),e(hd,Nae),e(Nae,C6o),b(c,bke,_),b(c,rr,_),g(ww,rr,null),e(rr,M6o),e(rr,ud),e(ud,E6o),e(ud,jae),e(jae,y6o),e(ud,w6o),e(ud,Dae),e(Dae,A6o),e(ud,L6o),e(rr,B6o),e(rr,Aw),e(Aw,x6o),e(Aw,qae),e(qae,k6o),e(Aw,R6o),e(rr,S6o),e(rr,Jr),g(Lw,Jr,null),e(Jr,P6o),e(Jr,Gae),e(Gae,$6o),e(Jr,I6o),e(Jr,pd),e(pd,N6o),e(pd,Oae),e(Oae,j6o),e(pd,D6o),e(pd,Xae),e(Xae,q6o),e(pd,G6o),e(Jr,O6o),e(Jr,Vae),e(Vae,X6o),e(Jr,V6o),g(Bw,Jr,null),e(rr,z6o),e(rr,Xe),g(xw,Xe,null),e(Xe,W6o),e(Xe,zae),e(zae,Q6o),e(Xe,H6o),e(Xe,Ja),e(Ja,U6o),e(Ja,Wae),e(Wae,J6o),e(Ja,Y6o),e(Ja,Qae),e(Qae,K6o),e(Ja,Z6o),e(Ja,Hae),e(Hae,eAo),e(Ja,oAo),e(Xe,rAo),e(Xe,G),e(G,z2),e(z2,Uae),e(Uae,tAo),e(z2,aAo),e(z2,wN),e(wN,nAo),e(z2,sAo),e(G,lAo),e(G,W2),e(W2,Jae),e(Jae,iAo),e(W2,dAo),e(W2,AN),e(AN,cAo),e(W2,mAo),e(G,fAo),e(G,Q2),e(Q2,Yae),e(Yae,gAo),e(Q2,hAo),e(Q2,LN),e(LN,uAo),e(Q2,pAo),e(G,_Ao),e(G,H2),e(H2,Kae),e(Kae,bAo),e(H2,vAo),e(H2,BN),e(BN,TAo),e(H2,FAo),e(G,CAo),e(G,U2),e(U2,Zae),e(Zae,MAo),e(U2,EAo),e(U2,xN),e(xN,yAo),e(U2,wAo),e(G,AAo),e(G,J2),e(J2,ene),e(ene,LAo),e(J2,BAo),e(J2,kN),e(kN,xAo),e(J2,kAo),e(G,RAo),e(G,Y2),e(Y2,one),e(one,SAo),e(Y2,PAo),e(Y2,RN),e(RN,$Ao),e(Y2,IAo),e(G,NAo),e(G,K2),e(K2,rne),e(rne,jAo),e(K2,DAo),e(K2,SN),e(SN,qAo),e(K2,GAo),e(G,OAo),e(G,Z2),e(Z2,tne),e(tne,XAo),e(Z2,VAo),e(Z2,PN),e(PN,zAo),e(Z2,WAo),e(G,QAo),e(G,ev),e(ev,ane),e(ane,HAo),e(ev,UAo),e(ev,$N),e($N,JAo),e(ev,YAo),e(G,KAo),e(G,ov),e(ov,nne),e(nne,ZAo),e(ov,e0o),e(ov,IN),e(IN,o0o),e(ov,r0o),e(G,t0o),e(G,rv),e(rv,sne),e(sne,a0o),e(rv,n0o),e(rv,NN),e(NN,s0o),e(rv,l0o),e(G,i0o),e(G,tv),e(tv,lne),e(lne,d0o),e(tv,c0o),e(tv,jN),e(jN,m0o),e(tv,f0o),e(G,g0o),e(G,av),e(av,ine),e(ine,h0o),e(av,u0o),e(av,DN),e(DN,p0o),e(av,_0o),e(G,b0o),e(G,nv),e(nv,dne),e(dne,v0o),e(nv,T0o),e(nv,qN),e(qN,F0o),e(nv,C0o),e(G,M0o),e(G,sv),e(sv,cne),e(cne,E0o),e(sv,y0o),e(sv,GN),e(GN,w0o),e(sv,A0o),e(G,L0o),e(G,lv),e(lv,mne),e(mne,B0o),e(lv,x0o),e(lv,ON),e(ON,k0o),e(lv,R0o),e(G,S0o),e(G,iv),e(iv,fne),e(fne,P0o),e(iv,$0o),e(iv,XN),e(XN,I0o),e(iv,N0o),e(G,j0o),e(G,dv),e(dv,gne),e(gne,D0o),e(dv,q0o),e(dv,VN),e(VN,G0o),e(dv,O0o),e(G,X0o),e(G,cv),e(cv,hne),e(hne,V0o),e(cv,z0o),e(cv,zN),e(zN,W0o),e(cv,Q0o),e(G,H0o),e(G,mv),e(mv,une),e(une,U0o),e(mv,J0o),e(mv,WN),e(WN,Y0o),e(mv,K0o),e(G,Z0o),e(G,fv),e(fv,pne),e(pne,eLo),e(fv,oLo),e(fv,QN),e(QN,rLo),e(fv,tLo),e(G,aLo),e(G,gv),e(gv,_ne),e(_ne,nLo),e(gv,sLo),e(gv,HN),e(HN,lLo),e(gv,iLo),e(G,dLo),e(G,hv),e(hv,bne),e(bne,cLo),e(hv,mLo),e(hv,UN),e(UN,fLo),e(hv,gLo),e(G,hLo),e(G,uv),e(uv,vne),e(vne,uLo),e(uv,pLo),e(uv,JN),e(JN,_Lo),e(uv,bLo),e(G,vLo),e(G,pv),e(pv,Tne),e(Tne,TLo),e(pv,FLo),e(pv,YN),e(YN,CLo),e(pv,MLo),e(G,ELo),e(G,_v),e(_v,Fne),e(Fne,yLo),e(_v,wLo),e(_v,KN),e(KN,ALo),e(_v,LLo),e(G,BLo),e(G,bv),e(bv,Cne),e(Cne,xLo),e(bv,kLo),e(bv,ZN),e(ZN,RLo),e(bv,SLo),e(Xe,PLo),e(Xe,vv),e(vv,$Lo),e(vv,Mne),e(Mne,ILo),e(vv,NLo),e(vv,Ene),e(Ene,jLo),e(Xe,DLo),e(Xe,yne),e(yne,qLo),e(Xe,GLo),g(kw,Xe,null),b(c,vke,_),b(c,_d,_),e(_d,Tv),e(Tv,wne),g(Rw,wne,null),e(_d,OLo),e(_d,Ane),e(Ane,XLo),b(c,Tke,_),b(c,tr,_),g(Sw,tr,null),e(tr,VLo),e(tr,bd),e(bd,zLo),e(bd,Lne),e(Lne,WLo),e(bd,QLo),e(bd,Bne),e(Bne,HLo),e(bd,ULo),e(tr,JLo),e(tr,Pw),e(Pw,YLo),e(Pw,xne),e(xne,KLo),e(Pw,ZLo),e(tr,e7o),e(tr,Yr),g($w,Yr,null),e(Yr,o7o),e(Yr,kne),e(kne,r7o),e(Yr,t7o),e(Yr,vd),e(vd,a7o),e(vd,Rne),e(Rne,n7o),e(vd,s7o),e(vd,Sne),e(Sne,l7o),e(vd,i7o),e(Yr,d7o),e(Yr,Pne),e(Pne,c7o),e(Yr,m7o),g(Iw,Yr,null),e(tr,f7o),e(tr,Ve),g(Nw,Ve,null),e(Ve,g7o),e(Ve,$ne),e($ne,h7o),e(Ve,u7o),e(Ve,Ya),e(Ya,p7o),e(Ya,Ine),e(Ine,_7o),e(Ya,b7o),e(Ya,Nne),e(Nne,v7o),e(Ya,T7o),e(Ya,jne),e(jne,F7o),e(Ya,C7o),e(Ve,M7o),e(Ve,da),e(da,Fv),e(Fv,Dne),e(Dne,E7o),e(Fv,y7o),e(Fv,ej),e(ej,w7o),e(Fv,A7o),e(da,L7o),e(da,Cv),e(Cv,qne),e(qne,B7o),e(Cv,x7o),e(Cv,oj),e(oj,k7o),e(Cv,R7o),e(da,S7o),e(da,Mv),e(Mv,Gne),e(Gne,P7o),e(Mv,$7o),e(Mv,rj),e(rj,I7o),e(Mv,N7o),e(da,j7o),e(da,Ev),e(Ev,One),e(One,D7o),e(Ev,q7o),e(Ev,tj),e(tj,G7o),e(Ev,O7o),e(da,X7o),e(da,yv),e(yv,Xne),e(Xne,V7o),e(yv,z7o),e(yv,aj),e(aj,W7o),e(yv,Q7o),e(Ve,H7o),e(Ve,wv),e(wv,U7o),e(wv,Vne),e(Vne,J7o),e(wv,Y7o),e(wv,zne),e(zne,K7o),e(Ve,Z7o),e(Ve,Wne),e(Wne,e8o),e(Ve,o8o),g(jw,Ve,null),b(c,Fke,_),b(c,Td,_),e(Td,Av),e(Av,Qne),g(Dw,Qne,null),e(Td,r8o),e(Td,Hne),e(Hne,t8o),b(c,Cke,_),b(c,ar,_),g(qw,ar,null),e(ar,a8o),e(ar,Fd),e(Fd,n8o),e(Fd,Une),e(Une,s8o),e(Fd,l8o),e(Fd,Jne),e(Jne,i8o),e(Fd,d8o),e(ar,c8o),e(ar,Gw),e(Gw,m8o),e(Gw,Yne),e(Yne,f8o),e(Gw,g8o),e(ar,h8o),e(ar,Kr),g(Ow,Kr,null),e(Kr,u8o),e(Kr,Kne),e(Kne,p8o),e(Kr,_8o),e(Kr,Cd),e(Cd,b8o),e(Cd,Zne),e(Zne,v8o),e(Cd,T8o),e(Cd,ese),e(ese,F8o),e(Cd,C8o),e(Kr,M8o),e(Kr,ose),e(ose,E8o),e(Kr,y8o),g(Xw,Kr,null),e(ar,w8o),e(ar,ze),g(Vw,ze,null),e(ze,A8o),e(ze,rse),e(rse,L8o),e(ze,B8o),e(ze,Ka),e(Ka,x8o),e(Ka,tse),e(tse,k8o),e(Ka,R8o),e(Ka,ase),e(ase,S8o),e(Ka,P8o),e(Ka,nse),e(nse,$8o),e(Ka,I8o),e(ze,N8o),e(ze,D),e(D,Lv),e(Lv,sse),e(sse,j8o),e(Lv,D8o),e(Lv,nj),e(nj,q8o),e(Lv,G8o),e(D,O8o),e(D,Bv),e(Bv,lse),e(lse,X8o),e(Bv,V8o),e(Bv,sj),e(sj,z8o),e(Bv,W8o),e(D,Q8o),e(D,xv),e(xv,ise),e(ise,H8o),e(xv,U8o),e(xv,lj),e(lj,J8o),e(xv,Y8o),e(D,K8o),e(D,kv),e(kv,dse),e(dse,Z8o),e(kv,e9o),e(kv,ij),e(ij,o9o),e(kv,r9o),e(D,t9o),e(D,Rv),e(Rv,cse),e(cse,a9o),e(Rv,n9o),e(Rv,dj),e(dj,s9o),e(Rv,l9o),e(D,i9o),e(D,Sv),e(Sv,mse),e(mse,d9o),e(Sv,c9o),e(Sv,cj),e(cj,m9o),e(Sv,f9o),e(D,g9o),e(D,Pv),e(Pv,fse),e(fse,h9o),e(Pv,u9o),e(Pv,mj),e(mj,p9o),e(Pv,_9o),e(D,b9o),e(D,$v),e($v,gse),e(gse,v9o),e($v,T9o),e($v,fj),e(fj,F9o),e($v,C9o),e(D,M9o),e(D,Iv),e(Iv,hse),e(hse,E9o),e(Iv,y9o),e(Iv,gj),e(gj,w9o),e(Iv,A9o),e(D,L9o),e(D,Nv),e(Nv,use),e(use,B9o),e(Nv,x9o),e(Nv,hj),e(hj,k9o),e(Nv,R9o),e(D,S9o),e(D,jv),e(jv,pse),e(pse,P9o),e(jv,$9o),e(jv,uj),e(uj,I9o),e(jv,N9o),e(D,j9o),e(D,Dv),e(Dv,_se),e(_se,D9o),e(Dv,q9o),e(Dv,pj),e(pj,G9o),e(Dv,O9o),e(D,X9o),e(D,qv),e(qv,bse),e(bse,V9o),e(qv,z9o),e(qv,_j),e(_j,W9o),e(qv,Q9o),e(D,H9o),e(D,Gv),e(Gv,vse),e(vse,U9o),e(Gv,J9o),e(Gv,bj),e(bj,Y9o),e(Gv,K9o),e(D,Z9o),e(D,Ov),e(Ov,Tse),e(Tse,eBo),e(Ov,oBo),e(Ov,vj),e(vj,rBo),e(Ov,tBo),e(D,aBo),e(D,Xv),e(Xv,Fse),e(Fse,nBo),e(Xv,sBo),e(Xv,Tj),e(Tj,lBo),e(Xv,iBo),e(D,dBo),e(D,Vv),e(Vv,Cse),e(Cse,cBo),e(Vv,mBo),e(Vv,Fj),e(Fj,fBo),e(Vv,gBo),e(D,hBo),e(D,zv),e(zv,Mse),e(Mse,uBo),e(zv,pBo),e(zv,Cj),e(Cj,_Bo),e(zv,bBo),e(D,vBo),e(D,Wv),e(Wv,Ese),e(Ese,TBo),e(Wv,FBo),e(Wv,Mj),e(Mj,CBo),e(Wv,MBo),e(D,EBo),e(D,Qv),e(Qv,yse),e(yse,yBo),e(Qv,wBo),e(Qv,Ej),e(Ej,ABo),e(Qv,LBo),e(D,BBo),e(D,Hv),e(Hv,wse),e(wse,xBo),e(Hv,kBo),e(Hv,yj),e(yj,RBo),e(Hv,SBo),e(D,PBo),e(D,Uv),e(Uv,Ase),e(Ase,$Bo),e(Uv,IBo),e(Uv,wj),e(wj,NBo),e(Uv,jBo),e(D,DBo),e(D,Jv),e(Jv,Lse),e(Lse,qBo),e(Jv,GBo),e(Jv,Aj),e(Aj,OBo),e(Jv,XBo),e(D,VBo),e(D,Yv),e(Yv,Bse),e(Bse,zBo),e(Yv,WBo),e(Yv,Lj),e(Lj,QBo),e(Yv,HBo),e(D,UBo),e(D,Kv),e(Kv,xse),e(xse,JBo),e(Kv,YBo),e(Kv,Bj),e(Bj,KBo),e(Kv,ZBo),e(D,exo),e(D,Zv),e(Zv,kse),e(kse,oxo),e(Zv,rxo),e(Zv,xj),e(xj,txo),e(Zv,axo),e(D,nxo),e(D,eT),e(eT,Rse),e(Rse,sxo),e(eT,lxo),e(eT,kj),e(kj,ixo),e(eT,dxo),e(D,cxo),e(D,oT),e(oT,Sse),e(Sse,mxo),e(oT,fxo),e(oT,Rj),e(Rj,gxo),e(oT,hxo),e(D,uxo),e(D,rT),e(rT,Pse),e(Pse,pxo),e(rT,_xo),e(rT,Sj),e(Sj,bxo),e(rT,vxo),e(D,Txo),e(D,tT),e(tT,$se),e($se,Fxo),e(tT,Cxo),e(tT,Pj),e(Pj,Mxo),e(tT,Exo),e(D,yxo),e(D,aT),e(aT,Ise),e(Ise,wxo),e(aT,Axo),e(aT,$j),e($j,Lxo),e(aT,Bxo),e(D,xxo),e(D,nT),e(nT,Nse),e(Nse,kxo),e(nT,Rxo),e(nT,Ij),e(Ij,Sxo),e(nT,Pxo),e(D,$xo),e(D,sT),e(sT,jse),e(jse,Ixo),e(sT,Nxo),e(sT,Nj),e(Nj,jxo),e(sT,Dxo),e(ze,qxo),e(ze,lT),e(lT,Gxo),e(lT,Dse),e(Dse,Oxo),e(lT,Xxo),e(lT,qse),e(qse,Vxo),e(ze,zxo),e(ze,Gse),e(Gse,Wxo),e(ze,Qxo),g(zw,ze,null),b(c,Mke,_),b(c,Md,_),e(Md,iT),e(iT,Ose),g(Ww,Ose,null),e(Md,Hxo),e(Md,Xse),e(Xse,Uxo),b(c,Eke,_),b(c,nr,_),g(Qw,nr,null),e(nr,Jxo),e(nr,Ed),e(Ed,Yxo),e(Ed,Vse),e(Vse,Kxo),e(Ed,Zxo),e(Ed,zse),e(zse,eko),e(Ed,oko),e(nr,rko),e(nr,Hw),e(Hw,tko),e(Hw,Wse),e(Wse,ako),e(Hw,nko),e(nr,sko),e(nr,Zr),g(Uw,Zr,null),e(Zr,lko),e(Zr,Qse),e(Qse,iko),e(Zr,dko),e(Zr,yd),e(yd,cko),e(yd,Hse),e(Hse,mko),e(yd,fko),e(yd,Use),e(Use,gko),e(yd,hko),e(Zr,uko),e(Zr,Jse),e(Jse,pko),e(Zr,_ko),g(Jw,Zr,null),e(nr,bko),e(nr,We),g(Yw,We,null),e(We,vko),e(We,Yse),e(Yse,Tko),e(We,Fko),e(We,Za),e(Za,Cko),e(Za,Kse),e(Kse,Mko),e(Za,Eko),e(Za,Zse),e(Zse,yko),e(Za,wko),e(Za,ele),e(ele,Ako),e(Za,Lko),e(We,Bko),e(We,R),e(R,dT),e(dT,ole),e(ole,xko),e(dT,kko),e(dT,jj),e(jj,Rko),e(dT,Sko),e(R,Pko),e(R,cT),e(cT,rle),e(rle,$ko),e(cT,Iko),e(cT,Dj),e(Dj,Nko),e(cT,jko),e(R,Dko),e(R,mT),e(mT,tle),e(tle,qko),e(mT,Gko),e(mT,qj),e(qj,Oko),e(mT,Xko),e(R,Vko),e(R,fT),e(fT,ale),e(ale,zko),e(fT,Wko),e(fT,Gj),e(Gj,Qko),e(fT,Hko),e(R,Uko),e(R,gT),e(gT,nle),e(nle,Jko),e(gT,Yko),e(gT,Oj),e(Oj,Kko),e(gT,Zko),e(R,eRo),e(R,hT),e(hT,sle),e(sle,oRo),e(hT,rRo),e(hT,Xj),e(Xj,tRo),e(hT,aRo),e(R,nRo),e(R,uT),e(uT,lle),e(lle,sRo),e(uT,lRo),e(uT,Vj),e(Vj,iRo),e(uT,dRo),e(R,cRo),e(R,pT),e(pT,ile),e(ile,mRo),e(pT,fRo),e(pT,zj),e(zj,gRo),e(pT,hRo),e(R,uRo),e(R,_T),e(_T,dle),e(dle,pRo),e(_T,_Ro),e(_T,Wj),e(Wj,bRo),e(_T,vRo),e(R,TRo),e(R,bT),e(bT,cle),e(cle,FRo),e(bT,CRo),e(bT,Qj),e(Qj,MRo),e(bT,ERo),e(R,yRo),e(R,vT),e(vT,mle),e(mle,wRo),e(vT,ARo),e(vT,Hj),e(Hj,LRo),e(vT,BRo),e(R,xRo),e(R,TT),e(TT,fle),e(fle,kRo),e(TT,RRo),e(TT,Uj),e(Uj,SRo),e(TT,PRo),e(R,$Ro),e(R,FT),e(FT,gle),e(gle,IRo),e(FT,NRo),e(FT,Jj),e(Jj,jRo),e(FT,DRo),e(R,qRo),e(R,CT),e(CT,hle),e(hle,GRo),e(CT,ORo),e(CT,Yj),e(Yj,XRo),e(CT,VRo),e(R,zRo),e(R,MT),e(MT,ule),e(ule,WRo),e(MT,QRo),e(MT,Kj),e(Kj,HRo),e(MT,URo),e(R,JRo),e(R,ET),e(ET,ple),e(ple,YRo),e(ET,KRo),e(ET,Zj),e(Zj,ZRo),e(ET,eSo),e(R,oSo),e(R,yT),e(yT,_le),e(_le,rSo),e(yT,tSo),e(yT,eD),e(eD,aSo),e(yT,nSo),e(R,sSo),e(R,wT),e(wT,ble),e(ble,lSo),e(wT,iSo),e(wT,oD),e(oD,dSo),e(wT,cSo),e(R,mSo),e(R,AT),e(AT,vle),e(vle,fSo),e(AT,gSo),e(AT,rD),e(rD,hSo),e(AT,uSo),e(R,pSo),e(R,LT),e(LT,Tle),e(Tle,_So),e(LT,bSo),e(LT,tD),e(tD,vSo),e(LT,TSo),e(R,FSo),e(R,BT),e(BT,Fle),e(Fle,CSo),e(BT,MSo),e(BT,aD),e(aD,ESo),e(BT,ySo),e(R,wSo),e(R,xT),e(xT,Cle),e(Cle,ASo),e(xT,LSo),e(xT,nD),e(nD,BSo),e(xT,xSo),e(R,kSo),e(R,kT),e(kT,Mle),e(Mle,RSo),e(kT,SSo),e(kT,sD),e(sD,PSo),e(kT,$So),e(R,ISo),e(R,RT),e(RT,Ele),e(Ele,NSo),e(RT,jSo),e(RT,lD),e(lD,DSo),e(RT,qSo),e(R,GSo),e(R,ST),e(ST,yle),e(yle,OSo),e(ST,XSo),e(ST,iD),e(iD,VSo),e(ST,zSo),e(R,WSo),e(R,PT),e(PT,wle),e(wle,QSo),e(PT,HSo),e(PT,dD),e(dD,USo),e(PT,JSo),e(R,YSo),e(R,$T),e($T,Ale),e(Ale,KSo),e($T,ZSo),e($T,cD),e(cD,ePo),e($T,oPo),e(R,rPo),e(R,IT),e(IT,Lle),e(Lle,tPo),e(IT,aPo),e(IT,mD),e(mD,nPo),e(IT,sPo),e(R,lPo),e(R,NT),e(NT,Ble),e(Ble,iPo),e(NT,dPo),e(NT,fD),e(fD,cPo),e(NT,mPo),e(R,fPo),e(R,jT),e(jT,xle),e(xle,gPo),e(jT,hPo),e(jT,gD),e(gD,uPo),e(jT,pPo),e(R,_Po),e(R,DT),e(DT,kle),e(kle,bPo),e(DT,vPo),e(DT,hD),e(hD,TPo),e(DT,FPo),e(R,CPo),e(R,qT),e(qT,Rle),e(Rle,MPo),e(qT,EPo),e(qT,uD),e(uD,yPo),e(qT,wPo),e(R,APo),e(R,GT),e(GT,Sle),e(Sle,LPo),e(GT,BPo),e(GT,pD),e(pD,xPo),e(GT,kPo),e(R,RPo),e(R,OT),e(OT,Ple),e(Ple,SPo),e(OT,PPo),e(OT,_D),e(_D,$Po),e(OT,IPo),e(R,NPo),e(R,XT),e(XT,$le),e($le,jPo),e(XT,DPo),e(XT,bD),e(bD,qPo),e(XT,GPo),e(R,OPo),e(R,VT),e(VT,Ile),e(Ile,XPo),e(VT,VPo),e(VT,vD),e(vD,zPo),e(VT,WPo),e(R,QPo),e(R,zT),e(zT,Nle),e(Nle,HPo),e(zT,UPo),e(zT,TD),e(TD,JPo),e(zT,YPo),e(R,KPo),e(R,WT),e(WT,jle),e(jle,ZPo),e(WT,e$o),e(WT,FD),e(FD,o$o),e(WT,r$o),e(R,t$o),e(R,QT),e(QT,Dle),e(Dle,a$o),e(QT,n$o),e(QT,CD),e(CD,s$o),e(QT,l$o),e(We,i$o),e(We,HT),e(HT,d$o),e(HT,qle),e(qle,c$o),e(HT,m$o),e(HT,Gle),e(Gle,f$o),e(We,g$o),e(We,Ole),e(Ole,h$o),e(We,u$o),g(Kw,We,null),b(c,yke,_),b(c,wd,_),e(wd,UT),e(UT,Xle),g(Zw,Xle,null),e(wd,p$o),e(wd,Vle),e(Vle,_$o),b(c,wke,_),b(c,sr,_),g(e6,sr,null),e(sr,b$o),e(sr,Ad),e(Ad,v$o),e(Ad,zle),e(zle,T$o),e(Ad,F$o),e(Ad,Wle),e(Wle,C$o),e(Ad,M$o),e(sr,E$o),e(sr,o6),e(o6,y$o),e(o6,Qle),e(Qle,w$o),e(o6,A$o),e(sr,L$o),e(sr,et),g(r6,et,null),e(et,B$o),e(et,Hle),e(Hle,x$o),e(et,k$o),e(et,Ld),e(Ld,R$o),e(Ld,Ule),e(Ule,S$o),e(Ld,P$o),e(Ld,Jle),e(Jle,$$o),e(Ld,I$o),e(et,N$o),e(et,Yle),e(Yle,j$o),e(et,D$o),g(t6,et,null),e(sr,q$o),e(sr,Qe),g(a6,Qe,null),e(Qe,G$o),e(Qe,Kle),e(Kle,O$o),e(Qe,X$o),e(Qe,en),e(en,V$o),e(en,Zle),e(Zle,z$o),e(en,W$o),e(en,eie),e(eie,Q$o),e(en,H$o),e(en,oie),e(oie,U$o),e(en,J$o),e(Qe,Y$o),e(Qe,rie),e(rie,JT),e(JT,tie),e(tie,K$o),e(JT,Z$o),e(JT,MD),e(MD,eIo),e(JT,oIo),e(Qe,rIo),e(Qe,YT),e(YT,tIo),e(YT,aie),e(aie,aIo),e(YT,nIo),e(YT,nie),e(nie,sIo),e(Qe,lIo),e(Qe,sie),e(sie,iIo),e(Qe,dIo),g(n6,Qe,null),b(c,Ake,_),b(c,Bd,_),e(Bd,KT),e(KT,lie),g(s6,lie,null),e(Bd,cIo),e(Bd,iie),e(iie,mIo),b(c,Lke,_),b(c,lr,_),g(l6,lr,null),e(lr,fIo),e(lr,xd),e(xd,gIo),e(xd,die),e(die,hIo),e(xd,uIo),e(xd,cie),e(cie,pIo),e(xd,_Io),e(lr,bIo),e(lr,i6),e(i6,vIo),e(i6,mie),e(mie,TIo),e(i6,FIo),e(lr,CIo),e(lr,ot),g(d6,ot,null),e(ot,MIo),e(ot,fie),e(fie,EIo),e(ot,yIo),e(ot,kd),e(kd,wIo),e(kd,gie),e(gie,AIo),e(kd,LIo),e(kd,hie),e(hie,BIo),e(kd,xIo),e(ot,kIo),e(ot,uie),e(uie,RIo),e(ot,SIo),g(c6,ot,null),e(lr,PIo),e(lr,He),g(m6,He,null),e(He,$Io),e(He,pie),e(pie,IIo),e(He,NIo),e(He,on),e(on,jIo),e(on,_ie),e(_ie,DIo),e(on,qIo),e(on,bie),e(bie,GIo),e(on,OIo),e(on,vie),e(vie,XIo),e(on,VIo),e(He,zIo),e(He,fe),e(fe,ZT),e(ZT,Tie),e(Tie,WIo),e(ZT,QIo),e(ZT,ED),e(ED,HIo),e(ZT,UIo),e(fe,JIo),e(fe,e1),e(e1,Fie),e(Fie,YIo),e(e1,KIo),e(e1,yD),e(yD,ZIo),e(e1,eNo),e(fe,oNo),e(fe,qs),e(qs,Cie),e(Cie,rNo),e(qs,tNo),e(qs,wD),e(wD,aNo),e(qs,nNo),e(qs,AD),e(AD,sNo),e(qs,lNo),e(fe,iNo),e(fe,o1),e(o1,Mie),e(Mie,dNo),e(o1,cNo),e(o1,LD),e(LD,mNo),e(o1,fNo),e(fe,gNo),e(fe,fa),e(fa,Eie),e(Eie,hNo),e(fa,uNo),e(fa,BD),e(BD,pNo),e(fa,_No),e(fa,xD),e(xD,bNo),e(fa,vNo),e(fa,kD),e(kD,TNo),e(fa,FNo),e(fe,CNo),e(fe,r1),e(r1,yie),e(yie,MNo),e(r1,ENo),e(r1,RD),e(RD,yNo),e(r1,wNo),e(fe,ANo),e(fe,t1),e(t1,wie),e(wie,LNo),e(t1,BNo),e(t1,SD),e(SD,xNo),e(t1,kNo),e(fe,RNo),e(fe,a1),e(a1,Aie),e(Aie,SNo),e(a1,PNo),e(a1,PD),e(PD,$No),e(a1,INo),e(fe,NNo),e(fe,n1),e(n1,Lie),e(Lie,jNo),e(n1,DNo),e(n1,$D),e($D,qNo),e(n1,GNo),e(fe,ONo),e(fe,s1),e(s1,Bie),e(Bie,XNo),e(s1,VNo),e(s1,ID),e(ID,zNo),e(s1,WNo),e(fe,QNo),e(fe,l1),e(l1,xie),e(xie,HNo),e(l1,UNo),e(l1,ND),e(ND,JNo),e(l1,YNo),e(He,KNo),e(He,i1),e(i1,ZNo),e(i1,kie),e(kie,ejo),e(i1,ojo),e(i1,Rie),e(Rie,rjo),e(He,tjo),e(He,Sie),e(Sie,ajo),e(He,njo),g(f6,He,null),b(c,Bke,_),b(c,Rd,_),e(Rd,d1),e(d1,Pie),g(g6,Pie,null),e(Rd,sjo),e(Rd,$ie),e($ie,ljo),b(c,xke,_),b(c,ir,_),g(h6,ir,null),e(ir,ijo),e(ir,Sd),e(Sd,djo),e(Sd,Iie),e(Iie,cjo),e(Sd,mjo),e(Sd,Nie),e(Nie,fjo),e(Sd,gjo),e(ir,hjo),e(ir,u6),e(u6,ujo),e(u6,jie),e(jie,pjo),e(u6,_jo),e(ir,bjo),e(ir,rt),g(p6,rt,null),e(rt,vjo),e(rt,Die),e(Die,Tjo),e(rt,Fjo),e(rt,Pd),e(Pd,Cjo),e(Pd,qie),e(qie,Mjo),e(Pd,Ejo),e(Pd,Gie),e(Gie,yjo),e(Pd,wjo),e(rt,Ajo),e(rt,Oie),e(Oie,Ljo),e(rt,Bjo),g(_6,rt,null),e(ir,xjo),e(ir,Ue),g(b6,Ue,null),e(Ue,kjo),e(Ue,Xie),e(Xie,Rjo),e(Ue,Sjo),e(Ue,rn),e(rn,Pjo),e(rn,Vie),e(Vie,$jo),e(rn,Ijo),e(rn,zie),e(zie,Njo),e(rn,jjo),e(rn,Wie),e(Wie,Djo),e(rn,qjo),e(Ue,Gjo),e(Ue,Qie),e(Qie,c1),e(c1,Hie),e(Hie,Ojo),e(c1,Xjo),e(c1,jD),e(jD,Vjo),e(c1,zjo),e(Ue,Wjo),e(Ue,m1),e(m1,Qjo),e(m1,Uie),e(Uie,Hjo),e(m1,Ujo),e(m1,Jie),e(Jie,Jjo),e(Ue,Yjo),e(Ue,Yie),e(Yie,Kjo),e(Ue,Zjo),g(v6,Ue,null),b(c,kke,_),b(c,$d,_),e($d,f1),e(f1,Kie),g(T6,Kie,null),e($d,eDo),e($d,Zie),e(Zie,oDo),b(c,Rke,_),b(c,dr,_),g(F6,dr,null),e(dr,rDo),e(dr,Id),e(Id,tDo),e(Id,ede),e(ede,aDo),e(Id,nDo),e(Id,ode),e(ode,sDo),e(Id,lDo),e(dr,iDo),e(dr,C6),e(C6,dDo),e(C6,rde),e(rde,cDo),e(C6,mDo),e(dr,fDo),e(dr,tt),g(M6,tt,null),e(tt,gDo),e(tt,tde),e(tde,hDo),e(tt,uDo),e(tt,Nd),e(Nd,pDo),e(Nd,ade),e(ade,_Do),e(Nd,bDo),e(Nd,nde),e(nde,vDo),e(Nd,TDo),e(tt,FDo),e(tt,sde),e(sde,CDo),e(tt,MDo),g(E6,tt,null),e(dr,EDo),e(dr,Je),g(y6,Je,null),e(Je,yDo),e(Je,lde),e(lde,wDo),e(Je,ADo),e(Je,tn),e(tn,LDo),e(tn,ide),e(ide,BDo),e(tn,xDo),e(tn,dde),e(dde,kDo),e(tn,RDo),e(tn,cde),e(cde,SDo),e(tn,PDo),e(Je,$Do),e(Je,ke),e(ke,g1),e(g1,mde),e(mde,IDo),e(g1,NDo),e(g1,DD),e(DD,jDo),e(g1,DDo),e(ke,qDo),e(ke,h1),e(h1,fde),e(fde,GDo),e(h1,ODo),e(h1,qD),e(qD,XDo),e(h1,VDo),e(ke,zDo),e(ke,u1),e(u1,gde),e(gde,WDo),e(u1,QDo),e(u1,GD),e(GD,HDo),e(u1,UDo),e(ke,JDo),e(ke,p1),e(p1,hde),e(hde,YDo),e(p1,KDo),e(p1,OD),e(OD,ZDo),e(p1,eqo),e(ke,oqo),e(ke,_1),e(_1,ude),e(ude,rqo),e(_1,tqo),e(_1,XD),e(XD,aqo),e(_1,nqo),e(ke,sqo),e(ke,b1),e(b1,pde),e(pde,lqo),e(b1,iqo),e(b1,VD),e(VD,dqo),e(b1,cqo),e(ke,mqo),e(ke,v1),e(v1,_de),e(_de,fqo),e(v1,gqo),e(v1,zD),e(zD,hqo),e(v1,uqo),e(ke,pqo),e(ke,T1),e(T1,bde),e(bde,_qo),e(T1,bqo),e(T1,WD),e(WD,vqo),e(T1,Tqo),e(Je,Fqo),e(Je,F1),e(F1,Cqo),e(F1,vde),e(vde,Mqo),e(F1,Eqo),e(F1,Tde),e(Tde,yqo),e(Je,wqo),e(Je,Fde),e(Fde,Aqo),e(Je,Lqo),g(w6,Je,null),b(c,Ske,_),b(c,jd,_),e(jd,C1),e(C1,Cde),g(A6,Cde,null),e(jd,Bqo),e(jd,Mde),e(Mde,xqo),b(c,Pke,_),b(c,cr,_),g(L6,cr,null),e(cr,kqo),e(cr,Dd),e(Dd,Rqo),e(Dd,Ede),e(Ede,Sqo),e(Dd,Pqo),e(Dd,yde),e(yde,$qo),e(Dd,Iqo),e(cr,Nqo),e(cr,B6),e(B6,jqo),e(B6,wde),e(wde,Dqo),e(B6,qqo),e(cr,Gqo),e(cr,at),g(x6,at,null),e(at,Oqo),e(at,Ade),e(Ade,Xqo),e(at,Vqo),e(at,qd),e(qd,zqo),e(qd,Lde),e(Lde,Wqo),e(qd,Qqo),e(qd,Bde),e(Bde,Hqo),e(qd,Uqo),e(at,Jqo),e(at,xde),e(xde,Yqo),e(at,Kqo),g(k6,at,null),e(cr,Zqo),e(cr,Ye),g(R6,Ye,null),e(Ye,eGo),e(Ye,kde),e(kde,oGo),e(Ye,rGo),e(Ye,an),e(an,tGo),e(an,Rde),e(Rde,aGo),e(an,nGo),e(an,Sde),e(Sde,sGo),e(an,lGo),e(an,Pde),e(Pde,iGo),e(an,dGo),e(Ye,cGo),e(Ye,nn),e(nn,M1),e(M1,$de),e($de,mGo),e(M1,fGo),e(M1,QD),e(QD,gGo),e(M1,hGo),e(nn,uGo),e(nn,E1),e(E1,Ide),e(Ide,pGo),e(E1,_Go),e(E1,HD),e(HD,bGo),e(E1,vGo),e(nn,TGo),e(nn,y1),e(y1,Nde),e(Nde,FGo),e(y1,CGo),e(y1,UD),e(UD,MGo),e(y1,EGo),e(nn,yGo),e(nn,w1),e(w1,jde),e(jde,wGo),e(w1,AGo),e(w1,JD),e(JD,LGo),e(w1,BGo),e(Ye,xGo),e(Ye,A1),e(A1,kGo),e(A1,Dde),e(Dde,RGo),e(A1,SGo),e(A1,qde),e(qde,PGo),e(Ye,$Go),e(Ye,Gde),e(Gde,IGo),e(Ye,NGo),g(S6,Ye,null),b(c,$ke,_),b(c,Gd,_),e(Gd,L1),e(L1,Ode),g(P6,Ode,null),e(Gd,jGo),e(Gd,Xde),e(Xde,DGo),b(c,Ike,_),b(c,mr,_),g($6,mr,null),e(mr,qGo),e(mr,Od),e(Od,GGo),e(Od,Vde),e(Vde,OGo),e(Od,XGo),e(Od,zde),e(zde,VGo),e(Od,zGo),e(mr,WGo),e(mr,I6),e(I6,QGo),e(I6,Wde),e(Wde,HGo),e(I6,UGo),e(mr,JGo),e(mr,nt),g(N6,nt,null),e(nt,YGo),e(nt,Qde),e(Qde,KGo),e(nt,ZGo),e(nt,Xd),e(Xd,eOo),e(Xd,Hde),e(Hde,oOo),e(Xd,rOo),e(Xd,Ude),e(Ude,tOo),e(Xd,aOo),e(nt,nOo),e(nt,Jde),e(Jde,sOo),e(nt,lOo),g(j6,nt,null),e(mr,iOo),e(mr,Ke),g(D6,Ke,null),e(Ke,dOo),e(Ke,Yde),e(Yde,cOo),e(Ke,mOo),e(Ke,sn),e(sn,fOo),e(sn,Kde),e(Kde,gOo),e(sn,hOo),e(sn,Zde),e(Zde,uOo),e(sn,pOo),e(sn,ece),e(ece,_Oo),e(sn,bOo),e(Ke,vOo),e(Ke,Re),e(Re,B1),e(B1,oce),e(oce,TOo),e(B1,FOo),e(B1,YD),e(YD,COo),e(B1,MOo),e(Re,EOo),e(Re,x1),e(x1,rce),e(rce,yOo),e(x1,wOo),e(x1,KD),e(KD,AOo),e(x1,LOo),e(Re,BOo),e(Re,k1),e(k1,tce),e(tce,xOo),e(k1,kOo),e(k1,ZD),e(ZD,ROo),e(k1,SOo),e(Re,POo),e(Re,R1),e(R1,ace),e(ace,$Oo),e(R1,IOo),e(R1,eq),e(eq,NOo),e(R1,jOo),e(Re,DOo),e(Re,S1),e(S1,nce),e(nce,qOo),e(S1,GOo),e(S1,oq),e(oq,OOo),e(S1,XOo),e(Re,VOo),e(Re,P1),e(P1,sce),e(sce,zOo),e(P1,WOo),e(P1,rq),e(rq,QOo),e(P1,HOo),e(Re,UOo),e(Re,$1),e($1,lce),e(lce,JOo),e($1,YOo),e($1,tq),e(tq,KOo),e($1,ZOo),e(Re,eXo),e(Re,I1),e(I1,ice),e(ice,oXo),e(I1,rXo),e(I1,aq),e(aq,tXo),e(I1,aXo),e(Ke,nXo),e(Ke,N1),e(N1,sXo),e(N1,dce),e(dce,lXo),e(N1,iXo),e(N1,cce),e(cce,dXo),e(Ke,cXo),e(Ke,mce),e(mce,mXo),e(Ke,fXo),g(q6,Ke,null),b(c,Nke,_),b(c,Vd,_),e(Vd,j1),e(j1,fce),g(G6,fce,null),e(Vd,gXo),e(Vd,gce),e(gce,hXo),b(c,jke,_),b(c,fr,_),g(O6,fr,null),e(fr,uXo),e(fr,zd),e(zd,pXo),e(zd,hce),e(hce,_Xo),e(zd,bXo),e(zd,uce),e(uce,vXo),e(zd,TXo),e(fr,FXo),e(fr,X6),e(X6,CXo),e(X6,pce),e(pce,MXo),e(X6,EXo),e(fr,yXo),e(fr,st),g(V6,st,null),e(st,wXo),e(st,_ce),e(_ce,AXo),e(st,LXo),e(st,Wd),e(Wd,BXo),e(Wd,bce),e(bce,xXo),e(Wd,kXo),e(Wd,vce),e(vce,RXo),e(Wd,SXo),e(st,PXo),e(st,Tce),e(Tce,$Xo),e(st,IXo),g(z6,st,null),e(fr,NXo),e(fr,Ze),g(W6,Ze,null),e(Ze,jXo),e(Ze,Fce),e(Fce,DXo),e(Ze,qXo),e(Ze,ln),e(ln,GXo),e(ln,Cce),e(Cce,OXo),e(ln,XXo),e(ln,Mce),e(Mce,VXo),e(ln,zXo),e(ln,Ece),e(Ece,WXo),e(ln,QXo),e(Ze,HXo),e(Ze,Q6),e(Q6,D1),e(D1,yce),e(yce,UXo),e(D1,JXo),e(D1,nq),e(nq,YXo),e(D1,KXo),e(Q6,ZXo),e(Q6,q1),e(q1,wce),e(wce,eVo),e(q1,oVo),e(q1,sq),e(sq,rVo),e(q1,tVo),e(Ze,aVo),e(Ze,G1),e(G1,nVo),e(G1,Ace),e(Ace,sVo),e(G1,lVo),e(G1,Lce),e(Lce,iVo),e(Ze,dVo),e(Ze,Bce),e(Bce,cVo),e(Ze,mVo),g(H6,Ze,null),b(c,Dke,_),b(c,Qd,_),e(Qd,O1),e(O1,xce),g(U6,xce,null),e(Qd,fVo),e(Qd,kce),e(kce,gVo),b(c,qke,_),b(c,gr,_),g(J6,gr,null),e(gr,hVo),e(gr,Hd),e(Hd,uVo),e(Hd,Rce),e(Rce,pVo),e(Hd,_Vo),e(Hd,Sce),e(Sce,bVo),e(Hd,vVo),e(gr,TVo),e(gr,Y6),e(Y6,FVo),e(Y6,Pce),e(Pce,CVo),e(Y6,MVo),e(gr,EVo),e(gr,lt),g(K6,lt,null),e(lt,yVo),e(lt,$ce),e($ce,wVo),e(lt,AVo),e(lt,Ud),e(Ud,LVo),e(Ud,Ice),e(Ice,BVo),e(Ud,xVo),e(Ud,Nce),e(Nce,kVo),e(Ud,RVo),e(lt,SVo),e(lt,jce),e(jce,PVo),e(lt,$Vo),g(Z6,lt,null),e(gr,IVo),e(gr,eo),g(eA,eo,null),e(eo,NVo),e(eo,Dce),e(Dce,jVo),e(eo,DVo),e(eo,dn),e(dn,qVo),e(dn,qce),e(qce,GVo),e(dn,OVo),e(dn,Gce),e(Gce,XVo),e(dn,VVo),e(dn,Oce),e(Oce,zVo),e(dn,WVo),e(eo,QVo),e(eo,cn),e(cn,X1),e(X1,Xce),e(Xce,HVo),e(X1,UVo),e(X1,lq),e(lq,JVo),e(X1,YVo),e(cn,KVo),e(cn,V1),e(V1,Vce),e(Vce,ZVo),e(V1,ezo),e(V1,iq),e(iq,ozo),e(V1,rzo),e(cn,tzo),e(cn,z1),e(z1,zce),e(zce,azo),e(z1,nzo),e(z1,dq),e(dq,szo),e(z1,lzo),e(cn,izo),e(cn,W1),e(W1,Wce),e(Wce,dzo),e(W1,czo),e(W1,cq),e(cq,mzo),e(W1,fzo),e(eo,gzo),e(eo,Q1),e(Q1,hzo),e(Q1,Qce),e(Qce,uzo),e(Q1,pzo),e(Q1,Hce),e(Hce,_zo),e(eo,bzo),e(eo,Uce),e(Uce,vzo),e(eo,Tzo),g(oA,eo,null),b(c,Gke,_),b(c,Jd,_),e(Jd,H1),e(H1,Jce),g(rA,Jce,null),e(Jd,Fzo),e(Jd,Yce),e(Yce,Czo),b(c,Oke,_),b(c,hr,_),g(tA,hr,null),e(hr,Mzo),e(hr,Yd),e(Yd,Ezo),e(Yd,Kce),e(Kce,yzo),e(Yd,wzo),e(Yd,Zce),e(Zce,Azo),e(Yd,Lzo),e(hr,Bzo),e(hr,aA),e(aA,xzo),e(aA,eme),e(eme,kzo),e(aA,Rzo),e(hr,Szo),e(hr,it),g(nA,it,null),e(it,Pzo),e(it,ome),e(ome,$zo),e(it,Izo),e(it,Kd),e(Kd,Nzo),e(Kd,rme),e(rme,jzo),e(Kd,Dzo),e(Kd,tme),e(tme,qzo),e(Kd,Gzo),e(it,Ozo),e(it,ame),e(ame,Xzo),e(it,Vzo),g(sA,it,null),e(hr,zzo),e(hr,oo),g(lA,oo,null),e(oo,Wzo),e(oo,nme),e(nme,Qzo),e(oo,Hzo),e(oo,mn),e(mn,Uzo),e(mn,sme),e(sme,Jzo),e(mn,Yzo),e(mn,lme),e(lme,Kzo),e(mn,Zzo),e(mn,ime),e(ime,eWo),e(mn,oWo),e(oo,rWo),e(oo,Zd),e(Zd,U1),e(U1,dme),e(dme,tWo),e(U1,aWo),e(U1,mq),e(mq,nWo),e(U1,sWo),e(Zd,lWo),e(Zd,J1),e(J1,cme),e(cme,iWo),e(J1,dWo),e(J1,fq),e(fq,cWo),e(J1,mWo),e(Zd,fWo),e(Zd,Y1),e(Y1,mme),e(mme,gWo),e(Y1,hWo),e(Y1,gq),e(gq,uWo),e(Y1,pWo),e(oo,_Wo),e(oo,K1),e(K1,bWo),e(K1,fme),e(fme,vWo),e(K1,TWo),e(K1,gme),e(gme,FWo),e(oo,CWo),e(oo,hme),e(hme,MWo),e(oo,EWo),g(iA,oo,null),b(c,Xke,_),b(c,ec,_),e(ec,Z1),e(Z1,ume),g(dA,ume,null),e(ec,yWo),e(ec,pme),e(pme,wWo),b(c,Vke,_),b(c,ur,_),g(cA,ur,null),e(ur,AWo),e(ur,oc),e(oc,LWo),e(oc,_me),e(_me,BWo),e(oc,xWo),e(oc,bme),e(bme,kWo),e(oc,RWo),e(ur,SWo),e(ur,mA),e(mA,PWo),e(mA,vme),e(vme,$Wo),e(mA,IWo),e(ur,NWo),e(ur,dt),g(fA,dt,null),e(dt,jWo),e(dt,Tme),e(Tme,DWo),e(dt,qWo),e(dt,rc),e(rc,GWo),e(rc,Fme),e(Fme,OWo),e(rc,XWo),e(rc,Cme),e(Cme,VWo),e(rc,zWo),e(dt,WWo),e(dt,Mme),e(Mme,QWo),e(dt,HWo),g(gA,dt,null),e(ur,UWo),e(ur,ro),g(hA,ro,null),e(ro,JWo),e(ro,Eme),e(Eme,YWo),e(ro,KWo),e(ro,fn),e(fn,ZWo),e(fn,yme),e(yme,eQo),e(fn,oQo),e(fn,wme),e(wme,rQo),e(fn,tQo),e(fn,Ame),e(Ame,aQo),e(fn,nQo),e(ro,sQo),e(ro,Lme),e(Lme,eF),e(eF,Bme),e(Bme,lQo),e(eF,iQo),e(eF,hq),e(hq,dQo),e(eF,cQo),e(ro,mQo),e(ro,oF),e(oF,fQo),e(oF,xme),e(xme,gQo),e(oF,hQo),e(oF,kme),e(kme,uQo),e(ro,pQo),e(ro,Rme),e(Rme,_Qo),e(ro,bQo),g(uA,ro,null),b(c,zke,_),b(c,tc,_),e(tc,rF),e(rF,Sme),g(pA,Sme,null),e(tc,vQo),e(tc,Pme),e(Pme,TQo),b(c,Wke,_),b(c,pr,_),g(_A,pr,null),e(pr,FQo),e(pr,ac),e(ac,CQo),e(ac,$me),e($me,MQo),e(ac,EQo),e(ac,Ime),e(Ime,yQo),e(ac,wQo),e(pr,AQo),e(pr,bA),e(bA,LQo),e(bA,Nme),e(Nme,BQo),e(bA,xQo),e(pr,kQo),e(pr,ct),g(vA,ct,null),e(ct,RQo),e(ct,jme),e(jme,SQo),e(ct,PQo),e(ct,nc),e(nc,$Qo),e(nc,Dme),e(Dme,IQo),e(nc,NQo),e(nc,qme),e(qme,jQo),e(nc,DQo),e(ct,qQo),e(ct,Gme),e(Gme,GQo),e(ct,OQo),g(TA,ct,null),e(pr,XQo),e(pr,to),g(FA,to,null),e(to,VQo),e(to,Ome),e(Ome,zQo),e(to,WQo),e(to,gn),e(gn,QQo),e(gn,Xme),e(Xme,HQo),e(gn,UQo),e(gn,Vme),e(Vme,JQo),e(gn,YQo),e(gn,zme),e(zme,KQo),e(gn,ZQo),e(to,eHo),e(to,Wme),e(Wme,tF),e(tF,Qme),e(Qme,oHo),e(tF,rHo),e(tF,uq),e(uq,tHo),e(tF,aHo),e(to,nHo),e(to,aF),e(aF,sHo),e(aF,Hme),e(Hme,lHo),e(aF,iHo),e(aF,Ume),e(Ume,dHo),e(to,cHo),e(to,Jme),e(Jme,mHo),e(to,fHo),g(CA,to,null),b(c,Qke,_),b(c,sc,_),e(sc,nF),e(nF,Yme),g(MA,Yme,null),e(sc,gHo),e(sc,Kme),e(Kme,hHo),b(c,Hke,_),b(c,_r,_),g(EA,_r,null),e(_r,uHo),e(_r,lc),e(lc,pHo),e(lc,Zme),e(Zme,_Ho),e(lc,bHo),e(lc,efe),e(efe,vHo),e(lc,THo),e(_r,FHo),e(_r,yA),e(yA,CHo),e(yA,ofe),e(ofe,MHo),e(yA,EHo),e(_r,yHo),e(_r,mt),g(wA,mt,null),e(mt,wHo),e(mt,rfe),e(rfe,AHo),e(mt,LHo),e(mt,ic),e(ic,BHo),e(ic,tfe),e(tfe,xHo),e(ic,kHo),e(ic,afe),e(afe,RHo),e(ic,SHo),e(mt,PHo),e(mt,nfe),e(nfe,$Ho),e(mt,IHo),g(AA,mt,null),e(_r,NHo),e(_r,ao),g(LA,ao,null),e(ao,jHo),e(ao,sfe),e(sfe,DHo),e(ao,qHo),e(ao,hn),e(hn,GHo),e(hn,lfe),e(lfe,OHo),e(hn,XHo),e(hn,ife),e(ife,VHo),e(hn,zHo),e(hn,dfe),e(dfe,WHo),e(hn,QHo),e(ao,HHo),e(ao,BA),e(BA,sF),e(sF,cfe),e(cfe,UHo),e(sF,JHo),e(sF,pq),e(pq,YHo),e(sF,KHo),e(BA,ZHo),e(BA,lF),e(lF,mfe),e(mfe,eUo),e(lF,oUo),e(lF,_q),e(_q,rUo),e(lF,tUo),e(ao,aUo),e(ao,iF),e(iF,nUo),e(iF,ffe),e(ffe,sUo),e(iF,lUo),e(iF,gfe),e(gfe,iUo),e(ao,dUo),e(ao,hfe),e(hfe,cUo),e(ao,mUo),g(xA,ao,null),b(c,Uke,_),b(c,dc,_),e(dc,dF),e(dF,ufe),g(kA,ufe,null),e(dc,fUo),e(dc,pfe),e(pfe,gUo),b(c,Jke,_),b(c,br,_),g(RA,br,null),e(br,hUo),e(br,cc),e(cc,uUo),e(cc,_fe),e(_fe,pUo),e(cc,_Uo),e(cc,bfe),e(bfe,bUo),e(cc,vUo),e(br,TUo),e(br,SA),e(SA,FUo),e(SA,vfe),e(vfe,CUo),e(SA,MUo),e(br,EUo),e(br,ft),g(PA,ft,null),e(ft,yUo),e(ft,Tfe),e(Tfe,wUo),e(ft,AUo),e(ft,mc),e(mc,LUo),e(mc,Ffe),e(Ffe,BUo),e(mc,xUo),e(mc,Cfe),e(Cfe,kUo),e(mc,RUo),e(ft,SUo),e(ft,Mfe),e(Mfe,PUo),e(ft,$Uo),g($A,ft,null),e(br,IUo),e(br,no),g(IA,no,null),e(no,NUo),e(no,Efe),e(Efe,jUo),e(no,DUo),e(no,un),e(un,qUo),e(un,yfe),e(yfe,GUo),e(un,OUo),e(un,wfe),e(wfe,XUo),e(un,VUo),e(un,Afe),e(Afe,zUo),e(un,WUo),e(no,QUo),e(no,Lfe),e(Lfe,cF),e(cF,Bfe),e(Bfe,HUo),e(cF,UUo),e(cF,bq),e(bq,JUo),e(cF,YUo),e(no,KUo),e(no,mF),e(mF,ZUo),e(mF,xfe),e(xfe,eJo),e(mF,oJo),e(mF,kfe),e(kfe,rJo),e(no,tJo),e(no,Rfe),e(Rfe,aJo),e(no,nJo),g(NA,no,null),b(c,Yke,_),b(c,fc,_),e(fc,fF),e(fF,Sfe),g(jA,Sfe,null),e(fc,sJo),e(fc,Pfe),e(Pfe,lJo),b(c,Kke,_),b(c,vr,_),g(DA,vr,null),e(vr,iJo),e(vr,gc),e(gc,dJo),e(gc,$fe),e($fe,cJo),e(gc,mJo),e(gc,Ife),e(Ife,fJo),e(gc,gJo),e(vr,hJo),e(vr,qA),e(qA,uJo),e(qA,Nfe),e(Nfe,pJo),e(qA,_Jo),e(vr,bJo),e(vr,gt),g(GA,gt,null),e(gt,vJo),e(gt,jfe),e(jfe,TJo),e(gt,FJo),e(gt,hc),e(hc,CJo),e(hc,Dfe),e(Dfe,MJo),e(hc,EJo),e(hc,qfe),e(qfe,yJo),e(hc,wJo),e(gt,AJo),e(gt,Gfe),e(Gfe,LJo),e(gt,BJo),g(OA,gt,null),e(vr,xJo),e(vr,ho),g(XA,ho,null),e(ho,kJo),e(ho,Ofe),e(Ofe,RJo),e(ho,SJo),e(ho,pn),e(pn,PJo),e(pn,Xfe),e(Xfe,$Jo),e(pn,IJo),e(pn,Vfe),e(Vfe,NJo),e(pn,jJo),e(pn,zfe),e(zfe,DJo),e(pn,qJo),e(ho,GJo),e(ho,B),e(B,gF),e(gF,Wfe),e(Wfe,OJo),e(gF,XJo),e(gF,vq),e(vq,VJo),e(gF,zJo),e(B,WJo),e(B,hF),e(hF,Qfe),e(Qfe,QJo),e(hF,HJo),e(hF,Tq),e(Tq,UJo),e(hF,JJo),e(B,YJo),e(B,uF),e(uF,Hfe),e(Hfe,KJo),e(uF,ZJo),e(uF,Fq),e(Fq,eYo),e(uF,oYo),e(B,rYo),e(B,pF),e(pF,Ufe),e(Ufe,tYo),e(pF,aYo),e(pF,Cq),e(Cq,nYo),e(pF,sYo),e(B,lYo),e(B,_F),e(_F,Jfe),e(Jfe,iYo),e(_F,dYo),e(_F,Mq),e(Mq,cYo),e(_F,mYo),e(B,fYo),e(B,bF),e(bF,Yfe),e(Yfe,gYo),e(bF,hYo),e(bF,Eq),e(Eq,uYo),e(bF,pYo),e(B,_Yo),e(B,vF),e(vF,Kfe),e(Kfe,bYo),e(vF,vYo),e(vF,yq),e(yq,TYo),e(vF,FYo),e(B,CYo),e(B,TF),e(TF,Zfe),e(Zfe,MYo),e(TF,EYo),e(TF,wq),e(wq,yYo),e(TF,wYo),e(B,AYo),e(B,FF),e(FF,ege),e(ege,LYo),e(FF,BYo),e(FF,Aq),e(Aq,xYo),e(FF,kYo),e(B,RYo),e(B,CF),e(CF,oge),e(oge,SYo),e(CF,PYo),e(CF,Lq),e(Lq,$Yo),e(CF,IYo),e(B,NYo),e(B,MF),e(MF,rge),e(rge,jYo),e(MF,DYo),e(MF,Bq),e(Bq,qYo),e(MF,GYo),e(B,OYo),e(B,EF),e(EF,tge),e(tge,XYo),e(EF,VYo),e(EF,xq),e(xq,zYo),e(EF,WYo),e(B,QYo),e(B,yF),e(yF,age),e(age,HYo),e(yF,UYo),e(yF,kq),e(kq,JYo),e(yF,YYo),e(B,KYo),e(B,wF),e(wF,nge),e(nge,ZYo),e(wF,eKo),e(wF,Rq),e(Rq,oKo),e(wF,rKo),e(B,tKo),e(B,AF),e(AF,sge),e(sge,aKo),e(AF,nKo),e(AF,Sq),e(Sq,sKo),e(AF,lKo),e(B,iKo),e(B,LF),e(LF,lge),e(lge,dKo),e(LF,cKo),e(LF,Pq),e(Pq,mKo),e(LF,fKo),e(B,gKo),e(B,Gs),e(Gs,ige),e(ige,hKo),e(Gs,uKo),e(Gs,$q),e($q,pKo),e(Gs,_Ko),e(Gs,Iq),e(Iq,bKo),e(Gs,vKo),e(B,TKo),e(B,BF),e(BF,dge),e(dge,FKo),e(BF,CKo),e(BF,Nq),e(Nq,MKo),e(BF,EKo),e(B,yKo),e(B,xF),e(xF,cge),e(cge,wKo),e(xF,AKo),e(xF,jq),e(jq,LKo),e(xF,BKo),e(B,xKo),e(B,kF),e(kF,mge),e(mge,kKo),e(kF,RKo),e(kF,Dq),e(Dq,SKo),e(kF,PKo),e(B,$Ko),e(B,RF),e(RF,fge),e(fge,IKo),e(RF,NKo),e(RF,qq),e(qq,jKo),e(RF,DKo),e(B,qKo),e(B,SF),e(SF,gge),e(gge,GKo),e(SF,OKo),e(SF,Gq),e(Gq,XKo),e(SF,VKo),e(B,zKo),e(B,PF),e(PF,hge),e(hge,WKo),e(PF,QKo),e(PF,Oq),e(Oq,HKo),e(PF,UKo),e(B,JKo),e(B,$F),e($F,uge),e(uge,YKo),e($F,KKo),e($F,Xq),e(Xq,ZKo),e($F,eZo),e(B,oZo),e(B,IF),e(IF,pge),e(pge,rZo),e(IF,tZo),e(IF,Vq),e(Vq,aZo),e(IF,nZo),e(B,sZo),e(B,NF),e(NF,_ge),e(_ge,lZo),e(NF,iZo),e(NF,zq),e(zq,dZo),e(NF,cZo),e(B,mZo),e(B,jF),e(jF,bge),e(bge,fZo),e(jF,gZo),e(jF,Wq),e(Wq,hZo),e(jF,uZo),e(B,pZo),e(B,DF),e(DF,vge),e(vge,_Zo),e(DF,bZo),e(DF,Qq),e(Qq,vZo),e(DF,TZo),e(B,FZo),e(B,qF),e(qF,Tge),e(Tge,CZo),e(qF,MZo),e(qF,Hq),e(Hq,EZo),e(qF,yZo),e(B,wZo),e(B,GF),e(GF,Fge),e(Fge,AZo),e(GF,LZo),e(GF,Uq),e(Uq,BZo),e(GF,xZo),e(B,kZo),e(B,OF),e(OF,Cge),e(Cge,RZo),e(OF,SZo),e(OF,Jq),e(Jq,PZo),e(OF,$Zo),e(B,IZo),e(B,XF),e(XF,Mge),e(Mge,NZo),e(XF,jZo),e(XF,Yq),e(Yq,DZo),e(XF,qZo),e(B,GZo),e(B,VF),e(VF,Ege),e(Ege,OZo),e(VF,XZo),e(VF,Kq),e(Kq,VZo),e(VF,zZo),e(B,WZo),e(B,zF),e(zF,yge),e(yge,QZo),e(zF,HZo),e(zF,Zq),e(Zq,UZo),e(zF,JZo),e(B,YZo),e(B,WF),e(WF,wge),e(wge,KZo),e(WF,ZZo),e(WF,eG),e(eG,eer),e(WF,oer),e(B,rer),e(B,QF),e(QF,Age),e(Age,ter),e(QF,aer),e(QF,oG),e(oG,ner),e(QF,ser),e(B,ler),e(B,HF),e(HF,Lge),e(Lge,ier),e(HF,der),e(HF,rG),e(rG,cer),e(HF,mer),e(B,fer),e(B,UF),e(UF,Bge),e(Bge,ger),e(UF,her),e(UF,tG),e(tG,uer),e(UF,per),e(B,_er),e(B,JF),e(JF,xge),e(xge,ber),e(JF,ver),e(JF,aG),e(aG,Ter),e(JF,Fer),e(B,Cer),e(B,YF),e(YF,kge),e(kge,Mer),e(YF,Eer),e(YF,nG),e(nG,yer),e(YF,wer),e(B,Aer),e(B,KF),e(KF,Rge),e(Rge,Ler),e(KF,Ber),e(KF,sG),e(sG,xer),e(KF,ker),e(B,Rer),e(B,ZF),e(ZF,Sge),e(Sge,Ser),e(ZF,Per),e(ZF,lG),e(lG,$er),e(ZF,Ier),e(ho,Ner),e(ho,Pge),e(Pge,jer),e(ho,Der),g(VA,ho,null),b(c,Zke,_),b(c,uc,_),e(uc,eC),e(eC,$ge),g(zA,$ge,null),e(uc,qer),e(uc,Ige),e(Ige,Ger),b(c,eRe,_),b(c,Tr,_),g(WA,Tr,null),e(Tr,Oer),e(Tr,pc),e(pc,Xer),e(pc,Nge),e(Nge,Ver),e(pc,zer),e(pc,jge),e(jge,Wer),e(pc,Qer),e(Tr,Her),e(Tr,QA),e(QA,Uer),e(QA,Dge),e(Dge,Jer),e(QA,Yer),e(Tr,Ker),e(Tr,ht),g(HA,ht,null),e(ht,Zer),e(ht,qge),e(qge,eor),e(ht,oor),e(ht,_c),e(_c,ror),e(_c,Gge),e(Gge,tor),e(_c,aor),e(_c,Oge),e(Oge,nor),e(_c,sor),e(ht,lor),e(ht,Xge),e(Xge,ior),e(ht,dor),g(UA,ht,null),e(Tr,cor),e(Tr,uo),g(JA,uo,null),e(uo,mor),e(uo,Vge),e(Vge,gor),e(uo,hor),e(uo,_n),e(_n,uor),e(_n,zge),e(zge,por),e(_n,_or),e(_n,Wge),e(Wge,bor),e(_n,vor),e(_n,Qge),e(Qge,Tor),e(_n,For),e(uo,Cor),e(uo,H),e(H,oC),e(oC,Hge),e(Hge,Mor),e(oC,Eor),e(oC,iG),e(iG,yor),e(oC,wor),e(H,Aor),e(H,rC),e(rC,Uge),e(Uge,Lor),e(rC,Bor),e(rC,dG),e(dG,xor),e(rC,kor),e(H,Ror),e(H,tC),e(tC,Jge),e(Jge,Sor),e(tC,Por),e(tC,cG),e(cG,$or),e(tC,Ior),e(H,Nor),e(H,aC),e(aC,Yge),e(Yge,jor),e(aC,Dor),e(aC,mG),e(mG,qor),e(aC,Gor),e(H,Oor),e(H,nC),e(nC,Kge),e(Kge,Xor),e(nC,Vor),e(nC,fG),e(fG,zor),e(nC,Wor),e(H,Qor),e(H,sC),e(sC,Zge),e(Zge,Hor),e(sC,Uor),e(sC,gG),e(gG,Jor),e(sC,Yor),e(H,Kor),e(H,lC),e(lC,ehe),e(ehe,Zor),e(lC,err),e(lC,hG),e(hG,orr),e(lC,rrr),e(H,trr),e(H,iC),e(iC,ohe),e(ohe,arr),e(iC,nrr),e(iC,uG),e(uG,srr),e(iC,lrr),e(H,irr),e(H,dC),e(dC,rhe),e(rhe,drr),e(dC,crr),e(dC,pG),e(pG,mrr),e(dC,frr),e(H,grr),e(H,cC),e(cC,the),e(the,hrr),e(cC,urr),e(cC,_G),e(_G,prr),e(cC,_rr),e(H,brr),e(H,mC),e(mC,ahe),e(ahe,vrr),e(mC,Trr),e(mC,bG),e(bG,Frr),e(mC,Crr),e(H,Mrr),e(H,fC),e(fC,nhe),e(nhe,Err),e(fC,yrr),e(fC,vG),e(vG,wrr),e(fC,Arr),e(H,Lrr),e(H,gC),e(gC,she),e(she,Brr),e(gC,xrr),e(gC,TG),e(TG,krr),e(gC,Rrr),e(H,Srr),e(H,hC),e(hC,lhe),e(lhe,Prr),e(hC,$rr),e(hC,FG),e(FG,Irr),e(hC,Nrr),e(H,jrr),e(H,uC),e(uC,ihe),e(ihe,Drr),e(uC,qrr),e(uC,CG),e(CG,Grr),e(uC,Orr),e(H,Xrr),e(H,pC),e(pC,dhe),e(dhe,Vrr),e(pC,zrr),e(pC,MG),e(MG,Wrr),e(pC,Qrr),e(H,Hrr),e(H,_C),e(_C,che),e(che,Urr),e(_C,Jrr),e(_C,EG),e(EG,Yrr),e(_C,Krr),e(H,Zrr),e(H,bC),e(bC,mhe),e(mhe,etr),e(bC,otr),e(bC,yG),e(yG,rtr),e(bC,ttr),e(H,atr),e(H,vC),e(vC,fhe),e(fhe,ntr),e(vC,str),e(vC,wG),e(wG,ltr),e(vC,itr),e(H,dtr),e(H,TC),e(TC,ghe),e(ghe,ctr),e(TC,mtr),e(TC,AG),e(AG,ftr),e(TC,gtr),e(H,htr),e(H,FC),e(FC,hhe),e(hhe,utr),e(FC,ptr),e(FC,LG),e(LG,_tr),e(FC,btr),e(H,vtr),e(H,CC),e(CC,uhe),e(uhe,Ttr),e(CC,Ftr),e(CC,BG),e(BG,Ctr),e(CC,Mtr),e(uo,Etr),e(uo,phe),e(phe,ytr),e(uo,wtr),g(YA,uo,null),b(c,oRe,_),b(c,bc,_),e(bc,MC),e(MC,_he),g(KA,_he,null),e(bc,Atr),e(bc,bhe),e(bhe,Ltr),b(c,rRe,_),b(c,Fr,_),g(ZA,Fr,null),e(Fr,Btr),e(Fr,vc),e(vc,xtr),e(vc,vhe),e(vhe,ktr),e(vc,Rtr),e(vc,The),e(The,Str),e(vc,Ptr),e(Fr,$tr),e(Fr,e0),e(e0,Itr),e(e0,Fhe),e(Fhe,Ntr),e(e0,jtr),e(Fr,Dtr),e(Fr,ut),g(o0,ut,null),e(ut,qtr),e(ut,Che),e(Che,Gtr),e(ut,Otr),e(ut,Tc),e(Tc,Xtr),e(Tc,Mhe),e(Mhe,Vtr),e(Tc,ztr),e(Tc,Ehe),e(Ehe,Wtr),e(Tc,Qtr),e(ut,Htr),e(ut,yhe),e(yhe,Utr),e(ut,Jtr),g(r0,ut,null),e(Fr,Ytr),e(Fr,po),g(t0,po,null),e(po,Ktr),e(po,whe),e(whe,Ztr),e(po,ear),e(po,bn),e(bn,oar),e(bn,Ahe),e(Ahe,rar),e(bn,tar),e(bn,Lhe),e(Lhe,aar),e(bn,nar),e(bn,Bhe),e(Bhe,sar),e(bn,lar),e(po,iar),e(po,ge),e(ge,EC),e(EC,xhe),e(xhe,dar),e(EC,car),e(EC,xG),e(xG,mar),e(EC,far),e(ge,gar),e(ge,yC),e(yC,khe),e(khe,har),e(yC,uar),e(yC,kG),e(kG,par),e(yC,_ar),e(ge,bar),e(ge,wC),e(wC,Rhe),e(Rhe,Tar),e(wC,Far),e(wC,RG),e(RG,Car),e(wC,Mar),e(ge,Ear),e(ge,AC),e(AC,She),e(She,yar),e(AC,war),e(AC,SG),e(SG,Aar),e(AC,Lar),e(ge,Bar),e(ge,LC),e(LC,Phe),e(Phe,xar),e(LC,kar),e(LC,PG),e(PG,Rar),e(LC,Sar),e(ge,Par),e(ge,BC),e(BC,$he),e($he,$ar),e(BC,Iar),e(BC,$G),e($G,Nar),e(BC,jar),e(ge,Dar),e(ge,xC),e(xC,Ihe),e(Ihe,qar),e(xC,Gar),e(xC,IG),e(IG,Oar),e(xC,Xar),e(ge,Var),e(ge,kC),e(kC,Nhe),e(Nhe,zar),e(kC,War),e(kC,NG),e(NG,Qar),e(kC,Har),e(ge,Uar),e(ge,RC),e(RC,jhe),e(jhe,Jar),e(RC,Yar),e(RC,jG),e(jG,Kar),e(RC,Zar),e(ge,enr),e(ge,SC),e(SC,Dhe),e(Dhe,onr),e(SC,rnr),e(SC,DG),e(DG,tnr),e(SC,anr),e(ge,nnr),e(ge,PC),e(PC,qhe),e(qhe,snr),e(PC,lnr),e(PC,qG),e(qG,inr),e(PC,dnr),e(po,cnr),e(po,Ghe),e(Ghe,mnr),e(po,fnr),g(a0,po,null),b(c,tRe,_),b(c,Fc,_),e(Fc,$C),e($C,Ohe),g(n0,Ohe,null),e(Fc,gnr),e(Fc,Xhe),e(Xhe,hnr),b(c,aRe,_),b(c,Cr,_),g(s0,Cr,null),e(Cr,unr),e(Cr,Cc),e(Cc,pnr),e(Cc,Vhe),e(Vhe,_nr),e(Cc,bnr),e(Cc,zhe),e(zhe,vnr),e(Cc,Tnr),e(Cr,Fnr),e(Cr,l0),e(l0,Cnr),e(l0,Whe),e(Whe,Mnr),e(l0,Enr),e(Cr,ynr),e(Cr,pt),g(i0,pt,null),e(pt,wnr),e(pt,Qhe),e(Qhe,Anr),e(pt,Lnr),e(pt,Mc),e(Mc,Bnr),e(Mc,Hhe),e(Hhe,xnr),e(Mc,knr),e(Mc,Uhe),e(Uhe,Rnr),e(Mc,Snr),e(pt,Pnr),e(pt,Jhe),e(Jhe,$nr),e(pt,Inr),g(d0,pt,null),e(Cr,Nnr),e(Cr,_o),g(c0,_o,null),e(_o,jnr),e(_o,Yhe),e(Yhe,Dnr),e(_o,qnr),e(_o,vn),e(vn,Gnr),e(vn,Khe),e(Khe,Onr),e(vn,Xnr),e(vn,Zhe),e(Zhe,Vnr),e(vn,znr),e(vn,eue),e(eue,Wnr),e(vn,Qnr),e(_o,Hnr),e(_o,m0),e(m0,IC),e(IC,oue),e(oue,Unr),e(IC,Jnr),e(IC,GG),e(GG,Ynr),e(IC,Knr),e(m0,Znr),e(m0,NC),e(NC,rue),e(rue,esr),e(NC,osr),e(NC,OG),e(OG,rsr),e(NC,tsr),e(_o,asr),e(_o,tue),e(tue,nsr),e(_o,ssr),g(f0,_o,null),b(c,nRe,_),b(c,Ec,_),e(Ec,jC),e(jC,aue),g(g0,aue,null),e(Ec,lsr),e(Ec,nue),e(nue,isr),b(c,sRe,_),b(c,Mr,_),g(h0,Mr,null),e(Mr,dsr),e(Mr,yc),e(yc,csr),e(yc,sue),e(sue,msr),e(yc,fsr),e(yc,lue),e(lue,gsr),e(yc,hsr),e(Mr,usr),e(Mr,u0),e(u0,psr),e(u0,iue),e(iue,_sr),e(u0,bsr),e(Mr,vsr),e(Mr,_t),g(p0,_t,null),e(_t,Tsr),e(_t,due),e(due,Fsr),e(_t,Csr),e(_t,wc),e(wc,Msr),e(wc,cue),e(cue,Esr),e(wc,ysr),e(wc,mue),e(mue,wsr),e(wc,Asr),e(_t,Lsr),e(_t,fue),e(fue,Bsr),e(_t,xsr),g(_0,_t,null),e(Mr,ksr),e(Mr,bo),g(b0,bo,null),e(bo,Rsr),e(bo,gue),e(gue,Ssr),e(bo,Psr),e(bo,Tn),e(Tn,$sr),e(Tn,hue),e(hue,Isr),e(Tn,Nsr),e(Tn,uue),e(uue,jsr),e(Tn,Dsr),e(Tn,pue),e(pue,qsr),e(Tn,Gsr),e(bo,Osr),e(bo,J),e(J,DC),e(DC,_ue),e(_ue,Xsr),e(DC,Vsr),e(DC,XG),e(XG,zsr),e(DC,Wsr),e(J,Qsr),e(J,qC),e(qC,bue),e(bue,Hsr),e(qC,Usr),e(qC,VG),e(VG,Jsr),e(qC,Ysr),e(J,Ksr),e(J,GC),e(GC,vue),e(vue,Zsr),e(GC,elr),e(GC,zG),e(zG,olr),e(GC,rlr),e(J,tlr),e(J,OC),e(OC,Tue),e(Tue,alr),e(OC,nlr),e(OC,WG),e(WG,slr),e(OC,llr),e(J,ilr),e(J,XC),e(XC,Fue),e(Fue,dlr),e(XC,clr),e(XC,QG),e(QG,mlr),e(XC,flr),e(J,glr),e(J,VC),e(VC,Cue),e(Cue,hlr),e(VC,ulr),e(VC,HG),e(HG,plr),e(VC,_lr),e(J,blr),e(J,zC),e(zC,Mue),e(Mue,vlr),e(zC,Tlr),e(zC,UG),e(UG,Flr),e(zC,Clr),e(J,Mlr),e(J,WC),e(WC,Eue),e(Eue,Elr),e(WC,ylr),e(WC,JG),e(JG,wlr),e(WC,Alr),e(J,Llr),e(J,QC),e(QC,yue),e(yue,Blr),e(QC,xlr),e(QC,YG),e(YG,klr),e(QC,Rlr),e(J,Slr),e(J,HC),e(HC,wue),e(wue,Plr),e(HC,$lr),e(HC,KG),e(KG,Ilr),e(HC,Nlr),e(J,jlr),e(J,UC),e(UC,Aue),e(Aue,Dlr),e(UC,qlr),e(UC,ZG),e(ZG,Glr),e(UC,Olr),e(J,Xlr),e(J,JC),e(JC,Lue),e(Lue,Vlr),e(JC,zlr),e(JC,eO),e(eO,Wlr),e(JC,Qlr),e(J,Hlr),e(J,YC),e(YC,Bue),e(Bue,Ulr),e(YC,Jlr),e(YC,oO),e(oO,Ylr),e(YC,Klr),e(J,Zlr),e(J,KC),e(KC,xue),e(xue,eir),e(KC,oir),e(KC,rO),e(rO,rir),e(KC,tir),e(J,air),e(J,ZC),e(ZC,kue),e(kue,nir),e(ZC,sir),e(ZC,tO),e(tO,lir),e(ZC,iir),e(J,dir),e(J,eM),e(eM,Rue),e(Rue,cir),e(eM,mir),e(eM,aO),e(aO,fir),e(eM,gir),e(J,hir),e(J,oM),e(oM,Sue),e(Sue,uir),e(oM,pir),e(oM,nO),e(nO,_ir),e(oM,bir),e(J,vir),e(J,rM),e(rM,Pue),e(Pue,Tir),e(rM,Fir),e(rM,sO),e(sO,Cir),e(rM,Mir),e(J,Eir),e(J,tM),e(tM,$ue),e($ue,yir),e(tM,wir),e(tM,lO),e(lO,Air),e(tM,Lir),e(J,Bir),e(J,aM),e(aM,Iue),e(Iue,xir),e(aM,kir),e(aM,iO),e(iO,Rir),e(aM,Sir),e(bo,Pir),e(bo,Nue),e(Nue,$ir),e(bo,Iir),g(v0,bo,null),b(c,lRe,_),b(c,Ac,_),e(Ac,nM),e(nM,jue),g(T0,jue,null),e(Ac,Nir),e(Ac,Due),e(Due,jir),b(c,iRe,_),b(c,Er,_),g(F0,Er,null),e(Er,Dir),e(Er,Lc),e(Lc,qir),e(Lc,que),e(que,Gir),e(Lc,Oir),e(Lc,Gue),e(Gue,Xir),e(Lc,Vir),e(Er,zir),e(Er,C0),e(C0,Wir),e(C0,Oue),e(Oue,Qir),e(C0,Hir),e(Er,Uir),e(Er,bt),g(M0,bt,null),e(bt,Jir),e(bt,Xue),e(Xue,Yir),e(bt,Kir),e(bt,Bc),e(Bc,Zir),e(Bc,Vue),e(Vue,edr),e(Bc,odr),e(Bc,zue),e(zue,rdr),e(Bc,tdr),e(bt,adr),e(bt,Wue),e(Wue,ndr),e(bt,sdr),g(E0,bt,null),e(Er,ldr),e(Er,vo),g(y0,vo,null),e(vo,idr),e(vo,Que),e(Que,ddr),e(vo,cdr),e(vo,Fn),e(Fn,mdr),e(Fn,Hue),e(Hue,fdr),e(Fn,gdr),e(Fn,Uue),e(Uue,hdr),e(Fn,udr),e(Fn,Jue),e(Jue,pdr),e(Fn,_dr),e(vo,bdr),e(vo,pe),e(pe,sM),e(sM,Yue),e(Yue,vdr),e(sM,Tdr),e(sM,dO),e(dO,Fdr),e(sM,Cdr),e(pe,Mdr),e(pe,lM),e(lM,Kue),e(Kue,Edr),e(lM,ydr),e(lM,cO),e(cO,wdr),e(lM,Adr),e(pe,Ldr),e(pe,iM),e(iM,Zue),e(Zue,Bdr),e(iM,xdr),e(iM,mO),e(mO,kdr),e(iM,Rdr),e(pe,Sdr),e(pe,dM),e(dM,epe),e(epe,Pdr),e(dM,$dr),e(dM,fO),e(fO,Idr),e(dM,Ndr),e(pe,jdr),e(pe,cM),e(cM,ope),e(ope,Ddr),e(cM,qdr),e(cM,gO),e(gO,Gdr),e(cM,Odr),e(pe,Xdr),e(pe,mM),e(mM,rpe),e(rpe,Vdr),e(mM,zdr),e(mM,hO),e(hO,Wdr),e(mM,Qdr),e(pe,Hdr),e(pe,fM),e(fM,tpe),e(tpe,Udr),e(fM,Jdr),e(fM,uO),e(uO,Ydr),e(fM,Kdr),e(pe,Zdr),e(pe,gM),e(gM,ape),e(ape,ecr),e(gM,ocr),e(gM,pO),e(pO,rcr),e(gM,tcr),e(pe,acr),e(pe,hM),e(hM,npe),e(npe,ncr),e(hM,scr),e(hM,_O),e(_O,lcr),e(hM,icr),e(pe,dcr),e(pe,uM),e(uM,spe),e(spe,ccr),e(uM,mcr),e(uM,bO),e(bO,fcr),e(uM,gcr),e(vo,hcr),e(vo,lpe),e(lpe,ucr),e(vo,pcr),g(w0,vo,null),b(c,dRe,_),b(c,xc,_),e(xc,pM),e(pM,ipe),g(A0,ipe,null),e(xc,_cr),e(xc,dpe),e(dpe,bcr),b(c,cRe,_),b(c,yr,_),g(L0,yr,null),e(yr,vcr),e(yr,kc),e(kc,Tcr),e(kc,cpe),e(cpe,Fcr),e(kc,Ccr),e(kc,mpe),e(mpe,Mcr),e(kc,Ecr),e(yr,ycr),e(yr,B0),e(B0,wcr),e(B0,fpe),e(fpe,Acr),e(B0,Lcr),e(yr,Bcr),e(yr,vt),g(x0,vt,null),e(vt,xcr),e(vt,gpe),e(gpe,kcr),e(vt,Rcr),e(vt,Rc),e(Rc,Scr),e(Rc,hpe),e(hpe,Pcr),e(Rc,$cr),e(Rc,upe),e(upe,Icr),e(Rc,Ncr),e(vt,jcr),e(vt,ppe),e(ppe,Dcr),e(vt,qcr),g(k0,vt,null),e(yr,Gcr),e(yr,To),g(R0,To,null),e(To,Ocr),e(To,_pe),e(_pe,Xcr),e(To,Vcr),e(To,Cn),e(Cn,zcr),e(Cn,bpe),e(bpe,Wcr),e(Cn,Qcr),e(Cn,vpe),e(vpe,Hcr),e(Cn,Ucr),e(Cn,Tpe),e(Tpe,Jcr),e(Cn,Ycr),e(To,Kcr),e(To,V),e(V,_M),e(_M,Fpe),e(Fpe,Zcr),e(_M,emr),e(_M,vO),e(vO,omr),e(_M,rmr),e(V,tmr),e(V,bM),e(bM,Cpe),e(Cpe,amr),e(bM,nmr),e(bM,TO),e(TO,smr),e(bM,lmr),e(V,imr),e(V,vM),e(vM,Mpe),e(Mpe,dmr),e(vM,cmr),e(vM,FO),e(FO,mmr),e(vM,fmr),e(V,gmr),e(V,TM),e(TM,Epe),e(Epe,hmr),e(TM,umr),e(TM,CO),e(CO,pmr),e(TM,_mr),e(V,bmr),e(V,FM),e(FM,ype),e(ype,vmr),e(FM,Tmr),e(FM,MO),e(MO,Fmr),e(FM,Cmr),e(V,Mmr),e(V,CM),e(CM,wpe),e(wpe,Emr),e(CM,ymr),e(CM,EO),e(EO,wmr),e(CM,Amr),e(V,Lmr),e(V,MM),e(MM,Ape),e(Ape,Bmr),e(MM,xmr),e(MM,yO),e(yO,kmr),e(MM,Rmr),e(V,Smr),e(V,EM),e(EM,Lpe),e(Lpe,Pmr),e(EM,$mr),e(EM,wO),e(wO,Imr),e(EM,Nmr),e(V,jmr),e(V,yM),e(yM,Bpe),e(Bpe,Dmr),e(yM,qmr),e(yM,AO),e(AO,Gmr),e(yM,Omr),e(V,Xmr),e(V,wM),e(wM,xpe),e(xpe,Vmr),e(wM,zmr),e(wM,LO),e(LO,Wmr),e(wM,Qmr),e(V,Hmr),e(V,AM),e(AM,kpe),e(kpe,Umr),e(AM,Jmr),e(AM,BO),e(BO,Ymr),e(AM,Kmr),e(V,Zmr),e(V,LM),e(LM,Rpe),e(Rpe,efr),e(LM,ofr),e(LM,xO),e(xO,rfr),e(LM,tfr),e(V,afr),e(V,BM),e(BM,Spe),e(Spe,nfr),e(BM,sfr),e(BM,kO),e(kO,lfr),e(BM,ifr),e(V,dfr),e(V,xM),e(xM,Ppe),e(Ppe,cfr),e(xM,mfr),e(xM,RO),e(RO,ffr),e(xM,gfr),e(V,hfr),e(V,kM),e(kM,$pe),e($pe,ufr),e(kM,pfr),e(kM,SO),e(SO,_fr),e(kM,bfr),e(V,vfr),e(V,RM),e(RM,Ipe),e(Ipe,Tfr),e(RM,Ffr),e(RM,PO),e(PO,Cfr),e(RM,Mfr),e(V,Efr),e(V,SM),e(SM,Npe),e(Npe,yfr),e(SM,wfr),e(SM,$O),e($O,Afr),e(SM,Lfr),e(V,Bfr),e(V,PM),e(PM,jpe),e(jpe,xfr),e(PM,kfr),e(PM,IO),e(IO,Rfr),e(PM,Sfr),e(V,Pfr),e(V,$M),e($M,Dpe),e(Dpe,$fr),e($M,Ifr),e($M,NO),e(NO,Nfr),e($M,jfr),e(V,Dfr),e(V,IM),e(IM,qpe),e(qpe,qfr),e(IM,Gfr),e(IM,jO),e(jO,Ofr),e(IM,Xfr),e(V,Vfr),e(V,NM),e(NM,Gpe),e(Gpe,zfr),e(NM,Wfr),e(NM,DO),e(DO,Qfr),e(NM,Hfr),e(V,Ufr),e(V,jM),e(jM,Ope),e(Ope,Jfr),e(jM,Yfr),e(jM,qO),e(qO,Kfr),e(jM,Zfr),e(V,egr),e(V,DM),e(DM,Xpe),e(Xpe,ogr),e(DM,rgr),e(DM,GO),e(GO,tgr),e(DM,agr),e(V,ngr),e(V,qM),e(qM,Vpe),e(Vpe,sgr),e(qM,lgr),e(qM,OO),e(OO,igr),e(qM,dgr),e(V,cgr),e(V,GM),e(GM,zpe),e(zpe,mgr),e(GM,fgr),e(GM,XO),e(XO,ggr),e(GM,hgr),e(To,ugr),e(To,Wpe),e(Wpe,pgr),e(To,_gr),g(S0,To,null),b(c,mRe,_),b(c,Sc,_),e(Sc,OM),e(OM,Qpe),g(P0,Qpe,null),e(Sc,bgr),e(Sc,Hpe),e(Hpe,vgr),b(c,fRe,_),b(c,wr,_),g($0,wr,null),e(wr,Tgr),e(wr,Pc),e(Pc,Fgr),e(Pc,Upe),e(Upe,Cgr),e(Pc,Mgr),e(Pc,Jpe),e(Jpe,Egr),e(Pc,ygr),e(wr,wgr),e(wr,I0),e(I0,Agr),e(I0,Ype),e(Ype,Lgr),e(I0,Bgr),e(wr,xgr),e(wr,Tt),g(N0,Tt,null),e(Tt,kgr),e(Tt,Kpe),e(Kpe,Rgr),e(Tt,Sgr),e(Tt,$c),e($c,Pgr),e($c,Zpe),e(Zpe,$gr),e($c,Igr),e($c,e_e),e(e_e,Ngr),e($c,jgr),e(Tt,Dgr),e(Tt,o_e),e(o_e,qgr),e(Tt,Ggr),g(j0,Tt,null),e(wr,Ogr),e(wr,Fo),g(D0,Fo,null),e(Fo,Xgr),e(Fo,r_e),e(r_e,Vgr),e(Fo,zgr),e(Fo,Mn),e(Mn,Wgr),e(Mn,t_e),e(t_e,Qgr),e(Mn,Hgr),e(Mn,a_e),e(a_e,Ugr),e(Mn,Jgr),e(Mn,n_e),e(n_e,Ygr),e(Mn,Kgr),e(Fo,Zgr),e(Fo,ae),e(ae,XM),e(XM,s_e),e(s_e,ehr),e(XM,ohr),e(XM,VO),e(VO,rhr),e(XM,thr),e(ae,ahr),e(ae,VM),e(VM,l_e),e(l_e,nhr),e(VM,shr),e(VM,zO),e(zO,lhr),e(VM,ihr),e(ae,dhr),e(ae,zM),e(zM,i_e),e(i_e,chr),e(zM,mhr),e(zM,WO),e(WO,fhr),e(zM,ghr),e(ae,hhr),e(ae,WM),e(WM,d_e),e(d_e,uhr),e(WM,phr),e(WM,QO),e(QO,_hr),e(WM,bhr),e(ae,vhr),e(ae,QM),e(QM,c_e),e(c_e,Thr),e(QM,Fhr),e(QM,HO),e(HO,Chr),e(QM,Mhr),e(ae,Ehr),e(ae,HM),e(HM,m_e),e(m_e,yhr),e(HM,whr),e(HM,UO),e(UO,Ahr),e(HM,Lhr),e(ae,Bhr),e(ae,UM),e(UM,f_e),e(f_e,xhr),e(UM,khr),e(UM,JO),e(JO,Rhr),e(UM,Shr),e(ae,Phr),e(ae,JM),e(JM,g_e),e(g_e,$hr),e(JM,Ihr),e(JM,YO),e(YO,Nhr),e(JM,jhr),e(ae,Dhr),e(ae,YM),e(YM,h_e),e(h_e,qhr),e(YM,Ghr),e(YM,KO),e(KO,Ohr),e(YM,Xhr),e(ae,Vhr),e(ae,KM),e(KM,u_e),e(u_e,zhr),e(KM,Whr),e(KM,ZO),e(ZO,Qhr),e(KM,Hhr),e(ae,Uhr),e(ae,ZM),e(ZM,p_e),e(p_e,Jhr),e(ZM,Yhr),e(ZM,eX),e(eX,Khr),e(ZM,Zhr),e(ae,eur),e(ae,e4),e(e4,__e),e(__e,our),e(e4,rur),e(e4,oX),e(oX,tur),e(e4,aur),e(ae,nur),e(ae,o4),e(o4,b_e),e(b_e,sur),e(o4,lur),e(o4,rX),e(rX,iur),e(o4,dur),e(ae,cur),e(ae,r4),e(r4,v_e),e(v_e,mur),e(r4,fur),e(r4,tX),e(tX,gur),e(r4,hur),e(ae,uur),e(ae,t4),e(t4,T_e),e(T_e,pur),e(t4,_ur),e(t4,aX),e(aX,bur),e(t4,vur),e(ae,Tur),e(ae,a4),e(a4,F_e),e(F_e,Fur),e(a4,Cur),e(a4,nX),e(nX,Mur),e(a4,Eur),e(ae,yur),e(ae,n4),e(n4,C_e),e(C_e,wur),e(n4,Aur),e(n4,sX),e(sX,Lur),e(n4,Bur),e(Fo,xur),e(Fo,M_e),e(M_e,kur),e(Fo,Rur),g(q0,Fo,null),b(c,gRe,_),b(c,Ic,_),e(Ic,s4),e(s4,E_e),g(G0,E_e,null),e(Ic,Sur),e(Ic,y_e),e(y_e,Pur),b(c,hRe,_),b(c,Ar,_),g(O0,Ar,null),e(Ar,$ur),e(Ar,Nc),e(Nc,Iur),e(Nc,w_e),e(w_e,Nur),e(Nc,jur),e(Nc,A_e),e(A_e,Dur),e(Nc,qur),e(Ar,Gur),e(Ar,X0),e(X0,Our),e(X0,L_e),e(L_e,Xur),e(X0,Vur),e(Ar,zur),e(Ar,Ft),g(V0,Ft,null),e(Ft,Wur),e(Ft,B_e),e(B_e,Qur),e(Ft,Hur),e(Ft,jc),e(jc,Uur),e(jc,x_e),e(x_e,Jur),e(jc,Yur),e(jc,k_e),e(k_e,Kur),e(jc,Zur),e(Ft,epr),e(Ft,R_e),e(R_e,opr),e(Ft,rpr),g(z0,Ft,null),e(Ar,tpr),e(Ar,Co),g(W0,Co,null),e(Co,apr),e(Co,S_e),e(S_e,npr),e(Co,spr),e(Co,En),e(En,lpr),e(En,P_e),e(P_e,ipr),e(En,dpr),e(En,$_e),e($_e,cpr),e(En,mpr),e(En,I_e),e(I_e,fpr),e(En,gpr),e(Co,hpr),e(Co,N_e),e(N_e,l4),e(l4,j_e),e(j_e,upr),e(l4,ppr),e(l4,lX),e(lX,_pr),e(l4,bpr),e(Co,vpr),e(Co,D_e),e(D_e,Tpr),e(Co,Fpr),g(Q0,Co,null),b(c,uRe,_),b(c,Dc,_),e(Dc,i4),e(i4,q_e),g(H0,q_e,null),e(Dc,Cpr),e(Dc,G_e),e(G_e,Mpr),b(c,pRe,_),b(c,Lr,_),g(U0,Lr,null),e(Lr,Epr),e(Lr,qc),e(qc,ypr),e(qc,O_e),e(O_e,wpr),e(qc,Apr),e(qc,X_e),e(X_e,Lpr),e(qc,Bpr),e(Lr,xpr),e(Lr,J0),e(J0,kpr),e(J0,V_e),e(V_e,Rpr),e(J0,Spr),e(Lr,Ppr),e(Lr,Ct),g(Y0,Ct,null),e(Ct,$pr),e(Ct,z_e),e(z_e,Ipr),e(Ct,Npr),e(Ct,Gc),e(Gc,jpr),e(Gc,W_e),e(W_e,Dpr),e(Gc,qpr),e(Gc,Q_e),e(Q_e,Gpr),e(Gc,Opr),e(Ct,Xpr),e(Ct,H_e),e(H_e,Vpr),e(Ct,zpr),g(K0,Ct,null),e(Lr,Wpr),e(Lr,Mo),g(Z0,Mo,null),e(Mo,Qpr),e(Mo,U_e),e(U_e,Hpr),e(Mo,Upr),e(Mo,yn),e(yn,Jpr),e(yn,J_e),e(J_e,Ypr),e(yn,Kpr),e(yn,Y_e),e(Y_e,Zpr),e(yn,e_r),e(yn,K_e),e(K_e,o_r),e(yn,r_r),e(Mo,t_r),e(Mo,Y),e(Y,d4),e(d4,Z_e),e(Z_e,a_r),e(d4,n_r),e(d4,iX),e(iX,s_r),e(d4,l_r),e(Y,i_r),e(Y,c4),e(c4,ebe),e(ebe,d_r),e(c4,c_r),e(c4,dX),e(dX,m_r),e(c4,f_r),e(Y,g_r),e(Y,m4),e(m4,obe),e(obe,h_r),e(m4,u_r),e(m4,cX),e(cX,p_r),e(m4,__r),e(Y,b_r),e(Y,f4),e(f4,rbe),e(rbe,v_r),e(f4,T_r),e(f4,mX),e(mX,F_r),e(f4,C_r),e(Y,M_r),e(Y,g4),e(g4,tbe),e(tbe,E_r),e(g4,y_r),e(g4,fX),e(fX,w_r),e(g4,A_r),e(Y,L_r),e(Y,h4),e(h4,abe),e(abe,B_r),e(h4,x_r),e(h4,gX),e(gX,k_r),e(h4,R_r),e(Y,S_r),e(Y,u4),e(u4,nbe),e(nbe,P_r),e(u4,$_r),e(u4,hX),e(hX,I_r),e(u4,N_r),e(Y,j_r),e(Y,p4),e(p4,sbe),e(sbe,D_r),e(p4,q_r),e(p4,uX),e(uX,G_r),e(p4,O_r),e(Y,X_r),e(Y,_4),e(_4,lbe),e(lbe,V_r),e(_4,z_r),e(_4,pX),e(pX,W_r),e(_4,Q_r),e(Y,H_r),e(Y,b4),e(b4,ibe),e(ibe,U_r),e(b4,J_r),e(b4,_X),e(_X,Y_r),e(b4,K_r),e(Y,Z_r),e(Y,v4),e(v4,dbe),e(dbe,ebr),e(v4,obr),e(v4,bX),e(bX,rbr),e(v4,tbr),e(Y,abr),e(Y,T4),e(T4,cbe),e(cbe,nbr),e(T4,sbr),e(T4,vX),e(vX,lbr),e(T4,ibr),e(Y,dbr),e(Y,F4),e(F4,mbe),e(mbe,cbr),e(F4,mbr),e(F4,TX),e(TX,fbr),e(F4,gbr),e(Y,hbr),e(Y,C4),e(C4,fbe),e(fbe,ubr),e(C4,pbr),e(C4,FX),e(FX,_br),e(C4,bbr),e(Y,vbr),e(Y,M4),e(M4,gbe),e(gbe,Tbr),e(M4,Fbr),e(M4,CX),e(CX,Cbr),e(M4,Mbr),e(Y,Ebr),e(Y,E4),e(E4,hbe),e(hbe,ybr),e(E4,wbr),e(E4,MX),e(MX,Abr),e(E4,Lbr),e(Y,Bbr),e(Y,y4),e(y4,ube),e(ube,xbr),e(y4,kbr),e(y4,EX),e(EX,Rbr),e(y4,Sbr),e(Y,Pbr),e(Y,w4),e(w4,pbe),e(pbe,$br),e(w4,Ibr),e(w4,yX),e(yX,Nbr),e(w4,jbr),e(Y,Dbr),e(Y,A4),e(A4,_be),e(_be,qbr),e(A4,Gbr),e(A4,wX),e(wX,Obr),e(A4,Xbr),e(Y,Vbr),e(Y,L4),e(L4,bbe),e(bbe,zbr),e(L4,Wbr),e(L4,AX),e(AX,Qbr),e(L4,Hbr),e(Mo,Ubr),e(Mo,vbe),e(vbe,Jbr),e(Mo,Ybr),g(eL,Mo,null),b(c,_Re,_),b(c,Oc,_),e(Oc,B4),e(B4,Tbe),g(oL,Tbe,null),e(Oc,Kbr),e(Oc,Fbe),e(Fbe,Zbr),b(c,bRe,_),b(c,Br,_),g(rL,Br,null),e(Br,e2r),e(Br,Xc),e(Xc,o2r),e(Xc,Cbe),e(Cbe,r2r),e(Xc,t2r),e(Xc,Mbe),e(Mbe,a2r),e(Xc,n2r),e(Br,s2r),e(Br,tL),e(tL,l2r),e(tL,Ebe),e(Ebe,i2r),e(tL,d2r),e(Br,c2r),e(Br,Mt),g(aL,Mt,null),e(Mt,m2r),e(Mt,ybe),e(ybe,f2r),e(Mt,g2r),e(Mt,Vc),e(Vc,h2r),e(Vc,wbe),e(wbe,u2r),e(Vc,p2r),e(Vc,Abe),e(Abe,_2r),e(Vc,b2r),e(Mt,v2r),e(Mt,Lbe),e(Lbe,T2r),e(Mt,F2r),g(nL,Mt,null),e(Br,C2r),e(Br,Eo),g(sL,Eo,null),e(Eo,M2r),e(Eo,Bbe),e(Bbe,E2r),e(Eo,y2r),e(Eo,wn),e(wn,w2r),e(wn,xbe),e(xbe,A2r),e(wn,L2r),e(wn,kbe),e(kbe,B2r),e(wn,x2r),e(wn,Rbe),e(Rbe,k2r),e(wn,R2r),e(Eo,S2r),e(Eo,Z),e(Z,x4),e(x4,Sbe),e(Sbe,P2r),e(x4,$2r),e(x4,LX),e(LX,I2r),e(x4,N2r),e(Z,j2r),e(Z,k4),e(k4,Pbe),e(Pbe,D2r),e(k4,q2r),e(k4,BX),e(BX,G2r),e(k4,O2r),e(Z,X2r),e(Z,R4),e(R4,$be),e($be,V2r),e(R4,z2r),e(R4,xX),e(xX,W2r),e(R4,Q2r),e(Z,H2r),e(Z,S4),e(S4,Ibe),e(Ibe,U2r),e(S4,J2r),e(S4,kX),e(kX,Y2r),e(S4,K2r),e(Z,Z2r),e(Z,P4),e(P4,Nbe),e(Nbe,evr),e(P4,ovr),e(P4,RX),e(RX,rvr),e(P4,tvr),e(Z,avr),e(Z,$4),e($4,jbe),e(jbe,nvr),e($4,svr),e($4,SX),e(SX,lvr),e($4,ivr),e(Z,dvr),e(Z,I4),e(I4,Dbe),e(Dbe,cvr),e(I4,mvr),e(I4,PX),e(PX,fvr),e(I4,gvr),e(Z,hvr),e(Z,N4),e(N4,qbe),e(qbe,uvr),e(N4,pvr),e(N4,$X),e($X,_vr),e(N4,bvr),e(Z,vvr),e(Z,j4),e(j4,Gbe),e(Gbe,Tvr),e(j4,Fvr),e(j4,IX),e(IX,Cvr),e(j4,Mvr),e(Z,Evr),e(Z,D4),e(D4,Obe),e(Obe,yvr),e(D4,wvr),e(D4,NX),e(NX,Avr),e(D4,Lvr),e(Z,Bvr),e(Z,q4),e(q4,Xbe),e(Xbe,xvr),e(q4,kvr),e(q4,jX),e(jX,Rvr),e(q4,Svr),e(Z,Pvr),e(Z,G4),e(G4,Vbe),e(Vbe,$vr),e(G4,Ivr),e(G4,DX),e(DX,Nvr),e(G4,jvr),e(Z,Dvr),e(Z,O4),e(O4,zbe),e(zbe,qvr),e(O4,Gvr),e(O4,qX),e(qX,Ovr),e(O4,Xvr),e(Z,Vvr),e(Z,X4),e(X4,Wbe),e(Wbe,zvr),e(X4,Wvr),e(X4,GX),e(GX,Qvr),e(X4,Hvr),e(Z,Uvr),e(Z,V4),e(V4,Qbe),e(Qbe,Jvr),e(V4,Yvr),e(V4,OX),e(OX,Kvr),e(V4,Zvr),e(Z,eTr),e(Z,z4),e(z4,Hbe),e(Hbe,oTr),e(z4,rTr),e(z4,XX),e(XX,tTr),e(z4,aTr),e(Z,nTr),e(Z,W4),e(W4,Ube),e(Ube,sTr),e(W4,lTr),e(W4,VX),e(VX,iTr),e(W4,dTr),e(Z,cTr),e(Z,Q4),e(Q4,Jbe),e(Jbe,mTr),e(Q4,fTr),e(Q4,zX),e(zX,gTr),e(Q4,hTr),e(Z,uTr),e(Z,H4),e(H4,Ybe),e(Ybe,pTr),e(H4,_Tr),e(H4,WX),e(WX,bTr),e(H4,vTr),e(Eo,TTr),e(Eo,Kbe),e(Kbe,FTr),e(Eo,CTr),g(lL,Eo,null),b(c,vRe,_),b(c,zc,_),e(zc,U4),e(U4,Zbe),g(iL,Zbe,null),e(zc,MTr),e(zc,e2e),e(e2e,ETr),b(c,TRe,_),b(c,xr,_),g(dL,xr,null),e(xr,yTr),e(xr,Wc),e(Wc,wTr),e(Wc,o2e),e(o2e,ATr),e(Wc,LTr),e(Wc,r2e),e(r2e,BTr),e(Wc,xTr),e(xr,kTr),e(xr,cL),e(cL,RTr),e(cL,t2e),e(t2e,STr),e(cL,PTr),e(xr,$Tr),e(xr,Et),g(mL,Et,null),e(Et,ITr),e(Et,a2e),e(a2e,NTr),e(Et,jTr),e(Et,Qc),e(Qc,DTr),e(Qc,n2e),e(n2e,qTr),e(Qc,GTr),e(Qc,s2e),e(s2e,OTr),e(Qc,XTr),e(Et,VTr),e(Et,l2e),e(l2e,zTr),e(Et,WTr),g(fL,Et,null),e(xr,QTr),e(xr,yo),g(gL,yo,null),e(yo,HTr),e(yo,i2e),e(i2e,UTr),e(yo,JTr),e(yo,An),e(An,YTr),e(An,d2e),e(d2e,KTr),e(An,ZTr),e(An,c2e),e(c2e,e1r),e(An,o1r),e(An,m2e),e(m2e,r1r),e(An,t1r),e(yo,a1r),e(yo,f2e),e(f2e,J4),e(J4,g2e),e(g2e,n1r),e(J4,s1r),e(J4,QX),e(QX,l1r),e(J4,i1r),e(yo,d1r),e(yo,h2e),e(h2e,c1r),e(yo,m1r),g(hL,yo,null),b(c,FRe,_),b(c,Hc,_),e(Hc,Y4),e(Y4,u2e),g(uL,u2e,null),e(Hc,f1r),e(Hc,p2e),e(p2e,g1r),b(c,CRe,_),b(c,kr,_),g(pL,kr,null),e(kr,h1r),e(kr,Uc),e(Uc,u1r),e(Uc,_2e),e(_2e,p1r),e(Uc,_1r),e(Uc,b2e),e(b2e,b1r),e(Uc,v1r),e(kr,T1r),e(kr,_L),e(_L,F1r),e(_L,v2e),e(v2e,C1r),e(_L,M1r),e(kr,E1r),e(kr,yt),g(bL,yt,null),e(yt,y1r),e(yt,T2e),e(T2e,w1r),e(yt,A1r),e(yt,Jc),e(Jc,L1r),e(Jc,F2e),e(F2e,B1r),e(Jc,x1r),e(Jc,C2e),e(C2e,k1r),e(Jc,R1r),e(yt,S1r),e(yt,M2e),e(M2e,P1r),e(yt,$1r),g(vL,yt,null),e(kr,I1r),e(kr,wo),g(TL,wo,null),e(wo,N1r),e(wo,E2e),e(E2e,j1r),e(wo,D1r),e(wo,Ln),e(Ln,q1r),e(Ln,y2e),e(y2e,G1r),e(Ln,O1r),e(Ln,w2e),e(w2e,X1r),e(Ln,V1r),e(Ln,A2e),e(A2e,z1r),e(Ln,W1r),e(wo,Q1r),e(wo,L2e),e(L2e,K4),e(K4,B2e),e(B2e,H1r),e(K4,U1r),e(K4,HX),e(HX,J1r),e(K4,Y1r),e(wo,K1r),e(wo,x2e),e(x2e,Z1r),e(wo,eFr),g(FL,wo,null),b(c,MRe,_),b(c,Yc,_),e(Yc,Z4),e(Z4,k2e),g(CL,k2e,null),e(Yc,oFr),e(Yc,R2e),e(R2e,rFr),b(c,ERe,_),b(c,Rr,_),g(ML,Rr,null),e(Rr,tFr),e(Rr,Kc),e(Kc,aFr),e(Kc,S2e),e(S2e,nFr),e(Kc,sFr),e(Kc,P2e),e(P2e,lFr),e(Kc,iFr),e(Rr,dFr),e(Rr,EL),e(EL,cFr),e(EL,$2e),e($2e,mFr),e(EL,fFr),e(Rr,gFr),e(Rr,wt),g(yL,wt,null),e(wt,hFr),e(wt,I2e),e(I2e,uFr),e(wt,pFr),e(wt,Zc),e(Zc,_Fr),e(Zc,N2e),e(N2e,bFr),e(Zc,vFr),e(Zc,j2e),e(j2e,TFr),e(Zc,FFr),e(wt,CFr),e(wt,D2e),e(D2e,MFr),e(wt,EFr),g(wL,wt,null),e(Rr,yFr),e(Rr,Ao),g(AL,Ao,null),e(Ao,wFr),e(Ao,q2e),e(q2e,AFr),e(Ao,LFr),e(Ao,Bn),e(Bn,BFr),e(Bn,G2e),e(G2e,xFr),e(Bn,kFr),e(Bn,O2e),e(O2e,RFr),e(Bn,SFr),e(Bn,X2e),e(X2e,PFr),e(Bn,$Fr),e(Ao,IFr),e(Ao,z),e(z,eE),e(eE,V2e),e(V2e,NFr),e(eE,jFr),e(eE,UX),e(UX,DFr),e(eE,qFr),e(z,GFr),e(z,oE),e(oE,z2e),e(z2e,OFr),e(oE,XFr),e(oE,JX),e(JX,VFr),e(oE,zFr),e(z,WFr),e(z,rE),e(rE,W2e),e(W2e,QFr),e(rE,HFr),e(rE,YX),e(YX,UFr),e(rE,JFr),e(z,YFr),e(z,tE),e(tE,Q2e),e(Q2e,KFr),e(tE,ZFr),e(tE,KX),e(KX,eCr),e(tE,oCr),e(z,rCr),e(z,aE),e(aE,H2e),e(H2e,tCr),e(aE,aCr),e(aE,ZX),e(ZX,nCr),e(aE,sCr),e(z,lCr),e(z,nE),e(nE,U2e),e(U2e,iCr),e(nE,dCr),e(nE,eV),e(eV,cCr),e(nE,mCr),e(z,fCr),e(z,sE),e(sE,J2e),e(J2e,gCr),e(sE,hCr),e(sE,oV),e(oV,uCr),e(sE,pCr),e(z,_Cr),e(z,lE),e(lE,Y2e),e(Y2e,bCr),e(lE,vCr),e(lE,rV),e(rV,TCr),e(lE,FCr),e(z,CCr),e(z,iE),e(iE,K2e),e(K2e,MCr),e(iE,ECr),e(iE,tV),e(tV,yCr),e(iE,wCr),e(z,ACr),e(z,dE),e(dE,Z2e),e(Z2e,LCr),e(dE,BCr),e(dE,aV),e(aV,xCr),e(dE,kCr),e(z,RCr),e(z,cE),e(cE,eve),e(eve,SCr),e(cE,PCr),e(cE,nV),e(nV,$Cr),e(cE,ICr),e(z,NCr),e(z,mE),e(mE,ove),e(ove,jCr),e(mE,DCr),e(mE,sV),e(sV,qCr),e(mE,GCr),e(z,OCr),e(z,fE),e(fE,rve),e(rve,XCr),e(fE,VCr),e(fE,lV),e(lV,zCr),e(fE,WCr),e(z,QCr),e(z,gE),e(gE,tve),e(tve,HCr),e(gE,UCr),e(gE,iV),e(iV,JCr),e(gE,YCr),e(z,KCr),e(z,hE),e(hE,ave),e(ave,ZCr),e(hE,eMr),e(hE,dV),e(dV,oMr),e(hE,rMr),e(z,tMr),e(z,uE),e(uE,nve),e(nve,aMr),e(uE,nMr),e(uE,cV),e(cV,sMr),e(uE,lMr),e(z,iMr),e(z,pE),e(pE,sve),e(sve,dMr),e(pE,cMr),e(pE,mV),e(mV,mMr),e(pE,fMr),e(z,gMr),e(z,_E),e(_E,lve),e(lve,hMr),e(_E,uMr),e(_E,fV),e(fV,pMr),e(_E,_Mr),e(z,bMr),e(z,bE),e(bE,ive),e(ive,vMr),e(bE,TMr),e(bE,gV),e(gV,FMr),e(bE,CMr),e(z,MMr),e(z,vE),e(vE,dve),e(dve,EMr),e(vE,yMr),e(vE,hV),e(hV,wMr),e(vE,AMr),e(z,LMr),e(z,TE),e(TE,cve),e(cve,BMr),e(TE,xMr),e(TE,uV),e(uV,kMr),e(TE,RMr),e(z,SMr),e(z,FE),e(FE,mve),e(mve,PMr),e(FE,$Mr),e(FE,pV),e(pV,IMr),e(FE,NMr),e(z,jMr),e(z,CE),e(CE,fve),e(fve,DMr),e(CE,qMr),e(CE,_V),e(_V,GMr),e(CE,OMr),e(z,XMr),e(z,ME),e(ME,gve),e(gve,VMr),e(ME,zMr),e(ME,bV),e(bV,WMr),e(ME,QMr),e(z,HMr),e(z,EE),e(EE,hve),e(hve,UMr),e(EE,JMr),e(EE,vV),e(vV,YMr),e(EE,KMr),e(Ao,ZMr),e(Ao,uve),e(uve,e4r),e(Ao,o4r),g(LL,Ao,null),b(c,yRe,_),b(c,em,_),e(em,yE),e(yE,pve),g(BL,pve,null),e(em,r4r),e(em,_ve),e(_ve,t4r),b(c,wRe,_),b(c,Sr,_),g(xL,Sr,null),e(Sr,a4r),e(Sr,om),e(om,n4r),e(om,bve),e(bve,s4r),e(om,l4r),e(om,vve),e(vve,i4r),e(om,d4r),e(Sr,c4r),e(Sr,kL),e(kL,m4r),e(kL,Tve),e(Tve,f4r),e(kL,g4r),e(Sr,h4r),e(Sr,At),g(RL,At,null),e(At,u4r),e(At,Fve),e(Fve,p4r),e(At,_4r),e(At,rm),e(rm,b4r),e(rm,Cve),e(Cve,v4r),e(rm,T4r),e(rm,Mve),e(Mve,F4r),e(rm,C4r),e(At,M4r),e(At,Eve),e(Eve,E4r),e(At,y4r),g(SL,At,null),e(Sr,w4r),e(Sr,Lo),g(PL,Lo,null),e(Lo,A4r),e(Lo,yve),e(yve,L4r),e(Lo,B4r),e(Lo,xn),e(xn,x4r),e(xn,wve),e(wve,k4r),e(xn,R4r),e(xn,Ave),e(Ave,S4r),e(xn,P4r),e(xn,Lve),e(Lve,$4r),e(xn,I4r),e(Lo,N4r),e(Lo,ca),e(ca,wE),e(wE,Bve),e(Bve,j4r),e(wE,D4r),e(wE,TV),e(TV,q4r),e(wE,G4r),e(ca,O4r),e(ca,AE),e(AE,xve),e(xve,X4r),e(AE,V4r),e(AE,FV),e(FV,z4r),e(AE,W4r),e(ca,Q4r),e(ca,LE),e(LE,kve),e(kve,H4r),e(LE,U4r),e(LE,CV),e(CV,J4r),e(LE,Y4r),e(ca,K4r),e(ca,BE),e(BE,Rve),e(Rve,Z4r),e(BE,eEr),e(BE,MV),e(MV,oEr),e(BE,rEr),e(ca,tEr),e(ca,xE),e(xE,Sve),e(Sve,aEr),e(xE,nEr),e(xE,EV),e(EV,sEr),e(xE,lEr),e(Lo,iEr),e(Lo,Pve),e(Pve,dEr),e(Lo,cEr),g($L,Lo,null),b(c,ARe,_),b(c,tm,_),e(tm,kE),e(kE,$ve),g(IL,$ve,null),e(tm,mEr),e(tm,Ive),e(Ive,fEr),b(c,LRe,_),b(c,Pr,_),g(NL,Pr,null),e(Pr,gEr),e(Pr,am),e(am,hEr),e(am,Nve),e(Nve,uEr),e(am,pEr),e(am,jve),e(jve,_Er),e(am,bEr),e(Pr,vEr),e(Pr,jL),e(jL,TEr),e(jL,Dve),e(Dve,FEr),e(jL,CEr),e(Pr,MEr),e(Pr,Lt),g(DL,Lt,null),e(Lt,EEr),e(Lt,qve),e(qve,yEr),e(Lt,wEr),e(Lt,nm),e(nm,AEr),e(nm,Gve),e(Gve,LEr),e(nm,BEr),e(nm,Ove),e(Ove,xEr),e(nm,kEr),e(Lt,REr),e(Lt,Xve),e(Xve,SEr),e(Lt,PEr),g(qL,Lt,null),e(Pr,$Er),e(Pr,Bo),g(GL,Bo,null),e(Bo,IEr),e(Bo,Vve),e(Vve,NEr),e(Bo,jEr),e(Bo,kn),e(kn,DEr),e(kn,zve),e(zve,qEr),e(kn,GEr),e(kn,Wve),e(Wve,OEr),e(kn,XEr),e(kn,Qve),e(Qve,VEr),e(kn,zEr),e(Bo,WEr),e(Bo,ce),e(ce,RE),e(RE,Hve),e(Hve,QEr),e(RE,HEr),e(RE,yV),e(yV,UEr),e(RE,JEr),e(ce,YEr),e(ce,SE),e(SE,Uve),e(Uve,KEr),e(SE,ZEr),e(SE,wV),e(wV,e3r),e(SE,o3r),e(ce,r3r),e(ce,PE),e(PE,Jve),e(Jve,t3r),e(PE,a3r),e(PE,AV),e(AV,n3r),e(PE,s3r),e(ce,l3r),e(ce,$E),e($E,Yve),e(Yve,i3r),e($E,d3r),e($E,LV),e(LV,c3r),e($E,m3r),e(ce,f3r),e(ce,IE),e(IE,Kve),e(Kve,g3r),e(IE,h3r),e(IE,BV),e(BV,u3r),e(IE,p3r),e(ce,_3r),e(ce,NE),e(NE,Zve),e(Zve,b3r),e(NE,v3r),e(NE,xV),e(xV,T3r),e(NE,F3r),e(ce,C3r),e(ce,jE),e(jE,eTe),e(eTe,M3r),e(jE,E3r),e(jE,kV),e(kV,y3r),e(jE,w3r),e(ce,A3r),e(ce,DE),e(DE,oTe),e(oTe,L3r),e(DE,B3r),e(DE,RV),e(RV,x3r),e(DE,k3r),e(ce,R3r),e(ce,qE),e(qE,rTe),e(rTe,S3r),e(qE,P3r),e(qE,SV),e(SV,$3r),e(qE,I3r),e(ce,N3r),e(ce,GE),e(GE,tTe),e(tTe,j3r),e(GE,D3r),e(GE,PV),e(PV,q3r),e(GE,G3r),e(ce,O3r),e(ce,OE),e(OE,aTe),e(aTe,X3r),e(OE,V3r),e(OE,$V),e($V,z3r),e(OE,W3r),e(ce,Q3r),e(ce,XE),e(XE,nTe),e(nTe,H3r),e(XE,U3r),e(XE,IV),e(IV,J3r),e(XE,Y3r),e(Bo,K3r),e(Bo,sTe),e(sTe,Z3r),e(Bo,e5r),g(OL,Bo,null),b(c,BRe,_),b(c,sm,_),e(sm,VE),e(VE,lTe),g(XL,lTe,null),e(sm,o5r),e(sm,iTe),e(iTe,r5r),b(c,xRe,_),b(c,$r,_),g(VL,$r,null),e($r,t5r),e($r,lm),e(lm,a5r),e(lm,dTe),e(dTe,n5r),e(lm,s5r),e(lm,cTe),e(cTe,l5r),e(lm,i5r),e($r,d5r),e($r,zL),e(zL,c5r),e(zL,mTe),e(mTe,m5r),e(zL,f5r),e($r,g5r),e($r,Bt),g(WL,Bt,null),e(Bt,h5r),e(Bt,fTe),e(fTe,u5r),e(Bt,p5r),e(Bt,im),e(im,_5r),e(im,gTe),e(gTe,b5r),e(im,v5r),e(im,hTe),e(hTe,T5r),e(im,F5r),e(Bt,C5r),e(Bt,uTe),e(uTe,M5r),e(Bt,E5r),g(QL,Bt,null),e($r,y5r),e($r,xo),g(HL,xo,null),e(xo,w5r),e(xo,pTe),e(pTe,A5r),e(xo,L5r),e(xo,Rn),e(Rn,B5r),e(Rn,_Te),e(_Te,x5r),e(Rn,k5r),e(Rn,bTe),e(bTe,R5r),e(Rn,S5r),e(Rn,vTe),e(vTe,P5r),e(Rn,$5r),e(xo,I5r),e(xo,_e),e(_e,zE),e(zE,TTe),e(TTe,N5r),e(zE,j5r),e(zE,NV),e(NV,D5r),e(zE,q5r),e(_e,G5r),e(_e,WE),e(WE,FTe),e(FTe,O5r),e(WE,X5r),e(WE,jV),e(jV,V5r),e(WE,z5r),e(_e,W5r),e(_e,QE),e(QE,CTe),e(CTe,Q5r),e(QE,H5r),e(QE,DV),e(DV,U5r),e(QE,J5r),e(_e,Y5r),e(_e,HE),e(HE,MTe),e(MTe,K5r),e(HE,Z5r),e(HE,qV),e(qV,eyr),e(HE,oyr),e(_e,ryr),e(_e,UE),e(UE,ETe),e(ETe,tyr),e(UE,ayr),e(UE,GV),e(GV,nyr),e(UE,syr),e(_e,lyr),e(_e,JE),e(JE,yTe),e(yTe,iyr),e(JE,dyr),e(JE,OV),e(OV,cyr),e(JE,myr),e(_e,fyr),e(_e,YE),e(YE,wTe),e(wTe,gyr),e(YE,hyr),e(YE,XV),e(XV,uyr),e(YE,pyr),e(_e,_yr),e(_e,KE),e(KE,ATe),e(ATe,byr),e(KE,vyr),e(KE,VV),e(VV,Tyr),e(KE,Fyr),e(_e,Cyr),e(_e,ZE),e(ZE,LTe),e(LTe,Myr),e(ZE,Eyr),e(ZE,zV),e(zV,yyr),e(ZE,wyr),e(_e,Ayr),e(_e,e3),e(e3,BTe),e(BTe,Lyr),e(e3,Byr),e(e3,WV),e(WV,xyr),e(e3,kyr),e(xo,Ryr),e(xo,xTe),e(xTe,Syr),e(xo,Pyr),g(UL,xo,null),b(c,kRe,_),b(c,dm,_),e(dm,o3),e(o3,kTe),g(JL,kTe,null),e(dm,$yr),e(dm,RTe),e(RTe,Iyr),b(c,RRe,_),b(c,Ir,_),g(YL,Ir,null),e(Ir,Nyr),e(Ir,cm),e(cm,jyr),e(cm,STe),e(STe,Dyr),e(cm,qyr),e(cm,PTe),e(PTe,Gyr),e(cm,Oyr),e(Ir,Xyr),e(Ir,KL),e(KL,Vyr),e(KL,$Te),e($Te,zyr),e(KL,Wyr),e(Ir,Qyr),e(Ir,xt),g(ZL,xt,null),e(xt,Hyr),e(xt,ITe),e(ITe,Uyr),e(xt,Jyr),e(xt,mm),e(mm,Yyr),e(mm,NTe),e(NTe,Kyr),e(mm,Zyr),e(mm,jTe),e(jTe,ewr),e(mm,owr),e(xt,rwr),e(xt,DTe),e(DTe,twr),e(xt,awr),g(e7,xt,null),e(Ir,nwr),e(Ir,ko),g(o7,ko,null),e(ko,swr),e(ko,qTe),e(qTe,lwr),e(ko,iwr),e(ko,Sn),e(Sn,dwr),e(Sn,GTe),e(GTe,cwr),e(Sn,mwr),e(Sn,OTe),e(OTe,fwr),e(Sn,gwr),e(Sn,XTe),e(XTe,hwr),e(Sn,uwr),e(ko,pwr),e(ko,Me),e(Me,r3),e(r3,VTe),e(VTe,_wr),e(r3,bwr),e(r3,QV),e(QV,vwr),e(r3,Twr),e(Me,Fwr),e(Me,t3),e(t3,zTe),e(zTe,Cwr),e(t3,Mwr),e(t3,HV),e(HV,Ewr),e(t3,ywr),e(Me,wwr),e(Me,a3),e(a3,WTe),e(WTe,Awr),e(a3,Lwr),e(a3,UV),e(UV,Bwr),e(a3,xwr),e(Me,kwr),e(Me,n3),e(n3,QTe),e(QTe,Rwr),e(n3,Swr),e(n3,JV),e(JV,Pwr),e(n3,$wr),e(Me,Iwr),e(Me,s3),e(s3,HTe),e(HTe,Nwr),e(s3,jwr),e(s3,YV),e(YV,Dwr),e(s3,qwr),e(Me,Gwr),e(Me,l3),e(l3,UTe),e(UTe,Owr),e(l3,Xwr),e(l3,KV),e(KV,Vwr),e(l3,zwr),e(Me,Wwr),e(Me,i3),e(i3,JTe),e(JTe,Qwr),e(i3,Hwr),e(i3,ZV),e(ZV,Uwr),e(i3,Jwr),e(Me,Ywr),e(Me,d3),e(d3,YTe),e(YTe,Kwr),e(d3,Zwr),e(d3,ez),e(ez,e6r),e(d3,o6r),e(Me,r6r),e(Me,c3),e(c3,KTe),e(KTe,t6r),e(c3,a6r),e(c3,oz),e(oz,n6r),e(c3,s6r),e(ko,l6r),e(ko,ZTe),e(ZTe,i6r),e(ko,d6r),g(r7,ko,null),b(c,SRe,_),b(c,fm,_),e(fm,m3),e(m3,e1e),g(t7,e1e,null),e(fm,c6r),e(fm,o1e),e(o1e,m6r),b(c,PRe,_),b(c,Nr,_),g(a7,Nr,null),e(Nr,f6r),e(Nr,gm),e(gm,g6r),e(gm,r1e),e(r1e,h6r),e(gm,u6r),e(gm,t1e),e(t1e,p6r),e(gm,_6r),e(Nr,b6r),e(Nr,n7),e(n7,v6r),e(n7,a1e),e(a1e,T6r),e(n7,F6r),e(Nr,C6r),e(Nr,kt),g(s7,kt,null),e(kt,M6r),e(kt,n1e),e(n1e,E6r),e(kt,y6r),e(kt,hm),e(hm,w6r),e(hm,s1e),e(s1e,A6r),e(hm,L6r),e(hm,l1e),e(l1e,B6r),e(hm,x6r),e(kt,k6r),e(kt,i1e),e(i1e,R6r),e(kt,S6r),g(l7,kt,null),e(Nr,P6r),e(Nr,Ro),g(i7,Ro,null),e(Ro,$6r),e(Ro,d1e),e(d1e,I6r),e(Ro,N6r),e(Ro,Pn),e(Pn,j6r),e(Pn,c1e),e(c1e,D6r),e(Pn,q6r),e(Pn,m1e),e(m1e,G6r),e(Pn,O6r),e(Pn,f1e),e(f1e,X6r),e(Pn,V6r),e(Ro,z6r),e(Ro,be),e(be,f3),e(f3,g1e),e(g1e,W6r),e(f3,Q6r),e(f3,rz),e(rz,H6r),e(f3,U6r),e(be,J6r),e(be,g3),e(g3,h1e),e(h1e,Y6r),e(g3,K6r),e(g3,tz),e(tz,Z6r),e(g3,eAr),e(be,oAr),e(be,h3),e(h3,u1e),e(u1e,rAr),e(h3,tAr),e(h3,az),e(az,aAr),e(h3,nAr),e(be,sAr),e(be,u3),e(u3,p1e),e(p1e,lAr),e(u3,iAr),e(u3,nz),e(nz,dAr),e(u3,cAr),e(be,mAr),e(be,p3),e(p3,_1e),e(_1e,fAr),e(p3,gAr),e(p3,sz),e(sz,hAr),e(p3,uAr),e(be,pAr),e(be,_3),e(_3,b1e),e(b1e,_Ar),e(_3,bAr),e(_3,lz),e(lz,vAr),e(_3,TAr),e(be,FAr),e(be,b3),e(b3,v1e),e(v1e,CAr),e(b3,MAr),e(b3,iz),e(iz,EAr),e(b3,yAr),e(be,wAr),e(be,v3),e(v3,T1e),e(T1e,AAr),e(v3,LAr),e(v3,dz),e(dz,BAr),e(v3,xAr),e(be,kAr),e(be,T3),e(T3,F1e),e(F1e,RAr),e(T3,SAr),e(T3,cz),e(cz,PAr),e(T3,$Ar),e(be,IAr),e(be,F3),e(F3,C1e),e(C1e,NAr),e(F3,jAr),e(F3,mz),e(mz,DAr),e(F3,qAr),e(Ro,GAr),e(Ro,M1e),e(M1e,OAr),e(Ro,XAr),g(d7,Ro,null),b(c,$Re,_),b(c,um,_),e(um,C3),e(C3,E1e),g(c7,E1e,null),e(um,VAr),e(um,y1e),e(y1e,zAr),b(c,IRe,_),b(c,jr,_),g(m7,jr,null),e(jr,WAr),e(jr,pm),e(pm,QAr),e(pm,w1e),e(w1e,HAr),e(pm,UAr),e(pm,A1e),e(A1e,JAr),e(pm,YAr),e(jr,KAr),e(jr,f7),e(f7,ZAr),e(f7,L1e),e(L1e,e0r),e(f7,o0r),e(jr,r0r),e(jr,Rt),g(g7,Rt,null),e(Rt,t0r),e(Rt,B1e),e(B1e,a0r),e(Rt,n0r),e(Rt,_m),e(_m,s0r),e(_m,x1e),e(x1e,l0r),e(_m,i0r),e(_m,k1e),e(k1e,d0r),e(_m,c0r),e(Rt,m0r),e(Rt,R1e),e(R1e,f0r),e(Rt,g0r),g(h7,Rt,null),e(jr,h0r),e(jr,So),g(u7,So,null),e(So,u0r),e(So,S1e),e(S1e,p0r),e(So,_0r),e(So,$n),e($n,b0r),e($n,P1e),e(P1e,v0r),e($n,T0r),e($n,$1e),e($1e,F0r),e($n,C0r),e($n,I1e),e(I1e,M0r),e($n,E0r),e(So,y0r),e(So,ve),e(ve,M3),e(M3,N1e),e(N1e,w0r),e(M3,A0r),e(M3,fz),e(fz,L0r),e(M3,B0r),e(ve,x0r),e(ve,E3),e(E3,j1e),e(j1e,k0r),e(E3,R0r),e(E3,gz),e(gz,S0r),e(E3,P0r),e(ve,$0r),e(ve,y3),e(y3,D1e),e(D1e,I0r),e(y3,N0r),e(y3,hz),e(hz,j0r),e(y3,D0r),e(ve,q0r),e(ve,w3),e(w3,q1e),e(q1e,G0r),e(w3,O0r),e(w3,uz),e(uz,X0r),e(w3,V0r),e(ve,z0r),e(ve,A3),e(A3,G1e),e(G1e,W0r),e(A3,Q0r),e(A3,pz),e(pz,H0r),e(A3,U0r),e(ve,J0r),e(ve,L3),e(L3,O1e),e(O1e,Y0r),e(L3,K0r),e(L3,_z),e(_z,Z0r),e(L3,eLr),e(ve,oLr),e(ve,B3),e(B3,X1e),e(X1e,rLr),e(B3,tLr),e(B3,bz),e(bz,aLr),e(B3,nLr),e(ve,sLr),e(ve,x3),e(x3,V1e),e(V1e,lLr),e(x3,iLr),e(x3,vz),e(vz,dLr),e(x3,cLr),e(ve,mLr),e(ve,k3),e(k3,z1e),e(z1e,fLr),e(k3,gLr),e(k3,Tz),e(Tz,hLr),e(k3,uLr),e(ve,pLr),e(ve,R3),e(R3,W1e),e(W1e,_Lr),e(R3,bLr),e(R3,Fz),e(Fz,vLr),e(R3,TLr),e(So,FLr),e(So,Q1e),e(Q1e,CLr),e(So,MLr),g(p7,So,null),b(c,NRe,_),b(c,bm,_),e(bm,S3),e(S3,H1e),g(_7,H1e,null),e(bm,ELr),e(bm,U1e),e(U1e,yLr),b(c,jRe,_),b(c,Dr,_),g(b7,Dr,null),e(Dr,wLr),e(Dr,vm),e(vm,ALr),e(vm,J1e),e(J1e,LLr),e(vm,BLr),e(vm,Y1e),e(Y1e,xLr),e(vm,kLr),e(Dr,RLr),e(Dr,v7),e(v7,SLr),e(v7,K1e),e(K1e,PLr),e(v7,$Lr),e(Dr,ILr),e(Dr,St),g(T7,St,null),e(St,NLr),e(St,Z1e),e(Z1e,jLr),e(St,DLr),e(St,Tm),e(Tm,qLr),e(Tm,eFe),e(eFe,GLr),e(Tm,OLr),e(Tm,oFe),e(oFe,XLr),e(Tm,VLr),e(St,zLr),e(St,rFe),e(rFe,WLr),e(St,QLr),g(F7,St,null),e(Dr,HLr),e(Dr,Po),g(C7,Po,null),e(Po,ULr),e(Po,tFe),e(tFe,JLr),e(Po,YLr),e(Po,In),e(In,KLr),e(In,aFe),e(aFe,ZLr),e(In,e7r),e(In,nFe),e(nFe,o7r),e(In,r7r),e(In,sFe),e(sFe,t7r),e(In,a7r),e(Po,n7r),e(Po,Se),e(Se,P3),e(P3,lFe),e(lFe,s7r),e(P3,l7r),e(P3,Cz),e(Cz,i7r),e(P3,d7r),e(Se,c7r),e(Se,$3),e($3,iFe),e(iFe,m7r),e($3,f7r),e($3,Mz),e(Mz,g7r),e($3,h7r),e(Se,u7r),e(Se,I3),e(I3,dFe),e(dFe,p7r),e(I3,_7r),e(I3,Ez),e(Ez,b7r),e(I3,v7r),e(Se,T7r),e(Se,N3),e(N3,cFe),e(cFe,F7r),e(N3,C7r),e(N3,yz),e(yz,M7r),e(N3,E7r),e(Se,y7r),e(Se,j3),e(j3,mFe),e(mFe,w7r),e(j3,A7r),e(j3,wz),e(wz,L7r),e(j3,B7r),e(Se,x7r),e(Se,D3),e(D3,fFe),e(fFe,k7r),e(D3,R7r),e(D3,Az),e(Az,S7r),e(D3,P7r),e(Se,$7r),e(Se,q3),e(q3,gFe),e(gFe,I7r),e(q3,N7r),e(q3,Lz),e(Lz,j7r),e(q3,D7r),e(Se,q7r),e(Se,G3),e(G3,hFe),e(hFe,G7r),e(G3,O7r),e(G3,Bz),e(Bz,X7r),e(G3,V7r),e(Po,z7r),e(Po,uFe),e(uFe,W7r),e(Po,Q7r),g(M7,Po,null),b(c,DRe,_),b(c,Fm,_),e(Fm,O3),e(O3,pFe),g(E7,pFe,null),e(Fm,H7r),e(Fm,_Fe),e(_Fe,U7r),b(c,qRe,_),b(c,qr,_),g(y7,qr,null),e(qr,J7r),e(qr,Cm),e(Cm,Y7r),e(Cm,bFe),e(bFe,K7r),e(Cm,Z7r),e(Cm,vFe),e(vFe,e8r),e(Cm,o8r),e(qr,r8r),e(qr,w7),e(w7,t8r),e(w7,TFe),e(TFe,a8r),e(w7,n8r),e(qr,s8r),e(qr,Pt),g(A7,Pt,null),e(Pt,l8r),e(Pt,FFe),e(FFe,i8r),e(Pt,d8r),e(Pt,Mm),e(Mm,c8r),e(Mm,CFe),e(CFe,m8r),e(Mm,f8r),e(Mm,MFe),e(MFe,g8r),e(Mm,h8r),e(Pt,u8r),e(Pt,EFe),e(EFe,p8r),e(Pt,_8r),g(L7,Pt,null),e(qr,b8r),e(qr,$o),g(B7,$o,null),e($o,v8r),e($o,yFe),e(yFe,T8r),e($o,F8r),e($o,Nn),e(Nn,C8r),e(Nn,wFe),e(wFe,M8r),e(Nn,E8r),e(Nn,AFe),e(AFe,y8r),e(Nn,w8r),e(Nn,LFe),e(LFe,A8r),e(Nn,L8r),e($o,B8r),e($o,Pe),e(Pe,X3),e(X3,BFe),e(BFe,x8r),e(X3,k8r),e(X3,xz),e(xz,R8r),e(X3,S8r),e(Pe,P8r),e(Pe,V3),e(V3,xFe),e(xFe,$8r),e(V3,I8r),e(V3,kz),e(kz,N8r),e(V3,j8r),e(Pe,D8r),e(Pe,z3),e(z3,kFe),e(kFe,q8r),e(z3,G8r),e(z3,Rz),e(Rz,O8r),e(z3,X8r),e(Pe,V8r),e(Pe,W3),e(W3,RFe),e(RFe,z8r),e(W3,W8r),e(W3,Sz),e(Sz,Q8r),e(W3,H8r),e(Pe,U8r),e(Pe,Q3),e(Q3,SFe),e(SFe,J8r),e(Q3,Y8r),e(Q3,Pz),e(Pz,K8r),e(Q3,Z8r),e(Pe,e9r),e(Pe,H3),e(H3,PFe),e(PFe,o9r),e(H3,r9r),e(H3,$z),e($z,t9r),e(H3,a9r),e(Pe,n9r),e(Pe,U3),e(U3,$Fe),e($Fe,s9r),e(U3,l9r),e(U3,Iz),e(Iz,i9r),e(U3,d9r),e(Pe,c9r),e(Pe,J3),e(J3,IFe),e(IFe,m9r),e(J3,f9r),e(J3,Nz),e(Nz,g9r),e(J3,h9r),e($o,u9r),e($o,NFe),e(NFe,p9r),e($o,_9r),g(x7,$o,null),b(c,GRe,_),b(c,Em,_),e(Em,Y3),e(Y3,jFe),g(k7,jFe,null),e(Em,b9r),e(Em,DFe),e(DFe,v9r),b(c,ORe,_),b(c,Gr,_),g(R7,Gr,null),e(Gr,T9r),e(Gr,ym),e(ym,F9r),e(ym,qFe),e(qFe,C9r),e(ym,M9r),e(ym,GFe),e(GFe,E9r),e(ym,y9r),e(Gr,w9r),e(Gr,S7),e(S7,A9r),e(S7,OFe),e(OFe,L9r),e(S7,B9r),e(Gr,x9r),e(Gr,$t),g(P7,$t,null),e($t,k9r),e($t,XFe),e(XFe,R9r),e($t,S9r),e($t,wm),e(wm,P9r),e(wm,VFe),e(VFe,$9r),e(wm,I9r),e(wm,zFe),e(zFe,N9r),e(wm,j9r),e($t,D9r),e($t,WFe),e(WFe,q9r),e($t,G9r),g($7,$t,null),e(Gr,O9r),e(Gr,Io),g(I7,Io,null),e(Io,X9r),e(Io,QFe),e(QFe,V9r),e(Io,z9r),e(Io,jn),e(jn,W9r),e(jn,HFe),e(HFe,Q9r),e(jn,H9r),e(jn,UFe),e(UFe,U9r),e(jn,J9r),e(jn,JFe),e(JFe,Y9r),e(jn,K9r),e(Io,Z9r),e(Io,YFe),e(YFe,K3),e(K3,KFe),e(KFe,eBr),e(K3,oBr),e(K3,jz),e(jz,rBr),e(K3,tBr),e(Io,aBr),e(Io,ZFe),e(ZFe,nBr),e(Io,sBr),g(N7,Io,null),b(c,XRe,_),b(c,Am,_),e(Am,Z3),e(Z3,eCe),g(j7,eCe,null),e(Am,lBr),e(Am,oCe),e(oCe,iBr),b(c,VRe,_),b(c,Or,_),g(D7,Or,null),e(Or,dBr),e(Or,Lm),e(Lm,cBr),e(Lm,rCe),e(rCe,mBr),e(Lm,fBr),e(Lm,tCe),e(tCe,gBr),e(Lm,hBr),e(Or,uBr),e(Or,q7),e(q7,pBr),e(q7,aCe),e(aCe,_Br),e(q7,bBr),e(Or,vBr),e(Or,It),g(G7,It,null),e(It,TBr),e(It,nCe),e(nCe,FBr),e(It,CBr),e(It,Bm),e(Bm,MBr),e(Bm,sCe),e(sCe,EBr),e(Bm,yBr),e(Bm,lCe),e(lCe,wBr),e(Bm,ABr),e(It,LBr),e(It,iCe),e(iCe,BBr),e(It,xBr),g(O7,It,null),e(Or,kBr),e(Or,No),g(X7,No,null),e(No,RBr),e(No,dCe),e(dCe,SBr),e(No,PBr),e(No,Dn),e(Dn,$Br),e(Dn,cCe),e(cCe,IBr),e(Dn,NBr),e(Dn,mCe),e(mCe,jBr),e(Dn,DBr),e(Dn,fCe),e(fCe,qBr),e(Dn,GBr),e(No,OBr),e(No,V7),e(V7,e5),e(e5,gCe),e(gCe,XBr),e(e5,VBr),e(e5,Dz),e(Dz,zBr),e(e5,WBr),e(V7,QBr),e(V7,o5),e(o5,hCe),e(hCe,HBr),e(o5,UBr),e(o5,qz),e(qz,JBr),e(o5,YBr),e(No,KBr),e(No,uCe),e(uCe,ZBr),e(No,exr),g(z7,No,null),b(c,zRe,_),b(c,xm,_),e(xm,r5),e(r5,pCe),g(W7,pCe,null),e(xm,oxr),e(xm,_Ce),e(_Ce,rxr),b(c,WRe,_),b(c,Xr,_),g(Q7,Xr,null),e(Xr,txr),e(Xr,km),e(km,axr),e(km,bCe),e(bCe,nxr),e(km,sxr),e(km,vCe),e(vCe,lxr),e(km,ixr),e(Xr,dxr),e(Xr,H7),e(H7,cxr),e(H7,TCe),e(TCe,mxr),e(H7,fxr),e(Xr,gxr),e(Xr,Nt),g(U7,Nt,null),e(Nt,hxr),e(Nt,FCe),e(FCe,uxr),e(Nt,pxr),e(Nt,Rm),e(Rm,_xr),e(Rm,CCe),e(CCe,bxr),e(Rm,vxr),e(Rm,MCe),e(MCe,Txr),e(Rm,Fxr),e(Nt,Cxr),e(Nt,ECe),e(ECe,Mxr),e(Nt,Exr),g(J7,Nt,null),e(Xr,yxr),e(Xr,jo),g(Y7,jo,null),e(jo,wxr),e(jo,yCe),e(yCe,Axr),e(jo,Lxr),e(jo,qn),e(qn,Bxr),e(qn,wCe),e(wCe,xxr),e(qn,kxr),e(qn,ACe),e(ACe,Rxr),e(qn,Sxr),e(qn,LCe),e(LCe,Pxr),e(qn,$xr),e(jo,Ixr),e(jo,BCe),e(BCe,t5),e(t5,xCe),e(xCe,Nxr),e(t5,jxr),e(t5,Gz),e(Gz,Dxr),e(t5,qxr),e(jo,Gxr),e(jo,kCe),e(kCe,Oxr),e(jo,Xxr),g(K7,jo,null),QRe=!0},p(c,[_]){const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:c}),qm.$set(Z7);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:c}),Bh.$set(RCe);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:c}),qh.$set(SCe)},i(c){QRe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(qm.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Ay.$$.fragment,c),h(Bh.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Py.$$.fragment,c),h(qh.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(fw.$$.fragment,c),h(hw.$$.fragment,c),h(uw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(m6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(N6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(mL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(pL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(u7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(T7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(y7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(R7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(N7.$$.fragment,c),h(j7.$$.fragment,c),h(D7.$$.fragment,c),h(G7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(z7.$$.fragment,c),h(W7.$$.fragment,c),h(Q7.$$.fragment,c),h(U7.$$.fragment,c),h(J7.$$.fragment,c),h(Y7.$$.fragment,c),h(K7.$$.fragment,c),QRe=!0)},o(c){u(me.$$.fragment,c),u(qa.$$.fragment,c),u(ly.$$.fragment,c),u(iy.$$.fragment,c),u(qm.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(gy.$$.fragment,c),u(hy.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(_y.$$.fragment,c),u(Ty.$$.fragment,c),u(Fy.$$.fragment,c),u(Cy.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(Ay.$$.fragment,c),u(Bh.$$.fragment,c),u(Ly.$$.fragment,c),u(By.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Py.$$.fragment,c),u(qh.$$.fragment,c),u($y.$$.fragment,c),u(Iy.$$.fragment,c),u(Ny.$$.fragment,c),u(jy.$$.fragment,c),u(qy.$$.fragment,c),u(Gy.$$.fragment,c),u(Oy.$$.fragment,c),u(Xy.$$.fragment,c),u(Vy.$$.fragment,c),u(zy.$$.fragment,c),u(Qy.$$.fragment,c),u(Hy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Ky.$$.fragment,c),u(ew.$$.fragment,c),u(ow.$$.fragment,c),u(rw.$$.fragment,c),u(tw.$$.fragment,c),u(aw.$$.fragment,c),u(nw.$$.fragment,c),u(lw.$$.fragment,c),u(iw.$$.fragment,c),u(dw.$$.fragment,c),u(cw.$$.fragment,c),u(mw.$$.fragment,c),u(fw.$$.fragment,c),u(hw.$$.fragment,c),u(uw.$$.fragment,c),u(pw.$$.fragment,c),u(_w.$$.fragment,c),u(bw.$$.fragment,c),u(vw.$$.fragment,c),u(Fw.$$.fragment,c),u(Cw.$$.fragment,c),u(Mw.$$.fragment,c),u(Ew.$$.fragment,c),u(yw.$$.fragment,c),u(ww.$$.fragment,c),u(Lw.$$.fragment,c),u(Bw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Rw.$$.fragment,c),u(Sw.$$.fragment,c),u($w.$$.fragment,c),u(Iw.$$.fragment,c),u(Nw.$$.fragment,c),u(jw.$$.fragment,c),u(Dw.$$.fragment,c),u(qw.$$.fragment,c),u(Ow.$$.fragment,c),u(Xw.$$.fragment,c),u(Vw.$$.fragment,c),u(zw.$$.fragment,c),u(Ww.$$.fragment,c),u(Qw.$$.fragment,c),u(Uw.$$.fragment,c),u(Jw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(e6.$$.fragment,c),u(r6.$$.fragment,c),u(t6.$$.fragment,c),u(a6.$$.fragment,c),u(n6.$$.fragment,c),u(s6.$$.fragment,c),u(l6.$$.fragment,c),u(d6.$$.fragment,c),u(c6.$$.fragment,c),u(m6.$$.fragment,c),u(f6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(p6.$$.fragment,c),u(_6.$$.fragment,c),u(b6.$$.fragment,c),u(v6.$$.fragment,c),u(T6.$$.fragment,c),u(F6.$$.fragment,c),u(M6.$$.fragment,c),u(E6.$$.fragment,c),u(y6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(L6.$$.fragment,c),u(x6.$$.fragment,c),u(k6.$$.fragment,c),u(R6.$$.fragment,c),u(S6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(N6.$$.fragment,c),u(j6.$$.fragment,c),u(D6.$$.fragment,c),u(q6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(V6.$$.fragment,c),u(z6.$$.fragment,c),u(W6.$$.fragment,c),u(H6.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(K6.$$.fragment,c),u(Z6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(nA.$$.fragment,c),u(sA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(fA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(vA.$$.fragment,c),u(TA.$$.fragment,c),u(FA.$$.fragment,c),u(CA.$$.fragment,c),u(MA.$$.fragment,c),u(EA.$$.fragment,c),u(wA.$$.fragment,c),u(AA.$$.fragment,c),u(LA.$$.fragment,c),u(xA.$$.fragment,c),u(kA.$$.fragment,c),u(RA.$$.fragment,c),u(PA.$$.fragment,c),u($A.$$.fragment,c),u(IA.$$.fragment,c),u(NA.$$.fragment,c),u(jA.$$.fragment,c),u(DA.$$.fragment,c),u(GA.$$.fragment,c),u(OA.$$.fragment,c),u(XA.$$.fragment,c),u(VA.$$.fragment,c),u(zA.$$.fragment,c),u(WA.$$.fragment,c),u(HA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(o0.$$.fragment,c),u(r0.$$.fragment,c),u(t0.$$.fragment,c),u(a0.$$.fragment,c),u(n0.$$.fragment,c),u(s0.$$.fragment,c),u(i0.$$.fragment,c),u(d0.$$.fragment,c),u(c0.$$.fragment,c),u(f0.$$.fragment,c),u(g0.$$.fragment,c),u(h0.$$.fragment,c),u(p0.$$.fragment,c),u(_0.$$.fragment,c),u(b0.$$.fragment,c),u(v0.$$.fragment,c),u(T0.$$.fragment,c),u(F0.$$.fragment,c),u(M0.$$.fragment,c),u(E0.$$.fragment,c),u(y0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(L0.$$.fragment,c),u(x0.$$.fragment,c),u(k0.$$.fragment,c),u(R0.$$.fragment,c),u(S0.$$.fragment,c),u(P0.$$.fragment,c),u($0.$$.fragment,c),u(N0.$$.fragment,c),u(j0.$$.fragment,c),u(D0.$$.fragment,c),u(q0.$$.fragment,c),u(G0.$$.fragment,c),u(O0.$$.fragment,c),u(V0.$$.fragment,c),u(z0.$$.fragment,c),u(W0.$$.fragment,c),u(Q0.$$.fragment,c),u(H0.$$.fragment,c),u(U0.$$.fragment,c),u(Y0.$$.fragment,c),u(K0.$$.fragment,c),u(Z0.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(rL.$$.fragment,c),u(aL.$$.fragment,c),u(nL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(dL.$$.fragment,c),u(mL.$$.fragment,c),u(fL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(pL.$$.fragment,c),u(bL.$$.fragment,c),u(vL.$$.fragment,c),u(TL.$$.fragment,c),u(FL.$$.fragment,c),u(CL.$$.fragment,c),u(ML.$$.fragment,c),u(yL.$$.fragment,c),u(wL.$$.fragment,c),u(AL.$$.fragment,c),u(LL.$$.fragment,c),u(BL.$$.fragment,c),u(xL.$$.fragment,c),u(RL.$$.fragment,c),u(SL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(NL.$$.fragment,c),u(DL.$$.fragment,c),u(qL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(XL.$$.fragment,c),u(VL.$$.fragment,c),u(WL.$$.fragment,c),u(QL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(YL.$$.fragment,c),u(ZL.$$.fragment,c),u(e7.$$.fragment,c),u(o7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(a7.$$.fragment,c),u(s7.$$.fragment,c),u(l7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),u(c7.$$.fragment,c),u(m7.$$.fragment,c),u(g7.$$.fragment,c),u(h7.$$.fragment,c),u(u7.$$.fragment,c),u(p7.$$.fragment,c),u(_7.$$.fragment,c),u(b7.$$.fragment,c),u(T7.$$.fragment,c),u(F7.$$.fragment,c),u(C7.$$.fragment,c),u(M7.$$.fragment,c),u(E7.$$.fragment,c),u(y7.$$.fragment,c),u(A7.$$.fragment,c),u(L7.$$.fragment,c),u(B7.$$.fragment,c),u(x7.$$.fragment,c),u(k7.$$.fragment,c),u(R7.$$.fragment,c),u(P7.$$.fragment,c),u($7.$$.fragment,c),u(I7.$$.fragment,c),u(N7.$$.fragment,c),u(j7.$$.fragment,c),u(D7.$$.fragment,c),u(G7.$$.fragment,c),u(O7.$$.fragment,c),u(X7.$$.fragment,c),u(z7.$$.fragment,c),u(W7.$$.fragment,c),u(Q7.$$.fragment,c),u(U7.$$.fragment,c),u(J7.$$.fragment,c),u(Y7.$$.fragment,c),u(K7.$$.fragment,c),QRe=!1},d(c){t(K),c&&t(io),c&&t(de),p(me),c&&t($m),c&&t(ma),c&&t(Be),c&&t(co),c&&t(Nm),p(qa,c),c&&t(mo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(Wxe),c&&t(Xi),p(ly),c&&t(Qxe),c&&t(zn),c&&t(Hxe),p(iy,c),c&&t(Uxe),c&&t(o9),c&&t(Jxe),p(qm,c),c&&t(Yxe),c&&t(Vi),p(dy),c&&t(Kxe),c&&t(Wo),p(cy),p(gy),p(hy),p(uy),c&&t(Zxe),c&&t(Wi),p(py),c&&t(eke),c&&t(Qo),p(_y),p(Ty),p(Fy),p(Cy),c&&t(oke),c&&t(Qi),p(My),c&&t(rke),c&&t(Ho),p(Ey),p(Ay),p(Bh),p(Ly),p(By),c&&t(tke),c&&t(Hi),p(xy),c&&t(ake),c&&t(Uo),p(ky),p(Py),p(qh),p($y),p(Iy),c&&t(nke),c&&t(Ji),p(Ny),c&&t(ske),c&&t(Jo),p(jy),p(qy),p(Gy),p(Oy),p(Xy),c&&t(lke),c&&t(Zi),p(Vy),c&&t(ike),c&&t(Yo),p(zy),p(Qy),p(Hy),p(Uy),p(Jy),c&&t(dke),c&&t(rd),p(Yy),c&&t(cke),c&&t(Ko),p(Ky),p(ew),p(ow),p(rw),p(tw),c&&t(mke),c&&t(nd),p(aw),c&&t(fke),c&&t(Zo),p(nw),p(lw),p(iw),p(dw),p(cw),c&&t(gke),c&&t(id),p(mw),c&&t(hke),c&&t(er),p(fw),p(hw),p(uw),p(pw),p(_w),c&&t(uke),c&&t(md),p(bw),c&&t(pke),c&&t(or),p(vw),p(Fw),p(Cw),p(Mw),p(Ew),c&&t(_ke),c&&t(hd),p(yw),c&&t(bke),c&&t(rr),p(ww),p(Lw),p(Bw),p(xw),p(kw),c&&t(vke),c&&t(_d),p(Rw),c&&t(Tke),c&&t(tr),p(Sw),p($w),p(Iw),p(Nw),p(jw),c&&t(Fke),c&&t(Td),p(Dw),c&&t(Cke),c&&t(ar),p(qw),p(Ow),p(Xw),p(Vw),p(zw),c&&t(Mke),c&&t(Md),p(Ww),c&&t(Eke),c&&t(nr),p(Qw),p(Uw),p(Jw),p(Yw),p(Kw),c&&t(yke),c&&t(wd),p(Zw),c&&t(wke),c&&t(sr),p(e6),p(r6),p(t6),p(a6),p(n6),c&&t(Ake),c&&t(Bd),p(s6),c&&t(Lke),c&&t(lr),p(l6),p(d6),p(c6),p(m6),p(f6),c&&t(Bke),c&&t(Rd),p(g6),c&&t(xke),c&&t(ir),p(h6),p(p6),p(_6),p(b6),p(v6),c&&t(kke),c&&t($d),p(T6),c&&t(Rke),c&&t(dr),p(F6),p(M6),p(E6),p(y6),p(w6),c&&t(Ske),c&&t(jd),p(A6),c&&t(Pke),c&&t(cr),p(L6),p(x6),p(k6),p(R6),p(S6),c&&t($ke),c&&t(Gd),p(P6),c&&t(Ike),c&&t(mr),p($6),p(N6),p(j6),p(D6),p(q6),c&&t(Nke),c&&t(Vd),p(G6),c&&t(jke),c&&t(fr),p(O6),p(V6),p(z6),p(W6),p(H6),c&&t(Dke),c&&t(Qd),p(U6),c&&t(qke),c&&t(gr),p(J6),p(K6),p(Z6),p(eA),p(oA),c&&t(Gke),c&&t(Jd),p(rA),c&&t(Oke),c&&t(hr),p(tA),p(nA),p(sA),p(lA),p(iA),c&&t(Xke),c&&t(ec),p(dA),c&&t(Vke),c&&t(ur),p(cA),p(fA),p(gA),p(hA),p(uA),c&&t(zke),c&&t(tc),p(pA),c&&t(Wke),c&&t(pr),p(_A),p(vA),p(TA),p(FA),p(CA),c&&t(Qke),c&&t(sc),p(MA),c&&t(Hke),c&&t(_r),p(EA),p(wA),p(AA),p(LA),p(xA),c&&t(Uke),c&&t(dc),p(kA),c&&t(Jke),c&&t(br),p(RA),p(PA),p($A),p(IA),p(NA),c&&t(Yke),c&&t(fc),p(jA),c&&t(Kke),c&&t(vr),p(DA),p(GA),p(OA),p(XA),p(VA),c&&t(Zke),c&&t(uc),p(zA),c&&t(eRe),c&&t(Tr),p(WA),p(HA),p(UA),p(JA),p(YA),c&&t(oRe),c&&t(bc),p(KA),c&&t(rRe),c&&t(Fr),p(ZA),p(o0),p(r0),p(t0),p(a0),c&&t(tRe),c&&t(Fc),p(n0),c&&t(aRe),c&&t(Cr),p(s0),p(i0),p(d0),p(c0),p(f0),c&&t(nRe),c&&t(Ec),p(g0),c&&t(sRe),c&&t(Mr),p(h0),p(p0),p(_0),p(b0),p(v0),c&&t(lRe),c&&t(Ac),p(T0),c&&t(iRe),c&&t(Er),p(F0),p(M0),p(E0),p(y0),p(w0),c&&t(dRe),c&&t(xc),p(A0),c&&t(cRe),c&&t(yr),p(L0),p(x0),p(k0),p(R0),p(S0),c&&t(mRe),c&&t(Sc),p(P0),c&&t(fRe),c&&t(wr),p($0),p(N0),p(j0),p(D0),p(q0),c&&t(gRe),c&&t(Ic),p(G0),c&&t(hRe),c&&t(Ar),p(O0),p(V0),p(z0),p(W0),p(Q0),c&&t(uRe),c&&t(Dc),p(H0),c&&t(pRe),c&&t(Lr),p(U0),p(Y0),p(K0),p(Z0),p(eL),c&&t(_Re),c&&t(Oc),p(oL),c&&t(bRe),c&&t(Br),p(rL),p(aL),p(nL),p(sL),p(lL),c&&t(vRe),c&&t(zc),p(iL),c&&t(TRe),c&&t(xr),p(dL),p(mL),p(fL),p(gL),p(hL),c&&t(FRe),c&&t(Hc),p(uL),c&&t(CRe),c&&t(kr),p(pL),p(bL),p(vL),p(TL),p(FL),c&&t(MRe),c&&t(Yc),p(CL),c&&t(ERe),c&&t(Rr),p(ML),p(yL),p(wL),p(AL),p(LL),c&&t(yRe),c&&t(em),p(BL),c&&t(wRe),c&&t(Sr),p(xL),p(RL),p(SL),p(PL),p($L),c&&t(ARe),c&&t(tm),p(IL),c&&t(LRe),c&&t(Pr),p(NL),p(DL),p(qL),p(GL),p(OL),c&&t(BRe),c&&t(sm),p(XL),c&&t(xRe),c&&t($r),p(VL),p(WL),p(QL),p(HL),p(UL),c&&t(kRe),c&&t(dm),p(JL),c&&t(RRe),c&&t(Ir),p(YL),p(ZL),p(e7),p(o7),p(r7),c&&t(SRe),c&&t(fm),p(t7),c&&t(PRe),c&&t(Nr),p(a7),p(s7),p(l7),p(i7),p(d7),c&&t($Re),c&&t(um),p(c7),c&&t(IRe),c&&t(jr),p(m7),p(g7),p(h7),p(u7),p(p7),c&&t(NRe),c&&t(bm),p(_7),c&&t(jRe),c&&t(Dr),p(b7),p(T7),p(F7),p(C7),p(M7),c&&t(DRe),c&&t(Fm),p(E7),c&&t(qRe),c&&t(qr),p(y7),p(A7),p(L7),p(B7),p(x7),c&&t(GRe),c&&t(Em),p(k7),c&&t(ORe),c&&t(Gr),p(R7),p(P7),p($7),p(I7),p(N7),c&&t(XRe),c&&t(Am),p(j7),c&&t(VRe),c&&t(Or),p(D7),p(G7),p(O7),p(X7),p(z7),c&&t(zRe),c&&t(xm),p(W7),c&&t(WRe),c&&t(Xr),p(Q7),p(U7),p(J7),p(Y7),p(K7)}}}const W4t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Q4t(Pm){return G4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Z4t extends N4t{constructor(K){super();j4t(this,K,Q4t,z4t,D4t,{})}}export{Z4t as default,W4t as metadata};
