import{S as L5t,i as x5t,s as k5t,e as a,k as l,w as m,t as o,M as S5t,c as n,d as t,m as i,a as s,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p,v as R5t}from"../../chunks/vendor-6b77c823.js";import{T as _Rr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function B5t($m){let Z,io,de,Ce,lo,fe,Me,Xo,Ii,Im,ma,qi,Ni,gw,qm,xe,co,ji,Gn,hw,On,Vn,uw,Di,Xn,pw,Gi,Nm,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),fe=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),Im=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),gw=o(")."),qm=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),hw=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),uw=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),pw=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Nm=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){Z=n(mo,"P",{});var pe=s(Z);io=r(pe,"If your "),de=n(pe,"CODE",{});var n9=s(de);Ce=r(n9,"NewModelConfig"),n9.forEach(t),lo=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Oi=s(fe);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(pe,`, make sure its
`),Ii=n(pe,"CODE",{});var s9=s(Ii);Im=r(s9,"model_type"),s9.forEach(t),ma=r(pe," attribute is set to the same key you use when registering the config (here "),qi=n(pe,"CODE",{});var l9=s(qi);Ni=r(l9,'"new-model"'),l9.forEach(t),gw=r(pe,")."),pe.forEach(t),qm=i(mo),xe=n(mo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),hw=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var i9=s(On);Vn=r(i9,"PreTrainedModel"),i9.forEach(t),uw=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var jm=s(Di);Xn=r(jm,"config_class"),jm.forEach(t),pw=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var d9=s(Gi);Nm=r(d9,"NewModelConfig"),d9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(mo,pe){b(mo,Z,pe),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,fe),e(fe,Me),e(Z,Xo),e(Z,Ii),e(Ii,Im),e(Z,ma),e(Z,qi),e(qi,Ni),e(Z,gw),b(mo,qm,pe),b(mo,xe,pe),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,hw),e(xe,On),e(On,Vn),e(xe,uw),e(xe,Di),e(Di,Xn),e(xe,pw),e(xe,Gi),e(Gi,Nm),e(xe,Da)},d(mo){mo&&t(Z),mo&&t(qm),mo&&t(xe)}}}function P5t($m){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){Z=n(fe,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(fe){fe&&t(Z)}}}function $5t($m){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){Z=n(fe,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(fe){fe&&t(Z)}}}function I5t($m){let Z,io,de,Ce,lo,fe,Me,Xo,Ii,Im,ma,qi,Ni,gw,qm,xe,co,ji,Gn,hw,On,Vn,uw,Di,Xn,pw,Gi,Nm,Da,mo,pe,n9,Oi,s9,l9,zo,Ga,i9,jm,d9,O$e,xSe,Vi,Dm,$J,_w,V$e,IJ,X$e,kSe,zn,z$e,qJ,Q$e,W$e,NJ,H$e,U$e,SSe,bw,RSe,c9,J$e,BSe,Gm,PSe,Xi,Om,jJ,Fw,Y$e,DJ,K$e,$Se,Qo,vw,Z$e,Tw,eIe,m9,oIe,rIe,tIe,Mw,aIe,GJ,nIe,sIe,lIe,fo,Ew,iIe,OJ,dIe,cIe,zi,mIe,VJ,fIe,gIe,XJ,hIe,uIe,pIe,F,Vm,zJ,_Ie,bIe,f9,FIe,vIe,TIe,Xm,QJ,MIe,EIe,g9,CIe,wIe,AIe,zm,WJ,yIe,LIe,h9,xIe,kIe,SIe,Qm,HJ,RIe,BIe,u9,PIe,$Ie,IIe,Wm,UJ,qIe,NIe,p9,jIe,DIe,GIe,Hm,JJ,OIe,VIe,_9,XIe,zIe,QIe,Um,YJ,WIe,HIe,b9,UIe,JIe,YIe,Jm,KJ,KIe,ZIe,F9,eqe,oqe,rqe,Ym,ZJ,tqe,aqe,v9,nqe,sqe,lqe,Km,eY,iqe,dqe,T9,cqe,mqe,fqe,Zm,oY,gqe,hqe,M9,uqe,pqe,_qe,ef,rY,bqe,Fqe,E9,vqe,Tqe,Mqe,of,tY,Eqe,Cqe,C9,wqe,Aqe,yqe,rf,aY,Lqe,xqe,w9,kqe,Sqe,Rqe,tf,nY,Bqe,Pqe,A9,$qe,Iqe,qqe,af,sY,Nqe,jqe,y9,Dqe,Gqe,Oqe,nf,lY,Vqe,Xqe,L9,zqe,Qqe,Wqe,sf,iY,Hqe,Uqe,x9,Jqe,Yqe,Kqe,lf,dY,Zqe,eNe,k9,oNe,rNe,tNe,df,cY,aNe,nNe,S9,sNe,lNe,iNe,cf,mY,dNe,cNe,R9,mNe,fNe,gNe,mf,fY,hNe,uNe,B9,pNe,_Ne,bNe,ff,gY,FNe,vNe,P9,TNe,MNe,ENe,gf,hY,CNe,wNe,$9,ANe,yNe,LNe,hf,uY,xNe,kNe,I9,SNe,RNe,BNe,uf,pY,PNe,$Ne,q9,INe,qNe,NNe,pf,_Y,jNe,DNe,N9,GNe,ONe,VNe,_f,bY,XNe,zNe,j9,QNe,WNe,HNe,bf,FY,UNe,JNe,D9,YNe,KNe,ZNe,Ff,vY,eje,oje,G9,rje,tje,aje,vf,TY,nje,sje,O9,lje,ije,dje,Tf,MY,cje,mje,V9,fje,gje,hje,Mf,EY,uje,pje,X9,_je,bje,Fje,Ef,CY,vje,Tje,z9,Mje,Eje,Cje,Cf,wY,wje,Aje,Q9,yje,Lje,xje,wf,AY,kje,Sje,W9,Rje,Bje,Pje,Af,yY,$je,Ije,H9,qje,Nje,jje,yf,LY,Dje,Gje,U9,Oje,Vje,Xje,Lf,xY,zje,Qje,J9,Wje,Hje,Uje,xf,kY,Jje,Yje,Y9,Kje,Zje,eDe,kf,SY,oDe,rDe,K9,tDe,aDe,nDe,Sf,RY,sDe,lDe,Z9,iDe,dDe,cDe,Rf,BY,mDe,fDe,ex,gDe,hDe,uDe,Bf,PY,pDe,_De,ox,bDe,FDe,vDe,Pf,$Y,TDe,MDe,rx,EDe,CDe,wDe,$f,IY,ADe,yDe,tx,LDe,xDe,kDe,If,qY,SDe,RDe,ax,BDe,PDe,$De,qf,NY,IDe,qDe,nx,NDe,jDe,DDe,Nf,jY,GDe,ODe,sx,VDe,XDe,zDe,jf,DY,QDe,WDe,lx,HDe,UDe,JDe,Df,GY,YDe,KDe,ix,ZDe,eGe,oGe,Gf,OY,rGe,tGe,dx,aGe,nGe,sGe,Of,VY,lGe,iGe,cx,dGe,cGe,mGe,Vf,XY,fGe,gGe,mx,hGe,uGe,pGe,Xf,zY,_Ge,bGe,fx,FGe,vGe,TGe,zf,QY,MGe,EGe,gx,CGe,wGe,AGe,Qf,WY,yGe,LGe,hx,xGe,kGe,SGe,Wf,HY,RGe,BGe,ux,PGe,$Ge,IGe,Hf,UY,qGe,NGe,px,jGe,DGe,GGe,Uf,JY,OGe,VGe,_x,XGe,zGe,QGe,Jf,YY,WGe,HGe,bx,UGe,JGe,YGe,Yf,KY,KGe,ZGe,Fx,eOe,oOe,rOe,Kf,ZY,tOe,aOe,vx,nOe,sOe,lOe,Zf,eK,iOe,dOe,Tx,cOe,mOe,fOe,eg,oK,gOe,hOe,Mx,uOe,pOe,_Oe,og,rK,bOe,FOe,Ex,vOe,TOe,MOe,rg,tK,EOe,COe,Cx,wOe,AOe,yOe,tg,aK,LOe,xOe,wx,kOe,SOe,ROe,ag,nK,BOe,POe,Ax,$Oe,IOe,qOe,ng,sK,NOe,jOe,yx,DOe,GOe,OOe,sg,lK,VOe,XOe,Lx,zOe,QOe,WOe,lg,iK,HOe,UOe,xx,JOe,YOe,KOe,ig,dK,ZOe,eVe,kx,oVe,rVe,tVe,dg,cK,aVe,nVe,Sx,sVe,lVe,iVe,cg,mK,dVe,cVe,Rx,mVe,fVe,gVe,mg,fK,hVe,uVe,Bx,pVe,_Ve,bVe,fg,gK,FVe,vVe,Px,TVe,MVe,EVe,gg,hK,CVe,wVe,$x,AVe,yVe,LVe,hg,uK,xVe,kVe,Ix,SVe,RVe,BVe,ug,pK,PVe,$Ve,qx,IVe,qVe,NVe,pg,_K,jVe,DVe,Nx,GVe,OVe,VVe,_g,bK,XVe,zVe,jx,QVe,WVe,HVe,bg,FK,UVe,JVe,Dx,YVe,KVe,ZVe,Fg,vK,eXe,oXe,Gx,rXe,tXe,aXe,vg,TK,nXe,sXe,Ox,lXe,iXe,dXe,Tg,MK,cXe,mXe,Vx,fXe,gXe,hXe,Mg,EK,uXe,pXe,Xx,_Xe,bXe,FXe,Eg,CK,vXe,TXe,zx,MXe,EXe,CXe,Cg,wK,wXe,AXe,Qx,yXe,LXe,xXe,wg,AK,kXe,SXe,Wx,RXe,BXe,PXe,Ag,yK,$Xe,IXe,Hx,qXe,NXe,jXe,yg,LK,DXe,GXe,Ux,OXe,VXe,XXe,Lg,xK,zXe,QXe,Jx,WXe,HXe,UXe,xg,kK,JXe,YXe,Yx,KXe,ZXe,eze,kg,SK,oze,rze,Kx,tze,aze,nze,Sg,RK,sze,lze,Zx,ize,dze,cze,Rg,BK,mze,fze,ek,gze,hze,uze,Bg,PK,pze,_ze,ok,bze,Fze,vze,Pg,$K,Tze,Mze,rk,Eze,Cze,wze,IK,Aze,yze,Cw,Lze,$g,ww,xze,qK,kze,ISe,Qi,Ig,NK,Aw,Sze,jK,Rze,qSe,Wo,yw,Bze,Lw,Pze,tk,$ze,Ize,qze,xw,Nze,DK,jze,Dze,Gze,go,kw,Oze,GK,Vze,Xze,Oa,zze,OK,Qze,Wze,VK,Hze,Uze,XK,Jze,Yze,Kze,C,Qn,zK,Zze,eQe,ak,oQe,rQe,nk,tQe,aQe,nQe,Wn,QK,sQe,lQe,sk,iQe,dQe,lk,cQe,mQe,fQe,Hn,WK,gQe,hQe,ik,uQe,pQe,dk,_Qe,bQe,FQe,qg,HK,vQe,TQe,ck,MQe,EQe,CQe,Un,UK,wQe,AQe,mk,yQe,LQe,fk,xQe,kQe,SQe,Ng,JK,RQe,BQe,gk,PQe,$Qe,IQe,jg,YK,qQe,NQe,hk,jQe,DQe,GQe,Dg,KK,OQe,VQe,uk,XQe,zQe,QQe,Jn,ZK,WQe,HQe,pk,UQe,JQe,_k,YQe,KQe,ZQe,Yn,eZ,eWe,oWe,bk,rWe,tWe,Fk,aWe,nWe,sWe,Kn,oZ,lWe,iWe,vk,dWe,cWe,Tk,mWe,fWe,gWe,Gg,rZ,hWe,uWe,Mk,pWe,_We,bWe,Og,tZ,FWe,vWe,Ek,TWe,MWe,EWe,Zn,aZ,CWe,wWe,Ck,AWe,yWe,wk,LWe,xWe,kWe,Vg,nZ,SWe,RWe,Ak,BWe,PWe,$We,es,sZ,IWe,qWe,yk,NWe,jWe,Lk,DWe,GWe,OWe,os,lZ,VWe,XWe,xk,zWe,QWe,kk,WWe,HWe,UWe,rs,iZ,JWe,YWe,Sk,KWe,ZWe,dZ,eHe,oHe,rHe,Xg,cZ,tHe,aHe,Rk,nHe,sHe,lHe,ts,mZ,iHe,dHe,Bk,cHe,mHe,Pk,fHe,gHe,hHe,zg,fZ,uHe,pHe,$k,_He,bHe,FHe,as,gZ,vHe,THe,Ik,MHe,EHe,qk,CHe,wHe,AHe,ns,hZ,yHe,LHe,Nk,xHe,kHe,jk,SHe,RHe,BHe,ss,uZ,PHe,$He,Dk,IHe,qHe,Gk,NHe,jHe,DHe,Qg,pZ,GHe,OHe,Ok,VHe,XHe,zHe,ls,_Z,QHe,WHe,Vk,HHe,UHe,Xk,JHe,YHe,KHe,Wg,bZ,ZHe,eUe,zk,oUe,rUe,tUe,is,FZ,aUe,nUe,Qk,sUe,lUe,Wk,iUe,dUe,cUe,ds,vZ,mUe,fUe,Hk,gUe,hUe,Uk,uUe,pUe,_Ue,cs,TZ,bUe,FUe,Jk,vUe,TUe,Yk,MUe,EUe,CUe,ms,MZ,wUe,AUe,Kk,yUe,LUe,Zk,xUe,kUe,SUe,Hg,EZ,RUe,BUe,eS,PUe,$Ue,IUe,fs,CZ,qUe,NUe,oS,jUe,DUe,rS,GUe,OUe,VUe,gs,wZ,XUe,zUe,tS,QUe,WUe,aS,HUe,UUe,JUe,hs,AZ,YUe,KUe,nS,ZUe,eJe,sS,oJe,rJe,tJe,us,yZ,aJe,nJe,lS,sJe,lJe,iS,iJe,dJe,cJe,ps,LZ,mJe,fJe,dS,gJe,hJe,cS,uJe,pJe,_Je,_s,xZ,bJe,FJe,mS,vJe,TJe,fS,MJe,EJe,CJe,Ug,kZ,wJe,AJe,gS,yJe,LJe,xJe,bs,SZ,kJe,SJe,hS,RJe,BJe,uS,PJe,$Je,IJe,Jg,RZ,qJe,NJe,pS,jJe,DJe,GJe,Yg,BZ,OJe,VJe,_S,XJe,zJe,QJe,Fs,PZ,WJe,HJe,bS,UJe,JJe,FS,YJe,KJe,ZJe,vs,$Z,eYe,oYe,vS,rYe,tYe,TS,aYe,nYe,sYe,Kg,IZ,lYe,iYe,MS,dYe,cYe,mYe,Ts,qZ,fYe,gYe,ES,hYe,uYe,CS,pYe,_Ye,bYe,Ms,NZ,FYe,vYe,wS,TYe,MYe,AS,EYe,CYe,wYe,Es,jZ,AYe,yYe,yS,LYe,xYe,LS,kYe,SYe,RYe,Cs,DZ,BYe,PYe,xS,$Ye,IYe,kS,qYe,NYe,jYe,ws,GZ,DYe,GYe,SS,OYe,VYe,RS,XYe,zYe,QYe,Zg,OZ,WYe,HYe,BS,UYe,JYe,YYe,eh,VZ,KYe,ZYe,PS,eKe,oKe,rKe,oh,XZ,tKe,aKe,$S,nKe,sKe,lKe,rh,zZ,iKe,dKe,IS,cKe,mKe,fKe,As,QZ,gKe,hKe,qS,uKe,pKe,NS,_Ke,bKe,FKe,th,WZ,vKe,TKe,jS,MKe,EKe,CKe,ys,HZ,wKe,AKe,DS,yKe,LKe,GS,xKe,kKe,SKe,Ls,UZ,RKe,BKe,OS,PKe,$Ke,VS,IKe,qKe,NKe,xs,JZ,jKe,DKe,XS,GKe,OKe,zS,VKe,XKe,zKe,ks,YZ,QKe,WKe,QS,HKe,UKe,WS,JKe,YKe,KKe,Ss,KZ,ZKe,eZe,HS,oZe,rZe,US,tZe,aZe,nZe,Rs,ZZ,sZe,lZe,JS,iZe,dZe,YS,cZe,mZe,fZe,ah,eee,gZe,hZe,KS,uZe,pZe,_Ze,nh,oee,bZe,FZe,ZS,vZe,TZe,MZe,Bs,ree,EZe,CZe,eR,wZe,AZe,oR,yZe,LZe,xZe,Ps,tee,kZe,SZe,rR,RZe,BZe,tR,PZe,$Ze,IZe,$s,aee,qZe,NZe,aR,jZe,DZe,nR,GZe,OZe,VZe,sh,nee,XZe,zZe,sR,QZe,WZe,HZe,lh,see,UZe,JZe,lR,YZe,KZe,ZZe,ih,lee,eeo,oeo,iR,reo,teo,aeo,dh,iee,neo,seo,dR,leo,ieo,deo,Is,dee,ceo,meo,cR,feo,geo,mR,heo,ueo,peo,ch,cee,_eo,beo,fR,Feo,veo,Teo,mh,mee,Meo,Eeo,gR,Ceo,weo,Aeo,qs,fee,yeo,Leo,hR,xeo,keo,uR,Seo,Reo,Beo,Ns,gee,Peo,$eo,pR,Ieo,qeo,_R,Neo,jeo,Deo,hee,Geo,Oeo,Sw,Veo,fh,Rw,Xeo,uee,zeo,NSe,Wi,gh,pee,Bw,Qeo,_ee,Weo,jSe,Ho,Pw,Heo,$w,Ueo,bR,Jeo,Yeo,Keo,Iw,Zeo,bee,eoo,ooo,roo,$e,qw,too,Fee,aoo,noo,Va,soo,vee,loo,ioo,Tee,doo,coo,Mee,moo,foo,goo,te,hh,Eee,hoo,uoo,FR,poo,_oo,boo,uh,Cee,Foo,voo,vR,Too,Moo,Eoo,ph,wee,Coo,woo,TR,Aoo,yoo,Loo,_h,Aee,xoo,koo,MR,Soo,Roo,Boo,bh,yee,Poo,$oo,ER,Ioo,qoo,Noo,Fh,Lee,joo,Doo,CR,Goo,Ooo,Voo,vh,xee,Xoo,zoo,wR,Qoo,Woo,Hoo,Th,kee,Uoo,Joo,AR,Yoo,Koo,Zoo,Mh,See,ero,oro,yR,rro,tro,aro,Eh,Ree,nro,sro,LR,lro,iro,dro,Ch,Bee,cro,mro,xR,fro,gro,hro,wh,Pee,uro,pro,kR,_ro,bro,Fro,Ah,$ee,vro,Tro,SR,Mro,Ero,Cro,yh,Iee,wro,Aro,RR,yro,Lro,xro,Lh,qee,kro,Sro,BR,Rro,Bro,Pro,xh,Nee,$ro,Iro,PR,qro,Nro,jro,kh,jee,Dro,Gro,$R,Oro,Vro,Xro,Sh,Dee,zro,Qro,IR,Wro,Hro,Uro,Rh,Jro,Gee,Yro,Kro,Nw,Zro,Bh,jw,eto,Oee,oto,DSe,Hi,Ph,Vee,Dw,rto,Xee,tto,GSe,Uo,Gw,ato,Ow,nto,qR,sto,lto,ito,Vw,dto,zee,cto,mto,fto,Ie,Xw,gto,Qee,hto,uto,Ui,pto,Wee,_to,bto,Hee,Fto,vto,Tto,ke,$h,Uee,Mto,Eto,NR,Cto,wto,Ato,Ih,Jee,yto,Lto,jR,xto,kto,Sto,qh,Yee,Rto,Bto,DR,Pto,$to,Ito,Nh,Kee,qto,Nto,GR,jto,Dto,Gto,jh,Zee,Oto,Vto,OR,Xto,zto,Qto,Dh,eoe,Wto,Hto,VR,Uto,Jto,Yto,Gh,ooe,Kto,Zto,XR,eao,oao,rao,Oh,roe,tao,aao,zR,nao,sao,lao,Vh,iao,toe,dao,cao,zw,mao,Xh,Qw,fao,aoe,gao,OSe,Ji,zh,noe,Ww,hao,soe,uao,VSe,Jo,Hw,pao,Yi,_ao,QR,bao,Fao,WR,vao,Tao,Mao,Uw,Eao,loe,Cao,wao,Aao,Xr,Jw,yao,ioe,Lao,xao,Ki,kao,doe,Sao,Rao,HR,Bao,Pao,$ao,coe,Iao,qao,Yw,Nao,qe,Kw,jao,moe,Dao,Gao,Xa,Oao,foe,Vao,Xao,goe,zao,Qao,hoe,Wao,Hao,Uao,T,Qh,uoe,Jao,Yao,UR,Kao,Zao,eno,Wh,poe,ono,rno,JR,tno,ano,nno,Hh,_oe,sno,lno,YR,ino,dno,cno,Uh,boe,mno,fno,KR,gno,hno,uno,Jh,Foe,pno,_no,ZR,bno,Fno,vno,Yh,voe,Tno,Mno,eB,Eno,Cno,wno,Kh,Toe,Ano,yno,oB,Lno,xno,kno,Zh,Moe,Sno,Rno,rB,Bno,Pno,$no,eu,Eoe,Ino,qno,tB,Nno,jno,Dno,ou,Coe,Gno,Ono,aB,Vno,Xno,zno,ru,woe,Qno,Wno,nB,Hno,Uno,Jno,tu,Aoe,Yno,Kno,sB,Zno,eso,oso,au,yoe,rso,tso,lB,aso,nso,sso,nu,Loe,lso,iso,iB,dso,cso,mso,su,xoe,fso,gso,dB,hso,uso,pso,lu,koe,_so,bso,cB,Fso,vso,Tso,iu,Soe,Mso,Eso,mB,Cso,wso,Aso,du,Roe,yso,Lso,fB,xso,kso,Sso,cu,Boe,Rso,Bso,gB,Pso,$so,Iso,mu,Poe,qso,Nso,hB,jso,Dso,Gso,fu,$oe,Oso,Vso,uB,Xso,zso,Qso,gu,Ioe,Wso,Hso,pB,Uso,Jso,Yso,hu,qoe,Kso,Zso,_B,elo,olo,rlo,uu,Noe,tlo,alo,bB,nlo,slo,llo,pu,joe,ilo,dlo,FB,clo,mlo,flo,_u,Doe,glo,hlo,vB,ulo,plo,_lo,bu,Goe,blo,Flo,TB,vlo,Tlo,Mlo,Fu,Ooe,Elo,Clo,MB,wlo,Alo,ylo,vu,Voe,Llo,xlo,EB,klo,Slo,Rlo,js,Xoe,Blo,Plo,CB,$lo,Ilo,wB,qlo,Nlo,jlo,Tu,zoe,Dlo,Glo,AB,Olo,Vlo,Xlo,Mu,Qoe,zlo,Qlo,yB,Wlo,Hlo,Ulo,Eu,Woe,Jlo,Ylo,LB,Klo,Zlo,eio,Cu,Hoe,oio,rio,xB,tio,aio,nio,wu,Uoe,sio,lio,kB,iio,dio,cio,Au,Joe,mio,fio,SB,gio,hio,uio,yu,Yoe,pio,_io,RB,bio,Fio,vio,Lu,Koe,Tio,Mio,BB,Eio,Cio,wio,xu,Zoe,Aio,yio,PB,Lio,xio,kio,ku,ere,Sio,Rio,$B,Bio,Pio,$io,Su,ore,Iio,qio,IB,Nio,jio,Dio,Ru,rre,Gio,Oio,qB,Vio,Xio,zio,Bu,tre,Qio,Wio,NB,Hio,Uio,Jio,Pu,are,Yio,Kio,jB,Zio,edo,odo,$u,nre,rdo,tdo,DB,ado,ndo,sdo,Iu,sre,ldo,ido,GB,ddo,cdo,mdo,qu,lre,fdo,gdo,OB,hdo,udo,pdo,Nu,ire,_do,bdo,VB,Fdo,vdo,Tdo,ju,dre,Mdo,Edo,XB,Cdo,wdo,Ado,Du,cre,ydo,Ldo,zB,xdo,kdo,Sdo,Gu,mre,Rdo,Bdo,QB,Pdo,$do,Ido,Ou,fre,qdo,Ndo,WB,jdo,Ddo,Gdo,Vu,gre,Odo,Vdo,HB,Xdo,zdo,Qdo,Xu,hre,Wdo,Hdo,UB,Udo,Jdo,Ydo,zu,ure,Kdo,Zdo,JB,eco,oco,rco,Qu,pre,tco,aco,YB,nco,sco,lco,Wu,_re,ico,dco,KB,cco,mco,fco,Hu,bre,gco,hco,ZB,uco,pco,_co,Uu,Fre,bco,Fco,eP,vco,Tco,Mco,Ju,vre,Eco,Cco,oP,wco,Aco,yco,Yu,Tre,Lco,xco,rP,kco,Sco,Rco,Ku,Mre,Bco,Pco,tP,$co,Ico,qco,Zu,Ere,Nco,jco,aP,Dco,Gco,Oco,ep,Cre,Vco,Xco,nP,zco,Qco,Wco,op,wre,Hco,Uco,sP,Jco,Yco,Kco,rp,Are,Zco,emo,lP,omo,rmo,tmo,tp,yre,amo,nmo,iP,smo,lmo,imo,ap,Lre,dmo,cmo,dP,mmo,fmo,gmo,np,xre,hmo,umo,cP,pmo,_mo,bmo,sp,kre,Fmo,vmo,mP,Tmo,Mmo,Emo,lp,Sre,Cmo,wmo,fP,Amo,ymo,Lmo,ip,Rre,xmo,kmo,gP,Smo,Rmo,Bmo,dp,Bre,Pmo,$mo,hP,Imo,qmo,Nmo,cp,Pre,jmo,Dmo,uP,Gmo,Omo,Vmo,mp,$re,Xmo,zmo,pP,Qmo,Wmo,Hmo,fp,Ire,Umo,Jmo,_P,Ymo,Kmo,Zmo,gp,qre,efo,ofo,bP,rfo,tfo,afo,hp,Nre,nfo,sfo,FP,lfo,ifo,dfo,up,jre,cfo,mfo,vP,ffo,gfo,hfo,pp,Dre,ufo,pfo,TP,_fo,bfo,Ffo,_p,Gre,vfo,Tfo,MP,Mfo,Efo,Cfo,bp,Ore,wfo,Afo,EP,yfo,Lfo,xfo,Fp,Vre,kfo,Sfo,CP,Rfo,Bfo,Pfo,vp,Xre,$fo,Ifo,wP,qfo,Nfo,jfo,Tp,zre,Dfo,Gfo,AP,Ofo,Vfo,Xfo,Mp,Qre,zfo,Qfo,yP,Wfo,Hfo,Ufo,Ep,Wre,Jfo,Yfo,LP,Kfo,Zfo,ego,Cp,Hre,ogo,rgo,xP,tgo,ago,ngo,wp,Ure,sgo,lgo,kP,igo,dgo,cgo,Ap,Jre,mgo,fgo,SP,ggo,hgo,ugo,yp,Yre,pgo,_go,RP,bgo,Fgo,vgo,Lp,Kre,Tgo,Mgo,BP,Ego,Cgo,wgo,xp,Ago,Zre,ygo,Lgo,ete,xgo,kgo,ote,Sgo,Rgo,Zw,XSe,Zi,kp,rte,eA,Bgo,tte,Pgo,zSe,Yo,oA,$go,ed,Igo,PP,qgo,Ngo,$P,jgo,Dgo,Ggo,rA,Ogo,ate,Vgo,Xgo,zgo,zr,tA,Qgo,nte,Wgo,Hgo,od,Ugo,ste,Jgo,Ygo,IP,Kgo,Zgo,eho,lte,oho,rho,aA,tho,Ne,nA,aho,ite,nho,sho,za,lho,dte,iho,dho,cte,cho,mho,mte,fho,gho,hho,S,Sp,fte,uho,pho,qP,_ho,bho,Fho,Rp,gte,vho,Tho,NP,Mho,Eho,Cho,Bp,hte,who,Aho,jP,yho,Lho,xho,Pp,ute,kho,Sho,DP,Rho,Bho,Pho,$p,pte,$ho,Iho,GP,qho,Nho,jho,Ip,_te,Dho,Gho,OP,Oho,Vho,Xho,qp,bte,zho,Qho,VP,Who,Hho,Uho,Np,Fte,Jho,Yho,XP,Kho,Zho,euo,jp,vte,ouo,ruo,zP,tuo,auo,nuo,Dp,Tte,suo,luo,QP,iuo,duo,cuo,Gp,Mte,muo,fuo,WP,guo,huo,uuo,Op,Ete,puo,_uo,HP,buo,Fuo,vuo,Vp,Cte,Tuo,Muo,UP,Euo,Cuo,wuo,Xp,wte,Auo,yuo,JP,Luo,xuo,kuo,zp,Ate,Suo,Ruo,YP,Buo,Puo,$uo,Qp,yte,Iuo,quo,KP,Nuo,juo,Duo,Wp,Lte,Guo,Ouo,ZP,Vuo,Xuo,zuo,Hp,xte,Quo,Wuo,e$,Huo,Uuo,Juo,Up,kte,Yuo,Kuo,o$,Zuo,epo,opo,Jp,Ste,rpo,tpo,r$,apo,npo,spo,Yp,Rte,lpo,ipo,t$,dpo,cpo,mpo,Kp,Bte,fpo,gpo,a$,hpo,upo,ppo,Zp,Pte,_po,bpo,n$,Fpo,vpo,Tpo,e_,$te,Mpo,Epo,s$,Cpo,wpo,Apo,o_,Ite,ypo,Lpo,l$,xpo,kpo,Spo,r_,qte,Rpo,Bpo,i$,Ppo,$po,Ipo,t_,Nte,qpo,Npo,d$,jpo,Dpo,Gpo,a_,jte,Opo,Vpo,c$,Xpo,zpo,Qpo,n_,Dte,Wpo,Hpo,m$,Upo,Jpo,Ypo,s_,Gte,Kpo,Zpo,f$,e_o,o_o,r_o,l_,Ote,t_o,a_o,g$,n_o,s_o,l_o,i_,Vte,i_o,d_o,h$,c_o,m_o,f_o,d_,Xte,g_o,h_o,u$,u_o,p_o,__o,c_,zte,b_o,F_o,p$,v_o,T_o,M_o,m_,Qte,E_o,C_o,_$,w_o,A_o,y_o,f_,Wte,L_o,x_o,b$,k_o,S_o,R_o,g_,Hte,B_o,P_o,F$,$_o,I_o,q_o,h_,Ute,N_o,j_o,v$,D_o,G_o,O_o,u_,Jte,V_o,X_o,T$,z_o,Q_o,W_o,p_,H_o,Yte,U_o,J_o,Kte,Y_o,K_o,Zte,Z_o,ebo,sA,QSe,rd,__,eae,lA,obo,oae,rbo,WSe,Ko,iA,tbo,td,abo,M$,nbo,sbo,E$,lbo,ibo,dbo,dA,cbo,rae,mbo,fbo,gbo,Qr,cA,hbo,tae,ubo,pbo,ad,_bo,aae,bbo,Fbo,C$,vbo,Tbo,Mbo,nae,Ebo,Cbo,mA,wbo,je,fA,Abo,sae,ybo,Lbo,Qa,xbo,lae,kbo,Sbo,iae,Rbo,Bbo,dae,Pbo,$bo,Ibo,$,b_,cae,qbo,Nbo,w$,jbo,Dbo,Gbo,F_,mae,Obo,Vbo,A$,Xbo,zbo,Qbo,v_,fae,Wbo,Hbo,y$,Ubo,Jbo,Ybo,T_,gae,Kbo,Zbo,L$,e2o,o2o,r2o,M_,hae,t2o,a2o,x$,n2o,s2o,l2o,E_,uae,i2o,d2o,k$,c2o,m2o,f2o,C_,pae,g2o,h2o,S$,u2o,p2o,_2o,w_,_ae,b2o,F2o,R$,v2o,T2o,M2o,A_,bae,E2o,C2o,B$,w2o,A2o,y2o,y_,Fae,L2o,x2o,P$,k2o,S2o,R2o,L_,vae,B2o,P2o,$$,$2o,I2o,q2o,x_,Tae,N2o,j2o,I$,D2o,G2o,O2o,k_,Mae,V2o,X2o,q$,z2o,Q2o,W2o,S_,Eae,H2o,U2o,N$,J2o,Y2o,K2o,R_,Cae,Z2o,eFo,j$,oFo,rFo,tFo,B_,wae,aFo,nFo,D$,sFo,lFo,iFo,P_,Aae,dFo,cFo,G$,mFo,fFo,gFo,$_,yae,hFo,uFo,O$,pFo,_Fo,bFo,I_,Lae,FFo,vFo,V$,TFo,MFo,EFo,q_,xae,CFo,wFo,X$,AFo,yFo,LFo,N_,kae,xFo,kFo,z$,SFo,RFo,BFo,j_,Sae,PFo,$Fo,Q$,IFo,qFo,NFo,D_,Rae,jFo,DFo,W$,GFo,OFo,VFo,G_,Bae,XFo,zFo,H$,QFo,WFo,HFo,O_,Pae,UFo,JFo,U$,YFo,KFo,ZFo,V_,$ae,evo,ovo,J$,rvo,tvo,avo,X_,Iae,nvo,svo,Y$,lvo,ivo,dvo,z_,qae,cvo,mvo,K$,fvo,gvo,hvo,Q_,Nae,uvo,pvo,Z$,_vo,bvo,Fvo,W_,jae,vvo,Tvo,eI,Mvo,Evo,Cvo,H_,Dae,wvo,Avo,oI,yvo,Lvo,xvo,U_,Gae,kvo,Svo,rI,Rvo,Bvo,Pvo,J_,Oae,$vo,Ivo,tI,qvo,Nvo,jvo,Y_,Vae,Dvo,Gvo,aI,Ovo,Vvo,Xvo,K_,Xae,zvo,Qvo,nI,Wvo,Hvo,Uvo,Z_,Jvo,zae,Yvo,Kvo,Qae,Zvo,eTo,Wae,oTo,rTo,gA,HSe,nd,eb,Hae,hA,tTo,Uae,aTo,USe,Zo,uA,nTo,sd,sTo,sI,lTo,iTo,lI,dTo,cTo,mTo,pA,fTo,Jae,gTo,hTo,uTo,Wr,_A,pTo,Yae,_To,bTo,ld,FTo,Kae,vTo,TTo,iI,MTo,ETo,CTo,Zae,wTo,ATo,bA,yTo,De,FA,LTo,ene,xTo,kTo,Wa,STo,one,RTo,BTo,rne,PTo,$To,tne,ITo,qTo,NTo,I,ob,ane,jTo,DTo,dI,GTo,OTo,VTo,rb,nne,XTo,zTo,cI,QTo,WTo,HTo,tb,sne,UTo,JTo,mI,YTo,KTo,ZTo,ab,lne,e1o,o1o,fI,r1o,t1o,a1o,nb,ine,n1o,s1o,gI,l1o,i1o,d1o,sb,dne,c1o,m1o,hI,f1o,g1o,h1o,lb,cne,u1o,p1o,uI,_1o,b1o,F1o,ib,mne,v1o,T1o,pI,M1o,E1o,C1o,db,fne,w1o,A1o,_I,y1o,L1o,x1o,cb,gne,k1o,S1o,bI,R1o,B1o,P1o,mb,hne,$1o,I1o,FI,q1o,N1o,j1o,fb,une,D1o,G1o,vI,O1o,V1o,X1o,gb,pne,z1o,Q1o,TI,W1o,H1o,U1o,hb,_ne,J1o,Y1o,MI,K1o,Z1o,eMo,ub,bne,oMo,rMo,EI,tMo,aMo,nMo,pb,Fne,sMo,lMo,CI,iMo,dMo,cMo,_b,vne,mMo,fMo,wI,gMo,hMo,uMo,bb,Tne,pMo,_Mo,AI,bMo,FMo,vMo,Fb,Mne,TMo,MMo,yI,EMo,CMo,wMo,vb,Ene,AMo,yMo,LI,LMo,xMo,kMo,Tb,Cne,SMo,RMo,xI,BMo,PMo,$Mo,Mb,wne,IMo,qMo,kI,NMo,jMo,DMo,Eb,Ane,GMo,OMo,SI,VMo,XMo,zMo,Cb,yne,QMo,WMo,RI,HMo,UMo,JMo,wb,Lne,YMo,KMo,BI,ZMo,e4o,o4o,Ab,xne,r4o,t4o,PI,a4o,n4o,s4o,yb,kne,l4o,i4o,$I,d4o,c4o,m4o,Lb,Sne,f4o,g4o,II,h4o,u4o,p4o,xb,Rne,_4o,b4o,qI,F4o,v4o,T4o,kb,Bne,M4o,E4o,NI,C4o,w4o,A4o,Sb,Pne,y4o,L4o,$ne,x4o,k4o,S4o,Rb,Ine,R4o,B4o,jI,P4o,$4o,I4o,Bb,qne,q4o,N4o,DI,j4o,D4o,G4o,Pb,Nne,O4o,V4o,GI,X4o,z4o,Q4o,$b,jne,W4o,H4o,OI,U4o,J4o,Y4o,Ib,K4o,Dne,Z4o,eEo,Gne,oEo,rEo,One,tEo,aEo,vA,JSe,id,qb,Vne,TA,nEo,Xne,sEo,YSe,er,MA,lEo,dd,iEo,VI,dEo,cEo,XI,mEo,fEo,gEo,EA,hEo,zne,uEo,pEo,_Eo,Hr,CA,bEo,Qne,FEo,vEo,cd,TEo,Wne,MEo,EEo,zI,CEo,wEo,AEo,Hne,yEo,LEo,wA,xEo,Ge,AA,kEo,Une,SEo,REo,Ha,BEo,Jne,PEo,$Eo,Yne,IEo,qEo,Kne,NEo,jEo,DEo,se,Nb,Zne,GEo,OEo,QI,VEo,XEo,zEo,jb,ese,QEo,WEo,WI,HEo,UEo,JEo,Db,ose,YEo,KEo,HI,ZEo,eCo,oCo,Gb,rse,rCo,tCo,UI,aCo,nCo,sCo,Ob,tse,lCo,iCo,JI,dCo,cCo,mCo,Vb,ase,fCo,gCo,YI,hCo,uCo,pCo,Xb,nse,_Co,bCo,KI,FCo,vCo,TCo,zb,sse,MCo,ECo,ZI,CCo,wCo,ACo,Qb,lse,yCo,LCo,eq,xCo,kCo,SCo,Wb,ise,RCo,BCo,oq,PCo,$Co,ICo,Hb,dse,qCo,NCo,rq,jCo,DCo,GCo,Ub,cse,OCo,VCo,tq,XCo,zCo,QCo,Jb,mse,WCo,HCo,aq,UCo,JCo,YCo,Yb,fse,KCo,ZCo,nq,e5o,o5o,r5o,Kb,gse,t5o,a5o,sq,n5o,s5o,l5o,Zb,hse,i5o,d5o,lq,c5o,m5o,f5o,e2,g5o,use,h5o,u5o,pse,p5o,_5o,_se,b5o,F5o,yA,KSe,md,o2,bse,LA,v5o,Fse,T5o,ZSe,or,xA,M5o,fd,E5o,iq,C5o,w5o,dq,A5o,y5o,L5o,kA,x5o,vse,k5o,S5o,R5o,Ur,SA,B5o,Tse,P5o,$5o,gd,I5o,Mse,q5o,N5o,cq,j5o,D5o,G5o,Ese,O5o,V5o,RA,X5o,Oe,BA,z5o,Cse,Q5o,W5o,Ua,H5o,wse,U5o,J5o,Ase,Y5o,K5o,yse,Z5o,e3o,o3o,y,r2,Lse,r3o,t3o,mq,a3o,n3o,s3o,t2,xse,l3o,i3o,fq,d3o,c3o,m3o,a2,kse,f3o,g3o,gq,h3o,u3o,p3o,n2,Sse,_3o,b3o,hq,F3o,v3o,T3o,s2,Rse,M3o,E3o,uq,C3o,w3o,A3o,l2,Bse,y3o,L3o,pq,x3o,k3o,S3o,i2,Pse,R3o,B3o,_q,P3o,$3o,I3o,d2,$se,q3o,N3o,bq,j3o,D3o,G3o,c2,Ise,O3o,V3o,Fq,X3o,z3o,Q3o,m2,qse,W3o,H3o,vq,U3o,J3o,Y3o,f2,Nse,K3o,Z3o,Tq,ewo,owo,rwo,g2,jse,two,awo,Mq,nwo,swo,lwo,h2,Dse,iwo,dwo,Eq,cwo,mwo,fwo,u2,Gse,gwo,hwo,Cq,uwo,pwo,_wo,p2,Ose,bwo,Fwo,wq,vwo,Two,Mwo,_2,Vse,Ewo,Cwo,Aq,wwo,Awo,ywo,b2,Xse,Lwo,xwo,yq,kwo,Swo,Rwo,F2,zse,Bwo,Pwo,Lq,$wo,Iwo,qwo,v2,Qse,Nwo,jwo,xq,Dwo,Gwo,Owo,T2,Wse,Vwo,Xwo,kq,zwo,Qwo,Wwo,M2,Hse,Hwo,Uwo,Sq,Jwo,Ywo,Kwo,E2,Use,Zwo,eAo,Rq,oAo,rAo,tAo,C2,Jse,aAo,nAo,Bq,sAo,lAo,iAo,w2,Yse,dAo,cAo,Pq,mAo,fAo,gAo,A2,Kse,hAo,uAo,$q,pAo,_Ao,bAo,y2,Zse,FAo,vAo,Iq,TAo,MAo,EAo,L2,ele,CAo,wAo,qq,AAo,yAo,LAo,x2,ole,xAo,kAo,Nq,SAo,RAo,BAo,k2,rle,PAo,$Ao,jq,IAo,qAo,NAo,S2,tle,jAo,DAo,Dq,GAo,OAo,VAo,R2,ale,XAo,zAo,Gq,QAo,WAo,HAo,B2,nle,UAo,JAo,Oq,YAo,KAo,ZAo,P2,sle,e6o,o6o,Vq,r6o,t6o,a6o,$2,lle,n6o,s6o,Xq,l6o,i6o,d6o,I2,ile,c6o,m6o,zq,f6o,g6o,h6o,q2,dle,u6o,p6o,Qq,_6o,b6o,F6o,N2,cle,v6o,T6o,Wq,M6o,E6o,C6o,j2,mle,w6o,A6o,Hq,y6o,L6o,x6o,D2,fle,k6o,S6o,Uq,R6o,B6o,P6o,G2,gle,$6o,I6o,Jq,q6o,N6o,j6o,O2,hle,D6o,G6o,Yq,O6o,V6o,X6o,V2,ule,z6o,Q6o,Kq,W6o,H6o,U6o,X2,ple,J6o,Y6o,Zq,K6o,Z6o,e0o,z2,_le,o0o,r0o,eN,t0o,a0o,n0o,Q2,ble,s0o,l0o,oN,i0o,d0o,c0o,W2,Fle,m0o,f0o,rN,g0o,h0o,u0o,H2,p0o,vle,_0o,b0o,Tle,F0o,v0o,Mle,T0o,M0o,PA,eRe,hd,U2,Ele,$A,E0o,Cle,C0o,oRe,rr,IA,w0o,ud,A0o,tN,y0o,L0o,aN,x0o,k0o,S0o,qA,R0o,wle,B0o,P0o,$0o,Jr,NA,I0o,Ale,q0o,N0o,pd,j0o,yle,D0o,G0o,nN,O0o,V0o,X0o,Lle,z0o,Q0o,jA,W0o,Ve,DA,H0o,xle,U0o,J0o,Ja,Y0o,kle,K0o,Z0o,Sle,eyo,oyo,Rle,ryo,tyo,ayo,G,J2,Ble,nyo,syo,sN,lyo,iyo,dyo,Y2,Ple,cyo,myo,lN,fyo,gyo,hyo,K2,$le,uyo,pyo,iN,_yo,byo,Fyo,Z2,Ile,vyo,Tyo,dN,Myo,Eyo,Cyo,eF,qle,wyo,Ayo,cN,yyo,Lyo,xyo,oF,Nle,kyo,Syo,mN,Ryo,Byo,Pyo,rF,jle,$yo,Iyo,fN,qyo,Nyo,jyo,tF,Dle,Dyo,Gyo,gN,Oyo,Vyo,Xyo,aF,Gle,zyo,Qyo,hN,Wyo,Hyo,Uyo,nF,Ole,Jyo,Yyo,uN,Kyo,Zyo,eLo,sF,Vle,oLo,rLo,pN,tLo,aLo,nLo,lF,Xle,sLo,lLo,_N,iLo,dLo,cLo,iF,zle,mLo,fLo,bN,gLo,hLo,uLo,dF,Qle,pLo,_Lo,FN,bLo,FLo,vLo,cF,Wle,TLo,MLo,vN,ELo,CLo,wLo,mF,Hle,ALo,yLo,TN,LLo,xLo,kLo,fF,Ule,SLo,RLo,MN,BLo,PLo,$Lo,gF,Jle,ILo,qLo,EN,NLo,jLo,DLo,hF,Yle,GLo,OLo,CN,VLo,XLo,zLo,uF,Kle,QLo,WLo,wN,HLo,ULo,JLo,pF,Zle,YLo,KLo,AN,ZLo,e7o,o7o,_F,eie,r7o,t7o,yN,a7o,n7o,s7o,bF,oie,l7o,i7o,LN,d7o,c7o,m7o,FF,rie,f7o,g7o,xN,h7o,u7o,p7o,vF,tie,_7o,b7o,kN,F7o,v7o,T7o,TF,aie,M7o,E7o,SN,C7o,w7o,A7o,MF,nie,y7o,L7o,RN,x7o,k7o,S7o,EF,sie,R7o,B7o,BN,P7o,$7o,I7o,CF,q7o,lie,N7o,j7o,iie,D7o,G7o,die,O7o,V7o,GA,rRe,_d,wF,cie,OA,X7o,mie,z7o,tRe,tr,VA,Q7o,bd,W7o,PN,H7o,U7o,$N,J7o,Y7o,K7o,XA,Z7o,fie,e8o,o8o,r8o,Yr,zA,t8o,gie,a8o,n8o,Fd,s8o,hie,l8o,i8o,IN,d8o,c8o,m8o,uie,f8o,g8o,QA,h8o,Xe,WA,u8o,pie,p8o,_8o,Ya,b8o,_ie,F8o,v8o,bie,T8o,M8o,Fie,E8o,C8o,w8o,da,AF,vie,A8o,y8o,qN,L8o,x8o,k8o,yF,Tie,S8o,R8o,NN,B8o,P8o,$8o,LF,Mie,I8o,q8o,jN,N8o,j8o,D8o,xF,Eie,G8o,O8o,DN,V8o,X8o,z8o,kF,Cie,Q8o,W8o,GN,H8o,U8o,J8o,SF,Y8o,wie,K8o,Z8o,Aie,e9o,o9o,yie,r9o,t9o,HA,aRe,vd,RF,Lie,UA,a9o,xie,n9o,nRe,ar,JA,s9o,Td,l9o,ON,i9o,d9o,VN,c9o,m9o,f9o,YA,g9o,kie,h9o,u9o,p9o,Kr,KA,_9o,Sie,b9o,F9o,Md,v9o,Rie,T9o,M9o,XN,E9o,C9o,w9o,Bie,A9o,y9o,ZA,L9o,ze,e6,x9o,Pie,k9o,S9o,Ka,R9o,$ie,B9o,P9o,Iie,$9o,I9o,qie,q9o,N9o,j9o,j,BF,Nie,D9o,G9o,zN,O9o,V9o,X9o,PF,jie,z9o,Q9o,QN,W9o,H9o,U9o,$F,Die,J9o,Y9o,WN,K9o,Z9o,exo,IF,Gie,oxo,rxo,HN,txo,axo,nxo,qF,Oie,sxo,lxo,UN,ixo,dxo,cxo,NF,Vie,mxo,fxo,JN,gxo,hxo,uxo,jF,Xie,pxo,_xo,YN,bxo,Fxo,vxo,DF,zie,Txo,Mxo,KN,Exo,Cxo,wxo,GF,Qie,Axo,yxo,ZN,Lxo,xxo,kxo,OF,Wie,Sxo,Rxo,ej,Bxo,Pxo,$xo,VF,Hie,Ixo,qxo,oj,Nxo,jxo,Dxo,XF,Uie,Gxo,Oxo,rj,Vxo,Xxo,zxo,zF,Jie,Qxo,Wxo,tj,Hxo,Uxo,Jxo,QF,Yie,Yxo,Kxo,aj,Zxo,eko,oko,WF,Kie,rko,tko,nj,ako,nko,sko,HF,Zie,lko,iko,sj,dko,cko,mko,UF,ede,fko,gko,lj,hko,uko,pko,JF,ode,_ko,bko,ij,Fko,vko,Tko,YF,rde,Mko,Eko,dj,Cko,wko,Ako,KF,tde,yko,Lko,cj,xko,kko,Sko,ZF,ade,Rko,Bko,mj,Pko,$ko,Iko,ev,nde,qko,Nko,fj,jko,Dko,Gko,ov,sde,Oko,Vko,gj,Xko,zko,Qko,rv,lde,Wko,Hko,hj,Uko,Jko,Yko,tv,ide,Kko,Zko,uj,eSo,oSo,rSo,av,dde,tSo,aSo,pj,nSo,sSo,lSo,nv,cde,iSo,dSo,_j,cSo,mSo,fSo,sv,mde,gSo,hSo,bj,uSo,pSo,_So,lv,fde,bSo,FSo,Fj,vSo,TSo,MSo,iv,gde,ESo,CSo,vj,wSo,ASo,ySo,dv,hde,LSo,xSo,Tj,kSo,SSo,RSo,cv,ude,BSo,PSo,Mj,$So,ISo,qSo,mv,pde,NSo,jSo,Ej,DSo,GSo,OSo,fv,VSo,_de,XSo,zSo,bde,QSo,WSo,Fde,HSo,USo,o6,sRe,Ed,gv,vde,r6,JSo,Tde,YSo,lRe,nr,t6,KSo,Cd,ZSo,Cj,eRo,oRo,wj,rRo,tRo,aRo,a6,nRo,Mde,sRo,lRo,iRo,Zr,n6,dRo,Ede,cRo,mRo,wd,fRo,Cde,gRo,hRo,Aj,uRo,pRo,_Ro,wde,bRo,FRo,s6,vRo,Qe,l6,TRo,Ade,MRo,ERo,Za,CRo,yde,wRo,ARo,Lde,yRo,LRo,xde,xRo,kRo,SRo,R,hv,kde,RRo,BRo,yj,PRo,$Ro,IRo,uv,Sde,qRo,NRo,Lj,jRo,DRo,GRo,pv,Rde,ORo,VRo,xj,XRo,zRo,QRo,_v,Bde,WRo,HRo,kj,URo,JRo,YRo,bv,Pde,KRo,ZRo,Sj,eBo,oBo,rBo,Fv,$de,tBo,aBo,Rj,nBo,sBo,lBo,vv,Ide,iBo,dBo,Bj,cBo,mBo,fBo,Tv,qde,gBo,hBo,Pj,uBo,pBo,_Bo,Mv,Nde,bBo,FBo,$j,vBo,TBo,MBo,Ev,jde,EBo,CBo,Ij,wBo,ABo,yBo,Cv,Dde,LBo,xBo,qj,kBo,SBo,RBo,wv,Gde,BBo,PBo,Nj,$Bo,IBo,qBo,Av,Ode,NBo,jBo,jj,DBo,GBo,OBo,yv,Vde,VBo,XBo,Dj,zBo,QBo,WBo,Lv,Xde,HBo,UBo,Gj,JBo,YBo,KBo,xv,zde,ZBo,ePo,Oj,oPo,rPo,tPo,kv,Qde,aPo,nPo,Vj,sPo,lPo,iPo,Sv,Wde,dPo,cPo,Xj,mPo,fPo,gPo,Rv,Hde,hPo,uPo,zj,pPo,_Po,bPo,Bv,Ude,FPo,vPo,Qj,TPo,MPo,EPo,Pv,Jde,CPo,wPo,Wj,APo,yPo,LPo,$v,Yde,xPo,kPo,Hj,SPo,RPo,BPo,Iv,Kde,PPo,$Po,Uj,IPo,qPo,NPo,qv,Zde,jPo,DPo,Jj,GPo,OPo,VPo,Nv,ece,XPo,zPo,Yj,QPo,WPo,HPo,jv,oce,UPo,JPo,Kj,YPo,KPo,ZPo,Dv,rce,e$o,o$o,Zj,r$o,t$o,a$o,Gv,tce,n$o,s$o,eD,l$o,i$o,d$o,Ov,ace,c$o,m$o,oD,f$o,g$o,h$o,Vv,nce,u$o,p$o,rD,_$o,b$o,F$o,Xv,sce,v$o,T$o,tD,M$o,E$o,C$o,zv,lce,w$o,A$o,aD,y$o,L$o,x$o,Qv,ice,k$o,S$o,nD,R$o,B$o,P$o,Wv,dce,$$o,I$o,sD,q$o,N$o,j$o,Hv,cce,D$o,G$o,lD,O$o,V$o,X$o,Uv,mce,z$o,Q$o,iD,W$o,H$o,U$o,Jv,fce,J$o,Y$o,dD,K$o,Z$o,eIo,Yv,gce,oIo,rIo,cD,tIo,aIo,nIo,Kv,hce,sIo,lIo,mD,iIo,dIo,cIo,Zv,mIo,uce,fIo,gIo,pce,hIo,uIo,_ce,pIo,_Io,i6,iRe,Ad,eT,bce,d6,bIo,Fce,FIo,dRe,sr,c6,vIo,yd,TIo,fD,MIo,EIo,gD,CIo,wIo,AIo,m6,yIo,vce,LIo,xIo,kIo,et,f6,SIo,Tce,RIo,BIo,Ld,PIo,Mce,$Io,IIo,hD,qIo,NIo,jIo,Ece,DIo,GIo,g6,OIo,We,h6,VIo,Cce,XIo,zIo,en,QIo,wce,WIo,HIo,Ace,UIo,JIo,yce,YIo,KIo,ZIo,Lce,oT,xce,eqo,oqo,uD,rqo,tqo,aqo,rT,nqo,kce,sqo,lqo,Sce,iqo,dqo,Rce,cqo,mqo,u6,cRe,xd,tT,Bce,p6,fqo,Pce,gqo,mRe,lr,_6,hqo,kd,uqo,pD,pqo,_qo,_D,bqo,Fqo,vqo,b6,Tqo,$ce,Mqo,Eqo,Cqo,ot,F6,wqo,Ice,Aqo,yqo,Sd,Lqo,qce,xqo,kqo,bD,Sqo,Rqo,Bqo,Nce,Pqo,$qo,v6,Iqo,He,T6,qqo,jce,Nqo,jqo,on,Dqo,Dce,Gqo,Oqo,Gce,Vqo,Xqo,Oce,zqo,Qqo,Wqo,ge,aT,Vce,Hqo,Uqo,FD,Jqo,Yqo,Kqo,nT,Xce,Zqo,eNo,vD,oNo,rNo,tNo,Ds,zce,aNo,nNo,TD,sNo,lNo,MD,iNo,dNo,cNo,sT,Qce,mNo,fNo,ED,gNo,hNo,uNo,fa,Wce,pNo,_No,CD,bNo,FNo,wD,vNo,TNo,AD,MNo,ENo,CNo,lT,Hce,wNo,ANo,yD,yNo,LNo,xNo,iT,Uce,kNo,SNo,LD,RNo,BNo,PNo,dT,Jce,$No,INo,xD,qNo,NNo,jNo,cT,Yce,DNo,GNo,kD,ONo,VNo,XNo,mT,Kce,zNo,QNo,SD,WNo,HNo,UNo,fT,Zce,JNo,YNo,RD,KNo,ZNo,ejo,gT,ojo,eme,rjo,tjo,ome,ajo,njo,rme,sjo,ljo,M6,fRe,Rd,hT,tme,E6,ijo,ame,djo,gRe,ir,C6,cjo,Bd,mjo,BD,fjo,gjo,PD,hjo,ujo,pjo,w6,_jo,nme,bjo,Fjo,vjo,rt,A6,Tjo,sme,Mjo,Ejo,Pd,Cjo,lme,wjo,Ajo,$D,yjo,Ljo,xjo,ime,kjo,Sjo,y6,Rjo,Ue,L6,Bjo,dme,Pjo,$jo,rn,Ijo,cme,qjo,Njo,mme,jjo,Djo,fme,Gjo,Ojo,Vjo,gme,uT,hme,Xjo,zjo,ID,Qjo,Wjo,Hjo,pT,Ujo,ume,Jjo,Yjo,pme,Kjo,Zjo,_me,eDo,oDo,x6,hRe,$d,_T,bme,k6,rDo,Fme,tDo,uRe,dr,S6,aDo,Id,nDo,qD,sDo,lDo,ND,iDo,dDo,cDo,R6,mDo,vme,fDo,gDo,hDo,tt,B6,uDo,Tme,pDo,_Do,qd,bDo,Mme,FDo,vDo,jD,TDo,MDo,EDo,Eme,CDo,wDo,P6,ADo,Je,$6,yDo,Cme,LDo,xDo,tn,kDo,wme,SDo,RDo,Ame,BDo,PDo,yme,$Do,IDo,qDo,Se,bT,Lme,NDo,jDo,DD,DDo,GDo,ODo,FT,xme,VDo,XDo,GD,zDo,QDo,WDo,vT,kme,HDo,UDo,OD,JDo,YDo,KDo,TT,Sme,ZDo,eGo,VD,oGo,rGo,tGo,MT,Rme,aGo,nGo,XD,sGo,lGo,iGo,ET,Bme,dGo,cGo,zD,mGo,fGo,gGo,CT,Pme,hGo,uGo,QD,pGo,_Go,bGo,wT,$me,FGo,vGo,WD,TGo,MGo,EGo,AT,CGo,Ime,wGo,AGo,qme,yGo,LGo,Nme,xGo,kGo,I6,pRe,Nd,yT,jme,q6,SGo,Dme,RGo,_Re,cr,N6,BGo,jd,PGo,HD,$Go,IGo,UD,qGo,NGo,jGo,j6,DGo,Gme,GGo,OGo,VGo,at,D6,XGo,Ome,zGo,QGo,Dd,WGo,Vme,HGo,UGo,JD,JGo,YGo,KGo,Xme,ZGo,eOo,G6,oOo,Ye,O6,rOo,zme,tOo,aOo,an,nOo,Qme,sOo,lOo,Wme,iOo,dOo,Hme,cOo,mOo,fOo,nn,LT,Ume,gOo,hOo,YD,uOo,pOo,_Oo,xT,Jme,bOo,FOo,KD,vOo,TOo,MOo,kT,Yme,EOo,COo,ZD,wOo,AOo,yOo,ST,Kme,LOo,xOo,eG,kOo,SOo,ROo,RT,BOo,Zme,POo,$Oo,efe,IOo,qOo,ofe,NOo,jOo,V6,bRe,Gd,BT,rfe,X6,DOo,tfe,GOo,FRe,mr,z6,OOo,Od,VOo,oG,XOo,zOo,rG,QOo,WOo,HOo,Q6,UOo,afe,JOo,YOo,KOo,nt,W6,ZOo,nfe,eVo,oVo,Vd,rVo,sfe,tVo,aVo,tG,nVo,sVo,lVo,lfe,iVo,dVo,H6,cVo,Ke,U6,mVo,ife,fVo,gVo,sn,hVo,dfe,uVo,pVo,cfe,_Vo,bVo,mfe,FVo,vVo,TVo,Re,PT,ffe,MVo,EVo,aG,CVo,wVo,AVo,$T,gfe,yVo,LVo,nG,xVo,kVo,SVo,IT,hfe,RVo,BVo,sG,PVo,$Vo,IVo,qT,ufe,qVo,NVo,lG,jVo,DVo,GVo,NT,pfe,OVo,VVo,iG,XVo,zVo,QVo,jT,_fe,WVo,HVo,dG,UVo,JVo,YVo,DT,bfe,KVo,ZVo,cG,eXo,oXo,rXo,GT,Ffe,tXo,aXo,mG,nXo,sXo,lXo,OT,iXo,vfe,dXo,cXo,Tfe,mXo,fXo,Mfe,gXo,hXo,J6,vRe,Xd,VT,Efe,Y6,uXo,Cfe,pXo,TRe,fr,K6,_Xo,zd,bXo,fG,FXo,vXo,gG,TXo,MXo,EXo,Z6,CXo,wfe,wXo,AXo,yXo,st,e0,LXo,Afe,xXo,kXo,Qd,SXo,yfe,RXo,BXo,hG,PXo,$Xo,IXo,Lfe,qXo,NXo,o0,jXo,Ze,r0,DXo,xfe,GXo,OXo,ln,VXo,kfe,XXo,zXo,Sfe,QXo,WXo,Rfe,HXo,UXo,JXo,t0,XT,Bfe,YXo,KXo,uG,ZXo,ezo,ozo,zT,Pfe,rzo,tzo,pG,azo,nzo,szo,QT,lzo,$fe,izo,dzo,Ife,czo,mzo,qfe,fzo,gzo,a0,MRe,Wd,WT,Nfe,n0,hzo,jfe,uzo,ERe,gr,s0,pzo,Hd,_zo,_G,bzo,Fzo,bG,vzo,Tzo,Mzo,l0,Ezo,Dfe,Czo,wzo,Azo,lt,i0,yzo,Gfe,Lzo,xzo,Ud,kzo,Ofe,Szo,Rzo,FG,Bzo,Pzo,$zo,Vfe,Izo,qzo,d0,Nzo,eo,c0,jzo,Xfe,Dzo,Gzo,dn,Ozo,zfe,Vzo,Xzo,Qfe,zzo,Qzo,Wfe,Wzo,Hzo,Uzo,cn,HT,Hfe,Jzo,Yzo,vG,Kzo,Zzo,eQo,UT,Ufe,oQo,rQo,TG,tQo,aQo,nQo,JT,Jfe,sQo,lQo,MG,iQo,dQo,cQo,YT,Yfe,mQo,fQo,EG,gQo,hQo,uQo,KT,pQo,Kfe,_Qo,bQo,Zfe,FQo,vQo,ege,TQo,MQo,m0,CRe,Jd,ZT,oge,f0,EQo,rge,CQo,wRe,hr,g0,wQo,Yd,AQo,CG,yQo,LQo,wG,xQo,kQo,SQo,h0,RQo,tge,BQo,PQo,$Qo,it,u0,IQo,age,qQo,NQo,Kd,jQo,nge,DQo,GQo,AG,OQo,VQo,XQo,sge,zQo,QQo,p0,WQo,oo,_0,HQo,lge,UQo,JQo,mn,YQo,ige,KQo,ZQo,dge,eWo,oWo,cge,rWo,tWo,aWo,Zd,e1,mge,nWo,sWo,yG,lWo,iWo,dWo,o1,fge,cWo,mWo,LG,fWo,gWo,hWo,r1,gge,uWo,pWo,xG,_Wo,bWo,FWo,t1,vWo,hge,TWo,MWo,uge,EWo,CWo,pge,wWo,AWo,b0,ARe,ec,a1,_ge,F0,yWo,bge,LWo,yRe,ur,v0,xWo,oc,kWo,kG,SWo,RWo,SG,BWo,PWo,$Wo,T0,IWo,Fge,qWo,NWo,jWo,dt,M0,DWo,vge,GWo,OWo,rc,VWo,Tge,XWo,zWo,RG,QWo,WWo,HWo,Mge,UWo,JWo,E0,YWo,ro,C0,KWo,Ege,ZWo,eHo,fn,oHo,Cge,rHo,tHo,wge,aHo,nHo,Age,sHo,lHo,iHo,yge,n1,Lge,dHo,cHo,BG,mHo,fHo,gHo,s1,hHo,xge,uHo,pHo,kge,_Ho,bHo,Sge,FHo,vHo,w0,LRe,tc,l1,Rge,A0,THo,Bge,MHo,xRe,pr,y0,EHo,ac,CHo,PG,wHo,AHo,$G,yHo,LHo,xHo,L0,kHo,Pge,SHo,RHo,BHo,ct,x0,PHo,$ge,$Ho,IHo,nc,qHo,Ige,NHo,jHo,IG,DHo,GHo,OHo,qge,VHo,XHo,k0,zHo,to,S0,QHo,Nge,WHo,HHo,gn,UHo,jge,JHo,YHo,Dge,KHo,ZHo,Gge,eUo,oUo,rUo,Oge,i1,Vge,tUo,aUo,qG,nUo,sUo,lUo,d1,iUo,Xge,dUo,cUo,zge,mUo,fUo,Qge,gUo,hUo,R0,kRe,sc,c1,Wge,B0,uUo,Hge,pUo,SRe,_r,P0,_Uo,lc,bUo,NG,FUo,vUo,jG,TUo,MUo,EUo,$0,CUo,Uge,wUo,AUo,yUo,mt,I0,LUo,Jge,xUo,kUo,ic,SUo,Yge,RUo,BUo,DG,PUo,$Uo,IUo,Kge,qUo,NUo,q0,jUo,ao,N0,DUo,Zge,GUo,OUo,hn,VUo,ehe,XUo,zUo,ohe,QUo,WUo,rhe,HUo,UUo,JUo,dc,m1,the,YUo,KUo,GG,ZUo,eJo,oJo,f1,ahe,rJo,tJo,OG,aJo,nJo,sJo,g1,nhe,lJo,iJo,VG,dJo,cJo,mJo,h1,fJo,she,gJo,hJo,lhe,uJo,pJo,ihe,_Jo,bJo,j0,RRe,cc,u1,dhe,D0,FJo,che,vJo,BRe,br,G0,TJo,mc,MJo,XG,EJo,CJo,zG,wJo,AJo,yJo,O0,LJo,mhe,xJo,kJo,SJo,ft,V0,RJo,fhe,BJo,PJo,fc,$Jo,ghe,IJo,qJo,QG,NJo,jJo,DJo,hhe,GJo,OJo,X0,VJo,no,z0,XJo,uhe,zJo,QJo,un,WJo,phe,HJo,UJo,_he,JJo,YJo,bhe,KJo,ZJo,eYo,Fhe,p1,vhe,oYo,rYo,WG,tYo,aYo,nYo,_1,sYo,The,lYo,iYo,Mhe,dYo,cYo,Ehe,mYo,fYo,Q0,PRe,gc,b1,Che,W0,gYo,whe,hYo,$Re,Fr,H0,uYo,hc,pYo,HG,_Yo,bYo,UG,FYo,vYo,TYo,U0,MYo,Ahe,EYo,CYo,wYo,gt,J0,AYo,yhe,yYo,LYo,uc,xYo,Lhe,kYo,SYo,JG,RYo,BYo,PYo,xhe,$Yo,IYo,Y0,qYo,ho,K0,NYo,khe,jYo,DYo,pn,GYo,She,OYo,VYo,Rhe,XYo,zYo,Bhe,QYo,WYo,HYo,x,F1,Phe,UYo,JYo,YG,YYo,KYo,ZYo,v1,$he,eKo,oKo,KG,rKo,tKo,aKo,T1,Ihe,nKo,sKo,ZG,lKo,iKo,dKo,M1,qhe,cKo,mKo,eO,fKo,gKo,hKo,E1,Nhe,uKo,pKo,oO,_Ko,bKo,FKo,C1,jhe,vKo,TKo,rO,MKo,EKo,CKo,w1,Dhe,wKo,AKo,tO,yKo,LKo,xKo,A1,Ghe,kKo,SKo,aO,RKo,BKo,PKo,y1,Ohe,$Ko,IKo,nO,qKo,NKo,jKo,L1,Vhe,DKo,GKo,sO,OKo,VKo,XKo,x1,Xhe,zKo,QKo,lO,WKo,HKo,UKo,k1,zhe,JKo,YKo,iO,KKo,ZKo,eZo,S1,Qhe,oZo,rZo,dO,tZo,aZo,nZo,R1,Whe,sZo,lZo,cO,iZo,dZo,cZo,B1,Hhe,mZo,fZo,mO,gZo,hZo,uZo,P1,Uhe,pZo,_Zo,fO,bZo,FZo,vZo,Gs,Jhe,TZo,MZo,gO,EZo,CZo,hO,wZo,AZo,yZo,$1,Yhe,LZo,xZo,uO,kZo,SZo,RZo,I1,Khe,BZo,PZo,pO,$Zo,IZo,qZo,q1,Zhe,NZo,jZo,_O,DZo,GZo,OZo,N1,eue,VZo,XZo,bO,zZo,QZo,WZo,j1,oue,HZo,UZo,FO,JZo,YZo,KZo,D1,rue,ZZo,eer,vO,oer,rer,ter,G1,tue,aer,ner,TO,ser,ler,ier,O1,aue,der,cer,MO,mer,fer,ger,V1,nue,her,uer,EO,per,_er,ber,X1,sue,Fer,ver,CO,Ter,Mer,Eer,z1,lue,Cer,wer,wO,Aer,yer,Ler,Q1,iue,xer,ker,AO,Ser,Rer,Ber,W1,due,Per,$er,yO,Ier,qer,Ner,H1,cue,jer,Der,LO,Ger,Oer,Ver,U1,mue,Xer,zer,xO,Qer,Wer,Her,J1,fue,Uer,Jer,kO,Yer,Ker,Zer,Y1,gue,eor,oor,SO,ror,tor,aor,K1,hue,nor,sor,RO,lor,ior,dor,Z1,uue,cor,mor,BO,gor,hor,uor,eM,pue,por,_or,PO,bor,For,vor,oM,_ue,Tor,Mor,$O,Eor,Cor,wor,rM,bue,Aor,yor,IO,Lor,xor,kor,tM,Fue,Sor,Ror,qO,Bor,Por,$or,aM,vue,Ior,qor,NO,Nor,jor,Dor,nM,Tue,Gor,Oor,jO,Vor,Xor,zor,sM,Mue,Qor,Wor,DO,Hor,Uor,Jor,Eue,Yor,Kor,Z0,IRe,pc,lM,Cue,ey,Zor,wue,err,qRe,vr,oy,orr,_c,rrr,GO,trr,arr,OO,nrr,srr,lrr,ry,irr,Aue,drr,crr,mrr,ht,ty,frr,yue,grr,hrr,bc,urr,Lue,prr,_rr,VO,brr,Frr,vrr,xue,Trr,Mrr,ay,Err,uo,ny,Crr,kue,wrr,Arr,_n,yrr,Sue,Lrr,xrr,Rue,krr,Srr,Bue,Rrr,Brr,Prr,H,iM,Pue,$rr,Irr,XO,qrr,Nrr,jrr,dM,$ue,Drr,Grr,zO,Orr,Vrr,Xrr,cM,Iue,zrr,Qrr,QO,Wrr,Hrr,Urr,mM,que,Jrr,Yrr,WO,Krr,Zrr,etr,fM,Nue,otr,rtr,HO,ttr,atr,ntr,gM,jue,str,ltr,UO,itr,dtr,ctr,hM,Due,mtr,ftr,JO,gtr,htr,utr,uM,Gue,ptr,_tr,YO,btr,Ftr,vtr,pM,Oue,Ttr,Mtr,KO,Etr,Ctr,wtr,_M,Vue,Atr,ytr,ZO,Ltr,xtr,ktr,bM,Xue,Str,Rtr,eV,Btr,Ptr,$tr,FM,zue,Itr,qtr,oV,Ntr,jtr,Dtr,vM,Que,Gtr,Otr,rV,Vtr,Xtr,ztr,TM,Wue,Qtr,Wtr,tV,Htr,Utr,Jtr,MM,Hue,Ytr,Ktr,aV,Ztr,ear,oar,EM,Uue,rar,tar,nV,aar,nar,sar,CM,Jue,lar,iar,sV,dar,car,mar,wM,Yue,far,gar,lV,har,uar,par,AM,Kue,_ar,bar,iV,Far,Tar,Mar,yM,Zue,Ear,Car,dV,war,Aar,yar,LM,epe,Lar,xar,cV,kar,Sar,Rar,xM,ope,Bar,Par,mV,$ar,Iar,qar,rpe,Nar,jar,sy,NRe,Fc,kM,tpe,ly,Dar,ape,Gar,jRe,Tr,iy,Oar,vc,Var,fV,Xar,zar,gV,Qar,War,Har,dy,Uar,npe,Jar,Yar,Kar,ut,cy,Zar,spe,enr,onr,Tc,rnr,lpe,tnr,anr,hV,nnr,snr,lnr,ipe,inr,dnr,my,cnr,po,fy,mnr,dpe,fnr,gnr,bn,hnr,cpe,unr,pnr,mpe,_nr,bnr,fpe,Fnr,vnr,Tnr,ce,SM,gpe,Mnr,Enr,uV,Cnr,wnr,Anr,RM,hpe,ynr,Lnr,pV,xnr,knr,Snr,BM,upe,Rnr,Bnr,_V,Pnr,$nr,Inr,PM,ppe,qnr,Nnr,bV,jnr,Dnr,Gnr,$M,_pe,Onr,Vnr,FV,Xnr,znr,Qnr,IM,bpe,Wnr,Hnr,vV,Unr,Jnr,Ynr,qM,Fpe,Knr,Znr,TV,esr,osr,rsr,NM,vpe,tsr,asr,MV,nsr,ssr,lsr,jM,Tpe,isr,dsr,EV,csr,msr,fsr,DM,Mpe,gsr,hsr,CV,usr,psr,_sr,GM,Epe,bsr,Fsr,wV,vsr,Tsr,Msr,OM,Cpe,Esr,Csr,AV,wsr,Asr,ysr,wpe,Lsr,xsr,gy,DRe,Mc,VM,Ape,hy,ksr,ype,Ssr,GRe,Mr,uy,Rsr,Ec,Bsr,yV,Psr,$sr,LV,Isr,qsr,Nsr,py,jsr,Lpe,Dsr,Gsr,Osr,pt,_y,Vsr,xpe,Xsr,zsr,Cc,Qsr,kpe,Wsr,Hsr,xV,Usr,Jsr,Ysr,Spe,Ksr,Zsr,by,elr,_o,Fy,olr,Rpe,rlr,tlr,Fn,alr,Bpe,nlr,slr,Ppe,llr,ilr,$pe,dlr,clr,mlr,vy,XM,Ipe,flr,glr,kV,hlr,ulr,plr,zM,qpe,_lr,blr,SV,Flr,vlr,Tlr,Npe,Mlr,Elr,Ty,ORe,wc,QM,jpe,My,Clr,Dpe,wlr,VRe,Er,Ey,Alr,Ac,ylr,RV,Llr,xlr,BV,klr,Slr,Rlr,Cy,Blr,Gpe,Plr,$lr,Ilr,_t,wy,qlr,Ope,Nlr,jlr,yc,Dlr,Vpe,Glr,Olr,PV,Vlr,Xlr,zlr,Xpe,Qlr,Wlr,Ay,Hlr,bo,yy,Ulr,zpe,Jlr,Ylr,vn,Klr,Qpe,Zlr,eir,Wpe,oir,rir,Hpe,tir,air,nir,J,WM,Upe,sir,lir,$V,iir,dir,cir,HM,Jpe,mir,fir,IV,gir,hir,uir,UM,Ype,pir,_ir,qV,bir,Fir,vir,JM,Kpe,Tir,Mir,NV,Eir,Cir,wir,YM,Zpe,Air,yir,jV,Lir,xir,kir,KM,e_e,Sir,Rir,DV,Bir,Pir,$ir,ZM,o_e,Iir,qir,GV,Nir,jir,Dir,e4,r_e,Gir,Oir,OV,Vir,Xir,zir,o4,t_e,Qir,Wir,VV,Hir,Uir,Jir,r4,a_e,Yir,Kir,XV,Zir,edr,odr,t4,n_e,rdr,tdr,zV,adr,ndr,sdr,a4,s_e,ldr,idr,QV,ddr,cdr,mdr,n4,l_e,fdr,gdr,WV,hdr,udr,pdr,s4,i_e,_dr,bdr,HV,Fdr,vdr,Tdr,l4,d_e,Mdr,Edr,UV,Cdr,wdr,Adr,i4,c_e,ydr,Ldr,JV,xdr,kdr,Sdr,d4,m_e,Rdr,Bdr,YV,Pdr,$dr,Idr,c4,f_e,qdr,Ndr,KV,jdr,Ddr,Gdr,m4,g_e,Odr,Vdr,ZV,Xdr,zdr,Qdr,f4,h_e,Wdr,Hdr,eX,Udr,Jdr,Ydr,u_e,Kdr,Zdr,Ly,XRe,Lc,g4,p_e,xy,ecr,__e,ocr,zRe,Cr,ky,rcr,xc,tcr,oX,acr,ncr,rX,scr,lcr,icr,Sy,dcr,b_e,ccr,mcr,fcr,bt,Ry,gcr,F_e,hcr,ucr,kc,pcr,v_e,_cr,bcr,tX,Fcr,vcr,Tcr,T_e,Mcr,Ecr,By,Ccr,Fo,Py,wcr,M_e,Acr,ycr,Tn,Lcr,E_e,xcr,kcr,C_e,Scr,Rcr,w_e,Bcr,Pcr,$cr,_e,h4,A_e,Icr,qcr,aX,Ncr,jcr,Dcr,u4,y_e,Gcr,Ocr,nX,Vcr,Xcr,zcr,p4,L_e,Qcr,Wcr,sX,Hcr,Ucr,Jcr,_4,x_e,Ycr,Kcr,lX,Zcr,emr,omr,b4,k_e,rmr,tmr,iX,amr,nmr,smr,F4,S_e,lmr,imr,dX,dmr,cmr,mmr,v4,R_e,fmr,gmr,cX,hmr,umr,pmr,T4,B_e,_mr,bmr,mX,Fmr,vmr,Tmr,M4,P_e,Mmr,Emr,fX,Cmr,wmr,Amr,E4,$_e,ymr,Lmr,gX,xmr,kmr,Smr,I_e,Rmr,Bmr,$y,QRe,Sc,C4,q_e,Iy,Pmr,N_e,$mr,WRe,wr,qy,Imr,Rc,qmr,hX,Nmr,jmr,uX,Dmr,Gmr,Omr,Ny,Vmr,j_e,Xmr,zmr,Qmr,Ft,jy,Wmr,D_e,Hmr,Umr,Bc,Jmr,G_e,Ymr,Kmr,pX,Zmr,efr,ofr,O_e,rfr,tfr,Dy,afr,vo,Gy,nfr,V_e,sfr,lfr,Mn,ifr,X_e,dfr,cfr,z_e,mfr,ffr,Q_e,gfr,hfr,ufr,V,w4,W_e,pfr,_fr,_X,bfr,Ffr,vfr,A4,H_e,Tfr,Mfr,bX,Efr,Cfr,wfr,y4,U_e,Afr,yfr,FX,Lfr,xfr,kfr,L4,J_e,Sfr,Rfr,vX,Bfr,Pfr,$fr,x4,Y_e,Ifr,qfr,TX,Nfr,jfr,Dfr,k4,K_e,Gfr,Ofr,MX,Vfr,Xfr,zfr,S4,Z_e,Qfr,Wfr,EX,Hfr,Ufr,Jfr,R4,ebe,Yfr,Kfr,CX,Zfr,egr,ogr,B4,obe,rgr,tgr,wX,agr,ngr,sgr,P4,rbe,lgr,igr,AX,dgr,cgr,mgr,$4,tbe,fgr,ggr,yX,hgr,ugr,pgr,I4,abe,_gr,bgr,LX,Fgr,vgr,Tgr,q4,nbe,Mgr,Egr,xX,Cgr,wgr,Agr,N4,sbe,ygr,Lgr,kX,xgr,kgr,Sgr,j4,lbe,Rgr,Bgr,SX,Pgr,$gr,Igr,D4,ibe,qgr,Ngr,RX,jgr,Dgr,Ggr,G4,dbe,Ogr,Vgr,BX,Xgr,zgr,Qgr,O4,cbe,Wgr,Hgr,PX,Ugr,Jgr,Ygr,V4,mbe,Kgr,Zgr,$X,ehr,ohr,rhr,X4,fbe,thr,ahr,IX,nhr,shr,lhr,z4,gbe,ihr,dhr,qX,chr,mhr,fhr,Q4,hbe,ghr,hhr,NX,uhr,phr,_hr,W4,ube,bhr,Fhr,jX,vhr,Thr,Mhr,H4,pbe,Ehr,Chr,DX,whr,Ahr,yhr,U4,_be,Lhr,xhr,GX,khr,Shr,Rhr,J4,bbe,Bhr,Phr,OX,$hr,Ihr,qhr,Fbe,Nhr,jhr,Oy,HRe,Pc,Y4,vbe,Vy,Dhr,Tbe,Ghr,URe,Ar,Xy,Ohr,$c,Vhr,VX,Xhr,zhr,XX,Qhr,Whr,Hhr,zy,Uhr,Mbe,Jhr,Yhr,Khr,vt,Qy,Zhr,Ebe,eur,our,Ic,rur,Cbe,tur,aur,zX,nur,sur,lur,wbe,iur,dur,Wy,cur,To,Hy,mur,Abe,fur,gur,En,hur,ybe,uur,pur,Lbe,_ur,bur,xbe,Fur,vur,Tur,ae,K4,kbe,Mur,Eur,QX,Cur,wur,Aur,Z4,Sbe,yur,Lur,WX,xur,kur,Sur,eE,Rbe,Rur,Bur,HX,Pur,$ur,Iur,oE,Bbe,qur,Nur,UX,jur,Dur,Gur,rE,Pbe,Our,Vur,JX,Xur,zur,Qur,tE,$be,Wur,Hur,YX,Uur,Jur,Yur,aE,Ibe,Kur,Zur,KX,epr,opr,rpr,nE,qbe,tpr,apr,ZX,npr,spr,lpr,sE,Nbe,ipr,dpr,ez,cpr,mpr,fpr,lE,jbe,gpr,hpr,oz,upr,ppr,_pr,iE,Dbe,bpr,Fpr,rz,vpr,Tpr,Mpr,dE,Gbe,Epr,Cpr,tz,wpr,Apr,ypr,cE,Obe,Lpr,xpr,az,kpr,Spr,Rpr,mE,Vbe,Bpr,Ppr,nz,$pr,Ipr,qpr,fE,Xbe,Npr,jpr,sz,Dpr,Gpr,Opr,gE,zbe,Vpr,Xpr,lz,zpr,Qpr,Wpr,hE,Qbe,Hpr,Upr,iz,Jpr,Ypr,Kpr,Wbe,Zpr,e_r,Uy,JRe,qc,uE,Hbe,Jy,o_r,Ube,r_r,YRe,yr,Yy,t_r,Nc,a_r,dz,n_r,s_r,cz,l_r,i_r,d_r,Ky,c_r,Jbe,m_r,f_r,g_r,Tt,Zy,h_r,Ybe,u_r,p_r,jc,__r,Kbe,b_r,F_r,mz,v_r,T_r,M_r,Zbe,E_r,C_r,eL,w_r,Mo,oL,A_r,e2e,y_r,L_r,Cn,x_r,o2e,k_r,S_r,r2e,R_r,B_r,t2e,P_r,$_r,I_r,a2e,pE,n2e,q_r,N_r,fz,j_r,D_r,G_r,s2e,O_r,V_r,rL,KRe,Dc,_E,l2e,tL,X_r,i2e,z_r,ZRe,Lr,aL,Q_r,Gc,W_r,gz,H_r,U_r,hz,J_r,Y_r,K_r,nL,Z_r,d2e,ebr,obr,rbr,Mt,sL,tbr,c2e,abr,nbr,Oc,sbr,m2e,lbr,ibr,uz,dbr,cbr,mbr,f2e,fbr,gbr,lL,hbr,Eo,iL,ubr,g2e,pbr,_br,wn,bbr,h2e,Fbr,vbr,u2e,Tbr,Mbr,p2e,Ebr,Cbr,wbr,Y,bE,_2e,Abr,ybr,pz,Lbr,xbr,kbr,FE,b2e,Sbr,Rbr,_z,Bbr,Pbr,$br,vE,F2e,Ibr,qbr,bz,Nbr,jbr,Dbr,TE,v2e,Gbr,Obr,Fz,Vbr,Xbr,zbr,ME,T2e,Qbr,Wbr,vz,Hbr,Ubr,Jbr,EE,M2e,Ybr,Kbr,Tz,Zbr,e2r,o2r,CE,E2e,r2r,t2r,Mz,a2r,n2r,s2r,wE,C2e,l2r,i2r,Ez,d2r,c2r,m2r,AE,w2e,f2r,g2r,Cz,h2r,u2r,p2r,yE,A2e,_2r,b2r,wz,F2r,v2r,T2r,LE,y2e,M2r,E2r,Az,C2r,w2r,A2r,xE,L2e,y2r,L2r,yz,x2r,k2r,S2r,kE,x2e,R2r,B2r,Lz,P2r,$2r,I2r,SE,k2e,q2r,N2r,xz,j2r,D2r,G2r,RE,S2e,O2r,V2r,kz,X2r,z2r,Q2r,BE,R2e,W2r,H2r,Sz,U2r,J2r,Y2r,PE,B2e,K2r,Z2r,Rz,eFr,oFr,rFr,$E,P2e,tFr,aFr,Bz,nFr,sFr,lFr,IE,$2e,iFr,dFr,Pz,cFr,mFr,fFr,qE,I2e,gFr,hFr,$z,uFr,pFr,_Fr,q2e,bFr,FFr,dL,eBe,Vc,NE,N2e,cL,vFr,j2e,TFr,oBe,xr,mL,MFr,Xc,EFr,Iz,CFr,wFr,qz,AFr,yFr,LFr,fL,xFr,D2e,kFr,SFr,RFr,Et,gL,BFr,G2e,PFr,$Fr,zc,IFr,O2e,qFr,NFr,Nz,jFr,DFr,GFr,V2e,OFr,VFr,hL,XFr,Co,uL,zFr,X2e,QFr,WFr,An,HFr,z2e,UFr,JFr,Q2e,YFr,KFr,W2e,ZFr,evr,ovr,K,jE,H2e,rvr,tvr,jz,avr,nvr,svr,DE,U2e,lvr,ivr,Dz,dvr,cvr,mvr,GE,J2e,fvr,gvr,Gz,hvr,uvr,pvr,OE,Y2e,_vr,bvr,Oz,Fvr,vvr,Tvr,VE,K2e,Mvr,Evr,Vz,Cvr,wvr,Avr,XE,Z2e,yvr,Lvr,Xz,xvr,kvr,Svr,zE,eFe,Rvr,Bvr,zz,Pvr,$vr,Ivr,QE,oFe,qvr,Nvr,Qz,jvr,Dvr,Gvr,WE,rFe,Ovr,Vvr,Wz,Xvr,zvr,Qvr,HE,tFe,Wvr,Hvr,Hz,Uvr,Jvr,Yvr,UE,aFe,Kvr,Zvr,Uz,eTr,oTr,rTr,JE,nFe,tTr,aTr,Jz,nTr,sTr,lTr,YE,sFe,iTr,dTr,Yz,cTr,mTr,fTr,KE,lFe,gTr,hTr,Kz,uTr,pTr,_Tr,ZE,iFe,bTr,FTr,Zz,vTr,TTr,MTr,eC,dFe,ETr,CTr,eQ,wTr,ATr,yTr,oC,cFe,LTr,xTr,oQ,kTr,STr,RTr,rC,mFe,BTr,PTr,rQ,$Tr,ITr,qTr,tC,fFe,NTr,jTr,tQ,DTr,GTr,OTr,aC,gFe,VTr,XTr,aQ,zTr,QTr,WTr,hFe,HTr,UTr,pL,rBe,Qc,nC,uFe,_L,JTr,pFe,YTr,tBe,kr,bL,KTr,Wc,ZTr,nQ,e1r,o1r,sQ,r1r,t1r,a1r,FL,n1r,_Fe,s1r,l1r,i1r,Ct,vL,d1r,bFe,c1r,m1r,Hc,f1r,FFe,g1r,h1r,lQ,u1r,p1r,_1r,vFe,b1r,F1r,TL,v1r,wo,ML,T1r,TFe,M1r,E1r,yn,C1r,MFe,w1r,A1r,EFe,y1r,L1r,CFe,x1r,k1r,S1r,wFe,sC,AFe,R1r,B1r,iQ,P1r,$1r,I1r,yFe,q1r,N1r,EL,aBe,Uc,lC,LFe,CL,j1r,xFe,D1r,nBe,Sr,wL,G1r,Jc,O1r,dQ,V1r,X1r,cQ,z1r,Q1r,W1r,AL,H1r,kFe,U1r,J1r,Y1r,wt,yL,K1r,SFe,Z1r,eMr,Yc,oMr,RFe,rMr,tMr,mQ,aMr,nMr,sMr,BFe,lMr,iMr,LL,dMr,Ao,xL,cMr,PFe,mMr,fMr,Ln,gMr,$Fe,hMr,uMr,IFe,pMr,_Mr,qFe,bMr,FMr,vMr,NFe,iC,jFe,TMr,MMr,fQ,EMr,CMr,wMr,DFe,AMr,yMr,kL,sBe,Kc,dC,GFe,SL,LMr,OFe,xMr,lBe,Rr,RL,kMr,Zc,SMr,gQ,RMr,BMr,hQ,PMr,$Mr,IMr,BL,qMr,VFe,NMr,jMr,DMr,At,PL,GMr,XFe,OMr,VMr,em,XMr,zFe,zMr,QMr,uQ,WMr,HMr,UMr,QFe,JMr,YMr,$L,KMr,yo,IL,ZMr,WFe,e4r,o4r,xn,r4r,HFe,t4r,a4r,UFe,n4r,s4r,JFe,l4r,i4r,d4r,z,cC,YFe,c4r,m4r,pQ,f4r,g4r,h4r,mC,KFe,u4r,p4r,_Q,_4r,b4r,F4r,fC,ZFe,v4r,T4r,bQ,M4r,E4r,C4r,gC,eve,w4r,A4r,FQ,y4r,L4r,x4r,hC,ove,k4r,S4r,vQ,R4r,B4r,P4r,uC,rve,$4r,I4r,TQ,q4r,N4r,j4r,pC,tve,D4r,G4r,MQ,O4r,V4r,X4r,_C,ave,z4r,Q4r,EQ,W4r,H4r,U4r,bC,nve,J4r,Y4r,CQ,K4r,Z4r,eEr,FC,sve,oEr,rEr,wQ,tEr,aEr,nEr,vC,lve,sEr,lEr,AQ,iEr,dEr,cEr,TC,ive,mEr,fEr,yQ,gEr,hEr,uEr,MC,dve,pEr,_Er,LQ,bEr,FEr,vEr,EC,cve,TEr,MEr,xQ,EEr,CEr,wEr,CC,mve,AEr,yEr,kQ,LEr,xEr,kEr,wC,fve,SEr,REr,SQ,BEr,PEr,$Er,AC,gve,IEr,qEr,RQ,NEr,jEr,DEr,yC,hve,GEr,OEr,BQ,VEr,XEr,zEr,LC,uve,QEr,WEr,PQ,HEr,UEr,JEr,xC,pve,YEr,KEr,$Q,ZEr,eCr,oCr,kC,_ve,rCr,tCr,IQ,aCr,nCr,sCr,SC,bve,lCr,iCr,qQ,dCr,cCr,mCr,RC,Fve,fCr,gCr,NQ,hCr,uCr,pCr,BC,vve,_Cr,bCr,jQ,FCr,vCr,TCr,PC,Tve,MCr,ECr,DQ,CCr,wCr,ACr,Mve,yCr,LCr,qL,iBe,om,$C,Eve,NL,xCr,Cve,kCr,dBe,Br,jL,SCr,rm,RCr,GQ,BCr,PCr,OQ,$Cr,ICr,qCr,DL,NCr,wve,jCr,DCr,GCr,yt,GL,OCr,Ave,VCr,XCr,tm,zCr,yve,QCr,WCr,VQ,HCr,UCr,JCr,Lve,YCr,KCr,OL,ZCr,Lo,VL,e5r,xve,o5r,r5r,kn,t5r,kve,a5r,n5r,Sve,s5r,l5r,Rve,i5r,d5r,c5r,ca,IC,Bve,m5r,f5r,XQ,g5r,h5r,u5r,qC,Pve,p5r,_5r,zQ,b5r,F5r,v5r,NC,$ve,T5r,M5r,QQ,E5r,C5r,w5r,jC,Ive,A5r,y5r,WQ,L5r,x5r,k5r,DC,qve,S5r,R5r,HQ,B5r,P5r,$5r,Nve,I5r,q5r,XL,cBe,am,GC,jve,zL,N5r,Dve,j5r,mBe,Pr,QL,D5r,nm,G5r,UQ,O5r,V5r,JQ,X5r,z5r,Q5r,WL,W5r,Gve,H5r,U5r,J5r,Lt,HL,Y5r,Ove,K5r,Z5r,sm,e3r,Vve,o3r,r3r,YQ,t3r,a3r,n3r,Xve,s3r,l3r,UL,i3r,xo,JL,d3r,zve,c3r,m3r,Sn,f3r,Qve,g3r,h3r,Wve,u3r,p3r,Hve,_3r,b3r,F3r,me,OC,Uve,v3r,T3r,KQ,M3r,E3r,C3r,VC,Jve,w3r,A3r,ZQ,y3r,L3r,x3r,XC,Yve,k3r,S3r,eW,R3r,B3r,P3r,zC,Kve,$3r,I3r,oW,q3r,N3r,j3r,QC,Zve,D3r,G3r,rW,O3r,V3r,X3r,WC,eTe,z3r,Q3r,tW,W3r,H3r,U3r,HC,oTe,J3r,Y3r,aW,K3r,Z3r,ewr,UC,rTe,owr,rwr,nW,twr,awr,nwr,JC,tTe,swr,lwr,sW,iwr,dwr,cwr,YC,aTe,mwr,fwr,lW,gwr,hwr,uwr,KC,nTe,pwr,_wr,iW,bwr,Fwr,vwr,ZC,sTe,Twr,Mwr,dW,Ewr,Cwr,wwr,lTe,Awr,ywr,YL,fBe,lm,e5,iTe,KL,Lwr,dTe,xwr,gBe,$r,ZL,kwr,im,Swr,cW,Rwr,Bwr,mW,Pwr,$wr,Iwr,e7,qwr,cTe,Nwr,jwr,Dwr,xt,o7,Gwr,mTe,Owr,Vwr,dm,Xwr,fTe,zwr,Qwr,fW,Wwr,Hwr,Uwr,gTe,Jwr,Ywr,r7,Kwr,ko,t7,Zwr,hTe,eAr,oAr,Rn,rAr,uTe,tAr,aAr,pTe,nAr,sAr,_Te,lAr,iAr,dAr,be,o5,bTe,cAr,mAr,gW,fAr,gAr,hAr,r5,FTe,uAr,pAr,hW,_Ar,bAr,FAr,t5,vTe,vAr,TAr,uW,MAr,EAr,CAr,a5,TTe,wAr,AAr,pW,yAr,LAr,xAr,n5,MTe,kAr,SAr,_W,RAr,BAr,PAr,s5,ETe,$Ar,IAr,bW,qAr,NAr,jAr,l5,CTe,DAr,GAr,FW,OAr,VAr,XAr,i5,wTe,zAr,QAr,vW,WAr,HAr,UAr,d5,ATe,JAr,YAr,TW,KAr,ZAr,e6r,c5,yTe,o6r,r6r,MW,t6r,a6r,n6r,LTe,s6r,l6r,a7,hBe,cm,m5,xTe,n7,i6r,kTe,d6r,uBe,Ir,s7,c6r,mm,m6r,EW,f6r,g6r,CW,h6r,u6r,p6r,l7,_6r,STe,b6r,F6r,v6r,kt,i7,T6r,RTe,M6r,E6r,fm,C6r,BTe,w6r,A6r,wW,y6r,L6r,x6r,PTe,k6r,S6r,d7,R6r,So,c7,B6r,$Te,P6r,$6r,Bn,I6r,ITe,q6r,N6r,qTe,j6r,D6r,NTe,G6r,O6r,V6r,Ee,f5,jTe,X6r,z6r,AW,Q6r,W6r,H6r,g5,DTe,U6r,J6r,yW,Y6r,K6r,Z6r,h5,GTe,e0r,o0r,LW,r0r,t0r,a0r,u5,OTe,n0r,s0r,xW,l0r,i0r,d0r,p5,VTe,c0r,m0r,kW,f0r,g0r,h0r,_5,XTe,u0r,p0r,SW,_0r,b0r,F0r,b5,zTe,v0r,T0r,RW,M0r,E0r,C0r,F5,QTe,w0r,A0r,BW,y0r,L0r,x0r,v5,WTe,k0r,S0r,PW,R0r,B0r,P0r,HTe,$0r,I0r,m7,pBe,gm,T5,UTe,f7,q0r,JTe,N0r,_Be,qr,g7,j0r,hm,D0r,$W,G0r,O0r,IW,V0r,X0r,z0r,h7,Q0r,YTe,W0r,H0r,U0r,St,u7,J0r,KTe,Y0r,K0r,um,Z0r,ZTe,eyr,oyr,qW,ryr,tyr,ayr,e1e,nyr,syr,p7,lyr,Ro,_7,iyr,o1e,dyr,cyr,Pn,myr,r1e,fyr,gyr,t1e,hyr,uyr,a1e,pyr,_yr,byr,Fe,M5,n1e,Fyr,vyr,NW,Tyr,Myr,Eyr,E5,s1e,Cyr,wyr,jW,Ayr,yyr,Lyr,C5,l1e,xyr,kyr,DW,Syr,Ryr,Byr,w5,i1e,Pyr,$yr,GW,Iyr,qyr,Nyr,A5,d1e,jyr,Dyr,OW,Gyr,Oyr,Vyr,y5,c1e,Xyr,zyr,VW,Qyr,Wyr,Hyr,L5,m1e,Uyr,Jyr,XW,Yyr,Kyr,Zyr,x5,f1e,eLr,oLr,zW,rLr,tLr,aLr,k5,g1e,nLr,sLr,QW,lLr,iLr,dLr,S5,h1e,cLr,mLr,WW,fLr,gLr,hLr,u1e,uLr,pLr,b7,bBe,pm,R5,p1e,F7,_Lr,_1e,bLr,FBe,Nr,v7,FLr,_m,vLr,HW,TLr,MLr,UW,ELr,CLr,wLr,T7,ALr,b1e,yLr,LLr,xLr,Rt,M7,kLr,F1e,SLr,RLr,bm,BLr,v1e,PLr,$Lr,JW,ILr,qLr,NLr,T1e,jLr,DLr,E7,GLr,Bo,C7,OLr,M1e,VLr,XLr,$n,zLr,E1e,QLr,WLr,C1e,HLr,ULr,w1e,JLr,YLr,KLr,ve,B5,A1e,ZLr,e7r,YW,o7r,r7r,t7r,P5,y1e,a7r,n7r,KW,s7r,l7r,i7r,$5,L1e,d7r,c7r,ZW,m7r,f7r,g7r,I5,x1e,h7r,u7r,eH,p7r,_7r,b7r,q5,k1e,F7r,v7r,oH,T7r,M7r,E7r,N5,S1e,C7r,w7r,rH,A7r,y7r,L7r,j5,R1e,x7r,k7r,tH,S7r,R7r,B7r,D5,B1e,P7r,$7r,aH,I7r,q7r,N7r,G5,P1e,j7r,D7r,nH,G7r,O7r,V7r,O5,$1e,X7r,z7r,sH,Q7r,W7r,H7r,I1e,U7r,J7r,w7,vBe,Fm,V5,q1e,A7,Y7r,N1e,K7r,TBe,jr,y7,Z7r,vm,e8r,lH,o8r,r8r,iH,t8r,a8r,n8r,L7,s8r,j1e,l8r,i8r,d8r,Bt,x7,c8r,D1e,m8r,f8r,Tm,g8r,G1e,h8r,u8r,dH,p8r,_8r,b8r,O1e,F8r,v8r,k7,T8r,Po,S7,M8r,V1e,E8r,C8r,In,w8r,X1e,A8r,y8r,z1e,L8r,x8r,Q1e,k8r,S8r,R8r,Be,X5,W1e,B8r,P8r,cH,$8r,I8r,q8r,z5,H1e,N8r,j8r,mH,D8r,G8r,O8r,Q5,U1e,V8r,X8r,fH,z8r,Q8r,W8r,W5,J1e,H8r,U8r,gH,J8r,Y8r,K8r,H5,Y1e,Z8r,e9r,hH,o9r,r9r,t9r,U5,K1e,a9r,n9r,uH,s9r,l9r,i9r,J5,Z1e,d9r,c9r,pH,m9r,f9r,g9r,Y5,eMe,h9r,u9r,_H,p9r,_9r,b9r,oMe,F9r,v9r,R7,MBe,Mm,K5,rMe,B7,T9r,tMe,M9r,EBe,Dr,P7,E9r,Em,C9r,bH,w9r,A9r,FH,y9r,L9r,x9r,$7,k9r,aMe,S9r,R9r,B9r,Pt,I7,P9r,nMe,$9r,I9r,Cm,q9r,sMe,N9r,j9r,vH,D9r,G9r,O9r,lMe,V9r,X9r,q7,z9r,$o,N7,Q9r,iMe,W9r,H9r,qn,U9r,dMe,J9r,Y9r,cMe,K9r,Z9r,mMe,exr,oxr,rxr,Pe,Z5,fMe,txr,axr,TH,nxr,sxr,lxr,e3,gMe,ixr,dxr,MH,cxr,mxr,fxr,o3,hMe,gxr,hxr,EH,uxr,pxr,_xr,r3,uMe,bxr,Fxr,CH,vxr,Txr,Mxr,t3,pMe,Exr,Cxr,wH,wxr,Axr,yxr,a3,_Me,Lxr,xxr,AH,kxr,Sxr,Rxr,n3,bMe,Bxr,Pxr,yH,$xr,Ixr,qxr,s3,FMe,Nxr,jxr,LH,Dxr,Gxr,Oxr,vMe,Vxr,Xxr,j7,CBe,wm,l3,TMe,D7,zxr,MMe,Qxr,wBe,Gr,G7,Wxr,Am,Hxr,xH,Uxr,Jxr,kH,Yxr,Kxr,Zxr,O7,ekr,EMe,okr,rkr,tkr,$t,V7,akr,CMe,nkr,skr,ym,lkr,wMe,ikr,dkr,SH,ckr,mkr,fkr,AMe,gkr,hkr,X7,ukr,Io,z7,pkr,yMe,_kr,bkr,Nn,Fkr,LMe,vkr,Tkr,xMe,Mkr,Ekr,kMe,Ckr,wkr,Akr,SMe,i3,RMe,ykr,Lkr,RH,xkr,kkr,Skr,BMe,Rkr,Bkr,Q7,ABe,Lm,d3,PMe,W7,Pkr,$Me,$kr,yBe,Or,H7,Ikr,xm,qkr,BH,Nkr,jkr,PH,Dkr,Gkr,Okr,U7,Vkr,IMe,Xkr,zkr,Qkr,It,J7,Wkr,qMe,Hkr,Ukr,km,Jkr,NMe,Ykr,Kkr,$H,Zkr,eSr,oSr,jMe,rSr,tSr,Y7,aSr,qo,K7,nSr,DMe,sSr,lSr,jn,iSr,GMe,dSr,cSr,OMe,mSr,fSr,VMe,gSr,hSr,uSr,Z7,c3,XMe,pSr,_Sr,IH,bSr,FSr,vSr,m3,zMe,TSr,MSr,qH,ESr,CSr,wSr,QMe,ASr,ySr,e8,LBe,Sm,f3,WMe,o8,LSr,HMe,xSr,xBe,Vr,r8,kSr,Rm,SSr,NH,RSr,BSr,jH,PSr,$Sr,ISr,t8,qSr,UMe,NSr,jSr,DSr,qt,a8,GSr,JMe,OSr,VSr,Bm,XSr,YMe,zSr,QSr,DH,WSr,HSr,USr,KMe,JSr,YSr,n8,KSr,No,s8,ZSr,ZMe,eRr,oRr,Dn,rRr,e4e,tRr,aRr,o4e,nRr,sRr,r4e,lRr,iRr,dRr,t4e,g3,a4e,cRr,mRr,GH,fRr,gRr,hRr,n4e,uRr,pRr,l8,kBe;return fe=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_w=new X({}),bw=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gm=new _Rr({props:{warning:!0,$$slots:{default:[B5t]},$$scope:{ctx:$m}}}),Fw=new X({}),vw=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L541"}}),Ew=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),Cw=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),ww=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),Aw=new X({}),yw=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L351"}}),kw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),Sw=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Rw=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),Bw=new X({}),Pw=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),qw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new _Rr({props:{$$slots:{default:[P5t]},$$scope:{ctx:$m}}}),Nw=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),jw=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),Dw=new X({}),Gw=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L70"}}),Xw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Vh=new _Rr({props:{$$slots:{default:[$5t]},$$scope:{ctx:$m}}}),zw=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Qw=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),Ww=new X({}),Hw=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L707"}}),Jw=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Yw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),Kw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L714"}}),tA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aA=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),nA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L729"}}),cA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),fA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new X({}),uA=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L736"}}),_A=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),bA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),FA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new X({}),MA=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L743"}}),CA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),wA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),AA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new X({}),xA=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L752"}}),SA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),RA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),BA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L786"}}),NA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),jA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),DA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new X({}),VA=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),zA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),QA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),WA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new X({}),JA=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L779"}}),KA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ZA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),e6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r6=new X({}),t6=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L761"}}),n6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),s6=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),l6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i6=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d6=new X({}),c6=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L768"}}),f6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),g6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),h6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p6=new X({}),_6=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L802"}}),F6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),v6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),T6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E6=new X({}),C6=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L841"}}),A6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),y6=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),L6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x6=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k6=new X({}),S6=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L848"}}),B6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),P6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),$6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q6=new X({}),N6=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L871"}}),D6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),G6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),O6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new X({}),z6=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L855"}}),W6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),H6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),U6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y6=new X({}),K6=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),e0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),o0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),r0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new X({}),s0=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),i0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),d0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),c0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new X({}),g0=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L887"}}),u0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),p0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),_0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),v0=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L834"}}),M0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),E0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),C0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new X({}),y0=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L809"}}),x0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),k0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),S0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new X({}),P0=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),I0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),q0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),N0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),G0=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L825"}}),V0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),X0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),z0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new X({}),H0=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L379"}}),J0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),K0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new X({}),oy=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L386"}}),ty=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),ny=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new X({}),iy=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),cy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),my=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),fy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new X({}),uy=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),_y=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),by=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Fy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new X({}),Ey=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),wy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),yy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new X({}),ky=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),Ry=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Py=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new X({}),qy=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),jy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Gy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new X({}),Xy=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),Qy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Hy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new X({}),Yy=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),Zy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),eL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),oL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),sL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),iL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),mL=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),gL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),hL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),uL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new X({}),bL=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),vL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),TL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),ML=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new X({}),wL=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),yL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),LL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),xL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new X({}),RL=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),PL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),IL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NL=new X({}),jL=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),GL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),OL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),VL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zL=new X({}),QL=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),HL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),UL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),JL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KL=new X({}),ZL=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),o7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),r7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),t7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n7=new X({}),s7=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),i7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),d7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),c7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f7=new X({}),g7=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),u7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),p7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),_7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F7=new X({}),v7=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),M7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),E7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),C7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A7=new X({}),y7=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),x7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),k7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),S7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B7=new X({}),P7=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),I7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),q7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),N7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D7=new X({}),G7=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),V7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),X7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),z7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W7=new X({}),H7=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),J7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Y7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),K7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o8=new X({}),r8=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),a8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),n8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),s8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),m(fe.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),Im=l(),ma=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),gw=o("from_pretrained()"),qm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),hw=o("AutoConfig"),On=o(", "),Vn=a("a"),uw=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),pw=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),m(Da.$$.fragment),mo=l(),pe=a("p"),n9=o("will create a model that is an instance of "),Oi=a("a"),s9=o("BertModel"),l9=o("."),zo=l(),Ga=a("p"),i9=o("There is one class of "),jm=a("code"),d9=o("AutoModel"),O$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),xSe=l(),Vi=a("h2"),Dm=a("a"),$J=a("span"),m(_w.$$.fragment),V$e=l(),IJ=a("span"),X$e=o("Extending the Auto Classes"),kSe=l(),zn=a("p"),z$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qJ=a("code"),Q$e=o("NewModel"),W$e=o(", make sure you have a "),NJ=a("code"),H$e=o("NewModelConfig"),U$e=o(` then you can add those to the auto
classes like this:`),SSe=l(),m(bw.$$.fragment),RSe=l(),c9=a("p"),J$e=o("You will then be able to use the auto classes like you would usually do!"),BSe=l(),m(Gm.$$.fragment),PSe=l(),Xi=a("h2"),Om=a("a"),jJ=a("span"),m(Fw.$$.fragment),Y$e=l(),DJ=a("span"),K$e=o("AutoConfig"),$Se=l(),Qo=a("div"),m(vw.$$.fragment),Z$e=l(),Tw=a("p"),eIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),m9=a("a"),oIe=o("from_pretrained()"),rIe=o(" class method."),tIe=l(),Mw=a("p"),aIe=o("This class cannot be instantiated directly using "),GJ=a("code"),nIe=o("__init__()"),sIe=o(" (throws an error)."),lIe=l(),fo=a("div"),m(Ew.$$.fragment),iIe=l(),OJ=a("p"),dIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cIe=l(),zi=a("p"),mIe=o("The configuration class to instantiate is selected based on the "),VJ=a("code"),fIe=o("model_type"),gIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XJ=a("code"),hIe=o("pretrained_model_name_or_path"),uIe=o(":"),pIe=l(),F=a("ul"),Vm=a("li"),zJ=a("strong"),_Ie=o("albert"),bIe=o(" \u2014 "),f9=a("a"),FIe=o("AlbertConfig"),vIe=o(" (ALBERT model)"),TIe=l(),Xm=a("li"),QJ=a("strong"),MIe=o("bart"),EIe=o(" \u2014 "),g9=a("a"),CIe=o("BartConfig"),wIe=o(" (BART model)"),AIe=l(),zm=a("li"),WJ=a("strong"),yIe=o("beit"),LIe=o(" \u2014 "),h9=a("a"),xIe=o("BeitConfig"),kIe=o(" (BEiT model)"),SIe=l(),Qm=a("li"),HJ=a("strong"),RIe=o("bert"),BIe=o(" \u2014 "),u9=a("a"),PIe=o("BertConfig"),$Ie=o(" (BERT model)"),IIe=l(),Wm=a("li"),UJ=a("strong"),qIe=o("bert-generation"),NIe=o(" \u2014 "),p9=a("a"),jIe=o("BertGenerationConfig"),DIe=o(" (Bert Generation model)"),GIe=l(),Hm=a("li"),JJ=a("strong"),OIe=o("big_bird"),VIe=o(" \u2014 "),_9=a("a"),XIe=o("BigBirdConfig"),zIe=o(" (BigBird model)"),QIe=l(),Um=a("li"),YJ=a("strong"),WIe=o("bigbird_pegasus"),HIe=o(" \u2014 "),b9=a("a"),UIe=o("BigBirdPegasusConfig"),JIe=o(" (BigBirdPegasus model)"),YIe=l(),Jm=a("li"),KJ=a("strong"),KIe=o("blenderbot"),ZIe=o(" \u2014 "),F9=a("a"),eqe=o("BlenderbotConfig"),oqe=o(" (Blenderbot model)"),rqe=l(),Ym=a("li"),ZJ=a("strong"),tqe=o("blenderbot-small"),aqe=o(" \u2014 "),v9=a("a"),nqe=o("BlenderbotSmallConfig"),sqe=o(" (BlenderbotSmall model)"),lqe=l(),Km=a("li"),eY=a("strong"),iqe=o("camembert"),dqe=o(" \u2014 "),T9=a("a"),cqe=o("CamembertConfig"),mqe=o(" (CamemBERT model)"),fqe=l(),Zm=a("li"),oY=a("strong"),gqe=o("canine"),hqe=o(" \u2014 "),M9=a("a"),uqe=o("CanineConfig"),pqe=o(" (Canine model)"),_qe=l(),ef=a("li"),rY=a("strong"),bqe=o("clip"),Fqe=o(" \u2014 "),E9=a("a"),vqe=o("CLIPConfig"),Tqe=o(" (CLIP model)"),Mqe=l(),of=a("li"),tY=a("strong"),Eqe=o("convbert"),Cqe=o(" \u2014 "),C9=a("a"),wqe=o("ConvBertConfig"),Aqe=o(" (ConvBERT model)"),yqe=l(),rf=a("li"),aY=a("strong"),Lqe=o("convnext"),xqe=o(" \u2014 "),w9=a("a"),kqe=o("ConvNextConfig"),Sqe=o(" (ConvNext model)"),Rqe=l(),tf=a("li"),nY=a("strong"),Bqe=o("ctrl"),Pqe=o(" \u2014 "),A9=a("a"),$qe=o("CTRLConfig"),Iqe=o(" (CTRL model)"),qqe=l(),af=a("li"),sY=a("strong"),Nqe=o("data2vec-audio"),jqe=o(" \u2014 "),y9=a("a"),Dqe=o("Data2VecAudioConfig"),Gqe=o(" (Data2VecAudio model)"),Oqe=l(),nf=a("li"),lY=a("strong"),Vqe=o("data2vec-text"),Xqe=o(" \u2014 "),L9=a("a"),zqe=o("Data2VecTextConfig"),Qqe=o(" (Data2VecText model)"),Wqe=l(),sf=a("li"),iY=a("strong"),Hqe=o("deberta"),Uqe=o(" \u2014 "),x9=a("a"),Jqe=o("DebertaConfig"),Yqe=o(" (DeBERTa model)"),Kqe=l(),lf=a("li"),dY=a("strong"),Zqe=o("deberta-v2"),eNe=o(" \u2014 "),k9=a("a"),oNe=o("DebertaV2Config"),rNe=o(" (DeBERTa-v2 model)"),tNe=l(),df=a("li"),cY=a("strong"),aNe=o("decision_transformer"),nNe=o(" \u2014 "),S9=a("a"),sNe=o("DecisionTransformerConfig"),lNe=o(" (Decision Transformer model)"),iNe=l(),cf=a("li"),mY=a("strong"),dNe=o("deit"),cNe=o(" \u2014 "),R9=a("a"),mNe=o("DeiTConfig"),fNe=o(" (DeiT model)"),gNe=l(),mf=a("li"),fY=a("strong"),hNe=o("detr"),uNe=o(" \u2014 "),B9=a("a"),pNe=o("DetrConfig"),_Ne=o(" (DETR model)"),bNe=l(),ff=a("li"),gY=a("strong"),FNe=o("distilbert"),vNe=o(" \u2014 "),P9=a("a"),TNe=o("DistilBertConfig"),MNe=o(" (DistilBERT model)"),ENe=l(),gf=a("li"),hY=a("strong"),CNe=o("dpr"),wNe=o(" \u2014 "),$9=a("a"),ANe=o("DPRConfig"),yNe=o(" (DPR model)"),LNe=l(),hf=a("li"),uY=a("strong"),xNe=o("dpt"),kNe=o(" \u2014 "),I9=a("a"),SNe=o("DPTConfig"),RNe=o(" (DPT model)"),BNe=l(),uf=a("li"),pY=a("strong"),PNe=o("electra"),$Ne=o(" \u2014 "),q9=a("a"),INe=o("ElectraConfig"),qNe=o(" (ELECTRA model)"),NNe=l(),pf=a("li"),_Y=a("strong"),jNe=o("encoder-decoder"),DNe=o(" \u2014 "),N9=a("a"),GNe=o("EncoderDecoderConfig"),ONe=o(" (Encoder decoder model)"),VNe=l(),_f=a("li"),bY=a("strong"),XNe=o("flaubert"),zNe=o(" \u2014 "),j9=a("a"),QNe=o("FlaubertConfig"),WNe=o(" (FlauBERT model)"),HNe=l(),bf=a("li"),FY=a("strong"),UNe=o("fnet"),JNe=o(" \u2014 "),D9=a("a"),YNe=o("FNetConfig"),KNe=o(" (FNet model)"),ZNe=l(),Ff=a("li"),vY=a("strong"),eje=o("fsmt"),oje=o(" \u2014 "),G9=a("a"),rje=o("FSMTConfig"),tje=o(" (FairSeq Machine-Translation model)"),aje=l(),vf=a("li"),TY=a("strong"),nje=o("funnel"),sje=o(" \u2014 "),O9=a("a"),lje=o("FunnelConfig"),ije=o(" (Funnel Transformer model)"),dje=l(),Tf=a("li"),MY=a("strong"),cje=o("glpn"),mje=o(" \u2014 "),V9=a("a"),fje=o("GLPNConfig"),gje=o(" (GLPN model)"),hje=l(),Mf=a("li"),EY=a("strong"),uje=o("gpt2"),pje=o(" \u2014 "),X9=a("a"),_je=o("GPT2Config"),bje=o(" (OpenAI GPT-2 model)"),Fje=l(),Ef=a("li"),CY=a("strong"),vje=o("gpt_neo"),Tje=o(" \u2014 "),z9=a("a"),Mje=o("GPTNeoConfig"),Eje=o(" (GPT Neo model)"),Cje=l(),Cf=a("li"),wY=a("strong"),wje=o("gptj"),Aje=o(" \u2014 "),Q9=a("a"),yje=o("GPTJConfig"),Lje=o(" (GPT-J model)"),xje=l(),wf=a("li"),AY=a("strong"),kje=o("hubert"),Sje=o(" \u2014 "),W9=a("a"),Rje=o("HubertConfig"),Bje=o(" (Hubert model)"),Pje=l(),Af=a("li"),yY=a("strong"),$je=o("ibert"),Ije=o(" \u2014 "),H9=a("a"),qje=o("IBertConfig"),Nje=o(" (I-BERT model)"),jje=l(),yf=a("li"),LY=a("strong"),Dje=o("imagegpt"),Gje=o(" \u2014 "),U9=a("a"),Oje=o("ImageGPTConfig"),Vje=o(" (ImageGPT model)"),Xje=l(),Lf=a("li"),xY=a("strong"),zje=o("layoutlm"),Qje=o(" \u2014 "),J9=a("a"),Wje=o("LayoutLMConfig"),Hje=o(" (LayoutLM model)"),Uje=l(),xf=a("li"),kY=a("strong"),Jje=o("layoutlmv2"),Yje=o(" \u2014 "),Y9=a("a"),Kje=o("LayoutLMv2Config"),Zje=o(" (LayoutLMv2 model)"),eDe=l(),kf=a("li"),SY=a("strong"),oDe=o("led"),rDe=o(" \u2014 "),K9=a("a"),tDe=o("LEDConfig"),aDe=o(" (LED model)"),nDe=l(),Sf=a("li"),RY=a("strong"),sDe=o("longformer"),lDe=o(" \u2014 "),Z9=a("a"),iDe=o("LongformerConfig"),dDe=o(" (Longformer model)"),cDe=l(),Rf=a("li"),BY=a("strong"),mDe=o("luke"),fDe=o(" \u2014 "),ex=a("a"),gDe=o("LukeConfig"),hDe=o(" (LUKE model)"),uDe=l(),Bf=a("li"),PY=a("strong"),pDe=o("lxmert"),_De=o(" \u2014 "),ox=a("a"),bDe=o("LxmertConfig"),FDe=o(" (LXMERT model)"),vDe=l(),Pf=a("li"),$Y=a("strong"),TDe=o("m2m_100"),MDe=o(" \u2014 "),rx=a("a"),EDe=o("M2M100Config"),CDe=o(" (M2M100 model)"),wDe=l(),$f=a("li"),IY=a("strong"),ADe=o("marian"),yDe=o(" \u2014 "),tx=a("a"),LDe=o("MarianConfig"),xDe=o(" (Marian model)"),kDe=l(),If=a("li"),qY=a("strong"),SDe=o("maskformer"),RDe=o(" \u2014 "),ax=a("a"),BDe=o("MaskFormerConfig"),PDe=o(" (MaskFormer model)"),$De=l(),qf=a("li"),NY=a("strong"),IDe=o("mbart"),qDe=o(" \u2014 "),nx=a("a"),NDe=o("MBartConfig"),jDe=o(" (mBART model)"),DDe=l(),Nf=a("li"),jY=a("strong"),GDe=o("megatron-bert"),ODe=o(" \u2014 "),sx=a("a"),VDe=o("MegatronBertConfig"),XDe=o(" (MegatronBert model)"),zDe=l(),jf=a("li"),DY=a("strong"),QDe=o("mobilebert"),WDe=o(" \u2014 "),lx=a("a"),HDe=o("MobileBertConfig"),UDe=o(" (MobileBERT model)"),JDe=l(),Df=a("li"),GY=a("strong"),YDe=o("mpnet"),KDe=o(" \u2014 "),ix=a("a"),ZDe=o("MPNetConfig"),eGe=o(" (MPNet model)"),oGe=l(),Gf=a("li"),OY=a("strong"),rGe=o("mt5"),tGe=o(" \u2014 "),dx=a("a"),aGe=o("MT5Config"),nGe=o(" (mT5 model)"),sGe=l(),Of=a("li"),VY=a("strong"),lGe=o("nystromformer"),iGe=o(" \u2014 "),cx=a("a"),dGe=o("NystromformerConfig"),cGe=o(" (Nystromformer model)"),mGe=l(),Vf=a("li"),XY=a("strong"),fGe=o("openai-gpt"),gGe=o(" \u2014 "),mx=a("a"),hGe=o("OpenAIGPTConfig"),uGe=o(" (OpenAI GPT model)"),pGe=l(),Xf=a("li"),zY=a("strong"),_Ge=o("pegasus"),bGe=o(" \u2014 "),fx=a("a"),FGe=o("PegasusConfig"),vGe=o(" (Pegasus model)"),TGe=l(),zf=a("li"),QY=a("strong"),MGe=o("perceiver"),EGe=o(" \u2014 "),gx=a("a"),CGe=o("PerceiverConfig"),wGe=o(" (Perceiver model)"),AGe=l(),Qf=a("li"),WY=a("strong"),yGe=o("plbart"),LGe=o(" \u2014 "),hx=a("a"),xGe=o("PLBartConfig"),kGe=o(" (PLBart model)"),SGe=l(),Wf=a("li"),HY=a("strong"),RGe=o("poolformer"),BGe=o(" \u2014 "),ux=a("a"),PGe=o("PoolFormerConfig"),$Ge=o(" (PoolFormer model)"),IGe=l(),Hf=a("li"),UY=a("strong"),qGe=o("prophetnet"),NGe=o(" \u2014 "),px=a("a"),jGe=o("ProphetNetConfig"),DGe=o(" (ProphetNet model)"),GGe=l(),Uf=a("li"),JY=a("strong"),OGe=o("qdqbert"),VGe=o(" \u2014 "),_x=a("a"),XGe=o("QDQBertConfig"),zGe=o(" (QDQBert model)"),QGe=l(),Jf=a("li"),YY=a("strong"),WGe=o("rag"),HGe=o(" \u2014 "),bx=a("a"),UGe=o("RagConfig"),JGe=o(" (RAG model)"),YGe=l(),Yf=a("li"),KY=a("strong"),KGe=o("realm"),ZGe=o(" \u2014 "),Fx=a("a"),eOe=o("RealmConfig"),oOe=o(" (Realm model)"),rOe=l(),Kf=a("li"),ZY=a("strong"),tOe=o("reformer"),aOe=o(" \u2014 "),vx=a("a"),nOe=o("ReformerConfig"),sOe=o(" (Reformer model)"),lOe=l(),Zf=a("li"),eK=a("strong"),iOe=o("rembert"),dOe=o(" \u2014 "),Tx=a("a"),cOe=o("RemBertConfig"),mOe=o(" (RemBERT model)"),fOe=l(),eg=a("li"),oK=a("strong"),gOe=o("resnet"),hOe=o(" \u2014 "),Mx=a("a"),uOe=o("ResNetConfig"),pOe=o(" (ResNet model)"),_Oe=l(),og=a("li"),rK=a("strong"),bOe=o("retribert"),FOe=o(" \u2014 "),Ex=a("a"),vOe=o("RetriBertConfig"),TOe=o(" (RetriBERT model)"),MOe=l(),rg=a("li"),tK=a("strong"),EOe=o("roberta"),COe=o(" \u2014 "),Cx=a("a"),wOe=o("RobertaConfig"),AOe=o(" (RoBERTa model)"),yOe=l(),tg=a("li"),aK=a("strong"),LOe=o("roformer"),xOe=o(" \u2014 "),wx=a("a"),kOe=o("RoFormerConfig"),SOe=o(" (RoFormer model)"),ROe=l(),ag=a("li"),nK=a("strong"),BOe=o("segformer"),POe=o(" \u2014 "),Ax=a("a"),$Oe=o("SegformerConfig"),IOe=o(" (SegFormer model)"),qOe=l(),ng=a("li"),sK=a("strong"),NOe=o("sew"),jOe=o(" \u2014 "),yx=a("a"),DOe=o("SEWConfig"),GOe=o(" (SEW model)"),OOe=l(),sg=a("li"),lK=a("strong"),VOe=o("sew-d"),XOe=o(" \u2014 "),Lx=a("a"),zOe=o("SEWDConfig"),QOe=o(" (SEW-D model)"),WOe=l(),lg=a("li"),iK=a("strong"),HOe=o("speech-encoder-decoder"),UOe=o(" \u2014 "),xx=a("a"),JOe=o("SpeechEncoderDecoderConfig"),YOe=o(" (Speech Encoder decoder model)"),KOe=l(),ig=a("li"),dK=a("strong"),ZOe=o("speech_to_text"),eVe=o(" \u2014 "),kx=a("a"),oVe=o("Speech2TextConfig"),rVe=o(" (Speech2Text model)"),tVe=l(),dg=a("li"),cK=a("strong"),aVe=o("speech_to_text_2"),nVe=o(" \u2014 "),Sx=a("a"),sVe=o("Speech2Text2Config"),lVe=o(" (Speech2Text2 model)"),iVe=l(),cg=a("li"),mK=a("strong"),dVe=o("splinter"),cVe=o(" \u2014 "),Rx=a("a"),mVe=o("SplinterConfig"),fVe=o(" (Splinter model)"),gVe=l(),mg=a("li"),fK=a("strong"),hVe=o("squeezebert"),uVe=o(" \u2014 "),Bx=a("a"),pVe=o("SqueezeBertConfig"),_Ve=o(" (SqueezeBERT model)"),bVe=l(),fg=a("li"),gK=a("strong"),FVe=o("swin"),vVe=o(" \u2014 "),Px=a("a"),TVe=o("SwinConfig"),MVe=o(" (Swin model)"),EVe=l(),gg=a("li"),hK=a("strong"),CVe=o("t5"),wVe=o(" \u2014 "),$x=a("a"),AVe=o("T5Config"),yVe=o(" (T5 model)"),LVe=l(),hg=a("li"),uK=a("strong"),xVe=o("tapas"),kVe=o(" \u2014 "),Ix=a("a"),SVe=o("TapasConfig"),RVe=o(" (TAPAS model)"),BVe=l(),ug=a("li"),pK=a("strong"),PVe=o("transfo-xl"),$Ve=o(" \u2014 "),qx=a("a"),IVe=o("TransfoXLConfig"),qVe=o(" (Transformer-XL model)"),NVe=l(),pg=a("li"),_K=a("strong"),jVe=o("trocr"),DVe=o(" \u2014 "),Nx=a("a"),GVe=o("TrOCRConfig"),OVe=o(" (TrOCR model)"),VVe=l(),_g=a("li"),bK=a("strong"),XVe=o("unispeech"),zVe=o(" \u2014 "),jx=a("a"),QVe=o("UniSpeechConfig"),WVe=o(" (UniSpeech model)"),HVe=l(),bg=a("li"),FK=a("strong"),UVe=o("unispeech-sat"),JVe=o(" \u2014 "),Dx=a("a"),YVe=o("UniSpeechSatConfig"),KVe=o(" (UniSpeechSat model)"),ZVe=l(),Fg=a("li"),vK=a("strong"),eXe=o("van"),oXe=o(" \u2014 "),Gx=a("a"),rXe=o("VanConfig"),tXe=o(" (VAN model)"),aXe=l(),vg=a("li"),TK=a("strong"),nXe=o("vilt"),sXe=o(" \u2014 "),Ox=a("a"),lXe=o("ViltConfig"),iXe=o(" (ViLT model)"),dXe=l(),Tg=a("li"),MK=a("strong"),cXe=o("vision-encoder-decoder"),mXe=o(" \u2014 "),Vx=a("a"),fXe=o("VisionEncoderDecoderConfig"),gXe=o(" (Vision Encoder decoder model)"),hXe=l(),Mg=a("li"),EK=a("strong"),uXe=o("vision-text-dual-encoder"),pXe=o(" \u2014 "),Xx=a("a"),_Xe=o("VisionTextDualEncoderConfig"),bXe=o(" (VisionTextDualEncoder model)"),FXe=l(),Eg=a("li"),CK=a("strong"),vXe=o("visual_bert"),TXe=o(" \u2014 "),zx=a("a"),MXe=o("VisualBertConfig"),EXe=o(" (VisualBert model)"),CXe=l(),Cg=a("li"),wK=a("strong"),wXe=o("vit"),AXe=o(" \u2014 "),Qx=a("a"),yXe=o("ViTConfig"),LXe=o(" (ViT model)"),xXe=l(),wg=a("li"),AK=a("strong"),kXe=o("vit_mae"),SXe=o(" \u2014 "),Wx=a("a"),RXe=o("ViTMAEConfig"),BXe=o(" (ViTMAE model)"),PXe=l(),Ag=a("li"),yK=a("strong"),$Xe=o("wav2vec2"),IXe=o(" \u2014 "),Hx=a("a"),qXe=o("Wav2Vec2Config"),NXe=o(" (Wav2Vec2 model)"),jXe=l(),yg=a("li"),LK=a("strong"),DXe=o("wavlm"),GXe=o(" \u2014 "),Ux=a("a"),OXe=o("WavLMConfig"),VXe=o(" (WavLM model)"),XXe=l(),Lg=a("li"),xK=a("strong"),zXe=o("xglm"),QXe=o(" \u2014 "),Jx=a("a"),WXe=o("XGLMConfig"),HXe=o(" (XGLM model)"),UXe=l(),xg=a("li"),kK=a("strong"),JXe=o("xlm"),YXe=o(" \u2014 "),Yx=a("a"),KXe=o("XLMConfig"),ZXe=o(" (XLM model)"),eze=l(),kg=a("li"),SK=a("strong"),oze=o("xlm-prophetnet"),rze=o(" \u2014 "),Kx=a("a"),tze=o("XLMProphetNetConfig"),aze=o(" (XLMProphetNet model)"),nze=l(),Sg=a("li"),RK=a("strong"),sze=o("xlm-roberta"),lze=o(" \u2014 "),Zx=a("a"),ize=o("XLMRobertaConfig"),dze=o(" (XLM-RoBERTa model)"),cze=l(),Rg=a("li"),BK=a("strong"),mze=o("xlm-roberta-xl"),fze=o(" \u2014 "),ek=a("a"),gze=o("XLMRobertaXLConfig"),hze=o(" (XLM-RoBERTa-XL model)"),uze=l(),Bg=a("li"),PK=a("strong"),pze=o("xlnet"),_ze=o(" \u2014 "),ok=a("a"),bze=o("XLNetConfig"),Fze=o(" (XLNet model)"),vze=l(),Pg=a("li"),$K=a("strong"),Tze=o("yoso"),Mze=o(" \u2014 "),rk=a("a"),Eze=o("YosoConfig"),Cze=o(" (YOSO model)"),wze=l(),IK=a("p"),Aze=o("Examples:"),yze=l(),m(Cw.$$.fragment),Lze=l(),$g=a("div"),m(ww.$$.fragment),xze=l(),qK=a("p"),kze=o("Register a new configuration for this class."),ISe=l(),Qi=a("h2"),Ig=a("a"),NK=a("span"),m(Aw.$$.fragment),Sze=l(),jK=a("span"),Rze=o("AutoTokenizer"),qSe=l(),Wo=a("div"),m(yw.$$.fragment),Bze=l(),Lw=a("p"),Pze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tk=a("a"),$ze=o("AutoTokenizer.from_pretrained()"),Ize=o(" class method."),qze=l(),xw=a("p"),Nze=o("This class cannot be instantiated directly using "),DK=a("code"),jze=o("__init__()"),Dze=o(" (throws an error)."),Gze=l(),go=a("div"),m(kw.$$.fragment),Oze=l(),GK=a("p"),Vze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Xze=l(),Oa=a("p"),zze=o("The tokenizer class to instantiate is selected based on the "),OK=a("code"),Qze=o("model_type"),Wze=o(` property of the config object (either
passed as an argument or loaded from `),VK=a("code"),Hze=o("pretrained_model_name_or_path"),Uze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XK=a("code"),Jze=o("pretrained_model_name_or_path"),Yze=o(":"),Kze=l(),C=a("ul"),Qn=a("li"),zK=a("strong"),Zze=o("albert"),eQe=o(" \u2014 "),ak=a("a"),oQe=o("AlbertTokenizer"),rQe=o(" or "),nk=a("a"),tQe=o("AlbertTokenizerFast"),aQe=o(" (ALBERT model)"),nQe=l(),Wn=a("li"),QK=a("strong"),sQe=o("bart"),lQe=o(" \u2014 "),sk=a("a"),iQe=o("BartTokenizer"),dQe=o(" or "),lk=a("a"),cQe=o("BartTokenizerFast"),mQe=o(" (BART model)"),fQe=l(),Hn=a("li"),WK=a("strong"),gQe=o("barthez"),hQe=o(" \u2014 "),ik=a("a"),uQe=o("BarthezTokenizer"),pQe=o(" or "),dk=a("a"),_Qe=o("BarthezTokenizerFast"),bQe=o(" (BARThez model)"),FQe=l(),qg=a("li"),HK=a("strong"),vQe=o("bartpho"),TQe=o(" \u2014 "),ck=a("a"),MQe=o("BartphoTokenizer"),EQe=o(" (BARTpho model)"),CQe=l(),Un=a("li"),UK=a("strong"),wQe=o("bert"),AQe=o(" \u2014 "),mk=a("a"),yQe=o("BertTokenizer"),LQe=o(" or "),fk=a("a"),xQe=o("BertTokenizerFast"),kQe=o(" (BERT model)"),SQe=l(),Ng=a("li"),JK=a("strong"),RQe=o("bert-generation"),BQe=o(" \u2014 "),gk=a("a"),PQe=o("BertGenerationTokenizer"),$Qe=o(" (Bert Generation model)"),IQe=l(),jg=a("li"),YK=a("strong"),qQe=o("bert-japanese"),NQe=o(" \u2014 "),hk=a("a"),jQe=o("BertJapaneseTokenizer"),DQe=o(" (BertJapanese model)"),GQe=l(),Dg=a("li"),KK=a("strong"),OQe=o("bertweet"),VQe=o(" \u2014 "),uk=a("a"),XQe=o("BertweetTokenizer"),zQe=o(" (Bertweet model)"),QQe=l(),Jn=a("li"),ZK=a("strong"),WQe=o("big_bird"),HQe=o(" \u2014 "),pk=a("a"),UQe=o("BigBirdTokenizer"),JQe=o(" or "),_k=a("a"),YQe=o("BigBirdTokenizerFast"),KQe=o(" (BigBird model)"),ZQe=l(),Yn=a("li"),eZ=a("strong"),eWe=o("bigbird_pegasus"),oWe=o(" \u2014 "),bk=a("a"),rWe=o("PegasusTokenizer"),tWe=o(" or "),Fk=a("a"),aWe=o("PegasusTokenizerFast"),nWe=o(" (BigBirdPegasus model)"),sWe=l(),Kn=a("li"),oZ=a("strong"),lWe=o("blenderbot"),iWe=o(" \u2014 "),vk=a("a"),dWe=o("BlenderbotTokenizer"),cWe=o(" or "),Tk=a("a"),mWe=o("BlenderbotTokenizerFast"),fWe=o(" (Blenderbot model)"),gWe=l(),Gg=a("li"),rZ=a("strong"),hWe=o("blenderbot-small"),uWe=o(" \u2014 "),Mk=a("a"),pWe=o("BlenderbotSmallTokenizer"),_We=o(" (BlenderbotSmall model)"),bWe=l(),Og=a("li"),tZ=a("strong"),FWe=o("byt5"),vWe=o(" \u2014 "),Ek=a("a"),TWe=o("ByT5Tokenizer"),MWe=o(" (ByT5 model)"),EWe=l(),Zn=a("li"),aZ=a("strong"),CWe=o("camembert"),wWe=o(" \u2014 "),Ck=a("a"),AWe=o("CamembertTokenizer"),yWe=o(" or "),wk=a("a"),LWe=o("CamembertTokenizerFast"),xWe=o(" (CamemBERT model)"),kWe=l(),Vg=a("li"),nZ=a("strong"),SWe=o("canine"),RWe=o(" \u2014 "),Ak=a("a"),BWe=o("CanineTokenizer"),PWe=o(" (Canine model)"),$We=l(),es=a("li"),sZ=a("strong"),IWe=o("clip"),qWe=o(" \u2014 "),yk=a("a"),NWe=o("CLIPTokenizer"),jWe=o(" or "),Lk=a("a"),DWe=o("CLIPTokenizerFast"),GWe=o(" (CLIP model)"),OWe=l(),os=a("li"),lZ=a("strong"),VWe=o("convbert"),XWe=o(" \u2014 "),xk=a("a"),zWe=o("ConvBertTokenizer"),QWe=o(" or "),kk=a("a"),WWe=o("ConvBertTokenizerFast"),HWe=o(" (ConvBERT model)"),UWe=l(),rs=a("li"),iZ=a("strong"),JWe=o("cpm"),YWe=o(" \u2014 "),Sk=a("a"),KWe=o("CpmTokenizer"),ZWe=o(" or "),dZ=a("code"),eHe=o("CpmTokenizerFast"),oHe=o(" (CPM model)"),rHe=l(),Xg=a("li"),cZ=a("strong"),tHe=o("ctrl"),aHe=o(" \u2014 "),Rk=a("a"),nHe=o("CTRLTokenizer"),sHe=o(" (CTRL model)"),lHe=l(),ts=a("li"),mZ=a("strong"),iHe=o("deberta"),dHe=o(" \u2014 "),Bk=a("a"),cHe=o("DebertaTokenizer"),mHe=o(" or "),Pk=a("a"),fHe=o("DebertaTokenizerFast"),gHe=o(" (DeBERTa model)"),hHe=l(),zg=a("li"),fZ=a("strong"),uHe=o("deberta-v2"),pHe=o(" \u2014 "),$k=a("a"),_He=o("DebertaV2Tokenizer"),bHe=o(" (DeBERTa-v2 model)"),FHe=l(),as=a("li"),gZ=a("strong"),vHe=o("distilbert"),THe=o(" \u2014 "),Ik=a("a"),MHe=o("DistilBertTokenizer"),EHe=o(" or "),qk=a("a"),CHe=o("DistilBertTokenizerFast"),wHe=o(" (DistilBERT model)"),AHe=l(),ns=a("li"),hZ=a("strong"),yHe=o("dpr"),LHe=o(" \u2014 "),Nk=a("a"),xHe=o("DPRQuestionEncoderTokenizer"),kHe=o(" or "),jk=a("a"),SHe=o("DPRQuestionEncoderTokenizerFast"),RHe=o(" (DPR model)"),BHe=l(),ss=a("li"),uZ=a("strong"),PHe=o("electra"),$He=o(" \u2014 "),Dk=a("a"),IHe=o("ElectraTokenizer"),qHe=o(" or "),Gk=a("a"),NHe=o("ElectraTokenizerFast"),jHe=o(" (ELECTRA model)"),DHe=l(),Qg=a("li"),pZ=a("strong"),GHe=o("flaubert"),OHe=o(" \u2014 "),Ok=a("a"),VHe=o("FlaubertTokenizer"),XHe=o(" (FlauBERT model)"),zHe=l(),ls=a("li"),_Z=a("strong"),QHe=o("fnet"),WHe=o(" \u2014 "),Vk=a("a"),HHe=o("FNetTokenizer"),UHe=o(" or "),Xk=a("a"),JHe=o("FNetTokenizerFast"),YHe=o(" (FNet model)"),KHe=l(),Wg=a("li"),bZ=a("strong"),ZHe=o("fsmt"),eUe=o(" \u2014 "),zk=a("a"),oUe=o("FSMTTokenizer"),rUe=o(" (FairSeq Machine-Translation model)"),tUe=l(),is=a("li"),FZ=a("strong"),aUe=o("funnel"),nUe=o(" \u2014 "),Qk=a("a"),sUe=o("FunnelTokenizer"),lUe=o(" or "),Wk=a("a"),iUe=o("FunnelTokenizerFast"),dUe=o(" (Funnel Transformer model)"),cUe=l(),ds=a("li"),vZ=a("strong"),mUe=o("gpt2"),fUe=o(" \u2014 "),Hk=a("a"),gUe=o("GPT2Tokenizer"),hUe=o(" or "),Uk=a("a"),uUe=o("GPT2TokenizerFast"),pUe=o(" (OpenAI GPT-2 model)"),_Ue=l(),cs=a("li"),TZ=a("strong"),bUe=o("gpt_neo"),FUe=o(" \u2014 "),Jk=a("a"),vUe=o("GPT2Tokenizer"),TUe=o(" or "),Yk=a("a"),MUe=o("GPT2TokenizerFast"),EUe=o(" (GPT Neo model)"),CUe=l(),ms=a("li"),MZ=a("strong"),wUe=o("herbert"),AUe=o(" \u2014 "),Kk=a("a"),yUe=o("HerbertTokenizer"),LUe=o(" or "),Zk=a("a"),xUe=o("HerbertTokenizerFast"),kUe=o(" (HerBERT model)"),SUe=l(),Hg=a("li"),EZ=a("strong"),RUe=o("hubert"),BUe=o(" \u2014 "),eS=a("a"),PUe=o("Wav2Vec2CTCTokenizer"),$Ue=o(" (Hubert model)"),IUe=l(),fs=a("li"),CZ=a("strong"),qUe=o("ibert"),NUe=o(" \u2014 "),oS=a("a"),jUe=o("RobertaTokenizer"),DUe=o(" or "),rS=a("a"),GUe=o("RobertaTokenizerFast"),OUe=o(" (I-BERT model)"),VUe=l(),gs=a("li"),wZ=a("strong"),XUe=o("layoutlm"),zUe=o(" \u2014 "),tS=a("a"),QUe=o("LayoutLMTokenizer"),WUe=o(" or "),aS=a("a"),HUe=o("LayoutLMTokenizerFast"),UUe=o(" (LayoutLM model)"),JUe=l(),hs=a("li"),AZ=a("strong"),YUe=o("layoutlmv2"),KUe=o(" \u2014 "),nS=a("a"),ZUe=o("LayoutLMv2Tokenizer"),eJe=o(" or "),sS=a("a"),oJe=o("LayoutLMv2TokenizerFast"),rJe=o(" (LayoutLMv2 model)"),tJe=l(),us=a("li"),yZ=a("strong"),aJe=o("layoutxlm"),nJe=o(" \u2014 "),lS=a("a"),sJe=o("LayoutXLMTokenizer"),lJe=o(" or "),iS=a("a"),iJe=o("LayoutXLMTokenizerFast"),dJe=o(" (LayoutXLM model)"),cJe=l(),ps=a("li"),LZ=a("strong"),mJe=o("led"),fJe=o(" \u2014 "),dS=a("a"),gJe=o("LEDTokenizer"),hJe=o(" or "),cS=a("a"),uJe=o("LEDTokenizerFast"),pJe=o(" (LED model)"),_Je=l(),_s=a("li"),xZ=a("strong"),bJe=o("longformer"),FJe=o(" \u2014 "),mS=a("a"),vJe=o("LongformerTokenizer"),TJe=o(" or "),fS=a("a"),MJe=o("LongformerTokenizerFast"),EJe=o(" (Longformer model)"),CJe=l(),Ug=a("li"),kZ=a("strong"),wJe=o("luke"),AJe=o(" \u2014 "),gS=a("a"),yJe=o("LukeTokenizer"),LJe=o(" (LUKE model)"),xJe=l(),bs=a("li"),SZ=a("strong"),kJe=o("lxmert"),SJe=o(" \u2014 "),hS=a("a"),RJe=o("LxmertTokenizer"),BJe=o(" or "),uS=a("a"),PJe=o("LxmertTokenizerFast"),$Je=o(" (LXMERT model)"),IJe=l(),Jg=a("li"),RZ=a("strong"),qJe=o("m2m_100"),NJe=o(" \u2014 "),pS=a("a"),jJe=o("M2M100Tokenizer"),DJe=o(" (M2M100 model)"),GJe=l(),Yg=a("li"),BZ=a("strong"),OJe=o("marian"),VJe=o(" \u2014 "),_S=a("a"),XJe=o("MarianTokenizer"),zJe=o(" (Marian model)"),QJe=l(),Fs=a("li"),PZ=a("strong"),WJe=o("mbart"),HJe=o(" \u2014 "),bS=a("a"),UJe=o("MBartTokenizer"),JJe=o(" or "),FS=a("a"),YJe=o("MBartTokenizerFast"),KJe=o(" (mBART model)"),ZJe=l(),vs=a("li"),$Z=a("strong"),eYe=o("mbart50"),oYe=o(" \u2014 "),vS=a("a"),rYe=o("MBart50Tokenizer"),tYe=o(" or "),TS=a("a"),aYe=o("MBart50TokenizerFast"),nYe=o(" (mBART-50 model)"),sYe=l(),Kg=a("li"),IZ=a("strong"),lYe=o("mluke"),iYe=o(" \u2014 "),MS=a("a"),dYe=o("MLukeTokenizer"),cYe=o(" (mLUKE model)"),mYe=l(),Ts=a("li"),qZ=a("strong"),fYe=o("mobilebert"),gYe=o(" \u2014 "),ES=a("a"),hYe=o("MobileBertTokenizer"),uYe=o(" or "),CS=a("a"),pYe=o("MobileBertTokenizerFast"),_Ye=o(" (MobileBERT model)"),bYe=l(),Ms=a("li"),NZ=a("strong"),FYe=o("mpnet"),vYe=o(" \u2014 "),wS=a("a"),TYe=o("MPNetTokenizer"),MYe=o(" or "),AS=a("a"),EYe=o("MPNetTokenizerFast"),CYe=o(" (MPNet model)"),wYe=l(),Es=a("li"),jZ=a("strong"),AYe=o("mt5"),yYe=o(" \u2014 "),yS=a("a"),LYe=o("MT5Tokenizer"),xYe=o(" or "),LS=a("a"),kYe=o("MT5TokenizerFast"),SYe=o(" (mT5 model)"),RYe=l(),Cs=a("li"),DZ=a("strong"),BYe=o("openai-gpt"),PYe=o(" \u2014 "),xS=a("a"),$Ye=o("OpenAIGPTTokenizer"),IYe=o(" or "),kS=a("a"),qYe=o("OpenAIGPTTokenizerFast"),NYe=o(" (OpenAI GPT model)"),jYe=l(),ws=a("li"),GZ=a("strong"),DYe=o("pegasus"),GYe=o(" \u2014 "),SS=a("a"),OYe=o("PegasusTokenizer"),VYe=o(" or "),RS=a("a"),XYe=o("PegasusTokenizerFast"),zYe=o(" (Pegasus model)"),QYe=l(),Zg=a("li"),OZ=a("strong"),WYe=o("perceiver"),HYe=o(" \u2014 "),BS=a("a"),UYe=o("PerceiverTokenizer"),JYe=o(" (Perceiver model)"),YYe=l(),eh=a("li"),VZ=a("strong"),KYe=o("phobert"),ZYe=o(" \u2014 "),PS=a("a"),eKe=o("PhobertTokenizer"),oKe=o(" (PhoBERT model)"),rKe=l(),oh=a("li"),XZ=a("strong"),tKe=o("plbart"),aKe=o(" \u2014 "),$S=a("a"),nKe=o("PLBartTokenizer"),sKe=o(" (PLBart model)"),lKe=l(),rh=a("li"),zZ=a("strong"),iKe=o("prophetnet"),dKe=o(" \u2014 "),IS=a("a"),cKe=o("ProphetNetTokenizer"),mKe=o(" (ProphetNet model)"),fKe=l(),As=a("li"),QZ=a("strong"),gKe=o("qdqbert"),hKe=o(" \u2014 "),qS=a("a"),uKe=o("BertTokenizer"),pKe=o(" or "),NS=a("a"),_Ke=o("BertTokenizerFast"),bKe=o(" (QDQBert model)"),FKe=l(),th=a("li"),WZ=a("strong"),vKe=o("rag"),TKe=o(" \u2014 "),jS=a("a"),MKe=o("RagTokenizer"),EKe=o(" (RAG model)"),CKe=l(),ys=a("li"),HZ=a("strong"),wKe=o("realm"),AKe=o(" \u2014 "),DS=a("a"),yKe=o("RealmTokenizer"),LKe=o(" or "),GS=a("a"),xKe=o("RealmTokenizerFast"),kKe=o(" (Realm model)"),SKe=l(),Ls=a("li"),UZ=a("strong"),RKe=o("reformer"),BKe=o(" \u2014 "),OS=a("a"),PKe=o("ReformerTokenizer"),$Ke=o(" or "),VS=a("a"),IKe=o("ReformerTokenizerFast"),qKe=o(" (Reformer model)"),NKe=l(),xs=a("li"),JZ=a("strong"),jKe=o("rembert"),DKe=o(" \u2014 "),XS=a("a"),GKe=o("RemBertTokenizer"),OKe=o(" or "),zS=a("a"),VKe=o("RemBertTokenizerFast"),XKe=o(" (RemBERT model)"),zKe=l(),ks=a("li"),YZ=a("strong"),QKe=o("retribert"),WKe=o(" \u2014 "),QS=a("a"),HKe=o("RetriBertTokenizer"),UKe=o(" or "),WS=a("a"),JKe=o("RetriBertTokenizerFast"),YKe=o(" (RetriBERT model)"),KKe=l(),Ss=a("li"),KZ=a("strong"),ZKe=o("roberta"),eZe=o(" \u2014 "),HS=a("a"),oZe=o("RobertaTokenizer"),rZe=o(" or "),US=a("a"),tZe=o("RobertaTokenizerFast"),aZe=o(" (RoBERTa model)"),nZe=l(),Rs=a("li"),ZZ=a("strong"),sZe=o("roformer"),lZe=o(" \u2014 "),JS=a("a"),iZe=o("RoFormerTokenizer"),dZe=o(" or "),YS=a("a"),cZe=o("RoFormerTokenizerFast"),mZe=o(" (RoFormer model)"),fZe=l(),ah=a("li"),eee=a("strong"),gZe=o("speech_to_text"),hZe=o(" \u2014 "),KS=a("a"),uZe=o("Speech2TextTokenizer"),pZe=o(" (Speech2Text model)"),_Ze=l(),nh=a("li"),oee=a("strong"),bZe=o("speech_to_text_2"),FZe=o(" \u2014 "),ZS=a("a"),vZe=o("Speech2Text2Tokenizer"),TZe=o(" (Speech2Text2 model)"),MZe=l(),Bs=a("li"),ree=a("strong"),EZe=o("splinter"),CZe=o(" \u2014 "),eR=a("a"),wZe=o("SplinterTokenizer"),AZe=o(" or "),oR=a("a"),yZe=o("SplinterTokenizerFast"),LZe=o(" (Splinter model)"),xZe=l(),Ps=a("li"),tee=a("strong"),kZe=o("squeezebert"),SZe=o(" \u2014 "),rR=a("a"),RZe=o("SqueezeBertTokenizer"),BZe=o(" or "),tR=a("a"),PZe=o("SqueezeBertTokenizerFast"),$Ze=o(" (SqueezeBERT model)"),IZe=l(),$s=a("li"),aee=a("strong"),qZe=o("t5"),NZe=o(" \u2014 "),aR=a("a"),jZe=o("T5Tokenizer"),DZe=o(" or "),nR=a("a"),GZe=o("T5TokenizerFast"),OZe=o(" (T5 model)"),VZe=l(),sh=a("li"),nee=a("strong"),XZe=o("tapas"),zZe=o(" \u2014 "),sR=a("a"),QZe=o("TapasTokenizer"),WZe=o(" (TAPAS model)"),HZe=l(),lh=a("li"),see=a("strong"),UZe=o("transfo-xl"),JZe=o(" \u2014 "),lR=a("a"),YZe=o("TransfoXLTokenizer"),KZe=o(" (Transformer-XL model)"),ZZe=l(),ih=a("li"),lee=a("strong"),eeo=o("wav2vec2"),oeo=o(" \u2014 "),iR=a("a"),reo=o("Wav2Vec2CTCTokenizer"),teo=o(" (Wav2Vec2 model)"),aeo=l(),dh=a("li"),iee=a("strong"),neo=o("wav2vec2_phoneme"),seo=o(" \u2014 "),dR=a("a"),leo=o("Wav2Vec2PhonemeCTCTokenizer"),ieo=o(" (Wav2Vec2Phoneme model)"),deo=l(),Is=a("li"),dee=a("strong"),ceo=o("xglm"),meo=o(" \u2014 "),cR=a("a"),feo=o("XGLMTokenizer"),geo=o(" or "),mR=a("a"),heo=o("XGLMTokenizerFast"),ueo=o(" (XGLM model)"),peo=l(),ch=a("li"),cee=a("strong"),_eo=o("xlm"),beo=o(" \u2014 "),fR=a("a"),Feo=o("XLMTokenizer"),veo=o(" (XLM model)"),Teo=l(),mh=a("li"),mee=a("strong"),Meo=o("xlm-prophetnet"),Eeo=o(" \u2014 "),gR=a("a"),Ceo=o("XLMProphetNetTokenizer"),weo=o(" (XLMProphetNet model)"),Aeo=l(),qs=a("li"),fee=a("strong"),yeo=o("xlm-roberta"),Leo=o(" \u2014 "),hR=a("a"),xeo=o("XLMRobertaTokenizer"),keo=o(" or "),uR=a("a"),Seo=o("XLMRobertaTokenizerFast"),Reo=o(" (XLM-RoBERTa model)"),Beo=l(),Ns=a("li"),gee=a("strong"),Peo=o("xlnet"),$eo=o(" \u2014 "),pR=a("a"),Ieo=o("XLNetTokenizer"),qeo=o(" or "),_R=a("a"),Neo=o("XLNetTokenizerFast"),jeo=o(" (XLNet model)"),Deo=l(),hee=a("p"),Geo=o("Examples:"),Oeo=l(),m(Sw.$$.fragment),Veo=l(),fh=a("div"),m(Rw.$$.fragment),Xeo=l(),uee=a("p"),zeo=o("Register a new tokenizer in this mapping."),NSe=l(),Wi=a("h2"),gh=a("a"),pee=a("span"),m(Bw.$$.fragment),Qeo=l(),_ee=a("span"),Weo=o("AutoFeatureExtractor"),jSe=l(),Ho=a("div"),m(Pw.$$.fragment),Heo=l(),$w=a("p"),Ueo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bR=a("a"),Jeo=o("AutoFeatureExtractor.from_pretrained()"),Yeo=o(" class method."),Keo=l(),Iw=a("p"),Zeo=o("This class cannot be instantiated directly using "),bee=a("code"),eoo=o("__init__()"),ooo=o(" (throws an error)."),roo=l(),$e=a("div"),m(qw.$$.fragment),too=l(),Fee=a("p"),aoo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),noo=l(),Va=a("p"),soo=o("The feature extractor class to instantiate is selected based on the "),vee=a("code"),loo=o("model_type"),ioo=o(` property of the config object
(either passed as an argument or loaded from `),Tee=a("code"),doo=o("pretrained_model_name_or_path"),coo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mee=a("code"),moo=o("pretrained_model_name_or_path"),foo=o(":"),goo=l(),te=a("ul"),hh=a("li"),Eee=a("strong"),hoo=o("beit"),uoo=o(" \u2014 "),FR=a("a"),poo=o("BeitFeatureExtractor"),_oo=o(" (BEiT model)"),boo=l(),uh=a("li"),Cee=a("strong"),Foo=o("clip"),voo=o(" \u2014 "),vR=a("a"),Too=o("CLIPFeatureExtractor"),Moo=o(" (CLIP model)"),Eoo=l(),ph=a("li"),wee=a("strong"),Coo=o("convnext"),woo=o(" \u2014 "),TR=a("a"),Aoo=o("ConvNextFeatureExtractor"),yoo=o(" (ConvNext model)"),Loo=l(),_h=a("li"),Aee=a("strong"),xoo=o("deit"),koo=o(" \u2014 "),MR=a("a"),Soo=o("DeiTFeatureExtractor"),Roo=o(" (DeiT model)"),Boo=l(),bh=a("li"),yee=a("strong"),Poo=o("detr"),$oo=o(" \u2014 "),ER=a("a"),Ioo=o("DetrFeatureExtractor"),qoo=o(" (DETR model)"),Noo=l(),Fh=a("li"),Lee=a("strong"),joo=o("hubert"),Doo=o(" \u2014 "),CR=a("a"),Goo=o("Wav2Vec2FeatureExtractor"),Ooo=o(" (Hubert model)"),Voo=l(),vh=a("li"),xee=a("strong"),Xoo=o("layoutlmv2"),zoo=o(" \u2014 "),wR=a("a"),Qoo=o("LayoutLMv2FeatureExtractor"),Woo=o(" (LayoutLMv2 model)"),Hoo=l(),Th=a("li"),kee=a("strong"),Uoo=o("maskformer"),Joo=o(" \u2014 "),AR=a("a"),Yoo=o("MaskFormerFeatureExtractor"),Koo=o(" (MaskFormer model)"),Zoo=l(),Mh=a("li"),See=a("strong"),ero=o("perceiver"),oro=o(" \u2014 "),yR=a("a"),rro=o("PerceiverFeatureExtractor"),tro=o(" (Perceiver model)"),aro=l(),Eh=a("li"),Ree=a("strong"),nro=o("poolformer"),sro=o(" \u2014 "),LR=a("a"),lro=o("PoolFormerFeatureExtractor"),iro=o(" (PoolFormer model)"),dro=l(),Ch=a("li"),Bee=a("strong"),cro=o("resnet"),mro=o(" \u2014 "),xR=a("a"),fro=o("ConvNextFeatureExtractor"),gro=o(" (ResNet model)"),hro=l(),wh=a("li"),Pee=a("strong"),uro=o("segformer"),pro=o(" \u2014 "),kR=a("a"),_ro=o("SegformerFeatureExtractor"),bro=o(" (SegFormer model)"),Fro=l(),Ah=a("li"),$ee=a("strong"),vro=o("speech_to_text"),Tro=o(" \u2014 "),SR=a("a"),Mro=o("Speech2TextFeatureExtractor"),Ero=o(" (Speech2Text model)"),Cro=l(),yh=a("li"),Iee=a("strong"),wro=o("swin"),Aro=o(" \u2014 "),RR=a("a"),yro=o("ViTFeatureExtractor"),Lro=o(" (Swin model)"),xro=l(),Lh=a("li"),qee=a("strong"),kro=o("van"),Sro=o(" \u2014 "),BR=a("a"),Rro=o("ConvNextFeatureExtractor"),Bro=o(" (VAN model)"),Pro=l(),xh=a("li"),Nee=a("strong"),$ro=o("vit"),Iro=o(" \u2014 "),PR=a("a"),qro=o("ViTFeatureExtractor"),Nro=o(" (ViT model)"),jro=l(),kh=a("li"),jee=a("strong"),Dro=o("vit_mae"),Gro=o(" \u2014 "),$R=a("a"),Oro=o("ViTFeatureExtractor"),Vro=o(" (ViTMAE model)"),Xro=l(),Sh=a("li"),Dee=a("strong"),zro=o("wav2vec2"),Qro=o(" \u2014 "),IR=a("a"),Wro=o("Wav2Vec2FeatureExtractor"),Hro=o(" (Wav2Vec2 model)"),Uro=l(),m(Rh.$$.fragment),Jro=l(),Gee=a("p"),Yro=o("Examples:"),Kro=l(),m(Nw.$$.fragment),Zro=l(),Bh=a("div"),m(jw.$$.fragment),eto=l(),Oee=a("p"),oto=o("Register a new feature extractor for this class."),DSe=l(),Hi=a("h2"),Ph=a("a"),Vee=a("span"),m(Dw.$$.fragment),rto=l(),Xee=a("span"),tto=o("AutoProcessor"),GSe=l(),Uo=a("div"),m(Gw.$$.fragment),ato=l(),Ow=a("p"),nto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qR=a("a"),sto=o("AutoProcessor.from_pretrained()"),lto=o(" class method."),ito=l(),Vw=a("p"),dto=o("This class cannot be instantiated directly using "),zee=a("code"),cto=o("__init__()"),mto=o(" (throws an error)."),fto=l(),Ie=a("div"),m(Xw.$$.fragment),gto=l(),Qee=a("p"),hto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uto=l(),Ui=a("p"),pto=o("The processor class to instantiate is selected based on the "),Wee=a("code"),_to=o("model_type"),bto=o(` property of the config object (either
passed as an argument or loaded from `),Hee=a("code"),Fto=o("pretrained_model_name_or_path"),vto=o(" if possible):"),Tto=l(),ke=a("ul"),$h=a("li"),Uee=a("strong"),Mto=o("clip"),Eto=o(" \u2014 "),NR=a("a"),Cto=o("CLIPProcessor"),wto=o(" (CLIP model)"),Ato=l(),Ih=a("li"),Jee=a("strong"),yto=o("layoutlmv2"),Lto=o(" \u2014 "),jR=a("a"),xto=o("LayoutLMv2Processor"),kto=o(" (LayoutLMv2 model)"),Sto=l(),qh=a("li"),Yee=a("strong"),Rto=o("layoutxlm"),Bto=o(" \u2014 "),DR=a("a"),Pto=o("LayoutXLMProcessor"),$to=o(" (LayoutXLM model)"),Ito=l(),Nh=a("li"),Kee=a("strong"),qto=o("speech_to_text"),Nto=o(" \u2014 "),GR=a("a"),jto=o("Speech2TextProcessor"),Dto=o(" (Speech2Text model)"),Gto=l(),jh=a("li"),Zee=a("strong"),Oto=o("speech_to_text_2"),Vto=o(" \u2014 "),OR=a("a"),Xto=o("Speech2Text2Processor"),zto=o(" (Speech2Text2 model)"),Qto=l(),Dh=a("li"),eoe=a("strong"),Wto=o("trocr"),Hto=o(" \u2014 "),VR=a("a"),Uto=o("TrOCRProcessor"),Jto=o(" (TrOCR model)"),Yto=l(),Gh=a("li"),ooe=a("strong"),Kto=o("vision-text-dual-encoder"),Zto=o(" \u2014 "),XR=a("a"),eao=o("VisionTextDualEncoderProcessor"),oao=o(" (VisionTextDualEncoder model)"),rao=l(),Oh=a("li"),roe=a("strong"),tao=o("wav2vec2"),aao=o(" \u2014 "),zR=a("a"),nao=o("Wav2Vec2Processor"),sao=o(" (Wav2Vec2 model)"),lao=l(),m(Vh.$$.fragment),iao=l(),toe=a("p"),dao=o("Examples:"),cao=l(),m(zw.$$.fragment),mao=l(),Xh=a("div"),m(Qw.$$.fragment),fao=l(),aoe=a("p"),gao=o("Register a new processor for this class."),OSe=l(),Ji=a("h2"),zh=a("a"),noe=a("span"),m(Ww.$$.fragment),hao=l(),soe=a("span"),uao=o("AutoModel"),VSe=l(),Jo=a("div"),m(Hw.$$.fragment),pao=l(),Yi=a("p"),_ao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QR=a("a"),bao=o("from_pretrained()"),Fao=o(" class method or the "),WR=a("a"),vao=o("from_config()"),Tao=o(` class
method.`),Mao=l(),Uw=a("p"),Eao=o("This class cannot be instantiated directly using "),loe=a("code"),Cao=o("__init__()"),wao=o(" (throws an error)."),Aao=l(),Xr=a("div"),m(Jw.$$.fragment),yao=l(),ioe=a("p"),Lao=o("Instantiates one of the base model classes of the library from a configuration."),xao=l(),Ki=a("p"),kao=o(`Note:
Loading a model from its configuration file does `),doe=a("strong"),Sao=o("not"),Rao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HR=a("a"),Bao=o("from_pretrained()"),Pao=o(" to load the model weights."),$ao=l(),coe=a("p"),Iao=o("Examples:"),qao=l(),m(Yw.$$.fragment),Nao=l(),qe=a("div"),m(Kw.$$.fragment),jao=l(),moe=a("p"),Dao=o("Instantiate one of the base model classes of the library from a pretrained model."),Gao=l(),Xa=a("p"),Oao=o("The model class to instantiate is selected based on the "),foe=a("code"),Vao=o("model_type"),Xao=o(` property of the config object (either
passed as an argument or loaded from `),goe=a("code"),zao=o("pretrained_model_name_or_path"),Qao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hoe=a("code"),Wao=o("pretrained_model_name_or_path"),Hao=o(":"),Uao=l(),T=a("ul"),Qh=a("li"),uoe=a("strong"),Jao=o("albert"),Yao=o(" \u2014 "),UR=a("a"),Kao=o("AlbertModel"),Zao=o(" (ALBERT model)"),eno=l(),Wh=a("li"),poe=a("strong"),ono=o("bart"),rno=o(" \u2014 "),JR=a("a"),tno=o("BartModel"),ano=o(" (BART model)"),nno=l(),Hh=a("li"),_oe=a("strong"),sno=o("beit"),lno=o(" \u2014 "),YR=a("a"),ino=o("BeitModel"),dno=o(" (BEiT model)"),cno=l(),Uh=a("li"),boe=a("strong"),mno=o("bert"),fno=o(" \u2014 "),KR=a("a"),gno=o("BertModel"),hno=o(" (BERT model)"),uno=l(),Jh=a("li"),Foe=a("strong"),pno=o("bert-generation"),_no=o(" \u2014 "),ZR=a("a"),bno=o("BertGenerationEncoder"),Fno=o(" (Bert Generation model)"),vno=l(),Yh=a("li"),voe=a("strong"),Tno=o("big_bird"),Mno=o(" \u2014 "),eB=a("a"),Eno=o("BigBirdModel"),Cno=o(" (BigBird model)"),wno=l(),Kh=a("li"),Toe=a("strong"),Ano=o("bigbird_pegasus"),yno=o(" \u2014 "),oB=a("a"),Lno=o("BigBirdPegasusModel"),xno=o(" (BigBirdPegasus model)"),kno=l(),Zh=a("li"),Moe=a("strong"),Sno=o("blenderbot"),Rno=o(" \u2014 "),rB=a("a"),Bno=o("BlenderbotModel"),Pno=o(" (Blenderbot model)"),$no=l(),eu=a("li"),Eoe=a("strong"),Ino=o("blenderbot-small"),qno=o(" \u2014 "),tB=a("a"),Nno=o("BlenderbotSmallModel"),jno=o(" (BlenderbotSmall model)"),Dno=l(),ou=a("li"),Coe=a("strong"),Gno=o("camembert"),Ono=o(" \u2014 "),aB=a("a"),Vno=o("CamembertModel"),Xno=o(" (CamemBERT model)"),zno=l(),ru=a("li"),woe=a("strong"),Qno=o("canine"),Wno=o(" \u2014 "),nB=a("a"),Hno=o("CanineModel"),Uno=o(" (Canine model)"),Jno=l(),tu=a("li"),Aoe=a("strong"),Yno=o("clip"),Kno=o(" \u2014 "),sB=a("a"),Zno=o("CLIPModel"),eso=o(" (CLIP model)"),oso=l(),au=a("li"),yoe=a("strong"),rso=o("convbert"),tso=o(" \u2014 "),lB=a("a"),aso=o("ConvBertModel"),nso=o(" (ConvBERT model)"),sso=l(),nu=a("li"),Loe=a("strong"),lso=o("convnext"),iso=o(" \u2014 "),iB=a("a"),dso=o("ConvNextModel"),cso=o(" (ConvNext model)"),mso=l(),su=a("li"),xoe=a("strong"),fso=o("ctrl"),gso=o(" \u2014 "),dB=a("a"),hso=o("CTRLModel"),uso=o(" (CTRL model)"),pso=l(),lu=a("li"),koe=a("strong"),_so=o("data2vec-audio"),bso=o(" \u2014 "),cB=a("a"),Fso=o("Data2VecAudioModel"),vso=o(" (Data2VecAudio model)"),Tso=l(),iu=a("li"),Soe=a("strong"),Mso=o("data2vec-text"),Eso=o(" \u2014 "),mB=a("a"),Cso=o("Data2VecTextModel"),wso=o(" (Data2VecText model)"),Aso=l(),du=a("li"),Roe=a("strong"),yso=o("deberta"),Lso=o(" \u2014 "),fB=a("a"),xso=o("DebertaModel"),kso=o(" (DeBERTa model)"),Sso=l(),cu=a("li"),Boe=a("strong"),Rso=o("deberta-v2"),Bso=o(" \u2014 "),gB=a("a"),Pso=o("DebertaV2Model"),$so=o(" (DeBERTa-v2 model)"),Iso=l(),mu=a("li"),Poe=a("strong"),qso=o("decision_transformer"),Nso=o(" \u2014 "),hB=a("a"),jso=o("DecisionTransformerModel"),Dso=o(" (Decision Transformer model)"),Gso=l(),fu=a("li"),$oe=a("strong"),Oso=o("deit"),Vso=o(" \u2014 "),uB=a("a"),Xso=o("DeiTModel"),zso=o(" (DeiT model)"),Qso=l(),gu=a("li"),Ioe=a("strong"),Wso=o("detr"),Hso=o(" \u2014 "),pB=a("a"),Uso=o("DetrModel"),Jso=o(" (DETR model)"),Yso=l(),hu=a("li"),qoe=a("strong"),Kso=o("distilbert"),Zso=o(" \u2014 "),_B=a("a"),elo=o("DistilBertModel"),olo=o(" (DistilBERT model)"),rlo=l(),uu=a("li"),Noe=a("strong"),tlo=o("dpr"),alo=o(" \u2014 "),bB=a("a"),nlo=o("DPRQuestionEncoder"),slo=o(" (DPR model)"),llo=l(),pu=a("li"),joe=a("strong"),ilo=o("dpt"),dlo=o(" \u2014 "),FB=a("a"),clo=o("DPTModel"),mlo=o(" (DPT model)"),flo=l(),_u=a("li"),Doe=a("strong"),glo=o("electra"),hlo=o(" \u2014 "),vB=a("a"),ulo=o("ElectraModel"),plo=o(" (ELECTRA model)"),_lo=l(),bu=a("li"),Goe=a("strong"),blo=o("flaubert"),Flo=o(" \u2014 "),TB=a("a"),vlo=o("FlaubertModel"),Tlo=o(" (FlauBERT model)"),Mlo=l(),Fu=a("li"),Ooe=a("strong"),Elo=o("fnet"),Clo=o(" \u2014 "),MB=a("a"),wlo=o("FNetModel"),Alo=o(" (FNet model)"),ylo=l(),vu=a("li"),Voe=a("strong"),Llo=o("fsmt"),xlo=o(" \u2014 "),EB=a("a"),klo=o("FSMTModel"),Slo=o(" (FairSeq Machine-Translation model)"),Rlo=l(),js=a("li"),Xoe=a("strong"),Blo=o("funnel"),Plo=o(" \u2014 "),CB=a("a"),$lo=o("FunnelModel"),Ilo=o(" or "),wB=a("a"),qlo=o("FunnelBaseModel"),Nlo=o(" (Funnel Transformer model)"),jlo=l(),Tu=a("li"),zoe=a("strong"),Dlo=o("glpn"),Glo=o(" \u2014 "),AB=a("a"),Olo=o("GLPNModel"),Vlo=o(" (GLPN model)"),Xlo=l(),Mu=a("li"),Qoe=a("strong"),zlo=o("gpt2"),Qlo=o(" \u2014 "),yB=a("a"),Wlo=o("GPT2Model"),Hlo=o(" (OpenAI GPT-2 model)"),Ulo=l(),Eu=a("li"),Woe=a("strong"),Jlo=o("gpt_neo"),Ylo=o(" \u2014 "),LB=a("a"),Klo=o("GPTNeoModel"),Zlo=o(" (GPT Neo model)"),eio=l(),Cu=a("li"),Hoe=a("strong"),oio=o("gptj"),rio=o(" \u2014 "),xB=a("a"),tio=o("GPTJModel"),aio=o(" (GPT-J model)"),nio=l(),wu=a("li"),Uoe=a("strong"),sio=o("hubert"),lio=o(" \u2014 "),kB=a("a"),iio=o("HubertModel"),dio=o(" (Hubert model)"),cio=l(),Au=a("li"),Joe=a("strong"),mio=o("ibert"),fio=o(" \u2014 "),SB=a("a"),gio=o("IBertModel"),hio=o(" (I-BERT model)"),uio=l(),yu=a("li"),Yoe=a("strong"),pio=o("imagegpt"),_io=o(" \u2014 "),RB=a("a"),bio=o("ImageGPTModel"),Fio=o(" (ImageGPT model)"),vio=l(),Lu=a("li"),Koe=a("strong"),Tio=o("layoutlm"),Mio=o(" \u2014 "),BB=a("a"),Eio=o("LayoutLMModel"),Cio=o(" (LayoutLM model)"),wio=l(),xu=a("li"),Zoe=a("strong"),Aio=o("layoutlmv2"),yio=o(" \u2014 "),PB=a("a"),Lio=o("LayoutLMv2Model"),xio=o(" (LayoutLMv2 model)"),kio=l(),ku=a("li"),ere=a("strong"),Sio=o("led"),Rio=o(" \u2014 "),$B=a("a"),Bio=o("LEDModel"),Pio=o(" (LED model)"),$io=l(),Su=a("li"),ore=a("strong"),Iio=o("longformer"),qio=o(" \u2014 "),IB=a("a"),Nio=o("LongformerModel"),jio=o(" (Longformer model)"),Dio=l(),Ru=a("li"),rre=a("strong"),Gio=o("luke"),Oio=o(" \u2014 "),qB=a("a"),Vio=o("LukeModel"),Xio=o(" (LUKE model)"),zio=l(),Bu=a("li"),tre=a("strong"),Qio=o("lxmert"),Wio=o(" \u2014 "),NB=a("a"),Hio=o("LxmertModel"),Uio=o(" (LXMERT model)"),Jio=l(),Pu=a("li"),are=a("strong"),Yio=o("m2m_100"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("M2M100Model"),edo=o(" (M2M100 model)"),odo=l(),$u=a("li"),nre=a("strong"),rdo=o("marian"),tdo=o(" \u2014 "),DB=a("a"),ado=o("MarianModel"),ndo=o(" (Marian model)"),sdo=l(),Iu=a("li"),sre=a("strong"),ldo=o("maskformer"),ido=o(" \u2014 "),GB=a("a"),ddo=o("MaskFormerModel"),cdo=o(" (MaskFormer model)"),mdo=l(),qu=a("li"),lre=a("strong"),fdo=o("mbart"),gdo=o(" \u2014 "),OB=a("a"),hdo=o("MBartModel"),udo=o(" (mBART model)"),pdo=l(),Nu=a("li"),ire=a("strong"),_do=o("megatron-bert"),bdo=o(" \u2014 "),VB=a("a"),Fdo=o("MegatronBertModel"),vdo=o(" (MegatronBert model)"),Tdo=l(),ju=a("li"),dre=a("strong"),Mdo=o("mobilebert"),Edo=o(" \u2014 "),XB=a("a"),Cdo=o("MobileBertModel"),wdo=o(" (MobileBERT model)"),Ado=l(),Du=a("li"),cre=a("strong"),ydo=o("mpnet"),Ldo=o(" \u2014 "),zB=a("a"),xdo=o("MPNetModel"),kdo=o(" (MPNet model)"),Sdo=l(),Gu=a("li"),mre=a("strong"),Rdo=o("mt5"),Bdo=o(" \u2014 "),QB=a("a"),Pdo=o("MT5Model"),$do=o(" (mT5 model)"),Ido=l(),Ou=a("li"),fre=a("strong"),qdo=o("nystromformer"),Ndo=o(" \u2014 "),WB=a("a"),jdo=o("NystromformerModel"),Ddo=o(" (Nystromformer model)"),Gdo=l(),Vu=a("li"),gre=a("strong"),Odo=o("openai-gpt"),Vdo=o(" \u2014 "),HB=a("a"),Xdo=o("OpenAIGPTModel"),zdo=o(" (OpenAI GPT model)"),Qdo=l(),Xu=a("li"),hre=a("strong"),Wdo=o("pegasus"),Hdo=o(" \u2014 "),UB=a("a"),Udo=o("PegasusModel"),Jdo=o(" (Pegasus model)"),Ydo=l(),zu=a("li"),ure=a("strong"),Kdo=o("perceiver"),Zdo=o(" \u2014 "),JB=a("a"),eco=o("PerceiverModel"),oco=o(" (Perceiver model)"),rco=l(),Qu=a("li"),pre=a("strong"),tco=o("plbart"),aco=o(" \u2014 "),YB=a("a"),nco=o("PLBartModel"),sco=o(" (PLBart model)"),lco=l(),Wu=a("li"),_re=a("strong"),ico=o("poolformer"),dco=o(" \u2014 "),KB=a("a"),cco=o("PoolFormerModel"),mco=o(" (PoolFormer model)"),fco=l(),Hu=a("li"),bre=a("strong"),gco=o("prophetnet"),hco=o(" \u2014 "),ZB=a("a"),uco=o("ProphetNetModel"),pco=o(" (ProphetNet model)"),_co=l(),Uu=a("li"),Fre=a("strong"),bco=o("qdqbert"),Fco=o(" \u2014 "),eP=a("a"),vco=o("QDQBertModel"),Tco=o(" (QDQBert model)"),Mco=l(),Ju=a("li"),vre=a("strong"),Eco=o("reformer"),Cco=o(" \u2014 "),oP=a("a"),wco=o("ReformerModel"),Aco=o(" (Reformer model)"),yco=l(),Yu=a("li"),Tre=a("strong"),Lco=o("rembert"),xco=o(" \u2014 "),rP=a("a"),kco=o("RemBertModel"),Sco=o(" (RemBERT model)"),Rco=l(),Ku=a("li"),Mre=a("strong"),Bco=o("resnet"),Pco=o(" \u2014 "),tP=a("a"),$co=o("ResNetModel"),Ico=o(" (ResNet model)"),qco=l(),Zu=a("li"),Ere=a("strong"),Nco=o("retribert"),jco=o(" \u2014 "),aP=a("a"),Dco=o("RetriBertModel"),Gco=o(" (RetriBERT model)"),Oco=l(),ep=a("li"),Cre=a("strong"),Vco=o("roberta"),Xco=o(" \u2014 "),nP=a("a"),zco=o("RobertaModel"),Qco=o(" (RoBERTa model)"),Wco=l(),op=a("li"),wre=a("strong"),Hco=o("roformer"),Uco=o(" \u2014 "),sP=a("a"),Jco=o("RoFormerModel"),Yco=o(" (RoFormer model)"),Kco=l(),rp=a("li"),Are=a("strong"),Zco=o("segformer"),emo=o(" \u2014 "),lP=a("a"),omo=o("SegformerModel"),rmo=o(" (SegFormer model)"),tmo=l(),tp=a("li"),yre=a("strong"),amo=o("sew"),nmo=o(" \u2014 "),iP=a("a"),smo=o("SEWModel"),lmo=o(" (SEW model)"),imo=l(),ap=a("li"),Lre=a("strong"),dmo=o("sew-d"),cmo=o(" \u2014 "),dP=a("a"),mmo=o("SEWDModel"),fmo=o(" (SEW-D model)"),gmo=l(),np=a("li"),xre=a("strong"),hmo=o("speech_to_text"),umo=o(" \u2014 "),cP=a("a"),pmo=o("Speech2TextModel"),_mo=o(" (Speech2Text model)"),bmo=l(),sp=a("li"),kre=a("strong"),Fmo=o("splinter"),vmo=o(" \u2014 "),mP=a("a"),Tmo=o("SplinterModel"),Mmo=o(" (Splinter model)"),Emo=l(),lp=a("li"),Sre=a("strong"),Cmo=o("squeezebert"),wmo=o(" \u2014 "),fP=a("a"),Amo=o("SqueezeBertModel"),ymo=o(" (SqueezeBERT model)"),Lmo=l(),ip=a("li"),Rre=a("strong"),xmo=o("swin"),kmo=o(" \u2014 "),gP=a("a"),Smo=o("SwinModel"),Rmo=o(" (Swin model)"),Bmo=l(),dp=a("li"),Bre=a("strong"),Pmo=o("t5"),$mo=o(" \u2014 "),hP=a("a"),Imo=o("T5Model"),qmo=o(" (T5 model)"),Nmo=l(),cp=a("li"),Pre=a("strong"),jmo=o("tapas"),Dmo=o(" \u2014 "),uP=a("a"),Gmo=o("TapasModel"),Omo=o(" (TAPAS model)"),Vmo=l(),mp=a("li"),$re=a("strong"),Xmo=o("transfo-xl"),zmo=o(" \u2014 "),pP=a("a"),Qmo=o("TransfoXLModel"),Wmo=o(" (Transformer-XL model)"),Hmo=l(),fp=a("li"),Ire=a("strong"),Umo=o("unispeech"),Jmo=o(" \u2014 "),_P=a("a"),Ymo=o("UniSpeechModel"),Kmo=o(" (UniSpeech model)"),Zmo=l(),gp=a("li"),qre=a("strong"),efo=o("unispeech-sat"),ofo=o(" \u2014 "),bP=a("a"),rfo=o("UniSpeechSatModel"),tfo=o(" (UniSpeechSat model)"),afo=l(),hp=a("li"),Nre=a("strong"),nfo=o("van"),sfo=o(" \u2014 "),FP=a("a"),lfo=o("VanModel"),ifo=o(" (VAN model)"),dfo=l(),up=a("li"),jre=a("strong"),cfo=o("vilt"),mfo=o(" \u2014 "),vP=a("a"),ffo=o("ViltModel"),gfo=o(" (ViLT model)"),hfo=l(),pp=a("li"),Dre=a("strong"),ufo=o("vision-text-dual-encoder"),pfo=o(" \u2014 "),TP=a("a"),_fo=o("VisionTextDualEncoderModel"),bfo=o(" (VisionTextDualEncoder model)"),Ffo=l(),_p=a("li"),Gre=a("strong"),vfo=o("visual_bert"),Tfo=o(" \u2014 "),MP=a("a"),Mfo=o("VisualBertModel"),Efo=o(" (VisualBert model)"),Cfo=l(),bp=a("li"),Ore=a("strong"),wfo=o("vit"),Afo=o(" \u2014 "),EP=a("a"),yfo=o("ViTModel"),Lfo=o(" (ViT model)"),xfo=l(),Fp=a("li"),Vre=a("strong"),kfo=o("vit_mae"),Sfo=o(" \u2014 "),CP=a("a"),Rfo=o("ViTMAEModel"),Bfo=o(" (ViTMAE model)"),Pfo=l(),vp=a("li"),Xre=a("strong"),$fo=o("wav2vec2"),Ifo=o(" \u2014 "),wP=a("a"),qfo=o("Wav2Vec2Model"),Nfo=o(" (Wav2Vec2 model)"),jfo=l(),Tp=a("li"),zre=a("strong"),Dfo=o("wavlm"),Gfo=o(" \u2014 "),AP=a("a"),Ofo=o("WavLMModel"),Vfo=o(" (WavLM model)"),Xfo=l(),Mp=a("li"),Qre=a("strong"),zfo=o("xglm"),Qfo=o(" \u2014 "),yP=a("a"),Wfo=o("XGLMModel"),Hfo=o(" (XGLM model)"),Ufo=l(),Ep=a("li"),Wre=a("strong"),Jfo=o("xlm"),Yfo=o(" \u2014 "),LP=a("a"),Kfo=o("XLMModel"),Zfo=o(" (XLM model)"),ego=l(),Cp=a("li"),Hre=a("strong"),ogo=o("xlm-prophetnet"),rgo=o(" \u2014 "),xP=a("a"),tgo=o("XLMProphetNetModel"),ago=o(" (XLMProphetNet model)"),ngo=l(),wp=a("li"),Ure=a("strong"),sgo=o("xlm-roberta"),lgo=o(" \u2014 "),kP=a("a"),igo=o("XLMRobertaModel"),dgo=o(" (XLM-RoBERTa model)"),cgo=l(),Ap=a("li"),Jre=a("strong"),mgo=o("xlm-roberta-xl"),fgo=o(" \u2014 "),SP=a("a"),ggo=o("XLMRobertaXLModel"),hgo=o(" (XLM-RoBERTa-XL model)"),ugo=l(),yp=a("li"),Yre=a("strong"),pgo=o("xlnet"),_go=o(" \u2014 "),RP=a("a"),bgo=o("XLNetModel"),Fgo=o(" (XLNet model)"),vgo=l(),Lp=a("li"),Kre=a("strong"),Tgo=o("yoso"),Mgo=o(" \u2014 "),BP=a("a"),Ego=o("YosoModel"),Cgo=o(" (YOSO model)"),wgo=l(),xp=a("p"),Ago=o("The model is set in evaluation mode by default using "),Zre=a("code"),ygo=o("model.eval()"),Lgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ete=a("code"),xgo=o("model.train()"),kgo=l(),ote=a("p"),Sgo=o("Examples:"),Rgo=l(),m(Zw.$$.fragment),XSe=l(),Zi=a("h2"),kp=a("a"),rte=a("span"),m(eA.$$.fragment),Bgo=l(),tte=a("span"),Pgo=o("AutoModelForPreTraining"),zSe=l(),Yo=a("div"),m(oA.$$.fragment),$go=l(),ed=a("p"),Igo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PP=a("a"),qgo=o("from_pretrained()"),Ngo=o(" class method or the "),$P=a("a"),jgo=o("from_config()"),Dgo=o(` class
method.`),Ggo=l(),rA=a("p"),Ogo=o("This class cannot be instantiated directly using "),ate=a("code"),Vgo=o("__init__()"),Xgo=o(" (throws an error)."),zgo=l(),zr=a("div"),m(tA.$$.fragment),Qgo=l(),nte=a("p"),Wgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hgo=l(),od=a("p"),Ugo=o(`Note:
Loading a model from its configuration file does `),ste=a("strong"),Jgo=o("not"),Ygo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IP=a("a"),Kgo=o("from_pretrained()"),Zgo=o(" to load the model weights."),eho=l(),lte=a("p"),oho=o("Examples:"),rho=l(),m(aA.$$.fragment),tho=l(),Ne=a("div"),m(nA.$$.fragment),aho=l(),ite=a("p"),nho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sho=l(),za=a("p"),lho=o("The model class to instantiate is selected based on the "),dte=a("code"),iho=o("model_type"),dho=o(` property of the config object (either
passed as an argument or loaded from `),cte=a("code"),cho=o("pretrained_model_name_or_path"),mho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mte=a("code"),fho=o("pretrained_model_name_or_path"),gho=o(":"),hho=l(),S=a("ul"),Sp=a("li"),fte=a("strong"),uho=o("albert"),pho=o(" \u2014 "),qP=a("a"),_ho=o("AlbertForPreTraining"),bho=o(" (ALBERT model)"),Fho=l(),Rp=a("li"),gte=a("strong"),vho=o("bart"),Tho=o(" \u2014 "),NP=a("a"),Mho=o("BartForConditionalGeneration"),Eho=o(" (BART model)"),Cho=l(),Bp=a("li"),hte=a("strong"),who=o("bert"),Aho=o(" \u2014 "),jP=a("a"),yho=o("BertForPreTraining"),Lho=o(" (BERT model)"),xho=l(),Pp=a("li"),ute=a("strong"),kho=o("big_bird"),Sho=o(" \u2014 "),DP=a("a"),Rho=o("BigBirdForPreTraining"),Bho=o(" (BigBird model)"),Pho=l(),$p=a("li"),pte=a("strong"),$ho=o("camembert"),Iho=o(" \u2014 "),GP=a("a"),qho=o("CamembertForMaskedLM"),Nho=o(" (CamemBERT model)"),jho=l(),Ip=a("li"),_te=a("strong"),Dho=o("ctrl"),Gho=o(" \u2014 "),OP=a("a"),Oho=o("CTRLLMHeadModel"),Vho=o(" (CTRL model)"),Xho=l(),qp=a("li"),bte=a("strong"),zho=o("data2vec-text"),Qho=o(" \u2014 "),VP=a("a"),Who=o("Data2VecTextForMaskedLM"),Hho=o(" (Data2VecText model)"),Uho=l(),Np=a("li"),Fte=a("strong"),Jho=o("deberta"),Yho=o(" \u2014 "),XP=a("a"),Kho=o("DebertaForMaskedLM"),Zho=o(" (DeBERTa model)"),euo=l(),jp=a("li"),vte=a("strong"),ouo=o("deberta-v2"),ruo=o(" \u2014 "),zP=a("a"),tuo=o("DebertaV2ForMaskedLM"),auo=o(" (DeBERTa-v2 model)"),nuo=l(),Dp=a("li"),Tte=a("strong"),suo=o("distilbert"),luo=o(" \u2014 "),QP=a("a"),iuo=o("DistilBertForMaskedLM"),duo=o(" (DistilBERT model)"),cuo=l(),Gp=a("li"),Mte=a("strong"),muo=o("electra"),fuo=o(" \u2014 "),WP=a("a"),guo=o("ElectraForPreTraining"),huo=o(" (ELECTRA model)"),uuo=l(),Op=a("li"),Ete=a("strong"),puo=o("flaubert"),_uo=o(" \u2014 "),HP=a("a"),buo=o("FlaubertWithLMHeadModel"),Fuo=o(" (FlauBERT model)"),vuo=l(),Vp=a("li"),Cte=a("strong"),Tuo=o("fnet"),Muo=o(" \u2014 "),UP=a("a"),Euo=o("FNetForPreTraining"),Cuo=o(" (FNet model)"),wuo=l(),Xp=a("li"),wte=a("strong"),Auo=o("fsmt"),yuo=o(" \u2014 "),JP=a("a"),Luo=o("FSMTForConditionalGeneration"),xuo=o(" (FairSeq Machine-Translation model)"),kuo=l(),zp=a("li"),Ate=a("strong"),Suo=o("funnel"),Ruo=o(" \u2014 "),YP=a("a"),Buo=o("FunnelForPreTraining"),Puo=o(" (Funnel Transformer model)"),$uo=l(),Qp=a("li"),yte=a("strong"),Iuo=o("gpt2"),quo=o(" \u2014 "),KP=a("a"),Nuo=o("GPT2LMHeadModel"),juo=o(" (OpenAI GPT-2 model)"),Duo=l(),Wp=a("li"),Lte=a("strong"),Guo=o("ibert"),Ouo=o(" \u2014 "),ZP=a("a"),Vuo=o("IBertForMaskedLM"),Xuo=o(" (I-BERT model)"),zuo=l(),Hp=a("li"),xte=a("strong"),Quo=o("layoutlm"),Wuo=o(" \u2014 "),e$=a("a"),Huo=o("LayoutLMForMaskedLM"),Uuo=o(" (LayoutLM model)"),Juo=l(),Up=a("li"),kte=a("strong"),Yuo=o("longformer"),Kuo=o(" \u2014 "),o$=a("a"),Zuo=o("LongformerForMaskedLM"),epo=o(" (Longformer model)"),opo=l(),Jp=a("li"),Ste=a("strong"),rpo=o("lxmert"),tpo=o(" \u2014 "),r$=a("a"),apo=o("LxmertForPreTraining"),npo=o(" (LXMERT model)"),spo=l(),Yp=a("li"),Rte=a("strong"),lpo=o("megatron-bert"),ipo=o(" \u2014 "),t$=a("a"),dpo=o("MegatronBertForPreTraining"),cpo=o(" (MegatronBert model)"),mpo=l(),Kp=a("li"),Bte=a("strong"),fpo=o("mobilebert"),gpo=o(" \u2014 "),a$=a("a"),hpo=o("MobileBertForPreTraining"),upo=o(" (MobileBERT model)"),ppo=l(),Zp=a("li"),Pte=a("strong"),_po=o("mpnet"),bpo=o(" \u2014 "),n$=a("a"),Fpo=o("MPNetForMaskedLM"),vpo=o(" (MPNet model)"),Tpo=l(),e_=a("li"),$te=a("strong"),Mpo=o("openai-gpt"),Epo=o(" \u2014 "),s$=a("a"),Cpo=o("OpenAIGPTLMHeadModel"),wpo=o(" (OpenAI GPT model)"),Apo=l(),o_=a("li"),Ite=a("strong"),ypo=o("retribert"),Lpo=o(" \u2014 "),l$=a("a"),xpo=o("RetriBertModel"),kpo=o(" (RetriBERT model)"),Spo=l(),r_=a("li"),qte=a("strong"),Rpo=o("roberta"),Bpo=o(" \u2014 "),i$=a("a"),Ppo=o("RobertaForMaskedLM"),$po=o(" (RoBERTa model)"),Ipo=l(),t_=a("li"),Nte=a("strong"),qpo=o("squeezebert"),Npo=o(" \u2014 "),d$=a("a"),jpo=o("SqueezeBertForMaskedLM"),Dpo=o(" (SqueezeBERT model)"),Gpo=l(),a_=a("li"),jte=a("strong"),Opo=o("t5"),Vpo=o(" \u2014 "),c$=a("a"),Xpo=o("T5ForConditionalGeneration"),zpo=o(" (T5 model)"),Qpo=l(),n_=a("li"),Dte=a("strong"),Wpo=o("tapas"),Hpo=o(" \u2014 "),m$=a("a"),Upo=o("TapasForMaskedLM"),Jpo=o(" (TAPAS model)"),Ypo=l(),s_=a("li"),Gte=a("strong"),Kpo=o("transfo-xl"),Zpo=o(" \u2014 "),f$=a("a"),e_o=o("TransfoXLLMHeadModel"),o_o=o(" (Transformer-XL model)"),r_o=l(),l_=a("li"),Ote=a("strong"),t_o=o("unispeech"),a_o=o(" \u2014 "),g$=a("a"),n_o=o("UniSpeechForPreTraining"),s_o=o(" (UniSpeech model)"),l_o=l(),i_=a("li"),Vte=a("strong"),i_o=o("unispeech-sat"),d_o=o(" \u2014 "),h$=a("a"),c_o=o("UniSpeechSatForPreTraining"),m_o=o(" (UniSpeechSat model)"),f_o=l(),d_=a("li"),Xte=a("strong"),g_o=o("visual_bert"),h_o=o(" \u2014 "),u$=a("a"),u_o=o("VisualBertForPreTraining"),p_o=o(" (VisualBert model)"),__o=l(),c_=a("li"),zte=a("strong"),b_o=o("vit_mae"),F_o=o(" \u2014 "),p$=a("a"),v_o=o("ViTMAEForPreTraining"),T_o=o(" (ViTMAE model)"),M_o=l(),m_=a("li"),Qte=a("strong"),E_o=o("wav2vec2"),C_o=o(" \u2014 "),_$=a("a"),w_o=o("Wav2Vec2ForPreTraining"),A_o=o(" (Wav2Vec2 model)"),y_o=l(),f_=a("li"),Wte=a("strong"),L_o=o("xlm"),x_o=o(" \u2014 "),b$=a("a"),k_o=o("XLMWithLMHeadModel"),S_o=o(" (XLM model)"),R_o=l(),g_=a("li"),Hte=a("strong"),B_o=o("xlm-roberta"),P_o=o(" \u2014 "),F$=a("a"),$_o=o("XLMRobertaForMaskedLM"),I_o=o(" (XLM-RoBERTa model)"),q_o=l(),h_=a("li"),Ute=a("strong"),N_o=o("xlm-roberta-xl"),j_o=o(" \u2014 "),v$=a("a"),D_o=o("XLMRobertaXLForMaskedLM"),G_o=o(" (XLM-RoBERTa-XL model)"),O_o=l(),u_=a("li"),Jte=a("strong"),V_o=o("xlnet"),X_o=o(" \u2014 "),T$=a("a"),z_o=o("XLNetLMHeadModel"),Q_o=o(" (XLNet model)"),W_o=l(),p_=a("p"),H_o=o("The model is set in evaluation mode by default using "),Yte=a("code"),U_o=o("model.eval()"),J_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kte=a("code"),Y_o=o("model.train()"),K_o=l(),Zte=a("p"),Z_o=o("Examples:"),ebo=l(),m(sA.$$.fragment),QSe=l(),rd=a("h2"),__=a("a"),eae=a("span"),m(lA.$$.fragment),obo=l(),oae=a("span"),rbo=o("AutoModelForCausalLM"),WSe=l(),Ko=a("div"),m(iA.$$.fragment),tbo=l(),td=a("p"),abo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),M$=a("a"),nbo=o("from_pretrained()"),sbo=o(" class method or the "),E$=a("a"),lbo=o("from_config()"),ibo=o(` class
method.`),dbo=l(),dA=a("p"),cbo=o("This class cannot be instantiated directly using "),rae=a("code"),mbo=o("__init__()"),fbo=o(" (throws an error)."),gbo=l(),Qr=a("div"),m(cA.$$.fragment),hbo=l(),tae=a("p"),ubo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pbo=l(),ad=a("p"),_bo=o(`Note:
Loading a model from its configuration file does `),aae=a("strong"),bbo=o("not"),Fbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C$=a("a"),vbo=o("from_pretrained()"),Tbo=o(" to load the model weights."),Mbo=l(),nae=a("p"),Ebo=o("Examples:"),Cbo=l(),m(mA.$$.fragment),wbo=l(),je=a("div"),m(fA.$$.fragment),Abo=l(),sae=a("p"),ybo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lbo=l(),Qa=a("p"),xbo=o("The model class to instantiate is selected based on the "),lae=a("code"),kbo=o("model_type"),Sbo=o(` property of the config object (either
passed as an argument or loaded from `),iae=a("code"),Rbo=o("pretrained_model_name_or_path"),Bbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=a("code"),Pbo=o("pretrained_model_name_or_path"),$bo=o(":"),Ibo=l(),$=a("ul"),b_=a("li"),cae=a("strong"),qbo=o("bart"),Nbo=o(" \u2014 "),w$=a("a"),jbo=o("BartForCausalLM"),Dbo=o(" (BART model)"),Gbo=l(),F_=a("li"),mae=a("strong"),Obo=o("bert"),Vbo=o(" \u2014 "),A$=a("a"),Xbo=o("BertLMHeadModel"),zbo=o(" (BERT model)"),Qbo=l(),v_=a("li"),fae=a("strong"),Wbo=o("bert-generation"),Hbo=o(" \u2014 "),y$=a("a"),Ubo=o("BertGenerationDecoder"),Jbo=o(" (Bert Generation model)"),Ybo=l(),T_=a("li"),gae=a("strong"),Kbo=o("big_bird"),Zbo=o(" \u2014 "),L$=a("a"),e2o=o("BigBirdForCausalLM"),o2o=o(" (BigBird model)"),r2o=l(),M_=a("li"),hae=a("strong"),t2o=o("bigbird_pegasus"),a2o=o(" \u2014 "),x$=a("a"),n2o=o("BigBirdPegasusForCausalLM"),s2o=o(" (BigBirdPegasus model)"),l2o=l(),E_=a("li"),uae=a("strong"),i2o=o("blenderbot"),d2o=o(" \u2014 "),k$=a("a"),c2o=o("BlenderbotForCausalLM"),m2o=o(" (Blenderbot model)"),f2o=l(),C_=a("li"),pae=a("strong"),g2o=o("blenderbot-small"),h2o=o(" \u2014 "),S$=a("a"),u2o=o("BlenderbotSmallForCausalLM"),p2o=o(" (BlenderbotSmall model)"),_2o=l(),w_=a("li"),_ae=a("strong"),b2o=o("camembert"),F2o=o(" \u2014 "),R$=a("a"),v2o=o("CamembertForCausalLM"),T2o=o(" (CamemBERT model)"),M2o=l(),A_=a("li"),bae=a("strong"),E2o=o("ctrl"),C2o=o(" \u2014 "),B$=a("a"),w2o=o("CTRLLMHeadModel"),A2o=o(" (CTRL model)"),y2o=l(),y_=a("li"),Fae=a("strong"),L2o=o("data2vec-text"),x2o=o(" \u2014 "),P$=a("a"),k2o=o("Data2VecTextForCausalLM"),S2o=o(" (Data2VecText model)"),R2o=l(),L_=a("li"),vae=a("strong"),B2o=o("electra"),P2o=o(" \u2014 "),$$=a("a"),$2o=o("ElectraForCausalLM"),I2o=o(" (ELECTRA model)"),q2o=l(),x_=a("li"),Tae=a("strong"),N2o=o("gpt2"),j2o=o(" \u2014 "),I$=a("a"),D2o=o("GPT2LMHeadModel"),G2o=o(" (OpenAI GPT-2 model)"),O2o=l(),k_=a("li"),Mae=a("strong"),V2o=o("gpt_neo"),X2o=o(" \u2014 "),q$=a("a"),z2o=o("GPTNeoForCausalLM"),Q2o=o(" (GPT Neo model)"),W2o=l(),S_=a("li"),Eae=a("strong"),H2o=o("gptj"),U2o=o(" \u2014 "),N$=a("a"),J2o=o("GPTJForCausalLM"),Y2o=o(" (GPT-J model)"),K2o=l(),R_=a("li"),Cae=a("strong"),Z2o=o("marian"),eFo=o(" \u2014 "),j$=a("a"),oFo=o("MarianForCausalLM"),rFo=o(" (Marian model)"),tFo=l(),B_=a("li"),wae=a("strong"),aFo=o("mbart"),nFo=o(" \u2014 "),D$=a("a"),sFo=o("MBartForCausalLM"),lFo=o(" (mBART model)"),iFo=l(),P_=a("li"),Aae=a("strong"),dFo=o("megatron-bert"),cFo=o(" \u2014 "),G$=a("a"),mFo=o("MegatronBertForCausalLM"),fFo=o(" (MegatronBert model)"),gFo=l(),$_=a("li"),yae=a("strong"),hFo=o("openai-gpt"),uFo=o(" \u2014 "),O$=a("a"),pFo=o("OpenAIGPTLMHeadModel"),_Fo=o(" (OpenAI GPT model)"),bFo=l(),I_=a("li"),Lae=a("strong"),FFo=o("pegasus"),vFo=o(" \u2014 "),V$=a("a"),TFo=o("PegasusForCausalLM"),MFo=o(" (Pegasus model)"),EFo=l(),q_=a("li"),xae=a("strong"),CFo=o("plbart"),wFo=o(" \u2014 "),X$=a("a"),AFo=o("PLBartForCausalLM"),yFo=o(" (PLBart model)"),LFo=l(),N_=a("li"),kae=a("strong"),xFo=o("prophetnet"),kFo=o(" \u2014 "),z$=a("a"),SFo=o("ProphetNetForCausalLM"),RFo=o(" (ProphetNet model)"),BFo=l(),j_=a("li"),Sae=a("strong"),PFo=o("qdqbert"),$Fo=o(" \u2014 "),Q$=a("a"),IFo=o("QDQBertLMHeadModel"),qFo=o(" (QDQBert model)"),NFo=l(),D_=a("li"),Rae=a("strong"),jFo=o("reformer"),DFo=o(" \u2014 "),W$=a("a"),GFo=o("ReformerModelWithLMHead"),OFo=o(" (Reformer model)"),VFo=l(),G_=a("li"),Bae=a("strong"),XFo=o("rembert"),zFo=o(" \u2014 "),H$=a("a"),QFo=o("RemBertForCausalLM"),WFo=o(" (RemBERT model)"),HFo=l(),O_=a("li"),Pae=a("strong"),UFo=o("roberta"),JFo=o(" \u2014 "),U$=a("a"),YFo=o("RobertaForCausalLM"),KFo=o(" (RoBERTa model)"),ZFo=l(),V_=a("li"),$ae=a("strong"),evo=o("roformer"),ovo=o(" \u2014 "),J$=a("a"),rvo=o("RoFormerForCausalLM"),tvo=o(" (RoFormer model)"),avo=l(),X_=a("li"),Iae=a("strong"),nvo=o("speech_to_text_2"),svo=o(" \u2014 "),Y$=a("a"),lvo=o("Speech2Text2ForCausalLM"),ivo=o(" (Speech2Text2 model)"),dvo=l(),z_=a("li"),qae=a("strong"),cvo=o("transfo-xl"),mvo=o(" \u2014 "),K$=a("a"),fvo=o("TransfoXLLMHeadModel"),gvo=o(" (Transformer-XL model)"),hvo=l(),Q_=a("li"),Nae=a("strong"),uvo=o("trocr"),pvo=o(" \u2014 "),Z$=a("a"),_vo=o("TrOCRForCausalLM"),bvo=o(" (TrOCR model)"),Fvo=l(),W_=a("li"),jae=a("strong"),vvo=o("xglm"),Tvo=o(" \u2014 "),eI=a("a"),Mvo=o("XGLMForCausalLM"),Evo=o(" (XGLM model)"),Cvo=l(),H_=a("li"),Dae=a("strong"),wvo=o("xlm"),Avo=o(" \u2014 "),oI=a("a"),yvo=o("XLMWithLMHeadModel"),Lvo=o(" (XLM model)"),xvo=l(),U_=a("li"),Gae=a("strong"),kvo=o("xlm-prophetnet"),Svo=o(" \u2014 "),rI=a("a"),Rvo=o("XLMProphetNetForCausalLM"),Bvo=o(" (XLMProphetNet model)"),Pvo=l(),J_=a("li"),Oae=a("strong"),$vo=o("xlm-roberta"),Ivo=o(" \u2014 "),tI=a("a"),qvo=o("XLMRobertaForCausalLM"),Nvo=o(" (XLM-RoBERTa model)"),jvo=l(),Y_=a("li"),Vae=a("strong"),Dvo=o("xlm-roberta-xl"),Gvo=o(" \u2014 "),aI=a("a"),Ovo=o("XLMRobertaXLForCausalLM"),Vvo=o(" (XLM-RoBERTa-XL model)"),Xvo=l(),K_=a("li"),Xae=a("strong"),zvo=o("xlnet"),Qvo=o(" \u2014 "),nI=a("a"),Wvo=o("XLNetLMHeadModel"),Hvo=o(" (XLNet model)"),Uvo=l(),Z_=a("p"),Jvo=o("The model is set in evaluation mode by default using "),zae=a("code"),Yvo=o("model.eval()"),Kvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qae=a("code"),Zvo=o("model.train()"),eTo=l(),Wae=a("p"),oTo=o("Examples:"),rTo=l(),m(gA.$$.fragment),HSe=l(),nd=a("h2"),eb=a("a"),Hae=a("span"),m(hA.$$.fragment),tTo=l(),Uae=a("span"),aTo=o("AutoModelForMaskedLM"),USe=l(),Zo=a("div"),m(uA.$$.fragment),nTo=l(),sd=a("p"),sTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sI=a("a"),lTo=o("from_pretrained()"),iTo=o(" class method or the "),lI=a("a"),dTo=o("from_config()"),cTo=o(` class
method.`),mTo=l(),pA=a("p"),fTo=o("This class cannot be instantiated directly using "),Jae=a("code"),gTo=o("__init__()"),hTo=o(" (throws an error)."),uTo=l(),Wr=a("div"),m(_A.$$.fragment),pTo=l(),Yae=a("p"),_To=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bTo=l(),ld=a("p"),FTo=o(`Note:
Loading a model from its configuration file does `),Kae=a("strong"),vTo=o("not"),TTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iI=a("a"),MTo=o("from_pretrained()"),ETo=o(" to load the model weights."),CTo=l(),Zae=a("p"),wTo=o("Examples:"),ATo=l(),m(bA.$$.fragment),yTo=l(),De=a("div"),m(FA.$$.fragment),LTo=l(),ene=a("p"),xTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kTo=l(),Wa=a("p"),STo=o("The model class to instantiate is selected based on the "),one=a("code"),RTo=o("model_type"),BTo=o(` property of the config object (either
passed as an argument or loaded from `),rne=a("code"),PTo=o("pretrained_model_name_or_path"),$To=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=a("code"),ITo=o("pretrained_model_name_or_path"),qTo=o(":"),NTo=l(),I=a("ul"),ob=a("li"),ane=a("strong"),jTo=o("albert"),DTo=o(" \u2014 "),dI=a("a"),GTo=o("AlbertForMaskedLM"),OTo=o(" (ALBERT model)"),VTo=l(),rb=a("li"),nne=a("strong"),XTo=o("bart"),zTo=o(" \u2014 "),cI=a("a"),QTo=o("BartForConditionalGeneration"),WTo=o(" (BART model)"),HTo=l(),tb=a("li"),sne=a("strong"),UTo=o("bert"),JTo=o(" \u2014 "),mI=a("a"),YTo=o("BertForMaskedLM"),KTo=o(" (BERT model)"),ZTo=l(),ab=a("li"),lne=a("strong"),e1o=o("big_bird"),o1o=o(" \u2014 "),fI=a("a"),r1o=o("BigBirdForMaskedLM"),t1o=o(" (BigBird model)"),a1o=l(),nb=a("li"),ine=a("strong"),n1o=o("camembert"),s1o=o(" \u2014 "),gI=a("a"),l1o=o("CamembertForMaskedLM"),i1o=o(" (CamemBERT model)"),d1o=l(),sb=a("li"),dne=a("strong"),c1o=o("convbert"),m1o=o(" \u2014 "),hI=a("a"),f1o=o("ConvBertForMaskedLM"),g1o=o(" (ConvBERT model)"),h1o=l(),lb=a("li"),cne=a("strong"),u1o=o("data2vec-text"),p1o=o(" \u2014 "),uI=a("a"),_1o=o("Data2VecTextForMaskedLM"),b1o=o(" (Data2VecText model)"),F1o=l(),ib=a("li"),mne=a("strong"),v1o=o("deberta"),T1o=o(" \u2014 "),pI=a("a"),M1o=o("DebertaForMaskedLM"),E1o=o(" (DeBERTa model)"),C1o=l(),db=a("li"),fne=a("strong"),w1o=o("deberta-v2"),A1o=o(" \u2014 "),_I=a("a"),y1o=o("DebertaV2ForMaskedLM"),L1o=o(" (DeBERTa-v2 model)"),x1o=l(),cb=a("li"),gne=a("strong"),k1o=o("distilbert"),S1o=o(" \u2014 "),bI=a("a"),R1o=o("DistilBertForMaskedLM"),B1o=o(" (DistilBERT model)"),P1o=l(),mb=a("li"),hne=a("strong"),$1o=o("electra"),I1o=o(" \u2014 "),FI=a("a"),q1o=o("ElectraForMaskedLM"),N1o=o(" (ELECTRA model)"),j1o=l(),fb=a("li"),une=a("strong"),D1o=o("flaubert"),G1o=o(" \u2014 "),vI=a("a"),O1o=o("FlaubertWithLMHeadModel"),V1o=o(" (FlauBERT model)"),X1o=l(),gb=a("li"),pne=a("strong"),z1o=o("fnet"),Q1o=o(" \u2014 "),TI=a("a"),W1o=o("FNetForMaskedLM"),H1o=o(" (FNet model)"),U1o=l(),hb=a("li"),_ne=a("strong"),J1o=o("funnel"),Y1o=o(" \u2014 "),MI=a("a"),K1o=o("FunnelForMaskedLM"),Z1o=o(" (Funnel Transformer model)"),eMo=l(),ub=a("li"),bne=a("strong"),oMo=o("ibert"),rMo=o(" \u2014 "),EI=a("a"),tMo=o("IBertForMaskedLM"),aMo=o(" (I-BERT model)"),nMo=l(),pb=a("li"),Fne=a("strong"),sMo=o("layoutlm"),lMo=o(" \u2014 "),CI=a("a"),iMo=o("LayoutLMForMaskedLM"),dMo=o(" (LayoutLM model)"),cMo=l(),_b=a("li"),vne=a("strong"),mMo=o("longformer"),fMo=o(" \u2014 "),wI=a("a"),gMo=o("LongformerForMaskedLM"),hMo=o(" (Longformer model)"),uMo=l(),bb=a("li"),Tne=a("strong"),pMo=o("mbart"),_Mo=o(" \u2014 "),AI=a("a"),bMo=o("MBartForConditionalGeneration"),FMo=o(" (mBART model)"),vMo=l(),Fb=a("li"),Mne=a("strong"),TMo=o("megatron-bert"),MMo=o(" \u2014 "),yI=a("a"),EMo=o("MegatronBertForMaskedLM"),CMo=o(" (MegatronBert model)"),wMo=l(),vb=a("li"),Ene=a("strong"),AMo=o("mobilebert"),yMo=o(" \u2014 "),LI=a("a"),LMo=o("MobileBertForMaskedLM"),xMo=o(" (MobileBERT model)"),kMo=l(),Tb=a("li"),Cne=a("strong"),SMo=o("mpnet"),RMo=o(" \u2014 "),xI=a("a"),BMo=o("MPNetForMaskedLM"),PMo=o(" (MPNet model)"),$Mo=l(),Mb=a("li"),wne=a("strong"),IMo=o("nystromformer"),qMo=o(" \u2014 "),kI=a("a"),NMo=o("NystromformerForMaskedLM"),jMo=o(" (Nystromformer model)"),DMo=l(),Eb=a("li"),Ane=a("strong"),GMo=o("perceiver"),OMo=o(" \u2014 "),SI=a("a"),VMo=o("PerceiverForMaskedLM"),XMo=o(" (Perceiver model)"),zMo=l(),Cb=a("li"),yne=a("strong"),QMo=o("qdqbert"),WMo=o(" \u2014 "),RI=a("a"),HMo=o("QDQBertForMaskedLM"),UMo=o(" (QDQBert model)"),JMo=l(),wb=a("li"),Lne=a("strong"),YMo=o("reformer"),KMo=o(" \u2014 "),BI=a("a"),ZMo=o("ReformerForMaskedLM"),e4o=o(" (Reformer model)"),o4o=l(),Ab=a("li"),xne=a("strong"),r4o=o("rembert"),t4o=o(" \u2014 "),PI=a("a"),a4o=o("RemBertForMaskedLM"),n4o=o(" (RemBERT model)"),s4o=l(),yb=a("li"),kne=a("strong"),l4o=o("roberta"),i4o=o(" \u2014 "),$I=a("a"),d4o=o("RobertaForMaskedLM"),c4o=o(" (RoBERTa model)"),m4o=l(),Lb=a("li"),Sne=a("strong"),f4o=o("roformer"),g4o=o(" \u2014 "),II=a("a"),h4o=o("RoFormerForMaskedLM"),u4o=o(" (RoFormer model)"),p4o=l(),xb=a("li"),Rne=a("strong"),_4o=o("squeezebert"),b4o=o(" \u2014 "),qI=a("a"),F4o=o("SqueezeBertForMaskedLM"),v4o=o(" (SqueezeBERT model)"),T4o=l(),kb=a("li"),Bne=a("strong"),M4o=o("tapas"),E4o=o(" \u2014 "),NI=a("a"),C4o=o("TapasForMaskedLM"),w4o=o(" (TAPAS model)"),A4o=l(),Sb=a("li"),Pne=a("strong"),y4o=o("wav2vec2"),L4o=o(" \u2014 "),$ne=a("code"),x4o=o("Wav2Vec2ForMaskedLM"),k4o=o("(Wav2Vec2 model)"),S4o=l(),Rb=a("li"),Ine=a("strong"),R4o=o("xlm"),B4o=o(" \u2014 "),jI=a("a"),P4o=o("XLMWithLMHeadModel"),$4o=o(" (XLM model)"),I4o=l(),Bb=a("li"),qne=a("strong"),q4o=o("xlm-roberta"),N4o=o(" \u2014 "),DI=a("a"),j4o=o("XLMRobertaForMaskedLM"),D4o=o(" (XLM-RoBERTa model)"),G4o=l(),Pb=a("li"),Nne=a("strong"),O4o=o("xlm-roberta-xl"),V4o=o(" \u2014 "),GI=a("a"),X4o=o("XLMRobertaXLForMaskedLM"),z4o=o(" (XLM-RoBERTa-XL model)"),Q4o=l(),$b=a("li"),jne=a("strong"),W4o=o("yoso"),H4o=o(" \u2014 "),OI=a("a"),U4o=o("YosoForMaskedLM"),J4o=o(" (YOSO model)"),Y4o=l(),Ib=a("p"),K4o=o("The model is set in evaluation mode by default using "),Dne=a("code"),Z4o=o("model.eval()"),eEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gne=a("code"),oEo=o("model.train()"),rEo=l(),One=a("p"),tEo=o("Examples:"),aEo=l(),m(vA.$$.fragment),JSe=l(),id=a("h2"),qb=a("a"),Vne=a("span"),m(TA.$$.fragment),nEo=l(),Xne=a("span"),sEo=o("AutoModelForSeq2SeqLM"),YSe=l(),er=a("div"),m(MA.$$.fragment),lEo=l(),dd=a("p"),iEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VI=a("a"),dEo=o("from_pretrained()"),cEo=o(" class method or the "),XI=a("a"),mEo=o("from_config()"),fEo=o(` class
method.`),gEo=l(),EA=a("p"),hEo=o("This class cannot be instantiated directly using "),zne=a("code"),uEo=o("__init__()"),pEo=o(" (throws an error)."),_Eo=l(),Hr=a("div"),m(CA.$$.fragment),bEo=l(),Qne=a("p"),FEo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vEo=l(),cd=a("p"),TEo=o(`Note:
Loading a model from its configuration file does `),Wne=a("strong"),MEo=o("not"),EEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zI=a("a"),CEo=o("from_pretrained()"),wEo=o(" to load the model weights."),AEo=l(),Hne=a("p"),yEo=o("Examples:"),LEo=l(),m(wA.$$.fragment),xEo=l(),Ge=a("div"),m(AA.$$.fragment),kEo=l(),Une=a("p"),SEo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),REo=l(),Ha=a("p"),BEo=o("The model class to instantiate is selected based on the "),Jne=a("code"),PEo=o("model_type"),$Eo=o(` property of the config object (either
passed as an argument or loaded from `),Yne=a("code"),IEo=o("pretrained_model_name_or_path"),qEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=a("code"),NEo=o("pretrained_model_name_or_path"),jEo=o(":"),DEo=l(),se=a("ul"),Nb=a("li"),Zne=a("strong"),GEo=o("bart"),OEo=o(" \u2014 "),QI=a("a"),VEo=o("BartForConditionalGeneration"),XEo=o(" (BART model)"),zEo=l(),jb=a("li"),ese=a("strong"),QEo=o("bigbird_pegasus"),WEo=o(" \u2014 "),WI=a("a"),HEo=o("BigBirdPegasusForConditionalGeneration"),UEo=o(" (BigBirdPegasus model)"),JEo=l(),Db=a("li"),ose=a("strong"),YEo=o("blenderbot"),KEo=o(" \u2014 "),HI=a("a"),ZEo=o("BlenderbotForConditionalGeneration"),eCo=o(" (Blenderbot model)"),oCo=l(),Gb=a("li"),rse=a("strong"),rCo=o("blenderbot-small"),tCo=o(" \u2014 "),UI=a("a"),aCo=o("BlenderbotSmallForConditionalGeneration"),nCo=o(" (BlenderbotSmall model)"),sCo=l(),Ob=a("li"),tse=a("strong"),lCo=o("encoder-decoder"),iCo=o(" \u2014 "),JI=a("a"),dCo=o("EncoderDecoderModel"),cCo=o(" (Encoder decoder model)"),mCo=l(),Vb=a("li"),ase=a("strong"),fCo=o("fsmt"),gCo=o(" \u2014 "),YI=a("a"),hCo=o("FSMTForConditionalGeneration"),uCo=o(" (FairSeq Machine-Translation model)"),pCo=l(),Xb=a("li"),nse=a("strong"),_Co=o("led"),bCo=o(" \u2014 "),KI=a("a"),FCo=o("LEDForConditionalGeneration"),vCo=o(" (LED model)"),TCo=l(),zb=a("li"),sse=a("strong"),MCo=o("m2m_100"),ECo=o(" \u2014 "),ZI=a("a"),CCo=o("M2M100ForConditionalGeneration"),wCo=o(" (M2M100 model)"),ACo=l(),Qb=a("li"),lse=a("strong"),yCo=o("marian"),LCo=o(" \u2014 "),eq=a("a"),xCo=o("MarianMTModel"),kCo=o(" (Marian model)"),SCo=l(),Wb=a("li"),ise=a("strong"),RCo=o("mbart"),BCo=o(" \u2014 "),oq=a("a"),PCo=o("MBartForConditionalGeneration"),$Co=o(" (mBART model)"),ICo=l(),Hb=a("li"),dse=a("strong"),qCo=o("mt5"),NCo=o(" \u2014 "),rq=a("a"),jCo=o("MT5ForConditionalGeneration"),DCo=o(" (mT5 model)"),GCo=l(),Ub=a("li"),cse=a("strong"),OCo=o("pegasus"),VCo=o(" \u2014 "),tq=a("a"),XCo=o("PegasusForConditionalGeneration"),zCo=o(" (Pegasus model)"),QCo=l(),Jb=a("li"),mse=a("strong"),WCo=o("plbart"),HCo=o(" \u2014 "),aq=a("a"),UCo=o("PLBartForConditionalGeneration"),JCo=o(" (PLBart model)"),YCo=l(),Yb=a("li"),fse=a("strong"),KCo=o("prophetnet"),ZCo=o(" \u2014 "),nq=a("a"),e5o=o("ProphetNetForConditionalGeneration"),o5o=o(" (ProphetNet model)"),r5o=l(),Kb=a("li"),gse=a("strong"),t5o=o("t5"),a5o=o(" \u2014 "),sq=a("a"),n5o=o("T5ForConditionalGeneration"),s5o=o(" (T5 model)"),l5o=l(),Zb=a("li"),hse=a("strong"),i5o=o("xlm-prophetnet"),d5o=o(" \u2014 "),lq=a("a"),c5o=o("XLMProphetNetForConditionalGeneration"),m5o=o(" (XLMProphetNet model)"),f5o=l(),e2=a("p"),g5o=o("The model is set in evaluation mode by default using "),use=a("code"),h5o=o("model.eval()"),u5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pse=a("code"),p5o=o("model.train()"),_5o=l(),_se=a("p"),b5o=o("Examples:"),F5o=l(),m(yA.$$.fragment),KSe=l(),md=a("h2"),o2=a("a"),bse=a("span"),m(LA.$$.fragment),v5o=l(),Fse=a("span"),T5o=o("AutoModelForSequenceClassification"),ZSe=l(),or=a("div"),m(xA.$$.fragment),M5o=l(),fd=a("p"),E5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iq=a("a"),C5o=o("from_pretrained()"),w5o=o(" class method or the "),dq=a("a"),A5o=o("from_config()"),y5o=o(` class
method.`),L5o=l(),kA=a("p"),x5o=o("This class cannot be instantiated directly using "),vse=a("code"),k5o=o("__init__()"),S5o=o(" (throws an error)."),R5o=l(),Ur=a("div"),m(SA.$$.fragment),B5o=l(),Tse=a("p"),P5o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$5o=l(),gd=a("p"),I5o=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),q5o=o("not"),N5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cq=a("a"),j5o=o("from_pretrained()"),D5o=o(" to load the model weights."),G5o=l(),Ese=a("p"),O5o=o("Examples:"),V5o=l(),m(RA.$$.fragment),X5o=l(),Oe=a("div"),m(BA.$$.fragment),z5o=l(),Cse=a("p"),Q5o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),W5o=l(),Ua=a("p"),H5o=o("The model class to instantiate is selected based on the "),wse=a("code"),U5o=o("model_type"),J5o=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),Y5o=o("pretrained_model_name_or_path"),K5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=a("code"),Z5o=o("pretrained_model_name_or_path"),e3o=o(":"),o3o=l(),y=a("ul"),r2=a("li"),Lse=a("strong"),r3o=o("albert"),t3o=o(" \u2014 "),mq=a("a"),a3o=o("AlbertForSequenceClassification"),n3o=o(" (ALBERT model)"),s3o=l(),t2=a("li"),xse=a("strong"),l3o=o("bart"),i3o=o(" \u2014 "),fq=a("a"),d3o=o("BartForSequenceClassification"),c3o=o(" (BART model)"),m3o=l(),a2=a("li"),kse=a("strong"),f3o=o("bert"),g3o=o(" \u2014 "),gq=a("a"),h3o=o("BertForSequenceClassification"),u3o=o(" (BERT model)"),p3o=l(),n2=a("li"),Sse=a("strong"),_3o=o("big_bird"),b3o=o(" \u2014 "),hq=a("a"),F3o=o("BigBirdForSequenceClassification"),v3o=o(" (BigBird model)"),T3o=l(),s2=a("li"),Rse=a("strong"),M3o=o("bigbird_pegasus"),E3o=o(" \u2014 "),uq=a("a"),C3o=o("BigBirdPegasusForSequenceClassification"),w3o=o(" (BigBirdPegasus model)"),A3o=l(),l2=a("li"),Bse=a("strong"),y3o=o("camembert"),L3o=o(" \u2014 "),pq=a("a"),x3o=o("CamembertForSequenceClassification"),k3o=o(" (CamemBERT model)"),S3o=l(),i2=a("li"),Pse=a("strong"),R3o=o("canine"),B3o=o(" \u2014 "),_q=a("a"),P3o=o("CanineForSequenceClassification"),$3o=o(" (Canine model)"),I3o=l(),d2=a("li"),$se=a("strong"),q3o=o("convbert"),N3o=o(" \u2014 "),bq=a("a"),j3o=o("ConvBertForSequenceClassification"),D3o=o(" (ConvBERT model)"),G3o=l(),c2=a("li"),Ise=a("strong"),O3o=o("ctrl"),V3o=o(" \u2014 "),Fq=a("a"),X3o=o("CTRLForSequenceClassification"),z3o=o(" (CTRL model)"),Q3o=l(),m2=a("li"),qse=a("strong"),W3o=o("data2vec-text"),H3o=o(" \u2014 "),vq=a("a"),U3o=o("Data2VecTextForSequenceClassification"),J3o=o(" (Data2VecText model)"),Y3o=l(),f2=a("li"),Nse=a("strong"),K3o=o("deberta"),Z3o=o(" \u2014 "),Tq=a("a"),ewo=o("DebertaForSequenceClassification"),owo=o(" (DeBERTa model)"),rwo=l(),g2=a("li"),jse=a("strong"),two=o("deberta-v2"),awo=o(" \u2014 "),Mq=a("a"),nwo=o("DebertaV2ForSequenceClassification"),swo=o(" (DeBERTa-v2 model)"),lwo=l(),h2=a("li"),Dse=a("strong"),iwo=o("distilbert"),dwo=o(" \u2014 "),Eq=a("a"),cwo=o("DistilBertForSequenceClassification"),mwo=o(" (DistilBERT model)"),fwo=l(),u2=a("li"),Gse=a("strong"),gwo=o("electra"),hwo=o(" \u2014 "),Cq=a("a"),uwo=o("ElectraForSequenceClassification"),pwo=o(" (ELECTRA model)"),_wo=l(),p2=a("li"),Ose=a("strong"),bwo=o("flaubert"),Fwo=o(" \u2014 "),wq=a("a"),vwo=o("FlaubertForSequenceClassification"),Two=o(" (FlauBERT model)"),Mwo=l(),_2=a("li"),Vse=a("strong"),Ewo=o("fnet"),Cwo=o(" \u2014 "),Aq=a("a"),wwo=o("FNetForSequenceClassification"),Awo=o(" (FNet model)"),ywo=l(),b2=a("li"),Xse=a("strong"),Lwo=o("funnel"),xwo=o(" \u2014 "),yq=a("a"),kwo=o("FunnelForSequenceClassification"),Swo=o(" (Funnel Transformer model)"),Rwo=l(),F2=a("li"),zse=a("strong"),Bwo=o("gpt2"),Pwo=o(" \u2014 "),Lq=a("a"),$wo=o("GPT2ForSequenceClassification"),Iwo=o(" (OpenAI GPT-2 model)"),qwo=l(),v2=a("li"),Qse=a("strong"),Nwo=o("gpt_neo"),jwo=o(" \u2014 "),xq=a("a"),Dwo=o("GPTNeoForSequenceClassification"),Gwo=o(" (GPT Neo model)"),Owo=l(),T2=a("li"),Wse=a("strong"),Vwo=o("gptj"),Xwo=o(" \u2014 "),kq=a("a"),zwo=o("GPTJForSequenceClassification"),Qwo=o(" (GPT-J model)"),Wwo=l(),M2=a("li"),Hse=a("strong"),Hwo=o("ibert"),Uwo=o(" \u2014 "),Sq=a("a"),Jwo=o("IBertForSequenceClassification"),Ywo=o(" (I-BERT model)"),Kwo=l(),E2=a("li"),Use=a("strong"),Zwo=o("layoutlm"),eAo=o(" \u2014 "),Rq=a("a"),oAo=o("LayoutLMForSequenceClassification"),rAo=o(" (LayoutLM model)"),tAo=l(),C2=a("li"),Jse=a("strong"),aAo=o("layoutlmv2"),nAo=o(" \u2014 "),Bq=a("a"),sAo=o("LayoutLMv2ForSequenceClassification"),lAo=o(" (LayoutLMv2 model)"),iAo=l(),w2=a("li"),Yse=a("strong"),dAo=o("led"),cAo=o(" \u2014 "),Pq=a("a"),mAo=o("LEDForSequenceClassification"),fAo=o(" (LED model)"),gAo=l(),A2=a("li"),Kse=a("strong"),hAo=o("longformer"),uAo=o(" \u2014 "),$q=a("a"),pAo=o("LongformerForSequenceClassification"),_Ao=o(" (Longformer model)"),bAo=l(),y2=a("li"),Zse=a("strong"),FAo=o("mbart"),vAo=o(" \u2014 "),Iq=a("a"),TAo=o("MBartForSequenceClassification"),MAo=o(" (mBART model)"),EAo=l(),L2=a("li"),ele=a("strong"),CAo=o("megatron-bert"),wAo=o(" \u2014 "),qq=a("a"),AAo=o("MegatronBertForSequenceClassification"),yAo=o(" (MegatronBert model)"),LAo=l(),x2=a("li"),ole=a("strong"),xAo=o("mobilebert"),kAo=o(" \u2014 "),Nq=a("a"),SAo=o("MobileBertForSequenceClassification"),RAo=o(" (MobileBERT model)"),BAo=l(),k2=a("li"),rle=a("strong"),PAo=o("mpnet"),$Ao=o(" \u2014 "),jq=a("a"),IAo=o("MPNetForSequenceClassification"),qAo=o(" (MPNet model)"),NAo=l(),S2=a("li"),tle=a("strong"),jAo=o("nystromformer"),DAo=o(" \u2014 "),Dq=a("a"),GAo=o("NystromformerForSequenceClassification"),OAo=o(" (Nystromformer model)"),VAo=l(),R2=a("li"),ale=a("strong"),XAo=o("openai-gpt"),zAo=o(" \u2014 "),Gq=a("a"),QAo=o("OpenAIGPTForSequenceClassification"),WAo=o(" (OpenAI GPT model)"),HAo=l(),B2=a("li"),nle=a("strong"),UAo=o("perceiver"),JAo=o(" \u2014 "),Oq=a("a"),YAo=o("PerceiverForSequenceClassification"),KAo=o(" (Perceiver model)"),ZAo=l(),P2=a("li"),sle=a("strong"),e6o=o("plbart"),o6o=o(" \u2014 "),Vq=a("a"),r6o=o("PLBartForSequenceClassification"),t6o=o(" (PLBart model)"),a6o=l(),$2=a("li"),lle=a("strong"),n6o=o("qdqbert"),s6o=o(" \u2014 "),Xq=a("a"),l6o=o("QDQBertForSequenceClassification"),i6o=o(" (QDQBert model)"),d6o=l(),I2=a("li"),ile=a("strong"),c6o=o("reformer"),m6o=o(" \u2014 "),zq=a("a"),f6o=o("ReformerForSequenceClassification"),g6o=o(" (Reformer model)"),h6o=l(),q2=a("li"),dle=a("strong"),u6o=o("rembert"),p6o=o(" \u2014 "),Qq=a("a"),_6o=o("RemBertForSequenceClassification"),b6o=o(" (RemBERT model)"),F6o=l(),N2=a("li"),cle=a("strong"),v6o=o("roberta"),T6o=o(" \u2014 "),Wq=a("a"),M6o=o("RobertaForSequenceClassification"),E6o=o(" (RoBERTa model)"),C6o=l(),j2=a("li"),mle=a("strong"),w6o=o("roformer"),A6o=o(" \u2014 "),Hq=a("a"),y6o=o("RoFormerForSequenceClassification"),L6o=o(" (RoFormer model)"),x6o=l(),D2=a("li"),fle=a("strong"),k6o=o("squeezebert"),S6o=o(" \u2014 "),Uq=a("a"),R6o=o("SqueezeBertForSequenceClassification"),B6o=o(" (SqueezeBERT model)"),P6o=l(),G2=a("li"),gle=a("strong"),$6o=o("tapas"),I6o=o(" \u2014 "),Jq=a("a"),q6o=o("TapasForSequenceClassification"),N6o=o(" (TAPAS model)"),j6o=l(),O2=a("li"),hle=a("strong"),D6o=o("transfo-xl"),G6o=o(" \u2014 "),Yq=a("a"),O6o=o("TransfoXLForSequenceClassification"),V6o=o(" (Transformer-XL model)"),X6o=l(),V2=a("li"),ule=a("strong"),z6o=o("xlm"),Q6o=o(" \u2014 "),Kq=a("a"),W6o=o("XLMForSequenceClassification"),H6o=o(" (XLM model)"),U6o=l(),X2=a("li"),ple=a("strong"),J6o=o("xlm-roberta"),Y6o=o(" \u2014 "),Zq=a("a"),K6o=o("XLMRobertaForSequenceClassification"),Z6o=o(" (XLM-RoBERTa model)"),e0o=l(),z2=a("li"),_le=a("strong"),o0o=o("xlm-roberta-xl"),r0o=o(" \u2014 "),eN=a("a"),t0o=o("XLMRobertaXLForSequenceClassification"),a0o=o(" (XLM-RoBERTa-XL model)"),n0o=l(),Q2=a("li"),ble=a("strong"),s0o=o("xlnet"),l0o=o(" \u2014 "),oN=a("a"),i0o=o("XLNetForSequenceClassification"),d0o=o(" (XLNet model)"),c0o=l(),W2=a("li"),Fle=a("strong"),m0o=o("yoso"),f0o=o(" \u2014 "),rN=a("a"),g0o=o("YosoForSequenceClassification"),h0o=o(" (YOSO model)"),u0o=l(),H2=a("p"),p0o=o("The model is set in evaluation mode by default using "),vle=a("code"),_0o=o("model.eval()"),b0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tle=a("code"),F0o=o("model.train()"),v0o=l(),Mle=a("p"),T0o=o("Examples:"),M0o=l(),m(PA.$$.fragment),eRe=l(),hd=a("h2"),U2=a("a"),Ele=a("span"),m($A.$$.fragment),E0o=l(),Cle=a("span"),C0o=o("AutoModelForMultipleChoice"),oRe=l(),rr=a("div"),m(IA.$$.fragment),w0o=l(),ud=a("p"),A0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tN=a("a"),y0o=o("from_pretrained()"),L0o=o(" class method or the "),aN=a("a"),x0o=o("from_config()"),k0o=o(` class
method.`),S0o=l(),qA=a("p"),R0o=o("This class cannot be instantiated directly using "),wle=a("code"),B0o=o("__init__()"),P0o=o(" (throws an error)."),$0o=l(),Jr=a("div"),m(NA.$$.fragment),I0o=l(),Ale=a("p"),q0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),N0o=l(),pd=a("p"),j0o=o(`Note:
Loading a model from its configuration file does `),yle=a("strong"),D0o=o("not"),G0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=a("a"),O0o=o("from_pretrained()"),V0o=o(" to load the model weights."),X0o=l(),Lle=a("p"),z0o=o("Examples:"),Q0o=l(),m(jA.$$.fragment),W0o=l(),Ve=a("div"),m(DA.$$.fragment),H0o=l(),xle=a("p"),U0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J0o=l(),Ja=a("p"),Y0o=o("The model class to instantiate is selected based on the "),kle=a("code"),K0o=o("model_type"),Z0o=o(` property of the config object (either
passed as an argument or loaded from `),Sle=a("code"),eyo=o("pretrained_model_name_or_path"),oyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=a("code"),ryo=o("pretrained_model_name_or_path"),tyo=o(":"),ayo=l(),G=a("ul"),J2=a("li"),Ble=a("strong"),nyo=o("albert"),syo=o(" \u2014 "),sN=a("a"),lyo=o("AlbertForMultipleChoice"),iyo=o(" (ALBERT model)"),dyo=l(),Y2=a("li"),Ple=a("strong"),cyo=o("bert"),myo=o(" \u2014 "),lN=a("a"),fyo=o("BertForMultipleChoice"),gyo=o(" (BERT model)"),hyo=l(),K2=a("li"),$le=a("strong"),uyo=o("big_bird"),pyo=o(" \u2014 "),iN=a("a"),_yo=o("BigBirdForMultipleChoice"),byo=o(" (BigBird model)"),Fyo=l(),Z2=a("li"),Ile=a("strong"),vyo=o("camembert"),Tyo=o(" \u2014 "),dN=a("a"),Myo=o("CamembertForMultipleChoice"),Eyo=o(" (CamemBERT model)"),Cyo=l(),eF=a("li"),qle=a("strong"),wyo=o("canine"),Ayo=o(" \u2014 "),cN=a("a"),yyo=o("CanineForMultipleChoice"),Lyo=o(" (Canine model)"),xyo=l(),oF=a("li"),Nle=a("strong"),kyo=o("convbert"),Syo=o(" \u2014 "),mN=a("a"),Ryo=o("ConvBertForMultipleChoice"),Byo=o(" (ConvBERT model)"),Pyo=l(),rF=a("li"),jle=a("strong"),$yo=o("data2vec-text"),Iyo=o(" \u2014 "),fN=a("a"),qyo=o("Data2VecTextForMultipleChoice"),Nyo=o(" (Data2VecText model)"),jyo=l(),tF=a("li"),Dle=a("strong"),Dyo=o("distilbert"),Gyo=o(" \u2014 "),gN=a("a"),Oyo=o("DistilBertForMultipleChoice"),Vyo=o(" (DistilBERT model)"),Xyo=l(),aF=a("li"),Gle=a("strong"),zyo=o("electra"),Qyo=o(" \u2014 "),hN=a("a"),Wyo=o("ElectraForMultipleChoice"),Hyo=o(" (ELECTRA model)"),Uyo=l(),nF=a("li"),Ole=a("strong"),Jyo=o("flaubert"),Yyo=o(" \u2014 "),uN=a("a"),Kyo=o("FlaubertForMultipleChoice"),Zyo=o(" (FlauBERT model)"),eLo=l(),sF=a("li"),Vle=a("strong"),oLo=o("fnet"),rLo=o(" \u2014 "),pN=a("a"),tLo=o("FNetForMultipleChoice"),aLo=o(" (FNet model)"),nLo=l(),lF=a("li"),Xle=a("strong"),sLo=o("funnel"),lLo=o(" \u2014 "),_N=a("a"),iLo=o("FunnelForMultipleChoice"),dLo=o(" (Funnel Transformer model)"),cLo=l(),iF=a("li"),zle=a("strong"),mLo=o("ibert"),fLo=o(" \u2014 "),bN=a("a"),gLo=o("IBertForMultipleChoice"),hLo=o(" (I-BERT model)"),uLo=l(),dF=a("li"),Qle=a("strong"),pLo=o("longformer"),_Lo=o(" \u2014 "),FN=a("a"),bLo=o("LongformerForMultipleChoice"),FLo=o(" (Longformer model)"),vLo=l(),cF=a("li"),Wle=a("strong"),TLo=o("megatron-bert"),MLo=o(" \u2014 "),vN=a("a"),ELo=o("MegatronBertForMultipleChoice"),CLo=o(" (MegatronBert model)"),wLo=l(),mF=a("li"),Hle=a("strong"),ALo=o("mobilebert"),yLo=o(" \u2014 "),TN=a("a"),LLo=o("MobileBertForMultipleChoice"),xLo=o(" (MobileBERT model)"),kLo=l(),fF=a("li"),Ule=a("strong"),SLo=o("mpnet"),RLo=o(" \u2014 "),MN=a("a"),BLo=o("MPNetForMultipleChoice"),PLo=o(" (MPNet model)"),$Lo=l(),gF=a("li"),Jle=a("strong"),ILo=o("nystromformer"),qLo=o(" \u2014 "),EN=a("a"),NLo=o("NystromformerForMultipleChoice"),jLo=o(" (Nystromformer model)"),DLo=l(),hF=a("li"),Yle=a("strong"),GLo=o("qdqbert"),OLo=o(" \u2014 "),CN=a("a"),VLo=o("QDQBertForMultipleChoice"),XLo=o(" (QDQBert model)"),zLo=l(),uF=a("li"),Kle=a("strong"),QLo=o("rembert"),WLo=o(" \u2014 "),wN=a("a"),HLo=o("RemBertForMultipleChoice"),ULo=o(" (RemBERT model)"),JLo=l(),pF=a("li"),Zle=a("strong"),YLo=o("roberta"),KLo=o(" \u2014 "),AN=a("a"),ZLo=o("RobertaForMultipleChoice"),e7o=o(" (RoBERTa model)"),o7o=l(),_F=a("li"),eie=a("strong"),r7o=o("roformer"),t7o=o(" \u2014 "),yN=a("a"),a7o=o("RoFormerForMultipleChoice"),n7o=o(" (RoFormer model)"),s7o=l(),bF=a("li"),oie=a("strong"),l7o=o("squeezebert"),i7o=o(" \u2014 "),LN=a("a"),d7o=o("SqueezeBertForMultipleChoice"),c7o=o(" (SqueezeBERT model)"),m7o=l(),FF=a("li"),rie=a("strong"),f7o=o("xlm"),g7o=o(" \u2014 "),xN=a("a"),h7o=o("XLMForMultipleChoice"),u7o=o(" (XLM model)"),p7o=l(),vF=a("li"),tie=a("strong"),_7o=o("xlm-roberta"),b7o=o(" \u2014 "),kN=a("a"),F7o=o("XLMRobertaForMultipleChoice"),v7o=o(" (XLM-RoBERTa model)"),T7o=l(),TF=a("li"),aie=a("strong"),M7o=o("xlm-roberta-xl"),E7o=o(" \u2014 "),SN=a("a"),C7o=o("XLMRobertaXLForMultipleChoice"),w7o=o(" (XLM-RoBERTa-XL model)"),A7o=l(),MF=a("li"),nie=a("strong"),y7o=o("xlnet"),L7o=o(" \u2014 "),RN=a("a"),x7o=o("XLNetForMultipleChoice"),k7o=o(" (XLNet model)"),S7o=l(),EF=a("li"),sie=a("strong"),R7o=o("yoso"),B7o=o(" \u2014 "),BN=a("a"),P7o=o("YosoForMultipleChoice"),$7o=o(" (YOSO model)"),I7o=l(),CF=a("p"),q7o=o("The model is set in evaluation mode by default using "),lie=a("code"),N7o=o("model.eval()"),j7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=a("code"),D7o=o("model.train()"),G7o=l(),die=a("p"),O7o=o("Examples:"),V7o=l(),m(GA.$$.fragment),rRe=l(),_d=a("h2"),wF=a("a"),cie=a("span"),m(OA.$$.fragment),X7o=l(),mie=a("span"),z7o=o("AutoModelForNextSentencePrediction"),tRe=l(),tr=a("div"),m(VA.$$.fragment),Q7o=l(),bd=a("p"),W7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PN=a("a"),H7o=o("from_pretrained()"),U7o=o(" class method or the "),$N=a("a"),J7o=o("from_config()"),Y7o=o(` class
method.`),K7o=l(),XA=a("p"),Z7o=o("This class cannot be instantiated directly using "),fie=a("code"),e8o=o("__init__()"),o8o=o(" (throws an error)."),r8o=l(),Yr=a("div"),m(zA.$$.fragment),t8o=l(),gie=a("p"),a8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n8o=l(),Fd=a("p"),s8o=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),l8o=o("not"),i8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IN=a("a"),d8o=o("from_pretrained()"),c8o=o(" to load the model weights."),m8o=l(),uie=a("p"),f8o=o("Examples:"),g8o=l(),m(QA.$$.fragment),h8o=l(),Xe=a("div"),m(WA.$$.fragment),u8o=l(),pie=a("p"),p8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_8o=l(),Ya=a("p"),b8o=o("The model class to instantiate is selected based on the "),_ie=a("code"),F8o=o("model_type"),v8o=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),T8o=o("pretrained_model_name_or_path"),M8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=a("code"),E8o=o("pretrained_model_name_or_path"),C8o=o(":"),w8o=l(),da=a("ul"),AF=a("li"),vie=a("strong"),A8o=o("bert"),y8o=o(" \u2014 "),qN=a("a"),L8o=o("BertForNextSentencePrediction"),x8o=o(" (BERT model)"),k8o=l(),yF=a("li"),Tie=a("strong"),S8o=o("fnet"),R8o=o(" \u2014 "),NN=a("a"),B8o=o("FNetForNextSentencePrediction"),P8o=o(" (FNet model)"),$8o=l(),LF=a("li"),Mie=a("strong"),I8o=o("megatron-bert"),q8o=o(" \u2014 "),jN=a("a"),N8o=o("MegatronBertForNextSentencePrediction"),j8o=o(" (MegatronBert model)"),D8o=l(),xF=a("li"),Eie=a("strong"),G8o=o("mobilebert"),O8o=o(" \u2014 "),DN=a("a"),V8o=o("MobileBertForNextSentencePrediction"),X8o=o(" (MobileBERT model)"),z8o=l(),kF=a("li"),Cie=a("strong"),Q8o=o("qdqbert"),W8o=o(" \u2014 "),GN=a("a"),H8o=o("QDQBertForNextSentencePrediction"),U8o=o(" (QDQBert model)"),J8o=l(),SF=a("p"),Y8o=o("The model is set in evaluation mode by default using "),wie=a("code"),K8o=o("model.eval()"),Z8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),e9o=o("model.train()"),o9o=l(),yie=a("p"),r9o=o("Examples:"),t9o=l(),m(HA.$$.fragment),aRe=l(),vd=a("h2"),RF=a("a"),Lie=a("span"),m(UA.$$.fragment),a9o=l(),xie=a("span"),n9o=o("AutoModelForTokenClassification"),nRe=l(),ar=a("div"),m(JA.$$.fragment),s9o=l(),Td=a("p"),l9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ON=a("a"),i9o=o("from_pretrained()"),d9o=o(" class method or the "),VN=a("a"),c9o=o("from_config()"),m9o=o(` class
method.`),f9o=l(),YA=a("p"),g9o=o("This class cannot be instantiated directly using "),kie=a("code"),h9o=o("__init__()"),u9o=o(" (throws an error)."),p9o=l(),Kr=a("div"),m(KA.$$.fragment),_9o=l(),Sie=a("p"),b9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),F9o=l(),Md=a("p"),v9o=o(`Note:
Loading a model from its configuration file does `),Rie=a("strong"),T9o=o("not"),M9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),E9o=o("from_pretrained()"),C9o=o(" to load the model weights."),w9o=l(),Bie=a("p"),A9o=o("Examples:"),y9o=l(),m(ZA.$$.fragment),L9o=l(),ze=a("div"),m(e6.$$.fragment),x9o=l(),Pie=a("p"),k9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),S9o=l(),Ka=a("p"),R9o=o("The model class to instantiate is selected based on the "),$ie=a("code"),B9o=o("model_type"),P9o=o(` property of the config object (either
passed as an argument or loaded from `),Iie=a("code"),$9o=o("pretrained_model_name_or_path"),I9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),q9o=o("pretrained_model_name_or_path"),N9o=o(":"),j9o=l(),j=a("ul"),BF=a("li"),Nie=a("strong"),D9o=o("albert"),G9o=o(" \u2014 "),zN=a("a"),O9o=o("AlbertForTokenClassification"),V9o=o(" (ALBERT model)"),X9o=l(),PF=a("li"),jie=a("strong"),z9o=o("bert"),Q9o=o(" \u2014 "),QN=a("a"),W9o=o("BertForTokenClassification"),H9o=o(" (BERT model)"),U9o=l(),$F=a("li"),Die=a("strong"),J9o=o("big_bird"),Y9o=o(" \u2014 "),WN=a("a"),K9o=o("BigBirdForTokenClassification"),Z9o=o(" (BigBird model)"),exo=l(),IF=a("li"),Gie=a("strong"),oxo=o("camembert"),rxo=o(" \u2014 "),HN=a("a"),txo=o("CamembertForTokenClassification"),axo=o(" (CamemBERT model)"),nxo=l(),qF=a("li"),Oie=a("strong"),sxo=o("canine"),lxo=o(" \u2014 "),UN=a("a"),ixo=o("CanineForTokenClassification"),dxo=o(" (Canine model)"),cxo=l(),NF=a("li"),Vie=a("strong"),mxo=o("convbert"),fxo=o(" \u2014 "),JN=a("a"),gxo=o("ConvBertForTokenClassification"),hxo=o(" (ConvBERT model)"),uxo=l(),jF=a("li"),Xie=a("strong"),pxo=o("data2vec-text"),_xo=o(" \u2014 "),YN=a("a"),bxo=o("Data2VecTextForTokenClassification"),Fxo=o(" (Data2VecText model)"),vxo=l(),DF=a("li"),zie=a("strong"),Txo=o("deberta"),Mxo=o(" \u2014 "),KN=a("a"),Exo=o("DebertaForTokenClassification"),Cxo=o(" (DeBERTa model)"),wxo=l(),GF=a("li"),Qie=a("strong"),Axo=o("deberta-v2"),yxo=o(" \u2014 "),ZN=a("a"),Lxo=o("DebertaV2ForTokenClassification"),xxo=o(" (DeBERTa-v2 model)"),kxo=l(),OF=a("li"),Wie=a("strong"),Sxo=o("distilbert"),Rxo=o(" \u2014 "),ej=a("a"),Bxo=o("DistilBertForTokenClassification"),Pxo=o(" (DistilBERT model)"),$xo=l(),VF=a("li"),Hie=a("strong"),Ixo=o("electra"),qxo=o(" \u2014 "),oj=a("a"),Nxo=o("ElectraForTokenClassification"),jxo=o(" (ELECTRA model)"),Dxo=l(),XF=a("li"),Uie=a("strong"),Gxo=o("flaubert"),Oxo=o(" \u2014 "),rj=a("a"),Vxo=o("FlaubertForTokenClassification"),Xxo=o(" (FlauBERT model)"),zxo=l(),zF=a("li"),Jie=a("strong"),Qxo=o("fnet"),Wxo=o(" \u2014 "),tj=a("a"),Hxo=o("FNetForTokenClassification"),Uxo=o(" (FNet model)"),Jxo=l(),QF=a("li"),Yie=a("strong"),Yxo=o("funnel"),Kxo=o(" \u2014 "),aj=a("a"),Zxo=o("FunnelForTokenClassification"),eko=o(" (Funnel Transformer model)"),oko=l(),WF=a("li"),Kie=a("strong"),rko=o("gpt2"),tko=o(" \u2014 "),nj=a("a"),ako=o("GPT2ForTokenClassification"),nko=o(" (OpenAI GPT-2 model)"),sko=l(),HF=a("li"),Zie=a("strong"),lko=o("ibert"),iko=o(" \u2014 "),sj=a("a"),dko=o("IBertForTokenClassification"),cko=o(" (I-BERT model)"),mko=l(),UF=a("li"),ede=a("strong"),fko=o("layoutlm"),gko=o(" \u2014 "),lj=a("a"),hko=o("LayoutLMForTokenClassification"),uko=o(" (LayoutLM model)"),pko=l(),JF=a("li"),ode=a("strong"),_ko=o("layoutlmv2"),bko=o(" \u2014 "),ij=a("a"),Fko=o("LayoutLMv2ForTokenClassification"),vko=o(" (LayoutLMv2 model)"),Tko=l(),YF=a("li"),rde=a("strong"),Mko=o("longformer"),Eko=o(" \u2014 "),dj=a("a"),Cko=o("LongformerForTokenClassification"),wko=o(" (Longformer model)"),Ako=l(),KF=a("li"),tde=a("strong"),yko=o("megatron-bert"),Lko=o(" \u2014 "),cj=a("a"),xko=o("MegatronBertForTokenClassification"),kko=o(" (MegatronBert model)"),Sko=l(),ZF=a("li"),ade=a("strong"),Rko=o("mobilebert"),Bko=o(" \u2014 "),mj=a("a"),Pko=o("MobileBertForTokenClassification"),$ko=o(" (MobileBERT model)"),Iko=l(),ev=a("li"),nde=a("strong"),qko=o("mpnet"),Nko=o(" \u2014 "),fj=a("a"),jko=o("MPNetForTokenClassification"),Dko=o(" (MPNet model)"),Gko=l(),ov=a("li"),sde=a("strong"),Oko=o("nystromformer"),Vko=o(" \u2014 "),gj=a("a"),Xko=o("NystromformerForTokenClassification"),zko=o(" (Nystromformer model)"),Qko=l(),rv=a("li"),lde=a("strong"),Wko=o("qdqbert"),Hko=o(" \u2014 "),hj=a("a"),Uko=o("QDQBertForTokenClassification"),Jko=o(" (QDQBert model)"),Yko=l(),tv=a("li"),ide=a("strong"),Kko=o("rembert"),Zko=o(" \u2014 "),uj=a("a"),eSo=o("RemBertForTokenClassification"),oSo=o(" (RemBERT model)"),rSo=l(),av=a("li"),dde=a("strong"),tSo=o("roberta"),aSo=o(" \u2014 "),pj=a("a"),nSo=o("RobertaForTokenClassification"),sSo=o(" (RoBERTa model)"),lSo=l(),nv=a("li"),cde=a("strong"),iSo=o("roformer"),dSo=o(" \u2014 "),_j=a("a"),cSo=o("RoFormerForTokenClassification"),mSo=o(" (RoFormer model)"),fSo=l(),sv=a("li"),mde=a("strong"),gSo=o("squeezebert"),hSo=o(" \u2014 "),bj=a("a"),uSo=o("SqueezeBertForTokenClassification"),pSo=o(" (SqueezeBERT model)"),_So=l(),lv=a("li"),fde=a("strong"),bSo=o("xlm"),FSo=o(" \u2014 "),Fj=a("a"),vSo=o("XLMForTokenClassification"),TSo=o(" (XLM model)"),MSo=l(),iv=a("li"),gde=a("strong"),ESo=o("xlm-roberta"),CSo=o(" \u2014 "),vj=a("a"),wSo=o("XLMRobertaForTokenClassification"),ASo=o(" (XLM-RoBERTa model)"),ySo=l(),dv=a("li"),hde=a("strong"),LSo=o("xlm-roberta-xl"),xSo=o(" \u2014 "),Tj=a("a"),kSo=o("XLMRobertaXLForTokenClassification"),SSo=o(" (XLM-RoBERTa-XL model)"),RSo=l(),cv=a("li"),ude=a("strong"),BSo=o("xlnet"),PSo=o(" \u2014 "),Mj=a("a"),$So=o("XLNetForTokenClassification"),ISo=o(" (XLNet model)"),qSo=l(),mv=a("li"),pde=a("strong"),NSo=o("yoso"),jSo=o(" \u2014 "),Ej=a("a"),DSo=o("YosoForTokenClassification"),GSo=o(" (YOSO model)"),OSo=l(),fv=a("p"),VSo=o("The model is set in evaluation mode by default using "),_de=a("code"),XSo=o("model.eval()"),zSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=a("code"),QSo=o("model.train()"),WSo=l(),Fde=a("p"),HSo=o("Examples:"),USo=l(),m(o6.$$.fragment),sRe=l(),Ed=a("h2"),gv=a("a"),vde=a("span"),m(r6.$$.fragment),JSo=l(),Tde=a("span"),YSo=o("AutoModelForQuestionAnswering"),lRe=l(),nr=a("div"),m(t6.$$.fragment),KSo=l(),Cd=a("p"),ZSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cj=a("a"),eRo=o("from_pretrained()"),oRo=o(" class method or the "),wj=a("a"),rRo=o("from_config()"),tRo=o(` class
method.`),aRo=l(),a6=a("p"),nRo=o("This class cannot be instantiated directly using "),Mde=a("code"),sRo=o("__init__()"),lRo=o(" (throws an error)."),iRo=l(),Zr=a("div"),m(n6.$$.fragment),dRo=l(),Ede=a("p"),cRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mRo=l(),wd=a("p"),fRo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),gRo=o("not"),hRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=a("a"),uRo=o("from_pretrained()"),pRo=o(" to load the model weights."),_Ro=l(),wde=a("p"),bRo=o("Examples:"),FRo=l(),m(s6.$$.fragment),vRo=l(),Qe=a("div"),m(l6.$$.fragment),TRo=l(),Ade=a("p"),MRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ERo=l(),Za=a("p"),CRo=o("The model class to instantiate is selected based on the "),yde=a("code"),wRo=o("model_type"),ARo=o(` property of the config object (either
passed as an argument or loaded from `),Lde=a("code"),yRo=o("pretrained_model_name_or_path"),LRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=a("code"),xRo=o("pretrained_model_name_or_path"),kRo=o(":"),SRo=l(),R=a("ul"),hv=a("li"),kde=a("strong"),RRo=o("albert"),BRo=o(" \u2014 "),yj=a("a"),PRo=o("AlbertForQuestionAnswering"),$Ro=o(" (ALBERT model)"),IRo=l(),uv=a("li"),Sde=a("strong"),qRo=o("bart"),NRo=o(" \u2014 "),Lj=a("a"),jRo=o("BartForQuestionAnswering"),DRo=o(" (BART model)"),GRo=l(),pv=a("li"),Rde=a("strong"),ORo=o("bert"),VRo=o(" \u2014 "),xj=a("a"),XRo=o("BertForQuestionAnswering"),zRo=o(" (BERT model)"),QRo=l(),_v=a("li"),Bde=a("strong"),WRo=o("big_bird"),HRo=o(" \u2014 "),kj=a("a"),URo=o("BigBirdForQuestionAnswering"),JRo=o(" (BigBird model)"),YRo=l(),bv=a("li"),Pde=a("strong"),KRo=o("bigbird_pegasus"),ZRo=o(" \u2014 "),Sj=a("a"),eBo=o("BigBirdPegasusForQuestionAnswering"),oBo=o(" (BigBirdPegasus model)"),rBo=l(),Fv=a("li"),$de=a("strong"),tBo=o("camembert"),aBo=o(" \u2014 "),Rj=a("a"),nBo=o("CamembertForQuestionAnswering"),sBo=o(" (CamemBERT model)"),lBo=l(),vv=a("li"),Ide=a("strong"),iBo=o("canine"),dBo=o(" \u2014 "),Bj=a("a"),cBo=o("CanineForQuestionAnswering"),mBo=o(" (Canine model)"),fBo=l(),Tv=a("li"),qde=a("strong"),gBo=o("convbert"),hBo=o(" \u2014 "),Pj=a("a"),uBo=o("ConvBertForQuestionAnswering"),pBo=o(" (ConvBERT model)"),_Bo=l(),Mv=a("li"),Nde=a("strong"),bBo=o("data2vec-text"),FBo=o(" \u2014 "),$j=a("a"),vBo=o("Data2VecTextForQuestionAnswering"),TBo=o(" (Data2VecText model)"),MBo=l(),Ev=a("li"),jde=a("strong"),EBo=o("deberta"),CBo=o(" \u2014 "),Ij=a("a"),wBo=o("DebertaForQuestionAnswering"),ABo=o(" (DeBERTa model)"),yBo=l(),Cv=a("li"),Dde=a("strong"),LBo=o("deberta-v2"),xBo=o(" \u2014 "),qj=a("a"),kBo=o("DebertaV2ForQuestionAnswering"),SBo=o(" (DeBERTa-v2 model)"),RBo=l(),wv=a("li"),Gde=a("strong"),BBo=o("distilbert"),PBo=o(" \u2014 "),Nj=a("a"),$Bo=o("DistilBertForQuestionAnswering"),IBo=o(" (DistilBERT model)"),qBo=l(),Av=a("li"),Ode=a("strong"),NBo=o("electra"),jBo=o(" \u2014 "),jj=a("a"),DBo=o("ElectraForQuestionAnswering"),GBo=o(" (ELECTRA model)"),OBo=l(),yv=a("li"),Vde=a("strong"),VBo=o("flaubert"),XBo=o(" \u2014 "),Dj=a("a"),zBo=o("FlaubertForQuestionAnsweringSimple"),QBo=o(" (FlauBERT model)"),WBo=l(),Lv=a("li"),Xde=a("strong"),HBo=o("fnet"),UBo=o(" \u2014 "),Gj=a("a"),JBo=o("FNetForQuestionAnswering"),YBo=o(" (FNet model)"),KBo=l(),xv=a("li"),zde=a("strong"),ZBo=o("funnel"),ePo=o(" \u2014 "),Oj=a("a"),oPo=o("FunnelForQuestionAnswering"),rPo=o(" (Funnel Transformer model)"),tPo=l(),kv=a("li"),Qde=a("strong"),aPo=o("gptj"),nPo=o(" \u2014 "),Vj=a("a"),sPo=o("GPTJForQuestionAnswering"),lPo=o(" (GPT-J model)"),iPo=l(),Sv=a("li"),Wde=a("strong"),dPo=o("ibert"),cPo=o(" \u2014 "),Xj=a("a"),mPo=o("IBertForQuestionAnswering"),fPo=o(" (I-BERT model)"),gPo=l(),Rv=a("li"),Hde=a("strong"),hPo=o("layoutlmv2"),uPo=o(" \u2014 "),zj=a("a"),pPo=o("LayoutLMv2ForQuestionAnswering"),_Po=o(" (LayoutLMv2 model)"),bPo=l(),Bv=a("li"),Ude=a("strong"),FPo=o("led"),vPo=o(" \u2014 "),Qj=a("a"),TPo=o("LEDForQuestionAnswering"),MPo=o(" (LED model)"),EPo=l(),Pv=a("li"),Jde=a("strong"),CPo=o("longformer"),wPo=o(" \u2014 "),Wj=a("a"),APo=o("LongformerForQuestionAnswering"),yPo=o(" (Longformer model)"),LPo=l(),$v=a("li"),Yde=a("strong"),xPo=o("lxmert"),kPo=o(" \u2014 "),Hj=a("a"),SPo=o("LxmertForQuestionAnswering"),RPo=o(" (LXMERT model)"),BPo=l(),Iv=a("li"),Kde=a("strong"),PPo=o("mbart"),$Po=o(" \u2014 "),Uj=a("a"),IPo=o("MBartForQuestionAnswering"),qPo=o(" (mBART model)"),NPo=l(),qv=a("li"),Zde=a("strong"),jPo=o("megatron-bert"),DPo=o(" \u2014 "),Jj=a("a"),GPo=o("MegatronBertForQuestionAnswering"),OPo=o(" (MegatronBert model)"),VPo=l(),Nv=a("li"),ece=a("strong"),XPo=o("mobilebert"),zPo=o(" \u2014 "),Yj=a("a"),QPo=o("MobileBertForQuestionAnswering"),WPo=o(" (MobileBERT model)"),HPo=l(),jv=a("li"),oce=a("strong"),UPo=o("mpnet"),JPo=o(" \u2014 "),Kj=a("a"),YPo=o("MPNetForQuestionAnswering"),KPo=o(" (MPNet model)"),ZPo=l(),Dv=a("li"),rce=a("strong"),e$o=o("nystromformer"),o$o=o(" \u2014 "),Zj=a("a"),r$o=o("NystromformerForQuestionAnswering"),t$o=o(" (Nystromformer model)"),a$o=l(),Gv=a("li"),tce=a("strong"),n$o=o("qdqbert"),s$o=o(" \u2014 "),eD=a("a"),l$o=o("QDQBertForQuestionAnswering"),i$o=o(" (QDQBert model)"),d$o=l(),Ov=a("li"),ace=a("strong"),c$o=o("reformer"),m$o=o(" \u2014 "),oD=a("a"),f$o=o("ReformerForQuestionAnswering"),g$o=o(" (Reformer model)"),h$o=l(),Vv=a("li"),nce=a("strong"),u$o=o("rembert"),p$o=o(" \u2014 "),rD=a("a"),_$o=o("RemBertForQuestionAnswering"),b$o=o(" (RemBERT model)"),F$o=l(),Xv=a("li"),sce=a("strong"),v$o=o("roberta"),T$o=o(" \u2014 "),tD=a("a"),M$o=o("RobertaForQuestionAnswering"),E$o=o(" (RoBERTa model)"),C$o=l(),zv=a("li"),lce=a("strong"),w$o=o("roformer"),A$o=o(" \u2014 "),aD=a("a"),y$o=o("RoFormerForQuestionAnswering"),L$o=o(" (RoFormer model)"),x$o=l(),Qv=a("li"),ice=a("strong"),k$o=o("splinter"),S$o=o(" \u2014 "),nD=a("a"),R$o=o("SplinterForQuestionAnswering"),B$o=o(" (Splinter model)"),P$o=l(),Wv=a("li"),dce=a("strong"),$$o=o("squeezebert"),I$o=o(" \u2014 "),sD=a("a"),q$o=o("SqueezeBertForQuestionAnswering"),N$o=o(" (SqueezeBERT model)"),j$o=l(),Hv=a("li"),cce=a("strong"),D$o=o("xlm"),G$o=o(" \u2014 "),lD=a("a"),O$o=o("XLMForQuestionAnsweringSimple"),V$o=o(" (XLM model)"),X$o=l(),Uv=a("li"),mce=a("strong"),z$o=o("xlm-roberta"),Q$o=o(" \u2014 "),iD=a("a"),W$o=o("XLMRobertaForQuestionAnswering"),H$o=o(" (XLM-RoBERTa model)"),U$o=l(),Jv=a("li"),fce=a("strong"),J$o=o("xlm-roberta-xl"),Y$o=o(" \u2014 "),dD=a("a"),K$o=o("XLMRobertaXLForQuestionAnswering"),Z$o=o(" (XLM-RoBERTa-XL model)"),eIo=l(),Yv=a("li"),gce=a("strong"),oIo=o("xlnet"),rIo=o(" \u2014 "),cD=a("a"),tIo=o("XLNetForQuestionAnsweringSimple"),aIo=o(" (XLNet model)"),nIo=l(),Kv=a("li"),hce=a("strong"),sIo=o("yoso"),lIo=o(" \u2014 "),mD=a("a"),iIo=o("YosoForQuestionAnswering"),dIo=o(" (YOSO model)"),cIo=l(),Zv=a("p"),mIo=o("The model is set in evaluation mode by default using "),uce=a("code"),fIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),hIo=o("model.train()"),uIo=l(),_ce=a("p"),pIo=o("Examples:"),_Io=l(),m(i6.$$.fragment),iRe=l(),Ad=a("h2"),eT=a("a"),bce=a("span"),m(d6.$$.fragment),bIo=l(),Fce=a("span"),FIo=o("AutoModelForTableQuestionAnswering"),dRe=l(),sr=a("div"),m(c6.$$.fragment),vIo=l(),yd=a("p"),TIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fD=a("a"),MIo=o("from_pretrained()"),EIo=o(" class method or the "),gD=a("a"),CIo=o("from_config()"),wIo=o(` class
method.`),AIo=l(),m6=a("p"),yIo=o("This class cannot be instantiated directly using "),vce=a("code"),LIo=o("__init__()"),xIo=o(" (throws an error)."),kIo=l(),et=a("div"),m(f6.$$.fragment),SIo=l(),Tce=a("p"),RIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BIo=l(),Ld=a("p"),PIo=o(`Note:
Loading a model from its configuration file does `),Mce=a("strong"),$Io=o("not"),IIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=a("a"),qIo=o("from_pretrained()"),NIo=o(" to load the model weights."),jIo=l(),Ece=a("p"),DIo=o("Examples:"),GIo=l(),m(g6.$$.fragment),OIo=l(),We=a("div"),m(h6.$$.fragment),VIo=l(),Cce=a("p"),XIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zIo=l(),en=a("p"),QIo=o("The model class to instantiate is selected based on the "),wce=a("code"),WIo=o("model_type"),HIo=o(` property of the config object (either
passed as an argument or loaded from `),Ace=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(":"),ZIo=l(),Lce=a("ul"),oT=a("li"),xce=a("strong"),eqo=o("tapas"),oqo=o(" \u2014 "),uD=a("a"),rqo=o("TapasForQuestionAnswering"),tqo=o(" (TAPAS model)"),aqo=l(),rT=a("p"),nqo=o("The model is set in evaluation mode by default using "),kce=a("code"),sqo=o("model.eval()"),lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),iqo=o("model.train()"),dqo=l(),Rce=a("p"),cqo=o("Examples:"),mqo=l(),m(u6.$$.fragment),cRe=l(),xd=a("h2"),tT=a("a"),Bce=a("span"),m(p6.$$.fragment),fqo=l(),Pce=a("span"),gqo=o("AutoModelForImageClassification"),mRe=l(),lr=a("div"),m(_6.$$.fragment),hqo=l(),kd=a("p"),uqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pD=a("a"),pqo=o("from_pretrained()"),_qo=o(" class method or the "),_D=a("a"),bqo=o("from_config()"),Fqo=o(` class
method.`),vqo=l(),b6=a("p"),Tqo=o("This class cannot be instantiated directly using "),$ce=a("code"),Mqo=o("__init__()"),Eqo=o(" (throws an error)."),Cqo=l(),ot=a("div"),m(F6.$$.fragment),wqo=l(),Ice=a("p"),Aqo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yqo=l(),Sd=a("p"),Lqo=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),xqo=o("not"),kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" to load the model weights."),Bqo=l(),Nce=a("p"),Pqo=o("Examples:"),$qo=l(),m(v6.$$.fragment),Iqo=l(),He=a("div"),m(T6.$$.fragment),qqo=l(),jce=a("p"),Nqo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jqo=l(),on=a("p"),Dqo=o("The model class to instantiate is selected based on the "),Dce=a("code"),Gqo=o("model_type"),Oqo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),Vqo=o("pretrained_model_name_or_path"),Xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),zqo=o("pretrained_model_name_or_path"),Qqo=o(":"),Wqo=l(),ge=a("ul"),aT=a("li"),Vce=a("strong"),Hqo=o("beit"),Uqo=o(" \u2014 "),FD=a("a"),Jqo=o("BeitForImageClassification"),Yqo=o(" (BEiT model)"),Kqo=l(),nT=a("li"),Xce=a("strong"),Zqo=o("convnext"),eNo=o(" \u2014 "),vD=a("a"),oNo=o("ConvNextForImageClassification"),rNo=o(" (ConvNext model)"),tNo=l(),Ds=a("li"),zce=a("strong"),aNo=o("deit"),nNo=o(" \u2014 "),TD=a("a"),sNo=o("DeiTForImageClassification"),lNo=o(" or "),MD=a("a"),iNo=o("DeiTForImageClassificationWithTeacher"),dNo=o(" (DeiT model)"),cNo=l(),sT=a("li"),Qce=a("strong"),mNo=o("imagegpt"),fNo=o(" \u2014 "),ED=a("a"),gNo=o("ImageGPTForImageClassification"),hNo=o(" (ImageGPT model)"),uNo=l(),fa=a("li"),Wce=a("strong"),pNo=o("perceiver"),_No=o(" \u2014 "),CD=a("a"),bNo=o("PerceiverForImageClassificationLearned"),FNo=o(" or "),wD=a("a"),vNo=o("PerceiverForImageClassificationFourier"),TNo=o(" or "),AD=a("a"),MNo=o("PerceiverForImageClassificationConvProcessing"),ENo=o(" (Perceiver model)"),CNo=l(),lT=a("li"),Hce=a("strong"),wNo=o("poolformer"),ANo=o(" \u2014 "),yD=a("a"),yNo=o("PoolFormerForImageClassification"),LNo=o(" (PoolFormer model)"),xNo=l(),iT=a("li"),Uce=a("strong"),kNo=o("resnet"),SNo=o(" \u2014 "),LD=a("a"),RNo=o("ResNetForImageClassification"),BNo=o(" (ResNet model)"),PNo=l(),dT=a("li"),Jce=a("strong"),$No=o("segformer"),INo=o(" \u2014 "),xD=a("a"),qNo=o("SegformerForImageClassification"),NNo=o(" (SegFormer model)"),jNo=l(),cT=a("li"),Yce=a("strong"),DNo=o("swin"),GNo=o(" \u2014 "),kD=a("a"),ONo=o("SwinForImageClassification"),VNo=o(" (Swin model)"),XNo=l(),mT=a("li"),Kce=a("strong"),zNo=o("van"),QNo=o(" \u2014 "),SD=a("a"),WNo=o("VanForImageClassification"),HNo=o(" (VAN model)"),UNo=l(),fT=a("li"),Zce=a("strong"),JNo=o("vit"),YNo=o(" \u2014 "),RD=a("a"),KNo=o("ViTForImageClassification"),ZNo=o(" (ViT model)"),ejo=l(),gT=a("p"),ojo=o("The model is set in evaluation mode by default using "),eme=a("code"),rjo=o("model.eval()"),tjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),ajo=o("model.train()"),njo=l(),rme=a("p"),sjo=o("Examples:"),ljo=l(),m(M6.$$.fragment),fRe=l(),Rd=a("h2"),hT=a("a"),tme=a("span"),m(E6.$$.fragment),ijo=l(),ame=a("span"),djo=o("AutoModelForVision2Seq"),gRe=l(),ir=a("div"),m(C6.$$.fragment),cjo=l(),Bd=a("p"),mjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BD=a("a"),fjo=o("from_pretrained()"),gjo=o(" class method or the "),PD=a("a"),hjo=o("from_config()"),ujo=o(` class
method.`),pjo=l(),w6=a("p"),_jo=o("This class cannot be instantiated directly using "),nme=a("code"),bjo=o("__init__()"),Fjo=o(" (throws an error)."),vjo=l(),rt=a("div"),m(A6.$$.fragment),Tjo=l(),sme=a("p"),Mjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ejo=l(),Pd=a("p"),Cjo=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),wjo=o("not"),Ajo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),yjo=o("from_pretrained()"),Ljo=o(" to load the model weights."),xjo=l(),ime=a("p"),kjo=o("Examples:"),Sjo=l(),m(y6.$$.fragment),Rjo=l(),Ue=a("div"),m(L6.$$.fragment),Bjo=l(),dme=a("p"),Pjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$jo=l(),rn=a("p"),Ijo=o("The model class to instantiate is selected based on the "),cme=a("code"),qjo=o("model_type"),Njo=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),jjo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(":"),Vjo=l(),gme=a("ul"),uT=a("li"),hme=a("strong"),Xjo=o("vision-encoder-decoder"),zjo=o(" \u2014 "),ID=a("a"),Qjo=o("VisionEncoderDecoderModel"),Wjo=o(" (Vision Encoder decoder model)"),Hjo=l(),pT=a("p"),Ujo=o("The model is set in evaluation mode by default using "),ume=a("code"),Jjo=o("model.eval()"),Yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),Kjo=o("model.train()"),Zjo=l(),_me=a("p"),eDo=o("Examples:"),oDo=l(),m(x6.$$.fragment),hRe=l(),$d=a("h2"),_T=a("a"),bme=a("span"),m(k6.$$.fragment),rDo=l(),Fme=a("span"),tDo=o("AutoModelForAudioClassification"),uRe=l(),dr=a("div"),m(S6.$$.fragment),aDo=l(),Id=a("p"),nDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qD=a("a"),sDo=o("from_pretrained()"),lDo=o(" class method or the "),ND=a("a"),iDo=o("from_config()"),dDo=o(` class
method.`),cDo=l(),R6=a("p"),mDo=o("This class cannot be instantiated directly using "),vme=a("code"),fDo=o("__init__()"),gDo=o(" (throws an error)."),hDo=l(),tt=a("div"),m(B6.$$.fragment),uDo=l(),Tme=a("p"),pDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_Do=l(),qd=a("p"),bDo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),FDo=o("not"),vDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),TDo=o("from_pretrained()"),MDo=o(" to load the model weights."),EDo=l(),Eme=a("p"),CDo=o("Examples:"),wDo=l(),m(P6.$$.fragment),ADo=l(),Je=a("div"),m($6.$$.fragment),yDo=l(),Cme=a("p"),LDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xDo=l(),tn=a("p"),kDo=o("The model class to instantiate is selected based on the "),wme=a("code"),SDo=o("model_type"),RDo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),BDo=o("pretrained_model_name_or_path"),PDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),$Do=o("pretrained_model_name_or_path"),IDo=o(":"),qDo=l(),Se=a("ul"),bT=a("li"),Lme=a("strong"),NDo=o("data2vec-audio"),jDo=o(" \u2014 "),DD=a("a"),DDo=o("Data2VecAudioForSequenceClassification"),GDo=o(" (Data2VecAudio model)"),ODo=l(),FT=a("li"),xme=a("strong"),VDo=o("hubert"),XDo=o(" \u2014 "),GD=a("a"),zDo=o("HubertForSequenceClassification"),QDo=o(" (Hubert model)"),WDo=l(),vT=a("li"),kme=a("strong"),HDo=o("sew"),UDo=o(" \u2014 "),OD=a("a"),JDo=o("SEWForSequenceClassification"),YDo=o(" (SEW model)"),KDo=l(),TT=a("li"),Sme=a("strong"),ZDo=o("sew-d"),eGo=o(" \u2014 "),VD=a("a"),oGo=o("SEWDForSequenceClassification"),rGo=o(" (SEW-D model)"),tGo=l(),MT=a("li"),Rme=a("strong"),aGo=o("unispeech"),nGo=o(" \u2014 "),XD=a("a"),sGo=o("UniSpeechForSequenceClassification"),lGo=o(" (UniSpeech model)"),iGo=l(),ET=a("li"),Bme=a("strong"),dGo=o("unispeech-sat"),cGo=o(" \u2014 "),zD=a("a"),mGo=o("UniSpeechSatForSequenceClassification"),fGo=o(" (UniSpeechSat model)"),gGo=l(),CT=a("li"),Pme=a("strong"),hGo=o("wav2vec2"),uGo=o(" \u2014 "),QD=a("a"),pGo=o("Wav2Vec2ForSequenceClassification"),_Go=o(" (Wav2Vec2 model)"),bGo=l(),wT=a("li"),$me=a("strong"),FGo=o("wavlm"),vGo=o(" \u2014 "),WD=a("a"),TGo=o("WavLMForSequenceClassification"),MGo=o(" (WavLM model)"),EGo=l(),AT=a("p"),CGo=o("The model is set in evaluation mode by default using "),Ime=a("code"),wGo=o("model.eval()"),AGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=a("code"),yGo=o("model.train()"),LGo=l(),Nme=a("p"),xGo=o("Examples:"),kGo=l(),m(I6.$$.fragment),pRe=l(),Nd=a("h2"),yT=a("a"),jme=a("span"),m(q6.$$.fragment),SGo=l(),Dme=a("span"),RGo=o("AutoModelForAudioFrameClassification"),_Re=l(),cr=a("div"),m(N6.$$.fragment),BGo=l(),jd=a("p"),PGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HD=a("a"),$Go=o("from_pretrained()"),IGo=o(" class method or the "),UD=a("a"),qGo=o("from_config()"),NGo=o(` class
method.`),jGo=l(),j6=a("p"),DGo=o("This class cannot be instantiated directly using "),Gme=a("code"),GGo=o("__init__()"),OGo=o(" (throws an error)."),VGo=l(),at=a("div"),m(D6.$$.fragment),XGo=l(),Ome=a("p"),zGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QGo=l(),Dd=a("p"),WGo=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),HGo=o("not"),UGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=a("a"),JGo=o("from_pretrained()"),YGo=o(" to load the model weights."),KGo=l(),Xme=a("p"),ZGo=o("Examples:"),eOo=l(),m(G6.$$.fragment),oOo=l(),Ye=a("div"),m(O6.$$.fragment),rOo=l(),zme=a("p"),tOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),aOo=l(),an=a("p"),nOo=o("The model class to instantiate is selected based on the "),Qme=a("code"),sOo=o("model_type"),lOo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),iOo=o("pretrained_model_name_or_path"),dOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),cOo=o("pretrained_model_name_or_path"),mOo=o(":"),fOo=l(),nn=a("ul"),LT=a("li"),Ume=a("strong"),gOo=o("data2vec-audio"),hOo=o(" \u2014 "),YD=a("a"),uOo=o("Data2VecAudioForAudioFrameClassification"),pOo=o(" (Data2VecAudio model)"),_Oo=l(),xT=a("li"),Jme=a("strong"),bOo=o("unispeech-sat"),FOo=o(" \u2014 "),KD=a("a"),vOo=o("UniSpeechSatForAudioFrameClassification"),TOo=o(" (UniSpeechSat model)"),MOo=l(),kT=a("li"),Yme=a("strong"),EOo=o("wav2vec2"),COo=o(" \u2014 "),ZD=a("a"),wOo=o("Wav2Vec2ForAudioFrameClassification"),AOo=o(" (Wav2Vec2 model)"),yOo=l(),ST=a("li"),Kme=a("strong"),LOo=o("wavlm"),xOo=o(" \u2014 "),eG=a("a"),kOo=o("WavLMForAudioFrameClassification"),SOo=o(" (WavLM model)"),ROo=l(),RT=a("p"),BOo=o("The model is set in evaluation mode by default using "),Zme=a("code"),POo=o("model.eval()"),$Oo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),IOo=o("model.train()"),qOo=l(),ofe=a("p"),NOo=o("Examples:"),jOo=l(),m(V6.$$.fragment),bRe=l(),Gd=a("h2"),BT=a("a"),rfe=a("span"),m(X6.$$.fragment),DOo=l(),tfe=a("span"),GOo=o("AutoModelForCTC"),FRe=l(),mr=a("div"),m(z6.$$.fragment),OOo=l(),Od=a("p"),VOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oG=a("a"),XOo=o("from_pretrained()"),zOo=o(" class method or the "),rG=a("a"),QOo=o("from_config()"),WOo=o(` class
method.`),HOo=l(),Q6=a("p"),UOo=o("This class cannot be instantiated directly using "),afe=a("code"),JOo=o("__init__()"),YOo=o(" (throws an error)."),KOo=l(),nt=a("div"),m(W6.$$.fragment),ZOo=l(),nfe=a("p"),eVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),oVo=l(),Vd=a("p"),rVo=o(`Note:
Loading a model from its configuration file does `),sfe=a("strong"),tVo=o("not"),aVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),nVo=o("from_pretrained()"),sVo=o(" to load the model weights."),lVo=l(),lfe=a("p"),iVo=o("Examples:"),dVo=l(),m(H6.$$.fragment),cVo=l(),Ke=a("div"),m(U6.$$.fragment),mVo=l(),ife=a("p"),fVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gVo=l(),sn=a("p"),hVo=o("The model class to instantiate is selected based on the "),dfe=a("code"),uVo=o("model_type"),pVo=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),_Vo=o("pretrained_model_name_or_path"),bVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),FVo=o("pretrained_model_name_or_path"),vVo=o(":"),TVo=l(),Re=a("ul"),PT=a("li"),ffe=a("strong"),MVo=o("data2vec-audio"),EVo=o(" \u2014 "),aG=a("a"),CVo=o("Data2VecAudioForCTC"),wVo=o(" (Data2VecAudio model)"),AVo=l(),$T=a("li"),gfe=a("strong"),yVo=o("hubert"),LVo=o(" \u2014 "),nG=a("a"),xVo=o("HubertForCTC"),kVo=o(" (Hubert model)"),SVo=l(),IT=a("li"),hfe=a("strong"),RVo=o("sew"),BVo=o(" \u2014 "),sG=a("a"),PVo=o("SEWForCTC"),$Vo=o(" (SEW model)"),IVo=l(),qT=a("li"),ufe=a("strong"),qVo=o("sew-d"),NVo=o(" \u2014 "),lG=a("a"),jVo=o("SEWDForCTC"),DVo=o(" (SEW-D model)"),GVo=l(),NT=a("li"),pfe=a("strong"),OVo=o("unispeech"),VVo=o(" \u2014 "),iG=a("a"),XVo=o("UniSpeechForCTC"),zVo=o(" (UniSpeech model)"),QVo=l(),jT=a("li"),_fe=a("strong"),WVo=o("unispeech-sat"),HVo=o(" \u2014 "),dG=a("a"),UVo=o("UniSpeechSatForCTC"),JVo=o(" (UniSpeechSat model)"),YVo=l(),DT=a("li"),bfe=a("strong"),KVo=o("wav2vec2"),ZVo=o(" \u2014 "),cG=a("a"),eXo=o("Wav2Vec2ForCTC"),oXo=o(" (Wav2Vec2 model)"),rXo=l(),GT=a("li"),Ffe=a("strong"),tXo=o("wavlm"),aXo=o(" \u2014 "),mG=a("a"),nXo=o("WavLMForCTC"),sXo=o(" (WavLM model)"),lXo=l(),OT=a("p"),iXo=o("The model is set in evaluation mode by default using "),vfe=a("code"),dXo=o("model.eval()"),cXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=a("code"),mXo=o("model.train()"),fXo=l(),Mfe=a("p"),gXo=o("Examples:"),hXo=l(),m(J6.$$.fragment),vRe=l(),Xd=a("h2"),VT=a("a"),Efe=a("span"),m(Y6.$$.fragment),uXo=l(),Cfe=a("span"),pXo=o("AutoModelForSpeechSeq2Seq"),TRe=l(),fr=a("div"),m(K6.$$.fragment),_Xo=l(),zd=a("p"),bXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fG=a("a"),FXo=o("from_pretrained()"),vXo=o(" class method or the "),gG=a("a"),TXo=o("from_config()"),MXo=o(` class
method.`),EXo=l(),Z6=a("p"),CXo=o("This class cannot be instantiated directly using "),wfe=a("code"),wXo=o("__init__()"),AXo=o(" (throws an error)."),yXo=l(),st=a("div"),m(e0.$$.fragment),LXo=l(),Afe=a("p"),xXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kXo=l(),Qd=a("p"),SXo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),RXo=o("not"),BXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),PXo=o("from_pretrained()"),$Xo=o(" to load the model weights."),IXo=l(),Lfe=a("p"),qXo=o("Examples:"),NXo=l(),m(o0.$$.fragment),jXo=l(),Ze=a("div"),m(r0.$$.fragment),DXo=l(),xfe=a("p"),GXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OXo=l(),ln=a("p"),VXo=o("The model class to instantiate is selected based on the "),kfe=a("code"),XXo=o("model_type"),zXo=o(` property of the config object (either
passed as an argument or loaded from `),Sfe=a("code"),QXo=o("pretrained_model_name_or_path"),WXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=a("code"),HXo=o("pretrained_model_name_or_path"),UXo=o(":"),JXo=l(),t0=a("ul"),XT=a("li"),Bfe=a("strong"),YXo=o("speech-encoder-decoder"),KXo=o(" \u2014 "),uG=a("a"),ZXo=o("SpeechEncoderDecoderModel"),ezo=o(" (Speech Encoder decoder model)"),ozo=l(),zT=a("li"),Pfe=a("strong"),rzo=o("speech_to_text"),tzo=o(" \u2014 "),pG=a("a"),azo=o("Speech2TextForConditionalGeneration"),nzo=o(" (Speech2Text model)"),szo=l(),QT=a("p"),lzo=o("The model is set in evaluation mode by default using "),$fe=a("code"),izo=o("model.eval()"),dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),czo=o("model.train()"),mzo=l(),qfe=a("p"),fzo=o("Examples:"),gzo=l(),m(a0.$$.fragment),MRe=l(),Wd=a("h2"),WT=a("a"),Nfe=a("span"),m(n0.$$.fragment),hzo=l(),jfe=a("span"),uzo=o("AutoModelForAudioXVector"),ERe=l(),gr=a("div"),m(s0.$$.fragment),pzo=l(),Hd=a("p"),_zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_G=a("a"),bzo=o("from_pretrained()"),Fzo=o(" class method or the "),bG=a("a"),vzo=o("from_config()"),Tzo=o(` class
method.`),Mzo=l(),l0=a("p"),Ezo=o("This class cannot be instantiated directly using "),Dfe=a("code"),Czo=o("__init__()"),wzo=o(" (throws an error)."),Azo=l(),lt=a("div"),m(i0.$$.fragment),yzo=l(),Gfe=a("p"),Lzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xzo=l(),Ud=a("p"),kzo=o(`Note:
Loading a model from its configuration file does `),Ofe=a("strong"),Szo=o("not"),Rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),Bzo=o("from_pretrained()"),Pzo=o(" to load the model weights."),$zo=l(),Vfe=a("p"),Izo=o("Examples:"),qzo=l(),m(d0.$$.fragment),Nzo=l(),eo=a("div"),m(c0.$$.fragment),jzo=l(),Xfe=a("p"),Dzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Gzo=l(),dn=a("p"),Ozo=o("The model class to instantiate is selected based on the "),zfe=a("code"),Vzo=o("model_type"),Xzo=o(` property of the config object (either
passed as an argument or loaded from `),Qfe=a("code"),zzo=o("pretrained_model_name_or_path"),Qzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wfe=a("code"),Wzo=o("pretrained_model_name_or_path"),Hzo=o(":"),Uzo=l(),cn=a("ul"),HT=a("li"),Hfe=a("strong"),Jzo=o("data2vec-audio"),Yzo=o(" \u2014 "),vG=a("a"),Kzo=o("Data2VecAudioForXVector"),Zzo=o(" (Data2VecAudio model)"),eQo=l(),UT=a("li"),Ufe=a("strong"),oQo=o("unispeech-sat"),rQo=o(" \u2014 "),TG=a("a"),tQo=o("UniSpeechSatForXVector"),aQo=o(" (UniSpeechSat model)"),nQo=l(),JT=a("li"),Jfe=a("strong"),sQo=o("wav2vec2"),lQo=o(" \u2014 "),MG=a("a"),iQo=o("Wav2Vec2ForXVector"),dQo=o(" (Wav2Vec2 model)"),cQo=l(),YT=a("li"),Yfe=a("strong"),mQo=o("wavlm"),fQo=o(" \u2014 "),EG=a("a"),gQo=o("WavLMForXVector"),hQo=o(" (WavLM model)"),uQo=l(),KT=a("p"),pQo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),_Qo=o("model.eval()"),bQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),FQo=o("model.train()"),vQo=l(),ege=a("p"),TQo=o("Examples:"),MQo=l(),m(m0.$$.fragment),CRe=l(),Jd=a("h2"),ZT=a("a"),oge=a("span"),m(f0.$$.fragment),EQo=l(),rge=a("span"),CQo=o("AutoModelForMaskedImageModeling"),wRe=l(),hr=a("div"),m(g0.$$.fragment),wQo=l(),Yd=a("p"),AQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),CG=a("a"),yQo=o("from_pretrained()"),LQo=o(" class method or the "),wG=a("a"),xQo=o("from_config()"),kQo=o(` class
method.`),SQo=l(),h0=a("p"),RQo=o("This class cannot be instantiated directly using "),tge=a("code"),BQo=o("__init__()"),PQo=o(" (throws an error)."),$Qo=l(),it=a("div"),m(u0.$$.fragment),IQo=l(),age=a("p"),qQo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NQo=l(),Kd=a("p"),jQo=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),DQo=o("not"),GQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),OQo=o("from_pretrained()"),VQo=o(" to load the model weights."),XQo=l(),sge=a("p"),zQo=o("Examples:"),QQo=l(),m(p0.$$.fragment),WQo=l(),oo=a("div"),m(_0.$$.fragment),HQo=l(),lge=a("p"),UQo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),JQo=l(),mn=a("p"),YQo=o("The model class to instantiate is selected based on the "),ige=a("code"),KQo=o("model_type"),ZQo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(":"),aWo=l(),Zd=a("ul"),e1=a("li"),mge=a("strong"),nWo=o("deit"),sWo=o(" \u2014 "),yG=a("a"),lWo=o("DeiTForMaskedImageModeling"),iWo=o(" (DeiT model)"),dWo=l(),o1=a("li"),fge=a("strong"),cWo=o("swin"),mWo=o(" \u2014 "),LG=a("a"),fWo=o("SwinForMaskedImageModeling"),gWo=o(" (Swin model)"),hWo=l(),r1=a("li"),gge=a("strong"),uWo=o("vit"),pWo=o(" \u2014 "),xG=a("a"),_Wo=o("ViTForMaskedImageModeling"),bWo=o(" (ViT model)"),FWo=l(),t1=a("p"),vWo=o("The model is set in evaluation mode by default using "),hge=a("code"),TWo=o("model.eval()"),MWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),EWo=o("model.train()"),CWo=l(),pge=a("p"),wWo=o("Examples:"),AWo=l(),m(b0.$$.fragment),ARe=l(),ec=a("h2"),a1=a("a"),_ge=a("span"),m(F0.$$.fragment),yWo=l(),bge=a("span"),LWo=o("AutoModelForObjectDetection"),yRe=l(),ur=a("div"),m(v0.$$.fragment),xWo=l(),oc=a("p"),kWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kG=a("a"),SWo=o("from_pretrained()"),RWo=o(" class method or the "),SG=a("a"),BWo=o("from_config()"),PWo=o(` class
method.`),$Wo=l(),T0=a("p"),IWo=o("This class cannot be instantiated directly using "),Fge=a("code"),qWo=o("__init__()"),NWo=o(" (throws an error)."),jWo=l(),dt=a("div"),m(M0.$$.fragment),DWo=l(),vge=a("p"),GWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),OWo=l(),rc=a("p"),VWo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),XWo=o("not"),zWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=a("a"),QWo=o("from_pretrained()"),WWo=o(" to load the model weights."),HWo=l(),Mge=a("p"),UWo=o("Examples:"),JWo=l(),m(E0.$$.fragment),YWo=l(),ro=a("div"),m(C0.$$.fragment),KWo=l(),Ege=a("p"),ZWo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),eHo=l(),fn=a("p"),oHo=o("The model class to instantiate is selected based on the "),Cge=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),yge=a("ul"),n1=a("li"),Lge=a("strong"),dHo=o("detr"),cHo=o(" \u2014 "),BG=a("a"),mHo=o("DetrForObjectDetection"),fHo=o(" (DETR model)"),gHo=l(),s1=a("p"),hHo=o("The model is set in evaluation mode by default using "),xge=a("code"),uHo=o("model.eval()"),pHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),_Ho=o("model.train()"),bHo=l(),Sge=a("p"),FHo=o("Examples:"),vHo=l(),m(w0.$$.fragment),LRe=l(),tc=a("h2"),l1=a("a"),Rge=a("span"),m(A0.$$.fragment),THo=l(),Bge=a("span"),MHo=o("AutoModelForImageSegmentation"),xRe=l(),pr=a("div"),m(y0.$$.fragment),EHo=l(),ac=a("p"),CHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),PG=a("a"),wHo=o("from_pretrained()"),AHo=o(" class method or the "),$G=a("a"),yHo=o("from_config()"),LHo=o(` class
method.`),xHo=l(),L0=a("p"),kHo=o("This class cannot be instantiated directly using "),Pge=a("code"),SHo=o("__init__()"),RHo=o(" (throws an error)."),BHo=l(),ct=a("div"),m(x0.$$.fragment),PHo=l(),$ge=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),IHo=l(),nc=a("p"),qHo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),NHo=o("not"),jHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),DHo=o("from_pretrained()"),GHo=o(" to load the model weights."),OHo=l(),qge=a("p"),VHo=o("Examples:"),XHo=l(),m(k0.$$.fragment),zHo=l(),to=a("div"),m(S0.$$.fragment),QHo=l(),Nge=a("p"),WHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),HHo=l(),gn=a("p"),UHo=o("The model class to instantiate is selected based on the "),jge=a("code"),JHo=o("model_type"),YHo=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(":"),rUo=l(),Oge=a("ul"),i1=a("li"),Vge=a("strong"),tUo=o("detr"),aUo=o(" \u2014 "),qG=a("a"),nUo=o("DetrForSegmentation"),sUo=o(" (DETR model)"),lUo=l(),d1=a("p"),iUo=o("The model is set in evaluation mode by default using "),Xge=a("code"),dUo=o("model.eval()"),cUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),mUo=o("model.train()"),fUo=l(),Qge=a("p"),gUo=o("Examples:"),hUo=l(),m(R0.$$.fragment),kRe=l(),sc=a("h2"),c1=a("a"),Wge=a("span"),m(B0.$$.fragment),uUo=l(),Hge=a("span"),pUo=o("AutoModelForSemanticSegmentation"),SRe=l(),_r=a("div"),m(P0.$$.fragment),_Uo=l(),lc=a("p"),bUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),NG=a("a"),FUo=o("from_pretrained()"),vUo=o(" class method or the "),jG=a("a"),TUo=o("from_config()"),MUo=o(` class
method.`),EUo=l(),$0=a("p"),CUo=o("This class cannot be instantiated directly using "),Uge=a("code"),wUo=o("__init__()"),AUo=o(" (throws an error)."),yUo=l(),mt=a("div"),m(I0.$$.fragment),LUo=l(),Jge=a("p"),xUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kUo=l(),ic=a("p"),SUo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),RUo=o("not"),BUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),PUo=o("from_pretrained()"),$Uo=o(" to load the model weights."),IUo=l(),Kge=a("p"),qUo=o("Examples:"),NUo=l(),m(q0.$$.fragment),jUo=l(),ao=a("div"),m(N0.$$.fragment),DUo=l(),Zge=a("p"),GUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),OUo=l(),hn=a("p"),VUo=o("The model class to instantiate is selected based on the "),ehe=a("code"),XUo=o("model_type"),zUo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),QUo=o("pretrained_model_name_or_path"),WUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),HUo=o("pretrained_model_name_or_path"),UUo=o(":"),JUo=l(),dc=a("ul"),m1=a("li"),the=a("strong"),YUo=o("beit"),KUo=o(" \u2014 "),GG=a("a"),ZUo=o("BeitForSemanticSegmentation"),eJo=o(" (BEiT model)"),oJo=l(),f1=a("li"),ahe=a("strong"),rJo=o("dpt"),tJo=o(" \u2014 "),OG=a("a"),aJo=o("DPTForSemanticSegmentation"),nJo=o(" (DPT model)"),sJo=l(),g1=a("li"),nhe=a("strong"),lJo=o("segformer"),iJo=o(" \u2014 "),VG=a("a"),dJo=o("SegformerForSemanticSegmentation"),cJo=o(" (SegFormer model)"),mJo=l(),h1=a("p"),fJo=o("The model is set in evaluation mode by default using "),she=a("code"),gJo=o("model.eval()"),hJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),uJo=o("model.train()"),pJo=l(),ihe=a("p"),_Jo=o("Examples:"),bJo=l(),m(j0.$$.fragment),RRe=l(),cc=a("h2"),u1=a("a"),dhe=a("span"),m(D0.$$.fragment),FJo=l(),che=a("span"),vJo=o("AutoModelForInstanceSegmentation"),BRe=l(),br=a("div"),m(G0.$$.fragment),TJo=l(),mc=a("p"),MJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XG=a("a"),EJo=o("from_pretrained()"),CJo=o(" class method or the "),zG=a("a"),wJo=o("from_config()"),AJo=o(` class
method.`),yJo=l(),O0=a("p"),LJo=o("This class cannot be instantiated directly using "),mhe=a("code"),xJo=o("__init__()"),kJo=o(" (throws an error)."),SJo=l(),ft=a("div"),m(V0.$$.fragment),RJo=l(),fhe=a("p"),BJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),PJo=l(),fc=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),IJo=o("not"),qJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),NJo=o("from_pretrained()"),jJo=o(" to load the model weights."),DJo=l(),hhe=a("p"),GJo=o("Examples:"),OJo=l(),m(X0.$$.fragment),VJo=l(),no=a("div"),m(z0.$$.fragment),XJo=l(),uhe=a("p"),zJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),QJo=l(),un=a("p"),WJo=o("The model class to instantiate is selected based on the "),phe=a("code"),HJo=o("model_type"),UJo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),JJo=o("pretrained_model_name_or_path"),YJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(":"),eYo=l(),Fhe=a("ul"),p1=a("li"),vhe=a("strong"),oYo=o("maskformer"),rYo=o(" \u2014 "),WG=a("a"),tYo=o("MaskFormerForInstanceSegmentation"),aYo=o(" (MaskFormer model)"),nYo=l(),_1=a("p"),sYo=o("The model is set in evaluation mode by default using "),The=a("code"),lYo=o("model.eval()"),iYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),dYo=o("model.train()"),cYo=l(),Ehe=a("p"),mYo=o("Examples:"),fYo=l(),m(Q0.$$.fragment),PRe=l(),gc=a("h2"),b1=a("a"),Che=a("span"),m(W0.$$.fragment),gYo=l(),whe=a("span"),hYo=o("TFAutoModel"),$Re=l(),Fr=a("div"),m(H0.$$.fragment),uYo=l(),hc=a("p"),pYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HG=a("a"),_Yo=o("from_pretrained()"),bYo=o(" class method or the "),UG=a("a"),FYo=o("from_config()"),vYo=o(` class
method.`),TYo=l(),U0=a("p"),MYo=o("This class cannot be instantiated directly using "),Ahe=a("code"),EYo=o("__init__()"),CYo=o(" (throws an error)."),wYo=l(),gt=a("div"),m(J0.$$.fragment),AYo=l(),yhe=a("p"),yYo=o("Instantiates one of the base model classes of the library from a configuration."),LYo=l(),uc=a("p"),xYo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),kYo=o("not"),SYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),RYo=o("from_pretrained()"),BYo=o(" to load the model weights."),PYo=l(),xhe=a("p"),$Yo=o("Examples:"),IYo=l(),m(Y0.$$.fragment),qYo=l(),ho=a("div"),m(K0.$$.fragment),NYo=l(),khe=a("p"),jYo=o("Instantiate one of the base model classes of the library from a pretrained model."),DYo=l(),pn=a("p"),GYo=o("The model class to instantiate is selected based on the "),She=a("code"),OYo=o("model_type"),VYo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),XYo=o("pretrained_model_name_or_path"),zYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),QYo=o("pretrained_model_name_or_path"),WYo=o(":"),HYo=l(),x=a("ul"),F1=a("li"),Phe=a("strong"),UYo=o("albert"),JYo=o(" \u2014 "),YG=a("a"),YYo=o("TFAlbertModel"),KYo=o(" (ALBERT model)"),ZYo=l(),v1=a("li"),$he=a("strong"),eKo=o("bart"),oKo=o(" \u2014 "),KG=a("a"),rKo=o("TFBartModel"),tKo=o(" (BART model)"),aKo=l(),T1=a("li"),Ihe=a("strong"),nKo=o("bert"),sKo=o(" \u2014 "),ZG=a("a"),lKo=o("TFBertModel"),iKo=o(" (BERT model)"),dKo=l(),M1=a("li"),qhe=a("strong"),cKo=o("blenderbot"),mKo=o(" \u2014 "),eO=a("a"),fKo=o("TFBlenderbotModel"),gKo=o(" (Blenderbot model)"),hKo=l(),E1=a("li"),Nhe=a("strong"),uKo=o("blenderbot-small"),pKo=o(" \u2014 "),oO=a("a"),_Ko=o("TFBlenderbotSmallModel"),bKo=o(" (BlenderbotSmall model)"),FKo=l(),C1=a("li"),jhe=a("strong"),vKo=o("camembert"),TKo=o(" \u2014 "),rO=a("a"),MKo=o("TFCamembertModel"),EKo=o(" (CamemBERT model)"),CKo=l(),w1=a("li"),Dhe=a("strong"),wKo=o("clip"),AKo=o(" \u2014 "),tO=a("a"),yKo=o("TFCLIPModel"),LKo=o(" (CLIP model)"),xKo=l(),A1=a("li"),Ghe=a("strong"),kKo=o("convbert"),SKo=o(" \u2014 "),aO=a("a"),RKo=o("TFConvBertModel"),BKo=o(" (ConvBERT model)"),PKo=l(),y1=a("li"),Ohe=a("strong"),$Ko=o("convnext"),IKo=o(" \u2014 "),nO=a("a"),qKo=o("TFConvNextModel"),NKo=o(" (ConvNext model)"),jKo=l(),L1=a("li"),Vhe=a("strong"),DKo=o("ctrl"),GKo=o(" \u2014 "),sO=a("a"),OKo=o("TFCTRLModel"),VKo=o(" (CTRL model)"),XKo=l(),x1=a("li"),Xhe=a("strong"),zKo=o("deberta"),QKo=o(" \u2014 "),lO=a("a"),WKo=o("TFDebertaModel"),HKo=o(" (DeBERTa model)"),UKo=l(),k1=a("li"),zhe=a("strong"),JKo=o("deberta-v2"),YKo=o(" \u2014 "),iO=a("a"),KKo=o("TFDebertaV2Model"),ZKo=o(" (DeBERTa-v2 model)"),eZo=l(),S1=a("li"),Qhe=a("strong"),oZo=o("distilbert"),rZo=o(" \u2014 "),dO=a("a"),tZo=o("TFDistilBertModel"),aZo=o(" (DistilBERT model)"),nZo=l(),R1=a("li"),Whe=a("strong"),sZo=o("dpr"),lZo=o(" \u2014 "),cO=a("a"),iZo=o("TFDPRQuestionEncoder"),dZo=o(" (DPR model)"),cZo=l(),B1=a("li"),Hhe=a("strong"),mZo=o("electra"),fZo=o(" \u2014 "),mO=a("a"),gZo=o("TFElectraModel"),hZo=o(" (ELECTRA model)"),uZo=l(),P1=a("li"),Uhe=a("strong"),pZo=o("flaubert"),_Zo=o(" \u2014 "),fO=a("a"),bZo=o("TFFlaubertModel"),FZo=o(" (FlauBERT model)"),vZo=l(),Gs=a("li"),Jhe=a("strong"),TZo=o("funnel"),MZo=o(" \u2014 "),gO=a("a"),EZo=o("TFFunnelModel"),CZo=o(" or "),hO=a("a"),wZo=o("TFFunnelBaseModel"),AZo=o(" (Funnel Transformer model)"),yZo=l(),$1=a("li"),Yhe=a("strong"),LZo=o("gpt2"),xZo=o(" \u2014 "),uO=a("a"),kZo=o("TFGPT2Model"),SZo=o(" (OpenAI GPT-2 model)"),RZo=l(),I1=a("li"),Khe=a("strong"),BZo=o("gptj"),PZo=o(" \u2014 "),pO=a("a"),$Zo=o("TFGPTJModel"),IZo=o(" (GPT-J model)"),qZo=l(),q1=a("li"),Zhe=a("strong"),NZo=o("hubert"),jZo=o(" \u2014 "),_O=a("a"),DZo=o("TFHubertModel"),GZo=o(" (Hubert model)"),OZo=l(),N1=a("li"),eue=a("strong"),VZo=o("layoutlm"),XZo=o(" \u2014 "),bO=a("a"),zZo=o("TFLayoutLMModel"),QZo=o(" (LayoutLM model)"),WZo=l(),j1=a("li"),oue=a("strong"),HZo=o("led"),UZo=o(" \u2014 "),FO=a("a"),JZo=o("TFLEDModel"),YZo=o(" (LED model)"),KZo=l(),D1=a("li"),rue=a("strong"),ZZo=o("longformer"),eer=o(" \u2014 "),vO=a("a"),oer=o("TFLongformerModel"),rer=o(" (Longformer model)"),ter=l(),G1=a("li"),tue=a("strong"),aer=o("lxmert"),ner=o(" \u2014 "),TO=a("a"),ser=o("TFLxmertModel"),ler=o(" (LXMERT model)"),ier=l(),O1=a("li"),aue=a("strong"),der=o("marian"),cer=o(" \u2014 "),MO=a("a"),mer=o("TFMarianModel"),fer=o(" (Marian model)"),ger=l(),V1=a("li"),nue=a("strong"),her=o("mbart"),uer=o(" \u2014 "),EO=a("a"),per=o("TFMBartModel"),_er=o(" (mBART model)"),ber=l(),X1=a("li"),sue=a("strong"),Fer=o("mobilebert"),ver=o(" \u2014 "),CO=a("a"),Ter=o("TFMobileBertModel"),Mer=o(" (MobileBERT model)"),Eer=l(),z1=a("li"),lue=a("strong"),Cer=o("mpnet"),wer=o(" \u2014 "),wO=a("a"),Aer=o("TFMPNetModel"),yer=o(" (MPNet model)"),Ler=l(),Q1=a("li"),iue=a("strong"),xer=o("mt5"),ker=o(" \u2014 "),AO=a("a"),Ser=o("TFMT5Model"),Rer=o(" (mT5 model)"),Ber=l(),W1=a("li"),due=a("strong"),Per=o("openai-gpt"),$er=o(" \u2014 "),yO=a("a"),Ier=o("TFOpenAIGPTModel"),qer=o(" (OpenAI GPT model)"),Ner=l(),H1=a("li"),cue=a("strong"),jer=o("pegasus"),Der=o(" \u2014 "),LO=a("a"),Ger=o("TFPegasusModel"),Oer=o(" (Pegasus model)"),Ver=l(),U1=a("li"),mue=a("strong"),Xer=o("rembert"),zer=o(" \u2014 "),xO=a("a"),Qer=o("TFRemBertModel"),Wer=o(" (RemBERT model)"),Her=l(),J1=a("li"),fue=a("strong"),Uer=o("roberta"),Jer=o(" \u2014 "),kO=a("a"),Yer=o("TFRobertaModel"),Ker=o(" (RoBERTa model)"),Zer=l(),Y1=a("li"),gue=a("strong"),eor=o("roformer"),oor=o(" \u2014 "),SO=a("a"),ror=o("TFRoFormerModel"),tor=o(" (RoFormer model)"),aor=l(),K1=a("li"),hue=a("strong"),nor=o("speech_to_text"),sor=o(" \u2014 "),RO=a("a"),lor=o("TFSpeech2TextModel"),ior=o(" (Speech2Text model)"),dor=l(),Z1=a("li"),uue=a("strong"),cor=o("t5"),mor=o(" \u2014 "),BO=a("a"),gor=o("TFT5Model"),hor=o(" (T5 model)"),uor=l(),eM=a("li"),pue=a("strong"),por=o("tapas"),_or=o(" \u2014 "),PO=a("a"),bor=o("TFTapasModel"),For=o(" (TAPAS model)"),vor=l(),oM=a("li"),_ue=a("strong"),Tor=o("transfo-xl"),Mor=o(" \u2014 "),$O=a("a"),Eor=o("TFTransfoXLModel"),Cor=o(" (Transformer-XL model)"),wor=l(),rM=a("li"),bue=a("strong"),Aor=o("vit"),yor=o(" \u2014 "),IO=a("a"),Lor=o("TFViTModel"),xor=o(" (ViT model)"),kor=l(),tM=a("li"),Fue=a("strong"),Sor=o("wav2vec2"),Ror=o(" \u2014 "),qO=a("a"),Bor=o("TFWav2Vec2Model"),Por=o(" (Wav2Vec2 model)"),$or=l(),aM=a("li"),vue=a("strong"),Ior=o("xlm"),qor=o(" \u2014 "),NO=a("a"),Nor=o("TFXLMModel"),jor=o(" (XLM model)"),Dor=l(),nM=a("li"),Tue=a("strong"),Gor=o("xlm-roberta"),Oor=o(" \u2014 "),jO=a("a"),Vor=o("TFXLMRobertaModel"),Xor=o(" (XLM-RoBERTa model)"),zor=l(),sM=a("li"),Mue=a("strong"),Qor=o("xlnet"),Wor=o(" \u2014 "),DO=a("a"),Hor=o("TFXLNetModel"),Uor=o(" (XLNet model)"),Jor=l(),Eue=a("p"),Yor=o("Examples:"),Kor=l(),m(Z0.$$.fragment),IRe=l(),pc=a("h2"),lM=a("a"),Cue=a("span"),m(ey.$$.fragment),Zor=l(),wue=a("span"),err=o("TFAutoModelForPreTraining"),qRe=l(),vr=a("div"),m(oy.$$.fragment),orr=l(),_c=a("p"),rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GO=a("a"),trr=o("from_pretrained()"),arr=o(" class method or the "),OO=a("a"),nrr=o("from_config()"),srr=o(` class
method.`),lrr=l(),ry=a("p"),irr=o("This class cannot be instantiated directly using "),Aue=a("code"),drr=o("__init__()"),crr=o(" (throws an error)."),mrr=l(),ht=a("div"),m(ty.$$.fragment),frr=l(),yue=a("p"),grr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hrr=l(),bc=a("p"),urr=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),prr=o("not"),_rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),brr=o("from_pretrained()"),Frr=o(" to load the model weights."),vrr=l(),xue=a("p"),Trr=o("Examples:"),Mrr=l(),m(ay.$$.fragment),Err=l(),uo=a("div"),m(ny.$$.fragment),Crr=l(),kue=a("p"),wrr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Arr=l(),_n=a("p"),yrr=o("The model class to instantiate is selected based on the "),Sue=a("code"),Lrr=o("model_type"),xrr=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),krr=o("pretrained_model_name_or_path"),Srr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),Rrr=o("pretrained_model_name_or_path"),Brr=o(":"),Prr=l(),H=a("ul"),iM=a("li"),Pue=a("strong"),$rr=o("albert"),Irr=o(" \u2014 "),XO=a("a"),qrr=o("TFAlbertForPreTraining"),Nrr=o(" (ALBERT model)"),jrr=l(),dM=a("li"),$ue=a("strong"),Drr=o("bart"),Grr=o(" \u2014 "),zO=a("a"),Orr=o("TFBartForConditionalGeneration"),Vrr=o(" (BART model)"),Xrr=l(),cM=a("li"),Iue=a("strong"),zrr=o("bert"),Qrr=o(" \u2014 "),QO=a("a"),Wrr=o("TFBertForPreTraining"),Hrr=o(" (BERT model)"),Urr=l(),mM=a("li"),que=a("strong"),Jrr=o("camembert"),Yrr=o(" \u2014 "),WO=a("a"),Krr=o("TFCamembertForMaskedLM"),Zrr=o(" (CamemBERT model)"),etr=l(),fM=a("li"),Nue=a("strong"),otr=o("ctrl"),rtr=o(" \u2014 "),HO=a("a"),ttr=o("TFCTRLLMHeadModel"),atr=o(" (CTRL model)"),ntr=l(),gM=a("li"),jue=a("strong"),str=o("distilbert"),ltr=o(" \u2014 "),UO=a("a"),itr=o("TFDistilBertForMaskedLM"),dtr=o(" (DistilBERT model)"),ctr=l(),hM=a("li"),Due=a("strong"),mtr=o("electra"),ftr=o(" \u2014 "),JO=a("a"),gtr=o("TFElectraForPreTraining"),htr=o(" (ELECTRA model)"),utr=l(),uM=a("li"),Gue=a("strong"),ptr=o("flaubert"),_tr=o(" \u2014 "),YO=a("a"),btr=o("TFFlaubertWithLMHeadModel"),Ftr=o(" (FlauBERT model)"),vtr=l(),pM=a("li"),Oue=a("strong"),Ttr=o("funnel"),Mtr=o(" \u2014 "),KO=a("a"),Etr=o("TFFunnelForPreTraining"),Ctr=o(" (Funnel Transformer model)"),wtr=l(),_M=a("li"),Vue=a("strong"),Atr=o("gpt2"),ytr=o(" \u2014 "),ZO=a("a"),Ltr=o("TFGPT2LMHeadModel"),xtr=o(" (OpenAI GPT-2 model)"),ktr=l(),bM=a("li"),Xue=a("strong"),Str=o("layoutlm"),Rtr=o(" \u2014 "),eV=a("a"),Btr=o("TFLayoutLMForMaskedLM"),Ptr=o(" (LayoutLM model)"),$tr=l(),FM=a("li"),zue=a("strong"),Itr=o("lxmert"),qtr=o(" \u2014 "),oV=a("a"),Ntr=o("TFLxmertForPreTraining"),jtr=o(" (LXMERT model)"),Dtr=l(),vM=a("li"),Que=a("strong"),Gtr=o("mobilebert"),Otr=o(" \u2014 "),rV=a("a"),Vtr=o("TFMobileBertForPreTraining"),Xtr=o(" (MobileBERT model)"),ztr=l(),TM=a("li"),Wue=a("strong"),Qtr=o("mpnet"),Wtr=o(" \u2014 "),tV=a("a"),Htr=o("TFMPNetForMaskedLM"),Utr=o(" (MPNet model)"),Jtr=l(),MM=a("li"),Hue=a("strong"),Ytr=o("openai-gpt"),Ktr=o(" \u2014 "),aV=a("a"),Ztr=o("TFOpenAIGPTLMHeadModel"),ear=o(" (OpenAI GPT model)"),oar=l(),EM=a("li"),Uue=a("strong"),rar=o("roberta"),tar=o(" \u2014 "),nV=a("a"),aar=o("TFRobertaForMaskedLM"),nar=o(" (RoBERTa model)"),sar=l(),CM=a("li"),Jue=a("strong"),lar=o("t5"),iar=o(" \u2014 "),sV=a("a"),dar=o("TFT5ForConditionalGeneration"),car=o(" (T5 model)"),mar=l(),wM=a("li"),Yue=a("strong"),far=o("tapas"),gar=o(" \u2014 "),lV=a("a"),har=o("TFTapasForMaskedLM"),uar=o(" (TAPAS model)"),par=l(),AM=a("li"),Kue=a("strong"),_ar=o("transfo-xl"),bar=o(" \u2014 "),iV=a("a"),Far=o("TFTransfoXLLMHeadModel"),Tar=o(" (Transformer-XL model)"),Mar=l(),yM=a("li"),Zue=a("strong"),Ear=o("xlm"),Car=o(" \u2014 "),dV=a("a"),war=o("TFXLMWithLMHeadModel"),Aar=o(" (XLM model)"),yar=l(),LM=a("li"),epe=a("strong"),Lar=o("xlm-roberta"),xar=o(" \u2014 "),cV=a("a"),kar=o("TFXLMRobertaForMaskedLM"),Sar=o(" (XLM-RoBERTa model)"),Rar=l(),xM=a("li"),ope=a("strong"),Bar=o("xlnet"),Par=o(" \u2014 "),mV=a("a"),$ar=o("TFXLNetLMHeadModel"),Iar=o(" (XLNet model)"),qar=l(),rpe=a("p"),Nar=o("Examples:"),jar=l(),m(sy.$$.fragment),NRe=l(),Fc=a("h2"),kM=a("a"),tpe=a("span"),m(ly.$$.fragment),Dar=l(),ape=a("span"),Gar=o("TFAutoModelForCausalLM"),jRe=l(),Tr=a("div"),m(iy.$$.fragment),Oar=l(),vc=a("p"),Var=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fV=a("a"),Xar=o("from_pretrained()"),zar=o(" class method or the "),gV=a("a"),Qar=o("from_config()"),War=o(` class
method.`),Har=l(),dy=a("p"),Uar=o("This class cannot be instantiated directly using "),npe=a("code"),Jar=o("__init__()"),Yar=o(" (throws an error)."),Kar=l(),ut=a("div"),m(cy.$$.fragment),Zar=l(),spe=a("p"),enr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),onr=l(),Tc=a("p"),rnr=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),tnr=o("not"),anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),nnr=o("from_pretrained()"),snr=o(" to load the model weights."),lnr=l(),ipe=a("p"),inr=o("Examples:"),dnr=l(),m(my.$$.fragment),cnr=l(),po=a("div"),m(fy.$$.fragment),mnr=l(),dpe=a("p"),fnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gnr=l(),bn=a("p"),hnr=o("The model class to instantiate is selected based on the "),cpe=a("code"),unr=o("model_type"),pnr=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),_nr=o("pretrained_model_name_or_path"),bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),Fnr=o("pretrained_model_name_or_path"),vnr=o(":"),Tnr=l(),ce=a("ul"),SM=a("li"),gpe=a("strong"),Mnr=o("bert"),Enr=o(" \u2014 "),uV=a("a"),Cnr=o("TFBertLMHeadModel"),wnr=o(" (BERT model)"),Anr=l(),RM=a("li"),hpe=a("strong"),ynr=o("camembert"),Lnr=o(" \u2014 "),pV=a("a"),xnr=o("TFCamembertForCausalLM"),knr=o(" (CamemBERT model)"),Snr=l(),BM=a("li"),upe=a("strong"),Rnr=o("ctrl"),Bnr=o(" \u2014 "),_V=a("a"),Pnr=o("TFCTRLLMHeadModel"),$nr=o(" (CTRL model)"),Inr=l(),PM=a("li"),ppe=a("strong"),qnr=o("gpt2"),Nnr=o(" \u2014 "),bV=a("a"),jnr=o("TFGPT2LMHeadModel"),Dnr=o(" (OpenAI GPT-2 model)"),Gnr=l(),$M=a("li"),_pe=a("strong"),Onr=o("gptj"),Vnr=o(" \u2014 "),FV=a("a"),Xnr=o("TFGPTJForCausalLM"),znr=o(" (GPT-J model)"),Qnr=l(),IM=a("li"),bpe=a("strong"),Wnr=o("openai-gpt"),Hnr=o(" \u2014 "),vV=a("a"),Unr=o("TFOpenAIGPTLMHeadModel"),Jnr=o(" (OpenAI GPT model)"),Ynr=l(),qM=a("li"),Fpe=a("strong"),Knr=o("rembert"),Znr=o(" \u2014 "),TV=a("a"),esr=o("TFRemBertForCausalLM"),osr=o(" (RemBERT model)"),rsr=l(),NM=a("li"),vpe=a("strong"),tsr=o("roberta"),asr=o(" \u2014 "),MV=a("a"),nsr=o("TFRobertaForCausalLM"),ssr=o(" (RoBERTa model)"),lsr=l(),jM=a("li"),Tpe=a("strong"),isr=o("roformer"),dsr=o(" \u2014 "),EV=a("a"),csr=o("TFRoFormerForCausalLM"),msr=o(" (RoFormer model)"),fsr=l(),DM=a("li"),Mpe=a("strong"),gsr=o("transfo-xl"),hsr=o(" \u2014 "),CV=a("a"),usr=o("TFTransfoXLLMHeadModel"),psr=o(" (Transformer-XL model)"),_sr=l(),GM=a("li"),Epe=a("strong"),bsr=o("xlm"),Fsr=o(" \u2014 "),wV=a("a"),vsr=o("TFXLMWithLMHeadModel"),Tsr=o(" (XLM model)"),Msr=l(),OM=a("li"),Cpe=a("strong"),Esr=o("xlnet"),Csr=o(" \u2014 "),AV=a("a"),wsr=o("TFXLNetLMHeadModel"),Asr=o(" (XLNet model)"),ysr=l(),wpe=a("p"),Lsr=o("Examples:"),xsr=l(),m(gy.$$.fragment),DRe=l(),Mc=a("h2"),VM=a("a"),Ape=a("span"),m(hy.$$.fragment),ksr=l(),ype=a("span"),Ssr=o("TFAutoModelForImageClassification"),GRe=l(),Mr=a("div"),m(uy.$$.fragment),Rsr=l(),Ec=a("p"),Bsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yV=a("a"),Psr=o("from_pretrained()"),$sr=o(" class method or the "),LV=a("a"),Isr=o("from_config()"),qsr=o(` class
method.`),Nsr=l(),py=a("p"),jsr=o("This class cannot be instantiated directly using "),Lpe=a("code"),Dsr=o("__init__()"),Gsr=o(" (throws an error)."),Osr=l(),pt=a("div"),m(_y.$$.fragment),Vsr=l(),xpe=a("p"),Xsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zsr=l(),Cc=a("p"),Qsr=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),Wsr=o("not"),Hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),Usr=o("from_pretrained()"),Jsr=o(" to load the model weights."),Ysr=l(),Spe=a("p"),Ksr=o("Examples:"),Zsr=l(),m(by.$$.fragment),elr=l(),_o=a("div"),m(Fy.$$.fragment),olr=l(),Rpe=a("p"),rlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tlr=l(),Fn=a("p"),alr=o("The model class to instantiate is selected based on the "),Bpe=a("code"),nlr=o("model_type"),slr=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),llr=o("pretrained_model_name_or_path"),ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=a("code"),dlr=o("pretrained_model_name_or_path"),clr=o(":"),mlr=l(),vy=a("ul"),XM=a("li"),Ipe=a("strong"),flr=o("convnext"),glr=o(" \u2014 "),kV=a("a"),hlr=o("TFConvNextForImageClassification"),ulr=o(" (ConvNext model)"),plr=l(),zM=a("li"),qpe=a("strong"),_lr=o("vit"),blr=o(" \u2014 "),SV=a("a"),Flr=o("TFViTForImageClassification"),vlr=o(" (ViT model)"),Tlr=l(),Npe=a("p"),Mlr=o("Examples:"),Elr=l(),m(Ty.$$.fragment),ORe=l(),wc=a("h2"),QM=a("a"),jpe=a("span"),m(My.$$.fragment),Clr=l(),Dpe=a("span"),wlr=o("TFAutoModelForMaskedLM"),VRe=l(),Er=a("div"),m(Ey.$$.fragment),Alr=l(),Ac=a("p"),ylr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RV=a("a"),Llr=o("from_pretrained()"),xlr=o(" class method or the "),BV=a("a"),klr=o("from_config()"),Slr=o(` class
method.`),Rlr=l(),Cy=a("p"),Blr=o("This class cannot be instantiated directly using "),Gpe=a("code"),Plr=o("__init__()"),$lr=o(" (throws an error)."),Ilr=l(),_t=a("div"),m(wy.$$.fragment),qlr=l(),Ope=a("p"),Nlr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jlr=l(),yc=a("p"),Dlr=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),Glr=o("not"),Olr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),Vlr=o("from_pretrained()"),Xlr=o(" to load the model weights."),zlr=l(),Xpe=a("p"),Qlr=o("Examples:"),Wlr=l(),m(Ay.$$.fragment),Hlr=l(),bo=a("div"),m(yy.$$.fragment),Ulr=l(),zpe=a("p"),Jlr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ylr=l(),vn=a("p"),Klr=o("The model class to instantiate is selected based on the "),Qpe=a("code"),Zlr=o("model_type"),eir=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),oir=o("pretrained_model_name_or_path"),rir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),tir=o("pretrained_model_name_or_path"),air=o(":"),nir=l(),J=a("ul"),WM=a("li"),Upe=a("strong"),sir=o("albert"),lir=o(" \u2014 "),$V=a("a"),iir=o("TFAlbertForMaskedLM"),dir=o(" (ALBERT model)"),cir=l(),HM=a("li"),Jpe=a("strong"),mir=o("bert"),fir=o(" \u2014 "),IV=a("a"),gir=o("TFBertForMaskedLM"),hir=o(" (BERT model)"),uir=l(),UM=a("li"),Ype=a("strong"),pir=o("camembert"),_ir=o(" \u2014 "),qV=a("a"),bir=o("TFCamembertForMaskedLM"),Fir=o(" (CamemBERT model)"),vir=l(),JM=a("li"),Kpe=a("strong"),Tir=o("convbert"),Mir=o(" \u2014 "),NV=a("a"),Eir=o("TFConvBertForMaskedLM"),Cir=o(" (ConvBERT model)"),wir=l(),YM=a("li"),Zpe=a("strong"),Air=o("deberta"),yir=o(" \u2014 "),jV=a("a"),Lir=o("TFDebertaForMaskedLM"),xir=o(" (DeBERTa model)"),kir=l(),KM=a("li"),e_e=a("strong"),Sir=o("deberta-v2"),Rir=o(" \u2014 "),DV=a("a"),Bir=o("TFDebertaV2ForMaskedLM"),Pir=o(" (DeBERTa-v2 model)"),$ir=l(),ZM=a("li"),o_e=a("strong"),Iir=o("distilbert"),qir=o(" \u2014 "),GV=a("a"),Nir=o("TFDistilBertForMaskedLM"),jir=o(" (DistilBERT model)"),Dir=l(),e4=a("li"),r_e=a("strong"),Gir=o("electra"),Oir=o(" \u2014 "),OV=a("a"),Vir=o("TFElectraForMaskedLM"),Xir=o(" (ELECTRA model)"),zir=l(),o4=a("li"),t_e=a("strong"),Qir=o("flaubert"),Wir=o(" \u2014 "),VV=a("a"),Hir=o("TFFlaubertWithLMHeadModel"),Uir=o(" (FlauBERT model)"),Jir=l(),r4=a("li"),a_e=a("strong"),Yir=o("funnel"),Kir=o(" \u2014 "),XV=a("a"),Zir=o("TFFunnelForMaskedLM"),edr=o(" (Funnel Transformer model)"),odr=l(),t4=a("li"),n_e=a("strong"),rdr=o("layoutlm"),tdr=o(" \u2014 "),zV=a("a"),adr=o("TFLayoutLMForMaskedLM"),ndr=o(" (LayoutLM model)"),sdr=l(),a4=a("li"),s_e=a("strong"),ldr=o("longformer"),idr=o(" \u2014 "),QV=a("a"),ddr=o("TFLongformerForMaskedLM"),cdr=o(" (Longformer model)"),mdr=l(),n4=a("li"),l_e=a("strong"),fdr=o("mobilebert"),gdr=o(" \u2014 "),WV=a("a"),hdr=o("TFMobileBertForMaskedLM"),udr=o(" (MobileBERT model)"),pdr=l(),s4=a("li"),i_e=a("strong"),_dr=o("mpnet"),bdr=o(" \u2014 "),HV=a("a"),Fdr=o("TFMPNetForMaskedLM"),vdr=o(" (MPNet model)"),Tdr=l(),l4=a("li"),d_e=a("strong"),Mdr=o("rembert"),Edr=o(" \u2014 "),UV=a("a"),Cdr=o("TFRemBertForMaskedLM"),wdr=o(" (RemBERT model)"),Adr=l(),i4=a("li"),c_e=a("strong"),ydr=o("roberta"),Ldr=o(" \u2014 "),JV=a("a"),xdr=o("TFRobertaForMaskedLM"),kdr=o(" (RoBERTa model)"),Sdr=l(),d4=a("li"),m_e=a("strong"),Rdr=o("roformer"),Bdr=o(" \u2014 "),YV=a("a"),Pdr=o("TFRoFormerForMaskedLM"),$dr=o(" (RoFormer model)"),Idr=l(),c4=a("li"),f_e=a("strong"),qdr=o("tapas"),Ndr=o(" \u2014 "),KV=a("a"),jdr=o("TFTapasForMaskedLM"),Ddr=o(" (TAPAS model)"),Gdr=l(),m4=a("li"),g_e=a("strong"),Odr=o("xlm"),Vdr=o(" \u2014 "),ZV=a("a"),Xdr=o("TFXLMWithLMHeadModel"),zdr=o(" (XLM model)"),Qdr=l(),f4=a("li"),h_e=a("strong"),Wdr=o("xlm-roberta"),Hdr=o(" \u2014 "),eX=a("a"),Udr=o("TFXLMRobertaForMaskedLM"),Jdr=o(" (XLM-RoBERTa model)"),Ydr=l(),u_e=a("p"),Kdr=o("Examples:"),Zdr=l(),m(Ly.$$.fragment),XRe=l(),Lc=a("h2"),g4=a("a"),p_e=a("span"),m(xy.$$.fragment),ecr=l(),__e=a("span"),ocr=o("TFAutoModelForSeq2SeqLM"),zRe=l(),Cr=a("div"),m(ky.$$.fragment),rcr=l(),xc=a("p"),tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oX=a("a"),acr=o("from_pretrained()"),ncr=o(" class method or the "),rX=a("a"),scr=o("from_config()"),lcr=o(` class
method.`),icr=l(),Sy=a("p"),dcr=o("This class cannot be instantiated directly using "),b_e=a("code"),ccr=o("__init__()"),mcr=o(" (throws an error)."),fcr=l(),bt=a("div"),m(Ry.$$.fragment),gcr=l(),F_e=a("p"),hcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ucr=l(),kc=a("p"),pcr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),_cr=o("not"),bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),Fcr=o("from_pretrained()"),vcr=o(" to load the model weights."),Tcr=l(),T_e=a("p"),Mcr=o("Examples:"),Ecr=l(),m(By.$$.fragment),Ccr=l(),Fo=a("div"),m(Py.$$.fragment),wcr=l(),M_e=a("p"),Acr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ycr=l(),Tn=a("p"),Lcr=o("The model class to instantiate is selected based on the "),E_e=a("code"),xcr=o("model_type"),kcr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),Bcr=o("pretrained_model_name_or_path"),Pcr=o(":"),$cr=l(),_e=a("ul"),h4=a("li"),A_e=a("strong"),Icr=o("bart"),qcr=o(" \u2014 "),aX=a("a"),Ncr=o("TFBartForConditionalGeneration"),jcr=o(" (BART model)"),Dcr=l(),u4=a("li"),y_e=a("strong"),Gcr=o("blenderbot"),Ocr=o(" \u2014 "),nX=a("a"),Vcr=o("TFBlenderbotForConditionalGeneration"),Xcr=o(" (Blenderbot model)"),zcr=l(),p4=a("li"),L_e=a("strong"),Qcr=o("blenderbot-small"),Wcr=o(" \u2014 "),sX=a("a"),Hcr=o("TFBlenderbotSmallForConditionalGeneration"),Ucr=o(" (BlenderbotSmall model)"),Jcr=l(),_4=a("li"),x_e=a("strong"),Ycr=o("encoder-decoder"),Kcr=o(" \u2014 "),lX=a("a"),Zcr=o("TFEncoderDecoderModel"),emr=o(" (Encoder decoder model)"),omr=l(),b4=a("li"),k_e=a("strong"),rmr=o("led"),tmr=o(" \u2014 "),iX=a("a"),amr=o("TFLEDForConditionalGeneration"),nmr=o(" (LED model)"),smr=l(),F4=a("li"),S_e=a("strong"),lmr=o("marian"),imr=o(" \u2014 "),dX=a("a"),dmr=o("TFMarianMTModel"),cmr=o(" (Marian model)"),mmr=l(),v4=a("li"),R_e=a("strong"),fmr=o("mbart"),gmr=o(" \u2014 "),cX=a("a"),hmr=o("TFMBartForConditionalGeneration"),umr=o(" (mBART model)"),pmr=l(),T4=a("li"),B_e=a("strong"),_mr=o("mt5"),bmr=o(" \u2014 "),mX=a("a"),Fmr=o("TFMT5ForConditionalGeneration"),vmr=o(" (mT5 model)"),Tmr=l(),M4=a("li"),P_e=a("strong"),Mmr=o("pegasus"),Emr=o(" \u2014 "),fX=a("a"),Cmr=o("TFPegasusForConditionalGeneration"),wmr=o(" (Pegasus model)"),Amr=l(),E4=a("li"),$_e=a("strong"),ymr=o("t5"),Lmr=o(" \u2014 "),gX=a("a"),xmr=o("TFT5ForConditionalGeneration"),kmr=o(" (T5 model)"),Smr=l(),I_e=a("p"),Rmr=o("Examples:"),Bmr=l(),m($y.$$.fragment),QRe=l(),Sc=a("h2"),C4=a("a"),q_e=a("span"),m(Iy.$$.fragment),Pmr=l(),N_e=a("span"),$mr=o("TFAutoModelForSequenceClassification"),WRe=l(),wr=a("div"),m(qy.$$.fragment),Imr=l(),Rc=a("p"),qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hX=a("a"),Nmr=o("from_pretrained()"),jmr=o(" class method or the "),uX=a("a"),Dmr=o("from_config()"),Gmr=o(` class
method.`),Omr=l(),Ny=a("p"),Vmr=o("This class cannot be instantiated directly using "),j_e=a("code"),Xmr=o("__init__()"),zmr=o(" (throws an error)."),Qmr=l(),Ft=a("div"),m(jy.$$.fragment),Wmr=l(),D_e=a("p"),Hmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Umr=l(),Bc=a("p"),Jmr=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),Ymr=o("not"),Kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),Zmr=o("from_pretrained()"),efr=o(" to load the model weights."),ofr=l(),O_e=a("p"),rfr=o("Examples:"),tfr=l(),m(Dy.$$.fragment),afr=l(),vo=a("div"),m(Gy.$$.fragment),nfr=l(),V_e=a("p"),sfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lfr=l(),Mn=a("p"),ifr=o("The model class to instantiate is selected based on the "),X_e=a("code"),dfr=o("model_type"),cfr=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),mfr=o("pretrained_model_name_or_path"),ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(":"),ufr=l(),V=a("ul"),w4=a("li"),W_e=a("strong"),pfr=o("albert"),_fr=o(" \u2014 "),_X=a("a"),bfr=o("TFAlbertForSequenceClassification"),Ffr=o(" (ALBERT model)"),vfr=l(),A4=a("li"),H_e=a("strong"),Tfr=o("bert"),Mfr=o(" \u2014 "),bX=a("a"),Efr=o("TFBertForSequenceClassification"),Cfr=o(" (BERT model)"),wfr=l(),y4=a("li"),U_e=a("strong"),Afr=o("camembert"),yfr=o(" \u2014 "),FX=a("a"),Lfr=o("TFCamembertForSequenceClassification"),xfr=o(" (CamemBERT model)"),kfr=l(),L4=a("li"),J_e=a("strong"),Sfr=o("convbert"),Rfr=o(" \u2014 "),vX=a("a"),Bfr=o("TFConvBertForSequenceClassification"),Pfr=o(" (ConvBERT model)"),$fr=l(),x4=a("li"),Y_e=a("strong"),Ifr=o("ctrl"),qfr=o(" \u2014 "),TX=a("a"),Nfr=o("TFCTRLForSequenceClassification"),jfr=o(" (CTRL model)"),Dfr=l(),k4=a("li"),K_e=a("strong"),Gfr=o("deberta"),Ofr=o(" \u2014 "),MX=a("a"),Vfr=o("TFDebertaForSequenceClassification"),Xfr=o(" (DeBERTa model)"),zfr=l(),S4=a("li"),Z_e=a("strong"),Qfr=o("deberta-v2"),Wfr=o(" \u2014 "),EX=a("a"),Hfr=o("TFDebertaV2ForSequenceClassification"),Ufr=o(" (DeBERTa-v2 model)"),Jfr=l(),R4=a("li"),ebe=a("strong"),Yfr=o("distilbert"),Kfr=o(" \u2014 "),CX=a("a"),Zfr=o("TFDistilBertForSequenceClassification"),egr=o(" (DistilBERT model)"),ogr=l(),B4=a("li"),obe=a("strong"),rgr=o("electra"),tgr=o(" \u2014 "),wX=a("a"),agr=o("TFElectraForSequenceClassification"),ngr=o(" (ELECTRA model)"),sgr=l(),P4=a("li"),rbe=a("strong"),lgr=o("flaubert"),igr=o(" \u2014 "),AX=a("a"),dgr=o("TFFlaubertForSequenceClassification"),cgr=o(" (FlauBERT model)"),mgr=l(),$4=a("li"),tbe=a("strong"),fgr=o("funnel"),ggr=o(" \u2014 "),yX=a("a"),hgr=o("TFFunnelForSequenceClassification"),ugr=o(" (Funnel Transformer model)"),pgr=l(),I4=a("li"),abe=a("strong"),_gr=o("gpt2"),bgr=o(" \u2014 "),LX=a("a"),Fgr=o("TFGPT2ForSequenceClassification"),vgr=o(" (OpenAI GPT-2 model)"),Tgr=l(),q4=a("li"),nbe=a("strong"),Mgr=o("gptj"),Egr=o(" \u2014 "),xX=a("a"),Cgr=o("TFGPTJForSequenceClassification"),wgr=o(" (GPT-J model)"),Agr=l(),N4=a("li"),sbe=a("strong"),ygr=o("layoutlm"),Lgr=o(" \u2014 "),kX=a("a"),xgr=o("TFLayoutLMForSequenceClassification"),kgr=o(" (LayoutLM model)"),Sgr=l(),j4=a("li"),lbe=a("strong"),Rgr=o("longformer"),Bgr=o(" \u2014 "),SX=a("a"),Pgr=o("TFLongformerForSequenceClassification"),$gr=o(" (Longformer model)"),Igr=l(),D4=a("li"),ibe=a("strong"),qgr=o("mobilebert"),Ngr=o(" \u2014 "),RX=a("a"),jgr=o("TFMobileBertForSequenceClassification"),Dgr=o(" (MobileBERT model)"),Ggr=l(),G4=a("li"),dbe=a("strong"),Ogr=o("mpnet"),Vgr=o(" \u2014 "),BX=a("a"),Xgr=o("TFMPNetForSequenceClassification"),zgr=o(" (MPNet model)"),Qgr=l(),O4=a("li"),cbe=a("strong"),Wgr=o("openai-gpt"),Hgr=o(" \u2014 "),PX=a("a"),Ugr=o("TFOpenAIGPTForSequenceClassification"),Jgr=o(" (OpenAI GPT model)"),Ygr=l(),V4=a("li"),mbe=a("strong"),Kgr=o("rembert"),Zgr=o(" \u2014 "),$X=a("a"),ehr=o("TFRemBertForSequenceClassification"),ohr=o(" (RemBERT model)"),rhr=l(),X4=a("li"),fbe=a("strong"),thr=o("roberta"),ahr=o(" \u2014 "),IX=a("a"),nhr=o("TFRobertaForSequenceClassification"),shr=o(" (RoBERTa model)"),lhr=l(),z4=a("li"),gbe=a("strong"),ihr=o("roformer"),dhr=o(" \u2014 "),qX=a("a"),chr=o("TFRoFormerForSequenceClassification"),mhr=o(" (RoFormer model)"),fhr=l(),Q4=a("li"),hbe=a("strong"),ghr=o("tapas"),hhr=o(" \u2014 "),NX=a("a"),uhr=o("TFTapasForSequenceClassification"),phr=o(" (TAPAS model)"),_hr=l(),W4=a("li"),ube=a("strong"),bhr=o("transfo-xl"),Fhr=o(" \u2014 "),jX=a("a"),vhr=o("TFTransfoXLForSequenceClassification"),Thr=o(" (Transformer-XL model)"),Mhr=l(),H4=a("li"),pbe=a("strong"),Ehr=o("xlm"),Chr=o(" \u2014 "),DX=a("a"),whr=o("TFXLMForSequenceClassification"),Ahr=o(" (XLM model)"),yhr=l(),U4=a("li"),_be=a("strong"),Lhr=o("xlm-roberta"),xhr=o(" \u2014 "),GX=a("a"),khr=o("TFXLMRobertaForSequenceClassification"),Shr=o(" (XLM-RoBERTa model)"),Rhr=l(),J4=a("li"),bbe=a("strong"),Bhr=o("xlnet"),Phr=o(" \u2014 "),OX=a("a"),$hr=o("TFXLNetForSequenceClassification"),Ihr=o(" (XLNet model)"),qhr=l(),Fbe=a("p"),Nhr=o("Examples:"),jhr=l(),m(Oy.$$.fragment),HRe=l(),Pc=a("h2"),Y4=a("a"),vbe=a("span"),m(Vy.$$.fragment),Dhr=l(),Tbe=a("span"),Ghr=o("TFAutoModelForMultipleChoice"),URe=l(),Ar=a("div"),m(Xy.$$.fragment),Ohr=l(),$c=a("p"),Vhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VX=a("a"),Xhr=o("from_pretrained()"),zhr=o(" class method or the "),XX=a("a"),Qhr=o("from_config()"),Whr=o(` class
method.`),Hhr=l(),zy=a("p"),Uhr=o("This class cannot be instantiated directly using "),Mbe=a("code"),Jhr=o("__init__()"),Yhr=o(" (throws an error)."),Khr=l(),vt=a("div"),m(Qy.$$.fragment),Zhr=l(),Ebe=a("p"),eur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),our=l(),Ic=a("p"),rur=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),tur=o("not"),aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),nur=o("from_pretrained()"),sur=o(" to load the model weights."),lur=l(),wbe=a("p"),iur=o("Examples:"),dur=l(),m(Wy.$$.fragment),cur=l(),To=a("div"),m(Hy.$$.fragment),mur=l(),Abe=a("p"),fur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gur=l(),En=a("p"),hur=o("The model class to instantiate is selected based on the "),ybe=a("code"),uur=o("model_type"),pur=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),_ur=o("pretrained_model_name_or_path"),bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),Fur=o("pretrained_model_name_or_path"),vur=o(":"),Tur=l(),ae=a("ul"),K4=a("li"),kbe=a("strong"),Mur=o("albert"),Eur=o(" \u2014 "),QX=a("a"),Cur=o("TFAlbertForMultipleChoice"),wur=o(" (ALBERT model)"),Aur=l(),Z4=a("li"),Sbe=a("strong"),yur=o("bert"),Lur=o(" \u2014 "),WX=a("a"),xur=o("TFBertForMultipleChoice"),kur=o(" (BERT model)"),Sur=l(),eE=a("li"),Rbe=a("strong"),Rur=o("camembert"),Bur=o(" \u2014 "),HX=a("a"),Pur=o("TFCamembertForMultipleChoice"),$ur=o(" (CamemBERT model)"),Iur=l(),oE=a("li"),Bbe=a("strong"),qur=o("convbert"),Nur=o(" \u2014 "),UX=a("a"),jur=o("TFConvBertForMultipleChoice"),Dur=o(" (ConvBERT model)"),Gur=l(),rE=a("li"),Pbe=a("strong"),Our=o("distilbert"),Vur=o(" \u2014 "),JX=a("a"),Xur=o("TFDistilBertForMultipleChoice"),zur=o(" (DistilBERT model)"),Qur=l(),tE=a("li"),$be=a("strong"),Wur=o("electra"),Hur=o(" \u2014 "),YX=a("a"),Uur=o("TFElectraForMultipleChoice"),Jur=o(" (ELECTRA model)"),Yur=l(),aE=a("li"),Ibe=a("strong"),Kur=o("flaubert"),Zur=o(" \u2014 "),KX=a("a"),epr=o("TFFlaubertForMultipleChoice"),opr=o(" (FlauBERT model)"),rpr=l(),nE=a("li"),qbe=a("strong"),tpr=o("funnel"),apr=o(" \u2014 "),ZX=a("a"),npr=o("TFFunnelForMultipleChoice"),spr=o(" (Funnel Transformer model)"),lpr=l(),sE=a("li"),Nbe=a("strong"),ipr=o("longformer"),dpr=o(" \u2014 "),ez=a("a"),cpr=o("TFLongformerForMultipleChoice"),mpr=o(" (Longformer model)"),fpr=l(),lE=a("li"),jbe=a("strong"),gpr=o("mobilebert"),hpr=o(" \u2014 "),oz=a("a"),upr=o("TFMobileBertForMultipleChoice"),ppr=o(" (MobileBERT model)"),_pr=l(),iE=a("li"),Dbe=a("strong"),bpr=o("mpnet"),Fpr=o(" \u2014 "),rz=a("a"),vpr=o("TFMPNetForMultipleChoice"),Tpr=o(" (MPNet model)"),Mpr=l(),dE=a("li"),Gbe=a("strong"),Epr=o("rembert"),Cpr=o(" \u2014 "),tz=a("a"),wpr=o("TFRemBertForMultipleChoice"),Apr=o(" (RemBERT model)"),ypr=l(),cE=a("li"),Obe=a("strong"),Lpr=o("roberta"),xpr=o(" \u2014 "),az=a("a"),kpr=o("TFRobertaForMultipleChoice"),Spr=o(" (RoBERTa model)"),Rpr=l(),mE=a("li"),Vbe=a("strong"),Bpr=o("roformer"),Ppr=o(" \u2014 "),nz=a("a"),$pr=o("TFRoFormerForMultipleChoice"),Ipr=o(" (RoFormer model)"),qpr=l(),fE=a("li"),Xbe=a("strong"),Npr=o("xlm"),jpr=o(" \u2014 "),sz=a("a"),Dpr=o("TFXLMForMultipleChoice"),Gpr=o(" (XLM model)"),Opr=l(),gE=a("li"),zbe=a("strong"),Vpr=o("xlm-roberta"),Xpr=o(" \u2014 "),lz=a("a"),zpr=o("TFXLMRobertaForMultipleChoice"),Qpr=o(" (XLM-RoBERTa model)"),Wpr=l(),hE=a("li"),Qbe=a("strong"),Hpr=o("xlnet"),Upr=o(" \u2014 "),iz=a("a"),Jpr=o("TFXLNetForMultipleChoice"),Ypr=o(" (XLNet model)"),Kpr=l(),Wbe=a("p"),Zpr=o("Examples:"),e_r=l(),m(Uy.$$.fragment),JRe=l(),qc=a("h2"),uE=a("a"),Hbe=a("span"),m(Jy.$$.fragment),o_r=l(),Ube=a("span"),r_r=o("TFAutoModelForTableQuestionAnswering"),YRe=l(),yr=a("div"),m(Yy.$$.fragment),t_r=l(),Nc=a("p"),a_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dz=a("a"),n_r=o("from_pretrained()"),s_r=o(" class method or the "),cz=a("a"),l_r=o("from_config()"),i_r=o(` class
method.`),d_r=l(),Ky=a("p"),c_r=o("This class cannot be instantiated directly using "),Jbe=a("code"),m_r=o("__init__()"),f_r=o(" (throws an error)."),g_r=l(),Tt=a("div"),m(Zy.$$.fragment),h_r=l(),Ybe=a("p"),u_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),p_r=l(),jc=a("p"),__r=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),b_r=o("not"),F_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),v_r=o("from_pretrained()"),T_r=o(" to load the model weights."),M_r=l(),Zbe=a("p"),E_r=o("Examples:"),C_r=l(),m(eL.$$.fragment),w_r=l(),Mo=a("div"),m(oL.$$.fragment),A_r=l(),e2e=a("p"),y_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),L_r=l(),Cn=a("p"),x_r=o("The model class to instantiate is selected based on the "),o2e=a("code"),k_r=o("model_type"),S_r=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),R_r=o("pretrained_model_name_or_path"),B_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),P_r=o("pretrained_model_name_or_path"),$_r=o(":"),I_r=l(),a2e=a("ul"),pE=a("li"),n2e=a("strong"),q_r=o("tapas"),N_r=o(" \u2014 "),fz=a("a"),j_r=o("TFTapasForQuestionAnswering"),D_r=o(" (TAPAS model)"),G_r=l(),s2e=a("p"),O_r=o("Examples:"),V_r=l(),m(rL.$$.fragment),KRe=l(),Dc=a("h2"),_E=a("a"),l2e=a("span"),m(tL.$$.fragment),X_r=l(),i2e=a("span"),z_r=o("TFAutoModelForTokenClassification"),ZRe=l(),Lr=a("div"),m(aL.$$.fragment),Q_r=l(),Gc=a("p"),W_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gz=a("a"),H_r=o("from_pretrained()"),U_r=o(" class method or the "),hz=a("a"),J_r=o("from_config()"),Y_r=o(` class
method.`),K_r=l(),nL=a("p"),Z_r=o("This class cannot be instantiated directly using "),d2e=a("code"),ebr=o("__init__()"),obr=o(" (throws an error)."),rbr=l(),Mt=a("div"),m(sL.$$.fragment),tbr=l(),c2e=a("p"),abr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nbr=l(),Oc=a("p"),sbr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),lbr=o("not"),ibr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),dbr=o("from_pretrained()"),cbr=o(" to load the model weights."),mbr=l(),f2e=a("p"),fbr=o("Examples:"),gbr=l(),m(lL.$$.fragment),hbr=l(),Eo=a("div"),m(iL.$$.fragment),ubr=l(),g2e=a("p"),pbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_br=l(),wn=a("p"),bbr=o("The model class to instantiate is selected based on the "),h2e=a("code"),Fbr=o("model_type"),vbr=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),Tbr=o("pretrained_model_name_or_path"),Mbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(":"),wbr=l(),Y=a("ul"),bE=a("li"),_2e=a("strong"),Abr=o("albert"),ybr=o(" \u2014 "),pz=a("a"),Lbr=o("TFAlbertForTokenClassification"),xbr=o(" (ALBERT model)"),kbr=l(),FE=a("li"),b2e=a("strong"),Sbr=o("bert"),Rbr=o(" \u2014 "),_z=a("a"),Bbr=o("TFBertForTokenClassification"),Pbr=o(" (BERT model)"),$br=l(),vE=a("li"),F2e=a("strong"),Ibr=o("camembert"),qbr=o(" \u2014 "),bz=a("a"),Nbr=o("TFCamembertForTokenClassification"),jbr=o(" (CamemBERT model)"),Dbr=l(),TE=a("li"),v2e=a("strong"),Gbr=o("convbert"),Obr=o(" \u2014 "),Fz=a("a"),Vbr=o("TFConvBertForTokenClassification"),Xbr=o(" (ConvBERT model)"),zbr=l(),ME=a("li"),T2e=a("strong"),Qbr=o("deberta"),Wbr=o(" \u2014 "),vz=a("a"),Hbr=o("TFDebertaForTokenClassification"),Ubr=o(" (DeBERTa model)"),Jbr=l(),EE=a("li"),M2e=a("strong"),Ybr=o("deberta-v2"),Kbr=o(" \u2014 "),Tz=a("a"),Zbr=o("TFDebertaV2ForTokenClassification"),e2r=o(" (DeBERTa-v2 model)"),o2r=l(),CE=a("li"),E2e=a("strong"),r2r=o("distilbert"),t2r=o(" \u2014 "),Mz=a("a"),a2r=o("TFDistilBertForTokenClassification"),n2r=o(" (DistilBERT model)"),s2r=l(),wE=a("li"),C2e=a("strong"),l2r=o("electra"),i2r=o(" \u2014 "),Ez=a("a"),d2r=o("TFElectraForTokenClassification"),c2r=o(" (ELECTRA model)"),m2r=l(),AE=a("li"),w2e=a("strong"),f2r=o("flaubert"),g2r=o(" \u2014 "),Cz=a("a"),h2r=o("TFFlaubertForTokenClassification"),u2r=o(" (FlauBERT model)"),p2r=l(),yE=a("li"),A2e=a("strong"),_2r=o("funnel"),b2r=o(" \u2014 "),wz=a("a"),F2r=o("TFFunnelForTokenClassification"),v2r=o(" (Funnel Transformer model)"),T2r=l(),LE=a("li"),y2e=a("strong"),M2r=o("layoutlm"),E2r=o(" \u2014 "),Az=a("a"),C2r=o("TFLayoutLMForTokenClassification"),w2r=o(" (LayoutLM model)"),A2r=l(),xE=a("li"),L2e=a("strong"),y2r=o("longformer"),L2r=o(" \u2014 "),yz=a("a"),x2r=o("TFLongformerForTokenClassification"),k2r=o(" (Longformer model)"),S2r=l(),kE=a("li"),x2e=a("strong"),R2r=o("mobilebert"),B2r=o(" \u2014 "),Lz=a("a"),P2r=o("TFMobileBertForTokenClassification"),$2r=o(" (MobileBERT model)"),I2r=l(),SE=a("li"),k2e=a("strong"),q2r=o("mpnet"),N2r=o(" \u2014 "),xz=a("a"),j2r=o("TFMPNetForTokenClassification"),D2r=o(" (MPNet model)"),G2r=l(),RE=a("li"),S2e=a("strong"),O2r=o("rembert"),V2r=o(" \u2014 "),kz=a("a"),X2r=o("TFRemBertForTokenClassification"),z2r=o(" (RemBERT model)"),Q2r=l(),BE=a("li"),R2e=a("strong"),W2r=o("roberta"),H2r=o(" \u2014 "),Sz=a("a"),U2r=o("TFRobertaForTokenClassification"),J2r=o(" (RoBERTa model)"),Y2r=l(),PE=a("li"),B2e=a("strong"),K2r=o("roformer"),Z2r=o(" \u2014 "),Rz=a("a"),eFr=o("TFRoFormerForTokenClassification"),oFr=o(" (RoFormer model)"),rFr=l(),$E=a("li"),P2e=a("strong"),tFr=o("xlm"),aFr=o(" \u2014 "),Bz=a("a"),nFr=o("TFXLMForTokenClassification"),sFr=o(" (XLM model)"),lFr=l(),IE=a("li"),$2e=a("strong"),iFr=o("xlm-roberta"),dFr=o(" \u2014 "),Pz=a("a"),cFr=o("TFXLMRobertaForTokenClassification"),mFr=o(" (XLM-RoBERTa model)"),fFr=l(),qE=a("li"),I2e=a("strong"),gFr=o("xlnet"),hFr=o(" \u2014 "),$z=a("a"),uFr=o("TFXLNetForTokenClassification"),pFr=o(" (XLNet model)"),_Fr=l(),q2e=a("p"),bFr=o("Examples:"),FFr=l(),m(dL.$$.fragment),eBe=l(),Vc=a("h2"),NE=a("a"),N2e=a("span"),m(cL.$$.fragment),vFr=l(),j2e=a("span"),TFr=o("TFAutoModelForQuestionAnswering"),oBe=l(),xr=a("div"),m(mL.$$.fragment),MFr=l(),Xc=a("p"),EFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iz=a("a"),CFr=o("from_pretrained()"),wFr=o(" class method or the "),qz=a("a"),AFr=o("from_config()"),yFr=o(` class
method.`),LFr=l(),fL=a("p"),xFr=o("This class cannot be instantiated directly using "),D2e=a("code"),kFr=o("__init__()"),SFr=o(" (throws an error)."),RFr=l(),Et=a("div"),m(gL.$$.fragment),BFr=l(),G2e=a("p"),PFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Fr=l(),zc=a("p"),IFr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),qFr=o("not"),NFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),jFr=o("from_pretrained()"),DFr=o(" to load the model weights."),GFr=l(),V2e=a("p"),OFr=o("Examples:"),VFr=l(),m(hL.$$.fragment),XFr=l(),Co=a("div"),m(uL.$$.fragment),zFr=l(),X2e=a("p"),QFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WFr=l(),An=a("p"),HFr=o("The model class to instantiate is selected based on the "),z2e=a("code"),UFr=o("model_type"),JFr=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),YFr=o("pretrained_model_name_or_path"),KFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),ZFr=o("pretrained_model_name_or_path"),evr=o(":"),ovr=l(),K=a("ul"),jE=a("li"),H2e=a("strong"),rvr=o("albert"),tvr=o(" \u2014 "),jz=a("a"),avr=o("TFAlbertForQuestionAnswering"),nvr=o(" (ALBERT model)"),svr=l(),DE=a("li"),U2e=a("strong"),lvr=o("bert"),ivr=o(" \u2014 "),Dz=a("a"),dvr=o("TFBertForQuestionAnswering"),cvr=o(" (BERT model)"),mvr=l(),GE=a("li"),J2e=a("strong"),fvr=o("camembert"),gvr=o(" \u2014 "),Gz=a("a"),hvr=o("TFCamembertForQuestionAnswering"),uvr=o(" (CamemBERT model)"),pvr=l(),OE=a("li"),Y2e=a("strong"),_vr=o("convbert"),bvr=o(" \u2014 "),Oz=a("a"),Fvr=o("TFConvBertForQuestionAnswering"),vvr=o(" (ConvBERT model)"),Tvr=l(),VE=a("li"),K2e=a("strong"),Mvr=o("deberta"),Evr=o(" \u2014 "),Vz=a("a"),Cvr=o("TFDebertaForQuestionAnswering"),wvr=o(" (DeBERTa model)"),Avr=l(),XE=a("li"),Z2e=a("strong"),yvr=o("deberta-v2"),Lvr=o(" \u2014 "),Xz=a("a"),xvr=o("TFDebertaV2ForQuestionAnswering"),kvr=o(" (DeBERTa-v2 model)"),Svr=l(),zE=a("li"),eFe=a("strong"),Rvr=o("distilbert"),Bvr=o(" \u2014 "),zz=a("a"),Pvr=o("TFDistilBertForQuestionAnswering"),$vr=o(" (DistilBERT model)"),Ivr=l(),QE=a("li"),oFe=a("strong"),qvr=o("electra"),Nvr=o(" \u2014 "),Qz=a("a"),jvr=o("TFElectraForQuestionAnswering"),Dvr=o(" (ELECTRA model)"),Gvr=l(),WE=a("li"),rFe=a("strong"),Ovr=o("flaubert"),Vvr=o(" \u2014 "),Wz=a("a"),Xvr=o("TFFlaubertForQuestionAnsweringSimple"),zvr=o(" (FlauBERT model)"),Qvr=l(),HE=a("li"),tFe=a("strong"),Wvr=o("funnel"),Hvr=o(" \u2014 "),Hz=a("a"),Uvr=o("TFFunnelForQuestionAnswering"),Jvr=o(" (Funnel Transformer model)"),Yvr=l(),UE=a("li"),aFe=a("strong"),Kvr=o("gptj"),Zvr=o(" \u2014 "),Uz=a("a"),eTr=o("TFGPTJForQuestionAnswering"),oTr=o(" (GPT-J model)"),rTr=l(),JE=a("li"),nFe=a("strong"),tTr=o("longformer"),aTr=o(" \u2014 "),Jz=a("a"),nTr=o("TFLongformerForQuestionAnswering"),sTr=o(" (Longformer model)"),lTr=l(),YE=a("li"),sFe=a("strong"),iTr=o("mobilebert"),dTr=o(" \u2014 "),Yz=a("a"),cTr=o("TFMobileBertForQuestionAnswering"),mTr=o(" (MobileBERT model)"),fTr=l(),KE=a("li"),lFe=a("strong"),gTr=o("mpnet"),hTr=o(" \u2014 "),Kz=a("a"),uTr=o("TFMPNetForQuestionAnswering"),pTr=o(" (MPNet model)"),_Tr=l(),ZE=a("li"),iFe=a("strong"),bTr=o("rembert"),FTr=o(" \u2014 "),Zz=a("a"),vTr=o("TFRemBertForQuestionAnswering"),TTr=o(" (RemBERT model)"),MTr=l(),eC=a("li"),dFe=a("strong"),ETr=o("roberta"),CTr=o(" \u2014 "),eQ=a("a"),wTr=o("TFRobertaForQuestionAnswering"),ATr=o(" (RoBERTa model)"),yTr=l(),oC=a("li"),cFe=a("strong"),LTr=o("roformer"),xTr=o(" \u2014 "),oQ=a("a"),kTr=o("TFRoFormerForQuestionAnswering"),STr=o(" (RoFormer model)"),RTr=l(),rC=a("li"),mFe=a("strong"),BTr=o("xlm"),PTr=o(" \u2014 "),rQ=a("a"),$Tr=o("TFXLMForQuestionAnsweringSimple"),ITr=o(" (XLM model)"),qTr=l(),tC=a("li"),fFe=a("strong"),NTr=o("xlm-roberta"),jTr=o(" \u2014 "),tQ=a("a"),DTr=o("TFXLMRobertaForQuestionAnswering"),GTr=o(" (XLM-RoBERTa model)"),OTr=l(),aC=a("li"),gFe=a("strong"),VTr=o("xlnet"),XTr=o(" \u2014 "),aQ=a("a"),zTr=o("TFXLNetForQuestionAnsweringSimple"),QTr=o(" (XLNet model)"),WTr=l(),hFe=a("p"),HTr=o("Examples:"),UTr=l(),m(pL.$$.fragment),rBe=l(),Qc=a("h2"),nC=a("a"),uFe=a("span"),m(_L.$$.fragment),JTr=l(),pFe=a("span"),YTr=o("TFAutoModelForVision2Seq"),tBe=l(),kr=a("div"),m(bL.$$.fragment),KTr=l(),Wc=a("p"),ZTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nQ=a("a"),e1r=o("from_pretrained()"),o1r=o(" class method or the "),sQ=a("a"),r1r=o("from_config()"),t1r=o(` class
method.`),a1r=l(),FL=a("p"),n1r=o("This class cannot be instantiated directly using "),_Fe=a("code"),s1r=o("__init__()"),l1r=o(" (throws an error)."),i1r=l(),Ct=a("div"),m(vL.$$.fragment),d1r=l(),bFe=a("p"),c1r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m1r=l(),Hc=a("p"),f1r=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),g1r=o("not"),h1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),u1r=o("from_pretrained()"),p1r=o(" to load the model weights."),_1r=l(),vFe=a("p"),b1r=o("Examples:"),F1r=l(),m(TL.$$.fragment),v1r=l(),wo=a("div"),m(ML.$$.fragment),T1r=l(),TFe=a("p"),M1r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),E1r=l(),yn=a("p"),C1r=o("The model class to instantiate is selected based on the "),MFe=a("code"),w1r=o("model_type"),A1r=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),y1r=o("pretrained_model_name_or_path"),L1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),x1r=o("pretrained_model_name_or_path"),k1r=o(":"),S1r=l(),wFe=a("ul"),sC=a("li"),AFe=a("strong"),R1r=o("vision-encoder-decoder"),B1r=o(" \u2014 "),iQ=a("a"),P1r=o("TFVisionEncoderDecoderModel"),$1r=o(" (Vision Encoder decoder model)"),I1r=l(),yFe=a("p"),q1r=o("Examples:"),N1r=l(),m(EL.$$.fragment),aBe=l(),Uc=a("h2"),lC=a("a"),LFe=a("span"),m(CL.$$.fragment),j1r=l(),xFe=a("span"),D1r=o("TFAutoModelForSpeechSeq2Seq"),nBe=l(),Sr=a("div"),m(wL.$$.fragment),G1r=l(),Jc=a("p"),O1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dQ=a("a"),V1r=o("from_pretrained()"),X1r=o(" class method or the "),cQ=a("a"),z1r=o("from_config()"),Q1r=o(` class
method.`),W1r=l(),AL=a("p"),H1r=o("This class cannot be instantiated directly using "),kFe=a("code"),U1r=o("__init__()"),J1r=o(" (throws an error)."),Y1r=l(),wt=a("div"),m(yL.$$.fragment),K1r=l(),SFe=a("p"),Z1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eMr=l(),Yc=a("p"),oMr=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),rMr=o("not"),tMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),aMr=o("from_pretrained()"),nMr=o(" to load the model weights."),sMr=l(),BFe=a("p"),lMr=o("Examples:"),iMr=l(),m(LL.$$.fragment),dMr=l(),Ao=a("div"),m(xL.$$.fragment),cMr=l(),PFe=a("p"),mMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fMr=l(),Ln=a("p"),gMr=o("The model class to instantiate is selected based on the "),$Fe=a("code"),hMr=o("model_type"),uMr=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),bMr=o("pretrained_model_name_or_path"),FMr=o(":"),vMr=l(),NFe=a("ul"),iC=a("li"),jFe=a("strong"),TMr=o("speech_to_text"),MMr=o(" \u2014 "),fQ=a("a"),EMr=o("TFSpeech2TextForConditionalGeneration"),CMr=o(" (Speech2Text model)"),wMr=l(),DFe=a("p"),AMr=o("Examples:"),yMr=l(),m(kL.$$.fragment),sBe=l(),Kc=a("h2"),dC=a("a"),GFe=a("span"),m(SL.$$.fragment),LMr=l(),OFe=a("span"),xMr=o("FlaxAutoModel"),lBe=l(),Rr=a("div"),m(RL.$$.fragment),kMr=l(),Zc=a("p"),SMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gQ=a("a"),RMr=o("from_pretrained()"),BMr=o(" class method or the "),hQ=a("a"),PMr=o("from_config()"),$Mr=o(` class
method.`),IMr=l(),BL=a("p"),qMr=o("This class cannot be instantiated directly using "),VFe=a("code"),NMr=o("__init__()"),jMr=o(" (throws an error)."),DMr=l(),At=a("div"),m(PL.$$.fragment),GMr=l(),XFe=a("p"),OMr=o("Instantiates one of the base model classes of the library from a configuration."),VMr=l(),em=a("p"),XMr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),zMr=o("not"),QMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),WMr=o("from_pretrained()"),HMr=o(" to load the model weights."),UMr=l(),QFe=a("p"),JMr=o("Examples:"),YMr=l(),m($L.$$.fragment),KMr=l(),yo=a("div"),m(IL.$$.fragment),ZMr=l(),WFe=a("p"),e4r=o("Instantiate one of the base model classes of the library from a pretrained model."),o4r=l(),xn=a("p"),r4r=o("The model class to instantiate is selected based on the "),HFe=a("code"),t4r=o("model_type"),a4r=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),n4r=o("pretrained_model_name_or_path"),s4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),l4r=o("pretrained_model_name_or_path"),i4r=o(":"),d4r=l(),z=a("ul"),cC=a("li"),YFe=a("strong"),c4r=o("albert"),m4r=o(" \u2014 "),pQ=a("a"),f4r=o("FlaxAlbertModel"),g4r=o(" (ALBERT model)"),h4r=l(),mC=a("li"),KFe=a("strong"),u4r=o("bart"),p4r=o(" \u2014 "),_Q=a("a"),_4r=o("FlaxBartModel"),b4r=o(" (BART model)"),F4r=l(),fC=a("li"),ZFe=a("strong"),v4r=o("beit"),T4r=o(" \u2014 "),bQ=a("a"),M4r=o("FlaxBeitModel"),E4r=o(" (BEiT model)"),C4r=l(),gC=a("li"),eve=a("strong"),w4r=o("bert"),A4r=o(" \u2014 "),FQ=a("a"),y4r=o("FlaxBertModel"),L4r=o(" (BERT model)"),x4r=l(),hC=a("li"),ove=a("strong"),k4r=o("big_bird"),S4r=o(" \u2014 "),vQ=a("a"),R4r=o("FlaxBigBirdModel"),B4r=o(" (BigBird model)"),P4r=l(),uC=a("li"),rve=a("strong"),$4r=o("blenderbot"),I4r=o(" \u2014 "),TQ=a("a"),q4r=o("FlaxBlenderbotModel"),N4r=o(" (Blenderbot model)"),j4r=l(),pC=a("li"),tve=a("strong"),D4r=o("blenderbot-small"),G4r=o(" \u2014 "),MQ=a("a"),O4r=o("FlaxBlenderbotSmallModel"),V4r=o(" (BlenderbotSmall model)"),X4r=l(),_C=a("li"),ave=a("strong"),z4r=o("clip"),Q4r=o(" \u2014 "),EQ=a("a"),W4r=o("FlaxCLIPModel"),H4r=o(" (CLIP model)"),U4r=l(),bC=a("li"),nve=a("strong"),J4r=o("distilbert"),Y4r=o(" \u2014 "),CQ=a("a"),K4r=o("FlaxDistilBertModel"),Z4r=o(" (DistilBERT model)"),eEr=l(),FC=a("li"),sve=a("strong"),oEr=o("electra"),rEr=o(" \u2014 "),wQ=a("a"),tEr=o("FlaxElectraModel"),aEr=o(" (ELECTRA model)"),nEr=l(),vC=a("li"),lve=a("strong"),sEr=o("gpt2"),lEr=o(" \u2014 "),AQ=a("a"),iEr=o("FlaxGPT2Model"),dEr=o(" (OpenAI GPT-2 model)"),cEr=l(),TC=a("li"),ive=a("strong"),mEr=o("gpt_neo"),fEr=o(" \u2014 "),yQ=a("a"),gEr=o("FlaxGPTNeoModel"),hEr=o(" (GPT Neo model)"),uEr=l(),MC=a("li"),dve=a("strong"),pEr=o("gptj"),_Er=o(" \u2014 "),LQ=a("a"),bEr=o("FlaxGPTJModel"),FEr=o(" (GPT-J model)"),vEr=l(),EC=a("li"),cve=a("strong"),TEr=o("marian"),MEr=o(" \u2014 "),xQ=a("a"),EEr=o("FlaxMarianModel"),CEr=o(" (Marian model)"),wEr=l(),CC=a("li"),mve=a("strong"),AEr=o("mbart"),yEr=o(" \u2014 "),kQ=a("a"),LEr=o("FlaxMBartModel"),xEr=o(" (mBART model)"),kEr=l(),wC=a("li"),fve=a("strong"),SEr=o("mt5"),REr=o(" \u2014 "),SQ=a("a"),BEr=o("FlaxMT5Model"),PEr=o(" (mT5 model)"),$Er=l(),AC=a("li"),gve=a("strong"),IEr=o("pegasus"),qEr=o(" \u2014 "),RQ=a("a"),NEr=o("FlaxPegasusModel"),jEr=o(" (Pegasus model)"),DEr=l(),yC=a("li"),hve=a("strong"),GEr=o("roberta"),OEr=o(" \u2014 "),BQ=a("a"),VEr=o("FlaxRobertaModel"),XEr=o(" (RoBERTa model)"),zEr=l(),LC=a("li"),uve=a("strong"),QEr=o("roformer"),WEr=o(" \u2014 "),PQ=a("a"),HEr=o("FlaxRoFormerModel"),UEr=o(" (RoFormer model)"),JEr=l(),xC=a("li"),pve=a("strong"),YEr=o("t5"),KEr=o(" \u2014 "),$Q=a("a"),ZEr=o("FlaxT5Model"),eCr=o(" (T5 model)"),oCr=l(),kC=a("li"),_ve=a("strong"),rCr=o("vision-text-dual-encoder"),tCr=o(" \u2014 "),IQ=a("a"),aCr=o("FlaxVisionTextDualEncoderModel"),nCr=o(" (VisionTextDualEncoder model)"),sCr=l(),SC=a("li"),bve=a("strong"),lCr=o("vit"),iCr=o(" \u2014 "),qQ=a("a"),dCr=o("FlaxViTModel"),cCr=o(" (ViT model)"),mCr=l(),RC=a("li"),Fve=a("strong"),fCr=o("wav2vec2"),gCr=o(" \u2014 "),NQ=a("a"),hCr=o("FlaxWav2Vec2Model"),uCr=o(" (Wav2Vec2 model)"),pCr=l(),BC=a("li"),vve=a("strong"),_Cr=o("xglm"),bCr=o(" \u2014 "),jQ=a("a"),FCr=o("FlaxXGLMModel"),vCr=o(" (XGLM model)"),TCr=l(),PC=a("li"),Tve=a("strong"),MCr=o("xlm-roberta"),ECr=o(" \u2014 "),DQ=a("a"),CCr=o("FlaxXLMRobertaModel"),wCr=o(" (XLM-RoBERTa model)"),ACr=l(),Mve=a("p"),yCr=o("Examples:"),LCr=l(),m(qL.$$.fragment),iBe=l(),om=a("h2"),$C=a("a"),Eve=a("span"),m(NL.$$.fragment),xCr=l(),Cve=a("span"),kCr=o("FlaxAutoModelForCausalLM"),dBe=l(),Br=a("div"),m(jL.$$.fragment),SCr=l(),rm=a("p"),RCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GQ=a("a"),BCr=o("from_pretrained()"),PCr=o(" class method or the "),OQ=a("a"),$Cr=o("from_config()"),ICr=o(` class
method.`),qCr=l(),DL=a("p"),NCr=o("This class cannot be instantiated directly using "),wve=a("code"),jCr=o("__init__()"),DCr=o(" (throws an error)."),GCr=l(),yt=a("div"),m(GL.$$.fragment),OCr=l(),Ave=a("p"),VCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XCr=l(),tm=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),QCr=o("not"),WCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),HCr=o("from_pretrained()"),UCr=o(" to load the model weights."),JCr=l(),Lve=a("p"),YCr=o("Examples:"),KCr=l(),m(OL.$$.fragment),ZCr=l(),Lo=a("div"),m(VL.$$.fragment),e5r=l(),xve=a("p"),o5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r5r=l(),kn=a("p"),t5r=o("The model class to instantiate is selected based on the "),kve=a("code"),a5r=o("model_type"),n5r=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),s5r=o("pretrained_model_name_or_path"),l5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),i5r=o("pretrained_model_name_or_path"),d5r=o(":"),c5r=l(),ca=a("ul"),IC=a("li"),Bve=a("strong"),m5r=o("bart"),f5r=o(" \u2014 "),XQ=a("a"),g5r=o("FlaxBartForCausalLM"),h5r=o(" (BART model)"),u5r=l(),qC=a("li"),Pve=a("strong"),p5r=o("gpt2"),_5r=o(" \u2014 "),zQ=a("a"),b5r=o("FlaxGPT2LMHeadModel"),F5r=o(" (OpenAI GPT-2 model)"),v5r=l(),NC=a("li"),$ve=a("strong"),T5r=o("gpt_neo"),M5r=o(" \u2014 "),QQ=a("a"),E5r=o("FlaxGPTNeoForCausalLM"),C5r=o(" (GPT Neo model)"),w5r=l(),jC=a("li"),Ive=a("strong"),A5r=o("gptj"),y5r=o(" \u2014 "),WQ=a("a"),L5r=o("FlaxGPTJForCausalLM"),x5r=o(" (GPT-J model)"),k5r=l(),DC=a("li"),qve=a("strong"),S5r=o("xglm"),R5r=o(" \u2014 "),HQ=a("a"),B5r=o("FlaxXGLMForCausalLM"),P5r=o(" (XGLM model)"),$5r=l(),Nve=a("p"),I5r=o("Examples:"),q5r=l(),m(XL.$$.fragment),cBe=l(),am=a("h2"),GC=a("a"),jve=a("span"),m(zL.$$.fragment),N5r=l(),Dve=a("span"),j5r=o("FlaxAutoModelForPreTraining"),mBe=l(),Pr=a("div"),m(QL.$$.fragment),D5r=l(),nm=a("p"),G5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UQ=a("a"),O5r=o("from_pretrained()"),V5r=o(" class method or the "),JQ=a("a"),X5r=o("from_config()"),z5r=o(` class
method.`),Q5r=l(),WL=a("p"),W5r=o("This class cannot be instantiated directly using "),Gve=a("code"),H5r=o("__init__()"),U5r=o(" (throws an error)."),J5r=l(),Lt=a("div"),m(HL.$$.fragment),Y5r=l(),Ove=a("p"),K5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z5r=l(),sm=a("p"),e3r=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),o3r=o("not"),r3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),t3r=o("from_pretrained()"),a3r=o(" to load the model weights."),n3r=l(),Xve=a("p"),s3r=o("Examples:"),l3r=l(),m(UL.$$.fragment),i3r=l(),xo=a("div"),m(JL.$$.fragment),d3r=l(),zve=a("p"),c3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),m3r=l(),Sn=a("p"),f3r=o("The model class to instantiate is selected based on the "),Qve=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),u3r=o("pretrained_model_name_or_path"),p3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),_3r=o("pretrained_model_name_or_path"),b3r=o(":"),F3r=l(),me=a("ul"),OC=a("li"),Uve=a("strong"),v3r=o("albert"),T3r=o(" \u2014 "),KQ=a("a"),M3r=o("FlaxAlbertForPreTraining"),E3r=o(" (ALBERT model)"),C3r=l(),VC=a("li"),Jve=a("strong"),w3r=o("bart"),A3r=o(" \u2014 "),ZQ=a("a"),y3r=o("FlaxBartForConditionalGeneration"),L3r=o(" (BART model)"),x3r=l(),XC=a("li"),Yve=a("strong"),k3r=o("bert"),S3r=o(" \u2014 "),eW=a("a"),R3r=o("FlaxBertForPreTraining"),B3r=o(" (BERT model)"),P3r=l(),zC=a("li"),Kve=a("strong"),$3r=o("big_bird"),I3r=o(" \u2014 "),oW=a("a"),q3r=o("FlaxBigBirdForPreTraining"),N3r=o(" (BigBird model)"),j3r=l(),QC=a("li"),Zve=a("strong"),D3r=o("electra"),G3r=o(" \u2014 "),rW=a("a"),O3r=o("FlaxElectraForPreTraining"),V3r=o(" (ELECTRA model)"),X3r=l(),WC=a("li"),eTe=a("strong"),z3r=o("mbart"),Q3r=o(" \u2014 "),tW=a("a"),W3r=o("FlaxMBartForConditionalGeneration"),H3r=o(" (mBART model)"),U3r=l(),HC=a("li"),oTe=a("strong"),J3r=o("mt5"),Y3r=o(" \u2014 "),aW=a("a"),K3r=o("FlaxMT5ForConditionalGeneration"),Z3r=o(" (mT5 model)"),ewr=l(),UC=a("li"),rTe=a("strong"),owr=o("roberta"),rwr=o(" \u2014 "),nW=a("a"),twr=o("FlaxRobertaForMaskedLM"),awr=o(" (RoBERTa model)"),nwr=l(),JC=a("li"),tTe=a("strong"),swr=o("roformer"),lwr=o(" \u2014 "),sW=a("a"),iwr=o("FlaxRoFormerForMaskedLM"),dwr=o(" (RoFormer model)"),cwr=l(),YC=a("li"),aTe=a("strong"),mwr=o("t5"),fwr=o(" \u2014 "),lW=a("a"),gwr=o("FlaxT5ForConditionalGeneration"),hwr=o(" (T5 model)"),uwr=l(),KC=a("li"),nTe=a("strong"),pwr=o("wav2vec2"),_wr=o(" \u2014 "),iW=a("a"),bwr=o("FlaxWav2Vec2ForPreTraining"),Fwr=o(" (Wav2Vec2 model)"),vwr=l(),ZC=a("li"),sTe=a("strong"),Twr=o("xlm-roberta"),Mwr=o(" \u2014 "),dW=a("a"),Ewr=o("FlaxXLMRobertaForMaskedLM"),Cwr=o(" (XLM-RoBERTa model)"),wwr=l(),lTe=a("p"),Awr=o("Examples:"),ywr=l(),m(YL.$$.fragment),fBe=l(),lm=a("h2"),e5=a("a"),iTe=a("span"),m(KL.$$.fragment),Lwr=l(),dTe=a("span"),xwr=o("FlaxAutoModelForMaskedLM"),gBe=l(),$r=a("div"),m(ZL.$$.fragment),kwr=l(),im=a("p"),Swr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cW=a("a"),Rwr=o("from_pretrained()"),Bwr=o(" class method or the "),mW=a("a"),Pwr=o("from_config()"),$wr=o(` class
method.`),Iwr=l(),e7=a("p"),qwr=o("This class cannot be instantiated directly using "),cTe=a("code"),Nwr=o("__init__()"),jwr=o(" (throws an error)."),Dwr=l(),xt=a("div"),m(o7.$$.fragment),Gwr=l(),mTe=a("p"),Owr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vwr=l(),dm=a("p"),Xwr=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),zwr=o("not"),Qwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),Wwr=o("from_pretrained()"),Hwr=o(" to load the model weights."),Uwr=l(),gTe=a("p"),Jwr=o("Examples:"),Ywr=l(),m(r7.$$.fragment),Kwr=l(),ko=a("div"),m(t7.$$.fragment),Zwr=l(),hTe=a("p"),eAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oAr=l(),Rn=a("p"),rAr=o("The model class to instantiate is selected based on the "),uTe=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),be=a("ul"),o5=a("li"),bTe=a("strong"),cAr=o("albert"),mAr=o(" \u2014 "),gW=a("a"),fAr=o("FlaxAlbertForMaskedLM"),gAr=o(" (ALBERT model)"),hAr=l(),r5=a("li"),FTe=a("strong"),uAr=o("bart"),pAr=o(" \u2014 "),hW=a("a"),_Ar=o("FlaxBartForConditionalGeneration"),bAr=o(" (BART model)"),FAr=l(),t5=a("li"),vTe=a("strong"),vAr=o("bert"),TAr=o(" \u2014 "),uW=a("a"),MAr=o("FlaxBertForMaskedLM"),EAr=o(" (BERT model)"),CAr=l(),a5=a("li"),TTe=a("strong"),wAr=o("big_bird"),AAr=o(" \u2014 "),pW=a("a"),yAr=o("FlaxBigBirdForMaskedLM"),LAr=o(" (BigBird model)"),xAr=l(),n5=a("li"),MTe=a("strong"),kAr=o("distilbert"),SAr=o(" \u2014 "),_W=a("a"),RAr=o("FlaxDistilBertForMaskedLM"),BAr=o(" (DistilBERT model)"),PAr=l(),s5=a("li"),ETe=a("strong"),$Ar=o("electra"),IAr=o(" \u2014 "),bW=a("a"),qAr=o("FlaxElectraForMaskedLM"),NAr=o(" (ELECTRA model)"),jAr=l(),l5=a("li"),CTe=a("strong"),DAr=o("mbart"),GAr=o(" \u2014 "),FW=a("a"),OAr=o("FlaxMBartForConditionalGeneration"),VAr=o(" (mBART model)"),XAr=l(),i5=a("li"),wTe=a("strong"),zAr=o("roberta"),QAr=o(" \u2014 "),vW=a("a"),WAr=o("FlaxRobertaForMaskedLM"),HAr=o(" (RoBERTa model)"),UAr=l(),d5=a("li"),ATe=a("strong"),JAr=o("roformer"),YAr=o(" \u2014 "),TW=a("a"),KAr=o("FlaxRoFormerForMaskedLM"),ZAr=o(" (RoFormer model)"),e6r=l(),c5=a("li"),yTe=a("strong"),o6r=o("xlm-roberta"),r6r=o(" \u2014 "),MW=a("a"),t6r=o("FlaxXLMRobertaForMaskedLM"),a6r=o(" (XLM-RoBERTa model)"),n6r=l(),LTe=a("p"),s6r=o("Examples:"),l6r=l(),m(a7.$$.fragment),hBe=l(),cm=a("h2"),m5=a("a"),xTe=a("span"),m(n7.$$.fragment),i6r=l(),kTe=a("span"),d6r=o("FlaxAutoModelForSeq2SeqLM"),uBe=l(),Ir=a("div"),m(s7.$$.fragment),c6r=l(),mm=a("p"),m6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EW=a("a"),f6r=o("from_pretrained()"),g6r=o(" class method or the "),CW=a("a"),h6r=o("from_config()"),u6r=o(` class
method.`),p6r=l(),l7=a("p"),_6r=o("This class cannot be instantiated directly using "),STe=a("code"),b6r=o("__init__()"),F6r=o(" (throws an error)."),v6r=l(),kt=a("div"),m(i7.$$.fragment),T6r=l(),RTe=a("p"),M6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E6r=l(),fm=a("p"),C6r=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),w6r=o("not"),A6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),y6r=o("from_pretrained()"),L6r=o(" to load the model weights."),x6r=l(),PTe=a("p"),k6r=o("Examples:"),S6r=l(),m(d7.$$.fragment),R6r=l(),So=a("div"),m(c7.$$.fragment),B6r=l(),$Te=a("p"),P6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$6r=l(),Bn=a("p"),I6r=o("The model class to instantiate is selected based on the "),ITe=a("code"),q6r=o("model_type"),N6r=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),j6r=o("pretrained_model_name_or_path"),D6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(":"),V6r=l(),Ee=a("ul"),f5=a("li"),jTe=a("strong"),X6r=o("bart"),z6r=o(" \u2014 "),AW=a("a"),Q6r=o("FlaxBartForConditionalGeneration"),W6r=o(" (BART model)"),H6r=l(),g5=a("li"),DTe=a("strong"),U6r=o("blenderbot"),J6r=o(" \u2014 "),yW=a("a"),Y6r=o("FlaxBlenderbotForConditionalGeneration"),K6r=o(" (Blenderbot model)"),Z6r=l(),h5=a("li"),GTe=a("strong"),e0r=o("blenderbot-small"),o0r=o(" \u2014 "),LW=a("a"),r0r=o("FlaxBlenderbotSmallForConditionalGeneration"),t0r=o(" (BlenderbotSmall model)"),a0r=l(),u5=a("li"),OTe=a("strong"),n0r=o("encoder-decoder"),s0r=o(" \u2014 "),xW=a("a"),l0r=o("FlaxEncoderDecoderModel"),i0r=o(" (Encoder decoder model)"),d0r=l(),p5=a("li"),VTe=a("strong"),c0r=o("marian"),m0r=o(" \u2014 "),kW=a("a"),f0r=o("FlaxMarianMTModel"),g0r=o(" (Marian model)"),h0r=l(),_5=a("li"),XTe=a("strong"),u0r=o("mbart"),p0r=o(" \u2014 "),SW=a("a"),_0r=o("FlaxMBartForConditionalGeneration"),b0r=o(" (mBART model)"),F0r=l(),b5=a("li"),zTe=a("strong"),v0r=o("mt5"),T0r=o(" \u2014 "),RW=a("a"),M0r=o("FlaxMT5ForConditionalGeneration"),E0r=o(" (mT5 model)"),C0r=l(),F5=a("li"),QTe=a("strong"),w0r=o("pegasus"),A0r=o(" \u2014 "),BW=a("a"),y0r=o("FlaxPegasusForConditionalGeneration"),L0r=o(" (Pegasus model)"),x0r=l(),v5=a("li"),WTe=a("strong"),k0r=o("t5"),S0r=o(" \u2014 "),PW=a("a"),R0r=o("FlaxT5ForConditionalGeneration"),B0r=o(" (T5 model)"),P0r=l(),HTe=a("p"),$0r=o("Examples:"),I0r=l(),m(m7.$$.fragment),pBe=l(),gm=a("h2"),T5=a("a"),UTe=a("span"),m(f7.$$.fragment),q0r=l(),JTe=a("span"),N0r=o("FlaxAutoModelForSequenceClassification"),_Be=l(),qr=a("div"),m(g7.$$.fragment),j0r=l(),hm=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$W=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),IW=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),h7=a("p"),Q0r=o("This class cannot be instantiated directly using "),YTe=a("code"),W0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),St=a("div"),m(u7.$$.fragment),J0r=l(),KTe=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K0r=l(),um=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),eyr=o("not"),oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),ryr=o("from_pretrained()"),tyr=o(" to load the model weights."),ayr=l(),e1e=a("p"),nyr=o("Examples:"),syr=l(),m(p7.$$.fragment),lyr=l(),Ro=a("div"),m(_7.$$.fragment),iyr=l(),o1e=a("p"),dyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cyr=l(),Pn=a("p"),myr=o("The model class to instantiate is selected based on the "),r1e=a("code"),fyr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),hyr=o("pretrained_model_name_or_path"),uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),pyr=o("pretrained_model_name_or_path"),_yr=o(":"),byr=l(),Fe=a("ul"),M5=a("li"),n1e=a("strong"),Fyr=o("albert"),vyr=o(" \u2014 "),NW=a("a"),Tyr=o("FlaxAlbertForSequenceClassification"),Myr=o(" (ALBERT model)"),Eyr=l(),E5=a("li"),s1e=a("strong"),Cyr=o("bart"),wyr=o(" \u2014 "),jW=a("a"),Ayr=o("FlaxBartForSequenceClassification"),yyr=o(" (BART model)"),Lyr=l(),C5=a("li"),l1e=a("strong"),xyr=o("bert"),kyr=o(" \u2014 "),DW=a("a"),Syr=o("FlaxBertForSequenceClassification"),Ryr=o(" (BERT model)"),Byr=l(),w5=a("li"),i1e=a("strong"),Pyr=o("big_bird"),$yr=o(" \u2014 "),GW=a("a"),Iyr=o("FlaxBigBirdForSequenceClassification"),qyr=o(" (BigBird model)"),Nyr=l(),A5=a("li"),d1e=a("strong"),jyr=o("distilbert"),Dyr=o(" \u2014 "),OW=a("a"),Gyr=o("FlaxDistilBertForSequenceClassification"),Oyr=o(" (DistilBERT model)"),Vyr=l(),y5=a("li"),c1e=a("strong"),Xyr=o("electra"),zyr=o(" \u2014 "),VW=a("a"),Qyr=o("FlaxElectraForSequenceClassification"),Wyr=o(" (ELECTRA model)"),Hyr=l(),L5=a("li"),m1e=a("strong"),Uyr=o("mbart"),Jyr=o(" \u2014 "),XW=a("a"),Yyr=o("FlaxMBartForSequenceClassification"),Kyr=o(" (mBART model)"),Zyr=l(),x5=a("li"),f1e=a("strong"),eLr=o("roberta"),oLr=o(" \u2014 "),zW=a("a"),rLr=o("FlaxRobertaForSequenceClassification"),tLr=o(" (RoBERTa model)"),aLr=l(),k5=a("li"),g1e=a("strong"),nLr=o("roformer"),sLr=o(" \u2014 "),QW=a("a"),lLr=o("FlaxRoFormerForSequenceClassification"),iLr=o(" (RoFormer model)"),dLr=l(),S5=a("li"),h1e=a("strong"),cLr=o("xlm-roberta"),mLr=o(" \u2014 "),WW=a("a"),fLr=o("FlaxXLMRobertaForSequenceClassification"),gLr=o(" (XLM-RoBERTa model)"),hLr=l(),u1e=a("p"),uLr=o("Examples:"),pLr=l(),m(b7.$$.fragment),bBe=l(),pm=a("h2"),R5=a("a"),p1e=a("span"),m(F7.$$.fragment),_Lr=l(),_1e=a("span"),bLr=o("FlaxAutoModelForQuestionAnswering"),FBe=l(),Nr=a("div"),m(v7.$$.fragment),FLr=l(),_m=a("p"),vLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HW=a("a"),TLr=o("from_pretrained()"),MLr=o(" class method or the "),UW=a("a"),ELr=o("from_config()"),CLr=o(` class
method.`),wLr=l(),T7=a("p"),ALr=o("This class cannot be instantiated directly using "),b1e=a("code"),yLr=o("__init__()"),LLr=o(" (throws an error)."),xLr=l(),Rt=a("div"),m(M7.$$.fragment),kLr=l(),F1e=a("p"),SLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RLr=l(),bm=a("p"),BLr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),PLr=o("not"),$Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),ILr=o("from_pretrained()"),qLr=o(" to load the model weights."),NLr=l(),T1e=a("p"),jLr=o("Examples:"),DLr=l(),m(E7.$$.fragment),GLr=l(),Bo=a("div"),m(C7.$$.fragment),OLr=l(),M1e=a("p"),VLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XLr=l(),$n=a("p"),zLr=o("The model class to instantiate is selected based on the "),E1e=a("code"),QLr=o("model_type"),WLr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(":"),KLr=l(),ve=a("ul"),B5=a("li"),A1e=a("strong"),ZLr=o("albert"),e7r=o(" \u2014 "),YW=a("a"),o7r=o("FlaxAlbertForQuestionAnswering"),r7r=o(" (ALBERT model)"),t7r=l(),P5=a("li"),y1e=a("strong"),a7r=o("bart"),n7r=o(" \u2014 "),KW=a("a"),s7r=o("FlaxBartForQuestionAnswering"),l7r=o(" (BART model)"),i7r=l(),$5=a("li"),L1e=a("strong"),d7r=o("bert"),c7r=o(" \u2014 "),ZW=a("a"),m7r=o("FlaxBertForQuestionAnswering"),f7r=o(" (BERT model)"),g7r=l(),I5=a("li"),x1e=a("strong"),h7r=o("big_bird"),u7r=o(" \u2014 "),eH=a("a"),p7r=o("FlaxBigBirdForQuestionAnswering"),_7r=o(" (BigBird model)"),b7r=l(),q5=a("li"),k1e=a("strong"),F7r=o("distilbert"),v7r=o(" \u2014 "),oH=a("a"),T7r=o("FlaxDistilBertForQuestionAnswering"),M7r=o(" (DistilBERT model)"),E7r=l(),N5=a("li"),S1e=a("strong"),C7r=o("electra"),w7r=o(" \u2014 "),rH=a("a"),A7r=o("FlaxElectraForQuestionAnswering"),y7r=o(" (ELECTRA model)"),L7r=l(),j5=a("li"),R1e=a("strong"),x7r=o("mbart"),k7r=o(" \u2014 "),tH=a("a"),S7r=o("FlaxMBartForQuestionAnswering"),R7r=o(" (mBART model)"),B7r=l(),D5=a("li"),B1e=a("strong"),P7r=o("roberta"),$7r=o(" \u2014 "),aH=a("a"),I7r=o("FlaxRobertaForQuestionAnswering"),q7r=o(" (RoBERTa model)"),N7r=l(),G5=a("li"),P1e=a("strong"),j7r=o("roformer"),D7r=o(" \u2014 "),nH=a("a"),G7r=o("FlaxRoFormerForQuestionAnswering"),O7r=o(" (RoFormer model)"),V7r=l(),O5=a("li"),$1e=a("strong"),X7r=o("xlm-roberta"),z7r=o(" \u2014 "),sH=a("a"),Q7r=o("FlaxXLMRobertaForQuestionAnswering"),W7r=o(" (XLM-RoBERTa model)"),H7r=l(),I1e=a("p"),U7r=o("Examples:"),J7r=l(),m(w7.$$.fragment),vBe=l(),Fm=a("h2"),V5=a("a"),q1e=a("span"),m(A7.$$.fragment),Y7r=l(),N1e=a("span"),K7r=o("FlaxAutoModelForTokenClassification"),TBe=l(),jr=a("div"),m(y7.$$.fragment),Z7r=l(),vm=a("p"),e8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lH=a("a"),o8r=o("from_pretrained()"),r8r=o(" class method or the "),iH=a("a"),t8r=o("from_config()"),a8r=o(` class
method.`),n8r=l(),L7=a("p"),s8r=o("This class cannot be instantiated directly using "),j1e=a("code"),l8r=o("__init__()"),i8r=o(" (throws an error)."),d8r=l(),Bt=a("div"),m(x7.$$.fragment),c8r=l(),D1e=a("p"),m8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f8r=l(),Tm=a("p"),g8r=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),h8r=o("not"),u8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),p8r=o("from_pretrained()"),_8r=o(" to load the model weights."),b8r=l(),O1e=a("p"),F8r=o("Examples:"),v8r=l(),m(k7.$$.fragment),T8r=l(),Po=a("div"),m(S7.$$.fragment),M8r=l(),V1e=a("p"),E8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C8r=l(),In=a("p"),w8r=o("The model class to instantiate is selected based on the "),X1e=a("code"),A8r=o("model_type"),y8r=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),L8r=o("pretrained_model_name_or_path"),x8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(":"),R8r=l(),Be=a("ul"),X5=a("li"),W1e=a("strong"),B8r=o("albert"),P8r=o(" \u2014 "),cH=a("a"),$8r=o("FlaxAlbertForTokenClassification"),I8r=o(" (ALBERT model)"),q8r=l(),z5=a("li"),H1e=a("strong"),N8r=o("bert"),j8r=o(" \u2014 "),mH=a("a"),D8r=o("FlaxBertForTokenClassification"),G8r=o(" (BERT model)"),O8r=l(),Q5=a("li"),U1e=a("strong"),V8r=o("big_bird"),X8r=o(" \u2014 "),fH=a("a"),z8r=o("FlaxBigBirdForTokenClassification"),Q8r=o(" (BigBird model)"),W8r=l(),W5=a("li"),J1e=a("strong"),H8r=o("distilbert"),U8r=o(" \u2014 "),gH=a("a"),J8r=o("FlaxDistilBertForTokenClassification"),Y8r=o(" (DistilBERT model)"),K8r=l(),H5=a("li"),Y1e=a("strong"),Z8r=o("electra"),e9r=o(" \u2014 "),hH=a("a"),o9r=o("FlaxElectraForTokenClassification"),r9r=o(" (ELECTRA model)"),t9r=l(),U5=a("li"),K1e=a("strong"),a9r=o("roberta"),n9r=o(" \u2014 "),uH=a("a"),s9r=o("FlaxRobertaForTokenClassification"),l9r=o(" (RoBERTa model)"),i9r=l(),J5=a("li"),Z1e=a("strong"),d9r=o("roformer"),c9r=o(" \u2014 "),pH=a("a"),m9r=o("FlaxRoFormerForTokenClassification"),f9r=o(" (RoFormer model)"),g9r=l(),Y5=a("li"),eMe=a("strong"),h9r=o("xlm-roberta"),u9r=o(" \u2014 "),_H=a("a"),p9r=o("FlaxXLMRobertaForTokenClassification"),_9r=o(" (XLM-RoBERTa model)"),b9r=l(),oMe=a("p"),F9r=o("Examples:"),v9r=l(),m(R7.$$.fragment),MBe=l(),Mm=a("h2"),K5=a("a"),rMe=a("span"),m(B7.$$.fragment),T9r=l(),tMe=a("span"),M9r=o("FlaxAutoModelForMultipleChoice"),EBe=l(),Dr=a("div"),m(P7.$$.fragment),E9r=l(),Em=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=a("a"),w9r=o("from_pretrained()"),A9r=o(" class method or the "),FH=a("a"),y9r=o("from_config()"),L9r=o(` class
method.`),x9r=l(),$7=a("p"),k9r=o("This class cannot be instantiated directly using "),aMe=a("code"),S9r=o("__init__()"),R9r=o(" (throws an error)."),B9r=l(),Pt=a("div"),m(I7.$$.fragment),P9r=l(),nMe=a("p"),$9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I9r=l(),Cm=a("p"),q9r=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),N9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),D9r=o("from_pretrained()"),G9r=o(" to load the model weights."),O9r=l(),lMe=a("p"),V9r=o("Examples:"),X9r=l(),m(q7.$$.fragment),z9r=l(),$o=a("div"),m(N7.$$.fragment),Q9r=l(),iMe=a("p"),W9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H9r=l(),qn=a("p"),U9r=o("The model class to instantiate is selected based on the "),dMe=a("code"),J9r=o("model_type"),Y9r=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(":"),rxr=l(),Pe=a("ul"),Z5=a("li"),fMe=a("strong"),txr=o("albert"),axr=o(" \u2014 "),TH=a("a"),nxr=o("FlaxAlbertForMultipleChoice"),sxr=o(" (ALBERT model)"),lxr=l(),e3=a("li"),gMe=a("strong"),ixr=o("bert"),dxr=o(" \u2014 "),MH=a("a"),cxr=o("FlaxBertForMultipleChoice"),mxr=o(" (BERT model)"),fxr=l(),o3=a("li"),hMe=a("strong"),gxr=o("big_bird"),hxr=o(" \u2014 "),EH=a("a"),uxr=o("FlaxBigBirdForMultipleChoice"),pxr=o(" (BigBird model)"),_xr=l(),r3=a("li"),uMe=a("strong"),bxr=o("distilbert"),Fxr=o(" \u2014 "),CH=a("a"),vxr=o("FlaxDistilBertForMultipleChoice"),Txr=o(" (DistilBERT model)"),Mxr=l(),t3=a("li"),pMe=a("strong"),Exr=o("electra"),Cxr=o(" \u2014 "),wH=a("a"),wxr=o("FlaxElectraForMultipleChoice"),Axr=o(" (ELECTRA model)"),yxr=l(),a3=a("li"),_Me=a("strong"),Lxr=o("roberta"),xxr=o(" \u2014 "),AH=a("a"),kxr=o("FlaxRobertaForMultipleChoice"),Sxr=o(" (RoBERTa model)"),Rxr=l(),n3=a("li"),bMe=a("strong"),Bxr=o("roformer"),Pxr=o(" \u2014 "),yH=a("a"),$xr=o("FlaxRoFormerForMultipleChoice"),Ixr=o(" (RoFormer model)"),qxr=l(),s3=a("li"),FMe=a("strong"),Nxr=o("xlm-roberta"),jxr=o(" \u2014 "),LH=a("a"),Dxr=o("FlaxXLMRobertaForMultipleChoice"),Gxr=o(" (XLM-RoBERTa model)"),Oxr=l(),vMe=a("p"),Vxr=o("Examples:"),Xxr=l(),m(j7.$$.fragment),CBe=l(),wm=a("h2"),l3=a("a"),TMe=a("span"),m(D7.$$.fragment),zxr=l(),MMe=a("span"),Qxr=o("FlaxAutoModelForNextSentencePrediction"),wBe=l(),Gr=a("div"),m(G7.$$.fragment),Wxr=l(),Am=a("p"),Hxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xH=a("a"),Uxr=o("from_pretrained()"),Jxr=o(" class method or the "),kH=a("a"),Yxr=o("from_config()"),Kxr=o(` class
method.`),Zxr=l(),O7=a("p"),ekr=o("This class cannot be instantiated directly using "),EMe=a("code"),okr=o("__init__()"),rkr=o(" (throws an error)."),tkr=l(),$t=a("div"),m(V7.$$.fragment),akr=l(),CMe=a("p"),nkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),skr=l(),ym=a("p"),lkr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),ikr=o("not"),dkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),ckr=o("from_pretrained()"),mkr=o(" to load the model weights."),fkr=l(),AMe=a("p"),gkr=o("Examples:"),hkr=l(),m(X7.$$.fragment),ukr=l(),Io=a("div"),m(z7.$$.fragment),pkr=l(),yMe=a("p"),_kr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bkr=l(),Nn=a("p"),Fkr=o("The model class to instantiate is selected based on the "),LMe=a("code"),vkr=o("model_type"),Tkr=o(` property of the config object (either
passed as an argument or loaded from `),xMe=a("code"),Mkr=o("pretrained_model_name_or_path"),Ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),Ckr=o("pretrained_model_name_or_path"),wkr=o(":"),Akr=l(),SMe=a("ul"),i3=a("li"),RMe=a("strong"),ykr=o("bert"),Lkr=o(" \u2014 "),RH=a("a"),xkr=o("FlaxBertForNextSentencePrediction"),kkr=o(" (BERT model)"),Skr=l(),BMe=a("p"),Rkr=o("Examples:"),Bkr=l(),m(Q7.$$.fragment),ABe=l(),Lm=a("h2"),d3=a("a"),PMe=a("span"),m(W7.$$.fragment),Pkr=l(),$Me=a("span"),$kr=o("FlaxAutoModelForImageClassification"),yBe=l(),Or=a("div"),m(H7.$$.fragment),Ikr=l(),xm=a("p"),qkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BH=a("a"),Nkr=o("from_pretrained()"),jkr=o(" class method or the "),PH=a("a"),Dkr=o("from_config()"),Gkr=o(` class
method.`),Okr=l(),U7=a("p"),Vkr=o("This class cannot be instantiated directly using "),IMe=a("code"),Xkr=o("__init__()"),zkr=o(" (throws an error)."),Qkr=l(),It=a("div"),m(J7.$$.fragment),Wkr=l(),qMe=a("p"),Hkr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ukr=l(),km=a("p"),Jkr=o(`Note:
Loading a model from its configuration file does `),NMe=a("strong"),Ykr=o("not"),Kkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Zkr=o("from_pretrained()"),eSr=o(" to load the model weights."),oSr=l(),jMe=a("p"),rSr=o("Examples:"),tSr=l(),m(Y7.$$.fragment),aSr=l(),qo=a("div"),m(K7.$$.fragment),nSr=l(),DMe=a("p"),sSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lSr=l(),jn=a("p"),iSr=o("The model class to instantiate is selected based on the "),GMe=a("code"),dSr=o("model_type"),cSr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),mSr=o("pretrained_model_name_or_path"),fSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(":"),uSr=l(),Z7=a("ul"),c3=a("li"),XMe=a("strong"),pSr=o("beit"),_Sr=o(" \u2014 "),IH=a("a"),bSr=o("FlaxBeitForImageClassification"),FSr=o(" (BEiT model)"),vSr=l(),m3=a("li"),zMe=a("strong"),TSr=o("vit"),MSr=o(" \u2014 "),qH=a("a"),ESr=o("FlaxViTForImageClassification"),CSr=o(" (ViT model)"),wSr=l(),QMe=a("p"),ASr=o("Examples:"),ySr=l(),m(e8.$$.fragment),LBe=l(),Sm=a("h2"),f3=a("a"),WMe=a("span"),m(o8.$$.fragment),LSr=l(),HMe=a("span"),xSr=o("FlaxAutoModelForVision2Seq"),xBe=l(),Vr=a("div"),m(r8.$$.fragment),kSr=l(),Rm=a("p"),SSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NH=a("a"),RSr=o("from_pretrained()"),BSr=o(" class method or the "),jH=a("a"),PSr=o("from_config()"),$Sr=o(` class
method.`),ISr=l(),t8=a("p"),qSr=o("This class cannot be instantiated directly using "),UMe=a("code"),NSr=o("__init__()"),jSr=o(" (throws an error)."),DSr=l(),qt=a("div"),m(a8.$$.fragment),GSr=l(),JMe=a("p"),OSr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VSr=l(),Bm=a("p"),XSr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),zSr=o("not"),QSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),WSr=o("from_pretrained()"),HSr=o(" to load the model weights."),USr=l(),KMe=a("p"),JSr=o("Examples:"),YSr=l(),m(n8.$$.fragment),KSr=l(),No=a("div"),m(s8.$$.fragment),ZSr=l(),ZMe=a("p"),eRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oRr=l(),Dn=a("p"),rRr=o("The model class to instantiate is selected based on the "),e4e=a("code"),tRr=o("model_type"),aRr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(":"),dRr=l(),t4e=a("ul"),g3=a("li"),a4e=a("strong"),cRr=o("vision-encoder-decoder"),mRr=o(" \u2014 "),GH=a("a"),fRr=o("FlaxVisionEncoderDecoderModel"),gRr=o(" (Vision Encoder decoder model)"),hRr=l(),n4e=a("p"),uRr=o("Examples:"),pRr=l(),m(l8.$$.fragment),this.h()},l(c){const _=S5t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(_,"META",{name:!0,content:!0}),_.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var i8=s(de);Ce=n(i8,"A",{id:!0,class:!0,href:!0});var s4e=s(Ce);lo=n(s4e,"SPAN",{});var l4e=s(lo);f(fe.$$.fragment,l4e),l4e.forEach(t),s4e.forEach(t),Me=i(i8),Xo=n(i8,"SPAN",{});var bRr=s(Xo);Ii=r(bRr,"Auto Classes"),bRr.forEach(t),i8.forEach(t),Im=i(c),ma=n(c,"P",{});var SBe=s(ma);qi=r(SBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(SBe,"CODE",{});var FRr=s(Ni);gw=r(FRr,"from_pretrained()"),FRr.forEach(t),qm=r(SBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),SBe.forEach(t),xe=i(c),co=n(c,"P",{});var h3=s(co);ji=r(h3,"Instantiating one of "),Gn=n(h3,"A",{href:!0});var vRr=s(Gn);hw=r(vRr,"AutoConfig"),vRr.forEach(t),On=r(h3,", "),Vn=n(h3,"A",{href:!0});var TRr=s(Vn);uw=r(TRr,"AutoModel"),TRr.forEach(t),Di=r(h3,`, and
`),Xn=n(h3,"A",{href:!0});var MRr=s(Xn);pw=r(MRr,"AutoTokenizer"),MRr.forEach(t),Gi=r(h3," will directly create a class of the relevant architecture. For instance"),h3.forEach(t),Nm=i(c),f(Da.$$.fragment,c),mo=i(c),pe=n(c,"P",{});var RBe=s(pe);n9=r(RBe,"will create a model that is an instance of "),Oi=n(RBe,"A",{href:!0});var ERr=s(Oi);s9=r(ERr,"BertModel"),ERr.forEach(t),l9=r(RBe,"."),RBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var BBe=s(Ga);i9=r(BBe,"There is one class of "),jm=n(BBe,"CODE",{});var CRr=s(jm);d9=r(CRr,"AutoModel"),CRr.forEach(t),O$e=r(BBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BBe.forEach(t),xSe=i(c),Vi=n(c,"H2",{class:!0});var PBe=s(Vi);Dm=n(PBe,"A",{id:!0,class:!0,href:!0});var wRr=s(Dm);$J=n(wRr,"SPAN",{});var ARr=s($J);f(_w.$$.fragment,ARr),ARr.forEach(t),wRr.forEach(t),V$e=i(PBe),IJ=n(PBe,"SPAN",{});var yRr=s(IJ);X$e=r(yRr,"Extending the Auto Classes"),yRr.forEach(t),PBe.forEach(t),kSe=i(c),zn=n(c,"P",{});var OH=s(zn);z$e=r(OH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qJ=n(OH,"CODE",{});var LRr=s(qJ);Q$e=r(LRr,"NewModel"),LRr.forEach(t),W$e=r(OH,", make sure you have a "),NJ=n(OH,"CODE",{});var xRr=s(NJ);H$e=r(xRr,"NewModelConfig"),xRr.forEach(t),U$e=r(OH,` then you can add those to the auto
classes like this:`),OH.forEach(t),SSe=i(c),f(bw.$$.fragment,c),RSe=i(c),c9=n(c,"P",{});var kRr=s(c9);J$e=r(kRr,"You will then be able to use the auto classes like you would usually do!"),kRr.forEach(t),BSe=i(c),f(Gm.$$.fragment,c),PSe=i(c),Xi=n(c,"H2",{class:!0});var $Be=s(Xi);Om=n($Be,"A",{id:!0,class:!0,href:!0});var SRr=s(Om);jJ=n(SRr,"SPAN",{});var RRr=s(jJ);f(Fw.$$.fragment,RRr),RRr.forEach(t),SRr.forEach(t),Y$e=i($Be),DJ=n($Be,"SPAN",{});var BRr=s(DJ);K$e=r(BRr,"AutoConfig"),BRr.forEach(t),$Be.forEach(t),$Se=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);f(vw.$$.fragment,Os),Z$e=i(Os),Tw=n(Os,"P",{});var IBe=s(Tw);eIe=r(IBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),m9=n(IBe,"A",{href:!0});var PRr=s(m9);oIe=r(PRr,"from_pretrained()"),PRr.forEach(t),rIe=r(IBe," class method."),IBe.forEach(t),tIe=i(Os),Mw=n(Os,"P",{});var qBe=s(Mw);aIe=r(qBe,"This class cannot be instantiated directly using "),GJ=n(qBe,"CODE",{});var $Rr=s(GJ);nIe=r($Rr,"__init__()"),$Rr.forEach(t),sIe=r(qBe," (throws an error)."),qBe.forEach(t),lIe=i(Os),fo=n(Os,"DIV",{class:!0});var ga=s(fo);f(Ew.$$.fragment,ga),iIe=i(ga),OJ=n(ga,"P",{});var IRr=s(OJ);dIe=r(IRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IRr.forEach(t),cIe=i(ga),zi=n(ga,"P",{});var VH=s(zi);mIe=r(VH,"The configuration class to instantiate is selected based on the "),VJ=n(VH,"CODE",{});var qRr=s(VJ);fIe=r(qRr,"model_type"),qRr.forEach(t),gIe=r(VH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XJ=n(VH,"CODE",{});var NRr=s(XJ);hIe=r(NRr,"pretrained_model_name_or_path"),NRr.forEach(t),uIe=r(VH,":"),VH.forEach(t),pIe=i(ga),F=n(ga,"UL",{});var v=s(F);Vm=n(v,"LI",{});var i4e=s(Vm);zJ=n(i4e,"STRONG",{});var jRr=s(zJ);_Ie=r(jRr,"albert"),jRr.forEach(t),bIe=r(i4e," \u2014 "),f9=n(i4e,"A",{href:!0});var DRr=s(f9);FIe=r(DRr,"AlbertConfig"),DRr.forEach(t),vIe=r(i4e," (ALBERT model)"),i4e.forEach(t),TIe=i(v),Xm=n(v,"LI",{});var d4e=s(Xm);QJ=n(d4e,"STRONG",{});var GRr=s(QJ);MIe=r(GRr,"bart"),GRr.forEach(t),EIe=r(d4e," \u2014 "),g9=n(d4e,"A",{href:!0});var ORr=s(g9);CIe=r(ORr,"BartConfig"),ORr.forEach(t),wIe=r(d4e," (BART model)"),d4e.forEach(t),AIe=i(v),zm=n(v,"LI",{});var c4e=s(zm);WJ=n(c4e,"STRONG",{});var VRr=s(WJ);yIe=r(VRr,"beit"),VRr.forEach(t),LIe=r(c4e," \u2014 "),h9=n(c4e,"A",{href:!0});var XRr=s(h9);xIe=r(XRr,"BeitConfig"),XRr.forEach(t),kIe=r(c4e," (BEiT model)"),c4e.forEach(t),SIe=i(v),Qm=n(v,"LI",{});var m4e=s(Qm);HJ=n(m4e,"STRONG",{});var zRr=s(HJ);RIe=r(zRr,"bert"),zRr.forEach(t),BIe=r(m4e," \u2014 "),u9=n(m4e,"A",{href:!0});var QRr=s(u9);PIe=r(QRr,"BertConfig"),QRr.forEach(t),$Ie=r(m4e," (BERT model)"),m4e.forEach(t),IIe=i(v),Wm=n(v,"LI",{});var f4e=s(Wm);UJ=n(f4e,"STRONG",{});var WRr=s(UJ);qIe=r(WRr,"bert-generation"),WRr.forEach(t),NIe=r(f4e," \u2014 "),p9=n(f4e,"A",{href:!0});var HRr=s(p9);jIe=r(HRr,"BertGenerationConfig"),HRr.forEach(t),DIe=r(f4e," (Bert Generation model)"),f4e.forEach(t),GIe=i(v),Hm=n(v,"LI",{});var g4e=s(Hm);JJ=n(g4e,"STRONG",{});var URr=s(JJ);OIe=r(URr,"big_bird"),URr.forEach(t),VIe=r(g4e," \u2014 "),_9=n(g4e,"A",{href:!0});var JRr=s(_9);XIe=r(JRr,"BigBirdConfig"),JRr.forEach(t),zIe=r(g4e," (BigBird model)"),g4e.forEach(t),QIe=i(v),Um=n(v,"LI",{});var h4e=s(Um);YJ=n(h4e,"STRONG",{});var YRr=s(YJ);WIe=r(YRr,"bigbird_pegasus"),YRr.forEach(t),HIe=r(h4e," \u2014 "),b9=n(h4e,"A",{href:!0});var KRr=s(b9);UIe=r(KRr,"BigBirdPegasusConfig"),KRr.forEach(t),JIe=r(h4e," (BigBirdPegasus model)"),h4e.forEach(t),YIe=i(v),Jm=n(v,"LI",{});var u4e=s(Jm);KJ=n(u4e,"STRONG",{});var ZRr=s(KJ);KIe=r(ZRr,"blenderbot"),ZRr.forEach(t),ZIe=r(u4e," \u2014 "),F9=n(u4e,"A",{href:!0});var eBr=s(F9);eqe=r(eBr,"BlenderbotConfig"),eBr.forEach(t),oqe=r(u4e," (Blenderbot model)"),u4e.forEach(t),rqe=i(v),Ym=n(v,"LI",{});var p4e=s(Ym);ZJ=n(p4e,"STRONG",{});var oBr=s(ZJ);tqe=r(oBr,"blenderbot-small"),oBr.forEach(t),aqe=r(p4e," \u2014 "),v9=n(p4e,"A",{href:!0});var rBr=s(v9);nqe=r(rBr,"BlenderbotSmallConfig"),rBr.forEach(t),sqe=r(p4e," (BlenderbotSmall model)"),p4e.forEach(t),lqe=i(v),Km=n(v,"LI",{});var _4e=s(Km);eY=n(_4e,"STRONG",{});var tBr=s(eY);iqe=r(tBr,"camembert"),tBr.forEach(t),dqe=r(_4e," \u2014 "),T9=n(_4e,"A",{href:!0});var aBr=s(T9);cqe=r(aBr,"CamembertConfig"),aBr.forEach(t),mqe=r(_4e," (CamemBERT model)"),_4e.forEach(t),fqe=i(v),Zm=n(v,"LI",{});var b4e=s(Zm);oY=n(b4e,"STRONG",{});var nBr=s(oY);gqe=r(nBr,"canine"),nBr.forEach(t),hqe=r(b4e," \u2014 "),M9=n(b4e,"A",{href:!0});var sBr=s(M9);uqe=r(sBr,"CanineConfig"),sBr.forEach(t),pqe=r(b4e," (Canine model)"),b4e.forEach(t),_qe=i(v),ef=n(v,"LI",{});var F4e=s(ef);rY=n(F4e,"STRONG",{});var lBr=s(rY);bqe=r(lBr,"clip"),lBr.forEach(t),Fqe=r(F4e," \u2014 "),E9=n(F4e,"A",{href:!0});var iBr=s(E9);vqe=r(iBr,"CLIPConfig"),iBr.forEach(t),Tqe=r(F4e," (CLIP model)"),F4e.forEach(t),Mqe=i(v),of=n(v,"LI",{});var v4e=s(of);tY=n(v4e,"STRONG",{});var dBr=s(tY);Eqe=r(dBr,"convbert"),dBr.forEach(t),Cqe=r(v4e," \u2014 "),C9=n(v4e,"A",{href:!0});var cBr=s(C9);wqe=r(cBr,"ConvBertConfig"),cBr.forEach(t),Aqe=r(v4e," (ConvBERT model)"),v4e.forEach(t),yqe=i(v),rf=n(v,"LI",{});var T4e=s(rf);aY=n(T4e,"STRONG",{});var mBr=s(aY);Lqe=r(mBr,"convnext"),mBr.forEach(t),xqe=r(T4e," \u2014 "),w9=n(T4e,"A",{href:!0});var fBr=s(w9);kqe=r(fBr,"ConvNextConfig"),fBr.forEach(t),Sqe=r(T4e," (ConvNext model)"),T4e.forEach(t),Rqe=i(v),tf=n(v,"LI",{});var M4e=s(tf);nY=n(M4e,"STRONG",{});var gBr=s(nY);Bqe=r(gBr,"ctrl"),gBr.forEach(t),Pqe=r(M4e," \u2014 "),A9=n(M4e,"A",{href:!0});var hBr=s(A9);$qe=r(hBr,"CTRLConfig"),hBr.forEach(t),Iqe=r(M4e," (CTRL model)"),M4e.forEach(t),qqe=i(v),af=n(v,"LI",{});var E4e=s(af);sY=n(E4e,"STRONG",{});var uBr=s(sY);Nqe=r(uBr,"data2vec-audio"),uBr.forEach(t),jqe=r(E4e," \u2014 "),y9=n(E4e,"A",{href:!0});var pBr=s(y9);Dqe=r(pBr,"Data2VecAudioConfig"),pBr.forEach(t),Gqe=r(E4e," (Data2VecAudio model)"),E4e.forEach(t),Oqe=i(v),nf=n(v,"LI",{});var C4e=s(nf);lY=n(C4e,"STRONG",{});var _Br=s(lY);Vqe=r(_Br,"data2vec-text"),_Br.forEach(t),Xqe=r(C4e," \u2014 "),L9=n(C4e,"A",{href:!0});var bBr=s(L9);zqe=r(bBr,"Data2VecTextConfig"),bBr.forEach(t),Qqe=r(C4e," (Data2VecText model)"),C4e.forEach(t),Wqe=i(v),sf=n(v,"LI",{});var w4e=s(sf);iY=n(w4e,"STRONG",{});var FBr=s(iY);Hqe=r(FBr,"deberta"),FBr.forEach(t),Uqe=r(w4e," \u2014 "),x9=n(w4e,"A",{href:!0});var vBr=s(x9);Jqe=r(vBr,"DebertaConfig"),vBr.forEach(t),Yqe=r(w4e," (DeBERTa model)"),w4e.forEach(t),Kqe=i(v),lf=n(v,"LI",{});var A4e=s(lf);dY=n(A4e,"STRONG",{});var TBr=s(dY);Zqe=r(TBr,"deberta-v2"),TBr.forEach(t),eNe=r(A4e," \u2014 "),k9=n(A4e,"A",{href:!0});var MBr=s(k9);oNe=r(MBr,"DebertaV2Config"),MBr.forEach(t),rNe=r(A4e," (DeBERTa-v2 model)"),A4e.forEach(t),tNe=i(v),df=n(v,"LI",{});var y4e=s(df);cY=n(y4e,"STRONG",{});var EBr=s(cY);aNe=r(EBr,"decision_transformer"),EBr.forEach(t),nNe=r(y4e," \u2014 "),S9=n(y4e,"A",{href:!0});var CBr=s(S9);sNe=r(CBr,"DecisionTransformerConfig"),CBr.forEach(t),lNe=r(y4e," (Decision Transformer model)"),y4e.forEach(t),iNe=i(v),cf=n(v,"LI",{});var L4e=s(cf);mY=n(L4e,"STRONG",{});var wBr=s(mY);dNe=r(wBr,"deit"),wBr.forEach(t),cNe=r(L4e," \u2014 "),R9=n(L4e,"A",{href:!0});var ABr=s(R9);mNe=r(ABr,"DeiTConfig"),ABr.forEach(t),fNe=r(L4e," (DeiT model)"),L4e.forEach(t),gNe=i(v),mf=n(v,"LI",{});var x4e=s(mf);fY=n(x4e,"STRONG",{});var yBr=s(fY);hNe=r(yBr,"detr"),yBr.forEach(t),uNe=r(x4e," \u2014 "),B9=n(x4e,"A",{href:!0});var LBr=s(B9);pNe=r(LBr,"DetrConfig"),LBr.forEach(t),_Ne=r(x4e," (DETR model)"),x4e.forEach(t),bNe=i(v),ff=n(v,"LI",{});var k4e=s(ff);gY=n(k4e,"STRONG",{});var xBr=s(gY);FNe=r(xBr,"distilbert"),xBr.forEach(t),vNe=r(k4e," \u2014 "),P9=n(k4e,"A",{href:!0});var kBr=s(P9);TNe=r(kBr,"DistilBertConfig"),kBr.forEach(t),MNe=r(k4e," (DistilBERT model)"),k4e.forEach(t),ENe=i(v),gf=n(v,"LI",{});var S4e=s(gf);hY=n(S4e,"STRONG",{});var SBr=s(hY);CNe=r(SBr,"dpr"),SBr.forEach(t),wNe=r(S4e," \u2014 "),$9=n(S4e,"A",{href:!0});var RBr=s($9);ANe=r(RBr,"DPRConfig"),RBr.forEach(t),yNe=r(S4e," (DPR model)"),S4e.forEach(t),LNe=i(v),hf=n(v,"LI",{});var R4e=s(hf);uY=n(R4e,"STRONG",{});var BBr=s(uY);xNe=r(BBr,"dpt"),BBr.forEach(t),kNe=r(R4e," \u2014 "),I9=n(R4e,"A",{href:!0});var PBr=s(I9);SNe=r(PBr,"DPTConfig"),PBr.forEach(t),RNe=r(R4e," (DPT model)"),R4e.forEach(t),BNe=i(v),uf=n(v,"LI",{});var B4e=s(uf);pY=n(B4e,"STRONG",{});var $Br=s(pY);PNe=r($Br,"electra"),$Br.forEach(t),$Ne=r(B4e," \u2014 "),q9=n(B4e,"A",{href:!0});var IBr=s(q9);INe=r(IBr,"ElectraConfig"),IBr.forEach(t),qNe=r(B4e," (ELECTRA model)"),B4e.forEach(t),NNe=i(v),pf=n(v,"LI",{});var P4e=s(pf);_Y=n(P4e,"STRONG",{});var qBr=s(_Y);jNe=r(qBr,"encoder-decoder"),qBr.forEach(t),DNe=r(P4e," \u2014 "),N9=n(P4e,"A",{href:!0});var NBr=s(N9);GNe=r(NBr,"EncoderDecoderConfig"),NBr.forEach(t),ONe=r(P4e," (Encoder decoder model)"),P4e.forEach(t),VNe=i(v),_f=n(v,"LI",{});var $4e=s(_f);bY=n($4e,"STRONG",{});var jBr=s(bY);XNe=r(jBr,"flaubert"),jBr.forEach(t),zNe=r($4e," \u2014 "),j9=n($4e,"A",{href:!0});var DBr=s(j9);QNe=r(DBr,"FlaubertConfig"),DBr.forEach(t),WNe=r($4e," (FlauBERT model)"),$4e.forEach(t),HNe=i(v),bf=n(v,"LI",{});var I4e=s(bf);FY=n(I4e,"STRONG",{});var GBr=s(FY);UNe=r(GBr,"fnet"),GBr.forEach(t),JNe=r(I4e," \u2014 "),D9=n(I4e,"A",{href:!0});var OBr=s(D9);YNe=r(OBr,"FNetConfig"),OBr.forEach(t),KNe=r(I4e," (FNet model)"),I4e.forEach(t),ZNe=i(v),Ff=n(v,"LI",{});var q4e=s(Ff);vY=n(q4e,"STRONG",{});var VBr=s(vY);eje=r(VBr,"fsmt"),VBr.forEach(t),oje=r(q4e," \u2014 "),G9=n(q4e,"A",{href:!0});var XBr=s(G9);rje=r(XBr,"FSMTConfig"),XBr.forEach(t),tje=r(q4e," (FairSeq Machine-Translation model)"),q4e.forEach(t),aje=i(v),vf=n(v,"LI",{});var N4e=s(vf);TY=n(N4e,"STRONG",{});var zBr=s(TY);nje=r(zBr,"funnel"),zBr.forEach(t),sje=r(N4e," \u2014 "),O9=n(N4e,"A",{href:!0});var QBr=s(O9);lje=r(QBr,"FunnelConfig"),QBr.forEach(t),ije=r(N4e," (Funnel Transformer model)"),N4e.forEach(t),dje=i(v),Tf=n(v,"LI",{});var j4e=s(Tf);MY=n(j4e,"STRONG",{});var WBr=s(MY);cje=r(WBr,"glpn"),WBr.forEach(t),mje=r(j4e," \u2014 "),V9=n(j4e,"A",{href:!0});var HBr=s(V9);fje=r(HBr,"GLPNConfig"),HBr.forEach(t),gje=r(j4e," (GLPN model)"),j4e.forEach(t),hje=i(v),Mf=n(v,"LI",{});var D4e=s(Mf);EY=n(D4e,"STRONG",{});var UBr=s(EY);uje=r(UBr,"gpt2"),UBr.forEach(t),pje=r(D4e," \u2014 "),X9=n(D4e,"A",{href:!0});var JBr=s(X9);_je=r(JBr,"GPT2Config"),JBr.forEach(t),bje=r(D4e," (OpenAI GPT-2 model)"),D4e.forEach(t),Fje=i(v),Ef=n(v,"LI",{});var G4e=s(Ef);CY=n(G4e,"STRONG",{});var YBr=s(CY);vje=r(YBr,"gpt_neo"),YBr.forEach(t),Tje=r(G4e," \u2014 "),z9=n(G4e,"A",{href:!0});var KBr=s(z9);Mje=r(KBr,"GPTNeoConfig"),KBr.forEach(t),Eje=r(G4e," (GPT Neo model)"),G4e.forEach(t),Cje=i(v),Cf=n(v,"LI",{});var O4e=s(Cf);wY=n(O4e,"STRONG",{});var ZBr=s(wY);wje=r(ZBr,"gptj"),ZBr.forEach(t),Aje=r(O4e," \u2014 "),Q9=n(O4e,"A",{href:!0});var ePr=s(Q9);yje=r(ePr,"GPTJConfig"),ePr.forEach(t),Lje=r(O4e," (GPT-J model)"),O4e.forEach(t),xje=i(v),wf=n(v,"LI",{});var V4e=s(wf);AY=n(V4e,"STRONG",{});var oPr=s(AY);kje=r(oPr,"hubert"),oPr.forEach(t),Sje=r(V4e," \u2014 "),W9=n(V4e,"A",{href:!0});var rPr=s(W9);Rje=r(rPr,"HubertConfig"),rPr.forEach(t),Bje=r(V4e," (Hubert model)"),V4e.forEach(t),Pje=i(v),Af=n(v,"LI",{});var X4e=s(Af);yY=n(X4e,"STRONG",{});var tPr=s(yY);$je=r(tPr,"ibert"),tPr.forEach(t),Ije=r(X4e," \u2014 "),H9=n(X4e,"A",{href:!0});var aPr=s(H9);qje=r(aPr,"IBertConfig"),aPr.forEach(t),Nje=r(X4e," (I-BERT model)"),X4e.forEach(t),jje=i(v),yf=n(v,"LI",{});var z4e=s(yf);LY=n(z4e,"STRONG",{});var nPr=s(LY);Dje=r(nPr,"imagegpt"),nPr.forEach(t),Gje=r(z4e," \u2014 "),U9=n(z4e,"A",{href:!0});var sPr=s(U9);Oje=r(sPr,"ImageGPTConfig"),sPr.forEach(t),Vje=r(z4e," (ImageGPT model)"),z4e.forEach(t),Xje=i(v),Lf=n(v,"LI",{});var Q4e=s(Lf);xY=n(Q4e,"STRONG",{});var lPr=s(xY);zje=r(lPr,"layoutlm"),lPr.forEach(t),Qje=r(Q4e," \u2014 "),J9=n(Q4e,"A",{href:!0});var iPr=s(J9);Wje=r(iPr,"LayoutLMConfig"),iPr.forEach(t),Hje=r(Q4e," (LayoutLM model)"),Q4e.forEach(t),Uje=i(v),xf=n(v,"LI",{});var W4e=s(xf);kY=n(W4e,"STRONG",{});var dPr=s(kY);Jje=r(dPr,"layoutlmv2"),dPr.forEach(t),Yje=r(W4e," \u2014 "),Y9=n(W4e,"A",{href:!0});var cPr=s(Y9);Kje=r(cPr,"LayoutLMv2Config"),cPr.forEach(t),Zje=r(W4e," (LayoutLMv2 model)"),W4e.forEach(t),eDe=i(v),kf=n(v,"LI",{});var H4e=s(kf);SY=n(H4e,"STRONG",{});var mPr=s(SY);oDe=r(mPr,"led"),mPr.forEach(t),rDe=r(H4e," \u2014 "),K9=n(H4e,"A",{href:!0});var fPr=s(K9);tDe=r(fPr,"LEDConfig"),fPr.forEach(t),aDe=r(H4e," (LED model)"),H4e.forEach(t),nDe=i(v),Sf=n(v,"LI",{});var U4e=s(Sf);RY=n(U4e,"STRONG",{});var gPr=s(RY);sDe=r(gPr,"longformer"),gPr.forEach(t),lDe=r(U4e," \u2014 "),Z9=n(U4e,"A",{href:!0});var hPr=s(Z9);iDe=r(hPr,"LongformerConfig"),hPr.forEach(t),dDe=r(U4e," (Longformer model)"),U4e.forEach(t),cDe=i(v),Rf=n(v,"LI",{});var J4e=s(Rf);BY=n(J4e,"STRONG",{});var uPr=s(BY);mDe=r(uPr,"luke"),uPr.forEach(t),fDe=r(J4e," \u2014 "),ex=n(J4e,"A",{href:!0});var pPr=s(ex);gDe=r(pPr,"LukeConfig"),pPr.forEach(t),hDe=r(J4e," (LUKE model)"),J4e.forEach(t),uDe=i(v),Bf=n(v,"LI",{});var Y4e=s(Bf);PY=n(Y4e,"STRONG",{});var _Pr=s(PY);pDe=r(_Pr,"lxmert"),_Pr.forEach(t),_De=r(Y4e," \u2014 "),ox=n(Y4e,"A",{href:!0});var bPr=s(ox);bDe=r(bPr,"LxmertConfig"),bPr.forEach(t),FDe=r(Y4e," (LXMERT model)"),Y4e.forEach(t),vDe=i(v),Pf=n(v,"LI",{});var K4e=s(Pf);$Y=n(K4e,"STRONG",{});var FPr=s($Y);TDe=r(FPr,"m2m_100"),FPr.forEach(t),MDe=r(K4e," \u2014 "),rx=n(K4e,"A",{href:!0});var vPr=s(rx);EDe=r(vPr,"M2M100Config"),vPr.forEach(t),CDe=r(K4e," (M2M100 model)"),K4e.forEach(t),wDe=i(v),$f=n(v,"LI",{});var Z4e=s($f);IY=n(Z4e,"STRONG",{});var TPr=s(IY);ADe=r(TPr,"marian"),TPr.forEach(t),yDe=r(Z4e," \u2014 "),tx=n(Z4e,"A",{href:!0});var MPr=s(tx);LDe=r(MPr,"MarianConfig"),MPr.forEach(t),xDe=r(Z4e," (Marian model)"),Z4e.forEach(t),kDe=i(v),If=n(v,"LI",{});var eEe=s(If);qY=n(eEe,"STRONG",{});var EPr=s(qY);SDe=r(EPr,"maskformer"),EPr.forEach(t),RDe=r(eEe," \u2014 "),ax=n(eEe,"A",{href:!0});var CPr=s(ax);BDe=r(CPr,"MaskFormerConfig"),CPr.forEach(t),PDe=r(eEe," (MaskFormer model)"),eEe.forEach(t),$De=i(v),qf=n(v,"LI",{});var oEe=s(qf);NY=n(oEe,"STRONG",{});var wPr=s(NY);IDe=r(wPr,"mbart"),wPr.forEach(t),qDe=r(oEe," \u2014 "),nx=n(oEe,"A",{href:!0});var APr=s(nx);NDe=r(APr,"MBartConfig"),APr.forEach(t),jDe=r(oEe," (mBART model)"),oEe.forEach(t),DDe=i(v),Nf=n(v,"LI",{});var rEe=s(Nf);jY=n(rEe,"STRONG",{});var yPr=s(jY);GDe=r(yPr,"megatron-bert"),yPr.forEach(t),ODe=r(rEe," \u2014 "),sx=n(rEe,"A",{href:!0});var LPr=s(sx);VDe=r(LPr,"MegatronBertConfig"),LPr.forEach(t),XDe=r(rEe," (MegatronBert model)"),rEe.forEach(t),zDe=i(v),jf=n(v,"LI",{});var tEe=s(jf);DY=n(tEe,"STRONG",{});var xPr=s(DY);QDe=r(xPr,"mobilebert"),xPr.forEach(t),WDe=r(tEe," \u2014 "),lx=n(tEe,"A",{href:!0});var kPr=s(lx);HDe=r(kPr,"MobileBertConfig"),kPr.forEach(t),UDe=r(tEe," (MobileBERT model)"),tEe.forEach(t),JDe=i(v),Df=n(v,"LI",{});var aEe=s(Df);GY=n(aEe,"STRONG",{});var SPr=s(GY);YDe=r(SPr,"mpnet"),SPr.forEach(t),KDe=r(aEe," \u2014 "),ix=n(aEe,"A",{href:!0});var RPr=s(ix);ZDe=r(RPr,"MPNetConfig"),RPr.forEach(t),eGe=r(aEe," (MPNet model)"),aEe.forEach(t),oGe=i(v),Gf=n(v,"LI",{});var nEe=s(Gf);OY=n(nEe,"STRONG",{});var BPr=s(OY);rGe=r(BPr,"mt5"),BPr.forEach(t),tGe=r(nEe," \u2014 "),dx=n(nEe,"A",{href:!0});var PPr=s(dx);aGe=r(PPr,"MT5Config"),PPr.forEach(t),nGe=r(nEe," (mT5 model)"),nEe.forEach(t),sGe=i(v),Of=n(v,"LI",{});var sEe=s(Of);VY=n(sEe,"STRONG",{});var $Pr=s(VY);lGe=r($Pr,"nystromformer"),$Pr.forEach(t),iGe=r(sEe," \u2014 "),cx=n(sEe,"A",{href:!0});var IPr=s(cx);dGe=r(IPr,"NystromformerConfig"),IPr.forEach(t),cGe=r(sEe," (Nystromformer model)"),sEe.forEach(t),mGe=i(v),Vf=n(v,"LI",{});var lEe=s(Vf);XY=n(lEe,"STRONG",{});var qPr=s(XY);fGe=r(qPr,"openai-gpt"),qPr.forEach(t),gGe=r(lEe," \u2014 "),mx=n(lEe,"A",{href:!0});var NPr=s(mx);hGe=r(NPr,"OpenAIGPTConfig"),NPr.forEach(t),uGe=r(lEe," (OpenAI GPT model)"),lEe.forEach(t),pGe=i(v),Xf=n(v,"LI",{});var iEe=s(Xf);zY=n(iEe,"STRONG",{});var jPr=s(zY);_Ge=r(jPr,"pegasus"),jPr.forEach(t),bGe=r(iEe," \u2014 "),fx=n(iEe,"A",{href:!0});var DPr=s(fx);FGe=r(DPr,"PegasusConfig"),DPr.forEach(t),vGe=r(iEe," (Pegasus model)"),iEe.forEach(t),TGe=i(v),zf=n(v,"LI",{});var dEe=s(zf);QY=n(dEe,"STRONG",{});var GPr=s(QY);MGe=r(GPr,"perceiver"),GPr.forEach(t),EGe=r(dEe," \u2014 "),gx=n(dEe,"A",{href:!0});var OPr=s(gx);CGe=r(OPr,"PerceiverConfig"),OPr.forEach(t),wGe=r(dEe," (Perceiver model)"),dEe.forEach(t),AGe=i(v),Qf=n(v,"LI",{});var cEe=s(Qf);WY=n(cEe,"STRONG",{});var VPr=s(WY);yGe=r(VPr,"plbart"),VPr.forEach(t),LGe=r(cEe," \u2014 "),hx=n(cEe,"A",{href:!0});var XPr=s(hx);xGe=r(XPr,"PLBartConfig"),XPr.forEach(t),kGe=r(cEe," (PLBart model)"),cEe.forEach(t),SGe=i(v),Wf=n(v,"LI",{});var mEe=s(Wf);HY=n(mEe,"STRONG",{});var zPr=s(HY);RGe=r(zPr,"poolformer"),zPr.forEach(t),BGe=r(mEe," \u2014 "),ux=n(mEe,"A",{href:!0});var QPr=s(ux);PGe=r(QPr,"PoolFormerConfig"),QPr.forEach(t),$Ge=r(mEe," (PoolFormer model)"),mEe.forEach(t),IGe=i(v),Hf=n(v,"LI",{});var fEe=s(Hf);UY=n(fEe,"STRONG",{});var WPr=s(UY);qGe=r(WPr,"prophetnet"),WPr.forEach(t),NGe=r(fEe," \u2014 "),px=n(fEe,"A",{href:!0});var HPr=s(px);jGe=r(HPr,"ProphetNetConfig"),HPr.forEach(t),DGe=r(fEe," (ProphetNet model)"),fEe.forEach(t),GGe=i(v),Uf=n(v,"LI",{});var gEe=s(Uf);JY=n(gEe,"STRONG",{});var UPr=s(JY);OGe=r(UPr,"qdqbert"),UPr.forEach(t),VGe=r(gEe," \u2014 "),_x=n(gEe,"A",{href:!0});var JPr=s(_x);XGe=r(JPr,"QDQBertConfig"),JPr.forEach(t),zGe=r(gEe," (QDQBert model)"),gEe.forEach(t),QGe=i(v),Jf=n(v,"LI",{});var hEe=s(Jf);YY=n(hEe,"STRONG",{});var YPr=s(YY);WGe=r(YPr,"rag"),YPr.forEach(t),HGe=r(hEe," \u2014 "),bx=n(hEe,"A",{href:!0});var KPr=s(bx);UGe=r(KPr,"RagConfig"),KPr.forEach(t),JGe=r(hEe," (RAG model)"),hEe.forEach(t),YGe=i(v),Yf=n(v,"LI",{});var uEe=s(Yf);KY=n(uEe,"STRONG",{});var ZPr=s(KY);KGe=r(ZPr,"realm"),ZPr.forEach(t),ZGe=r(uEe," \u2014 "),Fx=n(uEe,"A",{href:!0});var e$r=s(Fx);eOe=r(e$r,"RealmConfig"),e$r.forEach(t),oOe=r(uEe," (Realm model)"),uEe.forEach(t),rOe=i(v),Kf=n(v,"LI",{});var pEe=s(Kf);ZY=n(pEe,"STRONG",{});var o$r=s(ZY);tOe=r(o$r,"reformer"),o$r.forEach(t),aOe=r(pEe," \u2014 "),vx=n(pEe,"A",{href:!0});var r$r=s(vx);nOe=r(r$r,"ReformerConfig"),r$r.forEach(t),sOe=r(pEe," (Reformer model)"),pEe.forEach(t),lOe=i(v),Zf=n(v,"LI",{});var _Ee=s(Zf);eK=n(_Ee,"STRONG",{});var t$r=s(eK);iOe=r(t$r,"rembert"),t$r.forEach(t),dOe=r(_Ee," \u2014 "),Tx=n(_Ee,"A",{href:!0});var a$r=s(Tx);cOe=r(a$r,"RemBertConfig"),a$r.forEach(t),mOe=r(_Ee," (RemBERT model)"),_Ee.forEach(t),fOe=i(v),eg=n(v,"LI",{});var bEe=s(eg);oK=n(bEe,"STRONG",{});var n$r=s(oK);gOe=r(n$r,"resnet"),n$r.forEach(t),hOe=r(bEe," \u2014 "),Mx=n(bEe,"A",{href:!0});var s$r=s(Mx);uOe=r(s$r,"ResNetConfig"),s$r.forEach(t),pOe=r(bEe," (ResNet model)"),bEe.forEach(t),_Oe=i(v),og=n(v,"LI",{});var FEe=s(og);rK=n(FEe,"STRONG",{});var l$r=s(rK);bOe=r(l$r,"retribert"),l$r.forEach(t),FOe=r(FEe," \u2014 "),Ex=n(FEe,"A",{href:!0});var i$r=s(Ex);vOe=r(i$r,"RetriBertConfig"),i$r.forEach(t),TOe=r(FEe," (RetriBERT model)"),FEe.forEach(t),MOe=i(v),rg=n(v,"LI",{});var vEe=s(rg);tK=n(vEe,"STRONG",{});var d$r=s(tK);EOe=r(d$r,"roberta"),d$r.forEach(t),COe=r(vEe," \u2014 "),Cx=n(vEe,"A",{href:!0});var c$r=s(Cx);wOe=r(c$r,"RobertaConfig"),c$r.forEach(t),AOe=r(vEe," (RoBERTa model)"),vEe.forEach(t),yOe=i(v),tg=n(v,"LI",{});var TEe=s(tg);aK=n(TEe,"STRONG",{});var m$r=s(aK);LOe=r(m$r,"roformer"),m$r.forEach(t),xOe=r(TEe," \u2014 "),wx=n(TEe,"A",{href:!0});var f$r=s(wx);kOe=r(f$r,"RoFormerConfig"),f$r.forEach(t),SOe=r(TEe," (RoFormer model)"),TEe.forEach(t),ROe=i(v),ag=n(v,"LI",{});var MEe=s(ag);nK=n(MEe,"STRONG",{});var g$r=s(nK);BOe=r(g$r,"segformer"),g$r.forEach(t),POe=r(MEe," \u2014 "),Ax=n(MEe,"A",{href:!0});var h$r=s(Ax);$Oe=r(h$r,"SegformerConfig"),h$r.forEach(t),IOe=r(MEe," (SegFormer model)"),MEe.forEach(t),qOe=i(v),ng=n(v,"LI",{});var EEe=s(ng);sK=n(EEe,"STRONG",{});var u$r=s(sK);NOe=r(u$r,"sew"),u$r.forEach(t),jOe=r(EEe," \u2014 "),yx=n(EEe,"A",{href:!0});var p$r=s(yx);DOe=r(p$r,"SEWConfig"),p$r.forEach(t),GOe=r(EEe," (SEW model)"),EEe.forEach(t),OOe=i(v),sg=n(v,"LI",{});var CEe=s(sg);lK=n(CEe,"STRONG",{});var _$r=s(lK);VOe=r(_$r,"sew-d"),_$r.forEach(t),XOe=r(CEe," \u2014 "),Lx=n(CEe,"A",{href:!0});var b$r=s(Lx);zOe=r(b$r,"SEWDConfig"),b$r.forEach(t),QOe=r(CEe," (SEW-D model)"),CEe.forEach(t),WOe=i(v),lg=n(v,"LI",{});var wEe=s(lg);iK=n(wEe,"STRONG",{});var F$r=s(iK);HOe=r(F$r,"speech-encoder-decoder"),F$r.forEach(t),UOe=r(wEe," \u2014 "),xx=n(wEe,"A",{href:!0});var v$r=s(xx);JOe=r(v$r,"SpeechEncoderDecoderConfig"),v$r.forEach(t),YOe=r(wEe," (Speech Encoder decoder model)"),wEe.forEach(t),KOe=i(v),ig=n(v,"LI",{});var AEe=s(ig);dK=n(AEe,"STRONG",{});var T$r=s(dK);ZOe=r(T$r,"speech_to_text"),T$r.forEach(t),eVe=r(AEe," \u2014 "),kx=n(AEe,"A",{href:!0});var M$r=s(kx);oVe=r(M$r,"Speech2TextConfig"),M$r.forEach(t),rVe=r(AEe," (Speech2Text model)"),AEe.forEach(t),tVe=i(v),dg=n(v,"LI",{});var yEe=s(dg);cK=n(yEe,"STRONG",{});var E$r=s(cK);aVe=r(E$r,"speech_to_text_2"),E$r.forEach(t),nVe=r(yEe," \u2014 "),Sx=n(yEe,"A",{href:!0});var C$r=s(Sx);sVe=r(C$r,"Speech2Text2Config"),C$r.forEach(t),lVe=r(yEe," (Speech2Text2 model)"),yEe.forEach(t),iVe=i(v),cg=n(v,"LI",{});var LEe=s(cg);mK=n(LEe,"STRONG",{});var w$r=s(mK);dVe=r(w$r,"splinter"),w$r.forEach(t),cVe=r(LEe," \u2014 "),Rx=n(LEe,"A",{href:!0});var A$r=s(Rx);mVe=r(A$r,"SplinterConfig"),A$r.forEach(t),fVe=r(LEe," (Splinter model)"),LEe.forEach(t),gVe=i(v),mg=n(v,"LI",{});var xEe=s(mg);fK=n(xEe,"STRONG",{});var y$r=s(fK);hVe=r(y$r,"squeezebert"),y$r.forEach(t),uVe=r(xEe," \u2014 "),Bx=n(xEe,"A",{href:!0});var L$r=s(Bx);pVe=r(L$r,"SqueezeBertConfig"),L$r.forEach(t),_Ve=r(xEe," (SqueezeBERT model)"),xEe.forEach(t),bVe=i(v),fg=n(v,"LI",{});var kEe=s(fg);gK=n(kEe,"STRONG",{});var x$r=s(gK);FVe=r(x$r,"swin"),x$r.forEach(t),vVe=r(kEe," \u2014 "),Px=n(kEe,"A",{href:!0});var k$r=s(Px);TVe=r(k$r,"SwinConfig"),k$r.forEach(t),MVe=r(kEe," (Swin model)"),kEe.forEach(t),EVe=i(v),gg=n(v,"LI",{});var SEe=s(gg);hK=n(SEe,"STRONG",{});var S$r=s(hK);CVe=r(S$r,"t5"),S$r.forEach(t),wVe=r(SEe," \u2014 "),$x=n(SEe,"A",{href:!0});var R$r=s($x);AVe=r(R$r,"T5Config"),R$r.forEach(t),yVe=r(SEe," (T5 model)"),SEe.forEach(t),LVe=i(v),hg=n(v,"LI",{});var REe=s(hg);uK=n(REe,"STRONG",{});var B$r=s(uK);xVe=r(B$r,"tapas"),B$r.forEach(t),kVe=r(REe," \u2014 "),Ix=n(REe,"A",{href:!0});var P$r=s(Ix);SVe=r(P$r,"TapasConfig"),P$r.forEach(t),RVe=r(REe," (TAPAS model)"),REe.forEach(t),BVe=i(v),ug=n(v,"LI",{});var BEe=s(ug);pK=n(BEe,"STRONG",{});var $$r=s(pK);PVe=r($$r,"transfo-xl"),$$r.forEach(t),$Ve=r(BEe," \u2014 "),qx=n(BEe,"A",{href:!0});var I$r=s(qx);IVe=r(I$r,"TransfoXLConfig"),I$r.forEach(t),qVe=r(BEe," (Transformer-XL model)"),BEe.forEach(t),NVe=i(v),pg=n(v,"LI",{});var PEe=s(pg);_K=n(PEe,"STRONG",{});var q$r=s(_K);jVe=r(q$r,"trocr"),q$r.forEach(t),DVe=r(PEe," \u2014 "),Nx=n(PEe,"A",{href:!0});var N$r=s(Nx);GVe=r(N$r,"TrOCRConfig"),N$r.forEach(t),OVe=r(PEe," (TrOCR model)"),PEe.forEach(t),VVe=i(v),_g=n(v,"LI",{});var $Ee=s(_g);bK=n($Ee,"STRONG",{});var j$r=s(bK);XVe=r(j$r,"unispeech"),j$r.forEach(t),zVe=r($Ee," \u2014 "),jx=n($Ee,"A",{href:!0});var D$r=s(jx);QVe=r(D$r,"UniSpeechConfig"),D$r.forEach(t),WVe=r($Ee," (UniSpeech model)"),$Ee.forEach(t),HVe=i(v),bg=n(v,"LI",{});var IEe=s(bg);FK=n(IEe,"STRONG",{});var G$r=s(FK);UVe=r(G$r,"unispeech-sat"),G$r.forEach(t),JVe=r(IEe," \u2014 "),Dx=n(IEe,"A",{href:!0});var O$r=s(Dx);YVe=r(O$r,"UniSpeechSatConfig"),O$r.forEach(t),KVe=r(IEe," (UniSpeechSat model)"),IEe.forEach(t),ZVe=i(v),Fg=n(v,"LI",{});var qEe=s(Fg);vK=n(qEe,"STRONG",{});var V$r=s(vK);eXe=r(V$r,"van"),V$r.forEach(t),oXe=r(qEe," \u2014 "),Gx=n(qEe,"A",{href:!0});var X$r=s(Gx);rXe=r(X$r,"VanConfig"),X$r.forEach(t),tXe=r(qEe," (VAN model)"),qEe.forEach(t),aXe=i(v),vg=n(v,"LI",{});var NEe=s(vg);TK=n(NEe,"STRONG",{});var z$r=s(TK);nXe=r(z$r,"vilt"),z$r.forEach(t),sXe=r(NEe," \u2014 "),Ox=n(NEe,"A",{href:!0});var Q$r=s(Ox);lXe=r(Q$r,"ViltConfig"),Q$r.forEach(t),iXe=r(NEe," (ViLT model)"),NEe.forEach(t),dXe=i(v),Tg=n(v,"LI",{});var jEe=s(Tg);MK=n(jEe,"STRONG",{});var W$r=s(MK);cXe=r(W$r,"vision-encoder-decoder"),W$r.forEach(t),mXe=r(jEe," \u2014 "),Vx=n(jEe,"A",{href:!0});var H$r=s(Vx);fXe=r(H$r,"VisionEncoderDecoderConfig"),H$r.forEach(t),gXe=r(jEe," (Vision Encoder decoder model)"),jEe.forEach(t),hXe=i(v),Mg=n(v,"LI",{});var DEe=s(Mg);EK=n(DEe,"STRONG",{});var U$r=s(EK);uXe=r(U$r,"vision-text-dual-encoder"),U$r.forEach(t),pXe=r(DEe," \u2014 "),Xx=n(DEe,"A",{href:!0});var J$r=s(Xx);_Xe=r(J$r,"VisionTextDualEncoderConfig"),J$r.forEach(t),bXe=r(DEe," (VisionTextDualEncoder model)"),DEe.forEach(t),FXe=i(v),Eg=n(v,"LI",{});var GEe=s(Eg);CK=n(GEe,"STRONG",{});var Y$r=s(CK);vXe=r(Y$r,"visual_bert"),Y$r.forEach(t),TXe=r(GEe," \u2014 "),zx=n(GEe,"A",{href:!0});var K$r=s(zx);MXe=r(K$r,"VisualBertConfig"),K$r.forEach(t),EXe=r(GEe," (VisualBert model)"),GEe.forEach(t),CXe=i(v),Cg=n(v,"LI",{});var OEe=s(Cg);wK=n(OEe,"STRONG",{});var Z$r=s(wK);wXe=r(Z$r,"vit"),Z$r.forEach(t),AXe=r(OEe," \u2014 "),Qx=n(OEe,"A",{href:!0});var eIr=s(Qx);yXe=r(eIr,"ViTConfig"),eIr.forEach(t),LXe=r(OEe," (ViT model)"),OEe.forEach(t),xXe=i(v),wg=n(v,"LI",{});var VEe=s(wg);AK=n(VEe,"STRONG",{});var oIr=s(AK);kXe=r(oIr,"vit_mae"),oIr.forEach(t),SXe=r(VEe," \u2014 "),Wx=n(VEe,"A",{href:!0});var rIr=s(Wx);RXe=r(rIr,"ViTMAEConfig"),rIr.forEach(t),BXe=r(VEe," (ViTMAE model)"),VEe.forEach(t),PXe=i(v),Ag=n(v,"LI",{});var XEe=s(Ag);yK=n(XEe,"STRONG",{});var tIr=s(yK);$Xe=r(tIr,"wav2vec2"),tIr.forEach(t),IXe=r(XEe," \u2014 "),Hx=n(XEe,"A",{href:!0});var aIr=s(Hx);qXe=r(aIr,"Wav2Vec2Config"),aIr.forEach(t),NXe=r(XEe," (Wav2Vec2 model)"),XEe.forEach(t),jXe=i(v),yg=n(v,"LI",{});var zEe=s(yg);LK=n(zEe,"STRONG",{});var nIr=s(LK);DXe=r(nIr,"wavlm"),nIr.forEach(t),GXe=r(zEe," \u2014 "),Ux=n(zEe,"A",{href:!0});var sIr=s(Ux);OXe=r(sIr,"WavLMConfig"),sIr.forEach(t),VXe=r(zEe," (WavLM model)"),zEe.forEach(t),XXe=i(v),Lg=n(v,"LI",{});var QEe=s(Lg);xK=n(QEe,"STRONG",{});var lIr=s(xK);zXe=r(lIr,"xglm"),lIr.forEach(t),QXe=r(QEe," \u2014 "),Jx=n(QEe,"A",{href:!0});var iIr=s(Jx);WXe=r(iIr,"XGLMConfig"),iIr.forEach(t),HXe=r(QEe," (XGLM model)"),QEe.forEach(t),UXe=i(v),xg=n(v,"LI",{});var WEe=s(xg);kK=n(WEe,"STRONG",{});var dIr=s(kK);JXe=r(dIr,"xlm"),dIr.forEach(t),YXe=r(WEe," \u2014 "),Yx=n(WEe,"A",{href:!0});var cIr=s(Yx);KXe=r(cIr,"XLMConfig"),cIr.forEach(t),ZXe=r(WEe," (XLM model)"),WEe.forEach(t),eze=i(v),kg=n(v,"LI",{});var HEe=s(kg);SK=n(HEe,"STRONG",{});var mIr=s(SK);oze=r(mIr,"xlm-prophetnet"),mIr.forEach(t),rze=r(HEe," \u2014 "),Kx=n(HEe,"A",{href:!0});var fIr=s(Kx);tze=r(fIr,"XLMProphetNetConfig"),fIr.forEach(t),aze=r(HEe," (XLMProphetNet model)"),HEe.forEach(t),nze=i(v),Sg=n(v,"LI",{});var UEe=s(Sg);RK=n(UEe,"STRONG",{});var gIr=s(RK);sze=r(gIr,"xlm-roberta"),gIr.forEach(t),lze=r(UEe," \u2014 "),Zx=n(UEe,"A",{href:!0});var hIr=s(Zx);ize=r(hIr,"XLMRobertaConfig"),hIr.forEach(t),dze=r(UEe," (XLM-RoBERTa model)"),UEe.forEach(t),cze=i(v),Rg=n(v,"LI",{});var JEe=s(Rg);BK=n(JEe,"STRONG",{});var uIr=s(BK);mze=r(uIr,"xlm-roberta-xl"),uIr.forEach(t),fze=r(JEe," \u2014 "),ek=n(JEe,"A",{href:!0});var pIr=s(ek);gze=r(pIr,"XLMRobertaXLConfig"),pIr.forEach(t),hze=r(JEe," (XLM-RoBERTa-XL model)"),JEe.forEach(t),uze=i(v),Bg=n(v,"LI",{});var YEe=s(Bg);PK=n(YEe,"STRONG",{});var _Ir=s(PK);pze=r(_Ir,"xlnet"),_Ir.forEach(t),_ze=r(YEe," \u2014 "),ok=n(YEe,"A",{href:!0});var bIr=s(ok);bze=r(bIr,"XLNetConfig"),bIr.forEach(t),Fze=r(YEe," (XLNet model)"),YEe.forEach(t),vze=i(v),Pg=n(v,"LI",{});var KEe=s(Pg);$K=n(KEe,"STRONG",{});var FIr=s($K);Tze=r(FIr,"yoso"),FIr.forEach(t),Mze=r(KEe," \u2014 "),rk=n(KEe,"A",{href:!0});var vIr=s(rk);Eze=r(vIr,"YosoConfig"),vIr.forEach(t),Cze=r(KEe," (YOSO model)"),KEe.forEach(t),v.forEach(t),wze=i(ga),IK=n(ga,"P",{});var TIr=s(IK);Aze=r(TIr,"Examples:"),TIr.forEach(t),yze=i(ga),f(Cw.$$.fragment,ga),ga.forEach(t),Lze=i(Os),$g=n(Os,"DIV",{class:!0});var NBe=s($g);f(ww.$$.fragment,NBe),xze=i(NBe),qK=n(NBe,"P",{});var MIr=s(qK);kze=r(MIr,"Register a new configuration for this class."),MIr.forEach(t),NBe.forEach(t),Os.forEach(t),ISe=i(c),Qi=n(c,"H2",{class:!0});var jBe=s(Qi);Ig=n(jBe,"A",{id:!0,class:!0,href:!0});var EIr=s(Ig);NK=n(EIr,"SPAN",{});var CIr=s(NK);f(Aw.$$.fragment,CIr),CIr.forEach(t),EIr.forEach(t),Sze=i(jBe),jK=n(jBe,"SPAN",{});var wIr=s(jK);Rze=r(wIr,"AutoTokenizer"),wIr.forEach(t),jBe.forEach(t),qSe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);f(yw.$$.fragment,Vs),Bze=i(Vs),Lw=n(Vs,"P",{});var DBe=s(Lw);Pze=r(DBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tk=n(DBe,"A",{href:!0});var AIr=s(tk);$ze=r(AIr,"AutoTokenizer.from_pretrained()"),AIr.forEach(t),Ize=r(DBe," class method."),DBe.forEach(t),qze=i(Vs),xw=n(Vs,"P",{});var GBe=s(xw);Nze=r(GBe,"This class cannot be instantiated directly using "),DK=n(GBe,"CODE",{});var yIr=s(DK);jze=r(yIr,"__init__()"),yIr.forEach(t),Dze=r(GBe," (throws an error)."),GBe.forEach(t),Gze=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);f(kw.$$.fragment,ha),Oze=i(ha),GK=n(ha,"P",{});var LIr=s(GK);Vze=r(LIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),LIr.forEach(t),Xze=i(ha),Oa=n(ha,"P",{});var u3=s(Oa);zze=r(u3,"The tokenizer class to instantiate is selected based on the "),OK=n(u3,"CODE",{});var xIr=s(OK);Qze=r(xIr,"model_type"),xIr.forEach(t),Wze=r(u3,` property of the config object (either
passed as an argument or loaded from `),VK=n(u3,"CODE",{});var kIr=s(VK);Hze=r(kIr,"pretrained_model_name_or_path"),kIr.forEach(t),Uze=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XK=n(u3,"CODE",{});var SIr=s(XK);Jze=r(SIr,"pretrained_model_name_or_path"),SIr.forEach(t),Yze=r(u3,":"),u3.forEach(t),Kze=i(ha),C=n(ha,"UL",{});var w=s(C);Qn=n(w,"LI",{});var d8=s(Qn);zK=n(d8,"STRONG",{});var RIr=s(zK);Zze=r(RIr,"albert"),RIr.forEach(t),eQe=r(d8," \u2014 "),ak=n(d8,"A",{href:!0});var BIr=s(ak);oQe=r(BIr,"AlbertTokenizer"),BIr.forEach(t),rQe=r(d8," or "),nk=n(d8,"A",{href:!0});var PIr=s(nk);tQe=r(PIr,"AlbertTokenizerFast"),PIr.forEach(t),aQe=r(d8," (ALBERT model)"),d8.forEach(t),nQe=i(w),Wn=n(w,"LI",{});var c8=s(Wn);QK=n(c8,"STRONG",{});var $Ir=s(QK);sQe=r($Ir,"bart"),$Ir.forEach(t),lQe=r(c8," \u2014 "),sk=n(c8,"A",{href:!0});var IIr=s(sk);iQe=r(IIr,"BartTokenizer"),IIr.forEach(t),dQe=r(c8," or "),lk=n(c8,"A",{href:!0});var qIr=s(lk);cQe=r(qIr,"BartTokenizerFast"),qIr.forEach(t),mQe=r(c8," (BART model)"),c8.forEach(t),fQe=i(w),Hn=n(w,"LI",{});var m8=s(Hn);WK=n(m8,"STRONG",{});var NIr=s(WK);gQe=r(NIr,"barthez"),NIr.forEach(t),hQe=r(m8," \u2014 "),ik=n(m8,"A",{href:!0});var jIr=s(ik);uQe=r(jIr,"BarthezTokenizer"),jIr.forEach(t),pQe=r(m8," or "),dk=n(m8,"A",{href:!0});var DIr=s(dk);_Qe=r(DIr,"BarthezTokenizerFast"),DIr.forEach(t),bQe=r(m8," (BARThez model)"),m8.forEach(t),FQe=i(w),qg=n(w,"LI",{});var ZEe=s(qg);HK=n(ZEe,"STRONG",{});var GIr=s(HK);vQe=r(GIr,"bartpho"),GIr.forEach(t),TQe=r(ZEe," \u2014 "),ck=n(ZEe,"A",{href:!0});var OIr=s(ck);MQe=r(OIr,"BartphoTokenizer"),OIr.forEach(t),EQe=r(ZEe," (BARTpho model)"),ZEe.forEach(t),CQe=i(w),Un=n(w,"LI",{});var f8=s(Un);UK=n(f8,"STRONG",{});var VIr=s(UK);wQe=r(VIr,"bert"),VIr.forEach(t),AQe=r(f8," \u2014 "),mk=n(f8,"A",{href:!0});var XIr=s(mk);yQe=r(XIr,"BertTokenizer"),XIr.forEach(t),LQe=r(f8," or "),fk=n(f8,"A",{href:!0});var zIr=s(fk);xQe=r(zIr,"BertTokenizerFast"),zIr.forEach(t),kQe=r(f8," (BERT model)"),f8.forEach(t),SQe=i(w),Ng=n(w,"LI",{});var eCe=s(Ng);JK=n(eCe,"STRONG",{});var QIr=s(JK);RQe=r(QIr,"bert-generation"),QIr.forEach(t),BQe=r(eCe," \u2014 "),gk=n(eCe,"A",{href:!0});var WIr=s(gk);PQe=r(WIr,"BertGenerationTokenizer"),WIr.forEach(t),$Qe=r(eCe," (Bert Generation model)"),eCe.forEach(t),IQe=i(w),jg=n(w,"LI",{});var oCe=s(jg);YK=n(oCe,"STRONG",{});var HIr=s(YK);qQe=r(HIr,"bert-japanese"),HIr.forEach(t),NQe=r(oCe," \u2014 "),hk=n(oCe,"A",{href:!0});var UIr=s(hk);jQe=r(UIr,"BertJapaneseTokenizer"),UIr.forEach(t),DQe=r(oCe," (BertJapanese model)"),oCe.forEach(t),GQe=i(w),Dg=n(w,"LI",{});var rCe=s(Dg);KK=n(rCe,"STRONG",{});var JIr=s(KK);OQe=r(JIr,"bertweet"),JIr.forEach(t),VQe=r(rCe," \u2014 "),uk=n(rCe,"A",{href:!0});var YIr=s(uk);XQe=r(YIr,"BertweetTokenizer"),YIr.forEach(t),zQe=r(rCe," (Bertweet model)"),rCe.forEach(t),QQe=i(w),Jn=n(w,"LI",{});var g8=s(Jn);ZK=n(g8,"STRONG",{});var KIr=s(ZK);WQe=r(KIr,"big_bird"),KIr.forEach(t),HQe=r(g8," \u2014 "),pk=n(g8,"A",{href:!0});var ZIr=s(pk);UQe=r(ZIr,"BigBirdTokenizer"),ZIr.forEach(t),JQe=r(g8," or "),_k=n(g8,"A",{href:!0});var eqr=s(_k);YQe=r(eqr,"BigBirdTokenizerFast"),eqr.forEach(t),KQe=r(g8," (BigBird model)"),g8.forEach(t),ZQe=i(w),Yn=n(w,"LI",{});var h8=s(Yn);eZ=n(h8,"STRONG",{});var oqr=s(eZ);eWe=r(oqr,"bigbird_pegasus"),oqr.forEach(t),oWe=r(h8," \u2014 "),bk=n(h8,"A",{href:!0});var rqr=s(bk);rWe=r(rqr,"PegasusTokenizer"),rqr.forEach(t),tWe=r(h8," or "),Fk=n(h8,"A",{href:!0});var tqr=s(Fk);aWe=r(tqr,"PegasusTokenizerFast"),tqr.forEach(t),nWe=r(h8," (BigBirdPegasus model)"),h8.forEach(t),sWe=i(w),Kn=n(w,"LI",{});var u8=s(Kn);oZ=n(u8,"STRONG",{});var aqr=s(oZ);lWe=r(aqr,"blenderbot"),aqr.forEach(t),iWe=r(u8," \u2014 "),vk=n(u8,"A",{href:!0});var nqr=s(vk);dWe=r(nqr,"BlenderbotTokenizer"),nqr.forEach(t),cWe=r(u8," or "),Tk=n(u8,"A",{href:!0});var sqr=s(Tk);mWe=r(sqr,"BlenderbotTokenizerFast"),sqr.forEach(t),fWe=r(u8," (Blenderbot model)"),u8.forEach(t),gWe=i(w),Gg=n(w,"LI",{});var tCe=s(Gg);rZ=n(tCe,"STRONG",{});var lqr=s(rZ);hWe=r(lqr,"blenderbot-small"),lqr.forEach(t),uWe=r(tCe," \u2014 "),Mk=n(tCe,"A",{href:!0});var iqr=s(Mk);pWe=r(iqr,"BlenderbotSmallTokenizer"),iqr.forEach(t),_We=r(tCe," (BlenderbotSmall model)"),tCe.forEach(t),bWe=i(w),Og=n(w,"LI",{});var aCe=s(Og);tZ=n(aCe,"STRONG",{});var dqr=s(tZ);FWe=r(dqr,"byt5"),dqr.forEach(t),vWe=r(aCe," \u2014 "),Ek=n(aCe,"A",{href:!0});var cqr=s(Ek);TWe=r(cqr,"ByT5Tokenizer"),cqr.forEach(t),MWe=r(aCe," (ByT5 model)"),aCe.forEach(t),EWe=i(w),Zn=n(w,"LI",{});var p8=s(Zn);aZ=n(p8,"STRONG",{});var mqr=s(aZ);CWe=r(mqr,"camembert"),mqr.forEach(t),wWe=r(p8," \u2014 "),Ck=n(p8,"A",{href:!0});var fqr=s(Ck);AWe=r(fqr,"CamembertTokenizer"),fqr.forEach(t),yWe=r(p8," or "),wk=n(p8,"A",{href:!0});var gqr=s(wk);LWe=r(gqr,"CamembertTokenizerFast"),gqr.forEach(t),xWe=r(p8," (CamemBERT model)"),p8.forEach(t),kWe=i(w),Vg=n(w,"LI",{});var nCe=s(Vg);nZ=n(nCe,"STRONG",{});var hqr=s(nZ);SWe=r(hqr,"canine"),hqr.forEach(t),RWe=r(nCe," \u2014 "),Ak=n(nCe,"A",{href:!0});var uqr=s(Ak);BWe=r(uqr,"CanineTokenizer"),uqr.forEach(t),PWe=r(nCe," (Canine model)"),nCe.forEach(t),$We=i(w),es=n(w,"LI",{});var _8=s(es);sZ=n(_8,"STRONG",{});var pqr=s(sZ);IWe=r(pqr,"clip"),pqr.forEach(t),qWe=r(_8," \u2014 "),yk=n(_8,"A",{href:!0});var _qr=s(yk);NWe=r(_qr,"CLIPTokenizer"),_qr.forEach(t),jWe=r(_8," or "),Lk=n(_8,"A",{href:!0});var bqr=s(Lk);DWe=r(bqr,"CLIPTokenizerFast"),bqr.forEach(t),GWe=r(_8," (CLIP model)"),_8.forEach(t),OWe=i(w),os=n(w,"LI",{});var b8=s(os);lZ=n(b8,"STRONG",{});var Fqr=s(lZ);VWe=r(Fqr,"convbert"),Fqr.forEach(t),XWe=r(b8," \u2014 "),xk=n(b8,"A",{href:!0});var vqr=s(xk);zWe=r(vqr,"ConvBertTokenizer"),vqr.forEach(t),QWe=r(b8," or "),kk=n(b8,"A",{href:!0});var Tqr=s(kk);WWe=r(Tqr,"ConvBertTokenizerFast"),Tqr.forEach(t),HWe=r(b8," (ConvBERT model)"),b8.forEach(t),UWe=i(w),rs=n(w,"LI",{});var F8=s(rs);iZ=n(F8,"STRONG",{});var Mqr=s(iZ);JWe=r(Mqr,"cpm"),Mqr.forEach(t),YWe=r(F8," \u2014 "),Sk=n(F8,"A",{href:!0});var Eqr=s(Sk);KWe=r(Eqr,"CpmTokenizer"),Eqr.forEach(t),ZWe=r(F8," or "),dZ=n(F8,"CODE",{});var Cqr=s(dZ);eHe=r(Cqr,"CpmTokenizerFast"),Cqr.forEach(t),oHe=r(F8," (CPM model)"),F8.forEach(t),rHe=i(w),Xg=n(w,"LI",{});var sCe=s(Xg);cZ=n(sCe,"STRONG",{});var wqr=s(cZ);tHe=r(wqr,"ctrl"),wqr.forEach(t),aHe=r(sCe," \u2014 "),Rk=n(sCe,"A",{href:!0});var Aqr=s(Rk);nHe=r(Aqr,"CTRLTokenizer"),Aqr.forEach(t),sHe=r(sCe," (CTRL model)"),sCe.forEach(t),lHe=i(w),ts=n(w,"LI",{});var v8=s(ts);mZ=n(v8,"STRONG",{});var yqr=s(mZ);iHe=r(yqr,"deberta"),yqr.forEach(t),dHe=r(v8," \u2014 "),Bk=n(v8,"A",{href:!0});var Lqr=s(Bk);cHe=r(Lqr,"DebertaTokenizer"),Lqr.forEach(t),mHe=r(v8," or "),Pk=n(v8,"A",{href:!0});var xqr=s(Pk);fHe=r(xqr,"DebertaTokenizerFast"),xqr.forEach(t),gHe=r(v8," (DeBERTa model)"),v8.forEach(t),hHe=i(w),zg=n(w,"LI",{});var lCe=s(zg);fZ=n(lCe,"STRONG",{});var kqr=s(fZ);uHe=r(kqr,"deberta-v2"),kqr.forEach(t),pHe=r(lCe," \u2014 "),$k=n(lCe,"A",{href:!0});var Sqr=s($k);_He=r(Sqr,"DebertaV2Tokenizer"),Sqr.forEach(t),bHe=r(lCe," (DeBERTa-v2 model)"),lCe.forEach(t),FHe=i(w),as=n(w,"LI",{});var T8=s(as);gZ=n(T8,"STRONG",{});var Rqr=s(gZ);vHe=r(Rqr,"distilbert"),Rqr.forEach(t),THe=r(T8," \u2014 "),Ik=n(T8,"A",{href:!0});var Bqr=s(Ik);MHe=r(Bqr,"DistilBertTokenizer"),Bqr.forEach(t),EHe=r(T8," or "),qk=n(T8,"A",{href:!0});var Pqr=s(qk);CHe=r(Pqr,"DistilBertTokenizerFast"),Pqr.forEach(t),wHe=r(T8," (DistilBERT model)"),T8.forEach(t),AHe=i(w),ns=n(w,"LI",{});var M8=s(ns);hZ=n(M8,"STRONG",{});var $qr=s(hZ);yHe=r($qr,"dpr"),$qr.forEach(t),LHe=r(M8," \u2014 "),Nk=n(M8,"A",{href:!0});var Iqr=s(Nk);xHe=r(Iqr,"DPRQuestionEncoderTokenizer"),Iqr.forEach(t),kHe=r(M8," or "),jk=n(M8,"A",{href:!0});var qqr=s(jk);SHe=r(qqr,"DPRQuestionEncoderTokenizerFast"),qqr.forEach(t),RHe=r(M8," (DPR model)"),M8.forEach(t),BHe=i(w),ss=n(w,"LI",{});var E8=s(ss);uZ=n(E8,"STRONG",{});var Nqr=s(uZ);PHe=r(Nqr,"electra"),Nqr.forEach(t),$He=r(E8," \u2014 "),Dk=n(E8,"A",{href:!0});var jqr=s(Dk);IHe=r(jqr,"ElectraTokenizer"),jqr.forEach(t),qHe=r(E8," or "),Gk=n(E8,"A",{href:!0});var Dqr=s(Gk);NHe=r(Dqr,"ElectraTokenizerFast"),Dqr.forEach(t),jHe=r(E8," (ELECTRA model)"),E8.forEach(t),DHe=i(w),Qg=n(w,"LI",{});var iCe=s(Qg);pZ=n(iCe,"STRONG",{});var Gqr=s(pZ);GHe=r(Gqr,"flaubert"),Gqr.forEach(t),OHe=r(iCe," \u2014 "),Ok=n(iCe,"A",{href:!0});var Oqr=s(Ok);VHe=r(Oqr,"FlaubertTokenizer"),Oqr.forEach(t),XHe=r(iCe," (FlauBERT model)"),iCe.forEach(t),zHe=i(w),ls=n(w,"LI",{});var C8=s(ls);_Z=n(C8,"STRONG",{});var Vqr=s(_Z);QHe=r(Vqr,"fnet"),Vqr.forEach(t),WHe=r(C8," \u2014 "),Vk=n(C8,"A",{href:!0});var Xqr=s(Vk);HHe=r(Xqr,"FNetTokenizer"),Xqr.forEach(t),UHe=r(C8," or "),Xk=n(C8,"A",{href:!0});var zqr=s(Xk);JHe=r(zqr,"FNetTokenizerFast"),zqr.forEach(t),YHe=r(C8," (FNet model)"),C8.forEach(t),KHe=i(w),Wg=n(w,"LI",{});var dCe=s(Wg);bZ=n(dCe,"STRONG",{});var Qqr=s(bZ);ZHe=r(Qqr,"fsmt"),Qqr.forEach(t),eUe=r(dCe," \u2014 "),zk=n(dCe,"A",{href:!0});var Wqr=s(zk);oUe=r(Wqr,"FSMTTokenizer"),Wqr.forEach(t),rUe=r(dCe," (FairSeq Machine-Translation model)"),dCe.forEach(t),tUe=i(w),is=n(w,"LI",{});var w8=s(is);FZ=n(w8,"STRONG",{});var Hqr=s(FZ);aUe=r(Hqr,"funnel"),Hqr.forEach(t),nUe=r(w8," \u2014 "),Qk=n(w8,"A",{href:!0});var Uqr=s(Qk);sUe=r(Uqr,"FunnelTokenizer"),Uqr.forEach(t),lUe=r(w8," or "),Wk=n(w8,"A",{href:!0});var Jqr=s(Wk);iUe=r(Jqr,"FunnelTokenizerFast"),Jqr.forEach(t),dUe=r(w8," (Funnel Transformer model)"),w8.forEach(t),cUe=i(w),ds=n(w,"LI",{});var A8=s(ds);vZ=n(A8,"STRONG",{});var Yqr=s(vZ);mUe=r(Yqr,"gpt2"),Yqr.forEach(t),fUe=r(A8," \u2014 "),Hk=n(A8,"A",{href:!0});var Kqr=s(Hk);gUe=r(Kqr,"GPT2Tokenizer"),Kqr.forEach(t),hUe=r(A8," or "),Uk=n(A8,"A",{href:!0});var Zqr=s(Uk);uUe=r(Zqr,"GPT2TokenizerFast"),Zqr.forEach(t),pUe=r(A8," (OpenAI GPT-2 model)"),A8.forEach(t),_Ue=i(w),cs=n(w,"LI",{});var y8=s(cs);TZ=n(y8,"STRONG",{});var eNr=s(TZ);bUe=r(eNr,"gpt_neo"),eNr.forEach(t),FUe=r(y8," \u2014 "),Jk=n(y8,"A",{href:!0});var oNr=s(Jk);vUe=r(oNr,"GPT2Tokenizer"),oNr.forEach(t),TUe=r(y8," or "),Yk=n(y8,"A",{href:!0});var rNr=s(Yk);MUe=r(rNr,"GPT2TokenizerFast"),rNr.forEach(t),EUe=r(y8," (GPT Neo model)"),y8.forEach(t),CUe=i(w),ms=n(w,"LI",{});var L8=s(ms);MZ=n(L8,"STRONG",{});var tNr=s(MZ);wUe=r(tNr,"herbert"),tNr.forEach(t),AUe=r(L8," \u2014 "),Kk=n(L8,"A",{href:!0});var aNr=s(Kk);yUe=r(aNr,"HerbertTokenizer"),aNr.forEach(t),LUe=r(L8," or "),Zk=n(L8,"A",{href:!0});var nNr=s(Zk);xUe=r(nNr,"HerbertTokenizerFast"),nNr.forEach(t),kUe=r(L8," (HerBERT model)"),L8.forEach(t),SUe=i(w),Hg=n(w,"LI",{});var cCe=s(Hg);EZ=n(cCe,"STRONG",{});var sNr=s(EZ);RUe=r(sNr,"hubert"),sNr.forEach(t),BUe=r(cCe," \u2014 "),eS=n(cCe,"A",{href:!0});var lNr=s(eS);PUe=r(lNr,"Wav2Vec2CTCTokenizer"),lNr.forEach(t),$Ue=r(cCe," (Hubert model)"),cCe.forEach(t),IUe=i(w),fs=n(w,"LI",{});var x8=s(fs);CZ=n(x8,"STRONG",{});var iNr=s(CZ);qUe=r(iNr,"ibert"),iNr.forEach(t),NUe=r(x8," \u2014 "),oS=n(x8,"A",{href:!0});var dNr=s(oS);jUe=r(dNr,"RobertaTokenizer"),dNr.forEach(t),DUe=r(x8," or "),rS=n(x8,"A",{href:!0});var cNr=s(rS);GUe=r(cNr,"RobertaTokenizerFast"),cNr.forEach(t),OUe=r(x8," (I-BERT model)"),x8.forEach(t),VUe=i(w),gs=n(w,"LI",{});var k8=s(gs);wZ=n(k8,"STRONG",{});var mNr=s(wZ);XUe=r(mNr,"layoutlm"),mNr.forEach(t),zUe=r(k8," \u2014 "),tS=n(k8,"A",{href:!0});var fNr=s(tS);QUe=r(fNr,"LayoutLMTokenizer"),fNr.forEach(t),WUe=r(k8," or "),aS=n(k8,"A",{href:!0});var gNr=s(aS);HUe=r(gNr,"LayoutLMTokenizerFast"),gNr.forEach(t),UUe=r(k8," (LayoutLM model)"),k8.forEach(t),JUe=i(w),hs=n(w,"LI",{});var S8=s(hs);AZ=n(S8,"STRONG",{});var hNr=s(AZ);YUe=r(hNr,"layoutlmv2"),hNr.forEach(t),KUe=r(S8," \u2014 "),nS=n(S8,"A",{href:!0});var uNr=s(nS);ZUe=r(uNr,"LayoutLMv2Tokenizer"),uNr.forEach(t),eJe=r(S8," or "),sS=n(S8,"A",{href:!0});var pNr=s(sS);oJe=r(pNr,"LayoutLMv2TokenizerFast"),pNr.forEach(t),rJe=r(S8," (LayoutLMv2 model)"),S8.forEach(t),tJe=i(w),us=n(w,"LI",{});var R8=s(us);yZ=n(R8,"STRONG",{});var _Nr=s(yZ);aJe=r(_Nr,"layoutxlm"),_Nr.forEach(t),nJe=r(R8," \u2014 "),lS=n(R8,"A",{href:!0});var bNr=s(lS);sJe=r(bNr,"LayoutXLMTokenizer"),bNr.forEach(t),lJe=r(R8," or "),iS=n(R8,"A",{href:!0});var FNr=s(iS);iJe=r(FNr,"LayoutXLMTokenizerFast"),FNr.forEach(t),dJe=r(R8," (LayoutXLM model)"),R8.forEach(t),cJe=i(w),ps=n(w,"LI",{});var B8=s(ps);LZ=n(B8,"STRONG",{});var vNr=s(LZ);mJe=r(vNr,"led"),vNr.forEach(t),fJe=r(B8," \u2014 "),dS=n(B8,"A",{href:!0});var TNr=s(dS);gJe=r(TNr,"LEDTokenizer"),TNr.forEach(t),hJe=r(B8," or "),cS=n(B8,"A",{href:!0});var MNr=s(cS);uJe=r(MNr,"LEDTokenizerFast"),MNr.forEach(t),pJe=r(B8," (LED model)"),B8.forEach(t),_Je=i(w),_s=n(w,"LI",{});var P8=s(_s);xZ=n(P8,"STRONG",{});var ENr=s(xZ);bJe=r(ENr,"longformer"),ENr.forEach(t),FJe=r(P8," \u2014 "),mS=n(P8,"A",{href:!0});var CNr=s(mS);vJe=r(CNr,"LongformerTokenizer"),CNr.forEach(t),TJe=r(P8," or "),fS=n(P8,"A",{href:!0});var wNr=s(fS);MJe=r(wNr,"LongformerTokenizerFast"),wNr.forEach(t),EJe=r(P8," (Longformer model)"),P8.forEach(t),CJe=i(w),Ug=n(w,"LI",{});var mCe=s(Ug);kZ=n(mCe,"STRONG",{});var ANr=s(kZ);wJe=r(ANr,"luke"),ANr.forEach(t),AJe=r(mCe," \u2014 "),gS=n(mCe,"A",{href:!0});var yNr=s(gS);yJe=r(yNr,"LukeTokenizer"),yNr.forEach(t),LJe=r(mCe," (LUKE model)"),mCe.forEach(t),xJe=i(w),bs=n(w,"LI",{});var $8=s(bs);SZ=n($8,"STRONG",{});var LNr=s(SZ);kJe=r(LNr,"lxmert"),LNr.forEach(t),SJe=r($8," \u2014 "),hS=n($8,"A",{href:!0});var xNr=s(hS);RJe=r(xNr,"LxmertTokenizer"),xNr.forEach(t),BJe=r($8," or "),uS=n($8,"A",{href:!0});var kNr=s(uS);PJe=r(kNr,"LxmertTokenizerFast"),kNr.forEach(t),$Je=r($8," (LXMERT model)"),$8.forEach(t),IJe=i(w),Jg=n(w,"LI",{});var fCe=s(Jg);RZ=n(fCe,"STRONG",{});var SNr=s(RZ);qJe=r(SNr,"m2m_100"),SNr.forEach(t),NJe=r(fCe," \u2014 "),pS=n(fCe,"A",{href:!0});var RNr=s(pS);jJe=r(RNr,"M2M100Tokenizer"),RNr.forEach(t),DJe=r(fCe," (M2M100 model)"),fCe.forEach(t),GJe=i(w),Yg=n(w,"LI",{});var gCe=s(Yg);BZ=n(gCe,"STRONG",{});var BNr=s(BZ);OJe=r(BNr,"marian"),BNr.forEach(t),VJe=r(gCe," \u2014 "),_S=n(gCe,"A",{href:!0});var PNr=s(_S);XJe=r(PNr,"MarianTokenizer"),PNr.forEach(t),zJe=r(gCe," (Marian model)"),gCe.forEach(t),QJe=i(w),Fs=n(w,"LI",{});var I8=s(Fs);PZ=n(I8,"STRONG",{});var $Nr=s(PZ);WJe=r($Nr,"mbart"),$Nr.forEach(t),HJe=r(I8," \u2014 "),bS=n(I8,"A",{href:!0});var INr=s(bS);UJe=r(INr,"MBartTokenizer"),INr.forEach(t),JJe=r(I8," or "),FS=n(I8,"A",{href:!0});var qNr=s(FS);YJe=r(qNr,"MBartTokenizerFast"),qNr.forEach(t),KJe=r(I8," (mBART model)"),I8.forEach(t),ZJe=i(w),vs=n(w,"LI",{});var q8=s(vs);$Z=n(q8,"STRONG",{});var NNr=s($Z);eYe=r(NNr,"mbart50"),NNr.forEach(t),oYe=r(q8," \u2014 "),vS=n(q8,"A",{href:!0});var jNr=s(vS);rYe=r(jNr,"MBart50Tokenizer"),jNr.forEach(t),tYe=r(q8," or "),TS=n(q8,"A",{href:!0});var DNr=s(TS);aYe=r(DNr,"MBart50TokenizerFast"),DNr.forEach(t),nYe=r(q8," (mBART-50 model)"),q8.forEach(t),sYe=i(w),Kg=n(w,"LI",{});var hCe=s(Kg);IZ=n(hCe,"STRONG",{});var GNr=s(IZ);lYe=r(GNr,"mluke"),GNr.forEach(t),iYe=r(hCe," \u2014 "),MS=n(hCe,"A",{href:!0});var ONr=s(MS);dYe=r(ONr,"MLukeTokenizer"),ONr.forEach(t),cYe=r(hCe," (mLUKE model)"),hCe.forEach(t),mYe=i(w),Ts=n(w,"LI",{});var N8=s(Ts);qZ=n(N8,"STRONG",{});var VNr=s(qZ);fYe=r(VNr,"mobilebert"),VNr.forEach(t),gYe=r(N8," \u2014 "),ES=n(N8,"A",{href:!0});var XNr=s(ES);hYe=r(XNr,"MobileBertTokenizer"),XNr.forEach(t),uYe=r(N8," or "),CS=n(N8,"A",{href:!0});var zNr=s(CS);pYe=r(zNr,"MobileBertTokenizerFast"),zNr.forEach(t),_Ye=r(N8," (MobileBERT model)"),N8.forEach(t),bYe=i(w),Ms=n(w,"LI",{});var j8=s(Ms);NZ=n(j8,"STRONG",{});var QNr=s(NZ);FYe=r(QNr,"mpnet"),QNr.forEach(t),vYe=r(j8," \u2014 "),wS=n(j8,"A",{href:!0});var WNr=s(wS);TYe=r(WNr,"MPNetTokenizer"),WNr.forEach(t),MYe=r(j8," or "),AS=n(j8,"A",{href:!0});var HNr=s(AS);EYe=r(HNr,"MPNetTokenizerFast"),HNr.forEach(t),CYe=r(j8," (MPNet model)"),j8.forEach(t),wYe=i(w),Es=n(w,"LI",{});var D8=s(Es);jZ=n(D8,"STRONG",{});var UNr=s(jZ);AYe=r(UNr,"mt5"),UNr.forEach(t),yYe=r(D8," \u2014 "),yS=n(D8,"A",{href:!0});var JNr=s(yS);LYe=r(JNr,"MT5Tokenizer"),JNr.forEach(t),xYe=r(D8," or "),LS=n(D8,"A",{href:!0});var YNr=s(LS);kYe=r(YNr,"MT5TokenizerFast"),YNr.forEach(t),SYe=r(D8," (mT5 model)"),D8.forEach(t),RYe=i(w),Cs=n(w,"LI",{});var G8=s(Cs);DZ=n(G8,"STRONG",{});var KNr=s(DZ);BYe=r(KNr,"openai-gpt"),KNr.forEach(t),PYe=r(G8," \u2014 "),xS=n(G8,"A",{href:!0});var ZNr=s(xS);$Ye=r(ZNr,"OpenAIGPTTokenizer"),ZNr.forEach(t),IYe=r(G8," or "),kS=n(G8,"A",{href:!0});var ejr=s(kS);qYe=r(ejr,"OpenAIGPTTokenizerFast"),ejr.forEach(t),NYe=r(G8," (OpenAI GPT model)"),G8.forEach(t),jYe=i(w),ws=n(w,"LI",{});var O8=s(ws);GZ=n(O8,"STRONG",{});var ojr=s(GZ);DYe=r(ojr,"pegasus"),ojr.forEach(t),GYe=r(O8," \u2014 "),SS=n(O8,"A",{href:!0});var rjr=s(SS);OYe=r(rjr,"PegasusTokenizer"),rjr.forEach(t),VYe=r(O8," or "),RS=n(O8,"A",{href:!0});var tjr=s(RS);XYe=r(tjr,"PegasusTokenizerFast"),tjr.forEach(t),zYe=r(O8," (Pegasus model)"),O8.forEach(t),QYe=i(w),Zg=n(w,"LI",{});var uCe=s(Zg);OZ=n(uCe,"STRONG",{});var ajr=s(OZ);WYe=r(ajr,"perceiver"),ajr.forEach(t),HYe=r(uCe," \u2014 "),BS=n(uCe,"A",{href:!0});var njr=s(BS);UYe=r(njr,"PerceiverTokenizer"),njr.forEach(t),JYe=r(uCe," (Perceiver model)"),uCe.forEach(t),YYe=i(w),eh=n(w,"LI",{});var pCe=s(eh);VZ=n(pCe,"STRONG",{});var sjr=s(VZ);KYe=r(sjr,"phobert"),sjr.forEach(t),ZYe=r(pCe," \u2014 "),PS=n(pCe,"A",{href:!0});var ljr=s(PS);eKe=r(ljr,"PhobertTokenizer"),ljr.forEach(t),oKe=r(pCe," (PhoBERT model)"),pCe.forEach(t),rKe=i(w),oh=n(w,"LI",{});var _Ce=s(oh);XZ=n(_Ce,"STRONG",{});var ijr=s(XZ);tKe=r(ijr,"plbart"),ijr.forEach(t),aKe=r(_Ce," \u2014 "),$S=n(_Ce,"A",{href:!0});var djr=s($S);nKe=r(djr,"PLBartTokenizer"),djr.forEach(t),sKe=r(_Ce," (PLBart model)"),_Ce.forEach(t),lKe=i(w),rh=n(w,"LI",{});var bCe=s(rh);zZ=n(bCe,"STRONG",{});var cjr=s(zZ);iKe=r(cjr,"prophetnet"),cjr.forEach(t),dKe=r(bCe," \u2014 "),IS=n(bCe,"A",{href:!0});var mjr=s(IS);cKe=r(mjr,"ProphetNetTokenizer"),mjr.forEach(t),mKe=r(bCe," (ProphetNet model)"),bCe.forEach(t),fKe=i(w),As=n(w,"LI",{});var V8=s(As);QZ=n(V8,"STRONG",{});var fjr=s(QZ);gKe=r(fjr,"qdqbert"),fjr.forEach(t),hKe=r(V8," \u2014 "),qS=n(V8,"A",{href:!0});var gjr=s(qS);uKe=r(gjr,"BertTokenizer"),gjr.forEach(t),pKe=r(V8," or "),NS=n(V8,"A",{href:!0});var hjr=s(NS);_Ke=r(hjr,"BertTokenizerFast"),hjr.forEach(t),bKe=r(V8," (QDQBert model)"),V8.forEach(t),FKe=i(w),th=n(w,"LI",{});var FCe=s(th);WZ=n(FCe,"STRONG",{});var ujr=s(WZ);vKe=r(ujr,"rag"),ujr.forEach(t),TKe=r(FCe," \u2014 "),jS=n(FCe,"A",{href:!0});var pjr=s(jS);MKe=r(pjr,"RagTokenizer"),pjr.forEach(t),EKe=r(FCe," (RAG model)"),FCe.forEach(t),CKe=i(w),ys=n(w,"LI",{});var X8=s(ys);HZ=n(X8,"STRONG",{});var _jr=s(HZ);wKe=r(_jr,"realm"),_jr.forEach(t),AKe=r(X8," \u2014 "),DS=n(X8,"A",{href:!0});var bjr=s(DS);yKe=r(bjr,"RealmTokenizer"),bjr.forEach(t),LKe=r(X8," or "),GS=n(X8,"A",{href:!0});var Fjr=s(GS);xKe=r(Fjr,"RealmTokenizerFast"),Fjr.forEach(t),kKe=r(X8," (Realm model)"),X8.forEach(t),SKe=i(w),Ls=n(w,"LI",{});var z8=s(Ls);UZ=n(z8,"STRONG",{});var vjr=s(UZ);RKe=r(vjr,"reformer"),vjr.forEach(t),BKe=r(z8," \u2014 "),OS=n(z8,"A",{href:!0});var Tjr=s(OS);PKe=r(Tjr,"ReformerTokenizer"),Tjr.forEach(t),$Ke=r(z8," or "),VS=n(z8,"A",{href:!0});var Mjr=s(VS);IKe=r(Mjr,"ReformerTokenizerFast"),Mjr.forEach(t),qKe=r(z8," (Reformer model)"),z8.forEach(t),NKe=i(w),xs=n(w,"LI",{});var Q8=s(xs);JZ=n(Q8,"STRONG",{});var Ejr=s(JZ);jKe=r(Ejr,"rembert"),Ejr.forEach(t),DKe=r(Q8," \u2014 "),XS=n(Q8,"A",{href:!0});var Cjr=s(XS);GKe=r(Cjr,"RemBertTokenizer"),Cjr.forEach(t),OKe=r(Q8," or "),zS=n(Q8,"A",{href:!0});var wjr=s(zS);VKe=r(wjr,"RemBertTokenizerFast"),wjr.forEach(t),XKe=r(Q8," (RemBERT model)"),Q8.forEach(t),zKe=i(w),ks=n(w,"LI",{});var W8=s(ks);YZ=n(W8,"STRONG",{});var Ajr=s(YZ);QKe=r(Ajr,"retribert"),Ajr.forEach(t),WKe=r(W8," \u2014 "),QS=n(W8,"A",{href:!0});var yjr=s(QS);HKe=r(yjr,"RetriBertTokenizer"),yjr.forEach(t),UKe=r(W8," or "),WS=n(W8,"A",{href:!0});var Ljr=s(WS);JKe=r(Ljr,"RetriBertTokenizerFast"),Ljr.forEach(t),YKe=r(W8," (RetriBERT model)"),W8.forEach(t),KKe=i(w),Ss=n(w,"LI",{});var H8=s(Ss);KZ=n(H8,"STRONG",{});var xjr=s(KZ);ZKe=r(xjr,"roberta"),xjr.forEach(t),eZe=r(H8," \u2014 "),HS=n(H8,"A",{href:!0});var kjr=s(HS);oZe=r(kjr,"RobertaTokenizer"),kjr.forEach(t),rZe=r(H8," or "),US=n(H8,"A",{href:!0});var Sjr=s(US);tZe=r(Sjr,"RobertaTokenizerFast"),Sjr.forEach(t),aZe=r(H8," (RoBERTa model)"),H8.forEach(t),nZe=i(w),Rs=n(w,"LI",{});var U8=s(Rs);ZZ=n(U8,"STRONG",{});var Rjr=s(ZZ);sZe=r(Rjr,"roformer"),Rjr.forEach(t),lZe=r(U8," \u2014 "),JS=n(U8,"A",{href:!0});var Bjr=s(JS);iZe=r(Bjr,"RoFormerTokenizer"),Bjr.forEach(t),dZe=r(U8," or "),YS=n(U8,"A",{href:!0});var Pjr=s(YS);cZe=r(Pjr,"RoFormerTokenizerFast"),Pjr.forEach(t),mZe=r(U8," (RoFormer model)"),U8.forEach(t),fZe=i(w),ah=n(w,"LI",{});var vCe=s(ah);eee=n(vCe,"STRONG",{});var $jr=s(eee);gZe=r($jr,"speech_to_text"),$jr.forEach(t),hZe=r(vCe," \u2014 "),KS=n(vCe,"A",{href:!0});var Ijr=s(KS);uZe=r(Ijr,"Speech2TextTokenizer"),Ijr.forEach(t),pZe=r(vCe," (Speech2Text model)"),vCe.forEach(t),_Ze=i(w),nh=n(w,"LI",{});var TCe=s(nh);oee=n(TCe,"STRONG",{});var qjr=s(oee);bZe=r(qjr,"speech_to_text_2"),qjr.forEach(t),FZe=r(TCe," \u2014 "),ZS=n(TCe,"A",{href:!0});var Njr=s(ZS);vZe=r(Njr,"Speech2Text2Tokenizer"),Njr.forEach(t),TZe=r(TCe," (Speech2Text2 model)"),TCe.forEach(t),MZe=i(w),Bs=n(w,"LI",{});var J8=s(Bs);ree=n(J8,"STRONG",{});var jjr=s(ree);EZe=r(jjr,"splinter"),jjr.forEach(t),CZe=r(J8," \u2014 "),eR=n(J8,"A",{href:!0});var Djr=s(eR);wZe=r(Djr,"SplinterTokenizer"),Djr.forEach(t),AZe=r(J8," or "),oR=n(J8,"A",{href:!0});var Gjr=s(oR);yZe=r(Gjr,"SplinterTokenizerFast"),Gjr.forEach(t),LZe=r(J8," (Splinter model)"),J8.forEach(t),xZe=i(w),Ps=n(w,"LI",{});var Y8=s(Ps);tee=n(Y8,"STRONG",{});var Ojr=s(tee);kZe=r(Ojr,"squeezebert"),Ojr.forEach(t),SZe=r(Y8," \u2014 "),rR=n(Y8,"A",{href:!0});var Vjr=s(rR);RZe=r(Vjr,"SqueezeBertTokenizer"),Vjr.forEach(t),BZe=r(Y8," or "),tR=n(Y8,"A",{href:!0});var Xjr=s(tR);PZe=r(Xjr,"SqueezeBertTokenizerFast"),Xjr.forEach(t),$Ze=r(Y8," (SqueezeBERT model)"),Y8.forEach(t),IZe=i(w),$s=n(w,"LI",{});var K8=s($s);aee=n(K8,"STRONG",{});var zjr=s(aee);qZe=r(zjr,"t5"),zjr.forEach(t),NZe=r(K8," \u2014 "),aR=n(K8,"A",{href:!0});var Qjr=s(aR);jZe=r(Qjr,"T5Tokenizer"),Qjr.forEach(t),DZe=r(K8," or "),nR=n(K8,"A",{href:!0});var Wjr=s(nR);GZe=r(Wjr,"T5TokenizerFast"),Wjr.forEach(t),OZe=r(K8," (T5 model)"),K8.forEach(t),VZe=i(w),sh=n(w,"LI",{});var MCe=s(sh);nee=n(MCe,"STRONG",{});var Hjr=s(nee);XZe=r(Hjr,"tapas"),Hjr.forEach(t),zZe=r(MCe," \u2014 "),sR=n(MCe,"A",{href:!0});var Ujr=s(sR);QZe=r(Ujr,"TapasTokenizer"),Ujr.forEach(t),WZe=r(MCe," (TAPAS model)"),MCe.forEach(t),HZe=i(w),lh=n(w,"LI",{});var ECe=s(lh);see=n(ECe,"STRONG",{});var Jjr=s(see);UZe=r(Jjr,"transfo-xl"),Jjr.forEach(t),JZe=r(ECe," \u2014 "),lR=n(ECe,"A",{href:!0});var Yjr=s(lR);YZe=r(Yjr,"TransfoXLTokenizer"),Yjr.forEach(t),KZe=r(ECe," (Transformer-XL model)"),ECe.forEach(t),ZZe=i(w),ih=n(w,"LI",{});var CCe=s(ih);lee=n(CCe,"STRONG",{});var Kjr=s(lee);eeo=r(Kjr,"wav2vec2"),Kjr.forEach(t),oeo=r(CCe," \u2014 "),iR=n(CCe,"A",{href:!0});var Zjr=s(iR);reo=r(Zjr,"Wav2Vec2CTCTokenizer"),Zjr.forEach(t),teo=r(CCe," (Wav2Vec2 model)"),CCe.forEach(t),aeo=i(w),dh=n(w,"LI",{});var wCe=s(dh);iee=n(wCe,"STRONG",{});var eDr=s(iee);neo=r(eDr,"wav2vec2_phoneme"),eDr.forEach(t),seo=r(wCe," \u2014 "),dR=n(wCe,"A",{href:!0});var oDr=s(dR);leo=r(oDr,"Wav2Vec2PhonemeCTCTokenizer"),oDr.forEach(t),ieo=r(wCe," (Wav2Vec2Phoneme model)"),wCe.forEach(t),deo=i(w),Is=n(w,"LI",{});var Z8=s(Is);dee=n(Z8,"STRONG",{});var rDr=s(dee);ceo=r(rDr,"xglm"),rDr.forEach(t),meo=r(Z8," \u2014 "),cR=n(Z8,"A",{href:!0});var tDr=s(cR);feo=r(tDr,"XGLMTokenizer"),tDr.forEach(t),geo=r(Z8," or "),mR=n(Z8,"A",{href:!0});var aDr=s(mR);heo=r(aDr,"XGLMTokenizerFast"),aDr.forEach(t),ueo=r(Z8," (XGLM model)"),Z8.forEach(t),peo=i(w),ch=n(w,"LI",{});var ACe=s(ch);cee=n(ACe,"STRONG",{});var nDr=s(cee);_eo=r(nDr,"xlm"),nDr.forEach(t),beo=r(ACe," \u2014 "),fR=n(ACe,"A",{href:!0});var sDr=s(fR);Feo=r(sDr,"XLMTokenizer"),sDr.forEach(t),veo=r(ACe," (XLM model)"),ACe.forEach(t),Teo=i(w),mh=n(w,"LI",{});var yCe=s(mh);mee=n(yCe,"STRONG",{});var lDr=s(mee);Meo=r(lDr,"xlm-prophetnet"),lDr.forEach(t),Eeo=r(yCe," \u2014 "),gR=n(yCe,"A",{href:!0});var iDr=s(gR);Ceo=r(iDr,"XLMProphetNetTokenizer"),iDr.forEach(t),weo=r(yCe," (XLMProphetNet model)"),yCe.forEach(t),Aeo=i(w),qs=n(w,"LI",{});var e9=s(qs);fee=n(e9,"STRONG",{});var dDr=s(fee);yeo=r(dDr,"xlm-roberta"),dDr.forEach(t),Leo=r(e9," \u2014 "),hR=n(e9,"A",{href:!0});var cDr=s(hR);xeo=r(cDr,"XLMRobertaTokenizer"),cDr.forEach(t),keo=r(e9," or "),uR=n(e9,"A",{href:!0});var mDr=s(uR);Seo=r(mDr,"XLMRobertaTokenizerFast"),mDr.forEach(t),Reo=r(e9," (XLM-RoBERTa model)"),e9.forEach(t),Beo=i(w),Ns=n(w,"LI",{});var o9=s(Ns);gee=n(o9,"STRONG",{});var fDr=s(gee);Peo=r(fDr,"xlnet"),fDr.forEach(t),$eo=r(o9," \u2014 "),pR=n(o9,"A",{href:!0});var gDr=s(pR);Ieo=r(gDr,"XLNetTokenizer"),gDr.forEach(t),qeo=r(o9," or "),_R=n(o9,"A",{href:!0});var hDr=s(_R);Neo=r(hDr,"XLNetTokenizerFast"),hDr.forEach(t),jeo=r(o9," (XLNet model)"),o9.forEach(t),w.forEach(t),Deo=i(ha),hee=n(ha,"P",{});var uDr=s(hee);Geo=r(uDr,"Examples:"),uDr.forEach(t),Oeo=i(ha),f(Sw.$$.fragment,ha),ha.forEach(t),Veo=i(Vs),fh=n(Vs,"DIV",{class:!0});var OBe=s(fh);f(Rw.$$.fragment,OBe),Xeo=i(OBe),uee=n(OBe,"P",{});var pDr=s(uee);zeo=r(pDr,"Register a new tokenizer in this mapping."),pDr.forEach(t),OBe.forEach(t),Vs.forEach(t),NSe=i(c),Wi=n(c,"H2",{class:!0});var VBe=s(Wi);gh=n(VBe,"A",{id:!0,class:!0,href:!0});var _Dr=s(gh);pee=n(_Dr,"SPAN",{});var bDr=s(pee);f(Bw.$$.fragment,bDr),bDr.forEach(t),_Dr.forEach(t),Qeo=i(VBe),_ee=n(VBe,"SPAN",{});var FDr=s(_ee);Weo=r(FDr,"AutoFeatureExtractor"),FDr.forEach(t),VBe.forEach(t),jSe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);f(Pw.$$.fragment,Xs),Heo=i(Xs),$w=n(Xs,"P",{});var XBe=s($w);Ueo=r(XBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bR=n(XBe,"A",{href:!0});var vDr=s(bR);Jeo=r(vDr,"AutoFeatureExtractor.from_pretrained()"),vDr.forEach(t),Yeo=r(XBe," class method."),XBe.forEach(t),Keo=i(Xs),Iw=n(Xs,"P",{});var zBe=s(Iw);Zeo=r(zBe,"This class cannot be instantiated directly using "),bee=n(zBe,"CODE",{});var TDr=s(bee);eoo=r(TDr,"__init__()"),TDr.forEach(t),ooo=r(zBe," (throws an error)."),zBe.forEach(t),roo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);f(qw.$$.fragment,Nt),too=i(Nt),Fee=n(Nt,"P",{});var MDr=s(Fee);aoo=r(MDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),MDr.forEach(t),noo=i(Nt),Va=n(Nt,"P",{});var p3=s(Va);soo=r(p3,"The feature extractor class to instantiate is selected based on the "),vee=n(p3,"CODE",{});var EDr=s(vee);loo=r(EDr,"model_type"),EDr.forEach(t),ioo=r(p3,` property of the config object
(either passed as an argument or loaded from `),Tee=n(p3,"CODE",{});var CDr=s(Tee);doo=r(CDr,"pretrained_model_name_or_path"),CDr.forEach(t),coo=r(p3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mee=n(p3,"CODE",{});var wDr=s(Mee);moo=r(wDr,"pretrained_model_name_or_path"),wDr.forEach(t),foo=r(p3,":"),p3.forEach(t),goo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);hh=n(ne,"LI",{});var LCe=s(hh);Eee=n(LCe,"STRONG",{});var ADr=s(Eee);hoo=r(ADr,"beit"),ADr.forEach(t),uoo=r(LCe," \u2014 "),FR=n(LCe,"A",{href:!0});var yDr=s(FR);poo=r(yDr,"BeitFeatureExtractor"),yDr.forEach(t),_oo=r(LCe," (BEiT model)"),LCe.forEach(t),boo=i(ne),uh=n(ne,"LI",{});var xCe=s(uh);Cee=n(xCe,"STRONG",{});var LDr=s(Cee);Foo=r(LDr,"clip"),LDr.forEach(t),voo=r(xCe," \u2014 "),vR=n(xCe,"A",{href:!0});var xDr=s(vR);Too=r(xDr,"CLIPFeatureExtractor"),xDr.forEach(t),Moo=r(xCe," (CLIP model)"),xCe.forEach(t),Eoo=i(ne),ph=n(ne,"LI",{});var kCe=s(ph);wee=n(kCe,"STRONG",{});var kDr=s(wee);Coo=r(kDr,"convnext"),kDr.forEach(t),woo=r(kCe," \u2014 "),TR=n(kCe,"A",{href:!0});var SDr=s(TR);Aoo=r(SDr,"ConvNextFeatureExtractor"),SDr.forEach(t),yoo=r(kCe," (ConvNext model)"),kCe.forEach(t),Loo=i(ne),_h=n(ne,"LI",{});var SCe=s(_h);Aee=n(SCe,"STRONG",{});var RDr=s(Aee);xoo=r(RDr,"deit"),RDr.forEach(t),koo=r(SCe," \u2014 "),MR=n(SCe,"A",{href:!0});var BDr=s(MR);Soo=r(BDr,"DeiTFeatureExtractor"),BDr.forEach(t),Roo=r(SCe," (DeiT model)"),SCe.forEach(t),Boo=i(ne),bh=n(ne,"LI",{});var RCe=s(bh);yee=n(RCe,"STRONG",{});var PDr=s(yee);Poo=r(PDr,"detr"),PDr.forEach(t),$oo=r(RCe," \u2014 "),ER=n(RCe,"A",{href:!0});var $Dr=s(ER);Ioo=r($Dr,"DetrFeatureExtractor"),$Dr.forEach(t),qoo=r(RCe," (DETR model)"),RCe.forEach(t),Noo=i(ne),Fh=n(ne,"LI",{});var BCe=s(Fh);Lee=n(BCe,"STRONG",{});var IDr=s(Lee);joo=r(IDr,"hubert"),IDr.forEach(t),Doo=r(BCe," \u2014 "),CR=n(BCe,"A",{href:!0});var qDr=s(CR);Goo=r(qDr,"Wav2Vec2FeatureExtractor"),qDr.forEach(t),Ooo=r(BCe," (Hubert model)"),BCe.forEach(t),Voo=i(ne),vh=n(ne,"LI",{});var PCe=s(vh);xee=n(PCe,"STRONG",{});var NDr=s(xee);Xoo=r(NDr,"layoutlmv2"),NDr.forEach(t),zoo=r(PCe," \u2014 "),wR=n(PCe,"A",{href:!0});var jDr=s(wR);Qoo=r(jDr,"LayoutLMv2FeatureExtractor"),jDr.forEach(t),Woo=r(PCe," (LayoutLMv2 model)"),PCe.forEach(t),Hoo=i(ne),Th=n(ne,"LI",{});var $Ce=s(Th);kee=n($Ce,"STRONG",{});var DDr=s(kee);Uoo=r(DDr,"maskformer"),DDr.forEach(t),Joo=r($Ce," \u2014 "),AR=n($Ce,"A",{href:!0});var GDr=s(AR);Yoo=r(GDr,"MaskFormerFeatureExtractor"),GDr.forEach(t),Koo=r($Ce," (MaskFormer model)"),$Ce.forEach(t),Zoo=i(ne),Mh=n(ne,"LI",{});var ICe=s(Mh);See=n(ICe,"STRONG",{});var ODr=s(See);ero=r(ODr,"perceiver"),ODr.forEach(t),oro=r(ICe," \u2014 "),yR=n(ICe,"A",{href:!0});var VDr=s(yR);rro=r(VDr,"PerceiverFeatureExtractor"),VDr.forEach(t),tro=r(ICe," (Perceiver model)"),ICe.forEach(t),aro=i(ne),Eh=n(ne,"LI",{});var qCe=s(Eh);Ree=n(qCe,"STRONG",{});var XDr=s(Ree);nro=r(XDr,"poolformer"),XDr.forEach(t),sro=r(qCe," \u2014 "),LR=n(qCe,"A",{href:!0});var zDr=s(LR);lro=r(zDr,"PoolFormerFeatureExtractor"),zDr.forEach(t),iro=r(qCe," (PoolFormer model)"),qCe.forEach(t),dro=i(ne),Ch=n(ne,"LI",{});var NCe=s(Ch);Bee=n(NCe,"STRONG",{});var QDr=s(Bee);cro=r(QDr,"resnet"),QDr.forEach(t),mro=r(NCe," \u2014 "),xR=n(NCe,"A",{href:!0});var WDr=s(xR);fro=r(WDr,"ConvNextFeatureExtractor"),WDr.forEach(t),gro=r(NCe," (ResNet model)"),NCe.forEach(t),hro=i(ne),wh=n(ne,"LI",{});var jCe=s(wh);Pee=n(jCe,"STRONG",{});var HDr=s(Pee);uro=r(HDr,"segformer"),HDr.forEach(t),pro=r(jCe," \u2014 "),kR=n(jCe,"A",{href:!0});var UDr=s(kR);_ro=r(UDr,"SegformerFeatureExtractor"),UDr.forEach(t),bro=r(jCe," (SegFormer model)"),jCe.forEach(t),Fro=i(ne),Ah=n(ne,"LI",{});var DCe=s(Ah);$ee=n(DCe,"STRONG",{});var JDr=s($ee);vro=r(JDr,"speech_to_text"),JDr.forEach(t),Tro=r(DCe," \u2014 "),SR=n(DCe,"A",{href:!0});var YDr=s(SR);Mro=r(YDr,"Speech2TextFeatureExtractor"),YDr.forEach(t),Ero=r(DCe," (Speech2Text model)"),DCe.forEach(t),Cro=i(ne),yh=n(ne,"LI",{});var GCe=s(yh);Iee=n(GCe,"STRONG",{});var KDr=s(Iee);wro=r(KDr,"swin"),KDr.forEach(t),Aro=r(GCe," \u2014 "),RR=n(GCe,"A",{href:!0});var ZDr=s(RR);yro=r(ZDr,"ViTFeatureExtractor"),ZDr.forEach(t),Lro=r(GCe," (Swin model)"),GCe.forEach(t),xro=i(ne),Lh=n(ne,"LI",{});var OCe=s(Lh);qee=n(OCe,"STRONG",{});var eGr=s(qee);kro=r(eGr,"van"),eGr.forEach(t),Sro=r(OCe," \u2014 "),BR=n(OCe,"A",{href:!0});var oGr=s(BR);Rro=r(oGr,"ConvNextFeatureExtractor"),oGr.forEach(t),Bro=r(OCe," (VAN model)"),OCe.forEach(t),Pro=i(ne),xh=n(ne,"LI",{});var VCe=s(xh);Nee=n(VCe,"STRONG",{});var rGr=s(Nee);$ro=r(rGr,"vit"),rGr.forEach(t),Iro=r(VCe," \u2014 "),PR=n(VCe,"A",{href:!0});var tGr=s(PR);qro=r(tGr,"ViTFeatureExtractor"),tGr.forEach(t),Nro=r(VCe," (ViT model)"),VCe.forEach(t),jro=i(ne),kh=n(ne,"LI",{});var XCe=s(kh);jee=n(XCe,"STRONG",{});var aGr=s(jee);Dro=r(aGr,"vit_mae"),aGr.forEach(t),Gro=r(XCe," \u2014 "),$R=n(XCe,"A",{href:!0});var nGr=s($R);Oro=r(nGr,"ViTFeatureExtractor"),nGr.forEach(t),Vro=r(XCe," (ViTMAE model)"),XCe.forEach(t),Xro=i(ne),Sh=n(ne,"LI",{});var zCe=s(Sh);Dee=n(zCe,"STRONG",{});var sGr=s(Dee);zro=r(sGr,"wav2vec2"),sGr.forEach(t),Qro=r(zCe," \u2014 "),IR=n(zCe,"A",{href:!0});var lGr=s(IR);Wro=r(lGr,"Wav2Vec2FeatureExtractor"),lGr.forEach(t),Hro=r(zCe," (Wav2Vec2 model)"),zCe.forEach(t),ne.forEach(t),Uro=i(Nt),f(Rh.$$.fragment,Nt),Jro=i(Nt),Gee=n(Nt,"P",{});var iGr=s(Gee);Yro=r(iGr,"Examples:"),iGr.forEach(t),Kro=i(Nt),f(Nw.$$.fragment,Nt),Nt.forEach(t),Zro=i(Xs),Bh=n(Xs,"DIV",{class:!0});var QBe=s(Bh);f(jw.$$.fragment,QBe),eto=i(QBe),Oee=n(QBe,"P",{});var dGr=s(Oee);oto=r(dGr,"Register a new feature extractor for this class."),dGr.forEach(t),QBe.forEach(t),Xs.forEach(t),DSe=i(c),Hi=n(c,"H2",{class:!0});var WBe=s(Hi);Ph=n(WBe,"A",{id:!0,class:!0,href:!0});var cGr=s(Ph);Vee=n(cGr,"SPAN",{});var mGr=s(Vee);f(Dw.$$.fragment,mGr),mGr.forEach(t),cGr.forEach(t),rto=i(WBe),Xee=n(WBe,"SPAN",{});var fGr=s(Xee);tto=r(fGr,"AutoProcessor"),fGr.forEach(t),WBe.forEach(t),GSe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);f(Gw.$$.fragment,zs),ato=i(zs),Ow=n(zs,"P",{});var HBe=s(Ow);nto=r(HBe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qR=n(HBe,"A",{href:!0});var gGr=s(qR);sto=r(gGr,"AutoProcessor.from_pretrained()"),gGr.forEach(t),lto=r(HBe," class method."),HBe.forEach(t),ito=i(zs),Vw=n(zs,"P",{});var UBe=s(Vw);dto=r(UBe,"This class cannot be instantiated directly using "),zee=n(UBe,"CODE",{});var hGr=s(zee);cto=r(hGr,"__init__()"),hGr.forEach(t),mto=r(UBe," (throws an error)."),UBe.forEach(t),fto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);f(Xw.$$.fragment,jt),gto=i(jt),Qee=n(jt,"P",{});var uGr=s(Qee);hto=r(uGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uGr.forEach(t),uto=i(jt),Ui=n(jt,"P",{});var XH=s(Ui);pto=r(XH,"The processor class to instantiate is selected based on the "),Wee=n(XH,"CODE",{});var pGr=s(Wee);_to=r(pGr,"model_type"),pGr.forEach(t),bto=r(XH,` property of the config object (either
passed as an argument or loaded from `),Hee=n(XH,"CODE",{});var _Gr=s(Hee);Fto=r(_Gr,"pretrained_model_name_or_path"),_Gr.forEach(t),vto=r(XH," if possible):"),XH.forEach(t),Tto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);$h=n(jo,"LI",{});var QCe=s($h);Uee=n(QCe,"STRONG",{});var bGr=s(Uee);Mto=r(bGr,"clip"),bGr.forEach(t),Eto=r(QCe," \u2014 "),NR=n(QCe,"A",{href:!0});var FGr=s(NR);Cto=r(FGr,"CLIPProcessor"),FGr.forEach(t),wto=r(QCe," (CLIP model)"),QCe.forEach(t),Ato=i(jo),Ih=n(jo,"LI",{});var WCe=s(Ih);Jee=n(WCe,"STRONG",{});var vGr=s(Jee);yto=r(vGr,"layoutlmv2"),vGr.forEach(t),Lto=r(WCe," \u2014 "),jR=n(WCe,"A",{href:!0});var TGr=s(jR);xto=r(TGr,"LayoutLMv2Processor"),TGr.forEach(t),kto=r(WCe," (LayoutLMv2 model)"),WCe.forEach(t),Sto=i(jo),qh=n(jo,"LI",{});var HCe=s(qh);Yee=n(HCe,"STRONG",{});var MGr=s(Yee);Rto=r(MGr,"layoutxlm"),MGr.forEach(t),Bto=r(HCe," \u2014 "),DR=n(HCe,"A",{href:!0});var EGr=s(DR);Pto=r(EGr,"LayoutXLMProcessor"),EGr.forEach(t),$to=r(HCe," (LayoutXLM model)"),HCe.forEach(t),Ito=i(jo),Nh=n(jo,"LI",{});var UCe=s(Nh);Kee=n(UCe,"STRONG",{});var CGr=s(Kee);qto=r(CGr,"speech_to_text"),CGr.forEach(t),Nto=r(UCe," \u2014 "),GR=n(UCe,"A",{href:!0});var wGr=s(GR);jto=r(wGr,"Speech2TextProcessor"),wGr.forEach(t),Dto=r(UCe," (Speech2Text model)"),UCe.forEach(t),Gto=i(jo),jh=n(jo,"LI",{});var JCe=s(jh);Zee=n(JCe,"STRONG",{});var AGr=s(Zee);Oto=r(AGr,"speech_to_text_2"),AGr.forEach(t),Vto=r(JCe," \u2014 "),OR=n(JCe,"A",{href:!0});var yGr=s(OR);Xto=r(yGr,"Speech2Text2Processor"),yGr.forEach(t),zto=r(JCe," (Speech2Text2 model)"),JCe.forEach(t),Qto=i(jo),Dh=n(jo,"LI",{});var YCe=s(Dh);eoe=n(YCe,"STRONG",{});var LGr=s(eoe);Wto=r(LGr,"trocr"),LGr.forEach(t),Hto=r(YCe," \u2014 "),VR=n(YCe,"A",{href:!0});var xGr=s(VR);Uto=r(xGr,"TrOCRProcessor"),xGr.forEach(t),Jto=r(YCe," (TrOCR model)"),YCe.forEach(t),Yto=i(jo),Gh=n(jo,"LI",{});var KCe=s(Gh);ooe=n(KCe,"STRONG",{});var kGr=s(ooe);Kto=r(kGr,"vision-text-dual-encoder"),kGr.forEach(t),Zto=r(KCe," \u2014 "),XR=n(KCe,"A",{href:!0});var SGr=s(XR);eao=r(SGr,"VisionTextDualEncoderProcessor"),SGr.forEach(t),oao=r(KCe," (VisionTextDualEncoder model)"),KCe.forEach(t),rao=i(jo),Oh=n(jo,"LI",{});var ZCe=s(Oh);roe=n(ZCe,"STRONG",{});var RGr=s(roe);tao=r(RGr,"wav2vec2"),RGr.forEach(t),aao=r(ZCe," \u2014 "),zR=n(ZCe,"A",{href:!0});var BGr=s(zR);nao=r(BGr,"Wav2Vec2Processor"),BGr.forEach(t),sao=r(ZCe," (Wav2Vec2 model)"),ZCe.forEach(t),jo.forEach(t),lao=i(jt),f(Vh.$$.fragment,jt),iao=i(jt),toe=n(jt,"P",{});var PGr=s(toe);dao=r(PGr,"Examples:"),PGr.forEach(t),cao=i(jt),f(zw.$$.fragment,jt),jt.forEach(t),mao=i(zs),Xh=n(zs,"DIV",{class:!0});var JBe=s(Xh);f(Qw.$$.fragment,JBe),fao=i(JBe),aoe=n(JBe,"P",{});var $Gr=s(aoe);gao=r($Gr,"Register a new processor for this class."),$Gr.forEach(t),JBe.forEach(t),zs.forEach(t),OSe=i(c),Ji=n(c,"H2",{class:!0});var YBe=s(Ji);zh=n(YBe,"A",{id:!0,class:!0,href:!0});var IGr=s(zh);noe=n(IGr,"SPAN",{});var qGr=s(noe);f(Ww.$$.fragment,qGr),qGr.forEach(t),IGr.forEach(t),hao=i(YBe),soe=n(YBe,"SPAN",{});var NGr=s(soe);uao=r(NGr,"AutoModel"),NGr.forEach(t),YBe.forEach(t),VSe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);f(Hw.$$.fragment,Qs),pao=i(Qs),Yi=n(Qs,"P",{});var zH=s(Yi);_ao=r(zH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QR=n(zH,"A",{href:!0});var jGr=s(QR);bao=r(jGr,"from_pretrained()"),jGr.forEach(t),Fao=r(zH," class method or the "),WR=n(zH,"A",{href:!0});var DGr=s(WR);vao=r(DGr,"from_config()"),DGr.forEach(t),Tao=r(zH,` class
method.`),zH.forEach(t),Mao=i(Qs),Uw=n(Qs,"P",{});var KBe=s(Uw);Eao=r(KBe,"This class cannot be instantiated directly using "),loe=n(KBe,"CODE",{});var GGr=s(loe);Cao=r(GGr,"__init__()"),GGr.forEach(t),wao=r(KBe," (throws an error)."),KBe.forEach(t),Aao=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);f(Jw.$$.fragment,Ws),yao=i(Ws),ioe=n(Ws,"P",{});var OGr=s(ioe);Lao=r(OGr,"Instantiates one of the base model classes of the library from a configuration."),OGr.forEach(t),xao=i(Ws),Ki=n(Ws,"P",{});var QH=s(Ki);kao=r(QH,`Note:
Loading a model from its configuration file does `),doe=n(QH,"STRONG",{});var VGr=s(doe);Sao=r(VGr,"not"),VGr.forEach(t),Rao=r(QH,` load the model weights. It only affects the
model\u2019s configuration. Use `),HR=n(QH,"A",{href:!0});var XGr=s(HR);Bao=r(XGr,"from_pretrained()"),XGr.forEach(t),Pao=r(QH," to load the model weights."),QH.forEach(t),$ao=i(Ws),coe=n(Ws,"P",{});var zGr=s(coe);Iao=r(zGr,"Examples:"),zGr.forEach(t),qao=i(Ws),f(Yw.$$.fragment,Ws),Ws.forEach(t),Nao=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);f(Kw.$$.fragment,Dt),jao=i(Dt),moe=n(Dt,"P",{});var QGr=s(moe);Dao=r(QGr,"Instantiate one of the base model classes of the library from a pretrained model."),QGr.forEach(t),Gao=i(Dt),Xa=n(Dt,"P",{});var _3=s(Xa);Oao=r(_3,"The model class to instantiate is selected based on the "),foe=n(_3,"CODE",{});var WGr=s(foe);Vao=r(WGr,"model_type"),WGr.forEach(t),Xao=r(_3,` property of the config object (either
passed as an argument or loaded from `),goe=n(_3,"CODE",{});var HGr=s(goe);zao=r(HGr,"pretrained_model_name_or_path"),HGr.forEach(t),Qao=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hoe=n(_3,"CODE",{});var UGr=s(hoe);Wao=r(UGr,"pretrained_model_name_or_path"),UGr.forEach(t),Hao=r(_3,":"),_3.forEach(t),Uao=i(Dt),T=n(Dt,"UL",{});var M=s(T);Qh=n(M,"LI",{});var e5e=s(Qh);uoe=n(e5e,"STRONG",{});var JGr=s(uoe);Jao=r(JGr,"albert"),JGr.forEach(t),Yao=r(e5e," \u2014 "),UR=n(e5e,"A",{href:!0});var YGr=s(UR);Kao=r(YGr,"AlbertModel"),YGr.forEach(t),Zao=r(e5e," (ALBERT model)"),e5e.forEach(t),eno=i(M),Wh=n(M,"LI",{});var o5e=s(Wh);poe=n(o5e,"STRONG",{});var KGr=s(poe);ono=r(KGr,"bart"),KGr.forEach(t),rno=r(o5e," \u2014 "),JR=n(o5e,"A",{href:!0});var ZGr=s(JR);tno=r(ZGr,"BartModel"),ZGr.forEach(t),ano=r(o5e," (BART model)"),o5e.forEach(t),nno=i(M),Hh=n(M,"LI",{});var r5e=s(Hh);_oe=n(r5e,"STRONG",{});var eOr=s(_oe);sno=r(eOr,"beit"),eOr.forEach(t),lno=r(r5e," \u2014 "),YR=n(r5e,"A",{href:!0});var oOr=s(YR);ino=r(oOr,"BeitModel"),oOr.forEach(t),dno=r(r5e," (BEiT model)"),r5e.forEach(t),cno=i(M),Uh=n(M,"LI",{});var t5e=s(Uh);boe=n(t5e,"STRONG",{});var rOr=s(boe);mno=r(rOr,"bert"),rOr.forEach(t),fno=r(t5e," \u2014 "),KR=n(t5e,"A",{href:!0});var tOr=s(KR);gno=r(tOr,"BertModel"),tOr.forEach(t),hno=r(t5e," (BERT model)"),t5e.forEach(t),uno=i(M),Jh=n(M,"LI",{});var a5e=s(Jh);Foe=n(a5e,"STRONG",{});var aOr=s(Foe);pno=r(aOr,"bert-generation"),aOr.forEach(t),_no=r(a5e," \u2014 "),ZR=n(a5e,"A",{href:!0});var nOr=s(ZR);bno=r(nOr,"BertGenerationEncoder"),nOr.forEach(t),Fno=r(a5e," (Bert Generation model)"),a5e.forEach(t),vno=i(M),Yh=n(M,"LI",{});var n5e=s(Yh);voe=n(n5e,"STRONG",{});var sOr=s(voe);Tno=r(sOr,"big_bird"),sOr.forEach(t),Mno=r(n5e," \u2014 "),eB=n(n5e,"A",{href:!0});var lOr=s(eB);Eno=r(lOr,"BigBirdModel"),lOr.forEach(t),Cno=r(n5e," (BigBird model)"),n5e.forEach(t),wno=i(M),Kh=n(M,"LI",{});var s5e=s(Kh);Toe=n(s5e,"STRONG",{});var iOr=s(Toe);Ano=r(iOr,"bigbird_pegasus"),iOr.forEach(t),yno=r(s5e," \u2014 "),oB=n(s5e,"A",{href:!0});var dOr=s(oB);Lno=r(dOr,"BigBirdPegasusModel"),dOr.forEach(t),xno=r(s5e," (BigBirdPegasus model)"),s5e.forEach(t),kno=i(M),Zh=n(M,"LI",{});var l5e=s(Zh);Moe=n(l5e,"STRONG",{});var cOr=s(Moe);Sno=r(cOr,"blenderbot"),cOr.forEach(t),Rno=r(l5e," \u2014 "),rB=n(l5e,"A",{href:!0});var mOr=s(rB);Bno=r(mOr,"BlenderbotModel"),mOr.forEach(t),Pno=r(l5e," (Blenderbot model)"),l5e.forEach(t),$no=i(M),eu=n(M,"LI",{});var i5e=s(eu);Eoe=n(i5e,"STRONG",{});var fOr=s(Eoe);Ino=r(fOr,"blenderbot-small"),fOr.forEach(t),qno=r(i5e," \u2014 "),tB=n(i5e,"A",{href:!0});var gOr=s(tB);Nno=r(gOr,"BlenderbotSmallModel"),gOr.forEach(t),jno=r(i5e," (BlenderbotSmall model)"),i5e.forEach(t),Dno=i(M),ou=n(M,"LI",{});var d5e=s(ou);Coe=n(d5e,"STRONG",{});var hOr=s(Coe);Gno=r(hOr,"camembert"),hOr.forEach(t),Ono=r(d5e," \u2014 "),aB=n(d5e,"A",{href:!0});var uOr=s(aB);Vno=r(uOr,"CamembertModel"),uOr.forEach(t),Xno=r(d5e," (CamemBERT model)"),d5e.forEach(t),zno=i(M),ru=n(M,"LI",{});var c5e=s(ru);woe=n(c5e,"STRONG",{});var pOr=s(woe);Qno=r(pOr,"canine"),pOr.forEach(t),Wno=r(c5e," \u2014 "),nB=n(c5e,"A",{href:!0});var _Or=s(nB);Hno=r(_Or,"CanineModel"),_Or.forEach(t),Uno=r(c5e," (Canine model)"),c5e.forEach(t),Jno=i(M),tu=n(M,"LI",{});var m5e=s(tu);Aoe=n(m5e,"STRONG",{});var bOr=s(Aoe);Yno=r(bOr,"clip"),bOr.forEach(t),Kno=r(m5e," \u2014 "),sB=n(m5e,"A",{href:!0});var FOr=s(sB);Zno=r(FOr,"CLIPModel"),FOr.forEach(t),eso=r(m5e," (CLIP model)"),m5e.forEach(t),oso=i(M),au=n(M,"LI",{});var f5e=s(au);yoe=n(f5e,"STRONG",{});var vOr=s(yoe);rso=r(vOr,"convbert"),vOr.forEach(t),tso=r(f5e," \u2014 "),lB=n(f5e,"A",{href:!0});var TOr=s(lB);aso=r(TOr,"ConvBertModel"),TOr.forEach(t),nso=r(f5e," (ConvBERT model)"),f5e.forEach(t),sso=i(M),nu=n(M,"LI",{});var g5e=s(nu);Loe=n(g5e,"STRONG",{});var MOr=s(Loe);lso=r(MOr,"convnext"),MOr.forEach(t),iso=r(g5e," \u2014 "),iB=n(g5e,"A",{href:!0});var EOr=s(iB);dso=r(EOr,"ConvNextModel"),EOr.forEach(t),cso=r(g5e," (ConvNext model)"),g5e.forEach(t),mso=i(M),su=n(M,"LI",{});var h5e=s(su);xoe=n(h5e,"STRONG",{});var COr=s(xoe);fso=r(COr,"ctrl"),COr.forEach(t),gso=r(h5e," \u2014 "),dB=n(h5e,"A",{href:!0});var wOr=s(dB);hso=r(wOr,"CTRLModel"),wOr.forEach(t),uso=r(h5e," (CTRL model)"),h5e.forEach(t),pso=i(M),lu=n(M,"LI",{});var u5e=s(lu);koe=n(u5e,"STRONG",{});var AOr=s(koe);_so=r(AOr,"data2vec-audio"),AOr.forEach(t),bso=r(u5e," \u2014 "),cB=n(u5e,"A",{href:!0});var yOr=s(cB);Fso=r(yOr,"Data2VecAudioModel"),yOr.forEach(t),vso=r(u5e," (Data2VecAudio model)"),u5e.forEach(t),Tso=i(M),iu=n(M,"LI",{});var p5e=s(iu);Soe=n(p5e,"STRONG",{});var LOr=s(Soe);Mso=r(LOr,"data2vec-text"),LOr.forEach(t),Eso=r(p5e," \u2014 "),mB=n(p5e,"A",{href:!0});var xOr=s(mB);Cso=r(xOr,"Data2VecTextModel"),xOr.forEach(t),wso=r(p5e," (Data2VecText model)"),p5e.forEach(t),Aso=i(M),du=n(M,"LI",{});var _5e=s(du);Roe=n(_5e,"STRONG",{});var kOr=s(Roe);yso=r(kOr,"deberta"),kOr.forEach(t),Lso=r(_5e," \u2014 "),fB=n(_5e,"A",{href:!0});var SOr=s(fB);xso=r(SOr,"DebertaModel"),SOr.forEach(t),kso=r(_5e," (DeBERTa model)"),_5e.forEach(t),Sso=i(M),cu=n(M,"LI",{});var b5e=s(cu);Boe=n(b5e,"STRONG",{});var ROr=s(Boe);Rso=r(ROr,"deberta-v2"),ROr.forEach(t),Bso=r(b5e," \u2014 "),gB=n(b5e,"A",{href:!0});var BOr=s(gB);Pso=r(BOr,"DebertaV2Model"),BOr.forEach(t),$so=r(b5e," (DeBERTa-v2 model)"),b5e.forEach(t),Iso=i(M),mu=n(M,"LI",{});var F5e=s(mu);Poe=n(F5e,"STRONG",{});var POr=s(Poe);qso=r(POr,"decision_transformer"),POr.forEach(t),Nso=r(F5e," \u2014 "),hB=n(F5e,"A",{href:!0});var $Or=s(hB);jso=r($Or,"DecisionTransformerModel"),$Or.forEach(t),Dso=r(F5e," (Decision Transformer model)"),F5e.forEach(t),Gso=i(M),fu=n(M,"LI",{});var v5e=s(fu);$oe=n(v5e,"STRONG",{});var IOr=s($oe);Oso=r(IOr,"deit"),IOr.forEach(t),Vso=r(v5e," \u2014 "),uB=n(v5e,"A",{href:!0});var qOr=s(uB);Xso=r(qOr,"DeiTModel"),qOr.forEach(t),zso=r(v5e," (DeiT model)"),v5e.forEach(t),Qso=i(M),gu=n(M,"LI",{});var T5e=s(gu);Ioe=n(T5e,"STRONG",{});var NOr=s(Ioe);Wso=r(NOr,"detr"),NOr.forEach(t),Hso=r(T5e," \u2014 "),pB=n(T5e,"A",{href:!0});var jOr=s(pB);Uso=r(jOr,"DetrModel"),jOr.forEach(t),Jso=r(T5e," (DETR model)"),T5e.forEach(t),Yso=i(M),hu=n(M,"LI",{});var M5e=s(hu);qoe=n(M5e,"STRONG",{});var DOr=s(qoe);Kso=r(DOr,"distilbert"),DOr.forEach(t),Zso=r(M5e," \u2014 "),_B=n(M5e,"A",{href:!0});var GOr=s(_B);elo=r(GOr,"DistilBertModel"),GOr.forEach(t),olo=r(M5e," (DistilBERT model)"),M5e.forEach(t),rlo=i(M),uu=n(M,"LI",{});var E5e=s(uu);Noe=n(E5e,"STRONG",{});var OOr=s(Noe);tlo=r(OOr,"dpr"),OOr.forEach(t),alo=r(E5e," \u2014 "),bB=n(E5e,"A",{href:!0});var VOr=s(bB);nlo=r(VOr,"DPRQuestionEncoder"),VOr.forEach(t),slo=r(E5e," (DPR model)"),E5e.forEach(t),llo=i(M),pu=n(M,"LI",{});var C5e=s(pu);joe=n(C5e,"STRONG",{});var XOr=s(joe);ilo=r(XOr,"dpt"),XOr.forEach(t),dlo=r(C5e," \u2014 "),FB=n(C5e,"A",{href:!0});var zOr=s(FB);clo=r(zOr,"DPTModel"),zOr.forEach(t),mlo=r(C5e," (DPT model)"),C5e.forEach(t),flo=i(M),_u=n(M,"LI",{});var w5e=s(_u);Doe=n(w5e,"STRONG",{});var QOr=s(Doe);glo=r(QOr,"electra"),QOr.forEach(t),hlo=r(w5e," \u2014 "),vB=n(w5e,"A",{href:!0});var WOr=s(vB);ulo=r(WOr,"ElectraModel"),WOr.forEach(t),plo=r(w5e," (ELECTRA model)"),w5e.forEach(t),_lo=i(M),bu=n(M,"LI",{});var A5e=s(bu);Goe=n(A5e,"STRONG",{});var HOr=s(Goe);blo=r(HOr,"flaubert"),HOr.forEach(t),Flo=r(A5e," \u2014 "),TB=n(A5e,"A",{href:!0});var UOr=s(TB);vlo=r(UOr,"FlaubertModel"),UOr.forEach(t),Tlo=r(A5e," (FlauBERT model)"),A5e.forEach(t),Mlo=i(M),Fu=n(M,"LI",{});var y5e=s(Fu);Ooe=n(y5e,"STRONG",{});var JOr=s(Ooe);Elo=r(JOr,"fnet"),JOr.forEach(t),Clo=r(y5e," \u2014 "),MB=n(y5e,"A",{href:!0});var YOr=s(MB);wlo=r(YOr,"FNetModel"),YOr.forEach(t),Alo=r(y5e," (FNet model)"),y5e.forEach(t),ylo=i(M),vu=n(M,"LI",{});var L5e=s(vu);Voe=n(L5e,"STRONG",{});var KOr=s(Voe);Llo=r(KOr,"fsmt"),KOr.forEach(t),xlo=r(L5e," \u2014 "),EB=n(L5e,"A",{href:!0});var ZOr=s(EB);klo=r(ZOr,"FSMTModel"),ZOr.forEach(t),Slo=r(L5e," (FairSeq Machine-Translation model)"),L5e.forEach(t),Rlo=i(M),js=n(M,"LI",{});var r9=s(js);Xoe=n(r9,"STRONG",{});var eVr=s(Xoe);Blo=r(eVr,"funnel"),eVr.forEach(t),Plo=r(r9," \u2014 "),CB=n(r9,"A",{href:!0});var oVr=s(CB);$lo=r(oVr,"FunnelModel"),oVr.forEach(t),Ilo=r(r9," or "),wB=n(r9,"A",{href:!0});var rVr=s(wB);qlo=r(rVr,"FunnelBaseModel"),rVr.forEach(t),Nlo=r(r9," (Funnel Transformer model)"),r9.forEach(t),jlo=i(M),Tu=n(M,"LI",{});var x5e=s(Tu);zoe=n(x5e,"STRONG",{});var tVr=s(zoe);Dlo=r(tVr,"glpn"),tVr.forEach(t),Glo=r(x5e," \u2014 "),AB=n(x5e,"A",{href:!0});var aVr=s(AB);Olo=r(aVr,"GLPNModel"),aVr.forEach(t),Vlo=r(x5e," (GLPN model)"),x5e.forEach(t),Xlo=i(M),Mu=n(M,"LI",{});var k5e=s(Mu);Qoe=n(k5e,"STRONG",{});var nVr=s(Qoe);zlo=r(nVr,"gpt2"),nVr.forEach(t),Qlo=r(k5e," \u2014 "),yB=n(k5e,"A",{href:!0});var sVr=s(yB);Wlo=r(sVr,"GPT2Model"),sVr.forEach(t),Hlo=r(k5e," (OpenAI GPT-2 model)"),k5e.forEach(t),Ulo=i(M),Eu=n(M,"LI",{});var S5e=s(Eu);Woe=n(S5e,"STRONG",{});var lVr=s(Woe);Jlo=r(lVr,"gpt_neo"),lVr.forEach(t),Ylo=r(S5e," \u2014 "),LB=n(S5e,"A",{href:!0});var iVr=s(LB);Klo=r(iVr,"GPTNeoModel"),iVr.forEach(t),Zlo=r(S5e," (GPT Neo model)"),S5e.forEach(t),eio=i(M),Cu=n(M,"LI",{});var R5e=s(Cu);Hoe=n(R5e,"STRONG",{});var dVr=s(Hoe);oio=r(dVr,"gptj"),dVr.forEach(t),rio=r(R5e," \u2014 "),xB=n(R5e,"A",{href:!0});var cVr=s(xB);tio=r(cVr,"GPTJModel"),cVr.forEach(t),aio=r(R5e," (GPT-J model)"),R5e.forEach(t),nio=i(M),wu=n(M,"LI",{});var B5e=s(wu);Uoe=n(B5e,"STRONG",{});var mVr=s(Uoe);sio=r(mVr,"hubert"),mVr.forEach(t),lio=r(B5e," \u2014 "),kB=n(B5e,"A",{href:!0});var fVr=s(kB);iio=r(fVr,"HubertModel"),fVr.forEach(t),dio=r(B5e," (Hubert model)"),B5e.forEach(t),cio=i(M),Au=n(M,"LI",{});var P5e=s(Au);Joe=n(P5e,"STRONG",{});var gVr=s(Joe);mio=r(gVr,"ibert"),gVr.forEach(t),fio=r(P5e," \u2014 "),SB=n(P5e,"A",{href:!0});var hVr=s(SB);gio=r(hVr,"IBertModel"),hVr.forEach(t),hio=r(P5e," (I-BERT model)"),P5e.forEach(t),uio=i(M),yu=n(M,"LI",{});var $5e=s(yu);Yoe=n($5e,"STRONG",{});var uVr=s(Yoe);pio=r(uVr,"imagegpt"),uVr.forEach(t),_io=r($5e," \u2014 "),RB=n($5e,"A",{href:!0});var pVr=s(RB);bio=r(pVr,"ImageGPTModel"),pVr.forEach(t),Fio=r($5e," (ImageGPT model)"),$5e.forEach(t),vio=i(M),Lu=n(M,"LI",{});var I5e=s(Lu);Koe=n(I5e,"STRONG",{});var _Vr=s(Koe);Tio=r(_Vr,"layoutlm"),_Vr.forEach(t),Mio=r(I5e," \u2014 "),BB=n(I5e,"A",{href:!0});var bVr=s(BB);Eio=r(bVr,"LayoutLMModel"),bVr.forEach(t),Cio=r(I5e," (LayoutLM model)"),I5e.forEach(t),wio=i(M),xu=n(M,"LI",{});var q5e=s(xu);Zoe=n(q5e,"STRONG",{});var FVr=s(Zoe);Aio=r(FVr,"layoutlmv2"),FVr.forEach(t),yio=r(q5e," \u2014 "),PB=n(q5e,"A",{href:!0});var vVr=s(PB);Lio=r(vVr,"LayoutLMv2Model"),vVr.forEach(t),xio=r(q5e," (LayoutLMv2 model)"),q5e.forEach(t),kio=i(M),ku=n(M,"LI",{});var N5e=s(ku);ere=n(N5e,"STRONG",{});var TVr=s(ere);Sio=r(TVr,"led"),TVr.forEach(t),Rio=r(N5e," \u2014 "),$B=n(N5e,"A",{href:!0});var MVr=s($B);Bio=r(MVr,"LEDModel"),MVr.forEach(t),Pio=r(N5e," (LED model)"),N5e.forEach(t),$io=i(M),Su=n(M,"LI",{});var j5e=s(Su);ore=n(j5e,"STRONG",{});var EVr=s(ore);Iio=r(EVr,"longformer"),EVr.forEach(t),qio=r(j5e," \u2014 "),IB=n(j5e,"A",{href:!0});var CVr=s(IB);Nio=r(CVr,"LongformerModel"),CVr.forEach(t),jio=r(j5e," (Longformer model)"),j5e.forEach(t),Dio=i(M),Ru=n(M,"LI",{});var D5e=s(Ru);rre=n(D5e,"STRONG",{});var wVr=s(rre);Gio=r(wVr,"luke"),wVr.forEach(t),Oio=r(D5e," \u2014 "),qB=n(D5e,"A",{href:!0});var AVr=s(qB);Vio=r(AVr,"LukeModel"),AVr.forEach(t),Xio=r(D5e," (LUKE model)"),D5e.forEach(t),zio=i(M),Bu=n(M,"LI",{});var G5e=s(Bu);tre=n(G5e,"STRONG",{});var yVr=s(tre);Qio=r(yVr,"lxmert"),yVr.forEach(t),Wio=r(G5e," \u2014 "),NB=n(G5e,"A",{href:!0});var LVr=s(NB);Hio=r(LVr,"LxmertModel"),LVr.forEach(t),Uio=r(G5e," (LXMERT model)"),G5e.forEach(t),Jio=i(M),Pu=n(M,"LI",{});var O5e=s(Pu);are=n(O5e,"STRONG",{});var xVr=s(are);Yio=r(xVr,"m2m_100"),xVr.forEach(t),Kio=r(O5e," \u2014 "),jB=n(O5e,"A",{href:!0});var kVr=s(jB);Zio=r(kVr,"M2M100Model"),kVr.forEach(t),edo=r(O5e," (M2M100 model)"),O5e.forEach(t),odo=i(M),$u=n(M,"LI",{});var V5e=s($u);nre=n(V5e,"STRONG",{});var SVr=s(nre);rdo=r(SVr,"marian"),SVr.forEach(t),tdo=r(V5e," \u2014 "),DB=n(V5e,"A",{href:!0});var RVr=s(DB);ado=r(RVr,"MarianModel"),RVr.forEach(t),ndo=r(V5e," (Marian model)"),V5e.forEach(t),sdo=i(M),Iu=n(M,"LI",{});var X5e=s(Iu);sre=n(X5e,"STRONG",{});var BVr=s(sre);ldo=r(BVr,"maskformer"),BVr.forEach(t),ido=r(X5e," \u2014 "),GB=n(X5e,"A",{href:!0});var PVr=s(GB);ddo=r(PVr,"MaskFormerModel"),PVr.forEach(t),cdo=r(X5e," (MaskFormer model)"),X5e.forEach(t),mdo=i(M),qu=n(M,"LI",{});var z5e=s(qu);lre=n(z5e,"STRONG",{});var $Vr=s(lre);fdo=r($Vr,"mbart"),$Vr.forEach(t),gdo=r(z5e," \u2014 "),OB=n(z5e,"A",{href:!0});var IVr=s(OB);hdo=r(IVr,"MBartModel"),IVr.forEach(t),udo=r(z5e," (mBART model)"),z5e.forEach(t),pdo=i(M),Nu=n(M,"LI",{});var Q5e=s(Nu);ire=n(Q5e,"STRONG",{});var qVr=s(ire);_do=r(qVr,"megatron-bert"),qVr.forEach(t),bdo=r(Q5e," \u2014 "),VB=n(Q5e,"A",{href:!0});var NVr=s(VB);Fdo=r(NVr,"MegatronBertModel"),NVr.forEach(t),vdo=r(Q5e," (MegatronBert model)"),Q5e.forEach(t),Tdo=i(M),ju=n(M,"LI",{});var W5e=s(ju);dre=n(W5e,"STRONG",{});var jVr=s(dre);Mdo=r(jVr,"mobilebert"),jVr.forEach(t),Edo=r(W5e," \u2014 "),XB=n(W5e,"A",{href:!0});var DVr=s(XB);Cdo=r(DVr,"MobileBertModel"),DVr.forEach(t),wdo=r(W5e," (MobileBERT model)"),W5e.forEach(t),Ado=i(M),Du=n(M,"LI",{});var H5e=s(Du);cre=n(H5e,"STRONG",{});var GVr=s(cre);ydo=r(GVr,"mpnet"),GVr.forEach(t),Ldo=r(H5e," \u2014 "),zB=n(H5e,"A",{href:!0});var OVr=s(zB);xdo=r(OVr,"MPNetModel"),OVr.forEach(t),kdo=r(H5e," (MPNet model)"),H5e.forEach(t),Sdo=i(M),Gu=n(M,"LI",{});var U5e=s(Gu);mre=n(U5e,"STRONG",{});var VVr=s(mre);Rdo=r(VVr,"mt5"),VVr.forEach(t),Bdo=r(U5e," \u2014 "),QB=n(U5e,"A",{href:!0});var XVr=s(QB);Pdo=r(XVr,"MT5Model"),XVr.forEach(t),$do=r(U5e," (mT5 model)"),U5e.forEach(t),Ido=i(M),Ou=n(M,"LI",{});var J5e=s(Ou);fre=n(J5e,"STRONG",{});var zVr=s(fre);qdo=r(zVr,"nystromformer"),zVr.forEach(t),Ndo=r(J5e," \u2014 "),WB=n(J5e,"A",{href:!0});var QVr=s(WB);jdo=r(QVr,"NystromformerModel"),QVr.forEach(t),Ddo=r(J5e," (Nystromformer model)"),J5e.forEach(t),Gdo=i(M),Vu=n(M,"LI",{});var Y5e=s(Vu);gre=n(Y5e,"STRONG",{});var WVr=s(gre);Odo=r(WVr,"openai-gpt"),WVr.forEach(t),Vdo=r(Y5e," \u2014 "),HB=n(Y5e,"A",{href:!0});var HVr=s(HB);Xdo=r(HVr,"OpenAIGPTModel"),HVr.forEach(t),zdo=r(Y5e," (OpenAI GPT model)"),Y5e.forEach(t),Qdo=i(M),Xu=n(M,"LI",{});var K5e=s(Xu);hre=n(K5e,"STRONG",{});var UVr=s(hre);Wdo=r(UVr,"pegasus"),UVr.forEach(t),Hdo=r(K5e," \u2014 "),UB=n(K5e,"A",{href:!0});var JVr=s(UB);Udo=r(JVr,"PegasusModel"),JVr.forEach(t),Jdo=r(K5e," (Pegasus model)"),K5e.forEach(t),Ydo=i(M),zu=n(M,"LI",{});var Z5e=s(zu);ure=n(Z5e,"STRONG",{});var YVr=s(ure);Kdo=r(YVr,"perceiver"),YVr.forEach(t),Zdo=r(Z5e," \u2014 "),JB=n(Z5e,"A",{href:!0});var KVr=s(JB);eco=r(KVr,"PerceiverModel"),KVr.forEach(t),oco=r(Z5e," (Perceiver model)"),Z5e.forEach(t),rco=i(M),Qu=n(M,"LI",{});var e3e=s(Qu);pre=n(e3e,"STRONG",{});var ZVr=s(pre);tco=r(ZVr,"plbart"),ZVr.forEach(t),aco=r(e3e," \u2014 "),YB=n(e3e,"A",{href:!0});var eXr=s(YB);nco=r(eXr,"PLBartModel"),eXr.forEach(t),sco=r(e3e," (PLBart model)"),e3e.forEach(t),lco=i(M),Wu=n(M,"LI",{});var o3e=s(Wu);_re=n(o3e,"STRONG",{});var oXr=s(_re);ico=r(oXr,"poolformer"),oXr.forEach(t),dco=r(o3e," \u2014 "),KB=n(o3e,"A",{href:!0});var rXr=s(KB);cco=r(rXr,"PoolFormerModel"),rXr.forEach(t),mco=r(o3e," (PoolFormer model)"),o3e.forEach(t),fco=i(M),Hu=n(M,"LI",{});var r3e=s(Hu);bre=n(r3e,"STRONG",{});var tXr=s(bre);gco=r(tXr,"prophetnet"),tXr.forEach(t),hco=r(r3e," \u2014 "),ZB=n(r3e,"A",{href:!0});var aXr=s(ZB);uco=r(aXr,"ProphetNetModel"),aXr.forEach(t),pco=r(r3e," (ProphetNet model)"),r3e.forEach(t),_co=i(M),Uu=n(M,"LI",{});var t3e=s(Uu);Fre=n(t3e,"STRONG",{});var nXr=s(Fre);bco=r(nXr,"qdqbert"),nXr.forEach(t),Fco=r(t3e," \u2014 "),eP=n(t3e,"A",{href:!0});var sXr=s(eP);vco=r(sXr,"QDQBertModel"),sXr.forEach(t),Tco=r(t3e," (QDQBert model)"),t3e.forEach(t),Mco=i(M),Ju=n(M,"LI",{});var a3e=s(Ju);vre=n(a3e,"STRONG",{});var lXr=s(vre);Eco=r(lXr,"reformer"),lXr.forEach(t),Cco=r(a3e," \u2014 "),oP=n(a3e,"A",{href:!0});var iXr=s(oP);wco=r(iXr,"ReformerModel"),iXr.forEach(t),Aco=r(a3e," (Reformer model)"),a3e.forEach(t),yco=i(M),Yu=n(M,"LI",{});var n3e=s(Yu);Tre=n(n3e,"STRONG",{});var dXr=s(Tre);Lco=r(dXr,"rembert"),dXr.forEach(t),xco=r(n3e," \u2014 "),rP=n(n3e,"A",{href:!0});var cXr=s(rP);kco=r(cXr,"RemBertModel"),cXr.forEach(t),Sco=r(n3e," (RemBERT model)"),n3e.forEach(t),Rco=i(M),Ku=n(M,"LI",{});var s3e=s(Ku);Mre=n(s3e,"STRONG",{});var mXr=s(Mre);Bco=r(mXr,"resnet"),mXr.forEach(t),Pco=r(s3e," \u2014 "),tP=n(s3e,"A",{href:!0});var fXr=s(tP);$co=r(fXr,"ResNetModel"),fXr.forEach(t),Ico=r(s3e," (ResNet model)"),s3e.forEach(t),qco=i(M),Zu=n(M,"LI",{});var l3e=s(Zu);Ere=n(l3e,"STRONG",{});var gXr=s(Ere);Nco=r(gXr,"retribert"),gXr.forEach(t),jco=r(l3e," \u2014 "),aP=n(l3e,"A",{href:!0});var hXr=s(aP);Dco=r(hXr,"RetriBertModel"),hXr.forEach(t),Gco=r(l3e," (RetriBERT model)"),l3e.forEach(t),Oco=i(M),ep=n(M,"LI",{});var i3e=s(ep);Cre=n(i3e,"STRONG",{});var uXr=s(Cre);Vco=r(uXr,"roberta"),uXr.forEach(t),Xco=r(i3e," \u2014 "),nP=n(i3e,"A",{href:!0});var pXr=s(nP);zco=r(pXr,"RobertaModel"),pXr.forEach(t),Qco=r(i3e," (RoBERTa model)"),i3e.forEach(t),Wco=i(M),op=n(M,"LI",{});var d3e=s(op);wre=n(d3e,"STRONG",{});var _Xr=s(wre);Hco=r(_Xr,"roformer"),_Xr.forEach(t),Uco=r(d3e," \u2014 "),sP=n(d3e,"A",{href:!0});var bXr=s(sP);Jco=r(bXr,"RoFormerModel"),bXr.forEach(t),Yco=r(d3e," (RoFormer model)"),d3e.forEach(t),Kco=i(M),rp=n(M,"LI",{});var c3e=s(rp);Are=n(c3e,"STRONG",{});var FXr=s(Are);Zco=r(FXr,"segformer"),FXr.forEach(t),emo=r(c3e," \u2014 "),lP=n(c3e,"A",{href:!0});var vXr=s(lP);omo=r(vXr,"SegformerModel"),vXr.forEach(t),rmo=r(c3e," (SegFormer model)"),c3e.forEach(t),tmo=i(M),tp=n(M,"LI",{});var m3e=s(tp);yre=n(m3e,"STRONG",{});var TXr=s(yre);amo=r(TXr,"sew"),TXr.forEach(t),nmo=r(m3e," \u2014 "),iP=n(m3e,"A",{href:!0});var MXr=s(iP);smo=r(MXr,"SEWModel"),MXr.forEach(t),lmo=r(m3e," (SEW model)"),m3e.forEach(t),imo=i(M),ap=n(M,"LI",{});var f3e=s(ap);Lre=n(f3e,"STRONG",{});var EXr=s(Lre);dmo=r(EXr,"sew-d"),EXr.forEach(t),cmo=r(f3e," \u2014 "),dP=n(f3e,"A",{href:!0});var CXr=s(dP);mmo=r(CXr,"SEWDModel"),CXr.forEach(t),fmo=r(f3e," (SEW-D model)"),f3e.forEach(t),gmo=i(M),np=n(M,"LI",{});var g3e=s(np);xre=n(g3e,"STRONG",{});var wXr=s(xre);hmo=r(wXr,"speech_to_text"),wXr.forEach(t),umo=r(g3e," \u2014 "),cP=n(g3e,"A",{href:!0});var AXr=s(cP);pmo=r(AXr,"Speech2TextModel"),AXr.forEach(t),_mo=r(g3e," (Speech2Text model)"),g3e.forEach(t),bmo=i(M),sp=n(M,"LI",{});var h3e=s(sp);kre=n(h3e,"STRONG",{});var yXr=s(kre);Fmo=r(yXr,"splinter"),yXr.forEach(t),vmo=r(h3e," \u2014 "),mP=n(h3e,"A",{href:!0});var LXr=s(mP);Tmo=r(LXr,"SplinterModel"),LXr.forEach(t),Mmo=r(h3e," (Splinter model)"),h3e.forEach(t),Emo=i(M),lp=n(M,"LI",{});var u3e=s(lp);Sre=n(u3e,"STRONG",{});var xXr=s(Sre);Cmo=r(xXr,"squeezebert"),xXr.forEach(t),wmo=r(u3e," \u2014 "),fP=n(u3e,"A",{href:!0});var kXr=s(fP);Amo=r(kXr,"SqueezeBertModel"),kXr.forEach(t),ymo=r(u3e," (SqueezeBERT model)"),u3e.forEach(t),Lmo=i(M),ip=n(M,"LI",{});var p3e=s(ip);Rre=n(p3e,"STRONG",{});var SXr=s(Rre);xmo=r(SXr,"swin"),SXr.forEach(t),kmo=r(p3e," \u2014 "),gP=n(p3e,"A",{href:!0});var RXr=s(gP);Smo=r(RXr,"SwinModel"),RXr.forEach(t),Rmo=r(p3e," (Swin model)"),p3e.forEach(t),Bmo=i(M),dp=n(M,"LI",{});var _3e=s(dp);Bre=n(_3e,"STRONG",{});var BXr=s(Bre);Pmo=r(BXr,"t5"),BXr.forEach(t),$mo=r(_3e," \u2014 "),hP=n(_3e,"A",{href:!0});var PXr=s(hP);Imo=r(PXr,"T5Model"),PXr.forEach(t),qmo=r(_3e," (T5 model)"),_3e.forEach(t),Nmo=i(M),cp=n(M,"LI",{});var b3e=s(cp);Pre=n(b3e,"STRONG",{});var $Xr=s(Pre);jmo=r($Xr,"tapas"),$Xr.forEach(t),Dmo=r(b3e," \u2014 "),uP=n(b3e,"A",{href:!0});var IXr=s(uP);Gmo=r(IXr,"TapasModel"),IXr.forEach(t),Omo=r(b3e," (TAPAS model)"),b3e.forEach(t),Vmo=i(M),mp=n(M,"LI",{});var F3e=s(mp);$re=n(F3e,"STRONG",{});var qXr=s($re);Xmo=r(qXr,"transfo-xl"),qXr.forEach(t),zmo=r(F3e," \u2014 "),pP=n(F3e,"A",{href:!0});var NXr=s(pP);Qmo=r(NXr,"TransfoXLModel"),NXr.forEach(t),Wmo=r(F3e," (Transformer-XL model)"),F3e.forEach(t),Hmo=i(M),fp=n(M,"LI",{});var v3e=s(fp);Ire=n(v3e,"STRONG",{});var jXr=s(Ire);Umo=r(jXr,"unispeech"),jXr.forEach(t),Jmo=r(v3e," \u2014 "),_P=n(v3e,"A",{href:!0});var DXr=s(_P);Ymo=r(DXr,"UniSpeechModel"),DXr.forEach(t),Kmo=r(v3e," (UniSpeech model)"),v3e.forEach(t),Zmo=i(M),gp=n(M,"LI",{});var T3e=s(gp);qre=n(T3e,"STRONG",{});var GXr=s(qre);efo=r(GXr,"unispeech-sat"),GXr.forEach(t),ofo=r(T3e," \u2014 "),bP=n(T3e,"A",{href:!0});var OXr=s(bP);rfo=r(OXr,"UniSpeechSatModel"),OXr.forEach(t),tfo=r(T3e," (UniSpeechSat model)"),T3e.forEach(t),afo=i(M),hp=n(M,"LI",{});var M3e=s(hp);Nre=n(M3e,"STRONG",{});var VXr=s(Nre);nfo=r(VXr,"van"),VXr.forEach(t),sfo=r(M3e," \u2014 "),FP=n(M3e,"A",{href:!0});var XXr=s(FP);lfo=r(XXr,"VanModel"),XXr.forEach(t),ifo=r(M3e," (VAN model)"),M3e.forEach(t),dfo=i(M),up=n(M,"LI",{});var E3e=s(up);jre=n(E3e,"STRONG",{});var zXr=s(jre);cfo=r(zXr,"vilt"),zXr.forEach(t),mfo=r(E3e," \u2014 "),vP=n(E3e,"A",{href:!0});var QXr=s(vP);ffo=r(QXr,"ViltModel"),QXr.forEach(t),gfo=r(E3e," (ViLT model)"),E3e.forEach(t),hfo=i(M),pp=n(M,"LI",{});var C3e=s(pp);Dre=n(C3e,"STRONG",{});var WXr=s(Dre);ufo=r(WXr,"vision-text-dual-encoder"),WXr.forEach(t),pfo=r(C3e," \u2014 "),TP=n(C3e,"A",{href:!0});var HXr=s(TP);_fo=r(HXr,"VisionTextDualEncoderModel"),HXr.forEach(t),bfo=r(C3e," (VisionTextDualEncoder model)"),C3e.forEach(t),Ffo=i(M),_p=n(M,"LI",{});var w3e=s(_p);Gre=n(w3e,"STRONG",{});var UXr=s(Gre);vfo=r(UXr,"visual_bert"),UXr.forEach(t),Tfo=r(w3e," \u2014 "),MP=n(w3e,"A",{href:!0});var JXr=s(MP);Mfo=r(JXr,"VisualBertModel"),JXr.forEach(t),Efo=r(w3e," (VisualBert model)"),w3e.forEach(t),Cfo=i(M),bp=n(M,"LI",{});var A3e=s(bp);Ore=n(A3e,"STRONG",{});var YXr=s(Ore);wfo=r(YXr,"vit"),YXr.forEach(t),Afo=r(A3e," \u2014 "),EP=n(A3e,"A",{href:!0});var KXr=s(EP);yfo=r(KXr,"ViTModel"),KXr.forEach(t),Lfo=r(A3e," (ViT model)"),A3e.forEach(t),xfo=i(M),Fp=n(M,"LI",{});var y3e=s(Fp);Vre=n(y3e,"STRONG",{});var ZXr=s(Vre);kfo=r(ZXr,"vit_mae"),ZXr.forEach(t),Sfo=r(y3e," \u2014 "),CP=n(y3e,"A",{href:!0});var ezr=s(CP);Rfo=r(ezr,"ViTMAEModel"),ezr.forEach(t),Bfo=r(y3e," (ViTMAE model)"),y3e.forEach(t),Pfo=i(M),vp=n(M,"LI",{});var L3e=s(vp);Xre=n(L3e,"STRONG",{});var ozr=s(Xre);$fo=r(ozr,"wav2vec2"),ozr.forEach(t),Ifo=r(L3e," \u2014 "),wP=n(L3e,"A",{href:!0});var rzr=s(wP);qfo=r(rzr,"Wav2Vec2Model"),rzr.forEach(t),Nfo=r(L3e," (Wav2Vec2 model)"),L3e.forEach(t),jfo=i(M),Tp=n(M,"LI",{});var x3e=s(Tp);zre=n(x3e,"STRONG",{});var tzr=s(zre);Dfo=r(tzr,"wavlm"),tzr.forEach(t),Gfo=r(x3e," \u2014 "),AP=n(x3e,"A",{href:!0});var azr=s(AP);Ofo=r(azr,"WavLMModel"),azr.forEach(t),Vfo=r(x3e," (WavLM model)"),x3e.forEach(t),Xfo=i(M),Mp=n(M,"LI",{});var k3e=s(Mp);Qre=n(k3e,"STRONG",{});var nzr=s(Qre);zfo=r(nzr,"xglm"),nzr.forEach(t),Qfo=r(k3e," \u2014 "),yP=n(k3e,"A",{href:!0});var szr=s(yP);Wfo=r(szr,"XGLMModel"),szr.forEach(t),Hfo=r(k3e," (XGLM model)"),k3e.forEach(t),Ufo=i(M),Ep=n(M,"LI",{});var S3e=s(Ep);Wre=n(S3e,"STRONG",{});var lzr=s(Wre);Jfo=r(lzr,"xlm"),lzr.forEach(t),Yfo=r(S3e," \u2014 "),LP=n(S3e,"A",{href:!0});var izr=s(LP);Kfo=r(izr,"XLMModel"),izr.forEach(t),Zfo=r(S3e," (XLM model)"),S3e.forEach(t),ego=i(M),Cp=n(M,"LI",{});var R3e=s(Cp);Hre=n(R3e,"STRONG",{});var dzr=s(Hre);ogo=r(dzr,"xlm-prophetnet"),dzr.forEach(t),rgo=r(R3e," \u2014 "),xP=n(R3e,"A",{href:!0});var czr=s(xP);tgo=r(czr,"XLMProphetNetModel"),czr.forEach(t),ago=r(R3e," (XLMProphetNet model)"),R3e.forEach(t),ngo=i(M),wp=n(M,"LI",{});var B3e=s(wp);Ure=n(B3e,"STRONG",{});var mzr=s(Ure);sgo=r(mzr,"xlm-roberta"),mzr.forEach(t),lgo=r(B3e," \u2014 "),kP=n(B3e,"A",{href:!0});var fzr=s(kP);igo=r(fzr,"XLMRobertaModel"),fzr.forEach(t),dgo=r(B3e," (XLM-RoBERTa model)"),B3e.forEach(t),cgo=i(M),Ap=n(M,"LI",{});var P3e=s(Ap);Jre=n(P3e,"STRONG",{});var gzr=s(Jre);mgo=r(gzr,"xlm-roberta-xl"),gzr.forEach(t),fgo=r(P3e," \u2014 "),SP=n(P3e,"A",{href:!0});var hzr=s(SP);ggo=r(hzr,"XLMRobertaXLModel"),hzr.forEach(t),hgo=r(P3e," (XLM-RoBERTa-XL model)"),P3e.forEach(t),ugo=i(M),yp=n(M,"LI",{});var $3e=s(yp);Yre=n($3e,"STRONG",{});var uzr=s(Yre);pgo=r(uzr,"xlnet"),uzr.forEach(t),_go=r($3e," \u2014 "),RP=n($3e,"A",{href:!0});var pzr=s(RP);bgo=r(pzr,"XLNetModel"),pzr.forEach(t),Fgo=r($3e," (XLNet model)"),$3e.forEach(t),vgo=i(M),Lp=n(M,"LI",{});var I3e=s(Lp);Kre=n(I3e,"STRONG",{});var _zr=s(Kre);Tgo=r(_zr,"yoso"),_zr.forEach(t),Mgo=r(I3e," \u2014 "),BP=n(I3e,"A",{href:!0});var bzr=s(BP);Ego=r(bzr,"YosoModel"),bzr.forEach(t),Cgo=r(I3e," (YOSO model)"),I3e.forEach(t),M.forEach(t),wgo=i(Dt),xp=n(Dt,"P",{});var q3e=s(xp);Ago=r(q3e,"The model is set in evaluation mode by default using "),Zre=n(q3e,"CODE",{});var Fzr=s(Zre);ygo=r(Fzr,"model.eval()"),Fzr.forEach(t),Lgo=r(q3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ete=n(q3e,"CODE",{});var vzr=s(ete);xgo=r(vzr,"model.train()"),vzr.forEach(t),q3e.forEach(t),kgo=i(Dt),ote=n(Dt,"P",{});var Tzr=s(ote);Sgo=r(Tzr,"Examples:"),Tzr.forEach(t),Rgo=i(Dt),f(Zw.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),XSe=i(c),Zi=n(c,"H2",{class:!0});var ZBe=s(Zi);kp=n(ZBe,"A",{id:!0,class:!0,href:!0});var Mzr=s(kp);rte=n(Mzr,"SPAN",{});var Ezr=s(rte);f(eA.$$.fragment,Ezr),Ezr.forEach(t),Mzr.forEach(t),Bgo=i(ZBe),tte=n(ZBe,"SPAN",{});var Czr=s(tte);Pgo=r(Czr,"AutoModelForPreTraining"),Czr.forEach(t),ZBe.forEach(t),zSe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);f(oA.$$.fragment,Hs),$go=i(Hs),ed=n(Hs,"P",{});var WH=s(ed);Igo=r(WH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PP=n(WH,"A",{href:!0});var wzr=s(PP);qgo=r(wzr,"from_pretrained()"),wzr.forEach(t),Ngo=r(WH," class method or the "),$P=n(WH,"A",{href:!0});var Azr=s($P);jgo=r(Azr,"from_config()"),Azr.forEach(t),Dgo=r(WH,` class
method.`),WH.forEach(t),Ggo=i(Hs),rA=n(Hs,"P",{});var ePe=s(rA);Ogo=r(ePe,"This class cannot be instantiated directly using "),ate=n(ePe,"CODE",{});var yzr=s(ate);Vgo=r(yzr,"__init__()"),yzr.forEach(t),Xgo=r(ePe," (throws an error)."),ePe.forEach(t),zgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);f(tA.$$.fragment,Us),Qgo=i(Us),nte=n(Us,"P",{});var Lzr=s(nte);Wgo=r(Lzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lzr.forEach(t),Hgo=i(Us),od=n(Us,"P",{});var HH=s(od);Ugo=r(HH,`Note:
Loading a model from its configuration file does `),ste=n(HH,"STRONG",{});var xzr=s(ste);Jgo=r(xzr,"not"),xzr.forEach(t),Ygo=r(HH,` load the model weights. It only affects the
model\u2019s configuration. Use `),IP=n(HH,"A",{href:!0});var kzr=s(IP);Kgo=r(kzr,"from_pretrained()"),kzr.forEach(t),Zgo=r(HH," to load the model weights."),HH.forEach(t),eho=i(Us),lte=n(Us,"P",{});var Szr=s(lte);oho=r(Szr,"Examples:"),Szr.forEach(t),rho=i(Us),f(aA.$$.fragment,Us),Us.forEach(t),tho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);f(nA.$$.fragment,Gt),aho=i(Gt),ite=n(Gt,"P",{});var Rzr=s(ite);nho=r(Rzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rzr.forEach(t),sho=i(Gt),za=n(Gt,"P",{});var b3=s(za);lho=r(b3,"The model class to instantiate is selected based on the "),dte=n(b3,"CODE",{});var Bzr=s(dte);iho=r(Bzr,"model_type"),Bzr.forEach(t),dho=r(b3,` property of the config object (either
passed as an argument or loaded from `),cte=n(b3,"CODE",{});var Pzr=s(cte);cho=r(Pzr,"pretrained_model_name_or_path"),Pzr.forEach(t),mho=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mte=n(b3,"CODE",{});var $zr=s(mte);fho=r($zr,"pretrained_model_name_or_path"),$zr.forEach(t),gho=r(b3,":"),b3.forEach(t),hho=i(Gt),S=n(Gt,"UL",{});var B=s(S);Sp=n(B,"LI",{});var N3e=s(Sp);fte=n(N3e,"STRONG",{});var Izr=s(fte);uho=r(Izr,"albert"),Izr.forEach(t),pho=r(N3e," \u2014 "),qP=n(N3e,"A",{href:!0});var qzr=s(qP);_ho=r(qzr,"AlbertForPreTraining"),qzr.forEach(t),bho=r(N3e," (ALBERT model)"),N3e.forEach(t),Fho=i(B),Rp=n(B,"LI",{});var j3e=s(Rp);gte=n(j3e,"STRONG",{});var Nzr=s(gte);vho=r(Nzr,"bart"),Nzr.forEach(t),Tho=r(j3e," \u2014 "),NP=n(j3e,"A",{href:!0});var jzr=s(NP);Mho=r(jzr,"BartForConditionalGeneration"),jzr.forEach(t),Eho=r(j3e," (BART model)"),j3e.forEach(t),Cho=i(B),Bp=n(B,"LI",{});var D3e=s(Bp);hte=n(D3e,"STRONG",{});var Dzr=s(hte);who=r(Dzr,"bert"),Dzr.forEach(t),Aho=r(D3e," \u2014 "),jP=n(D3e,"A",{href:!0});var Gzr=s(jP);yho=r(Gzr,"BertForPreTraining"),Gzr.forEach(t),Lho=r(D3e," (BERT model)"),D3e.forEach(t),xho=i(B),Pp=n(B,"LI",{});var G3e=s(Pp);ute=n(G3e,"STRONG",{});var Ozr=s(ute);kho=r(Ozr,"big_bird"),Ozr.forEach(t),Sho=r(G3e," \u2014 "),DP=n(G3e,"A",{href:!0});var Vzr=s(DP);Rho=r(Vzr,"BigBirdForPreTraining"),Vzr.forEach(t),Bho=r(G3e," (BigBird model)"),G3e.forEach(t),Pho=i(B),$p=n(B,"LI",{});var O3e=s($p);pte=n(O3e,"STRONG",{});var Xzr=s(pte);$ho=r(Xzr,"camembert"),Xzr.forEach(t),Iho=r(O3e," \u2014 "),GP=n(O3e,"A",{href:!0});var zzr=s(GP);qho=r(zzr,"CamembertForMaskedLM"),zzr.forEach(t),Nho=r(O3e," (CamemBERT model)"),O3e.forEach(t),jho=i(B),Ip=n(B,"LI",{});var V3e=s(Ip);_te=n(V3e,"STRONG",{});var Qzr=s(_te);Dho=r(Qzr,"ctrl"),Qzr.forEach(t),Gho=r(V3e," \u2014 "),OP=n(V3e,"A",{href:!0});var Wzr=s(OP);Oho=r(Wzr,"CTRLLMHeadModel"),Wzr.forEach(t),Vho=r(V3e," (CTRL model)"),V3e.forEach(t),Xho=i(B),qp=n(B,"LI",{});var X3e=s(qp);bte=n(X3e,"STRONG",{});var Hzr=s(bte);zho=r(Hzr,"data2vec-text"),Hzr.forEach(t),Qho=r(X3e," \u2014 "),VP=n(X3e,"A",{href:!0});var Uzr=s(VP);Who=r(Uzr,"Data2VecTextForMaskedLM"),Uzr.forEach(t),Hho=r(X3e," (Data2VecText model)"),X3e.forEach(t),Uho=i(B),Np=n(B,"LI",{});var z3e=s(Np);Fte=n(z3e,"STRONG",{});var Jzr=s(Fte);Jho=r(Jzr,"deberta"),Jzr.forEach(t),Yho=r(z3e," \u2014 "),XP=n(z3e,"A",{href:!0});var Yzr=s(XP);Kho=r(Yzr,"DebertaForMaskedLM"),Yzr.forEach(t),Zho=r(z3e," (DeBERTa model)"),z3e.forEach(t),euo=i(B),jp=n(B,"LI",{});var Q3e=s(jp);vte=n(Q3e,"STRONG",{});var Kzr=s(vte);ouo=r(Kzr,"deberta-v2"),Kzr.forEach(t),ruo=r(Q3e," \u2014 "),zP=n(Q3e,"A",{href:!0});var Zzr=s(zP);tuo=r(Zzr,"DebertaV2ForMaskedLM"),Zzr.forEach(t),auo=r(Q3e," (DeBERTa-v2 model)"),Q3e.forEach(t),nuo=i(B),Dp=n(B,"LI",{});var W3e=s(Dp);Tte=n(W3e,"STRONG",{});var eQr=s(Tte);suo=r(eQr,"distilbert"),eQr.forEach(t),luo=r(W3e," \u2014 "),QP=n(W3e,"A",{href:!0});var oQr=s(QP);iuo=r(oQr,"DistilBertForMaskedLM"),oQr.forEach(t),duo=r(W3e," (DistilBERT model)"),W3e.forEach(t),cuo=i(B),Gp=n(B,"LI",{});var H3e=s(Gp);Mte=n(H3e,"STRONG",{});var rQr=s(Mte);muo=r(rQr,"electra"),rQr.forEach(t),fuo=r(H3e," \u2014 "),WP=n(H3e,"A",{href:!0});var tQr=s(WP);guo=r(tQr,"ElectraForPreTraining"),tQr.forEach(t),huo=r(H3e," (ELECTRA model)"),H3e.forEach(t),uuo=i(B),Op=n(B,"LI",{});var U3e=s(Op);Ete=n(U3e,"STRONG",{});var aQr=s(Ete);puo=r(aQr,"flaubert"),aQr.forEach(t),_uo=r(U3e," \u2014 "),HP=n(U3e,"A",{href:!0});var nQr=s(HP);buo=r(nQr,"FlaubertWithLMHeadModel"),nQr.forEach(t),Fuo=r(U3e," (FlauBERT model)"),U3e.forEach(t),vuo=i(B),Vp=n(B,"LI",{});var J3e=s(Vp);Cte=n(J3e,"STRONG",{});var sQr=s(Cte);Tuo=r(sQr,"fnet"),sQr.forEach(t),Muo=r(J3e," \u2014 "),UP=n(J3e,"A",{href:!0});var lQr=s(UP);Euo=r(lQr,"FNetForPreTraining"),lQr.forEach(t),Cuo=r(J3e," (FNet model)"),J3e.forEach(t),wuo=i(B),Xp=n(B,"LI",{});var Y3e=s(Xp);wte=n(Y3e,"STRONG",{});var iQr=s(wte);Auo=r(iQr,"fsmt"),iQr.forEach(t),yuo=r(Y3e," \u2014 "),JP=n(Y3e,"A",{href:!0});var dQr=s(JP);Luo=r(dQr,"FSMTForConditionalGeneration"),dQr.forEach(t),xuo=r(Y3e," (FairSeq Machine-Translation model)"),Y3e.forEach(t),kuo=i(B),zp=n(B,"LI",{});var K3e=s(zp);Ate=n(K3e,"STRONG",{});var cQr=s(Ate);Suo=r(cQr,"funnel"),cQr.forEach(t),Ruo=r(K3e," \u2014 "),YP=n(K3e,"A",{href:!0});var mQr=s(YP);Buo=r(mQr,"FunnelForPreTraining"),mQr.forEach(t),Puo=r(K3e," (Funnel Transformer model)"),K3e.forEach(t),$uo=i(B),Qp=n(B,"LI",{});var Z3e=s(Qp);yte=n(Z3e,"STRONG",{});var fQr=s(yte);Iuo=r(fQr,"gpt2"),fQr.forEach(t),quo=r(Z3e," \u2014 "),KP=n(Z3e,"A",{href:!0});var gQr=s(KP);Nuo=r(gQr,"GPT2LMHeadModel"),gQr.forEach(t),juo=r(Z3e," (OpenAI GPT-2 model)"),Z3e.forEach(t),Duo=i(B),Wp=n(B,"LI",{});var ewe=s(Wp);Lte=n(ewe,"STRONG",{});var hQr=s(Lte);Guo=r(hQr,"ibert"),hQr.forEach(t),Ouo=r(ewe," \u2014 "),ZP=n(ewe,"A",{href:!0});var uQr=s(ZP);Vuo=r(uQr,"IBertForMaskedLM"),uQr.forEach(t),Xuo=r(ewe," (I-BERT model)"),ewe.forEach(t),zuo=i(B),Hp=n(B,"LI",{});var owe=s(Hp);xte=n(owe,"STRONG",{});var pQr=s(xte);Quo=r(pQr,"layoutlm"),pQr.forEach(t),Wuo=r(owe," \u2014 "),e$=n(owe,"A",{href:!0});var _Qr=s(e$);Huo=r(_Qr,"LayoutLMForMaskedLM"),_Qr.forEach(t),Uuo=r(owe," (LayoutLM model)"),owe.forEach(t),Juo=i(B),Up=n(B,"LI",{});var rwe=s(Up);kte=n(rwe,"STRONG",{});var bQr=s(kte);Yuo=r(bQr,"longformer"),bQr.forEach(t),Kuo=r(rwe," \u2014 "),o$=n(rwe,"A",{href:!0});var FQr=s(o$);Zuo=r(FQr,"LongformerForMaskedLM"),FQr.forEach(t),epo=r(rwe," (Longformer model)"),rwe.forEach(t),opo=i(B),Jp=n(B,"LI",{});var twe=s(Jp);Ste=n(twe,"STRONG",{});var vQr=s(Ste);rpo=r(vQr,"lxmert"),vQr.forEach(t),tpo=r(twe," \u2014 "),r$=n(twe,"A",{href:!0});var TQr=s(r$);apo=r(TQr,"LxmertForPreTraining"),TQr.forEach(t),npo=r(twe," (LXMERT model)"),twe.forEach(t),spo=i(B),Yp=n(B,"LI",{});var awe=s(Yp);Rte=n(awe,"STRONG",{});var MQr=s(Rte);lpo=r(MQr,"megatron-bert"),MQr.forEach(t),ipo=r(awe," \u2014 "),t$=n(awe,"A",{href:!0});var EQr=s(t$);dpo=r(EQr,"MegatronBertForPreTraining"),EQr.forEach(t),cpo=r(awe," (MegatronBert model)"),awe.forEach(t),mpo=i(B),Kp=n(B,"LI",{});var nwe=s(Kp);Bte=n(nwe,"STRONG",{});var CQr=s(Bte);fpo=r(CQr,"mobilebert"),CQr.forEach(t),gpo=r(nwe," \u2014 "),a$=n(nwe,"A",{href:!0});var wQr=s(a$);hpo=r(wQr,"MobileBertForPreTraining"),wQr.forEach(t),upo=r(nwe," (MobileBERT model)"),nwe.forEach(t),ppo=i(B),Zp=n(B,"LI",{});var swe=s(Zp);Pte=n(swe,"STRONG",{});var AQr=s(Pte);_po=r(AQr,"mpnet"),AQr.forEach(t),bpo=r(swe," \u2014 "),n$=n(swe,"A",{href:!0});var yQr=s(n$);Fpo=r(yQr,"MPNetForMaskedLM"),yQr.forEach(t),vpo=r(swe," (MPNet model)"),swe.forEach(t),Tpo=i(B),e_=n(B,"LI",{});var lwe=s(e_);$te=n(lwe,"STRONG",{});var LQr=s($te);Mpo=r(LQr,"openai-gpt"),LQr.forEach(t),Epo=r(lwe," \u2014 "),s$=n(lwe,"A",{href:!0});var xQr=s(s$);Cpo=r(xQr,"OpenAIGPTLMHeadModel"),xQr.forEach(t),wpo=r(lwe," (OpenAI GPT model)"),lwe.forEach(t),Apo=i(B),o_=n(B,"LI",{});var iwe=s(o_);Ite=n(iwe,"STRONG",{});var kQr=s(Ite);ypo=r(kQr,"retribert"),kQr.forEach(t),Lpo=r(iwe," \u2014 "),l$=n(iwe,"A",{href:!0});var SQr=s(l$);xpo=r(SQr,"RetriBertModel"),SQr.forEach(t),kpo=r(iwe," (RetriBERT model)"),iwe.forEach(t),Spo=i(B),r_=n(B,"LI",{});var dwe=s(r_);qte=n(dwe,"STRONG",{});var RQr=s(qte);Rpo=r(RQr,"roberta"),RQr.forEach(t),Bpo=r(dwe," \u2014 "),i$=n(dwe,"A",{href:!0});var BQr=s(i$);Ppo=r(BQr,"RobertaForMaskedLM"),BQr.forEach(t),$po=r(dwe," (RoBERTa model)"),dwe.forEach(t),Ipo=i(B),t_=n(B,"LI",{});var cwe=s(t_);Nte=n(cwe,"STRONG",{});var PQr=s(Nte);qpo=r(PQr,"squeezebert"),PQr.forEach(t),Npo=r(cwe," \u2014 "),d$=n(cwe,"A",{href:!0});var $Qr=s(d$);jpo=r($Qr,"SqueezeBertForMaskedLM"),$Qr.forEach(t),Dpo=r(cwe," (SqueezeBERT model)"),cwe.forEach(t),Gpo=i(B),a_=n(B,"LI",{});var mwe=s(a_);jte=n(mwe,"STRONG",{});var IQr=s(jte);Opo=r(IQr,"t5"),IQr.forEach(t),Vpo=r(mwe," \u2014 "),c$=n(mwe,"A",{href:!0});var qQr=s(c$);Xpo=r(qQr,"T5ForConditionalGeneration"),qQr.forEach(t),zpo=r(mwe," (T5 model)"),mwe.forEach(t),Qpo=i(B),n_=n(B,"LI",{});var fwe=s(n_);Dte=n(fwe,"STRONG",{});var NQr=s(Dte);Wpo=r(NQr,"tapas"),NQr.forEach(t),Hpo=r(fwe," \u2014 "),m$=n(fwe,"A",{href:!0});var jQr=s(m$);Upo=r(jQr,"TapasForMaskedLM"),jQr.forEach(t),Jpo=r(fwe," (TAPAS model)"),fwe.forEach(t),Ypo=i(B),s_=n(B,"LI",{});var gwe=s(s_);Gte=n(gwe,"STRONG",{});var DQr=s(Gte);Kpo=r(DQr,"transfo-xl"),DQr.forEach(t),Zpo=r(gwe," \u2014 "),f$=n(gwe,"A",{href:!0});var GQr=s(f$);e_o=r(GQr,"TransfoXLLMHeadModel"),GQr.forEach(t),o_o=r(gwe," (Transformer-XL model)"),gwe.forEach(t),r_o=i(B),l_=n(B,"LI",{});var hwe=s(l_);Ote=n(hwe,"STRONG",{});var OQr=s(Ote);t_o=r(OQr,"unispeech"),OQr.forEach(t),a_o=r(hwe," \u2014 "),g$=n(hwe,"A",{href:!0});var VQr=s(g$);n_o=r(VQr,"UniSpeechForPreTraining"),VQr.forEach(t),s_o=r(hwe," (UniSpeech model)"),hwe.forEach(t),l_o=i(B),i_=n(B,"LI",{});var uwe=s(i_);Vte=n(uwe,"STRONG",{});var XQr=s(Vte);i_o=r(XQr,"unispeech-sat"),XQr.forEach(t),d_o=r(uwe," \u2014 "),h$=n(uwe,"A",{href:!0});var zQr=s(h$);c_o=r(zQr,"UniSpeechSatForPreTraining"),zQr.forEach(t),m_o=r(uwe," (UniSpeechSat model)"),uwe.forEach(t),f_o=i(B),d_=n(B,"LI",{});var pwe=s(d_);Xte=n(pwe,"STRONG",{});var QQr=s(Xte);g_o=r(QQr,"visual_bert"),QQr.forEach(t),h_o=r(pwe," \u2014 "),u$=n(pwe,"A",{href:!0});var WQr=s(u$);u_o=r(WQr,"VisualBertForPreTraining"),WQr.forEach(t),p_o=r(pwe," (VisualBert model)"),pwe.forEach(t),__o=i(B),c_=n(B,"LI",{});var _we=s(c_);zte=n(_we,"STRONG",{});var HQr=s(zte);b_o=r(HQr,"vit_mae"),HQr.forEach(t),F_o=r(_we," \u2014 "),p$=n(_we,"A",{href:!0});var UQr=s(p$);v_o=r(UQr,"ViTMAEForPreTraining"),UQr.forEach(t),T_o=r(_we," (ViTMAE model)"),_we.forEach(t),M_o=i(B),m_=n(B,"LI",{});var bwe=s(m_);Qte=n(bwe,"STRONG",{});var JQr=s(Qte);E_o=r(JQr,"wav2vec2"),JQr.forEach(t),C_o=r(bwe," \u2014 "),_$=n(bwe,"A",{href:!0});var YQr=s(_$);w_o=r(YQr,"Wav2Vec2ForPreTraining"),YQr.forEach(t),A_o=r(bwe," (Wav2Vec2 model)"),bwe.forEach(t),y_o=i(B),f_=n(B,"LI",{});var Fwe=s(f_);Wte=n(Fwe,"STRONG",{});var KQr=s(Wte);L_o=r(KQr,"xlm"),KQr.forEach(t),x_o=r(Fwe," \u2014 "),b$=n(Fwe,"A",{href:!0});var ZQr=s(b$);k_o=r(ZQr,"XLMWithLMHeadModel"),ZQr.forEach(t),S_o=r(Fwe," (XLM model)"),Fwe.forEach(t),R_o=i(B),g_=n(B,"LI",{});var vwe=s(g_);Hte=n(vwe,"STRONG",{});var eWr=s(Hte);B_o=r(eWr,"xlm-roberta"),eWr.forEach(t),P_o=r(vwe," \u2014 "),F$=n(vwe,"A",{href:!0});var oWr=s(F$);$_o=r(oWr,"XLMRobertaForMaskedLM"),oWr.forEach(t),I_o=r(vwe," (XLM-RoBERTa model)"),vwe.forEach(t),q_o=i(B),h_=n(B,"LI",{});var Twe=s(h_);Ute=n(Twe,"STRONG",{});var rWr=s(Ute);N_o=r(rWr,"xlm-roberta-xl"),rWr.forEach(t),j_o=r(Twe," \u2014 "),v$=n(Twe,"A",{href:!0});var tWr=s(v$);D_o=r(tWr,"XLMRobertaXLForMaskedLM"),tWr.forEach(t),G_o=r(Twe," (XLM-RoBERTa-XL model)"),Twe.forEach(t),O_o=i(B),u_=n(B,"LI",{});var Mwe=s(u_);Jte=n(Mwe,"STRONG",{});var aWr=s(Jte);V_o=r(aWr,"xlnet"),aWr.forEach(t),X_o=r(Mwe," \u2014 "),T$=n(Mwe,"A",{href:!0});var nWr=s(T$);z_o=r(nWr,"XLNetLMHeadModel"),nWr.forEach(t),Q_o=r(Mwe," (XLNet model)"),Mwe.forEach(t),B.forEach(t),W_o=i(Gt),p_=n(Gt,"P",{});var Ewe=s(p_);H_o=r(Ewe,"The model is set in evaluation mode by default using "),Yte=n(Ewe,"CODE",{});var sWr=s(Yte);U_o=r(sWr,"model.eval()"),sWr.forEach(t),J_o=r(Ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kte=n(Ewe,"CODE",{});var lWr=s(Kte);Y_o=r(lWr,"model.train()"),lWr.forEach(t),Ewe.forEach(t),K_o=i(Gt),Zte=n(Gt,"P",{});var iWr=s(Zte);Z_o=r(iWr,"Examples:"),iWr.forEach(t),ebo=i(Gt),f(sA.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),QSe=i(c),rd=n(c,"H2",{class:!0});var oPe=s(rd);__=n(oPe,"A",{id:!0,class:!0,href:!0});var dWr=s(__);eae=n(dWr,"SPAN",{});var cWr=s(eae);f(lA.$$.fragment,cWr),cWr.forEach(t),dWr.forEach(t),obo=i(oPe),oae=n(oPe,"SPAN",{});var mWr=s(oae);rbo=r(mWr,"AutoModelForCausalLM"),mWr.forEach(t),oPe.forEach(t),WSe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);f(iA.$$.fragment,Js),tbo=i(Js),td=n(Js,"P",{});var UH=s(td);abo=r(UH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),M$=n(UH,"A",{href:!0});var fWr=s(M$);nbo=r(fWr,"from_pretrained()"),fWr.forEach(t),sbo=r(UH," class method or the "),E$=n(UH,"A",{href:!0});var gWr=s(E$);lbo=r(gWr,"from_config()"),gWr.forEach(t),ibo=r(UH,` class
method.`),UH.forEach(t),dbo=i(Js),dA=n(Js,"P",{});var rPe=s(dA);cbo=r(rPe,"This class cannot be instantiated directly using "),rae=n(rPe,"CODE",{});var hWr=s(rae);mbo=r(hWr,"__init__()"),hWr.forEach(t),fbo=r(rPe," (throws an error)."),rPe.forEach(t),gbo=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);f(cA.$$.fragment,Ys),hbo=i(Ys),tae=n(Ys,"P",{});var uWr=s(tae);ubo=r(uWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uWr.forEach(t),pbo=i(Ys),ad=n(Ys,"P",{});var JH=s(ad);_bo=r(JH,`Note:
Loading a model from its configuration file does `),aae=n(JH,"STRONG",{});var pWr=s(aae);bbo=r(pWr,"not"),pWr.forEach(t),Fbo=r(JH,` load the model weights. It only affects the
model\u2019s configuration. Use `),C$=n(JH,"A",{href:!0});var _Wr=s(C$);vbo=r(_Wr,"from_pretrained()"),_Wr.forEach(t),Tbo=r(JH," to load the model weights."),JH.forEach(t),Mbo=i(Ys),nae=n(Ys,"P",{});var bWr=s(nae);Ebo=r(bWr,"Examples:"),bWr.forEach(t),Cbo=i(Ys),f(mA.$$.fragment,Ys),Ys.forEach(t),wbo=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);f(fA.$$.fragment,Ot),Abo=i(Ot),sae=n(Ot,"P",{});var FWr=s(sae);ybo=r(FWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FWr.forEach(t),Lbo=i(Ot),Qa=n(Ot,"P",{});var F3=s(Qa);xbo=r(F3,"The model class to instantiate is selected based on the "),lae=n(F3,"CODE",{});var vWr=s(lae);kbo=r(vWr,"model_type"),vWr.forEach(t),Sbo=r(F3,` property of the config object (either
passed as an argument or loaded from `),iae=n(F3,"CODE",{});var TWr=s(iae);Rbo=r(TWr,"pretrained_model_name_or_path"),TWr.forEach(t),Bbo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=n(F3,"CODE",{});var MWr=s(dae);Pbo=r(MWr,"pretrained_model_name_or_path"),MWr.forEach(t),$bo=r(F3,":"),F3.forEach(t),Ibo=i(Ot),$=n(Ot,"UL",{});var q=s($);b_=n(q,"LI",{});var Cwe=s(b_);cae=n(Cwe,"STRONG",{});var EWr=s(cae);qbo=r(EWr,"bart"),EWr.forEach(t),Nbo=r(Cwe," \u2014 "),w$=n(Cwe,"A",{href:!0});var CWr=s(w$);jbo=r(CWr,"BartForCausalLM"),CWr.forEach(t),Dbo=r(Cwe," (BART model)"),Cwe.forEach(t),Gbo=i(q),F_=n(q,"LI",{});var wwe=s(F_);mae=n(wwe,"STRONG",{});var wWr=s(mae);Obo=r(wWr,"bert"),wWr.forEach(t),Vbo=r(wwe," \u2014 "),A$=n(wwe,"A",{href:!0});var AWr=s(A$);Xbo=r(AWr,"BertLMHeadModel"),AWr.forEach(t),zbo=r(wwe," (BERT model)"),wwe.forEach(t),Qbo=i(q),v_=n(q,"LI",{});var Awe=s(v_);fae=n(Awe,"STRONG",{});var yWr=s(fae);Wbo=r(yWr,"bert-generation"),yWr.forEach(t),Hbo=r(Awe," \u2014 "),y$=n(Awe,"A",{href:!0});var LWr=s(y$);Ubo=r(LWr,"BertGenerationDecoder"),LWr.forEach(t),Jbo=r(Awe," (Bert Generation model)"),Awe.forEach(t),Ybo=i(q),T_=n(q,"LI",{});var ywe=s(T_);gae=n(ywe,"STRONG",{});var xWr=s(gae);Kbo=r(xWr,"big_bird"),xWr.forEach(t),Zbo=r(ywe," \u2014 "),L$=n(ywe,"A",{href:!0});var kWr=s(L$);e2o=r(kWr,"BigBirdForCausalLM"),kWr.forEach(t),o2o=r(ywe," (BigBird model)"),ywe.forEach(t),r2o=i(q),M_=n(q,"LI",{});var Lwe=s(M_);hae=n(Lwe,"STRONG",{});var SWr=s(hae);t2o=r(SWr,"bigbird_pegasus"),SWr.forEach(t),a2o=r(Lwe," \u2014 "),x$=n(Lwe,"A",{href:!0});var RWr=s(x$);n2o=r(RWr,"BigBirdPegasusForCausalLM"),RWr.forEach(t),s2o=r(Lwe," (BigBirdPegasus model)"),Lwe.forEach(t),l2o=i(q),E_=n(q,"LI",{});var xwe=s(E_);uae=n(xwe,"STRONG",{});var BWr=s(uae);i2o=r(BWr,"blenderbot"),BWr.forEach(t),d2o=r(xwe," \u2014 "),k$=n(xwe,"A",{href:!0});var PWr=s(k$);c2o=r(PWr,"BlenderbotForCausalLM"),PWr.forEach(t),m2o=r(xwe," (Blenderbot model)"),xwe.forEach(t),f2o=i(q),C_=n(q,"LI",{});var kwe=s(C_);pae=n(kwe,"STRONG",{});var $Wr=s(pae);g2o=r($Wr,"blenderbot-small"),$Wr.forEach(t),h2o=r(kwe," \u2014 "),S$=n(kwe,"A",{href:!0});var IWr=s(S$);u2o=r(IWr,"BlenderbotSmallForCausalLM"),IWr.forEach(t),p2o=r(kwe," (BlenderbotSmall model)"),kwe.forEach(t),_2o=i(q),w_=n(q,"LI",{});var Swe=s(w_);_ae=n(Swe,"STRONG",{});var qWr=s(_ae);b2o=r(qWr,"camembert"),qWr.forEach(t),F2o=r(Swe," \u2014 "),R$=n(Swe,"A",{href:!0});var NWr=s(R$);v2o=r(NWr,"CamembertForCausalLM"),NWr.forEach(t),T2o=r(Swe," (CamemBERT model)"),Swe.forEach(t),M2o=i(q),A_=n(q,"LI",{});var Rwe=s(A_);bae=n(Rwe,"STRONG",{});var jWr=s(bae);E2o=r(jWr,"ctrl"),jWr.forEach(t),C2o=r(Rwe," \u2014 "),B$=n(Rwe,"A",{href:!0});var DWr=s(B$);w2o=r(DWr,"CTRLLMHeadModel"),DWr.forEach(t),A2o=r(Rwe," (CTRL model)"),Rwe.forEach(t),y2o=i(q),y_=n(q,"LI",{});var Bwe=s(y_);Fae=n(Bwe,"STRONG",{});var GWr=s(Fae);L2o=r(GWr,"data2vec-text"),GWr.forEach(t),x2o=r(Bwe," \u2014 "),P$=n(Bwe,"A",{href:!0});var OWr=s(P$);k2o=r(OWr,"Data2VecTextForCausalLM"),OWr.forEach(t),S2o=r(Bwe," (Data2VecText model)"),Bwe.forEach(t),R2o=i(q),L_=n(q,"LI",{});var Pwe=s(L_);vae=n(Pwe,"STRONG",{});var VWr=s(vae);B2o=r(VWr,"electra"),VWr.forEach(t),P2o=r(Pwe," \u2014 "),$$=n(Pwe,"A",{href:!0});var XWr=s($$);$2o=r(XWr,"ElectraForCausalLM"),XWr.forEach(t),I2o=r(Pwe," (ELECTRA model)"),Pwe.forEach(t),q2o=i(q),x_=n(q,"LI",{});var $we=s(x_);Tae=n($we,"STRONG",{});var zWr=s(Tae);N2o=r(zWr,"gpt2"),zWr.forEach(t),j2o=r($we," \u2014 "),I$=n($we,"A",{href:!0});var QWr=s(I$);D2o=r(QWr,"GPT2LMHeadModel"),QWr.forEach(t),G2o=r($we," (OpenAI GPT-2 model)"),$we.forEach(t),O2o=i(q),k_=n(q,"LI",{});var Iwe=s(k_);Mae=n(Iwe,"STRONG",{});var WWr=s(Mae);V2o=r(WWr,"gpt_neo"),WWr.forEach(t),X2o=r(Iwe," \u2014 "),q$=n(Iwe,"A",{href:!0});var HWr=s(q$);z2o=r(HWr,"GPTNeoForCausalLM"),HWr.forEach(t),Q2o=r(Iwe," (GPT Neo model)"),Iwe.forEach(t),W2o=i(q),S_=n(q,"LI",{});var qwe=s(S_);Eae=n(qwe,"STRONG",{});var UWr=s(Eae);H2o=r(UWr,"gptj"),UWr.forEach(t),U2o=r(qwe," \u2014 "),N$=n(qwe,"A",{href:!0});var JWr=s(N$);J2o=r(JWr,"GPTJForCausalLM"),JWr.forEach(t),Y2o=r(qwe," (GPT-J model)"),qwe.forEach(t),K2o=i(q),R_=n(q,"LI",{});var Nwe=s(R_);Cae=n(Nwe,"STRONG",{});var YWr=s(Cae);Z2o=r(YWr,"marian"),YWr.forEach(t),eFo=r(Nwe," \u2014 "),j$=n(Nwe,"A",{href:!0});var KWr=s(j$);oFo=r(KWr,"MarianForCausalLM"),KWr.forEach(t),rFo=r(Nwe," (Marian model)"),Nwe.forEach(t),tFo=i(q),B_=n(q,"LI",{});var jwe=s(B_);wae=n(jwe,"STRONG",{});var ZWr=s(wae);aFo=r(ZWr,"mbart"),ZWr.forEach(t),nFo=r(jwe," \u2014 "),D$=n(jwe,"A",{href:!0});var eHr=s(D$);sFo=r(eHr,"MBartForCausalLM"),eHr.forEach(t),lFo=r(jwe," (mBART model)"),jwe.forEach(t),iFo=i(q),P_=n(q,"LI",{});var Dwe=s(P_);Aae=n(Dwe,"STRONG",{});var oHr=s(Aae);dFo=r(oHr,"megatron-bert"),oHr.forEach(t),cFo=r(Dwe," \u2014 "),G$=n(Dwe,"A",{href:!0});var rHr=s(G$);mFo=r(rHr,"MegatronBertForCausalLM"),rHr.forEach(t),fFo=r(Dwe," (MegatronBert model)"),Dwe.forEach(t),gFo=i(q),$_=n(q,"LI",{});var Gwe=s($_);yae=n(Gwe,"STRONG",{});var tHr=s(yae);hFo=r(tHr,"openai-gpt"),tHr.forEach(t),uFo=r(Gwe," \u2014 "),O$=n(Gwe,"A",{href:!0});var aHr=s(O$);pFo=r(aHr,"OpenAIGPTLMHeadModel"),aHr.forEach(t),_Fo=r(Gwe," (OpenAI GPT model)"),Gwe.forEach(t),bFo=i(q),I_=n(q,"LI",{});var Owe=s(I_);Lae=n(Owe,"STRONG",{});var nHr=s(Lae);FFo=r(nHr,"pegasus"),nHr.forEach(t),vFo=r(Owe," \u2014 "),V$=n(Owe,"A",{href:!0});var sHr=s(V$);TFo=r(sHr,"PegasusForCausalLM"),sHr.forEach(t),MFo=r(Owe," (Pegasus model)"),Owe.forEach(t),EFo=i(q),q_=n(q,"LI",{});var Vwe=s(q_);xae=n(Vwe,"STRONG",{});var lHr=s(xae);CFo=r(lHr,"plbart"),lHr.forEach(t),wFo=r(Vwe," \u2014 "),X$=n(Vwe,"A",{href:!0});var iHr=s(X$);AFo=r(iHr,"PLBartForCausalLM"),iHr.forEach(t),yFo=r(Vwe," (PLBart model)"),Vwe.forEach(t),LFo=i(q),N_=n(q,"LI",{});var Xwe=s(N_);kae=n(Xwe,"STRONG",{});var dHr=s(kae);xFo=r(dHr,"prophetnet"),dHr.forEach(t),kFo=r(Xwe," \u2014 "),z$=n(Xwe,"A",{href:!0});var cHr=s(z$);SFo=r(cHr,"ProphetNetForCausalLM"),cHr.forEach(t),RFo=r(Xwe," (ProphetNet model)"),Xwe.forEach(t),BFo=i(q),j_=n(q,"LI",{});var zwe=s(j_);Sae=n(zwe,"STRONG",{});var mHr=s(Sae);PFo=r(mHr,"qdqbert"),mHr.forEach(t),$Fo=r(zwe," \u2014 "),Q$=n(zwe,"A",{href:!0});var fHr=s(Q$);IFo=r(fHr,"QDQBertLMHeadModel"),fHr.forEach(t),qFo=r(zwe," (QDQBert model)"),zwe.forEach(t),NFo=i(q),D_=n(q,"LI",{});var Qwe=s(D_);Rae=n(Qwe,"STRONG",{});var gHr=s(Rae);jFo=r(gHr,"reformer"),gHr.forEach(t),DFo=r(Qwe," \u2014 "),W$=n(Qwe,"A",{href:!0});var hHr=s(W$);GFo=r(hHr,"ReformerModelWithLMHead"),hHr.forEach(t),OFo=r(Qwe," (Reformer model)"),Qwe.forEach(t),VFo=i(q),G_=n(q,"LI",{});var Wwe=s(G_);Bae=n(Wwe,"STRONG",{});var uHr=s(Bae);XFo=r(uHr,"rembert"),uHr.forEach(t),zFo=r(Wwe," \u2014 "),H$=n(Wwe,"A",{href:!0});var pHr=s(H$);QFo=r(pHr,"RemBertForCausalLM"),pHr.forEach(t),WFo=r(Wwe," (RemBERT model)"),Wwe.forEach(t),HFo=i(q),O_=n(q,"LI",{});var Hwe=s(O_);Pae=n(Hwe,"STRONG",{});var _Hr=s(Pae);UFo=r(_Hr,"roberta"),_Hr.forEach(t),JFo=r(Hwe," \u2014 "),U$=n(Hwe,"A",{href:!0});var bHr=s(U$);YFo=r(bHr,"RobertaForCausalLM"),bHr.forEach(t),KFo=r(Hwe," (RoBERTa model)"),Hwe.forEach(t),ZFo=i(q),V_=n(q,"LI",{});var Uwe=s(V_);$ae=n(Uwe,"STRONG",{});var FHr=s($ae);evo=r(FHr,"roformer"),FHr.forEach(t),ovo=r(Uwe," \u2014 "),J$=n(Uwe,"A",{href:!0});var vHr=s(J$);rvo=r(vHr,"RoFormerForCausalLM"),vHr.forEach(t),tvo=r(Uwe," (RoFormer model)"),Uwe.forEach(t),avo=i(q),X_=n(q,"LI",{});var Jwe=s(X_);Iae=n(Jwe,"STRONG",{});var THr=s(Iae);nvo=r(THr,"speech_to_text_2"),THr.forEach(t),svo=r(Jwe," \u2014 "),Y$=n(Jwe,"A",{href:!0});var MHr=s(Y$);lvo=r(MHr,"Speech2Text2ForCausalLM"),MHr.forEach(t),ivo=r(Jwe," (Speech2Text2 model)"),Jwe.forEach(t),dvo=i(q),z_=n(q,"LI",{});var Ywe=s(z_);qae=n(Ywe,"STRONG",{});var EHr=s(qae);cvo=r(EHr,"transfo-xl"),EHr.forEach(t),mvo=r(Ywe," \u2014 "),K$=n(Ywe,"A",{href:!0});var CHr=s(K$);fvo=r(CHr,"TransfoXLLMHeadModel"),CHr.forEach(t),gvo=r(Ywe," (Transformer-XL model)"),Ywe.forEach(t),hvo=i(q),Q_=n(q,"LI",{});var Kwe=s(Q_);Nae=n(Kwe,"STRONG",{});var wHr=s(Nae);uvo=r(wHr,"trocr"),wHr.forEach(t),pvo=r(Kwe," \u2014 "),Z$=n(Kwe,"A",{href:!0});var AHr=s(Z$);_vo=r(AHr,"TrOCRForCausalLM"),AHr.forEach(t),bvo=r(Kwe," (TrOCR model)"),Kwe.forEach(t),Fvo=i(q),W_=n(q,"LI",{});var Zwe=s(W_);jae=n(Zwe,"STRONG",{});var yHr=s(jae);vvo=r(yHr,"xglm"),yHr.forEach(t),Tvo=r(Zwe," \u2014 "),eI=n(Zwe,"A",{href:!0});var LHr=s(eI);Mvo=r(LHr,"XGLMForCausalLM"),LHr.forEach(t),Evo=r(Zwe," (XGLM model)"),Zwe.forEach(t),Cvo=i(q),H_=n(q,"LI",{});var eAe=s(H_);Dae=n(eAe,"STRONG",{});var xHr=s(Dae);wvo=r(xHr,"xlm"),xHr.forEach(t),Avo=r(eAe," \u2014 "),oI=n(eAe,"A",{href:!0});var kHr=s(oI);yvo=r(kHr,"XLMWithLMHeadModel"),kHr.forEach(t),Lvo=r(eAe," (XLM model)"),eAe.forEach(t),xvo=i(q),U_=n(q,"LI",{});var oAe=s(U_);Gae=n(oAe,"STRONG",{});var SHr=s(Gae);kvo=r(SHr,"xlm-prophetnet"),SHr.forEach(t),Svo=r(oAe," \u2014 "),rI=n(oAe,"A",{href:!0});var RHr=s(rI);Rvo=r(RHr,"XLMProphetNetForCausalLM"),RHr.forEach(t),Bvo=r(oAe," (XLMProphetNet model)"),oAe.forEach(t),Pvo=i(q),J_=n(q,"LI",{});var rAe=s(J_);Oae=n(rAe,"STRONG",{});var BHr=s(Oae);$vo=r(BHr,"xlm-roberta"),BHr.forEach(t),Ivo=r(rAe," \u2014 "),tI=n(rAe,"A",{href:!0});var PHr=s(tI);qvo=r(PHr,"XLMRobertaForCausalLM"),PHr.forEach(t),Nvo=r(rAe," (XLM-RoBERTa model)"),rAe.forEach(t),jvo=i(q),Y_=n(q,"LI",{});var tAe=s(Y_);Vae=n(tAe,"STRONG",{});var $Hr=s(Vae);Dvo=r($Hr,"xlm-roberta-xl"),$Hr.forEach(t),Gvo=r(tAe," \u2014 "),aI=n(tAe,"A",{href:!0});var IHr=s(aI);Ovo=r(IHr,"XLMRobertaXLForCausalLM"),IHr.forEach(t),Vvo=r(tAe," (XLM-RoBERTa-XL model)"),tAe.forEach(t),Xvo=i(q),K_=n(q,"LI",{});var aAe=s(K_);Xae=n(aAe,"STRONG",{});var qHr=s(Xae);zvo=r(qHr,"xlnet"),qHr.forEach(t),Qvo=r(aAe," \u2014 "),nI=n(aAe,"A",{href:!0});var NHr=s(nI);Wvo=r(NHr,"XLNetLMHeadModel"),NHr.forEach(t),Hvo=r(aAe," (XLNet model)"),aAe.forEach(t),q.forEach(t),Uvo=i(Ot),Z_=n(Ot,"P",{});var nAe=s(Z_);Jvo=r(nAe,"The model is set in evaluation mode by default using "),zae=n(nAe,"CODE",{});var jHr=s(zae);Yvo=r(jHr,"model.eval()"),jHr.forEach(t),Kvo=r(nAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qae=n(nAe,"CODE",{});var DHr=s(Qae);Zvo=r(DHr,"model.train()"),DHr.forEach(t),nAe.forEach(t),eTo=i(Ot),Wae=n(Ot,"P",{});var GHr=s(Wae);oTo=r(GHr,"Examples:"),GHr.forEach(t),rTo=i(Ot),f(gA.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),HSe=i(c),nd=n(c,"H2",{class:!0});var tPe=s(nd);eb=n(tPe,"A",{id:!0,class:!0,href:!0});var OHr=s(eb);Hae=n(OHr,"SPAN",{});var VHr=s(Hae);f(hA.$$.fragment,VHr),VHr.forEach(t),OHr.forEach(t),tTo=i(tPe),Uae=n(tPe,"SPAN",{});var XHr=s(Uae);aTo=r(XHr,"AutoModelForMaskedLM"),XHr.forEach(t),tPe.forEach(t),USe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);f(uA.$$.fragment,Ks),nTo=i(Ks),sd=n(Ks,"P",{});var YH=s(sd);sTo=r(YH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sI=n(YH,"A",{href:!0});var zHr=s(sI);lTo=r(zHr,"from_pretrained()"),zHr.forEach(t),iTo=r(YH," class method or the "),lI=n(YH,"A",{href:!0});var QHr=s(lI);dTo=r(QHr,"from_config()"),QHr.forEach(t),cTo=r(YH,` class
method.`),YH.forEach(t),mTo=i(Ks),pA=n(Ks,"P",{});var aPe=s(pA);fTo=r(aPe,"This class cannot be instantiated directly using "),Jae=n(aPe,"CODE",{});var WHr=s(Jae);gTo=r(WHr,"__init__()"),WHr.forEach(t),hTo=r(aPe," (throws an error)."),aPe.forEach(t),uTo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);f(_A.$$.fragment,Zs),pTo=i(Zs),Yae=n(Zs,"P",{});var HHr=s(Yae);_To=r(HHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HHr.forEach(t),bTo=i(Zs),ld=n(Zs,"P",{});var KH=s(ld);FTo=r(KH,`Note:
Loading a model from its configuration file does `),Kae=n(KH,"STRONG",{});var UHr=s(Kae);vTo=r(UHr,"not"),UHr.forEach(t),TTo=r(KH,` load the model weights. It only affects the
model\u2019s configuration. Use `),iI=n(KH,"A",{href:!0});var JHr=s(iI);MTo=r(JHr,"from_pretrained()"),JHr.forEach(t),ETo=r(KH," to load the model weights."),KH.forEach(t),CTo=i(Zs),Zae=n(Zs,"P",{});var YHr=s(Zae);wTo=r(YHr,"Examples:"),YHr.forEach(t),ATo=i(Zs),f(bA.$$.fragment,Zs),Zs.forEach(t),yTo=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);f(FA.$$.fragment,Vt),LTo=i(Vt),ene=n(Vt,"P",{});var KHr=s(ene);xTo=r(KHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KHr.forEach(t),kTo=i(Vt),Wa=n(Vt,"P",{});var v3=s(Wa);STo=r(v3,"The model class to instantiate is selected based on the "),one=n(v3,"CODE",{});var ZHr=s(one);RTo=r(ZHr,"model_type"),ZHr.forEach(t),BTo=r(v3,` property of the config object (either
passed as an argument or loaded from `),rne=n(v3,"CODE",{});var eUr=s(rne);PTo=r(eUr,"pretrained_model_name_or_path"),eUr.forEach(t),$To=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=n(v3,"CODE",{});var oUr=s(tne);ITo=r(oUr,"pretrained_model_name_or_path"),oUr.forEach(t),qTo=r(v3,":"),v3.forEach(t),NTo=i(Vt),I=n(Vt,"UL",{});var N=s(I);ob=n(N,"LI",{});var sAe=s(ob);ane=n(sAe,"STRONG",{});var rUr=s(ane);jTo=r(rUr,"albert"),rUr.forEach(t),DTo=r(sAe," \u2014 "),dI=n(sAe,"A",{href:!0});var tUr=s(dI);GTo=r(tUr,"AlbertForMaskedLM"),tUr.forEach(t),OTo=r(sAe," (ALBERT model)"),sAe.forEach(t),VTo=i(N),rb=n(N,"LI",{});var lAe=s(rb);nne=n(lAe,"STRONG",{});var aUr=s(nne);XTo=r(aUr,"bart"),aUr.forEach(t),zTo=r(lAe," \u2014 "),cI=n(lAe,"A",{href:!0});var nUr=s(cI);QTo=r(nUr,"BartForConditionalGeneration"),nUr.forEach(t),WTo=r(lAe," (BART model)"),lAe.forEach(t),HTo=i(N),tb=n(N,"LI",{});var iAe=s(tb);sne=n(iAe,"STRONG",{});var sUr=s(sne);UTo=r(sUr,"bert"),sUr.forEach(t),JTo=r(iAe," \u2014 "),mI=n(iAe,"A",{href:!0});var lUr=s(mI);YTo=r(lUr,"BertForMaskedLM"),lUr.forEach(t),KTo=r(iAe," (BERT model)"),iAe.forEach(t),ZTo=i(N),ab=n(N,"LI",{});var dAe=s(ab);lne=n(dAe,"STRONG",{});var iUr=s(lne);e1o=r(iUr,"big_bird"),iUr.forEach(t),o1o=r(dAe," \u2014 "),fI=n(dAe,"A",{href:!0});var dUr=s(fI);r1o=r(dUr,"BigBirdForMaskedLM"),dUr.forEach(t),t1o=r(dAe," (BigBird model)"),dAe.forEach(t),a1o=i(N),nb=n(N,"LI",{});var cAe=s(nb);ine=n(cAe,"STRONG",{});var cUr=s(ine);n1o=r(cUr,"camembert"),cUr.forEach(t),s1o=r(cAe," \u2014 "),gI=n(cAe,"A",{href:!0});var mUr=s(gI);l1o=r(mUr,"CamembertForMaskedLM"),mUr.forEach(t),i1o=r(cAe," (CamemBERT model)"),cAe.forEach(t),d1o=i(N),sb=n(N,"LI",{});var mAe=s(sb);dne=n(mAe,"STRONG",{});var fUr=s(dne);c1o=r(fUr,"convbert"),fUr.forEach(t),m1o=r(mAe," \u2014 "),hI=n(mAe,"A",{href:!0});var gUr=s(hI);f1o=r(gUr,"ConvBertForMaskedLM"),gUr.forEach(t),g1o=r(mAe," (ConvBERT model)"),mAe.forEach(t),h1o=i(N),lb=n(N,"LI",{});var fAe=s(lb);cne=n(fAe,"STRONG",{});var hUr=s(cne);u1o=r(hUr,"data2vec-text"),hUr.forEach(t),p1o=r(fAe," \u2014 "),uI=n(fAe,"A",{href:!0});var uUr=s(uI);_1o=r(uUr,"Data2VecTextForMaskedLM"),uUr.forEach(t),b1o=r(fAe," (Data2VecText model)"),fAe.forEach(t),F1o=i(N),ib=n(N,"LI",{});var gAe=s(ib);mne=n(gAe,"STRONG",{});var pUr=s(mne);v1o=r(pUr,"deberta"),pUr.forEach(t),T1o=r(gAe," \u2014 "),pI=n(gAe,"A",{href:!0});var _Ur=s(pI);M1o=r(_Ur,"DebertaForMaskedLM"),_Ur.forEach(t),E1o=r(gAe," (DeBERTa model)"),gAe.forEach(t),C1o=i(N),db=n(N,"LI",{});var hAe=s(db);fne=n(hAe,"STRONG",{});var bUr=s(fne);w1o=r(bUr,"deberta-v2"),bUr.forEach(t),A1o=r(hAe," \u2014 "),_I=n(hAe,"A",{href:!0});var FUr=s(_I);y1o=r(FUr,"DebertaV2ForMaskedLM"),FUr.forEach(t),L1o=r(hAe," (DeBERTa-v2 model)"),hAe.forEach(t),x1o=i(N),cb=n(N,"LI",{});var uAe=s(cb);gne=n(uAe,"STRONG",{});var vUr=s(gne);k1o=r(vUr,"distilbert"),vUr.forEach(t),S1o=r(uAe," \u2014 "),bI=n(uAe,"A",{href:!0});var TUr=s(bI);R1o=r(TUr,"DistilBertForMaskedLM"),TUr.forEach(t),B1o=r(uAe," (DistilBERT model)"),uAe.forEach(t),P1o=i(N),mb=n(N,"LI",{});var pAe=s(mb);hne=n(pAe,"STRONG",{});var MUr=s(hne);$1o=r(MUr,"electra"),MUr.forEach(t),I1o=r(pAe," \u2014 "),FI=n(pAe,"A",{href:!0});var EUr=s(FI);q1o=r(EUr,"ElectraForMaskedLM"),EUr.forEach(t),N1o=r(pAe," (ELECTRA model)"),pAe.forEach(t),j1o=i(N),fb=n(N,"LI",{});var _Ae=s(fb);une=n(_Ae,"STRONG",{});var CUr=s(une);D1o=r(CUr,"flaubert"),CUr.forEach(t),G1o=r(_Ae," \u2014 "),vI=n(_Ae,"A",{href:!0});var wUr=s(vI);O1o=r(wUr,"FlaubertWithLMHeadModel"),wUr.forEach(t),V1o=r(_Ae," (FlauBERT model)"),_Ae.forEach(t),X1o=i(N),gb=n(N,"LI",{});var bAe=s(gb);pne=n(bAe,"STRONG",{});var AUr=s(pne);z1o=r(AUr,"fnet"),AUr.forEach(t),Q1o=r(bAe," \u2014 "),TI=n(bAe,"A",{href:!0});var yUr=s(TI);W1o=r(yUr,"FNetForMaskedLM"),yUr.forEach(t),H1o=r(bAe," (FNet model)"),bAe.forEach(t),U1o=i(N),hb=n(N,"LI",{});var FAe=s(hb);_ne=n(FAe,"STRONG",{});var LUr=s(_ne);J1o=r(LUr,"funnel"),LUr.forEach(t),Y1o=r(FAe," \u2014 "),MI=n(FAe,"A",{href:!0});var xUr=s(MI);K1o=r(xUr,"FunnelForMaskedLM"),xUr.forEach(t),Z1o=r(FAe," (Funnel Transformer model)"),FAe.forEach(t),eMo=i(N),ub=n(N,"LI",{});var vAe=s(ub);bne=n(vAe,"STRONG",{});var kUr=s(bne);oMo=r(kUr,"ibert"),kUr.forEach(t),rMo=r(vAe," \u2014 "),EI=n(vAe,"A",{href:!0});var SUr=s(EI);tMo=r(SUr,"IBertForMaskedLM"),SUr.forEach(t),aMo=r(vAe," (I-BERT model)"),vAe.forEach(t),nMo=i(N),pb=n(N,"LI",{});var TAe=s(pb);Fne=n(TAe,"STRONG",{});var RUr=s(Fne);sMo=r(RUr,"layoutlm"),RUr.forEach(t),lMo=r(TAe," \u2014 "),CI=n(TAe,"A",{href:!0});var BUr=s(CI);iMo=r(BUr,"LayoutLMForMaskedLM"),BUr.forEach(t),dMo=r(TAe," (LayoutLM model)"),TAe.forEach(t),cMo=i(N),_b=n(N,"LI",{});var MAe=s(_b);vne=n(MAe,"STRONG",{});var PUr=s(vne);mMo=r(PUr,"longformer"),PUr.forEach(t),fMo=r(MAe," \u2014 "),wI=n(MAe,"A",{href:!0});var $Ur=s(wI);gMo=r($Ur,"LongformerForMaskedLM"),$Ur.forEach(t),hMo=r(MAe," (Longformer model)"),MAe.forEach(t),uMo=i(N),bb=n(N,"LI",{});var EAe=s(bb);Tne=n(EAe,"STRONG",{});var IUr=s(Tne);pMo=r(IUr,"mbart"),IUr.forEach(t),_Mo=r(EAe," \u2014 "),AI=n(EAe,"A",{href:!0});var qUr=s(AI);bMo=r(qUr,"MBartForConditionalGeneration"),qUr.forEach(t),FMo=r(EAe," (mBART model)"),EAe.forEach(t),vMo=i(N),Fb=n(N,"LI",{});var CAe=s(Fb);Mne=n(CAe,"STRONG",{});var NUr=s(Mne);TMo=r(NUr,"megatron-bert"),NUr.forEach(t),MMo=r(CAe," \u2014 "),yI=n(CAe,"A",{href:!0});var jUr=s(yI);EMo=r(jUr,"MegatronBertForMaskedLM"),jUr.forEach(t),CMo=r(CAe," (MegatronBert model)"),CAe.forEach(t),wMo=i(N),vb=n(N,"LI",{});var wAe=s(vb);Ene=n(wAe,"STRONG",{});var DUr=s(Ene);AMo=r(DUr,"mobilebert"),DUr.forEach(t),yMo=r(wAe," \u2014 "),LI=n(wAe,"A",{href:!0});var GUr=s(LI);LMo=r(GUr,"MobileBertForMaskedLM"),GUr.forEach(t),xMo=r(wAe," (MobileBERT model)"),wAe.forEach(t),kMo=i(N),Tb=n(N,"LI",{});var AAe=s(Tb);Cne=n(AAe,"STRONG",{});var OUr=s(Cne);SMo=r(OUr,"mpnet"),OUr.forEach(t),RMo=r(AAe," \u2014 "),xI=n(AAe,"A",{href:!0});var VUr=s(xI);BMo=r(VUr,"MPNetForMaskedLM"),VUr.forEach(t),PMo=r(AAe," (MPNet model)"),AAe.forEach(t),$Mo=i(N),Mb=n(N,"LI",{});var yAe=s(Mb);wne=n(yAe,"STRONG",{});var XUr=s(wne);IMo=r(XUr,"nystromformer"),XUr.forEach(t),qMo=r(yAe," \u2014 "),kI=n(yAe,"A",{href:!0});var zUr=s(kI);NMo=r(zUr,"NystromformerForMaskedLM"),zUr.forEach(t),jMo=r(yAe," (Nystromformer model)"),yAe.forEach(t),DMo=i(N),Eb=n(N,"LI",{});var LAe=s(Eb);Ane=n(LAe,"STRONG",{});var QUr=s(Ane);GMo=r(QUr,"perceiver"),QUr.forEach(t),OMo=r(LAe," \u2014 "),SI=n(LAe,"A",{href:!0});var WUr=s(SI);VMo=r(WUr,"PerceiverForMaskedLM"),WUr.forEach(t),XMo=r(LAe," (Perceiver model)"),LAe.forEach(t),zMo=i(N),Cb=n(N,"LI",{});var xAe=s(Cb);yne=n(xAe,"STRONG",{});var HUr=s(yne);QMo=r(HUr,"qdqbert"),HUr.forEach(t),WMo=r(xAe," \u2014 "),RI=n(xAe,"A",{href:!0});var UUr=s(RI);HMo=r(UUr,"QDQBertForMaskedLM"),UUr.forEach(t),UMo=r(xAe," (QDQBert model)"),xAe.forEach(t),JMo=i(N),wb=n(N,"LI",{});var kAe=s(wb);Lne=n(kAe,"STRONG",{});var JUr=s(Lne);YMo=r(JUr,"reformer"),JUr.forEach(t),KMo=r(kAe," \u2014 "),BI=n(kAe,"A",{href:!0});var YUr=s(BI);ZMo=r(YUr,"ReformerForMaskedLM"),YUr.forEach(t),e4o=r(kAe," (Reformer model)"),kAe.forEach(t),o4o=i(N),Ab=n(N,"LI",{});var SAe=s(Ab);xne=n(SAe,"STRONG",{});var KUr=s(xne);r4o=r(KUr,"rembert"),KUr.forEach(t),t4o=r(SAe," \u2014 "),PI=n(SAe,"A",{href:!0});var ZUr=s(PI);a4o=r(ZUr,"RemBertForMaskedLM"),ZUr.forEach(t),n4o=r(SAe," (RemBERT model)"),SAe.forEach(t),s4o=i(N),yb=n(N,"LI",{});var RAe=s(yb);kne=n(RAe,"STRONG",{});var eJr=s(kne);l4o=r(eJr,"roberta"),eJr.forEach(t),i4o=r(RAe," \u2014 "),$I=n(RAe,"A",{href:!0});var oJr=s($I);d4o=r(oJr,"RobertaForMaskedLM"),oJr.forEach(t),c4o=r(RAe," (RoBERTa model)"),RAe.forEach(t),m4o=i(N),Lb=n(N,"LI",{});var BAe=s(Lb);Sne=n(BAe,"STRONG",{});var rJr=s(Sne);f4o=r(rJr,"roformer"),rJr.forEach(t),g4o=r(BAe," \u2014 "),II=n(BAe,"A",{href:!0});var tJr=s(II);h4o=r(tJr,"RoFormerForMaskedLM"),tJr.forEach(t),u4o=r(BAe," (RoFormer model)"),BAe.forEach(t),p4o=i(N),xb=n(N,"LI",{});var PAe=s(xb);Rne=n(PAe,"STRONG",{});var aJr=s(Rne);_4o=r(aJr,"squeezebert"),aJr.forEach(t),b4o=r(PAe," \u2014 "),qI=n(PAe,"A",{href:!0});var nJr=s(qI);F4o=r(nJr,"SqueezeBertForMaskedLM"),nJr.forEach(t),v4o=r(PAe," (SqueezeBERT model)"),PAe.forEach(t),T4o=i(N),kb=n(N,"LI",{});var $Ae=s(kb);Bne=n($Ae,"STRONG",{});var sJr=s(Bne);M4o=r(sJr,"tapas"),sJr.forEach(t),E4o=r($Ae," \u2014 "),NI=n($Ae,"A",{href:!0});var lJr=s(NI);C4o=r(lJr,"TapasForMaskedLM"),lJr.forEach(t),w4o=r($Ae," (TAPAS model)"),$Ae.forEach(t),A4o=i(N),Sb=n(N,"LI",{});var IAe=s(Sb);Pne=n(IAe,"STRONG",{});var iJr=s(Pne);y4o=r(iJr,"wav2vec2"),iJr.forEach(t),L4o=r(IAe," \u2014 "),$ne=n(IAe,"CODE",{});var dJr=s($ne);x4o=r(dJr,"Wav2Vec2ForMaskedLM"),dJr.forEach(t),k4o=r(IAe,"(Wav2Vec2 model)"),IAe.forEach(t),S4o=i(N),Rb=n(N,"LI",{});var qAe=s(Rb);Ine=n(qAe,"STRONG",{});var cJr=s(Ine);R4o=r(cJr,"xlm"),cJr.forEach(t),B4o=r(qAe," \u2014 "),jI=n(qAe,"A",{href:!0});var mJr=s(jI);P4o=r(mJr,"XLMWithLMHeadModel"),mJr.forEach(t),$4o=r(qAe," (XLM model)"),qAe.forEach(t),I4o=i(N),Bb=n(N,"LI",{});var NAe=s(Bb);qne=n(NAe,"STRONG",{});var fJr=s(qne);q4o=r(fJr,"xlm-roberta"),fJr.forEach(t),N4o=r(NAe," \u2014 "),DI=n(NAe,"A",{href:!0});var gJr=s(DI);j4o=r(gJr,"XLMRobertaForMaskedLM"),gJr.forEach(t),D4o=r(NAe," (XLM-RoBERTa model)"),NAe.forEach(t),G4o=i(N),Pb=n(N,"LI",{});var jAe=s(Pb);Nne=n(jAe,"STRONG",{});var hJr=s(Nne);O4o=r(hJr,"xlm-roberta-xl"),hJr.forEach(t),V4o=r(jAe," \u2014 "),GI=n(jAe,"A",{href:!0});var uJr=s(GI);X4o=r(uJr,"XLMRobertaXLForMaskedLM"),uJr.forEach(t),z4o=r(jAe," (XLM-RoBERTa-XL model)"),jAe.forEach(t),Q4o=i(N),$b=n(N,"LI",{});var DAe=s($b);jne=n(DAe,"STRONG",{});var pJr=s(jne);W4o=r(pJr,"yoso"),pJr.forEach(t),H4o=r(DAe," \u2014 "),OI=n(DAe,"A",{href:!0});var _Jr=s(OI);U4o=r(_Jr,"YosoForMaskedLM"),_Jr.forEach(t),J4o=r(DAe," (YOSO model)"),DAe.forEach(t),N.forEach(t),Y4o=i(Vt),Ib=n(Vt,"P",{});var GAe=s(Ib);K4o=r(GAe,"The model is set in evaluation mode by default using "),Dne=n(GAe,"CODE",{});var bJr=s(Dne);Z4o=r(bJr,"model.eval()"),bJr.forEach(t),eEo=r(GAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gne=n(GAe,"CODE",{});var FJr=s(Gne);oEo=r(FJr,"model.train()"),FJr.forEach(t),GAe.forEach(t),rEo=i(Vt),One=n(Vt,"P",{});var vJr=s(One);tEo=r(vJr,"Examples:"),vJr.forEach(t),aEo=i(Vt),f(vA.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),JSe=i(c),id=n(c,"H2",{class:!0});var nPe=s(id);qb=n(nPe,"A",{id:!0,class:!0,href:!0});var TJr=s(qb);Vne=n(TJr,"SPAN",{});var MJr=s(Vne);f(TA.$$.fragment,MJr),MJr.forEach(t),TJr.forEach(t),nEo=i(nPe),Xne=n(nPe,"SPAN",{});var EJr=s(Xne);sEo=r(EJr,"AutoModelForSeq2SeqLM"),EJr.forEach(t),nPe.forEach(t),YSe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);f(MA.$$.fragment,el),lEo=i(el),dd=n(el,"P",{});var ZH=s(dd);iEo=r(ZH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VI=n(ZH,"A",{href:!0});var CJr=s(VI);dEo=r(CJr,"from_pretrained()"),CJr.forEach(t),cEo=r(ZH," class method or the "),XI=n(ZH,"A",{href:!0});var wJr=s(XI);mEo=r(wJr,"from_config()"),wJr.forEach(t),fEo=r(ZH,` class
method.`),ZH.forEach(t),gEo=i(el),EA=n(el,"P",{});var sPe=s(EA);hEo=r(sPe,"This class cannot be instantiated directly using "),zne=n(sPe,"CODE",{});var AJr=s(zne);uEo=r(AJr,"__init__()"),AJr.forEach(t),pEo=r(sPe," (throws an error)."),sPe.forEach(t),_Eo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);f(CA.$$.fragment,ol),bEo=i(ol),Qne=n(ol,"P",{});var yJr=s(Qne);FEo=r(yJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yJr.forEach(t),vEo=i(ol),cd=n(ol,"P",{});var eU=s(cd);TEo=r(eU,`Note:
Loading a model from its configuration file does `),Wne=n(eU,"STRONG",{});var LJr=s(Wne);MEo=r(LJr,"not"),LJr.forEach(t),EEo=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zI=n(eU,"A",{href:!0});var xJr=s(zI);CEo=r(xJr,"from_pretrained()"),xJr.forEach(t),wEo=r(eU," to load the model weights."),eU.forEach(t),AEo=i(ol),Hne=n(ol,"P",{});var kJr=s(Hne);yEo=r(kJr,"Examples:"),kJr.forEach(t),LEo=i(ol),f(wA.$$.fragment,ol),ol.forEach(t),xEo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);f(AA.$$.fragment,Xt),kEo=i(Xt),Une=n(Xt,"P",{});var SJr=s(Une);SEo=r(SJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SJr.forEach(t),REo=i(Xt),Ha=n(Xt,"P",{});var T3=s(Ha);BEo=r(T3,"The model class to instantiate is selected based on the "),Jne=n(T3,"CODE",{});var RJr=s(Jne);PEo=r(RJr,"model_type"),RJr.forEach(t),$Eo=r(T3,` property of the config object (either
passed as an argument or loaded from `),Yne=n(T3,"CODE",{});var BJr=s(Yne);IEo=r(BJr,"pretrained_model_name_or_path"),BJr.forEach(t),qEo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=n(T3,"CODE",{});var PJr=s(Kne);NEo=r(PJr,"pretrained_model_name_or_path"),PJr.forEach(t),jEo=r(T3,":"),T3.forEach(t),DEo=i(Xt),se=n(Xt,"UL",{});var ie=s(se);Nb=n(ie,"LI",{});var OAe=s(Nb);Zne=n(OAe,"STRONG",{});var $Jr=s(Zne);GEo=r($Jr,"bart"),$Jr.forEach(t),OEo=r(OAe," \u2014 "),QI=n(OAe,"A",{href:!0});var IJr=s(QI);VEo=r(IJr,"BartForConditionalGeneration"),IJr.forEach(t),XEo=r(OAe," (BART model)"),OAe.forEach(t),zEo=i(ie),jb=n(ie,"LI",{});var VAe=s(jb);ese=n(VAe,"STRONG",{});var qJr=s(ese);QEo=r(qJr,"bigbird_pegasus"),qJr.forEach(t),WEo=r(VAe," \u2014 "),WI=n(VAe,"A",{href:!0});var NJr=s(WI);HEo=r(NJr,"BigBirdPegasusForConditionalGeneration"),NJr.forEach(t),UEo=r(VAe," (BigBirdPegasus model)"),VAe.forEach(t),JEo=i(ie),Db=n(ie,"LI",{});var XAe=s(Db);ose=n(XAe,"STRONG",{});var jJr=s(ose);YEo=r(jJr,"blenderbot"),jJr.forEach(t),KEo=r(XAe," \u2014 "),HI=n(XAe,"A",{href:!0});var DJr=s(HI);ZEo=r(DJr,"BlenderbotForConditionalGeneration"),DJr.forEach(t),eCo=r(XAe," (Blenderbot model)"),XAe.forEach(t),oCo=i(ie),Gb=n(ie,"LI",{});var zAe=s(Gb);rse=n(zAe,"STRONG",{});var GJr=s(rse);rCo=r(GJr,"blenderbot-small"),GJr.forEach(t),tCo=r(zAe," \u2014 "),UI=n(zAe,"A",{href:!0});var OJr=s(UI);aCo=r(OJr,"BlenderbotSmallForConditionalGeneration"),OJr.forEach(t),nCo=r(zAe," (BlenderbotSmall model)"),zAe.forEach(t),sCo=i(ie),Ob=n(ie,"LI",{});var QAe=s(Ob);tse=n(QAe,"STRONG",{});var VJr=s(tse);lCo=r(VJr,"encoder-decoder"),VJr.forEach(t),iCo=r(QAe," \u2014 "),JI=n(QAe,"A",{href:!0});var XJr=s(JI);dCo=r(XJr,"EncoderDecoderModel"),XJr.forEach(t),cCo=r(QAe," (Encoder decoder model)"),QAe.forEach(t),mCo=i(ie),Vb=n(ie,"LI",{});var WAe=s(Vb);ase=n(WAe,"STRONG",{});var zJr=s(ase);fCo=r(zJr,"fsmt"),zJr.forEach(t),gCo=r(WAe," \u2014 "),YI=n(WAe,"A",{href:!0});var QJr=s(YI);hCo=r(QJr,"FSMTForConditionalGeneration"),QJr.forEach(t),uCo=r(WAe," (FairSeq Machine-Translation model)"),WAe.forEach(t),pCo=i(ie),Xb=n(ie,"LI",{});var HAe=s(Xb);nse=n(HAe,"STRONG",{});var WJr=s(nse);_Co=r(WJr,"led"),WJr.forEach(t),bCo=r(HAe," \u2014 "),KI=n(HAe,"A",{href:!0});var HJr=s(KI);FCo=r(HJr,"LEDForConditionalGeneration"),HJr.forEach(t),vCo=r(HAe," (LED model)"),HAe.forEach(t),TCo=i(ie),zb=n(ie,"LI",{});var UAe=s(zb);sse=n(UAe,"STRONG",{});var UJr=s(sse);MCo=r(UJr,"m2m_100"),UJr.forEach(t),ECo=r(UAe," \u2014 "),ZI=n(UAe,"A",{href:!0});var JJr=s(ZI);CCo=r(JJr,"M2M100ForConditionalGeneration"),JJr.forEach(t),wCo=r(UAe," (M2M100 model)"),UAe.forEach(t),ACo=i(ie),Qb=n(ie,"LI",{});var JAe=s(Qb);lse=n(JAe,"STRONG",{});var YJr=s(lse);yCo=r(YJr,"marian"),YJr.forEach(t),LCo=r(JAe," \u2014 "),eq=n(JAe,"A",{href:!0});var KJr=s(eq);xCo=r(KJr,"MarianMTModel"),KJr.forEach(t),kCo=r(JAe," (Marian model)"),JAe.forEach(t),SCo=i(ie),Wb=n(ie,"LI",{});var YAe=s(Wb);ise=n(YAe,"STRONG",{});var ZJr=s(ise);RCo=r(ZJr,"mbart"),ZJr.forEach(t),BCo=r(YAe," \u2014 "),oq=n(YAe,"A",{href:!0});var eYr=s(oq);PCo=r(eYr,"MBartForConditionalGeneration"),eYr.forEach(t),$Co=r(YAe," (mBART model)"),YAe.forEach(t),ICo=i(ie),Hb=n(ie,"LI",{});var KAe=s(Hb);dse=n(KAe,"STRONG",{});var oYr=s(dse);qCo=r(oYr,"mt5"),oYr.forEach(t),NCo=r(KAe," \u2014 "),rq=n(KAe,"A",{href:!0});var rYr=s(rq);jCo=r(rYr,"MT5ForConditionalGeneration"),rYr.forEach(t),DCo=r(KAe," (mT5 model)"),KAe.forEach(t),GCo=i(ie),Ub=n(ie,"LI",{});var ZAe=s(Ub);cse=n(ZAe,"STRONG",{});var tYr=s(cse);OCo=r(tYr,"pegasus"),tYr.forEach(t),VCo=r(ZAe," \u2014 "),tq=n(ZAe,"A",{href:!0});var aYr=s(tq);XCo=r(aYr,"PegasusForConditionalGeneration"),aYr.forEach(t),zCo=r(ZAe," (Pegasus model)"),ZAe.forEach(t),QCo=i(ie),Jb=n(ie,"LI",{});var e6e=s(Jb);mse=n(e6e,"STRONG",{});var nYr=s(mse);WCo=r(nYr,"plbart"),nYr.forEach(t),HCo=r(e6e," \u2014 "),aq=n(e6e,"A",{href:!0});var sYr=s(aq);UCo=r(sYr,"PLBartForConditionalGeneration"),sYr.forEach(t),JCo=r(e6e," (PLBart model)"),e6e.forEach(t),YCo=i(ie),Yb=n(ie,"LI",{});var o6e=s(Yb);fse=n(o6e,"STRONG",{});var lYr=s(fse);KCo=r(lYr,"prophetnet"),lYr.forEach(t),ZCo=r(o6e," \u2014 "),nq=n(o6e,"A",{href:!0});var iYr=s(nq);e5o=r(iYr,"ProphetNetForConditionalGeneration"),iYr.forEach(t),o5o=r(o6e," (ProphetNet model)"),o6e.forEach(t),r5o=i(ie),Kb=n(ie,"LI",{});var r6e=s(Kb);gse=n(r6e,"STRONG",{});var dYr=s(gse);t5o=r(dYr,"t5"),dYr.forEach(t),a5o=r(r6e," \u2014 "),sq=n(r6e,"A",{href:!0});var cYr=s(sq);n5o=r(cYr,"T5ForConditionalGeneration"),cYr.forEach(t),s5o=r(r6e," (T5 model)"),r6e.forEach(t),l5o=i(ie),Zb=n(ie,"LI",{});var t6e=s(Zb);hse=n(t6e,"STRONG",{});var mYr=s(hse);i5o=r(mYr,"xlm-prophetnet"),mYr.forEach(t),d5o=r(t6e," \u2014 "),lq=n(t6e,"A",{href:!0});var fYr=s(lq);c5o=r(fYr,"XLMProphetNetForConditionalGeneration"),fYr.forEach(t),m5o=r(t6e," (XLMProphetNet model)"),t6e.forEach(t),ie.forEach(t),f5o=i(Xt),e2=n(Xt,"P",{});var a6e=s(e2);g5o=r(a6e,"The model is set in evaluation mode by default using "),use=n(a6e,"CODE",{});var gYr=s(use);h5o=r(gYr,"model.eval()"),gYr.forEach(t),u5o=r(a6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pse=n(a6e,"CODE",{});var hYr=s(pse);p5o=r(hYr,"model.train()"),hYr.forEach(t),a6e.forEach(t),_5o=i(Xt),_se=n(Xt,"P",{});var uYr=s(_se);b5o=r(uYr,"Examples:"),uYr.forEach(t),F5o=i(Xt),f(yA.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),KSe=i(c),md=n(c,"H2",{class:!0});var lPe=s(md);o2=n(lPe,"A",{id:!0,class:!0,href:!0});var pYr=s(o2);bse=n(pYr,"SPAN",{});var _Yr=s(bse);f(LA.$$.fragment,_Yr),_Yr.forEach(t),pYr.forEach(t),v5o=i(lPe),Fse=n(lPe,"SPAN",{});var bYr=s(Fse);T5o=r(bYr,"AutoModelForSequenceClassification"),bYr.forEach(t),lPe.forEach(t),ZSe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);f(xA.$$.fragment,rl),M5o=i(rl),fd=n(rl,"P",{});var oU=s(fd);E5o=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iq=n(oU,"A",{href:!0});var FYr=s(iq);C5o=r(FYr,"from_pretrained()"),FYr.forEach(t),w5o=r(oU," class method or the "),dq=n(oU,"A",{href:!0});var vYr=s(dq);A5o=r(vYr,"from_config()"),vYr.forEach(t),y5o=r(oU,` class
method.`),oU.forEach(t),L5o=i(rl),kA=n(rl,"P",{});var iPe=s(kA);x5o=r(iPe,"This class cannot be instantiated directly using "),vse=n(iPe,"CODE",{});var TYr=s(vse);k5o=r(TYr,"__init__()"),TYr.forEach(t),S5o=r(iPe," (throws an error)."),iPe.forEach(t),R5o=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);f(SA.$$.fragment,tl),B5o=i(tl),Tse=n(tl,"P",{});var MYr=s(Tse);P5o=r(MYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MYr.forEach(t),$5o=i(tl),gd=n(tl,"P",{});var rU=s(gd);I5o=r(rU,`Note:
Loading a model from its configuration file does `),Mse=n(rU,"STRONG",{});var EYr=s(Mse);q5o=r(EYr,"not"),EYr.forEach(t),N5o=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cq=n(rU,"A",{href:!0});var CYr=s(cq);j5o=r(CYr,"from_pretrained()"),CYr.forEach(t),D5o=r(rU," to load the model weights."),rU.forEach(t),G5o=i(tl),Ese=n(tl,"P",{});var wYr=s(Ese);O5o=r(wYr,"Examples:"),wYr.forEach(t),V5o=i(tl),f(RA.$$.fragment,tl),tl.forEach(t),X5o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);f(BA.$$.fragment,zt),z5o=i(zt),Cse=n(zt,"P",{});var AYr=s(Cse);Q5o=r(AYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),AYr.forEach(t),W5o=i(zt),Ua=n(zt,"P",{});var M3=s(Ua);H5o=r(M3,"The model class to instantiate is selected based on the "),wse=n(M3,"CODE",{});var yYr=s(wse);U5o=r(yYr,"model_type"),yYr.forEach(t),J5o=r(M3,` property of the config object (either
passed as an argument or loaded from `),Ase=n(M3,"CODE",{});var LYr=s(Ase);Y5o=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),K5o=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=n(M3,"CODE",{});var xYr=s(yse);Z5o=r(xYr,"pretrained_model_name_or_path"),xYr.forEach(t),e3o=r(M3,":"),M3.forEach(t),o3o=i(zt),y=n(zt,"UL",{});var L=s(y);r2=n(L,"LI",{});var n6e=s(r2);Lse=n(n6e,"STRONG",{});var kYr=s(Lse);r3o=r(kYr,"albert"),kYr.forEach(t),t3o=r(n6e," \u2014 "),mq=n(n6e,"A",{href:!0});var SYr=s(mq);a3o=r(SYr,"AlbertForSequenceClassification"),SYr.forEach(t),n3o=r(n6e," (ALBERT model)"),n6e.forEach(t),s3o=i(L),t2=n(L,"LI",{});var s6e=s(t2);xse=n(s6e,"STRONG",{});var RYr=s(xse);l3o=r(RYr,"bart"),RYr.forEach(t),i3o=r(s6e," \u2014 "),fq=n(s6e,"A",{href:!0});var BYr=s(fq);d3o=r(BYr,"BartForSequenceClassification"),BYr.forEach(t),c3o=r(s6e," (BART model)"),s6e.forEach(t),m3o=i(L),a2=n(L,"LI",{});var l6e=s(a2);kse=n(l6e,"STRONG",{});var PYr=s(kse);f3o=r(PYr,"bert"),PYr.forEach(t),g3o=r(l6e," \u2014 "),gq=n(l6e,"A",{href:!0});var $Yr=s(gq);h3o=r($Yr,"BertForSequenceClassification"),$Yr.forEach(t),u3o=r(l6e," (BERT model)"),l6e.forEach(t),p3o=i(L),n2=n(L,"LI",{});var i6e=s(n2);Sse=n(i6e,"STRONG",{});var IYr=s(Sse);_3o=r(IYr,"big_bird"),IYr.forEach(t),b3o=r(i6e," \u2014 "),hq=n(i6e,"A",{href:!0});var qYr=s(hq);F3o=r(qYr,"BigBirdForSequenceClassification"),qYr.forEach(t),v3o=r(i6e," (BigBird model)"),i6e.forEach(t),T3o=i(L),s2=n(L,"LI",{});var d6e=s(s2);Rse=n(d6e,"STRONG",{});var NYr=s(Rse);M3o=r(NYr,"bigbird_pegasus"),NYr.forEach(t),E3o=r(d6e," \u2014 "),uq=n(d6e,"A",{href:!0});var jYr=s(uq);C3o=r(jYr,"BigBirdPegasusForSequenceClassification"),jYr.forEach(t),w3o=r(d6e," (BigBirdPegasus model)"),d6e.forEach(t),A3o=i(L),l2=n(L,"LI",{});var c6e=s(l2);Bse=n(c6e,"STRONG",{});var DYr=s(Bse);y3o=r(DYr,"camembert"),DYr.forEach(t),L3o=r(c6e," \u2014 "),pq=n(c6e,"A",{href:!0});var GYr=s(pq);x3o=r(GYr,"CamembertForSequenceClassification"),GYr.forEach(t),k3o=r(c6e," (CamemBERT model)"),c6e.forEach(t),S3o=i(L),i2=n(L,"LI",{});var m6e=s(i2);Pse=n(m6e,"STRONG",{});var OYr=s(Pse);R3o=r(OYr,"canine"),OYr.forEach(t),B3o=r(m6e," \u2014 "),_q=n(m6e,"A",{href:!0});var VYr=s(_q);P3o=r(VYr,"CanineForSequenceClassification"),VYr.forEach(t),$3o=r(m6e," (Canine model)"),m6e.forEach(t),I3o=i(L),d2=n(L,"LI",{});var f6e=s(d2);$se=n(f6e,"STRONG",{});var XYr=s($se);q3o=r(XYr,"convbert"),XYr.forEach(t),N3o=r(f6e," \u2014 "),bq=n(f6e,"A",{href:!0});var zYr=s(bq);j3o=r(zYr,"ConvBertForSequenceClassification"),zYr.forEach(t),D3o=r(f6e," (ConvBERT model)"),f6e.forEach(t),G3o=i(L),c2=n(L,"LI",{});var g6e=s(c2);Ise=n(g6e,"STRONG",{});var QYr=s(Ise);O3o=r(QYr,"ctrl"),QYr.forEach(t),V3o=r(g6e," \u2014 "),Fq=n(g6e,"A",{href:!0});var WYr=s(Fq);X3o=r(WYr,"CTRLForSequenceClassification"),WYr.forEach(t),z3o=r(g6e," (CTRL model)"),g6e.forEach(t),Q3o=i(L),m2=n(L,"LI",{});var h6e=s(m2);qse=n(h6e,"STRONG",{});var HYr=s(qse);W3o=r(HYr,"data2vec-text"),HYr.forEach(t),H3o=r(h6e," \u2014 "),vq=n(h6e,"A",{href:!0});var UYr=s(vq);U3o=r(UYr,"Data2VecTextForSequenceClassification"),UYr.forEach(t),J3o=r(h6e," (Data2VecText model)"),h6e.forEach(t),Y3o=i(L),f2=n(L,"LI",{});var u6e=s(f2);Nse=n(u6e,"STRONG",{});var JYr=s(Nse);K3o=r(JYr,"deberta"),JYr.forEach(t),Z3o=r(u6e," \u2014 "),Tq=n(u6e,"A",{href:!0});var YYr=s(Tq);ewo=r(YYr,"DebertaForSequenceClassification"),YYr.forEach(t),owo=r(u6e," (DeBERTa model)"),u6e.forEach(t),rwo=i(L),g2=n(L,"LI",{});var p6e=s(g2);jse=n(p6e,"STRONG",{});var KYr=s(jse);two=r(KYr,"deberta-v2"),KYr.forEach(t),awo=r(p6e," \u2014 "),Mq=n(p6e,"A",{href:!0});var ZYr=s(Mq);nwo=r(ZYr,"DebertaV2ForSequenceClassification"),ZYr.forEach(t),swo=r(p6e," (DeBERTa-v2 model)"),p6e.forEach(t),lwo=i(L),h2=n(L,"LI",{});var _6e=s(h2);Dse=n(_6e,"STRONG",{});var eKr=s(Dse);iwo=r(eKr,"distilbert"),eKr.forEach(t),dwo=r(_6e," \u2014 "),Eq=n(_6e,"A",{href:!0});var oKr=s(Eq);cwo=r(oKr,"DistilBertForSequenceClassification"),oKr.forEach(t),mwo=r(_6e," (DistilBERT model)"),_6e.forEach(t),fwo=i(L),u2=n(L,"LI",{});var b6e=s(u2);Gse=n(b6e,"STRONG",{});var rKr=s(Gse);gwo=r(rKr,"electra"),rKr.forEach(t),hwo=r(b6e," \u2014 "),Cq=n(b6e,"A",{href:!0});var tKr=s(Cq);uwo=r(tKr,"ElectraForSequenceClassification"),tKr.forEach(t),pwo=r(b6e," (ELECTRA model)"),b6e.forEach(t),_wo=i(L),p2=n(L,"LI",{});var F6e=s(p2);Ose=n(F6e,"STRONG",{});var aKr=s(Ose);bwo=r(aKr,"flaubert"),aKr.forEach(t),Fwo=r(F6e," \u2014 "),wq=n(F6e,"A",{href:!0});var nKr=s(wq);vwo=r(nKr,"FlaubertForSequenceClassification"),nKr.forEach(t),Two=r(F6e," (FlauBERT model)"),F6e.forEach(t),Mwo=i(L),_2=n(L,"LI",{});var v6e=s(_2);Vse=n(v6e,"STRONG",{});var sKr=s(Vse);Ewo=r(sKr,"fnet"),sKr.forEach(t),Cwo=r(v6e," \u2014 "),Aq=n(v6e,"A",{href:!0});var lKr=s(Aq);wwo=r(lKr,"FNetForSequenceClassification"),lKr.forEach(t),Awo=r(v6e," (FNet model)"),v6e.forEach(t),ywo=i(L),b2=n(L,"LI",{});var T6e=s(b2);Xse=n(T6e,"STRONG",{});var iKr=s(Xse);Lwo=r(iKr,"funnel"),iKr.forEach(t),xwo=r(T6e," \u2014 "),yq=n(T6e,"A",{href:!0});var dKr=s(yq);kwo=r(dKr,"FunnelForSequenceClassification"),dKr.forEach(t),Swo=r(T6e," (Funnel Transformer model)"),T6e.forEach(t),Rwo=i(L),F2=n(L,"LI",{});var M6e=s(F2);zse=n(M6e,"STRONG",{});var cKr=s(zse);Bwo=r(cKr,"gpt2"),cKr.forEach(t),Pwo=r(M6e," \u2014 "),Lq=n(M6e,"A",{href:!0});var mKr=s(Lq);$wo=r(mKr,"GPT2ForSequenceClassification"),mKr.forEach(t),Iwo=r(M6e," (OpenAI GPT-2 model)"),M6e.forEach(t),qwo=i(L),v2=n(L,"LI",{});var E6e=s(v2);Qse=n(E6e,"STRONG",{});var fKr=s(Qse);Nwo=r(fKr,"gpt_neo"),fKr.forEach(t),jwo=r(E6e," \u2014 "),xq=n(E6e,"A",{href:!0});var gKr=s(xq);Dwo=r(gKr,"GPTNeoForSequenceClassification"),gKr.forEach(t),Gwo=r(E6e," (GPT Neo model)"),E6e.forEach(t),Owo=i(L),T2=n(L,"LI",{});var C6e=s(T2);Wse=n(C6e,"STRONG",{});var hKr=s(Wse);Vwo=r(hKr,"gptj"),hKr.forEach(t),Xwo=r(C6e," \u2014 "),kq=n(C6e,"A",{href:!0});var uKr=s(kq);zwo=r(uKr,"GPTJForSequenceClassification"),uKr.forEach(t),Qwo=r(C6e," (GPT-J model)"),C6e.forEach(t),Wwo=i(L),M2=n(L,"LI",{});var w6e=s(M2);Hse=n(w6e,"STRONG",{});var pKr=s(Hse);Hwo=r(pKr,"ibert"),pKr.forEach(t),Uwo=r(w6e," \u2014 "),Sq=n(w6e,"A",{href:!0});var _Kr=s(Sq);Jwo=r(_Kr,"IBertForSequenceClassification"),_Kr.forEach(t),Ywo=r(w6e," (I-BERT model)"),w6e.forEach(t),Kwo=i(L),E2=n(L,"LI",{});var A6e=s(E2);Use=n(A6e,"STRONG",{});var bKr=s(Use);Zwo=r(bKr,"layoutlm"),bKr.forEach(t),eAo=r(A6e," \u2014 "),Rq=n(A6e,"A",{href:!0});var FKr=s(Rq);oAo=r(FKr,"LayoutLMForSequenceClassification"),FKr.forEach(t),rAo=r(A6e," (LayoutLM model)"),A6e.forEach(t),tAo=i(L),C2=n(L,"LI",{});var y6e=s(C2);Jse=n(y6e,"STRONG",{});var vKr=s(Jse);aAo=r(vKr,"layoutlmv2"),vKr.forEach(t),nAo=r(y6e," \u2014 "),Bq=n(y6e,"A",{href:!0});var TKr=s(Bq);sAo=r(TKr,"LayoutLMv2ForSequenceClassification"),TKr.forEach(t),lAo=r(y6e," (LayoutLMv2 model)"),y6e.forEach(t),iAo=i(L),w2=n(L,"LI",{});var L6e=s(w2);Yse=n(L6e,"STRONG",{});var MKr=s(Yse);dAo=r(MKr,"led"),MKr.forEach(t),cAo=r(L6e," \u2014 "),Pq=n(L6e,"A",{href:!0});var EKr=s(Pq);mAo=r(EKr,"LEDForSequenceClassification"),EKr.forEach(t),fAo=r(L6e," (LED model)"),L6e.forEach(t),gAo=i(L),A2=n(L,"LI",{});var x6e=s(A2);Kse=n(x6e,"STRONG",{});var CKr=s(Kse);hAo=r(CKr,"longformer"),CKr.forEach(t),uAo=r(x6e," \u2014 "),$q=n(x6e,"A",{href:!0});var wKr=s($q);pAo=r(wKr,"LongformerForSequenceClassification"),wKr.forEach(t),_Ao=r(x6e," (Longformer model)"),x6e.forEach(t),bAo=i(L),y2=n(L,"LI",{});var k6e=s(y2);Zse=n(k6e,"STRONG",{});var AKr=s(Zse);FAo=r(AKr,"mbart"),AKr.forEach(t),vAo=r(k6e," \u2014 "),Iq=n(k6e,"A",{href:!0});var yKr=s(Iq);TAo=r(yKr,"MBartForSequenceClassification"),yKr.forEach(t),MAo=r(k6e," (mBART model)"),k6e.forEach(t),EAo=i(L),L2=n(L,"LI",{});var S6e=s(L2);ele=n(S6e,"STRONG",{});var LKr=s(ele);CAo=r(LKr,"megatron-bert"),LKr.forEach(t),wAo=r(S6e," \u2014 "),qq=n(S6e,"A",{href:!0});var xKr=s(qq);AAo=r(xKr,"MegatronBertForSequenceClassification"),xKr.forEach(t),yAo=r(S6e," (MegatronBert model)"),S6e.forEach(t),LAo=i(L),x2=n(L,"LI",{});var R6e=s(x2);ole=n(R6e,"STRONG",{});var kKr=s(ole);xAo=r(kKr,"mobilebert"),kKr.forEach(t),kAo=r(R6e," \u2014 "),Nq=n(R6e,"A",{href:!0});var SKr=s(Nq);SAo=r(SKr,"MobileBertForSequenceClassification"),SKr.forEach(t),RAo=r(R6e," (MobileBERT model)"),R6e.forEach(t),BAo=i(L),k2=n(L,"LI",{});var B6e=s(k2);rle=n(B6e,"STRONG",{});var RKr=s(rle);PAo=r(RKr,"mpnet"),RKr.forEach(t),$Ao=r(B6e," \u2014 "),jq=n(B6e,"A",{href:!0});var BKr=s(jq);IAo=r(BKr,"MPNetForSequenceClassification"),BKr.forEach(t),qAo=r(B6e," (MPNet model)"),B6e.forEach(t),NAo=i(L),S2=n(L,"LI",{});var P6e=s(S2);tle=n(P6e,"STRONG",{});var PKr=s(tle);jAo=r(PKr,"nystromformer"),PKr.forEach(t),DAo=r(P6e," \u2014 "),Dq=n(P6e,"A",{href:!0});var $Kr=s(Dq);GAo=r($Kr,"NystromformerForSequenceClassification"),$Kr.forEach(t),OAo=r(P6e," (Nystromformer model)"),P6e.forEach(t),VAo=i(L),R2=n(L,"LI",{});var $6e=s(R2);ale=n($6e,"STRONG",{});var IKr=s(ale);XAo=r(IKr,"openai-gpt"),IKr.forEach(t),zAo=r($6e," \u2014 "),Gq=n($6e,"A",{href:!0});var qKr=s(Gq);QAo=r(qKr,"OpenAIGPTForSequenceClassification"),qKr.forEach(t),WAo=r($6e," (OpenAI GPT model)"),$6e.forEach(t),HAo=i(L),B2=n(L,"LI",{});var I6e=s(B2);nle=n(I6e,"STRONG",{});var NKr=s(nle);UAo=r(NKr,"perceiver"),NKr.forEach(t),JAo=r(I6e," \u2014 "),Oq=n(I6e,"A",{href:!0});var jKr=s(Oq);YAo=r(jKr,"PerceiverForSequenceClassification"),jKr.forEach(t),KAo=r(I6e," (Perceiver model)"),I6e.forEach(t),ZAo=i(L),P2=n(L,"LI",{});var q6e=s(P2);sle=n(q6e,"STRONG",{});var DKr=s(sle);e6o=r(DKr,"plbart"),DKr.forEach(t),o6o=r(q6e," \u2014 "),Vq=n(q6e,"A",{href:!0});var GKr=s(Vq);r6o=r(GKr,"PLBartForSequenceClassification"),GKr.forEach(t),t6o=r(q6e," (PLBart model)"),q6e.forEach(t),a6o=i(L),$2=n(L,"LI",{});var N6e=s($2);lle=n(N6e,"STRONG",{});var OKr=s(lle);n6o=r(OKr,"qdqbert"),OKr.forEach(t),s6o=r(N6e," \u2014 "),Xq=n(N6e,"A",{href:!0});var VKr=s(Xq);l6o=r(VKr,"QDQBertForSequenceClassification"),VKr.forEach(t),i6o=r(N6e," (QDQBert model)"),N6e.forEach(t),d6o=i(L),I2=n(L,"LI",{});var j6e=s(I2);ile=n(j6e,"STRONG",{});var XKr=s(ile);c6o=r(XKr,"reformer"),XKr.forEach(t),m6o=r(j6e," \u2014 "),zq=n(j6e,"A",{href:!0});var zKr=s(zq);f6o=r(zKr,"ReformerForSequenceClassification"),zKr.forEach(t),g6o=r(j6e," (Reformer model)"),j6e.forEach(t),h6o=i(L),q2=n(L,"LI",{});var D6e=s(q2);dle=n(D6e,"STRONG",{});var QKr=s(dle);u6o=r(QKr,"rembert"),QKr.forEach(t),p6o=r(D6e," \u2014 "),Qq=n(D6e,"A",{href:!0});var WKr=s(Qq);_6o=r(WKr,"RemBertForSequenceClassification"),WKr.forEach(t),b6o=r(D6e," (RemBERT model)"),D6e.forEach(t),F6o=i(L),N2=n(L,"LI",{});var G6e=s(N2);cle=n(G6e,"STRONG",{});var HKr=s(cle);v6o=r(HKr,"roberta"),HKr.forEach(t),T6o=r(G6e," \u2014 "),Wq=n(G6e,"A",{href:!0});var UKr=s(Wq);M6o=r(UKr,"RobertaForSequenceClassification"),UKr.forEach(t),E6o=r(G6e," (RoBERTa model)"),G6e.forEach(t),C6o=i(L),j2=n(L,"LI",{});var O6e=s(j2);mle=n(O6e,"STRONG",{});var JKr=s(mle);w6o=r(JKr,"roformer"),JKr.forEach(t),A6o=r(O6e," \u2014 "),Hq=n(O6e,"A",{href:!0});var YKr=s(Hq);y6o=r(YKr,"RoFormerForSequenceClassification"),YKr.forEach(t),L6o=r(O6e," (RoFormer model)"),O6e.forEach(t),x6o=i(L),D2=n(L,"LI",{});var V6e=s(D2);fle=n(V6e,"STRONG",{});var KKr=s(fle);k6o=r(KKr,"squeezebert"),KKr.forEach(t),S6o=r(V6e," \u2014 "),Uq=n(V6e,"A",{href:!0});var ZKr=s(Uq);R6o=r(ZKr,"SqueezeBertForSequenceClassification"),ZKr.forEach(t),B6o=r(V6e," (SqueezeBERT model)"),V6e.forEach(t),P6o=i(L),G2=n(L,"LI",{});var X6e=s(G2);gle=n(X6e,"STRONG",{});var eZr=s(gle);$6o=r(eZr,"tapas"),eZr.forEach(t),I6o=r(X6e," \u2014 "),Jq=n(X6e,"A",{href:!0});var oZr=s(Jq);q6o=r(oZr,"TapasForSequenceClassification"),oZr.forEach(t),N6o=r(X6e," (TAPAS model)"),X6e.forEach(t),j6o=i(L),O2=n(L,"LI",{});var z6e=s(O2);hle=n(z6e,"STRONG",{});var rZr=s(hle);D6o=r(rZr,"transfo-xl"),rZr.forEach(t),G6o=r(z6e," \u2014 "),Yq=n(z6e,"A",{href:!0});var tZr=s(Yq);O6o=r(tZr,"TransfoXLForSequenceClassification"),tZr.forEach(t),V6o=r(z6e," (Transformer-XL model)"),z6e.forEach(t),X6o=i(L),V2=n(L,"LI",{});var Q6e=s(V2);ule=n(Q6e,"STRONG",{});var aZr=s(ule);z6o=r(aZr,"xlm"),aZr.forEach(t),Q6o=r(Q6e," \u2014 "),Kq=n(Q6e,"A",{href:!0});var nZr=s(Kq);W6o=r(nZr,"XLMForSequenceClassification"),nZr.forEach(t),H6o=r(Q6e," (XLM model)"),Q6e.forEach(t),U6o=i(L),X2=n(L,"LI",{});var W6e=s(X2);ple=n(W6e,"STRONG",{});var sZr=s(ple);J6o=r(sZr,"xlm-roberta"),sZr.forEach(t),Y6o=r(W6e," \u2014 "),Zq=n(W6e,"A",{href:!0});var lZr=s(Zq);K6o=r(lZr,"XLMRobertaForSequenceClassification"),lZr.forEach(t),Z6o=r(W6e," (XLM-RoBERTa model)"),W6e.forEach(t),e0o=i(L),z2=n(L,"LI",{});var H6e=s(z2);_le=n(H6e,"STRONG",{});var iZr=s(_le);o0o=r(iZr,"xlm-roberta-xl"),iZr.forEach(t),r0o=r(H6e," \u2014 "),eN=n(H6e,"A",{href:!0});var dZr=s(eN);t0o=r(dZr,"XLMRobertaXLForSequenceClassification"),dZr.forEach(t),a0o=r(H6e," (XLM-RoBERTa-XL model)"),H6e.forEach(t),n0o=i(L),Q2=n(L,"LI",{});var U6e=s(Q2);ble=n(U6e,"STRONG",{});var cZr=s(ble);s0o=r(cZr,"xlnet"),cZr.forEach(t),l0o=r(U6e," \u2014 "),oN=n(U6e,"A",{href:!0});var mZr=s(oN);i0o=r(mZr,"XLNetForSequenceClassification"),mZr.forEach(t),d0o=r(U6e," (XLNet model)"),U6e.forEach(t),c0o=i(L),W2=n(L,"LI",{});var J6e=s(W2);Fle=n(J6e,"STRONG",{});var fZr=s(Fle);m0o=r(fZr,"yoso"),fZr.forEach(t),f0o=r(J6e," \u2014 "),rN=n(J6e,"A",{href:!0});var gZr=s(rN);g0o=r(gZr,"YosoForSequenceClassification"),gZr.forEach(t),h0o=r(J6e," (YOSO model)"),J6e.forEach(t),L.forEach(t),u0o=i(zt),H2=n(zt,"P",{});var Y6e=s(H2);p0o=r(Y6e,"The model is set in evaluation mode by default using "),vle=n(Y6e,"CODE",{});var hZr=s(vle);_0o=r(hZr,"model.eval()"),hZr.forEach(t),b0o=r(Y6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tle=n(Y6e,"CODE",{});var uZr=s(Tle);F0o=r(uZr,"model.train()"),uZr.forEach(t),Y6e.forEach(t),v0o=i(zt),Mle=n(zt,"P",{});var pZr=s(Mle);T0o=r(pZr,"Examples:"),pZr.forEach(t),M0o=i(zt),f(PA.$$.fragment,zt),zt.forEach(t),rl.forEach(t),eRe=i(c),hd=n(c,"H2",{class:!0});var dPe=s(hd);U2=n(dPe,"A",{id:!0,class:!0,href:!0});var _Zr=s(U2);Ele=n(_Zr,"SPAN",{});var bZr=s(Ele);f($A.$$.fragment,bZr),bZr.forEach(t),_Zr.forEach(t),E0o=i(dPe),Cle=n(dPe,"SPAN",{});var FZr=s(Cle);C0o=r(FZr,"AutoModelForMultipleChoice"),FZr.forEach(t),dPe.forEach(t),oRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);f(IA.$$.fragment,al),w0o=i(al),ud=n(al,"P",{});var tU=s(ud);A0o=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tN=n(tU,"A",{href:!0});var vZr=s(tN);y0o=r(vZr,"from_pretrained()"),vZr.forEach(t),L0o=r(tU," class method or the "),aN=n(tU,"A",{href:!0});var TZr=s(aN);x0o=r(TZr,"from_config()"),TZr.forEach(t),k0o=r(tU,` class
method.`),tU.forEach(t),S0o=i(al),qA=n(al,"P",{});var cPe=s(qA);R0o=r(cPe,"This class cannot be instantiated directly using "),wle=n(cPe,"CODE",{});var MZr=s(wle);B0o=r(MZr,"__init__()"),MZr.forEach(t),P0o=r(cPe," (throws an error)."),cPe.forEach(t),$0o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);f(NA.$$.fragment,nl),I0o=i(nl),Ale=n(nl,"P",{});var EZr=s(Ale);q0o=r(EZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EZr.forEach(t),N0o=i(nl),pd=n(nl,"P",{});var aU=s(pd);j0o=r(aU,`Note:
Loading a model from its configuration file does `),yle=n(aU,"STRONG",{});var CZr=s(yle);D0o=r(CZr,"not"),CZr.forEach(t),G0o=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=n(aU,"A",{href:!0});var wZr=s(nN);O0o=r(wZr,"from_pretrained()"),wZr.forEach(t),V0o=r(aU," to load the model weights."),aU.forEach(t),X0o=i(nl),Lle=n(nl,"P",{});var AZr=s(Lle);z0o=r(AZr,"Examples:"),AZr.forEach(t),Q0o=i(nl),f(jA.$$.fragment,nl),nl.forEach(t),W0o=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);f(DA.$$.fragment,Qt),H0o=i(Qt),xle=n(Qt,"P",{});var yZr=s(xle);U0o=r(yZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yZr.forEach(t),J0o=i(Qt),Ja=n(Qt,"P",{});var E3=s(Ja);Y0o=r(E3,"The model class to instantiate is selected based on the "),kle=n(E3,"CODE",{});var LZr=s(kle);K0o=r(LZr,"model_type"),LZr.forEach(t),Z0o=r(E3,` property of the config object (either
passed as an argument or loaded from `),Sle=n(E3,"CODE",{});var xZr=s(Sle);eyo=r(xZr,"pretrained_model_name_or_path"),xZr.forEach(t),oyo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=n(E3,"CODE",{});var kZr=s(Rle);ryo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),tyo=r(E3,":"),E3.forEach(t),ayo=i(Qt),G=n(Qt,"UL",{});var O=s(G);J2=n(O,"LI",{});var K6e=s(J2);Ble=n(K6e,"STRONG",{});var SZr=s(Ble);nyo=r(SZr,"albert"),SZr.forEach(t),syo=r(K6e," \u2014 "),sN=n(K6e,"A",{href:!0});var RZr=s(sN);lyo=r(RZr,"AlbertForMultipleChoice"),RZr.forEach(t),iyo=r(K6e," (ALBERT model)"),K6e.forEach(t),dyo=i(O),Y2=n(O,"LI",{});var Z6e=s(Y2);Ple=n(Z6e,"STRONG",{});var BZr=s(Ple);cyo=r(BZr,"bert"),BZr.forEach(t),myo=r(Z6e," \u2014 "),lN=n(Z6e,"A",{href:!0});var PZr=s(lN);fyo=r(PZr,"BertForMultipleChoice"),PZr.forEach(t),gyo=r(Z6e," (BERT model)"),Z6e.forEach(t),hyo=i(O),K2=n(O,"LI",{});var e0e=s(K2);$le=n(e0e,"STRONG",{});var $Zr=s($le);uyo=r($Zr,"big_bird"),$Zr.forEach(t),pyo=r(e0e," \u2014 "),iN=n(e0e,"A",{href:!0});var IZr=s(iN);_yo=r(IZr,"BigBirdForMultipleChoice"),IZr.forEach(t),byo=r(e0e," (BigBird model)"),e0e.forEach(t),Fyo=i(O),Z2=n(O,"LI",{});var o0e=s(Z2);Ile=n(o0e,"STRONG",{});var qZr=s(Ile);vyo=r(qZr,"camembert"),qZr.forEach(t),Tyo=r(o0e," \u2014 "),dN=n(o0e,"A",{href:!0});var NZr=s(dN);Myo=r(NZr,"CamembertForMultipleChoice"),NZr.forEach(t),Eyo=r(o0e," (CamemBERT model)"),o0e.forEach(t),Cyo=i(O),eF=n(O,"LI",{});var r0e=s(eF);qle=n(r0e,"STRONG",{});var jZr=s(qle);wyo=r(jZr,"canine"),jZr.forEach(t),Ayo=r(r0e," \u2014 "),cN=n(r0e,"A",{href:!0});var DZr=s(cN);yyo=r(DZr,"CanineForMultipleChoice"),DZr.forEach(t),Lyo=r(r0e," (Canine model)"),r0e.forEach(t),xyo=i(O),oF=n(O,"LI",{});var t0e=s(oF);Nle=n(t0e,"STRONG",{});var GZr=s(Nle);kyo=r(GZr,"convbert"),GZr.forEach(t),Syo=r(t0e," \u2014 "),mN=n(t0e,"A",{href:!0});var OZr=s(mN);Ryo=r(OZr,"ConvBertForMultipleChoice"),OZr.forEach(t),Byo=r(t0e," (ConvBERT model)"),t0e.forEach(t),Pyo=i(O),rF=n(O,"LI",{});var a0e=s(rF);jle=n(a0e,"STRONG",{});var VZr=s(jle);$yo=r(VZr,"data2vec-text"),VZr.forEach(t),Iyo=r(a0e," \u2014 "),fN=n(a0e,"A",{href:!0});var XZr=s(fN);qyo=r(XZr,"Data2VecTextForMultipleChoice"),XZr.forEach(t),Nyo=r(a0e," (Data2VecText model)"),a0e.forEach(t),jyo=i(O),tF=n(O,"LI",{});var n0e=s(tF);Dle=n(n0e,"STRONG",{});var zZr=s(Dle);Dyo=r(zZr,"distilbert"),zZr.forEach(t),Gyo=r(n0e," \u2014 "),gN=n(n0e,"A",{href:!0});var QZr=s(gN);Oyo=r(QZr,"DistilBertForMultipleChoice"),QZr.forEach(t),Vyo=r(n0e," (DistilBERT model)"),n0e.forEach(t),Xyo=i(O),aF=n(O,"LI",{});var s0e=s(aF);Gle=n(s0e,"STRONG",{});var WZr=s(Gle);zyo=r(WZr,"electra"),WZr.forEach(t),Qyo=r(s0e," \u2014 "),hN=n(s0e,"A",{href:!0});var HZr=s(hN);Wyo=r(HZr,"ElectraForMultipleChoice"),HZr.forEach(t),Hyo=r(s0e," (ELECTRA model)"),s0e.forEach(t),Uyo=i(O),nF=n(O,"LI",{});var l0e=s(nF);Ole=n(l0e,"STRONG",{});var UZr=s(Ole);Jyo=r(UZr,"flaubert"),UZr.forEach(t),Yyo=r(l0e," \u2014 "),uN=n(l0e,"A",{href:!0});var JZr=s(uN);Kyo=r(JZr,"FlaubertForMultipleChoice"),JZr.forEach(t),Zyo=r(l0e," (FlauBERT model)"),l0e.forEach(t),eLo=i(O),sF=n(O,"LI",{});var i0e=s(sF);Vle=n(i0e,"STRONG",{});var YZr=s(Vle);oLo=r(YZr,"fnet"),YZr.forEach(t),rLo=r(i0e," \u2014 "),pN=n(i0e,"A",{href:!0});var KZr=s(pN);tLo=r(KZr,"FNetForMultipleChoice"),KZr.forEach(t),aLo=r(i0e," (FNet model)"),i0e.forEach(t),nLo=i(O),lF=n(O,"LI",{});var d0e=s(lF);Xle=n(d0e,"STRONG",{});var ZZr=s(Xle);sLo=r(ZZr,"funnel"),ZZr.forEach(t),lLo=r(d0e," \u2014 "),_N=n(d0e,"A",{href:!0});var eet=s(_N);iLo=r(eet,"FunnelForMultipleChoice"),eet.forEach(t),dLo=r(d0e," (Funnel Transformer model)"),d0e.forEach(t),cLo=i(O),iF=n(O,"LI",{});var c0e=s(iF);zle=n(c0e,"STRONG",{});var oet=s(zle);mLo=r(oet,"ibert"),oet.forEach(t),fLo=r(c0e," \u2014 "),bN=n(c0e,"A",{href:!0});var ret=s(bN);gLo=r(ret,"IBertForMultipleChoice"),ret.forEach(t),hLo=r(c0e," (I-BERT model)"),c0e.forEach(t),uLo=i(O),dF=n(O,"LI",{});var m0e=s(dF);Qle=n(m0e,"STRONG",{});var tet=s(Qle);pLo=r(tet,"longformer"),tet.forEach(t),_Lo=r(m0e," \u2014 "),FN=n(m0e,"A",{href:!0});var aet=s(FN);bLo=r(aet,"LongformerForMultipleChoice"),aet.forEach(t),FLo=r(m0e," (Longformer model)"),m0e.forEach(t),vLo=i(O),cF=n(O,"LI",{});var f0e=s(cF);Wle=n(f0e,"STRONG",{});var net=s(Wle);TLo=r(net,"megatron-bert"),net.forEach(t),MLo=r(f0e," \u2014 "),vN=n(f0e,"A",{href:!0});var set=s(vN);ELo=r(set,"MegatronBertForMultipleChoice"),set.forEach(t),CLo=r(f0e," (MegatronBert model)"),f0e.forEach(t),wLo=i(O),mF=n(O,"LI",{});var g0e=s(mF);Hle=n(g0e,"STRONG",{});var iet=s(Hle);ALo=r(iet,"mobilebert"),iet.forEach(t),yLo=r(g0e," \u2014 "),TN=n(g0e,"A",{href:!0});var det=s(TN);LLo=r(det,"MobileBertForMultipleChoice"),det.forEach(t),xLo=r(g0e," (MobileBERT model)"),g0e.forEach(t),kLo=i(O),fF=n(O,"LI",{});var h0e=s(fF);Ule=n(h0e,"STRONG",{});var cet=s(Ule);SLo=r(cet,"mpnet"),cet.forEach(t),RLo=r(h0e," \u2014 "),MN=n(h0e,"A",{href:!0});var met=s(MN);BLo=r(met,"MPNetForMultipleChoice"),met.forEach(t),PLo=r(h0e," (MPNet model)"),h0e.forEach(t),$Lo=i(O),gF=n(O,"LI",{});var u0e=s(gF);Jle=n(u0e,"STRONG",{});var fet=s(Jle);ILo=r(fet,"nystromformer"),fet.forEach(t),qLo=r(u0e," \u2014 "),EN=n(u0e,"A",{href:!0});var get=s(EN);NLo=r(get,"NystromformerForMultipleChoice"),get.forEach(t),jLo=r(u0e," (Nystromformer model)"),u0e.forEach(t),DLo=i(O),hF=n(O,"LI",{});var p0e=s(hF);Yle=n(p0e,"STRONG",{});var het=s(Yle);GLo=r(het,"qdqbert"),het.forEach(t),OLo=r(p0e," \u2014 "),CN=n(p0e,"A",{href:!0});var uet=s(CN);VLo=r(uet,"QDQBertForMultipleChoice"),uet.forEach(t),XLo=r(p0e," (QDQBert model)"),p0e.forEach(t),zLo=i(O),uF=n(O,"LI",{});var _0e=s(uF);Kle=n(_0e,"STRONG",{});var pet=s(Kle);QLo=r(pet,"rembert"),pet.forEach(t),WLo=r(_0e," \u2014 "),wN=n(_0e,"A",{href:!0});var _et=s(wN);HLo=r(_et,"RemBertForMultipleChoice"),_et.forEach(t),ULo=r(_0e," (RemBERT model)"),_0e.forEach(t),JLo=i(O),pF=n(O,"LI",{});var b0e=s(pF);Zle=n(b0e,"STRONG",{});var bet=s(Zle);YLo=r(bet,"roberta"),bet.forEach(t),KLo=r(b0e," \u2014 "),AN=n(b0e,"A",{href:!0});var Fet=s(AN);ZLo=r(Fet,"RobertaForMultipleChoice"),Fet.forEach(t),e7o=r(b0e," (RoBERTa model)"),b0e.forEach(t),o7o=i(O),_F=n(O,"LI",{});var F0e=s(_F);eie=n(F0e,"STRONG",{});var vet=s(eie);r7o=r(vet,"roformer"),vet.forEach(t),t7o=r(F0e," \u2014 "),yN=n(F0e,"A",{href:!0});var Tet=s(yN);a7o=r(Tet,"RoFormerForMultipleChoice"),Tet.forEach(t),n7o=r(F0e," (RoFormer model)"),F0e.forEach(t),s7o=i(O),bF=n(O,"LI",{});var v0e=s(bF);oie=n(v0e,"STRONG",{});var Met=s(oie);l7o=r(Met,"squeezebert"),Met.forEach(t),i7o=r(v0e," \u2014 "),LN=n(v0e,"A",{href:!0});var Eet=s(LN);d7o=r(Eet,"SqueezeBertForMultipleChoice"),Eet.forEach(t),c7o=r(v0e," (SqueezeBERT model)"),v0e.forEach(t),m7o=i(O),FF=n(O,"LI",{});var T0e=s(FF);rie=n(T0e,"STRONG",{});var Cet=s(rie);f7o=r(Cet,"xlm"),Cet.forEach(t),g7o=r(T0e," \u2014 "),xN=n(T0e,"A",{href:!0});var wet=s(xN);h7o=r(wet,"XLMForMultipleChoice"),wet.forEach(t),u7o=r(T0e," (XLM model)"),T0e.forEach(t),p7o=i(O),vF=n(O,"LI",{});var M0e=s(vF);tie=n(M0e,"STRONG",{});var Aet=s(tie);_7o=r(Aet,"xlm-roberta"),Aet.forEach(t),b7o=r(M0e," \u2014 "),kN=n(M0e,"A",{href:!0});var yet=s(kN);F7o=r(yet,"XLMRobertaForMultipleChoice"),yet.forEach(t),v7o=r(M0e," (XLM-RoBERTa model)"),M0e.forEach(t),T7o=i(O),TF=n(O,"LI",{});var E0e=s(TF);aie=n(E0e,"STRONG",{});var Let=s(aie);M7o=r(Let,"xlm-roberta-xl"),Let.forEach(t),E7o=r(E0e," \u2014 "),SN=n(E0e,"A",{href:!0});var xet=s(SN);C7o=r(xet,"XLMRobertaXLForMultipleChoice"),xet.forEach(t),w7o=r(E0e," (XLM-RoBERTa-XL model)"),E0e.forEach(t),A7o=i(O),MF=n(O,"LI",{});var C0e=s(MF);nie=n(C0e,"STRONG",{});var ket=s(nie);y7o=r(ket,"xlnet"),ket.forEach(t),L7o=r(C0e," \u2014 "),RN=n(C0e,"A",{href:!0});var Set=s(RN);x7o=r(Set,"XLNetForMultipleChoice"),Set.forEach(t),k7o=r(C0e," (XLNet model)"),C0e.forEach(t),S7o=i(O),EF=n(O,"LI",{});var w0e=s(EF);sie=n(w0e,"STRONG",{});var Ret=s(sie);R7o=r(Ret,"yoso"),Ret.forEach(t),B7o=r(w0e," \u2014 "),BN=n(w0e,"A",{href:!0});var Bet=s(BN);P7o=r(Bet,"YosoForMultipleChoice"),Bet.forEach(t),$7o=r(w0e," (YOSO model)"),w0e.forEach(t),O.forEach(t),I7o=i(Qt),CF=n(Qt,"P",{});var A0e=s(CF);q7o=r(A0e,"The model is set in evaluation mode by default using "),lie=n(A0e,"CODE",{});var Pet=s(lie);N7o=r(Pet,"model.eval()"),Pet.forEach(t),j7o=r(A0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=n(A0e,"CODE",{});var $et=s(iie);D7o=r($et,"model.train()"),$et.forEach(t),A0e.forEach(t),G7o=i(Qt),die=n(Qt,"P",{});var Iet=s(die);O7o=r(Iet,"Examples:"),Iet.forEach(t),V7o=i(Qt),f(GA.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),rRe=i(c),_d=n(c,"H2",{class:!0});var mPe=s(_d);wF=n(mPe,"A",{id:!0,class:!0,href:!0});var qet=s(wF);cie=n(qet,"SPAN",{});var Net=s(cie);f(OA.$$.fragment,Net),Net.forEach(t),qet.forEach(t),X7o=i(mPe),mie=n(mPe,"SPAN",{});var jet=s(mie);z7o=r(jet,"AutoModelForNextSentencePrediction"),jet.forEach(t),mPe.forEach(t),tRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);f(VA.$$.fragment,sl),Q7o=i(sl),bd=n(sl,"P",{});var nU=s(bd);W7o=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PN=n(nU,"A",{href:!0});var Det=s(PN);H7o=r(Det,"from_pretrained()"),Det.forEach(t),U7o=r(nU," class method or the "),$N=n(nU,"A",{href:!0});var Get=s($N);J7o=r(Get,"from_config()"),Get.forEach(t),Y7o=r(nU,` class
method.`),nU.forEach(t),K7o=i(sl),XA=n(sl,"P",{});var fPe=s(XA);Z7o=r(fPe,"This class cannot be instantiated directly using "),fie=n(fPe,"CODE",{});var Oet=s(fie);e8o=r(Oet,"__init__()"),Oet.forEach(t),o8o=r(fPe," (throws an error)."),fPe.forEach(t),r8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);f(zA.$$.fragment,ll),t8o=i(ll),gie=n(ll,"P",{});var Vet=s(gie);a8o=r(Vet,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vet.forEach(t),n8o=i(ll),Fd=n(ll,"P",{});var sU=s(Fd);s8o=r(sU,`Note:
Loading a model from its configuration file does `),hie=n(sU,"STRONG",{});var Xet=s(hie);l8o=r(Xet,"not"),Xet.forEach(t),i8o=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IN=n(sU,"A",{href:!0});var zet=s(IN);d8o=r(zet,"from_pretrained()"),zet.forEach(t),c8o=r(sU," to load the model weights."),sU.forEach(t),m8o=i(ll),uie=n(ll,"P",{});var Qet=s(uie);f8o=r(Qet,"Examples:"),Qet.forEach(t),g8o=i(ll),f(QA.$$.fragment,ll),ll.forEach(t),h8o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);f(WA.$$.fragment,Wt),u8o=i(Wt),pie=n(Wt,"P",{});var Wet=s(pie);p8o=r(Wet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wet.forEach(t),_8o=i(Wt),Ya=n(Wt,"P",{});var C3=s(Ya);b8o=r(C3,"The model class to instantiate is selected based on the "),_ie=n(C3,"CODE",{});var Het=s(_ie);F8o=r(Het,"model_type"),Het.forEach(t),v8o=r(C3,` property of the config object (either
passed as an argument or loaded from `),bie=n(C3,"CODE",{});var Uet=s(bie);T8o=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),M8o=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=n(C3,"CODE",{});var Jet=s(Fie);E8o=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),C8o=r(C3,":"),C3.forEach(t),w8o=i(Wt),da=n(Wt,"UL",{});var il=s(da);AF=n(il,"LI",{});var y0e=s(AF);vie=n(y0e,"STRONG",{});var Yet=s(vie);A8o=r(Yet,"bert"),Yet.forEach(t),y8o=r(y0e," \u2014 "),qN=n(y0e,"A",{href:!0});var Ket=s(qN);L8o=r(Ket,"BertForNextSentencePrediction"),Ket.forEach(t),x8o=r(y0e," (BERT model)"),y0e.forEach(t),k8o=i(il),yF=n(il,"LI",{});var L0e=s(yF);Tie=n(L0e,"STRONG",{});var Zet=s(Tie);S8o=r(Zet,"fnet"),Zet.forEach(t),R8o=r(L0e," \u2014 "),NN=n(L0e,"A",{href:!0});var eot=s(NN);B8o=r(eot,"FNetForNextSentencePrediction"),eot.forEach(t),P8o=r(L0e," (FNet model)"),L0e.forEach(t),$8o=i(il),LF=n(il,"LI",{});var x0e=s(LF);Mie=n(x0e,"STRONG",{});var oot=s(Mie);I8o=r(oot,"megatron-bert"),oot.forEach(t),q8o=r(x0e," \u2014 "),jN=n(x0e,"A",{href:!0});var rot=s(jN);N8o=r(rot,"MegatronBertForNextSentencePrediction"),rot.forEach(t),j8o=r(x0e," (MegatronBert model)"),x0e.forEach(t),D8o=i(il),xF=n(il,"LI",{});var k0e=s(xF);Eie=n(k0e,"STRONG",{});var tot=s(Eie);G8o=r(tot,"mobilebert"),tot.forEach(t),O8o=r(k0e," \u2014 "),DN=n(k0e,"A",{href:!0});var aot=s(DN);V8o=r(aot,"MobileBertForNextSentencePrediction"),aot.forEach(t),X8o=r(k0e," (MobileBERT model)"),k0e.forEach(t),z8o=i(il),kF=n(il,"LI",{});var S0e=s(kF);Cie=n(S0e,"STRONG",{});var not=s(Cie);Q8o=r(not,"qdqbert"),not.forEach(t),W8o=r(S0e," \u2014 "),GN=n(S0e,"A",{href:!0});var sot=s(GN);H8o=r(sot,"QDQBertForNextSentencePrediction"),sot.forEach(t),U8o=r(S0e," (QDQBert model)"),S0e.forEach(t),il.forEach(t),J8o=i(Wt),SF=n(Wt,"P",{});var R0e=s(SF);Y8o=r(R0e,"The model is set in evaluation mode by default using "),wie=n(R0e,"CODE",{});var lot=s(wie);K8o=r(lot,"model.eval()"),lot.forEach(t),Z8o=r(R0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(R0e,"CODE",{});var iot=s(Aie);e9o=r(iot,"model.train()"),iot.forEach(t),R0e.forEach(t),o9o=i(Wt),yie=n(Wt,"P",{});var dot=s(yie);r9o=r(dot,"Examples:"),dot.forEach(t),t9o=i(Wt),f(HA.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),aRe=i(c),vd=n(c,"H2",{class:!0});var gPe=s(vd);RF=n(gPe,"A",{id:!0,class:!0,href:!0});var cot=s(RF);Lie=n(cot,"SPAN",{});var mot=s(Lie);f(UA.$$.fragment,mot),mot.forEach(t),cot.forEach(t),a9o=i(gPe),xie=n(gPe,"SPAN",{});var fot=s(xie);n9o=r(fot,"AutoModelForTokenClassification"),fot.forEach(t),gPe.forEach(t),nRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);f(JA.$$.fragment,dl),s9o=i(dl),Td=n(dl,"P",{});var lU=s(Td);l9o=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ON=n(lU,"A",{href:!0});var got=s(ON);i9o=r(got,"from_pretrained()"),got.forEach(t),d9o=r(lU," class method or the "),VN=n(lU,"A",{href:!0});var hot=s(VN);c9o=r(hot,"from_config()"),hot.forEach(t),m9o=r(lU,` class
method.`),lU.forEach(t),f9o=i(dl),YA=n(dl,"P",{});var hPe=s(YA);g9o=r(hPe,"This class cannot be instantiated directly using "),kie=n(hPe,"CODE",{});var uot=s(kie);h9o=r(uot,"__init__()"),uot.forEach(t),u9o=r(hPe," (throws an error)."),hPe.forEach(t),p9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);f(KA.$$.fragment,cl),_9o=i(cl),Sie=n(cl,"P",{});var pot=s(Sie);b9o=r(pot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pot.forEach(t),F9o=i(cl),Md=n(cl,"P",{});var iU=s(Md);v9o=r(iU,`Note:
Loading a model from its configuration file does `),Rie=n(iU,"STRONG",{});var _ot=s(Rie);T9o=r(_ot,"not"),_ot.forEach(t),M9o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(iU,"A",{href:!0});var bot=s(XN);E9o=r(bot,"from_pretrained()"),bot.forEach(t),C9o=r(iU," to load the model weights."),iU.forEach(t),w9o=i(cl),Bie=n(cl,"P",{});var Fot=s(Bie);A9o=r(Fot,"Examples:"),Fot.forEach(t),y9o=i(cl),f(ZA.$$.fragment,cl),cl.forEach(t),L9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);f(e6.$$.fragment,Ht),x9o=i(Ht),Pie=n(Ht,"P",{});var vot=s(Pie);k9o=r(vot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vot.forEach(t),S9o=i(Ht),Ka=n(Ht,"P",{});var w3=s(Ka);R9o=r(w3,"The model class to instantiate is selected based on the "),$ie=n(w3,"CODE",{});var Tot=s($ie);B9o=r(Tot,"model_type"),Tot.forEach(t),P9o=r(w3,` property of the config object (either
passed as an argument or loaded from `),Iie=n(w3,"CODE",{});var Mot=s(Iie);$9o=r(Mot,"pretrained_model_name_or_path"),Mot.forEach(t),I9o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(w3,"CODE",{});var Eot=s(qie);q9o=r(Eot,"pretrained_model_name_or_path"),Eot.forEach(t),N9o=r(w3,":"),w3.forEach(t),j9o=i(Ht),j=n(Ht,"UL",{});var D=s(j);BF=n(D,"LI",{});var B0e=s(BF);Nie=n(B0e,"STRONG",{});var Cot=s(Nie);D9o=r(Cot,"albert"),Cot.forEach(t),G9o=r(B0e," \u2014 "),zN=n(B0e,"A",{href:!0});var wot=s(zN);O9o=r(wot,"AlbertForTokenClassification"),wot.forEach(t),V9o=r(B0e," (ALBERT model)"),B0e.forEach(t),X9o=i(D),PF=n(D,"LI",{});var P0e=s(PF);jie=n(P0e,"STRONG",{});var Aot=s(jie);z9o=r(Aot,"bert"),Aot.forEach(t),Q9o=r(P0e," \u2014 "),QN=n(P0e,"A",{href:!0});var yot=s(QN);W9o=r(yot,"BertForTokenClassification"),yot.forEach(t),H9o=r(P0e," (BERT model)"),P0e.forEach(t),U9o=i(D),$F=n(D,"LI",{});var $0e=s($F);Die=n($0e,"STRONG",{});var Lot=s(Die);J9o=r(Lot,"big_bird"),Lot.forEach(t),Y9o=r($0e," \u2014 "),WN=n($0e,"A",{href:!0});var xot=s(WN);K9o=r(xot,"BigBirdForTokenClassification"),xot.forEach(t),Z9o=r($0e," (BigBird model)"),$0e.forEach(t),exo=i(D),IF=n(D,"LI",{});var I0e=s(IF);Gie=n(I0e,"STRONG",{});var kot=s(Gie);oxo=r(kot,"camembert"),kot.forEach(t),rxo=r(I0e," \u2014 "),HN=n(I0e,"A",{href:!0});var Sot=s(HN);txo=r(Sot,"CamembertForTokenClassification"),Sot.forEach(t),axo=r(I0e," (CamemBERT model)"),I0e.forEach(t),nxo=i(D),qF=n(D,"LI",{});var q0e=s(qF);Oie=n(q0e,"STRONG",{});var Rot=s(Oie);sxo=r(Rot,"canine"),Rot.forEach(t),lxo=r(q0e," \u2014 "),UN=n(q0e,"A",{href:!0});var Bot=s(UN);ixo=r(Bot,"CanineForTokenClassification"),Bot.forEach(t),dxo=r(q0e," (Canine model)"),q0e.forEach(t),cxo=i(D),NF=n(D,"LI",{});var N0e=s(NF);Vie=n(N0e,"STRONG",{});var Pot=s(Vie);mxo=r(Pot,"convbert"),Pot.forEach(t),fxo=r(N0e," \u2014 "),JN=n(N0e,"A",{href:!0});var $ot=s(JN);gxo=r($ot,"ConvBertForTokenClassification"),$ot.forEach(t),hxo=r(N0e," (ConvBERT model)"),N0e.forEach(t),uxo=i(D),jF=n(D,"LI",{});var j0e=s(jF);Xie=n(j0e,"STRONG",{});var Iot=s(Xie);pxo=r(Iot,"data2vec-text"),Iot.forEach(t),_xo=r(j0e," \u2014 "),YN=n(j0e,"A",{href:!0});var qot=s(YN);bxo=r(qot,"Data2VecTextForTokenClassification"),qot.forEach(t),Fxo=r(j0e," (Data2VecText model)"),j0e.forEach(t),vxo=i(D),DF=n(D,"LI",{});var D0e=s(DF);zie=n(D0e,"STRONG",{});var Not=s(zie);Txo=r(Not,"deberta"),Not.forEach(t),Mxo=r(D0e," \u2014 "),KN=n(D0e,"A",{href:!0});var jot=s(KN);Exo=r(jot,"DebertaForTokenClassification"),jot.forEach(t),Cxo=r(D0e," (DeBERTa model)"),D0e.forEach(t),wxo=i(D),GF=n(D,"LI",{});var G0e=s(GF);Qie=n(G0e,"STRONG",{});var Dot=s(Qie);Axo=r(Dot,"deberta-v2"),Dot.forEach(t),yxo=r(G0e," \u2014 "),ZN=n(G0e,"A",{href:!0});var Got=s(ZN);Lxo=r(Got,"DebertaV2ForTokenClassification"),Got.forEach(t),xxo=r(G0e," (DeBERTa-v2 model)"),G0e.forEach(t),kxo=i(D),OF=n(D,"LI",{});var O0e=s(OF);Wie=n(O0e,"STRONG",{});var Oot=s(Wie);Sxo=r(Oot,"distilbert"),Oot.forEach(t),Rxo=r(O0e," \u2014 "),ej=n(O0e,"A",{href:!0});var Vot=s(ej);Bxo=r(Vot,"DistilBertForTokenClassification"),Vot.forEach(t),Pxo=r(O0e," (DistilBERT model)"),O0e.forEach(t),$xo=i(D),VF=n(D,"LI",{});var V0e=s(VF);Hie=n(V0e,"STRONG",{});var Xot=s(Hie);Ixo=r(Xot,"electra"),Xot.forEach(t),qxo=r(V0e," \u2014 "),oj=n(V0e,"A",{href:!0});var zot=s(oj);Nxo=r(zot,"ElectraForTokenClassification"),zot.forEach(t),jxo=r(V0e," (ELECTRA model)"),V0e.forEach(t),Dxo=i(D),XF=n(D,"LI",{});var X0e=s(XF);Uie=n(X0e,"STRONG",{});var Qot=s(Uie);Gxo=r(Qot,"flaubert"),Qot.forEach(t),Oxo=r(X0e," \u2014 "),rj=n(X0e,"A",{href:!0});var Wot=s(rj);Vxo=r(Wot,"FlaubertForTokenClassification"),Wot.forEach(t),Xxo=r(X0e," (FlauBERT model)"),X0e.forEach(t),zxo=i(D),zF=n(D,"LI",{});var z0e=s(zF);Jie=n(z0e,"STRONG",{});var Hot=s(Jie);Qxo=r(Hot,"fnet"),Hot.forEach(t),Wxo=r(z0e," \u2014 "),tj=n(z0e,"A",{href:!0});var Uot=s(tj);Hxo=r(Uot,"FNetForTokenClassification"),Uot.forEach(t),Uxo=r(z0e," (FNet model)"),z0e.forEach(t),Jxo=i(D),QF=n(D,"LI",{});var Q0e=s(QF);Yie=n(Q0e,"STRONG",{});var Jot=s(Yie);Yxo=r(Jot,"funnel"),Jot.forEach(t),Kxo=r(Q0e," \u2014 "),aj=n(Q0e,"A",{href:!0});var Yot=s(aj);Zxo=r(Yot,"FunnelForTokenClassification"),Yot.forEach(t),eko=r(Q0e," (Funnel Transformer model)"),Q0e.forEach(t),oko=i(D),WF=n(D,"LI",{});var W0e=s(WF);Kie=n(W0e,"STRONG",{});var Kot=s(Kie);rko=r(Kot,"gpt2"),Kot.forEach(t),tko=r(W0e," \u2014 "),nj=n(W0e,"A",{href:!0});var Zot=s(nj);ako=r(Zot,"GPT2ForTokenClassification"),Zot.forEach(t),nko=r(W0e," (OpenAI GPT-2 model)"),W0e.forEach(t),sko=i(D),HF=n(D,"LI",{});var H0e=s(HF);Zie=n(H0e,"STRONG",{});var ert=s(Zie);lko=r(ert,"ibert"),ert.forEach(t),iko=r(H0e," \u2014 "),sj=n(H0e,"A",{href:!0});var ort=s(sj);dko=r(ort,"IBertForTokenClassification"),ort.forEach(t),cko=r(H0e," (I-BERT model)"),H0e.forEach(t),mko=i(D),UF=n(D,"LI",{});var U0e=s(UF);ede=n(U0e,"STRONG",{});var rrt=s(ede);fko=r(rrt,"layoutlm"),rrt.forEach(t),gko=r(U0e," \u2014 "),lj=n(U0e,"A",{href:!0});var trt=s(lj);hko=r(trt,"LayoutLMForTokenClassification"),trt.forEach(t),uko=r(U0e," (LayoutLM model)"),U0e.forEach(t),pko=i(D),JF=n(D,"LI",{});var J0e=s(JF);ode=n(J0e,"STRONG",{});var art=s(ode);_ko=r(art,"layoutlmv2"),art.forEach(t),bko=r(J0e," \u2014 "),ij=n(J0e,"A",{href:!0});var nrt=s(ij);Fko=r(nrt,"LayoutLMv2ForTokenClassification"),nrt.forEach(t),vko=r(J0e," (LayoutLMv2 model)"),J0e.forEach(t),Tko=i(D),YF=n(D,"LI",{});var Y0e=s(YF);rde=n(Y0e,"STRONG",{});var srt=s(rde);Mko=r(srt,"longformer"),srt.forEach(t),Eko=r(Y0e," \u2014 "),dj=n(Y0e,"A",{href:!0});var lrt=s(dj);Cko=r(lrt,"LongformerForTokenClassification"),lrt.forEach(t),wko=r(Y0e," (Longformer model)"),Y0e.forEach(t),Ako=i(D),KF=n(D,"LI",{});var K0e=s(KF);tde=n(K0e,"STRONG",{});var irt=s(tde);yko=r(irt,"megatron-bert"),irt.forEach(t),Lko=r(K0e," \u2014 "),cj=n(K0e,"A",{href:!0});var drt=s(cj);xko=r(drt,"MegatronBertForTokenClassification"),drt.forEach(t),kko=r(K0e," (MegatronBert model)"),K0e.forEach(t),Sko=i(D),ZF=n(D,"LI",{});var Z0e=s(ZF);ade=n(Z0e,"STRONG",{});var crt=s(ade);Rko=r(crt,"mobilebert"),crt.forEach(t),Bko=r(Z0e," \u2014 "),mj=n(Z0e,"A",{href:!0});var mrt=s(mj);Pko=r(mrt,"MobileBertForTokenClassification"),mrt.forEach(t),$ko=r(Z0e," (MobileBERT model)"),Z0e.forEach(t),Iko=i(D),ev=n(D,"LI",{});var eye=s(ev);nde=n(eye,"STRONG",{});var frt=s(nde);qko=r(frt,"mpnet"),frt.forEach(t),Nko=r(eye," \u2014 "),fj=n(eye,"A",{href:!0});var grt=s(fj);jko=r(grt,"MPNetForTokenClassification"),grt.forEach(t),Dko=r(eye," (MPNet model)"),eye.forEach(t),Gko=i(D),ov=n(D,"LI",{});var oye=s(ov);sde=n(oye,"STRONG",{});var hrt=s(sde);Oko=r(hrt,"nystromformer"),hrt.forEach(t),Vko=r(oye," \u2014 "),gj=n(oye,"A",{href:!0});var urt=s(gj);Xko=r(urt,"NystromformerForTokenClassification"),urt.forEach(t),zko=r(oye," (Nystromformer model)"),oye.forEach(t),Qko=i(D),rv=n(D,"LI",{});var rye=s(rv);lde=n(rye,"STRONG",{});var prt=s(lde);Wko=r(prt,"qdqbert"),prt.forEach(t),Hko=r(rye," \u2014 "),hj=n(rye,"A",{href:!0});var _rt=s(hj);Uko=r(_rt,"QDQBertForTokenClassification"),_rt.forEach(t),Jko=r(rye," (QDQBert model)"),rye.forEach(t),Yko=i(D),tv=n(D,"LI",{});var tye=s(tv);ide=n(tye,"STRONG",{});var brt=s(ide);Kko=r(brt,"rembert"),brt.forEach(t),Zko=r(tye," \u2014 "),uj=n(tye,"A",{href:!0});var Frt=s(uj);eSo=r(Frt,"RemBertForTokenClassification"),Frt.forEach(t),oSo=r(tye," (RemBERT model)"),tye.forEach(t),rSo=i(D),av=n(D,"LI",{});var aye=s(av);dde=n(aye,"STRONG",{});var vrt=s(dde);tSo=r(vrt,"roberta"),vrt.forEach(t),aSo=r(aye," \u2014 "),pj=n(aye,"A",{href:!0});var Trt=s(pj);nSo=r(Trt,"RobertaForTokenClassification"),Trt.forEach(t),sSo=r(aye," (RoBERTa model)"),aye.forEach(t),lSo=i(D),nv=n(D,"LI",{});var nye=s(nv);cde=n(nye,"STRONG",{});var Mrt=s(cde);iSo=r(Mrt,"roformer"),Mrt.forEach(t),dSo=r(nye," \u2014 "),_j=n(nye,"A",{href:!0});var Ert=s(_j);cSo=r(Ert,"RoFormerForTokenClassification"),Ert.forEach(t),mSo=r(nye," (RoFormer model)"),nye.forEach(t),fSo=i(D),sv=n(D,"LI",{});var sye=s(sv);mde=n(sye,"STRONG",{});var Crt=s(mde);gSo=r(Crt,"squeezebert"),Crt.forEach(t),hSo=r(sye," \u2014 "),bj=n(sye,"A",{href:!0});var wrt=s(bj);uSo=r(wrt,"SqueezeBertForTokenClassification"),wrt.forEach(t),pSo=r(sye," (SqueezeBERT model)"),sye.forEach(t),_So=i(D),lv=n(D,"LI",{});var lye=s(lv);fde=n(lye,"STRONG",{});var Art=s(fde);bSo=r(Art,"xlm"),Art.forEach(t),FSo=r(lye," \u2014 "),Fj=n(lye,"A",{href:!0});var yrt=s(Fj);vSo=r(yrt,"XLMForTokenClassification"),yrt.forEach(t),TSo=r(lye," (XLM model)"),lye.forEach(t),MSo=i(D),iv=n(D,"LI",{});var iye=s(iv);gde=n(iye,"STRONG",{});var Lrt=s(gde);ESo=r(Lrt,"xlm-roberta"),Lrt.forEach(t),CSo=r(iye," \u2014 "),vj=n(iye,"A",{href:!0});var xrt=s(vj);wSo=r(xrt,"XLMRobertaForTokenClassification"),xrt.forEach(t),ASo=r(iye," (XLM-RoBERTa model)"),iye.forEach(t),ySo=i(D),dv=n(D,"LI",{});var dye=s(dv);hde=n(dye,"STRONG",{});var krt=s(hde);LSo=r(krt,"xlm-roberta-xl"),krt.forEach(t),xSo=r(dye," \u2014 "),Tj=n(dye,"A",{href:!0});var Srt=s(Tj);kSo=r(Srt,"XLMRobertaXLForTokenClassification"),Srt.forEach(t),SSo=r(dye," (XLM-RoBERTa-XL model)"),dye.forEach(t),RSo=i(D),cv=n(D,"LI",{});var cye=s(cv);ude=n(cye,"STRONG",{});var Rrt=s(ude);BSo=r(Rrt,"xlnet"),Rrt.forEach(t),PSo=r(cye," \u2014 "),Mj=n(cye,"A",{href:!0});var Brt=s(Mj);$So=r(Brt,"XLNetForTokenClassification"),Brt.forEach(t),ISo=r(cye," (XLNet model)"),cye.forEach(t),qSo=i(D),mv=n(D,"LI",{});var mye=s(mv);pde=n(mye,"STRONG",{});var Prt=s(pde);NSo=r(Prt,"yoso"),Prt.forEach(t),jSo=r(mye," \u2014 "),Ej=n(mye,"A",{href:!0});var $rt=s(Ej);DSo=r($rt,"YosoForTokenClassification"),$rt.forEach(t),GSo=r(mye," (YOSO model)"),mye.forEach(t),D.forEach(t),OSo=i(Ht),fv=n(Ht,"P",{});var fye=s(fv);VSo=r(fye,"The model is set in evaluation mode by default using "),_de=n(fye,"CODE",{});var Irt=s(_de);XSo=r(Irt,"model.eval()"),Irt.forEach(t),zSo=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=n(fye,"CODE",{});var qrt=s(bde);QSo=r(qrt,"model.train()"),qrt.forEach(t),fye.forEach(t),WSo=i(Ht),Fde=n(Ht,"P",{});var Nrt=s(Fde);HSo=r(Nrt,"Examples:"),Nrt.forEach(t),USo=i(Ht),f(o6.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),sRe=i(c),Ed=n(c,"H2",{class:!0});var uPe=s(Ed);gv=n(uPe,"A",{id:!0,class:!0,href:!0});var jrt=s(gv);vde=n(jrt,"SPAN",{});var Drt=s(vde);f(r6.$$.fragment,Drt),Drt.forEach(t),jrt.forEach(t),JSo=i(uPe),Tde=n(uPe,"SPAN",{});var Grt=s(Tde);YSo=r(Grt,"AutoModelForQuestionAnswering"),Grt.forEach(t),uPe.forEach(t),lRe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);f(t6.$$.fragment,ml),KSo=i(ml),Cd=n(ml,"P",{});var dU=s(Cd);ZSo=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cj=n(dU,"A",{href:!0});var Ort=s(Cj);eRo=r(Ort,"from_pretrained()"),Ort.forEach(t),oRo=r(dU," class method or the "),wj=n(dU,"A",{href:!0});var Vrt=s(wj);rRo=r(Vrt,"from_config()"),Vrt.forEach(t),tRo=r(dU,` class
method.`),dU.forEach(t),aRo=i(ml),a6=n(ml,"P",{});var pPe=s(a6);nRo=r(pPe,"This class cannot be instantiated directly using "),Mde=n(pPe,"CODE",{});var Xrt=s(Mde);sRo=r(Xrt,"__init__()"),Xrt.forEach(t),lRo=r(pPe," (throws an error)."),pPe.forEach(t),iRo=i(ml),Zr=n(ml,"DIV",{class:!0});var fl=s(Zr);f(n6.$$.fragment,fl),dRo=i(fl),Ede=n(fl,"P",{});var zrt=s(Ede);cRo=r(zrt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zrt.forEach(t),mRo=i(fl),wd=n(fl,"P",{});var cU=s(wd);fRo=r(cU,`Note:
Loading a model from its configuration file does `),Cde=n(cU,"STRONG",{});var Qrt=s(Cde);gRo=r(Qrt,"not"),Qrt.forEach(t),hRo=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=n(cU,"A",{href:!0});var Wrt=s(Aj);uRo=r(Wrt,"from_pretrained()"),Wrt.forEach(t),pRo=r(cU," to load the model weights."),cU.forEach(t),_Ro=i(fl),wde=n(fl,"P",{});var Hrt=s(wde);bRo=r(Hrt,"Examples:"),Hrt.forEach(t),FRo=i(fl),f(s6.$$.fragment,fl),fl.forEach(t),vRo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);f(l6.$$.fragment,Ut),TRo=i(Ut),Ade=n(Ut,"P",{});var Urt=s(Ade);MRo=r(Urt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Urt.forEach(t),ERo=i(Ut),Za=n(Ut,"P",{});var A3=s(Za);CRo=r(A3,"The model class to instantiate is selected based on the "),yde=n(A3,"CODE",{});var Jrt=s(yde);wRo=r(Jrt,"model_type"),Jrt.forEach(t),ARo=r(A3,` property of the config object (either
passed as an argument or loaded from `),Lde=n(A3,"CODE",{});var Yrt=s(Lde);yRo=r(Yrt,"pretrained_model_name_or_path"),Yrt.forEach(t),LRo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=n(A3,"CODE",{});var Krt=s(xde);xRo=r(Krt,"pretrained_model_name_or_path"),Krt.forEach(t),kRo=r(A3,":"),A3.forEach(t),SRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);hv=n(P,"LI",{});var gye=s(hv);kde=n(gye,"STRONG",{});var Zrt=s(kde);RRo=r(Zrt,"albert"),Zrt.forEach(t),BRo=r(gye," \u2014 "),yj=n(gye,"A",{href:!0});var ett=s(yj);PRo=r(ett,"AlbertForQuestionAnswering"),ett.forEach(t),$Ro=r(gye," (ALBERT model)"),gye.forEach(t),IRo=i(P),uv=n(P,"LI",{});var hye=s(uv);Sde=n(hye,"STRONG",{});var ott=s(Sde);qRo=r(ott,"bart"),ott.forEach(t),NRo=r(hye," \u2014 "),Lj=n(hye,"A",{href:!0});var rtt=s(Lj);jRo=r(rtt,"BartForQuestionAnswering"),rtt.forEach(t),DRo=r(hye," (BART model)"),hye.forEach(t),GRo=i(P),pv=n(P,"LI",{});var uye=s(pv);Rde=n(uye,"STRONG",{});var ttt=s(Rde);ORo=r(ttt,"bert"),ttt.forEach(t),VRo=r(uye," \u2014 "),xj=n(uye,"A",{href:!0});var att=s(xj);XRo=r(att,"BertForQuestionAnswering"),att.forEach(t),zRo=r(uye," (BERT model)"),uye.forEach(t),QRo=i(P),_v=n(P,"LI",{});var pye=s(_v);Bde=n(pye,"STRONG",{});var ntt=s(Bde);WRo=r(ntt,"big_bird"),ntt.forEach(t),HRo=r(pye," \u2014 "),kj=n(pye,"A",{href:!0});var stt=s(kj);URo=r(stt,"BigBirdForQuestionAnswering"),stt.forEach(t),JRo=r(pye," (BigBird model)"),pye.forEach(t),YRo=i(P),bv=n(P,"LI",{});var _ye=s(bv);Pde=n(_ye,"STRONG",{});var ltt=s(Pde);KRo=r(ltt,"bigbird_pegasus"),ltt.forEach(t),ZRo=r(_ye," \u2014 "),Sj=n(_ye,"A",{href:!0});var itt=s(Sj);eBo=r(itt,"BigBirdPegasusForQuestionAnswering"),itt.forEach(t),oBo=r(_ye," (BigBirdPegasus model)"),_ye.forEach(t),rBo=i(P),Fv=n(P,"LI",{});var bye=s(Fv);$de=n(bye,"STRONG",{});var dtt=s($de);tBo=r(dtt,"camembert"),dtt.forEach(t),aBo=r(bye," \u2014 "),Rj=n(bye,"A",{href:!0});var ctt=s(Rj);nBo=r(ctt,"CamembertForQuestionAnswering"),ctt.forEach(t),sBo=r(bye," (CamemBERT model)"),bye.forEach(t),lBo=i(P),vv=n(P,"LI",{});var Fye=s(vv);Ide=n(Fye,"STRONG",{});var mtt=s(Ide);iBo=r(mtt,"canine"),mtt.forEach(t),dBo=r(Fye," \u2014 "),Bj=n(Fye,"A",{href:!0});var ftt=s(Bj);cBo=r(ftt,"CanineForQuestionAnswering"),ftt.forEach(t),mBo=r(Fye," (Canine model)"),Fye.forEach(t),fBo=i(P),Tv=n(P,"LI",{});var vye=s(Tv);qde=n(vye,"STRONG",{});var gtt=s(qde);gBo=r(gtt,"convbert"),gtt.forEach(t),hBo=r(vye," \u2014 "),Pj=n(vye,"A",{href:!0});var htt=s(Pj);uBo=r(htt,"ConvBertForQuestionAnswering"),htt.forEach(t),pBo=r(vye," (ConvBERT model)"),vye.forEach(t),_Bo=i(P),Mv=n(P,"LI",{});var Tye=s(Mv);Nde=n(Tye,"STRONG",{});var utt=s(Nde);bBo=r(utt,"data2vec-text"),utt.forEach(t),FBo=r(Tye," \u2014 "),$j=n(Tye,"A",{href:!0});var ptt=s($j);vBo=r(ptt,"Data2VecTextForQuestionAnswering"),ptt.forEach(t),TBo=r(Tye," (Data2VecText model)"),Tye.forEach(t),MBo=i(P),Ev=n(P,"LI",{});var Mye=s(Ev);jde=n(Mye,"STRONG",{});var _tt=s(jde);EBo=r(_tt,"deberta"),_tt.forEach(t),CBo=r(Mye," \u2014 "),Ij=n(Mye,"A",{href:!0});var btt=s(Ij);wBo=r(btt,"DebertaForQuestionAnswering"),btt.forEach(t),ABo=r(Mye," (DeBERTa model)"),Mye.forEach(t),yBo=i(P),Cv=n(P,"LI",{});var Eye=s(Cv);Dde=n(Eye,"STRONG",{});var Ftt=s(Dde);LBo=r(Ftt,"deberta-v2"),Ftt.forEach(t),xBo=r(Eye," \u2014 "),qj=n(Eye,"A",{href:!0});var vtt=s(qj);kBo=r(vtt,"DebertaV2ForQuestionAnswering"),vtt.forEach(t),SBo=r(Eye," (DeBERTa-v2 model)"),Eye.forEach(t),RBo=i(P),wv=n(P,"LI",{});var Cye=s(wv);Gde=n(Cye,"STRONG",{});var Ttt=s(Gde);BBo=r(Ttt,"distilbert"),Ttt.forEach(t),PBo=r(Cye," \u2014 "),Nj=n(Cye,"A",{href:!0});var Mtt=s(Nj);$Bo=r(Mtt,"DistilBertForQuestionAnswering"),Mtt.forEach(t),IBo=r(Cye," (DistilBERT model)"),Cye.forEach(t),qBo=i(P),Av=n(P,"LI",{});var wye=s(Av);Ode=n(wye,"STRONG",{});var Ett=s(Ode);NBo=r(Ett,"electra"),Ett.forEach(t),jBo=r(wye," \u2014 "),jj=n(wye,"A",{href:!0});var Ctt=s(jj);DBo=r(Ctt,"ElectraForQuestionAnswering"),Ctt.forEach(t),GBo=r(wye," (ELECTRA model)"),wye.forEach(t),OBo=i(P),yv=n(P,"LI",{});var Aye=s(yv);Vde=n(Aye,"STRONG",{});var wtt=s(Vde);VBo=r(wtt,"flaubert"),wtt.forEach(t),XBo=r(Aye," \u2014 "),Dj=n(Aye,"A",{href:!0});var Att=s(Dj);zBo=r(Att,"FlaubertForQuestionAnsweringSimple"),Att.forEach(t),QBo=r(Aye," (FlauBERT model)"),Aye.forEach(t),WBo=i(P),Lv=n(P,"LI",{});var yye=s(Lv);Xde=n(yye,"STRONG",{});var ytt=s(Xde);HBo=r(ytt,"fnet"),ytt.forEach(t),UBo=r(yye," \u2014 "),Gj=n(yye,"A",{href:!0});var Ltt=s(Gj);JBo=r(Ltt,"FNetForQuestionAnswering"),Ltt.forEach(t),YBo=r(yye," (FNet model)"),yye.forEach(t),KBo=i(P),xv=n(P,"LI",{});var Lye=s(xv);zde=n(Lye,"STRONG",{});var xtt=s(zde);ZBo=r(xtt,"funnel"),xtt.forEach(t),ePo=r(Lye," \u2014 "),Oj=n(Lye,"A",{href:!0});var ktt=s(Oj);oPo=r(ktt,"FunnelForQuestionAnswering"),ktt.forEach(t),rPo=r(Lye," (Funnel Transformer model)"),Lye.forEach(t),tPo=i(P),kv=n(P,"LI",{});var xye=s(kv);Qde=n(xye,"STRONG",{});var Stt=s(Qde);aPo=r(Stt,"gptj"),Stt.forEach(t),nPo=r(xye," \u2014 "),Vj=n(xye,"A",{href:!0});var Rtt=s(Vj);sPo=r(Rtt,"GPTJForQuestionAnswering"),Rtt.forEach(t),lPo=r(xye," (GPT-J model)"),xye.forEach(t),iPo=i(P),Sv=n(P,"LI",{});var kye=s(Sv);Wde=n(kye,"STRONG",{});var Btt=s(Wde);dPo=r(Btt,"ibert"),Btt.forEach(t),cPo=r(kye," \u2014 "),Xj=n(kye,"A",{href:!0});var Ptt=s(Xj);mPo=r(Ptt,"IBertForQuestionAnswering"),Ptt.forEach(t),fPo=r(kye," (I-BERT model)"),kye.forEach(t),gPo=i(P),Rv=n(P,"LI",{});var Sye=s(Rv);Hde=n(Sye,"STRONG",{});var $tt=s(Hde);hPo=r($tt,"layoutlmv2"),$tt.forEach(t),uPo=r(Sye," \u2014 "),zj=n(Sye,"A",{href:!0});var Itt=s(zj);pPo=r(Itt,"LayoutLMv2ForQuestionAnswering"),Itt.forEach(t),_Po=r(Sye," (LayoutLMv2 model)"),Sye.forEach(t),bPo=i(P),Bv=n(P,"LI",{});var Rye=s(Bv);Ude=n(Rye,"STRONG",{});var qtt=s(Ude);FPo=r(qtt,"led"),qtt.forEach(t),vPo=r(Rye," \u2014 "),Qj=n(Rye,"A",{href:!0});var Ntt=s(Qj);TPo=r(Ntt,"LEDForQuestionAnswering"),Ntt.forEach(t),MPo=r(Rye," (LED model)"),Rye.forEach(t),EPo=i(P),Pv=n(P,"LI",{});var Bye=s(Pv);Jde=n(Bye,"STRONG",{});var jtt=s(Jde);CPo=r(jtt,"longformer"),jtt.forEach(t),wPo=r(Bye," \u2014 "),Wj=n(Bye,"A",{href:!0});var Dtt=s(Wj);APo=r(Dtt,"LongformerForQuestionAnswering"),Dtt.forEach(t),yPo=r(Bye," (Longformer model)"),Bye.forEach(t),LPo=i(P),$v=n(P,"LI",{});var Pye=s($v);Yde=n(Pye,"STRONG",{});var Gtt=s(Yde);xPo=r(Gtt,"lxmert"),Gtt.forEach(t),kPo=r(Pye," \u2014 "),Hj=n(Pye,"A",{href:!0});var Ott=s(Hj);SPo=r(Ott,"LxmertForQuestionAnswering"),Ott.forEach(t),RPo=r(Pye," (LXMERT model)"),Pye.forEach(t),BPo=i(P),Iv=n(P,"LI",{});var $ye=s(Iv);Kde=n($ye,"STRONG",{});var Vtt=s(Kde);PPo=r(Vtt,"mbart"),Vtt.forEach(t),$Po=r($ye," \u2014 "),Uj=n($ye,"A",{href:!0});var Xtt=s(Uj);IPo=r(Xtt,"MBartForQuestionAnswering"),Xtt.forEach(t),qPo=r($ye," (mBART model)"),$ye.forEach(t),NPo=i(P),qv=n(P,"LI",{});var Iye=s(qv);Zde=n(Iye,"STRONG",{});var ztt=s(Zde);jPo=r(ztt,"megatron-bert"),ztt.forEach(t),DPo=r(Iye," \u2014 "),Jj=n(Iye,"A",{href:!0});var Qtt=s(Jj);GPo=r(Qtt,"MegatronBertForQuestionAnswering"),Qtt.forEach(t),OPo=r(Iye," (MegatronBert model)"),Iye.forEach(t),VPo=i(P),Nv=n(P,"LI",{});var qye=s(Nv);ece=n(qye,"STRONG",{});var Wtt=s(ece);XPo=r(Wtt,"mobilebert"),Wtt.forEach(t),zPo=r(qye," \u2014 "),Yj=n(qye,"A",{href:!0});var Htt=s(Yj);QPo=r(Htt,"MobileBertForQuestionAnswering"),Htt.forEach(t),WPo=r(qye," (MobileBERT model)"),qye.forEach(t),HPo=i(P),jv=n(P,"LI",{});var Nye=s(jv);oce=n(Nye,"STRONG",{});var Utt=s(oce);UPo=r(Utt,"mpnet"),Utt.forEach(t),JPo=r(Nye," \u2014 "),Kj=n(Nye,"A",{href:!0});var Jtt=s(Kj);YPo=r(Jtt,"MPNetForQuestionAnswering"),Jtt.forEach(t),KPo=r(Nye," (MPNet model)"),Nye.forEach(t),ZPo=i(P),Dv=n(P,"LI",{});var jye=s(Dv);rce=n(jye,"STRONG",{});var Ytt=s(rce);e$o=r(Ytt,"nystromformer"),Ytt.forEach(t),o$o=r(jye," \u2014 "),Zj=n(jye,"A",{href:!0});var Ktt=s(Zj);r$o=r(Ktt,"NystromformerForQuestionAnswering"),Ktt.forEach(t),t$o=r(jye," (Nystromformer model)"),jye.forEach(t),a$o=i(P),Gv=n(P,"LI",{});var Dye=s(Gv);tce=n(Dye,"STRONG",{});var Ztt=s(tce);n$o=r(Ztt,"qdqbert"),Ztt.forEach(t),s$o=r(Dye," \u2014 "),eD=n(Dye,"A",{href:!0});var eat=s(eD);l$o=r(eat,"QDQBertForQuestionAnswering"),eat.forEach(t),i$o=r(Dye," (QDQBert model)"),Dye.forEach(t),d$o=i(P),Ov=n(P,"LI",{});var Gye=s(Ov);ace=n(Gye,"STRONG",{});var oat=s(ace);c$o=r(oat,"reformer"),oat.forEach(t),m$o=r(Gye," \u2014 "),oD=n(Gye,"A",{href:!0});var rat=s(oD);f$o=r(rat,"ReformerForQuestionAnswering"),rat.forEach(t),g$o=r(Gye," (Reformer model)"),Gye.forEach(t),h$o=i(P),Vv=n(P,"LI",{});var Oye=s(Vv);nce=n(Oye,"STRONG",{});var tat=s(nce);u$o=r(tat,"rembert"),tat.forEach(t),p$o=r(Oye," \u2014 "),rD=n(Oye,"A",{href:!0});var aat=s(rD);_$o=r(aat,"RemBertForQuestionAnswering"),aat.forEach(t),b$o=r(Oye," (RemBERT model)"),Oye.forEach(t),F$o=i(P),Xv=n(P,"LI",{});var Vye=s(Xv);sce=n(Vye,"STRONG",{});var nat=s(sce);v$o=r(nat,"roberta"),nat.forEach(t),T$o=r(Vye," \u2014 "),tD=n(Vye,"A",{href:!0});var sat=s(tD);M$o=r(sat,"RobertaForQuestionAnswering"),sat.forEach(t),E$o=r(Vye," (RoBERTa model)"),Vye.forEach(t),C$o=i(P),zv=n(P,"LI",{});var Xye=s(zv);lce=n(Xye,"STRONG",{});var lat=s(lce);w$o=r(lat,"roformer"),lat.forEach(t),A$o=r(Xye," \u2014 "),aD=n(Xye,"A",{href:!0});var iat=s(aD);y$o=r(iat,"RoFormerForQuestionAnswering"),iat.forEach(t),L$o=r(Xye," (RoFormer model)"),Xye.forEach(t),x$o=i(P),Qv=n(P,"LI",{});var zye=s(Qv);ice=n(zye,"STRONG",{});var dat=s(ice);k$o=r(dat,"splinter"),dat.forEach(t),S$o=r(zye," \u2014 "),nD=n(zye,"A",{href:!0});var cat=s(nD);R$o=r(cat,"SplinterForQuestionAnswering"),cat.forEach(t),B$o=r(zye," (Splinter model)"),zye.forEach(t),P$o=i(P),Wv=n(P,"LI",{});var Qye=s(Wv);dce=n(Qye,"STRONG",{});var mat=s(dce);$$o=r(mat,"squeezebert"),mat.forEach(t),I$o=r(Qye," \u2014 "),sD=n(Qye,"A",{href:!0});var fat=s(sD);q$o=r(fat,"SqueezeBertForQuestionAnswering"),fat.forEach(t),N$o=r(Qye," (SqueezeBERT model)"),Qye.forEach(t),j$o=i(P),Hv=n(P,"LI",{});var Wye=s(Hv);cce=n(Wye,"STRONG",{});var gat=s(cce);D$o=r(gat,"xlm"),gat.forEach(t),G$o=r(Wye," \u2014 "),lD=n(Wye,"A",{href:!0});var hat=s(lD);O$o=r(hat,"XLMForQuestionAnsweringSimple"),hat.forEach(t),V$o=r(Wye," (XLM model)"),Wye.forEach(t),X$o=i(P),Uv=n(P,"LI",{});var Hye=s(Uv);mce=n(Hye,"STRONG",{});var uat=s(mce);z$o=r(uat,"xlm-roberta"),uat.forEach(t),Q$o=r(Hye," \u2014 "),iD=n(Hye,"A",{href:!0});var pat=s(iD);W$o=r(pat,"XLMRobertaForQuestionAnswering"),pat.forEach(t),H$o=r(Hye," (XLM-RoBERTa model)"),Hye.forEach(t),U$o=i(P),Jv=n(P,"LI",{});var Uye=s(Jv);fce=n(Uye,"STRONG",{});var _at=s(fce);J$o=r(_at,"xlm-roberta-xl"),_at.forEach(t),Y$o=r(Uye," \u2014 "),dD=n(Uye,"A",{href:!0});var bat=s(dD);K$o=r(bat,"XLMRobertaXLForQuestionAnswering"),bat.forEach(t),Z$o=r(Uye," (XLM-RoBERTa-XL model)"),Uye.forEach(t),eIo=i(P),Yv=n(P,"LI",{});var Jye=s(Yv);gce=n(Jye,"STRONG",{});var Fat=s(gce);oIo=r(Fat,"xlnet"),Fat.forEach(t),rIo=r(Jye," \u2014 "),cD=n(Jye,"A",{href:!0});var vat=s(cD);tIo=r(vat,"XLNetForQuestionAnsweringSimple"),vat.forEach(t),aIo=r(Jye," (XLNet model)"),Jye.forEach(t),nIo=i(P),Kv=n(P,"LI",{});var Yye=s(Kv);hce=n(Yye,"STRONG",{});var Tat=s(hce);sIo=r(Tat,"yoso"),Tat.forEach(t),lIo=r(Yye," \u2014 "),mD=n(Yye,"A",{href:!0});var Mat=s(mD);iIo=r(Mat,"YosoForQuestionAnswering"),Mat.forEach(t),dIo=r(Yye," (YOSO model)"),Yye.forEach(t),P.forEach(t),cIo=i(Ut),Zv=n(Ut,"P",{});var Kye=s(Zv);mIo=r(Kye,"The model is set in evaluation mode by default using "),uce=n(Kye,"CODE",{});var Eat=s(uce);fIo=r(Eat,"model.eval()"),Eat.forEach(t),gIo=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(Kye,"CODE",{});var Cat=s(pce);hIo=r(Cat,"model.train()"),Cat.forEach(t),Kye.forEach(t),uIo=i(Ut),_ce=n(Ut,"P",{});var wat=s(_ce);pIo=r(wat,"Examples:"),wat.forEach(t),_Io=i(Ut),f(i6.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),iRe=i(c),Ad=n(c,"H2",{class:!0});var _Pe=s(Ad);eT=n(_Pe,"A",{id:!0,class:!0,href:!0});var Aat=s(eT);bce=n(Aat,"SPAN",{});var yat=s(bce);f(d6.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),bIo=i(_Pe),Fce=n(_Pe,"SPAN",{});var Lat=s(Fce);FIo=r(Lat,"AutoModelForTableQuestionAnswering"),Lat.forEach(t),_Pe.forEach(t),dRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);f(c6.$$.fragment,gl),vIo=i(gl),yd=n(gl,"P",{});var mU=s(yd);TIo=r(mU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fD=n(mU,"A",{href:!0});var xat=s(fD);MIo=r(xat,"from_pretrained()"),xat.forEach(t),EIo=r(mU," class method or the "),gD=n(mU,"A",{href:!0});var kat=s(gD);CIo=r(kat,"from_config()"),kat.forEach(t),wIo=r(mU,` class
method.`),mU.forEach(t),AIo=i(gl),m6=n(gl,"P",{});var bPe=s(m6);yIo=r(bPe,"This class cannot be instantiated directly using "),vce=n(bPe,"CODE",{});var Sat=s(vce);LIo=r(Sat,"__init__()"),Sat.forEach(t),xIo=r(bPe," (throws an error)."),bPe.forEach(t),kIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);f(f6.$$.fragment,hl),SIo=i(hl),Tce=n(hl,"P",{});var Rat=s(Tce);RIo=r(Rat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rat.forEach(t),BIo=i(hl),Ld=n(hl,"P",{});var fU=s(Ld);PIo=r(fU,`Note:
Loading a model from its configuration file does `),Mce=n(fU,"STRONG",{});var Bat=s(Mce);$Io=r(Bat,"not"),Bat.forEach(t),IIo=r(fU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=n(fU,"A",{href:!0});var Pat=s(hD);qIo=r(Pat,"from_pretrained()"),Pat.forEach(t),NIo=r(fU," to load the model weights."),fU.forEach(t),jIo=i(hl),Ece=n(hl,"P",{});var $at=s(Ece);DIo=r($at,"Examples:"),$at.forEach(t),GIo=i(hl),f(g6.$$.fragment,hl),hl.forEach(t),OIo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);f(h6.$$.fragment,Jt),VIo=i(Jt),Cce=n(Jt,"P",{});var Iat=s(Cce);XIo=r(Iat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Iat.forEach(t),zIo=i(Jt),en=n(Jt,"P",{});var y3=s(en);QIo=r(y3,"The model class to instantiate is selected based on the "),wce=n(y3,"CODE",{});var qat=s(wce);WIo=r(qat,"model_type"),qat.forEach(t),HIo=r(y3,` property of the config object (either
passed as an argument or loaded from `),Ace=n(y3,"CODE",{});var Nat=s(Ace);UIo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),JIo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=n(y3,"CODE",{});var jat=s(yce);YIo=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),KIo=r(y3,":"),y3.forEach(t),ZIo=i(Jt),Lce=n(Jt,"UL",{});var Dat=s(Lce);oT=n(Dat,"LI",{});var Zye=s(oT);xce=n(Zye,"STRONG",{});var Gat=s(xce);eqo=r(Gat,"tapas"),Gat.forEach(t),oqo=r(Zye," \u2014 "),uD=n(Zye,"A",{href:!0});var Oat=s(uD);rqo=r(Oat,"TapasForQuestionAnswering"),Oat.forEach(t),tqo=r(Zye," (TAPAS model)"),Zye.forEach(t),Dat.forEach(t),aqo=i(Jt),rT=n(Jt,"P",{});var eLe=s(rT);nqo=r(eLe,"The model is set in evaluation mode by default using "),kce=n(eLe,"CODE",{});var Vat=s(kce);sqo=r(Vat,"model.eval()"),Vat.forEach(t),lqo=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n(eLe,"CODE",{});var Xat=s(Sce);iqo=r(Xat,"model.train()"),Xat.forEach(t),eLe.forEach(t),dqo=i(Jt),Rce=n(Jt,"P",{});var zat=s(Rce);cqo=r(zat,"Examples:"),zat.forEach(t),mqo=i(Jt),f(u6.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),cRe=i(c),xd=n(c,"H2",{class:!0});var FPe=s(xd);tT=n(FPe,"A",{id:!0,class:!0,href:!0});var Qat=s(tT);Bce=n(Qat,"SPAN",{});var Wat=s(Bce);f(p6.$$.fragment,Wat),Wat.forEach(t),Qat.forEach(t),fqo=i(FPe),Pce=n(FPe,"SPAN",{});var Hat=s(Pce);gqo=r(Hat,"AutoModelForImageClassification"),Hat.forEach(t),FPe.forEach(t),mRe=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);f(_6.$$.fragment,ul),hqo=i(ul),kd=n(ul,"P",{});var gU=s(kd);uqo=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pD=n(gU,"A",{href:!0});var Uat=s(pD);pqo=r(Uat,"from_pretrained()"),Uat.forEach(t),_qo=r(gU," class method or the "),_D=n(gU,"A",{href:!0});var Jat=s(_D);bqo=r(Jat,"from_config()"),Jat.forEach(t),Fqo=r(gU,` class
method.`),gU.forEach(t),vqo=i(ul),b6=n(ul,"P",{});var vPe=s(b6);Tqo=r(vPe,"This class cannot be instantiated directly using "),$ce=n(vPe,"CODE",{});var Yat=s($ce);Mqo=r(Yat,"__init__()"),Yat.forEach(t),Eqo=r(vPe," (throws an error)."),vPe.forEach(t),Cqo=i(ul),ot=n(ul,"DIV",{class:!0});var pl=s(ot);f(F6.$$.fragment,pl),wqo=i(pl),Ice=n(pl,"P",{});var Kat=s(Ice);Aqo=r(Kat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kat.forEach(t),yqo=i(pl),Sd=n(pl,"P",{});var hU=s(Sd);Lqo=r(hU,`Note:
Loading a model from its configuration file does `),qce=n(hU,"STRONG",{});var Zat=s(qce);xqo=r(Zat,"not"),Zat.forEach(t),kqo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(hU,"A",{href:!0});var ent=s(bD);Sqo=r(ent,"from_pretrained()"),ent.forEach(t),Rqo=r(hU," to load the model weights."),hU.forEach(t),Bqo=i(pl),Nce=n(pl,"P",{});var ont=s(Nce);Pqo=r(ont,"Examples:"),ont.forEach(t),$qo=i(pl),f(v6.$$.fragment,pl),pl.forEach(t),Iqo=i(ul),He=n(ul,"DIV",{class:!0});var Yt=s(He);f(T6.$$.fragment,Yt),qqo=i(Yt),jce=n(Yt,"P",{});var rnt=s(jce);Nqo=r(rnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rnt.forEach(t),jqo=i(Yt),on=n(Yt,"P",{});var L3=s(on);Dqo=r(L3,"The model class to instantiate is selected based on the "),Dce=n(L3,"CODE",{});var tnt=s(Dce);Gqo=r(tnt,"model_type"),tnt.forEach(t),Oqo=r(L3,` property of the config object (either
passed as an argument or loaded from `),Gce=n(L3,"CODE",{});var ant=s(Gce);Vqo=r(ant,"pretrained_model_name_or_path"),ant.forEach(t),Xqo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(L3,"CODE",{});var nnt=s(Oce);zqo=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),Qqo=r(L3,":"),L3.forEach(t),Wqo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);aT=n(Te,"LI",{});var oLe=s(aT);Vce=n(oLe,"STRONG",{});var snt=s(Vce);Hqo=r(snt,"beit"),snt.forEach(t),Uqo=r(oLe," \u2014 "),FD=n(oLe,"A",{href:!0});var lnt=s(FD);Jqo=r(lnt,"BeitForImageClassification"),lnt.forEach(t),Yqo=r(oLe," (BEiT model)"),oLe.forEach(t),Kqo=i(Te),nT=n(Te,"LI",{});var rLe=s(nT);Xce=n(rLe,"STRONG",{});var int=s(Xce);Zqo=r(int,"convnext"),int.forEach(t),eNo=r(rLe," \u2014 "),vD=n(rLe,"A",{href:!0});var dnt=s(vD);oNo=r(dnt,"ConvNextForImageClassification"),dnt.forEach(t),rNo=r(rLe," (ConvNext model)"),rLe.forEach(t),tNo=i(Te),Ds=n(Te,"LI",{});var t9=s(Ds);zce=n(t9,"STRONG",{});var cnt=s(zce);aNo=r(cnt,"deit"),cnt.forEach(t),nNo=r(t9," \u2014 "),TD=n(t9,"A",{href:!0});var mnt=s(TD);sNo=r(mnt,"DeiTForImageClassification"),mnt.forEach(t),lNo=r(t9," or "),MD=n(t9,"A",{href:!0});var fnt=s(MD);iNo=r(fnt,"DeiTForImageClassificationWithTeacher"),fnt.forEach(t),dNo=r(t9," (DeiT model)"),t9.forEach(t),cNo=i(Te),sT=n(Te,"LI",{});var tLe=s(sT);Qce=n(tLe,"STRONG",{});var gnt=s(Qce);mNo=r(gnt,"imagegpt"),gnt.forEach(t),fNo=r(tLe," \u2014 "),ED=n(tLe,"A",{href:!0});var hnt=s(ED);gNo=r(hnt,"ImageGPTForImageClassification"),hnt.forEach(t),hNo=r(tLe," (ImageGPT model)"),tLe.forEach(t),uNo=i(Te),fa=n(Te,"LI",{});var Pm=s(fa);Wce=n(Pm,"STRONG",{});var unt=s(Wce);pNo=r(unt,"perceiver"),unt.forEach(t),_No=r(Pm," \u2014 "),CD=n(Pm,"A",{href:!0});var pnt=s(CD);bNo=r(pnt,"PerceiverForImageClassificationLearned"),pnt.forEach(t),FNo=r(Pm," or "),wD=n(Pm,"A",{href:!0});var _nt=s(wD);vNo=r(_nt,"PerceiverForImageClassificationFourier"),_nt.forEach(t),TNo=r(Pm," or "),AD=n(Pm,"A",{href:!0});var bnt=s(AD);MNo=r(bnt,"PerceiverForImageClassificationConvProcessing"),bnt.forEach(t),ENo=r(Pm," (Perceiver model)"),Pm.forEach(t),CNo=i(Te),lT=n(Te,"LI",{});var aLe=s(lT);Hce=n(aLe,"STRONG",{});var Fnt=s(Hce);wNo=r(Fnt,"poolformer"),Fnt.forEach(t),ANo=r(aLe," \u2014 "),yD=n(aLe,"A",{href:!0});var vnt=s(yD);yNo=r(vnt,"PoolFormerForImageClassification"),vnt.forEach(t),LNo=r(aLe," (PoolFormer model)"),aLe.forEach(t),xNo=i(Te),iT=n(Te,"LI",{});var nLe=s(iT);Uce=n(nLe,"STRONG",{});var Tnt=s(Uce);kNo=r(Tnt,"resnet"),Tnt.forEach(t),SNo=r(nLe," \u2014 "),LD=n(nLe,"A",{href:!0});var Mnt=s(LD);RNo=r(Mnt,"ResNetForImageClassification"),Mnt.forEach(t),BNo=r(nLe," (ResNet model)"),nLe.forEach(t),PNo=i(Te),dT=n(Te,"LI",{});var sLe=s(dT);Jce=n(sLe,"STRONG",{});var Ent=s(Jce);$No=r(Ent,"segformer"),Ent.forEach(t),INo=r(sLe," \u2014 "),xD=n(sLe,"A",{href:!0});var Cnt=s(xD);qNo=r(Cnt,"SegformerForImageClassification"),Cnt.forEach(t),NNo=r(sLe," (SegFormer model)"),sLe.forEach(t),jNo=i(Te),cT=n(Te,"LI",{});var lLe=s(cT);Yce=n(lLe,"STRONG",{});var wnt=s(Yce);DNo=r(wnt,"swin"),wnt.forEach(t),GNo=r(lLe," \u2014 "),kD=n(lLe,"A",{href:!0});var Ant=s(kD);ONo=r(Ant,"SwinForImageClassification"),Ant.forEach(t),VNo=r(lLe," (Swin model)"),lLe.forEach(t),XNo=i(Te),mT=n(Te,"LI",{});var iLe=s(mT);Kce=n(iLe,"STRONG",{});var ynt=s(Kce);zNo=r(ynt,"van"),ynt.forEach(t),QNo=r(iLe," \u2014 "),SD=n(iLe,"A",{href:!0});var Lnt=s(SD);WNo=r(Lnt,"VanForImageClassification"),Lnt.forEach(t),HNo=r(iLe," (VAN model)"),iLe.forEach(t),UNo=i(Te),fT=n(Te,"LI",{});var dLe=s(fT);Zce=n(dLe,"STRONG",{});var xnt=s(Zce);JNo=r(xnt,"vit"),xnt.forEach(t),YNo=r(dLe," \u2014 "),RD=n(dLe,"A",{href:!0});var knt=s(RD);KNo=r(knt,"ViTForImageClassification"),knt.forEach(t),ZNo=r(dLe," (ViT model)"),dLe.forEach(t),Te.forEach(t),ejo=i(Yt),gT=n(Yt,"P",{});var cLe=s(gT);ojo=r(cLe,"The model is set in evaluation mode by default using "),eme=n(cLe,"CODE",{});var Snt=s(eme);rjo=r(Snt,"model.eval()"),Snt.forEach(t),tjo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(cLe,"CODE",{});var Rnt=s(ome);ajo=r(Rnt,"model.train()"),Rnt.forEach(t),cLe.forEach(t),njo=i(Yt),rme=n(Yt,"P",{});var Bnt=s(rme);sjo=r(Bnt,"Examples:"),Bnt.forEach(t),ljo=i(Yt),f(M6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),fRe=i(c),Rd=n(c,"H2",{class:!0});var TPe=s(Rd);hT=n(TPe,"A",{id:!0,class:!0,href:!0});var Pnt=s(hT);tme=n(Pnt,"SPAN",{});var $nt=s(tme);f(E6.$$.fragment,$nt),$nt.forEach(t),Pnt.forEach(t),ijo=i(TPe),ame=n(TPe,"SPAN",{});var Int=s(ame);djo=r(Int,"AutoModelForVision2Seq"),Int.forEach(t),TPe.forEach(t),gRe=i(c),ir=n(c,"DIV",{class:!0});var _l=s(ir);f(C6.$$.fragment,_l),cjo=i(_l),Bd=n(_l,"P",{});var uU=s(Bd);mjo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BD=n(uU,"A",{href:!0});var qnt=s(BD);fjo=r(qnt,"from_pretrained()"),qnt.forEach(t),gjo=r(uU," class method or the "),PD=n(uU,"A",{href:!0});var Nnt=s(PD);hjo=r(Nnt,"from_config()"),Nnt.forEach(t),ujo=r(uU,` class
method.`),uU.forEach(t),pjo=i(_l),w6=n(_l,"P",{});var MPe=s(w6);_jo=r(MPe,"This class cannot be instantiated directly using "),nme=n(MPe,"CODE",{});var jnt=s(nme);bjo=r(jnt,"__init__()"),jnt.forEach(t),Fjo=r(MPe," (throws an error)."),MPe.forEach(t),vjo=i(_l),rt=n(_l,"DIV",{class:!0});var bl=s(rt);f(A6.$$.fragment,bl),Tjo=i(bl),sme=n(bl,"P",{});var Dnt=s(sme);Mjo=r(Dnt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dnt.forEach(t),Ejo=i(bl),Pd=n(bl,"P",{});var pU=s(Pd);Cjo=r(pU,`Note:
Loading a model from its configuration file does `),lme=n(pU,"STRONG",{});var Gnt=s(lme);wjo=r(Gnt,"not"),Gnt.forEach(t),Ajo=r(pU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(pU,"A",{href:!0});var Ont=s($D);yjo=r(Ont,"from_pretrained()"),Ont.forEach(t),Ljo=r(pU," to load the model weights."),pU.forEach(t),xjo=i(bl),ime=n(bl,"P",{});var Vnt=s(ime);kjo=r(Vnt,"Examples:"),Vnt.forEach(t),Sjo=i(bl),f(y6.$$.fragment,bl),bl.forEach(t),Rjo=i(_l),Ue=n(_l,"DIV",{class:!0});var Kt=s(Ue);f(L6.$$.fragment,Kt),Bjo=i(Kt),dme=n(Kt,"P",{});var Xnt=s(dme);Pjo=r(Xnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xnt.forEach(t),$jo=i(Kt),rn=n(Kt,"P",{});var x3=s(rn);Ijo=r(x3,"The model class to instantiate is selected based on the "),cme=n(x3,"CODE",{});var znt=s(cme);qjo=r(znt,"model_type"),znt.forEach(t),Njo=r(x3,` property of the config object (either
passed as an argument or loaded from `),mme=n(x3,"CODE",{});var Qnt=s(mme);jjo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),Djo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=n(x3,"CODE",{});var Wnt=s(fme);Gjo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),Ojo=r(x3,":"),x3.forEach(t),Vjo=i(Kt),gme=n(Kt,"UL",{});var Hnt=s(gme);uT=n(Hnt,"LI",{});var mLe=s(uT);hme=n(mLe,"STRONG",{});var Unt=s(hme);Xjo=r(Unt,"vision-encoder-decoder"),Unt.forEach(t),zjo=r(mLe," \u2014 "),ID=n(mLe,"A",{href:!0});var Jnt=s(ID);Qjo=r(Jnt,"VisionEncoderDecoderModel"),Jnt.forEach(t),Wjo=r(mLe," (Vision Encoder decoder model)"),mLe.forEach(t),Hnt.forEach(t),Hjo=i(Kt),pT=n(Kt,"P",{});var fLe=s(pT);Ujo=r(fLe,"The model is set in evaluation mode by default using "),ume=n(fLe,"CODE",{});var Ynt=s(ume);Jjo=r(Ynt,"model.eval()"),Ynt.forEach(t),Yjo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(fLe,"CODE",{});var Knt=s(pme);Kjo=r(Knt,"model.train()"),Knt.forEach(t),fLe.forEach(t),Zjo=i(Kt),_me=n(Kt,"P",{});var Znt=s(_me);eDo=r(Znt,"Examples:"),Znt.forEach(t),oDo=i(Kt),f(x6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),hRe=i(c),$d=n(c,"H2",{class:!0});var EPe=s($d);_T=n(EPe,"A",{id:!0,class:!0,href:!0});var est=s(_T);bme=n(est,"SPAN",{});var ost=s(bme);f(k6.$$.fragment,ost),ost.forEach(t),est.forEach(t),rDo=i(EPe),Fme=n(EPe,"SPAN",{});var rst=s(Fme);tDo=r(rst,"AutoModelForAudioClassification"),rst.forEach(t),EPe.forEach(t),uRe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);f(S6.$$.fragment,Fl),aDo=i(Fl),Id=n(Fl,"P",{});var _U=s(Id);nDo=r(_U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qD=n(_U,"A",{href:!0});var tst=s(qD);sDo=r(tst,"from_pretrained()"),tst.forEach(t),lDo=r(_U," class method or the "),ND=n(_U,"A",{href:!0});var ast=s(ND);iDo=r(ast,"from_config()"),ast.forEach(t),dDo=r(_U,` class
method.`),_U.forEach(t),cDo=i(Fl),R6=n(Fl,"P",{});var CPe=s(R6);mDo=r(CPe,"This class cannot be instantiated directly using "),vme=n(CPe,"CODE",{});var nst=s(vme);fDo=r(nst,"__init__()"),nst.forEach(t),gDo=r(CPe," (throws an error)."),CPe.forEach(t),hDo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);f(B6.$$.fragment,vl),uDo=i(vl),Tme=n(vl,"P",{});var sst=s(Tme);pDo=r(sst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sst.forEach(t),_Do=i(vl),qd=n(vl,"P",{});var bU=s(qd);bDo=r(bU,`Note:
Loading a model from its configuration file does `),Mme=n(bU,"STRONG",{});var lst=s(Mme);FDo=r(lst,"not"),lst.forEach(t),vDo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(bU,"A",{href:!0});var ist=s(jD);TDo=r(ist,"from_pretrained()"),ist.forEach(t),MDo=r(bU," to load the model weights."),bU.forEach(t),EDo=i(vl),Eme=n(vl,"P",{});var dst=s(Eme);CDo=r(dst,"Examples:"),dst.forEach(t),wDo=i(vl),f(P6.$$.fragment,vl),vl.forEach(t),ADo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);f($6.$$.fragment,Zt),yDo=i(Zt),Cme=n(Zt,"P",{});var cst=s(Cme);LDo=r(cst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cst.forEach(t),xDo=i(Zt),tn=n(Zt,"P",{});var k3=s(tn);kDo=r(k3,"The model class to instantiate is selected based on the "),wme=n(k3,"CODE",{});var mst=s(wme);SDo=r(mst,"model_type"),mst.forEach(t),RDo=r(k3,` property of the config object (either
passed as an argument or loaded from `),Ame=n(k3,"CODE",{});var fst=s(Ame);BDo=r(fst,"pretrained_model_name_or_path"),fst.forEach(t),PDo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(k3,"CODE",{});var gst=s(yme);$Do=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),IDo=r(k3,":"),k3.forEach(t),qDo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);bT=n(Do,"LI",{});var gLe=s(bT);Lme=n(gLe,"STRONG",{});var hst=s(Lme);NDo=r(hst,"data2vec-audio"),hst.forEach(t),jDo=r(gLe," \u2014 "),DD=n(gLe,"A",{href:!0});var ust=s(DD);DDo=r(ust,"Data2VecAudioForSequenceClassification"),ust.forEach(t),GDo=r(gLe," (Data2VecAudio model)"),gLe.forEach(t),ODo=i(Do),FT=n(Do,"LI",{});var hLe=s(FT);xme=n(hLe,"STRONG",{});var pst=s(xme);VDo=r(pst,"hubert"),pst.forEach(t),XDo=r(hLe," \u2014 "),GD=n(hLe,"A",{href:!0});var _st=s(GD);zDo=r(_st,"HubertForSequenceClassification"),_st.forEach(t),QDo=r(hLe," (Hubert model)"),hLe.forEach(t),WDo=i(Do),vT=n(Do,"LI",{});var uLe=s(vT);kme=n(uLe,"STRONG",{});var bst=s(kme);HDo=r(bst,"sew"),bst.forEach(t),UDo=r(uLe," \u2014 "),OD=n(uLe,"A",{href:!0});var Fst=s(OD);JDo=r(Fst,"SEWForSequenceClassification"),Fst.forEach(t),YDo=r(uLe," (SEW model)"),uLe.forEach(t),KDo=i(Do),TT=n(Do,"LI",{});var pLe=s(TT);Sme=n(pLe,"STRONG",{});var vst=s(Sme);ZDo=r(vst,"sew-d"),vst.forEach(t),eGo=r(pLe," \u2014 "),VD=n(pLe,"A",{href:!0});var Tst=s(VD);oGo=r(Tst,"SEWDForSequenceClassification"),Tst.forEach(t),rGo=r(pLe," (SEW-D model)"),pLe.forEach(t),tGo=i(Do),MT=n(Do,"LI",{});var _Le=s(MT);Rme=n(_Le,"STRONG",{});var Mst=s(Rme);aGo=r(Mst,"unispeech"),Mst.forEach(t),nGo=r(_Le," \u2014 "),XD=n(_Le,"A",{href:!0});var Est=s(XD);sGo=r(Est,"UniSpeechForSequenceClassification"),Est.forEach(t),lGo=r(_Le," (UniSpeech model)"),_Le.forEach(t),iGo=i(Do),ET=n(Do,"LI",{});var bLe=s(ET);Bme=n(bLe,"STRONG",{});var Cst=s(Bme);dGo=r(Cst,"unispeech-sat"),Cst.forEach(t),cGo=r(bLe," \u2014 "),zD=n(bLe,"A",{href:!0});var wst=s(zD);mGo=r(wst,"UniSpeechSatForSequenceClassification"),wst.forEach(t),fGo=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),gGo=i(Do),CT=n(Do,"LI",{});var FLe=s(CT);Pme=n(FLe,"STRONG",{});var Ast=s(Pme);hGo=r(Ast,"wav2vec2"),Ast.forEach(t),uGo=r(FLe," \u2014 "),QD=n(FLe,"A",{href:!0});var yst=s(QD);pGo=r(yst,"Wav2Vec2ForSequenceClassification"),yst.forEach(t),_Go=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),bGo=i(Do),wT=n(Do,"LI",{});var vLe=s(wT);$me=n(vLe,"STRONG",{});var Lst=s($me);FGo=r(Lst,"wavlm"),Lst.forEach(t),vGo=r(vLe," \u2014 "),WD=n(vLe,"A",{href:!0});var xst=s(WD);TGo=r(xst,"WavLMForSequenceClassification"),xst.forEach(t),MGo=r(vLe," (WavLM model)"),vLe.forEach(t),Do.forEach(t),EGo=i(Zt),AT=n(Zt,"P",{});var TLe=s(AT);CGo=r(TLe,"The model is set in evaluation mode by default using "),Ime=n(TLe,"CODE",{});var kst=s(Ime);wGo=r(kst,"model.eval()"),kst.forEach(t),AGo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=n(TLe,"CODE",{});var Sst=s(qme);yGo=r(Sst,"model.train()"),Sst.forEach(t),TLe.forEach(t),LGo=i(Zt),Nme=n(Zt,"P",{});var Rst=s(Nme);xGo=r(Rst,"Examples:"),Rst.forEach(t),kGo=i(Zt),f(I6.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),pRe=i(c),Nd=n(c,"H2",{class:!0});var wPe=s(Nd);yT=n(wPe,"A",{id:!0,class:!0,href:!0});var Bst=s(yT);jme=n(Bst,"SPAN",{});var Pst=s(jme);f(q6.$$.fragment,Pst),Pst.forEach(t),Bst.forEach(t),SGo=i(wPe),Dme=n(wPe,"SPAN",{});var $st=s(Dme);RGo=r($st,"AutoModelForAudioFrameClassification"),$st.forEach(t),wPe.forEach(t),_Re=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);f(N6.$$.fragment,Tl),BGo=i(Tl),jd=n(Tl,"P",{});var FU=s(jd);PGo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HD=n(FU,"A",{href:!0});var Ist=s(HD);$Go=r(Ist,"from_pretrained()"),Ist.forEach(t),IGo=r(FU," class method or the "),UD=n(FU,"A",{href:!0});var qst=s(UD);qGo=r(qst,"from_config()"),qst.forEach(t),NGo=r(FU,` class
method.`),FU.forEach(t),jGo=i(Tl),j6=n(Tl,"P",{});var APe=s(j6);DGo=r(APe,"This class cannot be instantiated directly using "),Gme=n(APe,"CODE",{});var Nst=s(Gme);GGo=r(Nst,"__init__()"),Nst.forEach(t),OGo=r(APe," (throws an error)."),APe.forEach(t),VGo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);f(D6.$$.fragment,Ml),XGo=i(Ml),Ome=n(Ml,"P",{});var jst=s(Ome);zGo=r(jst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jst.forEach(t),QGo=i(Ml),Dd=n(Ml,"P",{});var vU=s(Dd);WGo=r(vU,`Note:
Loading a model from its configuration file does `),Vme=n(vU,"STRONG",{});var Dst=s(Vme);HGo=r(Dst,"not"),Dst.forEach(t),UGo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=n(vU,"A",{href:!0});var Gst=s(JD);JGo=r(Gst,"from_pretrained()"),Gst.forEach(t),YGo=r(vU," to load the model weights."),vU.forEach(t),KGo=i(Ml),Xme=n(Ml,"P",{});var Ost=s(Xme);ZGo=r(Ost,"Examples:"),Ost.forEach(t),eOo=i(Ml),f(G6.$$.fragment,Ml),Ml.forEach(t),oOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);f(O6.$$.fragment,ea),rOo=i(ea),zme=n(ea,"P",{});var Vst=s(zme);tOo=r(Vst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Vst.forEach(t),aOo=i(ea),an=n(ea,"P",{});var S3=s(an);nOo=r(S3,"The model class to instantiate is selected based on the "),Qme=n(S3,"CODE",{});var Xst=s(Qme);sOo=r(Xst,"model_type"),Xst.forEach(t),lOo=r(S3,` property of the config object (either
passed as an argument or loaded from `),Wme=n(S3,"CODE",{});var zst=s(Wme);iOo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),dOo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(S3,"CODE",{});var Qst=s(Hme);cOo=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),mOo=r(S3,":"),S3.forEach(t),fOo=i(ea),nn=n(ea,"UL",{});var R3=s(nn);LT=n(R3,"LI",{});var MLe=s(LT);Ume=n(MLe,"STRONG",{});var Wst=s(Ume);gOo=r(Wst,"data2vec-audio"),Wst.forEach(t),hOo=r(MLe," \u2014 "),YD=n(MLe,"A",{href:!0});var Hst=s(YD);uOo=r(Hst,"Data2VecAudioForAudioFrameClassification"),Hst.forEach(t),pOo=r(MLe," (Data2VecAudio model)"),MLe.forEach(t),_Oo=i(R3),xT=n(R3,"LI",{});var ELe=s(xT);Jme=n(ELe,"STRONG",{});var Ust=s(Jme);bOo=r(Ust,"unispeech-sat"),Ust.forEach(t),FOo=r(ELe," \u2014 "),KD=n(ELe,"A",{href:!0});var Jst=s(KD);vOo=r(Jst,"UniSpeechSatForAudioFrameClassification"),Jst.forEach(t),TOo=r(ELe," (UniSpeechSat model)"),ELe.forEach(t),MOo=i(R3),kT=n(R3,"LI",{});var CLe=s(kT);Yme=n(CLe,"STRONG",{});var Yst=s(Yme);EOo=r(Yst,"wav2vec2"),Yst.forEach(t),COo=r(CLe," \u2014 "),ZD=n(CLe,"A",{href:!0});var Kst=s(ZD);wOo=r(Kst,"Wav2Vec2ForAudioFrameClassification"),Kst.forEach(t),AOo=r(CLe," (Wav2Vec2 model)"),CLe.forEach(t),yOo=i(R3),ST=n(R3,"LI",{});var wLe=s(ST);Kme=n(wLe,"STRONG",{});var Zst=s(Kme);LOo=r(Zst,"wavlm"),Zst.forEach(t),xOo=r(wLe," \u2014 "),eG=n(wLe,"A",{href:!0});var elt=s(eG);kOo=r(elt,"WavLMForAudioFrameClassification"),elt.forEach(t),SOo=r(wLe," (WavLM model)"),wLe.forEach(t),R3.forEach(t),ROo=i(ea),RT=n(ea,"P",{});var ALe=s(RT);BOo=r(ALe,"The model is set in evaluation mode by default using "),Zme=n(ALe,"CODE",{});var olt=s(Zme);POo=r(olt,"model.eval()"),olt.forEach(t),$Oo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(ALe,"CODE",{});var rlt=s(efe);IOo=r(rlt,"model.train()"),rlt.forEach(t),ALe.forEach(t),qOo=i(ea),ofe=n(ea,"P",{});var tlt=s(ofe);NOo=r(tlt,"Examples:"),tlt.forEach(t),jOo=i(ea),f(V6.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),bRe=i(c),Gd=n(c,"H2",{class:!0});var yPe=s(Gd);BT=n(yPe,"A",{id:!0,class:!0,href:!0});var alt=s(BT);rfe=n(alt,"SPAN",{});var nlt=s(rfe);f(X6.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),DOo=i(yPe),tfe=n(yPe,"SPAN",{});var slt=s(tfe);GOo=r(slt,"AutoModelForCTC"),slt.forEach(t),yPe.forEach(t),FRe=i(c),mr=n(c,"DIV",{class:!0});var El=s(mr);f(z6.$$.fragment,El),OOo=i(El),Od=n(El,"P",{});var TU=s(Od);VOo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oG=n(TU,"A",{href:!0});var llt=s(oG);XOo=r(llt,"from_pretrained()"),llt.forEach(t),zOo=r(TU," class method or the "),rG=n(TU,"A",{href:!0});var ilt=s(rG);QOo=r(ilt,"from_config()"),ilt.forEach(t),WOo=r(TU,` class
method.`),TU.forEach(t),HOo=i(El),Q6=n(El,"P",{});var LPe=s(Q6);UOo=r(LPe,"This class cannot be instantiated directly using "),afe=n(LPe,"CODE",{});var dlt=s(afe);JOo=r(dlt,"__init__()"),dlt.forEach(t),YOo=r(LPe," (throws an error)."),LPe.forEach(t),KOo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);f(W6.$$.fragment,Cl),ZOo=i(Cl),nfe=n(Cl,"P",{});var clt=s(nfe);eVo=r(clt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),clt.forEach(t),oVo=i(Cl),Vd=n(Cl,"P",{});var MU=s(Vd);rVo=r(MU,`Note:
Loading a model from its configuration file does `),sfe=n(MU,"STRONG",{});var mlt=s(sfe);tVo=r(mlt,"not"),mlt.forEach(t),aVo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(MU,"A",{href:!0});var flt=s(tG);nVo=r(flt,"from_pretrained()"),flt.forEach(t),sVo=r(MU," to load the model weights."),MU.forEach(t),lVo=i(Cl),lfe=n(Cl,"P",{});var glt=s(lfe);iVo=r(glt,"Examples:"),glt.forEach(t),dVo=i(Cl),f(H6.$$.fragment,Cl),Cl.forEach(t),cVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);f(U6.$$.fragment,oa),mVo=i(oa),ife=n(oa,"P",{});var hlt=s(ife);fVo=r(hlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hlt.forEach(t),gVo=i(oa),sn=n(oa,"P",{});var B3=s(sn);hVo=r(B3,"The model class to instantiate is selected based on the "),dfe=n(B3,"CODE",{});var ult=s(dfe);uVo=r(ult,"model_type"),ult.forEach(t),pVo=r(B3,` property of the config object (either
passed as an argument or loaded from `),cfe=n(B3,"CODE",{});var plt=s(cfe);_Vo=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),bVo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(B3,"CODE",{});var _lt=s(mfe);FVo=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),vVo=r(B3,":"),B3.forEach(t),TVo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);PT=n(Go,"LI",{});var yLe=s(PT);ffe=n(yLe,"STRONG",{});var blt=s(ffe);MVo=r(blt,"data2vec-audio"),blt.forEach(t),EVo=r(yLe," \u2014 "),aG=n(yLe,"A",{href:!0});var Flt=s(aG);CVo=r(Flt,"Data2VecAudioForCTC"),Flt.forEach(t),wVo=r(yLe," (Data2VecAudio model)"),yLe.forEach(t),AVo=i(Go),$T=n(Go,"LI",{});var LLe=s($T);gfe=n(LLe,"STRONG",{});var vlt=s(gfe);yVo=r(vlt,"hubert"),vlt.forEach(t),LVo=r(LLe," \u2014 "),nG=n(LLe,"A",{href:!0});var Tlt=s(nG);xVo=r(Tlt,"HubertForCTC"),Tlt.forEach(t),kVo=r(LLe," (Hubert model)"),LLe.forEach(t),SVo=i(Go),IT=n(Go,"LI",{});var xLe=s(IT);hfe=n(xLe,"STRONG",{});var Mlt=s(hfe);RVo=r(Mlt,"sew"),Mlt.forEach(t),BVo=r(xLe," \u2014 "),sG=n(xLe,"A",{href:!0});var Elt=s(sG);PVo=r(Elt,"SEWForCTC"),Elt.forEach(t),$Vo=r(xLe," (SEW model)"),xLe.forEach(t),IVo=i(Go),qT=n(Go,"LI",{});var kLe=s(qT);ufe=n(kLe,"STRONG",{});var Clt=s(ufe);qVo=r(Clt,"sew-d"),Clt.forEach(t),NVo=r(kLe," \u2014 "),lG=n(kLe,"A",{href:!0});var wlt=s(lG);jVo=r(wlt,"SEWDForCTC"),wlt.forEach(t),DVo=r(kLe," (SEW-D model)"),kLe.forEach(t),GVo=i(Go),NT=n(Go,"LI",{});var SLe=s(NT);pfe=n(SLe,"STRONG",{});var Alt=s(pfe);OVo=r(Alt,"unispeech"),Alt.forEach(t),VVo=r(SLe," \u2014 "),iG=n(SLe,"A",{href:!0});var ylt=s(iG);XVo=r(ylt,"UniSpeechForCTC"),ylt.forEach(t),zVo=r(SLe," (UniSpeech model)"),SLe.forEach(t),QVo=i(Go),jT=n(Go,"LI",{});var RLe=s(jT);_fe=n(RLe,"STRONG",{});var Llt=s(_fe);WVo=r(Llt,"unispeech-sat"),Llt.forEach(t),HVo=r(RLe," \u2014 "),dG=n(RLe,"A",{href:!0});var xlt=s(dG);UVo=r(xlt,"UniSpeechSatForCTC"),xlt.forEach(t),JVo=r(RLe," (UniSpeechSat model)"),RLe.forEach(t),YVo=i(Go),DT=n(Go,"LI",{});var BLe=s(DT);bfe=n(BLe,"STRONG",{});var klt=s(bfe);KVo=r(klt,"wav2vec2"),klt.forEach(t),ZVo=r(BLe," \u2014 "),cG=n(BLe,"A",{href:!0});var Slt=s(cG);eXo=r(Slt,"Wav2Vec2ForCTC"),Slt.forEach(t),oXo=r(BLe," (Wav2Vec2 model)"),BLe.forEach(t),rXo=i(Go),GT=n(Go,"LI",{});var PLe=s(GT);Ffe=n(PLe,"STRONG",{});var Rlt=s(Ffe);tXo=r(Rlt,"wavlm"),Rlt.forEach(t),aXo=r(PLe," \u2014 "),mG=n(PLe,"A",{href:!0});var Blt=s(mG);nXo=r(Blt,"WavLMForCTC"),Blt.forEach(t),sXo=r(PLe," (WavLM model)"),PLe.forEach(t),Go.forEach(t),lXo=i(oa),OT=n(oa,"P",{});var $Le=s(OT);iXo=r($Le,"The model is set in evaluation mode by default using "),vfe=n($Le,"CODE",{});var Plt=s(vfe);dXo=r(Plt,"model.eval()"),Plt.forEach(t),cXo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=n($Le,"CODE",{});var $lt=s(Tfe);mXo=r($lt,"model.train()"),$lt.forEach(t),$Le.forEach(t),fXo=i(oa),Mfe=n(oa,"P",{});var Ilt=s(Mfe);gXo=r(Ilt,"Examples:"),Ilt.forEach(t),hXo=i(oa),f(J6.$$.fragment,oa),oa.forEach(t),El.forEach(t),vRe=i(c),Xd=n(c,"H2",{class:!0});var xPe=s(Xd);VT=n(xPe,"A",{id:!0,class:!0,href:!0});var qlt=s(VT);Efe=n(qlt,"SPAN",{});var Nlt=s(Efe);f(Y6.$$.fragment,Nlt),Nlt.forEach(t),qlt.forEach(t),uXo=i(xPe),Cfe=n(xPe,"SPAN",{});var jlt=s(Cfe);pXo=r(jlt,"AutoModelForSpeechSeq2Seq"),jlt.forEach(t),xPe.forEach(t),TRe=i(c),fr=n(c,"DIV",{class:!0});var wl=s(fr);f(K6.$$.fragment,wl),_Xo=i(wl),zd=n(wl,"P",{});var EU=s(zd);bXo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fG=n(EU,"A",{href:!0});var Dlt=s(fG);FXo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),vXo=r(EU," class method or the "),gG=n(EU,"A",{href:!0});var Glt=s(gG);TXo=r(Glt,"from_config()"),Glt.forEach(t),MXo=r(EU,` class
method.`),EU.forEach(t),EXo=i(wl),Z6=n(wl,"P",{});var kPe=s(Z6);CXo=r(kPe,"This class cannot be instantiated directly using "),wfe=n(kPe,"CODE",{});var Olt=s(wfe);wXo=r(Olt,"__init__()"),Olt.forEach(t),AXo=r(kPe," (throws an error)."),kPe.forEach(t),yXo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);f(e0.$$.fragment,Al),LXo=i(Al),Afe=n(Al,"P",{});var Vlt=s(Afe);xXo=r(Vlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Vlt.forEach(t),kXo=i(Al),Qd=n(Al,"P",{});var CU=s(Qd);SXo=r(CU,`Note:
Loading a model from its configuration file does `),yfe=n(CU,"STRONG",{});var Xlt=s(yfe);RXo=r(Xlt,"not"),Xlt.forEach(t),BXo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(CU,"A",{href:!0});var zlt=s(hG);PXo=r(zlt,"from_pretrained()"),zlt.forEach(t),$Xo=r(CU," to load the model weights."),CU.forEach(t),IXo=i(Al),Lfe=n(Al,"P",{});var Qlt=s(Lfe);qXo=r(Qlt,"Examples:"),Qlt.forEach(t),NXo=i(Al),f(o0.$$.fragment,Al),Al.forEach(t),jXo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);f(r0.$$.fragment,ra),DXo=i(ra),xfe=n(ra,"P",{});var Wlt=s(xfe);GXo=r(Wlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wlt.forEach(t),OXo=i(ra),ln=n(ra,"P",{});var P3=s(ln);VXo=r(P3,"The model class to instantiate is selected based on the "),kfe=n(P3,"CODE",{});var Hlt=s(kfe);XXo=r(Hlt,"model_type"),Hlt.forEach(t),zXo=r(P3,` property of the config object (either
passed as an argument or loaded from `),Sfe=n(P3,"CODE",{});var Ult=s(Sfe);QXo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),WXo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=n(P3,"CODE",{});var Jlt=s(Rfe);HXo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),UXo=r(P3,":"),P3.forEach(t),JXo=i(ra),t0=n(ra,"UL",{});var SPe=s(t0);XT=n(SPe,"LI",{});var ILe=s(XT);Bfe=n(ILe,"STRONG",{});var Ylt=s(Bfe);YXo=r(Ylt,"speech-encoder-decoder"),Ylt.forEach(t),KXo=r(ILe," \u2014 "),uG=n(ILe,"A",{href:!0});var Klt=s(uG);ZXo=r(Klt,"SpeechEncoderDecoderModel"),Klt.forEach(t),ezo=r(ILe," (Speech Encoder decoder model)"),ILe.forEach(t),ozo=i(SPe),zT=n(SPe,"LI",{});var qLe=s(zT);Pfe=n(qLe,"STRONG",{});var Zlt=s(Pfe);rzo=r(Zlt,"speech_to_text"),Zlt.forEach(t),tzo=r(qLe," \u2014 "),pG=n(qLe,"A",{href:!0});var eit=s(pG);azo=r(eit,"Speech2TextForConditionalGeneration"),eit.forEach(t),nzo=r(qLe," (Speech2Text model)"),qLe.forEach(t),SPe.forEach(t),szo=i(ra),QT=n(ra,"P",{});var NLe=s(QT);lzo=r(NLe,"The model is set in evaluation mode by default using "),$fe=n(NLe,"CODE",{});var oit=s($fe);izo=r(oit,"model.eval()"),oit.forEach(t),dzo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(NLe,"CODE",{});var rit=s(Ife);czo=r(rit,"model.train()"),rit.forEach(t),NLe.forEach(t),mzo=i(ra),qfe=n(ra,"P",{});var tit=s(qfe);fzo=r(tit,"Examples:"),tit.forEach(t),gzo=i(ra),f(a0.$$.fragment,ra),ra.forEach(t),wl.forEach(t),MRe=i(c),Wd=n(c,"H2",{class:!0});var RPe=s(Wd);WT=n(RPe,"A",{id:!0,class:!0,href:!0});var ait=s(WT);Nfe=n(ait,"SPAN",{});var nit=s(Nfe);f(n0.$$.fragment,nit),nit.forEach(t),ait.forEach(t),hzo=i(RPe),jfe=n(RPe,"SPAN",{});var sit=s(jfe);uzo=r(sit,"AutoModelForAudioXVector"),sit.forEach(t),RPe.forEach(t),ERe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);f(s0.$$.fragment,yl),pzo=i(yl),Hd=n(yl,"P",{});var wU=s(Hd);_zo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_G=n(wU,"A",{href:!0});var lit=s(_G);bzo=r(lit,"from_pretrained()"),lit.forEach(t),Fzo=r(wU," class method or the "),bG=n(wU,"A",{href:!0});var iit=s(bG);vzo=r(iit,"from_config()"),iit.forEach(t),Tzo=r(wU,` class
method.`),wU.forEach(t),Mzo=i(yl),l0=n(yl,"P",{});var BPe=s(l0);Ezo=r(BPe,"This class cannot be instantiated directly using "),Dfe=n(BPe,"CODE",{});var dit=s(Dfe);Czo=r(dit,"__init__()"),dit.forEach(t),wzo=r(BPe," (throws an error)."),BPe.forEach(t),Azo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);f(i0.$$.fragment,Ll),yzo=i(Ll),Gfe=n(Ll,"P",{});var cit=s(Gfe);Lzo=r(cit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cit.forEach(t),xzo=i(Ll),Ud=n(Ll,"P",{});var AU=s(Ud);kzo=r(AU,`Note:
Loading a model from its configuration file does `),Ofe=n(AU,"STRONG",{});var mit=s(Ofe);Szo=r(mit,"not"),mit.forEach(t),Rzo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(AU,"A",{href:!0});var fit=s(FG);Bzo=r(fit,"from_pretrained()"),fit.forEach(t),Pzo=r(AU," to load the model weights."),AU.forEach(t),$zo=i(Ll),Vfe=n(Ll,"P",{});var git=s(Vfe);Izo=r(git,"Examples:"),git.forEach(t),qzo=i(Ll),f(d0.$$.fragment,Ll),Ll.forEach(t),Nzo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);f(c0.$$.fragment,ta),jzo=i(ta),Xfe=n(ta,"P",{});var hit=s(Xfe);Dzo=r(hit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hit.forEach(t),Gzo=i(ta),dn=n(ta,"P",{});var $3=s(dn);Ozo=r($3,"The model class to instantiate is selected based on the "),zfe=n($3,"CODE",{});var uit=s(zfe);Vzo=r(uit,"model_type"),uit.forEach(t),Xzo=r($3,` property of the config object (either
passed as an argument or loaded from `),Qfe=n($3,"CODE",{});var pit=s(Qfe);zzo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),Qzo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wfe=n($3,"CODE",{});var _it=s(Wfe);Wzo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),Hzo=r($3,":"),$3.forEach(t),Uzo=i(ta),cn=n(ta,"UL",{});var I3=s(cn);HT=n(I3,"LI",{});var jLe=s(HT);Hfe=n(jLe,"STRONG",{});var bit=s(Hfe);Jzo=r(bit,"data2vec-audio"),bit.forEach(t),Yzo=r(jLe," \u2014 "),vG=n(jLe,"A",{href:!0});var Fit=s(vG);Kzo=r(Fit,"Data2VecAudioForXVector"),Fit.forEach(t),Zzo=r(jLe," (Data2VecAudio model)"),jLe.forEach(t),eQo=i(I3),UT=n(I3,"LI",{});var DLe=s(UT);Ufe=n(DLe,"STRONG",{});var vit=s(Ufe);oQo=r(vit,"unispeech-sat"),vit.forEach(t),rQo=r(DLe," \u2014 "),TG=n(DLe,"A",{href:!0});var Tit=s(TG);tQo=r(Tit,"UniSpeechSatForXVector"),Tit.forEach(t),aQo=r(DLe," (UniSpeechSat model)"),DLe.forEach(t),nQo=i(I3),JT=n(I3,"LI",{});var GLe=s(JT);Jfe=n(GLe,"STRONG",{});var Mit=s(Jfe);sQo=r(Mit,"wav2vec2"),Mit.forEach(t),lQo=r(GLe," \u2014 "),MG=n(GLe,"A",{href:!0});var Eit=s(MG);iQo=r(Eit,"Wav2Vec2ForXVector"),Eit.forEach(t),dQo=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),cQo=i(I3),YT=n(I3,"LI",{});var OLe=s(YT);Yfe=n(OLe,"STRONG",{});var Cit=s(Yfe);mQo=r(Cit,"wavlm"),Cit.forEach(t),fQo=r(OLe," \u2014 "),EG=n(OLe,"A",{href:!0});var wit=s(EG);gQo=r(wit,"WavLMForXVector"),wit.forEach(t),hQo=r(OLe," (WavLM model)"),OLe.forEach(t),I3.forEach(t),uQo=i(ta),KT=n(ta,"P",{});var VLe=s(KT);pQo=r(VLe,"The model is set in evaluation mode by default using "),Kfe=n(VLe,"CODE",{});var Ait=s(Kfe);_Qo=r(Ait,"model.eval()"),Ait.forEach(t),bQo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(VLe,"CODE",{});var yit=s(Zfe);FQo=r(yit,"model.train()"),yit.forEach(t),VLe.forEach(t),vQo=i(ta),ege=n(ta,"P",{});var Lit=s(ege);TQo=r(Lit,"Examples:"),Lit.forEach(t),MQo=i(ta),f(m0.$$.fragment,ta),ta.forEach(t),yl.forEach(t),CRe=i(c),Jd=n(c,"H2",{class:!0});var PPe=s(Jd);ZT=n(PPe,"A",{id:!0,class:!0,href:!0});var xit=s(ZT);oge=n(xit,"SPAN",{});var kit=s(oge);f(f0.$$.fragment,kit),kit.forEach(t),xit.forEach(t),EQo=i(PPe),rge=n(PPe,"SPAN",{});var Sit=s(rge);CQo=r(Sit,"AutoModelForMaskedImageModeling"),Sit.forEach(t),PPe.forEach(t),wRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);f(g0.$$.fragment,xl),wQo=i(xl),Yd=n(xl,"P",{});var yU=s(Yd);AQo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),CG=n(yU,"A",{href:!0});var Rit=s(CG);yQo=r(Rit,"from_pretrained()"),Rit.forEach(t),LQo=r(yU," class method or the "),wG=n(yU,"A",{href:!0});var Bit=s(wG);xQo=r(Bit,"from_config()"),Bit.forEach(t),kQo=r(yU,` class
method.`),yU.forEach(t),SQo=i(xl),h0=n(xl,"P",{});var $Pe=s(h0);RQo=r($Pe,"This class cannot be instantiated directly using "),tge=n($Pe,"CODE",{});var Pit=s(tge);BQo=r(Pit,"__init__()"),Pit.forEach(t),PQo=r($Pe," (throws an error)."),$Pe.forEach(t),$Qo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);f(u0.$$.fragment,kl),IQo=i(kl),age=n(kl,"P",{});var $it=s(age);qQo=r($it,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$it.forEach(t),NQo=i(kl),Kd=n(kl,"P",{});var LU=s(Kd);jQo=r(LU,`Note:
Loading a model from its configuration file does `),nge=n(LU,"STRONG",{});var Iit=s(nge);DQo=r(Iit,"not"),Iit.forEach(t),GQo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(LU,"A",{href:!0});var qit=s(AG);OQo=r(qit,"from_pretrained()"),qit.forEach(t),VQo=r(LU," to load the model weights."),LU.forEach(t),XQo=i(kl),sge=n(kl,"P",{});var Nit=s(sge);zQo=r(Nit,"Examples:"),Nit.forEach(t),QQo=i(kl),f(p0.$$.fragment,kl),kl.forEach(t),WQo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);f(_0.$$.fragment,aa),HQo=i(aa),lge=n(aa,"P",{});var jit=s(lge);UQo=r(jit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jit.forEach(t),JQo=i(aa),mn=n(aa,"P",{});var q3=s(mn);YQo=r(q3,"The model class to instantiate is selected based on the "),ige=n(q3,"CODE",{});var Dit=s(ige);KQo=r(Dit,"model_type"),Dit.forEach(t),ZQo=r(q3,` property of the config object (either
passed as an argument or loaded from `),dge=n(q3,"CODE",{});var Git=s(dge);eWo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),oWo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(q3,"CODE",{});var Oit=s(cge);rWo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),tWo=r(q3,":"),q3.forEach(t),aWo=i(aa),Zd=n(aa,"UL",{});var xU=s(Zd);e1=n(xU,"LI",{});var XLe=s(e1);mge=n(XLe,"STRONG",{});var Vit=s(mge);nWo=r(Vit,"deit"),Vit.forEach(t),sWo=r(XLe," \u2014 "),yG=n(XLe,"A",{href:!0});var Xit=s(yG);lWo=r(Xit,"DeiTForMaskedImageModeling"),Xit.forEach(t),iWo=r(XLe," (DeiT model)"),XLe.forEach(t),dWo=i(xU),o1=n(xU,"LI",{});var zLe=s(o1);fge=n(zLe,"STRONG",{});var zit=s(fge);cWo=r(zit,"swin"),zit.forEach(t),mWo=r(zLe," \u2014 "),LG=n(zLe,"A",{href:!0});var Qit=s(LG);fWo=r(Qit,"SwinForMaskedImageModeling"),Qit.forEach(t),gWo=r(zLe," (Swin model)"),zLe.forEach(t),hWo=i(xU),r1=n(xU,"LI",{});var QLe=s(r1);gge=n(QLe,"STRONG",{});var Wit=s(gge);uWo=r(Wit,"vit"),Wit.forEach(t),pWo=r(QLe," \u2014 "),xG=n(QLe,"A",{href:!0});var Hit=s(xG);_Wo=r(Hit,"ViTForMaskedImageModeling"),Hit.forEach(t),bWo=r(QLe," (ViT model)"),QLe.forEach(t),xU.forEach(t),FWo=i(aa),t1=n(aa,"P",{});var WLe=s(t1);vWo=r(WLe,"The model is set in evaluation mode by default using "),hge=n(WLe,"CODE",{});var Uit=s(hge);TWo=r(Uit,"model.eval()"),Uit.forEach(t),MWo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(WLe,"CODE",{});var Jit=s(uge);EWo=r(Jit,"model.train()"),Jit.forEach(t),WLe.forEach(t),CWo=i(aa),pge=n(aa,"P",{});var Yit=s(pge);wWo=r(Yit,"Examples:"),Yit.forEach(t),AWo=i(aa),f(b0.$$.fragment,aa),aa.forEach(t),xl.forEach(t),ARe=i(c),ec=n(c,"H2",{class:!0});var IPe=s(ec);a1=n(IPe,"A",{id:!0,class:!0,href:!0});var Kit=s(a1);_ge=n(Kit,"SPAN",{});var Zit=s(_ge);f(F0.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),yWo=i(IPe),bge=n(IPe,"SPAN",{});var edt=s(bge);LWo=r(edt,"AutoModelForObjectDetection"),edt.forEach(t),IPe.forEach(t),yRe=i(c),ur=n(c,"DIV",{class:!0});var Sl=s(ur);f(v0.$$.fragment,Sl),xWo=i(Sl),oc=n(Sl,"P",{});var kU=s(oc);kWo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kG=n(kU,"A",{href:!0});var odt=s(kG);SWo=r(odt,"from_pretrained()"),odt.forEach(t),RWo=r(kU," class method or the "),SG=n(kU,"A",{href:!0});var rdt=s(SG);BWo=r(rdt,"from_config()"),rdt.forEach(t),PWo=r(kU,` class
method.`),kU.forEach(t),$Wo=i(Sl),T0=n(Sl,"P",{});var qPe=s(T0);IWo=r(qPe,"This class cannot be instantiated directly using "),Fge=n(qPe,"CODE",{});var tdt=s(Fge);qWo=r(tdt,"__init__()"),tdt.forEach(t),NWo=r(qPe," (throws an error)."),qPe.forEach(t),jWo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);f(M0.$$.fragment,Rl),DWo=i(Rl),vge=n(Rl,"P",{});var adt=s(vge);GWo=r(adt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),adt.forEach(t),OWo=i(Rl),rc=n(Rl,"P",{});var SU=s(rc);VWo=r(SU,`Note:
Loading a model from its configuration file does `),Tge=n(SU,"STRONG",{});var ndt=s(Tge);XWo=r(ndt,"not"),ndt.forEach(t),zWo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=n(SU,"A",{href:!0});var sdt=s(RG);QWo=r(sdt,"from_pretrained()"),sdt.forEach(t),WWo=r(SU," to load the model weights."),SU.forEach(t),HWo=i(Rl),Mge=n(Rl,"P",{});var ldt=s(Mge);UWo=r(ldt,"Examples:"),ldt.forEach(t),JWo=i(Rl),f(E0.$$.fragment,Rl),Rl.forEach(t),YWo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);f(C0.$$.fragment,na),KWo=i(na),Ege=n(na,"P",{});var idt=s(Ege);ZWo=r(idt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),idt.forEach(t),eHo=i(na),fn=n(na,"P",{});var N3=s(fn);oHo=r(N3,"The model class to instantiate is selected based on the "),Cge=n(N3,"CODE",{});var ddt=s(Cge);rHo=r(ddt,"model_type"),ddt.forEach(t),tHo=r(N3,` property of the config object (either
passed as an argument or loaded from `),wge=n(N3,"CODE",{});var cdt=s(wge);aHo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),nHo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(N3,"CODE",{});var mdt=s(Age);sHo=r(mdt,"pretrained_model_name_or_path"),mdt.forEach(t),lHo=r(N3,":"),N3.forEach(t),iHo=i(na),yge=n(na,"UL",{});var fdt=s(yge);n1=n(fdt,"LI",{});var HLe=s(n1);Lge=n(HLe,"STRONG",{});var gdt=s(Lge);dHo=r(gdt,"detr"),gdt.forEach(t),cHo=r(HLe," \u2014 "),BG=n(HLe,"A",{href:!0});var hdt=s(BG);mHo=r(hdt,"DetrForObjectDetection"),hdt.forEach(t),fHo=r(HLe," (DETR model)"),HLe.forEach(t),fdt.forEach(t),gHo=i(na),s1=n(na,"P",{});var ULe=s(s1);hHo=r(ULe,"The model is set in evaluation mode by default using "),xge=n(ULe,"CODE",{});var udt=s(xge);uHo=r(udt,"model.eval()"),udt.forEach(t),pHo=r(ULe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(ULe,"CODE",{});var pdt=s(kge);_Ho=r(pdt,"model.train()"),pdt.forEach(t),ULe.forEach(t),bHo=i(na),Sge=n(na,"P",{});var _dt=s(Sge);FHo=r(_dt,"Examples:"),_dt.forEach(t),vHo=i(na),f(w0.$$.fragment,na),na.forEach(t),Sl.forEach(t),LRe=i(c),tc=n(c,"H2",{class:!0});var NPe=s(tc);l1=n(NPe,"A",{id:!0,class:!0,href:!0});var bdt=s(l1);Rge=n(bdt,"SPAN",{});var Fdt=s(Rge);f(A0.$$.fragment,Fdt),Fdt.forEach(t),bdt.forEach(t),THo=i(NPe),Bge=n(NPe,"SPAN",{});var vdt=s(Bge);MHo=r(vdt,"AutoModelForImageSegmentation"),vdt.forEach(t),NPe.forEach(t),xRe=i(c),pr=n(c,"DIV",{class:!0});var Bl=s(pr);f(y0.$$.fragment,Bl),EHo=i(Bl),ac=n(Bl,"P",{});var RU=s(ac);CHo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),PG=n(RU,"A",{href:!0});var Tdt=s(PG);wHo=r(Tdt,"from_pretrained()"),Tdt.forEach(t),AHo=r(RU," class method or the "),$G=n(RU,"A",{href:!0});var Mdt=s($G);yHo=r(Mdt,"from_config()"),Mdt.forEach(t),LHo=r(RU,` class
method.`),RU.forEach(t),xHo=i(Bl),L0=n(Bl,"P",{});var jPe=s(L0);kHo=r(jPe,"This class cannot be instantiated directly using "),Pge=n(jPe,"CODE",{});var Edt=s(Pge);SHo=r(Edt,"__init__()"),Edt.forEach(t),RHo=r(jPe," (throws an error)."),jPe.forEach(t),BHo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);f(x0.$$.fragment,Pl),PHo=i(Pl),$ge=n(Pl,"P",{});var Cdt=s($ge);$Ho=r(Cdt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cdt.forEach(t),IHo=i(Pl),nc=n(Pl,"P",{});var BU=s(nc);qHo=r(BU,`Note:
Loading a model from its configuration file does `),Ige=n(BU,"STRONG",{});var wdt=s(Ige);NHo=r(wdt,"not"),wdt.forEach(t),jHo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(BU,"A",{href:!0});var Adt=s(IG);DHo=r(Adt,"from_pretrained()"),Adt.forEach(t),GHo=r(BU," to load the model weights."),BU.forEach(t),OHo=i(Pl),qge=n(Pl,"P",{});var ydt=s(qge);VHo=r(ydt,"Examples:"),ydt.forEach(t),XHo=i(Pl),f(k0.$$.fragment,Pl),Pl.forEach(t),zHo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);f(S0.$$.fragment,sa),QHo=i(sa),Nge=n(sa,"P",{});var Ldt=s(Nge);WHo=r(Ldt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ldt.forEach(t),HHo=i(sa),gn=n(sa,"P",{});var j3=s(gn);UHo=r(j3,"The model class to instantiate is selected based on the "),jge=n(j3,"CODE",{});var xdt=s(jge);JHo=r(xdt,"model_type"),xdt.forEach(t),YHo=r(j3,` property of the config object (either
passed as an argument or loaded from `),Dge=n(j3,"CODE",{});var kdt=s(Dge);KHo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),ZHo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(j3,"CODE",{});var Sdt=s(Gge);eUo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),oUo=r(j3,":"),j3.forEach(t),rUo=i(sa),Oge=n(sa,"UL",{});var Rdt=s(Oge);i1=n(Rdt,"LI",{});var JLe=s(i1);Vge=n(JLe,"STRONG",{});var Bdt=s(Vge);tUo=r(Bdt,"detr"),Bdt.forEach(t),aUo=r(JLe," \u2014 "),qG=n(JLe,"A",{href:!0});var Pdt=s(qG);nUo=r(Pdt,"DetrForSegmentation"),Pdt.forEach(t),sUo=r(JLe," (DETR model)"),JLe.forEach(t),Rdt.forEach(t),lUo=i(sa),d1=n(sa,"P",{});var YLe=s(d1);iUo=r(YLe,"The model is set in evaluation mode by default using "),Xge=n(YLe,"CODE",{});var $dt=s(Xge);dUo=r($dt,"model.eval()"),$dt.forEach(t),cUo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(YLe,"CODE",{});var Idt=s(zge);mUo=r(Idt,"model.train()"),Idt.forEach(t),YLe.forEach(t),fUo=i(sa),Qge=n(sa,"P",{});var qdt=s(Qge);gUo=r(qdt,"Examples:"),qdt.forEach(t),hUo=i(sa),f(R0.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),kRe=i(c),sc=n(c,"H2",{class:!0});var DPe=s(sc);c1=n(DPe,"A",{id:!0,class:!0,href:!0});var Ndt=s(c1);Wge=n(Ndt,"SPAN",{});var jdt=s(Wge);f(B0.$$.fragment,jdt),jdt.forEach(t),Ndt.forEach(t),uUo=i(DPe),Hge=n(DPe,"SPAN",{});var Ddt=s(Hge);pUo=r(Ddt,"AutoModelForSemanticSegmentation"),Ddt.forEach(t),DPe.forEach(t),SRe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);f(P0.$$.fragment,$l),_Uo=i($l),lc=n($l,"P",{});var PU=s(lc);bUo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),NG=n(PU,"A",{href:!0});var Gdt=s(NG);FUo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),vUo=r(PU," class method or the "),jG=n(PU,"A",{href:!0});var Odt=s(jG);TUo=r(Odt,"from_config()"),Odt.forEach(t),MUo=r(PU,` class
method.`),PU.forEach(t),EUo=i($l),$0=n($l,"P",{});var GPe=s($0);CUo=r(GPe,"This class cannot be instantiated directly using "),Uge=n(GPe,"CODE",{});var Vdt=s(Uge);wUo=r(Vdt,"__init__()"),Vdt.forEach(t),AUo=r(GPe," (throws an error)."),GPe.forEach(t),yUo=i($l),mt=n($l,"DIV",{class:!0});var Il=s(mt);f(I0.$$.fragment,Il),LUo=i(Il),Jge=n(Il,"P",{});var Xdt=s(Jge);xUo=r(Xdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Xdt.forEach(t),kUo=i(Il),ic=n(Il,"P",{});var $U=s(ic);SUo=r($U,`Note:
Loading a model from its configuration file does `),Yge=n($U,"STRONG",{});var zdt=s(Yge);RUo=r(zdt,"not"),zdt.forEach(t),BUo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n($U,"A",{href:!0});var Qdt=s(DG);PUo=r(Qdt,"from_pretrained()"),Qdt.forEach(t),$Uo=r($U," to load the model weights."),$U.forEach(t),IUo=i(Il),Kge=n(Il,"P",{});var Wdt=s(Kge);qUo=r(Wdt,"Examples:"),Wdt.forEach(t),NUo=i(Il),f(q0.$$.fragment,Il),Il.forEach(t),jUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);f(N0.$$.fragment,la),DUo=i(la),Zge=n(la,"P",{});var Hdt=s(Zge);GUo=r(Hdt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hdt.forEach(t),OUo=i(la),hn=n(la,"P",{});var D3=s(hn);VUo=r(D3,"The model class to instantiate is selected based on the "),ehe=n(D3,"CODE",{});var Udt=s(ehe);XUo=r(Udt,"model_type"),Udt.forEach(t),zUo=r(D3,` property of the config object (either
passed as an argument or loaded from `),ohe=n(D3,"CODE",{});var Jdt=s(ohe);QUo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),WUo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(D3,"CODE",{});var Ydt=s(rhe);HUo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),UUo=r(D3,":"),D3.forEach(t),JUo=i(la),dc=n(la,"UL",{});var IU=s(dc);m1=n(IU,"LI",{});var KLe=s(m1);the=n(KLe,"STRONG",{});var Kdt=s(the);YUo=r(Kdt,"beit"),Kdt.forEach(t),KUo=r(KLe," \u2014 "),GG=n(KLe,"A",{href:!0});var Zdt=s(GG);ZUo=r(Zdt,"BeitForSemanticSegmentation"),Zdt.forEach(t),eJo=r(KLe," (BEiT model)"),KLe.forEach(t),oJo=i(IU),f1=n(IU,"LI",{});var ZLe=s(f1);ahe=n(ZLe,"STRONG",{});var ect=s(ahe);rJo=r(ect,"dpt"),ect.forEach(t),tJo=r(ZLe," \u2014 "),OG=n(ZLe,"A",{href:!0});var oct=s(OG);aJo=r(oct,"DPTForSemanticSegmentation"),oct.forEach(t),nJo=r(ZLe," (DPT model)"),ZLe.forEach(t),sJo=i(IU),g1=n(IU,"LI",{});var e7e=s(g1);nhe=n(e7e,"STRONG",{});var rct=s(nhe);lJo=r(rct,"segformer"),rct.forEach(t),iJo=r(e7e," \u2014 "),VG=n(e7e,"A",{href:!0});var tct=s(VG);dJo=r(tct,"SegformerForSemanticSegmentation"),tct.forEach(t),cJo=r(e7e," (SegFormer model)"),e7e.forEach(t),IU.forEach(t),mJo=i(la),h1=n(la,"P",{});var o7e=s(h1);fJo=r(o7e,"The model is set in evaluation mode by default using "),she=n(o7e,"CODE",{});var act=s(she);gJo=r(act,"model.eval()"),act.forEach(t),hJo=r(o7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(o7e,"CODE",{});var nct=s(lhe);uJo=r(nct,"model.train()"),nct.forEach(t),o7e.forEach(t),pJo=i(la),ihe=n(la,"P",{});var sct=s(ihe);_Jo=r(sct,"Examples:"),sct.forEach(t),bJo=i(la),f(j0.$$.fragment,la),la.forEach(t),$l.forEach(t),RRe=i(c),cc=n(c,"H2",{class:!0});var OPe=s(cc);u1=n(OPe,"A",{id:!0,class:!0,href:!0});var lct=s(u1);dhe=n(lct,"SPAN",{});var ict=s(dhe);f(D0.$$.fragment,ict),ict.forEach(t),lct.forEach(t),FJo=i(OPe),che=n(OPe,"SPAN",{});var dct=s(che);vJo=r(dct,"AutoModelForInstanceSegmentation"),dct.forEach(t),OPe.forEach(t),BRe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);f(G0.$$.fragment,ql),TJo=i(ql),mc=n(ql,"P",{});var qU=s(mc);MJo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),XG=n(qU,"A",{href:!0});var cct=s(XG);EJo=r(cct,"from_pretrained()"),cct.forEach(t),CJo=r(qU," class method or the "),zG=n(qU,"A",{href:!0});var mct=s(zG);wJo=r(mct,"from_config()"),mct.forEach(t),AJo=r(qU,` class
method.`),qU.forEach(t),yJo=i(ql),O0=n(ql,"P",{});var VPe=s(O0);LJo=r(VPe,"This class cannot be instantiated directly using "),mhe=n(VPe,"CODE",{});var fct=s(mhe);xJo=r(fct,"__init__()"),fct.forEach(t),kJo=r(VPe," (throws an error)."),VPe.forEach(t),SJo=i(ql),ft=n(ql,"DIV",{class:!0});var Nl=s(ft);f(V0.$$.fragment,Nl),RJo=i(Nl),fhe=n(Nl,"P",{});var gct=s(fhe);BJo=r(gct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),gct.forEach(t),PJo=i(Nl),fc=n(Nl,"P",{});var NU=s(fc);$Jo=r(NU,`Note:
Loading a model from its configuration file does `),ghe=n(NU,"STRONG",{});var hct=s(ghe);IJo=r(hct,"not"),hct.forEach(t),qJo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(NU,"A",{href:!0});var uct=s(QG);NJo=r(uct,"from_pretrained()"),uct.forEach(t),jJo=r(NU," to load the model weights."),NU.forEach(t),DJo=i(Nl),hhe=n(Nl,"P",{});var pct=s(hhe);GJo=r(pct,"Examples:"),pct.forEach(t),OJo=i(Nl),f(X0.$$.fragment,Nl),Nl.forEach(t),VJo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);f(z0.$$.fragment,ia),XJo=i(ia),uhe=n(ia,"P",{});var _ct=s(uhe);zJo=r(_ct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_ct.forEach(t),QJo=i(ia),un=n(ia,"P",{});var G3=s(un);WJo=r(G3,"The model class to instantiate is selected based on the "),phe=n(G3,"CODE",{});var bct=s(phe);HJo=r(bct,"model_type"),bct.forEach(t),UJo=r(G3,` property of the config object (either
passed as an argument or loaded from `),_he=n(G3,"CODE",{});var Fct=s(_he);JJo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),YJo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(G3,"CODE",{});var vct=s(bhe);KJo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),ZJo=r(G3,":"),G3.forEach(t),eYo=i(ia),Fhe=n(ia,"UL",{});var Tct=s(Fhe);p1=n(Tct,"LI",{});var r7e=s(p1);vhe=n(r7e,"STRONG",{});var Mct=s(vhe);oYo=r(Mct,"maskformer"),Mct.forEach(t),rYo=r(r7e," \u2014 "),WG=n(r7e,"A",{href:!0});var Ect=s(WG);tYo=r(Ect,"MaskFormerForInstanceSegmentation"),Ect.forEach(t),aYo=r(r7e," (MaskFormer model)"),r7e.forEach(t),Tct.forEach(t),nYo=i(ia),_1=n(ia,"P",{});var t7e=s(_1);sYo=r(t7e,"The model is set in evaluation mode by default using "),The=n(t7e,"CODE",{});var Cct=s(The);lYo=r(Cct,"model.eval()"),Cct.forEach(t),iYo=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(t7e,"CODE",{});var wct=s(Mhe);dYo=r(wct,"model.train()"),wct.forEach(t),t7e.forEach(t),cYo=i(ia),Ehe=n(ia,"P",{});var Act=s(Ehe);mYo=r(Act,"Examples:"),Act.forEach(t),fYo=i(ia),f(Q0.$$.fragment,ia),ia.forEach(t),ql.forEach(t),PRe=i(c),gc=n(c,"H2",{class:!0});var XPe=s(gc);b1=n(XPe,"A",{id:!0,class:!0,href:!0});var yct=s(b1);Che=n(yct,"SPAN",{});var Lct=s(Che);f(W0.$$.fragment,Lct),Lct.forEach(t),yct.forEach(t),gYo=i(XPe),whe=n(XPe,"SPAN",{});var xct=s(whe);hYo=r(xct,"TFAutoModel"),xct.forEach(t),XPe.forEach(t),$Re=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);f(H0.$$.fragment,jl),uYo=i(jl),hc=n(jl,"P",{});var jU=s(hc);pYo=r(jU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HG=n(jU,"A",{href:!0});var kct=s(HG);_Yo=r(kct,"from_pretrained()"),kct.forEach(t),bYo=r(jU," class method or the "),UG=n(jU,"A",{href:!0});var Sct=s(UG);FYo=r(Sct,"from_config()"),Sct.forEach(t),vYo=r(jU,` class
method.`),jU.forEach(t),TYo=i(jl),U0=n(jl,"P",{});var zPe=s(U0);MYo=r(zPe,"This class cannot be instantiated directly using "),Ahe=n(zPe,"CODE",{});var Rct=s(Ahe);EYo=r(Rct,"__init__()"),Rct.forEach(t),CYo=r(zPe," (throws an error)."),zPe.forEach(t),wYo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);f(J0.$$.fragment,Dl),AYo=i(Dl),yhe=n(Dl,"P",{});var Bct=s(yhe);yYo=r(Bct,"Instantiates one of the base model classes of the library from a configuration."),Bct.forEach(t),LYo=i(Dl),uc=n(Dl,"P",{});var DU=s(uc);xYo=r(DU,`Note:
Loading a model from its configuration file does `),Lhe=n(DU,"STRONG",{});var Pct=s(Lhe);kYo=r(Pct,"not"),Pct.forEach(t),SYo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(DU,"A",{href:!0});var $ct=s(JG);RYo=r($ct,"from_pretrained()"),$ct.forEach(t),BYo=r(DU," to load the model weights."),DU.forEach(t),PYo=i(Dl),xhe=n(Dl,"P",{});var Ict=s(xhe);$Yo=r(Ict,"Examples:"),Ict.forEach(t),IYo=i(Dl),f(Y0.$$.fragment,Dl),Dl.forEach(t),qYo=i(jl),ho=n(jl,"DIV",{class:!0});var ua=s(ho);f(K0.$$.fragment,ua),NYo=i(ua),khe=n(ua,"P",{});var qct=s(khe);jYo=r(qct,"Instantiate one of the base model classes of the library from a pretrained model."),qct.forEach(t),DYo=i(ua),pn=n(ua,"P",{});var O3=s(pn);GYo=r(O3,"The model class to instantiate is selected based on the "),She=n(O3,"CODE",{});var Nct=s(She);OYo=r(Nct,"model_type"),Nct.forEach(t),VYo=r(O3,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(O3,"CODE",{});var jct=s(Rhe);XYo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),zYo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(O3,"CODE",{});var Dct=s(Bhe);QYo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),WYo=r(O3,":"),O3.forEach(t),HYo=i(ua),x=n(ua,"UL",{});var k=s(x);F1=n(k,"LI",{});var a7e=s(F1);Phe=n(a7e,"STRONG",{});var Gct=s(Phe);UYo=r(Gct,"albert"),Gct.forEach(t),JYo=r(a7e," \u2014 "),YG=n(a7e,"A",{href:!0});var Oct=s(YG);YYo=r(Oct,"TFAlbertModel"),Oct.forEach(t),KYo=r(a7e," (ALBERT model)"),a7e.forEach(t),ZYo=i(k),v1=n(k,"LI",{});var n7e=s(v1);$he=n(n7e,"STRONG",{});var Vct=s($he);eKo=r(Vct,"bart"),Vct.forEach(t),oKo=r(n7e," \u2014 "),KG=n(n7e,"A",{href:!0});var Xct=s(KG);rKo=r(Xct,"TFBartModel"),Xct.forEach(t),tKo=r(n7e," (BART model)"),n7e.forEach(t),aKo=i(k),T1=n(k,"LI",{});var s7e=s(T1);Ihe=n(s7e,"STRONG",{});var zct=s(Ihe);nKo=r(zct,"bert"),zct.forEach(t),sKo=r(s7e," \u2014 "),ZG=n(s7e,"A",{href:!0});var Qct=s(ZG);lKo=r(Qct,"TFBertModel"),Qct.forEach(t),iKo=r(s7e," (BERT model)"),s7e.forEach(t),dKo=i(k),M1=n(k,"LI",{});var l7e=s(M1);qhe=n(l7e,"STRONG",{});var Wct=s(qhe);cKo=r(Wct,"blenderbot"),Wct.forEach(t),mKo=r(l7e," \u2014 "),eO=n(l7e,"A",{href:!0});var Hct=s(eO);fKo=r(Hct,"TFBlenderbotModel"),Hct.forEach(t),gKo=r(l7e," (Blenderbot model)"),l7e.forEach(t),hKo=i(k),E1=n(k,"LI",{});var i7e=s(E1);Nhe=n(i7e,"STRONG",{});var Uct=s(Nhe);uKo=r(Uct,"blenderbot-small"),Uct.forEach(t),pKo=r(i7e," \u2014 "),oO=n(i7e,"A",{href:!0});var Jct=s(oO);_Ko=r(Jct,"TFBlenderbotSmallModel"),Jct.forEach(t),bKo=r(i7e," (BlenderbotSmall model)"),i7e.forEach(t),FKo=i(k),C1=n(k,"LI",{});var d7e=s(C1);jhe=n(d7e,"STRONG",{});var Yct=s(jhe);vKo=r(Yct,"camembert"),Yct.forEach(t),TKo=r(d7e," \u2014 "),rO=n(d7e,"A",{href:!0});var Kct=s(rO);MKo=r(Kct,"TFCamembertModel"),Kct.forEach(t),EKo=r(d7e," (CamemBERT model)"),d7e.forEach(t),CKo=i(k),w1=n(k,"LI",{});var c7e=s(w1);Dhe=n(c7e,"STRONG",{});var Zct=s(Dhe);wKo=r(Zct,"clip"),Zct.forEach(t),AKo=r(c7e," \u2014 "),tO=n(c7e,"A",{href:!0});var emt=s(tO);yKo=r(emt,"TFCLIPModel"),emt.forEach(t),LKo=r(c7e," (CLIP model)"),c7e.forEach(t),xKo=i(k),A1=n(k,"LI",{});var m7e=s(A1);Ghe=n(m7e,"STRONG",{});var omt=s(Ghe);kKo=r(omt,"convbert"),omt.forEach(t),SKo=r(m7e," \u2014 "),aO=n(m7e,"A",{href:!0});var rmt=s(aO);RKo=r(rmt,"TFConvBertModel"),rmt.forEach(t),BKo=r(m7e," (ConvBERT model)"),m7e.forEach(t),PKo=i(k),y1=n(k,"LI",{});var f7e=s(y1);Ohe=n(f7e,"STRONG",{});var tmt=s(Ohe);$Ko=r(tmt,"convnext"),tmt.forEach(t),IKo=r(f7e," \u2014 "),nO=n(f7e,"A",{href:!0});var amt=s(nO);qKo=r(amt,"TFConvNextModel"),amt.forEach(t),NKo=r(f7e," (ConvNext model)"),f7e.forEach(t),jKo=i(k),L1=n(k,"LI",{});var g7e=s(L1);Vhe=n(g7e,"STRONG",{});var nmt=s(Vhe);DKo=r(nmt,"ctrl"),nmt.forEach(t),GKo=r(g7e," \u2014 "),sO=n(g7e,"A",{href:!0});var smt=s(sO);OKo=r(smt,"TFCTRLModel"),smt.forEach(t),VKo=r(g7e," (CTRL model)"),g7e.forEach(t),XKo=i(k),x1=n(k,"LI",{});var h7e=s(x1);Xhe=n(h7e,"STRONG",{});var lmt=s(Xhe);zKo=r(lmt,"deberta"),lmt.forEach(t),QKo=r(h7e," \u2014 "),lO=n(h7e,"A",{href:!0});var imt=s(lO);WKo=r(imt,"TFDebertaModel"),imt.forEach(t),HKo=r(h7e," (DeBERTa model)"),h7e.forEach(t),UKo=i(k),k1=n(k,"LI",{});var u7e=s(k1);zhe=n(u7e,"STRONG",{});var dmt=s(zhe);JKo=r(dmt,"deberta-v2"),dmt.forEach(t),YKo=r(u7e," \u2014 "),iO=n(u7e,"A",{href:!0});var cmt=s(iO);KKo=r(cmt,"TFDebertaV2Model"),cmt.forEach(t),ZKo=r(u7e," (DeBERTa-v2 model)"),u7e.forEach(t),eZo=i(k),S1=n(k,"LI",{});var p7e=s(S1);Qhe=n(p7e,"STRONG",{});var mmt=s(Qhe);oZo=r(mmt,"distilbert"),mmt.forEach(t),rZo=r(p7e," \u2014 "),dO=n(p7e,"A",{href:!0});var fmt=s(dO);tZo=r(fmt,"TFDistilBertModel"),fmt.forEach(t),aZo=r(p7e," (DistilBERT model)"),p7e.forEach(t),nZo=i(k),R1=n(k,"LI",{});var _7e=s(R1);Whe=n(_7e,"STRONG",{});var gmt=s(Whe);sZo=r(gmt,"dpr"),gmt.forEach(t),lZo=r(_7e," \u2014 "),cO=n(_7e,"A",{href:!0});var hmt=s(cO);iZo=r(hmt,"TFDPRQuestionEncoder"),hmt.forEach(t),dZo=r(_7e," (DPR model)"),_7e.forEach(t),cZo=i(k),B1=n(k,"LI",{});var b7e=s(B1);Hhe=n(b7e,"STRONG",{});var umt=s(Hhe);mZo=r(umt,"electra"),umt.forEach(t),fZo=r(b7e," \u2014 "),mO=n(b7e,"A",{href:!0});var pmt=s(mO);gZo=r(pmt,"TFElectraModel"),pmt.forEach(t),hZo=r(b7e," (ELECTRA model)"),b7e.forEach(t),uZo=i(k),P1=n(k,"LI",{});var F7e=s(P1);Uhe=n(F7e,"STRONG",{});var _mt=s(Uhe);pZo=r(_mt,"flaubert"),_mt.forEach(t),_Zo=r(F7e," \u2014 "),fO=n(F7e,"A",{href:!0});var bmt=s(fO);bZo=r(bmt,"TFFlaubertModel"),bmt.forEach(t),FZo=r(F7e," (FlauBERT model)"),F7e.forEach(t),vZo=i(k),Gs=n(k,"LI",{});var a9=s(Gs);Jhe=n(a9,"STRONG",{});var Fmt=s(Jhe);TZo=r(Fmt,"funnel"),Fmt.forEach(t),MZo=r(a9," \u2014 "),gO=n(a9,"A",{href:!0});var vmt=s(gO);EZo=r(vmt,"TFFunnelModel"),vmt.forEach(t),CZo=r(a9," or "),hO=n(a9,"A",{href:!0});var Tmt=s(hO);wZo=r(Tmt,"TFFunnelBaseModel"),Tmt.forEach(t),AZo=r(a9," (Funnel Transformer model)"),a9.forEach(t),yZo=i(k),$1=n(k,"LI",{});var v7e=s($1);Yhe=n(v7e,"STRONG",{});var Mmt=s(Yhe);LZo=r(Mmt,"gpt2"),Mmt.forEach(t),xZo=r(v7e," \u2014 "),uO=n(v7e,"A",{href:!0});var Emt=s(uO);kZo=r(Emt,"TFGPT2Model"),Emt.forEach(t),SZo=r(v7e," (OpenAI GPT-2 model)"),v7e.forEach(t),RZo=i(k),I1=n(k,"LI",{});var T7e=s(I1);Khe=n(T7e,"STRONG",{});var Cmt=s(Khe);BZo=r(Cmt,"gptj"),Cmt.forEach(t),PZo=r(T7e," \u2014 "),pO=n(T7e,"A",{href:!0});var wmt=s(pO);$Zo=r(wmt,"TFGPTJModel"),wmt.forEach(t),IZo=r(T7e," (GPT-J model)"),T7e.forEach(t),qZo=i(k),q1=n(k,"LI",{});var M7e=s(q1);Zhe=n(M7e,"STRONG",{});var Amt=s(Zhe);NZo=r(Amt,"hubert"),Amt.forEach(t),jZo=r(M7e," \u2014 "),_O=n(M7e,"A",{href:!0});var ymt=s(_O);DZo=r(ymt,"TFHubertModel"),ymt.forEach(t),GZo=r(M7e," (Hubert model)"),M7e.forEach(t),OZo=i(k),N1=n(k,"LI",{});var E7e=s(N1);eue=n(E7e,"STRONG",{});var Lmt=s(eue);VZo=r(Lmt,"layoutlm"),Lmt.forEach(t),XZo=r(E7e," \u2014 "),bO=n(E7e,"A",{href:!0});var xmt=s(bO);zZo=r(xmt,"TFLayoutLMModel"),xmt.forEach(t),QZo=r(E7e," (LayoutLM model)"),E7e.forEach(t),WZo=i(k),j1=n(k,"LI",{});var C7e=s(j1);oue=n(C7e,"STRONG",{});var kmt=s(oue);HZo=r(kmt,"led"),kmt.forEach(t),UZo=r(C7e," \u2014 "),FO=n(C7e,"A",{href:!0});var Smt=s(FO);JZo=r(Smt,"TFLEDModel"),Smt.forEach(t),YZo=r(C7e," (LED model)"),C7e.forEach(t),KZo=i(k),D1=n(k,"LI",{});var w7e=s(D1);rue=n(w7e,"STRONG",{});var Rmt=s(rue);ZZo=r(Rmt,"longformer"),Rmt.forEach(t),eer=r(w7e," \u2014 "),vO=n(w7e,"A",{href:!0});var Bmt=s(vO);oer=r(Bmt,"TFLongformerModel"),Bmt.forEach(t),rer=r(w7e," (Longformer model)"),w7e.forEach(t),ter=i(k),G1=n(k,"LI",{});var A7e=s(G1);tue=n(A7e,"STRONG",{});var Pmt=s(tue);aer=r(Pmt,"lxmert"),Pmt.forEach(t),ner=r(A7e," \u2014 "),TO=n(A7e,"A",{href:!0});var $mt=s(TO);ser=r($mt,"TFLxmertModel"),$mt.forEach(t),ler=r(A7e," (LXMERT model)"),A7e.forEach(t),ier=i(k),O1=n(k,"LI",{});var y7e=s(O1);aue=n(y7e,"STRONG",{});var Imt=s(aue);der=r(Imt,"marian"),Imt.forEach(t),cer=r(y7e," \u2014 "),MO=n(y7e,"A",{href:!0});var qmt=s(MO);mer=r(qmt,"TFMarianModel"),qmt.forEach(t),fer=r(y7e," (Marian model)"),y7e.forEach(t),ger=i(k),V1=n(k,"LI",{});var L7e=s(V1);nue=n(L7e,"STRONG",{});var Nmt=s(nue);her=r(Nmt,"mbart"),Nmt.forEach(t),uer=r(L7e," \u2014 "),EO=n(L7e,"A",{href:!0});var jmt=s(EO);per=r(jmt,"TFMBartModel"),jmt.forEach(t),_er=r(L7e," (mBART model)"),L7e.forEach(t),ber=i(k),X1=n(k,"LI",{});var x7e=s(X1);sue=n(x7e,"STRONG",{});var Dmt=s(sue);Fer=r(Dmt,"mobilebert"),Dmt.forEach(t),ver=r(x7e," \u2014 "),CO=n(x7e,"A",{href:!0});var Gmt=s(CO);Ter=r(Gmt,"TFMobileBertModel"),Gmt.forEach(t),Mer=r(x7e," (MobileBERT model)"),x7e.forEach(t),Eer=i(k),z1=n(k,"LI",{});var k7e=s(z1);lue=n(k7e,"STRONG",{});var Omt=s(lue);Cer=r(Omt,"mpnet"),Omt.forEach(t),wer=r(k7e," \u2014 "),wO=n(k7e,"A",{href:!0});var Vmt=s(wO);Aer=r(Vmt,"TFMPNetModel"),Vmt.forEach(t),yer=r(k7e," (MPNet model)"),k7e.forEach(t),Ler=i(k),Q1=n(k,"LI",{});var S7e=s(Q1);iue=n(S7e,"STRONG",{});var Xmt=s(iue);xer=r(Xmt,"mt5"),Xmt.forEach(t),ker=r(S7e," \u2014 "),AO=n(S7e,"A",{href:!0});var zmt=s(AO);Ser=r(zmt,"TFMT5Model"),zmt.forEach(t),Rer=r(S7e," (mT5 model)"),S7e.forEach(t),Ber=i(k),W1=n(k,"LI",{});var R7e=s(W1);due=n(R7e,"STRONG",{});var Qmt=s(due);Per=r(Qmt,"openai-gpt"),Qmt.forEach(t),$er=r(R7e," \u2014 "),yO=n(R7e,"A",{href:!0});var Wmt=s(yO);Ier=r(Wmt,"TFOpenAIGPTModel"),Wmt.forEach(t),qer=r(R7e," (OpenAI GPT model)"),R7e.forEach(t),Ner=i(k),H1=n(k,"LI",{});var B7e=s(H1);cue=n(B7e,"STRONG",{});var Hmt=s(cue);jer=r(Hmt,"pegasus"),Hmt.forEach(t),Der=r(B7e," \u2014 "),LO=n(B7e,"A",{href:!0});var Umt=s(LO);Ger=r(Umt,"TFPegasusModel"),Umt.forEach(t),Oer=r(B7e," (Pegasus model)"),B7e.forEach(t),Ver=i(k),U1=n(k,"LI",{});var P7e=s(U1);mue=n(P7e,"STRONG",{});var Jmt=s(mue);Xer=r(Jmt,"rembert"),Jmt.forEach(t),zer=r(P7e," \u2014 "),xO=n(P7e,"A",{href:!0});var Ymt=s(xO);Qer=r(Ymt,"TFRemBertModel"),Ymt.forEach(t),Wer=r(P7e," (RemBERT model)"),P7e.forEach(t),Her=i(k),J1=n(k,"LI",{});var $7e=s(J1);fue=n($7e,"STRONG",{});var Kmt=s(fue);Uer=r(Kmt,"roberta"),Kmt.forEach(t),Jer=r($7e," \u2014 "),kO=n($7e,"A",{href:!0});var Zmt=s(kO);Yer=r(Zmt,"TFRobertaModel"),Zmt.forEach(t),Ker=r($7e," (RoBERTa model)"),$7e.forEach(t),Zer=i(k),Y1=n(k,"LI",{});var I7e=s(Y1);gue=n(I7e,"STRONG",{});var eft=s(gue);eor=r(eft,"roformer"),eft.forEach(t),oor=r(I7e," \u2014 "),SO=n(I7e,"A",{href:!0});var oft=s(SO);ror=r(oft,"TFRoFormerModel"),oft.forEach(t),tor=r(I7e," (RoFormer model)"),I7e.forEach(t),aor=i(k),K1=n(k,"LI",{});var q7e=s(K1);hue=n(q7e,"STRONG",{});var rft=s(hue);nor=r(rft,"speech_to_text"),rft.forEach(t),sor=r(q7e," \u2014 "),RO=n(q7e,"A",{href:!0});var tft=s(RO);lor=r(tft,"TFSpeech2TextModel"),tft.forEach(t),ior=r(q7e," (Speech2Text model)"),q7e.forEach(t),dor=i(k),Z1=n(k,"LI",{});var N7e=s(Z1);uue=n(N7e,"STRONG",{});var aft=s(uue);cor=r(aft,"t5"),aft.forEach(t),mor=r(N7e," \u2014 "),BO=n(N7e,"A",{href:!0});var nft=s(BO);gor=r(nft,"TFT5Model"),nft.forEach(t),hor=r(N7e," (T5 model)"),N7e.forEach(t),uor=i(k),eM=n(k,"LI",{});var j7e=s(eM);pue=n(j7e,"STRONG",{});var sft=s(pue);por=r(sft,"tapas"),sft.forEach(t),_or=r(j7e," \u2014 "),PO=n(j7e,"A",{href:!0});var lft=s(PO);bor=r(lft,"TFTapasModel"),lft.forEach(t),For=r(j7e," (TAPAS model)"),j7e.forEach(t),vor=i(k),oM=n(k,"LI",{});var D7e=s(oM);_ue=n(D7e,"STRONG",{});var ift=s(_ue);Tor=r(ift,"transfo-xl"),ift.forEach(t),Mor=r(D7e," \u2014 "),$O=n(D7e,"A",{href:!0});var dft=s($O);Eor=r(dft,"TFTransfoXLModel"),dft.forEach(t),Cor=r(D7e," (Transformer-XL model)"),D7e.forEach(t),wor=i(k),rM=n(k,"LI",{});var G7e=s(rM);bue=n(G7e,"STRONG",{});var cft=s(bue);Aor=r(cft,"vit"),cft.forEach(t),yor=r(G7e," \u2014 "),IO=n(G7e,"A",{href:!0});var mft=s(IO);Lor=r(mft,"TFViTModel"),mft.forEach(t),xor=r(G7e," (ViT model)"),G7e.forEach(t),kor=i(k),tM=n(k,"LI",{});var O7e=s(tM);Fue=n(O7e,"STRONG",{});var fft=s(Fue);Sor=r(fft,"wav2vec2"),fft.forEach(t),Ror=r(O7e," \u2014 "),qO=n(O7e,"A",{href:!0});var gft=s(qO);Bor=r(gft,"TFWav2Vec2Model"),gft.forEach(t),Por=r(O7e," (Wav2Vec2 model)"),O7e.forEach(t),$or=i(k),aM=n(k,"LI",{});var V7e=s(aM);vue=n(V7e,"STRONG",{});var hft=s(vue);Ior=r(hft,"xlm"),hft.forEach(t),qor=r(V7e," \u2014 "),NO=n(V7e,"A",{href:!0});var uft=s(NO);Nor=r(uft,"TFXLMModel"),uft.forEach(t),jor=r(V7e," (XLM model)"),V7e.forEach(t),Dor=i(k),nM=n(k,"LI",{});var X7e=s(nM);Tue=n(X7e,"STRONG",{});var pft=s(Tue);Gor=r(pft,"xlm-roberta"),pft.forEach(t),Oor=r(X7e," \u2014 "),jO=n(X7e,"A",{href:!0});var _ft=s(jO);Vor=r(_ft,"TFXLMRobertaModel"),_ft.forEach(t),Xor=r(X7e," (XLM-RoBERTa model)"),X7e.forEach(t),zor=i(k),sM=n(k,"LI",{});var z7e=s(sM);Mue=n(z7e,"STRONG",{});var bft=s(Mue);Qor=r(bft,"xlnet"),bft.forEach(t),Wor=r(z7e," \u2014 "),DO=n(z7e,"A",{href:!0});var Fft=s(DO);Hor=r(Fft,"TFXLNetModel"),Fft.forEach(t),Uor=r(z7e," (XLNet model)"),z7e.forEach(t),k.forEach(t),Jor=i(ua),Eue=n(ua,"P",{});var vft=s(Eue);Yor=r(vft,"Examples:"),vft.forEach(t),Kor=i(ua),f(Z0.$$.fragment,ua),ua.forEach(t),jl.forEach(t),IRe=i(c),pc=n(c,"H2",{class:!0});var QPe=s(pc);lM=n(QPe,"A",{id:!0,class:!0,href:!0});var Tft=s(lM);Cue=n(Tft,"SPAN",{});var Mft=s(Cue);f(ey.$$.fragment,Mft),Mft.forEach(t),Tft.forEach(t),Zor=i(QPe),wue=n(QPe,"SPAN",{});var Eft=s(wue);err=r(Eft,"TFAutoModelForPreTraining"),Eft.forEach(t),QPe.forEach(t),qRe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);f(oy.$$.fragment,Gl),orr=i(Gl),_c=n(Gl,"P",{});var GU=s(_c);rrr=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GO=n(GU,"A",{href:!0});var Cft=s(GO);trr=r(Cft,"from_pretrained()"),Cft.forEach(t),arr=r(GU," class method or the "),OO=n(GU,"A",{href:!0});var wft=s(OO);nrr=r(wft,"from_config()"),wft.forEach(t),srr=r(GU,` class
method.`),GU.forEach(t),lrr=i(Gl),ry=n(Gl,"P",{});var WPe=s(ry);irr=r(WPe,"This class cannot be instantiated directly using "),Aue=n(WPe,"CODE",{});var Aft=s(Aue);drr=r(Aft,"__init__()"),Aft.forEach(t),crr=r(WPe," (throws an error)."),WPe.forEach(t),mrr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);f(ty.$$.fragment,Ol),frr=i(Ol),yue=n(Ol,"P",{});var yft=s(yue);grr=r(yft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yft.forEach(t),hrr=i(Ol),bc=n(Ol,"P",{});var OU=s(bc);urr=r(OU,`Note:
Loading a model from its configuration file does `),Lue=n(OU,"STRONG",{});var Lft=s(Lue);prr=r(Lft,"not"),Lft.forEach(t),_rr=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(OU,"A",{href:!0});var xft=s(VO);brr=r(xft,"from_pretrained()"),xft.forEach(t),Frr=r(OU," to load the model weights."),OU.forEach(t),vrr=i(Ol),xue=n(Ol,"P",{});var kft=s(xue);Trr=r(kft,"Examples:"),kft.forEach(t),Mrr=i(Ol),f(ay.$$.fragment,Ol),Ol.forEach(t),Err=i(Gl),uo=n(Gl,"DIV",{class:!0});var pa=s(uo);f(ny.$$.fragment,pa),Crr=i(pa),kue=n(pa,"P",{});var Sft=s(kue);wrr=r(Sft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sft.forEach(t),Arr=i(pa),_n=n(pa,"P",{});var V3=s(_n);yrr=r(V3,"The model class to instantiate is selected based on the "),Sue=n(V3,"CODE",{});var Rft=s(Sue);Lrr=r(Rft,"model_type"),Rft.forEach(t),xrr=r(V3,` property of the config object (either
passed as an argument or loaded from `),Rue=n(V3,"CODE",{});var Bft=s(Rue);krr=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),Srr=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(V3,"CODE",{});var Pft=s(Bue);Rrr=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),Brr=r(V3,":"),V3.forEach(t),Prr=i(pa),H=n(pa,"UL",{});var U=s(H);iM=n(U,"LI",{});var Q7e=s(iM);Pue=n(Q7e,"STRONG",{});var $ft=s(Pue);$rr=r($ft,"albert"),$ft.forEach(t),Irr=r(Q7e," \u2014 "),XO=n(Q7e,"A",{href:!0});var Ift=s(XO);qrr=r(Ift,"TFAlbertForPreTraining"),Ift.forEach(t),Nrr=r(Q7e," (ALBERT model)"),Q7e.forEach(t),jrr=i(U),dM=n(U,"LI",{});var W7e=s(dM);$ue=n(W7e,"STRONG",{});var qft=s($ue);Drr=r(qft,"bart"),qft.forEach(t),Grr=r(W7e," \u2014 "),zO=n(W7e,"A",{href:!0});var Nft=s(zO);Orr=r(Nft,"TFBartForConditionalGeneration"),Nft.forEach(t),Vrr=r(W7e," (BART model)"),W7e.forEach(t),Xrr=i(U),cM=n(U,"LI",{});var H7e=s(cM);Iue=n(H7e,"STRONG",{});var jft=s(Iue);zrr=r(jft,"bert"),jft.forEach(t),Qrr=r(H7e," \u2014 "),QO=n(H7e,"A",{href:!0});var Dft=s(QO);Wrr=r(Dft,"TFBertForPreTraining"),Dft.forEach(t),Hrr=r(H7e," (BERT model)"),H7e.forEach(t),Urr=i(U),mM=n(U,"LI",{});var U7e=s(mM);que=n(U7e,"STRONG",{});var Gft=s(que);Jrr=r(Gft,"camembert"),Gft.forEach(t),Yrr=r(U7e," \u2014 "),WO=n(U7e,"A",{href:!0});var Oft=s(WO);Krr=r(Oft,"TFCamembertForMaskedLM"),Oft.forEach(t),Zrr=r(U7e," (CamemBERT model)"),U7e.forEach(t),etr=i(U),fM=n(U,"LI",{});var J7e=s(fM);Nue=n(J7e,"STRONG",{});var Vft=s(Nue);otr=r(Vft,"ctrl"),Vft.forEach(t),rtr=r(J7e," \u2014 "),HO=n(J7e,"A",{href:!0});var Xft=s(HO);ttr=r(Xft,"TFCTRLLMHeadModel"),Xft.forEach(t),atr=r(J7e," (CTRL model)"),J7e.forEach(t),ntr=i(U),gM=n(U,"LI",{});var Y7e=s(gM);jue=n(Y7e,"STRONG",{});var zft=s(jue);str=r(zft,"distilbert"),zft.forEach(t),ltr=r(Y7e," \u2014 "),UO=n(Y7e,"A",{href:!0});var Qft=s(UO);itr=r(Qft,"TFDistilBertForMaskedLM"),Qft.forEach(t),dtr=r(Y7e," (DistilBERT model)"),Y7e.forEach(t),ctr=i(U),hM=n(U,"LI",{});var K7e=s(hM);Due=n(K7e,"STRONG",{});var Wft=s(Due);mtr=r(Wft,"electra"),Wft.forEach(t),ftr=r(K7e," \u2014 "),JO=n(K7e,"A",{href:!0});var Hft=s(JO);gtr=r(Hft,"TFElectraForPreTraining"),Hft.forEach(t),htr=r(K7e," (ELECTRA model)"),K7e.forEach(t),utr=i(U),uM=n(U,"LI",{});var Z7e=s(uM);Gue=n(Z7e,"STRONG",{});var Uft=s(Gue);ptr=r(Uft,"flaubert"),Uft.forEach(t),_tr=r(Z7e," \u2014 "),YO=n(Z7e,"A",{href:!0});var Jft=s(YO);btr=r(Jft,"TFFlaubertWithLMHeadModel"),Jft.forEach(t),Ftr=r(Z7e," (FlauBERT model)"),Z7e.forEach(t),vtr=i(U),pM=n(U,"LI",{});var e8e=s(pM);Oue=n(e8e,"STRONG",{});var Yft=s(Oue);Ttr=r(Yft,"funnel"),Yft.forEach(t),Mtr=r(e8e," \u2014 "),KO=n(e8e,"A",{href:!0});var Kft=s(KO);Etr=r(Kft,"TFFunnelForPreTraining"),Kft.forEach(t),Ctr=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),wtr=i(U),_M=n(U,"LI",{});var o8e=s(_M);Vue=n(o8e,"STRONG",{});var Zft=s(Vue);Atr=r(Zft,"gpt2"),Zft.forEach(t),ytr=r(o8e," \u2014 "),ZO=n(o8e,"A",{href:!0});var egt=s(ZO);Ltr=r(egt,"TFGPT2LMHeadModel"),egt.forEach(t),xtr=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),ktr=i(U),bM=n(U,"LI",{});var r8e=s(bM);Xue=n(r8e,"STRONG",{});var ogt=s(Xue);Str=r(ogt,"layoutlm"),ogt.forEach(t),Rtr=r(r8e," \u2014 "),eV=n(r8e,"A",{href:!0});var rgt=s(eV);Btr=r(rgt,"TFLayoutLMForMaskedLM"),rgt.forEach(t),Ptr=r(r8e," (LayoutLM model)"),r8e.forEach(t),$tr=i(U),FM=n(U,"LI",{});var t8e=s(FM);zue=n(t8e,"STRONG",{});var tgt=s(zue);Itr=r(tgt,"lxmert"),tgt.forEach(t),qtr=r(t8e," \u2014 "),oV=n(t8e,"A",{href:!0});var agt=s(oV);Ntr=r(agt,"TFLxmertForPreTraining"),agt.forEach(t),jtr=r(t8e," (LXMERT model)"),t8e.forEach(t),Dtr=i(U),vM=n(U,"LI",{});var a8e=s(vM);Que=n(a8e,"STRONG",{});var ngt=s(Que);Gtr=r(ngt,"mobilebert"),ngt.forEach(t),Otr=r(a8e," \u2014 "),rV=n(a8e,"A",{href:!0});var sgt=s(rV);Vtr=r(sgt,"TFMobileBertForPreTraining"),sgt.forEach(t),Xtr=r(a8e," (MobileBERT model)"),a8e.forEach(t),ztr=i(U),TM=n(U,"LI",{});var n8e=s(TM);Wue=n(n8e,"STRONG",{});var lgt=s(Wue);Qtr=r(lgt,"mpnet"),lgt.forEach(t),Wtr=r(n8e," \u2014 "),tV=n(n8e,"A",{href:!0});var igt=s(tV);Htr=r(igt,"TFMPNetForMaskedLM"),igt.forEach(t),Utr=r(n8e," (MPNet model)"),n8e.forEach(t),Jtr=i(U),MM=n(U,"LI",{});var s8e=s(MM);Hue=n(s8e,"STRONG",{});var dgt=s(Hue);Ytr=r(dgt,"openai-gpt"),dgt.forEach(t),Ktr=r(s8e," \u2014 "),aV=n(s8e,"A",{href:!0});var cgt=s(aV);Ztr=r(cgt,"TFOpenAIGPTLMHeadModel"),cgt.forEach(t),ear=r(s8e," (OpenAI GPT model)"),s8e.forEach(t),oar=i(U),EM=n(U,"LI",{});var l8e=s(EM);Uue=n(l8e,"STRONG",{});var mgt=s(Uue);rar=r(mgt,"roberta"),mgt.forEach(t),tar=r(l8e," \u2014 "),nV=n(l8e,"A",{href:!0});var fgt=s(nV);aar=r(fgt,"TFRobertaForMaskedLM"),fgt.forEach(t),nar=r(l8e," (RoBERTa model)"),l8e.forEach(t),sar=i(U),CM=n(U,"LI",{});var i8e=s(CM);Jue=n(i8e,"STRONG",{});var ggt=s(Jue);lar=r(ggt,"t5"),ggt.forEach(t),iar=r(i8e," \u2014 "),sV=n(i8e,"A",{href:!0});var hgt=s(sV);dar=r(hgt,"TFT5ForConditionalGeneration"),hgt.forEach(t),car=r(i8e," (T5 model)"),i8e.forEach(t),mar=i(U),wM=n(U,"LI",{});var d8e=s(wM);Yue=n(d8e,"STRONG",{});var ugt=s(Yue);far=r(ugt,"tapas"),ugt.forEach(t),gar=r(d8e," \u2014 "),lV=n(d8e,"A",{href:!0});var pgt=s(lV);har=r(pgt,"TFTapasForMaskedLM"),pgt.forEach(t),uar=r(d8e," (TAPAS model)"),d8e.forEach(t),par=i(U),AM=n(U,"LI",{});var c8e=s(AM);Kue=n(c8e,"STRONG",{});var _gt=s(Kue);_ar=r(_gt,"transfo-xl"),_gt.forEach(t),bar=r(c8e," \u2014 "),iV=n(c8e,"A",{href:!0});var bgt=s(iV);Far=r(bgt,"TFTransfoXLLMHeadModel"),bgt.forEach(t),Tar=r(c8e," (Transformer-XL model)"),c8e.forEach(t),Mar=i(U),yM=n(U,"LI",{});var m8e=s(yM);Zue=n(m8e,"STRONG",{});var Fgt=s(Zue);Ear=r(Fgt,"xlm"),Fgt.forEach(t),Car=r(m8e," \u2014 "),dV=n(m8e,"A",{href:!0});var vgt=s(dV);war=r(vgt,"TFXLMWithLMHeadModel"),vgt.forEach(t),Aar=r(m8e," (XLM model)"),m8e.forEach(t),yar=i(U),LM=n(U,"LI",{});var f8e=s(LM);epe=n(f8e,"STRONG",{});var Tgt=s(epe);Lar=r(Tgt,"xlm-roberta"),Tgt.forEach(t),xar=r(f8e," \u2014 "),cV=n(f8e,"A",{href:!0});var Mgt=s(cV);kar=r(Mgt,"TFXLMRobertaForMaskedLM"),Mgt.forEach(t),Sar=r(f8e," (XLM-RoBERTa model)"),f8e.forEach(t),Rar=i(U),xM=n(U,"LI",{});var g8e=s(xM);ope=n(g8e,"STRONG",{});var Egt=s(ope);Bar=r(Egt,"xlnet"),Egt.forEach(t),Par=r(g8e," \u2014 "),mV=n(g8e,"A",{href:!0});var Cgt=s(mV);$ar=r(Cgt,"TFXLNetLMHeadModel"),Cgt.forEach(t),Iar=r(g8e," (XLNet model)"),g8e.forEach(t),U.forEach(t),qar=i(pa),rpe=n(pa,"P",{});var wgt=s(rpe);Nar=r(wgt,"Examples:"),wgt.forEach(t),jar=i(pa),f(sy.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),NRe=i(c),Fc=n(c,"H2",{class:!0});var HPe=s(Fc);kM=n(HPe,"A",{id:!0,class:!0,href:!0});var Agt=s(kM);tpe=n(Agt,"SPAN",{});var ygt=s(tpe);f(ly.$$.fragment,ygt),ygt.forEach(t),Agt.forEach(t),Dar=i(HPe),ape=n(HPe,"SPAN",{});var Lgt=s(ape);Gar=r(Lgt,"TFAutoModelForCausalLM"),Lgt.forEach(t),HPe.forEach(t),jRe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);f(iy.$$.fragment,Vl),Oar=i(Vl),vc=n(Vl,"P",{});var VU=s(vc);Var=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fV=n(VU,"A",{href:!0});var xgt=s(fV);Xar=r(xgt,"from_pretrained()"),xgt.forEach(t),zar=r(VU," class method or the "),gV=n(VU,"A",{href:!0});var kgt=s(gV);Qar=r(kgt,"from_config()"),kgt.forEach(t),War=r(VU,` class
method.`),VU.forEach(t),Har=i(Vl),dy=n(Vl,"P",{});var UPe=s(dy);Uar=r(UPe,"This class cannot be instantiated directly using "),npe=n(UPe,"CODE",{});var Sgt=s(npe);Jar=r(Sgt,"__init__()"),Sgt.forEach(t),Yar=r(UPe," (throws an error)."),UPe.forEach(t),Kar=i(Vl),ut=n(Vl,"DIV",{class:!0});var Xl=s(ut);f(cy.$$.fragment,Xl),Zar=i(Xl),spe=n(Xl,"P",{});var Rgt=s(spe);enr=r(Rgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rgt.forEach(t),onr=i(Xl),Tc=n(Xl,"P",{});var XU=s(Tc);rnr=r(XU,`Note:
Loading a model from its configuration file does `),lpe=n(XU,"STRONG",{});var Bgt=s(lpe);tnr=r(Bgt,"not"),Bgt.forEach(t),anr=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(XU,"A",{href:!0});var Pgt=s(hV);nnr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),snr=r(XU," to load the model weights."),XU.forEach(t),lnr=i(Xl),ipe=n(Xl,"P",{});var $gt=s(ipe);inr=r($gt,"Examples:"),$gt.forEach(t),dnr=i(Xl),f(my.$$.fragment,Xl),Xl.forEach(t),cnr=i(Vl),po=n(Vl,"DIV",{class:!0});var _a=s(po);f(fy.$$.fragment,_a),mnr=i(_a),dpe=n(_a,"P",{});var Igt=s(dpe);fnr=r(Igt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Igt.forEach(t),gnr=i(_a),bn=n(_a,"P",{});var X3=s(bn);hnr=r(X3,"The model class to instantiate is selected based on the "),cpe=n(X3,"CODE",{});var qgt=s(cpe);unr=r(qgt,"model_type"),qgt.forEach(t),pnr=r(X3,` property of the config object (either
passed as an argument or loaded from `),mpe=n(X3,"CODE",{});var Ngt=s(mpe);_nr=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),bnr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(X3,"CODE",{});var jgt=s(fpe);Fnr=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),vnr=r(X3,":"),X3.forEach(t),Tnr=i(_a),ce=n(_a,"UL",{});var he=s(ce);SM=n(he,"LI",{});var h8e=s(SM);gpe=n(h8e,"STRONG",{});var Dgt=s(gpe);Mnr=r(Dgt,"bert"),Dgt.forEach(t),Enr=r(h8e," \u2014 "),uV=n(h8e,"A",{href:!0});var Ggt=s(uV);Cnr=r(Ggt,"TFBertLMHeadModel"),Ggt.forEach(t),wnr=r(h8e," (BERT model)"),h8e.forEach(t),Anr=i(he),RM=n(he,"LI",{});var u8e=s(RM);hpe=n(u8e,"STRONG",{});var Ogt=s(hpe);ynr=r(Ogt,"camembert"),Ogt.forEach(t),Lnr=r(u8e," \u2014 "),pV=n(u8e,"A",{href:!0});var Vgt=s(pV);xnr=r(Vgt,"TFCamembertForCausalLM"),Vgt.forEach(t),knr=r(u8e," (CamemBERT model)"),u8e.forEach(t),Snr=i(he),BM=n(he,"LI",{});var p8e=s(BM);upe=n(p8e,"STRONG",{});var Xgt=s(upe);Rnr=r(Xgt,"ctrl"),Xgt.forEach(t),Bnr=r(p8e," \u2014 "),_V=n(p8e,"A",{href:!0});var zgt=s(_V);Pnr=r(zgt,"TFCTRLLMHeadModel"),zgt.forEach(t),$nr=r(p8e," (CTRL model)"),p8e.forEach(t),Inr=i(he),PM=n(he,"LI",{});var _8e=s(PM);ppe=n(_8e,"STRONG",{});var Qgt=s(ppe);qnr=r(Qgt,"gpt2"),Qgt.forEach(t),Nnr=r(_8e," \u2014 "),bV=n(_8e,"A",{href:!0});var Wgt=s(bV);jnr=r(Wgt,"TFGPT2LMHeadModel"),Wgt.forEach(t),Dnr=r(_8e," (OpenAI GPT-2 model)"),_8e.forEach(t),Gnr=i(he),$M=n(he,"LI",{});var b8e=s($M);_pe=n(b8e,"STRONG",{});var Hgt=s(_pe);Onr=r(Hgt,"gptj"),Hgt.forEach(t),Vnr=r(b8e," \u2014 "),FV=n(b8e,"A",{href:!0});var Ugt=s(FV);Xnr=r(Ugt,"TFGPTJForCausalLM"),Ugt.forEach(t),znr=r(b8e," (GPT-J model)"),b8e.forEach(t),Qnr=i(he),IM=n(he,"LI",{});var F8e=s(IM);bpe=n(F8e,"STRONG",{});var Jgt=s(bpe);Wnr=r(Jgt,"openai-gpt"),Jgt.forEach(t),Hnr=r(F8e," \u2014 "),vV=n(F8e,"A",{href:!0});var Ygt=s(vV);Unr=r(Ygt,"TFOpenAIGPTLMHeadModel"),Ygt.forEach(t),Jnr=r(F8e," (OpenAI GPT model)"),F8e.forEach(t),Ynr=i(he),qM=n(he,"LI",{});var v8e=s(qM);Fpe=n(v8e,"STRONG",{});var Kgt=s(Fpe);Knr=r(Kgt,"rembert"),Kgt.forEach(t),Znr=r(v8e," \u2014 "),TV=n(v8e,"A",{href:!0});var Zgt=s(TV);esr=r(Zgt,"TFRemBertForCausalLM"),Zgt.forEach(t),osr=r(v8e," (RemBERT model)"),v8e.forEach(t),rsr=i(he),NM=n(he,"LI",{});var T8e=s(NM);vpe=n(T8e,"STRONG",{});var eht=s(vpe);tsr=r(eht,"roberta"),eht.forEach(t),asr=r(T8e," \u2014 "),MV=n(T8e,"A",{href:!0});var oht=s(MV);nsr=r(oht,"TFRobertaForCausalLM"),oht.forEach(t),ssr=r(T8e," (RoBERTa model)"),T8e.forEach(t),lsr=i(he),jM=n(he,"LI",{});var M8e=s(jM);Tpe=n(M8e,"STRONG",{});var rht=s(Tpe);isr=r(rht,"roformer"),rht.forEach(t),dsr=r(M8e," \u2014 "),EV=n(M8e,"A",{href:!0});var tht=s(EV);csr=r(tht,"TFRoFormerForCausalLM"),tht.forEach(t),msr=r(M8e," (RoFormer model)"),M8e.forEach(t),fsr=i(he),DM=n(he,"LI",{});var E8e=s(DM);Mpe=n(E8e,"STRONG",{});var aht=s(Mpe);gsr=r(aht,"transfo-xl"),aht.forEach(t),hsr=r(E8e," \u2014 "),CV=n(E8e,"A",{href:!0});var nht=s(CV);usr=r(nht,"TFTransfoXLLMHeadModel"),nht.forEach(t),psr=r(E8e," (Transformer-XL model)"),E8e.forEach(t),_sr=i(he),GM=n(he,"LI",{});var C8e=s(GM);Epe=n(C8e,"STRONG",{});var sht=s(Epe);bsr=r(sht,"xlm"),sht.forEach(t),Fsr=r(C8e," \u2014 "),wV=n(C8e,"A",{href:!0});var lht=s(wV);vsr=r(lht,"TFXLMWithLMHeadModel"),lht.forEach(t),Tsr=r(C8e," (XLM model)"),C8e.forEach(t),Msr=i(he),OM=n(he,"LI",{});var w8e=s(OM);Cpe=n(w8e,"STRONG",{});var iht=s(Cpe);Esr=r(iht,"xlnet"),iht.forEach(t),Csr=r(w8e," \u2014 "),AV=n(w8e,"A",{href:!0});var dht=s(AV);wsr=r(dht,"TFXLNetLMHeadModel"),dht.forEach(t),Asr=r(w8e," (XLNet model)"),w8e.forEach(t),he.forEach(t),ysr=i(_a),wpe=n(_a,"P",{});var cht=s(wpe);Lsr=r(cht,"Examples:"),cht.forEach(t),xsr=i(_a),f(gy.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),DRe=i(c),Mc=n(c,"H2",{class:!0});var JPe=s(Mc);VM=n(JPe,"A",{id:!0,class:!0,href:!0});var mht=s(VM);Ape=n(mht,"SPAN",{});var fht=s(Ape);f(hy.$$.fragment,fht),fht.forEach(t),mht.forEach(t),ksr=i(JPe),ype=n(JPe,"SPAN",{});var ght=s(ype);Ssr=r(ght,"TFAutoModelForImageClassification"),ght.forEach(t),JPe.forEach(t),GRe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);f(uy.$$.fragment,zl),Rsr=i(zl),Ec=n(zl,"P",{});var zU=s(Ec);Bsr=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yV=n(zU,"A",{href:!0});var hht=s(yV);Psr=r(hht,"from_pretrained()"),hht.forEach(t),$sr=r(zU," class method or the "),LV=n(zU,"A",{href:!0});var uht=s(LV);Isr=r(uht,"from_config()"),uht.forEach(t),qsr=r(zU,` class
method.`),zU.forEach(t),Nsr=i(zl),py=n(zl,"P",{});var YPe=s(py);jsr=r(YPe,"This class cannot be instantiated directly using "),Lpe=n(YPe,"CODE",{});var pht=s(Lpe);Dsr=r(pht,"__init__()"),pht.forEach(t),Gsr=r(YPe," (throws an error)."),YPe.forEach(t),Osr=i(zl),pt=n(zl,"DIV",{class:!0});var Ql=s(pt);f(_y.$$.fragment,Ql),Vsr=i(Ql),xpe=n(Ql,"P",{});var _ht=s(xpe);Xsr=r(_ht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_ht.forEach(t),zsr=i(Ql),Cc=n(Ql,"P",{});var QU=s(Cc);Qsr=r(QU,`Note:
Loading a model from its configuration file does `),kpe=n(QU,"STRONG",{});var bht=s(kpe);Wsr=r(bht,"not"),bht.forEach(t),Hsr=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(QU,"A",{href:!0});var Fht=s(xV);Usr=r(Fht,"from_pretrained()"),Fht.forEach(t),Jsr=r(QU," to load the model weights."),QU.forEach(t),Ysr=i(Ql),Spe=n(Ql,"P",{});var vht=s(Spe);Ksr=r(vht,"Examples:"),vht.forEach(t),Zsr=i(Ql),f(by.$$.fragment,Ql),Ql.forEach(t),elr=i(zl),_o=n(zl,"DIV",{class:!0});var ba=s(_o);f(Fy.$$.fragment,ba),olr=i(ba),Rpe=n(ba,"P",{});var Tht=s(Rpe);rlr=r(Tht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tht.forEach(t),tlr=i(ba),Fn=n(ba,"P",{});var z3=s(Fn);alr=r(z3,"The model class to instantiate is selected based on the "),Bpe=n(z3,"CODE",{});var Mht=s(Bpe);nlr=r(Mht,"model_type"),Mht.forEach(t),slr=r(z3,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(z3,"CODE",{});var Eht=s(Ppe);llr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),ilr=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=n(z3,"CODE",{});var Cht=s($pe);dlr=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),clr=r(z3,":"),z3.forEach(t),mlr=i(ba),vy=n(ba,"UL",{});var KPe=s(vy);XM=n(KPe,"LI",{});var A8e=s(XM);Ipe=n(A8e,"STRONG",{});var wht=s(Ipe);flr=r(wht,"convnext"),wht.forEach(t),glr=r(A8e," \u2014 "),kV=n(A8e,"A",{href:!0});var Aht=s(kV);hlr=r(Aht,"TFConvNextForImageClassification"),Aht.forEach(t),ulr=r(A8e," (ConvNext model)"),A8e.forEach(t),plr=i(KPe),zM=n(KPe,"LI",{});var y8e=s(zM);qpe=n(y8e,"STRONG",{});var yht=s(qpe);_lr=r(yht,"vit"),yht.forEach(t),blr=r(y8e," \u2014 "),SV=n(y8e,"A",{href:!0});var Lht=s(SV);Flr=r(Lht,"TFViTForImageClassification"),Lht.forEach(t),vlr=r(y8e," (ViT model)"),y8e.forEach(t),KPe.forEach(t),Tlr=i(ba),Npe=n(ba,"P",{});var xht=s(Npe);Mlr=r(xht,"Examples:"),xht.forEach(t),Elr=i(ba),f(Ty.$$.fragment,ba),ba.forEach(t),zl.forEach(t),ORe=i(c),wc=n(c,"H2",{class:!0});var ZPe=s(wc);QM=n(ZPe,"A",{id:!0,class:!0,href:!0});var kht=s(QM);jpe=n(kht,"SPAN",{});var Sht=s(jpe);f(My.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),Clr=i(ZPe),Dpe=n(ZPe,"SPAN",{});var Rht=s(Dpe);wlr=r(Rht,"TFAutoModelForMaskedLM"),Rht.forEach(t),ZPe.forEach(t),VRe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);f(Ey.$$.fragment,Wl),Alr=i(Wl),Ac=n(Wl,"P",{});var WU=s(Ac);ylr=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RV=n(WU,"A",{href:!0});var Bht=s(RV);Llr=r(Bht,"from_pretrained()"),Bht.forEach(t),xlr=r(WU," class method or the "),BV=n(WU,"A",{href:!0});var Pht=s(BV);klr=r(Pht,"from_config()"),Pht.forEach(t),Slr=r(WU,` class
method.`),WU.forEach(t),Rlr=i(Wl),Cy=n(Wl,"P",{});var e$e=s(Cy);Blr=r(e$e,"This class cannot be instantiated directly using "),Gpe=n(e$e,"CODE",{});var $ht=s(Gpe);Plr=r($ht,"__init__()"),$ht.forEach(t),$lr=r(e$e," (throws an error)."),e$e.forEach(t),Ilr=i(Wl),_t=n(Wl,"DIV",{class:!0});var Hl=s(_t);f(wy.$$.fragment,Hl),qlr=i(Hl),Ope=n(Hl,"P",{});var Iht=s(Ope);Nlr=r(Iht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iht.forEach(t),jlr=i(Hl),yc=n(Hl,"P",{});var HU=s(yc);Dlr=r(HU,`Note:
Loading a model from its configuration file does `),Vpe=n(HU,"STRONG",{});var qht=s(Vpe);Glr=r(qht,"not"),qht.forEach(t),Olr=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(HU,"A",{href:!0});var Nht=s(PV);Vlr=r(Nht,"from_pretrained()"),Nht.forEach(t),Xlr=r(HU," to load the model weights."),HU.forEach(t),zlr=i(Hl),Xpe=n(Hl,"P",{});var jht=s(Xpe);Qlr=r(jht,"Examples:"),jht.forEach(t),Wlr=i(Hl),f(Ay.$$.fragment,Hl),Hl.forEach(t),Hlr=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);f(yy.$$.fragment,Fa),Ulr=i(Fa),zpe=n(Fa,"P",{});var Dht=s(zpe);Jlr=r(Dht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dht.forEach(t),Ylr=i(Fa),vn=n(Fa,"P",{});var Q3=s(vn);Klr=r(Q3,"The model class to instantiate is selected based on the "),Qpe=n(Q3,"CODE",{});var Ght=s(Qpe);Zlr=r(Ght,"model_type"),Ght.forEach(t),eir=r(Q3,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(Q3,"CODE",{});var Oht=s(Wpe);oir=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),rir=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(Q3,"CODE",{});var Vht=s(Hpe);tir=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),air=r(Q3,":"),Q3.forEach(t),nir=i(Fa),J=n(Fa,"UL",{});var ee=s(J);WM=n(ee,"LI",{});var L8e=s(WM);Upe=n(L8e,"STRONG",{});var Xht=s(Upe);sir=r(Xht,"albert"),Xht.forEach(t),lir=r(L8e," \u2014 "),$V=n(L8e,"A",{href:!0});var zht=s($V);iir=r(zht,"TFAlbertForMaskedLM"),zht.forEach(t),dir=r(L8e," (ALBERT model)"),L8e.forEach(t),cir=i(ee),HM=n(ee,"LI",{});var x8e=s(HM);Jpe=n(x8e,"STRONG",{});var Qht=s(Jpe);mir=r(Qht,"bert"),Qht.forEach(t),fir=r(x8e," \u2014 "),IV=n(x8e,"A",{href:!0});var Wht=s(IV);gir=r(Wht,"TFBertForMaskedLM"),Wht.forEach(t),hir=r(x8e," (BERT model)"),x8e.forEach(t),uir=i(ee),UM=n(ee,"LI",{});var k8e=s(UM);Ype=n(k8e,"STRONG",{});var Hht=s(Ype);pir=r(Hht,"camembert"),Hht.forEach(t),_ir=r(k8e," \u2014 "),qV=n(k8e,"A",{href:!0});var Uht=s(qV);bir=r(Uht,"TFCamembertForMaskedLM"),Uht.forEach(t),Fir=r(k8e," (CamemBERT model)"),k8e.forEach(t),vir=i(ee),JM=n(ee,"LI",{});var S8e=s(JM);Kpe=n(S8e,"STRONG",{});var Jht=s(Kpe);Tir=r(Jht,"convbert"),Jht.forEach(t),Mir=r(S8e," \u2014 "),NV=n(S8e,"A",{href:!0});var Yht=s(NV);Eir=r(Yht,"TFConvBertForMaskedLM"),Yht.forEach(t),Cir=r(S8e," (ConvBERT model)"),S8e.forEach(t),wir=i(ee),YM=n(ee,"LI",{});var R8e=s(YM);Zpe=n(R8e,"STRONG",{});var Kht=s(Zpe);Air=r(Kht,"deberta"),Kht.forEach(t),yir=r(R8e," \u2014 "),jV=n(R8e,"A",{href:!0});var Zht=s(jV);Lir=r(Zht,"TFDebertaForMaskedLM"),Zht.forEach(t),xir=r(R8e," (DeBERTa model)"),R8e.forEach(t),kir=i(ee),KM=n(ee,"LI",{});var B8e=s(KM);e_e=n(B8e,"STRONG",{});var eut=s(e_e);Sir=r(eut,"deberta-v2"),eut.forEach(t),Rir=r(B8e," \u2014 "),DV=n(B8e,"A",{href:!0});var out=s(DV);Bir=r(out,"TFDebertaV2ForMaskedLM"),out.forEach(t),Pir=r(B8e," (DeBERTa-v2 model)"),B8e.forEach(t),$ir=i(ee),ZM=n(ee,"LI",{});var P8e=s(ZM);o_e=n(P8e,"STRONG",{});var rut=s(o_e);Iir=r(rut,"distilbert"),rut.forEach(t),qir=r(P8e," \u2014 "),GV=n(P8e,"A",{href:!0});var tut=s(GV);Nir=r(tut,"TFDistilBertForMaskedLM"),tut.forEach(t),jir=r(P8e," (DistilBERT model)"),P8e.forEach(t),Dir=i(ee),e4=n(ee,"LI",{});var $8e=s(e4);r_e=n($8e,"STRONG",{});var aut=s(r_e);Gir=r(aut,"electra"),aut.forEach(t),Oir=r($8e," \u2014 "),OV=n($8e,"A",{href:!0});var nut=s(OV);Vir=r(nut,"TFElectraForMaskedLM"),nut.forEach(t),Xir=r($8e," (ELECTRA model)"),$8e.forEach(t),zir=i(ee),o4=n(ee,"LI",{});var I8e=s(o4);t_e=n(I8e,"STRONG",{});var sut=s(t_e);Qir=r(sut,"flaubert"),sut.forEach(t),Wir=r(I8e," \u2014 "),VV=n(I8e,"A",{href:!0});var lut=s(VV);Hir=r(lut,"TFFlaubertWithLMHeadModel"),lut.forEach(t),Uir=r(I8e," (FlauBERT model)"),I8e.forEach(t),Jir=i(ee),r4=n(ee,"LI",{});var q8e=s(r4);a_e=n(q8e,"STRONG",{});var iut=s(a_e);Yir=r(iut,"funnel"),iut.forEach(t),Kir=r(q8e," \u2014 "),XV=n(q8e,"A",{href:!0});var dut=s(XV);Zir=r(dut,"TFFunnelForMaskedLM"),dut.forEach(t),edr=r(q8e," (Funnel Transformer model)"),q8e.forEach(t),odr=i(ee),t4=n(ee,"LI",{});var N8e=s(t4);n_e=n(N8e,"STRONG",{});var cut=s(n_e);rdr=r(cut,"layoutlm"),cut.forEach(t),tdr=r(N8e," \u2014 "),zV=n(N8e,"A",{href:!0});var mut=s(zV);adr=r(mut,"TFLayoutLMForMaskedLM"),mut.forEach(t),ndr=r(N8e," (LayoutLM model)"),N8e.forEach(t),sdr=i(ee),a4=n(ee,"LI",{});var j8e=s(a4);s_e=n(j8e,"STRONG",{});var fut=s(s_e);ldr=r(fut,"longformer"),fut.forEach(t),idr=r(j8e," \u2014 "),QV=n(j8e,"A",{href:!0});var gut=s(QV);ddr=r(gut,"TFLongformerForMaskedLM"),gut.forEach(t),cdr=r(j8e," (Longformer model)"),j8e.forEach(t),mdr=i(ee),n4=n(ee,"LI",{});var D8e=s(n4);l_e=n(D8e,"STRONG",{});var hut=s(l_e);fdr=r(hut,"mobilebert"),hut.forEach(t),gdr=r(D8e," \u2014 "),WV=n(D8e,"A",{href:!0});var uut=s(WV);hdr=r(uut,"TFMobileBertForMaskedLM"),uut.forEach(t),udr=r(D8e," (MobileBERT model)"),D8e.forEach(t),pdr=i(ee),s4=n(ee,"LI",{});var G8e=s(s4);i_e=n(G8e,"STRONG",{});var put=s(i_e);_dr=r(put,"mpnet"),put.forEach(t),bdr=r(G8e," \u2014 "),HV=n(G8e,"A",{href:!0});var _ut=s(HV);Fdr=r(_ut,"TFMPNetForMaskedLM"),_ut.forEach(t),vdr=r(G8e," (MPNet model)"),G8e.forEach(t),Tdr=i(ee),l4=n(ee,"LI",{});var O8e=s(l4);d_e=n(O8e,"STRONG",{});var but=s(d_e);Mdr=r(but,"rembert"),but.forEach(t),Edr=r(O8e," \u2014 "),UV=n(O8e,"A",{href:!0});var Fut=s(UV);Cdr=r(Fut,"TFRemBertForMaskedLM"),Fut.forEach(t),wdr=r(O8e," (RemBERT model)"),O8e.forEach(t),Adr=i(ee),i4=n(ee,"LI",{});var V8e=s(i4);c_e=n(V8e,"STRONG",{});var vut=s(c_e);ydr=r(vut,"roberta"),vut.forEach(t),Ldr=r(V8e," \u2014 "),JV=n(V8e,"A",{href:!0});var Tut=s(JV);xdr=r(Tut,"TFRobertaForMaskedLM"),Tut.forEach(t),kdr=r(V8e," (RoBERTa model)"),V8e.forEach(t),Sdr=i(ee),d4=n(ee,"LI",{});var X8e=s(d4);m_e=n(X8e,"STRONG",{});var Mut=s(m_e);Rdr=r(Mut,"roformer"),Mut.forEach(t),Bdr=r(X8e," \u2014 "),YV=n(X8e,"A",{href:!0});var Eut=s(YV);Pdr=r(Eut,"TFRoFormerForMaskedLM"),Eut.forEach(t),$dr=r(X8e," (RoFormer model)"),X8e.forEach(t),Idr=i(ee),c4=n(ee,"LI",{});var z8e=s(c4);f_e=n(z8e,"STRONG",{});var Cut=s(f_e);qdr=r(Cut,"tapas"),Cut.forEach(t),Ndr=r(z8e," \u2014 "),KV=n(z8e,"A",{href:!0});var wut=s(KV);jdr=r(wut,"TFTapasForMaskedLM"),wut.forEach(t),Ddr=r(z8e," (TAPAS model)"),z8e.forEach(t),Gdr=i(ee),m4=n(ee,"LI",{});var Q8e=s(m4);g_e=n(Q8e,"STRONG",{});var Aut=s(g_e);Odr=r(Aut,"xlm"),Aut.forEach(t),Vdr=r(Q8e," \u2014 "),ZV=n(Q8e,"A",{href:!0});var yut=s(ZV);Xdr=r(yut,"TFXLMWithLMHeadModel"),yut.forEach(t),zdr=r(Q8e," (XLM model)"),Q8e.forEach(t),Qdr=i(ee),f4=n(ee,"LI",{});var W8e=s(f4);h_e=n(W8e,"STRONG",{});var Lut=s(h_e);Wdr=r(Lut,"xlm-roberta"),Lut.forEach(t),Hdr=r(W8e," \u2014 "),eX=n(W8e,"A",{href:!0});var xut=s(eX);Udr=r(xut,"TFXLMRobertaForMaskedLM"),xut.forEach(t),Jdr=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),ee.forEach(t),Ydr=i(Fa),u_e=n(Fa,"P",{});var kut=s(u_e);Kdr=r(kut,"Examples:"),kut.forEach(t),Zdr=i(Fa),f(Ly.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),XRe=i(c),Lc=n(c,"H2",{class:!0});var o$e=s(Lc);g4=n(o$e,"A",{id:!0,class:!0,href:!0});var Sut=s(g4);p_e=n(Sut,"SPAN",{});var Rut=s(p_e);f(xy.$$.fragment,Rut),Rut.forEach(t),Sut.forEach(t),ecr=i(o$e),__e=n(o$e,"SPAN",{});var But=s(__e);ocr=r(But,"TFAutoModelForSeq2SeqLM"),But.forEach(t),o$e.forEach(t),zRe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);f(ky.$$.fragment,Ul),rcr=i(Ul),xc=n(Ul,"P",{});var UU=s(xc);tcr=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oX=n(UU,"A",{href:!0});var Put=s(oX);acr=r(Put,"from_pretrained()"),Put.forEach(t),ncr=r(UU," class method or the "),rX=n(UU,"A",{href:!0});var $ut=s(rX);scr=r($ut,"from_config()"),$ut.forEach(t),lcr=r(UU,` class
method.`),UU.forEach(t),icr=i(Ul),Sy=n(Ul,"P",{});var r$e=s(Sy);dcr=r(r$e,"This class cannot be instantiated directly using "),b_e=n(r$e,"CODE",{});var Iut=s(b_e);ccr=r(Iut,"__init__()"),Iut.forEach(t),mcr=r(r$e," (throws an error)."),r$e.forEach(t),fcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);f(Ry.$$.fragment,Jl),gcr=i(Jl),F_e=n(Jl,"P",{});var qut=s(F_e);hcr=r(qut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qut.forEach(t),ucr=i(Jl),kc=n(Jl,"P",{});var JU=s(kc);pcr=r(JU,`Note:
Loading a model from its configuration file does `),v_e=n(JU,"STRONG",{});var Nut=s(v_e);_cr=r(Nut,"not"),Nut.forEach(t),bcr=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(JU,"A",{href:!0});var jut=s(tX);Fcr=r(jut,"from_pretrained()"),jut.forEach(t),vcr=r(JU," to load the model weights."),JU.forEach(t),Tcr=i(Jl),T_e=n(Jl,"P",{});var Dut=s(T_e);Mcr=r(Dut,"Examples:"),Dut.forEach(t),Ecr=i(Jl),f(By.$$.fragment,Jl),Jl.forEach(t),Ccr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);f(Py.$$.fragment,va),wcr=i(va),M_e=n(va,"P",{});var Gut=s(M_e);Acr=r(Gut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Gut.forEach(t),ycr=i(va),Tn=n(va,"P",{});var W3=s(Tn);Lcr=r(W3,"The model class to instantiate is selected based on the "),E_e=n(W3,"CODE",{});var Out=s(E_e);xcr=r(Out,"model_type"),Out.forEach(t),kcr=r(W3,` property of the config object (either
passed as an argument or loaded from `),C_e=n(W3,"CODE",{});var Vut=s(C_e);Scr=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),Rcr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(W3,"CODE",{});var Xut=s(w_e);Bcr=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),Pcr=r(W3,":"),W3.forEach(t),$cr=i(va),_e=n(va,"UL",{});var we=s(_e);h4=n(we,"LI",{});var H8e=s(h4);A_e=n(H8e,"STRONG",{});var zut=s(A_e);Icr=r(zut,"bart"),zut.forEach(t),qcr=r(H8e," \u2014 "),aX=n(H8e,"A",{href:!0});var Qut=s(aX);Ncr=r(Qut,"TFBartForConditionalGeneration"),Qut.forEach(t),jcr=r(H8e," (BART model)"),H8e.forEach(t),Dcr=i(we),u4=n(we,"LI",{});var U8e=s(u4);y_e=n(U8e,"STRONG",{});var Wut=s(y_e);Gcr=r(Wut,"blenderbot"),Wut.forEach(t),Ocr=r(U8e," \u2014 "),nX=n(U8e,"A",{href:!0});var Hut=s(nX);Vcr=r(Hut,"TFBlenderbotForConditionalGeneration"),Hut.forEach(t),Xcr=r(U8e," (Blenderbot model)"),U8e.forEach(t),zcr=i(we),p4=n(we,"LI",{});var J8e=s(p4);L_e=n(J8e,"STRONG",{});var Uut=s(L_e);Qcr=r(Uut,"blenderbot-small"),Uut.forEach(t),Wcr=r(J8e," \u2014 "),sX=n(J8e,"A",{href:!0});var Jut=s(sX);Hcr=r(Jut,"TFBlenderbotSmallForConditionalGeneration"),Jut.forEach(t),Ucr=r(J8e," (BlenderbotSmall model)"),J8e.forEach(t),Jcr=i(we),_4=n(we,"LI",{});var Y8e=s(_4);x_e=n(Y8e,"STRONG",{});var Yut=s(x_e);Ycr=r(Yut,"encoder-decoder"),Yut.forEach(t),Kcr=r(Y8e," \u2014 "),lX=n(Y8e,"A",{href:!0});var Kut=s(lX);Zcr=r(Kut,"TFEncoderDecoderModel"),Kut.forEach(t),emr=r(Y8e," (Encoder decoder model)"),Y8e.forEach(t),omr=i(we),b4=n(we,"LI",{});var K8e=s(b4);k_e=n(K8e,"STRONG",{});var Zut=s(k_e);rmr=r(Zut,"led"),Zut.forEach(t),tmr=r(K8e," \u2014 "),iX=n(K8e,"A",{href:!0});var ept=s(iX);amr=r(ept,"TFLEDForConditionalGeneration"),ept.forEach(t),nmr=r(K8e," (LED model)"),K8e.forEach(t),smr=i(we),F4=n(we,"LI",{});var Z8e=s(F4);S_e=n(Z8e,"STRONG",{});var opt=s(S_e);lmr=r(opt,"marian"),opt.forEach(t),imr=r(Z8e," \u2014 "),dX=n(Z8e,"A",{href:!0});var rpt=s(dX);dmr=r(rpt,"TFMarianMTModel"),rpt.forEach(t),cmr=r(Z8e," (Marian model)"),Z8e.forEach(t),mmr=i(we),v4=n(we,"LI",{});var e9e=s(v4);R_e=n(e9e,"STRONG",{});var tpt=s(R_e);fmr=r(tpt,"mbart"),tpt.forEach(t),gmr=r(e9e," \u2014 "),cX=n(e9e,"A",{href:!0});var apt=s(cX);hmr=r(apt,"TFMBartForConditionalGeneration"),apt.forEach(t),umr=r(e9e," (mBART model)"),e9e.forEach(t),pmr=i(we),T4=n(we,"LI",{});var o9e=s(T4);B_e=n(o9e,"STRONG",{});var npt=s(B_e);_mr=r(npt,"mt5"),npt.forEach(t),bmr=r(o9e," \u2014 "),mX=n(o9e,"A",{href:!0});var spt=s(mX);Fmr=r(spt,"TFMT5ForConditionalGeneration"),spt.forEach(t),vmr=r(o9e," (mT5 model)"),o9e.forEach(t),Tmr=i(we),M4=n(we,"LI",{});var r9e=s(M4);P_e=n(r9e,"STRONG",{});var lpt=s(P_e);Mmr=r(lpt,"pegasus"),lpt.forEach(t),Emr=r(r9e," \u2014 "),fX=n(r9e,"A",{href:!0});var ipt=s(fX);Cmr=r(ipt,"TFPegasusForConditionalGeneration"),ipt.forEach(t),wmr=r(r9e," (Pegasus model)"),r9e.forEach(t),Amr=i(we),E4=n(we,"LI",{});var t9e=s(E4);$_e=n(t9e,"STRONG",{});var dpt=s($_e);ymr=r(dpt,"t5"),dpt.forEach(t),Lmr=r(t9e," \u2014 "),gX=n(t9e,"A",{href:!0});var cpt=s(gX);xmr=r(cpt,"TFT5ForConditionalGeneration"),cpt.forEach(t),kmr=r(t9e," (T5 model)"),t9e.forEach(t),we.forEach(t),Smr=i(va),I_e=n(va,"P",{});var mpt=s(I_e);Rmr=r(mpt,"Examples:"),mpt.forEach(t),Bmr=i(va),f($y.$$.fragment,va),va.forEach(t),Ul.forEach(t),QRe=i(c),Sc=n(c,"H2",{class:!0});var t$e=s(Sc);C4=n(t$e,"A",{id:!0,class:!0,href:!0});var fpt=s(C4);q_e=n(fpt,"SPAN",{});var gpt=s(q_e);f(Iy.$$.fragment,gpt),gpt.forEach(t),fpt.forEach(t),Pmr=i(t$e),N_e=n(t$e,"SPAN",{});var hpt=s(N_e);$mr=r(hpt,"TFAutoModelForSequenceClassification"),hpt.forEach(t),t$e.forEach(t),WRe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);f(qy.$$.fragment,Yl),Imr=i(Yl),Rc=n(Yl,"P",{});var YU=s(Rc);qmr=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hX=n(YU,"A",{href:!0});var upt=s(hX);Nmr=r(upt,"from_pretrained()"),upt.forEach(t),jmr=r(YU," class method or the "),uX=n(YU,"A",{href:!0});var ppt=s(uX);Dmr=r(ppt,"from_config()"),ppt.forEach(t),Gmr=r(YU,` class
method.`),YU.forEach(t),Omr=i(Yl),Ny=n(Yl,"P",{});var a$e=s(Ny);Vmr=r(a$e,"This class cannot be instantiated directly using "),j_e=n(a$e,"CODE",{});var _pt=s(j_e);Xmr=r(_pt,"__init__()"),_pt.forEach(t),zmr=r(a$e," (throws an error)."),a$e.forEach(t),Qmr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);f(jy.$$.fragment,Kl),Wmr=i(Kl),D_e=n(Kl,"P",{});var bpt=s(D_e);Hmr=r(bpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bpt.forEach(t),Umr=i(Kl),Bc=n(Kl,"P",{});var KU=s(Bc);Jmr=r(KU,`Note:
Loading a model from its configuration file does `),G_e=n(KU,"STRONG",{});var Fpt=s(G_e);Ymr=r(Fpt,"not"),Fpt.forEach(t),Kmr=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(KU,"A",{href:!0});var vpt=s(pX);Zmr=r(vpt,"from_pretrained()"),vpt.forEach(t),efr=r(KU," to load the model weights."),KU.forEach(t),ofr=i(Kl),O_e=n(Kl,"P",{});var Tpt=s(O_e);rfr=r(Tpt,"Examples:"),Tpt.forEach(t),tfr=i(Kl),f(Dy.$$.fragment,Kl),Kl.forEach(t),afr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);f(Gy.$$.fragment,Ta),nfr=i(Ta),V_e=n(Ta,"P",{});var Mpt=s(V_e);sfr=r(Mpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Mpt.forEach(t),lfr=i(Ta),Mn=n(Ta,"P",{});var H3=s(Mn);ifr=r(H3,"The model class to instantiate is selected based on the "),X_e=n(H3,"CODE",{});var Ept=s(X_e);dfr=r(Ept,"model_type"),Ept.forEach(t),cfr=r(H3,` property of the config object (either
passed as an argument or loaded from `),z_e=n(H3,"CODE",{});var Cpt=s(z_e);mfr=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),ffr=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(H3,"CODE",{});var wpt=s(Q_e);gfr=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),hfr=r(H3,":"),H3.forEach(t),ufr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);w4=n(Q,"LI",{});var a9e=s(w4);W_e=n(a9e,"STRONG",{});var Apt=s(W_e);pfr=r(Apt,"albert"),Apt.forEach(t),_fr=r(a9e," \u2014 "),_X=n(a9e,"A",{href:!0});var ypt=s(_X);bfr=r(ypt,"TFAlbertForSequenceClassification"),ypt.forEach(t),Ffr=r(a9e," (ALBERT model)"),a9e.forEach(t),vfr=i(Q),A4=n(Q,"LI",{});var n9e=s(A4);H_e=n(n9e,"STRONG",{});var Lpt=s(H_e);Tfr=r(Lpt,"bert"),Lpt.forEach(t),Mfr=r(n9e," \u2014 "),bX=n(n9e,"A",{href:!0});var xpt=s(bX);Efr=r(xpt,"TFBertForSequenceClassification"),xpt.forEach(t),Cfr=r(n9e," (BERT model)"),n9e.forEach(t),wfr=i(Q),y4=n(Q,"LI",{});var s9e=s(y4);U_e=n(s9e,"STRONG",{});var kpt=s(U_e);Afr=r(kpt,"camembert"),kpt.forEach(t),yfr=r(s9e," \u2014 "),FX=n(s9e,"A",{href:!0});var Spt=s(FX);Lfr=r(Spt,"TFCamembertForSequenceClassification"),Spt.forEach(t),xfr=r(s9e," (CamemBERT model)"),s9e.forEach(t),kfr=i(Q),L4=n(Q,"LI",{});var l9e=s(L4);J_e=n(l9e,"STRONG",{});var Rpt=s(J_e);Sfr=r(Rpt,"convbert"),Rpt.forEach(t),Rfr=r(l9e," \u2014 "),vX=n(l9e,"A",{href:!0});var Bpt=s(vX);Bfr=r(Bpt,"TFConvBertForSequenceClassification"),Bpt.forEach(t),Pfr=r(l9e," (ConvBERT model)"),l9e.forEach(t),$fr=i(Q),x4=n(Q,"LI",{});var i9e=s(x4);Y_e=n(i9e,"STRONG",{});var Ppt=s(Y_e);Ifr=r(Ppt,"ctrl"),Ppt.forEach(t),qfr=r(i9e," \u2014 "),TX=n(i9e,"A",{href:!0});var $pt=s(TX);Nfr=r($pt,"TFCTRLForSequenceClassification"),$pt.forEach(t),jfr=r(i9e," (CTRL model)"),i9e.forEach(t),Dfr=i(Q),k4=n(Q,"LI",{});var d9e=s(k4);K_e=n(d9e,"STRONG",{});var Ipt=s(K_e);Gfr=r(Ipt,"deberta"),Ipt.forEach(t),Ofr=r(d9e," \u2014 "),MX=n(d9e,"A",{href:!0});var qpt=s(MX);Vfr=r(qpt,"TFDebertaForSequenceClassification"),qpt.forEach(t),Xfr=r(d9e," (DeBERTa model)"),d9e.forEach(t),zfr=i(Q),S4=n(Q,"LI",{});var c9e=s(S4);Z_e=n(c9e,"STRONG",{});var Npt=s(Z_e);Qfr=r(Npt,"deberta-v2"),Npt.forEach(t),Wfr=r(c9e," \u2014 "),EX=n(c9e,"A",{href:!0});var jpt=s(EX);Hfr=r(jpt,"TFDebertaV2ForSequenceClassification"),jpt.forEach(t),Ufr=r(c9e," (DeBERTa-v2 model)"),c9e.forEach(t),Jfr=i(Q),R4=n(Q,"LI",{});var m9e=s(R4);ebe=n(m9e,"STRONG",{});var Dpt=s(ebe);Yfr=r(Dpt,"distilbert"),Dpt.forEach(t),Kfr=r(m9e," \u2014 "),CX=n(m9e,"A",{href:!0});var Gpt=s(CX);Zfr=r(Gpt,"TFDistilBertForSequenceClassification"),Gpt.forEach(t),egr=r(m9e," (DistilBERT model)"),m9e.forEach(t),ogr=i(Q),B4=n(Q,"LI",{});var f9e=s(B4);obe=n(f9e,"STRONG",{});var Opt=s(obe);rgr=r(Opt,"electra"),Opt.forEach(t),tgr=r(f9e," \u2014 "),wX=n(f9e,"A",{href:!0});var Vpt=s(wX);agr=r(Vpt,"TFElectraForSequenceClassification"),Vpt.forEach(t),ngr=r(f9e," (ELECTRA model)"),f9e.forEach(t),sgr=i(Q),P4=n(Q,"LI",{});var g9e=s(P4);rbe=n(g9e,"STRONG",{});var Xpt=s(rbe);lgr=r(Xpt,"flaubert"),Xpt.forEach(t),igr=r(g9e," \u2014 "),AX=n(g9e,"A",{href:!0});var zpt=s(AX);dgr=r(zpt,"TFFlaubertForSequenceClassification"),zpt.forEach(t),cgr=r(g9e," (FlauBERT model)"),g9e.forEach(t),mgr=i(Q),$4=n(Q,"LI",{});var h9e=s($4);tbe=n(h9e,"STRONG",{});var Qpt=s(tbe);fgr=r(Qpt,"funnel"),Qpt.forEach(t),ggr=r(h9e," \u2014 "),yX=n(h9e,"A",{href:!0});var Wpt=s(yX);hgr=r(Wpt,"TFFunnelForSequenceClassification"),Wpt.forEach(t),ugr=r(h9e," (Funnel Transformer model)"),h9e.forEach(t),pgr=i(Q),I4=n(Q,"LI",{});var u9e=s(I4);abe=n(u9e,"STRONG",{});var Hpt=s(abe);_gr=r(Hpt,"gpt2"),Hpt.forEach(t),bgr=r(u9e," \u2014 "),LX=n(u9e,"A",{href:!0});var Upt=s(LX);Fgr=r(Upt,"TFGPT2ForSequenceClassification"),Upt.forEach(t),vgr=r(u9e," (OpenAI GPT-2 model)"),u9e.forEach(t),Tgr=i(Q),q4=n(Q,"LI",{});var p9e=s(q4);nbe=n(p9e,"STRONG",{});var Jpt=s(nbe);Mgr=r(Jpt,"gptj"),Jpt.forEach(t),Egr=r(p9e," \u2014 "),xX=n(p9e,"A",{href:!0});var Ypt=s(xX);Cgr=r(Ypt,"TFGPTJForSequenceClassification"),Ypt.forEach(t),wgr=r(p9e," (GPT-J model)"),p9e.forEach(t),Agr=i(Q),N4=n(Q,"LI",{});var _9e=s(N4);sbe=n(_9e,"STRONG",{});var Kpt=s(sbe);ygr=r(Kpt,"layoutlm"),Kpt.forEach(t),Lgr=r(_9e," \u2014 "),kX=n(_9e,"A",{href:!0});var Zpt=s(kX);xgr=r(Zpt,"TFLayoutLMForSequenceClassification"),Zpt.forEach(t),kgr=r(_9e," (LayoutLM model)"),_9e.forEach(t),Sgr=i(Q),j4=n(Q,"LI",{});var b9e=s(j4);lbe=n(b9e,"STRONG",{});var e_t=s(lbe);Rgr=r(e_t,"longformer"),e_t.forEach(t),Bgr=r(b9e," \u2014 "),SX=n(b9e,"A",{href:!0});var o_t=s(SX);Pgr=r(o_t,"TFLongformerForSequenceClassification"),o_t.forEach(t),$gr=r(b9e," (Longformer model)"),b9e.forEach(t),Igr=i(Q),D4=n(Q,"LI",{});var F9e=s(D4);ibe=n(F9e,"STRONG",{});var r_t=s(ibe);qgr=r(r_t,"mobilebert"),r_t.forEach(t),Ngr=r(F9e," \u2014 "),RX=n(F9e,"A",{href:!0});var t_t=s(RX);jgr=r(t_t,"TFMobileBertForSequenceClassification"),t_t.forEach(t),Dgr=r(F9e," (MobileBERT model)"),F9e.forEach(t),Ggr=i(Q),G4=n(Q,"LI",{});var v9e=s(G4);dbe=n(v9e,"STRONG",{});var a_t=s(dbe);Ogr=r(a_t,"mpnet"),a_t.forEach(t),Vgr=r(v9e," \u2014 "),BX=n(v9e,"A",{href:!0});var n_t=s(BX);Xgr=r(n_t,"TFMPNetForSequenceClassification"),n_t.forEach(t),zgr=r(v9e," (MPNet model)"),v9e.forEach(t),Qgr=i(Q),O4=n(Q,"LI",{});var T9e=s(O4);cbe=n(T9e,"STRONG",{});var s_t=s(cbe);Wgr=r(s_t,"openai-gpt"),s_t.forEach(t),Hgr=r(T9e," \u2014 "),PX=n(T9e,"A",{href:!0});var l_t=s(PX);Ugr=r(l_t,"TFOpenAIGPTForSequenceClassification"),l_t.forEach(t),Jgr=r(T9e," (OpenAI GPT model)"),T9e.forEach(t),Ygr=i(Q),V4=n(Q,"LI",{});var M9e=s(V4);mbe=n(M9e,"STRONG",{});var i_t=s(mbe);Kgr=r(i_t,"rembert"),i_t.forEach(t),Zgr=r(M9e," \u2014 "),$X=n(M9e,"A",{href:!0});var d_t=s($X);ehr=r(d_t,"TFRemBertForSequenceClassification"),d_t.forEach(t),ohr=r(M9e," (RemBERT model)"),M9e.forEach(t),rhr=i(Q),X4=n(Q,"LI",{});var E9e=s(X4);fbe=n(E9e,"STRONG",{});var c_t=s(fbe);thr=r(c_t,"roberta"),c_t.forEach(t),ahr=r(E9e," \u2014 "),IX=n(E9e,"A",{href:!0});var m_t=s(IX);nhr=r(m_t,"TFRobertaForSequenceClassification"),m_t.forEach(t),shr=r(E9e," (RoBERTa model)"),E9e.forEach(t),lhr=i(Q),z4=n(Q,"LI",{});var C9e=s(z4);gbe=n(C9e,"STRONG",{});var f_t=s(gbe);ihr=r(f_t,"roformer"),f_t.forEach(t),dhr=r(C9e," \u2014 "),qX=n(C9e,"A",{href:!0});var g_t=s(qX);chr=r(g_t,"TFRoFormerForSequenceClassification"),g_t.forEach(t),mhr=r(C9e," (RoFormer model)"),C9e.forEach(t),fhr=i(Q),Q4=n(Q,"LI",{});var w9e=s(Q4);hbe=n(w9e,"STRONG",{});var h_t=s(hbe);ghr=r(h_t,"tapas"),h_t.forEach(t),hhr=r(w9e," \u2014 "),NX=n(w9e,"A",{href:!0});var u_t=s(NX);uhr=r(u_t,"TFTapasForSequenceClassification"),u_t.forEach(t),phr=r(w9e," (TAPAS model)"),w9e.forEach(t),_hr=i(Q),W4=n(Q,"LI",{});var A9e=s(W4);ube=n(A9e,"STRONG",{});var p_t=s(ube);bhr=r(p_t,"transfo-xl"),p_t.forEach(t),Fhr=r(A9e," \u2014 "),jX=n(A9e,"A",{href:!0});var __t=s(jX);vhr=r(__t,"TFTransfoXLForSequenceClassification"),__t.forEach(t),Thr=r(A9e," (Transformer-XL model)"),A9e.forEach(t),Mhr=i(Q),H4=n(Q,"LI",{});var y9e=s(H4);pbe=n(y9e,"STRONG",{});var b_t=s(pbe);Ehr=r(b_t,"xlm"),b_t.forEach(t),Chr=r(y9e," \u2014 "),DX=n(y9e,"A",{href:!0});var F_t=s(DX);whr=r(F_t,"TFXLMForSequenceClassification"),F_t.forEach(t),Ahr=r(y9e," (XLM model)"),y9e.forEach(t),yhr=i(Q),U4=n(Q,"LI",{});var L9e=s(U4);_be=n(L9e,"STRONG",{});var v_t=s(_be);Lhr=r(v_t,"xlm-roberta"),v_t.forEach(t),xhr=r(L9e," \u2014 "),GX=n(L9e,"A",{href:!0});var T_t=s(GX);khr=r(T_t,"TFXLMRobertaForSequenceClassification"),T_t.forEach(t),Shr=r(L9e," (XLM-RoBERTa model)"),L9e.forEach(t),Rhr=i(Q),J4=n(Q,"LI",{});var x9e=s(J4);bbe=n(x9e,"STRONG",{});var M_t=s(bbe);Bhr=r(M_t,"xlnet"),M_t.forEach(t),Phr=r(x9e," \u2014 "),OX=n(x9e,"A",{href:!0});var E_t=s(OX);$hr=r(E_t,"TFXLNetForSequenceClassification"),E_t.forEach(t),Ihr=r(x9e," (XLNet model)"),x9e.forEach(t),Q.forEach(t),qhr=i(Ta),Fbe=n(Ta,"P",{});var C_t=s(Fbe);Nhr=r(C_t,"Examples:"),C_t.forEach(t),jhr=i(Ta),f(Oy.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),HRe=i(c),Pc=n(c,"H2",{class:!0});var n$e=s(Pc);Y4=n(n$e,"A",{id:!0,class:!0,href:!0});var w_t=s(Y4);vbe=n(w_t,"SPAN",{});var A_t=s(vbe);f(Vy.$$.fragment,A_t),A_t.forEach(t),w_t.forEach(t),Dhr=i(n$e),Tbe=n(n$e,"SPAN",{});var y_t=s(Tbe);Ghr=r(y_t,"TFAutoModelForMultipleChoice"),y_t.forEach(t),n$e.forEach(t),URe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);f(Xy.$$.fragment,Zl),Ohr=i(Zl),$c=n(Zl,"P",{});var ZU=s($c);Vhr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VX=n(ZU,"A",{href:!0});var L_t=s(VX);Xhr=r(L_t,"from_pretrained()"),L_t.forEach(t),zhr=r(ZU," class method or the "),XX=n(ZU,"A",{href:!0});var x_t=s(XX);Qhr=r(x_t,"from_config()"),x_t.forEach(t),Whr=r(ZU,` class
method.`),ZU.forEach(t),Hhr=i(Zl),zy=n(Zl,"P",{});var s$e=s(zy);Uhr=r(s$e,"This class cannot be instantiated directly using "),Mbe=n(s$e,"CODE",{});var k_t=s(Mbe);Jhr=r(k_t,"__init__()"),k_t.forEach(t),Yhr=r(s$e," (throws an error)."),s$e.forEach(t),Khr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);f(Qy.$$.fragment,ei),Zhr=i(ei),Ebe=n(ei,"P",{});var S_t=s(Ebe);eur=r(S_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S_t.forEach(t),our=i(ei),Ic=n(ei,"P",{});var eJ=s(Ic);rur=r(eJ,`Note:
Loading a model from its configuration file does `),Cbe=n(eJ,"STRONG",{});var R_t=s(Cbe);tur=r(R_t,"not"),R_t.forEach(t),aur=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(eJ,"A",{href:!0});var B_t=s(zX);nur=r(B_t,"from_pretrained()"),B_t.forEach(t),sur=r(eJ," to load the model weights."),eJ.forEach(t),lur=i(ei),wbe=n(ei,"P",{});var P_t=s(wbe);iur=r(P_t,"Examples:"),P_t.forEach(t),dur=i(ei),f(Wy.$$.fragment,ei),ei.forEach(t),cur=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);f(Hy.$$.fragment,Ma),mur=i(Ma),Abe=n(Ma,"P",{});var $_t=s(Abe);fur=r($_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$_t.forEach(t),gur=i(Ma),En=n(Ma,"P",{});var U3=s(En);hur=r(U3,"The model class to instantiate is selected based on the "),ybe=n(U3,"CODE",{});var I_t=s(ybe);uur=r(I_t,"model_type"),I_t.forEach(t),pur=r(U3,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(U3,"CODE",{});var q_t=s(Lbe);_ur=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),bur=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(U3,"CODE",{});var N_t=s(xbe);Fur=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),vur=r(U3,":"),U3.forEach(t),Tur=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);K4=n(le,"LI",{});var k9e=s(K4);kbe=n(k9e,"STRONG",{});var j_t=s(kbe);Mur=r(j_t,"albert"),j_t.forEach(t),Eur=r(k9e," \u2014 "),QX=n(k9e,"A",{href:!0});var D_t=s(QX);Cur=r(D_t,"TFAlbertForMultipleChoice"),D_t.forEach(t),wur=r(k9e," (ALBERT model)"),k9e.forEach(t),Aur=i(le),Z4=n(le,"LI",{});var S9e=s(Z4);Sbe=n(S9e,"STRONG",{});var G_t=s(Sbe);yur=r(G_t,"bert"),G_t.forEach(t),Lur=r(S9e," \u2014 "),WX=n(S9e,"A",{href:!0});var O_t=s(WX);xur=r(O_t,"TFBertForMultipleChoice"),O_t.forEach(t),kur=r(S9e," (BERT model)"),S9e.forEach(t),Sur=i(le),eE=n(le,"LI",{});var R9e=s(eE);Rbe=n(R9e,"STRONG",{});var V_t=s(Rbe);Rur=r(V_t,"camembert"),V_t.forEach(t),Bur=r(R9e," \u2014 "),HX=n(R9e,"A",{href:!0});var X_t=s(HX);Pur=r(X_t,"TFCamembertForMultipleChoice"),X_t.forEach(t),$ur=r(R9e," (CamemBERT model)"),R9e.forEach(t),Iur=i(le),oE=n(le,"LI",{});var B9e=s(oE);Bbe=n(B9e,"STRONG",{});var z_t=s(Bbe);qur=r(z_t,"convbert"),z_t.forEach(t),Nur=r(B9e," \u2014 "),UX=n(B9e,"A",{href:!0});var Q_t=s(UX);jur=r(Q_t,"TFConvBertForMultipleChoice"),Q_t.forEach(t),Dur=r(B9e," (ConvBERT model)"),B9e.forEach(t),Gur=i(le),rE=n(le,"LI",{});var P9e=s(rE);Pbe=n(P9e,"STRONG",{});var W_t=s(Pbe);Our=r(W_t,"distilbert"),W_t.forEach(t),Vur=r(P9e," \u2014 "),JX=n(P9e,"A",{href:!0});var H_t=s(JX);Xur=r(H_t,"TFDistilBertForMultipleChoice"),H_t.forEach(t),zur=r(P9e," (DistilBERT model)"),P9e.forEach(t),Qur=i(le),tE=n(le,"LI",{});var $9e=s(tE);$be=n($9e,"STRONG",{});var U_t=s($be);Wur=r(U_t,"electra"),U_t.forEach(t),Hur=r($9e," \u2014 "),YX=n($9e,"A",{href:!0});var J_t=s(YX);Uur=r(J_t,"TFElectraForMultipleChoice"),J_t.forEach(t),Jur=r($9e," (ELECTRA model)"),$9e.forEach(t),Yur=i(le),aE=n(le,"LI",{});var I9e=s(aE);Ibe=n(I9e,"STRONG",{});var Y_t=s(Ibe);Kur=r(Y_t,"flaubert"),Y_t.forEach(t),Zur=r(I9e," \u2014 "),KX=n(I9e,"A",{href:!0});var K_t=s(KX);epr=r(K_t,"TFFlaubertForMultipleChoice"),K_t.forEach(t),opr=r(I9e," (FlauBERT model)"),I9e.forEach(t),rpr=i(le),nE=n(le,"LI",{});var q9e=s(nE);qbe=n(q9e,"STRONG",{});var Z_t=s(qbe);tpr=r(Z_t,"funnel"),Z_t.forEach(t),apr=r(q9e," \u2014 "),ZX=n(q9e,"A",{href:!0});var ebt=s(ZX);npr=r(ebt,"TFFunnelForMultipleChoice"),ebt.forEach(t),spr=r(q9e," (Funnel Transformer model)"),q9e.forEach(t),lpr=i(le),sE=n(le,"LI",{});var N9e=s(sE);Nbe=n(N9e,"STRONG",{});var obt=s(Nbe);ipr=r(obt,"longformer"),obt.forEach(t),dpr=r(N9e," \u2014 "),ez=n(N9e,"A",{href:!0});var rbt=s(ez);cpr=r(rbt,"TFLongformerForMultipleChoice"),rbt.forEach(t),mpr=r(N9e," (Longformer model)"),N9e.forEach(t),fpr=i(le),lE=n(le,"LI",{});var j9e=s(lE);jbe=n(j9e,"STRONG",{});var tbt=s(jbe);gpr=r(tbt,"mobilebert"),tbt.forEach(t),hpr=r(j9e," \u2014 "),oz=n(j9e,"A",{href:!0});var abt=s(oz);upr=r(abt,"TFMobileBertForMultipleChoice"),abt.forEach(t),ppr=r(j9e," (MobileBERT model)"),j9e.forEach(t),_pr=i(le),iE=n(le,"LI",{});var D9e=s(iE);Dbe=n(D9e,"STRONG",{});var nbt=s(Dbe);bpr=r(nbt,"mpnet"),nbt.forEach(t),Fpr=r(D9e," \u2014 "),rz=n(D9e,"A",{href:!0});var sbt=s(rz);vpr=r(sbt,"TFMPNetForMultipleChoice"),sbt.forEach(t),Tpr=r(D9e," (MPNet model)"),D9e.forEach(t),Mpr=i(le),dE=n(le,"LI",{});var G9e=s(dE);Gbe=n(G9e,"STRONG",{});var lbt=s(Gbe);Epr=r(lbt,"rembert"),lbt.forEach(t),Cpr=r(G9e," \u2014 "),tz=n(G9e,"A",{href:!0});var ibt=s(tz);wpr=r(ibt,"TFRemBertForMultipleChoice"),ibt.forEach(t),Apr=r(G9e," (RemBERT model)"),G9e.forEach(t),ypr=i(le),cE=n(le,"LI",{});var O9e=s(cE);Obe=n(O9e,"STRONG",{});var dbt=s(Obe);Lpr=r(dbt,"roberta"),dbt.forEach(t),xpr=r(O9e," \u2014 "),az=n(O9e,"A",{href:!0});var cbt=s(az);kpr=r(cbt,"TFRobertaForMultipleChoice"),cbt.forEach(t),Spr=r(O9e," (RoBERTa model)"),O9e.forEach(t),Rpr=i(le),mE=n(le,"LI",{});var V9e=s(mE);Vbe=n(V9e,"STRONG",{});var mbt=s(Vbe);Bpr=r(mbt,"roformer"),mbt.forEach(t),Ppr=r(V9e," \u2014 "),nz=n(V9e,"A",{href:!0});var fbt=s(nz);$pr=r(fbt,"TFRoFormerForMultipleChoice"),fbt.forEach(t),Ipr=r(V9e," (RoFormer model)"),V9e.forEach(t),qpr=i(le),fE=n(le,"LI",{});var X9e=s(fE);Xbe=n(X9e,"STRONG",{});var gbt=s(Xbe);Npr=r(gbt,"xlm"),gbt.forEach(t),jpr=r(X9e," \u2014 "),sz=n(X9e,"A",{href:!0});var hbt=s(sz);Dpr=r(hbt,"TFXLMForMultipleChoice"),hbt.forEach(t),Gpr=r(X9e," (XLM model)"),X9e.forEach(t),Opr=i(le),gE=n(le,"LI",{});var z9e=s(gE);zbe=n(z9e,"STRONG",{});var ubt=s(zbe);Vpr=r(ubt,"xlm-roberta"),ubt.forEach(t),Xpr=r(z9e," \u2014 "),lz=n(z9e,"A",{href:!0});var pbt=s(lz);zpr=r(pbt,"TFXLMRobertaForMultipleChoice"),pbt.forEach(t),Qpr=r(z9e," (XLM-RoBERTa model)"),z9e.forEach(t),Wpr=i(le),hE=n(le,"LI",{});var Q9e=s(hE);Qbe=n(Q9e,"STRONG",{});var _bt=s(Qbe);Hpr=r(_bt,"xlnet"),_bt.forEach(t),Upr=r(Q9e," \u2014 "),iz=n(Q9e,"A",{href:!0});var bbt=s(iz);Jpr=r(bbt,"TFXLNetForMultipleChoice"),bbt.forEach(t),Ypr=r(Q9e," (XLNet model)"),Q9e.forEach(t),le.forEach(t),Kpr=i(Ma),Wbe=n(Ma,"P",{});var Fbt=s(Wbe);Zpr=r(Fbt,"Examples:"),Fbt.forEach(t),e_r=i(Ma),f(Uy.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),JRe=i(c),qc=n(c,"H2",{class:!0});var l$e=s(qc);uE=n(l$e,"A",{id:!0,class:!0,href:!0});var vbt=s(uE);Hbe=n(vbt,"SPAN",{});var Tbt=s(Hbe);f(Jy.$$.fragment,Tbt),Tbt.forEach(t),vbt.forEach(t),o_r=i(l$e),Ube=n(l$e,"SPAN",{});var Mbt=s(Ube);r_r=r(Mbt,"TFAutoModelForTableQuestionAnswering"),Mbt.forEach(t),l$e.forEach(t),YRe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);f(Yy.$$.fragment,oi),t_r=i(oi),Nc=n(oi,"P",{});var oJ=s(Nc);a_r=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dz=n(oJ,"A",{href:!0});var Ebt=s(dz);n_r=r(Ebt,"from_pretrained()"),Ebt.forEach(t),s_r=r(oJ," class method or the "),cz=n(oJ,"A",{href:!0});var Cbt=s(cz);l_r=r(Cbt,"from_config()"),Cbt.forEach(t),i_r=r(oJ,` class
method.`),oJ.forEach(t),d_r=i(oi),Ky=n(oi,"P",{});var i$e=s(Ky);c_r=r(i$e,"This class cannot be instantiated directly using "),Jbe=n(i$e,"CODE",{});var wbt=s(Jbe);m_r=r(wbt,"__init__()"),wbt.forEach(t),f_r=r(i$e," (throws an error)."),i$e.forEach(t),g_r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);f(Zy.$$.fragment,ri),h_r=i(ri),Ybe=n(ri,"P",{});var Abt=s(Ybe);u_r=r(Abt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Abt.forEach(t),p_r=i(ri),jc=n(ri,"P",{});var rJ=s(jc);__r=r(rJ,`Note:
Loading a model from its configuration file does `),Kbe=n(rJ,"STRONG",{});var ybt=s(Kbe);b_r=r(ybt,"not"),ybt.forEach(t),F_r=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(rJ,"A",{href:!0});var Lbt=s(mz);v_r=r(Lbt,"from_pretrained()"),Lbt.forEach(t),T_r=r(rJ," to load the model weights."),rJ.forEach(t),M_r=i(ri),Zbe=n(ri,"P",{});var xbt=s(Zbe);E_r=r(xbt,"Examples:"),xbt.forEach(t),C_r=i(ri),f(eL.$$.fragment,ri),ri.forEach(t),w_r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);f(oL.$$.fragment,Ea),A_r=i(Ea),e2e=n(Ea,"P",{});var kbt=s(e2e);y_r=r(kbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kbt.forEach(t),L_r=i(Ea),Cn=n(Ea,"P",{});var J3=s(Cn);x_r=r(J3,"The model class to instantiate is selected based on the "),o2e=n(J3,"CODE",{});var Sbt=s(o2e);k_r=r(Sbt,"model_type"),Sbt.forEach(t),S_r=r(J3,` property of the config object (either
passed as an argument or loaded from `),r2e=n(J3,"CODE",{});var Rbt=s(r2e);R_r=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),B_r=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(J3,"CODE",{});var Bbt=s(t2e);P_r=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),$_r=r(J3,":"),J3.forEach(t),I_r=i(Ea),a2e=n(Ea,"UL",{});var Pbt=s(a2e);pE=n(Pbt,"LI",{});var W9e=s(pE);n2e=n(W9e,"STRONG",{});var $bt=s(n2e);q_r=r($bt,"tapas"),$bt.forEach(t),N_r=r(W9e," \u2014 "),fz=n(W9e,"A",{href:!0});var Ibt=s(fz);j_r=r(Ibt,"TFTapasForQuestionAnswering"),Ibt.forEach(t),D_r=r(W9e," (TAPAS model)"),W9e.forEach(t),Pbt.forEach(t),G_r=i(Ea),s2e=n(Ea,"P",{});var qbt=s(s2e);O_r=r(qbt,"Examples:"),qbt.forEach(t),V_r=i(Ea),f(rL.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),KRe=i(c),Dc=n(c,"H2",{class:!0});var d$e=s(Dc);_E=n(d$e,"A",{id:!0,class:!0,href:!0});var Nbt=s(_E);l2e=n(Nbt,"SPAN",{});var jbt=s(l2e);f(tL.$$.fragment,jbt),jbt.forEach(t),Nbt.forEach(t),X_r=i(d$e),i2e=n(d$e,"SPAN",{});var Dbt=s(i2e);z_r=r(Dbt,"TFAutoModelForTokenClassification"),Dbt.forEach(t),d$e.forEach(t),ZRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);f(aL.$$.fragment,ti),Q_r=i(ti),Gc=n(ti,"P",{});var tJ=s(Gc);W_r=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gz=n(tJ,"A",{href:!0});var Gbt=s(gz);H_r=r(Gbt,"from_pretrained()"),Gbt.forEach(t),U_r=r(tJ," class method or the "),hz=n(tJ,"A",{href:!0});var Obt=s(hz);J_r=r(Obt,"from_config()"),Obt.forEach(t),Y_r=r(tJ,` class
method.`),tJ.forEach(t),K_r=i(ti),nL=n(ti,"P",{});var c$e=s(nL);Z_r=r(c$e,"This class cannot be instantiated directly using "),d2e=n(c$e,"CODE",{});var Vbt=s(d2e);ebr=r(Vbt,"__init__()"),Vbt.forEach(t),obr=r(c$e," (throws an error)."),c$e.forEach(t),rbr=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);f(sL.$$.fragment,ai),tbr=i(ai),c2e=n(ai,"P",{});var Xbt=s(c2e);abr=r(Xbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xbt.forEach(t),nbr=i(ai),Oc=n(ai,"P",{});var aJ=s(Oc);sbr=r(aJ,`Note:
Loading a model from its configuration file does `),m2e=n(aJ,"STRONG",{});var zbt=s(m2e);lbr=r(zbt,"not"),zbt.forEach(t),ibr=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(aJ,"A",{href:!0});var Qbt=s(uz);dbr=r(Qbt,"from_pretrained()"),Qbt.forEach(t),cbr=r(aJ," to load the model weights."),aJ.forEach(t),mbr=i(ai),f2e=n(ai,"P",{});var Wbt=s(f2e);fbr=r(Wbt,"Examples:"),Wbt.forEach(t),gbr=i(ai),f(lL.$$.fragment,ai),ai.forEach(t),hbr=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);f(iL.$$.fragment,Ca),ubr=i(Ca),g2e=n(Ca,"P",{});var Hbt=s(g2e);pbr=r(Hbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hbt.forEach(t),_br=i(Ca),wn=n(Ca,"P",{});var Y3=s(wn);bbr=r(Y3,"The model class to instantiate is selected based on the "),h2e=n(Y3,"CODE",{});var Ubt=s(h2e);Fbr=r(Ubt,"model_type"),Ubt.forEach(t),vbr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),u2e=n(Y3,"CODE",{});var Jbt=s(u2e);Tbr=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),Mbr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(Y3,"CODE",{});var Ybt=s(p2e);Ebr=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),Cbr=r(Y3,":"),Y3.forEach(t),wbr=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);bE=n(oe,"LI",{});var H9e=s(bE);_2e=n(H9e,"STRONG",{});var Kbt=s(_2e);Abr=r(Kbt,"albert"),Kbt.forEach(t),ybr=r(H9e," \u2014 "),pz=n(H9e,"A",{href:!0});var Zbt=s(pz);Lbr=r(Zbt,"TFAlbertForTokenClassification"),Zbt.forEach(t),xbr=r(H9e," (ALBERT model)"),H9e.forEach(t),kbr=i(oe),FE=n(oe,"LI",{});var U9e=s(FE);b2e=n(U9e,"STRONG",{});var e2t=s(b2e);Sbr=r(e2t,"bert"),e2t.forEach(t),Rbr=r(U9e," \u2014 "),_z=n(U9e,"A",{href:!0});var o2t=s(_z);Bbr=r(o2t,"TFBertForTokenClassification"),o2t.forEach(t),Pbr=r(U9e," (BERT model)"),U9e.forEach(t),$br=i(oe),vE=n(oe,"LI",{});var J9e=s(vE);F2e=n(J9e,"STRONG",{});var r2t=s(F2e);Ibr=r(r2t,"camembert"),r2t.forEach(t),qbr=r(J9e," \u2014 "),bz=n(J9e,"A",{href:!0});var t2t=s(bz);Nbr=r(t2t,"TFCamembertForTokenClassification"),t2t.forEach(t),jbr=r(J9e," (CamemBERT model)"),J9e.forEach(t),Dbr=i(oe),TE=n(oe,"LI",{});var Y9e=s(TE);v2e=n(Y9e,"STRONG",{});var a2t=s(v2e);Gbr=r(a2t,"convbert"),a2t.forEach(t),Obr=r(Y9e," \u2014 "),Fz=n(Y9e,"A",{href:!0});var n2t=s(Fz);Vbr=r(n2t,"TFConvBertForTokenClassification"),n2t.forEach(t),Xbr=r(Y9e," (ConvBERT model)"),Y9e.forEach(t),zbr=i(oe),ME=n(oe,"LI",{});var K9e=s(ME);T2e=n(K9e,"STRONG",{});var s2t=s(T2e);Qbr=r(s2t,"deberta"),s2t.forEach(t),Wbr=r(K9e," \u2014 "),vz=n(K9e,"A",{href:!0});var l2t=s(vz);Hbr=r(l2t,"TFDebertaForTokenClassification"),l2t.forEach(t),Ubr=r(K9e," (DeBERTa model)"),K9e.forEach(t),Jbr=i(oe),EE=n(oe,"LI",{});var Z9e=s(EE);M2e=n(Z9e,"STRONG",{});var i2t=s(M2e);Ybr=r(i2t,"deberta-v2"),i2t.forEach(t),Kbr=r(Z9e," \u2014 "),Tz=n(Z9e,"A",{href:!0});var d2t=s(Tz);Zbr=r(d2t,"TFDebertaV2ForTokenClassification"),d2t.forEach(t),e2r=r(Z9e," (DeBERTa-v2 model)"),Z9e.forEach(t),o2r=i(oe),CE=n(oe,"LI",{});var exe=s(CE);E2e=n(exe,"STRONG",{});var c2t=s(E2e);r2r=r(c2t,"distilbert"),c2t.forEach(t),t2r=r(exe," \u2014 "),Mz=n(exe,"A",{href:!0});var m2t=s(Mz);a2r=r(m2t,"TFDistilBertForTokenClassification"),m2t.forEach(t),n2r=r(exe," (DistilBERT model)"),exe.forEach(t),s2r=i(oe),wE=n(oe,"LI",{});var oxe=s(wE);C2e=n(oxe,"STRONG",{});var f2t=s(C2e);l2r=r(f2t,"electra"),f2t.forEach(t),i2r=r(oxe," \u2014 "),Ez=n(oxe,"A",{href:!0});var g2t=s(Ez);d2r=r(g2t,"TFElectraForTokenClassification"),g2t.forEach(t),c2r=r(oxe," (ELECTRA model)"),oxe.forEach(t),m2r=i(oe),AE=n(oe,"LI",{});var rxe=s(AE);w2e=n(rxe,"STRONG",{});var h2t=s(w2e);f2r=r(h2t,"flaubert"),h2t.forEach(t),g2r=r(rxe," \u2014 "),Cz=n(rxe,"A",{href:!0});var u2t=s(Cz);h2r=r(u2t,"TFFlaubertForTokenClassification"),u2t.forEach(t),u2r=r(rxe," (FlauBERT model)"),rxe.forEach(t),p2r=i(oe),yE=n(oe,"LI",{});var txe=s(yE);A2e=n(txe,"STRONG",{});var p2t=s(A2e);_2r=r(p2t,"funnel"),p2t.forEach(t),b2r=r(txe," \u2014 "),wz=n(txe,"A",{href:!0});var _2t=s(wz);F2r=r(_2t,"TFFunnelForTokenClassification"),_2t.forEach(t),v2r=r(txe," (Funnel Transformer model)"),txe.forEach(t),T2r=i(oe),LE=n(oe,"LI",{});var axe=s(LE);y2e=n(axe,"STRONG",{});var b2t=s(y2e);M2r=r(b2t,"layoutlm"),b2t.forEach(t),E2r=r(axe," \u2014 "),Az=n(axe,"A",{href:!0});var F2t=s(Az);C2r=r(F2t,"TFLayoutLMForTokenClassification"),F2t.forEach(t),w2r=r(axe," (LayoutLM model)"),axe.forEach(t),A2r=i(oe),xE=n(oe,"LI",{});var nxe=s(xE);L2e=n(nxe,"STRONG",{});var v2t=s(L2e);y2r=r(v2t,"longformer"),v2t.forEach(t),L2r=r(nxe," \u2014 "),yz=n(nxe,"A",{href:!0});var T2t=s(yz);x2r=r(T2t,"TFLongformerForTokenClassification"),T2t.forEach(t),k2r=r(nxe," (Longformer model)"),nxe.forEach(t),S2r=i(oe),kE=n(oe,"LI",{});var sxe=s(kE);x2e=n(sxe,"STRONG",{});var M2t=s(x2e);R2r=r(M2t,"mobilebert"),M2t.forEach(t),B2r=r(sxe," \u2014 "),Lz=n(sxe,"A",{href:!0});var E2t=s(Lz);P2r=r(E2t,"TFMobileBertForTokenClassification"),E2t.forEach(t),$2r=r(sxe," (MobileBERT model)"),sxe.forEach(t),I2r=i(oe),SE=n(oe,"LI",{});var lxe=s(SE);k2e=n(lxe,"STRONG",{});var C2t=s(k2e);q2r=r(C2t,"mpnet"),C2t.forEach(t),N2r=r(lxe," \u2014 "),xz=n(lxe,"A",{href:!0});var w2t=s(xz);j2r=r(w2t,"TFMPNetForTokenClassification"),w2t.forEach(t),D2r=r(lxe," (MPNet model)"),lxe.forEach(t),G2r=i(oe),RE=n(oe,"LI",{});var ixe=s(RE);S2e=n(ixe,"STRONG",{});var A2t=s(S2e);O2r=r(A2t,"rembert"),A2t.forEach(t),V2r=r(ixe," \u2014 "),kz=n(ixe,"A",{href:!0});var y2t=s(kz);X2r=r(y2t,"TFRemBertForTokenClassification"),y2t.forEach(t),z2r=r(ixe," (RemBERT model)"),ixe.forEach(t),Q2r=i(oe),BE=n(oe,"LI",{});var dxe=s(BE);R2e=n(dxe,"STRONG",{});var L2t=s(R2e);W2r=r(L2t,"roberta"),L2t.forEach(t),H2r=r(dxe," \u2014 "),Sz=n(dxe,"A",{href:!0});var x2t=s(Sz);U2r=r(x2t,"TFRobertaForTokenClassification"),x2t.forEach(t),J2r=r(dxe," (RoBERTa model)"),dxe.forEach(t),Y2r=i(oe),PE=n(oe,"LI",{});var cxe=s(PE);B2e=n(cxe,"STRONG",{});var k2t=s(B2e);K2r=r(k2t,"roformer"),k2t.forEach(t),Z2r=r(cxe," \u2014 "),Rz=n(cxe,"A",{href:!0});var S2t=s(Rz);eFr=r(S2t,"TFRoFormerForTokenClassification"),S2t.forEach(t),oFr=r(cxe," (RoFormer model)"),cxe.forEach(t),rFr=i(oe),$E=n(oe,"LI",{});var mxe=s($E);P2e=n(mxe,"STRONG",{});var R2t=s(P2e);tFr=r(R2t,"xlm"),R2t.forEach(t),aFr=r(mxe," \u2014 "),Bz=n(mxe,"A",{href:!0});var B2t=s(Bz);nFr=r(B2t,"TFXLMForTokenClassification"),B2t.forEach(t),sFr=r(mxe," (XLM model)"),mxe.forEach(t),lFr=i(oe),IE=n(oe,"LI",{});var fxe=s(IE);$2e=n(fxe,"STRONG",{});var P2t=s($2e);iFr=r(P2t,"xlm-roberta"),P2t.forEach(t),dFr=r(fxe," \u2014 "),Pz=n(fxe,"A",{href:!0});var $2t=s(Pz);cFr=r($2t,"TFXLMRobertaForTokenClassification"),$2t.forEach(t),mFr=r(fxe," (XLM-RoBERTa model)"),fxe.forEach(t),fFr=i(oe),qE=n(oe,"LI",{});var gxe=s(qE);I2e=n(gxe,"STRONG",{});var I2t=s(I2e);gFr=r(I2t,"xlnet"),I2t.forEach(t),hFr=r(gxe," \u2014 "),$z=n(gxe,"A",{href:!0});var q2t=s($z);uFr=r(q2t,"TFXLNetForTokenClassification"),q2t.forEach(t),pFr=r(gxe," (XLNet model)"),gxe.forEach(t),oe.forEach(t),_Fr=i(Ca),q2e=n(Ca,"P",{});var N2t=s(q2e);bFr=r(N2t,"Examples:"),N2t.forEach(t),FFr=i(Ca),f(dL.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),eBe=i(c),Vc=n(c,"H2",{class:!0});var m$e=s(Vc);NE=n(m$e,"A",{id:!0,class:!0,href:!0});var j2t=s(NE);N2e=n(j2t,"SPAN",{});var D2t=s(N2e);f(cL.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),vFr=i(m$e),j2e=n(m$e,"SPAN",{});var G2t=s(j2e);TFr=r(G2t,"TFAutoModelForQuestionAnswering"),G2t.forEach(t),m$e.forEach(t),oBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);f(mL.$$.fragment,ni),MFr=i(ni),Xc=n(ni,"P",{});var nJ=s(Xc);EFr=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iz=n(nJ,"A",{href:!0});var O2t=s(Iz);CFr=r(O2t,"from_pretrained()"),O2t.forEach(t),wFr=r(nJ," class method or the "),qz=n(nJ,"A",{href:!0});var V2t=s(qz);AFr=r(V2t,"from_config()"),V2t.forEach(t),yFr=r(nJ,` class
method.`),nJ.forEach(t),LFr=i(ni),fL=n(ni,"P",{});var f$e=s(fL);xFr=r(f$e,"This class cannot be instantiated directly using "),D2e=n(f$e,"CODE",{});var X2t=s(D2e);kFr=r(X2t,"__init__()"),X2t.forEach(t),SFr=r(f$e," (throws an error)."),f$e.forEach(t),RFr=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);f(gL.$$.fragment,si),BFr=i(si),G2e=n(si,"P",{});var z2t=s(G2e);PFr=r(z2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z2t.forEach(t),$Fr=i(si),zc=n(si,"P",{});var sJ=s(zc);IFr=r(sJ,`Note:
Loading a model from its configuration file does `),O2e=n(sJ,"STRONG",{});var Q2t=s(O2e);qFr=r(Q2t,"not"),Q2t.forEach(t),NFr=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(sJ,"A",{href:!0});var W2t=s(Nz);jFr=r(W2t,"from_pretrained()"),W2t.forEach(t),DFr=r(sJ," to load the model weights."),sJ.forEach(t),GFr=i(si),V2e=n(si,"P",{});var H2t=s(V2e);OFr=r(H2t,"Examples:"),H2t.forEach(t),VFr=i(si),f(hL.$$.fragment,si),si.forEach(t),XFr=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);f(uL.$$.fragment,wa),zFr=i(wa),X2e=n(wa,"P",{});var U2t=s(X2e);QFr=r(U2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U2t.forEach(t),WFr=i(wa),An=n(wa,"P",{});var K3=s(An);HFr=r(K3,"The model class to instantiate is selected based on the "),z2e=n(K3,"CODE",{});var J2t=s(z2e);UFr=r(J2t,"model_type"),J2t.forEach(t),JFr=r(K3,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(K3,"CODE",{});var Y2t=s(Q2e);YFr=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),KFr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(K3,"CODE",{});var K2t=s(W2e);ZFr=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),evr=r(K3,":"),K3.forEach(t),ovr=i(wa),K=n(wa,"UL",{});var re=s(K);jE=n(re,"LI",{});var hxe=s(jE);H2e=n(hxe,"STRONG",{});var Z2t=s(H2e);rvr=r(Z2t,"albert"),Z2t.forEach(t),tvr=r(hxe," \u2014 "),jz=n(hxe,"A",{href:!0});var eFt=s(jz);avr=r(eFt,"TFAlbertForQuestionAnswering"),eFt.forEach(t),nvr=r(hxe," (ALBERT model)"),hxe.forEach(t),svr=i(re),DE=n(re,"LI",{});var uxe=s(DE);U2e=n(uxe,"STRONG",{});var oFt=s(U2e);lvr=r(oFt,"bert"),oFt.forEach(t),ivr=r(uxe," \u2014 "),Dz=n(uxe,"A",{href:!0});var rFt=s(Dz);dvr=r(rFt,"TFBertForQuestionAnswering"),rFt.forEach(t),cvr=r(uxe," (BERT model)"),uxe.forEach(t),mvr=i(re),GE=n(re,"LI",{});var pxe=s(GE);J2e=n(pxe,"STRONG",{});var tFt=s(J2e);fvr=r(tFt,"camembert"),tFt.forEach(t),gvr=r(pxe," \u2014 "),Gz=n(pxe,"A",{href:!0});var aFt=s(Gz);hvr=r(aFt,"TFCamembertForQuestionAnswering"),aFt.forEach(t),uvr=r(pxe," (CamemBERT model)"),pxe.forEach(t),pvr=i(re),OE=n(re,"LI",{});var _xe=s(OE);Y2e=n(_xe,"STRONG",{});var nFt=s(Y2e);_vr=r(nFt,"convbert"),nFt.forEach(t),bvr=r(_xe," \u2014 "),Oz=n(_xe,"A",{href:!0});var sFt=s(Oz);Fvr=r(sFt,"TFConvBertForQuestionAnswering"),sFt.forEach(t),vvr=r(_xe," (ConvBERT model)"),_xe.forEach(t),Tvr=i(re),VE=n(re,"LI",{});var bxe=s(VE);K2e=n(bxe,"STRONG",{});var lFt=s(K2e);Mvr=r(lFt,"deberta"),lFt.forEach(t),Evr=r(bxe," \u2014 "),Vz=n(bxe,"A",{href:!0});var iFt=s(Vz);Cvr=r(iFt,"TFDebertaForQuestionAnswering"),iFt.forEach(t),wvr=r(bxe," (DeBERTa model)"),bxe.forEach(t),Avr=i(re),XE=n(re,"LI",{});var Fxe=s(XE);Z2e=n(Fxe,"STRONG",{});var dFt=s(Z2e);yvr=r(dFt,"deberta-v2"),dFt.forEach(t),Lvr=r(Fxe," \u2014 "),Xz=n(Fxe,"A",{href:!0});var cFt=s(Xz);xvr=r(cFt,"TFDebertaV2ForQuestionAnswering"),cFt.forEach(t),kvr=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),Svr=i(re),zE=n(re,"LI",{});var vxe=s(zE);eFe=n(vxe,"STRONG",{});var mFt=s(eFe);Rvr=r(mFt,"distilbert"),mFt.forEach(t),Bvr=r(vxe," \u2014 "),zz=n(vxe,"A",{href:!0});var fFt=s(zz);Pvr=r(fFt,"TFDistilBertForQuestionAnswering"),fFt.forEach(t),$vr=r(vxe," (DistilBERT model)"),vxe.forEach(t),Ivr=i(re),QE=n(re,"LI",{});var Txe=s(QE);oFe=n(Txe,"STRONG",{});var gFt=s(oFe);qvr=r(gFt,"electra"),gFt.forEach(t),Nvr=r(Txe," \u2014 "),Qz=n(Txe,"A",{href:!0});var hFt=s(Qz);jvr=r(hFt,"TFElectraForQuestionAnswering"),hFt.forEach(t),Dvr=r(Txe," (ELECTRA model)"),Txe.forEach(t),Gvr=i(re),WE=n(re,"LI",{});var Mxe=s(WE);rFe=n(Mxe,"STRONG",{});var uFt=s(rFe);Ovr=r(uFt,"flaubert"),uFt.forEach(t),Vvr=r(Mxe," \u2014 "),Wz=n(Mxe,"A",{href:!0});var pFt=s(Wz);Xvr=r(pFt,"TFFlaubertForQuestionAnsweringSimple"),pFt.forEach(t),zvr=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),Qvr=i(re),HE=n(re,"LI",{});var Exe=s(HE);tFe=n(Exe,"STRONG",{});var _Ft=s(tFe);Wvr=r(_Ft,"funnel"),_Ft.forEach(t),Hvr=r(Exe," \u2014 "),Hz=n(Exe,"A",{href:!0});var bFt=s(Hz);Uvr=r(bFt,"TFFunnelForQuestionAnswering"),bFt.forEach(t),Jvr=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),Yvr=i(re),UE=n(re,"LI",{});var Cxe=s(UE);aFe=n(Cxe,"STRONG",{});var FFt=s(aFe);Kvr=r(FFt,"gptj"),FFt.forEach(t),Zvr=r(Cxe," \u2014 "),Uz=n(Cxe,"A",{href:!0});var vFt=s(Uz);eTr=r(vFt,"TFGPTJForQuestionAnswering"),vFt.forEach(t),oTr=r(Cxe," (GPT-J model)"),Cxe.forEach(t),rTr=i(re),JE=n(re,"LI",{});var wxe=s(JE);nFe=n(wxe,"STRONG",{});var TFt=s(nFe);tTr=r(TFt,"longformer"),TFt.forEach(t),aTr=r(wxe," \u2014 "),Jz=n(wxe,"A",{href:!0});var MFt=s(Jz);nTr=r(MFt,"TFLongformerForQuestionAnswering"),MFt.forEach(t),sTr=r(wxe," (Longformer model)"),wxe.forEach(t),lTr=i(re),YE=n(re,"LI",{});var Axe=s(YE);sFe=n(Axe,"STRONG",{});var EFt=s(sFe);iTr=r(EFt,"mobilebert"),EFt.forEach(t),dTr=r(Axe," \u2014 "),Yz=n(Axe,"A",{href:!0});var CFt=s(Yz);cTr=r(CFt,"TFMobileBertForQuestionAnswering"),CFt.forEach(t),mTr=r(Axe," (MobileBERT model)"),Axe.forEach(t),fTr=i(re),KE=n(re,"LI",{});var yxe=s(KE);lFe=n(yxe,"STRONG",{});var wFt=s(lFe);gTr=r(wFt,"mpnet"),wFt.forEach(t),hTr=r(yxe," \u2014 "),Kz=n(yxe,"A",{href:!0});var AFt=s(Kz);uTr=r(AFt,"TFMPNetForQuestionAnswering"),AFt.forEach(t),pTr=r(yxe," (MPNet model)"),yxe.forEach(t),_Tr=i(re),ZE=n(re,"LI",{});var Lxe=s(ZE);iFe=n(Lxe,"STRONG",{});var yFt=s(iFe);bTr=r(yFt,"rembert"),yFt.forEach(t),FTr=r(Lxe," \u2014 "),Zz=n(Lxe,"A",{href:!0});var LFt=s(Zz);vTr=r(LFt,"TFRemBertForQuestionAnswering"),LFt.forEach(t),TTr=r(Lxe," (RemBERT model)"),Lxe.forEach(t),MTr=i(re),eC=n(re,"LI",{});var xxe=s(eC);dFe=n(xxe,"STRONG",{});var xFt=s(dFe);ETr=r(xFt,"roberta"),xFt.forEach(t),CTr=r(xxe," \u2014 "),eQ=n(xxe,"A",{href:!0});var kFt=s(eQ);wTr=r(kFt,"TFRobertaForQuestionAnswering"),kFt.forEach(t),ATr=r(xxe," (RoBERTa model)"),xxe.forEach(t),yTr=i(re),oC=n(re,"LI",{});var kxe=s(oC);cFe=n(kxe,"STRONG",{});var SFt=s(cFe);LTr=r(SFt,"roformer"),SFt.forEach(t),xTr=r(kxe," \u2014 "),oQ=n(kxe,"A",{href:!0});var RFt=s(oQ);kTr=r(RFt,"TFRoFormerForQuestionAnswering"),RFt.forEach(t),STr=r(kxe," (RoFormer model)"),kxe.forEach(t),RTr=i(re),rC=n(re,"LI",{});var Sxe=s(rC);mFe=n(Sxe,"STRONG",{});var BFt=s(mFe);BTr=r(BFt,"xlm"),BFt.forEach(t),PTr=r(Sxe," \u2014 "),rQ=n(Sxe,"A",{href:!0});var PFt=s(rQ);$Tr=r(PFt,"TFXLMForQuestionAnsweringSimple"),PFt.forEach(t),ITr=r(Sxe," (XLM model)"),Sxe.forEach(t),qTr=i(re),tC=n(re,"LI",{});var Rxe=s(tC);fFe=n(Rxe,"STRONG",{});var $Ft=s(fFe);NTr=r($Ft,"xlm-roberta"),$Ft.forEach(t),jTr=r(Rxe," \u2014 "),tQ=n(Rxe,"A",{href:!0});var IFt=s(tQ);DTr=r(IFt,"TFXLMRobertaForQuestionAnswering"),IFt.forEach(t),GTr=r(Rxe," (XLM-RoBERTa model)"),Rxe.forEach(t),OTr=i(re),aC=n(re,"LI",{});var Bxe=s(aC);gFe=n(Bxe,"STRONG",{});var qFt=s(gFe);VTr=r(qFt,"xlnet"),qFt.forEach(t),XTr=r(Bxe," \u2014 "),aQ=n(Bxe,"A",{href:!0});var NFt=s(aQ);zTr=r(NFt,"TFXLNetForQuestionAnsweringSimple"),NFt.forEach(t),QTr=r(Bxe," (XLNet model)"),Bxe.forEach(t),re.forEach(t),WTr=i(wa),hFe=n(wa,"P",{});var jFt=s(hFe);HTr=r(jFt,"Examples:"),jFt.forEach(t),UTr=i(wa),f(pL.$$.fragment,wa),wa.forEach(t),ni.forEach(t),rBe=i(c),Qc=n(c,"H2",{class:!0});var g$e=s(Qc);nC=n(g$e,"A",{id:!0,class:!0,href:!0});var DFt=s(nC);uFe=n(DFt,"SPAN",{});var GFt=s(uFe);f(_L.$$.fragment,GFt),GFt.forEach(t),DFt.forEach(t),JTr=i(g$e),pFe=n(g$e,"SPAN",{});var OFt=s(pFe);YTr=r(OFt,"TFAutoModelForVision2Seq"),OFt.forEach(t),g$e.forEach(t),tBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);f(bL.$$.fragment,li),KTr=i(li),Wc=n(li,"P",{});var lJ=s(Wc);ZTr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nQ=n(lJ,"A",{href:!0});var VFt=s(nQ);e1r=r(VFt,"from_pretrained()"),VFt.forEach(t),o1r=r(lJ," class method or the "),sQ=n(lJ,"A",{href:!0});var XFt=s(sQ);r1r=r(XFt,"from_config()"),XFt.forEach(t),t1r=r(lJ,` class
method.`),lJ.forEach(t),a1r=i(li),FL=n(li,"P",{});var h$e=s(FL);n1r=r(h$e,"This class cannot be instantiated directly using "),_Fe=n(h$e,"CODE",{});var zFt=s(_Fe);s1r=r(zFt,"__init__()"),zFt.forEach(t),l1r=r(h$e," (throws an error)."),h$e.forEach(t),i1r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);f(vL.$$.fragment,ii),d1r=i(ii),bFe=n(ii,"P",{});var QFt=s(bFe);c1r=r(QFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QFt.forEach(t),m1r=i(ii),Hc=n(ii,"P",{});var iJ=s(Hc);f1r=r(iJ,`Note:
Loading a model from its configuration file does `),FFe=n(iJ,"STRONG",{});var WFt=s(FFe);g1r=r(WFt,"not"),WFt.forEach(t),h1r=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(iJ,"A",{href:!0});var HFt=s(lQ);u1r=r(HFt,"from_pretrained()"),HFt.forEach(t),p1r=r(iJ," to load the model weights."),iJ.forEach(t),_1r=i(ii),vFe=n(ii,"P",{});var UFt=s(vFe);b1r=r(UFt,"Examples:"),UFt.forEach(t),F1r=i(ii),f(TL.$$.fragment,ii),ii.forEach(t),v1r=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);f(ML.$$.fragment,Aa),T1r=i(Aa),TFe=n(Aa,"P",{});var JFt=s(TFe);M1r=r(JFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JFt.forEach(t),E1r=i(Aa),yn=n(Aa,"P",{});var Z3=s(yn);C1r=r(Z3,"The model class to instantiate is selected based on the "),MFe=n(Z3,"CODE",{});var YFt=s(MFe);w1r=r(YFt,"model_type"),YFt.forEach(t),A1r=r(Z3,` property of the config object (either
passed as an argument or loaded from `),EFe=n(Z3,"CODE",{});var KFt=s(EFe);y1r=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),L1r=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(Z3,"CODE",{});var ZFt=s(CFe);x1r=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),k1r=r(Z3,":"),Z3.forEach(t),S1r=i(Aa),wFe=n(Aa,"UL",{});var evt=s(wFe);sC=n(evt,"LI",{});var Pxe=s(sC);AFe=n(Pxe,"STRONG",{});var ovt=s(AFe);R1r=r(ovt,"vision-encoder-decoder"),ovt.forEach(t),B1r=r(Pxe," \u2014 "),iQ=n(Pxe,"A",{href:!0});var rvt=s(iQ);P1r=r(rvt,"TFVisionEncoderDecoderModel"),rvt.forEach(t),$1r=r(Pxe," (Vision Encoder decoder model)"),Pxe.forEach(t),evt.forEach(t),I1r=i(Aa),yFe=n(Aa,"P",{});var tvt=s(yFe);q1r=r(tvt,"Examples:"),tvt.forEach(t),N1r=i(Aa),f(EL.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),aBe=i(c),Uc=n(c,"H2",{class:!0});var u$e=s(Uc);lC=n(u$e,"A",{id:!0,class:!0,href:!0});var avt=s(lC);LFe=n(avt,"SPAN",{});var nvt=s(LFe);f(CL.$$.fragment,nvt),nvt.forEach(t),avt.forEach(t),j1r=i(u$e),xFe=n(u$e,"SPAN",{});var svt=s(xFe);D1r=r(svt,"TFAutoModelForSpeechSeq2Seq"),svt.forEach(t),u$e.forEach(t),nBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);f(wL.$$.fragment,di),G1r=i(di),Jc=n(di,"P",{});var dJ=s(Jc);O1r=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dQ=n(dJ,"A",{href:!0});var lvt=s(dQ);V1r=r(lvt,"from_pretrained()"),lvt.forEach(t),X1r=r(dJ," class method or the "),cQ=n(dJ,"A",{href:!0});var ivt=s(cQ);z1r=r(ivt,"from_config()"),ivt.forEach(t),Q1r=r(dJ,` class
method.`),dJ.forEach(t),W1r=i(di),AL=n(di,"P",{});var p$e=s(AL);H1r=r(p$e,"This class cannot be instantiated directly using "),kFe=n(p$e,"CODE",{});var dvt=s(kFe);U1r=r(dvt,"__init__()"),dvt.forEach(t),J1r=r(p$e," (throws an error)."),p$e.forEach(t),Y1r=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);f(yL.$$.fragment,ci),K1r=i(ci),SFe=n(ci,"P",{});var cvt=s(SFe);Z1r=r(cvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cvt.forEach(t),eMr=i(ci),Yc=n(ci,"P",{});var cJ=s(Yc);oMr=r(cJ,`Note:
Loading a model from its configuration file does `),RFe=n(cJ,"STRONG",{});var mvt=s(RFe);rMr=r(mvt,"not"),mvt.forEach(t),tMr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(cJ,"A",{href:!0});var fvt=s(mQ);aMr=r(fvt,"from_pretrained()"),fvt.forEach(t),nMr=r(cJ," to load the model weights."),cJ.forEach(t),sMr=i(ci),BFe=n(ci,"P",{});var gvt=s(BFe);lMr=r(gvt,"Examples:"),gvt.forEach(t),iMr=i(ci),f(LL.$$.fragment,ci),ci.forEach(t),dMr=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);f(xL.$$.fragment,ya),cMr=i(ya),PFe=n(ya,"P",{});var hvt=s(PFe);mMr=r(hvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hvt.forEach(t),fMr=i(ya),Ln=n(ya,"P",{});var ew=s(Ln);gMr=r(ew,"The model class to instantiate is selected based on the "),$Fe=n(ew,"CODE",{});var uvt=s($Fe);hMr=r(uvt,"model_type"),uvt.forEach(t),uMr=r(ew,` property of the config object (either
passed as an argument or loaded from `),IFe=n(ew,"CODE",{});var pvt=s(IFe);pMr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),_Mr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(ew,"CODE",{});var _vt=s(qFe);bMr=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),FMr=r(ew,":"),ew.forEach(t),vMr=i(ya),NFe=n(ya,"UL",{});var bvt=s(NFe);iC=n(bvt,"LI",{});var $xe=s(iC);jFe=n($xe,"STRONG",{});var Fvt=s(jFe);TMr=r(Fvt,"speech_to_text"),Fvt.forEach(t),MMr=r($xe," \u2014 "),fQ=n($xe,"A",{href:!0});var vvt=s(fQ);EMr=r(vvt,"TFSpeech2TextForConditionalGeneration"),vvt.forEach(t),CMr=r($xe," (Speech2Text model)"),$xe.forEach(t),bvt.forEach(t),wMr=i(ya),DFe=n(ya,"P",{});var Tvt=s(DFe);AMr=r(Tvt,"Examples:"),Tvt.forEach(t),yMr=i(ya),f(kL.$$.fragment,ya),ya.forEach(t),di.forEach(t),sBe=i(c),Kc=n(c,"H2",{class:!0});var _$e=s(Kc);dC=n(_$e,"A",{id:!0,class:!0,href:!0});var Mvt=s(dC);GFe=n(Mvt,"SPAN",{});var Evt=s(GFe);f(SL.$$.fragment,Evt),Evt.forEach(t),Mvt.forEach(t),LMr=i(_$e),OFe=n(_$e,"SPAN",{});var Cvt=s(OFe);xMr=r(Cvt,"FlaxAutoModel"),Cvt.forEach(t),_$e.forEach(t),lBe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);f(RL.$$.fragment,mi),kMr=i(mi),Zc=n(mi,"P",{});var mJ=s(Zc);SMr=r(mJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gQ=n(mJ,"A",{href:!0});var wvt=s(gQ);RMr=r(wvt,"from_pretrained()"),wvt.forEach(t),BMr=r(mJ," class method or the "),hQ=n(mJ,"A",{href:!0});var Avt=s(hQ);PMr=r(Avt,"from_config()"),Avt.forEach(t),$Mr=r(mJ,` class
method.`),mJ.forEach(t),IMr=i(mi),BL=n(mi,"P",{});var b$e=s(BL);qMr=r(b$e,"This class cannot be instantiated directly using "),VFe=n(b$e,"CODE",{});var yvt=s(VFe);NMr=r(yvt,"__init__()"),yvt.forEach(t),jMr=r(b$e," (throws an error)."),b$e.forEach(t),DMr=i(mi),At=n(mi,"DIV",{class:!0});var fi=s(At);f(PL.$$.fragment,fi),GMr=i(fi),XFe=n(fi,"P",{});var Lvt=s(XFe);OMr=r(Lvt,"Instantiates one of the base model classes of the library from a configuration."),Lvt.forEach(t),VMr=i(fi),em=n(fi,"P",{});var fJ=s(em);XMr=r(fJ,`Note:
Loading a model from its configuration file does `),zFe=n(fJ,"STRONG",{});var xvt=s(zFe);zMr=r(xvt,"not"),xvt.forEach(t),QMr=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(fJ,"A",{href:!0});var kvt=s(uQ);WMr=r(kvt,"from_pretrained()"),kvt.forEach(t),HMr=r(fJ," to load the model weights."),fJ.forEach(t),UMr=i(fi),QFe=n(fi,"P",{});var Svt=s(QFe);JMr=r(Svt,"Examples:"),Svt.forEach(t),YMr=i(fi),f($L.$$.fragment,fi),fi.forEach(t),KMr=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);f(IL.$$.fragment,La),ZMr=i(La),WFe=n(La,"P",{});var Rvt=s(WFe);e4r=r(Rvt,"Instantiate one of the base model classes of the library from a pretrained model."),Rvt.forEach(t),o4r=i(La),xn=n(La,"P",{});var ow=s(xn);r4r=r(ow,"The model class to instantiate is selected based on the "),HFe=n(ow,"CODE",{});var Bvt=s(HFe);t4r=r(Bvt,"model_type"),Bvt.forEach(t),a4r=r(ow,` property of the config object (either
passed as an argument or loaded from `),UFe=n(ow,"CODE",{});var Pvt=s(UFe);n4r=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),s4r=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(ow,"CODE",{});var $vt=s(JFe);l4r=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),i4r=r(ow,":"),ow.forEach(t),d4r=i(La),z=n(La,"UL",{});var W=s(z);cC=n(W,"LI",{});var Ixe=s(cC);YFe=n(Ixe,"STRONG",{});var Ivt=s(YFe);c4r=r(Ivt,"albert"),Ivt.forEach(t),m4r=r(Ixe," \u2014 "),pQ=n(Ixe,"A",{href:!0});var qvt=s(pQ);f4r=r(qvt,"FlaxAlbertModel"),qvt.forEach(t),g4r=r(Ixe," (ALBERT model)"),Ixe.forEach(t),h4r=i(W),mC=n(W,"LI",{});var qxe=s(mC);KFe=n(qxe,"STRONG",{});var Nvt=s(KFe);u4r=r(Nvt,"bart"),Nvt.forEach(t),p4r=r(qxe," \u2014 "),_Q=n(qxe,"A",{href:!0});var jvt=s(_Q);_4r=r(jvt,"FlaxBartModel"),jvt.forEach(t),b4r=r(qxe," (BART model)"),qxe.forEach(t),F4r=i(W),fC=n(W,"LI",{});var Nxe=s(fC);ZFe=n(Nxe,"STRONG",{});var Dvt=s(ZFe);v4r=r(Dvt,"beit"),Dvt.forEach(t),T4r=r(Nxe," \u2014 "),bQ=n(Nxe,"A",{href:!0});var Gvt=s(bQ);M4r=r(Gvt,"FlaxBeitModel"),Gvt.forEach(t),E4r=r(Nxe," (BEiT model)"),Nxe.forEach(t),C4r=i(W),gC=n(W,"LI",{});var jxe=s(gC);eve=n(jxe,"STRONG",{});var Ovt=s(eve);w4r=r(Ovt,"bert"),Ovt.forEach(t),A4r=r(jxe," \u2014 "),FQ=n(jxe,"A",{href:!0});var Vvt=s(FQ);y4r=r(Vvt,"FlaxBertModel"),Vvt.forEach(t),L4r=r(jxe," (BERT model)"),jxe.forEach(t),x4r=i(W),hC=n(W,"LI",{});var Dxe=s(hC);ove=n(Dxe,"STRONG",{});var Xvt=s(ove);k4r=r(Xvt,"big_bird"),Xvt.forEach(t),S4r=r(Dxe," \u2014 "),vQ=n(Dxe,"A",{href:!0});var zvt=s(vQ);R4r=r(zvt,"FlaxBigBirdModel"),zvt.forEach(t),B4r=r(Dxe," (BigBird model)"),Dxe.forEach(t),P4r=i(W),uC=n(W,"LI",{});var Gxe=s(uC);rve=n(Gxe,"STRONG",{});var Qvt=s(rve);$4r=r(Qvt,"blenderbot"),Qvt.forEach(t),I4r=r(Gxe," \u2014 "),TQ=n(Gxe,"A",{href:!0});var Wvt=s(TQ);q4r=r(Wvt,"FlaxBlenderbotModel"),Wvt.forEach(t),N4r=r(Gxe," (Blenderbot model)"),Gxe.forEach(t),j4r=i(W),pC=n(W,"LI",{});var Oxe=s(pC);tve=n(Oxe,"STRONG",{});var Hvt=s(tve);D4r=r(Hvt,"blenderbot-small"),Hvt.forEach(t),G4r=r(Oxe," \u2014 "),MQ=n(Oxe,"A",{href:!0});var Uvt=s(MQ);O4r=r(Uvt,"FlaxBlenderbotSmallModel"),Uvt.forEach(t),V4r=r(Oxe," (BlenderbotSmall model)"),Oxe.forEach(t),X4r=i(W),_C=n(W,"LI",{});var Vxe=s(_C);ave=n(Vxe,"STRONG",{});var Jvt=s(ave);z4r=r(Jvt,"clip"),Jvt.forEach(t),Q4r=r(Vxe," \u2014 "),EQ=n(Vxe,"A",{href:!0});var Yvt=s(EQ);W4r=r(Yvt,"FlaxCLIPModel"),Yvt.forEach(t),H4r=r(Vxe," (CLIP model)"),Vxe.forEach(t),U4r=i(W),bC=n(W,"LI",{});var Xxe=s(bC);nve=n(Xxe,"STRONG",{});var Kvt=s(nve);J4r=r(Kvt,"distilbert"),Kvt.forEach(t),Y4r=r(Xxe," \u2014 "),CQ=n(Xxe,"A",{href:!0});var Zvt=s(CQ);K4r=r(Zvt,"FlaxDistilBertModel"),Zvt.forEach(t),Z4r=r(Xxe," (DistilBERT model)"),Xxe.forEach(t),eEr=i(W),FC=n(W,"LI",{});var zxe=s(FC);sve=n(zxe,"STRONG",{});var eTt=s(sve);oEr=r(eTt,"electra"),eTt.forEach(t),rEr=r(zxe," \u2014 "),wQ=n(zxe,"A",{href:!0});var oTt=s(wQ);tEr=r(oTt,"FlaxElectraModel"),oTt.forEach(t),aEr=r(zxe," (ELECTRA model)"),zxe.forEach(t),nEr=i(W),vC=n(W,"LI",{});var Qxe=s(vC);lve=n(Qxe,"STRONG",{});var rTt=s(lve);sEr=r(rTt,"gpt2"),rTt.forEach(t),lEr=r(Qxe," \u2014 "),AQ=n(Qxe,"A",{href:!0});var tTt=s(AQ);iEr=r(tTt,"FlaxGPT2Model"),tTt.forEach(t),dEr=r(Qxe," (OpenAI GPT-2 model)"),Qxe.forEach(t),cEr=i(W),TC=n(W,"LI",{});var Wxe=s(TC);ive=n(Wxe,"STRONG",{});var aTt=s(ive);mEr=r(aTt,"gpt_neo"),aTt.forEach(t),fEr=r(Wxe," \u2014 "),yQ=n(Wxe,"A",{href:!0});var nTt=s(yQ);gEr=r(nTt,"FlaxGPTNeoModel"),nTt.forEach(t),hEr=r(Wxe," (GPT Neo model)"),Wxe.forEach(t),uEr=i(W),MC=n(W,"LI",{});var Hxe=s(MC);dve=n(Hxe,"STRONG",{});var sTt=s(dve);pEr=r(sTt,"gptj"),sTt.forEach(t),_Er=r(Hxe," \u2014 "),LQ=n(Hxe,"A",{href:!0});var lTt=s(LQ);bEr=r(lTt,"FlaxGPTJModel"),lTt.forEach(t),FEr=r(Hxe," (GPT-J model)"),Hxe.forEach(t),vEr=i(W),EC=n(W,"LI",{});var Uxe=s(EC);cve=n(Uxe,"STRONG",{});var iTt=s(cve);TEr=r(iTt,"marian"),iTt.forEach(t),MEr=r(Uxe," \u2014 "),xQ=n(Uxe,"A",{href:!0});var dTt=s(xQ);EEr=r(dTt,"FlaxMarianModel"),dTt.forEach(t),CEr=r(Uxe," (Marian model)"),Uxe.forEach(t),wEr=i(W),CC=n(W,"LI",{});var Jxe=s(CC);mve=n(Jxe,"STRONG",{});var cTt=s(mve);AEr=r(cTt,"mbart"),cTt.forEach(t),yEr=r(Jxe," \u2014 "),kQ=n(Jxe,"A",{href:!0});var mTt=s(kQ);LEr=r(mTt,"FlaxMBartModel"),mTt.forEach(t),xEr=r(Jxe," (mBART model)"),Jxe.forEach(t),kEr=i(W),wC=n(W,"LI",{});var Yxe=s(wC);fve=n(Yxe,"STRONG",{});var fTt=s(fve);SEr=r(fTt,"mt5"),fTt.forEach(t),REr=r(Yxe," \u2014 "),SQ=n(Yxe,"A",{href:!0});var gTt=s(SQ);BEr=r(gTt,"FlaxMT5Model"),gTt.forEach(t),PEr=r(Yxe," (mT5 model)"),Yxe.forEach(t),$Er=i(W),AC=n(W,"LI",{});var Kxe=s(AC);gve=n(Kxe,"STRONG",{});var hTt=s(gve);IEr=r(hTt,"pegasus"),hTt.forEach(t),qEr=r(Kxe," \u2014 "),RQ=n(Kxe,"A",{href:!0});var uTt=s(RQ);NEr=r(uTt,"FlaxPegasusModel"),uTt.forEach(t),jEr=r(Kxe," (Pegasus model)"),Kxe.forEach(t),DEr=i(W),yC=n(W,"LI",{});var Zxe=s(yC);hve=n(Zxe,"STRONG",{});var pTt=s(hve);GEr=r(pTt,"roberta"),pTt.forEach(t),OEr=r(Zxe," \u2014 "),BQ=n(Zxe,"A",{href:!0});var _Tt=s(BQ);VEr=r(_Tt,"FlaxRobertaModel"),_Tt.forEach(t),XEr=r(Zxe," (RoBERTa model)"),Zxe.forEach(t),zEr=i(W),LC=n(W,"LI",{});var eke=s(LC);uve=n(eke,"STRONG",{});var bTt=s(uve);QEr=r(bTt,"roformer"),bTt.forEach(t),WEr=r(eke," \u2014 "),PQ=n(eke,"A",{href:!0});var FTt=s(PQ);HEr=r(FTt,"FlaxRoFormerModel"),FTt.forEach(t),UEr=r(eke," (RoFormer model)"),eke.forEach(t),JEr=i(W),xC=n(W,"LI",{});var oke=s(xC);pve=n(oke,"STRONG",{});var vTt=s(pve);YEr=r(vTt,"t5"),vTt.forEach(t),KEr=r(oke," \u2014 "),$Q=n(oke,"A",{href:!0});var TTt=s($Q);ZEr=r(TTt,"FlaxT5Model"),TTt.forEach(t),eCr=r(oke," (T5 model)"),oke.forEach(t),oCr=i(W),kC=n(W,"LI",{});var rke=s(kC);_ve=n(rke,"STRONG",{});var MTt=s(_ve);rCr=r(MTt,"vision-text-dual-encoder"),MTt.forEach(t),tCr=r(rke," \u2014 "),IQ=n(rke,"A",{href:!0});var ETt=s(IQ);aCr=r(ETt,"FlaxVisionTextDualEncoderModel"),ETt.forEach(t),nCr=r(rke," (VisionTextDualEncoder model)"),rke.forEach(t),sCr=i(W),SC=n(W,"LI",{});var tke=s(SC);bve=n(tke,"STRONG",{});var CTt=s(bve);lCr=r(CTt,"vit"),CTt.forEach(t),iCr=r(tke," \u2014 "),qQ=n(tke,"A",{href:!0});var wTt=s(qQ);dCr=r(wTt,"FlaxViTModel"),wTt.forEach(t),cCr=r(tke," (ViT model)"),tke.forEach(t),mCr=i(W),RC=n(W,"LI",{});var ake=s(RC);Fve=n(ake,"STRONG",{});var ATt=s(Fve);fCr=r(ATt,"wav2vec2"),ATt.forEach(t),gCr=r(ake," \u2014 "),NQ=n(ake,"A",{href:!0});var yTt=s(NQ);hCr=r(yTt,"FlaxWav2Vec2Model"),yTt.forEach(t),uCr=r(ake," (Wav2Vec2 model)"),ake.forEach(t),pCr=i(W),BC=n(W,"LI",{});var nke=s(BC);vve=n(nke,"STRONG",{});var LTt=s(vve);_Cr=r(LTt,"xglm"),LTt.forEach(t),bCr=r(nke," \u2014 "),jQ=n(nke,"A",{href:!0});var xTt=s(jQ);FCr=r(xTt,"FlaxXGLMModel"),xTt.forEach(t),vCr=r(nke," (XGLM model)"),nke.forEach(t),TCr=i(W),PC=n(W,"LI",{});var ske=s(PC);Tve=n(ske,"STRONG",{});var kTt=s(Tve);MCr=r(kTt,"xlm-roberta"),kTt.forEach(t),ECr=r(ske," \u2014 "),DQ=n(ske,"A",{href:!0});var STt=s(DQ);CCr=r(STt,"FlaxXLMRobertaModel"),STt.forEach(t),wCr=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),W.forEach(t),ACr=i(La),Mve=n(La,"P",{});var RTt=s(Mve);yCr=r(RTt,"Examples:"),RTt.forEach(t),LCr=i(La),f(qL.$$.fragment,La),La.forEach(t),mi.forEach(t),iBe=i(c),om=n(c,"H2",{class:!0});var F$e=s(om);$C=n(F$e,"A",{id:!0,class:!0,href:!0});var BTt=s($C);Eve=n(BTt,"SPAN",{});var PTt=s(Eve);f(NL.$$.fragment,PTt),PTt.forEach(t),BTt.forEach(t),xCr=i(F$e),Cve=n(F$e,"SPAN",{});var $Tt=s(Cve);kCr=r($Tt,"FlaxAutoModelForCausalLM"),$Tt.forEach(t),F$e.forEach(t),dBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);f(jL.$$.fragment,gi),SCr=i(gi),rm=n(gi,"P",{});var gJ=s(rm);RCr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GQ=n(gJ,"A",{href:!0});var ITt=s(GQ);BCr=r(ITt,"from_pretrained()"),ITt.forEach(t),PCr=r(gJ," class method or the "),OQ=n(gJ,"A",{href:!0});var qTt=s(OQ);$Cr=r(qTt,"from_config()"),qTt.forEach(t),ICr=r(gJ,` class
method.`),gJ.forEach(t),qCr=i(gi),DL=n(gi,"P",{});var v$e=s(DL);NCr=r(v$e,"This class cannot be instantiated directly using "),wve=n(v$e,"CODE",{});var NTt=s(wve);jCr=r(NTt,"__init__()"),NTt.forEach(t),DCr=r(v$e," (throws an error)."),v$e.forEach(t),GCr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);f(GL.$$.fragment,hi),OCr=i(hi),Ave=n(hi,"P",{});var jTt=s(Ave);VCr=r(jTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jTt.forEach(t),XCr=i(hi),tm=n(hi,"P",{});var hJ=s(tm);zCr=r(hJ,`Note:
Loading a model from its configuration file does `),yve=n(hJ,"STRONG",{});var DTt=s(yve);QCr=r(DTt,"not"),DTt.forEach(t),WCr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(hJ,"A",{href:!0});var GTt=s(VQ);HCr=r(GTt,"from_pretrained()"),GTt.forEach(t),UCr=r(hJ," to load the model weights."),hJ.forEach(t),JCr=i(hi),Lve=n(hi,"P",{});var OTt=s(Lve);YCr=r(OTt,"Examples:"),OTt.forEach(t),KCr=i(hi),f(OL.$$.fragment,hi),hi.forEach(t),ZCr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);f(VL.$$.fragment,xa),e5r=i(xa),xve=n(xa,"P",{});var VTt=s(xve);o5r=r(VTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VTt.forEach(t),r5r=i(xa),kn=n(xa,"P",{});var rw=s(kn);t5r=r(rw,"The model class to instantiate is selected based on the "),kve=n(rw,"CODE",{});var XTt=s(kve);a5r=r(XTt,"model_type"),XTt.forEach(t),n5r=r(rw,` property of the config object (either
passed as an argument or loaded from `),Sve=n(rw,"CODE",{});var zTt=s(Sve);s5r=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),l5r=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(rw,"CODE",{});var QTt=s(Rve);i5r=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),d5r=r(rw,":"),rw.forEach(t),c5r=i(xa),ca=n(xa,"UL",{});var ui=s(ca);IC=n(ui,"LI",{});var lke=s(IC);Bve=n(lke,"STRONG",{});var WTt=s(Bve);m5r=r(WTt,"bart"),WTt.forEach(t),f5r=r(lke," \u2014 "),XQ=n(lke,"A",{href:!0});var HTt=s(XQ);g5r=r(HTt,"FlaxBartForCausalLM"),HTt.forEach(t),h5r=r(lke," (BART model)"),lke.forEach(t),u5r=i(ui),qC=n(ui,"LI",{});var ike=s(qC);Pve=n(ike,"STRONG",{});var UTt=s(Pve);p5r=r(UTt,"gpt2"),UTt.forEach(t),_5r=r(ike," \u2014 "),zQ=n(ike,"A",{href:!0});var JTt=s(zQ);b5r=r(JTt,"FlaxGPT2LMHeadModel"),JTt.forEach(t),F5r=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),v5r=i(ui),NC=n(ui,"LI",{});var dke=s(NC);$ve=n(dke,"STRONG",{});var YTt=s($ve);T5r=r(YTt,"gpt_neo"),YTt.forEach(t),M5r=r(dke," \u2014 "),QQ=n(dke,"A",{href:!0});var KTt=s(QQ);E5r=r(KTt,"FlaxGPTNeoForCausalLM"),KTt.forEach(t),C5r=r(dke," (GPT Neo model)"),dke.forEach(t),w5r=i(ui),jC=n(ui,"LI",{});var cke=s(jC);Ive=n(cke,"STRONG",{});var ZTt=s(Ive);A5r=r(ZTt,"gptj"),ZTt.forEach(t),y5r=r(cke," \u2014 "),WQ=n(cke,"A",{href:!0});var e1t=s(WQ);L5r=r(e1t,"FlaxGPTJForCausalLM"),e1t.forEach(t),x5r=r(cke," (GPT-J model)"),cke.forEach(t),k5r=i(ui),DC=n(ui,"LI",{});var mke=s(DC);qve=n(mke,"STRONG",{});var o1t=s(qve);S5r=r(o1t,"xglm"),o1t.forEach(t),R5r=r(mke," \u2014 "),HQ=n(mke,"A",{href:!0});var r1t=s(HQ);B5r=r(r1t,"FlaxXGLMForCausalLM"),r1t.forEach(t),P5r=r(mke," (XGLM model)"),mke.forEach(t),ui.forEach(t),$5r=i(xa),Nve=n(xa,"P",{});var t1t=s(Nve);I5r=r(t1t,"Examples:"),t1t.forEach(t),q5r=i(xa),f(XL.$$.fragment,xa),xa.forEach(t),gi.forEach(t),cBe=i(c),am=n(c,"H2",{class:!0});var T$e=s(am);GC=n(T$e,"A",{id:!0,class:!0,href:!0});var a1t=s(GC);jve=n(a1t,"SPAN",{});var n1t=s(jve);f(zL.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),N5r=i(T$e),Dve=n(T$e,"SPAN",{});var s1t=s(Dve);j5r=r(s1t,"FlaxAutoModelForPreTraining"),s1t.forEach(t),T$e.forEach(t),mBe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);f(QL.$$.fragment,pi),D5r=i(pi),nm=n(pi,"P",{});var uJ=s(nm);G5r=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UQ=n(uJ,"A",{href:!0});var l1t=s(UQ);O5r=r(l1t,"from_pretrained()"),l1t.forEach(t),V5r=r(uJ," class method or the "),JQ=n(uJ,"A",{href:!0});var i1t=s(JQ);X5r=r(i1t,"from_config()"),i1t.forEach(t),z5r=r(uJ,` class
method.`),uJ.forEach(t),Q5r=i(pi),WL=n(pi,"P",{});var M$e=s(WL);W5r=r(M$e,"This class cannot be instantiated directly using "),Gve=n(M$e,"CODE",{});var d1t=s(Gve);H5r=r(d1t,"__init__()"),d1t.forEach(t),U5r=r(M$e," (throws an error)."),M$e.forEach(t),J5r=i(pi),Lt=n(pi,"DIV",{class:!0});var _i=s(Lt);f(HL.$$.fragment,_i),Y5r=i(_i),Ove=n(_i,"P",{});var c1t=s(Ove);K5r=r(c1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c1t.forEach(t),Z5r=i(_i),sm=n(_i,"P",{});var pJ=s(sm);e3r=r(pJ,`Note:
Loading a model from its configuration file does `),Vve=n(pJ,"STRONG",{});var m1t=s(Vve);o3r=r(m1t,"not"),m1t.forEach(t),r3r=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(pJ,"A",{href:!0});var f1t=s(YQ);t3r=r(f1t,"from_pretrained()"),f1t.forEach(t),a3r=r(pJ," to load the model weights."),pJ.forEach(t),n3r=i(_i),Xve=n(_i,"P",{});var g1t=s(Xve);s3r=r(g1t,"Examples:"),g1t.forEach(t),l3r=i(_i),f(UL.$$.fragment,_i),_i.forEach(t),i3r=i(pi),xo=n(pi,"DIV",{class:!0});var ka=s(xo);f(JL.$$.fragment,ka),d3r=i(ka),zve=n(ka,"P",{});var h1t=s(zve);c3r=r(h1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h1t.forEach(t),m3r=i(ka),Sn=n(ka,"P",{});var tw=s(Sn);f3r=r(tw,"The model class to instantiate is selected based on the "),Qve=n(tw,"CODE",{});var u1t=s(Qve);g3r=r(u1t,"model_type"),u1t.forEach(t),h3r=r(tw,` property of the config object (either
passed as an argument or loaded from `),Wve=n(tw,"CODE",{});var p1t=s(Wve);u3r=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),p3r=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(tw,"CODE",{});var _1t=s(Hve);_3r=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),b3r=r(tw,":"),tw.forEach(t),F3r=i(ka),me=n(ka,"UL",{});var ue=s(me);OC=n(ue,"LI",{});var fke=s(OC);Uve=n(fke,"STRONG",{});var b1t=s(Uve);v3r=r(b1t,"albert"),b1t.forEach(t),T3r=r(fke," \u2014 "),KQ=n(fke,"A",{href:!0});var F1t=s(KQ);M3r=r(F1t,"FlaxAlbertForPreTraining"),F1t.forEach(t),E3r=r(fke," (ALBERT model)"),fke.forEach(t),C3r=i(ue),VC=n(ue,"LI",{});var gke=s(VC);Jve=n(gke,"STRONG",{});var v1t=s(Jve);w3r=r(v1t,"bart"),v1t.forEach(t),A3r=r(gke," \u2014 "),ZQ=n(gke,"A",{href:!0});var T1t=s(ZQ);y3r=r(T1t,"FlaxBartForConditionalGeneration"),T1t.forEach(t),L3r=r(gke," (BART model)"),gke.forEach(t),x3r=i(ue),XC=n(ue,"LI",{});var hke=s(XC);Yve=n(hke,"STRONG",{});var M1t=s(Yve);k3r=r(M1t,"bert"),M1t.forEach(t),S3r=r(hke," \u2014 "),eW=n(hke,"A",{href:!0});var E1t=s(eW);R3r=r(E1t,"FlaxBertForPreTraining"),E1t.forEach(t),B3r=r(hke," (BERT model)"),hke.forEach(t),P3r=i(ue),zC=n(ue,"LI",{});var uke=s(zC);Kve=n(uke,"STRONG",{});var C1t=s(Kve);$3r=r(C1t,"big_bird"),C1t.forEach(t),I3r=r(uke," \u2014 "),oW=n(uke,"A",{href:!0});var w1t=s(oW);q3r=r(w1t,"FlaxBigBirdForPreTraining"),w1t.forEach(t),N3r=r(uke," (BigBird model)"),uke.forEach(t),j3r=i(ue),QC=n(ue,"LI",{});var pke=s(QC);Zve=n(pke,"STRONG",{});var A1t=s(Zve);D3r=r(A1t,"electra"),A1t.forEach(t),G3r=r(pke," \u2014 "),rW=n(pke,"A",{href:!0});var y1t=s(rW);O3r=r(y1t,"FlaxElectraForPreTraining"),y1t.forEach(t),V3r=r(pke," (ELECTRA model)"),pke.forEach(t),X3r=i(ue),WC=n(ue,"LI",{});var _ke=s(WC);eTe=n(_ke,"STRONG",{});var L1t=s(eTe);z3r=r(L1t,"mbart"),L1t.forEach(t),Q3r=r(_ke," \u2014 "),tW=n(_ke,"A",{href:!0});var x1t=s(tW);W3r=r(x1t,"FlaxMBartForConditionalGeneration"),x1t.forEach(t),H3r=r(_ke," (mBART model)"),_ke.forEach(t),U3r=i(ue),HC=n(ue,"LI",{});var bke=s(HC);oTe=n(bke,"STRONG",{});var k1t=s(oTe);J3r=r(k1t,"mt5"),k1t.forEach(t),Y3r=r(bke," \u2014 "),aW=n(bke,"A",{href:!0});var S1t=s(aW);K3r=r(S1t,"FlaxMT5ForConditionalGeneration"),S1t.forEach(t),Z3r=r(bke," (mT5 model)"),bke.forEach(t),ewr=i(ue),UC=n(ue,"LI",{});var Fke=s(UC);rTe=n(Fke,"STRONG",{});var R1t=s(rTe);owr=r(R1t,"roberta"),R1t.forEach(t),rwr=r(Fke," \u2014 "),nW=n(Fke,"A",{href:!0});var B1t=s(nW);twr=r(B1t,"FlaxRobertaForMaskedLM"),B1t.forEach(t),awr=r(Fke," (RoBERTa model)"),Fke.forEach(t),nwr=i(ue),JC=n(ue,"LI",{});var vke=s(JC);tTe=n(vke,"STRONG",{});var P1t=s(tTe);swr=r(P1t,"roformer"),P1t.forEach(t),lwr=r(vke," \u2014 "),sW=n(vke,"A",{href:!0});var $1t=s(sW);iwr=r($1t,"FlaxRoFormerForMaskedLM"),$1t.forEach(t),dwr=r(vke," (RoFormer model)"),vke.forEach(t),cwr=i(ue),YC=n(ue,"LI",{});var Tke=s(YC);aTe=n(Tke,"STRONG",{});var I1t=s(aTe);mwr=r(I1t,"t5"),I1t.forEach(t),fwr=r(Tke," \u2014 "),lW=n(Tke,"A",{href:!0});var q1t=s(lW);gwr=r(q1t,"FlaxT5ForConditionalGeneration"),q1t.forEach(t),hwr=r(Tke," (T5 model)"),Tke.forEach(t),uwr=i(ue),KC=n(ue,"LI",{});var Mke=s(KC);nTe=n(Mke,"STRONG",{});var N1t=s(nTe);pwr=r(N1t,"wav2vec2"),N1t.forEach(t),_wr=r(Mke," \u2014 "),iW=n(Mke,"A",{href:!0});var j1t=s(iW);bwr=r(j1t,"FlaxWav2Vec2ForPreTraining"),j1t.forEach(t),Fwr=r(Mke," (Wav2Vec2 model)"),Mke.forEach(t),vwr=i(ue),ZC=n(ue,"LI",{});var Eke=s(ZC);sTe=n(Eke,"STRONG",{});var D1t=s(sTe);Twr=r(D1t,"xlm-roberta"),D1t.forEach(t),Mwr=r(Eke," \u2014 "),dW=n(Eke,"A",{href:!0});var G1t=s(dW);Ewr=r(G1t,"FlaxXLMRobertaForMaskedLM"),G1t.forEach(t),Cwr=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),ue.forEach(t),wwr=i(ka),lTe=n(ka,"P",{});var O1t=s(lTe);Awr=r(O1t,"Examples:"),O1t.forEach(t),ywr=i(ka),f(YL.$$.fragment,ka),ka.forEach(t),pi.forEach(t),fBe=i(c),lm=n(c,"H2",{class:!0});var E$e=s(lm);e5=n(E$e,"A",{id:!0,class:!0,href:!0});var V1t=s(e5);iTe=n(V1t,"SPAN",{});var X1t=s(iTe);f(KL.$$.fragment,X1t),X1t.forEach(t),V1t.forEach(t),Lwr=i(E$e),dTe=n(E$e,"SPAN",{});var z1t=s(dTe);xwr=r(z1t,"FlaxAutoModelForMaskedLM"),z1t.forEach(t),E$e.forEach(t),gBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);f(ZL.$$.fragment,bi),kwr=i(bi),im=n(bi,"P",{});var _J=s(im);Swr=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cW=n(_J,"A",{href:!0});var Q1t=s(cW);Rwr=r(Q1t,"from_pretrained()"),Q1t.forEach(t),Bwr=r(_J," class method or the "),mW=n(_J,"A",{href:!0});var W1t=s(mW);Pwr=r(W1t,"from_config()"),W1t.forEach(t),$wr=r(_J,` class
method.`),_J.forEach(t),Iwr=i(bi),e7=n(bi,"P",{});var C$e=s(e7);qwr=r(C$e,"This class cannot be instantiated directly using "),cTe=n(C$e,"CODE",{});var H1t=s(cTe);Nwr=r(H1t,"__init__()"),H1t.forEach(t),jwr=r(C$e," (throws an error)."),C$e.forEach(t),Dwr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);f(o7.$$.fragment,Fi),Gwr=i(Fi),mTe=n(Fi,"P",{});var U1t=s(mTe);Owr=r(U1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),U1t.forEach(t),Vwr=i(Fi),dm=n(Fi,"P",{});var bJ=s(dm);Xwr=r(bJ,`Note:
Loading a model from its configuration file does `),fTe=n(bJ,"STRONG",{});var J1t=s(fTe);zwr=r(J1t,"not"),J1t.forEach(t),Qwr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(bJ,"A",{href:!0});var Y1t=s(fW);Wwr=r(Y1t,"from_pretrained()"),Y1t.forEach(t),Hwr=r(bJ," to load the model weights."),bJ.forEach(t),Uwr=i(Fi),gTe=n(Fi,"P",{});var K1t=s(gTe);Jwr=r(K1t,"Examples:"),K1t.forEach(t),Ywr=i(Fi),f(r7.$$.fragment,Fi),Fi.forEach(t),Kwr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);f(t7.$$.fragment,Sa),Zwr=i(Sa),hTe=n(Sa,"P",{});var Z1t=s(hTe);eAr=r(Z1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z1t.forEach(t),oAr=i(Sa),Rn=n(Sa,"P",{});var aw=s(Rn);rAr=r(aw,"The model class to instantiate is selected based on the "),uTe=n(aw,"CODE",{});var eMt=s(uTe);tAr=r(eMt,"model_type"),eMt.forEach(t),aAr=r(aw,` property of the config object (either
passed as an argument or loaded from `),pTe=n(aw,"CODE",{});var oMt=s(pTe);nAr=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),sAr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(aw,"CODE",{});var rMt=s(_Te);lAr=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),iAr=r(aw,":"),aw.forEach(t),dAr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);o5=n(Ae,"LI",{});var Cke=s(o5);bTe=n(Cke,"STRONG",{});var tMt=s(bTe);cAr=r(tMt,"albert"),tMt.forEach(t),mAr=r(Cke," \u2014 "),gW=n(Cke,"A",{href:!0});var aMt=s(gW);fAr=r(aMt,"FlaxAlbertForMaskedLM"),aMt.forEach(t),gAr=r(Cke," (ALBERT model)"),Cke.forEach(t),hAr=i(Ae),r5=n(Ae,"LI",{});var wke=s(r5);FTe=n(wke,"STRONG",{});var nMt=s(FTe);uAr=r(nMt,"bart"),nMt.forEach(t),pAr=r(wke," \u2014 "),hW=n(wke,"A",{href:!0});var sMt=s(hW);_Ar=r(sMt,"FlaxBartForConditionalGeneration"),sMt.forEach(t),bAr=r(wke," (BART model)"),wke.forEach(t),FAr=i(Ae),t5=n(Ae,"LI",{});var Ake=s(t5);vTe=n(Ake,"STRONG",{});var lMt=s(vTe);vAr=r(lMt,"bert"),lMt.forEach(t),TAr=r(Ake," \u2014 "),uW=n(Ake,"A",{href:!0});var iMt=s(uW);MAr=r(iMt,"FlaxBertForMaskedLM"),iMt.forEach(t),EAr=r(Ake," (BERT model)"),Ake.forEach(t),CAr=i(Ae),a5=n(Ae,"LI",{});var yke=s(a5);TTe=n(yke,"STRONG",{});var dMt=s(TTe);wAr=r(dMt,"big_bird"),dMt.forEach(t),AAr=r(yke," \u2014 "),pW=n(yke,"A",{href:!0});var cMt=s(pW);yAr=r(cMt,"FlaxBigBirdForMaskedLM"),cMt.forEach(t),LAr=r(yke," (BigBird model)"),yke.forEach(t),xAr=i(Ae),n5=n(Ae,"LI",{});var Lke=s(n5);MTe=n(Lke,"STRONG",{});var mMt=s(MTe);kAr=r(mMt,"distilbert"),mMt.forEach(t),SAr=r(Lke," \u2014 "),_W=n(Lke,"A",{href:!0});var fMt=s(_W);RAr=r(fMt,"FlaxDistilBertForMaskedLM"),fMt.forEach(t),BAr=r(Lke," (DistilBERT model)"),Lke.forEach(t),PAr=i(Ae),s5=n(Ae,"LI",{});var xke=s(s5);ETe=n(xke,"STRONG",{});var gMt=s(ETe);$Ar=r(gMt,"electra"),gMt.forEach(t),IAr=r(xke," \u2014 "),bW=n(xke,"A",{href:!0});var hMt=s(bW);qAr=r(hMt,"FlaxElectraForMaskedLM"),hMt.forEach(t),NAr=r(xke," (ELECTRA model)"),xke.forEach(t),jAr=i(Ae),l5=n(Ae,"LI",{});var kke=s(l5);CTe=n(kke,"STRONG",{});var uMt=s(CTe);DAr=r(uMt,"mbart"),uMt.forEach(t),GAr=r(kke," \u2014 "),FW=n(kke,"A",{href:!0});var pMt=s(FW);OAr=r(pMt,"FlaxMBartForConditionalGeneration"),pMt.forEach(t),VAr=r(kke," (mBART model)"),kke.forEach(t),XAr=i(Ae),i5=n(Ae,"LI",{});var Ske=s(i5);wTe=n(Ske,"STRONG",{});var _Mt=s(wTe);zAr=r(_Mt,"roberta"),_Mt.forEach(t),QAr=r(Ske," \u2014 "),vW=n(Ske,"A",{href:!0});var bMt=s(vW);WAr=r(bMt,"FlaxRobertaForMaskedLM"),bMt.forEach(t),HAr=r(Ske," (RoBERTa model)"),Ske.forEach(t),UAr=i(Ae),d5=n(Ae,"LI",{});var Rke=s(d5);ATe=n(Rke,"STRONG",{});var FMt=s(ATe);JAr=r(FMt,"roformer"),FMt.forEach(t),YAr=r(Rke," \u2014 "),TW=n(Rke,"A",{href:!0});var vMt=s(TW);KAr=r(vMt,"FlaxRoFormerForMaskedLM"),vMt.forEach(t),ZAr=r(Rke," (RoFormer model)"),Rke.forEach(t),e6r=i(Ae),c5=n(Ae,"LI",{});var Bke=s(c5);yTe=n(Bke,"STRONG",{});var TMt=s(yTe);o6r=r(TMt,"xlm-roberta"),TMt.forEach(t),r6r=r(Bke," \u2014 "),MW=n(Bke,"A",{href:!0});var MMt=s(MW);t6r=r(MMt,"FlaxXLMRobertaForMaskedLM"),MMt.forEach(t),a6r=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),Ae.forEach(t),n6r=i(Sa),LTe=n(Sa,"P",{});var EMt=s(LTe);s6r=r(EMt,"Examples:"),EMt.forEach(t),l6r=i(Sa),f(a7.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),hBe=i(c),cm=n(c,"H2",{class:!0});var w$e=s(cm);m5=n(w$e,"A",{id:!0,class:!0,href:!0});var CMt=s(m5);xTe=n(CMt,"SPAN",{});var wMt=s(xTe);f(n7.$$.fragment,wMt),wMt.forEach(t),CMt.forEach(t),i6r=i(w$e),kTe=n(w$e,"SPAN",{});var AMt=s(kTe);d6r=r(AMt,"FlaxAutoModelForSeq2SeqLM"),AMt.forEach(t),w$e.forEach(t),uBe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);f(s7.$$.fragment,vi),c6r=i(vi),mm=n(vi,"P",{});var FJ=s(mm);m6r=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EW=n(FJ,"A",{href:!0});var yMt=s(EW);f6r=r(yMt,"from_pretrained()"),yMt.forEach(t),g6r=r(FJ," class method or the "),CW=n(FJ,"A",{href:!0});var LMt=s(CW);h6r=r(LMt,"from_config()"),LMt.forEach(t),u6r=r(FJ,` class
method.`),FJ.forEach(t),p6r=i(vi),l7=n(vi,"P",{});var A$e=s(l7);_6r=r(A$e,"This class cannot be instantiated directly using "),STe=n(A$e,"CODE",{});var xMt=s(STe);b6r=r(xMt,"__init__()"),xMt.forEach(t),F6r=r(A$e," (throws an error)."),A$e.forEach(t),v6r=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);f(i7.$$.fragment,Ti),T6r=i(Ti),RTe=n(Ti,"P",{});var kMt=s(RTe);M6r=r(kMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kMt.forEach(t),E6r=i(Ti),fm=n(Ti,"P",{});var vJ=s(fm);C6r=r(vJ,`Note:
Loading a model from its configuration file does `),BTe=n(vJ,"STRONG",{});var SMt=s(BTe);w6r=r(SMt,"not"),SMt.forEach(t),A6r=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(vJ,"A",{href:!0});var RMt=s(wW);y6r=r(RMt,"from_pretrained()"),RMt.forEach(t),L6r=r(vJ," to load the model weights."),vJ.forEach(t),x6r=i(Ti),PTe=n(Ti,"P",{});var BMt=s(PTe);k6r=r(BMt,"Examples:"),BMt.forEach(t),S6r=i(Ti),f(d7.$$.fragment,Ti),Ti.forEach(t),R6r=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);f(c7.$$.fragment,Ra),B6r=i(Ra),$Te=n(Ra,"P",{});var PMt=s($Te);P6r=r(PMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PMt.forEach(t),$6r=i(Ra),Bn=n(Ra,"P",{});var nw=s(Bn);I6r=r(nw,"The model class to instantiate is selected based on the "),ITe=n(nw,"CODE",{});var $Mt=s(ITe);q6r=r($Mt,"model_type"),$Mt.forEach(t),N6r=r(nw,` property of the config object (either
passed as an argument or loaded from `),qTe=n(nw,"CODE",{});var IMt=s(qTe);j6r=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),D6r=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(nw,"CODE",{});var qMt=s(NTe);G6r=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),O6r=r(nw,":"),nw.forEach(t),V6r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);f5=n(so,"LI",{});var Pke=s(f5);jTe=n(Pke,"STRONG",{});var NMt=s(jTe);X6r=r(NMt,"bart"),NMt.forEach(t),z6r=r(Pke," \u2014 "),AW=n(Pke,"A",{href:!0});var jMt=s(AW);Q6r=r(jMt,"FlaxBartForConditionalGeneration"),jMt.forEach(t),W6r=r(Pke," (BART model)"),Pke.forEach(t),H6r=i(so),g5=n(so,"LI",{});var $ke=s(g5);DTe=n($ke,"STRONG",{});var DMt=s(DTe);U6r=r(DMt,"blenderbot"),DMt.forEach(t),J6r=r($ke," \u2014 "),yW=n($ke,"A",{href:!0});var GMt=s(yW);Y6r=r(GMt,"FlaxBlenderbotForConditionalGeneration"),GMt.forEach(t),K6r=r($ke," (Blenderbot model)"),$ke.forEach(t),Z6r=i(so),h5=n(so,"LI",{});var Ike=s(h5);GTe=n(Ike,"STRONG",{});var OMt=s(GTe);e0r=r(OMt,"blenderbot-small"),OMt.forEach(t),o0r=r(Ike," \u2014 "),LW=n(Ike,"A",{href:!0});var VMt=s(LW);r0r=r(VMt,"FlaxBlenderbotSmallForConditionalGeneration"),VMt.forEach(t),t0r=r(Ike," (BlenderbotSmall model)"),Ike.forEach(t),a0r=i(so),u5=n(so,"LI",{});var qke=s(u5);OTe=n(qke,"STRONG",{});var XMt=s(OTe);n0r=r(XMt,"encoder-decoder"),XMt.forEach(t),s0r=r(qke," \u2014 "),xW=n(qke,"A",{href:!0});var zMt=s(xW);l0r=r(zMt,"FlaxEncoderDecoderModel"),zMt.forEach(t),i0r=r(qke," (Encoder decoder model)"),qke.forEach(t),d0r=i(so),p5=n(so,"LI",{});var Nke=s(p5);VTe=n(Nke,"STRONG",{});var QMt=s(VTe);c0r=r(QMt,"marian"),QMt.forEach(t),m0r=r(Nke," \u2014 "),kW=n(Nke,"A",{href:!0});var WMt=s(kW);f0r=r(WMt,"FlaxMarianMTModel"),WMt.forEach(t),g0r=r(Nke," (Marian model)"),Nke.forEach(t),h0r=i(so),_5=n(so,"LI",{});var jke=s(_5);XTe=n(jke,"STRONG",{});var HMt=s(XTe);u0r=r(HMt,"mbart"),HMt.forEach(t),p0r=r(jke," \u2014 "),SW=n(jke,"A",{href:!0});var UMt=s(SW);_0r=r(UMt,"FlaxMBartForConditionalGeneration"),UMt.forEach(t),b0r=r(jke," (mBART model)"),jke.forEach(t),F0r=i(so),b5=n(so,"LI",{});var Dke=s(b5);zTe=n(Dke,"STRONG",{});var JMt=s(zTe);v0r=r(JMt,"mt5"),JMt.forEach(t),T0r=r(Dke," \u2014 "),RW=n(Dke,"A",{href:!0});var YMt=s(RW);M0r=r(YMt,"FlaxMT5ForConditionalGeneration"),YMt.forEach(t),E0r=r(Dke," (mT5 model)"),Dke.forEach(t),C0r=i(so),F5=n(so,"LI",{});var Gke=s(F5);QTe=n(Gke,"STRONG",{});var KMt=s(QTe);w0r=r(KMt,"pegasus"),KMt.forEach(t),A0r=r(Gke," \u2014 "),BW=n(Gke,"A",{href:!0});var ZMt=s(BW);y0r=r(ZMt,"FlaxPegasusForConditionalGeneration"),ZMt.forEach(t),L0r=r(Gke," (Pegasus model)"),Gke.forEach(t),x0r=i(so),v5=n(so,"LI",{});var Oke=s(v5);WTe=n(Oke,"STRONG",{});var e4t=s(WTe);k0r=r(e4t,"t5"),e4t.forEach(t),S0r=r(Oke," \u2014 "),PW=n(Oke,"A",{href:!0});var o4t=s(PW);R0r=r(o4t,"FlaxT5ForConditionalGeneration"),o4t.forEach(t),B0r=r(Oke," (T5 model)"),Oke.forEach(t),so.forEach(t),P0r=i(Ra),HTe=n(Ra,"P",{});var r4t=s(HTe);$0r=r(r4t,"Examples:"),r4t.forEach(t),I0r=i(Ra),f(m7.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),pBe=i(c),gm=n(c,"H2",{class:!0});var y$e=s(gm);T5=n(y$e,"A",{id:!0,class:!0,href:!0});var t4t=s(T5);UTe=n(t4t,"SPAN",{});var a4t=s(UTe);f(f7.$$.fragment,a4t),a4t.forEach(t),t4t.forEach(t),q0r=i(y$e),JTe=n(y$e,"SPAN",{});var n4t=s(JTe);N0r=r(n4t,"FlaxAutoModelForSequenceClassification"),n4t.forEach(t),y$e.forEach(t),_Be=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);f(g7.$$.fragment,Mi),j0r=i(Mi),hm=n(Mi,"P",{});var TJ=s(hm);D0r=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$W=n(TJ,"A",{href:!0});var s4t=s($W);G0r=r(s4t,"from_pretrained()"),s4t.forEach(t),O0r=r(TJ," class method or the "),IW=n(TJ,"A",{href:!0});var l4t=s(IW);V0r=r(l4t,"from_config()"),l4t.forEach(t),X0r=r(TJ,` class
method.`),TJ.forEach(t),z0r=i(Mi),h7=n(Mi,"P",{});var L$e=s(h7);Q0r=r(L$e,"This class cannot be instantiated directly using "),YTe=n(L$e,"CODE",{});var i4t=s(YTe);W0r=r(i4t,"__init__()"),i4t.forEach(t),H0r=r(L$e," (throws an error)."),L$e.forEach(t),U0r=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);f(u7.$$.fragment,Ei),J0r=i(Ei),KTe=n(Ei,"P",{});var d4t=s(KTe);Y0r=r(d4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d4t.forEach(t),K0r=i(Ei),um=n(Ei,"P",{});var MJ=s(um);Z0r=r(MJ,`Note:
Loading a model from its configuration file does `),ZTe=n(MJ,"STRONG",{});var c4t=s(ZTe);eyr=r(c4t,"not"),c4t.forEach(t),oyr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(MJ,"A",{href:!0});var m4t=s(qW);ryr=r(m4t,"from_pretrained()"),m4t.forEach(t),tyr=r(MJ," to load the model weights."),MJ.forEach(t),ayr=i(Ei),e1e=n(Ei,"P",{});var f4t=s(e1e);nyr=r(f4t,"Examples:"),f4t.forEach(t),syr=i(Ei),f(p7.$$.fragment,Ei),Ei.forEach(t),lyr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);f(_7.$$.fragment,Ba),iyr=i(Ba),o1e=n(Ba,"P",{});var g4t=s(o1e);dyr=r(g4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g4t.forEach(t),cyr=i(Ba),Pn=n(Ba,"P",{});var sw=s(Pn);myr=r(sw,"The model class to instantiate is selected based on the "),r1e=n(sw,"CODE",{});var h4t=s(r1e);fyr=r(h4t,"model_type"),h4t.forEach(t),gyr=r(sw,` property of the config object (either
passed as an argument or loaded from `),t1e=n(sw,"CODE",{});var u4t=s(t1e);hyr=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),uyr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(sw,"CODE",{});var p4t=s(a1e);pyr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),_yr=r(sw,":"),sw.forEach(t),byr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);M5=n(ye,"LI",{});var Vke=s(M5);n1e=n(Vke,"STRONG",{});var _4t=s(n1e);Fyr=r(_4t,"albert"),_4t.forEach(t),vyr=r(Vke," \u2014 "),NW=n(Vke,"A",{href:!0});var b4t=s(NW);Tyr=r(b4t,"FlaxAlbertForSequenceClassification"),b4t.forEach(t),Myr=r(Vke," (ALBERT model)"),Vke.forEach(t),Eyr=i(ye),E5=n(ye,"LI",{});var Xke=s(E5);s1e=n(Xke,"STRONG",{});var F4t=s(s1e);Cyr=r(F4t,"bart"),F4t.forEach(t),wyr=r(Xke," \u2014 "),jW=n(Xke,"A",{href:!0});var v4t=s(jW);Ayr=r(v4t,"FlaxBartForSequenceClassification"),v4t.forEach(t),yyr=r(Xke," (BART model)"),Xke.forEach(t),Lyr=i(ye),C5=n(ye,"LI",{});var zke=s(C5);l1e=n(zke,"STRONG",{});var T4t=s(l1e);xyr=r(T4t,"bert"),T4t.forEach(t),kyr=r(zke," \u2014 "),DW=n(zke,"A",{href:!0});var M4t=s(DW);Syr=r(M4t,"FlaxBertForSequenceClassification"),M4t.forEach(t),Ryr=r(zke," (BERT model)"),zke.forEach(t),Byr=i(ye),w5=n(ye,"LI",{});var Qke=s(w5);i1e=n(Qke,"STRONG",{});var E4t=s(i1e);Pyr=r(E4t,"big_bird"),E4t.forEach(t),$yr=r(Qke," \u2014 "),GW=n(Qke,"A",{href:!0});var C4t=s(GW);Iyr=r(C4t,"FlaxBigBirdForSequenceClassification"),C4t.forEach(t),qyr=r(Qke," (BigBird model)"),Qke.forEach(t),Nyr=i(ye),A5=n(ye,"LI",{});var Wke=s(A5);d1e=n(Wke,"STRONG",{});var w4t=s(d1e);jyr=r(w4t,"distilbert"),w4t.forEach(t),Dyr=r(Wke," \u2014 "),OW=n(Wke,"A",{href:!0});var A4t=s(OW);Gyr=r(A4t,"FlaxDistilBertForSequenceClassification"),A4t.forEach(t),Oyr=r(Wke," (DistilBERT model)"),Wke.forEach(t),Vyr=i(ye),y5=n(ye,"LI",{});var Hke=s(y5);c1e=n(Hke,"STRONG",{});var y4t=s(c1e);Xyr=r(y4t,"electra"),y4t.forEach(t),zyr=r(Hke," \u2014 "),VW=n(Hke,"A",{href:!0});var L4t=s(VW);Qyr=r(L4t,"FlaxElectraForSequenceClassification"),L4t.forEach(t),Wyr=r(Hke," (ELECTRA model)"),Hke.forEach(t),Hyr=i(ye),L5=n(ye,"LI",{});var Uke=s(L5);m1e=n(Uke,"STRONG",{});var x4t=s(m1e);Uyr=r(x4t,"mbart"),x4t.forEach(t),Jyr=r(Uke," \u2014 "),XW=n(Uke,"A",{href:!0});var k4t=s(XW);Yyr=r(k4t,"FlaxMBartForSequenceClassification"),k4t.forEach(t),Kyr=r(Uke," (mBART model)"),Uke.forEach(t),Zyr=i(ye),x5=n(ye,"LI",{});var Jke=s(x5);f1e=n(Jke,"STRONG",{});var S4t=s(f1e);eLr=r(S4t,"roberta"),S4t.forEach(t),oLr=r(Jke," \u2014 "),zW=n(Jke,"A",{href:!0});var R4t=s(zW);rLr=r(R4t,"FlaxRobertaForSequenceClassification"),R4t.forEach(t),tLr=r(Jke," (RoBERTa model)"),Jke.forEach(t),aLr=i(ye),k5=n(ye,"LI",{});var Yke=s(k5);g1e=n(Yke,"STRONG",{});var B4t=s(g1e);nLr=r(B4t,"roformer"),B4t.forEach(t),sLr=r(Yke," \u2014 "),QW=n(Yke,"A",{href:!0});var P4t=s(QW);lLr=r(P4t,"FlaxRoFormerForSequenceClassification"),P4t.forEach(t),iLr=r(Yke," (RoFormer model)"),Yke.forEach(t),dLr=i(ye),S5=n(ye,"LI",{});var Kke=s(S5);h1e=n(Kke,"STRONG",{});var $4t=s(h1e);cLr=r($4t,"xlm-roberta"),$4t.forEach(t),mLr=r(Kke," \u2014 "),WW=n(Kke,"A",{href:!0});var I4t=s(WW);fLr=r(I4t,"FlaxXLMRobertaForSequenceClassification"),I4t.forEach(t),gLr=r(Kke," (XLM-RoBERTa model)"),Kke.forEach(t),ye.forEach(t),hLr=i(Ba),u1e=n(Ba,"P",{});var q4t=s(u1e);uLr=r(q4t,"Examples:"),q4t.forEach(t),pLr=i(Ba),f(b7.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),bBe=i(c),pm=n(c,"H2",{class:!0});var x$e=s(pm);R5=n(x$e,"A",{id:!0,class:!0,href:!0});var N4t=s(R5);p1e=n(N4t,"SPAN",{});var j4t=s(p1e);f(F7.$$.fragment,j4t),j4t.forEach(t),N4t.forEach(t),_Lr=i(x$e),_1e=n(x$e,"SPAN",{});var D4t=s(_1e);bLr=r(D4t,"FlaxAutoModelForQuestionAnswering"),D4t.forEach(t),x$e.forEach(t),FBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);f(v7.$$.fragment,Ci),FLr=i(Ci),_m=n(Ci,"P",{});var EJ=s(_m);vLr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HW=n(EJ,"A",{href:!0});var G4t=s(HW);TLr=r(G4t,"from_pretrained()"),G4t.forEach(t),MLr=r(EJ," class method or the "),UW=n(EJ,"A",{href:!0});var O4t=s(UW);ELr=r(O4t,"from_config()"),O4t.forEach(t),CLr=r(EJ,` class
method.`),EJ.forEach(t),wLr=i(Ci),T7=n(Ci,"P",{});var k$e=s(T7);ALr=r(k$e,"This class cannot be instantiated directly using "),b1e=n(k$e,"CODE",{});var V4t=s(b1e);yLr=r(V4t,"__init__()"),V4t.forEach(t),LLr=r(k$e," (throws an error)."),k$e.forEach(t),xLr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);f(M7.$$.fragment,wi),kLr=i(wi),F1e=n(wi,"P",{});var X4t=s(F1e);SLr=r(X4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X4t.forEach(t),RLr=i(wi),bm=n(wi,"P",{});var CJ=s(bm);BLr=r(CJ,`Note:
Loading a model from its configuration file does `),v1e=n(CJ,"STRONG",{});var z4t=s(v1e);PLr=r(z4t,"not"),z4t.forEach(t),$Lr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(CJ,"A",{href:!0});var Q4t=s(JW);ILr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),qLr=r(CJ," to load the model weights."),CJ.forEach(t),NLr=i(wi),T1e=n(wi,"P",{});var W4t=s(T1e);jLr=r(W4t,"Examples:"),W4t.forEach(t),DLr=i(wi),f(E7.$$.fragment,wi),wi.forEach(t),GLr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);f(C7.$$.fragment,Pa),OLr=i(Pa),M1e=n(Pa,"P",{});var H4t=s(M1e);VLr=r(H4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H4t.forEach(t),XLr=i(Pa),$n=n(Pa,"P",{});var lw=s($n);zLr=r(lw,"The model class to instantiate is selected based on the "),E1e=n(lw,"CODE",{});var U4t=s(E1e);QLr=r(U4t,"model_type"),U4t.forEach(t),WLr=r(lw,` property of the config object (either
passed as an argument or loaded from `),C1e=n(lw,"CODE",{});var J4t=s(C1e);HLr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),ULr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(lw,"CODE",{});var Y4t=s(w1e);JLr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),YLr=r(lw,":"),lw.forEach(t),KLr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);B5=n(Le,"LI",{});var Zke=s(B5);A1e=n(Zke,"STRONG",{});var K4t=s(A1e);ZLr=r(K4t,"albert"),K4t.forEach(t),e7r=r(Zke," \u2014 "),YW=n(Zke,"A",{href:!0});var Z4t=s(YW);o7r=r(Z4t,"FlaxAlbertForQuestionAnswering"),Z4t.forEach(t),r7r=r(Zke," (ALBERT model)"),Zke.forEach(t),t7r=i(Le),P5=n(Le,"LI",{});var eSe=s(P5);y1e=n(eSe,"STRONG",{});var eEt=s(y1e);a7r=r(eEt,"bart"),eEt.forEach(t),n7r=r(eSe," \u2014 "),KW=n(eSe,"A",{href:!0});var oEt=s(KW);s7r=r(oEt,"FlaxBartForQuestionAnswering"),oEt.forEach(t),l7r=r(eSe," (BART model)"),eSe.forEach(t),i7r=i(Le),$5=n(Le,"LI",{});var oSe=s($5);L1e=n(oSe,"STRONG",{});var rEt=s(L1e);d7r=r(rEt,"bert"),rEt.forEach(t),c7r=r(oSe," \u2014 "),ZW=n(oSe,"A",{href:!0});var tEt=s(ZW);m7r=r(tEt,"FlaxBertForQuestionAnswering"),tEt.forEach(t),f7r=r(oSe," (BERT model)"),oSe.forEach(t),g7r=i(Le),I5=n(Le,"LI",{});var rSe=s(I5);x1e=n(rSe,"STRONG",{});var aEt=s(x1e);h7r=r(aEt,"big_bird"),aEt.forEach(t),u7r=r(rSe," \u2014 "),eH=n(rSe,"A",{href:!0});var nEt=s(eH);p7r=r(nEt,"FlaxBigBirdForQuestionAnswering"),nEt.forEach(t),_7r=r(rSe," (BigBird model)"),rSe.forEach(t),b7r=i(Le),q5=n(Le,"LI",{});var tSe=s(q5);k1e=n(tSe,"STRONG",{});var sEt=s(k1e);F7r=r(sEt,"distilbert"),sEt.forEach(t),v7r=r(tSe," \u2014 "),oH=n(tSe,"A",{href:!0});var lEt=s(oH);T7r=r(lEt,"FlaxDistilBertForQuestionAnswering"),lEt.forEach(t),M7r=r(tSe," (DistilBERT model)"),tSe.forEach(t),E7r=i(Le),N5=n(Le,"LI",{});var aSe=s(N5);S1e=n(aSe,"STRONG",{});var iEt=s(S1e);C7r=r(iEt,"electra"),iEt.forEach(t),w7r=r(aSe," \u2014 "),rH=n(aSe,"A",{href:!0});var dEt=s(rH);A7r=r(dEt,"FlaxElectraForQuestionAnswering"),dEt.forEach(t),y7r=r(aSe," (ELECTRA model)"),aSe.forEach(t),L7r=i(Le),j5=n(Le,"LI",{});var nSe=s(j5);R1e=n(nSe,"STRONG",{});var cEt=s(R1e);x7r=r(cEt,"mbart"),cEt.forEach(t),k7r=r(nSe," \u2014 "),tH=n(nSe,"A",{href:!0});var mEt=s(tH);S7r=r(mEt,"FlaxMBartForQuestionAnswering"),mEt.forEach(t),R7r=r(nSe," (mBART model)"),nSe.forEach(t),B7r=i(Le),D5=n(Le,"LI",{});var sSe=s(D5);B1e=n(sSe,"STRONG",{});var fEt=s(B1e);P7r=r(fEt,"roberta"),fEt.forEach(t),$7r=r(sSe," \u2014 "),aH=n(sSe,"A",{href:!0});var gEt=s(aH);I7r=r(gEt,"FlaxRobertaForQuestionAnswering"),gEt.forEach(t),q7r=r(sSe," (RoBERTa model)"),sSe.forEach(t),N7r=i(Le),G5=n(Le,"LI",{});var lSe=s(G5);P1e=n(lSe,"STRONG",{});var hEt=s(P1e);j7r=r(hEt,"roformer"),hEt.forEach(t),D7r=r(lSe," \u2014 "),nH=n(lSe,"A",{href:!0});var uEt=s(nH);G7r=r(uEt,"FlaxRoFormerForQuestionAnswering"),uEt.forEach(t),O7r=r(lSe," (RoFormer model)"),lSe.forEach(t),V7r=i(Le),O5=n(Le,"LI",{});var iSe=s(O5);$1e=n(iSe,"STRONG",{});var pEt=s($1e);X7r=r(pEt,"xlm-roberta"),pEt.forEach(t),z7r=r(iSe," \u2014 "),sH=n(iSe,"A",{href:!0});var _Et=s(sH);Q7r=r(_Et,"FlaxXLMRobertaForQuestionAnswering"),_Et.forEach(t),W7r=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),Le.forEach(t),H7r=i(Pa),I1e=n(Pa,"P",{});var bEt=s(I1e);U7r=r(bEt,"Examples:"),bEt.forEach(t),J7r=i(Pa),f(w7.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),vBe=i(c),Fm=n(c,"H2",{class:!0});var S$e=s(Fm);V5=n(S$e,"A",{id:!0,class:!0,href:!0});var FEt=s(V5);q1e=n(FEt,"SPAN",{});var vEt=s(q1e);f(A7.$$.fragment,vEt),vEt.forEach(t),FEt.forEach(t),Y7r=i(S$e),N1e=n(S$e,"SPAN",{});var TEt=s(N1e);K7r=r(TEt,"FlaxAutoModelForTokenClassification"),TEt.forEach(t),S$e.forEach(t),TBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);f(y7.$$.fragment,Ai),Z7r=i(Ai),vm=n(Ai,"P",{});var wJ=s(vm);e8r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lH=n(wJ,"A",{href:!0});var MEt=s(lH);o8r=r(MEt,"from_pretrained()"),MEt.forEach(t),r8r=r(wJ," class method or the "),iH=n(wJ,"A",{href:!0});var EEt=s(iH);t8r=r(EEt,"from_config()"),EEt.forEach(t),a8r=r(wJ,` class
method.`),wJ.forEach(t),n8r=i(Ai),L7=n(Ai,"P",{});var R$e=s(L7);s8r=r(R$e,"This class cannot be instantiated directly using "),j1e=n(R$e,"CODE",{});var CEt=s(j1e);l8r=r(CEt,"__init__()"),CEt.forEach(t),i8r=r(R$e," (throws an error)."),R$e.forEach(t),d8r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);f(x7.$$.fragment,yi),c8r=i(yi),D1e=n(yi,"P",{});var wEt=s(D1e);m8r=r(wEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wEt.forEach(t),f8r=i(yi),Tm=n(yi,"P",{});var AJ=s(Tm);g8r=r(AJ,`Note:
Loading a model from its configuration file does `),G1e=n(AJ,"STRONG",{});var AEt=s(G1e);h8r=r(AEt,"not"),AEt.forEach(t),u8r=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(AJ,"A",{href:!0});var yEt=s(dH);p8r=r(yEt,"from_pretrained()"),yEt.forEach(t),_8r=r(AJ," to load the model weights."),AJ.forEach(t),b8r=i(yi),O1e=n(yi,"P",{});var LEt=s(O1e);F8r=r(LEt,"Examples:"),LEt.forEach(t),v8r=i(yi),f(k7.$$.fragment,yi),yi.forEach(t),T8r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);f(S7.$$.fragment,$a),M8r=i($a),V1e=n($a,"P",{});var xEt=s(V1e);E8r=r(xEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xEt.forEach(t),C8r=i($a),In=n($a,"P",{});var iw=s(In);w8r=r(iw,"The model class to instantiate is selected based on the "),X1e=n(iw,"CODE",{});var kEt=s(X1e);A8r=r(kEt,"model_type"),kEt.forEach(t),y8r=r(iw,` property of the config object (either
passed as an argument or loaded from `),z1e=n(iw,"CODE",{});var SEt=s(z1e);L8r=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),x8r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(iw,"CODE",{});var REt=s(Q1e);k8r=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),S8r=r(iw,":"),iw.forEach(t),R8r=i($a),Be=n($a,"UL",{});var Oo=s(Be);X5=n(Oo,"LI",{});var dSe=s(X5);W1e=n(dSe,"STRONG",{});var BEt=s(W1e);B8r=r(BEt,"albert"),BEt.forEach(t),P8r=r(dSe," \u2014 "),cH=n(dSe,"A",{href:!0});var PEt=s(cH);$8r=r(PEt,"FlaxAlbertForTokenClassification"),PEt.forEach(t),I8r=r(dSe," (ALBERT model)"),dSe.forEach(t),q8r=i(Oo),z5=n(Oo,"LI",{});var cSe=s(z5);H1e=n(cSe,"STRONG",{});var $Et=s(H1e);N8r=r($Et,"bert"),$Et.forEach(t),j8r=r(cSe," \u2014 "),mH=n(cSe,"A",{href:!0});var IEt=s(mH);D8r=r(IEt,"FlaxBertForTokenClassification"),IEt.forEach(t),G8r=r(cSe," (BERT model)"),cSe.forEach(t),O8r=i(Oo),Q5=n(Oo,"LI",{});var mSe=s(Q5);U1e=n(mSe,"STRONG",{});var qEt=s(U1e);V8r=r(qEt,"big_bird"),qEt.forEach(t),X8r=r(mSe," \u2014 "),fH=n(mSe,"A",{href:!0});var NEt=s(fH);z8r=r(NEt,"FlaxBigBirdForTokenClassification"),NEt.forEach(t),Q8r=r(mSe," (BigBird model)"),mSe.forEach(t),W8r=i(Oo),W5=n(Oo,"LI",{});var fSe=s(W5);J1e=n(fSe,"STRONG",{});var jEt=s(J1e);H8r=r(jEt,"distilbert"),jEt.forEach(t),U8r=r(fSe," \u2014 "),gH=n(fSe,"A",{href:!0});var DEt=s(gH);J8r=r(DEt,"FlaxDistilBertForTokenClassification"),DEt.forEach(t),Y8r=r(fSe," (DistilBERT model)"),fSe.forEach(t),K8r=i(Oo),H5=n(Oo,"LI",{});var gSe=s(H5);Y1e=n(gSe,"STRONG",{});var GEt=s(Y1e);Z8r=r(GEt,"electra"),GEt.forEach(t),e9r=r(gSe," \u2014 "),hH=n(gSe,"A",{href:!0});var OEt=s(hH);o9r=r(OEt,"FlaxElectraForTokenClassification"),OEt.forEach(t),r9r=r(gSe," (ELECTRA model)"),gSe.forEach(t),t9r=i(Oo),U5=n(Oo,"LI",{});var hSe=s(U5);K1e=n(hSe,"STRONG",{});var VEt=s(K1e);a9r=r(VEt,"roberta"),VEt.forEach(t),n9r=r(hSe," \u2014 "),uH=n(hSe,"A",{href:!0});var XEt=s(uH);s9r=r(XEt,"FlaxRobertaForTokenClassification"),XEt.forEach(t),l9r=r(hSe," (RoBERTa model)"),hSe.forEach(t),i9r=i(Oo),J5=n(Oo,"LI",{});var uSe=s(J5);Z1e=n(uSe,"STRONG",{});var zEt=s(Z1e);d9r=r(zEt,"roformer"),zEt.forEach(t),c9r=r(uSe," \u2014 "),pH=n(uSe,"A",{href:!0});var QEt=s(pH);m9r=r(QEt,"FlaxRoFormerForTokenClassification"),QEt.forEach(t),f9r=r(uSe," (RoFormer model)"),uSe.forEach(t),g9r=i(Oo),Y5=n(Oo,"LI",{});var pSe=s(Y5);eMe=n(pSe,"STRONG",{});var WEt=s(eMe);h9r=r(WEt,"xlm-roberta"),WEt.forEach(t),u9r=r(pSe," \u2014 "),_H=n(pSe,"A",{href:!0});var HEt=s(_H);p9r=r(HEt,"FlaxXLMRobertaForTokenClassification"),HEt.forEach(t),_9r=r(pSe," (XLM-RoBERTa model)"),pSe.forEach(t),Oo.forEach(t),b9r=i($a),oMe=n($a,"P",{});var UEt=s(oMe);F9r=r(UEt,"Examples:"),UEt.forEach(t),v9r=i($a),f(R7.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),MBe=i(c),Mm=n(c,"H2",{class:!0});var B$e=s(Mm);K5=n(B$e,"A",{id:!0,class:!0,href:!0});var JEt=s(K5);rMe=n(JEt,"SPAN",{});var YEt=s(rMe);f(B7.$$.fragment,YEt),YEt.forEach(t),JEt.forEach(t),T9r=i(B$e),tMe=n(B$e,"SPAN",{});var KEt=s(tMe);M9r=r(KEt,"FlaxAutoModelForMultipleChoice"),KEt.forEach(t),B$e.forEach(t),EBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);f(P7.$$.fragment,Li),E9r=i(Li),Em=n(Li,"P",{});var yJ=s(Em);C9r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=n(yJ,"A",{href:!0});var ZEt=s(bH);w9r=r(ZEt,"from_pretrained()"),ZEt.forEach(t),A9r=r(yJ," class method or the "),FH=n(yJ,"A",{href:!0});var eCt=s(FH);y9r=r(eCt,"from_config()"),eCt.forEach(t),L9r=r(yJ,` class
method.`),yJ.forEach(t),x9r=i(Li),$7=n(Li,"P",{});var P$e=s($7);k9r=r(P$e,"This class cannot be instantiated directly using "),aMe=n(P$e,"CODE",{});var oCt=s(aMe);S9r=r(oCt,"__init__()"),oCt.forEach(t),R9r=r(P$e," (throws an error)."),P$e.forEach(t),B9r=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);f(I7.$$.fragment,xi),P9r=i(xi),nMe=n(xi,"P",{});var rCt=s(nMe);$9r=r(rCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rCt.forEach(t),I9r=i(xi),Cm=n(xi,"P",{});var LJ=s(Cm);q9r=r(LJ,`Note:
Loading a model from its configuration file does `),sMe=n(LJ,"STRONG",{});var tCt=s(sMe);N9r=r(tCt,"not"),tCt.forEach(t),j9r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(LJ,"A",{href:!0});var aCt=s(vH);D9r=r(aCt,"from_pretrained()"),aCt.forEach(t),G9r=r(LJ," to load the model weights."),LJ.forEach(t),O9r=i(xi),lMe=n(xi,"P",{});var nCt=s(lMe);V9r=r(nCt,"Examples:"),nCt.forEach(t),X9r=i(xi),f(q7.$$.fragment,xi),xi.forEach(t),z9r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);f(N7.$$.fragment,Ia),Q9r=i(Ia),iMe=n(Ia,"P",{});var sCt=s(iMe);W9r=r(sCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sCt.forEach(t),H9r=i(Ia),qn=n(Ia,"P",{});var dw=s(qn);U9r=r(dw,"The model class to instantiate is selected based on the "),dMe=n(dw,"CODE",{});var lCt=s(dMe);J9r=r(lCt,"model_type"),lCt.forEach(t),Y9r=r(dw,` property of the config object (either
passed as an argument or loaded from `),cMe=n(dw,"CODE",{});var iCt=s(cMe);K9r=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),Z9r=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(dw,"CODE",{});var dCt=s(mMe);exr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),oxr=r(dw,":"),dw.forEach(t),rxr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);Z5=n(Vo,"LI",{});var _Se=s(Z5);fMe=n(_Se,"STRONG",{});var cCt=s(fMe);txr=r(cCt,"albert"),cCt.forEach(t),axr=r(_Se," \u2014 "),TH=n(_Se,"A",{href:!0});var mCt=s(TH);nxr=r(mCt,"FlaxAlbertForMultipleChoice"),mCt.forEach(t),sxr=r(_Se," (ALBERT model)"),_Se.forEach(t),lxr=i(Vo),e3=n(Vo,"LI",{});var bSe=s(e3);gMe=n(bSe,"STRONG",{});var fCt=s(gMe);ixr=r(fCt,"bert"),fCt.forEach(t),dxr=r(bSe," \u2014 "),MH=n(bSe,"A",{href:!0});var gCt=s(MH);cxr=r(gCt,"FlaxBertForMultipleChoice"),gCt.forEach(t),mxr=r(bSe," (BERT model)"),bSe.forEach(t),fxr=i(Vo),o3=n(Vo,"LI",{});var FSe=s(o3);hMe=n(FSe,"STRONG",{});var hCt=s(hMe);gxr=r(hCt,"big_bird"),hCt.forEach(t),hxr=r(FSe," \u2014 "),EH=n(FSe,"A",{href:!0});var uCt=s(EH);uxr=r(uCt,"FlaxBigBirdForMultipleChoice"),uCt.forEach(t),pxr=r(FSe," (BigBird model)"),FSe.forEach(t),_xr=i(Vo),r3=n(Vo,"LI",{});var vSe=s(r3);uMe=n(vSe,"STRONG",{});var pCt=s(uMe);bxr=r(pCt,"distilbert"),pCt.forEach(t),Fxr=r(vSe," \u2014 "),CH=n(vSe,"A",{href:!0});var _Ct=s(CH);vxr=r(_Ct,"FlaxDistilBertForMultipleChoice"),_Ct.forEach(t),Txr=r(vSe," (DistilBERT model)"),vSe.forEach(t),Mxr=i(Vo),t3=n(Vo,"LI",{});var TSe=s(t3);pMe=n(TSe,"STRONG",{});var bCt=s(pMe);Exr=r(bCt,"electra"),bCt.forEach(t),Cxr=r(TSe," \u2014 "),wH=n(TSe,"A",{href:!0});var FCt=s(wH);wxr=r(FCt,"FlaxElectraForMultipleChoice"),FCt.forEach(t),Axr=r(TSe," (ELECTRA model)"),TSe.forEach(t),yxr=i(Vo),a3=n(Vo,"LI",{});var MSe=s(a3);_Me=n(MSe,"STRONG",{});var vCt=s(_Me);Lxr=r(vCt,"roberta"),vCt.forEach(t),xxr=r(MSe," \u2014 "),AH=n(MSe,"A",{href:!0});var TCt=s(AH);kxr=r(TCt,"FlaxRobertaForMultipleChoice"),TCt.forEach(t),Sxr=r(MSe," (RoBERTa model)"),MSe.forEach(t),Rxr=i(Vo),n3=n(Vo,"LI",{});var ESe=s(n3);bMe=n(ESe,"STRONG",{});var MCt=s(bMe);Bxr=r(MCt,"roformer"),MCt.forEach(t),Pxr=r(ESe," \u2014 "),yH=n(ESe,"A",{href:!0});var ECt=s(yH);$xr=r(ECt,"FlaxRoFormerForMultipleChoice"),ECt.forEach(t),Ixr=r(ESe," (RoFormer model)"),ESe.forEach(t),qxr=i(Vo),s3=n(Vo,"LI",{});var CSe=s(s3);FMe=n(CSe,"STRONG",{});var CCt=s(FMe);Nxr=r(CCt,"xlm-roberta"),CCt.forEach(t),jxr=r(CSe," \u2014 "),LH=n(CSe,"A",{href:!0});var wCt=s(LH);Dxr=r(wCt,"FlaxXLMRobertaForMultipleChoice"),wCt.forEach(t),Gxr=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),Vo.forEach(t),Oxr=i(Ia),vMe=n(Ia,"P",{});var ACt=s(vMe);Vxr=r(ACt,"Examples:"),ACt.forEach(t),Xxr=i(Ia),f(j7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),CBe=i(c),wm=n(c,"H2",{class:!0});var $$e=s(wm);l3=n($$e,"A",{id:!0,class:!0,href:!0});var yCt=s(l3);TMe=n(yCt,"SPAN",{});var LCt=s(TMe);f(D7.$$.fragment,LCt),LCt.forEach(t),yCt.forEach(t),zxr=i($$e),MMe=n($$e,"SPAN",{});var xCt=s(MMe);Qxr=r(xCt,"FlaxAutoModelForNextSentencePrediction"),xCt.forEach(t),$$e.forEach(t),wBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);f(G7.$$.fragment,ki),Wxr=i(ki),Am=n(ki,"P",{});var xJ=s(Am);Hxr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xH=n(xJ,"A",{href:!0});var kCt=s(xH);Uxr=r(kCt,"from_pretrained()"),kCt.forEach(t),Jxr=r(xJ," class method or the "),kH=n(xJ,"A",{href:!0});var SCt=s(kH);Yxr=r(SCt,"from_config()"),SCt.forEach(t),Kxr=r(xJ,` class
method.`),xJ.forEach(t),Zxr=i(ki),O7=n(ki,"P",{});var I$e=s(O7);ekr=r(I$e,"This class cannot be instantiated directly using "),EMe=n(I$e,"CODE",{});var RCt=s(EMe);okr=r(RCt,"__init__()"),RCt.forEach(t),rkr=r(I$e," (throws an error)."),I$e.forEach(t),tkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);f(V7.$$.fragment,Si),akr=i(Si),CMe=n(Si,"P",{});var BCt=s(CMe);nkr=r(BCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BCt.forEach(t),skr=i(Si),ym=n(Si,"P",{});var kJ=s(ym);lkr=r(kJ,`Note:
Loading a model from its configuration file does `),wMe=n(kJ,"STRONG",{});var PCt=s(wMe);ikr=r(PCt,"not"),PCt.forEach(t),dkr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(kJ,"A",{href:!0});var $Ct=s(SH);ckr=r($Ct,"from_pretrained()"),$Ct.forEach(t),mkr=r(kJ," to load the model weights."),kJ.forEach(t),fkr=i(Si),AMe=n(Si,"P",{});var ICt=s(AMe);gkr=r(ICt,"Examples:"),ICt.forEach(t),hkr=i(Si),f(X7.$$.fragment,Si),Si.forEach(t),ukr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);f(z7.$$.fragment,qa),pkr=i(qa),yMe=n(qa,"P",{});var qCt=s(yMe);_kr=r(qCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qCt.forEach(t),bkr=i(qa),Nn=n(qa,"P",{});var cw=s(Nn);Fkr=r(cw,"The model class to instantiate is selected based on the "),LMe=n(cw,"CODE",{});var NCt=s(LMe);vkr=r(NCt,"model_type"),NCt.forEach(t),Tkr=r(cw,` property of the config object (either
passed as an argument or loaded from `),xMe=n(cw,"CODE",{});var jCt=s(xMe);Mkr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),Ekr=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(cw,"CODE",{});var DCt=s(kMe);Ckr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),wkr=r(cw,":"),cw.forEach(t),Akr=i(qa),SMe=n(qa,"UL",{});var GCt=s(SMe);i3=n(GCt,"LI",{});var wSe=s(i3);RMe=n(wSe,"STRONG",{});var OCt=s(RMe);ykr=r(OCt,"bert"),OCt.forEach(t),Lkr=r(wSe," \u2014 "),RH=n(wSe,"A",{href:!0});var VCt=s(RH);xkr=r(VCt,"FlaxBertForNextSentencePrediction"),VCt.forEach(t),kkr=r(wSe," (BERT model)"),wSe.forEach(t),GCt.forEach(t),Skr=i(qa),BMe=n(qa,"P",{});var XCt=s(BMe);Rkr=r(XCt,"Examples:"),XCt.forEach(t),Bkr=i(qa),f(Q7.$$.fragment,qa),qa.forEach(t),ki.forEach(t),ABe=i(c),Lm=n(c,"H2",{class:!0});var q$e=s(Lm);d3=n(q$e,"A",{id:!0,class:!0,href:!0});var zCt=s(d3);PMe=n(zCt,"SPAN",{});var QCt=s(PMe);f(W7.$$.fragment,QCt),QCt.forEach(t),zCt.forEach(t),Pkr=i(q$e),$Me=n(q$e,"SPAN",{});var WCt=s($Me);$kr=r(WCt,"FlaxAutoModelForImageClassification"),WCt.forEach(t),q$e.forEach(t),yBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);f(H7.$$.fragment,Ri),Ikr=i(Ri),xm=n(Ri,"P",{});var SJ=s(xm);qkr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BH=n(SJ,"A",{href:!0});var HCt=s(BH);Nkr=r(HCt,"from_pretrained()"),HCt.forEach(t),jkr=r(SJ," class method or the "),PH=n(SJ,"A",{href:!0});var UCt=s(PH);Dkr=r(UCt,"from_config()"),UCt.forEach(t),Gkr=r(SJ,` class
method.`),SJ.forEach(t),Okr=i(Ri),U7=n(Ri,"P",{});var N$e=s(U7);Vkr=r(N$e,"This class cannot be instantiated directly using "),IMe=n(N$e,"CODE",{});var JCt=s(IMe);Xkr=r(JCt,"__init__()"),JCt.forEach(t),zkr=r(N$e," (throws an error)."),N$e.forEach(t),Qkr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);f(J7.$$.fragment,Bi),Wkr=i(Bi),qMe=n(Bi,"P",{});var YCt=s(qMe);Hkr=r(YCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YCt.forEach(t),Ukr=i(Bi),km=n(Bi,"P",{});var RJ=s(km);Jkr=r(RJ,`Note:
Loading a model from its configuration file does `),NMe=n(RJ,"STRONG",{});var KCt=s(NMe);Ykr=r(KCt,"not"),KCt.forEach(t),Kkr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(RJ,"A",{href:!0});var ZCt=s($H);Zkr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),eSr=r(RJ," to load the model weights."),RJ.forEach(t),oSr=i(Bi),jMe=n(Bi,"P",{});var e5t=s(jMe);rSr=r(e5t,"Examples:"),e5t.forEach(t),tSr=i(Bi),f(Y7.$$.fragment,Bi),Bi.forEach(t),aSr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);f(K7.$$.fragment,Na),nSr=i(Na),DMe=n(Na,"P",{});var o5t=s(DMe);sSr=r(o5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o5t.forEach(t),lSr=i(Na),jn=n(Na,"P",{});var mw=s(jn);iSr=r(mw,"The model class to instantiate is selected based on the "),GMe=n(mw,"CODE",{});var r5t=s(GMe);dSr=r(r5t,"model_type"),r5t.forEach(t),cSr=r(mw,` property of the config object (either
passed as an argument or loaded from `),OMe=n(mw,"CODE",{});var t5t=s(OMe);mSr=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),fSr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(mw,"CODE",{});var a5t=s(VMe);gSr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),hSr=r(mw,":"),mw.forEach(t),uSr=i(Na),Z7=n(Na,"UL",{});var j$e=s(Z7);c3=n(j$e,"LI",{});var ASe=s(c3);XMe=n(ASe,"STRONG",{});var n5t=s(XMe);pSr=r(n5t,"beit"),n5t.forEach(t),_Sr=r(ASe," \u2014 "),IH=n(ASe,"A",{href:!0});var s5t=s(IH);bSr=r(s5t,"FlaxBeitForImageClassification"),s5t.forEach(t),FSr=r(ASe," (BEiT model)"),ASe.forEach(t),vSr=i(j$e),m3=n(j$e,"LI",{});var ySe=s(m3);zMe=n(ySe,"STRONG",{});var l5t=s(zMe);TSr=r(l5t,"vit"),l5t.forEach(t),MSr=r(ySe," \u2014 "),qH=n(ySe,"A",{href:!0});var i5t=s(qH);ESr=r(i5t,"FlaxViTForImageClassification"),i5t.forEach(t),CSr=r(ySe," (ViT model)"),ySe.forEach(t),j$e.forEach(t),wSr=i(Na),QMe=n(Na,"P",{});var d5t=s(QMe);ASr=r(d5t,"Examples:"),d5t.forEach(t),ySr=i(Na),f(e8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),LBe=i(c),Sm=n(c,"H2",{class:!0});var D$e=s(Sm);f3=n(D$e,"A",{id:!0,class:!0,href:!0});var c5t=s(f3);WMe=n(c5t,"SPAN",{});var m5t=s(WMe);f(o8.$$.fragment,m5t),m5t.forEach(t),c5t.forEach(t),LSr=i(D$e),HMe=n(D$e,"SPAN",{});var f5t=s(HMe);xSr=r(f5t,"FlaxAutoModelForVision2Seq"),f5t.forEach(t),D$e.forEach(t),xBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);f(r8.$$.fragment,Pi),kSr=i(Pi),Rm=n(Pi,"P",{});var BJ=s(Rm);SSr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NH=n(BJ,"A",{href:!0});var g5t=s(NH);RSr=r(g5t,"from_pretrained()"),g5t.forEach(t),BSr=r(BJ," class method or the "),jH=n(BJ,"A",{href:!0});var h5t=s(jH);PSr=r(h5t,"from_config()"),h5t.forEach(t),$Sr=r(BJ,` class
method.`),BJ.forEach(t),ISr=i(Pi),t8=n(Pi,"P",{});var G$e=s(t8);qSr=r(G$e,"This class cannot be instantiated directly using "),UMe=n(G$e,"CODE",{});var u5t=s(UMe);NSr=r(u5t,"__init__()"),u5t.forEach(t),jSr=r(G$e," (throws an error)."),G$e.forEach(t),DSr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);f(a8.$$.fragment,$i),GSr=i($i),JMe=n($i,"P",{});var p5t=s(JMe);OSr=r(p5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p5t.forEach(t),VSr=i($i),Bm=n($i,"P",{});var PJ=s(Bm);XSr=r(PJ,`Note:
Loading a model from its configuration file does `),YMe=n(PJ,"STRONG",{});var _5t=s(YMe);zSr=r(_5t,"not"),_5t.forEach(t),QSr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(PJ,"A",{href:!0});var b5t=s(DH);WSr=r(b5t,"from_pretrained()"),b5t.forEach(t),HSr=r(PJ," to load the model weights."),PJ.forEach(t),USr=i($i),KMe=n($i,"P",{});var F5t=s(KMe);JSr=r(F5t,"Examples:"),F5t.forEach(t),YSr=i($i),f(n8.$$.fragment,$i),$i.forEach(t),KSr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);f(s8.$$.fragment,ja),ZSr=i(ja),ZMe=n(ja,"P",{});var v5t=s(ZMe);eRr=r(v5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v5t.forEach(t),oRr=i(ja),Dn=n(ja,"P",{});var fw=s(Dn);rRr=r(fw,"The model class to instantiate is selected based on the "),e4e=n(fw,"CODE",{});var T5t=s(e4e);tRr=r(T5t,"model_type"),T5t.forEach(t),aRr=r(fw,` property of the config object (either
passed as an argument or loaded from `),o4e=n(fw,"CODE",{});var M5t=s(o4e);nRr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),sRr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(fw,"CODE",{});var E5t=s(r4e);lRr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),iRr=r(fw,":"),fw.forEach(t),dRr=i(ja),t4e=n(ja,"UL",{});var C5t=s(t4e);g3=n(C5t,"LI",{});var LSe=s(g3);a4e=n(LSe,"STRONG",{});var w5t=s(a4e);cRr=r(w5t,"vision-encoder-decoder"),w5t.forEach(t),mRr=r(LSe," \u2014 "),GH=n(LSe,"A",{href:!0});var A5t=s(GH);fRr=r(A5t,"FlaxVisionEncoderDecoderModel"),A5t.forEach(t),gRr=r(LSe," (Vision Encoder decoder model)"),LSe.forEach(t),C5t.forEach(t),hRr=i(ja),n4e=n(ja,"P",{});var y5t=s(n4e);uRr=r(y5t,"Examples:"),y5t.forEach(t),pRr=i(ja),f(l8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(q5t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Dm,"id","extending-the-auto-classes"),d(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dm,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Om,"id","transformers.AutoConfig"),d(Om,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Om,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(m9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(f9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(g9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(h9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(u9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(p9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(_9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(b9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(F9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(v9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(T9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(M9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(E9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(C9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(w9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(A9,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(y9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(L9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(x9,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(k9,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(S9,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(R9,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(B9,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(P9,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d($9,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(I9,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(q9,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(N9,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(j9,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(D9,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(G9,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(O9,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(V9,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(X9,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(z9,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Q9,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(W9,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(H9,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(U9,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(J9,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Y9,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(K9,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(Z9,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(ex,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(ox,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(rx,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(tx,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(ax,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(nx,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(sx,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(lx,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(ix,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(dx,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(cx,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(mx,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(fx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(gx,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(hx,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(ux,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(px,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(_x,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(bx,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(Fx,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(vx,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(Tx,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(Mx,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(Ex,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(Cx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(wx,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(Ax,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(yx,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(Lx,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(xx,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(kx,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Sx,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Rx,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(Bx,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Px,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d($x,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(Ix,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(qx,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Nx,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(jx,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Dx,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Gx,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(Ox,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(Vx,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Xx,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(zx,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Qx,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(Wx,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Hx,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Ux,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(Jx,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(Yx,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(Kx,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Zx,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(ek,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ok,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(rk,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d($g,"class","docstring"),d(Qo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(tk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ak,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(nk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(sk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(lk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(ik,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(dk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(ck,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(mk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(fk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(gk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(hk,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(uk,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(pk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(_k,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(bk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Fk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(vk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Tk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Mk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Ek,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ck,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(wk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Ak,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(yk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(Lk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(xk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(kk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Sk,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(Rk,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Bk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Pk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d($k,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Ik,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(qk,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Nk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(jk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Dk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(Gk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Ok,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Vk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(Xk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(zk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Qk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Wk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Hk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Uk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Jk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Yk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Kk,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Zk,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(eS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(oS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(rS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(tS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(aS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(nS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(sS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(lS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(iS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(dS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(cS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(mS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(fS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(gS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(hS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(uS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(pS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(_S,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(bS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(FS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(vS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(TS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(MS,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(ES,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(CS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(wS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(AS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(yS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(LS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(xS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(kS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(SS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(RS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(BS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(PS,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d($S,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(IS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(qS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(NS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(jS,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(DS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(GS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(OS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(VS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(XS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(zS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(QS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(WS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(HS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(US,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(JS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(YS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(KS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(ZS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(eR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(oR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(rR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(tR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(aR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(nR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(sR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(lR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(iR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(dR,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(cR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(mR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(fR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(gR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(hR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(uR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(pR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(_R,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(fh,"class","docstring"),d(Wo,"class","docstring"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(bR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(FR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(vR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(TR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(MR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(ER,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(CR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(wR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(AR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(yR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(LR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(xR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(kR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(SR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(RR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(BR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(PR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d($R,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(IR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Bh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(qR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(NR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(jR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(DR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(GR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(OR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(VR,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(XR,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(zR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Xh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(QR,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WR,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HR,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(UR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(JR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(YR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(KR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(ZR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(eB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(oB,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(rB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(tB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(aB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(nB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(sB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(lB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(iB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(dB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(cB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(mB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(fB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(gB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(hB,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(uB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(pB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(_B,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(bB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(FB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(vB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(TB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(MB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(EB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(CB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(wB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(AB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(yB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(LB,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(xB,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(kB,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(SB,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(RB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(BB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(PB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d($B,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(IB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(qB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(NB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(jB,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(DB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(GB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(OB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(VB,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(XB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(zB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(QB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(WB,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(HB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(UB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(JB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(YB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(KB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(ZB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(eP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(oP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(rP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(tP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(aP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(nP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(sP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(lP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(iP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(dP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(cP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(mP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(fP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(gP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(hP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(uP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(pP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(_P,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(bP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(FP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(vP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(TP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(MP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(EP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(CP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(wP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(AP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(yP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(LP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(xP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(kP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(SP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(RP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(BP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(kp,"id","transformers.AutoModelForPreTraining"),d(kp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kp,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(PP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($P,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(qP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(NP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(jP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(DP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(GP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(OP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(VP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(XP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(zP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(QP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(WP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(HP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(UP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(JP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(YP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(KP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(ZP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(e$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(o$,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(r$,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(t$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(a$,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(n$,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(s$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(l$,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(i$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(d$,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(c$,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(m$,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(f$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(g$,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(h$,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(u$,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(p$,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(_$,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(b$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(F$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(v$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(T$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(__,"id","transformers.AutoModelForCausalLM"),d(__,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(__,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(M$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(E$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(C$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(w$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(A$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(y$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(L$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(x$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(k$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(S$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(R$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(B$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(P$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d($$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(I$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(q$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(N$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(j$,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(D$,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(G$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(O$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(V$,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(X$,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(z$,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(Q$,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(W$,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(H$,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(U$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(J$,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(Y$,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(K$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(Z$,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(eI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(oI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(rI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(tI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(aI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(nI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(eb,"id","transformers.AutoModelForMaskedLM"),d(eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eb,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(sI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(dI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(cI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(mI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(fI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(gI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(hI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(uI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(pI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(_I,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(bI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(FI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(vI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(TI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(MI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(EI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(CI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(wI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(AI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(yI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(LI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(xI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(kI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(SI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(RI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(BI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(PI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d($I,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(II,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(qI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(NI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(jI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(DI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(GI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(OI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(qb,"id","transformers.AutoModelForSeq2SeqLM"),d(qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qb,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(VI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(QI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(WI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(HI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(UI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(JI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(YI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(KI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(ZI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(eq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(oq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(rq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(tq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(aq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(nq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(sq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(lq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(o2,"id","transformers.AutoModelForSequenceClassification"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(iq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(mq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(fq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(gq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(hq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(uq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(pq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(_q,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(bq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Fq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(vq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Tq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Mq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Eq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Cq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(wq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Aq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(yq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Lq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(xq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(kq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Sq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Rq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Bq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Pq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d($q,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Iq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(qq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Nq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(jq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Dq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Gq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Oq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Vq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Xq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(zq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Qq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Wq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Hq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Uq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Jq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Yq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(Kq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(Zq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(eN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(oN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(rN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(U2,"id","transformers.AutoModelForMultipleChoice"),d(U2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U2,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(tN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(sN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(lN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(iN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(dN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(cN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(mN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(fN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(gN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(hN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(uN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(pN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(_N,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(bN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(FN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(vN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(TN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(MN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(EN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(CN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(wN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(AN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(yN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(LN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(xN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(kN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(SN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(RN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(BN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(wF,"id","transformers.AutoModelForNextSentencePrediction"),d(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wF,"href","#transformers.AutoModelForNextSentencePrediction"),d(_d,"class","relative group"),d(PN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($N,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(qN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(NN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(jN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(DN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(GN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(RF,"id","transformers.AutoModelForTokenClassification"),d(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RF,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(ON,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(zN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(QN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(WN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(HN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(UN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(JN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(YN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(KN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(ZN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(ej,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(oj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(rj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(tj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(aj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(nj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(sj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(lj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(ij,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(dj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(cj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(mj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(fj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(gj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(hj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(uj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(pj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(_j,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(bj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Fj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(vj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Tj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Mj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Ej,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(gv,"id","transformers.AutoModelForQuestionAnswering"),d(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gv,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(yj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Lj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(xj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(kj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Sj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Rj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Bj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Pj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d($j,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Ij,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(qj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Nj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(jj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Dj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Gj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Oj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Vj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Xj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(zj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Qj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Wj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Hj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Uj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Jj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Yj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(Kj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(Zj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(eD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(oD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(rD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(tD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(aD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(nD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(sD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(lD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(iD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(dD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(cD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(mD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(eT,"id","transformers.AutoModelForTableQuestionAnswering"),d(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(fD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(uD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(tT,"id","transformers.AutoModelForImageClassification"),d(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tT,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(pD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_D,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(FD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(vD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(TD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(MD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(ED,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(CD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(wD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(AD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(yD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(LD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(xD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(kD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(SD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(RD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(hT,"id","transformers.AutoModelForVision2Seq"),d(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hT,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(BD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($D,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(ID,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(_T,"id","transformers.AutoModelForAudioClassification"),d(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_T,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(qD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ND,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(DD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(GD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(OD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(VD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(XD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(zD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(QD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(WD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(yT,"id","transformers.AutoModelForAudioFrameClassification"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(HD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(YD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(KD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(ZD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(eG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(BT,"id","transformers.AutoModelForCTC"),d(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BT,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(oG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(aG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(nG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(sG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(lG,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(iG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(dG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(cG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(mG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(mr,"class","docstring"),d(VT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(fG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(uG,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(pG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(WT,"id","transformers.AutoModelForAudioXVector"),d(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WT,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(_G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(vG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(TG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(MG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(EG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(ZT,"id","transformers.AutoModelForMaskedImageModeling"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(CG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(yG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(LG,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(xG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(a1,"id","transformers.AutoModelForObjectDetection"),d(a1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a1,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(kG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(BG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(ur,"class","docstring"),d(l1,"id","transformers.AutoModelForImageSegmentation"),d(l1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l1,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(PG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(qG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(pr,"class","docstring"),d(c1,"id","transformers.AutoModelForSemanticSegmentation"),d(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c1,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(GG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(OG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(VG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(u1,"id","transformers.AutoModelForInstanceSegmentation"),d(u1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u1,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(XG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(WG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(b1,"id","transformers.TFAutoModel"),d(b1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b1,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(HG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(YG,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(KG,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(ZG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(eO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(oO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(rO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(tO,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(aO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(nO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(sO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(lO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(iO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(dO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(cO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(mO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(fO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(gO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(hO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(uO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(pO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(_O,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(bO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(FO,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(vO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(TO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(MO,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(EO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(CO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(wO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(AO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(yO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(LO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(xO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(kO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(SO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(RO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(BO,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(PO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d($O,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(IO,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(qO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(NO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(jO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(DO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(lM,"id","transformers.TFAutoModelForPreTraining"),d(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lM,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(GO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(XO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(zO,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(QO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(WO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(HO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(UO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(JO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(YO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(KO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(ZO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(eV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(oV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(rV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(tV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(aV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(nV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(sV,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(lV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(iV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(dV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(cV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(mV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring"),d(vr,"class","docstring"),d(kM,"id","transformers.TFAutoModelForCausalLM"),d(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kM,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(fV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(uV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(pV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(_V,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(bV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(FV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(vV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(TV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(MV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(EV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(CV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(wV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(AV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(VM,"id","transformers.TFAutoModelForImageClassification"),d(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VM,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(yV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(kV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(SV,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(Mr,"class","docstring"),d(QM,"id","transformers.TFAutoModelForMaskedLM"),d(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QM,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d($V,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(IV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(qV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(NV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(jV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(DV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(GV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(OV,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(VV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(XV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(zV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(QV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(WV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(HV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(UV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(JV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(YV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(KV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(ZV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(eX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(g4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(oX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(aX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(nX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(sX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(lX,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(iX,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(dX,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(cX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(mX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(fX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(gX,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(C4,"id","transformers.TFAutoModelForSequenceClassification"),d(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C4,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(_X,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(bX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(FX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(vX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(TX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(MX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(EX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(CX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(wX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(AX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(LX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(xX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(kX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(SX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(RX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(BX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(PX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d($X,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(IX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(qX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(NX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(jX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(DX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(GX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(OX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(Y4,"id","transformers.TFAutoModelForMultipleChoice"),d(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y4,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(QX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(WX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(HX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(UX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(JX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(YX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(KX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(ZX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(ez,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(oz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(rz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(tz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(az,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(nz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(sz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(lz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(iz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(uE,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(fz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(_E,"id","transformers.TFAutoModelForTokenClassification"),d(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_E,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(pz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(_z,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(bz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Fz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(vz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Tz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Mz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Ez,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Cz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(wz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Az,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(yz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Lz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(xz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(kz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Sz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Rz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Bz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Pz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d($z,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(NE,"id","transformers.TFAutoModelForQuestionAnswering"),d(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NE,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(jz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Dz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Gz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Oz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Vz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Xz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(zz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(Qz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Wz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Hz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(Uz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(Jz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(Yz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(Kz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(Zz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(eQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(oQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(rQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(tQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(aQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(nC,"id","transformers.TFAutoModelForVision2Seq"),d(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nC,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(nQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(iQ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(lC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(dQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(fQ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(dC,"id","transformers.FlaxAutoModel"),d(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dC,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(gQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(pQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(_Q,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(bQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(FQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(vQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(TQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(MQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(EQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(CQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(wQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(AQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(yQ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(LQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(xQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(kQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(SQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(RQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(BQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(PQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d($Q,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(IQ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(qQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(NQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(jQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(DQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d($C,"id","transformers.FlaxAutoModelForCausalLM"),d($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($C,"href","#transformers.FlaxAutoModelForCausalLM"),d(om,"class","relative group"),d(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(XQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(zQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(QQ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(WQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(HQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(GC,"id","transformers.FlaxAutoModelForPreTraining"),d(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GC,"href","#transformers.FlaxAutoModelForPreTraining"),d(am,"class","relative group"),d(UQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(KQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(ZQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(eW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(oW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(rW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(tW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(aW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(nW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(sW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(lW,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(iW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(dW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(e5,"id","transformers.FlaxAutoModelForMaskedLM"),d(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e5,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lm,"class","relative group"),d(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(gW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(hW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(uW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(pW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(_W,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(bW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(FW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(vW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(TW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(MW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(m5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(cm,"class","relative group"),d(EW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(AW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(LW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(xW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(kW,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(SW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(RW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(BW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(PW,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(T5,"id","transformers.FlaxAutoModelForSequenceClassification"),d(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T5,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(gm,"class","relative group"),d($W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(NW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(jW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(DW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(GW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(OW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(VW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(XW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(zW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(QW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(WW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(R5,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pm,"class","relative group"),d(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(YW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(KW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(ZW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(eH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(oH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(rH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(tH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(aH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(nH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(sH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(V5,"id","transformers.FlaxAutoModelForTokenClassification"),d(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V5,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Fm,"class","relative group"),d(lH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(cH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(mH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(fH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(gH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(hH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(uH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(pH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(_H,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(K5,"id","transformers.FlaxAutoModelForMultipleChoice"),d(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K5,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mm,"class","relative group"),d(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(TH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(MH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(EH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(CH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(wH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(AH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(yH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(LH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(l3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wm,"class","relative group"),d(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(RH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(d3,"id","transformers.FlaxAutoModelForImageClassification"),d(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d3,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lm,"class","relative group"),d(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(IH,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(qH,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(f3,"id","transformers.FlaxAutoModelForVision2Seq"),d(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Sm,"class","relative group"),d(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(GH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,_){e(document.head,Z),b(c,io,_),b(c,de,_),e(de,Ce),e(Ce,lo),g(fe,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,Im,_),b(c,ma,_),e(ma,qi),e(ma,Ni),e(Ni,gw),e(ma,qm),b(c,xe,_),b(c,co,_),e(co,ji),e(co,Gn),e(Gn,hw),e(co,On),e(co,Vn),e(Vn,uw),e(co,Di),e(co,Xn),e(Xn,pw),e(co,Gi),b(c,Nm,_),g(Da,c,_),b(c,mo,_),b(c,pe,_),e(pe,n9),e(pe,Oi),e(Oi,s9),e(pe,l9),b(c,zo,_),b(c,Ga,_),e(Ga,i9),e(Ga,jm),e(jm,d9),e(Ga,O$e),b(c,xSe,_),b(c,Vi,_),e(Vi,Dm),e(Dm,$J),g(_w,$J,null),e(Vi,V$e),e(Vi,IJ),e(IJ,X$e),b(c,kSe,_),b(c,zn,_),e(zn,z$e),e(zn,qJ),e(qJ,Q$e),e(zn,W$e),e(zn,NJ),e(NJ,H$e),e(zn,U$e),b(c,SSe,_),g(bw,c,_),b(c,RSe,_),b(c,c9,_),e(c9,J$e),b(c,BSe,_),g(Gm,c,_),b(c,PSe,_),b(c,Xi,_),e(Xi,Om),e(Om,jJ),g(Fw,jJ,null),e(Xi,Y$e),e(Xi,DJ),e(DJ,K$e),b(c,$Se,_),b(c,Qo,_),g(vw,Qo,null),e(Qo,Z$e),e(Qo,Tw),e(Tw,eIe),e(Tw,m9),e(m9,oIe),e(Tw,rIe),e(Qo,tIe),e(Qo,Mw),e(Mw,aIe),e(Mw,GJ),e(GJ,nIe),e(Mw,sIe),e(Qo,lIe),e(Qo,fo),g(Ew,fo,null),e(fo,iIe),e(fo,OJ),e(OJ,dIe),e(fo,cIe),e(fo,zi),e(zi,mIe),e(zi,VJ),e(VJ,fIe),e(zi,gIe),e(zi,XJ),e(XJ,hIe),e(zi,uIe),e(fo,pIe),e(fo,F),e(F,Vm),e(Vm,zJ),e(zJ,_Ie),e(Vm,bIe),e(Vm,f9),e(f9,FIe),e(Vm,vIe),e(F,TIe),e(F,Xm),e(Xm,QJ),e(QJ,MIe),e(Xm,EIe),e(Xm,g9),e(g9,CIe),e(Xm,wIe),e(F,AIe),e(F,zm),e(zm,WJ),e(WJ,yIe),e(zm,LIe),e(zm,h9),e(h9,xIe),e(zm,kIe),e(F,SIe),e(F,Qm),e(Qm,HJ),e(HJ,RIe),e(Qm,BIe),e(Qm,u9),e(u9,PIe),e(Qm,$Ie),e(F,IIe),e(F,Wm),e(Wm,UJ),e(UJ,qIe),e(Wm,NIe),e(Wm,p9),e(p9,jIe),e(Wm,DIe),e(F,GIe),e(F,Hm),e(Hm,JJ),e(JJ,OIe),e(Hm,VIe),e(Hm,_9),e(_9,XIe),e(Hm,zIe),e(F,QIe),e(F,Um),e(Um,YJ),e(YJ,WIe),e(Um,HIe),e(Um,b9),e(b9,UIe),e(Um,JIe),e(F,YIe),e(F,Jm),e(Jm,KJ),e(KJ,KIe),e(Jm,ZIe),e(Jm,F9),e(F9,eqe),e(Jm,oqe),e(F,rqe),e(F,Ym),e(Ym,ZJ),e(ZJ,tqe),e(Ym,aqe),e(Ym,v9),e(v9,nqe),e(Ym,sqe),e(F,lqe),e(F,Km),e(Km,eY),e(eY,iqe),e(Km,dqe),e(Km,T9),e(T9,cqe),e(Km,mqe),e(F,fqe),e(F,Zm),e(Zm,oY),e(oY,gqe),e(Zm,hqe),e(Zm,M9),e(M9,uqe),e(Zm,pqe),e(F,_qe),e(F,ef),e(ef,rY),e(rY,bqe),e(ef,Fqe),e(ef,E9),e(E9,vqe),e(ef,Tqe),e(F,Mqe),e(F,of),e(of,tY),e(tY,Eqe),e(of,Cqe),e(of,C9),e(C9,wqe),e(of,Aqe),e(F,yqe),e(F,rf),e(rf,aY),e(aY,Lqe),e(rf,xqe),e(rf,w9),e(w9,kqe),e(rf,Sqe),e(F,Rqe),e(F,tf),e(tf,nY),e(nY,Bqe),e(tf,Pqe),e(tf,A9),e(A9,$qe),e(tf,Iqe),e(F,qqe),e(F,af),e(af,sY),e(sY,Nqe),e(af,jqe),e(af,y9),e(y9,Dqe),e(af,Gqe),e(F,Oqe),e(F,nf),e(nf,lY),e(lY,Vqe),e(nf,Xqe),e(nf,L9),e(L9,zqe),e(nf,Qqe),e(F,Wqe),e(F,sf),e(sf,iY),e(iY,Hqe),e(sf,Uqe),e(sf,x9),e(x9,Jqe),e(sf,Yqe),e(F,Kqe),e(F,lf),e(lf,dY),e(dY,Zqe),e(lf,eNe),e(lf,k9),e(k9,oNe),e(lf,rNe),e(F,tNe),e(F,df),e(df,cY),e(cY,aNe),e(df,nNe),e(df,S9),e(S9,sNe),e(df,lNe),e(F,iNe),e(F,cf),e(cf,mY),e(mY,dNe),e(cf,cNe),e(cf,R9),e(R9,mNe),e(cf,fNe),e(F,gNe),e(F,mf),e(mf,fY),e(fY,hNe),e(mf,uNe),e(mf,B9),e(B9,pNe),e(mf,_Ne),e(F,bNe),e(F,ff),e(ff,gY),e(gY,FNe),e(ff,vNe),e(ff,P9),e(P9,TNe),e(ff,MNe),e(F,ENe),e(F,gf),e(gf,hY),e(hY,CNe),e(gf,wNe),e(gf,$9),e($9,ANe),e(gf,yNe),e(F,LNe),e(F,hf),e(hf,uY),e(uY,xNe),e(hf,kNe),e(hf,I9),e(I9,SNe),e(hf,RNe),e(F,BNe),e(F,uf),e(uf,pY),e(pY,PNe),e(uf,$Ne),e(uf,q9),e(q9,INe),e(uf,qNe),e(F,NNe),e(F,pf),e(pf,_Y),e(_Y,jNe),e(pf,DNe),e(pf,N9),e(N9,GNe),e(pf,ONe),e(F,VNe),e(F,_f),e(_f,bY),e(bY,XNe),e(_f,zNe),e(_f,j9),e(j9,QNe),e(_f,WNe),e(F,HNe),e(F,bf),e(bf,FY),e(FY,UNe),e(bf,JNe),e(bf,D9),e(D9,YNe),e(bf,KNe),e(F,ZNe),e(F,Ff),e(Ff,vY),e(vY,eje),e(Ff,oje),e(Ff,G9),e(G9,rje),e(Ff,tje),e(F,aje),e(F,vf),e(vf,TY),e(TY,nje),e(vf,sje),e(vf,O9),e(O9,lje),e(vf,ije),e(F,dje),e(F,Tf),e(Tf,MY),e(MY,cje),e(Tf,mje),e(Tf,V9),e(V9,fje),e(Tf,gje),e(F,hje),e(F,Mf),e(Mf,EY),e(EY,uje),e(Mf,pje),e(Mf,X9),e(X9,_je),e(Mf,bje),e(F,Fje),e(F,Ef),e(Ef,CY),e(CY,vje),e(Ef,Tje),e(Ef,z9),e(z9,Mje),e(Ef,Eje),e(F,Cje),e(F,Cf),e(Cf,wY),e(wY,wje),e(Cf,Aje),e(Cf,Q9),e(Q9,yje),e(Cf,Lje),e(F,xje),e(F,wf),e(wf,AY),e(AY,kje),e(wf,Sje),e(wf,W9),e(W9,Rje),e(wf,Bje),e(F,Pje),e(F,Af),e(Af,yY),e(yY,$je),e(Af,Ije),e(Af,H9),e(H9,qje),e(Af,Nje),e(F,jje),e(F,yf),e(yf,LY),e(LY,Dje),e(yf,Gje),e(yf,U9),e(U9,Oje),e(yf,Vje),e(F,Xje),e(F,Lf),e(Lf,xY),e(xY,zje),e(Lf,Qje),e(Lf,J9),e(J9,Wje),e(Lf,Hje),e(F,Uje),e(F,xf),e(xf,kY),e(kY,Jje),e(xf,Yje),e(xf,Y9),e(Y9,Kje),e(xf,Zje),e(F,eDe),e(F,kf),e(kf,SY),e(SY,oDe),e(kf,rDe),e(kf,K9),e(K9,tDe),e(kf,aDe),e(F,nDe),e(F,Sf),e(Sf,RY),e(RY,sDe),e(Sf,lDe),e(Sf,Z9),e(Z9,iDe),e(Sf,dDe),e(F,cDe),e(F,Rf),e(Rf,BY),e(BY,mDe),e(Rf,fDe),e(Rf,ex),e(ex,gDe),e(Rf,hDe),e(F,uDe),e(F,Bf),e(Bf,PY),e(PY,pDe),e(Bf,_De),e(Bf,ox),e(ox,bDe),e(Bf,FDe),e(F,vDe),e(F,Pf),e(Pf,$Y),e($Y,TDe),e(Pf,MDe),e(Pf,rx),e(rx,EDe),e(Pf,CDe),e(F,wDe),e(F,$f),e($f,IY),e(IY,ADe),e($f,yDe),e($f,tx),e(tx,LDe),e($f,xDe),e(F,kDe),e(F,If),e(If,qY),e(qY,SDe),e(If,RDe),e(If,ax),e(ax,BDe),e(If,PDe),e(F,$De),e(F,qf),e(qf,NY),e(NY,IDe),e(qf,qDe),e(qf,nx),e(nx,NDe),e(qf,jDe),e(F,DDe),e(F,Nf),e(Nf,jY),e(jY,GDe),e(Nf,ODe),e(Nf,sx),e(sx,VDe),e(Nf,XDe),e(F,zDe),e(F,jf),e(jf,DY),e(DY,QDe),e(jf,WDe),e(jf,lx),e(lx,HDe),e(jf,UDe),e(F,JDe),e(F,Df),e(Df,GY),e(GY,YDe),e(Df,KDe),e(Df,ix),e(ix,ZDe),e(Df,eGe),e(F,oGe),e(F,Gf),e(Gf,OY),e(OY,rGe),e(Gf,tGe),e(Gf,dx),e(dx,aGe),e(Gf,nGe),e(F,sGe),e(F,Of),e(Of,VY),e(VY,lGe),e(Of,iGe),e(Of,cx),e(cx,dGe),e(Of,cGe),e(F,mGe),e(F,Vf),e(Vf,XY),e(XY,fGe),e(Vf,gGe),e(Vf,mx),e(mx,hGe),e(Vf,uGe),e(F,pGe),e(F,Xf),e(Xf,zY),e(zY,_Ge),e(Xf,bGe),e(Xf,fx),e(fx,FGe),e(Xf,vGe),e(F,TGe),e(F,zf),e(zf,QY),e(QY,MGe),e(zf,EGe),e(zf,gx),e(gx,CGe),e(zf,wGe),e(F,AGe),e(F,Qf),e(Qf,WY),e(WY,yGe),e(Qf,LGe),e(Qf,hx),e(hx,xGe),e(Qf,kGe),e(F,SGe),e(F,Wf),e(Wf,HY),e(HY,RGe),e(Wf,BGe),e(Wf,ux),e(ux,PGe),e(Wf,$Ge),e(F,IGe),e(F,Hf),e(Hf,UY),e(UY,qGe),e(Hf,NGe),e(Hf,px),e(px,jGe),e(Hf,DGe),e(F,GGe),e(F,Uf),e(Uf,JY),e(JY,OGe),e(Uf,VGe),e(Uf,_x),e(_x,XGe),e(Uf,zGe),e(F,QGe),e(F,Jf),e(Jf,YY),e(YY,WGe),e(Jf,HGe),e(Jf,bx),e(bx,UGe),e(Jf,JGe),e(F,YGe),e(F,Yf),e(Yf,KY),e(KY,KGe),e(Yf,ZGe),e(Yf,Fx),e(Fx,eOe),e(Yf,oOe),e(F,rOe),e(F,Kf),e(Kf,ZY),e(ZY,tOe),e(Kf,aOe),e(Kf,vx),e(vx,nOe),e(Kf,sOe),e(F,lOe),e(F,Zf),e(Zf,eK),e(eK,iOe),e(Zf,dOe),e(Zf,Tx),e(Tx,cOe),e(Zf,mOe),e(F,fOe),e(F,eg),e(eg,oK),e(oK,gOe),e(eg,hOe),e(eg,Mx),e(Mx,uOe),e(eg,pOe),e(F,_Oe),e(F,og),e(og,rK),e(rK,bOe),e(og,FOe),e(og,Ex),e(Ex,vOe),e(og,TOe),e(F,MOe),e(F,rg),e(rg,tK),e(tK,EOe),e(rg,COe),e(rg,Cx),e(Cx,wOe),e(rg,AOe),e(F,yOe),e(F,tg),e(tg,aK),e(aK,LOe),e(tg,xOe),e(tg,wx),e(wx,kOe),e(tg,SOe),e(F,ROe),e(F,ag),e(ag,nK),e(nK,BOe),e(ag,POe),e(ag,Ax),e(Ax,$Oe),e(ag,IOe),e(F,qOe),e(F,ng),e(ng,sK),e(sK,NOe),e(ng,jOe),e(ng,yx),e(yx,DOe),e(ng,GOe),e(F,OOe),e(F,sg),e(sg,lK),e(lK,VOe),e(sg,XOe),e(sg,Lx),e(Lx,zOe),e(sg,QOe),e(F,WOe),e(F,lg),e(lg,iK),e(iK,HOe),e(lg,UOe),e(lg,xx),e(xx,JOe),e(lg,YOe),e(F,KOe),e(F,ig),e(ig,dK),e(dK,ZOe),e(ig,eVe),e(ig,kx),e(kx,oVe),e(ig,rVe),e(F,tVe),e(F,dg),e(dg,cK),e(cK,aVe),e(dg,nVe),e(dg,Sx),e(Sx,sVe),e(dg,lVe),e(F,iVe),e(F,cg),e(cg,mK),e(mK,dVe),e(cg,cVe),e(cg,Rx),e(Rx,mVe),e(cg,fVe),e(F,gVe),e(F,mg),e(mg,fK),e(fK,hVe),e(mg,uVe),e(mg,Bx),e(Bx,pVe),e(mg,_Ve),e(F,bVe),e(F,fg),e(fg,gK),e(gK,FVe),e(fg,vVe),e(fg,Px),e(Px,TVe),e(fg,MVe),e(F,EVe),e(F,gg),e(gg,hK),e(hK,CVe),e(gg,wVe),e(gg,$x),e($x,AVe),e(gg,yVe),e(F,LVe),e(F,hg),e(hg,uK),e(uK,xVe),e(hg,kVe),e(hg,Ix),e(Ix,SVe),e(hg,RVe),e(F,BVe),e(F,ug),e(ug,pK),e(pK,PVe),e(ug,$Ve),e(ug,qx),e(qx,IVe),e(ug,qVe),e(F,NVe),e(F,pg),e(pg,_K),e(_K,jVe),e(pg,DVe),e(pg,Nx),e(Nx,GVe),e(pg,OVe),e(F,VVe),e(F,_g),e(_g,bK),e(bK,XVe),e(_g,zVe),e(_g,jx),e(jx,QVe),e(_g,WVe),e(F,HVe),e(F,bg),e(bg,FK),e(FK,UVe),e(bg,JVe),e(bg,Dx),e(Dx,YVe),e(bg,KVe),e(F,ZVe),e(F,Fg),e(Fg,vK),e(vK,eXe),e(Fg,oXe),e(Fg,Gx),e(Gx,rXe),e(Fg,tXe),e(F,aXe),e(F,vg),e(vg,TK),e(TK,nXe),e(vg,sXe),e(vg,Ox),e(Ox,lXe),e(vg,iXe),e(F,dXe),e(F,Tg),e(Tg,MK),e(MK,cXe),e(Tg,mXe),e(Tg,Vx),e(Vx,fXe),e(Tg,gXe),e(F,hXe),e(F,Mg),e(Mg,EK),e(EK,uXe),e(Mg,pXe),e(Mg,Xx),e(Xx,_Xe),e(Mg,bXe),e(F,FXe),e(F,Eg),e(Eg,CK),e(CK,vXe),e(Eg,TXe),e(Eg,zx),e(zx,MXe),e(Eg,EXe),e(F,CXe),e(F,Cg),e(Cg,wK),e(wK,wXe),e(Cg,AXe),e(Cg,Qx),e(Qx,yXe),e(Cg,LXe),e(F,xXe),e(F,wg),e(wg,AK),e(AK,kXe),e(wg,SXe),e(wg,Wx),e(Wx,RXe),e(wg,BXe),e(F,PXe),e(F,Ag),e(Ag,yK),e(yK,$Xe),e(Ag,IXe),e(Ag,Hx),e(Hx,qXe),e(Ag,NXe),e(F,jXe),e(F,yg),e(yg,LK),e(LK,DXe),e(yg,GXe),e(yg,Ux),e(Ux,OXe),e(yg,VXe),e(F,XXe),e(F,Lg),e(Lg,xK),e(xK,zXe),e(Lg,QXe),e(Lg,Jx),e(Jx,WXe),e(Lg,HXe),e(F,UXe),e(F,xg),e(xg,kK),e(kK,JXe),e(xg,YXe),e(xg,Yx),e(Yx,KXe),e(xg,ZXe),e(F,eze),e(F,kg),e(kg,SK),e(SK,oze),e(kg,rze),e(kg,Kx),e(Kx,tze),e(kg,aze),e(F,nze),e(F,Sg),e(Sg,RK),e(RK,sze),e(Sg,lze),e(Sg,Zx),e(Zx,ize),e(Sg,dze),e(F,cze),e(F,Rg),e(Rg,BK),e(BK,mze),e(Rg,fze),e(Rg,ek),e(ek,gze),e(Rg,hze),e(F,uze),e(F,Bg),e(Bg,PK),e(PK,pze),e(Bg,_ze),e(Bg,ok),e(ok,bze),e(Bg,Fze),e(F,vze),e(F,Pg),e(Pg,$K),e($K,Tze),e(Pg,Mze),e(Pg,rk),e(rk,Eze),e(Pg,Cze),e(fo,wze),e(fo,IK),e(IK,Aze),e(fo,yze),g(Cw,fo,null),e(Qo,Lze),e(Qo,$g),g(ww,$g,null),e($g,xze),e($g,qK),e(qK,kze),b(c,ISe,_),b(c,Qi,_),e(Qi,Ig),e(Ig,NK),g(Aw,NK,null),e(Qi,Sze),e(Qi,jK),e(jK,Rze),b(c,qSe,_),b(c,Wo,_),g(yw,Wo,null),e(Wo,Bze),e(Wo,Lw),e(Lw,Pze),e(Lw,tk),e(tk,$ze),e(Lw,Ize),e(Wo,qze),e(Wo,xw),e(xw,Nze),e(xw,DK),e(DK,jze),e(xw,Dze),e(Wo,Gze),e(Wo,go),g(kw,go,null),e(go,Oze),e(go,GK),e(GK,Vze),e(go,Xze),e(go,Oa),e(Oa,zze),e(Oa,OK),e(OK,Qze),e(Oa,Wze),e(Oa,VK),e(VK,Hze),e(Oa,Uze),e(Oa,XK),e(XK,Jze),e(Oa,Yze),e(go,Kze),e(go,C),e(C,Qn),e(Qn,zK),e(zK,Zze),e(Qn,eQe),e(Qn,ak),e(ak,oQe),e(Qn,rQe),e(Qn,nk),e(nk,tQe),e(Qn,aQe),e(C,nQe),e(C,Wn),e(Wn,QK),e(QK,sQe),e(Wn,lQe),e(Wn,sk),e(sk,iQe),e(Wn,dQe),e(Wn,lk),e(lk,cQe),e(Wn,mQe),e(C,fQe),e(C,Hn),e(Hn,WK),e(WK,gQe),e(Hn,hQe),e(Hn,ik),e(ik,uQe),e(Hn,pQe),e(Hn,dk),e(dk,_Qe),e(Hn,bQe),e(C,FQe),e(C,qg),e(qg,HK),e(HK,vQe),e(qg,TQe),e(qg,ck),e(ck,MQe),e(qg,EQe),e(C,CQe),e(C,Un),e(Un,UK),e(UK,wQe),e(Un,AQe),e(Un,mk),e(mk,yQe),e(Un,LQe),e(Un,fk),e(fk,xQe),e(Un,kQe),e(C,SQe),e(C,Ng),e(Ng,JK),e(JK,RQe),e(Ng,BQe),e(Ng,gk),e(gk,PQe),e(Ng,$Qe),e(C,IQe),e(C,jg),e(jg,YK),e(YK,qQe),e(jg,NQe),e(jg,hk),e(hk,jQe),e(jg,DQe),e(C,GQe),e(C,Dg),e(Dg,KK),e(KK,OQe),e(Dg,VQe),e(Dg,uk),e(uk,XQe),e(Dg,zQe),e(C,QQe),e(C,Jn),e(Jn,ZK),e(ZK,WQe),e(Jn,HQe),e(Jn,pk),e(pk,UQe),e(Jn,JQe),e(Jn,_k),e(_k,YQe),e(Jn,KQe),e(C,ZQe),e(C,Yn),e(Yn,eZ),e(eZ,eWe),e(Yn,oWe),e(Yn,bk),e(bk,rWe),e(Yn,tWe),e(Yn,Fk),e(Fk,aWe),e(Yn,nWe),e(C,sWe),e(C,Kn),e(Kn,oZ),e(oZ,lWe),e(Kn,iWe),e(Kn,vk),e(vk,dWe),e(Kn,cWe),e(Kn,Tk),e(Tk,mWe),e(Kn,fWe),e(C,gWe),e(C,Gg),e(Gg,rZ),e(rZ,hWe),e(Gg,uWe),e(Gg,Mk),e(Mk,pWe),e(Gg,_We),e(C,bWe),e(C,Og),e(Og,tZ),e(tZ,FWe),e(Og,vWe),e(Og,Ek),e(Ek,TWe),e(Og,MWe),e(C,EWe),e(C,Zn),e(Zn,aZ),e(aZ,CWe),e(Zn,wWe),e(Zn,Ck),e(Ck,AWe),e(Zn,yWe),e(Zn,wk),e(wk,LWe),e(Zn,xWe),e(C,kWe),e(C,Vg),e(Vg,nZ),e(nZ,SWe),e(Vg,RWe),e(Vg,Ak),e(Ak,BWe),e(Vg,PWe),e(C,$We),e(C,es),e(es,sZ),e(sZ,IWe),e(es,qWe),e(es,yk),e(yk,NWe),e(es,jWe),e(es,Lk),e(Lk,DWe),e(es,GWe),e(C,OWe),e(C,os),e(os,lZ),e(lZ,VWe),e(os,XWe),e(os,xk),e(xk,zWe),e(os,QWe),e(os,kk),e(kk,WWe),e(os,HWe),e(C,UWe),e(C,rs),e(rs,iZ),e(iZ,JWe),e(rs,YWe),e(rs,Sk),e(Sk,KWe),e(rs,ZWe),e(rs,dZ),e(dZ,eHe),e(rs,oHe),e(C,rHe),e(C,Xg),e(Xg,cZ),e(cZ,tHe),e(Xg,aHe),e(Xg,Rk),e(Rk,nHe),e(Xg,sHe),e(C,lHe),e(C,ts),e(ts,mZ),e(mZ,iHe),e(ts,dHe),e(ts,Bk),e(Bk,cHe),e(ts,mHe),e(ts,Pk),e(Pk,fHe),e(ts,gHe),e(C,hHe),e(C,zg),e(zg,fZ),e(fZ,uHe),e(zg,pHe),e(zg,$k),e($k,_He),e(zg,bHe),e(C,FHe),e(C,as),e(as,gZ),e(gZ,vHe),e(as,THe),e(as,Ik),e(Ik,MHe),e(as,EHe),e(as,qk),e(qk,CHe),e(as,wHe),e(C,AHe),e(C,ns),e(ns,hZ),e(hZ,yHe),e(ns,LHe),e(ns,Nk),e(Nk,xHe),e(ns,kHe),e(ns,jk),e(jk,SHe),e(ns,RHe),e(C,BHe),e(C,ss),e(ss,uZ),e(uZ,PHe),e(ss,$He),e(ss,Dk),e(Dk,IHe),e(ss,qHe),e(ss,Gk),e(Gk,NHe),e(ss,jHe),e(C,DHe),e(C,Qg),e(Qg,pZ),e(pZ,GHe),e(Qg,OHe),e(Qg,Ok),e(Ok,VHe),e(Qg,XHe),e(C,zHe),e(C,ls),e(ls,_Z),e(_Z,QHe),e(ls,WHe),e(ls,Vk),e(Vk,HHe),e(ls,UHe),e(ls,Xk),e(Xk,JHe),e(ls,YHe),e(C,KHe),e(C,Wg),e(Wg,bZ),e(bZ,ZHe),e(Wg,eUe),e(Wg,zk),e(zk,oUe),e(Wg,rUe),e(C,tUe),e(C,is),e(is,FZ),e(FZ,aUe),e(is,nUe),e(is,Qk),e(Qk,sUe),e(is,lUe),e(is,Wk),e(Wk,iUe),e(is,dUe),e(C,cUe),e(C,ds),e(ds,vZ),e(vZ,mUe),e(ds,fUe),e(ds,Hk),e(Hk,gUe),e(ds,hUe),e(ds,Uk),e(Uk,uUe),e(ds,pUe),e(C,_Ue),e(C,cs),e(cs,TZ),e(TZ,bUe),e(cs,FUe),e(cs,Jk),e(Jk,vUe),e(cs,TUe),e(cs,Yk),e(Yk,MUe),e(cs,EUe),e(C,CUe),e(C,ms),e(ms,MZ),e(MZ,wUe),e(ms,AUe),e(ms,Kk),e(Kk,yUe),e(ms,LUe),e(ms,Zk),e(Zk,xUe),e(ms,kUe),e(C,SUe),e(C,Hg),e(Hg,EZ),e(EZ,RUe),e(Hg,BUe),e(Hg,eS),e(eS,PUe),e(Hg,$Ue),e(C,IUe),e(C,fs),e(fs,CZ),e(CZ,qUe),e(fs,NUe),e(fs,oS),e(oS,jUe),e(fs,DUe),e(fs,rS),e(rS,GUe),e(fs,OUe),e(C,VUe),e(C,gs),e(gs,wZ),e(wZ,XUe),e(gs,zUe),e(gs,tS),e(tS,QUe),e(gs,WUe),e(gs,aS),e(aS,HUe),e(gs,UUe),e(C,JUe),e(C,hs),e(hs,AZ),e(AZ,YUe),e(hs,KUe),e(hs,nS),e(nS,ZUe),e(hs,eJe),e(hs,sS),e(sS,oJe),e(hs,rJe),e(C,tJe),e(C,us),e(us,yZ),e(yZ,aJe),e(us,nJe),e(us,lS),e(lS,sJe),e(us,lJe),e(us,iS),e(iS,iJe),e(us,dJe),e(C,cJe),e(C,ps),e(ps,LZ),e(LZ,mJe),e(ps,fJe),e(ps,dS),e(dS,gJe),e(ps,hJe),e(ps,cS),e(cS,uJe),e(ps,pJe),e(C,_Je),e(C,_s),e(_s,xZ),e(xZ,bJe),e(_s,FJe),e(_s,mS),e(mS,vJe),e(_s,TJe),e(_s,fS),e(fS,MJe),e(_s,EJe),e(C,CJe),e(C,Ug),e(Ug,kZ),e(kZ,wJe),e(Ug,AJe),e(Ug,gS),e(gS,yJe),e(Ug,LJe),e(C,xJe),e(C,bs),e(bs,SZ),e(SZ,kJe),e(bs,SJe),e(bs,hS),e(hS,RJe),e(bs,BJe),e(bs,uS),e(uS,PJe),e(bs,$Je),e(C,IJe),e(C,Jg),e(Jg,RZ),e(RZ,qJe),e(Jg,NJe),e(Jg,pS),e(pS,jJe),e(Jg,DJe),e(C,GJe),e(C,Yg),e(Yg,BZ),e(BZ,OJe),e(Yg,VJe),e(Yg,_S),e(_S,XJe),e(Yg,zJe),e(C,QJe),e(C,Fs),e(Fs,PZ),e(PZ,WJe),e(Fs,HJe),e(Fs,bS),e(bS,UJe),e(Fs,JJe),e(Fs,FS),e(FS,YJe),e(Fs,KJe),e(C,ZJe),e(C,vs),e(vs,$Z),e($Z,eYe),e(vs,oYe),e(vs,vS),e(vS,rYe),e(vs,tYe),e(vs,TS),e(TS,aYe),e(vs,nYe),e(C,sYe),e(C,Kg),e(Kg,IZ),e(IZ,lYe),e(Kg,iYe),e(Kg,MS),e(MS,dYe),e(Kg,cYe),e(C,mYe),e(C,Ts),e(Ts,qZ),e(qZ,fYe),e(Ts,gYe),e(Ts,ES),e(ES,hYe),e(Ts,uYe),e(Ts,CS),e(CS,pYe),e(Ts,_Ye),e(C,bYe),e(C,Ms),e(Ms,NZ),e(NZ,FYe),e(Ms,vYe),e(Ms,wS),e(wS,TYe),e(Ms,MYe),e(Ms,AS),e(AS,EYe),e(Ms,CYe),e(C,wYe),e(C,Es),e(Es,jZ),e(jZ,AYe),e(Es,yYe),e(Es,yS),e(yS,LYe),e(Es,xYe),e(Es,LS),e(LS,kYe),e(Es,SYe),e(C,RYe),e(C,Cs),e(Cs,DZ),e(DZ,BYe),e(Cs,PYe),e(Cs,xS),e(xS,$Ye),e(Cs,IYe),e(Cs,kS),e(kS,qYe),e(Cs,NYe),e(C,jYe),e(C,ws),e(ws,GZ),e(GZ,DYe),e(ws,GYe),e(ws,SS),e(SS,OYe),e(ws,VYe),e(ws,RS),e(RS,XYe),e(ws,zYe),e(C,QYe),e(C,Zg),e(Zg,OZ),e(OZ,WYe),e(Zg,HYe),e(Zg,BS),e(BS,UYe),e(Zg,JYe),e(C,YYe),e(C,eh),e(eh,VZ),e(VZ,KYe),e(eh,ZYe),e(eh,PS),e(PS,eKe),e(eh,oKe),e(C,rKe),e(C,oh),e(oh,XZ),e(XZ,tKe),e(oh,aKe),e(oh,$S),e($S,nKe),e(oh,sKe),e(C,lKe),e(C,rh),e(rh,zZ),e(zZ,iKe),e(rh,dKe),e(rh,IS),e(IS,cKe),e(rh,mKe),e(C,fKe),e(C,As),e(As,QZ),e(QZ,gKe),e(As,hKe),e(As,qS),e(qS,uKe),e(As,pKe),e(As,NS),e(NS,_Ke),e(As,bKe),e(C,FKe),e(C,th),e(th,WZ),e(WZ,vKe),e(th,TKe),e(th,jS),e(jS,MKe),e(th,EKe),e(C,CKe),e(C,ys),e(ys,HZ),e(HZ,wKe),e(ys,AKe),e(ys,DS),e(DS,yKe),e(ys,LKe),e(ys,GS),e(GS,xKe),e(ys,kKe),e(C,SKe),e(C,Ls),e(Ls,UZ),e(UZ,RKe),e(Ls,BKe),e(Ls,OS),e(OS,PKe),e(Ls,$Ke),e(Ls,VS),e(VS,IKe),e(Ls,qKe),e(C,NKe),e(C,xs),e(xs,JZ),e(JZ,jKe),e(xs,DKe),e(xs,XS),e(XS,GKe),e(xs,OKe),e(xs,zS),e(zS,VKe),e(xs,XKe),e(C,zKe),e(C,ks),e(ks,YZ),e(YZ,QKe),e(ks,WKe),e(ks,QS),e(QS,HKe),e(ks,UKe),e(ks,WS),e(WS,JKe),e(ks,YKe),e(C,KKe),e(C,Ss),e(Ss,KZ),e(KZ,ZKe),e(Ss,eZe),e(Ss,HS),e(HS,oZe),e(Ss,rZe),e(Ss,US),e(US,tZe),e(Ss,aZe),e(C,nZe),e(C,Rs),e(Rs,ZZ),e(ZZ,sZe),e(Rs,lZe),e(Rs,JS),e(JS,iZe),e(Rs,dZe),e(Rs,YS),e(YS,cZe),e(Rs,mZe),e(C,fZe),e(C,ah),e(ah,eee),e(eee,gZe),e(ah,hZe),e(ah,KS),e(KS,uZe),e(ah,pZe),e(C,_Ze),e(C,nh),e(nh,oee),e(oee,bZe),e(nh,FZe),e(nh,ZS),e(ZS,vZe),e(nh,TZe),e(C,MZe),e(C,Bs),e(Bs,ree),e(ree,EZe),e(Bs,CZe),e(Bs,eR),e(eR,wZe),e(Bs,AZe),e(Bs,oR),e(oR,yZe),e(Bs,LZe),e(C,xZe),e(C,Ps),e(Ps,tee),e(tee,kZe),e(Ps,SZe),e(Ps,rR),e(rR,RZe),e(Ps,BZe),e(Ps,tR),e(tR,PZe),e(Ps,$Ze),e(C,IZe),e(C,$s),e($s,aee),e(aee,qZe),e($s,NZe),e($s,aR),e(aR,jZe),e($s,DZe),e($s,nR),e(nR,GZe),e($s,OZe),e(C,VZe),e(C,sh),e(sh,nee),e(nee,XZe),e(sh,zZe),e(sh,sR),e(sR,QZe),e(sh,WZe),e(C,HZe),e(C,lh),e(lh,see),e(see,UZe),e(lh,JZe),e(lh,lR),e(lR,YZe),e(lh,KZe),e(C,ZZe),e(C,ih),e(ih,lee),e(lee,eeo),e(ih,oeo),e(ih,iR),e(iR,reo),e(ih,teo),e(C,aeo),e(C,dh),e(dh,iee),e(iee,neo),e(dh,seo),e(dh,dR),e(dR,leo),e(dh,ieo),e(C,deo),e(C,Is),e(Is,dee),e(dee,ceo),e(Is,meo),e(Is,cR),e(cR,feo),e(Is,geo),e(Is,mR),e(mR,heo),e(Is,ueo),e(C,peo),e(C,ch),e(ch,cee),e(cee,_eo),e(ch,beo),e(ch,fR),e(fR,Feo),e(ch,veo),e(C,Teo),e(C,mh),e(mh,mee),e(mee,Meo),e(mh,Eeo),e(mh,gR),e(gR,Ceo),e(mh,weo),e(C,Aeo),e(C,qs),e(qs,fee),e(fee,yeo),e(qs,Leo),e(qs,hR),e(hR,xeo),e(qs,keo),e(qs,uR),e(uR,Seo),e(qs,Reo),e(C,Beo),e(C,Ns),e(Ns,gee),e(gee,Peo),e(Ns,$eo),e(Ns,pR),e(pR,Ieo),e(Ns,qeo),e(Ns,_R),e(_R,Neo),e(Ns,jeo),e(go,Deo),e(go,hee),e(hee,Geo),e(go,Oeo),g(Sw,go,null),e(Wo,Veo),e(Wo,fh),g(Rw,fh,null),e(fh,Xeo),e(fh,uee),e(uee,zeo),b(c,NSe,_),b(c,Wi,_),e(Wi,gh),e(gh,pee),g(Bw,pee,null),e(Wi,Qeo),e(Wi,_ee),e(_ee,Weo),b(c,jSe,_),b(c,Ho,_),g(Pw,Ho,null),e(Ho,Heo),e(Ho,$w),e($w,Ueo),e($w,bR),e(bR,Jeo),e($w,Yeo),e(Ho,Keo),e(Ho,Iw),e(Iw,Zeo),e(Iw,bee),e(bee,eoo),e(Iw,ooo),e(Ho,roo),e(Ho,$e),g(qw,$e,null),e($e,too),e($e,Fee),e(Fee,aoo),e($e,noo),e($e,Va),e(Va,soo),e(Va,vee),e(vee,loo),e(Va,ioo),e(Va,Tee),e(Tee,doo),e(Va,coo),e(Va,Mee),e(Mee,moo),e(Va,foo),e($e,goo),e($e,te),e(te,hh),e(hh,Eee),e(Eee,hoo),e(hh,uoo),e(hh,FR),e(FR,poo),e(hh,_oo),e(te,boo),e(te,uh),e(uh,Cee),e(Cee,Foo),e(uh,voo),e(uh,vR),e(vR,Too),e(uh,Moo),e(te,Eoo),e(te,ph),e(ph,wee),e(wee,Coo),e(ph,woo),e(ph,TR),e(TR,Aoo),e(ph,yoo),e(te,Loo),e(te,_h),e(_h,Aee),e(Aee,xoo),e(_h,koo),e(_h,MR),e(MR,Soo),e(_h,Roo),e(te,Boo),e(te,bh),e(bh,yee),e(yee,Poo),e(bh,$oo),e(bh,ER),e(ER,Ioo),e(bh,qoo),e(te,Noo),e(te,Fh),e(Fh,Lee),e(Lee,joo),e(Fh,Doo),e(Fh,CR),e(CR,Goo),e(Fh,Ooo),e(te,Voo),e(te,vh),e(vh,xee),e(xee,Xoo),e(vh,zoo),e(vh,wR),e(wR,Qoo),e(vh,Woo),e(te,Hoo),e(te,Th),e(Th,kee),e(kee,Uoo),e(Th,Joo),e(Th,AR),e(AR,Yoo),e(Th,Koo),e(te,Zoo),e(te,Mh),e(Mh,See),e(See,ero),e(Mh,oro),e(Mh,yR),e(yR,rro),e(Mh,tro),e(te,aro),e(te,Eh),e(Eh,Ree),e(Ree,nro),e(Eh,sro),e(Eh,LR),e(LR,lro),e(Eh,iro),e(te,dro),e(te,Ch),e(Ch,Bee),e(Bee,cro),e(Ch,mro),e(Ch,xR),e(xR,fro),e(Ch,gro),e(te,hro),e(te,wh),e(wh,Pee),e(Pee,uro),e(wh,pro),e(wh,kR),e(kR,_ro),e(wh,bro),e(te,Fro),e(te,Ah),e(Ah,$ee),e($ee,vro),e(Ah,Tro),e(Ah,SR),e(SR,Mro),e(Ah,Ero),e(te,Cro),e(te,yh),e(yh,Iee),e(Iee,wro),e(yh,Aro),e(yh,RR),e(RR,yro),e(yh,Lro),e(te,xro),e(te,Lh),e(Lh,qee),e(qee,kro),e(Lh,Sro),e(Lh,BR),e(BR,Rro),e(Lh,Bro),e(te,Pro),e(te,xh),e(xh,Nee),e(Nee,$ro),e(xh,Iro),e(xh,PR),e(PR,qro),e(xh,Nro),e(te,jro),e(te,kh),e(kh,jee),e(jee,Dro),e(kh,Gro),e(kh,$R),e($R,Oro),e(kh,Vro),e(te,Xro),e(te,Sh),e(Sh,Dee),e(Dee,zro),e(Sh,Qro),e(Sh,IR),e(IR,Wro),e(Sh,Hro),e($e,Uro),g(Rh,$e,null),e($e,Jro),e($e,Gee),e(Gee,Yro),e($e,Kro),g(Nw,$e,null),e(Ho,Zro),e(Ho,Bh),g(jw,Bh,null),e(Bh,eto),e(Bh,Oee),e(Oee,oto),b(c,DSe,_),b(c,Hi,_),e(Hi,Ph),e(Ph,Vee),g(Dw,Vee,null),e(Hi,rto),e(Hi,Xee),e(Xee,tto),b(c,GSe,_),b(c,Uo,_),g(Gw,Uo,null),e(Uo,ato),e(Uo,Ow),e(Ow,nto),e(Ow,qR),e(qR,sto),e(Ow,lto),e(Uo,ito),e(Uo,Vw),e(Vw,dto),e(Vw,zee),e(zee,cto),e(Vw,mto),e(Uo,fto),e(Uo,Ie),g(Xw,Ie,null),e(Ie,gto),e(Ie,Qee),e(Qee,hto),e(Ie,uto),e(Ie,Ui),e(Ui,pto),e(Ui,Wee),e(Wee,_to),e(Ui,bto),e(Ui,Hee),e(Hee,Fto),e(Ui,vto),e(Ie,Tto),e(Ie,ke),e(ke,$h),e($h,Uee),e(Uee,Mto),e($h,Eto),e($h,NR),e(NR,Cto),e($h,wto),e(ke,Ato),e(ke,Ih),e(Ih,Jee),e(Jee,yto),e(Ih,Lto),e(Ih,jR),e(jR,xto),e(Ih,kto),e(ke,Sto),e(ke,qh),e(qh,Yee),e(Yee,Rto),e(qh,Bto),e(qh,DR),e(DR,Pto),e(qh,$to),e(ke,Ito),e(ke,Nh),e(Nh,Kee),e(Kee,qto),e(Nh,Nto),e(Nh,GR),e(GR,jto),e(Nh,Dto),e(ke,Gto),e(ke,jh),e(jh,Zee),e(Zee,Oto),e(jh,Vto),e(jh,OR),e(OR,Xto),e(jh,zto),e(ke,Qto),e(ke,Dh),e(Dh,eoe),e(eoe,Wto),e(Dh,Hto),e(Dh,VR),e(VR,Uto),e(Dh,Jto),e(ke,Yto),e(ke,Gh),e(Gh,ooe),e(ooe,Kto),e(Gh,Zto),e(Gh,XR),e(XR,eao),e(Gh,oao),e(ke,rao),e(ke,Oh),e(Oh,roe),e(roe,tao),e(Oh,aao),e(Oh,zR),e(zR,nao),e(Oh,sao),e(Ie,lao),g(Vh,Ie,null),e(Ie,iao),e(Ie,toe),e(toe,dao),e(Ie,cao),g(zw,Ie,null),e(Uo,mao),e(Uo,Xh),g(Qw,Xh,null),e(Xh,fao),e(Xh,aoe),e(aoe,gao),b(c,OSe,_),b(c,Ji,_),e(Ji,zh),e(zh,noe),g(Ww,noe,null),e(Ji,hao),e(Ji,soe),e(soe,uao),b(c,VSe,_),b(c,Jo,_),g(Hw,Jo,null),e(Jo,pao),e(Jo,Yi),e(Yi,_ao),e(Yi,QR),e(QR,bao),e(Yi,Fao),e(Yi,WR),e(WR,vao),e(Yi,Tao),e(Jo,Mao),e(Jo,Uw),e(Uw,Eao),e(Uw,loe),e(loe,Cao),e(Uw,wao),e(Jo,Aao),e(Jo,Xr),g(Jw,Xr,null),e(Xr,yao),e(Xr,ioe),e(ioe,Lao),e(Xr,xao),e(Xr,Ki),e(Ki,kao),e(Ki,doe),e(doe,Sao),e(Ki,Rao),e(Ki,HR),e(HR,Bao),e(Ki,Pao),e(Xr,$ao),e(Xr,coe),e(coe,Iao),e(Xr,qao),g(Yw,Xr,null),e(Jo,Nao),e(Jo,qe),g(Kw,qe,null),e(qe,jao),e(qe,moe),e(moe,Dao),e(qe,Gao),e(qe,Xa),e(Xa,Oao),e(Xa,foe),e(foe,Vao),e(Xa,Xao),e(Xa,goe),e(goe,zao),e(Xa,Qao),e(Xa,hoe),e(hoe,Wao),e(Xa,Hao),e(qe,Uao),e(qe,T),e(T,Qh),e(Qh,uoe),e(uoe,Jao),e(Qh,Yao),e(Qh,UR),e(UR,Kao),e(Qh,Zao),e(T,eno),e(T,Wh),e(Wh,poe),e(poe,ono),e(Wh,rno),e(Wh,JR),e(JR,tno),e(Wh,ano),e(T,nno),e(T,Hh),e(Hh,_oe),e(_oe,sno),e(Hh,lno),e(Hh,YR),e(YR,ino),e(Hh,dno),e(T,cno),e(T,Uh),e(Uh,boe),e(boe,mno),e(Uh,fno),e(Uh,KR),e(KR,gno),e(Uh,hno),e(T,uno),e(T,Jh),e(Jh,Foe),e(Foe,pno),e(Jh,_no),e(Jh,ZR),e(ZR,bno),e(Jh,Fno),e(T,vno),e(T,Yh),e(Yh,voe),e(voe,Tno),e(Yh,Mno),e(Yh,eB),e(eB,Eno),e(Yh,Cno),e(T,wno),e(T,Kh),e(Kh,Toe),e(Toe,Ano),e(Kh,yno),e(Kh,oB),e(oB,Lno),e(Kh,xno),e(T,kno),e(T,Zh),e(Zh,Moe),e(Moe,Sno),e(Zh,Rno),e(Zh,rB),e(rB,Bno),e(Zh,Pno),e(T,$no),e(T,eu),e(eu,Eoe),e(Eoe,Ino),e(eu,qno),e(eu,tB),e(tB,Nno),e(eu,jno),e(T,Dno),e(T,ou),e(ou,Coe),e(Coe,Gno),e(ou,Ono),e(ou,aB),e(aB,Vno),e(ou,Xno),e(T,zno),e(T,ru),e(ru,woe),e(woe,Qno),e(ru,Wno),e(ru,nB),e(nB,Hno),e(ru,Uno),e(T,Jno),e(T,tu),e(tu,Aoe),e(Aoe,Yno),e(tu,Kno),e(tu,sB),e(sB,Zno),e(tu,eso),e(T,oso),e(T,au),e(au,yoe),e(yoe,rso),e(au,tso),e(au,lB),e(lB,aso),e(au,nso),e(T,sso),e(T,nu),e(nu,Loe),e(Loe,lso),e(nu,iso),e(nu,iB),e(iB,dso),e(nu,cso),e(T,mso),e(T,su),e(su,xoe),e(xoe,fso),e(su,gso),e(su,dB),e(dB,hso),e(su,uso),e(T,pso),e(T,lu),e(lu,koe),e(koe,_so),e(lu,bso),e(lu,cB),e(cB,Fso),e(lu,vso),e(T,Tso),e(T,iu),e(iu,Soe),e(Soe,Mso),e(iu,Eso),e(iu,mB),e(mB,Cso),e(iu,wso),e(T,Aso),e(T,du),e(du,Roe),e(Roe,yso),e(du,Lso),e(du,fB),e(fB,xso),e(du,kso),e(T,Sso),e(T,cu),e(cu,Boe),e(Boe,Rso),e(cu,Bso),e(cu,gB),e(gB,Pso),e(cu,$so),e(T,Iso),e(T,mu),e(mu,Poe),e(Poe,qso),e(mu,Nso),e(mu,hB),e(hB,jso),e(mu,Dso),e(T,Gso),e(T,fu),e(fu,$oe),e($oe,Oso),e(fu,Vso),e(fu,uB),e(uB,Xso),e(fu,zso),e(T,Qso),e(T,gu),e(gu,Ioe),e(Ioe,Wso),e(gu,Hso),e(gu,pB),e(pB,Uso),e(gu,Jso),e(T,Yso),e(T,hu),e(hu,qoe),e(qoe,Kso),e(hu,Zso),e(hu,_B),e(_B,elo),e(hu,olo),e(T,rlo),e(T,uu),e(uu,Noe),e(Noe,tlo),e(uu,alo),e(uu,bB),e(bB,nlo),e(uu,slo),e(T,llo),e(T,pu),e(pu,joe),e(joe,ilo),e(pu,dlo),e(pu,FB),e(FB,clo),e(pu,mlo),e(T,flo),e(T,_u),e(_u,Doe),e(Doe,glo),e(_u,hlo),e(_u,vB),e(vB,ulo),e(_u,plo),e(T,_lo),e(T,bu),e(bu,Goe),e(Goe,blo),e(bu,Flo),e(bu,TB),e(TB,vlo),e(bu,Tlo),e(T,Mlo),e(T,Fu),e(Fu,Ooe),e(Ooe,Elo),e(Fu,Clo),e(Fu,MB),e(MB,wlo),e(Fu,Alo),e(T,ylo),e(T,vu),e(vu,Voe),e(Voe,Llo),e(vu,xlo),e(vu,EB),e(EB,klo),e(vu,Slo),e(T,Rlo),e(T,js),e(js,Xoe),e(Xoe,Blo),e(js,Plo),e(js,CB),e(CB,$lo),e(js,Ilo),e(js,wB),e(wB,qlo),e(js,Nlo),e(T,jlo),e(T,Tu),e(Tu,zoe),e(zoe,Dlo),e(Tu,Glo),e(Tu,AB),e(AB,Olo),e(Tu,Vlo),e(T,Xlo),e(T,Mu),e(Mu,Qoe),e(Qoe,zlo),e(Mu,Qlo),e(Mu,yB),e(yB,Wlo),e(Mu,Hlo),e(T,Ulo),e(T,Eu),e(Eu,Woe),e(Woe,Jlo),e(Eu,Ylo),e(Eu,LB),e(LB,Klo),e(Eu,Zlo),e(T,eio),e(T,Cu),e(Cu,Hoe),e(Hoe,oio),e(Cu,rio),e(Cu,xB),e(xB,tio),e(Cu,aio),e(T,nio),e(T,wu),e(wu,Uoe),e(Uoe,sio),e(wu,lio),e(wu,kB),e(kB,iio),e(wu,dio),e(T,cio),e(T,Au),e(Au,Joe),e(Joe,mio),e(Au,fio),e(Au,SB),e(SB,gio),e(Au,hio),e(T,uio),e(T,yu),e(yu,Yoe),e(Yoe,pio),e(yu,_io),e(yu,RB),e(RB,bio),e(yu,Fio),e(T,vio),e(T,Lu),e(Lu,Koe),e(Koe,Tio),e(Lu,Mio),e(Lu,BB),e(BB,Eio),e(Lu,Cio),e(T,wio),e(T,xu),e(xu,Zoe),e(Zoe,Aio),e(xu,yio),e(xu,PB),e(PB,Lio),e(xu,xio),e(T,kio),e(T,ku),e(ku,ere),e(ere,Sio),e(ku,Rio),e(ku,$B),e($B,Bio),e(ku,Pio),e(T,$io),e(T,Su),e(Su,ore),e(ore,Iio),e(Su,qio),e(Su,IB),e(IB,Nio),e(Su,jio),e(T,Dio),e(T,Ru),e(Ru,rre),e(rre,Gio),e(Ru,Oio),e(Ru,qB),e(qB,Vio),e(Ru,Xio),e(T,zio),e(T,Bu),e(Bu,tre),e(tre,Qio),e(Bu,Wio),e(Bu,NB),e(NB,Hio),e(Bu,Uio),e(T,Jio),e(T,Pu),e(Pu,are),e(are,Yio),e(Pu,Kio),e(Pu,jB),e(jB,Zio),e(Pu,edo),e(T,odo),e(T,$u),e($u,nre),e(nre,rdo),e($u,tdo),e($u,DB),e(DB,ado),e($u,ndo),e(T,sdo),e(T,Iu),e(Iu,sre),e(sre,ldo),e(Iu,ido),e(Iu,GB),e(GB,ddo),e(Iu,cdo),e(T,mdo),e(T,qu),e(qu,lre),e(lre,fdo),e(qu,gdo),e(qu,OB),e(OB,hdo),e(qu,udo),e(T,pdo),e(T,Nu),e(Nu,ire),e(ire,_do),e(Nu,bdo),e(Nu,VB),e(VB,Fdo),e(Nu,vdo),e(T,Tdo),e(T,ju),e(ju,dre),e(dre,Mdo),e(ju,Edo),e(ju,XB),e(XB,Cdo),e(ju,wdo),e(T,Ado),e(T,Du),e(Du,cre),e(cre,ydo),e(Du,Ldo),e(Du,zB),e(zB,xdo),e(Du,kdo),e(T,Sdo),e(T,Gu),e(Gu,mre),e(mre,Rdo),e(Gu,Bdo),e(Gu,QB),e(QB,Pdo),e(Gu,$do),e(T,Ido),e(T,Ou),e(Ou,fre),e(fre,qdo),e(Ou,Ndo),e(Ou,WB),e(WB,jdo),e(Ou,Ddo),e(T,Gdo),e(T,Vu),e(Vu,gre),e(gre,Odo),e(Vu,Vdo),e(Vu,HB),e(HB,Xdo),e(Vu,zdo),e(T,Qdo),e(T,Xu),e(Xu,hre),e(hre,Wdo),e(Xu,Hdo),e(Xu,UB),e(UB,Udo),e(Xu,Jdo),e(T,Ydo),e(T,zu),e(zu,ure),e(ure,Kdo),e(zu,Zdo),e(zu,JB),e(JB,eco),e(zu,oco),e(T,rco),e(T,Qu),e(Qu,pre),e(pre,tco),e(Qu,aco),e(Qu,YB),e(YB,nco),e(Qu,sco),e(T,lco),e(T,Wu),e(Wu,_re),e(_re,ico),e(Wu,dco),e(Wu,KB),e(KB,cco),e(Wu,mco),e(T,fco),e(T,Hu),e(Hu,bre),e(bre,gco),e(Hu,hco),e(Hu,ZB),e(ZB,uco),e(Hu,pco),e(T,_co),e(T,Uu),e(Uu,Fre),e(Fre,bco),e(Uu,Fco),e(Uu,eP),e(eP,vco),e(Uu,Tco),e(T,Mco),e(T,Ju),e(Ju,vre),e(vre,Eco),e(Ju,Cco),e(Ju,oP),e(oP,wco),e(Ju,Aco),e(T,yco),e(T,Yu),e(Yu,Tre),e(Tre,Lco),e(Yu,xco),e(Yu,rP),e(rP,kco),e(Yu,Sco),e(T,Rco),e(T,Ku),e(Ku,Mre),e(Mre,Bco),e(Ku,Pco),e(Ku,tP),e(tP,$co),e(Ku,Ico),e(T,qco),e(T,Zu),e(Zu,Ere),e(Ere,Nco),e(Zu,jco),e(Zu,aP),e(aP,Dco),e(Zu,Gco),e(T,Oco),e(T,ep),e(ep,Cre),e(Cre,Vco),e(ep,Xco),e(ep,nP),e(nP,zco),e(ep,Qco),e(T,Wco),e(T,op),e(op,wre),e(wre,Hco),e(op,Uco),e(op,sP),e(sP,Jco),e(op,Yco),e(T,Kco),e(T,rp),e(rp,Are),e(Are,Zco),e(rp,emo),e(rp,lP),e(lP,omo),e(rp,rmo),e(T,tmo),e(T,tp),e(tp,yre),e(yre,amo),e(tp,nmo),e(tp,iP),e(iP,smo),e(tp,lmo),e(T,imo),e(T,ap),e(ap,Lre),e(Lre,dmo),e(ap,cmo),e(ap,dP),e(dP,mmo),e(ap,fmo),e(T,gmo),e(T,np),e(np,xre),e(xre,hmo),e(np,umo),e(np,cP),e(cP,pmo),e(np,_mo),e(T,bmo),e(T,sp),e(sp,kre),e(kre,Fmo),e(sp,vmo),e(sp,mP),e(mP,Tmo),e(sp,Mmo),e(T,Emo),e(T,lp),e(lp,Sre),e(Sre,Cmo),e(lp,wmo),e(lp,fP),e(fP,Amo),e(lp,ymo),e(T,Lmo),e(T,ip),e(ip,Rre),e(Rre,xmo),e(ip,kmo),e(ip,gP),e(gP,Smo),e(ip,Rmo),e(T,Bmo),e(T,dp),e(dp,Bre),e(Bre,Pmo),e(dp,$mo),e(dp,hP),e(hP,Imo),e(dp,qmo),e(T,Nmo),e(T,cp),e(cp,Pre),e(Pre,jmo),e(cp,Dmo),e(cp,uP),e(uP,Gmo),e(cp,Omo),e(T,Vmo),e(T,mp),e(mp,$re),e($re,Xmo),e(mp,zmo),e(mp,pP),e(pP,Qmo),e(mp,Wmo),e(T,Hmo),e(T,fp),e(fp,Ire),e(Ire,Umo),e(fp,Jmo),e(fp,_P),e(_P,Ymo),e(fp,Kmo),e(T,Zmo),e(T,gp),e(gp,qre),e(qre,efo),e(gp,ofo),e(gp,bP),e(bP,rfo),e(gp,tfo),e(T,afo),e(T,hp),e(hp,Nre),e(Nre,nfo),e(hp,sfo),e(hp,FP),e(FP,lfo),e(hp,ifo),e(T,dfo),e(T,up),e(up,jre),e(jre,cfo),e(up,mfo),e(up,vP),e(vP,ffo),e(up,gfo),e(T,hfo),e(T,pp),e(pp,Dre),e(Dre,ufo),e(pp,pfo),e(pp,TP),e(TP,_fo),e(pp,bfo),e(T,Ffo),e(T,_p),e(_p,Gre),e(Gre,vfo),e(_p,Tfo),e(_p,MP),e(MP,Mfo),e(_p,Efo),e(T,Cfo),e(T,bp),e(bp,Ore),e(Ore,wfo),e(bp,Afo),e(bp,EP),e(EP,yfo),e(bp,Lfo),e(T,xfo),e(T,Fp),e(Fp,Vre),e(Vre,kfo),e(Fp,Sfo),e(Fp,CP),e(CP,Rfo),e(Fp,Bfo),e(T,Pfo),e(T,vp),e(vp,Xre),e(Xre,$fo),e(vp,Ifo),e(vp,wP),e(wP,qfo),e(vp,Nfo),e(T,jfo),e(T,Tp),e(Tp,zre),e(zre,Dfo),e(Tp,Gfo),e(Tp,AP),e(AP,Ofo),e(Tp,Vfo),e(T,Xfo),e(T,Mp),e(Mp,Qre),e(Qre,zfo),e(Mp,Qfo),e(Mp,yP),e(yP,Wfo),e(Mp,Hfo),e(T,Ufo),e(T,Ep),e(Ep,Wre),e(Wre,Jfo),e(Ep,Yfo),e(Ep,LP),e(LP,Kfo),e(Ep,Zfo),e(T,ego),e(T,Cp),e(Cp,Hre),e(Hre,ogo),e(Cp,rgo),e(Cp,xP),e(xP,tgo),e(Cp,ago),e(T,ngo),e(T,wp),e(wp,Ure),e(Ure,sgo),e(wp,lgo),e(wp,kP),e(kP,igo),e(wp,dgo),e(T,cgo),e(T,Ap),e(Ap,Jre),e(Jre,mgo),e(Ap,fgo),e(Ap,SP),e(SP,ggo),e(Ap,hgo),e(T,ugo),e(T,yp),e(yp,Yre),e(Yre,pgo),e(yp,_go),e(yp,RP),e(RP,bgo),e(yp,Fgo),e(T,vgo),e(T,Lp),e(Lp,Kre),e(Kre,Tgo),e(Lp,Mgo),e(Lp,BP),e(BP,Ego),e(Lp,Cgo),e(qe,wgo),e(qe,xp),e(xp,Ago),e(xp,Zre),e(Zre,ygo),e(xp,Lgo),e(xp,ete),e(ete,xgo),e(qe,kgo),e(qe,ote),e(ote,Sgo),e(qe,Rgo),g(Zw,qe,null),b(c,XSe,_),b(c,Zi,_),e(Zi,kp),e(kp,rte),g(eA,rte,null),e(Zi,Bgo),e(Zi,tte),e(tte,Pgo),b(c,zSe,_),b(c,Yo,_),g(oA,Yo,null),e(Yo,$go),e(Yo,ed),e(ed,Igo),e(ed,PP),e(PP,qgo),e(ed,Ngo),e(ed,$P),e($P,jgo),e(ed,Dgo),e(Yo,Ggo),e(Yo,rA),e(rA,Ogo),e(rA,ate),e(ate,Vgo),e(rA,Xgo),e(Yo,zgo),e(Yo,zr),g(tA,zr,null),e(zr,Qgo),e(zr,nte),e(nte,Wgo),e(zr,Hgo),e(zr,od),e(od,Ugo),e(od,ste),e(ste,Jgo),e(od,Ygo),e(od,IP),e(IP,Kgo),e(od,Zgo),e(zr,eho),e(zr,lte),e(lte,oho),e(zr,rho),g(aA,zr,null),e(Yo,tho),e(Yo,Ne),g(nA,Ne,null),e(Ne,aho),e(Ne,ite),e(ite,nho),e(Ne,sho),e(Ne,za),e(za,lho),e(za,dte),e(dte,iho),e(za,dho),e(za,cte),e(cte,cho),e(za,mho),e(za,mte),e(mte,fho),e(za,gho),e(Ne,hho),e(Ne,S),e(S,Sp),e(Sp,fte),e(fte,uho),e(Sp,pho),e(Sp,qP),e(qP,_ho),e(Sp,bho),e(S,Fho),e(S,Rp),e(Rp,gte),e(gte,vho),e(Rp,Tho),e(Rp,NP),e(NP,Mho),e(Rp,Eho),e(S,Cho),e(S,Bp),e(Bp,hte),e(hte,who),e(Bp,Aho),e(Bp,jP),e(jP,yho),e(Bp,Lho),e(S,xho),e(S,Pp),e(Pp,ute),e(ute,kho),e(Pp,Sho),e(Pp,DP),e(DP,Rho),e(Pp,Bho),e(S,Pho),e(S,$p),e($p,pte),e(pte,$ho),e($p,Iho),e($p,GP),e(GP,qho),e($p,Nho),e(S,jho),e(S,Ip),e(Ip,_te),e(_te,Dho),e(Ip,Gho),e(Ip,OP),e(OP,Oho),e(Ip,Vho),e(S,Xho),e(S,qp),e(qp,bte),e(bte,zho),e(qp,Qho),e(qp,VP),e(VP,Who),e(qp,Hho),e(S,Uho),e(S,Np),e(Np,Fte),e(Fte,Jho),e(Np,Yho),e(Np,XP),e(XP,Kho),e(Np,Zho),e(S,euo),e(S,jp),e(jp,vte),e(vte,ouo),e(jp,ruo),e(jp,zP),e(zP,tuo),e(jp,auo),e(S,nuo),e(S,Dp),e(Dp,Tte),e(Tte,suo),e(Dp,luo),e(Dp,QP),e(QP,iuo),e(Dp,duo),e(S,cuo),e(S,Gp),e(Gp,Mte),e(Mte,muo),e(Gp,fuo),e(Gp,WP),e(WP,guo),e(Gp,huo),e(S,uuo),e(S,Op),e(Op,Ete),e(Ete,puo),e(Op,_uo),e(Op,HP),e(HP,buo),e(Op,Fuo),e(S,vuo),e(S,Vp),e(Vp,Cte),e(Cte,Tuo),e(Vp,Muo),e(Vp,UP),e(UP,Euo),e(Vp,Cuo),e(S,wuo),e(S,Xp),e(Xp,wte),e(wte,Auo),e(Xp,yuo),e(Xp,JP),e(JP,Luo),e(Xp,xuo),e(S,kuo),e(S,zp),e(zp,Ate),e(Ate,Suo),e(zp,Ruo),e(zp,YP),e(YP,Buo),e(zp,Puo),e(S,$uo),e(S,Qp),e(Qp,yte),e(yte,Iuo),e(Qp,quo),e(Qp,KP),e(KP,Nuo),e(Qp,juo),e(S,Duo),e(S,Wp),e(Wp,Lte),e(Lte,Guo),e(Wp,Ouo),e(Wp,ZP),e(ZP,Vuo),e(Wp,Xuo),e(S,zuo),e(S,Hp),e(Hp,xte),e(xte,Quo),e(Hp,Wuo),e(Hp,e$),e(e$,Huo),e(Hp,Uuo),e(S,Juo),e(S,Up),e(Up,kte),e(kte,Yuo),e(Up,Kuo),e(Up,o$),e(o$,Zuo),e(Up,epo),e(S,opo),e(S,Jp),e(Jp,Ste),e(Ste,rpo),e(Jp,tpo),e(Jp,r$),e(r$,apo),e(Jp,npo),e(S,spo),e(S,Yp),e(Yp,Rte),e(Rte,lpo),e(Yp,ipo),e(Yp,t$),e(t$,dpo),e(Yp,cpo),e(S,mpo),e(S,Kp),e(Kp,Bte),e(Bte,fpo),e(Kp,gpo),e(Kp,a$),e(a$,hpo),e(Kp,upo),e(S,ppo),e(S,Zp),e(Zp,Pte),e(Pte,_po),e(Zp,bpo),e(Zp,n$),e(n$,Fpo),e(Zp,vpo),e(S,Tpo),e(S,e_),e(e_,$te),e($te,Mpo),e(e_,Epo),e(e_,s$),e(s$,Cpo),e(e_,wpo),e(S,Apo),e(S,o_),e(o_,Ite),e(Ite,ypo),e(o_,Lpo),e(o_,l$),e(l$,xpo),e(o_,kpo),e(S,Spo),e(S,r_),e(r_,qte),e(qte,Rpo),e(r_,Bpo),e(r_,i$),e(i$,Ppo),e(r_,$po),e(S,Ipo),e(S,t_),e(t_,Nte),e(Nte,qpo),e(t_,Npo),e(t_,d$),e(d$,jpo),e(t_,Dpo),e(S,Gpo),e(S,a_),e(a_,jte),e(jte,Opo),e(a_,Vpo),e(a_,c$),e(c$,Xpo),e(a_,zpo),e(S,Qpo),e(S,n_),e(n_,Dte),e(Dte,Wpo),e(n_,Hpo),e(n_,m$),e(m$,Upo),e(n_,Jpo),e(S,Ypo),e(S,s_),e(s_,Gte),e(Gte,Kpo),e(s_,Zpo),e(s_,f$),e(f$,e_o),e(s_,o_o),e(S,r_o),e(S,l_),e(l_,Ote),e(Ote,t_o),e(l_,a_o),e(l_,g$),e(g$,n_o),e(l_,s_o),e(S,l_o),e(S,i_),e(i_,Vte),e(Vte,i_o),e(i_,d_o),e(i_,h$),e(h$,c_o),e(i_,m_o),e(S,f_o),e(S,d_),e(d_,Xte),e(Xte,g_o),e(d_,h_o),e(d_,u$),e(u$,u_o),e(d_,p_o),e(S,__o),e(S,c_),e(c_,zte),e(zte,b_o),e(c_,F_o),e(c_,p$),e(p$,v_o),e(c_,T_o),e(S,M_o),e(S,m_),e(m_,Qte),e(Qte,E_o),e(m_,C_o),e(m_,_$),e(_$,w_o),e(m_,A_o),e(S,y_o),e(S,f_),e(f_,Wte),e(Wte,L_o),e(f_,x_o),e(f_,b$),e(b$,k_o),e(f_,S_o),e(S,R_o),e(S,g_),e(g_,Hte),e(Hte,B_o),e(g_,P_o),e(g_,F$),e(F$,$_o),e(g_,I_o),e(S,q_o),e(S,h_),e(h_,Ute),e(Ute,N_o),e(h_,j_o),e(h_,v$),e(v$,D_o),e(h_,G_o),e(S,O_o),e(S,u_),e(u_,Jte),e(Jte,V_o),e(u_,X_o),e(u_,T$),e(T$,z_o),e(u_,Q_o),e(Ne,W_o),e(Ne,p_),e(p_,H_o),e(p_,Yte),e(Yte,U_o),e(p_,J_o),e(p_,Kte),e(Kte,Y_o),e(Ne,K_o),e(Ne,Zte),e(Zte,Z_o),e(Ne,ebo),g(sA,Ne,null),b(c,QSe,_),b(c,rd,_),e(rd,__),e(__,eae),g(lA,eae,null),e(rd,obo),e(rd,oae),e(oae,rbo),b(c,WSe,_),b(c,Ko,_),g(iA,Ko,null),e(Ko,tbo),e(Ko,td),e(td,abo),e(td,M$),e(M$,nbo),e(td,sbo),e(td,E$),e(E$,lbo),e(td,ibo),e(Ko,dbo),e(Ko,dA),e(dA,cbo),e(dA,rae),e(rae,mbo),e(dA,fbo),e(Ko,gbo),e(Ko,Qr),g(cA,Qr,null),e(Qr,hbo),e(Qr,tae),e(tae,ubo),e(Qr,pbo),e(Qr,ad),e(ad,_bo),e(ad,aae),e(aae,bbo),e(ad,Fbo),e(ad,C$),e(C$,vbo),e(ad,Tbo),e(Qr,Mbo),e(Qr,nae),e(nae,Ebo),e(Qr,Cbo),g(mA,Qr,null),e(Ko,wbo),e(Ko,je),g(fA,je,null),e(je,Abo),e(je,sae),e(sae,ybo),e(je,Lbo),e(je,Qa),e(Qa,xbo),e(Qa,lae),e(lae,kbo),e(Qa,Sbo),e(Qa,iae),e(iae,Rbo),e(Qa,Bbo),e(Qa,dae),e(dae,Pbo),e(Qa,$bo),e(je,Ibo),e(je,$),e($,b_),e(b_,cae),e(cae,qbo),e(b_,Nbo),e(b_,w$),e(w$,jbo),e(b_,Dbo),e($,Gbo),e($,F_),e(F_,mae),e(mae,Obo),e(F_,Vbo),e(F_,A$),e(A$,Xbo),e(F_,zbo),e($,Qbo),e($,v_),e(v_,fae),e(fae,Wbo),e(v_,Hbo),e(v_,y$),e(y$,Ubo),e(v_,Jbo),e($,Ybo),e($,T_),e(T_,gae),e(gae,Kbo),e(T_,Zbo),e(T_,L$),e(L$,e2o),e(T_,o2o),e($,r2o),e($,M_),e(M_,hae),e(hae,t2o),e(M_,a2o),e(M_,x$),e(x$,n2o),e(M_,s2o),e($,l2o),e($,E_),e(E_,uae),e(uae,i2o),e(E_,d2o),e(E_,k$),e(k$,c2o),e(E_,m2o),e($,f2o),e($,C_),e(C_,pae),e(pae,g2o),e(C_,h2o),e(C_,S$),e(S$,u2o),e(C_,p2o),e($,_2o),e($,w_),e(w_,_ae),e(_ae,b2o),e(w_,F2o),e(w_,R$),e(R$,v2o),e(w_,T2o),e($,M2o),e($,A_),e(A_,bae),e(bae,E2o),e(A_,C2o),e(A_,B$),e(B$,w2o),e(A_,A2o),e($,y2o),e($,y_),e(y_,Fae),e(Fae,L2o),e(y_,x2o),e(y_,P$),e(P$,k2o),e(y_,S2o),e($,R2o),e($,L_),e(L_,vae),e(vae,B2o),e(L_,P2o),e(L_,$$),e($$,$2o),e(L_,I2o),e($,q2o),e($,x_),e(x_,Tae),e(Tae,N2o),e(x_,j2o),e(x_,I$),e(I$,D2o),e(x_,G2o),e($,O2o),e($,k_),e(k_,Mae),e(Mae,V2o),e(k_,X2o),e(k_,q$),e(q$,z2o),e(k_,Q2o),e($,W2o),e($,S_),e(S_,Eae),e(Eae,H2o),e(S_,U2o),e(S_,N$),e(N$,J2o),e(S_,Y2o),e($,K2o),e($,R_),e(R_,Cae),e(Cae,Z2o),e(R_,eFo),e(R_,j$),e(j$,oFo),e(R_,rFo),e($,tFo),e($,B_),e(B_,wae),e(wae,aFo),e(B_,nFo),e(B_,D$),e(D$,sFo),e(B_,lFo),e($,iFo),e($,P_),e(P_,Aae),e(Aae,dFo),e(P_,cFo),e(P_,G$),e(G$,mFo),e(P_,fFo),e($,gFo),e($,$_),e($_,yae),e(yae,hFo),e($_,uFo),e($_,O$),e(O$,pFo),e($_,_Fo),e($,bFo),e($,I_),e(I_,Lae),e(Lae,FFo),e(I_,vFo),e(I_,V$),e(V$,TFo),e(I_,MFo),e($,EFo),e($,q_),e(q_,xae),e(xae,CFo),e(q_,wFo),e(q_,X$),e(X$,AFo),e(q_,yFo),e($,LFo),e($,N_),e(N_,kae),e(kae,xFo),e(N_,kFo),e(N_,z$),e(z$,SFo),e(N_,RFo),e($,BFo),e($,j_),e(j_,Sae),e(Sae,PFo),e(j_,$Fo),e(j_,Q$),e(Q$,IFo),e(j_,qFo),e($,NFo),e($,D_),e(D_,Rae),e(Rae,jFo),e(D_,DFo),e(D_,W$),e(W$,GFo),e(D_,OFo),e($,VFo),e($,G_),e(G_,Bae),e(Bae,XFo),e(G_,zFo),e(G_,H$),e(H$,QFo),e(G_,WFo),e($,HFo),e($,O_),e(O_,Pae),e(Pae,UFo),e(O_,JFo),e(O_,U$),e(U$,YFo),e(O_,KFo),e($,ZFo),e($,V_),e(V_,$ae),e($ae,evo),e(V_,ovo),e(V_,J$),e(J$,rvo),e(V_,tvo),e($,avo),e($,X_),e(X_,Iae),e(Iae,nvo),e(X_,svo),e(X_,Y$),e(Y$,lvo),e(X_,ivo),e($,dvo),e($,z_),e(z_,qae),e(qae,cvo),e(z_,mvo),e(z_,K$),e(K$,fvo),e(z_,gvo),e($,hvo),e($,Q_),e(Q_,Nae),e(Nae,uvo),e(Q_,pvo),e(Q_,Z$),e(Z$,_vo),e(Q_,bvo),e($,Fvo),e($,W_),e(W_,jae),e(jae,vvo),e(W_,Tvo),e(W_,eI),e(eI,Mvo),e(W_,Evo),e($,Cvo),e($,H_),e(H_,Dae),e(Dae,wvo),e(H_,Avo),e(H_,oI),e(oI,yvo),e(H_,Lvo),e($,xvo),e($,U_),e(U_,Gae),e(Gae,kvo),e(U_,Svo),e(U_,rI),e(rI,Rvo),e(U_,Bvo),e($,Pvo),e($,J_),e(J_,Oae),e(Oae,$vo),e(J_,Ivo),e(J_,tI),e(tI,qvo),e(J_,Nvo),e($,jvo),e($,Y_),e(Y_,Vae),e(Vae,Dvo),e(Y_,Gvo),e(Y_,aI),e(aI,Ovo),e(Y_,Vvo),e($,Xvo),e($,K_),e(K_,Xae),e(Xae,zvo),e(K_,Qvo),e(K_,nI),e(nI,Wvo),e(K_,Hvo),e(je,Uvo),e(je,Z_),e(Z_,Jvo),e(Z_,zae),e(zae,Yvo),e(Z_,Kvo),e(Z_,Qae),e(Qae,Zvo),e(je,eTo),e(je,Wae),e(Wae,oTo),e(je,rTo),g(gA,je,null),b(c,HSe,_),b(c,nd,_),e(nd,eb),e(eb,Hae),g(hA,Hae,null),e(nd,tTo),e(nd,Uae),e(Uae,aTo),b(c,USe,_),b(c,Zo,_),g(uA,Zo,null),e(Zo,nTo),e(Zo,sd),e(sd,sTo),e(sd,sI),e(sI,lTo),e(sd,iTo),e(sd,lI),e(lI,dTo),e(sd,cTo),e(Zo,mTo),e(Zo,pA),e(pA,fTo),e(pA,Jae),e(Jae,gTo),e(pA,hTo),e(Zo,uTo),e(Zo,Wr),g(_A,Wr,null),e(Wr,pTo),e(Wr,Yae),e(Yae,_To),e(Wr,bTo),e(Wr,ld),e(ld,FTo),e(ld,Kae),e(Kae,vTo),e(ld,TTo),e(ld,iI),e(iI,MTo),e(ld,ETo),e(Wr,CTo),e(Wr,Zae),e(Zae,wTo),e(Wr,ATo),g(bA,Wr,null),e(Zo,yTo),e(Zo,De),g(FA,De,null),e(De,LTo),e(De,ene),e(ene,xTo),e(De,kTo),e(De,Wa),e(Wa,STo),e(Wa,one),e(one,RTo),e(Wa,BTo),e(Wa,rne),e(rne,PTo),e(Wa,$To),e(Wa,tne),e(tne,ITo),e(Wa,qTo),e(De,NTo),e(De,I),e(I,ob),e(ob,ane),e(ane,jTo),e(ob,DTo),e(ob,dI),e(dI,GTo),e(ob,OTo),e(I,VTo),e(I,rb),e(rb,nne),e(nne,XTo),e(rb,zTo),e(rb,cI),e(cI,QTo),e(rb,WTo),e(I,HTo),e(I,tb),e(tb,sne),e(sne,UTo),e(tb,JTo),e(tb,mI),e(mI,YTo),e(tb,KTo),e(I,ZTo),e(I,ab),e(ab,lne),e(lne,e1o),e(ab,o1o),e(ab,fI),e(fI,r1o),e(ab,t1o),e(I,a1o),e(I,nb),e(nb,ine),e(ine,n1o),e(nb,s1o),e(nb,gI),e(gI,l1o),e(nb,i1o),e(I,d1o),e(I,sb),e(sb,dne),e(dne,c1o),e(sb,m1o),e(sb,hI),e(hI,f1o),e(sb,g1o),e(I,h1o),e(I,lb),e(lb,cne),e(cne,u1o),e(lb,p1o),e(lb,uI),e(uI,_1o),e(lb,b1o),e(I,F1o),e(I,ib),e(ib,mne),e(mne,v1o),e(ib,T1o),e(ib,pI),e(pI,M1o),e(ib,E1o),e(I,C1o),e(I,db),e(db,fne),e(fne,w1o),e(db,A1o),e(db,_I),e(_I,y1o),e(db,L1o),e(I,x1o),e(I,cb),e(cb,gne),e(gne,k1o),e(cb,S1o),e(cb,bI),e(bI,R1o),e(cb,B1o),e(I,P1o),e(I,mb),e(mb,hne),e(hne,$1o),e(mb,I1o),e(mb,FI),e(FI,q1o),e(mb,N1o),e(I,j1o),e(I,fb),e(fb,une),e(une,D1o),e(fb,G1o),e(fb,vI),e(vI,O1o),e(fb,V1o),e(I,X1o),e(I,gb),e(gb,pne),e(pne,z1o),e(gb,Q1o),e(gb,TI),e(TI,W1o),e(gb,H1o),e(I,U1o),e(I,hb),e(hb,_ne),e(_ne,J1o),e(hb,Y1o),e(hb,MI),e(MI,K1o),e(hb,Z1o),e(I,eMo),e(I,ub),e(ub,bne),e(bne,oMo),e(ub,rMo),e(ub,EI),e(EI,tMo),e(ub,aMo),e(I,nMo),e(I,pb),e(pb,Fne),e(Fne,sMo),e(pb,lMo),e(pb,CI),e(CI,iMo),e(pb,dMo),e(I,cMo),e(I,_b),e(_b,vne),e(vne,mMo),e(_b,fMo),e(_b,wI),e(wI,gMo),e(_b,hMo),e(I,uMo),e(I,bb),e(bb,Tne),e(Tne,pMo),e(bb,_Mo),e(bb,AI),e(AI,bMo),e(bb,FMo),e(I,vMo),e(I,Fb),e(Fb,Mne),e(Mne,TMo),e(Fb,MMo),e(Fb,yI),e(yI,EMo),e(Fb,CMo),e(I,wMo),e(I,vb),e(vb,Ene),e(Ene,AMo),e(vb,yMo),e(vb,LI),e(LI,LMo),e(vb,xMo),e(I,kMo),e(I,Tb),e(Tb,Cne),e(Cne,SMo),e(Tb,RMo),e(Tb,xI),e(xI,BMo),e(Tb,PMo),e(I,$Mo),e(I,Mb),e(Mb,wne),e(wne,IMo),e(Mb,qMo),e(Mb,kI),e(kI,NMo),e(Mb,jMo),e(I,DMo),e(I,Eb),e(Eb,Ane),e(Ane,GMo),e(Eb,OMo),e(Eb,SI),e(SI,VMo),e(Eb,XMo),e(I,zMo),e(I,Cb),e(Cb,yne),e(yne,QMo),e(Cb,WMo),e(Cb,RI),e(RI,HMo),e(Cb,UMo),e(I,JMo),e(I,wb),e(wb,Lne),e(Lne,YMo),e(wb,KMo),e(wb,BI),e(BI,ZMo),e(wb,e4o),e(I,o4o),e(I,Ab),e(Ab,xne),e(xne,r4o),e(Ab,t4o),e(Ab,PI),e(PI,a4o),e(Ab,n4o),e(I,s4o),e(I,yb),e(yb,kne),e(kne,l4o),e(yb,i4o),e(yb,$I),e($I,d4o),e(yb,c4o),e(I,m4o),e(I,Lb),e(Lb,Sne),e(Sne,f4o),e(Lb,g4o),e(Lb,II),e(II,h4o),e(Lb,u4o),e(I,p4o),e(I,xb),e(xb,Rne),e(Rne,_4o),e(xb,b4o),e(xb,qI),e(qI,F4o),e(xb,v4o),e(I,T4o),e(I,kb),e(kb,Bne),e(Bne,M4o),e(kb,E4o),e(kb,NI),e(NI,C4o),e(kb,w4o),e(I,A4o),e(I,Sb),e(Sb,Pne),e(Pne,y4o),e(Sb,L4o),e(Sb,$ne),e($ne,x4o),e(Sb,k4o),e(I,S4o),e(I,Rb),e(Rb,Ine),e(Ine,R4o),e(Rb,B4o),e(Rb,jI),e(jI,P4o),e(Rb,$4o),e(I,I4o),e(I,Bb),e(Bb,qne),e(qne,q4o),e(Bb,N4o),e(Bb,DI),e(DI,j4o),e(Bb,D4o),e(I,G4o),e(I,Pb),e(Pb,Nne),e(Nne,O4o),e(Pb,V4o),e(Pb,GI),e(GI,X4o),e(Pb,z4o),e(I,Q4o),e(I,$b),e($b,jne),e(jne,W4o),e($b,H4o),e($b,OI),e(OI,U4o),e($b,J4o),e(De,Y4o),e(De,Ib),e(Ib,K4o),e(Ib,Dne),e(Dne,Z4o),e(Ib,eEo),e(Ib,Gne),e(Gne,oEo),e(De,rEo),e(De,One),e(One,tEo),e(De,aEo),g(vA,De,null),b(c,JSe,_),b(c,id,_),e(id,qb),e(qb,Vne),g(TA,Vne,null),e(id,nEo),e(id,Xne),e(Xne,sEo),b(c,YSe,_),b(c,er,_),g(MA,er,null),e(er,lEo),e(er,dd),e(dd,iEo),e(dd,VI),e(VI,dEo),e(dd,cEo),e(dd,XI),e(XI,mEo),e(dd,fEo),e(er,gEo),e(er,EA),e(EA,hEo),e(EA,zne),e(zne,uEo),e(EA,pEo),e(er,_Eo),e(er,Hr),g(CA,Hr,null),e(Hr,bEo),e(Hr,Qne),e(Qne,FEo),e(Hr,vEo),e(Hr,cd),e(cd,TEo),e(cd,Wne),e(Wne,MEo),e(cd,EEo),e(cd,zI),e(zI,CEo),e(cd,wEo),e(Hr,AEo),e(Hr,Hne),e(Hne,yEo),e(Hr,LEo),g(wA,Hr,null),e(er,xEo),e(er,Ge),g(AA,Ge,null),e(Ge,kEo),e(Ge,Une),e(Une,SEo),e(Ge,REo),e(Ge,Ha),e(Ha,BEo),e(Ha,Jne),e(Jne,PEo),e(Ha,$Eo),e(Ha,Yne),e(Yne,IEo),e(Ha,qEo),e(Ha,Kne),e(Kne,NEo),e(Ha,jEo),e(Ge,DEo),e(Ge,se),e(se,Nb),e(Nb,Zne),e(Zne,GEo),e(Nb,OEo),e(Nb,QI),e(QI,VEo),e(Nb,XEo),e(se,zEo),e(se,jb),e(jb,ese),e(ese,QEo),e(jb,WEo),e(jb,WI),e(WI,HEo),e(jb,UEo),e(se,JEo),e(se,Db),e(Db,ose),e(ose,YEo),e(Db,KEo),e(Db,HI),e(HI,ZEo),e(Db,eCo),e(se,oCo),e(se,Gb),e(Gb,rse),e(rse,rCo),e(Gb,tCo),e(Gb,UI),e(UI,aCo),e(Gb,nCo),e(se,sCo),e(se,Ob),e(Ob,tse),e(tse,lCo),e(Ob,iCo),e(Ob,JI),e(JI,dCo),e(Ob,cCo),e(se,mCo),e(se,Vb),e(Vb,ase),e(ase,fCo),e(Vb,gCo),e(Vb,YI),e(YI,hCo),e(Vb,uCo),e(se,pCo),e(se,Xb),e(Xb,nse),e(nse,_Co),e(Xb,bCo),e(Xb,KI),e(KI,FCo),e(Xb,vCo),e(se,TCo),e(se,zb),e(zb,sse),e(sse,MCo),e(zb,ECo),e(zb,ZI),e(ZI,CCo),e(zb,wCo),e(se,ACo),e(se,Qb),e(Qb,lse),e(lse,yCo),e(Qb,LCo),e(Qb,eq),e(eq,xCo),e(Qb,kCo),e(se,SCo),e(se,Wb),e(Wb,ise),e(ise,RCo),e(Wb,BCo),e(Wb,oq),e(oq,PCo),e(Wb,$Co),e(se,ICo),e(se,Hb),e(Hb,dse),e(dse,qCo),e(Hb,NCo),e(Hb,rq),e(rq,jCo),e(Hb,DCo),e(se,GCo),e(se,Ub),e(Ub,cse),e(cse,OCo),e(Ub,VCo),e(Ub,tq),e(tq,XCo),e(Ub,zCo),e(se,QCo),e(se,Jb),e(Jb,mse),e(mse,WCo),e(Jb,HCo),e(Jb,aq),e(aq,UCo),e(Jb,JCo),e(se,YCo),e(se,Yb),e(Yb,fse),e(fse,KCo),e(Yb,ZCo),e(Yb,nq),e(nq,e5o),e(Yb,o5o),e(se,r5o),e(se,Kb),e(Kb,gse),e(gse,t5o),e(Kb,a5o),e(Kb,sq),e(sq,n5o),e(Kb,s5o),e(se,l5o),e(se,Zb),e(Zb,hse),e(hse,i5o),e(Zb,d5o),e(Zb,lq),e(lq,c5o),e(Zb,m5o),e(Ge,f5o),e(Ge,e2),e(e2,g5o),e(e2,use),e(use,h5o),e(e2,u5o),e(e2,pse),e(pse,p5o),e(Ge,_5o),e(Ge,_se),e(_se,b5o),e(Ge,F5o),g(yA,Ge,null),b(c,KSe,_),b(c,md,_),e(md,o2),e(o2,bse),g(LA,bse,null),e(md,v5o),e(md,Fse),e(Fse,T5o),b(c,ZSe,_),b(c,or,_),g(xA,or,null),e(or,M5o),e(or,fd),e(fd,E5o),e(fd,iq),e(iq,C5o),e(fd,w5o),e(fd,dq),e(dq,A5o),e(fd,y5o),e(or,L5o),e(or,kA),e(kA,x5o),e(kA,vse),e(vse,k5o),e(kA,S5o),e(or,R5o),e(or,Ur),g(SA,Ur,null),e(Ur,B5o),e(Ur,Tse),e(Tse,P5o),e(Ur,$5o),e(Ur,gd),e(gd,I5o),e(gd,Mse),e(Mse,q5o),e(gd,N5o),e(gd,cq),e(cq,j5o),e(gd,D5o),e(Ur,G5o),e(Ur,Ese),e(Ese,O5o),e(Ur,V5o),g(RA,Ur,null),e(or,X5o),e(or,Oe),g(BA,Oe,null),e(Oe,z5o),e(Oe,Cse),e(Cse,Q5o),e(Oe,W5o),e(Oe,Ua),e(Ua,H5o),e(Ua,wse),e(wse,U5o),e(Ua,J5o),e(Ua,Ase),e(Ase,Y5o),e(Ua,K5o),e(Ua,yse),e(yse,Z5o),e(Ua,e3o),e(Oe,o3o),e(Oe,y),e(y,r2),e(r2,Lse),e(Lse,r3o),e(r2,t3o),e(r2,mq),e(mq,a3o),e(r2,n3o),e(y,s3o),e(y,t2),e(t2,xse),e(xse,l3o),e(t2,i3o),e(t2,fq),e(fq,d3o),e(t2,c3o),e(y,m3o),e(y,a2),e(a2,kse),e(kse,f3o),e(a2,g3o),e(a2,gq),e(gq,h3o),e(a2,u3o),e(y,p3o),e(y,n2),e(n2,Sse),e(Sse,_3o),e(n2,b3o),e(n2,hq),e(hq,F3o),e(n2,v3o),e(y,T3o),e(y,s2),e(s2,Rse),e(Rse,M3o),e(s2,E3o),e(s2,uq),e(uq,C3o),e(s2,w3o),e(y,A3o),e(y,l2),e(l2,Bse),e(Bse,y3o),e(l2,L3o),e(l2,pq),e(pq,x3o),e(l2,k3o),e(y,S3o),e(y,i2),e(i2,Pse),e(Pse,R3o),e(i2,B3o),e(i2,_q),e(_q,P3o),e(i2,$3o),e(y,I3o),e(y,d2),e(d2,$se),e($se,q3o),e(d2,N3o),e(d2,bq),e(bq,j3o),e(d2,D3o),e(y,G3o),e(y,c2),e(c2,Ise),e(Ise,O3o),e(c2,V3o),e(c2,Fq),e(Fq,X3o),e(c2,z3o),e(y,Q3o),e(y,m2),e(m2,qse),e(qse,W3o),e(m2,H3o),e(m2,vq),e(vq,U3o),e(m2,J3o),e(y,Y3o),e(y,f2),e(f2,Nse),e(Nse,K3o),e(f2,Z3o),e(f2,Tq),e(Tq,ewo),e(f2,owo),e(y,rwo),e(y,g2),e(g2,jse),e(jse,two),e(g2,awo),e(g2,Mq),e(Mq,nwo),e(g2,swo),e(y,lwo),e(y,h2),e(h2,Dse),e(Dse,iwo),e(h2,dwo),e(h2,Eq),e(Eq,cwo),e(h2,mwo),e(y,fwo),e(y,u2),e(u2,Gse),e(Gse,gwo),e(u2,hwo),e(u2,Cq),e(Cq,uwo),e(u2,pwo),e(y,_wo),e(y,p2),e(p2,Ose),e(Ose,bwo),e(p2,Fwo),e(p2,wq),e(wq,vwo),e(p2,Two),e(y,Mwo),e(y,_2),e(_2,Vse),e(Vse,Ewo),e(_2,Cwo),e(_2,Aq),e(Aq,wwo),e(_2,Awo),e(y,ywo),e(y,b2),e(b2,Xse),e(Xse,Lwo),e(b2,xwo),e(b2,yq),e(yq,kwo),e(b2,Swo),e(y,Rwo),e(y,F2),e(F2,zse),e(zse,Bwo),e(F2,Pwo),e(F2,Lq),e(Lq,$wo),e(F2,Iwo),e(y,qwo),e(y,v2),e(v2,Qse),e(Qse,Nwo),e(v2,jwo),e(v2,xq),e(xq,Dwo),e(v2,Gwo),e(y,Owo),e(y,T2),e(T2,Wse),e(Wse,Vwo),e(T2,Xwo),e(T2,kq),e(kq,zwo),e(T2,Qwo),e(y,Wwo),e(y,M2),e(M2,Hse),e(Hse,Hwo),e(M2,Uwo),e(M2,Sq),e(Sq,Jwo),e(M2,Ywo),e(y,Kwo),e(y,E2),e(E2,Use),e(Use,Zwo),e(E2,eAo),e(E2,Rq),e(Rq,oAo),e(E2,rAo),e(y,tAo),e(y,C2),e(C2,Jse),e(Jse,aAo),e(C2,nAo),e(C2,Bq),e(Bq,sAo),e(C2,lAo),e(y,iAo),e(y,w2),e(w2,Yse),e(Yse,dAo),e(w2,cAo),e(w2,Pq),e(Pq,mAo),e(w2,fAo),e(y,gAo),e(y,A2),e(A2,Kse),e(Kse,hAo),e(A2,uAo),e(A2,$q),e($q,pAo),e(A2,_Ao),e(y,bAo),e(y,y2),e(y2,Zse),e(Zse,FAo),e(y2,vAo),e(y2,Iq),e(Iq,TAo),e(y2,MAo),e(y,EAo),e(y,L2),e(L2,ele),e(ele,CAo),e(L2,wAo),e(L2,qq),e(qq,AAo),e(L2,yAo),e(y,LAo),e(y,x2),e(x2,ole),e(ole,xAo),e(x2,kAo),e(x2,Nq),e(Nq,SAo),e(x2,RAo),e(y,BAo),e(y,k2),e(k2,rle),e(rle,PAo),e(k2,$Ao),e(k2,jq),e(jq,IAo),e(k2,qAo),e(y,NAo),e(y,S2),e(S2,tle),e(tle,jAo),e(S2,DAo),e(S2,Dq),e(Dq,GAo),e(S2,OAo),e(y,VAo),e(y,R2),e(R2,ale),e(ale,XAo),e(R2,zAo),e(R2,Gq),e(Gq,QAo),e(R2,WAo),e(y,HAo),e(y,B2),e(B2,nle),e(nle,UAo),e(B2,JAo),e(B2,Oq),e(Oq,YAo),e(B2,KAo),e(y,ZAo),e(y,P2),e(P2,sle),e(sle,e6o),e(P2,o6o),e(P2,Vq),e(Vq,r6o),e(P2,t6o),e(y,a6o),e(y,$2),e($2,lle),e(lle,n6o),e($2,s6o),e($2,Xq),e(Xq,l6o),e($2,i6o),e(y,d6o),e(y,I2),e(I2,ile),e(ile,c6o),e(I2,m6o),e(I2,zq),e(zq,f6o),e(I2,g6o),e(y,h6o),e(y,q2),e(q2,dle),e(dle,u6o),e(q2,p6o),e(q2,Qq),e(Qq,_6o),e(q2,b6o),e(y,F6o),e(y,N2),e(N2,cle),e(cle,v6o),e(N2,T6o),e(N2,Wq),e(Wq,M6o),e(N2,E6o),e(y,C6o),e(y,j2),e(j2,mle),e(mle,w6o),e(j2,A6o),e(j2,Hq),e(Hq,y6o),e(j2,L6o),e(y,x6o),e(y,D2),e(D2,fle),e(fle,k6o),e(D2,S6o),e(D2,Uq),e(Uq,R6o),e(D2,B6o),e(y,P6o),e(y,G2),e(G2,gle),e(gle,$6o),e(G2,I6o),e(G2,Jq),e(Jq,q6o),e(G2,N6o),e(y,j6o),e(y,O2),e(O2,hle),e(hle,D6o),e(O2,G6o),e(O2,Yq),e(Yq,O6o),e(O2,V6o),e(y,X6o),e(y,V2),e(V2,ule),e(ule,z6o),e(V2,Q6o),e(V2,Kq),e(Kq,W6o),e(V2,H6o),e(y,U6o),e(y,X2),e(X2,ple),e(ple,J6o),e(X2,Y6o),e(X2,Zq),e(Zq,K6o),e(X2,Z6o),e(y,e0o),e(y,z2),e(z2,_le),e(_le,o0o),e(z2,r0o),e(z2,eN),e(eN,t0o),e(z2,a0o),e(y,n0o),e(y,Q2),e(Q2,ble),e(ble,s0o),e(Q2,l0o),e(Q2,oN),e(oN,i0o),e(Q2,d0o),e(y,c0o),e(y,W2),e(W2,Fle),e(Fle,m0o),e(W2,f0o),e(W2,rN),e(rN,g0o),e(W2,h0o),e(Oe,u0o),e(Oe,H2),e(H2,p0o),e(H2,vle),e(vle,_0o),e(H2,b0o),e(H2,Tle),e(Tle,F0o),e(Oe,v0o),e(Oe,Mle),e(Mle,T0o),e(Oe,M0o),g(PA,Oe,null),b(c,eRe,_),b(c,hd,_),e(hd,U2),e(U2,Ele),g($A,Ele,null),e(hd,E0o),e(hd,Cle),e(Cle,C0o),b(c,oRe,_),b(c,rr,_),g(IA,rr,null),e(rr,w0o),e(rr,ud),e(ud,A0o),e(ud,tN),e(tN,y0o),e(ud,L0o),e(ud,aN),e(aN,x0o),e(ud,k0o),e(rr,S0o),e(rr,qA),e(qA,R0o),e(qA,wle),e(wle,B0o),e(qA,P0o),e(rr,$0o),e(rr,Jr),g(NA,Jr,null),e(Jr,I0o),e(Jr,Ale),e(Ale,q0o),e(Jr,N0o),e(Jr,pd),e(pd,j0o),e(pd,yle),e(yle,D0o),e(pd,G0o),e(pd,nN),e(nN,O0o),e(pd,V0o),e(Jr,X0o),e(Jr,Lle),e(Lle,z0o),e(Jr,Q0o),g(jA,Jr,null),e(rr,W0o),e(rr,Ve),g(DA,Ve,null),e(Ve,H0o),e(Ve,xle),e(xle,U0o),e(Ve,J0o),e(Ve,Ja),e(Ja,Y0o),e(Ja,kle),e(kle,K0o),e(Ja,Z0o),e(Ja,Sle),e(Sle,eyo),e(Ja,oyo),e(Ja,Rle),e(Rle,ryo),e(Ja,tyo),e(Ve,ayo),e(Ve,G),e(G,J2),e(J2,Ble),e(Ble,nyo),e(J2,syo),e(J2,sN),e(sN,lyo),e(J2,iyo),e(G,dyo),e(G,Y2),e(Y2,Ple),e(Ple,cyo),e(Y2,myo),e(Y2,lN),e(lN,fyo),e(Y2,gyo),e(G,hyo),e(G,K2),e(K2,$le),e($le,uyo),e(K2,pyo),e(K2,iN),e(iN,_yo),e(K2,byo),e(G,Fyo),e(G,Z2),e(Z2,Ile),e(Ile,vyo),e(Z2,Tyo),e(Z2,dN),e(dN,Myo),e(Z2,Eyo),e(G,Cyo),e(G,eF),e(eF,qle),e(qle,wyo),e(eF,Ayo),e(eF,cN),e(cN,yyo),e(eF,Lyo),e(G,xyo),e(G,oF),e(oF,Nle),e(Nle,kyo),e(oF,Syo),e(oF,mN),e(mN,Ryo),e(oF,Byo),e(G,Pyo),e(G,rF),e(rF,jle),e(jle,$yo),e(rF,Iyo),e(rF,fN),e(fN,qyo),e(rF,Nyo),e(G,jyo),e(G,tF),e(tF,Dle),e(Dle,Dyo),e(tF,Gyo),e(tF,gN),e(gN,Oyo),e(tF,Vyo),e(G,Xyo),e(G,aF),e(aF,Gle),e(Gle,zyo),e(aF,Qyo),e(aF,hN),e(hN,Wyo),e(aF,Hyo),e(G,Uyo),e(G,nF),e(nF,Ole),e(Ole,Jyo),e(nF,Yyo),e(nF,uN),e(uN,Kyo),e(nF,Zyo),e(G,eLo),e(G,sF),e(sF,Vle),e(Vle,oLo),e(sF,rLo),e(sF,pN),e(pN,tLo),e(sF,aLo),e(G,nLo),e(G,lF),e(lF,Xle),e(Xle,sLo),e(lF,lLo),e(lF,_N),e(_N,iLo),e(lF,dLo),e(G,cLo),e(G,iF),e(iF,zle),e(zle,mLo),e(iF,fLo),e(iF,bN),e(bN,gLo),e(iF,hLo),e(G,uLo),e(G,dF),e(dF,Qle),e(Qle,pLo),e(dF,_Lo),e(dF,FN),e(FN,bLo),e(dF,FLo),e(G,vLo),e(G,cF),e(cF,Wle),e(Wle,TLo),e(cF,MLo),e(cF,vN),e(vN,ELo),e(cF,CLo),e(G,wLo),e(G,mF),e(mF,Hle),e(Hle,ALo),e(mF,yLo),e(mF,TN),e(TN,LLo),e(mF,xLo),e(G,kLo),e(G,fF),e(fF,Ule),e(Ule,SLo),e(fF,RLo),e(fF,MN),e(MN,BLo),e(fF,PLo),e(G,$Lo),e(G,gF),e(gF,Jle),e(Jle,ILo),e(gF,qLo),e(gF,EN),e(EN,NLo),e(gF,jLo),e(G,DLo),e(G,hF),e(hF,Yle),e(Yle,GLo),e(hF,OLo),e(hF,CN),e(CN,VLo),e(hF,XLo),e(G,zLo),e(G,uF),e(uF,Kle),e(Kle,QLo),e(uF,WLo),e(uF,wN),e(wN,HLo),e(uF,ULo),e(G,JLo),e(G,pF),e(pF,Zle),e(Zle,YLo),e(pF,KLo),e(pF,AN),e(AN,ZLo),e(pF,e7o),e(G,o7o),e(G,_F),e(_F,eie),e(eie,r7o),e(_F,t7o),e(_F,yN),e(yN,a7o),e(_F,n7o),e(G,s7o),e(G,bF),e(bF,oie),e(oie,l7o),e(bF,i7o),e(bF,LN),e(LN,d7o),e(bF,c7o),e(G,m7o),e(G,FF),e(FF,rie),e(rie,f7o),e(FF,g7o),e(FF,xN),e(xN,h7o),e(FF,u7o),e(G,p7o),e(G,vF),e(vF,tie),e(tie,_7o),e(vF,b7o),e(vF,kN),e(kN,F7o),e(vF,v7o),e(G,T7o),e(G,TF),e(TF,aie),e(aie,M7o),e(TF,E7o),e(TF,SN),e(SN,C7o),e(TF,w7o),e(G,A7o),e(G,MF),e(MF,nie),e(nie,y7o),e(MF,L7o),e(MF,RN),e(RN,x7o),e(MF,k7o),e(G,S7o),e(G,EF),e(EF,sie),e(sie,R7o),e(EF,B7o),e(EF,BN),e(BN,P7o),e(EF,$7o),e(Ve,I7o),e(Ve,CF),e(CF,q7o),e(CF,lie),e(lie,N7o),e(CF,j7o),e(CF,iie),e(iie,D7o),e(Ve,G7o),e(Ve,die),e(die,O7o),e(Ve,V7o),g(GA,Ve,null),b(c,rRe,_),b(c,_d,_),e(_d,wF),e(wF,cie),g(OA,cie,null),e(_d,X7o),e(_d,mie),e(mie,z7o),b(c,tRe,_),b(c,tr,_),g(VA,tr,null),e(tr,Q7o),e(tr,bd),e(bd,W7o),e(bd,PN),e(PN,H7o),e(bd,U7o),e(bd,$N),e($N,J7o),e(bd,Y7o),e(tr,K7o),e(tr,XA),e(XA,Z7o),e(XA,fie),e(fie,e8o),e(XA,o8o),e(tr,r8o),e(tr,Yr),g(zA,Yr,null),e(Yr,t8o),e(Yr,gie),e(gie,a8o),e(Yr,n8o),e(Yr,Fd),e(Fd,s8o),e(Fd,hie),e(hie,l8o),e(Fd,i8o),e(Fd,IN),e(IN,d8o),e(Fd,c8o),e(Yr,m8o),e(Yr,uie),e(uie,f8o),e(Yr,g8o),g(QA,Yr,null),e(tr,h8o),e(tr,Xe),g(WA,Xe,null),e(Xe,u8o),e(Xe,pie),e(pie,p8o),e(Xe,_8o),e(Xe,Ya),e(Ya,b8o),e(Ya,_ie),e(_ie,F8o),e(Ya,v8o),e(Ya,bie),e(bie,T8o),e(Ya,M8o),e(Ya,Fie),e(Fie,E8o),e(Ya,C8o),e(Xe,w8o),e(Xe,da),e(da,AF),e(AF,vie),e(vie,A8o),e(AF,y8o),e(AF,qN),e(qN,L8o),e(AF,x8o),e(da,k8o),e(da,yF),e(yF,Tie),e(Tie,S8o),e(yF,R8o),e(yF,NN),e(NN,B8o),e(yF,P8o),e(da,$8o),e(da,LF),e(LF,Mie),e(Mie,I8o),e(LF,q8o),e(LF,jN),e(jN,N8o),e(LF,j8o),e(da,D8o),e(da,xF),e(xF,Eie),e(Eie,G8o),e(xF,O8o),e(xF,DN),e(DN,V8o),e(xF,X8o),e(da,z8o),e(da,kF),e(kF,Cie),e(Cie,Q8o),e(kF,W8o),e(kF,GN),e(GN,H8o),e(kF,U8o),e(Xe,J8o),e(Xe,SF),e(SF,Y8o),e(SF,wie),e(wie,K8o),e(SF,Z8o),e(SF,Aie),e(Aie,e9o),e(Xe,o9o),e(Xe,yie),e(yie,r9o),e(Xe,t9o),g(HA,Xe,null),b(c,aRe,_),b(c,vd,_),e(vd,RF),e(RF,Lie),g(UA,Lie,null),e(vd,a9o),e(vd,xie),e(xie,n9o),b(c,nRe,_),b(c,ar,_),g(JA,ar,null),e(ar,s9o),e(ar,Td),e(Td,l9o),e(Td,ON),e(ON,i9o),e(Td,d9o),e(Td,VN),e(VN,c9o),e(Td,m9o),e(ar,f9o),e(ar,YA),e(YA,g9o),e(YA,kie),e(kie,h9o),e(YA,u9o),e(ar,p9o),e(ar,Kr),g(KA,Kr,null),e(Kr,_9o),e(Kr,Sie),e(Sie,b9o),e(Kr,F9o),e(Kr,Md),e(Md,v9o),e(Md,Rie),e(Rie,T9o),e(Md,M9o),e(Md,XN),e(XN,E9o),e(Md,C9o),e(Kr,w9o),e(Kr,Bie),e(Bie,A9o),e(Kr,y9o),g(ZA,Kr,null),e(ar,L9o),e(ar,ze),g(e6,ze,null),e(ze,x9o),e(ze,Pie),e(Pie,k9o),e(ze,S9o),e(ze,Ka),e(Ka,R9o),e(Ka,$ie),e($ie,B9o),e(Ka,P9o),e(Ka,Iie),e(Iie,$9o),e(Ka,I9o),e(Ka,qie),e(qie,q9o),e(Ka,N9o),e(ze,j9o),e(ze,j),e(j,BF),e(BF,Nie),e(Nie,D9o),e(BF,G9o),e(BF,zN),e(zN,O9o),e(BF,V9o),e(j,X9o),e(j,PF),e(PF,jie),e(jie,z9o),e(PF,Q9o),e(PF,QN),e(QN,W9o),e(PF,H9o),e(j,U9o),e(j,$F),e($F,Die),e(Die,J9o),e($F,Y9o),e($F,WN),e(WN,K9o),e($F,Z9o),e(j,exo),e(j,IF),e(IF,Gie),e(Gie,oxo),e(IF,rxo),e(IF,HN),e(HN,txo),e(IF,axo),e(j,nxo),e(j,qF),e(qF,Oie),e(Oie,sxo),e(qF,lxo),e(qF,UN),e(UN,ixo),e(qF,dxo),e(j,cxo),e(j,NF),e(NF,Vie),e(Vie,mxo),e(NF,fxo),e(NF,JN),e(JN,gxo),e(NF,hxo),e(j,uxo),e(j,jF),e(jF,Xie),e(Xie,pxo),e(jF,_xo),e(jF,YN),e(YN,bxo),e(jF,Fxo),e(j,vxo),e(j,DF),e(DF,zie),e(zie,Txo),e(DF,Mxo),e(DF,KN),e(KN,Exo),e(DF,Cxo),e(j,wxo),e(j,GF),e(GF,Qie),e(Qie,Axo),e(GF,yxo),e(GF,ZN),e(ZN,Lxo),e(GF,xxo),e(j,kxo),e(j,OF),e(OF,Wie),e(Wie,Sxo),e(OF,Rxo),e(OF,ej),e(ej,Bxo),e(OF,Pxo),e(j,$xo),e(j,VF),e(VF,Hie),e(Hie,Ixo),e(VF,qxo),e(VF,oj),e(oj,Nxo),e(VF,jxo),e(j,Dxo),e(j,XF),e(XF,Uie),e(Uie,Gxo),e(XF,Oxo),e(XF,rj),e(rj,Vxo),e(XF,Xxo),e(j,zxo),e(j,zF),e(zF,Jie),e(Jie,Qxo),e(zF,Wxo),e(zF,tj),e(tj,Hxo),e(zF,Uxo),e(j,Jxo),e(j,QF),e(QF,Yie),e(Yie,Yxo),e(QF,Kxo),e(QF,aj),e(aj,Zxo),e(QF,eko),e(j,oko),e(j,WF),e(WF,Kie),e(Kie,rko),e(WF,tko),e(WF,nj),e(nj,ako),e(WF,nko),e(j,sko),e(j,HF),e(HF,Zie),e(Zie,lko),e(HF,iko),e(HF,sj),e(sj,dko),e(HF,cko),e(j,mko),e(j,UF),e(UF,ede),e(ede,fko),e(UF,gko),e(UF,lj),e(lj,hko),e(UF,uko),e(j,pko),e(j,JF),e(JF,ode),e(ode,_ko),e(JF,bko),e(JF,ij),e(ij,Fko),e(JF,vko),e(j,Tko),e(j,YF),e(YF,rde),e(rde,Mko),e(YF,Eko),e(YF,dj),e(dj,Cko),e(YF,wko),e(j,Ako),e(j,KF),e(KF,tde),e(tde,yko),e(KF,Lko),e(KF,cj),e(cj,xko),e(KF,kko),e(j,Sko),e(j,ZF),e(ZF,ade),e(ade,Rko),e(ZF,Bko),e(ZF,mj),e(mj,Pko),e(ZF,$ko),e(j,Iko),e(j,ev),e(ev,nde),e(nde,qko),e(ev,Nko),e(ev,fj),e(fj,jko),e(ev,Dko),e(j,Gko),e(j,ov),e(ov,sde),e(sde,Oko),e(ov,Vko),e(ov,gj),e(gj,Xko),e(ov,zko),e(j,Qko),e(j,rv),e(rv,lde),e(lde,Wko),e(rv,Hko),e(rv,hj),e(hj,Uko),e(rv,Jko),e(j,Yko),e(j,tv),e(tv,ide),e(ide,Kko),e(tv,Zko),e(tv,uj),e(uj,eSo),e(tv,oSo),e(j,rSo),e(j,av),e(av,dde),e(dde,tSo),e(av,aSo),e(av,pj),e(pj,nSo),e(av,sSo),e(j,lSo),e(j,nv),e(nv,cde),e(cde,iSo),e(nv,dSo),e(nv,_j),e(_j,cSo),e(nv,mSo),e(j,fSo),e(j,sv),e(sv,mde),e(mde,gSo),e(sv,hSo),e(sv,bj),e(bj,uSo),e(sv,pSo),e(j,_So),e(j,lv),e(lv,fde),e(fde,bSo),e(lv,FSo),e(lv,Fj),e(Fj,vSo),e(lv,TSo),e(j,MSo),e(j,iv),e(iv,gde),e(gde,ESo),e(iv,CSo),e(iv,vj),e(vj,wSo),e(iv,ASo),e(j,ySo),e(j,dv),e(dv,hde),e(hde,LSo),e(dv,xSo),e(dv,Tj),e(Tj,kSo),e(dv,SSo),e(j,RSo),e(j,cv),e(cv,ude),e(ude,BSo),e(cv,PSo),e(cv,Mj),e(Mj,$So),e(cv,ISo),e(j,qSo),e(j,mv),e(mv,pde),e(pde,NSo),e(mv,jSo),e(mv,Ej),e(Ej,DSo),e(mv,GSo),e(ze,OSo),e(ze,fv),e(fv,VSo),e(fv,_de),e(_de,XSo),e(fv,zSo),e(fv,bde),e(bde,QSo),e(ze,WSo),e(ze,Fde),e(Fde,HSo),e(ze,USo),g(o6,ze,null),b(c,sRe,_),b(c,Ed,_),e(Ed,gv),e(gv,vde),g(r6,vde,null),e(Ed,JSo),e(Ed,Tde),e(Tde,YSo),b(c,lRe,_),b(c,nr,_),g(t6,nr,null),e(nr,KSo),e(nr,Cd),e(Cd,ZSo),e(Cd,Cj),e(Cj,eRo),e(Cd,oRo),e(Cd,wj),e(wj,rRo),e(Cd,tRo),e(nr,aRo),e(nr,a6),e(a6,nRo),e(a6,Mde),e(Mde,sRo),e(a6,lRo),e(nr,iRo),e(nr,Zr),g(n6,Zr,null),e(Zr,dRo),e(Zr,Ede),e(Ede,cRo),e(Zr,mRo),e(Zr,wd),e(wd,fRo),e(wd,Cde),e(Cde,gRo),e(wd,hRo),e(wd,Aj),e(Aj,uRo),e(wd,pRo),e(Zr,_Ro),e(Zr,wde),e(wde,bRo),e(Zr,FRo),g(s6,Zr,null),e(nr,vRo),e(nr,Qe),g(l6,Qe,null),e(Qe,TRo),e(Qe,Ade),e(Ade,MRo),e(Qe,ERo),e(Qe,Za),e(Za,CRo),e(Za,yde),e(yde,wRo),e(Za,ARo),e(Za,Lde),e(Lde,yRo),e(Za,LRo),e(Za,xde),e(xde,xRo),e(Za,kRo),e(Qe,SRo),e(Qe,R),e(R,hv),e(hv,kde),e(kde,RRo),e(hv,BRo),e(hv,yj),e(yj,PRo),e(hv,$Ro),e(R,IRo),e(R,uv),e(uv,Sde),e(Sde,qRo),e(uv,NRo),e(uv,Lj),e(Lj,jRo),e(uv,DRo),e(R,GRo),e(R,pv),e(pv,Rde),e(Rde,ORo),e(pv,VRo),e(pv,xj),e(xj,XRo),e(pv,zRo),e(R,QRo),e(R,_v),e(_v,Bde),e(Bde,WRo),e(_v,HRo),e(_v,kj),e(kj,URo),e(_v,JRo),e(R,YRo),e(R,bv),e(bv,Pde),e(Pde,KRo),e(bv,ZRo),e(bv,Sj),e(Sj,eBo),e(bv,oBo),e(R,rBo),e(R,Fv),e(Fv,$de),e($de,tBo),e(Fv,aBo),e(Fv,Rj),e(Rj,nBo),e(Fv,sBo),e(R,lBo),e(R,vv),e(vv,Ide),e(Ide,iBo),e(vv,dBo),e(vv,Bj),e(Bj,cBo),e(vv,mBo),e(R,fBo),e(R,Tv),e(Tv,qde),e(qde,gBo),e(Tv,hBo),e(Tv,Pj),e(Pj,uBo),e(Tv,pBo),e(R,_Bo),e(R,Mv),e(Mv,Nde),e(Nde,bBo),e(Mv,FBo),e(Mv,$j),e($j,vBo),e(Mv,TBo),e(R,MBo),e(R,Ev),e(Ev,jde),e(jde,EBo),e(Ev,CBo),e(Ev,Ij),e(Ij,wBo),e(Ev,ABo),e(R,yBo),e(R,Cv),e(Cv,Dde),e(Dde,LBo),e(Cv,xBo),e(Cv,qj),e(qj,kBo),e(Cv,SBo),e(R,RBo),e(R,wv),e(wv,Gde),e(Gde,BBo),e(wv,PBo),e(wv,Nj),e(Nj,$Bo),e(wv,IBo),e(R,qBo),e(R,Av),e(Av,Ode),e(Ode,NBo),e(Av,jBo),e(Av,jj),e(jj,DBo),e(Av,GBo),e(R,OBo),e(R,yv),e(yv,Vde),e(Vde,VBo),e(yv,XBo),e(yv,Dj),e(Dj,zBo),e(yv,QBo),e(R,WBo),e(R,Lv),e(Lv,Xde),e(Xde,HBo),e(Lv,UBo),e(Lv,Gj),e(Gj,JBo),e(Lv,YBo),e(R,KBo),e(R,xv),e(xv,zde),e(zde,ZBo),e(xv,ePo),e(xv,Oj),e(Oj,oPo),e(xv,rPo),e(R,tPo),e(R,kv),e(kv,Qde),e(Qde,aPo),e(kv,nPo),e(kv,Vj),e(Vj,sPo),e(kv,lPo),e(R,iPo),e(R,Sv),e(Sv,Wde),e(Wde,dPo),e(Sv,cPo),e(Sv,Xj),e(Xj,mPo),e(Sv,fPo),e(R,gPo),e(R,Rv),e(Rv,Hde),e(Hde,hPo),e(Rv,uPo),e(Rv,zj),e(zj,pPo),e(Rv,_Po),e(R,bPo),e(R,Bv),e(Bv,Ude),e(Ude,FPo),e(Bv,vPo),e(Bv,Qj),e(Qj,TPo),e(Bv,MPo),e(R,EPo),e(R,Pv),e(Pv,Jde),e(Jde,CPo),e(Pv,wPo),e(Pv,Wj),e(Wj,APo),e(Pv,yPo),e(R,LPo),e(R,$v),e($v,Yde),e(Yde,xPo),e($v,kPo),e($v,Hj),e(Hj,SPo),e($v,RPo),e(R,BPo),e(R,Iv),e(Iv,Kde),e(Kde,PPo),e(Iv,$Po),e(Iv,Uj),e(Uj,IPo),e(Iv,qPo),e(R,NPo),e(R,qv),e(qv,Zde),e(Zde,jPo),e(qv,DPo),e(qv,Jj),e(Jj,GPo),e(qv,OPo),e(R,VPo),e(R,Nv),e(Nv,ece),e(ece,XPo),e(Nv,zPo),e(Nv,Yj),e(Yj,QPo),e(Nv,WPo),e(R,HPo),e(R,jv),e(jv,oce),e(oce,UPo),e(jv,JPo),e(jv,Kj),e(Kj,YPo),e(jv,KPo),e(R,ZPo),e(R,Dv),e(Dv,rce),e(rce,e$o),e(Dv,o$o),e(Dv,Zj),e(Zj,r$o),e(Dv,t$o),e(R,a$o),e(R,Gv),e(Gv,tce),e(tce,n$o),e(Gv,s$o),e(Gv,eD),e(eD,l$o),e(Gv,i$o),e(R,d$o),e(R,Ov),e(Ov,ace),e(ace,c$o),e(Ov,m$o),e(Ov,oD),e(oD,f$o),e(Ov,g$o),e(R,h$o),e(R,Vv),e(Vv,nce),e(nce,u$o),e(Vv,p$o),e(Vv,rD),e(rD,_$o),e(Vv,b$o),e(R,F$o),e(R,Xv),e(Xv,sce),e(sce,v$o),e(Xv,T$o),e(Xv,tD),e(tD,M$o),e(Xv,E$o),e(R,C$o),e(R,zv),e(zv,lce),e(lce,w$o),e(zv,A$o),e(zv,aD),e(aD,y$o),e(zv,L$o),e(R,x$o),e(R,Qv),e(Qv,ice),e(ice,k$o),e(Qv,S$o),e(Qv,nD),e(nD,R$o),e(Qv,B$o),e(R,P$o),e(R,Wv),e(Wv,dce),e(dce,$$o),e(Wv,I$o),e(Wv,sD),e(sD,q$o),e(Wv,N$o),e(R,j$o),e(R,Hv),e(Hv,cce),e(cce,D$o),e(Hv,G$o),e(Hv,lD),e(lD,O$o),e(Hv,V$o),e(R,X$o),e(R,Uv),e(Uv,mce),e(mce,z$o),e(Uv,Q$o),e(Uv,iD),e(iD,W$o),e(Uv,H$o),e(R,U$o),e(R,Jv),e(Jv,fce),e(fce,J$o),e(Jv,Y$o),e(Jv,dD),e(dD,K$o),e(Jv,Z$o),e(R,eIo),e(R,Yv),e(Yv,gce),e(gce,oIo),e(Yv,rIo),e(Yv,cD),e(cD,tIo),e(Yv,aIo),e(R,nIo),e(R,Kv),e(Kv,hce),e(hce,sIo),e(Kv,lIo),e(Kv,mD),e(mD,iIo),e(Kv,dIo),e(Qe,cIo),e(Qe,Zv),e(Zv,mIo),e(Zv,uce),e(uce,fIo),e(Zv,gIo),e(Zv,pce),e(pce,hIo),e(Qe,uIo),e(Qe,_ce),e(_ce,pIo),e(Qe,_Io),g(i6,Qe,null),b(c,iRe,_),b(c,Ad,_),e(Ad,eT),e(eT,bce),g(d6,bce,null),e(Ad,bIo),e(Ad,Fce),e(Fce,FIo),b(c,dRe,_),b(c,sr,_),g(c6,sr,null),e(sr,vIo),e(sr,yd),e(yd,TIo),e(yd,fD),e(fD,MIo),e(yd,EIo),e(yd,gD),e(gD,CIo),e(yd,wIo),e(sr,AIo),e(sr,m6),e(m6,yIo),e(m6,vce),e(vce,LIo),e(m6,xIo),e(sr,kIo),e(sr,et),g(f6,et,null),e(et,SIo),e(et,Tce),e(Tce,RIo),e(et,BIo),e(et,Ld),e(Ld,PIo),e(Ld,Mce),e(Mce,$Io),e(Ld,IIo),e(Ld,hD),e(hD,qIo),e(Ld,NIo),e(et,jIo),e(et,Ece),e(Ece,DIo),e(et,GIo),g(g6,et,null),e(sr,OIo),e(sr,We),g(h6,We,null),e(We,VIo),e(We,Cce),e(Cce,XIo),e(We,zIo),e(We,en),e(en,QIo),e(en,wce),e(wce,WIo),e(en,HIo),e(en,Ace),e(Ace,UIo),e(en,JIo),e(en,yce),e(yce,YIo),e(en,KIo),e(We,ZIo),e(We,Lce),e(Lce,oT),e(oT,xce),e(xce,eqo),e(oT,oqo),e(oT,uD),e(uD,rqo),e(oT,tqo),e(We,aqo),e(We,rT),e(rT,nqo),e(rT,kce),e(kce,sqo),e(rT,lqo),e(rT,Sce),e(Sce,iqo),e(We,dqo),e(We,Rce),e(Rce,cqo),e(We,mqo),g(u6,We,null),b(c,cRe,_),b(c,xd,_),e(xd,tT),e(tT,Bce),g(p6,Bce,null),e(xd,fqo),e(xd,Pce),e(Pce,gqo),b(c,mRe,_),b(c,lr,_),g(_6,lr,null),e(lr,hqo),e(lr,kd),e(kd,uqo),e(kd,pD),e(pD,pqo),e(kd,_qo),e(kd,_D),e(_D,bqo),e(kd,Fqo),e(lr,vqo),e(lr,b6),e(b6,Tqo),e(b6,$ce),e($ce,Mqo),e(b6,Eqo),e(lr,Cqo),e(lr,ot),g(F6,ot,null),e(ot,wqo),e(ot,Ice),e(Ice,Aqo),e(ot,yqo),e(ot,Sd),e(Sd,Lqo),e(Sd,qce),e(qce,xqo),e(Sd,kqo),e(Sd,bD),e(bD,Sqo),e(Sd,Rqo),e(ot,Bqo),e(ot,Nce),e(Nce,Pqo),e(ot,$qo),g(v6,ot,null),e(lr,Iqo),e(lr,He),g(T6,He,null),e(He,qqo),e(He,jce),e(jce,Nqo),e(He,jqo),e(He,on),e(on,Dqo),e(on,Dce),e(Dce,Gqo),e(on,Oqo),e(on,Gce),e(Gce,Vqo),e(on,Xqo),e(on,Oce),e(Oce,zqo),e(on,Qqo),e(He,Wqo),e(He,ge),e(ge,aT),e(aT,Vce),e(Vce,Hqo),e(aT,Uqo),e(aT,FD),e(FD,Jqo),e(aT,Yqo),e(ge,Kqo),e(ge,nT),e(nT,Xce),e(Xce,Zqo),e(nT,eNo),e(nT,vD),e(vD,oNo),e(nT,rNo),e(ge,tNo),e(ge,Ds),e(Ds,zce),e(zce,aNo),e(Ds,nNo),e(Ds,TD),e(TD,sNo),e(Ds,lNo),e(Ds,MD),e(MD,iNo),e(Ds,dNo),e(ge,cNo),e(ge,sT),e(sT,Qce),e(Qce,mNo),e(sT,fNo),e(sT,ED),e(ED,gNo),e(sT,hNo),e(ge,uNo),e(ge,fa),e(fa,Wce),e(Wce,pNo),e(fa,_No),e(fa,CD),e(CD,bNo),e(fa,FNo),e(fa,wD),e(wD,vNo),e(fa,TNo),e(fa,AD),e(AD,MNo),e(fa,ENo),e(ge,CNo),e(ge,lT),e(lT,Hce),e(Hce,wNo),e(lT,ANo),e(lT,yD),e(yD,yNo),e(lT,LNo),e(ge,xNo),e(ge,iT),e(iT,Uce),e(Uce,kNo),e(iT,SNo),e(iT,LD),e(LD,RNo),e(iT,BNo),e(ge,PNo),e(ge,dT),e(dT,Jce),e(Jce,$No),e(dT,INo),e(dT,xD),e(xD,qNo),e(dT,NNo),e(ge,jNo),e(ge,cT),e(cT,Yce),e(Yce,DNo),e(cT,GNo),e(cT,kD),e(kD,ONo),e(cT,VNo),e(ge,XNo),e(ge,mT),e(mT,Kce),e(Kce,zNo),e(mT,QNo),e(mT,SD),e(SD,WNo),e(mT,HNo),e(ge,UNo),e(ge,fT),e(fT,Zce),e(Zce,JNo),e(fT,YNo),e(fT,RD),e(RD,KNo),e(fT,ZNo),e(He,ejo),e(He,gT),e(gT,ojo),e(gT,eme),e(eme,rjo),e(gT,tjo),e(gT,ome),e(ome,ajo),e(He,njo),e(He,rme),e(rme,sjo),e(He,ljo),g(M6,He,null),b(c,fRe,_),b(c,Rd,_),e(Rd,hT),e(hT,tme),g(E6,tme,null),e(Rd,ijo),e(Rd,ame),e(ame,djo),b(c,gRe,_),b(c,ir,_),g(C6,ir,null),e(ir,cjo),e(ir,Bd),e(Bd,mjo),e(Bd,BD),e(BD,fjo),e(Bd,gjo),e(Bd,PD),e(PD,hjo),e(Bd,ujo),e(ir,pjo),e(ir,w6),e(w6,_jo),e(w6,nme),e(nme,bjo),e(w6,Fjo),e(ir,vjo),e(ir,rt),g(A6,rt,null),e(rt,Tjo),e(rt,sme),e(sme,Mjo),e(rt,Ejo),e(rt,Pd),e(Pd,Cjo),e(Pd,lme),e(lme,wjo),e(Pd,Ajo),e(Pd,$D),e($D,yjo),e(Pd,Ljo),e(rt,xjo),e(rt,ime),e(ime,kjo),e(rt,Sjo),g(y6,rt,null),e(ir,Rjo),e(ir,Ue),g(L6,Ue,null),e(Ue,Bjo),e(Ue,dme),e(dme,Pjo),e(Ue,$jo),e(Ue,rn),e(rn,Ijo),e(rn,cme),e(cme,qjo),e(rn,Njo),e(rn,mme),e(mme,jjo),e(rn,Djo),e(rn,fme),e(fme,Gjo),e(rn,Ojo),e(Ue,Vjo),e(Ue,gme),e(gme,uT),e(uT,hme),e(hme,Xjo),e(uT,zjo),e(uT,ID),e(ID,Qjo),e(uT,Wjo),e(Ue,Hjo),e(Ue,pT),e(pT,Ujo),e(pT,ume),e(ume,Jjo),e(pT,Yjo),e(pT,pme),e(pme,Kjo),e(Ue,Zjo),e(Ue,_me),e(_me,eDo),e(Ue,oDo),g(x6,Ue,null),b(c,hRe,_),b(c,$d,_),e($d,_T),e(_T,bme),g(k6,bme,null),e($d,rDo),e($d,Fme),e(Fme,tDo),b(c,uRe,_),b(c,dr,_),g(S6,dr,null),e(dr,aDo),e(dr,Id),e(Id,nDo),e(Id,qD),e(qD,sDo),e(Id,lDo),e(Id,ND),e(ND,iDo),e(Id,dDo),e(dr,cDo),e(dr,R6),e(R6,mDo),e(R6,vme),e(vme,fDo),e(R6,gDo),e(dr,hDo),e(dr,tt),g(B6,tt,null),e(tt,uDo),e(tt,Tme),e(Tme,pDo),e(tt,_Do),e(tt,qd),e(qd,bDo),e(qd,Mme),e(Mme,FDo),e(qd,vDo),e(qd,jD),e(jD,TDo),e(qd,MDo),e(tt,EDo),e(tt,Eme),e(Eme,CDo),e(tt,wDo),g(P6,tt,null),e(dr,ADo),e(dr,Je),g($6,Je,null),e(Je,yDo),e(Je,Cme),e(Cme,LDo),e(Je,xDo),e(Je,tn),e(tn,kDo),e(tn,wme),e(wme,SDo),e(tn,RDo),e(tn,Ame),e(Ame,BDo),e(tn,PDo),e(tn,yme),e(yme,$Do),e(tn,IDo),e(Je,qDo),e(Je,Se),e(Se,bT),e(bT,Lme),e(Lme,NDo),e(bT,jDo),e(bT,DD),e(DD,DDo),e(bT,GDo),e(Se,ODo),e(Se,FT),e(FT,xme),e(xme,VDo),e(FT,XDo),e(FT,GD),e(GD,zDo),e(FT,QDo),e(Se,WDo),e(Se,vT),e(vT,kme),e(kme,HDo),e(vT,UDo),e(vT,OD),e(OD,JDo),e(vT,YDo),e(Se,KDo),e(Se,TT),e(TT,Sme),e(Sme,ZDo),e(TT,eGo),e(TT,VD),e(VD,oGo),e(TT,rGo),e(Se,tGo),e(Se,MT),e(MT,Rme),e(Rme,aGo),e(MT,nGo),e(MT,XD),e(XD,sGo),e(MT,lGo),e(Se,iGo),e(Se,ET),e(ET,Bme),e(Bme,dGo),e(ET,cGo),e(ET,zD),e(zD,mGo),e(ET,fGo),e(Se,gGo),e(Se,CT),e(CT,Pme),e(Pme,hGo),e(CT,uGo),e(CT,QD),e(QD,pGo),e(CT,_Go),e(Se,bGo),e(Se,wT),e(wT,$me),e($me,FGo),e(wT,vGo),e(wT,WD),e(WD,TGo),e(wT,MGo),e(Je,EGo),e(Je,AT),e(AT,CGo),e(AT,Ime),e(Ime,wGo),e(AT,AGo),e(AT,qme),e(qme,yGo),e(Je,LGo),e(Je,Nme),e(Nme,xGo),e(Je,kGo),g(I6,Je,null),b(c,pRe,_),b(c,Nd,_),e(Nd,yT),e(yT,jme),g(q6,jme,null),e(Nd,SGo),e(Nd,Dme),e(Dme,RGo),b(c,_Re,_),b(c,cr,_),g(N6,cr,null),e(cr,BGo),e(cr,jd),e(jd,PGo),e(jd,HD),e(HD,$Go),e(jd,IGo),e(jd,UD),e(UD,qGo),e(jd,NGo),e(cr,jGo),e(cr,j6),e(j6,DGo),e(j6,Gme),e(Gme,GGo),e(j6,OGo),e(cr,VGo),e(cr,at),g(D6,at,null),e(at,XGo),e(at,Ome),e(Ome,zGo),e(at,QGo),e(at,Dd),e(Dd,WGo),e(Dd,Vme),e(Vme,HGo),e(Dd,UGo),e(Dd,JD),e(JD,JGo),e(Dd,YGo),e(at,KGo),e(at,Xme),e(Xme,ZGo),e(at,eOo),g(G6,at,null),e(cr,oOo),e(cr,Ye),g(O6,Ye,null),e(Ye,rOo),e(Ye,zme),e(zme,tOo),e(Ye,aOo),e(Ye,an),e(an,nOo),e(an,Qme),e(Qme,sOo),e(an,lOo),e(an,Wme),e(Wme,iOo),e(an,dOo),e(an,Hme),e(Hme,cOo),e(an,mOo),e(Ye,fOo),e(Ye,nn),e(nn,LT),e(LT,Ume),e(Ume,gOo),e(LT,hOo),e(LT,YD),e(YD,uOo),e(LT,pOo),e(nn,_Oo),e(nn,xT),e(xT,Jme),e(Jme,bOo),e(xT,FOo),e(xT,KD),e(KD,vOo),e(xT,TOo),e(nn,MOo),e(nn,kT),e(kT,Yme),e(Yme,EOo),e(kT,COo),e(kT,ZD),e(ZD,wOo),e(kT,AOo),e(nn,yOo),e(nn,ST),e(ST,Kme),e(Kme,LOo),e(ST,xOo),e(ST,eG),e(eG,kOo),e(ST,SOo),e(Ye,ROo),e(Ye,RT),e(RT,BOo),e(RT,Zme),e(Zme,POo),e(RT,$Oo),e(RT,efe),e(efe,IOo),e(Ye,qOo),e(Ye,ofe),e(ofe,NOo),e(Ye,jOo),g(V6,Ye,null),b(c,bRe,_),b(c,Gd,_),e(Gd,BT),e(BT,rfe),g(X6,rfe,null),e(Gd,DOo),e(Gd,tfe),e(tfe,GOo),b(c,FRe,_),b(c,mr,_),g(z6,mr,null),e(mr,OOo),e(mr,Od),e(Od,VOo),e(Od,oG),e(oG,XOo),e(Od,zOo),e(Od,rG),e(rG,QOo),e(Od,WOo),e(mr,HOo),e(mr,Q6),e(Q6,UOo),e(Q6,afe),e(afe,JOo),e(Q6,YOo),e(mr,KOo),e(mr,nt),g(W6,nt,null),e(nt,ZOo),e(nt,nfe),e(nfe,eVo),e(nt,oVo),e(nt,Vd),e(Vd,rVo),e(Vd,sfe),e(sfe,tVo),e(Vd,aVo),e(Vd,tG),e(tG,nVo),e(Vd,sVo),e(nt,lVo),e(nt,lfe),e(lfe,iVo),e(nt,dVo),g(H6,nt,null),e(mr,cVo),e(mr,Ke),g(U6,Ke,null),e(Ke,mVo),e(Ke,ife),e(ife,fVo),e(Ke,gVo),e(Ke,sn),e(sn,hVo),e(sn,dfe),e(dfe,uVo),e(sn,pVo),e(sn,cfe),e(cfe,_Vo),e(sn,bVo),e(sn,mfe),e(mfe,FVo),e(sn,vVo),e(Ke,TVo),e(Ke,Re),e(Re,PT),e(PT,ffe),e(ffe,MVo),e(PT,EVo),e(PT,aG),e(aG,CVo),e(PT,wVo),e(Re,AVo),e(Re,$T),e($T,gfe),e(gfe,yVo),e($T,LVo),e($T,nG),e(nG,xVo),e($T,kVo),e(Re,SVo),e(Re,IT),e(IT,hfe),e(hfe,RVo),e(IT,BVo),e(IT,sG),e(sG,PVo),e(IT,$Vo),e(Re,IVo),e(Re,qT),e(qT,ufe),e(ufe,qVo),e(qT,NVo),e(qT,lG),e(lG,jVo),e(qT,DVo),e(Re,GVo),e(Re,NT),e(NT,pfe),e(pfe,OVo),e(NT,VVo),e(NT,iG),e(iG,XVo),e(NT,zVo),e(Re,QVo),e(Re,jT),e(jT,_fe),e(_fe,WVo),e(jT,HVo),e(jT,dG),e(dG,UVo),e(jT,JVo),e(Re,YVo),e(Re,DT),e(DT,bfe),e(bfe,KVo),e(DT,ZVo),e(DT,cG),e(cG,eXo),e(DT,oXo),e(Re,rXo),e(Re,GT),e(GT,Ffe),e(Ffe,tXo),e(GT,aXo),e(GT,mG),e(mG,nXo),e(GT,sXo),e(Ke,lXo),e(Ke,OT),e(OT,iXo),e(OT,vfe),e(vfe,dXo),e(OT,cXo),e(OT,Tfe),e(Tfe,mXo),e(Ke,fXo),e(Ke,Mfe),e(Mfe,gXo),e(Ke,hXo),g(J6,Ke,null),b(c,vRe,_),b(c,Xd,_),e(Xd,VT),e(VT,Efe),g(Y6,Efe,null),e(Xd,uXo),e(Xd,Cfe),e(Cfe,pXo),b(c,TRe,_),b(c,fr,_),g(K6,fr,null),e(fr,_Xo),e(fr,zd),e(zd,bXo),e(zd,fG),e(fG,FXo),e(zd,vXo),e(zd,gG),e(gG,TXo),e(zd,MXo),e(fr,EXo),e(fr,Z6),e(Z6,CXo),e(Z6,wfe),e(wfe,wXo),e(Z6,AXo),e(fr,yXo),e(fr,st),g(e0,st,null),e(st,LXo),e(st,Afe),e(Afe,xXo),e(st,kXo),e(st,Qd),e(Qd,SXo),e(Qd,yfe),e(yfe,RXo),e(Qd,BXo),e(Qd,hG),e(hG,PXo),e(Qd,$Xo),e(st,IXo),e(st,Lfe),e(Lfe,qXo),e(st,NXo),g(o0,st,null),e(fr,jXo),e(fr,Ze),g(r0,Ze,null),e(Ze,DXo),e(Ze,xfe),e(xfe,GXo),e(Ze,OXo),e(Ze,ln),e(ln,VXo),e(ln,kfe),e(kfe,XXo),e(ln,zXo),e(ln,Sfe),e(Sfe,QXo),e(ln,WXo),e(ln,Rfe),e(Rfe,HXo),e(ln,UXo),e(Ze,JXo),e(Ze,t0),e(t0,XT),e(XT,Bfe),e(Bfe,YXo),e(XT,KXo),e(XT,uG),e(uG,ZXo),e(XT,ezo),e(t0,ozo),e(t0,zT),e(zT,Pfe),e(Pfe,rzo),e(zT,tzo),e(zT,pG),e(pG,azo),e(zT,nzo),e(Ze,szo),e(Ze,QT),e(QT,lzo),e(QT,$fe),e($fe,izo),e(QT,dzo),e(QT,Ife),e(Ife,czo),e(Ze,mzo),e(Ze,qfe),e(qfe,fzo),e(Ze,gzo),g(a0,Ze,null),b(c,MRe,_),b(c,Wd,_),e(Wd,WT),e(WT,Nfe),g(n0,Nfe,null),e(Wd,hzo),e(Wd,jfe),e(jfe,uzo),b(c,ERe,_),b(c,gr,_),g(s0,gr,null),e(gr,pzo),e(gr,Hd),e(Hd,_zo),e(Hd,_G),e(_G,bzo),e(Hd,Fzo),e(Hd,bG),e(bG,vzo),e(Hd,Tzo),e(gr,Mzo),e(gr,l0),e(l0,Ezo),e(l0,Dfe),e(Dfe,Czo),e(l0,wzo),e(gr,Azo),e(gr,lt),g(i0,lt,null),e(lt,yzo),e(lt,Gfe),e(Gfe,Lzo),e(lt,xzo),e(lt,Ud),e(Ud,kzo),e(Ud,Ofe),e(Ofe,Szo),e(Ud,Rzo),e(Ud,FG),e(FG,Bzo),e(Ud,Pzo),e(lt,$zo),e(lt,Vfe),e(Vfe,Izo),e(lt,qzo),g(d0,lt,null),e(gr,Nzo),e(gr,eo),g(c0,eo,null),e(eo,jzo),e(eo,Xfe),e(Xfe,Dzo),e(eo,Gzo),e(eo,dn),e(dn,Ozo),e(dn,zfe),e(zfe,Vzo),e(dn,Xzo),e(dn,Qfe),e(Qfe,zzo),e(dn,Qzo),e(dn,Wfe),e(Wfe,Wzo),e(dn,Hzo),e(eo,Uzo),e(eo,cn),e(cn,HT),e(HT,Hfe),e(Hfe,Jzo),e(HT,Yzo),e(HT,vG),e(vG,Kzo),e(HT,Zzo),e(cn,eQo),e(cn,UT),e(UT,Ufe),e(Ufe,oQo),e(UT,rQo),e(UT,TG),e(TG,tQo),e(UT,aQo),e(cn,nQo),e(cn,JT),e(JT,Jfe),e(Jfe,sQo),e(JT,lQo),e(JT,MG),e(MG,iQo),e(JT,dQo),e(cn,cQo),e(cn,YT),e(YT,Yfe),e(Yfe,mQo),e(YT,fQo),e(YT,EG),e(EG,gQo),e(YT,hQo),e(eo,uQo),e(eo,KT),e(KT,pQo),e(KT,Kfe),e(Kfe,_Qo),e(KT,bQo),e(KT,Zfe),e(Zfe,FQo),e(eo,vQo),e(eo,ege),e(ege,TQo),e(eo,MQo),g(m0,eo,null),b(c,CRe,_),b(c,Jd,_),e(Jd,ZT),e(ZT,oge),g(f0,oge,null),e(Jd,EQo),e(Jd,rge),e(rge,CQo),b(c,wRe,_),b(c,hr,_),g(g0,hr,null),e(hr,wQo),e(hr,Yd),e(Yd,AQo),e(Yd,CG),e(CG,yQo),e(Yd,LQo),e(Yd,wG),e(wG,xQo),e(Yd,kQo),e(hr,SQo),e(hr,h0),e(h0,RQo),e(h0,tge),e(tge,BQo),e(h0,PQo),e(hr,$Qo),e(hr,it),g(u0,it,null),e(it,IQo),e(it,age),e(age,qQo),e(it,NQo),e(it,Kd),e(Kd,jQo),e(Kd,nge),e(nge,DQo),e(Kd,GQo),e(Kd,AG),e(AG,OQo),e(Kd,VQo),e(it,XQo),e(it,sge),e(sge,zQo),e(it,QQo),g(p0,it,null),e(hr,WQo),e(hr,oo),g(_0,oo,null),e(oo,HQo),e(oo,lge),e(lge,UQo),e(oo,JQo),e(oo,mn),e(mn,YQo),e(mn,ige),e(ige,KQo),e(mn,ZQo),e(mn,dge),e(dge,eWo),e(mn,oWo),e(mn,cge),e(cge,rWo),e(mn,tWo),e(oo,aWo),e(oo,Zd),e(Zd,e1),e(e1,mge),e(mge,nWo),e(e1,sWo),e(e1,yG),e(yG,lWo),e(e1,iWo),e(Zd,dWo),e(Zd,o1),e(o1,fge),e(fge,cWo),e(o1,mWo),e(o1,LG),e(LG,fWo),e(o1,gWo),e(Zd,hWo),e(Zd,r1),e(r1,gge),e(gge,uWo),e(r1,pWo),e(r1,xG),e(xG,_Wo),e(r1,bWo),e(oo,FWo),e(oo,t1),e(t1,vWo),e(t1,hge),e(hge,TWo),e(t1,MWo),e(t1,uge),e(uge,EWo),e(oo,CWo),e(oo,pge),e(pge,wWo),e(oo,AWo),g(b0,oo,null),b(c,ARe,_),b(c,ec,_),e(ec,a1),e(a1,_ge),g(F0,_ge,null),e(ec,yWo),e(ec,bge),e(bge,LWo),b(c,yRe,_),b(c,ur,_),g(v0,ur,null),e(ur,xWo),e(ur,oc),e(oc,kWo),e(oc,kG),e(kG,SWo),e(oc,RWo),e(oc,SG),e(SG,BWo),e(oc,PWo),e(ur,$Wo),e(ur,T0),e(T0,IWo),e(T0,Fge),e(Fge,qWo),e(T0,NWo),e(ur,jWo),e(ur,dt),g(M0,dt,null),e(dt,DWo),e(dt,vge),e(vge,GWo),e(dt,OWo),e(dt,rc),e(rc,VWo),e(rc,Tge),e(Tge,XWo),e(rc,zWo),e(rc,RG),e(RG,QWo),e(rc,WWo),e(dt,HWo),e(dt,Mge),e(Mge,UWo),e(dt,JWo),g(E0,dt,null),e(ur,YWo),e(ur,ro),g(C0,ro,null),e(ro,KWo),e(ro,Ege),e(Ege,ZWo),e(ro,eHo),e(ro,fn),e(fn,oHo),e(fn,Cge),e(Cge,rHo),e(fn,tHo),e(fn,wge),e(wge,aHo),e(fn,nHo),e(fn,Age),e(Age,sHo),e(fn,lHo),e(ro,iHo),e(ro,yge),e(yge,n1),e(n1,Lge),e(Lge,dHo),e(n1,cHo),e(n1,BG),e(BG,mHo),e(n1,fHo),e(ro,gHo),e(ro,s1),e(s1,hHo),e(s1,xge),e(xge,uHo),e(s1,pHo),e(s1,kge),e(kge,_Ho),e(ro,bHo),e(ro,Sge),e(Sge,FHo),e(ro,vHo),g(w0,ro,null),b(c,LRe,_),b(c,tc,_),e(tc,l1),e(l1,Rge),g(A0,Rge,null),e(tc,THo),e(tc,Bge),e(Bge,MHo),b(c,xRe,_),b(c,pr,_),g(y0,pr,null),e(pr,EHo),e(pr,ac),e(ac,CHo),e(ac,PG),e(PG,wHo),e(ac,AHo),e(ac,$G),e($G,yHo),e(ac,LHo),e(pr,xHo),e(pr,L0),e(L0,kHo),e(L0,Pge),e(Pge,SHo),e(L0,RHo),e(pr,BHo),e(pr,ct),g(x0,ct,null),e(ct,PHo),e(ct,$ge),e($ge,$Ho),e(ct,IHo),e(ct,nc),e(nc,qHo),e(nc,Ige),e(Ige,NHo),e(nc,jHo),e(nc,IG),e(IG,DHo),e(nc,GHo),e(ct,OHo),e(ct,qge),e(qge,VHo),e(ct,XHo),g(k0,ct,null),e(pr,zHo),e(pr,to),g(S0,to,null),e(to,QHo),e(to,Nge),e(Nge,WHo),e(to,HHo),e(to,gn),e(gn,UHo),e(gn,jge),e(jge,JHo),e(gn,YHo),e(gn,Dge),e(Dge,KHo),e(gn,ZHo),e(gn,Gge),e(Gge,eUo),e(gn,oUo),e(to,rUo),e(to,Oge),e(Oge,i1),e(i1,Vge),e(Vge,tUo),e(i1,aUo),e(i1,qG),e(qG,nUo),e(i1,sUo),e(to,lUo),e(to,d1),e(d1,iUo),e(d1,Xge),e(Xge,dUo),e(d1,cUo),e(d1,zge),e(zge,mUo),e(to,fUo),e(to,Qge),e(Qge,gUo),e(to,hUo),g(R0,to,null),b(c,kRe,_),b(c,sc,_),e(sc,c1),e(c1,Wge),g(B0,Wge,null),e(sc,uUo),e(sc,Hge),e(Hge,pUo),b(c,SRe,_),b(c,_r,_),g(P0,_r,null),e(_r,_Uo),e(_r,lc),e(lc,bUo),e(lc,NG),e(NG,FUo),e(lc,vUo),e(lc,jG),e(jG,TUo),e(lc,MUo),e(_r,EUo),e(_r,$0),e($0,CUo),e($0,Uge),e(Uge,wUo),e($0,AUo),e(_r,yUo),e(_r,mt),g(I0,mt,null),e(mt,LUo),e(mt,Jge),e(Jge,xUo),e(mt,kUo),e(mt,ic),e(ic,SUo),e(ic,Yge),e(Yge,RUo),e(ic,BUo),e(ic,DG),e(DG,PUo),e(ic,$Uo),e(mt,IUo),e(mt,Kge),e(Kge,qUo),e(mt,NUo),g(q0,mt,null),e(_r,jUo),e(_r,ao),g(N0,ao,null),e(ao,DUo),e(ao,Zge),e(Zge,GUo),e(ao,OUo),e(ao,hn),e(hn,VUo),e(hn,ehe),e(ehe,XUo),e(hn,zUo),e(hn,ohe),e(ohe,QUo),e(hn,WUo),e(hn,rhe),e(rhe,HUo),e(hn,UUo),e(ao,JUo),e(ao,dc),e(dc,m1),e(m1,the),e(the,YUo),e(m1,KUo),e(m1,GG),e(GG,ZUo),e(m1,eJo),e(dc,oJo),e(dc,f1),e(f1,ahe),e(ahe,rJo),e(f1,tJo),e(f1,OG),e(OG,aJo),e(f1,nJo),e(dc,sJo),e(dc,g1),e(g1,nhe),e(nhe,lJo),e(g1,iJo),e(g1,VG),e(VG,dJo),e(g1,cJo),e(ao,mJo),e(ao,h1),e(h1,fJo),e(h1,she),e(she,gJo),e(h1,hJo),e(h1,lhe),e(lhe,uJo),e(ao,pJo),e(ao,ihe),e(ihe,_Jo),e(ao,bJo),g(j0,ao,null),b(c,RRe,_),b(c,cc,_),e(cc,u1),e(u1,dhe),g(D0,dhe,null),e(cc,FJo),e(cc,che),e(che,vJo),b(c,BRe,_),b(c,br,_),g(G0,br,null),e(br,TJo),e(br,mc),e(mc,MJo),e(mc,XG),e(XG,EJo),e(mc,CJo),e(mc,zG),e(zG,wJo),e(mc,AJo),e(br,yJo),e(br,O0),e(O0,LJo),e(O0,mhe),e(mhe,xJo),e(O0,kJo),e(br,SJo),e(br,ft),g(V0,ft,null),e(ft,RJo),e(ft,fhe),e(fhe,BJo),e(ft,PJo),e(ft,fc),e(fc,$Jo),e(fc,ghe),e(ghe,IJo),e(fc,qJo),e(fc,QG),e(QG,NJo),e(fc,jJo),e(ft,DJo),e(ft,hhe),e(hhe,GJo),e(ft,OJo),g(X0,ft,null),e(br,VJo),e(br,no),g(z0,no,null),e(no,XJo),e(no,uhe),e(uhe,zJo),e(no,QJo),e(no,un),e(un,WJo),e(un,phe),e(phe,HJo),e(un,UJo),e(un,_he),e(_he,JJo),e(un,YJo),e(un,bhe),e(bhe,KJo),e(un,ZJo),e(no,eYo),e(no,Fhe),e(Fhe,p1),e(p1,vhe),e(vhe,oYo),e(p1,rYo),e(p1,WG),e(WG,tYo),e(p1,aYo),e(no,nYo),e(no,_1),e(_1,sYo),e(_1,The),e(The,lYo),e(_1,iYo),e(_1,Mhe),e(Mhe,dYo),e(no,cYo),e(no,Ehe),e(Ehe,mYo),e(no,fYo),g(Q0,no,null),b(c,PRe,_),b(c,gc,_),e(gc,b1),e(b1,Che),g(W0,Che,null),e(gc,gYo),e(gc,whe),e(whe,hYo),b(c,$Re,_),b(c,Fr,_),g(H0,Fr,null),e(Fr,uYo),e(Fr,hc),e(hc,pYo),e(hc,HG),e(HG,_Yo),e(hc,bYo),e(hc,UG),e(UG,FYo),e(hc,vYo),e(Fr,TYo),e(Fr,U0),e(U0,MYo),e(U0,Ahe),e(Ahe,EYo),e(U0,CYo),e(Fr,wYo),e(Fr,gt),g(J0,gt,null),e(gt,AYo),e(gt,yhe),e(yhe,yYo),e(gt,LYo),e(gt,uc),e(uc,xYo),e(uc,Lhe),e(Lhe,kYo),e(uc,SYo),e(uc,JG),e(JG,RYo),e(uc,BYo),e(gt,PYo),e(gt,xhe),e(xhe,$Yo),e(gt,IYo),g(Y0,gt,null),e(Fr,qYo),e(Fr,ho),g(K0,ho,null),e(ho,NYo),e(ho,khe),e(khe,jYo),e(ho,DYo),e(ho,pn),e(pn,GYo),e(pn,She),e(She,OYo),e(pn,VYo),e(pn,Rhe),e(Rhe,XYo),e(pn,zYo),e(pn,Bhe),e(Bhe,QYo),e(pn,WYo),e(ho,HYo),e(ho,x),e(x,F1),e(F1,Phe),e(Phe,UYo),e(F1,JYo),e(F1,YG),e(YG,YYo),e(F1,KYo),e(x,ZYo),e(x,v1),e(v1,$he),e($he,eKo),e(v1,oKo),e(v1,KG),e(KG,rKo),e(v1,tKo),e(x,aKo),e(x,T1),e(T1,Ihe),e(Ihe,nKo),e(T1,sKo),e(T1,ZG),e(ZG,lKo),e(T1,iKo),e(x,dKo),e(x,M1),e(M1,qhe),e(qhe,cKo),e(M1,mKo),e(M1,eO),e(eO,fKo),e(M1,gKo),e(x,hKo),e(x,E1),e(E1,Nhe),e(Nhe,uKo),e(E1,pKo),e(E1,oO),e(oO,_Ko),e(E1,bKo),e(x,FKo),e(x,C1),e(C1,jhe),e(jhe,vKo),e(C1,TKo),e(C1,rO),e(rO,MKo),e(C1,EKo),e(x,CKo),e(x,w1),e(w1,Dhe),e(Dhe,wKo),e(w1,AKo),e(w1,tO),e(tO,yKo),e(w1,LKo),e(x,xKo),e(x,A1),e(A1,Ghe),e(Ghe,kKo),e(A1,SKo),e(A1,aO),e(aO,RKo),e(A1,BKo),e(x,PKo),e(x,y1),e(y1,Ohe),e(Ohe,$Ko),e(y1,IKo),e(y1,nO),e(nO,qKo),e(y1,NKo),e(x,jKo),e(x,L1),e(L1,Vhe),e(Vhe,DKo),e(L1,GKo),e(L1,sO),e(sO,OKo),e(L1,VKo),e(x,XKo),e(x,x1),e(x1,Xhe),e(Xhe,zKo),e(x1,QKo),e(x1,lO),e(lO,WKo),e(x1,HKo),e(x,UKo),e(x,k1),e(k1,zhe),e(zhe,JKo),e(k1,YKo),e(k1,iO),e(iO,KKo),e(k1,ZKo),e(x,eZo),e(x,S1),e(S1,Qhe),e(Qhe,oZo),e(S1,rZo),e(S1,dO),e(dO,tZo),e(S1,aZo),e(x,nZo),e(x,R1),e(R1,Whe),e(Whe,sZo),e(R1,lZo),e(R1,cO),e(cO,iZo),e(R1,dZo),e(x,cZo),e(x,B1),e(B1,Hhe),e(Hhe,mZo),e(B1,fZo),e(B1,mO),e(mO,gZo),e(B1,hZo),e(x,uZo),e(x,P1),e(P1,Uhe),e(Uhe,pZo),e(P1,_Zo),e(P1,fO),e(fO,bZo),e(P1,FZo),e(x,vZo),e(x,Gs),e(Gs,Jhe),e(Jhe,TZo),e(Gs,MZo),e(Gs,gO),e(gO,EZo),e(Gs,CZo),e(Gs,hO),e(hO,wZo),e(Gs,AZo),e(x,yZo),e(x,$1),e($1,Yhe),e(Yhe,LZo),e($1,xZo),e($1,uO),e(uO,kZo),e($1,SZo),e(x,RZo),e(x,I1),e(I1,Khe),e(Khe,BZo),e(I1,PZo),e(I1,pO),e(pO,$Zo),e(I1,IZo),e(x,qZo),e(x,q1),e(q1,Zhe),e(Zhe,NZo),e(q1,jZo),e(q1,_O),e(_O,DZo),e(q1,GZo),e(x,OZo),e(x,N1),e(N1,eue),e(eue,VZo),e(N1,XZo),e(N1,bO),e(bO,zZo),e(N1,QZo),e(x,WZo),e(x,j1),e(j1,oue),e(oue,HZo),e(j1,UZo),e(j1,FO),e(FO,JZo),e(j1,YZo),e(x,KZo),e(x,D1),e(D1,rue),e(rue,ZZo),e(D1,eer),e(D1,vO),e(vO,oer),e(D1,rer),e(x,ter),e(x,G1),e(G1,tue),e(tue,aer),e(G1,ner),e(G1,TO),e(TO,ser),e(G1,ler),e(x,ier),e(x,O1),e(O1,aue),e(aue,der),e(O1,cer),e(O1,MO),e(MO,mer),e(O1,fer),e(x,ger),e(x,V1),e(V1,nue),e(nue,her),e(V1,uer),e(V1,EO),e(EO,per),e(V1,_er),e(x,ber),e(x,X1),e(X1,sue),e(sue,Fer),e(X1,ver),e(X1,CO),e(CO,Ter),e(X1,Mer),e(x,Eer),e(x,z1),e(z1,lue),e(lue,Cer),e(z1,wer),e(z1,wO),e(wO,Aer),e(z1,yer),e(x,Ler),e(x,Q1),e(Q1,iue),e(iue,xer),e(Q1,ker),e(Q1,AO),e(AO,Ser),e(Q1,Rer),e(x,Ber),e(x,W1),e(W1,due),e(due,Per),e(W1,$er),e(W1,yO),e(yO,Ier),e(W1,qer),e(x,Ner),e(x,H1),e(H1,cue),e(cue,jer),e(H1,Der),e(H1,LO),e(LO,Ger),e(H1,Oer),e(x,Ver),e(x,U1),e(U1,mue),e(mue,Xer),e(U1,zer),e(U1,xO),e(xO,Qer),e(U1,Wer),e(x,Her),e(x,J1),e(J1,fue),e(fue,Uer),e(J1,Jer),e(J1,kO),e(kO,Yer),e(J1,Ker),e(x,Zer),e(x,Y1),e(Y1,gue),e(gue,eor),e(Y1,oor),e(Y1,SO),e(SO,ror),e(Y1,tor),e(x,aor),e(x,K1),e(K1,hue),e(hue,nor),e(K1,sor),e(K1,RO),e(RO,lor),e(K1,ior),e(x,dor),e(x,Z1),e(Z1,uue),e(uue,cor),e(Z1,mor),e(Z1,BO),e(BO,gor),e(Z1,hor),e(x,uor),e(x,eM),e(eM,pue),e(pue,por),e(eM,_or),e(eM,PO),e(PO,bor),e(eM,For),e(x,vor),e(x,oM),e(oM,_ue),e(_ue,Tor),e(oM,Mor),e(oM,$O),e($O,Eor),e(oM,Cor),e(x,wor),e(x,rM),e(rM,bue),e(bue,Aor),e(rM,yor),e(rM,IO),e(IO,Lor),e(rM,xor),e(x,kor),e(x,tM),e(tM,Fue),e(Fue,Sor),e(tM,Ror),e(tM,qO),e(qO,Bor),e(tM,Por),e(x,$or),e(x,aM),e(aM,vue),e(vue,Ior),e(aM,qor),e(aM,NO),e(NO,Nor),e(aM,jor),e(x,Dor),e(x,nM),e(nM,Tue),e(Tue,Gor),e(nM,Oor),e(nM,jO),e(jO,Vor),e(nM,Xor),e(x,zor),e(x,sM),e(sM,Mue),e(Mue,Qor),e(sM,Wor),e(sM,DO),e(DO,Hor),e(sM,Uor),e(ho,Jor),e(ho,Eue),e(Eue,Yor),e(ho,Kor),g(Z0,ho,null),b(c,IRe,_),b(c,pc,_),e(pc,lM),e(lM,Cue),g(ey,Cue,null),e(pc,Zor),e(pc,wue),e(wue,err),b(c,qRe,_),b(c,vr,_),g(oy,vr,null),e(vr,orr),e(vr,_c),e(_c,rrr),e(_c,GO),e(GO,trr),e(_c,arr),e(_c,OO),e(OO,nrr),e(_c,srr),e(vr,lrr),e(vr,ry),e(ry,irr),e(ry,Aue),e(Aue,drr),e(ry,crr),e(vr,mrr),e(vr,ht),g(ty,ht,null),e(ht,frr),e(ht,yue),e(yue,grr),e(ht,hrr),e(ht,bc),e(bc,urr),e(bc,Lue),e(Lue,prr),e(bc,_rr),e(bc,VO),e(VO,brr),e(bc,Frr),e(ht,vrr),e(ht,xue),e(xue,Trr),e(ht,Mrr),g(ay,ht,null),e(vr,Err),e(vr,uo),g(ny,uo,null),e(uo,Crr),e(uo,kue),e(kue,wrr),e(uo,Arr),e(uo,_n),e(_n,yrr),e(_n,Sue),e(Sue,Lrr),e(_n,xrr),e(_n,Rue),e(Rue,krr),e(_n,Srr),e(_n,Bue),e(Bue,Rrr),e(_n,Brr),e(uo,Prr),e(uo,H),e(H,iM),e(iM,Pue),e(Pue,$rr),e(iM,Irr),e(iM,XO),e(XO,qrr),e(iM,Nrr),e(H,jrr),e(H,dM),e(dM,$ue),e($ue,Drr),e(dM,Grr),e(dM,zO),e(zO,Orr),e(dM,Vrr),e(H,Xrr),e(H,cM),e(cM,Iue),e(Iue,zrr),e(cM,Qrr),e(cM,QO),e(QO,Wrr),e(cM,Hrr),e(H,Urr),e(H,mM),e(mM,que),e(que,Jrr),e(mM,Yrr),e(mM,WO),e(WO,Krr),e(mM,Zrr),e(H,etr),e(H,fM),e(fM,Nue),e(Nue,otr),e(fM,rtr),e(fM,HO),e(HO,ttr),e(fM,atr),e(H,ntr),e(H,gM),e(gM,jue),e(jue,str),e(gM,ltr),e(gM,UO),e(UO,itr),e(gM,dtr),e(H,ctr),e(H,hM),e(hM,Due),e(Due,mtr),e(hM,ftr),e(hM,JO),e(JO,gtr),e(hM,htr),e(H,utr),e(H,uM),e(uM,Gue),e(Gue,ptr),e(uM,_tr),e(uM,YO),e(YO,btr),e(uM,Ftr),e(H,vtr),e(H,pM),e(pM,Oue),e(Oue,Ttr),e(pM,Mtr),e(pM,KO),e(KO,Etr),e(pM,Ctr),e(H,wtr),e(H,_M),e(_M,Vue),e(Vue,Atr),e(_M,ytr),e(_M,ZO),e(ZO,Ltr),e(_M,xtr),e(H,ktr),e(H,bM),e(bM,Xue),e(Xue,Str),e(bM,Rtr),e(bM,eV),e(eV,Btr),e(bM,Ptr),e(H,$tr),e(H,FM),e(FM,zue),e(zue,Itr),e(FM,qtr),e(FM,oV),e(oV,Ntr),e(FM,jtr),e(H,Dtr),e(H,vM),e(vM,Que),e(Que,Gtr),e(vM,Otr),e(vM,rV),e(rV,Vtr),e(vM,Xtr),e(H,ztr),e(H,TM),e(TM,Wue),e(Wue,Qtr),e(TM,Wtr),e(TM,tV),e(tV,Htr),e(TM,Utr),e(H,Jtr),e(H,MM),e(MM,Hue),e(Hue,Ytr),e(MM,Ktr),e(MM,aV),e(aV,Ztr),e(MM,ear),e(H,oar),e(H,EM),e(EM,Uue),e(Uue,rar),e(EM,tar),e(EM,nV),e(nV,aar),e(EM,nar),e(H,sar),e(H,CM),e(CM,Jue),e(Jue,lar),e(CM,iar),e(CM,sV),e(sV,dar),e(CM,car),e(H,mar),e(H,wM),e(wM,Yue),e(Yue,far),e(wM,gar),e(wM,lV),e(lV,har),e(wM,uar),e(H,par),e(H,AM),e(AM,Kue),e(Kue,_ar),e(AM,bar),e(AM,iV),e(iV,Far),e(AM,Tar),e(H,Mar),e(H,yM),e(yM,Zue),e(Zue,Ear),e(yM,Car),e(yM,dV),e(dV,war),e(yM,Aar),e(H,yar),e(H,LM),e(LM,epe),e(epe,Lar),e(LM,xar),e(LM,cV),e(cV,kar),e(LM,Sar),e(H,Rar),e(H,xM),e(xM,ope),e(ope,Bar),e(xM,Par),e(xM,mV),e(mV,$ar),e(xM,Iar),e(uo,qar),e(uo,rpe),e(rpe,Nar),e(uo,jar),g(sy,uo,null),b(c,NRe,_),b(c,Fc,_),e(Fc,kM),e(kM,tpe),g(ly,tpe,null),e(Fc,Dar),e(Fc,ape),e(ape,Gar),b(c,jRe,_),b(c,Tr,_),g(iy,Tr,null),e(Tr,Oar),e(Tr,vc),e(vc,Var),e(vc,fV),e(fV,Xar),e(vc,zar),e(vc,gV),e(gV,Qar),e(vc,War),e(Tr,Har),e(Tr,dy),e(dy,Uar),e(dy,npe),e(npe,Jar),e(dy,Yar),e(Tr,Kar),e(Tr,ut),g(cy,ut,null),e(ut,Zar),e(ut,spe),e(spe,enr),e(ut,onr),e(ut,Tc),e(Tc,rnr),e(Tc,lpe),e(lpe,tnr),e(Tc,anr),e(Tc,hV),e(hV,nnr),e(Tc,snr),e(ut,lnr),e(ut,ipe),e(ipe,inr),e(ut,dnr),g(my,ut,null),e(Tr,cnr),e(Tr,po),g(fy,po,null),e(po,mnr),e(po,dpe),e(dpe,fnr),e(po,gnr),e(po,bn),e(bn,hnr),e(bn,cpe),e(cpe,unr),e(bn,pnr),e(bn,mpe),e(mpe,_nr),e(bn,bnr),e(bn,fpe),e(fpe,Fnr),e(bn,vnr),e(po,Tnr),e(po,ce),e(ce,SM),e(SM,gpe),e(gpe,Mnr),e(SM,Enr),e(SM,uV),e(uV,Cnr),e(SM,wnr),e(ce,Anr),e(ce,RM),e(RM,hpe),e(hpe,ynr),e(RM,Lnr),e(RM,pV),e(pV,xnr),e(RM,knr),e(ce,Snr),e(ce,BM),e(BM,upe),e(upe,Rnr),e(BM,Bnr),e(BM,_V),e(_V,Pnr),e(BM,$nr),e(ce,Inr),e(ce,PM),e(PM,ppe),e(ppe,qnr),e(PM,Nnr),e(PM,bV),e(bV,jnr),e(PM,Dnr),e(ce,Gnr),e(ce,$M),e($M,_pe),e(_pe,Onr),e($M,Vnr),e($M,FV),e(FV,Xnr),e($M,znr),e(ce,Qnr),e(ce,IM),e(IM,bpe),e(bpe,Wnr),e(IM,Hnr),e(IM,vV),e(vV,Unr),e(IM,Jnr),e(ce,Ynr),e(ce,qM),e(qM,Fpe),e(Fpe,Knr),e(qM,Znr),e(qM,TV),e(TV,esr),e(qM,osr),e(ce,rsr),e(ce,NM),e(NM,vpe),e(vpe,tsr),e(NM,asr),e(NM,MV),e(MV,nsr),e(NM,ssr),e(ce,lsr),e(ce,jM),e(jM,Tpe),e(Tpe,isr),e(jM,dsr),e(jM,EV),e(EV,csr),e(jM,msr),e(ce,fsr),e(ce,DM),e(DM,Mpe),e(Mpe,gsr),e(DM,hsr),e(DM,CV),e(CV,usr),e(DM,psr),e(ce,_sr),e(ce,GM),e(GM,Epe),e(Epe,bsr),e(GM,Fsr),e(GM,wV),e(wV,vsr),e(GM,Tsr),e(ce,Msr),e(ce,OM),e(OM,Cpe),e(Cpe,Esr),e(OM,Csr),e(OM,AV),e(AV,wsr),e(OM,Asr),e(po,ysr),e(po,wpe),e(wpe,Lsr),e(po,xsr),g(gy,po,null),b(c,DRe,_),b(c,Mc,_),e(Mc,VM),e(VM,Ape),g(hy,Ape,null),e(Mc,ksr),e(Mc,ype),e(ype,Ssr),b(c,GRe,_),b(c,Mr,_),g(uy,Mr,null),e(Mr,Rsr),e(Mr,Ec),e(Ec,Bsr),e(Ec,yV),e(yV,Psr),e(Ec,$sr),e(Ec,LV),e(LV,Isr),e(Ec,qsr),e(Mr,Nsr),e(Mr,py),e(py,jsr),e(py,Lpe),e(Lpe,Dsr),e(py,Gsr),e(Mr,Osr),e(Mr,pt),g(_y,pt,null),e(pt,Vsr),e(pt,xpe),e(xpe,Xsr),e(pt,zsr),e(pt,Cc),e(Cc,Qsr),e(Cc,kpe),e(kpe,Wsr),e(Cc,Hsr),e(Cc,xV),e(xV,Usr),e(Cc,Jsr),e(pt,Ysr),e(pt,Spe),e(Spe,Ksr),e(pt,Zsr),g(by,pt,null),e(Mr,elr),e(Mr,_o),g(Fy,_o,null),e(_o,olr),e(_o,Rpe),e(Rpe,rlr),e(_o,tlr),e(_o,Fn),e(Fn,alr),e(Fn,Bpe),e(Bpe,nlr),e(Fn,slr),e(Fn,Ppe),e(Ppe,llr),e(Fn,ilr),e(Fn,$pe),e($pe,dlr),e(Fn,clr),e(_o,mlr),e(_o,vy),e(vy,XM),e(XM,Ipe),e(Ipe,flr),e(XM,glr),e(XM,kV),e(kV,hlr),e(XM,ulr),e(vy,plr),e(vy,zM),e(zM,qpe),e(qpe,_lr),e(zM,blr),e(zM,SV),e(SV,Flr),e(zM,vlr),e(_o,Tlr),e(_o,Npe),e(Npe,Mlr),e(_o,Elr),g(Ty,_o,null),b(c,ORe,_),b(c,wc,_),e(wc,QM),e(QM,jpe),g(My,jpe,null),e(wc,Clr),e(wc,Dpe),e(Dpe,wlr),b(c,VRe,_),b(c,Er,_),g(Ey,Er,null),e(Er,Alr),e(Er,Ac),e(Ac,ylr),e(Ac,RV),e(RV,Llr),e(Ac,xlr),e(Ac,BV),e(BV,klr),e(Ac,Slr),e(Er,Rlr),e(Er,Cy),e(Cy,Blr),e(Cy,Gpe),e(Gpe,Plr),e(Cy,$lr),e(Er,Ilr),e(Er,_t),g(wy,_t,null),e(_t,qlr),e(_t,Ope),e(Ope,Nlr),e(_t,jlr),e(_t,yc),e(yc,Dlr),e(yc,Vpe),e(Vpe,Glr),e(yc,Olr),e(yc,PV),e(PV,Vlr),e(yc,Xlr),e(_t,zlr),e(_t,Xpe),e(Xpe,Qlr),e(_t,Wlr),g(Ay,_t,null),e(Er,Hlr),e(Er,bo),g(yy,bo,null),e(bo,Ulr),e(bo,zpe),e(zpe,Jlr),e(bo,Ylr),e(bo,vn),e(vn,Klr),e(vn,Qpe),e(Qpe,Zlr),e(vn,eir),e(vn,Wpe),e(Wpe,oir),e(vn,rir),e(vn,Hpe),e(Hpe,tir),e(vn,air),e(bo,nir),e(bo,J),e(J,WM),e(WM,Upe),e(Upe,sir),e(WM,lir),e(WM,$V),e($V,iir),e(WM,dir),e(J,cir),e(J,HM),e(HM,Jpe),e(Jpe,mir),e(HM,fir),e(HM,IV),e(IV,gir),e(HM,hir),e(J,uir),e(J,UM),e(UM,Ype),e(Ype,pir),e(UM,_ir),e(UM,qV),e(qV,bir),e(UM,Fir),e(J,vir),e(J,JM),e(JM,Kpe),e(Kpe,Tir),e(JM,Mir),e(JM,NV),e(NV,Eir),e(JM,Cir),e(J,wir),e(J,YM),e(YM,Zpe),e(Zpe,Air),e(YM,yir),e(YM,jV),e(jV,Lir),e(YM,xir),e(J,kir),e(J,KM),e(KM,e_e),e(e_e,Sir),e(KM,Rir),e(KM,DV),e(DV,Bir),e(KM,Pir),e(J,$ir),e(J,ZM),e(ZM,o_e),e(o_e,Iir),e(ZM,qir),e(ZM,GV),e(GV,Nir),e(ZM,jir),e(J,Dir),e(J,e4),e(e4,r_e),e(r_e,Gir),e(e4,Oir),e(e4,OV),e(OV,Vir),e(e4,Xir),e(J,zir),e(J,o4),e(o4,t_e),e(t_e,Qir),e(o4,Wir),e(o4,VV),e(VV,Hir),e(o4,Uir),e(J,Jir),e(J,r4),e(r4,a_e),e(a_e,Yir),e(r4,Kir),e(r4,XV),e(XV,Zir),e(r4,edr),e(J,odr),e(J,t4),e(t4,n_e),e(n_e,rdr),e(t4,tdr),e(t4,zV),e(zV,adr),e(t4,ndr),e(J,sdr),e(J,a4),e(a4,s_e),e(s_e,ldr),e(a4,idr),e(a4,QV),e(QV,ddr),e(a4,cdr),e(J,mdr),e(J,n4),e(n4,l_e),e(l_e,fdr),e(n4,gdr),e(n4,WV),e(WV,hdr),e(n4,udr),e(J,pdr),e(J,s4),e(s4,i_e),e(i_e,_dr),e(s4,bdr),e(s4,HV),e(HV,Fdr),e(s4,vdr),e(J,Tdr),e(J,l4),e(l4,d_e),e(d_e,Mdr),e(l4,Edr),e(l4,UV),e(UV,Cdr),e(l4,wdr),e(J,Adr),e(J,i4),e(i4,c_e),e(c_e,ydr),e(i4,Ldr),e(i4,JV),e(JV,xdr),e(i4,kdr),e(J,Sdr),e(J,d4),e(d4,m_e),e(m_e,Rdr),e(d4,Bdr),e(d4,YV),e(YV,Pdr),e(d4,$dr),e(J,Idr),e(J,c4),e(c4,f_e),e(f_e,qdr),e(c4,Ndr),e(c4,KV),e(KV,jdr),e(c4,Ddr),e(J,Gdr),e(J,m4),e(m4,g_e),e(g_e,Odr),e(m4,Vdr),e(m4,ZV),e(ZV,Xdr),e(m4,zdr),e(J,Qdr),e(J,f4),e(f4,h_e),e(h_e,Wdr),e(f4,Hdr),e(f4,eX),e(eX,Udr),e(f4,Jdr),e(bo,Ydr),e(bo,u_e),e(u_e,Kdr),e(bo,Zdr),g(Ly,bo,null),b(c,XRe,_),b(c,Lc,_),e(Lc,g4),e(g4,p_e),g(xy,p_e,null),e(Lc,ecr),e(Lc,__e),e(__e,ocr),b(c,zRe,_),b(c,Cr,_),g(ky,Cr,null),e(Cr,rcr),e(Cr,xc),e(xc,tcr),e(xc,oX),e(oX,acr),e(xc,ncr),e(xc,rX),e(rX,scr),e(xc,lcr),e(Cr,icr),e(Cr,Sy),e(Sy,dcr),e(Sy,b_e),e(b_e,ccr),e(Sy,mcr),e(Cr,fcr),e(Cr,bt),g(Ry,bt,null),e(bt,gcr),e(bt,F_e),e(F_e,hcr),e(bt,ucr),e(bt,kc),e(kc,pcr),e(kc,v_e),e(v_e,_cr),e(kc,bcr),e(kc,tX),e(tX,Fcr),e(kc,vcr),e(bt,Tcr),e(bt,T_e),e(T_e,Mcr),e(bt,Ecr),g(By,bt,null),e(Cr,Ccr),e(Cr,Fo),g(Py,Fo,null),e(Fo,wcr),e(Fo,M_e),e(M_e,Acr),e(Fo,ycr),e(Fo,Tn),e(Tn,Lcr),e(Tn,E_e),e(E_e,xcr),e(Tn,kcr),e(Tn,C_e),e(C_e,Scr),e(Tn,Rcr),e(Tn,w_e),e(w_e,Bcr),e(Tn,Pcr),e(Fo,$cr),e(Fo,_e),e(_e,h4),e(h4,A_e),e(A_e,Icr),e(h4,qcr),e(h4,aX),e(aX,Ncr),e(h4,jcr),e(_e,Dcr),e(_e,u4),e(u4,y_e),e(y_e,Gcr),e(u4,Ocr),e(u4,nX),e(nX,Vcr),e(u4,Xcr),e(_e,zcr),e(_e,p4),e(p4,L_e),e(L_e,Qcr),e(p4,Wcr),e(p4,sX),e(sX,Hcr),e(p4,Ucr),e(_e,Jcr),e(_e,_4),e(_4,x_e),e(x_e,Ycr),e(_4,Kcr),e(_4,lX),e(lX,Zcr),e(_4,emr),e(_e,omr),e(_e,b4),e(b4,k_e),e(k_e,rmr),e(b4,tmr),e(b4,iX),e(iX,amr),e(b4,nmr),e(_e,smr),e(_e,F4),e(F4,S_e),e(S_e,lmr),e(F4,imr),e(F4,dX),e(dX,dmr),e(F4,cmr),e(_e,mmr),e(_e,v4),e(v4,R_e),e(R_e,fmr),e(v4,gmr),e(v4,cX),e(cX,hmr),e(v4,umr),e(_e,pmr),e(_e,T4),e(T4,B_e),e(B_e,_mr),e(T4,bmr),e(T4,mX),e(mX,Fmr),e(T4,vmr),e(_e,Tmr),e(_e,M4),e(M4,P_e),e(P_e,Mmr),e(M4,Emr),e(M4,fX),e(fX,Cmr),e(M4,wmr),e(_e,Amr),e(_e,E4),e(E4,$_e),e($_e,ymr),e(E4,Lmr),e(E4,gX),e(gX,xmr),e(E4,kmr),e(Fo,Smr),e(Fo,I_e),e(I_e,Rmr),e(Fo,Bmr),g($y,Fo,null),b(c,QRe,_),b(c,Sc,_),e(Sc,C4),e(C4,q_e),g(Iy,q_e,null),e(Sc,Pmr),e(Sc,N_e),e(N_e,$mr),b(c,WRe,_),b(c,wr,_),g(qy,wr,null),e(wr,Imr),e(wr,Rc),e(Rc,qmr),e(Rc,hX),e(hX,Nmr),e(Rc,jmr),e(Rc,uX),e(uX,Dmr),e(Rc,Gmr),e(wr,Omr),e(wr,Ny),e(Ny,Vmr),e(Ny,j_e),e(j_e,Xmr),e(Ny,zmr),e(wr,Qmr),e(wr,Ft),g(jy,Ft,null),e(Ft,Wmr),e(Ft,D_e),e(D_e,Hmr),e(Ft,Umr),e(Ft,Bc),e(Bc,Jmr),e(Bc,G_e),e(G_e,Ymr),e(Bc,Kmr),e(Bc,pX),e(pX,Zmr),e(Bc,efr),e(Ft,ofr),e(Ft,O_e),e(O_e,rfr),e(Ft,tfr),g(Dy,Ft,null),e(wr,afr),e(wr,vo),g(Gy,vo,null),e(vo,nfr),e(vo,V_e),e(V_e,sfr),e(vo,lfr),e(vo,Mn),e(Mn,ifr),e(Mn,X_e),e(X_e,dfr),e(Mn,cfr),e(Mn,z_e),e(z_e,mfr),e(Mn,ffr),e(Mn,Q_e),e(Q_e,gfr),e(Mn,hfr),e(vo,ufr),e(vo,V),e(V,w4),e(w4,W_e),e(W_e,pfr),e(w4,_fr),e(w4,_X),e(_X,bfr),e(w4,Ffr),e(V,vfr),e(V,A4),e(A4,H_e),e(H_e,Tfr),e(A4,Mfr),e(A4,bX),e(bX,Efr),e(A4,Cfr),e(V,wfr),e(V,y4),e(y4,U_e),e(U_e,Afr),e(y4,yfr),e(y4,FX),e(FX,Lfr),e(y4,xfr),e(V,kfr),e(V,L4),e(L4,J_e),e(J_e,Sfr),e(L4,Rfr),e(L4,vX),e(vX,Bfr),e(L4,Pfr),e(V,$fr),e(V,x4),e(x4,Y_e),e(Y_e,Ifr),e(x4,qfr),e(x4,TX),e(TX,Nfr),e(x4,jfr),e(V,Dfr),e(V,k4),e(k4,K_e),e(K_e,Gfr),e(k4,Ofr),e(k4,MX),e(MX,Vfr),e(k4,Xfr),e(V,zfr),e(V,S4),e(S4,Z_e),e(Z_e,Qfr),e(S4,Wfr),e(S4,EX),e(EX,Hfr),e(S4,Ufr),e(V,Jfr),e(V,R4),e(R4,ebe),e(ebe,Yfr),e(R4,Kfr),e(R4,CX),e(CX,Zfr),e(R4,egr),e(V,ogr),e(V,B4),e(B4,obe),e(obe,rgr),e(B4,tgr),e(B4,wX),e(wX,agr),e(B4,ngr),e(V,sgr),e(V,P4),e(P4,rbe),e(rbe,lgr),e(P4,igr),e(P4,AX),e(AX,dgr),e(P4,cgr),e(V,mgr),e(V,$4),e($4,tbe),e(tbe,fgr),e($4,ggr),e($4,yX),e(yX,hgr),e($4,ugr),e(V,pgr),e(V,I4),e(I4,abe),e(abe,_gr),e(I4,bgr),e(I4,LX),e(LX,Fgr),e(I4,vgr),e(V,Tgr),e(V,q4),e(q4,nbe),e(nbe,Mgr),e(q4,Egr),e(q4,xX),e(xX,Cgr),e(q4,wgr),e(V,Agr),e(V,N4),e(N4,sbe),e(sbe,ygr),e(N4,Lgr),e(N4,kX),e(kX,xgr),e(N4,kgr),e(V,Sgr),e(V,j4),e(j4,lbe),e(lbe,Rgr),e(j4,Bgr),e(j4,SX),e(SX,Pgr),e(j4,$gr),e(V,Igr),e(V,D4),e(D4,ibe),e(ibe,qgr),e(D4,Ngr),e(D4,RX),e(RX,jgr),e(D4,Dgr),e(V,Ggr),e(V,G4),e(G4,dbe),e(dbe,Ogr),e(G4,Vgr),e(G4,BX),e(BX,Xgr),e(G4,zgr),e(V,Qgr),e(V,O4),e(O4,cbe),e(cbe,Wgr),e(O4,Hgr),e(O4,PX),e(PX,Ugr),e(O4,Jgr),e(V,Ygr),e(V,V4),e(V4,mbe),e(mbe,Kgr),e(V4,Zgr),e(V4,$X),e($X,ehr),e(V4,ohr),e(V,rhr),e(V,X4),e(X4,fbe),e(fbe,thr),e(X4,ahr),e(X4,IX),e(IX,nhr),e(X4,shr),e(V,lhr),e(V,z4),e(z4,gbe),e(gbe,ihr),e(z4,dhr),e(z4,qX),e(qX,chr),e(z4,mhr),e(V,fhr),e(V,Q4),e(Q4,hbe),e(hbe,ghr),e(Q4,hhr),e(Q4,NX),e(NX,uhr),e(Q4,phr),e(V,_hr),e(V,W4),e(W4,ube),e(ube,bhr),e(W4,Fhr),e(W4,jX),e(jX,vhr),e(W4,Thr),e(V,Mhr),e(V,H4),e(H4,pbe),e(pbe,Ehr),e(H4,Chr),e(H4,DX),e(DX,whr),e(H4,Ahr),e(V,yhr),e(V,U4),e(U4,_be),e(_be,Lhr),e(U4,xhr),e(U4,GX),e(GX,khr),e(U4,Shr),e(V,Rhr),e(V,J4),e(J4,bbe),e(bbe,Bhr),e(J4,Phr),e(J4,OX),e(OX,$hr),e(J4,Ihr),e(vo,qhr),e(vo,Fbe),e(Fbe,Nhr),e(vo,jhr),g(Oy,vo,null),b(c,HRe,_),b(c,Pc,_),e(Pc,Y4),e(Y4,vbe),g(Vy,vbe,null),e(Pc,Dhr),e(Pc,Tbe),e(Tbe,Ghr),b(c,URe,_),b(c,Ar,_),g(Xy,Ar,null),e(Ar,Ohr),e(Ar,$c),e($c,Vhr),e($c,VX),e(VX,Xhr),e($c,zhr),e($c,XX),e(XX,Qhr),e($c,Whr),e(Ar,Hhr),e(Ar,zy),e(zy,Uhr),e(zy,Mbe),e(Mbe,Jhr),e(zy,Yhr),e(Ar,Khr),e(Ar,vt),g(Qy,vt,null),e(vt,Zhr),e(vt,Ebe),e(Ebe,eur),e(vt,our),e(vt,Ic),e(Ic,rur),e(Ic,Cbe),e(Cbe,tur),e(Ic,aur),e(Ic,zX),e(zX,nur),e(Ic,sur),e(vt,lur),e(vt,wbe),e(wbe,iur),e(vt,dur),g(Wy,vt,null),e(Ar,cur),e(Ar,To),g(Hy,To,null),e(To,mur),e(To,Abe),e(Abe,fur),e(To,gur),e(To,En),e(En,hur),e(En,ybe),e(ybe,uur),e(En,pur),e(En,Lbe),e(Lbe,_ur),e(En,bur),e(En,xbe),e(xbe,Fur),e(En,vur),e(To,Tur),e(To,ae),e(ae,K4),e(K4,kbe),e(kbe,Mur),e(K4,Eur),e(K4,QX),e(QX,Cur),e(K4,wur),e(ae,Aur),e(ae,Z4),e(Z4,Sbe),e(Sbe,yur),e(Z4,Lur),e(Z4,WX),e(WX,xur),e(Z4,kur),e(ae,Sur),e(ae,eE),e(eE,Rbe),e(Rbe,Rur),e(eE,Bur),e(eE,HX),e(HX,Pur),e(eE,$ur),e(ae,Iur),e(ae,oE),e(oE,Bbe),e(Bbe,qur),e(oE,Nur),e(oE,UX),e(UX,jur),e(oE,Dur),e(ae,Gur),e(ae,rE),e(rE,Pbe),e(Pbe,Our),e(rE,Vur),e(rE,JX),e(JX,Xur),e(rE,zur),e(ae,Qur),e(ae,tE),e(tE,$be),e($be,Wur),e(tE,Hur),e(tE,YX),e(YX,Uur),e(tE,Jur),e(ae,Yur),e(ae,aE),e(aE,Ibe),e(Ibe,Kur),e(aE,Zur),e(aE,KX),e(KX,epr),e(aE,opr),e(ae,rpr),e(ae,nE),e(nE,qbe),e(qbe,tpr),e(nE,apr),e(nE,ZX),e(ZX,npr),e(nE,spr),e(ae,lpr),e(ae,sE),e(sE,Nbe),e(Nbe,ipr),e(sE,dpr),e(sE,ez),e(ez,cpr),e(sE,mpr),e(ae,fpr),e(ae,lE),e(lE,jbe),e(jbe,gpr),e(lE,hpr),e(lE,oz),e(oz,upr),e(lE,ppr),e(ae,_pr),e(ae,iE),e(iE,Dbe),e(Dbe,bpr),e(iE,Fpr),e(iE,rz),e(rz,vpr),e(iE,Tpr),e(ae,Mpr),e(ae,dE),e(dE,Gbe),e(Gbe,Epr),e(dE,Cpr),e(dE,tz),e(tz,wpr),e(dE,Apr),e(ae,ypr),e(ae,cE),e(cE,Obe),e(Obe,Lpr),e(cE,xpr),e(cE,az),e(az,kpr),e(cE,Spr),e(ae,Rpr),e(ae,mE),e(mE,Vbe),e(Vbe,Bpr),e(mE,Ppr),e(mE,nz),e(nz,$pr),e(mE,Ipr),e(ae,qpr),e(ae,fE),e(fE,Xbe),e(Xbe,Npr),e(fE,jpr),e(fE,sz),e(sz,Dpr),e(fE,Gpr),e(ae,Opr),e(ae,gE),e(gE,zbe),e(zbe,Vpr),e(gE,Xpr),e(gE,lz),e(lz,zpr),e(gE,Qpr),e(ae,Wpr),e(ae,hE),e(hE,Qbe),e(Qbe,Hpr),e(hE,Upr),e(hE,iz),e(iz,Jpr),e(hE,Ypr),e(To,Kpr),e(To,Wbe),e(Wbe,Zpr),e(To,e_r),g(Uy,To,null),b(c,JRe,_),b(c,qc,_),e(qc,uE),e(uE,Hbe),g(Jy,Hbe,null),e(qc,o_r),e(qc,Ube),e(Ube,r_r),b(c,YRe,_),b(c,yr,_),g(Yy,yr,null),e(yr,t_r),e(yr,Nc),e(Nc,a_r),e(Nc,dz),e(dz,n_r),e(Nc,s_r),e(Nc,cz),e(cz,l_r),e(Nc,i_r),e(yr,d_r),e(yr,Ky),e(Ky,c_r),e(Ky,Jbe),e(Jbe,m_r),e(Ky,f_r),e(yr,g_r),e(yr,Tt),g(Zy,Tt,null),e(Tt,h_r),e(Tt,Ybe),e(Ybe,u_r),e(Tt,p_r),e(Tt,jc),e(jc,__r),e(jc,Kbe),e(Kbe,b_r),e(jc,F_r),e(jc,mz),e(mz,v_r),e(jc,T_r),e(Tt,M_r),e(Tt,Zbe),e(Zbe,E_r),e(Tt,C_r),g(eL,Tt,null),e(yr,w_r),e(yr,Mo),g(oL,Mo,null),e(Mo,A_r),e(Mo,e2e),e(e2e,y_r),e(Mo,L_r),e(Mo,Cn),e(Cn,x_r),e(Cn,o2e),e(o2e,k_r),e(Cn,S_r),e(Cn,r2e),e(r2e,R_r),e(Cn,B_r),e(Cn,t2e),e(t2e,P_r),e(Cn,$_r),e(Mo,I_r),e(Mo,a2e),e(a2e,pE),e(pE,n2e),e(n2e,q_r),e(pE,N_r),e(pE,fz),e(fz,j_r),e(pE,D_r),e(Mo,G_r),e(Mo,s2e),e(s2e,O_r),e(Mo,V_r),g(rL,Mo,null),b(c,KRe,_),b(c,Dc,_),e(Dc,_E),e(_E,l2e),g(tL,l2e,null),e(Dc,X_r),e(Dc,i2e),e(i2e,z_r),b(c,ZRe,_),b(c,Lr,_),g(aL,Lr,null),e(Lr,Q_r),e(Lr,Gc),e(Gc,W_r),e(Gc,gz),e(gz,H_r),e(Gc,U_r),e(Gc,hz),e(hz,J_r),e(Gc,Y_r),e(Lr,K_r),e(Lr,nL),e(nL,Z_r),e(nL,d2e),e(d2e,ebr),e(nL,obr),e(Lr,rbr),e(Lr,Mt),g(sL,Mt,null),e(Mt,tbr),e(Mt,c2e),e(c2e,abr),e(Mt,nbr),e(Mt,Oc),e(Oc,sbr),e(Oc,m2e),e(m2e,lbr),e(Oc,ibr),e(Oc,uz),e(uz,dbr),e(Oc,cbr),e(Mt,mbr),e(Mt,f2e),e(f2e,fbr),e(Mt,gbr),g(lL,Mt,null),e(Lr,hbr),e(Lr,Eo),g(iL,Eo,null),e(Eo,ubr),e(Eo,g2e),e(g2e,pbr),e(Eo,_br),e(Eo,wn),e(wn,bbr),e(wn,h2e),e(h2e,Fbr),e(wn,vbr),e(wn,u2e),e(u2e,Tbr),e(wn,Mbr),e(wn,p2e),e(p2e,Ebr),e(wn,Cbr),e(Eo,wbr),e(Eo,Y),e(Y,bE),e(bE,_2e),e(_2e,Abr),e(bE,ybr),e(bE,pz),e(pz,Lbr),e(bE,xbr),e(Y,kbr),e(Y,FE),e(FE,b2e),e(b2e,Sbr),e(FE,Rbr),e(FE,_z),e(_z,Bbr),e(FE,Pbr),e(Y,$br),e(Y,vE),e(vE,F2e),e(F2e,Ibr),e(vE,qbr),e(vE,bz),e(bz,Nbr),e(vE,jbr),e(Y,Dbr),e(Y,TE),e(TE,v2e),e(v2e,Gbr),e(TE,Obr),e(TE,Fz),e(Fz,Vbr),e(TE,Xbr),e(Y,zbr),e(Y,ME),e(ME,T2e),e(T2e,Qbr),e(ME,Wbr),e(ME,vz),e(vz,Hbr),e(ME,Ubr),e(Y,Jbr),e(Y,EE),e(EE,M2e),e(M2e,Ybr),e(EE,Kbr),e(EE,Tz),e(Tz,Zbr),e(EE,e2r),e(Y,o2r),e(Y,CE),e(CE,E2e),e(E2e,r2r),e(CE,t2r),e(CE,Mz),e(Mz,a2r),e(CE,n2r),e(Y,s2r),e(Y,wE),e(wE,C2e),e(C2e,l2r),e(wE,i2r),e(wE,Ez),e(Ez,d2r),e(wE,c2r),e(Y,m2r),e(Y,AE),e(AE,w2e),e(w2e,f2r),e(AE,g2r),e(AE,Cz),e(Cz,h2r),e(AE,u2r),e(Y,p2r),e(Y,yE),e(yE,A2e),e(A2e,_2r),e(yE,b2r),e(yE,wz),e(wz,F2r),e(yE,v2r),e(Y,T2r),e(Y,LE),e(LE,y2e),e(y2e,M2r),e(LE,E2r),e(LE,Az),e(Az,C2r),e(LE,w2r),e(Y,A2r),e(Y,xE),e(xE,L2e),e(L2e,y2r),e(xE,L2r),e(xE,yz),e(yz,x2r),e(xE,k2r),e(Y,S2r),e(Y,kE),e(kE,x2e),e(x2e,R2r),e(kE,B2r),e(kE,Lz),e(Lz,P2r),e(kE,$2r),e(Y,I2r),e(Y,SE),e(SE,k2e),e(k2e,q2r),e(SE,N2r),e(SE,xz),e(xz,j2r),e(SE,D2r),e(Y,G2r),e(Y,RE),e(RE,S2e),e(S2e,O2r),e(RE,V2r),e(RE,kz),e(kz,X2r),e(RE,z2r),e(Y,Q2r),e(Y,BE),e(BE,R2e),e(R2e,W2r),e(BE,H2r),e(BE,Sz),e(Sz,U2r),e(BE,J2r),e(Y,Y2r),e(Y,PE),e(PE,B2e),e(B2e,K2r),e(PE,Z2r),e(PE,Rz),e(Rz,eFr),e(PE,oFr),e(Y,rFr),e(Y,$E),e($E,P2e),e(P2e,tFr),e($E,aFr),e($E,Bz),e(Bz,nFr),e($E,sFr),e(Y,lFr),e(Y,IE),e(IE,$2e),e($2e,iFr),e(IE,dFr),e(IE,Pz),e(Pz,cFr),e(IE,mFr),e(Y,fFr),e(Y,qE),e(qE,I2e),e(I2e,gFr),e(qE,hFr),e(qE,$z),e($z,uFr),e(qE,pFr),e(Eo,_Fr),e(Eo,q2e),e(q2e,bFr),e(Eo,FFr),g(dL,Eo,null),b(c,eBe,_),b(c,Vc,_),e(Vc,NE),e(NE,N2e),g(cL,N2e,null),e(Vc,vFr),e(Vc,j2e),e(j2e,TFr),b(c,oBe,_),b(c,xr,_),g(mL,xr,null),e(xr,MFr),e(xr,Xc),e(Xc,EFr),e(Xc,Iz),e(Iz,CFr),e(Xc,wFr),e(Xc,qz),e(qz,AFr),e(Xc,yFr),e(xr,LFr),e(xr,fL),e(fL,xFr),e(fL,D2e),e(D2e,kFr),e(fL,SFr),e(xr,RFr),e(xr,Et),g(gL,Et,null),e(Et,BFr),e(Et,G2e),e(G2e,PFr),e(Et,$Fr),e(Et,zc),e(zc,IFr),e(zc,O2e),e(O2e,qFr),e(zc,NFr),e(zc,Nz),e(Nz,jFr),e(zc,DFr),e(Et,GFr),e(Et,V2e),e(V2e,OFr),e(Et,VFr),g(hL,Et,null),e(xr,XFr),e(xr,Co),g(uL,Co,null),e(Co,zFr),e(Co,X2e),e(X2e,QFr),e(Co,WFr),e(Co,An),e(An,HFr),e(An,z2e),e(z2e,UFr),e(An,JFr),e(An,Q2e),e(Q2e,YFr),e(An,KFr),e(An,W2e),e(W2e,ZFr),e(An,evr),e(Co,ovr),e(Co,K),e(K,jE),e(jE,H2e),e(H2e,rvr),e(jE,tvr),e(jE,jz),e(jz,avr),e(jE,nvr),e(K,svr),e(K,DE),e(DE,U2e),e(U2e,lvr),e(DE,ivr),e(DE,Dz),e(Dz,dvr),e(DE,cvr),e(K,mvr),e(K,GE),e(GE,J2e),e(J2e,fvr),e(GE,gvr),e(GE,Gz),e(Gz,hvr),e(GE,uvr),e(K,pvr),e(K,OE),e(OE,Y2e),e(Y2e,_vr),e(OE,bvr),e(OE,Oz),e(Oz,Fvr),e(OE,vvr),e(K,Tvr),e(K,VE),e(VE,K2e),e(K2e,Mvr),e(VE,Evr),e(VE,Vz),e(Vz,Cvr),e(VE,wvr),e(K,Avr),e(K,XE),e(XE,Z2e),e(Z2e,yvr),e(XE,Lvr),e(XE,Xz),e(Xz,xvr),e(XE,kvr),e(K,Svr),e(K,zE),e(zE,eFe),e(eFe,Rvr),e(zE,Bvr),e(zE,zz),e(zz,Pvr),e(zE,$vr),e(K,Ivr),e(K,QE),e(QE,oFe),e(oFe,qvr),e(QE,Nvr),e(QE,Qz),e(Qz,jvr),e(QE,Dvr),e(K,Gvr),e(K,WE),e(WE,rFe),e(rFe,Ovr),e(WE,Vvr),e(WE,Wz),e(Wz,Xvr),e(WE,zvr),e(K,Qvr),e(K,HE),e(HE,tFe),e(tFe,Wvr),e(HE,Hvr),e(HE,Hz),e(Hz,Uvr),e(HE,Jvr),e(K,Yvr),e(K,UE),e(UE,aFe),e(aFe,Kvr),e(UE,Zvr),e(UE,Uz),e(Uz,eTr),e(UE,oTr),e(K,rTr),e(K,JE),e(JE,nFe),e(nFe,tTr),e(JE,aTr),e(JE,Jz),e(Jz,nTr),e(JE,sTr),e(K,lTr),e(K,YE),e(YE,sFe),e(sFe,iTr),e(YE,dTr),e(YE,Yz),e(Yz,cTr),e(YE,mTr),e(K,fTr),e(K,KE),e(KE,lFe),e(lFe,gTr),e(KE,hTr),e(KE,Kz),e(Kz,uTr),e(KE,pTr),e(K,_Tr),e(K,ZE),e(ZE,iFe),e(iFe,bTr),e(ZE,FTr),e(ZE,Zz),e(Zz,vTr),e(ZE,TTr),e(K,MTr),e(K,eC),e(eC,dFe),e(dFe,ETr),e(eC,CTr),e(eC,eQ),e(eQ,wTr),e(eC,ATr),e(K,yTr),e(K,oC),e(oC,cFe),e(cFe,LTr),e(oC,xTr),e(oC,oQ),e(oQ,kTr),e(oC,STr),e(K,RTr),e(K,rC),e(rC,mFe),e(mFe,BTr),e(rC,PTr),e(rC,rQ),e(rQ,$Tr),e(rC,ITr),e(K,qTr),e(K,tC),e(tC,fFe),e(fFe,NTr),e(tC,jTr),e(tC,tQ),e(tQ,DTr),e(tC,GTr),e(K,OTr),e(K,aC),e(aC,gFe),e(gFe,VTr),e(aC,XTr),e(aC,aQ),e(aQ,zTr),e(aC,QTr),e(Co,WTr),e(Co,hFe),e(hFe,HTr),e(Co,UTr),g(pL,Co,null),b(c,rBe,_),b(c,Qc,_),e(Qc,nC),e(nC,uFe),g(_L,uFe,null),e(Qc,JTr),e(Qc,pFe),e(pFe,YTr),b(c,tBe,_),b(c,kr,_),g(bL,kr,null),e(kr,KTr),e(kr,Wc),e(Wc,ZTr),e(Wc,nQ),e(nQ,e1r),e(Wc,o1r),e(Wc,sQ),e(sQ,r1r),e(Wc,t1r),e(kr,a1r),e(kr,FL),e(FL,n1r),e(FL,_Fe),e(_Fe,s1r),e(FL,l1r),e(kr,i1r),e(kr,Ct),g(vL,Ct,null),e(Ct,d1r),e(Ct,bFe),e(bFe,c1r),e(Ct,m1r),e(Ct,Hc),e(Hc,f1r),e(Hc,FFe),e(FFe,g1r),e(Hc,h1r),e(Hc,lQ),e(lQ,u1r),e(Hc,p1r),e(Ct,_1r),e(Ct,vFe),e(vFe,b1r),e(Ct,F1r),g(TL,Ct,null),e(kr,v1r),e(kr,wo),g(ML,wo,null),e(wo,T1r),e(wo,TFe),e(TFe,M1r),e(wo,E1r),e(wo,yn),e(yn,C1r),e(yn,MFe),e(MFe,w1r),e(yn,A1r),e(yn,EFe),e(EFe,y1r),e(yn,L1r),e(yn,CFe),e(CFe,x1r),e(yn,k1r),e(wo,S1r),e(wo,wFe),e(wFe,sC),e(sC,AFe),e(AFe,R1r),e(sC,B1r),e(sC,iQ),e(iQ,P1r),e(sC,$1r),e(wo,I1r),e(wo,yFe),e(yFe,q1r),e(wo,N1r),g(EL,wo,null),b(c,aBe,_),b(c,Uc,_),e(Uc,lC),e(lC,LFe),g(CL,LFe,null),e(Uc,j1r),e(Uc,xFe),e(xFe,D1r),b(c,nBe,_),b(c,Sr,_),g(wL,Sr,null),e(Sr,G1r),e(Sr,Jc),e(Jc,O1r),e(Jc,dQ),e(dQ,V1r),e(Jc,X1r),e(Jc,cQ),e(cQ,z1r),e(Jc,Q1r),e(Sr,W1r),e(Sr,AL),e(AL,H1r),e(AL,kFe),e(kFe,U1r),e(AL,J1r),e(Sr,Y1r),e(Sr,wt),g(yL,wt,null),e(wt,K1r),e(wt,SFe),e(SFe,Z1r),e(wt,eMr),e(wt,Yc),e(Yc,oMr),e(Yc,RFe),e(RFe,rMr),e(Yc,tMr),e(Yc,mQ),e(mQ,aMr),e(Yc,nMr),e(wt,sMr),e(wt,BFe),e(BFe,lMr),e(wt,iMr),g(LL,wt,null),e(Sr,dMr),e(Sr,Ao),g(xL,Ao,null),e(Ao,cMr),e(Ao,PFe),e(PFe,mMr),e(Ao,fMr),e(Ao,Ln),e(Ln,gMr),e(Ln,$Fe),e($Fe,hMr),e(Ln,uMr),e(Ln,IFe),e(IFe,pMr),e(Ln,_Mr),e(Ln,qFe),e(qFe,bMr),e(Ln,FMr),e(Ao,vMr),e(Ao,NFe),e(NFe,iC),e(iC,jFe),e(jFe,TMr),e(iC,MMr),e(iC,fQ),e(fQ,EMr),e(iC,CMr),e(Ao,wMr),e(Ao,DFe),e(DFe,AMr),e(Ao,yMr),g(kL,Ao,null),b(c,sBe,_),b(c,Kc,_),e(Kc,dC),e(dC,GFe),g(SL,GFe,null),e(Kc,LMr),e(Kc,OFe),e(OFe,xMr),b(c,lBe,_),b(c,Rr,_),g(RL,Rr,null),e(Rr,kMr),e(Rr,Zc),e(Zc,SMr),e(Zc,gQ),e(gQ,RMr),e(Zc,BMr),e(Zc,hQ),e(hQ,PMr),e(Zc,$Mr),e(Rr,IMr),e(Rr,BL),e(BL,qMr),e(BL,VFe),e(VFe,NMr),e(BL,jMr),e(Rr,DMr),e(Rr,At),g(PL,At,null),e(At,GMr),e(At,XFe),e(XFe,OMr),e(At,VMr),e(At,em),e(em,XMr),e(em,zFe),e(zFe,zMr),e(em,QMr),e(em,uQ),e(uQ,WMr),e(em,HMr),e(At,UMr),e(At,QFe),e(QFe,JMr),e(At,YMr),g($L,At,null),e(Rr,KMr),e(Rr,yo),g(IL,yo,null),e(yo,ZMr),e(yo,WFe),e(WFe,e4r),e(yo,o4r),e(yo,xn),e(xn,r4r),e(xn,HFe),e(HFe,t4r),e(xn,a4r),e(xn,UFe),e(UFe,n4r),e(xn,s4r),e(xn,JFe),e(JFe,l4r),e(xn,i4r),e(yo,d4r),e(yo,z),e(z,cC),e(cC,YFe),e(YFe,c4r),e(cC,m4r),e(cC,pQ),e(pQ,f4r),e(cC,g4r),e(z,h4r),e(z,mC),e(mC,KFe),e(KFe,u4r),e(mC,p4r),e(mC,_Q),e(_Q,_4r),e(mC,b4r),e(z,F4r),e(z,fC),e(fC,ZFe),e(ZFe,v4r),e(fC,T4r),e(fC,bQ),e(bQ,M4r),e(fC,E4r),e(z,C4r),e(z,gC),e(gC,eve),e(eve,w4r),e(gC,A4r),e(gC,FQ),e(FQ,y4r),e(gC,L4r),e(z,x4r),e(z,hC),e(hC,ove),e(ove,k4r),e(hC,S4r),e(hC,vQ),e(vQ,R4r),e(hC,B4r),e(z,P4r),e(z,uC),e(uC,rve),e(rve,$4r),e(uC,I4r),e(uC,TQ),e(TQ,q4r),e(uC,N4r),e(z,j4r),e(z,pC),e(pC,tve),e(tve,D4r),e(pC,G4r),e(pC,MQ),e(MQ,O4r),e(pC,V4r),e(z,X4r),e(z,_C),e(_C,ave),e(ave,z4r),e(_C,Q4r),e(_C,EQ),e(EQ,W4r),e(_C,H4r),e(z,U4r),e(z,bC),e(bC,nve),e(nve,J4r),e(bC,Y4r),e(bC,CQ),e(CQ,K4r),e(bC,Z4r),e(z,eEr),e(z,FC),e(FC,sve),e(sve,oEr),e(FC,rEr),e(FC,wQ),e(wQ,tEr),e(FC,aEr),e(z,nEr),e(z,vC),e(vC,lve),e(lve,sEr),e(vC,lEr),e(vC,AQ),e(AQ,iEr),e(vC,dEr),e(z,cEr),e(z,TC),e(TC,ive),e(ive,mEr),e(TC,fEr),e(TC,yQ),e(yQ,gEr),e(TC,hEr),e(z,uEr),e(z,MC),e(MC,dve),e(dve,pEr),e(MC,_Er),e(MC,LQ),e(LQ,bEr),e(MC,FEr),e(z,vEr),e(z,EC),e(EC,cve),e(cve,TEr),e(EC,MEr),e(EC,xQ),e(xQ,EEr),e(EC,CEr),e(z,wEr),e(z,CC),e(CC,mve),e(mve,AEr),e(CC,yEr),e(CC,kQ),e(kQ,LEr),e(CC,xEr),e(z,kEr),e(z,wC),e(wC,fve),e(fve,SEr),e(wC,REr),e(wC,SQ),e(SQ,BEr),e(wC,PEr),e(z,$Er),e(z,AC),e(AC,gve),e(gve,IEr),e(AC,qEr),e(AC,RQ),e(RQ,NEr),e(AC,jEr),e(z,DEr),e(z,yC),e(yC,hve),e(hve,GEr),e(yC,OEr),e(yC,BQ),e(BQ,VEr),e(yC,XEr),e(z,zEr),e(z,LC),e(LC,uve),e(uve,QEr),e(LC,WEr),e(LC,PQ),e(PQ,HEr),e(LC,UEr),e(z,JEr),e(z,xC),e(xC,pve),e(pve,YEr),e(xC,KEr),e(xC,$Q),e($Q,ZEr),e(xC,eCr),e(z,oCr),e(z,kC),e(kC,_ve),e(_ve,rCr),e(kC,tCr),e(kC,IQ),e(IQ,aCr),e(kC,nCr),e(z,sCr),e(z,SC),e(SC,bve),e(bve,lCr),e(SC,iCr),e(SC,qQ),e(qQ,dCr),e(SC,cCr),e(z,mCr),e(z,RC),e(RC,Fve),e(Fve,fCr),e(RC,gCr),e(RC,NQ),e(NQ,hCr),e(RC,uCr),e(z,pCr),e(z,BC),e(BC,vve),e(vve,_Cr),e(BC,bCr),e(BC,jQ),e(jQ,FCr),e(BC,vCr),e(z,TCr),e(z,PC),e(PC,Tve),e(Tve,MCr),e(PC,ECr),e(PC,DQ),e(DQ,CCr),e(PC,wCr),e(yo,ACr),e(yo,Mve),e(Mve,yCr),e(yo,LCr),g(qL,yo,null),b(c,iBe,_),b(c,om,_),e(om,$C),e($C,Eve),g(NL,Eve,null),e(om,xCr),e(om,Cve),e(Cve,kCr),b(c,dBe,_),b(c,Br,_),g(jL,Br,null),e(Br,SCr),e(Br,rm),e(rm,RCr),e(rm,GQ),e(GQ,BCr),e(rm,PCr),e(rm,OQ),e(OQ,$Cr),e(rm,ICr),e(Br,qCr),e(Br,DL),e(DL,NCr),e(DL,wve),e(wve,jCr),e(DL,DCr),e(Br,GCr),e(Br,yt),g(GL,yt,null),e(yt,OCr),e(yt,Ave),e(Ave,VCr),e(yt,XCr),e(yt,tm),e(tm,zCr),e(tm,yve),e(yve,QCr),e(tm,WCr),e(tm,VQ),e(VQ,HCr),e(tm,UCr),e(yt,JCr),e(yt,Lve),e(Lve,YCr),e(yt,KCr),g(OL,yt,null),e(Br,ZCr),e(Br,Lo),g(VL,Lo,null),e(Lo,e5r),e(Lo,xve),e(xve,o5r),e(Lo,r5r),e(Lo,kn),e(kn,t5r),e(kn,kve),e(kve,a5r),e(kn,n5r),e(kn,Sve),e(Sve,s5r),e(kn,l5r),e(kn,Rve),e(Rve,i5r),e(kn,d5r),e(Lo,c5r),e(Lo,ca),e(ca,IC),e(IC,Bve),e(Bve,m5r),e(IC,f5r),e(IC,XQ),e(XQ,g5r),e(IC,h5r),e(ca,u5r),e(ca,qC),e(qC,Pve),e(Pve,p5r),e(qC,_5r),e(qC,zQ),e(zQ,b5r),e(qC,F5r),e(ca,v5r),e(ca,NC),e(NC,$ve),e($ve,T5r),e(NC,M5r),e(NC,QQ),e(QQ,E5r),e(NC,C5r),e(ca,w5r),e(ca,jC),e(jC,Ive),e(Ive,A5r),e(jC,y5r),e(jC,WQ),e(WQ,L5r),e(jC,x5r),e(ca,k5r),e(ca,DC),e(DC,qve),e(qve,S5r),e(DC,R5r),e(DC,HQ),e(HQ,B5r),e(DC,P5r),e(Lo,$5r),e(Lo,Nve),e(Nve,I5r),e(Lo,q5r),g(XL,Lo,null),b(c,cBe,_),b(c,am,_),e(am,GC),e(GC,jve),g(zL,jve,null),e(am,N5r),e(am,Dve),e(Dve,j5r),b(c,mBe,_),b(c,Pr,_),g(QL,Pr,null),e(Pr,D5r),e(Pr,nm),e(nm,G5r),e(nm,UQ),e(UQ,O5r),e(nm,V5r),e(nm,JQ),e(JQ,X5r),e(nm,z5r),e(Pr,Q5r),e(Pr,WL),e(WL,W5r),e(WL,Gve),e(Gve,H5r),e(WL,U5r),e(Pr,J5r),e(Pr,Lt),g(HL,Lt,null),e(Lt,Y5r),e(Lt,Ove),e(Ove,K5r),e(Lt,Z5r),e(Lt,sm),e(sm,e3r),e(sm,Vve),e(Vve,o3r),e(sm,r3r),e(sm,YQ),e(YQ,t3r),e(sm,a3r),e(Lt,n3r),e(Lt,Xve),e(Xve,s3r),e(Lt,l3r),g(UL,Lt,null),e(Pr,i3r),e(Pr,xo),g(JL,xo,null),e(xo,d3r),e(xo,zve),e(zve,c3r),e(xo,m3r),e(xo,Sn),e(Sn,f3r),e(Sn,Qve),e(Qve,g3r),e(Sn,h3r),e(Sn,Wve),e(Wve,u3r),e(Sn,p3r),e(Sn,Hve),e(Hve,_3r),e(Sn,b3r),e(xo,F3r),e(xo,me),e(me,OC),e(OC,Uve),e(Uve,v3r),e(OC,T3r),e(OC,KQ),e(KQ,M3r),e(OC,E3r),e(me,C3r),e(me,VC),e(VC,Jve),e(Jve,w3r),e(VC,A3r),e(VC,ZQ),e(ZQ,y3r),e(VC,L3r),e(me,x3r),e(me,XC),e(XC,Yve),e(Yve,k3r),e(XC,S3r),e(XC,eW),e(eW,R3r),e(XC,B3r),e(me,P3r),e(me,zC),e(zC,Kve),e(Kve,$3r),e(zC,I3r),e(zC,oW),e(oW,q3r),e(zC,N3r),e(me,j3r),e(me,QC),e(QC,Zve),e(Zve,D3r),e(QC,G3r),e(QC,rW),e(rW,O3r),e(QC,V3r),e(me,X3r),e(me,WC),e(WC,eTe),e(eTe,z3r),e(WC,Q3r),e(WC,tW),e(tW,W3r),e(WC,H3r),e(me,U3r),e(me,HC),e(HC,oTe),e(oTe,J3r),e(HC,Y3r),e(HC,aW),e(aW,K3r),e(HC,Z3r),e(me,ewr),e(me,UC),e(UC,rTe),e(rTe,owr),e(UC,rwr),e(UC,nW),e(nW,twr),e(UC,awr),e(me,nwr),e(me,JC),e(JC,tTe),e(tTe,swr),e(JC,lwr),e(JC,sW),e(sW,iwr),e(JC,dwr),e(me,cwr),e(me,YC),e(YC,aTe),e(aTe,mwr),e(YC,fwr),e(YC,lW),e(lW,gwr),e(YC,hwr),e(me,uwr),e(me,KC),e(KC,nTe),e(nTe,pwr),e(KC,_wr),e(KC,iW),e(iW,bwr),e(KC,Fwr),e(me,vwr),e(me,ZC),e(ZC,sTe),e(sTe,Twr),e(ZC,Mwr),e(ZC,dW),e(dW,Ewr),e(ZC,Cwr),e(xo,wwr),e(xo,lTe),e(lTe,Awr),e(xo,ywr),g(YL,xo,null),b(c,fBe,_),b(c,lm,_),e(lm,e5),e(e5,iTe),g(KL,iTe,null),e(lm,Lwr),e(lm,dTe),e(dTe,xwr),b(c,gBe,_),b(c,$r,_),g(ZL,$r,null),e($r,kwr),e($r,im),e(im,Swr),e(im,cW),e(cW,Rwr),e(im,Bwr),e(im,mW),e(mW,Pwr),e(im,$wr),e($r,Iwr),e($r,e7),e(e7,qwr),e(e7,cTe),e(cTe,Nwr),e(e7,jwr),e($r,Dwr),e($r,xt),g(o7,xt,null),e(xt,Gwr),e(xt,mTe),e(mTe,Owr),e(xt,Vwr),e(xt,dm),e(dm,Xwr),e(dm,fTe),e(fTe,zwr),e(dm,Qwr),e(dm,fW),e(fW,Wwr),e(dm,Hwr),e(xt,Uwr),e(xt,gTe),e(gTe,Jwr),e(xt,Ywr),g(r7,xt,null),e($r,Kwr),e($r,ko),g(t7,ko,null),e(ko,Zwr),e(ko,hTe),e(hTe,eAr),e(ko,oAr),e(ko,Rn),e(Rn,rAr),e(Rn,uTe),e(uTe,tAr),e(Rn,aAr),e(Rn,pTe),e(pTe,nAr),e(Rn,sAr),e(Rn,_Te),e(_Te,lAr),e(Rn,iAr),e(ko,dAr),e(ko,be),e(be,o5),e(o5,bTe),e(bTe,cAr),e(o5,mAr),e(o5,gW),e(gW,fAr),e(o5,gAr),e(be,hAr),e(be,r5),e(r5,FTe),e(FTe,uAr),e(r5,pAr),e(r5,hW),e(hW,_Ar),e(r5,bAr),e(be,FAr),e(be,t5),e(t5,vTe),e(vTe,vAr),e(t5,TAr),e(t5,uW),e(uW,MAr),e(t5,EAr),e(be,CAr),e(be,a5),e(a5,TTe),e(TTe,wAr),e(a5,AAr),e(a5,pW),e(pW,yAr),e(a5,LAr),e(be,xAr),e(be,n5),e(n5,MTe),e(MTe,kAr),e(n5,SAr),e(n5,_W),e(_W,RAr),e(n5,BAr),e(be,PAr),e(be,s5),e(s5,ETe),e(ETe,$Ar),e(s5,IAr),e(s5,bW),e(bW,qAr),e(s5,NAr),e(be,jAr),e(be,l5),e(l5,CTe),e(CTe,DAr),e(l5,GAr),e(l5,FW),e(FW,OAr),e(l5,VAr),e(be,XAr),e(be,i5),e(i5,wTe),e(wTe,zAr),e(i5,QAr),e(i5,vW),e(vW,WAr),e(i5,HAr),e(be,UAr),e(be,d5),e(d5,ATe),e(ATe,JAr),e(d5,YAr),e(d5,TW),e(TW,KAr),e(d5,ZAr),e(be,e6r),e(be,c5),e(c5,yTe),e(yTe,o6r),e(c5,r6r),e(c5,MW),e(MW,t6r),e(c5,a6r),e(ko,n6r),e(ko,LTe),e(LTe,s6r),e(ko,l6r),g(a7,ko,null),b(c,hBe,_),b(c,cm,_),e(cm,m5),e(m5,xTe),g(n7,xTe,null),e(cm,i6r),e(cm,kTe),e(kTe,d6r),b(c,uBe,_),b(c,Ir,_),g(s7,Ir,null),e(Ir,c6r),e(Ir,mm),e(mm,m6r),e(mm,EW),e(EW,f6r),e(mm,g6r),e(mm,CW),e(CW,h6r),e(mm,u6r),e(Ir,p6r),e(Ir,l7),e(l7,_6r),e(l7,STe),e(STe,b6r),e(l7,F6r),e(Ir,v6r),e(Ir,kt),g(i7,kt,null),e(kt,T6r),e(kt,RTe),e(RTe,M6r),e(kt,E6r),e(kt,fm),e(fm,C6r),e(fm,BTe),e(BTe,w6r),e(fm,A6r),e(fm,wW),e(wW,y6r),e(fm,L6r),e(kt,x6r),e(kt,PTe),e(PTe,k6r),e(kt,S6r),g(d7,kt,null),e(Ir,R6r),e(Ir,So),g(c7,So,null),e(So,B6r),e(So,$Te),e($Te,P6r),e(So,$6r),e(So,Bn),e(Bn,I6r),e(Bn,ITe),e(ITe,q6r),e(Bn,N6r),e(Bn,qTe),e(qTe,j6r),e(Bn,D6r),e(Bn,NTe),e(NTe,G6r),e(Bn,O6r),e(So,V6r),e(So,Ee),e(Ee,f5),e(f5,jTe),e(jTe,X6r),e(f5,z6r),e(f5,AW),e(AW,Q6r),e(f5,W6r),e(Ee,H6r),e(Ee,g5),e(g5,DTe),e(DTe,U6r),e(g5,J6r),e(g5,yW),e(yW,Y6r),e(g5,K6r),e(Ee,Z6r),e(Ee,h5),e(h5,GTe),e(GTe,e0r),e(h5,o0r),e(h5,LW),e(LW,r0r),e(h5,t0r),e(Ee,a0r),e(Ee,u5),e(u5,OTe),e(OTe,n0r),e(u5,s0r),e(u5,xW),e(xW,l0r),e(u5,i0r),e(Ee,d0r),e(Ee,p5),e(p5,VTe),e(VTe,c0r),e(p5,m0r),e(p5,kW),e(kW,f0r),e(p5,g0r),e(Ee,h0r),e(Ee,_5),e(_5,XTe),e(XTe,u0r),e(_5,p0r),e(_5,SW),e(SW,_0r),e(_5,b0r),e(Ee,F0r),e(Ee,b5),e(b5,zTe),e(zTe,v0r),e(b5,T0r),e(b5,RW),e(RW,M0r),e(b5,E0r),e(Ee,C0r),e(Ee,F5),e(F5,QTe),e(QTe,w0r),e(F5,A0r),e(F5,BW),e(BW,y0r),e(F5,L0r),e(Ee,x0r),e(Ee,v5),e(v5,WTe),e(WTe,k0r),e(v5,S0r),e(v5,PW),e(PW,R0r),e(v5,B0r),e(So,P0r),e(So,HTe),e(HTe,$0r),e(So,I0r),g(m7,So,null),b(c,pBe,_),b(c,gm,_),e(gm,T5),e(T5,UTe),g(f7,UTe,null),e(gm,q0r),e(gm,JTe),e(JTe,N0r),b(c,_Be,_),b(c,qr,_),g(g7,qr,null),e(qr,j0r),e(qr,hm),e(hm,D0r),e(hm,$W),e($W,G0r),e(hm,O0r),e(hm,IW),e(IW,V0r),e(hm,X0r),e(qr,z0r),e(qr,h7),e(h7,Q0r),e(h7,YTe),e(YTe,W0r),e(h7,H0r),e(qr,U0r),e(qr,St),g(u7,St,null),e(St,J0r),e(St,KTe),e(KTe,Y0r),e(St,K0r),e(St,um),e(um,Z0r),e(um,ZTe),e(ZTe,eyr),e(um,oyr),e(um,qW),e(qW,ryr),e(um,tyr),e(St,ayr),e(St,e1e),e(e1e,nyr),e(St,syr),g(p7,St,null),e(qr,lyr),e(qr,Ro),g(_7,Ro,null),e(Ro,iyr),e(Ro,o1e),e(o1e,dyr),e(Ro,cyr),e(Ro,Pn),e(Pn,myr),e(Pn,r1e),e(r1e,fyr),e(Pn,gyr),e(Pn,t1e),e(t1e,hyr),e(Pn,uyr),e(Pn,a1e),e(a1e,pyr),e(Pn,_yr),e(Ro,byr),e(Ro,Fe),e(Fe,M5),e(M5,n1e),e(n1e,Fyr),e(M5,vyr),e(M5,NW),e(NW,Tyr),e(M5,Myr),e(Fe,Eyr),e(Fe,E5),e(E5,s1e),e(s1e,Cyr),e(E5,wyr),e(E5,jW),e(jW,Ayr),e(E5,yyr),e(Fe,Lyr),e(Fe,C5),e(C5,l1e),e(l1e,xyr),e(C5,kyr),e(C5,DW),e(DW,Syr),e(C5,Ryr),e(Fe,Byr),e(Fe,w5),e(w5,i1e),e(i1e,Pyr),e(w5,$yr),e(w5,GW),e(GW,Iyr),e(w5,qyr),e(Fe,Nyr),e(Fe,A5),e(A5,d1e),e(d1e,jyr),e(A5,Dyr),e(A5,OW),e(OW,Gyr),e(A5,Oyr),e(Fe,Vyr),e(Fe,y5),e(y5,c1e),e(c1e,Xyr),e(y5,zyr),e(y5,VW),e(VW,Qyr),e(y5,Wyr),e(Fe,Hyr),e(Fe,L5),e(L5,m1e),e(m1e,Uyr),e(L5,Jyr),e(L5,XW),e(XW,Yyr),e(L5,Kyr),e(Fe,Zyr),e(Fe,x5),e(x5,f1e),e(f1e,eLr),e(x5,oLr),e(x5,zW),e(zW,rLr),e(x5,tLr),e(Fe,aLr),e(Fe,k5),e(k5,g1e),e(g1e,nLr),e(k5,sLr),e(k5,QW),e(QW,lLr),e(k5,iLr),e(Fe,dLr),e(Fe,S5),e(S5,h1e),e(h1e,cLr),e(S5,mLr),e(S5,WW),e(WW,fLr),e(S5,gLr),e(Ro,hLr),e(Ro,u1e),e(u1e,uLr),e(Ro,pLr),g(b7,Ro,null),b(c,bBe,_),b(c,pm,_),e(pm,R5),e(R5,p1e),g(F7,p1e,null),e(pm,_Lr),e(pm,_1e),e(_1e,bLr),b(c,FBe,_),b(c,Nr,_),g(v7,Nr,null),e(Nr,FLr),e(Nr,_m),e(_m,vLr),e(_m,HW),e(HW,TLr),e(_m,MLr),e(_m,UW),e(UW,ELr),e(_m,CLr),e(Nr,wLr),e(Nr,T7),e(T7,ALr),e(T7,b1e),e(b1e,yLr),e(T7,LLr),e(Nr,xLr),e(Nr,Rt),g(M7,Rt,null),e(Rt,kLr),e(Rt,F1e),e(F1e,SLr),e(Rt,RLr),e(Rt,bm),e(bm,BLr),e(bm,v1e),e(v1e,PLr),e(bm,$Lr),e(bm,JW),e(JW,ILr),e(bm,qLr),e(Rt,NLr),e(Rt,T1e),e(T1e,jLr),e(Rt,DLr),g(E7,Rt,null),e(Nr,GLr),e(Nr,Bo),g(C7,Bo,null),e(Bo,OLr),e(Bo,M1e),e(M1e,VLr),e(Bo,XLr),e(Bo,$n),e($n,zLr),e($n,E1e),e(E1e,QLr),e($n,WLr),e($n,C1e),e(C1e,HLr),e($n,ULr),e($n,w1e),e(w1e,JLr),e($n,YLr),e(Bo,KLr),e(Bo,ve),e(ve,B5),e(B5,A1e),e(A1e,ZLr),e(B5,e7r),e(B5,YW),e(YW,o7r),e(B5,r7r),e(ve,t7r),e(ve,P5),e(P5,y1e),e(y1e,a7r),e(P5,n7r),e(P5,KW),e(KW,s7r),e(P5,l7r),e(ve,i7r),e(ve,$5),e($5,L1e),e(L1e,d7r),e($5,c7r),e($5,ZW),e(ZW,m7r),e($5,f7r),e(ve,g7r),e(ve,I5),e(I5,x1e),e(x1e,h7r),e(I5,u7r),e(I5,eH),e(eH,p7r),e(I5,_7r),e(ve,b7r),e(ve,q5),e(q5,k1e),e(k1e,F7r),e(q5,v7r),e(q5,oH),e(oH,T7r),e(q5,M7r),e(ve,E7r),e(ve,N5),e(N5,S1e),e(S1e,C7r),e(N5,w7r),e(N5,rH),e(rH,A7r),e(N5,y7r),e(ve,L7r),e(ve,j5),e(j5,R1e),e(R1e,x7r),e(j5,k7r),e(j5,tH),e(tH,S7r),e(j5,R7r),e(ve,B7r),e(ve,D5),e(D5,B1e),e(B1e,P7r),e(D5,$7r),e(D5,aH),e(aH,I7r),e(D5,q7r),e(ve,N7r),e(ve,G5),e(G5,P1e),e(P1e,j7r),e(G5,D7r),e(G5,nH),e(nH,G7r),e(G5,O7r),e(ve,V7r),e(ve,O5),e(O5,$1e),e($1e,X7r),e(O5,z7r),e(O5,sH),e(sH,Q7r),e(O5,W7r),e(Bo,H7r),e(Bo,I1e),e(I1e,U7r),e(Bo,J7r),g(w7,Bo,null),b(c,vBe,_),b(c,Fm,_),e(Fm,V5),e(V5,q1e),g(A7,q1e,null),e(Fm,Y7r),e(Fm,N1e),e(N1e,K7r),b(c,TBe,_),b(c,jr,_),g(y7,jr,null),e(jr,Z7r),e(jr,vm),e(vm,e8r),e(vm,lH),e(lH,o8r),e(vm,r8r),e(vm,iH),e(iH,t8r),e(vm,a8r),e(jr,n8r),e(jr,L7),e(L7,s8r),e(L7,j1e),e(j1e,l8r),e(L7,i8r),e(jr,d8r),e(jr,Bt),g(x7,Bt,null),e(Bt,c8r),e(Bt,D1e),e(D1e,m8r),e(Bt,f8r),e(Bt,Tm),e(Tm,g8r),e(Tm,G1e),e(G1e,h8r),e(Tm,u8r),e(Tm,dH),e(dH,p8r),e(Tm,_8r),e(Bt,b8r),e(Bt,O1e),e(O1e,F8r),e(Bt,v8r),g(k7,Bt,null),e(jr,T8r),e(jr,Po),g(S7,Po,null),e(Po,M8r),e(Po,V1e),e(V1e,E8r),e(Po,C8r),e(Po,In),e(In,w8r),e(In,X1e),e(X1e,A8r),e(In,y8r),e(In,z1e),e(z1e,L8r),e(In,x8r),e(In,Q1e),e(Q1e,k8r),e(In,S8r),e(Po,R8r),e(Po,Be),e(Be,X5),e(X5,W1e),e(W1e,B8r),e(X5,P8r),e(X5,cH),e(cH,$8r),e(X5,I8r),e(Be,q8r),e(Be,z5),e(z5,H1e),e(H1e,N8r),e(z5,j8r),e(z5,mH),e(mH,D8r),e(z5,G8r),e(Be,O8r),e(Be,Q5),e(Q5,U1e),e(U1e,V8r),e(Q5,X8r),e(Q5,fH),e(fH,z8r),e(Q5,Q8r),e(Be,W8r),e(Be,W5),e(W5,J1e),e(J1e,H8r),e(W5,U8r),e(W5,gH),e(gH,J8r),e(W5,Y8r),e(Be,K8r),e(Be,H5),e(H5,Y1e),e(Y1e,Z8r),e(H5,e9r),e(H5,hH),e(hH,o9r),e(H5,r9r),e(Be,t9r),e(Be,U5),e(U5,K1e),e(K1e,a9r),e(U5,n9r),e(U5,uH),e(uH,s9r),e(U5,l9r),e(Be,i9r),e(Be,J5),e(J5,Z1e),e(Z1e,d9r),e(J5,c9r),e(J5,pH),e(pH,m9r),e(J5,f9r),e(Be,g9r),e(Be,Y5),e(Y5,eMe),e(eMe,h9r),e(Y5,u9r),e(Y5,_H),e(_H,p9r),e(Y5,_9r),e(Po,b9r),e(Po,oMe),e(oMe,F9r),e(Po,v9r),g(R7,Po,null),b(c,MBe,_),b(c,Mm,_),e(Mm,K5),e(K5,rMe),g(B7,rMe,null),e(Mm,T9r),e(Mm,tMe),e(tMe,M9r),b(c,EBe,_),b(c,Dr,_),g(P7,Dr,null),e(Dr,E9r),e(Dr,Em),e(Em,C9r),e(Em,bH),e(bH,w9r),e(Em,A9r),e(Em,FH),e(FH,y9r),e(Em,L9r),e(Dr,x9r),e(Dr,$7),e($7,k9r),e($7,aMe),e(aMe,S9r),e($7,R9r),e(Dr,B9r),e(Dr,Pt),g(I7,Pt,null),e(Pt,P9r),e(Pt,nMe),e(nMe,$9r),e(Pt,I9r),e(Pt,Cm),e(Cm,q9r),e(Cm,sMe),e(sMe,N9r),e(Cm,j9r),e(Cm,vH),e(vH,D9r),e(Cm,G9r),e(Pt,O9r),e(Pt,lMe),e(lMe,V9r),e(Pt,X9r),g(q7,Pt,null),e(Dr,z9r),e(Dr,$o),g(N7,$o,null),e($o,Q9r),e($o,iMe),e(iMe,W9r),e($o,H9r),e($o,qn),e(qn,U9r),e(qn,dMe),e(dMe,J9r),e(qn,Y9r),e(qn,cMe),e(cMe,K9r),e(qn,Z9r),e(qn,mMe),e(mMe,exr),e(qn,oxr),e($o,rxr),e($o,Pe),e(Pe,Z5),e(Z5,fMe),e(fMe,txr),e(Z5,axr),e(Z5,TH),e(TH,nxr),e(Z5,sxr),e(Pe,lxr),e(Pe,e3),e(e3,gMe),e(gMe,ixr),e(e3,dxr),e(e3,MH),e(MH,cxr),e(e3,mxr),e(Pe,fxr),e(Pe,o3),e(o3,hMe),e(hMe,gxr),e(o3,hxr),e(o3,EH),e(EH,uxr),e(o3,pxr),e(Pe,_xr),e(Pe,r3),e(r3,uMe),e(uMe,bxr),e(r3,Fxr),e(r3,CH),e(CH,vxr),e(r3,Txr),e(Pe,Mxr),e(Pe,t3),e(t3,pMe),e(pMe,Exr),e(t3,Cxr),e(t3,wH),e(wH,wxr),e(t3,Axr),e(Pe,yxr),e(Pe,a3),e(a3,_Me),e(_Me,Lxr),e(a3,xxr),e(a3,AH),e(AH,kxr),e(a3,Sxr),e(Pe,Rxr),e(Pe,n3),e(n3,bMe),e(bMe,Bxr),e(n3,Pxr),e(n3,yH),e(yH,$xr),e(n3,Ixr),e(Pe,qxr),e(Pe,s3),e(s3,FMe),e(FMe,Nxr),e(s3,jxr),e(s3,LH),e(LH,Dxr),e(s3,Gxr),e($o,Oxr),e($o,vMe),e(vMe,Vxr),e($o,Xxr),g(j7,$o,null),b(c,CBe,_),b(c,wm,_),e(wm,l3),e(l3,TMe),g(D7,TMe,null),e(wm,zxr),e(wm,MMe),e(MMe,Qxr),b(c,wBe,_),b(c,Gr,_),g(G7,Gr,null),e(Gr,Wxr),e(Gr,Am),e(Am,Hxr),e(Am,xH),e(xH,Uxr),e(Am,Jxr),e(Am,kH),e(kH,Yxr),e(Am,Kxr),e(Gr,Zxr),e(Gr,O7),e(O7,ekr),e(O7,EMe),e(EMe,okr),e(O7,rkr),e(Gr,tkr),e(Gr,$t),g(V7,$t,null),e($t,akr),e($t,CMe),e(CMe,nkr),e($t,skr),e($t,ym),e(ym,lkr),e(ym,wMe),e(wMe,ikr),e(ym,dkr),e(ym,SH),e(SH,ckr),e(ym,mkr),e($t,fkr),e($t,AMe),e(AMe,gkr),e($t,hkr),g(X7,$t,null),e(Gr,ukr),e(Gr,Io),g(z7,Io,null),e(Io,pkr),e(Io,yMe),e(yMe,_kr),e(Io,bkr),e(Io,Nn),e(Nn,Fkr),e(Nn,LMe),e(LMe,vkr),e(Nn,Tkr),e(Nn,xMe),e(xMe,Mkr),e(Nn,Ekr),e(Nn,kMe),e(kMe,Ckr),e(Nn,wkr),e(Io,Akr),e(Io,SMe),e(SMe,i3),e(i3,RMe),e(RMe,ykr),e(i3,Lkr),e(i3,RH),e(RH,xkr),e(i3,kkr),e(Io,Skr),e(Io,BMe),e(BMe,Rkr),e(Io,Bkr),g(Q7,Io,null),b(c,ABe,_),b(c,Lm,_),e(Lm,d3),e(d3,PMe),g(W7,PMe,null),e(Lm,Pkr),e(Lm,$Me),e($Me,$kr),b(c,yBe,_),b(c,Or,_),g(H7,Or,null),e(Or,Ikr),e(Or,xm),e(xm,qkr),e(xm,BH),e(BH,Nkr),e(xm,jkr),e(xm,PH),e(PH,Dkr),e(xm,Gkr),e(Or,Okr),e(Or,U7),e(U7,Vkr),e(U7,IMe),e(IMe,Xkr),e(U7,zkr),e(Or,Qkr),e(Or,It),g(J7,It,null),e(It,Wkr),e(It,qMe),e(qMe,Hkr),e(It,Ukr),e(It,km),e(km,Jkr),e(km,NMe),e(NMe,Ykr),e(km,Kkr),e(km,$H),e($H,Zkr),e(km,eSr),e(It,oSr),e(It,jMe),e(jMe,rSr),e(It,tSr),g(Y7,It,null),e(Or,aSr),e(Or,qo),g(K7,qo,null),e(qo,nSr),e(qo,DMe),e(DMe,sSr),e(qo,lSr),e(qo,jn),e(jn,iSr),e(jn,GMe),e(GMe,dSr),e(jn,cSr),e(jn,OMe),e(OMe,mSr),e(jn,fSr),e(jn,VMe),e(VMe,gSr),e(jn,hSr),e(qo,uSr),e(qo,Z7),e(Z7,c3),e(c3,XMe),e(XMe,pSr),e(c3,_Sr),e(c3,IH),e(IH,bSr),e(c3,FSr),e(Z7,vSr),e(Z7,m3),e(m3,zMe),e(zMe,TSr),e(m3,MSr),e(m3,qH),e(qH,ESr),e(m3,CSr),e(qo,wSr),e(qo,QMe),e(QMe,ASr),e(qo,ySr),g(e8,qo,null),b(c,LBe,_),b(c,Sm,_),e(Sm,f3),e(f3,WMe),g(o8,WMe,null),e(Sm,LSr),e(Sm,HMe),e(HMe,xSr),b(c,xBe,_),b(c,Vr,_),g(r8,Vr,null),e(Vr,kSr),e(Vr,Rm),e(Rm,SSr),e(Rm,NH),e(NH,RSr),e(Rm,BSr),e(Rm,jH),e(jH,PSr),e(Rm,$Sr),e(Vr,ISr),e(Vr,t8),e(t8,qSr),e(t8,UMe),e(UMe,NSr),e(t8,jSr),e(Vr,DSr),e(Vr,qt),g(a8,qt,null),e(qt,GSr),e(qt,JMe),e(JMe,OSr),e(qt,VSr),e(qt,Bm),e(Bm,XSr),e(Bm,YMe),e(YMe,zSr),e(Bm,QSr),e(Bm,DH),e(DH,WSr),e(Bm,HSr),e(qt,USr),e(qt,KMe),e(KMe,JSr),e(qt,YSr),g(n8,qt,null),e(Vr,KSr),e(Vr,No),g(s8,No,null),e(No,ZSr),e(No,ZMe),e(ZMe,eRr),e(No,oRr),e(No,Dn),e(Dn,rRr),e(Dn,e4e),e(e4e,tRr),e(Dn,aRr),e(Dn,o4e),e(o4e,nRr),e(Dn,sRr),e(Dn,r4e),e(r4e,lRr),e(Dn,iRr),e(No,dRr),e(No,t4e),e(t4e,g3),e(g3,a4e),e(a4e,cRr),e(g3,mRr),e(g3,GH),e(GH,fRr),e(g3,gRr),e(No,hRr),e(No,n4e),e(n4e,uRr),e(No,pRr),g(l8,No,null),kBe=!0},p(c,[_]){const i8={};_&2&&(i8.$$scope={dirty:_,ctx:c}),Gm.$set(i8);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:c}),Rh.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:c}),Vh.$set(l4e)},i(c){kBe||(h(fe.$$.fragment,c),h(Da.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(Gm.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h(qw.$$.fragment,c),h(Rh.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Xw.$$.fragment,c),h(Vh.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(u6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(F6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(C6.$$.fragment,c),h(A6.$$.fragment,c),h(y6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(S6.$$.fragment,c),h(B6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(N6.$$.fragment,c),h(D6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(u0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(uy.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(f7.$$.fragment,c),h(g7.$$.fragment,c),h(u7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(F7.$$.fragment,c),h(v7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(C7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(y7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(S7.$$.fragment,c),h(R7.$$.fragment,c),h(B7.$$.fragment,c),h(P7.$$.fragment,c),h(I7.$$.fragment,c),h(q7.$$.fragment,c),h(N7.$$.fragment,c),h(j7.$$.fragment,c),h(D7.$$.fragment,c),h(G7.$$.fragment,c),h(V7.$$.fragment,c),h(X7.$$.fragment,c),h(z7.$$.fragment,c),h(Q7.$$.fragment,c),h(W7.$$.fragment,c),h(H7.$$.fragment,c),h(J7.$$.fragment,c),h(Y7.$$.fragment,c),h(K7.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),kBe=!0)},o(c){u(fe.$$.fragment,c),u(Da.$$.fragment,c),u(_w.$$.fragment,c),u(bw.$$.fragment,c),u(Gm.$$.fragment,c),u(Fw.$$.fragment,c),u(vw.$$.fragment,c),u(Ew.$$.fragment,c),u(Cw.$$.fragment,c),u(ww.$$.fragment,c),u(Aw.$$.fragment,c),u(yw.$$.fragment,c),u(kw.$$.fragment,c),u(Sw.$$.fragment,c),u(Rw.$$.fragment,c),u(Bw.$$.fragment,c),u(Pw.$$.fragment,c),u(qw.$$.fragment,c),u(Rh.$$.fragment,c),u(Nw.$$.fragment,c),u(jw.$$.fragment,c),u(Dw.$$.fragment,c),u(Gw.$$.fragment,c),u(Xw.$$.fragment,c),u(Vh.$$.fragment,c),u(zw.$$.fragment,c),u(Qw.$$.fragment,c),u(Ww.$$.fragment,c),u(Hw.$$.fragment,c),u(Jw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(tA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(sA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(fA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(FA.$$.fragment,c),u(vA.$$.fragment,c),u(TA.$$.fragment,c),u(MA.$$.fragment,c),u(CA.$$.fragment,c),u(wA.$$.fragment,c),u(AA.$$.fragment,c),u(yA.$$.fragment,c),u(LA.$$.fragment,c),u(xA.$$.fragment,c),u(SA.$$.fragment,c),u(RA.$$.fragment,c),u(BA.$$.fragment,c),u(PA.$$.fragment,c),u($A.$$.fragment,c),u(IA.$$.fragment,c),u(NA.$$.fragment,c),u(jA.$$.fragment,c),u(DA.$$.fragment,c),u(GA.$$.fragment,c),u(OA.$$.fragment,c),u(VA.$$.fragment,c),u(zA.$$.fragment,c),u(QA.$$.fragment,c),u(WA.$$.fragment,c),u(HA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(e6.$$.fragment,c),u(o6.$$.fragment,c),u(r6.$$.fragment,c),u(t6.$$.fragment,c),u(n6.$$.fragment,c),u(s6.$$.fragment,c),u(l6.$$.fragment,c),u(i6.$$.fragment,c),u(d6.$$.fragment,c),u(c6.$$.fragment,c),u(f6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(u6.$$.fragment,c),u(p6.$$.fragment,c),u(_6.$$.fragment,c),u(F6.$$.fragment,c),u(v6.$$.fragment,c),u(T6.$$.fragment,c),u(M6.$$.fragment,c),u(E6.$$.fragment,c),u(C6.$$.fragment,c),u(A6.$$.fragment,c),u(y6.$$.fragment,c),u(L6.$$.fragment,c),u(x6.$$.fragment,c),u(k6.$$.fragment,c),u(S6.$$.fragment,c),u(B6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(I6.$$.fragment,c),u(q6.$$.fragment,c),u(N6.$$.fragment,c),u(D6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(V6.$$.fragment,c),u(X6.$$.fragment,c),u(z6.$$.fragment,c),u(W6.$$.fragment,c),u(H6.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(Y6.$$.fragment,c),u(K6.$$.fragment,c),u(e0.$$.fragment,c),u(o0.$$.fragment,c),u(r0.$$.fragment,c),u(a0.$$.fragment,c),u(n0.$$.fragment,c),u(s0.$$.fragment,c),u(i0.$$.fragment,c),u(d0.$$.fragment,c),u(c0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(g0.$$.fragment,c),u(u0.$$.fragment,c),u(p0.$$.fragment,c),u(_0.$$.fragment,c),u(b0.$$.fragment,c),u(F0.$$.fragment,c),u(v0.$$.fragment,c),u(M0.$$.fragment,c),u(E0.$$.fragment,c),u(C0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(y0.$$.fragment,c),u(x0.$$.fragment,c),u(k0.$$.fragment,c),u(S0.$$.fragment,c),u(R0.$$.fragment,c),u(B0.$$.fragment,c),u(P0.$$.fragment,c),u(I0.$$.fragment,c),u(q0.$$.fragment,c),u(N0.$$.fragment,c),u(j0.$$.fragment,c),u(D0.$$.fragment,c),u(G0.$$.fragment,c),u(V0.$$.fragment,c),u(X0.$$.fragment,c),u(z0.$$.fragment,c),u(Q0.$$.fragment,c),u(W0.$$.fragment,c),u(H0.$$.fragment,c),u(J0.$$.fragment,c),u(Y0.$$.fragment,c),u(K0.$$.fragment,c),u(Z0.$$.fragment,c),u(ey.$$.fragment,c),u(oy.$$.fragment,c),u(ty.$$.fragment,c),u(ay.$$.fragment,c),u(ny.$$.fragment,c),u(sy.$$.fragment,c),u(ly.$$.fragment,c),u(iy.$$.fragment,c),u(cy.$$.fragment,c),u(my.$$.fragment,c),u(fy.$$.fragment,c),u(gy.$$.fragment,c),u(hy.$$.fragment,c),u(uy.$$.fragment,c),u(_y.$$.fragment,c),u(by.$$.fragment,c),u(Fy.$$.fragment,c),u(Ty.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(wy.$$.fragment,c),u(Ay.$$.fragment,c),u(yy.$$.fragment,c),u(Ly.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Ry.$$.fragment,c),u(By.$$.fragment,c),u(Py.$$.fragment,c),u($y.$$.fragment,c),u(Iy.$$.fragment,c),u(qy.$$.fragment,c),u(jy.$$.fragment,c),u(Dy.$$.fragment,c),u(Gy.$$.fragment,c),u(Oy.$$.fragment,c),u(Vy.$$.fragment,c),u(Xy.$$.fragment,c),u(Qy.$$.fragment,c),u(Wy.$$.fragment,c),u(Hy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Zy.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(rL.$$.fragment,c),u(tL.$$.fragment,c),u(aL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(dL.$$.fragment,c),u(cL.$$.fragment,c),u(mL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(pL.$$.fragment,c),u(_L.$$.fragment,c),u(bL.$$.fragment,c),u(vL.$$.fragment,c),u(TL.$$.fragment,c),u(ML.$$.fragment,c),u(EL.$$.fragment,c),u(CL.$$.fragment,c),u(wL.$$.fragment,c),u(yL.$$.fragment,c),u(LL.$$.fragment,c),u(xL.$$.fragment,c),u(kL.$$.fragment,c),u(SL.$$.fragment,c),u(RL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(qL.$$.fragment,c),u(NL.$$.fragment,c),u(jL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(VL.$$.fragment,c),u(XL.$$.fragment,c),u(zL.$$.fragment,c),u(QL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(YL.$$.fragment,c),u(KL.$$.fragment,c),u(ZL.$$.fragment,c),u(o7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(a7.$$.fragment,c),u(n7.$$.fragment,c),u(s7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),u(c7.$$.fragment,c),u(m7.$$.fragment,c),u(f7.$$.fragment,c),u(g7.$$.fragment,c),u(u7.$$.fragment,c),u(p7.$$.fragment,c),u(_7.$$.fragment,c),u(b7.$$.fragment,c),u(F7.$$.fragment,c),u(v7.$$.fragment,c),u(M7.$$.fragment,c),u(E7.$$.fragment,c),u(C7.$$.fragment,c),u(w7.$$.fragment,c),u(A7.$$.fragment,c),u(y7.$$.fragment,c),u(x7.$$.fragment,c),u(k7.$$.fragment,c),u(S7.$$.fragment,c),u(R7.$$.fragment,c),u(B7.$$.fragment,c),u(P7.$$.fragment,c),u(I7.$$.fragment,c),u(q7.$$.fragment,c),u(N7.$$.fragment,c),u(j7.$$.fragment,c),u(D7.$$.fragment,c),u(G7.$$.fragment,c),u(V7.$$.fragment,c),u(X7.$$.fragment,c),u(z7.$$.fragment,c),u(Q7.$$.fragment,c),u(W7.$$.fragment,c),u(H7.$$.fragment,c),u(J7.$$.fragment,c),u(Y7.$$.fragment,c),u(K7.$$.fragment,c),u(e8.$$.fragment,c),u(o8.$$.fragment,c),u(r8.$$.fragment,c),u(a8.$$.fragment,c),u(n8.$$.fragment,c),u(s8.$$.fragment,c),u(l8.$$.fragment,c),kBe=!1},d(c){t(Z),c&&t(io),c&&t(de),p(fe),c&&t(Im),c&&t(ma),c&&t(xe),c&&t(co),c&&t(Nm),p(Da,c),c&&t(mo),c&&t(pe),c&&t(zo),c&&t(Ga),c&&t(xSe),c&&t(Vi),p(_w),c&&t(kSe),c&&t(zn),c&&t(SSe),p(bw,c),c&&t(RSe),c&&t(c9),c&&t(BSe),p(Gm,c),c&&t(PSe),c&&t(Xi),p(Fw),c&&t($Se),c&&t(Qo),p(vw),p(Ew),p(Cw),p(ww),c&&t(ISe),c&&t(Qi),p(Aw),c&&t(qSe),c&&t(Wo),p(yw),p(kw),p(Sw),p(Rw),c&&t(NSe),c&&t(Wi),p(Bw),c&&t(jSe),c&&t(Ho),p(Pw),p(qw),p(Rh),p(Nw),p(jw),c&&t(DSe),c&&t(Hi),p(Dw),c&&t(GSe),c&&t(Uo),p(Gw),p(Xw),p(Vh),p(zw),p(Qw),c&&t(OSe),c&&t(Ji),p(Ww),c&&t(VSe),c&&t(Jo),p(Hw),p(Jw),p(Yw),p(Kw),p(Zw),c&&t(XSe),c&&t(Zi),p(eA),c&&t(zSe),c&&t(Yo),p(oA),p(tA),p(aA),p(nA),p(sA),c&&t(QSe),c&&t(rd),p(lA),c&&t(WSe),c&&t(Ko),p(iA),p(cA),p(mA),p(fA),p(gA),c&&t(HSe),c&&t(nd),p(hA),c&&t(USe),c&&t(Zo),p(uA),p(_A),p(bA),p(FA),p(vA),c&&t(JSe),c&&t(id),p(TA),c&&t(YSe),c&&t(er),p(MA),p(CA),p(wA),p(AA),p(yA),c&&t(KSe),c&&t(md),p(LA),c&&t(ZSe),c&&t(or),p(xA),p(SA),p(RA),p(BA),p(PA),c&&t(eRe),c&&t(hd),p($A),c&&t(oRe),c&&t(rr),p(IA),p(NA),p(jA),p(DA),p(GA),c&&t(rRe),c&&t(_d),p(OA),c&&t(tRe),c&&t(tr),p(VA),p(zA),p(QA),p(WA),p(HA),c&&t(aRe),c&&t(vd),p(UA),c&&t(nRe),c&&t(ar),p(JA),p(KA),p(ZA),p(e6),p(o6),c&&t(sRe),c&&t(Ed),p(r6),c&&t(lRe),c&&t(nr),p(t6),p(n6),p(s6),p(l6),p(i6),c&&t(iRe),c&&t(Ad),p(d6),c&&t(dRe),c&&t(sr),p(c6),p(f6),p(g6),p(h6),p(u6),c&&t(cRe),c&&t(xd),p(p6),c&&t(mRe),c&&t(lr),p(_6),p(F6),p(v6),p(T6),p(M6),c&&t(fRe),c&&t(Rd),p(E6),c&&t(gRe),c&&t(ir),p(C6),p(A6),p(y6),p(L6),p(x6),c&&t(hRe),c&&t($d),p(k6),c&&t(uRe),c&&t(dr),p(S6),p(B6),p(P6),p($6),p(I6),c&&t(pRe),c&&t(Nd),p(q6),c&&t(_Re),c&&t(cr),p(N6),p(D6),p(G6),p(O6),p(V6),c&&t(bRe),c&&t(Gd),p(X6),c&&t(FRe),c&&t(mr),p(z6),p(W6),p(H6),p(U6),p(J6),c&&t(vRe),c&&t(Xd),p(Y6),c&&t(TRe),c&&t(fr),p(K6),p(e0),p(o0),p(r0),p(a0),c&&t(MRe),c&&t(Wd),p(n0),c&&t(ERe),c&&t(gr),p(s0),p(i0),p(d0),p(c0),p(m0),c&&t(CRe),c&&t(Jd),p(f0),c&&t(wRe),c&&t(hr),p(g0),p(u0),p(p0),p(_0),p(b0),c&&t(ARe),c&&t(ec),p(F0),c&&t(yRe),c&&t(ur),p(v0),p(M0),p(E0),p(C0),p(w0),c&&t(LRe),c&&t(tc),p(A0),c&&t(xRe),c&&t(pr),p(y0),p(x0),p(k0),p(S0),p(R0),c&&t(kRe),c&&t(sc),p(B0),c&&t(SRe),c&&t(_r),p(P0),p(I0),p(q0),p(N0),p(j0),c&&t(RRe),c&&t(cc),p(D0),c&&t(BRe),c&&t(br),p(G0),p(V0),p(X0),p(z0),p(Q0),c&&t(PRe),c&&t(gc),p(W0),c&&t($Re),c&&t(Fr),p(H0),p(J0),p(Y0),p(K0),p(Z0),c&&t(IRe),c&&t(pc),p(ey),c&&t(qRe),c&&t(vr),p(oy),p(ty),p(ay),p(ny),p(sy),c&&t(NRe),c&&t(Fc),p(ly),c&&t(jRe),c&&t(Tr),p(iy),p(cy),p(my),p(fy),p(gy),c&&t(DRe),c&&t(Mc),p(hy),c&&t(GRe),c&&t(Mr),p(uy),p(_y),p(by),p(Fy),p(Ty),c&&t(ORe),c&&t(wc),p(My),c&&t(VRe),c&&t(Er),p(Ey),p(wy),p(Ay),p(yy),p(Ly),c&&t(XRe),c&&t(Lc),p(xy),c&&t(zRe),c&&t(Cr),p(ky),p(Ry),p(By),p(Py),p($y),c&&t(QRe),c&&t(Sc),p(Iy),c&&t(WRe),c&&t(wr),p(qy),p(jy),p(Dy),p(Gy),p(Oy),c&&t(HRe),c&&t(Pc),p(Vy),c&&t(URe),c&&t(Ar),p(Xy),p(Qy),p(Wy),p(Hy),p(Uy),c&&t(JRe),c&&t(qc),p(Jy),c&&t(YRe),c&&t(yr),p(Yy),p(Zy),p(eL),p(oL),p(rL),c&&t(KRe),c&&t(Dc),p(tL),c&&t(ZRe),c&&t(Lr),p(aL),p(sL),p(lL),p(iL),p(dL),c&&t(eBe),c&&t(Vc),p(cL),c&&t(oBe),c&&t(xr),p(mL),p(gL),p(hL),p(uL),p(pL),c&&t(rBe),c&&t(Qc),p(_L),c&&t(tBe),c&&t(kr),p(bL),p(vL),p(TL),p(ML),p(EL),c&&t(aBe),c&&t(Uc),p(CL),c&&t(nBe),c&&t(Sr),p(wL),p(yL),p(LL),p(xL),p(kL),c&&t(sBe),c&&t(Kc),p(SL),c&&t(lBe),c&&t(Rr),p(RL),p(PL),p($L),p(IL),p(qL),c&&t(iBe),c&&t(om),p(NL),c&&t(dBe),c&&t(Br),p(jL),p(GL),p(OL),p(VL),p(XL),c&&t(cBe),c&&t(am),p(zL),c&&t(mBe),c&&t(Pr),p(QL),p(HL),p(UL),p(JL),p(YL),c&&t(fBe),c&&t(lm),p(KL),c&&t(gBe),c&&t($r),p(ZL),p(o7),p(r7),p(t7),p(a7),c&&t(hBe),c&&t(cm),p(n7),c&&t(uBe),c&&t(Ir),p(s7),p(i7),p(d7),p(c7),p(m7),c&&t(pBe),c&&t(gm),p(f7),c&&t(_Be),c&&t(qr),p(g7),p(u7),p(p7),p(_7),p(b7),c&&t(bBe),c&&t(pm),p(F7),c&&t(FBe),c&&t(Nr),p(v7),p(M7),p(E7),p(C7),p(w7),c&&t(vBe),c&&t(Fm),p(A7),c&&t(TBe),c&&t(jr),p(y7),p(x7),p(k7),p(S7),p(R7),c&&t(MBe),c&&t(Mm),p(B7),c&&t(EBe),c&&t(Dr),p(P7),p(I7),p(q7),p(N7),p(j7),c&&t(CBe),c&&t(wm),p(D7),c&&t(wBe),c&&t(Gr),p(G7),p(V7),p(X7),p(z7),p(Q7),c&&t(ABe),c&&t(Lm),p(W7),c&&t(yBe),c&&t(Or),p(H7),p(J7),p(Y7),p(K7),p(e8),c&&t(LBe),c&&t(Sm),p(o8),c&&t(xBe),c&&t(Vr),p(r8),p(a8),p(n8),p(s8),p(l8)}}}const q5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function N5t($m){return R5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class X5t extends L5t{constructor(Z){super();x5t(this,Z,N5t,I5t,k5t,{})}}export{X5t as default,q5t as metadata};
