import{S as KLt,i as ZLt,s as e8t,e as a,k as l,w as F,t as o,M as o8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as r8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function t8t(L){let g,v,u,f,p,d,h,Mo,ci,gm,rt,mi,fi,ty,hm,je,We,gi,yn,ay,Ln,xn,ny,hi,$n,sy,ui,um,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),gm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),fi=o('"new-model"'),ty=o(")."),hm=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),ay=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),ny=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),sy=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),um=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var C$=s(u);f=r(C$,"NewModelConfig"),C$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var pi=s(d);h=r(pi,"PretrainedConfig"),pi.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var w$=s(ci);gm=r(w$,"model_type"),w$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var A$=s(mi);fi=r(A$,'"new-model"'),A$.forEach(t),ty=r(Ae,")."),Ae.forEach(t),hm=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),ay=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var y$=s(Ln);xn=r(y$,"PreTrainedModel"),y$.forEach(t),ny=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var pm=s(hi);$n=r(pm,"config_class"),pm.forEach(t),sy=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var L$=s(ui);um=r(L$,"NewModelConfig"),L$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,gm),e(g,rt),e(g,mi),e(mi,fi),e(g,ty),b(Qe,hm,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,ay),e(je,Ln),e(Ln,xn),e(je,ny),e(je,hi),e(hi,$n),e(je,sy),e(je,ui),e(ui,um),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(hm),Qe&&t(je)}}}function a8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s8t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function l8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i8t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function d8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function axt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ixt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Axt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ixt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e9t(L){let g,v,u,f,p,d,h,Mo,ci,gm,rt,mi,fi,ty,hm,je,We,gi,yn,ay,Ln,xn,ny,hi,$n,sy,ui,um,Ca,Qe,Ae,C$,pi,w$,A$,Eo,wa,y$,pm,L$,IDe,wIe,_i,_m,bee,ly,qDe,vee,NDe,AIe,kn,jDe,Fee,DDe,GDe,Tee,ODe,VDe,yIe,iy,LIe,x$,XDe,xIe,bm,$Ie,bi,vm,Mee,dy,zDe,Eee,WDe,kIe,Co,cy,QDe,my,HDe,$$,UDe,JDe,YDe,fy,KDe,Cee,ZDe,eGe,oGe,Er,gy,rGe,wee,tGe,aGe,vi,nGe,Aee,sGe,lGe,yee,iGe,dGe,cGe,A,Fm,Lee,mGe,fGe,k$,gGe,hGe,uGe,Tm,xee,pGe,_Ge,S$,bGe,vGe,FGe,Mm,$ee,TGe,MGe,R$,EGe,CGe,wGe,Em,kee,AGe,yGe,P$,LGe,xGe,$Ge,Cm,See,kGe,SGe,B$,RGe,PGe,BGe,wm,Ree,IGe,qGe,I$,NGe,jGe,DGe,Am,Pee,GGe,OGe,q$,VGe,XGe,zGe,ym,Bee,WGe,QGe,N$,HGe,UGe,JGe,Lm,Iee,YGe,KGe,j$,ZGe,eOe,oOe,xm,qee,rOe,tOe,D$,aOe,nOe,sOe,$m,Nee,lOe,iOe,G$,dOe,cOe,mOe,km,jee,fOe,gOe,O$,hOe,uOe,pOe,Sm,Dee,_Oe,bOe,V$,vOe,FOe,TOe,Rm,Gee,MOe,EOe,X$,COe,wOe,AOe,Pm,Oee,yOe,LOe,z$,xOe,$Oe,kOe,Bm,Vee,SOe,ROe,W$,POe,BOe,IOe,Im,Xee,qOe,NOe,Q$,jOe,DOe,GOe,qm,zee,OOe,VOe,H$,XOe,zOe,WOe,Nm,Wee,QOe,HOe,U$,UOe,JOe,YOe,jm,Qee,KOe,ZOe,J$,eVe,oVe,rVe,Dm,Hee,tVe,aVe,Y$,nVe,sVe,lVe,Gm,Uee,iVe,dVe,K$,cVe,mVe,fVe,Om,Jee,gVe,hVe,Z$,uVe,pVe,_Ve,Vm,Yee,bVe,vVe,ek,FVe,TVe,MVe,Xm,Kee,EVe,CVe,ok,wVe,AVe,yVe,zm,Zee,LVe,xVe,rk,$Ve,kVe,SVe,Wm,eoe,RVe,PVe,tk,BVe,IVe,qVe,Qm,ooe,NVe,jVe,ak,DVe,GVe,OVe,Hm,roe,VVe,XVe,nk,zVe,WVe,QVe,Um,toe,HVe,UVe,sk,JVe,YVe,KVe,Jm,aoe,ZVe,eXe,lk,oXe,rXe,tXe,Ym,noe,aXe,nXe,ik,sXe,lXe,iXe,Km,soe,dXe,cXe,dk,mXe,fXe,gXe,Zm,loe,hXe,uXe,ck,pXe,_Xe,bXe,ef,ioe,vXe,FXe,mk,TXe,MXe,EXe,of,doe,CXe,wXe,fk,AXe,yXe,LXe,rf,coe,xXe,$Xe,gk,kXe,SXe,RXe,tf,moe,PXe,BXe,hk,IXe,qXe,NXe,af,foe,jXe,DXe,uk,GXe,OXe,VXe,nf,goe,XXe,zXe,pk,WXe,QXe,HXe,sf,hoe,UXe,JXe,_k,YXe,KXe,ZXe,lf,uoe,eze,oze,bk,rze,tze,aze,df,poe,nze,sze,vk,lze,ize,dze,cf,_oe,cze,mze,Fk,fze,gze,hze,mf,boe,uze,pze,Tk,_ze,bze,vze,ff,voe,Fze,Tze,Mk,Mze,Eze,Cze,gf,Foe,wze,Aze,Ek,yze,Lze,xze,hf,Toe,$ze,kze,Ck,Sze,Rze,Pze,uf,Moe,Bze,Ize,wk,qze,Nze,jze,pf,Eoe,Dze,Gze,Ak,Oze,Vze,Xze,_f,Coe,zze,Wze,yk,Qze,Hze,Uze,bf,woe,Jze,Yze,Lk,Kze,Zze,eWe,vf,Aoe,oWe,rWe,xk,tWe,aWe,nWe,Ff,yoe,sWe,lWe,$k,iWe,dWe,cWe,Tf,Loe,mWe,fWe,kk,gWe,hWe,uWe,Mf,xoe,pWe,_We,Sk,bWe,vWe,FWe,Ef,$oe,TWe,MWe,Rk,EWe,CWe,wWe,Cf,koe,AWe,yWe,Pk,LWe,xWe,$We,wf,Soe,kWe,SWe,Bk,RWe,PWe,BWe,Af,Roe,IWe,qWe,Ik,NWe,jWe,DWe,yf,Poe,GWe,OWe,qk,VWe,XWe,zWe,Lf,Boe,WWe,QWe,Nk,HWe,UWe,JWe,xf,Ioe,YWe,KWe,jk,ZWe,eQe,oQe,$f,qoe,rQe,tQe,Dk,aQe,nQe,sQe,kf,Noe,lQe,iQe,Gk,dQe,cQe,mQe,Sf,joe,fQe,gQe,Ok,hQe,uQe,pQe,Rf,Doe,_Qe,bQe,Vk,vQe,FQe,TQe,Pf,Goe,MQe,EQe,Xk,CQe,wQe,AQe,Bf,Ooe,yQe,LQe,zk,xQe,$Qe,kQe,If,Voe,SQe,RQe,Wk,PQe,BQe,IQe,qf,Xoe,qQe,NQe,Qk,jQe,DQe,GQe,Nf,zoe,OQe,VQe,Hk,XQe,zQe,WQe,jf,Woe,QQe,HQe,Uk,UQe,JQe,YQe,Df,Qoe,KQe,ZQe,Jk,eHe,oHe,rHe,Gf,Hoe,tHe,aHe,Yk,nHe,sHe,lHe,Of,Uoe,iHe,dHe,Kk,cHe,mHe,fHe,Vf,Joe,gHe,hHe,Zk,uHe,pHe,_He,Xf,Yoe,bHe,vHe,eS,FHe,THe,MHe,zf,Koe,EHe,CHe,oS,wHe,AHe,yHe,Wf,Zoe,LHe,xHe,rS,$He,kHe,SHe,Qf,ere,RHe,PHe,tS,BHe,IHe,qHe,Hf,ore,NHe,jHe,aS,DHe,GHe,OHe,Uf,rre,VHe,XHe,nS,zHe,WHe,QHe,Jf,tre,HHe,UHe,sS,JHe,YHe,KHe,Yf,are,ZHe,eUe,lS,oUe,rUe,tUe,Kf,nre,aUe,nUe,iS,sUe,lUe,iUe,Zf,sre,dUe,cUe,dS,mUe,fUe,gUe,eg,lre,hUe,uUe,cS,pUe,_Ue,bUe,og,ire,vUe,FUe,mS,TUe,MUe,EUe,rg,dre,CUe,wUe,fS,AUe,yUe,LUe,tg,cre,xUe,$Ue,gS,kUe,SUe,RUe,ag,mre,PUe,BUe,hS,IUe,qUe,NUe,ng,fre,jUe,DUe,uS,GUe,OUe,VUe,sg,gre,XUe,zUe,pS,WUe,QUe,HUe,lg,hre,UUe,JUe,_S,YUe,KUe,ZUe,ig,ure,eJe,oJe,bS,rJe,tJe,aJe,dg,pre,nJe,sJe,vS,lJe,iJe,dJe,cg,_re,cJe,mJe,FS,fJe,gJe,hJe,mg,bre,uJe,pJe,TS,_Je,bJe,vJe,fg,vre,FJe,TJe,MS,MJe,EJe,CJe,gg,Fre,wJe,AJe,ES,yJe,LJe,xJe,hg,Tre,$Je,kJe,CS,SJe,RJe,PJe,ug,Mre,BJe,IJe,wS,qJe,NJe,jJe,pg,Ere,DJe,GJe,AS,OJe,VJe,XJe,_g,Cre,zJe,WJe,yS,QJe,HJe,UJe,bg,JJe,vg,hy,YJe,wre,KJe,SIe,Fi,Fg,Are,uy,ZJe,yre,eYe,RIe,wo,py,oYe,_y,rYe,LS,tYe,aYe,nYe,by,sYe,Lre,lYe,iYe,dYe,Cr,vy,cYe,xre,mYe,fYe,Aa,gYe,$re,hYe,uYe,kre,pYe,_Ye,Sre,bYe,vYe,FYe,k,Sn,Rre,TYe,MYe,xS,EYe,CYe,$S,wYe,AYe,yYe,Rn,Pre,LYe,xYe,kS,$Ye,kYe,SS,SYe,RYe,PYe,Pn,Bre,BYe,IYe,RS,qYe,NYe,PS,jYe,DYe,GYe,Tg,Ire,OYe,VYe,BS,XYe,zYe,WYe,Bn,qre,QYe,HYe,IS,UYe,JYe,qS,YYe,KYe,ZYe,Mg,Nre,eKe,oKe,NS,rKe,tKe,aKe,Eg,jre,nKe,sKe,jS,lKe,iKe,dKe,Cg,Dre,cKe,mKe,DS,fKe,gKe,hKe,In,Gre,uKe,pKe,GS,_Ke,bKe,OS,vKe,FKe,TKe,qn,Ore,MKe,EKe,VS,CKe,wKe,XS,AKe,yKe,LKe,Nn,Vre,xKe,$Ke,zS,kKe,SKe,WS,RKe,PKe,BKe,wg,Xre,IKe,qKe,QS,NKe,jKe,DKe,Ag,zre,GKe,OKe,HS,VKe,XKe,zKe,jn,Wre,WKe,QKe,US,HKe,UKe,JS,JKe,YKe,KKe,yg,Qre,ZKe,eZe,YS,oZe,rZe,tZe,Dn,Hre,aZe,nZe,KS,sZe,lZe,ZS,iZe,dZe,cZe,Gn,Ure,mZe,fZe,eR,gZe,hZe,oR,uZe,pZe,_Ze,On,Jre,bZe,vZe,rR,FZe,TZe,tR,MZe,EZe,CZe,Lg,Yre,wZe,AZe,aR,yZe,LZe,xZe,Vn,Kre,$Ze,kZe,nR,SZe,RZe,sR,PZe,BZe,IZe,Xn,Zre,qZe,NZe,lR,jZe,DZe,iR,GZe,OZe,VZe,zn,ete,XZe,zZe,dR,WZe,QZe,cR,HZe,UZe,JZe,Wn,ote,YZe,KZe,mR,ZZe,eeo,fR,oeo,reo,teo,Qn,rte,aeo,neo,gR,seo,leo,hR,ieo,deo,ceo,Hn,tte,meo,feo,uR,geo,heo,pR,ueo,peo,_eo,xg,ate,beo,veo,_R,Feo,Teo,Meo,Un,nte,Eeo,Ceo,bR,weo,Aeo,vR,yeo,Leo,xeo,$g,ste,$eo,keo,FR,Seo,Reo,Peo,Jn,lte,Beo,Ieo,TR,qeo,Neo,MR,jeo,Deo,Geo,Yn,ite,Oeo,Veo,ER,Xeo,zeo,CR,Weo,Qeo,Heo,Kn,dte,Ueo,Jeo,wR,Yeo,Keo,AR,Zeo,eoo,ooo,Zn,cte,roo,too,yR,aoo,noo,LR,soo,loo,ioo,es,mte,doo,coo,xR,moo,foo,$R,goo,hoo,uoo,kg,fte,poo,_oo,kR,boo,voo,Foo,os,gte,Too,Moo,SR,Eoo,Coo,RR,woo,Aoo,yoo,rs,hte,Loo,xoo,PR,$oo,koo,BR,Soo,Roo,Poo,ts,ute,Boo,Ioo,IR,qoo,Noo,qR,joo,Doo,Goo,as,pte,Ooo,Voo,NR,Xoo,zoo,jR,Woo,Qoo,Hoo,ns,_te,Uoo,Joo,DR,Yoo,Koo,GR,Zoo,ero,oro,ss,bte,rro,tro,OR,aro,nro,VR,sro,lro,iro,Sg,vte,dro,cro,XR,mro,fro,gro,ls,Fte,hro,uro,zR,pro,_ro,WR,bro,vro,Fro,Rg,Tte,Tro,Mro,QR,Ero,Cro,wro,Pg,Mte,Aro,yro,HR,Lro,xro,$ro,is,Ete,kro,Sro,UR,Rro,Pro,JR,Bro,Iro,qro,ds,Cte,Nro,jro,YR,Dro,Gro,KR,Oro,Vro,Xro,cs,wte,zro,Wro,ZR,Qro,Hro,eP,Uro,Jro,Yro,Bg,Ate,Kro,Zro,oP,eto,oto,rto,ms,yte,tto,ato,rP,nto,sto,tP,lto,ito,dto,fs,Lte,cto,mto,aP,fto,gto,nP,hto,uto,pto,gs,xte,_to,bto,sP,vto,Fto,lP,Tto,Mto,Eto,hs,$te,Cto,wto,iP,Ato,yto,dP,Lto,xto,$to,us,kte,kto,Sto,cP,Rto,Pto,mP,Bto,Ito,qto,Ig,Ste,Nto,jto,fP,Dto,Gto,Oto,ps,Rte,Vto,Xto,gP,zto,Wto,hP,Qto,Hto,Uto,qg,Pte,Jto,Yto,uP,Kto,Zto,eao,Ng,Bte,oao,rao,pP,tao,aao,nao,jg,Ite,sao,lao,_P,iao,dao,cao,Dg,qte,mao,fao,bP,gao,hao,uao,_s,Nte,pao,_ao,vP,bao,vao,FP,Fao,Tao,Mao,Gg,jte,Eao,Cao,TP,wao,Aao,yao,bs,Dte,Lao,xao,MP,$ao,kao,EP,Sao,Rao,Pao,vs,Gte,Bao,Iao,CP,qao,Nao,wP,jao,Dao,Gao,Fs,Ote,Oao,Vao,AP,Xao,zao,yP,Wao,Qao,Hao,Ts,Vte,Uao,Jao,LP,Yao,Kao,xP,Zao,eno,ono,Ms,Xte,rno,tno,$P,ano,nno,kP,sno,lno,ino,Es,zte,dno,cno,SP,mno,fno,RP,gno,hno,uno,Og,Wte,pno,_no,PP,bno,vno,Fno,Vg,Qte,Tno,Mno,BP,Eno,Cno,wno,Cs,Hte,Ano,yno,IP,Lno,xno,qP,$no,kno,Sno,ws,Ute,Rno,Pno,NP,Bno,Ino,jP,qno,Nno,jno,As,Jte,Dno,Gno,DP,Ono,Vno,GP,Xno,zno,Wno,Xg,Yte,Qno,Hno,OP,Uno,Jno,Yno,zg,Kte,Kno,Zno,VP,eso,oso,rso,Wg,Zte,tso,aso,XP,nso,sso,lso,ys,eae,iso,dso,zP,cso,mso,WP,fso,gso,hso,Qg,oae,uso,pso,QP,_so,bso,vso,Hg,rae,Fso,Tso,HP,Mso,Eso,Cso,Ug,tae,wso,Aso,UP,yso,Lso,xso,Ls,aae,$so,kso,JP,Sso,Rso,YP,Pso,Bso,Iso,Jg,nae,qso,Nso,KP,jso,Dso,Gso,Yg,sae,Oso,Vso,ZP,Xso,zso,Wso,xs,lae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,$s,iae,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,ks,dae,llo,ilo,aB,dlo,clo,nB,mlo,flo,glo,Ss,cae,hlo,ulo,sB,plo,_lo,lB,blo,vlo,Flo,Kg,Tlo,Zg,Fy,Mlo,mae,Elo,PIe,Ti,eh,fae,Ty,Clo,gae,wlo,BIe,Ao,My,Alo,Ey,ylo,iB,Llo,xlo,$lo,Cy,klo,hae,Slo,Rlo,Plo,He,wy,Blo,uae,Ilo,qlo,ya,Nlo,pae,jlo,Dlo,_ae,Glo,Olo,bae,Vlo,Xlo,zlo,Z,oh,vae,Wlo,Qlo,dB,Hlo,Ulo,Jlo,rh,Fae,Ylo,Klo,cB,Zlo,eio,oio,th,Tae,rio,tio,mB,aio,nio,sio,ah,Mae,lio,iio,fB,dio,cio,mio,nh,Eae,fio,gio,gB,hio,uio,pio,sh,Cae,_io,bio,hB,vio,Fio,Tio,lh,wae,Mio,Eio,uB,Cio,wio,Aio,ih,Aae,yio,Lio,pB,xio,$io,kio,dh,yae,Sio,Rio,_B,Pio,Bio,Iio,ch,Lae,qio,Nio,bB,jio,Dio,Gio,mh,xae,Oio,Vio,vB,Xio,zio,Wio,fh,$ae,Qio,Hio,FB,Uio,Jio,Yio,gh,kae,Kio,Zio,TB,edo,odo,rdo,hh,Sae,tdo,ado,MB,ndo,sdo,ldo,uh,Rae,ido,ddo,EB,cdo,mdo,fdo,ph,Pae,gdo,hdo,CB,udo,pdo,_do,_h,Bae,bdo,vdo,wB,Fdo,Tdo,Mdo,bh,Iae,Edo,Cdo,AB,wdo,Ado,ydo,vh,qae,Ldo,xdo,yB,$do,kdo,Sdo,Fh,Nae,Rdo,Pdo,LB,Bdo,Ido,qdo,Th,jae,Ndo,jdo,xB,Ddo,Gdo,Odo,Mh,Dae,Vdo,Xdo,$B,zdo,Wdo,Qdo,Eh,Gae,Hdo,Udo,kB,Jdo,Ydo,Kdo,Ch,Oae,Zdo,eco,SB,oco,rco,tco,wh,Vae,aco,nco,RB,sco,lco,ico,Ah,Xae,dco,cco,PB,mco,fco,gco,yh,hco,Lh,uco,xh,Ay,pco,zae,_co,IIe,Mi,$h,Wae,yy,bco,Qae,vco,qIe,yo,Ly,Fco,xy,Tco,BB,Mco,Eco,Cco,$y,wco,Hae,Aco,yco,Lco,Ue,ky,xco,Uae,$co,kco,Ei,Sco,Jae,Rco,Pco,Yae,Bco,Ico,qco,ue,kh,Kae,Nco,jco,IB,Dco,Gco,Oco,Sh,Zae,Vco,Xco,ene,zco,Wco,Qco,Rh,one,Hco,Uco,qB,Jco,Yco,Kco,Ph,rne,Zco,emo,NB,omo,rmo,tmo,Bh,tne,amo,nmo,jB,smo,lmo,imo,Ih,ane,dmo,cmo,DB,mmo,fmo,gmo,qh,nne,hmo,umo,GB,pmo,_mo,bmo,Nh,sne,vmo,Fmo,OB,Tmo,Mmo,Emo,jh,lne,Cmo,wmo,VB,Amo,ymo,Lmo,Dh,ine,xmo,$mo,XB,kmo,Smo,Rmo,Gh,dne,Pmo,Bmo,zB,Imo,qmo,Nmo,Oh,cne,jmo,Dmo,WB,Gmo,Omo,Vmo,Vh,mne,Xmo,zmo,QB,Wmo,Qmo,Hmo,Xh,fne,Umo,Jmo,HB,Ymo,Kmo,Zmo,zh,gne,efo,ofo,UB,rfo,tfo,afo,Wh,hne,nfo,sfo,JB,lfo,ifo,dfo,Qh,cfo,Hh,mfo,Uh,Sy,ffo,une,gfo,NIe,Ci,Jh,pne,Ry,hfo,_ne,ufo,jIe,Lo,Py,pfo,wi,_fo,YB,bfo,vfo,KB,Ffo,Tfo,Mfo,By,Efo,bne,Cfo,wfo,Afo,tt,Iy,yfo,vne,Lfo,xfo,Ai,$fo,Fne,kfo,Sfo,ZB,Rfo,Pfo,Bfo,Yh,Ifo,Je,qy,qfo,Tne,Nfo,jfo,La,Dfo,Mne,Gfo,Ofo,Ene,Vfo,Xfo,Cne,zfo,Wfo,Qfo,x,Kh,wne,Hfo,Ufo,eI,Jfo,Yfo,Kfo,Zh,Ane,Zfo,ego,oI,ogo,rgo,tgo,eu,yne,ago,ngo,rI,sgo,lgo,igo,ou,Lne,dgo,cgo,tI,mgo,fgo,ggo,ru,xne,hgo,ugo,aI,pgo,_go,bgo,tu,$ne,vgo,Fgo,nI,Tgo,Mgo,Ego,au,kne,Cgo,wgo,sI,Ago,ygo,Lgo,nu,Sne,xgo,$go,lI,kgo,Sgo,Rgo,su,Rne,Pgo,Bgo,iI,Igo,qgo,Ngo,lu,Pne,jgo,Dgo,dI,Ggo,Ogo,Vgo,iu,Bne,Xgo,zgo,cI,Wgo,Qgo,Hgo,du,Ine,Ugo,Jgo,mI,Ygo,Kgo,Zgo,cu,qne,eho,oho,fI,rho,tho,aho,mu,Nne,nho,sho,gI,lho,iho,dho,fu,jne,cho,mho,hI,fho,gho,hho,gu,Dne,uho,pho,uI,_ho,bho,vho,hu,Gne,Fho,Tho,pI,Mho,Eho,Cho,uu,One,who,Aho,_I,yho,Lho,xho,pu,Vne,$ho,kho,bI,Sho,Rho,Pho,_u,Xne,Bho,Iho,vI,qho,Nho,jho,bu,zne,Dho,Gho,FI,Oho,Vho,Xho,vu,Wne,zho,Who,TI,Qho,Hho,Uho,Fu,Qne,Jho,Yho,MI,Kho,Zho,euo,Tu,Hne,ouo,ruo,EI,tuo,auo,nuo,Mu,Une,suo,luo,CI,iuo,duo,cuo,Eu,Jne,muo,fuo,wI,guo,huo,uuo,Cu,Yne,puo,_uo,AI,buo,vuo,Fuo,wu,Kne,Tuo,Muo,yI,Euo,Cuo,wuo,Au,Zne,Auo,yuo,LI,Luo,xuo,$uo,yu,ese,kuo,Suo,xI,Ruo,Puo,Buo,Lu,ose,Iuo,quo,$I,Nuo,juo,Duo,Rs,rse,Guo,Ouo,kI,Vuo,Xuo,SI,zuo,Wuo,Quo,xu,tse,Huo,Uuo,RI,Juo,Yuo,Kuo,$u,ase,Zuo,epo,PI,opo,rpo,tpo,ku,nse,apo,npo,BI,spo,lpo,ipo,Su,sse,dpo,cpo,II,mpo,fpo,gpo,Ru,lse,hpo,upo,qI,ppo,_po,bpo,Pu,ise,vpo,Fpo,NI,Tpo,Mpo,Epo,Bu,dse,Cpo,wpo,jI,Apo,ypo,Lpo,Iu,cse,xpo,$po,DI,kpo,Spo,Rpo,qu,mse,Ppo,Bpo,GI,Ipo,qpo,Npo,Nu,fse,jpo,Dpo,OI,Gpo,Opo,Vpo,ju,gse,Xpo,zpo,VI,Wpo,Qpo,Hpo,Du,hse,Upo,Jpo,XI,Ypo,Kpo,Zpo,Gu,use,e_o,o_o,zI,r_o,t_o,a_o,Ou,pse,n_o,s_o,WI,l_o,i_o,d_o,Vu,_se,c_o,m_o,QI,f_o,g_o,h_o,Xu,bse,u_o,p_o,HI,__o,b_o,v_o,zu,vse,F_o,T_o,UI,M_o,E_o,C_o,Wu,Fse,w_o,A_o,JI,y_o,L_o,x_o,Qu,Tse,$_o,k_o,YI,S_o,R_o,P_o,Hu,Mse,B_o,I_o,KI,q_o,N_o,j_o,Uu,Ese,D_o,G_o,ZI,O_o,V_o,X_o,Ju,Cse,z_o,W_o,eq,Q_o,H_o,U_o,Yu,wse,J_o,Y_o,oq,K_o,Z_o,ebo,Ku,Ase,obo,rbo,rq,tbo,abo,nbo,Zu,yse,sbo,lbo,tq,ibo,dbo,cbo,ep,Lse,mbo,fbo,aq,gbo,hbo,ubo,op,xse,pbo,_bo,nq,bbo,vbo,Fbo,rp,$se,Tbo,Mbo,sq,Ebo,Cbo,wbo,tp,kse,Abo,ybo,lq,Lbo,xbo,$bo,ap,Sse,kbo,Sbo,iq,Rbo,Pbo,Bbo,np,Rse,Ibo,qbo,dq,Nbo,jbo,Dbo,sp,Pse,Gbo,Obo,cq,Vbo,Xbo,zbo,lp,Bse,Wbo,Qbo,mq,Hbo,Ubo,Jbo,ip,Ise,Ybo,Kbo,fq,Zbo,e2o,o2o,dp,qse,r2o,t2o,gq,a2o,n2o,s2o,cp,Nse,l2o,i2o,hq,d2o,c2o,m2o,mp,jse,f2o,g2o,uq,h2o,u2o,p2o,fp,Dse,_2o,b2o,pq,v2o,F2o,T2o,gp,Gse,M2o,E2o,_q,C2o,w2o,A2o,hp,Ose,y2o,L2o,bq,x2o,$2o,k2o,up,Vse,S2o,R2o,vq,P2o,B2o,I2o,pp,Xse,q2o,N2o,Fq,j2o,D2o,G2o,_p,zse,O2o,V2o,Tq,X2o,z2o,W2o,bp,Wse,Q2o,H2o,Mq,U2o,J2o,Y2o,vp,Qse,K2o,Z2o,Eq,evo,ovo,rvo,Fp,Hse,tvo,avo,Cq,nvo,svo,lvo,Tp,Use,ivo,dvo,wq,cvo,mvo,fvo,Mp,Jse,gvo,hvo,Aq,uvo,pvo,_vo,Ep,Yse,bvo,vvo,yq,Fvo,Tvo,Mvo,Cp,Kse,Evo,Cvo,Lq,wvo,Avo,yvo,wp,Zse,Lvo,xvo,xq,$vo,kvo,Svo,Ap,ele,Rvo,Pvo,$q,Bvo,Ivo,qvo,yp,ole,Nvo,jvo,kq,Dvo,Gvo,Ovo,Lp,rle,Vvo,Xvo,Sq,zvo,Wvo,Qvo,xp,tle,Hvo,Uvo,Rq,Jvo,Yvo,Kvo,$p,ale,Zvo,eFo,Pq,oFo,rFo,tFo,kp,nle,aFo,nFo,Bq,sFo,lFo,iFo,Sp,sle,dFo,cFo,Iq,mFo,fFo,gFo,Rp,lle,hFo,uFo,qq,pFo,_Fo,bFo,Pp,ile,vFo,FFo,Nq,TFo,MFo,EFo,Bp,dle,CFo,wFo,jq,AFo,yFo,LFo,Ip,cle,xFo,$Fo,Dq,kFo,SFo,RFo,qp,mle,PFo,BFo,Gq,IFo,qFo,NFo,Np,fle,jFo,DFo,Oq,GFo,OFo,VFo,jp,gle,XFo,zFo,Vq,WFo,QFo,HFo,Dp,hle,UFo,JFo,Xq,YFo,KFo,ZFo,Gp,e1o,ule,o1o,r1o,ple,t1o,a1o,Op,DIe,yi,Vp,_le,Ny,n1o,ble,s1o,GIe,xo,jy,l1o,Li,i1o,zq,d1o,c1o,Wq,m1o,f1o,g1o,Dy,h1o,vle,u1o,p1o,_1o,at,Gy,b1o,Fle,v1o,F1o,xi,T1o,Tle,M1o,E1o,Qq,C1o,w1o,A1o,Xp,y1o,Ye,Oy,L1o,Mle,x1o,$1o,xa,k1o,Ele,S1o,R1o,Cle,P1o,B1o,wle,I1o,q1o,N1o,G,zp,Ale,j1o,D1o,Hq,G1o,O1o,V1o,Wp,yle,X1o,z1o,Uq,W1o,Q1o,H1o,Qp,Lle,U1o,J1o,Jq,Y1o,K1o,Z1o,Hp,xle,eTo,oTo,Yq,rTo,tTo,aTo,Up,$le,nTo,sTo,Kq,lTo,iTo,dTo,Jp,kle,cTo,mTo,Zq,fTo,gTo,hTo,Yp,Sle,uTo,pTo,eN,_To,bTo,vTo,Kp,Rle,FTo,TTo,oN,MTo,ETo,CTo,Zp,Ple,wTo,ATo,rN,yTo,LTo,xTo,e_,Ble,$To,kTo,tN,STo,RTo,PTo,o_,Ile,BTo,ITo,aN,qTo,NTo,jTo,r_,qle,DTo,GTo,nN,OTo,VTo,XTo,t_,Nle,zTo,WTo,sN,QTo,HTo,UTo,a_,jle,JTo,YTo,lN,KTo,ZTo,eMo,n_,Dle,oMo,rMo,iN,tMo,aMo,nMo,s_,Gle,sMo,lMo,dN,iMo,dMo,cMo,l_,Ole,mMo,fMo,cN,gMo,hMo,uMo,i_,Vle,pMo,_Mo,mN,bMo,vMo,FMo,d_,Xle,TMo,MMo,fN,EMo,CMo,wMo,c_,zle,AMo,yMo,gN,LMo,xMo,$Mo,m_,Wle,kMo,SMo,hN,RMo,PMo,BMo,f_,Qle,IMo,qMo,uN,NMo,jMo,DMo,g_,Hle,GMo,OMo,pN,VMo,XMo,zMo,h_,Ule,WMo,QMo,_N,HMo,UMo,JMo,u_,Jle,YMo,KMo,bN,ZMo,e4o,o4o,p_,Yle,r4o,t4o,vN,a4o,n4o,s4o,__,Kle,l4o,i4o,FN,d4o,c4o,m4o,b_,Zle,f4o,g4o,TN,h4o,u4o,p4o,v_,eie,_4o,b4o,MN,v4o,F4o,T4o,F_,oie,M4o,E4o,EN,C4o,w4o,A4o,T_,rie,y4o,L4o,CN,x4o,$4o,k4o,M_,tie,S4o,R4o,wN,P4o,B4o,I4o,E_,aie,q4o,N4o,AN,j4o,D4o,G4o,C_,nie,O4o,V4o,yN,X4o,z4o,W4o,w_,sie,Q4o,H4o,LN,U4o,J4o,Y4o,A_,lie,K4o,Z4o,xN,eEo,oEo,rEo,y_,iie,tEo,aEo,$N,nEo,sEo,lEo,L_,die,iEo,dEo,kN,cEo,mEo,fEo,x_,cie,gEo,hEo,SN,uEo,pEo,_Eo,$_,mie,bEo,vEo,RN,FEo,TEo,MEo,k_,fie,EEo,CEo,PN,wEo,AEo,yEo,S_,LEo,gie,xEo,$Eo,hie,kEo,SEo,R_,OIe,$i,P_,uie,Vy,REo,pie,PEo,VIe,$o,Xy,BEo,ki,IEo,BN,qEo,NEo,IN,jEo,DEo,GEo,zy,OEo,_ie,VEo,XEo,zEo,nt,Wy,WEo,bie,QEo,HEo,Si,UEo,vie,JEo,YEo,qN,KEo,ZEo,eCo,B_,oCo,Ke,Qy,rCo,Fie,tCo,aCo,$a,nCo,Tie,sCo,lCo,Mie,iCo,dCo,Eie,cCo,mCo,fCo,z,I_,Cie,gCo,hCo,NN,uCo,pCo,_Co,q_,wie,bCo,vCo,jN,FCo,TCo,MCo,N_,Aie,ECo,CCo,DN,wCo,ACo,yCo,j_,yie,LCo,xCo,GN,$Co,kCo,SCo,D_,Lie,RCo,PCo,ON,BCo,ICo,qCo,G_,xie,NCo,jCo,VN,DCo,GCo,OCo,O_,$ie,VCo,XCo,XN,zCo,WCo,QCo,V_,kie,HCo,UCo,zN,JCo,YCo,KCo,X_,Sie,ZCo,e5o,WN,o5o,r5o,t5o,z_,Rie,a5o,n5o,QN,s5o,l5o,i5o,W_,Pie,d5o,c5o,HN,m5o,f5o,g5o,Q_,Bie,h5o,u5o,UN,p5o,_5o,b5o,H_,Iie,v5o,F5o,JN,T5o,M5o,E5o,U_,qie,C5o,w5o,YN,A5o,y5o,L5o,J_,Nie,x5o,$5o,KN,k5o,S5o,R5o,Y_,jie,P5o,B5o,ZN,I5o,q5o,N5o,K_,Die,j5o,D5o,ej,G5o,O5o,V5o,Z_,Gie,X5o,z5o,oj,W5o,Q5o,H5o,eb,Oie,U5o,J5o,rj,Y5o,K5o,Z5o,ob,Vie,e3o,o3o,tj,r3o,t3o,a3o,rb,Xie,n3o,s3o,aj,l3o,i3o,d3o,tb,zie,c3o,m3o,nj,f3o,g3o,h3o,ab,Wie,u3o,p3o,sj,_3o,b3o,v3o,nb,Qie,F3o,T3o,lj,M3o,E3o,C3o,sb,Hie,w3o,A3o,ij,y3o,L3o,x3o,lb,Uie,$3o,k3o,dj,S3o,R3o,P3o,ib,Jie,B3o,I3o,cj,q3o,N3o,j3o,db,Yie,D3o,G3o,mj,O3o,V3o,X3o,cb,Kie,z3o,W3o,fj,Q3o,H3o,U3o,mb,Zie,J3o,Y3o,gj,K3o,Z3o,ewo,fb,ede,owo,rwo,hj,two,awo,nwo,gb,ode,swo,lwo,uj,iwo,dwo,cwo,hb,rde,mwo,fwo,pj,gwo,hwo,uwo,ub,tde,pwo,_wo,_j,bwo,vwo,Fwo,pb,ade,Two,Mwo,bj,Ewo,Cwo,wwo,_b,nde,Awo,ywo,vj,Lwo,xwo,$wo,bb,kwo,sde,Swo,Rwo,lde,Pwo,Bwo,vb,XIe,Ri,Fb,ide,Hy,Iwo,dde,qwo,zIe,ko,Uy,Nwo,Pi,jwo,Fj,Dwo,Gwo,Tj,Owo,Vwo,Xwo,Jy,zwo,cde,Wwo,Qwo,Hwo,st,Yy,Uwo,mde,Jwo,Ywo,Bi,Kwo,fde,Zwo,eAo,Mj,oAo,rAo,tAo,Tb,aAo,Ze,Ky,nAo,gde,sAo,lAo,ka,iAo,hde,dAo,cAo,ude,mAo,fAo,pde,gAo,hAo,uAo,W,Mb,_de,pAo,_Ao,Ej,bAo,vAo,FAo,Eb,bde,TAo,MAo,Cj,EAo,CAo,wAo,Cb,vde,AAo,yAo,wj,LAo,xAo,$Ao,wb,Fde,kAo,SAo,Aj,RAo,PAo,BAo,Ab,Tde,IAo,qAo,yj,NAo,jAo,DAo,yb,Mde,GAo,OAo,Lj,VAo,XAo,zAo,Lb,Ede,WAo,QAo,xj,HAo,UAo,JAo,xb,Cde,YAo,KAo,$j,ZAo,e6o,o6o,$b,wde,r6o,t6o,kj,a6o,n6o,s6o,kb,Ade,l6o,i6o,Sj,d6o,c6o,m6o,Sb,yde,f6o,g6o,Rj,h6o,u6o,p6o,Rb,Lde,_6o,b6o,Pj,v6o,F6o,T6o,Pb,xde,M6o,E6o,Bj,C6o,w6o,A6o,Bb,$de,y6o,L6o,Ij,x6o,$6o,k6o,Ib,kde,S6o,R6o,qj,P6o,B6o,I6o,qb,Sde,q6o,N6o,Nj,j6o,D6o,G6o,Nb,Rde,O6o,V6o,jj,X6o,z6o,W6o,jb,Pde,Q6o,H6o,Dj,U6o,J6o,Y6o,Db,Bde,K6o,Z6o,Gj,e0o,o0o,r0o,Gb,Ide,t0o,a0o,Oj,n0o,s0o,l0o,Ob,qde,i0o,d0o,Vj,c0o,m0o,f0o,Vb,Nde,g0o,h0o,Xj,u0o,p0o,_0o,Xb,jde,b0o,v0o,zj,F0o,T0o,M0o,zb,Dde,E0o,C0o,Wj,w0o,A0o,y0o,Wb,Gde,L0o,x0o,Qj,$0o,k0o,S0o,Qb,Ode,R0o,P0o,Hj,B0o,I0o,q0o,Hb,Vde,N0o,j0o,Uj,D0o,G0o,O0o,Ub,Xde,V0o,X0o,Jj,z0o,W0o,Q0o,Jb,zde,H0o,U0o,Yj,J0o,Y0o,K0o,Yb,Wde,Z0o,eyo,Kj,oyo,ryo,tyo,Kb,Qde,ayo,nyo,Hde,syo,lyo,iyo,Zb,Ude,dyo,cyo,Zj,myo,fyo,gyo,e2,Jde,hyo,uyo,eD,pyo,_yo,byo,o2,Yde,vyo,Fyo,oD,Tyo,Myo,Eyo,r2,Kde,Cyo,wyo,rD,Ayo,yyo,Lyo,t2,xyo,Zde,$yo,kyo,ece,Syo,Ryo,a2,WIe,Ii,n2,oce,Zy,Pyo,rce,Byo,QIe,So,eL,Iyo,qi,qyo,tD,Nyo,jyo,aD,Dyo,Gyo,Oyo,oL,Vyo,tce,Xyo,zyo,Wyo,lt,rL,Qyo,ace,Hyo,Uyo,Ni,Jyo,nce,Yyo,Kyo,nD,Zyo,eLo,oLo,s2,rLo,eo,tL,tLo,sce,aLo,nLo,Sa,sLo,lce,lLo,iLo,ice,dLo,cLo,dce,mLo,fLo,gLo,pe,l2,cce,hLo,uLo,sD,pLo,_Lo,bLo,i2,mce,vLo,FLo,lD,TLo,MLo,ELo,d2,fce,CLo,wLo,iD,ALo,yLo,LLo,c2,gce,xLo,$Lo,dD,kLo,SLo,RLo,m2,hce,PLo,BLo,cD,ILo,qLo,NLo,f2,uce,jLo,DLo,mD,GLo,OLo,VLo,g2,pce,XLo,zLo,fD,WLo,QLo,HLo,h2,_ce,ULo,JLo,gD,YLo,KLo,ZLo,u2,bce,e8o,o8o,hD,r8o,t8o,a8o,p2,vce,n8o,s8o,uD,l8o,i8o,d8o,_2,Fce,c8o,m8o,pD,f8o,g8o,h8o,b2,Tce,u8o,p8o,_D,_8o,b8o,v8o,v2,Mce,F8o,T8o,bD,M8o,E8o,C8o,F2,Ece,w8o,A8o,vD,y8o,L8o,x8o,T2,Cce,$8o,k8o,FD,S8o,R8o,P8o,M2,wce,B8o,I8o,TD,q8o,N8o,j8o,E2,D8o,Ace,G8o,O8o,yce,V8o,X8o,C2,HIe,ji,w2,Lce,aL,z8o,xce,W8o,UIe,Ro,nL,Q8o,Di,H8o,MD,U8o,J8o,ED,Y8o,K8o,Z8o,sL,exo,$ce,oxo,rxo,txo,it,lL,axo,kce,nxo,sxo,Gi,lxo,Sce,ixo,dxo,CD,cxo,mxo,fxo,A2,gxo,oo,iL,hxo,Rce,uxo,pxo,Ra,_xo,Pce,bxo,vxo,Bce,Fxo,Txo,Ice,Mxo,Exo,Cxo,q,y2,qce,wxo,Axo,wD,yxo,Lxo,xxo,L2,Nce,$xo,kxo,AD,Sxo,Rxo,Pxo,x2,jce,Bxo,Ixo,yD,qxo,Nxo,jxo,$2,Dce,Dxo,Gxo,LD,Oxo,Vxo,Xxo,k2,Gce,zxo,Wxo,xD,Qxo,Hxo,Uxo,S2,Oce,Jxo,Yxo,$D,Kxo,Zxo,e9o,R2,Vce,o9o,r9o,kD,t9o,a9o,n9o,P2,Xce,s9o,l9o,SD,i9o,d9o,c9o,B2,zce,m9o,f9o,RD,g9o,h9o,u9o,I2,Wce,p9o,_9o,PD,b9o,v9o,F9o,q2,Qce,T9o,M9o,BD,E9o,C9o,w9o,N2,Hce,A9o,y9o,ID,L9o,x9o,$9o,j2,Uce,k9o,S9o,qD,R9o,P9o,B9o,D2,Jce,I9o,q9o,ND,N9o,j9o,D9o,G2,Yce,G9o,O9o,jD,V9o,X9o,z9o,O2,Kce,W9o,Q9o,DD,H9o,U9o,J9o,V2,Zce,Y9o,K9o,GD,Z9o,e7o,o7o,X2,eme,r7o,t7o,OD,a7o,n7o,s7o,z2,ome,l7o,i7o,VD,d7o,c7o,m7o,W2,rme,f7o,g7o,XD,h7o,u7o,p7o,Q2,tme,_7o,b7o,zD,v7o,F7o,T7o,H2,ame,M7o,E7o,WD,C7o,w7o,A7o,U2,nme,y7o,L7o,QD,x7o,$7o,k7o,J2,sme,S7o,R7o,HD,P7o,B7o,I7o,Y2,lme,q7o,N7o,UD,j7o,D7o,G7o,K2,ime,O7o,V7o,JD,X7o,z7o,W7o,Z2,dme,Q7o,H7o,YD,U7o,J7o,Y7o,ev,cme,K7o,Z7o,KD,e$o,o$o,r$o,ov,mme,t$o,a$o,ZD,n$o,s$o,l$o,rv,fme,i$o,d$o,eG,c$o,m$o,f$o,tv,gme,g$o,h$o,oG,u$o,p$o,_$o,av,hme,b$o,v$o,rG,F$o,T$o,M$o,nv,ume,E$o,C$o,tG,w$o,A$o,y$o,sv,pme,L$o,x$o,aG,$$o,k$o,S$o,lv,_me,R$o,P$o,nG,B$o,I$o,q$o,iv,bme,N$o,j$o,sG,D$o,G$o,O$o,dv,vme,V$o,X$o,lG,z$o,W$o,Q$o,cv,Fme,H$o,U$o,iG,J$o,Y$o,K$o,mv,Tme,Z$o,eko,dG,oko,rko,tko,fv,Mme,ako,nko,cG,sko,lko,iko,gv,Eme,dko,cko,mG,mko,fko,gko,hv,Cme,hko,uko,fG,pko,_ko,bko,uv,wme,vko,Fko,gG,Tko,Mko,Eko,pv,Ame,Cko,wko,hG,Ako,yko,Lko,_v,yme,xko,$ko,uG,kko,Sko,Rko,bv,Lme,Pko,Bko,pG,Iko,qko,Nko,vv,jko,xme,Dko,Gko,$me,Oko,Vko,Fv,JIe,Oi,Tv,kme,dL,Xko,Sme,zko,YIe,Po,cL,Wko,Vi,Qko,_G,Hko,Uko,bG,Jko,Yko,Kko,mL,Zko,Rme,eSo,oSo,rSo,dt,fL,tSo,Pme,aSo,nSo,Xi,sSo,Bme,lSo,iSo,vG,dSo,cSo,mSo,Mv,fSo,ro,gL,gSo,Ime,hSo,uSo,Pa,pSo,qme,_So,bSo,Nme,vSo,FSo,jme,TSo,MSo,ESo,Y,Ev,Dme,CSo,wSo,FG,ASo,ySo,LSo,Cv,Gme,xSo,$So,TG,kSo,SSo,RSo,wv,Ome,PSo,BSo,MG,ISo,qSo,NSo,Av,Vme,jSo,DSo,EG,GSo,OSo,VSo,yv,Xme,XSo,zSo,CG,WSo,QSo,HSo,Lv,zme,USo,JSo,wG,YSo,KSo,ZSo,xv,Wme,eRo,oRo,AG,rRo,tRo,aRo,$v,Qme,nRo,sRo,yG,lRo,iRo,dRo,kv,Hme,cRo,mRo,LG,fRo,gRo,hRo,Sv,Ume,uRo,pRo,xG,_Ro,bRo,vRo,Rv,Jme,FRo,TRo,$G,MRo,ERo,CRo,Pv,Yme,wRo,ARo,kG,yRo,LRo,xRo,Bv,Kme,$Ro,kRo,SG,SRo,RRo,PRo,Iv,Zme,BRo,IRo,RG,qRo,NRo,jRo,qv,efe,DRo,GRo,PG,ORo,VRo,XRo,Nv,ofe,zRo,WRo,BG,QRo,HRo,URo,jv,rfe,JRo,YRo,IG,KRo,ZRo,ePo,Dv,tfe,oPo,rPo,qG,tPo,aPo,nPo,Gv,afe,sPo,lPo,NG,iPo,dPo,cPo,Ov,nfe,mPo,fPo,jG,gPo,hPo,uPo,Vv,sfe,pPo,_Po,DG,bPo,vPo,FPo,Xv,lfe,TPo,MPo,GG,EPo,CPo,wPo,zv,ife,APo,yPo,OG,LPo,xPo,$Po,Wv,dfe,kPo,SPo,VG,RPo,PPo,BPo,Qv,cfe,IPo,qPo,XG,NPo,jPo,DPo,Hv,mfe,GPo,OPo,zG,VPo,XPo,zPo,Uv,ffe,WPo,QPo,WG,HPo,UPo,JPo,Jv,gfe,YPo,KPo,QG,ZPo,eBo,oBo,Yv,hfe,rBo,tBo,HG,aBo,nBo,sBo,Kv,lBo,ufe,iBo,dBo,pfe,cBo,mBo,Zv,KIe,zi,eF,_fe,hL,fBo,bfe,gBo,ZIe,Bo,uL,hBo,Wi,uBo,UG,pBo,_Bo,JG,bBo,vBo,FBo,pL,TBo,vfe,MBo,EBo,CBo,ct,_L,wBo,Ffe,ABo,yBo,Qi,LBo,Tfe,xBo,$Bo,YG,kBo,SBo,RBo,oF,PBo,to,bL,BBo,Mfe,IBo,qBo,Ba,NBo,Efe,jBo,DBo,Cfe,GBo,OBo,wfe,VBo,XBo,zBo,Yr,rF,Afe,WBo,QBo,KG,HBo,UBo,JBo,tF,yfe,YBo,KBo,ZG,ZBo,eIo,oIo,aF,Lfe,rIo,tIo,eO,aIo,nIo,sIo,nF,xfe,lIo,iIo,oO,dIo,cIo,mIo,sF,$fe,fIo,gIo,rO,hIo,uIo,pIo,lF,_Io,kfe,bIo,vIo,Sfe,FIo,TIo,iF,eqe,Hi,dF,Rfe,vL,MIo,Pfe,EIo,oqe,Io,FL,CIo,Ui,wIo,tO,AIo,yIo,aO,LIo,xIo,$Io,TL,kIo,Bfe,SIo,RIo,PIo,mt,ML,BIo,Ife,IIo,qIo,Ji,NIo,qfe,jIo,DIo,nO,GIo,OIo,VIo,cF,XIo,ao,EL,zIo,Nfe,WIo,QIo,Ia,HIo,jfe,UIo,JIo,Dfe,YIo,KIo,Gfe,ZIo,eqo,oqo,U,mF,Ofe,rqo,tqo,sO,aqo,nqo,sqo,fF,Vfe,lqo,iqo,lO,dqo,cqo,mqo,gF,Xfe,fqo,gqo,iO,hqo,uqo,pqo,hF,zfe,_qo,bqo,dO,vqo,Fqo,Tqo,uF,Wfe,Mqo,Eqo,cO,Cqo,wqo,Aqo,pF,Qfe,yqo,Lqo,mO,xqo,$qo,kqo,_F,Hfe,Sqo,Rqo,fO,Pqo,Bqo,Iqo,bF,Ufe,qqo,Nqo,gO,jqo,Dqo,Gqo,vF,Jfe,Oqo,Vqo,hO,Xqo,zqo,Wqo,FF,Yfe,Qqo,Hqo,uO,Uqo,Jqo,Yqo,TF,Kfe,Kqo,Zqo,pO,eNo,oNo,rNo,MF,Zfe,tNo,aNo,_O,nNo,sNo,lNo,EF,ege,iNo,dNo,bO,cNo,mNo,fNo,CF,oge,gNo,hNo,vO,uNo,pNo,_No,wF,rge,bNo,vNo,FO,FNo,TNo,MNo,AF,tge,ENo,CNo,TO,wNo,ANo,yNo,yF,age,LNo,xNo,MO,$No,kNo,SNo,LF,nge,RNo,PNo,EO,BNo,INo,qNo,xF,sge,NNo,jNo,CO,DNo,GNo,ONo,$F,lge,VNo,XNo,wO,zNo,WNo,QNo,kF,ige,HNo,UNo,AO,JNo,YNo,KNo,SF,dge,ZNo,ejo,yO,ojo,rjo,tjo,RF,cge,ajo,njo,LO,sjo,ljo,ijo,PF,mge,djo,cjo,xO,mjo,fjo,gjo,BF,fge,hjo,ujo,$O,pjo,_jo,bjo,IF,gge,vjo,Fjo,kO,Tjo,Mjo,Ejo,qF,hge,Cjo,wjo,SO,Ajo,yjo,Ljo,NF,uge,xjo,$jo,RO,kjo,Sjo,Rjo,jF,pge,Pjo,Bjo,PO,Ijo,qjo,Njo,DF,_ge,jjo,Djo,BO,Gjo,Ojo,Vjo,GF,bge,Xjo,zjo,IO,Wjo,Qjo,Hjo,OF,vge,Ujo,Jjo,qO,Yjo,Kjo,Zjo,VF,Fge,eDo,oDo,NO,rDo,tDo,aDo,XF,nDo,Tge,sDo,lDo,Mge,iDo,dDo,zF,rqe,Yi,WF,Ege,CL,cDo,Cge,mDo,tqe,qo,wL,fDo,Ki,gDo,jO,hDo,uDo,DO,pDo,_Do,bDo,AL,vDo,wge,FDo,TDo,MDo,ft,yL,EDo,Age,CDo,wDo,Zi,ADo,yge,yDo,LDo,GO,xDo,$Do,kDo,QF,SDo,no,LL,RDo,Lge,PDo,BDo,qa,IDo,xge,qDo,NDo,$ge,jDo,DDo,kge,GDo,ODo,VDo,V,HF,Sge,XDo,zDo,OO,WDo,QDo,HDo,UF,Rge,UDo,JDo,VO,YDo,KDo,ZDo,JF,Pge,eGo,oGo,XO,rGo,tGo,aGo,YF,Bge,nGo,sGo,zO,lGo,iGo,dGo,KF,Ige,cGo,mGo,WO,fGo,gGo,hGo,ZF,qge,uGo,pGo,QO,_Go,bGo,vGo,e1,Nge,FGo,TGo,HO,MGo,EGo,CGo,o1,jge,wGo,AGo,UO,yGo,LGo,xGo,r1,Dge,$Go,kGo,JO,SGo,RGo,PGo,t1,Gge,BGo,IGo,YO,qGo,NGo,jGo,a1,Oge,DGo,GGo,KO,OGo,VGo,XGo,n1,Vge,zGo,WGo,ZO,QGo,HGo,UGo,s1,Xge,JGo,YGo,eV,KGo,ZGo,eOo,l1,zge,oOo,rOo,oV,tOo,aOo,nOo,i1,Wge,sOo,lOo,rV,iOo,dOo,cOo,d1,Qge,mOo,fOo,tV,gOo,hOo,uOo,c1,Hge,pOo,_Oo,aV,bOo,vOo,FOo,m1,Uge,TOo,MOo,nV,EOo,COo,wOo,f1,Jge,AOo,yOo,sV,LOo,xOo,$Oo,g1,Yge,kOo,SOo,lV,ROo,POo,BOo,h1,Kge,IOo,qOo,iV,NOo,jOo,DOo,u1,Zge,GOo,OOo,dV,VOo,XOo,zOo,p1,ehe,WOo,QOo,cV,HOo,UOo,JOo,_1,ohe,YOo,KOo,mV,ZOo,eVo,oVo,b1,rhe,rVo,tVo,fV,aVo,nVo,sVo,v1,the,lVo,iVo,gV,dVo,cVo,mVo,F1,ahe,fVo,gVo,hV,hVo,uVo,pVo,T1,nhe,_Vo,bVo,uV,vVo,FVo,TVo,M1,she,MVo,EVo,pV,CVo,wVo,AVo,E1,lhe,yVo,LVo,_V,xVo,$Vo,kVo,C1,ihe,SVo,RVo,bV,PVo,BVo,IVo,w1,dhe,qVo,NVo,vV,jVo,DVo,GVo,A1,che,OVo,VVo,FV,XVo,zVo,WVo,y1,mhe,QVo,HVo,TV,UVo,JVo,YVo,L1,fhe,KVo,ZVo,MV,eXo,oXo,rXo,x1,ghe,tXo,aXo,EV,nXo,sXo,lXo,$1,hhe,iXo,dXo,CV,cXo,mXo,fXo,k1,uhe,gXo,hXo,wV,uXo,pXo,_Xo,S1,phe,bXo,vXo,AV,FXo,TXo,MXo,R1,EXo,_he,CXo,wXo,bhe,AXo,yXo,P1,aqe,ed,B1,vhe,xL,LXo,Fhe,xXo,nqe,No,$L,$Xo,od,kXo,yV,SXo,RXo,LV,PXo,BXo,IXo,kL,qXo,The,NXo,jXo,DXo,gt,SL,GXo,Mhe,OXo,VXo,rd,XXo,Ehe,zXo,WXo,xV,QXo,HXo,UXo,I1,JXo,so,RL,YXo,Che,KXo,ZXo,Na,ezo,whe,ozo,rzo,Ahe,tzo,azo,yhe,nzo,szo,lzo,Lhe,q1,xhe,izo,dzo,$V,czo,mzo,fzo,N1,gzo,$he,hzo,uzo,khe,pzo,_zo,j1,sqe,td,D1,She,PL,bzo,Rhe,vzo,lqe,jo,BL,Fzo,ad,Tzo,kV,Mzo,Ezo,SV,Czo,wzo,Azo,IL,yzo,Phe,Lzo,xzo,$zo,ht,qL,kzo,Bhe,Szo,Rzo,nd,Pzo,Ihe,Bzo,Izo,RV,qzo,Nzo,jzo,G1,Dzo,lo,NL,Gzo,qhe,Ozo,Vzo,ja,Xzo,Nhe,zzo,Wzo,jhe,Qzo,Hzo,Dhe,Uzo,Jzo,Yzo,Fe,O1,Ghe,Kzo,Zzo,PV,eWo,oWo,rWo,V1,Ohe,tWo,aWo,BV,nWo,sWo,lWo,X1,Vhe,iWo,dWo,IV,cWo,mWo,fWo,Ps,Xhe,gWo,hWo,qV,uWo,pWo,NV,_Wo,bWo,vWo,z1,zhe,FWo,TWo,jV,MWo,EWo,CWo,ut,Whe,wWo,AWo,DV,yWo,LWo,GV,xWo,$Wo,OV,kWo,SWo,RWo,W1,Qhe,PWo,BWo,VV,IWo,qWo,NWo,Q1,Hhe,jWo,DWo,XV,GWo,OWo,VWo,H1,Uhe,XWo,zWo,zV,WWo,QWo,HWo,U1,Jhe,UWo,JWo,WV,YWo,KWo,ZWo,J1,Yhe,eQo,oQo,QV,rQo,tQo,aQo,Y1,Khe,nQo,sQo,HV,lQo,iQo,dQo,K1,Zhe,cQo,mQo,UV,fQo,gQo,hQo,Z1,uQo,eue,pQo,_Qo,oue,bQo,vQo,eT,iqe,sd,oT,rue,jL,FQo,tue,TQo,dqe,Do,DL,MQo,ld,EQo,JV,CQo,wQo,YV,AQo,yQo,LQo,GL,xQo,aue,$Qo,kQo,SQo,pt,OL,RQo,nue,PQo,BQo,id,IQo,sue,qQo,NQo,KV,jQo,DQo,GQo,rT,OQo,io,VL,VQo,lue,XQo,zQo,Da,WQo,iue,QQo,HQo,due,UQo,JQo,cue,YQo,KQo,ZQo,mue,tT,fue,eHo,oHo,ZV,rHo,tHo,aHo,aT,nHo,gue,sHo,lHo,hue,iHo,dHo,nT,cqe,dd,sT,uue,XL,cHo,pue,mHo,mqe,Go,zL,fHo,cd,gHo,eX,hHo,uHo,oX,pHo,_Ho,bHo,WL,vHo,_ue,FHo,THo,MHo,_t,QL,EHo,bue,CHo,wHo,md,AHo,vue,yHo,LHo,rX,xHo,$Ho,kHo,lT,SHo,co,HL,RHo,Fue,PHo,BHo,Ga,IHo,Tue,qHo,NHo,Mue,jHo,DHo,Eue,GHo,OHo,VHo,ke,iT,Cue,XHo,zHo,tX,WHo,QHo,HHo,dT,wue,UHo,JHo,aX,YHo,KHo,ZHo,cT,Aue,eUo,oUo,nX,rUo,tUo,aUo,mT,yue,nUo,sUo,sX,lUo,iUo,dUo,fT,Lue,cUo,mUo,lX,fUo,gUo,hUo,gT,xue,uUo,pUo,iX,_Uo,bUo,vUo,hT,$ue,FUo,TUo,dX,MUo,EUo,CUo,uT,kue,wUo,AUo,cX,yUo,LUo,xUo,pT,Sue,$Uo,kUo,mX,SUo,RUo,PUo,_T,BUo,Rue,IUo,qUo,Pue,NUo,jUo,bT,fqe,fd,vT,Bue,UL,DUo,Iue,GUo,gqe,Oo,JL,OUo,gd,VUo,fX,XUo,zUo,gX,WUo,QUo,HUo,YL,UUo,que,JUo,YUo,KUo,bt,KL,ZUo,Nue,eJo,oJo,hd,rJo,jue,tJo,aJo,hX,nJo,sJo,lJo,FT,iJo,mo,ZL,dJo,Due,cJo,mJo,Oa,fJo,Gue,gJo,hJo,Oue,uJo,pJo,Vue,_Jo,bJo,vJo,Kr,TT,Xue,FJo,TJo,uX,MJo,EJo,CJo,MT,zue,wJo,AJo,pX,yJo,LJo,xJo,ET,Wue,$Jo,kJo,_X,SJo,RJo,PJo,CT,Que,BJo,IJo,bX,qJo,NJo,jJo,wT,Hue,DJo,GJo,vX,OJo,VJo,XJo,AT,zJo,Uue,WJo,QJo,Jue,HJo,UJo,yT,hqe,ud,LT,Yue,e8,JJo,Kue,YJo,uqe,Vo,o8,KJo,pd,ZJo,FX,eYo,oYo,TX,rYo,tYo,aYo,r8,nYo,Zue,sYo,lYo,iYo,vt,t8,dYo,epe,cYo,mYo,_d,fYo,ope,gYo,hYo,MX,uYo,pYo,_Yo,xT,bYo,fo,a8,vYo,rpe,FYo,TYo,Va,MYo,tpe,EYo,CYo,ape,wYo,AYo,npe,yYo,LYo,xYo,Se,$T,spe,$Yo,kYo,EX,SYo,RYo,PYo,kT,lpe,BYo,IYo,CX,qYo,NYo,jYo,ST,ipe,DYo,GYo,wX,OYo,VYo,XYo,RT,dpe,zYo,WYo,AX,QYo,HYo,UYo,PT,cpe,JYo,YYo,yX,KYo,ZYo,eKo,BT,mpe,oKo,rKo,LX,tKo,aKo,nKo,IT,fpe,sKo,lKo,xX,iKo,dKo,cKo,qT,gpe,mKo,fKo,$X,gKo,hKo,uKo,NT,hpe,pKo,_Ko,kX,bKo,vKo,FKo,jT,TKo,upe,MKo,EKo,ppe,CKo,wKo,DT,pqe,bd,GT,_pe,n8,AKo,bpe,yKo,_qe,Xo,s8,LKo,vd,xKo,SX,$Ko,kKo,RX,SKo,RKo,PKo,l8,BKo,vpe,IKo,qKo,NKo,Ft,i8,jKo,Fpe,DKo,GKo,Fd,OKo,Tpe,VKo,XKo,PX,zKo,WKo,QKo,OT,HKo,go,d8,UKo,Mpe,JKo,YKo,Xa,KKo,Epe,ZKo,eZo,Cpe,oZo,rZo,wpe,tZo,aZo,nZo,c8,VT,Ape,sZo,lZo,BX,iZo,dZo,cZo,XT,ype,mZo,fZo,IX,gZo,hZo,uZo,zT,pZo,Lpe,_Zo,bZo,xpe,vZo,FZo,WT,bqe,Td,QT,$pe,m8,TZo,kpe,MZo,vqe,zo,f8,EZo,Md,CZo,qX,wZo,AZo,NX,yZo,LZo,xZo,g8,$Zo,Spe,kZo,SZo,RZo,Tt,h8,PZo,Rpe,BZo,IZo,Ed,qZo,Ppe,NZo,jZo,jX,DZo,GZo,OZo,HT,VZo,ho,u8,XZo,Bpe,zZo,WZo,za,QZo,Ipe,HZo,UZo,qpe,JZo,YZo,Npe,KZo,ZZo,eer,Zr,UT,jpe,oer,rer,DX,ter,aer,ner,JT,Dpe,ser,ler,GX,ier,der,cer,YT,Gpe,mer,fer,OX,ger,her,uer,KT,Ope,per,_er,VX,ber,ver,Fer,ZT,Vpe,Ter,Mer,XX,Eer,Cer,wer,eM,Aer,Xpe,yer,Ler,zpe,xer,$er,oM,Fqe,Cd,rM,Wpe,p8,ker,Qpe,Ser,Tqe,Wo,_8,Rer,wd,Per,zX,Ber,Ier,WX,qer,Ner,jer,b8,Der,Hpe,Ger,Oer,Ver,Mt,v8,Xer,Upe,zer,Wer,Ad,Qer,Jpe,Her,Uer,QX,Jer,Yer,Ker,tM,Zer,uo,F8,eor,Ype,oor,ror,Wa,tor,Kpe,aor,nor,Zpe,sor,lor,e_e,ior,dor,cor,yd,aM,o_e,mor,gor,HX,hor,uor,por,nM,r_e,_or,bor,UX,vor,For,Tor,sM,t_e,Mor,Eor,JX,Cor,wor,Aor,lM,yor,a_e,Lor,xor,n_e,$or,kor,iM,Mqe,Ld,dM,s_e,T8,Sor,l_e,Ror,Eqe,Qo,M8,Por,xd,Bor,YX,Ior,qor,KX,Nor,jor,Dor,E8,Gor,i_e,Oor,Vor,Xor,Et,C8,zor,d_e,Wor,Qor,$d,Hor,c_e,Uor,Jor,ZX,Yor,Kor,Zor,cM,err,po,w8,orr,m_e,rrr,trr,Qa,arr,f_e,nrr,srr,g_e,lrr,irr,h_e,drr,crr,mrr,A8,mM,u_e,frr,grr,ez,hrr,urr,prr,fM,p_e,_rr,brr,oz,vrr,Frr,Trr,gM,Mrr,__e,Err,Crr,b_e,wrr,Arr,hM,Cqe,kd,uM,v_e,y8,yrr,F_e,Lrr,wqe,Ho,L8,xrr,Sd,$rr,rz,krr,Srr,tz,Rrr,Prr,Brr,x8,Irr,T_e,qrr,Nrr,jrr,Ct,$8,Drr,M_e,Grr,Orr,Rd,Vrr,E_e,Xrr,zrr,az,Wrr,Qrr,Hrr,pM,Urr,_o,k8,Jrr,C_e,Yrr,Krr,Ha,Zrr,w_e,etr,otr,A_e,rtr,ttr,y_e,atr,ntr,str,L_e,_M,x_e,ltr,itr,nz,dtr,ctr,mtr,bM,ftr,$_e,gtr,htr,k_e,utr,ptr,vM,Aqe,Pd,FM,S_e,S8,_tr,R_e,btr,yqe,Uo,R8,vtr,Bd,Ftr,sz,Ttr,Mtr,lz,Etr,Ctr,wtr,P8,Atr,P_e,ytr,Ltr,xtr,wt,B8,$tr,B_e,ktr,Str,Id,Rtr,I_e,Ptr,Btr,iz,Itr,qtr,Ntr,TM,jtr,bo,I8,Dtr,q_e,Gtr,Otr,Ua,Vtr,N_e,Xtr,ztr,j_e,Wtr,Qtr,D_e,Htr,Utr,Jtr,Ja,MM,G_e,Ytr,Ktr,dz,Ztr,ear,oar,EM,O_e,rar,tar,cz,aar,nar,sar,CM,V_e,lar,iar,mz,dar,car,mar,wM,X_e,far,gar,fz,har,uar,par,AM,_ar,z_e,bar,Far,W_e,Tar,Mar,yM,Lqe,qd,LM,Q_e,q8,Ear,H_e,Car,xqe,Jo,N8,war,Nd,Aar,gz,yar,Lar,hz,xar,$ar,kar,j8,Sar,U_e,Rar,Par,Bar,At,D8,Iar,J_e,qar,Nar,jd,jar,Y_e,Dar,Gar,uz,Oar,Var,Xar,xM,zar,vo,G8,War,K_e,Qar,Har,Ya,Uar,Z_e,Jar,Yar,ebe,Kar,Zar,obe,enr,onr,rnr,rbe,$M,tbe,tnr,anr,pz,nnr,snr,lnr,kM,inr,abe,dnr,cnr,nbe,mnr,fnr,SM,$qe,Dd,RM,sbe,O8,gnr,lbe,hnr,kqe,Yo,V8,unr,Gd,pnr,_z,_nr,bnr,bz,vnr,Fnr,Tnr,X8,Mnr,ibe,Enr,Cnr,wnr,yt,z8,Anr,dbe,ynr,Lnr,Od,xnr,cbe,$nr,knr,vz,Snr,Rnr,Pnr,PM,Bnr,wr,W8,Inr,mbe,qnr,Nnr,Ka,jnr,fbe,Dnr,Gnr,gbe,Onr,Vnr,hbe,Xnr,znr,Wnr,N,BM,ube,Qnr,Hnr,Fz,Unr,Jnr,Ynr,IM,pbe,Knr,Znr,Tz,esr,osr,rsr,qM,_be,tsr,asr,Mz,nsr,ssr,lsr,NM,bbe,isr,dsr,Ez,csr,msr,fsr,jM,vbe,gsr,hsr,Cz,usr,psr,_sr,DM,Fbe,bsr,vsr,wz,Fsr,Tsr,Msr,GM,Tbe,Esr,Csr,Az,wsr,Asr,ysr,OM,Mbe,Lsr,xsr,yz,$sr,ksr,Ssr,VM,Ebe,Rsr,Psr,Lz,Bsr,Isr,qsr,XM,Cbe,Nsr,jsr,xz,Dsr,Gsr,Osr,zM,wbe,Vsr,Xsr,$z,zsr,Wsr,Qsr,WM,Abe,Hsr,Usr,kz,Jsr,Ysr,Ksr,QM,ybe,Zsr,elr,Sz,olr,rlr,tlr,HM,Lbe,alr,nlr,Rz,slr,llr,ilr,UM,xbe,dlr,clr,Pz,mlr,flr,glr,JM,$be,hlr,ulr,Bz,plr,_lr,blr,YM,kbe,vlr,Flr,Iz,Tlr,Mlr,Elr,Bs,Sbe,Clr,wlr,qz,Alr,ylr,Nz,Llr,xlr,$lr,KM,Rbe,klr,Slr,jz,Rlr,Plr,Blr,ZM,Pbe,Ilr,qlr,Dz,Nlr,jlr,Dlr,e4,Bbe,Glr,Olr,Gz,Vlr,Xlr,zlr,o4,Ibe,Wlr,Qlr,Oz,Hlr,Ulr,Jlr,r4,qbe,Ylr,Klr,Vz,Zlr,eir,oir,t4,Nbe,rir,tir,Xz,air,nir,sir,a4,jbe,lir,iir,zz,dir,cir,mir,n4,Dbe,fir,gir,Wz,hir,uir,pir,s4,Gbe,_ir,bir,Qz,vir,Fir,Tir,l4,Obe,Mir,Eir,Hz,Cir,wir,Air,i4,Vbe,yir,Lir,Uz,xir,$ir,kir,d4,Xbe,Sir,Rir,Jz,Pir,Bir,Iir,c4,zbe,qir,Nir,Yz,jir,Dir,Gir,m4,Wbe,Oir,Vir,Kz,Xir,zir,Wir,f4,Qbe,Qir,Hir,Zz,Uir,Jir,Yir,g4,Hbe,Kir,Zir,eW,edr,odr,rdr,h4,Ube,tdr,adr,oW,ndr,sdr,ldr,u4,Jbe,idr,ddr,rW,cdr,mdr,fdr,p4,Ybe,gdr,hdr,tW,udr,pdr,_dr,_4,Kbe,bdr,vdr,aW,Fdr,Tdr,Mdr,b4,Zbe,Edr,Cdr,nW,wdr,Adr,ydr,v4,e2e,Ldr,xdr,sW,$dr,kdr,Sdr,F4,o2e,Rdr,Pdr,lW,Bdr,Idr,qdr,T4,r2e,Ndr,jdr,iW,Ddr,Gdr,Odr,M4,t2e,Vdr,Xdr,dW,zdr,Wdr,Qdr,E4,a2e,Hdr,Udr,cW,Jdr,Ydr,Kdr,C4,n2e,Zdr,ecr,mW,ocr,rcr,tcr,w4,s2e,acr,ncr,fW,scr,lcr,icr,A4,Sqe,Vd,y4,l2e,Q8,dcr,i2e,ccr,Rqe,Ko,H8,mcr,Xd,fcr,gW,gcr,hcr,hW,ucr,pcr,_cr,U8,bcr,d2e,vcr,Fcr,Tcr,Lt,J8,Mcr,c2e,Ecr,Ccr,zd,wcr,m2e,Acr,ycr,uW,Lcr,xcr,$cr,L4,kcr,Ar,Y8,Scr,f2e,Rcr,Pcr,Za,Bcr,g2e,Icr,qcr,h2e,Ncr,jcr,u2e,Dcr,Gcr,Ocr,se,x4,p2e,Vcr,Xcr,pW,zcr,Wcr,Qcr,$4,_2e,Hcr,Ucr,_W,Jcr,Ycr,Kcr,k4,b2e,Zcr,emr,bW,omr,rmr,tmr,S4,v2e,amr,nmr,vW,smr,lmr,imr,R4,F2e,dmr,cmr,FW,mmr,fmr,gmr,P4,T2e,hmr,umr,TW,pmr,_mr,bmr,B4,M2e,vmr,Fmr,MW,Tmr,Mmr,Emr,I4,E2e,Cmr,wmr,EW,Amr,ymr,Lmr,q4,C2e,xmr,$mr,CW,kmr,Smr,Rmr,N4,w2e,Pmr,Bmr,wW,Imr,qmr,Nmr,j4,A2e,jmr,Dmr,AW,Gmr,Omr,Vmr,D4,y2e,Xmr,zmr,yW,Wmr,Qmr,Hmr,G4,L2e,Umr,Jmr,LW,Ymr,Kmr,Zmr,O4,x2e,efr,ofr,xW,rfr,tfr,afr,V4,$2e,nfr,sfr,$W,lfr,ifr,dfr,X4,k2e,cfr,mfr,kW,ffr,gfr,hfr,z4,S2e,ufr,pfr,SW,_fr,bfr,vfr,W4,R2e,Ffr,Tfr,RW,Mfr,Efr,Cfr,Q4,P2e,wfr,Afr,PW,yfr,Lfr,xfr,H4,B2e,$fr,kfr,BW,Sfr,Rfr,Pfr,U4,I2e,Bfr,Ifr,IW,qfr,Nfr,jfr,J4,q2e,Dfr,Gfr,qW,Ofr,Vfr,Xfr,Y4,N2e,zfr,Wfr,NW,Qfr,Hfr,Ufr,K4,Pqe,Wd,Z4,j2e,K8,Jfr,D2e,Yfr,Bqe,Zo,Z8,Kfr,Qd,Zfr,jW,egr,ogr,DW,rgr,tgr,agr,ex,ngr,G2e,sgr,lgr,igr,xt,ox,dgr,O2e,cgr,mgr,Hd,fgr,V2e,ggr,hgr,GW,ugr,pgr,_gr,eE,bgr,yr,rx,vgr,X2e,Fgr,Tgr,en,Mgr,z2e,Egr,Cgr,W2e,wgr,Agr,Q2e,ygr,Lgr,xgr,Te,oE,H2e,$gr,kgr,OW,Sgr,Rgr,Pgr,rE,U2e,Bgr,Igr,VW,qgr,Ngr,jgr,tE,J2e,Dgr,Ggr,XW,Ogr,Vgr,Xgr,aE,Y2e,zgr,Wgr,zW,Qgr,Hgr,Ugr,nE,K2e,Jgr,Ygr,WW,Kgr,Zgr,ehr,sE,Z2e,ohr,rhr,QW,thr,ahr,nhr,lE,eve,shr,lhr,HW,ihr,dhr,chr,iE,ove,mhr,fhr,UW,ghr,hhr,uhr,dE,rve,phr,_hr,JW,bhr,vhr,Fhr,cE,tve,Thr,Mhr,YW,Ehr,Chr,whr,mE,ave,Ahr,yhr,KW,Lhr,xhr,$hr,fE,nve,khr,Shr,ZW,Rhr,Phr,Bhr,gE,Iqe,Ud,hE,sve,tx,Ihr,lve,qhr,qqe,er,ax,Nhr,Jd,jhr,eQ,Dhr,Ghr,oQ,Ohr,Vhr,Xhr,nx,zhr,ive,Whr,Qhr,Hhr,$t,sx,Uhr,dve,Jhr,Yhr,Yd,Khr,cve,Zhr,eur,rQ,our,rur,tur,uE,aur,Lr,lx,nur,mve,sur,lur,on,iur,fve,dur,cur,gve,mur,fur,hve,gur,hur,uur,rn,pE,uve,pur,_ur,tQ,bur,vur,Fur,_E,pve,Tur,Mur,aQ,Eur,Cur,wur,bE,_ve,Aur,yur,nQ,Lur,xur,$ur,vE,bve,kur,Sur,sQ,Rur,Pur,Bur,FE,Nqe,Kd,TE,vve,ix,Iur,Fve,qur,jqe,or,dx,Nur,Zd,jur,lQ,Dur,Gur,iQ,Our,Vur,Xur,cx,zur,Tve,Wur,Qur,Hur,kt,mx,Uur,Mve,Jur,Yur,ec,Kur,Eve,Zur,epr,dQ,opr,rpr,tpr,ME,apr,xr,fx,npr,Cve,spr,lpr,tn,ipr,wve,dpr,cpr,Ave,mpr,fpr,yve,gpr,hpr,upr,ie,EE,Lve,ppr,_pr,cQ,bpr,vpr,Fpr,CE,xve,Tpr,Mpr,mQ,Epr,Cpr,wpr,wE,$ve,Apr,ypr,fQ,Lpr,xpr,$pr,AE,kve,kpr,Spr,gQ,Rpr,Ppr,Bpr,yE,Sve,Ipr,qpr,hQ,Npr,jpr,Dpr,LE,Rve,Gpr,Opr,uQ,Vpr,Xpr,zpr,xE,Pve,Wpr,Qpr,pQ,Hpr,Upr,Jpr,$E,Bve,Ypr,Kpr,_Q,Zpr,e_r,o_r,kE,Ive,r_r,t_r,bQ,a_r,n_r,s_r,SE,qve,l_r,i_r,vQ,d_r,c_r,m_r,RE,Nve,f_r,g_r,FQ,h_r,u_r,p_r,PE,jve,__r,b_r,TQ,v_r,F_r,T_r,BE,Dve,M_r,E_r,MQ,C_r,w_r,A_r,IE,Gve,y_r,L_r,EQ,x_r,$_r,k_r,qE,Ove,S_r,R_r,CQ,P_r,B_r,I_r,NE,Vve,q_r,N_r,wQ,j_r,D_r,G_r,jE,Xve,O_r,V_r,AQ,X_r,z_r,W_r,DE,zve,Q_r,H_r,yQ,U_r,J_r,Y_r,GE,Wve,K_r,Z_r,LQ,ebr,obr,rbr,OE,Qve,tbr,abr,xQ,nbr,sbr,lbr,VE,Dqe,oc,XE,Hve,gx,ibr,Uve,dbr,Gqe,rr,hx,cbr,rc,mbr,$Q,fbr,gbr,kQ,hbr,ubr,pbr,ux,_br,Jve,bbr,vbr,Fbr,St,px,Tbr,Yve,Mbr,Ebr,tc,Cbr,Kve,wbr,Abr,SQ,ybr,Lbr,xbr,zE,$br,$r,_x,kbr,Zve,Sbr,Rbr,an,Pbr,eFe,Bbr,Ibr,oFe,qbr,Nbr,rFe,jbr,Dbr,Gbr,ye,WE,tFe,Obr,Vbr,RQ,Xbr,zbr,Wbr,QE,aFe,Qbr,Hbr,PQ,Ubr,Jbr,Ybr,HE,nFe,Kbr,Zbr,BQ,e2r,o2r,r2r,UE,sFe,t2r,a2r,IQ,n2r,s2r,l2r,JE,lFe,i2r,d2r,qQ,c2r,m2r,f2r,YE,iFe,g2r,h2r,NQ,u2r,p2r,_2r,KE,dFe,b2r,v2r,jQ,F2r,T2r,M2r,ZE,cFe,E2r,C2r,DQ,w2r,A2r,y2r,eC,mFe,L2r,x2r,GQ,$2r,k2r,S2r,oC,fFe,R2r,P2r,OQ,B2r,I2r,q2r,rC,Oqe,ac,tC,gFe,bx,N2r,hFe,j2r,Vqe,tr,vx,D2r,nc,G2r,VQ,O2r,V2r,XQ,X2r,z2r,W2r,Fx,Q2r,uFe,H2r,U2r,J2r,Rt,Tx,Y2r,pFe,K2r,Z2r,sc,evr,_Fe,ovr,rvr,zQ,tvr,avr,nvr,aC,svr,kr,Mx,lvr,bFe,ivr,dvr,nn,cvr,vFe,mvr,fvr,FFe,gvr,hvr,TFe,uvr,pvr,_vr,ee,nC,MFe,bvr,vvr,WQ,Fvr,Tvr,Mvr,sC,EFe,Evr,Cvr,QQ,wvr,Avr,yvr,lC,CFe,Lvr,xvr,HQ,$vr,kvr,Svr,iC,wFe,Rvr,Pvr,UQ,Bvr,Ivr,qvr,dC,AFe,Nvr,jvr,JQ,Dvr,Gvr,Ovr,cC,yFe,Vvr,Xvr,YQ,zvr,Wvr,Qvr,mC,LFe,Hvr,Uvr,KQ,Jvr,Yvr,Kvr,fC,xFe,Zvr,eFr,ZQ,oFr,rFr,tFr,gC,$Fe,aFr,nFr,eH,sFr,lFr,iFr,hC,kFe,dFr,cFr,oH,mFr,fFr,gFr,uC,SFe,hFr,uFr,rH,pFr,_Fr,bFr,pC,RFe,vFr,FFr,tH,TFr,MFr,EFr,_C,PFe,CFr,wFr,aH,AFr,yFr,LFr,bC,BFe,xFr,$Fr,nH,kFr,SFr,RFr,vC,IFe,PFr,BFr,sH,IFr,qFr,NFr,FC,qFe,jFr,DFr,lH,GFr,OFr,VFr,TC,NFe,XFr,zFr,iH,WFr,QFr,HFr,MC,jFe,UFr,JFr,dH,YFr,KFr,ZFr,EC,DFe,e1r,o1r,cH,r1r,t1r,a1r,CC,GFe,n1r,s1r,mH,l1r,i1r,d1r,wC,OFe,c1r,m1r,fH,f1r,g1r,h1r,AC,VFe,u1r,p1r,gH,_1r,b1r,v1r,yC,XFe,F1r,T1r,hH,M1r,E1r,C1r,LC,zFe,w1r,A1r,uH,y1r,L1r,x1r,xC,WFe,$1r,k1r,pH,S1r,R1r,P1r,$C,QFe,B1r,I1r,_H,q1r,N1r,j1r,kC,Xqe,lc,SC,HFe,Ex,D1r,UFe,G1r,zqe,ar,Cx,O1r,ic,V1r,bH,X1r,z1r,vH,W1r,Q1r,H1r,wx,U1r,JFe,J1r,Y1r,K1r,Pt,Ax,Z1r,YFe,eTr,oTr,dc,rTr,KFe,tTr,aTr,FH,nTr,sTr,lTr,RC,iTr,Sr,yx,dTr,ZFe,cTr,mTr,sn,fTr,e1e,gTr,hTr,o1e,uTr,pTr,r1e,_Tr,bTr,vTr,he,PC,t1e,FTr,TTr,TH,MTr,ETr,CTr,BC,a1e,wTr,ATr,MH,yTr,LTr,xTr,IC,n1e,$Tr,kTr,EH,STr,RTr,PTr,qC,s1e,BTr,ITr,CH,qTr,NTr,jTr,NC,l1e,DTr,GTr,wH,OTr,VTr,XTr,jC,i1e,zTr,WTr,AH,QTr,HTr,UTr,DC,d1e,JTr,YTr,yH,KTr,ZTr,eMr,GC,c1e,oMr,rMr,LH,tMr,aMr,nMr,OC,m1e,sMr,lMr,xH,iMr,dMr,cMr,VC,f1e,mMr,fMr,$H,gMr,hMr,uMr,XC,g1e,pMr,_Mr,kH,bMr,vMr,FMr,zC,h1e,TMr,MMr,SH,EMr,CMr,wMr,WC,u1e,AMr,yMr,RH,LMr,xMr,$Mr,QC,p1e,kMr,SMr,PH,RMr,PMr,BMr,HC,_1e,IMr,qMr,BH,NMr,jMr,DMr,UC,b1e,GMr,OMr,IH,VMr,XMr,zMr,JC,v1e,WMr,QMr,qH,HMr,UMr,JMr,YC,Wqe,cc,KC,F1e,Lx,YMr,T1e,KMr,Qqe,nr,xx,ZMr,mc,e4r,NH,o4r,r4r,jH,t4r,a4r,n4r,$x,s4r,M1e,l4r,i4r,d4r,Bt,kx,c4r,E1e,m4r,f4r,fc,g4r,C1e,h4r,u4r,DH,p4r,_4r,b4r,ZC,v4r,Rr,Sx,F4r,w1e,T4r,M4r,ln,E4r,A1e,C4r,w4r,y1e,A4r,y4r,L1e,L4r,x4r,$4r,Rx,e5,x1e,k4r,S4r,GH,R4r,P4r,B4r,o5,$1e,I4r,q4r,OH,N4r,j4r,D4r,r5,Hqe,gc,t5,k1e,Px,G4r,S1e,O4r,Uqe,sr,Bx,V4r,hc,X4r,VH,z4r,W4r,XH,Q4r,H4r,U4r,Ix,J4r,R1e,Y4r,K4r,Z4r,It,qx,eEr,P1e,oEr,rEr,uc,tEr,B1e,aEr,nEr,zH,sEr,lEr,iEr,a5,dEr,Pr,Nx,cEr,I1e,mEr,fEr,dn,gEr,q1e,hEr,uEr,N1e,pEr,_Er,j1e,bEr,vEr,FEr,D1e,n5,G1e,TEr,MEr,WH,EEr,CEr,wEr,s5,Jqe,pc,l5,O1e,jx,AEr,V1e,yEr,Yqe,lr,Dx,LEr,_c,xEr,QH,$Er,kEr,HH,SEr,REr,PEr,Gx,BEr,X1e,IEr,qEr,NEr,qt,Ox,jEr,z1e,DEr,GEr,bc,OEr,W1e,VEr,XEr,UH,zEr,WEr,QEr,i5,HEr,Br,Vx,UEr,Q1e,JEr,YEr,cn,KEr,H1e,ZEr,eCr,U1e,oCr,rCr,J1e,tCr,aCr,nCr,de,d5,Y1e,sCr,lCr,JH,iCr,dCr,cCr,c5,K1e,mCr,fCr,YH,gCr,hCr,uCr,m5,Z1e,pCr,_Cr,KH,bCr,vCr,FCr,f5,eTe,TCr,MCr,ZH,ECr,CCr,wCr,g5,oTe,ACr,yCr,eU,LCr,xCr,$Cr,h5,rTe,kCr,SCr,oU,RCr,PCr,BCr,u5,tTe,ICr,qCr,rU,NCr,jCr,DCr,p5,aTe,GCr,OCr,tU,VCr,XCr,zCr,_5,nTe,WCr,QCr,aU,HCr,UCr,JCr,b5,sTe,YCr,KCr,nU,ZCr,e5r,o5r,v5,lTe,r5r,t5r,sU,a5r,n5r,s5r,F5,iTe,l5r,i5r,lU,d5r,c5r,m5r,T5,dTe,f5r,g5r,iU,h5r,u5r,p5r,M5,cTe,_5r,b5r,dU,v5r,F5r,T5r,E5,mTe,M5r,E5r,cU,C5r,w5r,A5r,C5,fTe,y5r,L5r,mU,x5r,$5r,k5r,w5,gTe,S5r,R5r,fU,P5r,B5r,I5r,A5,hTe,q5r,N5r,gU,j5r,D5r,G5r,y5,uTe,O5r,V5r,hU,X5r,z5r,W5r,L5,pTe,Q5r,H5r,uU,U5r,J5r,Y5r,x5,Kqe,vc,$5,_Te,Xx,K5r,bTe,Z5r,Zqe,ir,zx,e3r,Fc,o3r,pU,r3r,t3r,_U,a3r,n3r,s3r,Wx,l3r,vTe,i3r,d3r,c3r,Nt,Qx,m3r,FTe,f3r,g3r,Tc,h3r,TTe,u3r,p3r,bU,_3r,b3r,v3r,k5,F3r,Ir,Hx,T3r,MTe,M3r,E3r,mn,C3r,ETe,w3r,A3r,CTe,y3r,L3r,wTe,x3r,$3r,k3r,ce,S5,ATe,S3r,R3r,vU,P3r,B3r,I3r,R5,yTe,q3r,N3r,FU,j3r,D3r,G3r,P5,LTe,O3r,V3r,TU,X3r,z3r,W3r,B5,xTe,Q3r,H3r,MU,U3r,J3r,Y3r,I5,$Te,K3r,Z3r,EU,ewr,owr,rwr,q5,kTe,twr,awr,CU,nwr,swr,lwr,N5,STe,iwr,dwr,wU,cwr,mwr,fwr,j5,RTe,gwr,hwr,AU,uwr,pwr,_wr,D5,PTe,bwr,vwr,yU,Fwr,Twr,Mwr,G5,BTe,Ewr,Cwr,LU,wwr,Awr,ywr,O5,ITe,Lwr,xwr,xU,$wr,kwr,Swr,V5,qTe,Rwr,Pwr,$U,Bwr,Iwr,qwr,X5,NTe,Nwr,jwr,kU,Dwr,Gwr,Owr,z5,jTe,Vwr,Xwr,SU,zwr,Wwr,Qwr,W5,DTe,Hwr,Uwr,RU,Jwr,Ywr,Kwr,Q5,GTe,Zwr,eAr,PU,oAr,rAr,tAr,H5,OTe,aAr,nAr,BU,sAr,lAr,iAr,U5,VTe,dAr,cAr,IU,mAr,fAr,gAr,J5,XTe,hAr,uAr,qU,pAr,_Ar,bAr,Y5,zTe,vAr,FAr,NU,TAr,MAr,EAr,K5,eNe,Mc,Z5,WTe,Ux,CAr,QTe,wAr,oNe,dr,Jx,AAr,Ec,yAr,jU,LAr,xAr,DU,$Ar,kAr,SAr,Yx,RAr,HTe,PAr,BAr,IAr,jt,Kx,qAr,UTe,NAr,jAr,Cc,DAr,JTe,GAr,OAr,GU,VAr,XAr,zAr,e3,WAr,qr,Zx,QAr,YTe,HAr,UAr,fn,JAr,KTe,YAr,KAr,ZTe,ZAr,e6r,eMe,o6r,r6r,t6r,oMe,o3,rMe,a6r,n6r,OU,s6r,l6r,i6r,r3,rNe,wc,t3,tMe,e9,d6r,aMe,c6r,tNe,cr,o9,m6r,Ac,f6r,VU,g6r,h6r,XU,u6r,p6r,_6r,r9,b6r,nMe,v6r,F6r,T6r,Dt,t9,M6r,sMe,E6r,C6r,yc,w6r,lMe,A6r,y6r,zU,L6r,x6r,$6r,a3,k6r,Nr,a9,S6r,iMe,R6r,P6r,gn,B6r,dMe,I6r,q6r,cMe,N6r,j6r,mMe,D6r,G6r,O6r,fMe,n3,gMe,V6r,X6r,WU,z6r,W6r,Q6r,s3,aNe,Lc,l3,hMe,n9,H6r,uMe,U6r,nNe,mr,s9,J6r,xc,Y6r,QU,K6r,Z6r,HU,e0r,o0r,r0r,l9,t0r,pMe,a0r,n0r,s0r,Gt,i9,l0r,_Me,i0r,d0r,$c,c0r,bMe,m0r,f0r,UU,g0r,h0r,u0r,i3,p0r,jr,d9,_0r,vMe,b0r,v0r,hn,F0r,FMe,T0r,M0r,TMe,E0r,C0r,MMe,w0r,A0r,y0r,re,d3,EMe,L0r,x0r,JU,$0r,k0r,S0r,c3,CMe,R0r,P0r,YU,B0r,I0r,q0r,m3,wMe,N0r,j0r,KU,D0r,G0r,O0r,f3,AMe,V0r,X0r,ZU,z0r,W0r,Q0r,g3,yMe,H0r,U0r,eJ,J0r,Y0r,K0r,h3,LMe,Z0r,eyr,oJ,oyr,ryr,tyr,u3,xMe,ayr,nyr,rJ,syr,lyr,iyr,p3,$Me,dyr,cyr,tJ,myr,fyr,gyr,_3,kMe,hyr,uyr,aJ,pyr,_yr,byr,b3,SMe,vyr,Fyr,nJ,Tyr,Myr,Eyr,v3,RMe,Cyr,wyr,sJ,Ayr,yyr,Lyr,F3,PMe,xyr,$yr,lJ,kyr,Syr,Ryr,T3,BMe,Pyr,Byr,iJ,Iyr,qyr,Nyr,M3,IMe,jyr,Dyr,dJ,Gyr,Oyr,Vyr,E3,qMe,Xyr,zyr,cJ,Wyr,Qyr,Hyr,C3,NMe,Uyr,Jyr,mJ,Yyr,Kyr,Zyr,w3,jMe,eLr,oLr,fJ,rLr,tLr,aLr,A3,DMe,nLr,sLr,gJ,lLr,iLr,dLr,y3,GMe,cLr,mLr,hJ,fLr,gLr,hLr,L3,OMe,uLr,pLr,uJ,_Lr,bLr,vLr,x3,VMe,FLr,TLr,pJ,MLr,ELr,CLr,$3,XMe,wLr,ALr,_J,yLr,LLr,xLr,k3,zMe,$Lr,kLr,bJ,SLr,RLr,PLr,S3,WMe,BLr,ILr,vJ,qLr,NLr,jLr,R3,QMe,DLr,GLr,FJ,OLr,VLr,XLr,P3,sNe,kc,B3,HMe,c9,zLr,UMe,WLr,lNe,fr,m9,QLr,Sc,HLr,TJ,ULr,JLr,MJ,YLr,KLr,ZLr,f9,e8r,JMe,o8r,r8r,t8r,Ot,g9,a8r,YMe,n8r,s8r,Rc,l8r,KMe,i8r,d8r,EJ,c8r,m8r,f8r,I3,g8r,Dr,h9,h8r,ZMe,u8r,p8r,un,_8r,e4e,b8r,v8r,o4e,F8r,T8r,r4e,M8r,E8r,C8r,Re,q3,t4e,w8r,A8r,CJ,y8r,L8r,x8r,N3,a4e,$8r,k8r,wJ,S8r,R8r,P8r,j3,n4e,B8r,I8r,AJ,q8r,N8r,j8r,D3,s4e,D8r,G8r,yJ,O8r,V8r,X8r,G3,l4e,z8r,W8r,LJ,Q8r,H8r,U8r,O3,i4e,J8r,Y8r,xJ,K8r,Z8r,exr,V3,d4e,oxr,rxr,$J,txr,axr,nxr,X3,c4e,sxr,lxr,kJ,ixr,dxr,cxr,z3,m4e,mxr,fxr,SJ,gxr,hxr,uxr,W3,iNe,Pc,Q3,f4e,u9,pxr,g4e,_xr,dNe,gr,p9,bxr,Bc,vxr,RJ,Fxr,Txr,PJ,Mxr,Exr,Cxr,_9,wxr,h4e,Axr,yxr,Lxr,Vt,b9,xxr,u4e,$xr,kxr,Ic,Sxr,p4e,Rxr,Pxr,BJ,Bxr,Ixr,qxr,H3,Nxr,Gr,v9,jxr,_4e,Dxr,Gxr,pn,Oxr,b4e,Vxr,Xxr,v4e,zxr,Wxr,F4e,Qxr,Hxr,Uxr,Me,U3,T4e,Jxr,Yxr,IJ,Kxr,Zxr,e9r,J3,M4e,o9r,r9r,qJ,t9r,a9r,n9r,Y3,E4e,s9r,l9r,NJ,i9r,d9r,c9r,K3,C4e,m9r,f9r,jJ,g9r,h9r,u9r,Z3,w4e,p9r,_9r,DJ,b9r,v9r,F9r,ew,A4e,T9r,M9r,GJ,E9r,C9r,w9r,ow,y4e,A9r,y9r,OJ,L9r,x9r,$9r,rw,L4e,k9r,S9r,VJ,R9r,P9r,B9r,tw,x4e,I9r,q9r,XJ,N9r,j9r,D9r,aw,$4e,G9r,O9r,zJ,V9r,X9r,z9r,nw,k4e,W9r,Q9r,WJ,H9r,U9r,J9r,sw,S4e,Y9r,K9r,QJ,Z9r,e7r,o7r,lw,cNe,qc,iw,R4e,F9,r7r,P4e,t7r,mNe,hr,T9,a7r,Nc,n7r,HJ,s7r,l7r,UJ,i7r,d7r,c7r,M9,m7r,B4e,f7r,g7r,h7r,Xt,E9,u7r,I4e,p7r,_7r,jc,b7r,q4e,v7r,F7r,JJ,T7r,M7r,E7r,dw,C7r,Or,C9,w7r,N4e,A7r,y7r,_n,L7r,j4e,x7r,$7r,D4e,k7r,S7r,G4e,R7r,P7r,B7r,Le,cw,O4e,I7r,q7r,YJ,N7r,j7r,D7r,mw,V4e,G7r,O7r,KJ,V7r,X7r,z7r,fw,X4e,W7r,Q7r,ZJ,H7r,U7r,J7r,gw,z4e,Y7r,K7r,eY,Z7r,e$r,o$r,hw,W4e,r$r,t$r,oY,a$r,n$r,s$r,uw,Q4e,l$r,i$r,rY,d$r,c$r,m$r,pw,H4e,f$r,g$r,tY,h$r,u$r,p$r,_w,U4e,_$r,b$r,aY,v$r,F$r,T$r,bw,J4e,M$r,E$r,nY,C$r,w$r,A$r,vw,Y4e,y$r,L$r,sY,x$r,$$r,k$r,Fw,fNe,Dc,Tw,K4e,w9,S$r,Z4e,R$r,gNe,ur,A9,P$r,Gc,B$r,lY,I$r,q$r,iY,N$r,j$r,D$r,y9,G$r,eEe,O$r,V$r,X$r,zt,L9,z$r,oEe,W$r,Q$r,Oc,H$r,rEe,U$r,J$r,dY,Y$r,K$r,Z$r,Mw,ekr,Vr,x9,okr,tEe,rkr,tkr,bn,akr,aEe,nkr,skr,nEe,lkr,ikr,sEe,dkr,ckr,mkr,Pe,Ew,lEe,fkr,gkr,cY,hkr,ukr,pkr,Cw,iEe,_kr,bkr,mY,vkr,Fkr,Tkr,ww,dEe,Mkr,Ekr,fY,Ckr,wkr,Akr,Aw,cEe,ykr,Lkr,gY,xkr,$kr,kkr,yw,mEe,Skr,Rkr,hY,Pkr,Bkr,Ikr,Lw,fEe,qkr,Nkr,uY,jkr,Dkr,Gkr,xw,gEe,Okr,Vkr,pY,Xkr,zkr,Wkr,$w,hEe,Qkr,Hkr,_Y,Ukr,Jkr,Ykr,kw,uEe,Kkr,Zkr,bY,eSr,oSr,rSr,Sw,hNe,Vc,Rw,pEe,$9,tSr,_Ee,aSr,uNe,pr,k9,nSr,Xc,sSr,vY,lSr,iSr,FY,dSr,cSr,mSr,S9,fSr,bEe,gSr,hSr,uSr,Wt,R9,pSr,vEe,_Sr,bSr,zc,vSr,FEe,FSr,TSr,TY,MSr,ESr,CSr,Pw,wSr,Xr,P9,ASr,TEe,ySr,LSr,vn,xSr,MEe,$Sr,kSr,EEe,SSr,RSr,CEe,PSr,BSr,ISr,xe,Bw,wEe,qSr,NSr,MY,jSr,DSr,GSr,Iw,AEe,OSr,VSr,EY,XSr,zSr,WSr,qw,yEe,QSr,HSr,CY,USr,JSr,YSr,Nw,LEe,KSr,ZSr,wY,eRr,oRr,rRr,jw,xEe,tRr,aRr,AY,nRr,sRr,lRr,Dw,$Ee,iRr,dRr,yY,cRr,mRr,fRr,Gw,kEe,gRr,hRr,LY,uRr,pRr,_Rr,Ow,SEe,bRr,vRr,xY,FRr,TRr,MRr,Vw,REe,ERr,CRr,$Y,wRr,ARr,yRr,Xw,PEe,LRr,xRr,kY,$Rr,kRr,SRr,zw,pNe,Wc,Ww,BEe,B9,RRr,IEe,PRr,_Ne,_r,I9,BRr,Qc,IRr,SY,qRr,NRr,RY,jRr,DRr,GRr,q9,ORr,qEe,VRr,XRr,zRr,Qt,N9,WRr,NEe,QRr,HRr,Hc,URr,jEe,JRr,YRr,PY,KRr,ZRr,ePr,Qw,oPr,zr,j9,rPr,DEe,tPr,aPr,Fn,nPr,GEe,sPr,lPr,OEe,iPr,dPr,VEe,cPr,mPr,fPr,$e,Hw,XEe,gPr,hPr,BY,uPr,pPr,_Pr,Uw,zEe,bPr,vPr,IY,FPr,TPr,MPr,Jw,WEe,EPr,CPr,qY,wPr,APr,yPr,Yw,QEe,LPr,xPr,NY,$Pr,kPr,SPr,Kw,HEe,RPr,PPr,jY,BPr,IPr,qPr,Zw,UEe,NPr,jPr,DY,DPr,GPr,OPr,eA,JEe,VPr,XPr,GY,zPr,WPr,QPr,oA,YEe,HPr,UPr,OY,JPr,YPr,KPr,rA,KEe,ZPr,eBr,VY,oBr,rBr,tBr,tA,ZEe,aBr,nBr,XY,sBr,lBr,iBr,aA,bNe,Uc,nA,eCe,D9,dBr,oCe,cBr,vNe,br,G9,mBr,Jc,fBr,zY,gBr,hBr,WY,uBr,pBr,_Br,O9,bBr,rCe,vBr,FBr,TBr,Ht,V9,MBr,tCe,EBr,CBr,Yc,wBr,aCe,ABr,yBr,QY,LBr,xBr,$Br,sA,kBr,Wr,X9,SBr,nCe,RBr,PBr,Tn,BBr,sCe,IBr,qBr,lCe,NBr,jBr,iCe,DBr,GBr,OBr,De,lA,dCe,VBr,XBr,HY,zBr,WBr,QBr,iA,cCe,HBr,UBr,UY,JBr,YBr,KBr,dA,mCe,ZBr,eIr,JY,oIr,rIr,tIr,cA,fCe,aIr,nIr,YY,sIr,lIr,iIr,mA,gCe,dIr,cIr,KY,mIr,fIr,gIr,fA,hCe,hIr,uIr,ZY,pIr,_Ir,bIr,gA,uCe,vIr,FIr,eK,TIr,MIr,EIr,hA,pCe,CIr,wIr,oK,AIr,yIr,LIr,uA,FNe,Kc,pA,_Ce,z9,xIr,bCe,$Ir,TNe,vr,W9,kIr,Zc,SIr,rK,RIr,PIr,tK,BIr,IIr,qIr,Q9,NIr,vCe,jIr,DIr,GIr,Ut,H9,OIr,FCe,VIr,XIr,em,zIr,TCe,WIr,QIr,aK,HIr,UIr,JIr,_A,YIr,Qr,U9,KIr,MCe,ZIr,eqr,Mn,oqr,ECe,rqr,tqr,CCe,aqr,nqr,wCe,sqr,lqr,iqr,Ge,bA,ACe,dqr,cqr,nK,mqr,fqr,gqr,vA,yCe,hqr,uqr,sK,pqr,_qr,bqr,FA,LCe,vqr,Fqr,lK,Tqr,Mqr,Eqr,TA,xCe,Cqr,wqr,iK,Aqr,yqr,Lqr,MA,$Ce,xqr,$qr,dK,kqr,Sqr,Rqr,EA,kCe,Pqr,Bqr,cK,Iqr,qqr,Nqr,CA,SCe,jqr,Dqr,mK,Gqr,Oqr,Vqr,wA,RCe,Xqr,zqr,fK,Wqr,Qqr,Hqr,AA,MNe,om,yA,PCe,J9,Uqr,BCe,Jqr,ENe,Fr,Y9,Yqr,rm,Kqr,gK,Zqr,eNr,hK,oNr,rNr,tNr,K9,aNr,ICe,nNr,sNr,lNr,Jt,Z9,iNr,qCe,dNr,cNr,tm,mNr,NCe,fNr,gNr,uK,hNr,uNr,pNr,LA,_Nr,Hr,e7,bNr,jCe,vNr,FNr,En,TNr,DCe,MNr,ENr,GCe,CNr,wNr,OCe,ANr,yNr,LNr,VCe,xA,XCe,xNr,$Nr,pK,kNr,SNr,RNr,$A,CNe,am,kA,zCe,o7,PNr,WCe,BNr,wNe,Tr,r7,INr,nm,qNr,_K,NNr,jNr,bK,DNr,GNr,ONr,t7,VNr,QCe,XNr,zNr,WNr,Yt,a7,QNr,HCe,HNr,UNr,sm,JNr,UCe,YNr,KNr,vK,ZNr,ejr,ojr,SA,rjr,Ur,n7,tjr,JCe,ajr,njr,Cn,sjr,YCe,ljr,ijr,KCe,djr,cjr,ZCe,mjr,fjr,gjr,s7,RA,e5e,hjr,ujr,FK,pjr,_jr,bjr,PA,o5e,vjr,Fjr,TK,Tjr,Mjr,Ejr,BA,ANe,lm,IA,r5e,l7,Cjr,t5e,wjr,yNe,Mr,i7,Ajr,im,yjr,MK,Ljr,xjr,EK,$jr,kjr,Sjr,d7,Rjr,a5e,Pjr,Bjr,Ijr,Kt,c7,qjr,n5e,Njr,jjr,dm,Djr,s5e,Gjr,Ojr,CK,Vjr,Xjr,zjr,qA,Wjr,Jr,m7,Qjr,l5e,Hjr,Ujr,wn,Jjr,i5e,Yjr,Kjr,d5e,Zjr,eDr,c5e,oDr,rDr,tDr,m5e,NA,f5e,aDr,nDr,wK,sDr,lDr,iDr,jA,LNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ly=new oe({}),iy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bm=new dDr({props:{warning:!0,$$slots:{default:[t8t]},$$scope:{ctx:L}}}),dy=new oe({}),cy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L573"}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L596"}}),bg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),hy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L719"}}),uy=new oe({}),py=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L388"}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L402"}}),Kg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L598"}}),Ty=new oe({}),My=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),yh=new dDr({props:{$$slots:{default:[s8t]},$$scope:{ctx:L}}}),Lh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),yy=new oe({}),Ly=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L87"}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L101"}}),Qh=new dDr({props:{$$slots:{default:[i8t]},$$scope:{ctx:L}}}),Hh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L254"}}),Ry=new oe({}),Py=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L725"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Yh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Op=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),Ny=new oe({}),jy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L732"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xp=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L747"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),Hy=new oe({}),Uy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L754"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Tb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),Zy=new oe({}),eL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L761"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),aL=new oe({}),nL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L770"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),dL=new oe({}),cL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L804"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),hL=new oe({}),uL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L797"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L779"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L786"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),PL=new oe({}),BL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L820"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G1=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L859"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L866"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L889"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),e8=new oe({}),o8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L873"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),n8=new oe({}),s8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),m8=new oe({}),f8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L898"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),p8=new oe({}),_8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L905"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),T8=new oe({}),M8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L852"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),y8=new oe({}),L8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L827"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),S8=new oe({}),R8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L834"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),q8=new oe({}),N8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),O8=new oe({}),V8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),Q8=new oe({}),H8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),K8=new oe({}),Z8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),Lx=new oe({}),xx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Ux=new oe({}),Jx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),e9=new oe({}),o9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),n9=new oe({}),s9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),i9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),c9=new oe({}),m9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),g9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),u9=new oe({}),p9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),b9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),F9=new oe({}),T9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),E9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),w9=new oe({}),A9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),$9=new oe({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),B9=new oe({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),D9=new oe({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),z9=new oe({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),J9=new oe({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),e7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),o7=new oe({}),r7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),a7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),n7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),l7=new oe({}),i7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),c7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),gm=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=a("code"),ty=o("from_pretrained()"),hm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),ay=o("AutoConfig"),Ln=o(", "),xn=a("a"),ny=o("AutoModel"),hi=o(`, and
`),$n=a("a"),sy=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),um=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),C$=o("will create a model that is an instance of "),pi=a("a"),w$=o("BertModel"),A$=o("."),Eo=l(),wa=a("p"),y$=o("There is one class of "),pm=a("code"),L$=o("AutoModel"),IDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wIe=l(),_i=a("h2"),_m=a("a"),bee=a("span"),F(ly.$$.fragment),qDe=l(),vee=a("span"),NDe=o("Extending the Auto Classes"),AIe=l(),kn=a("p"),jDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fee=a("code"),DDe=o("NewModel"),GDe=o(", make sure you have a "),Tee=a("code"),ODe=o("NewModelConfig"),VDe=o(` then you can add those to the auto
classes like this:`),yIe=l(),F(iy.$$.fragment),LIe=l(),x$=a("p"),XDe=o("You will then be able to use the auto classes like you would usually do!"),xIe=l(),F(bm.$$.fragment),$Ie=l(),bi=a("h2"),vm=a("a"),Mee=a("span"),F(dy.$$.fragment),zDe=l(),Eee=a("span"),WDe=o("AutoConfig"),kIe=l(),Co=a("div"),F(cy.$$.fragment),QDe=l(),my=a("p"),HDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$$=a("a"),UDe=o("from_pretrained()"),JDe=o(" class method."),YDe=l(),fy=a("p"),KDe=o("This class cannot be instantiated directly using "),Cee=a("code"),ZDe=o("__init__()"),eGe=o(" (throws an error)."),oGe=l(),Er=a("div"),F(gy.$$.fragment),rGe=l(),wee=a("p"),tGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),aGe=l(),vi=a("p"),nGe=o("The configuration class to instantiate is selected based on the "),Aee=a("code"),sGe=o("model_type"),lGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yee=a("code"),iGe=o("pretrained_model_name_or_path"),dGe=o(":"),cGe=l(),A=a("ul"),Fm=a("li"),Lee=a("strong"),mGe=o("albert"),fGe=o(" \u2014 "),k$=a("a"),gGe=o("AlbertConfig"),hGe=o(" (ALBERT model)"),uGe=l(),Tm=a("li"),xee=a("strong"),pGe=o("bart"),_Ge=o(" \u2014 "),S$=a("a"),bGe=o("BartConfig"),vGe=o(" (BART model)"),FGe=l(),Mm=a("li"),$ee=a("strong"),TGe=o("beit"),MGe=o(" \u2014 "),R$=a("a"),EGe=o("BeitConfig"),CGe=o(" (BEiT model)"),wGe=l(),Em=a("li"),kee=a("strong"),AGe=o("bert"),yGe=o(" \u2014 "),P$=a("a"),LGe=o("BertConfig"),xGe=o(" (BERT model)"),$Ge=l(),Cm=a("li"),See=a("strong"),kGe=o("bert-generation"),SGe=o(" \u2014 "),B$=a("a"),RGe=o("BertGenerationConfig"),PGe=o(" (Bert Generation model)"),BGe=l(),wm=a("li"),Ree=a("strong"),IGe=o("big_bird"),qGe=o(" \u2014 "),I$=a("a"),NGe=o("BigBirdConfig"),jGe=o(" (BigBird model)"),DGe=l(),Am=a("li"),Pee=a("strong"),GGe=o("bigbird_pegasus"),OGe=o(" \u2014 "),q$=a("a"),VGe=o("BigBirdPegasusConfig"),XGe=o(" (BigBirdPegasus model)"),zGe=l(),ym=a("li"),Bee=a("strong"),WGe=o("blenderbot"),QGe=o(" \u2014 "),N$=a("a"),HGe=o("BlenderbotConfig"),UGe=o(" (Blenderbot model)"),JGe=l(),Lm=a("li"),Iee=a("strong"),YGe=o("blenderbot-small"),KGe=o(" \u2014 "),j$=a("a"),ZGe=o("BlenderbotSmallConfig"),eOe=o(" (BlenderbotSmall model)"),oOe=l(),xm=a("li"),qee=a("strong"),rOe=o("camembert"),tOe=o(" \u2014 "),D$=a("a"),aOe=o("CamembertConfig"),nOe=o(" (CamemBERT model)"),sOe=l(),$m=a("li"),Nee=a("strong"),lOe=o("canine"),iOe=o(" \u2014 "),G$=a("a"),dOe=o("CanineConfig"),cOe=o(" (Canine model)"),mOe=l(),km=a("li"),jee=a("strong"),fOe=o("clip"),gOe=o(" \u2014 "),O$=a("a"),hOe=o("CLIPConfig"),uOe=o(" (CLIP model)"),pOe=l(),Sm=a("li"),Dee=a("strong"),_Oe=o("convbert"),bOe=o(" \u2014 "),V$=a("a"),vOe=o("ConvBertConfig"),FOe=o(" (ConvBERT model)"),TOe=l(),Rm=a("li"),Gee=a("strong"),MOe=o("convnext"),EOe=o(" \u2014 "),X$=a("a"),COe=o("ConvNextConfig"),wOe=o(" (ConvNext model)"),AOe=l(),Pm=a("li"),Oee=a("strong"),yOe=o("ctrl"),LOe=o(" \u2014 "),z$=a("a"),xOe=o("CTRLConfig"),$Oe=o(" (CTRL model)"),kOe=l(),Bm=a("li"),Vee=a("strong"),SOe=o("data2vec-audio"),ROe=o(" \u2014 "),W$=a("a"),POe=o("Data2VecAudioConfig"),BOe=o(" (Data2VecAudio model)"),IOe=l(),Im=a("li"),Xee=a("strong"),qOe=o("data2vec-text"),NOe=o(" \u2014 "),Q$=a("a"),jOe=o("Data2VecTextConfig"),DOe=o(" (Data2VecText model)"),GOe=l(),qm=a("li"),zee=a("strong"),OOe=o("data2vec-vision"),VOe=o(" \u2014 "),H$=a("a"),XOe=o("Data2VecVisionConfig"),zOe=o(" (Data2VecVision model)"),WOe=l(),Nm=a("li"),Wee=a("strong"),QOe=o("deberta"),HOe=o(" \u2014 "),U$=a("a"),UOe=o("DebertaConfig"),JOe=o(" (DeBERTa model)"),YOe=l(),jm=a("li"),Qee=a("strong"),KOe=o("deberta-v2"),ZOe=o(" \u2014 "),J$=a("a"),eVe=o("DebertaV2Config"),oVe=o(" (DeBERTa-v2 model)"),rVe=l(),Dm=a("li"),Hee=a("strong"),tVe=o("decision_transformer"),aVe=o(" \u2014 "),Y$=a("a"),nVe=o("DecisionTransformerConfig"),sVe=o(" (Decision Transformer model)"),lVe=l(),Gm=a("li"),Uee=a("strong"),iVe=o("deit"),dVe=o(" \u2014 "),K$=a("a"),cVe=o("DeiTConfig"),mVe=o(" (DeiT model)"),fVe=l(),Om=a("li"),Jee=a("strong"),gVe=o("detr"),hVe=o(" \u2014 "),Z$=a("a"),uVe=o("DetrConfig"),pVe=o(" (DETR model)"),_Ve=l(),Vm=a("li"),Yee=a("strong"),bVe=o("distilbert"),vVe=o(" \u2014 "),ek=a("a"),FVe=o("DistilBertConfig"),TVe=o(" (DistilBERT model)"),MVe=l(),Xm=a("li"),Kee=a("strong"),EVe=o("dpr"),CVe=o(" \u2014 "),ok=a("a"),wVe=o("DPRConfig"),AVe=o(" (DPR model)"),yVe=l(),zm=a("li"),Zee=a("strong"),LVe=o("dpt"),xVe=o(" \u2014 "),rk=a("a"),$Ve=o("DPTConfig"),kVe=o(" (DPT model)"),SVe=l(),Wm=a("li"),eoe=a("strong"),RVe=o("electra"),PVe=o(" \u2014 "),tk=a("a"),BVe=o("ElectraConfig"),IVe=o(" (ELECTRA model)"),qVe=l(),Qm=a("li"),ooe=a("strong"),NVe=o("encoder-decoder"),jVe=o(" \u2014 "),ak=a("a"),DVe=o("EncoderDecoderConfig"),GVe=o(" (Encoder decoder model)"),OVe=l(),Hm=a("li"),roe=a("strong"),VVe=o("flaubert"),XVe=o(" \u2014 "),nk=a("a"),zVe=o("FlaubertConfig"),WVe=o(" (FlauBERT model)"),QVe=l(),Um=a("li"),toe=a("strong"),HVe=o("flava"),UVe=o(" \u2014 "),sk=a("a"),JVe=o("FlavaConfig"),YVe=o(" (Flava model)"),KVe=l(),Jm=a("li"),aoe=a("strong"),ZVe=o("fnet"),eXe=o(" \u2014 "),lk=a("a"),oXe=o("FNetConfig"),rXe=o(" (FNet model)"),tXe=l(),Ym=a("li"),noe=a("strong"),aXe=o("fsmt"),nXe=o(" \u2014 "),ik=a("a"),sXe=o("FSMTConfig"),lXe=o(" (FairSeq Machine-Translation model)"),iXe=l(),Km=a("li"),soe=a("strong"),dXe=o("funnel"),cXe=o(" \u2014 "),dk=a("a"),mXe=o("FunnelConfig"),fXe=o(" (Funnel Transformer model)"),gXe=l(),Zm=a("li"),loe=a("strong"),hXe=o("glpn"),uXe=o(" \u2014 "),ck=a("a"),pXe=o("GLPNConfig"),_Xe=o(" (GLPN model)"),bXe=l(),ef=a("li"),ioe=a("strong"),vXe=o("gpt2"),FXe=o(" \u2014 "),mk=a("a"),TXe=o("GPT2Config"),MXe=o(" (OpenAI GPT-2 model)"),EXe=l(),of=a("li"),doe=a("strong"),CXe=o("gpt_neo"),wXe=o(" \u2014 "),fk=a("a"),AXe=o("GPTNeoConfig"),yXe=o(" (GPT Neo model)"),LXe=l(),rf=a("li"),coe=a("strong"),xXe=o("gptj"),$Xe=o(" \u2014 "),gk=a("a"),kXe=o("GPTJConfig"),SXe=o(" (GPT-J model)"),RXe=l(),tf=a("li"),moe=a("strong"),PXe=o("hubert"),BXe=o(" \u2014 "),hk=a("a"),IXe=o("HubertConfig"),qXe=o(" (Hubert model)"),NXe=l(),af=a("li"),foe=a("strong"),jXe=o("ibert"),DXe=o(" \u2014 "),uk=a("a"),GXe=o("IBertConfig"),OXe=o(" (I-BERT model)"),VXe=l(),nf=a("li"),goe=a("strong"),XXe=o("imagegpt"),zXe=o(" \u2014 "),pk=a("a"),WXe=o("ImageGPTConfig"),QXe=o(" (ImageGPT model)"),HXe=l(),sf=a("li"),hoe=a("strong"),UXe=o("layoutlm"),JXe=o(" \u2014 "),_k=a("a"),YXe=o("LayoutLMConfig"),KXe=o(" (LayoutLM model)"),ZXe=l(),lf=a("li"),uoe=a("strong"),eze=o("layoutlmv2"),oze=o(" \u2014 "),bk=a("a"),rze=o("LayoutLMv2Config"),tze=o(" (LayoutLMv2 model)"),aze=l(),df=a("li"),poe=a("strong"),nze=o("led"),sze=o(" \u2014 "),vk=a("a"),lze=o("LEDConfig"),ize=o(" (LED model)"),dze=l(),cf=a("li"),_oe=a("strong"),cze=o("longformer"),mze=o(" \u2014 "),Fk=a("a"),fze=o("LongformerConfig"),gze=o(" (Longformer model)"),hze=l(),mf=a("li"),boe=a("strong"),uze=o("luke"),pze=o(" \u2014 "),Tk=a("a"),_ze=o("LukeConfig"),bze=o(" (LUKE model)"),vze=l(),ff=a("li"),voe=a("strong"),Fze=o("lxmert"),Tze=o(" \u2014 "),Mk=a("a"),Mze=o("LxmertConfig"),Eze=o(" (LXMERT model)"),Cze=l(),gf=a("li"),Foe=a("strong"),wze=o("m2m_100"),Aze=o(" \u2014 "),Ek=a("a"),yze=o("M2M100Config"),Lze=o(" (M2M100 model)"),xze=l(),hf=a("li"),Toe=a("strong"),$ze=o("marian"),kze=o(" \u2014 "),Ck=a("a"),Sze=o("MarianConfig"),Rze=o(" (Marian model)"),Pze=l(),uf=a("li"),Moe=a("strong"),Bze=o("maskformer"),Ize=o(" \u2014 "),wk=a("a"),qze=o("MaskFormerConfig"),Nze=o(" (MaskFormer model)"),jze=l(),pf=a("li"),Eoe=a("strong"),Dze=o("mbart"),Gze=o(" \u2014 "),Ak=a("a"),Oze=o("MBartConfig"),Vze=o(" (mBART model)"),Xze=l(),_f=a("li"),Coe=a("strong"),zze=o("megatron-bert"),Wze=o(" \u2014 "),yk=a("a"),Qze=o("MegatronBertConfig"),Hze=o(" (MegatronBert model)"),Uze=l(),bf=a("li"),woe=a("strong"),Jze=o("mobilebert"),Yze=o(" \u2014 "),Lk=a("a"),Kze=o("MobileBertConfig"),Zze=o(" (MobileBERT model)"),eWe=l(),vf=a("li"),Aoe=a("strong"),oWe=o("mpnet"),rWe=o(" \u2014 "),xk=a("a"),tWe=o("MPNetConfig"),aWe=o(" (MPNet model)"),nWe=l(),Ff=a("li"),yoe=a("strong"),sWe=o("mt5"),lWe=o(" \u2014 "),$k=a("a"),iWe=o("MT5Config"),dWe=o(" (mT5 model)"),cWe=l(),Tf=a("li"),Loe=a("strong"),mWe=o("nystromformer"),fWe=o(" \u2014 "),kk=a("a"),gWe=o("NystromformerConfig"),hWe=o(" (Nystromformer model)"),uWe=l(),Mf=a("li"),xoe=a("strong"),pWe=o("openai-gpt"),_We=o(" \u2014 "),Sk=a("a"),bWe=o("OpenAIGPTConfig"),vWe=o(" (OpenAI GPT model)"),FWe=l(),Ef=a("li"),$oe=a("strong"),TWe=o("opt"),MWe=o(" \u2014 "),Rk=a("a"),EWe=o("OPTConfig"),CWe=o(" (OPT model)"),wWe=l(),Cf=a("li"),koe=a("strong"),AWe=o("pegasus"),yWe=o(" \u2014 "),Pk=a("a"),LWe=o("PegasusConfig"),xWe=o(" (Pegasus model)"),$We=l(),wf=a("li"),Soe=a("strong"),kWe=o("perceiver"),SWe=o(" \u2014 "),Bk=a("a"),RWe=o("PerceiverConfig"),PWe=o(" (Perceiver model)"),BWe=l(),Af=a("li"),Roe=a("strong"),IWe=o("plbart"),qWe=o(" \u2014 "),Ik=a("a"),NWe=o("PLBartConfig"),jWe=o(" (PLBart model)"),DWe=l(),yf=a("li"),Poe=a("strong"),GWe=o("poolformer"),OWe=o(" \u2014 "),qk=a("a"),VWe=o("PoolFormerConfig"),XWe=o(" (PoolFormer model)"),zWe=l(),Lf=a("li"),Boe=a("strong"),WWe=o("prophetnet"),QWe=o(" \u2014 "),Nk=a("a"),HWe=o("ProphetNetConfig"),UWe=o(" (ProphetNet model)"),JWe=l(),xf=a("li"),Ioe=a("strong"),YWe=o("qdqbert"),KWe=o(" \u2014 "),jk=a("a"),ZWe=o("QDQBertConfig"),eQe=o(" (QDQBert model)"),oQe=l(),$f=a("li"),qoe=a("strong"),rQe=o("rag"),tQe=o(" \u2014 "),Dk=a("a"),aQe=o("RagConfig"),nQe=o(" (RAG model)"),sQe=l(),kf=a("li"),Noe=a("strong"),lQe=o("realm"),iQe=o(" \u2014 "),Gk=a("a"),dQe=o("RealmConfig"),cQe=o(" (Realm model)"),mQe=l(),Sf=a("li"),joe=a("strong"),fQe=o("reformer"),gQe=o(" \u2014 "),Ok=a("a"),hQe=o("ReformerConfig"),uQe=o(" (Reformer model)"),pQe=l(),Rf=a("li"),Doe=a("strong"),_Qe=o("regnet"),bQe=o(" \u2014 "),Vk=a("a"),vQe=o("RegNetConfig"),FQe=o(" (RegNet model)"),TQe=l(),Pf=a("li"),Goe=a("strong"),MQe=o("rembert"),EQe=o(" \u2014 "),Xk=a("a"),CQe=o("RemBertConfig"),wQe=o(" (RemBERT model)"),AQe=l(),Bf=a("li"),Ooe=a("strong"),yQe=o("resnet"),LQe=o(" \u2014 "),zk=a("a"),xQe=o("ResNetConfig"),$Qe=o(" (ResNet model)"),kQe=l(),If=a("li"),Voe=a("strong"),SQe=o("retribert"),RQe=o(" \u2014 "),Wk=a("a"),PQe=o("RetriBertConfig"),BQe=o(" (RetriBERT model)"),IQe=l(),qf=a("li"),Xoe=a("strong"),qQe=o("roberta"),NQe=o(" \u2014 "),Qk=a("a"),jQe=o("RobertaConfig"),DQe=o(" (RoBERTa model)"),GQe=l(),Nf=a("li"),zoe=a("strong"),OQe=o("roformer"),VQe=o(" \u2014 "),Hk=a("a"),XQe=o("RoFormerConfig"),zQe=o(" (RoFormer model)"),WQe=l(),jf=a("li"),Woe=a("strong"),QQe=o("segformer"),HQe=o(" \u2014 "),Uk=a("a"),UQe=o("SegformerConfig"),JQe=o(" (SegFormer model)"),YQe=l(),Df=a("li"),Qoe=a("strong"),KQe=o("sew"),ZQe=o(" \u2014 "),Jk=a("a"),eHe=o("SEWConfig"),oHe=o(" (SEW model)"),rHe=l(),Gf=a("li"),Hoe=a("strong"),tHe=o("sew-d"),aHe=o(" \u2014 "),Yk=a("a"),nHe=o("SEWDConfig"),sHe=o(" (SEW-D model)"),lHe=l(),Of=a("li"),Uoe=a("strong"),iHe=o("speech-encoder-decoder"),dHe=o(" \u2014 "),Kk=a("a"),cHe=o("SpeechEncoderDecoderConfig"),mHe=o(" (Speech Encoder decoder model)"),fHe=l(),Vf=a("li"),Joe=a("strong"),gHe=o("speech_to_text"),hHe=o(" \u2014 "),Zk=a("a"),uHe=o("Speech2TextConfig"),pHe=o(" (Speech2Text model)"),_He=l(),Xf=a("li"),Yoe=a("strong"),bHe=o("speech_to_text_2"),vHe=o(" \u2014 "),eS=a("a"),FHe=o("Speech2Text2Config"),THe=o(" (Speech2Text2 model)"),MHe=l(),zf=a("li"),Koe=a("strong"),EHe=o("splinter"),CHe=o(" \u2014 "),oS=a("a"),wHe=o("SplinterConfig"),AHe=o(" (Splinter model)"),yHe=l(),Wf=a("li"),Zoe=a("strong"),LHe=o("squeezebert"),xHe=o(" \u2014 "),rS=a("a"),$He=o("SqueezeBertConfig"),kHe=o(" (SqueezeBERT model)"),SHe=l(),Qf=a("li"),ere=a("strong"),RHe=o("swin"),PHe=o(" \u2014 "),tS=a("a"),BHe=o("SwinConfig"),IHe=o(" (Swin model)"),qHe=l(),Hf=a("li"),ore=a("strong"),NHe=o("t5"),jHe=o(" \u2014 "),aS=a("a"),DHe=o("T5Config"),GHe=o(" (T5 model)"),OHe=l(),Uf=a("li"),rre=a("strong"),VHe=o("tapas"),XHe=o(" \u2014 "),nS=a("a"),zHe=o("TapasConfig"),WHe=o(" (TAPAS model)"),QHe=l(),Jf=a("li"),tre=a("strong"),HHe=o("transfo-xl"),UHe=o(" \u2014 "),sS=a("a"),JHe=o("TransfoXLConfig"),YHe=o(" (Transformer-XL model)"),KHe=l(),Yf=a("li"),are=a("strong"),ZHe=o("trocr"),eUe=o(" \u2014 "),lS=a("a"),oUe=o("TrOCRConfig"),rUe=o(" (TrOCR model)"),tUe=l(),Kf=a("li"),nre=a("strong"),aUe=o("unispeech"),nUe=o(" \u2014 "),iS=a("a"),sUe=o("UniSpeechConfig"),lUe=o(" (UniSpeech model)"),iUe=l(),Zf=a("li"),sre=a("strong"),dUe=o("unispeech-sat"),cUe=o(" \u2014 "),dS=a("a"),mUe=o("UniSpeechSatConfig"),fUe=o(" (UniSpeechSat model)"),gUe=l(),eg=a("li"),lre=a("strong"),hUe=o("van"),uUe=o(" \u2014 "),cS=a("a"),pUe=o("VanConfig"),_Ue=o(" (VAN model)"),bUe=l(),og=a("li"),ire=a("strong"),vUe=o("vilt"),FUe=o(" \u2014 "),mS=a("a"),TUe=o("ViltConfig"),MUe=o(" (ViLT model)"),EUe=l(),rg=a("li"),dre=a("strong"),CUe=o("vision-encoder-decoder"),wUe=o(" \u2014 "),fS=a("a"),AUe=o("VisionEncoderDecoderConfig"),yUe=o(" (Vision Encoder decoder model)"),LUe=l(),tg=a("li"),cre=a("strong"),xUe=o("vision-text-dual-encoder"),$Ue=o(" \u2014 "),gS=a("a"),kUe=o("VisionTextDualEncoderConfig"),SUe=o(" (VisionTextDualEncoder model)"),RUe=l(),ag=a("li"),mre=a("strong"),PUe=o("visual_bert"),BUe=o(" \u2014 "),hS=a("a"),IUe=o("VisualBertConfig"),qUe=o(" (VisualBert model)"),NUe=l(),ng=a("li"),fre=a("strong"),jUe=o("vit"),DUe=o(" \u2014 "),uS=a("a"),GUe=o("ViTConfig"),OUe=o(" (ViT model)"),VUe=l(),sg=a("li"),gre=a("strong"),XUe=o("vit_mae"),zUe=o(" \u2014 "),pS=a("a"),WUe=o("ViTMAEConfig"),QUe=o(" (ViTMAE model)"),HUe=l(),lg=a("li"),hre=a("strong"),UUe=o("wav2vec2"),JUe=o(" \u2014 "),_S=a("a"),YUe=o("Wav2Vec2Config"),KUe=o(" (Wav2Vec2 model)"),ZUe=l(),ig=a("li"),ure=a("strong"),eJe=o("wav2vec2-conformer"),oJe=o(" \u2014 "),bS=a("a"),rJe=o("Wav2Vec2ConformerConfig"),tJe=o(" (Wav2Vec2-Conformer model)"),aJe=l(),dg=a("li"),pre=a("strong"),nJe=o("wavlm"),sJe=o(" \u2014 "),vS=a("a"),lJe=o("WavLMConfig"),iJe=o(" (WavLM model)"),dJe=l(),cg=a("li"),_re=a("strong"),cJe=o("xglm"),mJe=o(" \u2014 "),FS=a("a"),fJe=o("XGLMConfig"),gJe=o(" (XGLM model)"),hJe=l(),mg=a("li"),bre=a("strong"),uJe=o("xlm"),pJe=o(" \u2014 "),TS=a("a"),_Je=o("XLMConfig"),bJe=o(" (XLM model)"),vJe=l(),fg=a("li"),vre=a("strong"),FJe=o("xlm-prophetnet"),TJe=o(" \u2014 "),MS=a("a"),MJe=o("XLMProphetNetConfig"),EJe=o(" (XLMProphetNet model)"),CJe=l(),gg=a("li"),Fre=a("strong"),wJe=o("xlm-roberta"),AJe=o(" \u2014 "),ES=a("a"),yJe=o("XLMRobertaConfig"),LJe=o(" (XLM-RoBERTa model)"),xJe=l(),hg=a("li"),Tre=a("strong"),$Je=o("xlm-roberta-xl"),kJe=o(" \u2014 "),CS=a("a"),SJe=o("XLMRobertaXLConfig"),RJe=o(" (XLM-RoBERTa-XL model)"),PJe=l(),ug=a("li"),Mre=a("strong"),BJe=o("xlnet"),IJe=o(" \u2014 "),wS=a("a"),qJe=o("XLNetConfig"),NJe=o(" (XLNet model)"),jJe=l(),pg=a("li"),Ere=a("strong"),DJe=o("yolos"),GJe=o(" \u2014 "),AS=a("a"),OJe=o("YolosConfig"),VJe=o(" (YOLOS model)"),XJe=l(),_g=a("li"),Cre=a("strong"),zJe=o("yoso"),WJe=o(" \u2014 "),yS=a("a"),QJe=o("YosoConfig"),HJe=o(" (YOSO model)"),UJe=l(),F(bg.$$.fragment),JJe=l(),vg=a("div"),F(hy.$$.fragment),YJe=l(),wre=a("p"),KJe=o("Register a new configuration for this class."),SIe=l(),Fi=a("h2"),Fg=a("a"),Are=a("span"),F(uy.$$.fragment),ZJe=l(),yre=a("span"),eYe=o("AutoTokenizer"),RIe=l(),wo=a("div"),F(py.$$.fragment),oYe=l(),_y=a("p"),rYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LS=a("a"),tYe=o("AutoTokenizer.from_pretrained()"),aYe=o(" class method."),nYe=l(),by=a("p"),sYe=o("This class cannot be instantiated directly using "),Lre=a("code"),lYe=o("__init__()"),iYe=o(" (throws an error)."),dYe=l(),Cr=a("div"),F(vy.$$.fragment),cYe=l(),xre=a("p"),mYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fYe=l(),Aa=a("p"),gYe=o("The tokenizer class to instantiate is selected based on the "),$re=a("code"),hYe=o("model_type"),uYe=o(` property of the config object (either
passed as an argument or loaded from `),kre=a("code"),pYe=o("pretrained_model_name_or_path"),_Ye=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=a("code"),bYe=o("pretrained_model_name_or_path"),vYe=o(":"),FYe=l(),k=a("ul"),Sn=a("li"),Rre=a("strong"),TYe=o("albert"),MYe=o(" \u2014 "),xS=a("a"),EYe=o("AlbertTokenizer"),CYe=o(" or "),$S=a("a"),wYe=o("AlbertTokenizerFast"),AYe=o(" (ALBERT model)"),yYe=l(),Rn=a("li"),Pre=a("strong"),LYe=o("bart"),xYe=o(" \u2014 "),kS=a("a"),$Ye=o("BartTokenizer"),kYe=o(" or "),SS=a("a"),SYe=o("BartTokenizerFast"),RYe=o(" (BART model)"),PYe=l(),Pn=a("li"),Bre=a("strong"),BYe=o("barthez"),IYe=o(" \u2014 "),RS=a("a"),qYe=o("BarthezTokenizer"),NYe=o(" or "),PS=a("a"),jYe=o("BarthezTokenizerFast"),DYe=o(" (BARThez model)"),GYe=l(),Tg=a("li"),Ire=a("strong"),OYe=o("bartpho"),VYe=o(" \u2014 "),BS=a("a"),XYe=o("BartphoTokenizer"),zYe=o(" (BARTpho model)"),WYe=l(),Bn=a("li"),qre=a("strong"),QYe=o("bert"),HYe=o(" \u2014 "),IS=a("a"),UYe=o("BertTokenizer"),JYe=o(" or "),qS=a("a"),YYe=o("BertTokenizerFast"),KYe=o(" (BERT model)"),ZYe=l(),Mg=a("li"),Nre=a("strong"),eKe=o("bert-generation"),oKe=o(" \u2014 "),NS=a("a"),rKe=o("BertGenerationTokenizer"),tKe=o(" (Bert Generation model)"),aKe=l(),Eg=a("li"),jre=a("strong"),nKe=o("bert-japanese"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("BertJapaneseTokenizer"),iKe=o(" (BertJapanese model)"),dKe=l(),Cg=a("li"),Dre=a("strong"),cKe=o("bertweet"),mKe=o(" \u2014 "),DS=a("a"),fKe=o("BertweetTokenizer"),gKe=o(" (Bertweet model)"),hKe=l(),In=a("li"),Gre=a("strong"),uKe=o("big_bird"),pKe=o(" \u2014 "),GS=a("a"),_Ke=o("BigBirdTokenizer"),bKe=o(" or "),OS=a("a"),vKe=o("BigBirdTokenizerFast"),FKe=o(" (BigBird model)"),TKe=l(),qn=a("li"),Ore=a("strong"),MKe=o("bigbird_pegasus"),EKe=o(" \u2014 "),VS=a("a"),CKe=o("PegasusTokenizer"),wKe=o(" or "),XS=a("a"),AKe=o("PegasusTokenizerFast"),yKe=o(" (BigBirdPegasus model)"),LKe=l(),Nn=a("li"),Vre=a("strong"),xKe=o("blenderbot"),$Ke=o(" \u2014 "),zS=a("a"),kKe=o("BlenderbotTokenizer"),SKe=o(" or "),WS=a("a"),RKe=o("BlenderbotTokenizerFast"),PKe=o(" (Blenderbot model)"),BKe=l(),wg=a("li"),Xre=a("strong"),IKe=o("blenderbot-small"),qKe=o(" \u2014 "),QS=a("a"),NKe=o("BlenderbotSmallTokenizer"),jKe=o(" (BlenderbotSmall model)"),DKe=l(),Ag=a("li"),zre=a("strong"),GKe=o("byt5"),OKe=o(" \u2014 "),HS=a("a"),VKe=o("ByT5Tokenizer"),XKe=o(" (ByT5 model)"),zKe=l(),jn=a("li"),Wre=a("strong"),WKe=o("camembert"),QKe=o(" \u2014 "),US=a("a"),HKe=o("CamembertTokenizer"),UKe=o(" or "),JS=a("a"),JKe=o("CamembertTokenizerFast"),YKe=o(" (CamemBERT model)"),KKe=l(),yg=a("li"),Qre=a("strong"),ZKe=o("canine"),eZe=o(" \u2014 "),YS=a("a"),oZe=o("CanineTokenizer"),rZe=o(" (Canine model)"),tZe=l(),Dn=a("li"),Hre=a("strong"),aZe=o("clip"),nZe=o(" \u2014 "),KS=a("a"),sZe=o("CLIPTokenizer"),lZe=o(" or "),ZS=a("a"),iZe=o("CLIPTokenizerFast"),dZe=o(" (CLIP model)"),cZe=l(),Gn=a("li"),Ure=a("strong"),mZe=o("convbert"),fZe=o(" \u2014 "),eR=a("a"),gZe=o("ConvBertTokenizer"),hZe=o(" or "),oR=a("a"),uZe=o("ConvBertTokenizerFast"),pZe=o(" (ConvBERT model)"),_Ze=l(),On=a("li"),Jre=a("strong"),bZe=o("cpm"),vZe=o(" \u2014 "),rR=a("a"),FZe=o("CpmTokenizer"),TZe=o(" or "),tR=a("a"),MZe=o("CpmTokenizerFast"),EZe=o(" (CPM model)"),CZe=l(),Lg=a("li"),Yre=a("strong"),wZe=o("ctrl"),AZe=o(" \u2014 "),aR=a("a"),yZe=o("CTRLTokenizer"),LZe=o(" (CTRL model)"),xZe=l(),Vn=a("li"),Kre=a("strong"),$Ze=o("data2vec-text"),kZe=o(" \u2014 "),nR=a("a"),SZe=o("RobertaTokenizer"),RZe=o(" or "),sR=a("a"),PZe=o("RobertaTokenizerFast"),BZe=o(" (Data2VecText model)"),IZe=l(),Xn=a("li"),Zre=a("strong"),qZe=o("deberta"),NZe=o(" \u2014 "),lR=a("a"),jZe=o("DebertaTokenizer"),DZe=o(" or "),iR=a("a"),GZe=o("DebertaTokenizerFast"),OZe=o(" (DeBERTa model)"),VZe=l(),zn=a("li"),ete=a("strong"),XZe=o("deberta-v2"),zZe=o(" \u2014 "),dR=a("a"),WZe=o("DebertaV2Tokenizer"),QZe=o(" or "),cR=a("a"),HZe=o("DebertaV2TokenizerFast"),UZe=o(" (DeBERTa-v2 model)"),JZe=l(),Wn=a("li"),ote=a("strong"),YZe=o("distilbert"),KZe=o(" \u2014 "),mR=a("a"),ZZe=o("DistilBertTokenizer"),eeo=o(" or "),fR=a("a"),oeo=o("DistilBertTokenizerFast"),reo=o(" (DistilBERT model)"),teo=l(),Qn=a("li"),rte=a("strong"),aeo=o("dpr"),neo=o(" \u2014 "),gR=a("a"),seo=o("DPRQuestionEncoderTokenizer"),leo=o(" or "),hR=a("a"),ieo=o("DPRQuestionEncoderTokenizerFast"),deo=o(" (DPR model)"),ceo=l(),Hn=a("li"),tte=a("strong"),meo=o("electra"),feo=o(" \u2014 "),uR=a("a"),geo=o("ElectraTokenizer"),heo=o(" or "),pR=a("a"),ueo=o("ElectraTokenizerFast"),peo=o(" (ELECTRA model)"),_eo=l(),xg=a("li"),ate=a("strong"),beo=o("flaubert"),veo=o(" \u2014 "),_R=a("a"),Feo=o("FlaubertTokenizer"),Teo=o(" (FlauBERT model)"),Meo=l(),Un=a("li"),nte=a("strong"),Eeo=o("fnet"),Ceo=o(" \u2014 "),bR=a("a"),weo=o("FNetTokenizer"),Aeo=o(" or "),vR=a("a"),yeo=o("FNetTokenizerFast"),Leo=o(" (FNet model)"),xeo=l(),$g=a("li"),ste=a("strong"),$eo=o("fsmt"),keo=o(" \u2014 "),FR=a("a"),Seo=o("FSMTTokenizer"),Reo=o(" (FairSeq Machine-Translation model)"),Peo=l(),Jn=a("li"),lte=a("strong"),Beo=o("funnel"),Ieo=o(" \u2014 "),TR=a("a"),qeo=o("FunnelTokenizer"),Neo=o(" or "),MR=a("a"),jeo=o("FunnelTokenizerFast"),Deo=o(" (Funnel Transformer model)"),Geo=l(),Yn=a("li"),ite=a("strong"),Oeo=o("gpt2"),Veo=o(" \u2014 "),ER=a("a"),Xeo=o("GPT2Tokenizer"),zeo=o(" or "),CR=a("a"),Weo=o("GPT2TokenizerFast"),Qeo=o(" (OpenAI GPT-2 model)"),Heo=l(),Kn=a("li"),dte=a("strong"),Ueo=o("gpt_neo"),Jeo=o(" \u2014 "),wR=a("a"),Yeo=o("GPT2Tokenizer"),Keo=o(" or "),AR=a("a"),Zeo=o("GPT2TokenizerFast"),eoo=o(" (GPT Neo model)"),ooo=l(),Zn=a("li"),cte=a("strong"),roo=o("gptj"),too=o(" \u2014 "),yR=a("a"),aoo=o("GPT2Tokenizer"),noo=o(" or "),LR=a("a"),soo=o("GPT2TokenizerFast"),loo=o(" (GPT-J model)"),ioo=l(),es=a("li"),mte=a("strong"),doo=o("herbert"),coo=o(" \u2014 "),xR=a("a"),moo=o("HerbertTokenizer"),foo=o(" or "),$R=a("a"),goo=o("HerbertTokenizerFast"),hoo=o(" (HerBERT model)"),uoo=l(),kg=a("li"),fte=a("strong"),poo=o("hubert"),_oo=o(" \u2014 "),kR=a("a"),boo=o("Wav2Vec2CTCTokenizer"),voo=o(" (Hubert model)"),Foo=l(),os=a("li"),gte=a("strong"),Too=o("ibert"),Moo=o(" \u2014 "),SR=a("a"),Eoo=o("RobertaTokenizer"),Coo=o(" or "),RR=a("a"),woo=o("RobertaTokenizerFast"),Aoo=o(" (I-BERT model)"),yoo=l(),rs=a("li"),hte=a("strong"),Loo=o("layoutlm"),xoo=o(" \u2014 "),PR=a("a"),$oo=o("LayoutLMTokenizer"),koo=o(" or "),BR=a("a"),Soo=o("LayoutLMTokenizerFast"),Roo=o(" (LayoutLM model)"),Poo=l(),ts=a("li"),ute=a("strong"),Boo=o("layoutlmv2"),Ioo=o(" \u2014 "),IR=a("a"),qoo=o("LayoutLMv2Tokenizer"),Noo=o(" or "),qR=a("a"),joo=o("LayoutLMv2TokenizerFast"),Doo=o(" (LayoutLMv2 model)"),Goo=l(),as=a("li"),pte=a("strong"),Ooo=o("layoutxlm"),Voo=o(" \u2014 "),NR=a("a"),Xoo=o("LayoutXLMTokenizer"),zoo=o(" or "),jR=a("a"),Woo=o("LayoutXLMTokenizerFast"),Qoo=o(" (LayoutXLM model)"),Hoo=l(),ns=a("li"),_te=a("strong"),Uoo=o("led"),Joo=o(" \u2014 "),DR=a("a"),Yoo=o("LEDTokenizer"),Koo=o(" or "),GR=a("a"),Zoo=o("LEDTokenizerFast"),ero=o(" (LED model)"),oro=l(),ss=a("li"),bte=a("strong"),rro=o("longformer"),tro=o(" \u2014 "),OR=a("a"),aro=o("LongformerTokenizer"),nro=o(" or "),VR=a("a"),sro=o("LongformerTokenizerFast"),lro=o(" (Longformer model)"),iro=l(),Sg=a("li"),vte=a("strong"),dro=o("luke"),cro=o(" \u2014 "),XR=a("a"),mro=o("LukeTokenizer"),fro=o(" (LUKE model)"),gro=l(),ls=a("li"),Fte=a("strong"),hro=o("lxmert"),uro=o(" \u2014 "),zR=a("a"),pro=o("LxmertTokenizer"),_ro=o(" or "),WR=a("a"),bro=o("LxmertTokenizerFast"),vro=o(" (LXMERT model)"),Fro=l(),Rg=a("li"),Tte=a("strong"),Tro=o("m2m_100"),Mro=o(" \u2014 "),QR=a("a"),Ero=o("M2M100Tokenizer"),Cro=o(" (M2M100 model)"),wro=l(),Pg=a("li"),Mte=a("strong"),Aro=o("marian"),yro=o(" \u2014 "),HR=a("a"),Lro=o("MarianTokenizer"),xro=o(" (Marian model)"),$ro=l(),is=a("li"),Ete=a("strong"),kro=o("mbart"),Sro=o(" \u2014 "),UR=a("a"),Rro=o("MBartTokenizer"),Pro=o(" or "),JR=a("a"),Bro=o("MBartTokenizerFast"),Iro=o(" (mBART model)"),qro=l(),ds=a("li"),Cte=a("strong"),Nro=o("mbart50"),jro=o(" \u2014 "),YR=a("a"),Dro=o("MBart50Tokenizer"),Gro=o(" or "),KR=a("a"),Oro=o("MBart50TokenizerFast"),Vro=o(" (mBART-50 model)"),Xro=l(),cs=a("li"),wte=a("strong"),zro=o("megatron-bert"),Wro=o(" \u2014 "),ZR=a("a"),Qro=o("BertTokenizer"),Hro=o(" or "),eP=a("a"),Uro=o("BertTokenizerFast"),Jro=o(" (MegatronBert model)"),Yro=l(),Bg=a("li"),Ate=a("strong"),Kro=o("mluke"),Zro=o(" \u2014 "),oP=a("a"),eto=o("MLukeTokenizer"),oto=o(" (mLUKE model)"),rto=l(),ms=a("li"),yte=a("strong"),tto=o("mobilebert"),ato=o(" \u2014 "),rP=a("a"),nto=o("MobileBertTokenizer"),sto=o(" or "),tP=a("a"),lto=o("MobileBertTokenizerFast"),ito=o(" (MobileBERT model)"),dto=l(),fs=a("li"),Lte=a("strong"),cto=o("mpnet"),mto=o(" \u2014 "),aP=a("a"),fto=o("MPNetTokenizer"),gto=o(" or "),nP=a("a"),hto=o("MPNetTokenizerFast"),uto=o(" (MPNet model)"),pto=l(),gs=a("li"),xte=a("strong"),_to=o("mt5"),bto=o(" \u2014 "),sP=a("a"),vto=o("MT5Tokenizer"),Fto=o(" or "),lP=a("a"),Tto=o("MT5TokenizerFast"),Mto=o(" (mT5 model)"),Eto=l(),hs=a("li"),$te=a("strong"),Cto=o("nystromformer"),wto=o(" \u2014 "),iP=a("a"),Ato=o("AlbertTokenizer"),yto=o(" or "),dP=a("a"),Lto=o("AlbertTokenizerFast"),xto=o(" (Nystromformer model)"),$to=l(),us=a("li"),kte=a("strong"),kto=o("openai-gpt"),Sto=o(" \u2014 "),cP=a("a"),Rto=o("OpenAIGPTTokenizer"),Pto=o(" or "),mP=a("a"),Bto=o("OpenAIGPTTokenizerFast"),Ito=o(" (OpenAI GPT model)"),qto=l(),Ig=a("li"),Ste=a("strong"),Nto=o("opt"),jto=o(" \u2014 "),fP=a("a"),Dto=o("GPT2Tokenizer"),Gto=o(" (OPT model)"),Oto=l(),ps=a("li"),Rte=a("strong"),Vto=o("pegasus"),Xto=o(" \u2014 "),gP=a("a"),zto=o("PegasusTokenizer"),Wto=o(" or "),hP=a("a"),Qto=o("PegasusTokenizerFast"),Hto=o(" (Pegasus model)"),Uto=l(),qg=a("li"),Pte=a("strong"),Jto=o("perceiver"),Yto=o(" \u2014 "),uP=a("a"),Kto=o("PerceiverTokenizer"),Zto=o(" (Perceiver model)"),eao=l(),Ng=a("li"),Bte=a("strong"),oao=o("phobert"),rao=o(" \u2014 "),pP=a("a"),tao=o("PhobertTokenizer"),aao=o(" (PhoBERT model)"),nao=l(),jg=a("li"),Ite=a("strong"),sao=o("plbart"),lao=o(" \u2014 "),_P=a("a"),iao=o("PLBartTokenizer"),dao=o(" (PLBart model)"),cao=l(),Dg=a("li"),qte=a("strong"),mao=o("prophetnet"),fao=o(" \u2014 "),bP=a("a"),gao=o("ProphetNetTokenizer"),hao=o(" (ProphetNet model)"),uao=l(),_s=a("li"),Nte=a("strong"),pao=o("qdqbert"),_ao=o(" \u2014 "),vP=a("a"),bao=o("BertTokenizer"),vao=o(" or "),FP=a("a"),Fao=o("BertTokenizerFast"),Tao=o(" (QDQBert model)"),Mao=l(),Gg=a("li"),jte=a("strong"),Eao=o("rag"),Cao=o(" \u2014 "),TP=a("a"),wao=o("RagTokenizer"),Aao=o(" (RAG model)"),yao=l(),bs=a("li"),Dte=a("strong"),Lao=o("realm"),xao=o(" \u2014 "),MP=a("a"),$ao=o("RealmTokenizer"),kao=o(" or "),EP=a("a"),Sao=o("RealmTokenizerFast"),Rao=o(" (Realm model)"),Pao=l(),vs=a("li"),Gte=a("strong"),Bao=o("reformer"),Iao=o(" \u2014 "),CP=a("a"),qao=o("ReformerTokenizer"),Nao=o(" or "),wP=a("a"),jao=o("ReformerTokenizerFast"),Dao=o(" (Reformer model)"),Gao=l(),Fs=a("li"),Ote=a("strong"),Oao=o("rembert"),Vao=o(" \u2014 "),AP=a("a"),Xao=o("RemBertTokenizer"),zao=o(" or "),yP=a("a"),Wao=o("RemBertTokenizerFast"),Qao=o(" (RemBERT model)"),Hao=l(),Ts=a("li"),Vte=a("strong"),Uao=o("retribert"),Jao=o(" \u2014 "),LP=a("a"),Yao=o("RetriBertTokenizer"),Kao=o(" or "),xP=a("a"),Zao=o("RetriBertTokenizerFast"),eno=o(" (RetriBERT model)"),ono=l(),Ms=a("li"),Xte=a("strong"),rno=o("roberta"),tno=o(" \u2014 "),$P=a("a"),ano=o("RobertaTokenizer"),nno=o(" or "),kP=a("a"),sno=o("RobertaTokenizerFast"),lno=o(" (RoBERTa model)"),ino=l(),Es=a("li"),zte=a("strong"),dno=o("roformer"),cno=o(" \u2014 "),SP=a("a"),mno=o("RoFormerTokenizer"),fno=o(" or "),RP=a("a"),gno=o("RoFormerTokenizerFast"),hno=o(" (RoFormer model)"),uno=l(),Og=a("li"),Wte=a("strong"),pno=o("speech_to_text"),_no=o(" \u2014 "),PP=a("a"),bno=o("Speech2TextTokenizer"),vno=o(" (Speech2Text model)"),Fno=l(),Vg=a("li"),Qte=a("strong"),Tno=o("speech_to_text_2"),Mno=o(" \u2014 "),BP=a("a"),Eno=o("Speech2Text2Tokenizer"),Cno=o(" (Speech2Text2 model)"),wno=l(),Cs=a("li"),Hte=a("strong"),Ano=o("splinter"),yno=o(" \u2014 "),IP=a("a"),Lno=o("SplinterTokenizer"),xno=o(" or "),qP=a("a"),$no=o("SplinterTokenizerFast"),kno=o(" (Splinter model)"),Sno=l(),ws=a("li"),Ute=a("strong"),Rno=o("squeezebert"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("SqueezeBertTokenizer"),Ino=o(" or "),jP=a("a"),qno=o("SqueezeBertTokenizerFast"),Nno=o(" (SqueezeBERT model)"),jno=l(),As=a("li"),Jte=a("strong"),Dno=o("t5"),Gno=o(" \u2014 "),DP=a("a"),Ono=o("T5Tokenizer"),Vno=o(" or "),GP=a("a"),Xno=o("T5TokenizerFast"),zno=o(" (T5 model)"),Wno=l(),Xg=a("li"),Yte=a("strong"),Qno=o("tapas"),Hno=o(" \u2014 "),OP=a("a"),Uno=o("TapasTokenizer"),Jno=o(" (TAPAS model)"),Yno=l(),zg=a("li"),Kte=a("strong"),Kno=o("tapex"),Zno=o(" \u2014 "),VP=a("a"),eso=o("TapexTokenizer"),oso=o(" (TAPEX model)"),rso=l(),Wg=a("li"),Zte=a("strong"),tso=o("transfo-xl"),aso=o(" \u2014 "),XP=a("a"),nso=o("TransfoXLTokenizer"),sso=o(" (Transformer-XL model)"),lso=l(),ys=a("li"),eae=a("strong"),iso=o("visual_bert"),dso=o(" \u2014 "),zP=a("a"),cso=o("BertTokenizer"),mso=o(" or "),WP=a("a"),fso=o("BertTokenizerFast"),gso=o(" (VisualBert model)"),hso=l(),Qg=a("li"),oae=a("strong"),uso=o("wav2vec2"),pso=o(" \u2014 "),QP=a("a"),_so=o("Wav2Vec2CTCTokenizer"),bso=o(" (Wav2Vec2 model)"),vso=l(),Hg=a("li"),rae=a("strong"),Fso=o("wav2vec2-conformer"),Tso=o(" \u2014 "),HP=a("a"),Mso=o("Wav2Vec2CTCTokenizer"),Eso=o(" (Wav2Vec2-Conformer model)"),Cso=l(),Ug=a("li"),tae=a("strong"),wso=o("wav2vec2_phoneme"),Aso=o(" \u2014 "),UP=a("a"),yso=o("Wav2Vec2PhonemeCTCTokenizer"),Lso=o(" (Wav2Vec2Phoneme model)"),xso=l(),Ls=a("li"),aae=a("strong"),$so=o("xglm"),kso=o(" \u2014 "),JP=a("a"),Sso=o("XGLMTokenizer"),Rso=o(" or "),YP=a("a"),Pso=o("XGLMTokenizerFast"),Bso=o(" (XGLM model)"),Iso=l(),Jg=a("li"),nae=a("strong"),qso=o("xlm"),Nso=o(" \u2014 "),KP=a("a"),jso=o("XLMTokenizer"),Dso=o(" (XLM model)"),Gso=l(),Yg=a("li"),sae=a("strong"),Oso=o("xlm-prophetnet"),Vso=o(" \u2014 "),ZP=a("a"),Xso=o("XLMProphetNetTokenizer"),zso=o(" (XLMProphetNet model)"),Wso=l(),xs=a("li"),lae=a("strong"),Qso=o("xlm-roberta"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("XLMRobertaTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("XLMRobertaTokenizerFast"),Kso=o(" (XLM-RoBERTa model)"),Zso=l(),$s=a("li"),iae=a("strong"),elo=o("xlm-roberta-xl"),olo=o(" \u2014 "),rB=a("a"),rlo=o("RobertaTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("RobertaTokenizerFast"),nlo=o(" (XLM-RoBERTa-XL model)"),slo=l(),ks=a("li"),dae=a("strong"),llo=o("xlnet"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("XLNetTokenizer"),clo=o(" or "),nB=a("a"),mlo=o("XLNetTokenizerFast"),flo=o(" (XLNet model)"),glo=l(),Ss=a("li"),cae=a("strong"),hlo=o("yoso"),ulo=o(" \u2014 "),sB=a("a"),plo=o("AlbertTokenizer"),_lo=o(" or "),lB=a("a"),blo=o("AlbertTokenizerFast"),vlo=o(" (YOSO model)"),Flo=l(),F(Kg.$$.fragment),Tlo=l(),Zg=a("div"),F(Fy.$$.fragment),Mlo=l(),mae=a("p"),Elo=o("Register a new tokenizer in this mapping."),PIe=l(),Ti=a("h2"),eh=a("a"),fae=a("span"),F(Ty.$$.fragment),Clo=l(),gae=a("span"),wlo=o("AutoFeatureExtractor"),BIe=l(),Ao=a("div"),F(My.$$.fragment),Alo=l(),Ey=a("p"),ylo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iB=a("a"),Llo=o("AutoFeatureExtractor.from_pretrained()"),xlo=o(" class method."),$lo=l(),Cy=a("p"),klo=o("This class cannot be instantiated directly using "),hae=a("code"),Slo=o("__init__()"),Rlo=o(" (throws an error)."),Plo=l(),He=a("div"),F(wy.$$.fragment),Blo=l(),uae=a("p"),Ilo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qlo=l(),ya=a("p"),Nlo=o("The feature extractor class to instantiate is selected based on the "),pae=a("code"),jlo=o("model_type"),Dlo=o(` property of the config object
(either passed as an argument or loaded from `),_ae=a("code"),Glo=o("pretrained_model_name_or_path"),Olo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bae=a("code"),Vlo=o("pretrained_model_name_or_path"),Xlo=o(":"),zlo=l(),Z=a("ul"),oh=a("li"),vae=a("strong"),Wlo=o("beit"),Qlo=o(" \u2014 "),dB=a("a"),Hlo=o("BeitFeatureExtractor"),Ulo=o(" (BEiT model)"),Jlo=l(),rh=a("li"),Fae=a("strong"),Ylo=o("clip"),Klo=o(" \u2014 "),cB=a("a"),Zlo=o("CLIPFeatureExtractor"),eio=o(" (CLIP model)"),oio=l(),th=a("li"),Tae=a("strong"),rio=o("convnext"),tio=o(" \u2014 "),mB=a("a"),aio=o("ConvNextFeatureExtractor"),nio=o(" (ConvNext model)"),sio=l(),ah=a("li"),Mae=a("strong"),lio=o("data2vec-audio"),iio=o(" \u2014 "),fB=a("a"),dio=o("Wav2Vec2FeatureExtractor"),cio=o(" (Data2VecAudio model)"),mio=l(),nh=a("li"),Eae=a("strong"),fio=o("data2vec-vision"),gio=o(" \u2014 "),gB=a("a"),hio=o("BeitFeatureExtractor"),uio=o(" (Data2VecVision model)"),pio=l(),sh=a("li"),Cae=a("strong"),_io=o("deit"),bio=o(" \u2014 "),hB=a("a"),vio=o("DeiTFeatureExtractor"),Fio=o(" (DeiT model)"),Tio=l(),lh=a("li"),wae=a("strong"),Mio=o("detr"),Eio=o(" \u2014 "),uB=a("a"),Cio=o("DetrFeatureExtractor"),wio=o(" (DETR model)"),Aio=l(),ih=a("li"),Aae=a("strong"),yio=o("dpt"),Lio=o(" \u2014 "),pB=a("a"),xio=o("DPTFeatureExtractor"),$io=o(" (DPT model)"),kio=l(),dh=a("li"),yae=a("strong"),Sio=o("flava"),Rio=o(" \u2014 "),_B=a("a"),Pio=o("FlavaFeatureExtractor"),Bio=o(" (Flava model)"),Iio=l(),ch=a("li"),Lae=a("strong"),qio=o("glpn"),Nio=o(" \u2014 "),bB=a("a"),jio=o("GLPNFeatureExtractor"),Dio=o(" (GLPN model)"),Gio=l(),mh=a("li"),xae=a("strong"),Oio=o("hubert"),Vio=o(" \u2014 "),vB=a("a"),Xio=o("Wav2Vec2FeatureExtractor"),zio=o(" (Hubert model)"),Wio=l(),fh=a("li"),$ae=a("strong"),Qio=o("layoutlmv2"),Hio=o(" \u2014 "),FB=a("a"),Uio=o("LayoutLMv2FeatureExtractor"),Jio=o(" (LayoutLMv2 model)"),Yio=l(),gh=a("li"),kae=a("strong"),Kio=o("maskformer"),Zio=o(" \u2014 "),TB=a("a"),edo=o("MaskFormerFeatureExtractor"),odo=o(" (MaskFormer model)"),rdo=l(),hh=a("li"),Sae=a("strong"),tdo=o("perceiver"),ado=o(" \u2014 "),MB=a("a"),ndo=o("PerceiverFeatureExtractor"),sdo=o(" (Perceiver model)"),ldo=l(),uh=a("li"),Rae=a("strong"),ido=o("poolformer"),ddo=o(" \u2014 "),EB=a("a"),cdo=o("PoolFormerFeatureExtractor"),mdo=o(" (PoolFormer model)"),fdo=l(),ph=a("li"),Pae=a("strong"),gdo=o("regnet"),hdo=o(" \u2014 "),CB=a("a"),udo=o("ConvNextFeatureExtractor"),pdo=o(" (RegNet model)"),_do=l(),_h=a("li"),Bae=a("strong"),bdo=o("resnet"),vdo=o(" \u2014 "),wB=a("a"),Fdo=o("ConvNextFeatureExtractor"),Tdo=o(" (ResNet model)"),Mdo=l(),bh=a("li"),Iae=a("strong"),Edo=o("segformer"),Cdo=o(" \u2014 "),AB=a("a"),wdo=o("SegformerFeatureExtractor"),Ado=o(" (SegFormer model)"),ydo=l(),vh=a("li"),qae=a("strong"),Ldo=o("speech_to_text"),xdo=o(" \u2014 "),yB=a("a"),$do=o("Speech2TextFeatureExtractor"),kdo=o(" (Speech2Text model)"),Sdo=l(),Fh=a("li"),Nae=a("strong"),Rdo=o("swin"),Pdo=o(" \u2014 "),LB=a("a"),Bdo=o("ViTFeatureExtractor"),Ido=o(" (Swin model)"),qdo=l(),Th=a("li"),jae=a("strong"),Ndo=o("van"),jdo=o(" \u2014 "),xB=a("a"),Ddo=o("ConvNextFeatureExtractor"),Gdo=o(" (VAN model)"),Odo=l(),Mh=a("li"),Dae=a("strong"),Vdo=o("vit"),Xdo=o(" \u2014 "),$B=a("a"),zdo=o("ViTFeatureExtractor"),Wdo=o(" (ViT model)"),Qdo=l(),Eh=a("li"),Gae=a("strong"),Hdo=o("vit_mae"),Udo=o(" \u2014 "),kB=a("a"),Jdo=o("ViTFeatureExtractor"),Ydo=o(" (ViTMAE model)"),Kdo=l(),Ch=a("li"),Oae=a("strong"),Zdo=o("wav2vec2"),eco=o(" \u2014 "),SB=a("a"),oco=o("Wav2Vec2FeatureExtractor"),rco=o(" (Wav2Vec2 model)"),tco=l(),wh=a("li"),Vae=a("strong"),aco=o("wav2vec2-conformer"),nco=o(" \u2014 "),RB=a("a"),sco=o("Wav2Vec2FeatureExtractor"),lco=o(" (Wav2Vec2-Conformer model)"),ico=l(),Ah=a("li"),Xae=a("strong"),dco=o("yolos"),cco=o(" \u2014 "),PB=a("a"),mco=o("YolosFeatureExtractor"),fco=o(" (YOLOS model)"),gco=l(),F(yh.$$.fragment),hco=l(),F(Lh.$$.fragment),uco=l(),xh=a("div"),F(Ay.$$.fragment),pco=l(),zae=a("p"),_co=o("Register a new feature extractor for this class."),IIe=l(),Mi=a("h2"),$h=a("a"),Wae=a("span"),F(yy.$$.fragment),bco=l(),Qae=a("span"),vco=o("AutoProcessor"),qIe=l(),yo=a("div"),F(Ly.$$.fragment),Fco=l(),xy=a("p"),Tco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=a("a"),Mco=o("AutoProcessor.from_pretrained()"),Eco=o(" class method."),Cco=l(),$y=a("p"),wco=o("This class cannot be instantiated directly using "),Hae=a("code"),Aco=o("__init__()"),yco=o(" (throws an error)."),Lco=l(),Ue=a("div"),F(ky.$$.fragment),xco=l(),Uae=a("p"),$co=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),kco=l(),Ei=a("p"),Sco=o("The processor class to instantiate is selected based on the "),Jae=a("code"),Rco=o("model_type"),Pco=o(` property of the config object (either
passed as an argument or loaded from `),Yae=a("code"),Bco=o("pretrained_model_name_or_path"),Ico=o(" if possible):"),qco=l(),ue=a("ul"),kh=a("li"),Kae=a("strong"),Nco=o("clip"),jco=o(" \u2014 "),IB=a("a"),Dco=o("CLIPProcessor"),Gco=o(" (CLIP model)"),Oco=l(),Sh=a("li"),Zae=a("strong"),Vco=o("flava"),Xco=o(" \u2014 "),ene=a("code"),zco=o("FLAVAProcessor"),Wco=o(" (Flava model)"),Qco=l(),Rh=a("li"),one=a("strong"),Hco=o("layoutlmv2"),Uco=o(" \u2014 "),qB=a("a"),Jco=o("LayoutLMv2Processor"),Yco=o(" (LayoutLMv2 model)"),Kco=l(),Ph=a("li"),rne=a("strong"),Zco=o("layoutxlm"),emo=o(" \u2014 "),NB=a("a"),omo=o("LayoutXLMProcessor"),rmo=o(" (LayoutXLM model)"),tmo=l(),Bh=a("li"),tne=a("strong"),amo=o("sew"),nmo=o(" \u2014 "),jB=a("a"),smo=o("Wav2Vec2Processor"),lmo=o(" (SEW model)"),imo=l(),Ih=a("li"),ane=a("strong"),dmo=o("sew-d"),cmo=o(" \u2014 "),DB=a("a"),mmo=o("Wav2Vec2Processor"),fmo=o(" (SEW-D model)"),gmo=l(),qh=a("li"),nne=a("strong"),hmo=o("speech_to_text"),umo=o(" \u2014 "),GB=a("a"),pmo=o("Speech2TextProcessor"),_mo=o(" (Speech2Text model)"),bmo=l(),Nh=a("li"),sne=a("strong"),vmo=o("speech_to_text_2"),Fmo=o(" \u2014 "),OB=a("a"),Tmo=o("Speech2Text2Processor"),Mmo=o(" (Speech2Text2 model)"),Emo=l(),jh=a("li"),lne=a("strong"),Cmo=o("trocr"),wmo=o(" \u2014 "),VB=a("a"),Amo=o("TrOCRProcessor"),ymo=o(" (TrOCR model)"),Lmo=l(),Dh=a("li"),ine=a("strong"),xmo=o("unispeech"),$mo=o(" \u2014 "),XB=a("a"),kmo=o("Wav2Vec2Processor"),Smo=o(" (UniSpeech model)"),Rmo=l(),Gh=a("li"),dne=a("strong"),Pmo=o("unispeech-sat"),Bmo=o(" \u2014 "),zB=a("a"),Imo=o("Wav2Vec2Processor"),qmo=o(" (UniSpeechSat model)"),Nmo=l(),Oh=a("li"),cne=a("strong"),jmo=o("vilt"),Dmo=o(" \u2014 "),WB=a("a"),Gmo=o("ViltProcessor"),Omo=o(" (ViLT model)"),Vmo=l(),Vh=a("li"),mne=a("strong"),Xmo=o("vision-text-dual-encoder"),zmo=o(" \u2014 "),QB=a("a"),Wmo=o("VisionTextDualEncoderProcessor"),Qmo=o(" (VisionTextDualEncoder model)"),Hmo=l(),Xh=a("li"),fne=a("strong"),Umo=o("wav2vec2"),Jmo=o(" \u2014 "),HB=a("a"),Ymo=o("Wav2Vec2Processor"),Kmo=o(" (Wav2Vec2 model)"),Zmo=l(),zh=a("li"),gne=a("strong"),efo=o("wav2vec2-conformer"),ofo=o(" \u2014 "),UB=a("a"),rfo=o("Wav2Vec2Processor"),tfo=o(" (Wav2Vec2-Conformer model)"),afo=l(),Wh=a("li"),hne=a("strong"),nfo=o("wavlm"),sfo=o(" \u2014 "),JB=a("a"),lfo=o("Wav2Vec2Processor"),ifo=o(" (WavLM model)"),dfo=l(),F(Qh.$$.fragment),cfo=l(),F(Hh.$$.fragment),mfo=l(),Uh=a("div"),F(Sy.$$.fragment),ffo=l(),une=a("p"),gfo=o("Register a new processor for this class."),NIe=l(),Ci=a("h2"),Jh=a("a"),pne=a("span"),F(Ry.$$.fragment),hfo=l(),_ne=a("span"),ufo=o("AutoModel"),jIe=l(),Lo=a("div"),F(Py.$$.fragment),pfo=l(),wi=a("p"),_fo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YB=a("a"),bfo=o("from_pretrained()"),vfo=o(" class method or the "),KB=a("a"),Ffo=o("from_config()"),Tfo=o(` class
method.`),Mfo=l(),By=a("p"),Efo=o("This class cannot be instantiated directly using "),bne=a("code"),Cfo=o("__init__()"),wfo=o(" (throws an error)."),Afo=l(),tt=a("div"),F(Iy.$$.fragment),yfo=l(),vne=a("p"),Lfo=o("Instantiates one of the base model classes of the library from a configuration."),xfo=l(),Ai=a("p"),$fo=o(`Note:
Loading a model from its configuration file does `),Fne=a("strong"),kfo=o("not"),Sfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZB=a("a"),Rfo=o("from_pretrained()"),Pfo=o(" to load the model weights."),Bfo=l(),F(Yh.$$.fragment),Ifo=l(),Je=a("div"),F(qy.$$.fragment),qfo=l(),Tne=a("p"),Nfo=o("Instantiate one of the base model classes of the library from a pretrained model."),jfo=l(),La=a("p"),Dfo=o("The model class to instantiate is selected based on the "),Mne=a("code"),Gfo=o("model_type"),Ofo=o(` property of the config object (either
passed as an argument or loaded from `),Ene=a("code"),Vfo=o("pretrained_model_name_or_path"),Xfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cne=a("code"),zfo=o("pretrained_model_name_or_path"),Wfo=o(":"),Qfo=l(),x=a("ul"),Kh=a("li"),wne=a("strong"),Hfo=o("albert"),Ufo=o(" \u2014 "),eI=a("a"),Jfo=o("AlbertModel"),Yfo=o(" (ALBERT model)"),Kfo=l(),Zh=a("li"),Ane=a("strong"),Zfo=o("bart"),ego=o(" \u2014 "),oI=a("a"),ogo=o("BartModel"),rgo=o(" (BART model)"),tgo=l(),eu=a("li"),yne=a("strong"),ago=o("beit"),ngo=o(" \u2014 "),rI=a("a"),sgo=o("BeitModel"),lgo=o(" (BEiT model)"),igo=l(),ou=a("li"),Lne=a("strong"),dgo=o("bert"),cgo=o(" \u2014 "),tI=a("a"),mgo=o("BertModel"),fgo=o(" (BERT model)"),ggo=l(),ru=a("li"),xne=a("strong"),hgo=o("bert-generation"),ugo=o(" \u2014 "),aI=a("a"),pgo=o("BertGenerationEncoder"),_go=o(" (Bert Generation model)"),bgo=l(),tu=a("li"),$ne=a("strong"),vgo=o("big_bird"),Fgo=o(" \u2014 "),nI=a("a"),Tgo=o("BigBirdModel"),Mgo=o(" (BigBird model)"),Ego=l(),au=a("li"),kne=a("strong"),Cgo=o("bigbird_pegasus"),wgo=o(" \u2014 "),sI=a("a"),Ago=o("BigBirdPegasusModel"),ygo=o(" (BigBirdPegasus model)"),Lgo=l(),nu=a("li"),Sne=a("strong"),xgo=o("blenderbot"),$go=o(" \u2014 "),lI=a("a"),kgo=o("BlenderbotModel"),Sgo=o(" (Blenderbot model)"),Rgo=l(),su=a("li"),Rne=a("strong"),Pgo=o("blenderbot-small"),Bgo=o(" \u2014 "),iI=a("a"),Igo=o("BlenderbotSmallModel"),qgo=o(" (BlenderbotSmall model)"),Ngo=l(),lu=a("li"),Pne=a("strong"),jgo=o("camembert"),Dgo=o(" \u2014 "),dI=a("a"),Ggo=o("CamembertModel"),Ogo=o(" (CamemBERT model)"),Vgo=l(),iu=a("li"),Bne=a("strong"),Xgo=o("canine"),zgo=o(" \u2014 "),cI=a("a"),Wgo=o("CanineModel"),Qgo=o(" (Canine model)"),Hgo=l(),du=a("li"),Ine=a("strong"),Ugo=o("clip"),Jgo=o(" \u2014 "),mI=a("a"),Ygo=o("CLIPModel"),Kgo=o(" (CLIP model)"),Zgo=l(),cu=a("li"),qne=a("strong"),eho=o("convbert"),oho=o(" \u2014 "),fI=a("a"),rho=o("ConvBertModel"),tho=o(" (ConvBERT model)"),aho=l(),mu=a("li"),Nne=a("strong"),nho=o("convnext"),sho=o(" \u2014 "),gI=a("a"),lho=o("ConvNextModel"),iho=o(" (ConvNext model)"),dho=l(),fu=a("li"),jne=a("strong"),cho=o("ctrl"),mho=o(" \u2014 "),hI=a("a"),fho=o("CTRLModel"),gho=o(" (CTRL model)"),hho=l(),gu=a("li"),Dne=a("strong"),uho=o("data2vec-audio"),pho=o(" \u2014 "),uI=a("a"),_ho=o("Data2VecAudioModel"),bho=o(" (Data2VecAudio model)"),vho=l(),hu=a("li"),Gne=a("strong"),Fho=o("data2vec-text"),Tho=o(" \u2014 "),pI=a("a"),Mho=o("Data2VecTextModel"),Eho=o(" (Data2VecText model)"),Cho=l(),uu=a("li"),One=a("strong"),who=o("data2vec-vision"),Aho=o(" \u2014 "),_I=a("a"),yho=o("Data2VecVisionModel"),Lho=o(" (Data2VecVision model)"),xho=l(),pu=a("li"),Vne=a("strong"),$ho=o("deberta"),kho=o(" \u2014 "),bI=a("a"),Sho=o("DebertaModel"),Rho=o(" (DeBERTa model)"),Pho=l(),_u=a("li"),Xne=a("strong"),Bho=o("deberta-v2"),Iho=o(" \u2014 "),vI=a("a"),qho=o("DebertaV2Model"),Nho=o(" (DeBERTa-v2 model)"),jho=l(),bu=a("li"),zne=a("strong"),Dho=o("decision_transformer"),Gho=o(" \u2014 "),FI=a("a"),Oho=o("DecisionTransformerModel"),Vho=o(" (Decision Transformer model)"),Xho=l(),vu=a("li"),Wne=a("strong"),zho=o("deit"),Who=o(" \u2014 "),TI=a("a"),Qho=o("DeiTModel"),Hho=o(" (DeiT model)"),Uho=l(),Fu=a("li"),Qne=a("strong"),Jho=o("detr"),Yho=o(" \u2014 "),MI=a("a"),Kho=o("DetrModel"),Zho=o(" (DETR model)"),euo=l(),Tu=a("li"),Hne=a("strong"),ouo=o("distilbert"),ruo=o(" \u2014 "),EI=a("a"),tuo=o("DistilBertModel"),auo=o(" (DistilBERT model)"),nuo=l(),Mu=a("li"),Une=a("strong"),suo=o("dpr"),luo=o(" \u2014 "),CI=a("a"),iuo=o("DPRQuestionEncoder"),duo=o(" (DPR model)"),cuo=l(),Eu=a("li"),Jne=a("strong"),muo=o("dpt"),fuo=o(" \u2014 "),wI=a("a"),guo=o("DPTModel"),huo=o(" (DPT model)"),uuo=l(),Cu=a("li"),Yne=a("strong"),puo=o("electra"),_uo=o(" \u2014 "),AI=a("a"),buo=o("ElectraModel"),vuo=o(" (ELECTRA model)"),Fuo=l(),wu=a("li"),Kne=a("strong"),Tuo=o("flaubert"),Muo=o(" \u2014 "),yI=a("a"),Euo=o("FlaubertModel"),Cuo=o(" (FlauBERT model)"),wuo=l(),Au=a("li"),Zne=a("strong"),Auo=o("flava"),yuo=o(" \u2014 "),LI=a("a"),Luo=o("FlavaModel"),xuo=o(" (Flava model)"),$uo=l(),yu=a("li"),ese=a("strong"),kuo=o("fnet"),Suo=o(" \u2014 "),xI=a("a"),Ruo=o("FNetModel"),Puo=o(" (FNet model)"),Buo=l(),Lu=a("li"),ose=a("strong"),Iuo=o("fsmt"),quo=o(" \u2014 "),$I=a("a"),Nuo=o("FSMTModel"),juo=o(" (FairSeq Machine-Translation model)"),Duo=l(),Rs=a("li"),rse=a("strong"),Guo=o("funnel"),Ouo=o(" \u2014 "),kI=a("a"),Vuo=o("FunnelModel"),Xuo=o(" or "),SI=a("a"),zuo=o("FunnelBaseModel"),Wuo=o(" (Funnel Transformer model)"),Quo=l(),xu=a("li"),tse=a("strong"),Huo=o("glpn"),Uuo=o(" \u2014 "),RI=a("a"),Juo=o("GLPNModel"),Yuo=o(" (GLPN model)"),Kuo=l(),$u=a("li"),ase=a("strong"),Zuo=o("gpt2"),epo=o(" \u2014 "),PI=a("a"),opo=o("GPT2Model"),rpo=o(" (OpenAI GPT-2 model)"),tpo=l(),ku=a("li"),nse=a("strong"),apo=o("gpt_neo"),npo=o(" \u2014 "),BI=a("a"),spo=o("GPTNeoModel"),lpo=o(" (GPT Neo model)"),ipo=l(),Su=a("li"),sse=a("strong"),dpo=o("gptj"),cpo=o(" \u2014 "),II=a("a"),mpo=o("GPTJModel"),fpo=o(" (GPT-J model)"),gpo=l(),Ru=a("li"),lse=a("strong"),hpo=o("hubert"),upo=o(" \u2014 "),qI=a("a"),ppo=o("HubertModel"),_po=o(" (Hubert model)"),bpo=l(),Pu=a("li"),ise=a("strong"),vpo=o("ibert"),Fpo=o(" \u2014 "),NI=a("a"),Tpo=o("IBertModel"),Mpo=o(" (I-BERT model)"),Epo=l(),Bu=a("li"),dse=a("strong"),Cpo=o("imagegpt"),wpo=o(" \u2014 "),jI=a("a"),Apo=o("ImageGPTModel"),ypo=o(" (ImageGPT model)"),Lpo=l(),Iu=a("li"),cse=a("strong"),xpo=o("layoutlm"),$po=o(" \u2014 "),DI=a("a"),kpo=o("LayoutLMModel"),Spo=o(" (LayoutLM model)"),Rpo=l(),qu=a("li"),mse=a("strong"),Ppo=o("layoutlmv2"),Bpo=o(" \u2014 "),GI=a("a"),Ipo=o("LayoutLMv2Model"),qpo=o(" (LayoutLMv2 model)"),Npo=l(),Nu=a("li"),fse=a("strong"),jpo=o("led"),Dpo=o(" \u2014 "),OI=a("a"),Gpo=o("LEDModel"),Opo=o(" (LED model)"),Vpo=l(),ju=a("li"),gse=a("strong"),Xpo=o("longformer"),zpo=o(" \u2014 "),VI=a("a"),Wpo=o("LongformerModel"),Qpo=o(" (Longformer model)"),Hpo=l(),Du=a("li"),hse=a("strong"),Upo=o("luke"),Jpo=o(" \u2014 "),XI=a("a"),Ypo=o("LukeModel"),Kpo=o(" (LUKE model)"),Zpo=l(),Gu=a("li"),use=a("strong"),e_o=o("lxmert"),o_o=o(" \u2014 "),zI=a("a"),r_o=o("LxmertModel"),t_o=o(" (LXMERT model)"),a_o=l(),Ou=a("li"),pse=a("strong"),n_o=o("m2m_100"),s_o=o(" \u2014 "),WI=a("a"),l_o=o("M2M100Model"),i_o=o(" (M2M100 model)"),d_o=l(),Vu=a("li"),_se=a("strong"),c_o=o("marian"),m_o=o(" \u2014 "),QI=a("a"),f_o=o("MarianModel"),g_o=o(" (Marian model)"),h_o=l(),Xu=a("li"),bse=a("strong"),u_o=o("maskformer"),p_o=o(" \u2014 "),HI=a("a"),__o=o("MaskFormerModel"),b_o=o(" (MaskFormer model)"),v_o=l(),zu=a("li"),vse=a("strong"),F_o=o("mbart"),T_o=o(" \u2014 "),UI=a("a"),M_o=o("MBartModel"),E_o=o(" (mBART model)"),C_o=l(),Wu=a("li"),Fse=a("strong"),w_o=o("megatron-bert"),A_o=o(" \u2014 "),JI=a("a"),y_o=o("MegatronBertModel"),L_o=o(" (MegatronBert model)"),x_o=l(),Qu=a("li"),Tse=a("strong"),$_o=o("mobilebert"),k_o=o(" \u2014 "),YI=a("a"),S_o=o("MobileBertModel"),R_o=o(" (MobileBERT model)"),P_o=l(),Hu=a("li"),Mse=a("strong"),B_o=o("mpnet"),I_o=o(" \u2014 "),KI=a("a"),q_o=o("MPNetModel"),N_o=o(" (MPNet model)"),j_o=l(),Uu=a("li"),Ese=a("strong"),D_o=o("mt5"),G_o=o(" \u2014 "),ZI=a("a"),O_o=o("MT5Model"),V_o=o(" (mT5 model)"),X_o=l(),Ju=a("li"),Cse=a("strong"),z_o=o("nystromformer"),W_o=o(" \u2014 "),eq=a("a"),Q_o=o("NystromformerModel"),H_o=o(" (Nystromformer model)"),U_o=l(),Yu=a("li"),wse=a("strong"),J_o=o("openai-gpt"),Y_o=o(" \u2014 "),oq=a("a"),K_o=o("OpenAIGPTModel"),Z_o=o(" (OpenAI GPT model)"),ebo=l(),Ku=a("li"),Ase=a("strong"),obo=o("opt"),rbo=o(" \u2014 "),rq=a("a"),tbo=o("OPTModel"),abo=o(" (OPT model)"),nbo=l(),Zu=a("li"),yse=a("strong"),sbo=o("pegasus"),lbo=o(" \u2014 "),tq=a("a"),ibo=o("PegasusModel"),dbo=o(" (Pegasus model)"),cbo=l(),ep=a("li"),Lse=a("strong"),mbo=o("perceiver"),fbo=o(" \u2014 "),aq=a("a"),gbo=o("PerceiverModel"),hbo=o(" (Perceiver model)"),ubo=l(),op=a("li"),xse=a("strong"),pbo=o("plbart"),_bo=o(" \u2014 "),nq=a("a"),bbo=o("PLBartModel"),vbo=o(" (PLBart model)"),Fbo=l(),rp=a("li"),$se=a("strong"),Tbo=o("poolformer"),Mbo=o(" \u2014 "),sq=a("a"),Ebo=o("PoolFormerModel"),Cbo=o(" (PoolFormer model)"),wbo=l(),tp=a("li"),kse=a("strong"),Abo=o("prophetnet"),ybo=o(" \u2014 "),lq=a("a"),Lbo=o("ProphetNetModel"),xbo=o(" (ProphetNet model)"),$bo=l(),ap=a("li"),Sse=a("strong"),kbo=o("qdqbert"),Sbo=o(" \u2014 "),iq=a("a"),Rbo=o("QDQBertModel"),Pbo=o(" (QDQBert model)"),Bbo=l(),np=a("li"),Rse=a("strong"),Ibo=o("reformer"),qbo=o(" \u2014 "),dq=a("a"),Nbo=o("ReformerModel"),jbo=o(" (Reformer model)"),Dbo=l(),sp=a("li"),Pse=a("strong"),Gbo=o("regnet"),Obo=o(" \u2014 "),cq=a("a"),Vbo=o("RegNetModel"),Xbo=o(" (RegNet model)"),zbo=l(),lp=a("li"),Bse=a("strong"),Wbo=o("rembert"),Qbo=o(" \u2014 "),mq=a("a"),Hbo=o("RemBertModel"),Ubo=o(" (RemBERT model)"),Jbo=l(),ip=a("li"),Ise=a("strong"),Ybo=o("resnet"),Kbo=o(" \u2014 "),fq=a("a"),Zbo=o("ResNetModel"),e2o=o(" (ResNet model)"),o2o=l(),dp=a("li"),qse=a("strong"),r2o=o("retribert"),t2o=o(" \u2014 "),gq=a("a"),a2o=o("RetriBertModel"),n2o=o(" (RetriBERT model)"),s2o=l(),cp=a("li"),Nse=a("strong"),l2o=o("roberta"),i2o=o(" \u2014 "),hq=a("a"),d2o=o("RobertaModel"),c2o=o(" (RoBERTa model)"),m2o=l(),mp=a("li"),jse=a("strong"),f2o=o("roformer"),g2o=o(" \u2014 "),uq=a("a"),h2o=o("RoFormerModel"),u2o=o(" (RoFormer model)"),p2o=l(),fp=a("li"),Dse=a("strong"),_2o=o("segformer"),b2o=o(" \u2014 "),pq=a("a"),v2o=o("SegformerModel"),F2o=o(" (SegFormer model)"),T2o=l(),gp=a("li"),Gse=a("strong"),M2o=o("sew"),E2o=o(" \u2014 "),_q=a("a"),C2o=o("SEWModel"),w2o=o(" (SEW model)"),A2o=l(),hp=a("li"),Ose=a("strong"),y2o=o("sew-d"),L2o=o(" \u2014 "),bq=a("a"),x2o=o("SEWDModel"),$2o=o(" (SEW-D model)"),k2o=l(),up=a("li"),Vse=a("strong"),S2o=o("speech_to_text"),R2o=o(" \u2014 "),vq=a("a"),P2o=o("Speech2TextModel"),B2o=o(" (Speech2Text model)"),I2o=l(),pp=a("li"),Xse=a("strong"),q2o=o("splinter"),N2o=o(" \u2014 "),Fq=a("a"),j2o=o("SplinterModel"),D2o=o(" (Splinter model)"),G2o=l(),_p=a("li"),zse=a("strong"),O2o=o("squeezebert"),V2o=o(" \u2014 "),Tq=a("a"),X2o=o("SqueezeBertModel"),z2o=o(" (SqueezeBERT model)"),W2o=l(),bp=a("li"),Wse=a("strong"),Q2o=o("swin"),H2o=o(" \u2014 "),Mq=a("a"),U2o=o("SwinModel"),J2o=o(" (Swin model)"),Y2o=l(),vp=a("li"),Qse=a("strong"),K2o=o("t5"),Z2o=o(" \u2014 "),Eq=a("a"),evo=o("T5Model"),ovo=o(" (T5 model)"),rvo=l(),Fp=a("li"),Hse=a("strong"),tvo=o("tapas"),avo=o(" \u2014 "),Cq=a("a"),nvo=o("TapasModel"),svo=o(" (TAPAS model)"),lvo=l(),Tp=a("li"),Use=a("strong"),ivo=o("transfo-xl"),dvo=o(" \u2014 "),wq=a("a"),cvo=o("TransfoXLModel"),mvo=o(" (Transformer-XL model)"),fvo=l(),Mp=a("li"),Jse=a("strong"),gvo=o("unispeech"),hvo=o(" \u2014 "),Aq=a("a"),uvo=o("UniSpeechModel"),pvo=o(" (UniSpeech model)"),_vo=l(),Ep=a("li"),Yse=a("strong"),bvo=o("unispeech-sat"),vvo=o(" \u2014 "),yq=a("a"),Fvo=o("UniSpeechSatModel"),Tvo=o(" (UniSpeechSat model)"),Mvo=l(),Cp=a("li"),Kse=a("strong"),Evo=o("van"),Cvo=o(" \u2014 "),Lq=a("a"),wvo=o("VanModel"),Avo=o(" (VAN model)"),yvo=l(),wp=a("li"),Zse=a("strong"),Lvo=o("vilt"),xvo=o(" \u2014 "),xq=a("a"),$vo=o("ViltModel"),kvo=o(" (ViLT model)"),Svo=l(),Ap=a("li"),ele=a("strong"),Rvo=o("vision-text-dual-encoder"),Pvo=o(" \u2014 "),$q=a("a"),Bvo=o("VisionTextDualEncoderModel"),Ivo=o(" (VisionTextDualEncoder model)"),qvo=l(),yp=a("li"),ole=a("strong"),Nvo=o("visual_bert"),jvo=o(" \u2014 "),kq=a("a"),Dvo=o("VisualBertModel"),Gvo=o(" (VisualBert model)"),Ovo=l(),Lp=a("li"),rle=a("strong"),Vvo=o("vit"),Xvo=o(" \u2014 "),Sq=a("a"),zvo=o("ViTModel"),Wvo=o(" (ViT model)"),Qvo=l(),xp=a("li"),tle=a("strong"),Hvo=o("vit_mae"),Uvo=o(" \u2014 "),Rq=a("a"),Jvo=o("ViTMAEModel"),Yvo=o(" (ViTMAE model)"),Kvo=l(),$p=a("li"),ale=a("strong"),Zvo=o("wav2vec2"),eFo=o(" \u2014 "),Pq=a("a"),oFo=o("Wav2Vec2Model"),rFo=o(" (Wav2Vec2 model)"),tFo=l(),kp=a("li"),nle=a("strong"),aFo=o("wav2vec2-conformer"),nFo=o(" \u2014 "),Bq=a("a"),sFo=o("Wav2Vec2ConformerModel"),lFo=o(" (Wav2Vec2-Conformer model)"),iFo=l(),Sp=a("li"),sle=a("strong"),dFo=o("wavlm"),cFo=o(" \u2014 "),Iq=a("a"),mFo=o("WavLMModel"),fFo=o(" (WavLM model)"),gFo=l(),Rp=a("li"),lle=a("strong"),hFo=o("xglm"),uFo=o(" \u2014 "),qq=a("a"),pFo=o("XGLMModel"),_Fo=o(" (XGLM model)"),bFo=l(),Pp=a("li"),ile=a("strong"),vFo=o("xlm"),FFo=o(" \u2014 "),Nq=a("a"),TFo=o("XLMModel"),MFo=o(" (XLM model)"),EFo=l(),Bp=a("li"),dle=a("strong"),CFo=o("xlm-prophetnet"),wFo=o(" \u2014 "),jq=a("a"),AFo=o("XLMProphetNetModel"),yFo=o(" (XLMProphetNet model)"),LFo=l(),Ip=a("li"),cle=a("strong"),xFo=o("xlm-roberta"),$Fo=o(" \u2014 "),Dq=a("a"),kFo=o("XLMRobertaModel"),SFo=o(" (XLM-RoBERTa model)"),RFo=l(),qp=a("li"),mle=a("strong"),PFo=o("xlm-roberta-xl"),BFo=o(" \u2014 "),Gq=a("a"),IFo=o("XLMRobertaXLModel"),qFo=o(" (XLM-RoBERTa-XL model)"),NFo=l(),Np=a("li"),fle=a("strong"),jFo=o("xlnet"),DFo=o(" \u2014 "),Oq=a("a"),GFo=o("XLNetModel"),OFo=o(" (XLNet model)"),VFo=l(),jp=a("li"),gle=a("strong"),XFo=o("yolos"),zFo=o(" \u2014 "),Vq=a("a"),WFo=o("YolosModel"),QFo=o(" (YOLOS model)"),HFo=l(),Dp=a("li"),hle=a("strong"),UFo=o("yoso"),JFo=o(" \u2014 "),Xq=a("a"),YFo=o("YosoModel"),KFo=o(" (YOSO model)"),ZFo=l(),Gp=a("p"),e1o=o("The model is set in evaluation mode by default using "),ule=a("code"),o1o=o("model.eval()"),r1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ple=a("code"),t1o=o("model.train()"),a1o=l(),F(Op.$$.fragment),DIe=l(),yi=a("h2"),Vp=a("a"),_le=a("span"),F(Ny.$$.fragment),n1o=l(),ble=a("span"),s1o=o("AutoModelForPreTraining"),GIe=l(),xo=a("div"),F(jy.$$.fragment),l1o=l(),Li=a("p"),i1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zq=a("a"),d1o=o("from_pretrained()"),c1o=o(" class method or the "),Wq=a("a"),m1o=o("from_config()"),f1o=o(` class
method.`),g1o=l(),Dy=a("p"),h1o=o("This class cannot be instantiated directly using "),vle=a("code"),u1o=o("__init__()"),p1o=o(" (throws an error)."),_1o=l(),at=a("div"),F(Gy.$$.fragment),b1o=l(),Fle=a("p"),v1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),F1o=l(),xi=a("p"),T1o=o(`Note:
Loading a model from its configuration file does `),Tle=a("strong"),M1o=o("not"),E1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=a("a"),C1o=o("from_pretrained()"),w1o=o(" to load the model weights."),A1o=l(),F(Xp.$$.fragment),y1o=l(),Ye=a("div"),F(Oy.$$.fragment),L1o=l(),Mle=a("p"),x1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$1o=l(),xa=a("p"),k1o=o("The model class to instantiate is selected based on the "),Ele=a("code"),S1o=o("model_type"),R1o=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),P1o=o("pretrained_model_name_or_path"),B1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),I1o=o("pretrained_model_name_or_path"),q1o=o(":"),N1o=l(),G=a("ul"),zp=a("li"),Ale=a("strong"),j1o=o("albert"),D1o=o(" \u2014 "),Hq=a("a"),G1o=o("AlbertForPreTraining"),O1o=o(" (ALBERT model)"),V1o=l(),Wp=a("li"),yle=a("strong"),X1o=o("bart"),z1o=o(" \u2014 "),Uq=a("a"),W1o=o("BartForConditionalGeneration"),Q1o=o(" (BART model)"),H1o=l(),Qp=a("li"),Lle=a("strong"),U1o=o("bert"),J1o=o(" \u2014 "),Jq=a("a"),Y1o=o("BertForPreTraining"),K1o=o(" (BERT model)"),Z1o=l(),Hp=a("li"),xle=a("strong"),eTo=o("big_bird"),oTo=o(" \u2014 "),Yq=a("a"),rTo=o("BigBirdForPreTraining"),tTo=o(" (BigBird model)"),aTo=l(),Up=a("li"),$le=a("strong"),nTo=o("camembert"),sTo=o(" \u2014 "),Kq=a("a"),lTo=o("CamembertForMaskedLM"),iTo=o(" (CamemBERT model)"),dTo=l(),Jp=a("li"),kle=a("strong"),cTo=o("ctrl"),mTo=o(" \u2014 "),Zq=a("a"),fTo=o("CTRLLMHeadModel"),gTo=o(" (CTRL model)"),hTo=l(),Yp=a("li"),Sle=a("strong"),uTo=o("data2vec-text"),pTo=o(" \u2014 "),eN=a("a"),_To=o("Data2VecTextForMaskedLM"),bTo=o(" (Data2VecText model)"),vTo=l(),Kp=a("li"),Rle=a("strong"),FTo=o("deberta"),TTo=o(" \u2014 "),oN=a("a"),MTo=o("DebertaForMaskedLM"),ETo=o(" (DeBERTa model)"),CTo=l(),Zp=a("li"),Ple=a("strong"),wTo=o("deberta-v2"),ATo=o(" \u2014 "),rN=a("a"),yTo=o("DebertaV2ForMaskedLM"),LTo=o(" (DeBERTa-v2 model)"),xTo=l(),e_=a("li"),Ble=a("strong"),$To=o("distilbert"),kTo=o(" \u2014 "),tN=a("a"),STo=o("DistilBertForMaskedLM"),RTo=o(" (DistilBERT model)"),PTo=l(),o_=a("li"),Ile=a("strong"),BTo=o("electra"),ITo=o(" \u2014 "),aN=a("a"),qTo=o("ElectraForPreTraining"),NTo=o(" (ELECTRA model)"),jTo=l(),r_=a("li"),qle=a("strong"),DTo=o("flaubert"),GTo=o(" \u2014 "),nN=a("a"),OTo=o("FlaubertWithLMHeadModel"),VTo=o(" (FlauBERT model)"),XTo=l(),t_=a("li"),Nle=a("strong"),zTo=o("flava"),WTo=o(" \u2014 "),sN=a("a"),QTo=o("FlavaForPreTraining"),HTo=o(" (Flava model)"),UTo=l(),a_=a("li"),jle=a("strong"),JTo=o("fnet"),YTo=o(" \u2014 "),lN=a("a"),KTo=o("FNetForPreTraining"),ZTo=o(" (FNet model)"),eMo=l(),n_=a("li"),Dle=a("strong"),oMo=o("fsmt"),rMo=o(" \u2014 "),iN=a("a"),tMo=o("FSMTForConditionalGeneration"),aMo=o(" (FairSeq Machine-Translation model)"),nMo=l(),s_=a("li"),Gle=a("strong"),sMo=o("funnel"),lMo=o(" \u2014 "),dN=a("a"),iMo=o("FunnelForPreTraining"),dMo=o(" (Funnel Transformer model)"),cMo=l(),l_=a("li"),Ole=a("strong"),mMo=o("gpt2"),fMo=o(" \u2014 "),cN=a("a"),gMo=o("GPT2LMHeadModel"),hMo=o(" (OpenAI GPT-2 model)"),uMo=l(),i_=a("li"),Vle=a("strong"),pMo=o("ibert"),_Mo=o(" \u2014 "),mN=a("a"),bMo=o("IBertForMaskedLM"),vMo=o(" (I-BERT model)"),FMo=l(),d_=a("li"),Xle=a("strong"),TMo=o("layoutlm"),MMo=o(" \u2014 "),fN=a("a"),EMo=o("LayoutLMForMaskedLM"),CMo=o(" (LayoutLM model)"),wMo=l(),c_=a("li"),zle=a("strong"),AMo=o("longformer"),yMo=o(" \u2014 "),gN=a("a"),LMo=o("LongformerForMaskedLM"),xMo=o(" (Longformer model)"),$Mo=l(),m_=a("li"),Wle=a("strong"),kMo=o("lxmert"),SMo=o(" \u2014 "),hN=a("a"),RMo=o("LxmertForPreTraining"),PMo=o(" (LXMERT model)"),BMo=l(),f_=a("li"),Qle=a("strong"),IMo=o("megatron-bert"),qMo=o(" \u2014 "),uN=a("a"),NMo=o("MegatronBertForPreTraining"),jMo=o(" (MegatronBert model)"),DMo=l(),g_=a("li"),Hle=a("strong"),GMo=o("mobilebert"),OMo=o(" \u2014 "),pN=a("a"),VMo=o("MobileBertForPreTraining"),XMo=o(" (MobileBERT model)"),zMo=l(),h_=a("li"),Ule=a("strong"),WMo=o("mpnet"),QMo=o(" \u2014 "),_N=a("a"),HMo=o("MPNetForMaskedLM"),UMo=o(" (MPNet model)"),JMo=l(),u_=a("li"),Jle=a("strong"),YMo=o("openai-gpt"),KMo=o(" \u2014 "),bN=a("a"),ZMo=o("OpenAIGPTLMHeadModel"),e4o=o(" (OpenAI GPT model)"),o4o=l(),p_=a("li"),Yle=a("strong"),r4o=o("retribert"),t4o=o(" \u2014 "),vN=a("a"),a4o=o("RetriBertModel"),n4o=o(" (RetriBERT model)"),s4o=l(),__=a("li"),Kle=a("strong"),l4o=o("roberta"),i4o=o(" \u2014 "),FN=a("a"),d4o=o("RobertaForMaskedLM"),c4o=o(" (RoBERTa model)"),m4o=l(),b_=a("li"),Zle=a("strong"),f4o=o("squeezebert"),g4o=o(" \u2014 "),TN=a("a"),h4o=o("SqueezeBertForMaskedLM"),u4o=o(" (SqueezeBERT model)"),p4o=l(),v_=a("li"),eie=a("strong"),_4o=o("t5"),b4o=o(" \u2014 "),MN=a("a"),v4o=o("T5ForConditionalGeneration"),F4o=o(" (T5 model)"),T4o=l(),F_=a("li"),oie=a("strong"),M4o=o("tapas"),E4o=o(" \u2014 "),EN=a("a"),C4o=o("TapasForMaskedLM"),w4o=o(" (TAPAS model)"),A4o=l(),T_=a("li"),rie=a("strong"),y4o=o("transfo-xl"),L4o=o(" \u2014 "),CN=a("a"),x4o=o("TransfoXLLMHeadModel"),$4o=o(" (Transformer-XL model)"),k4o=l(),M_=a("li"),tie=a("strong"),S4o=o("unispeech"),R4o=o(" \u2014 "),wN=a("a"),P4o=o("UniSpeechForPreTraining"),B4o=o(" (UniSpeech model)"),I4o=l(),E_=a("li"),aie=a("strong"),q4o=o("unispeech-sat"),N4o=o(" \u2014 "),AN=a("a"),j4o=o("UniSpeechSatForPreTraining"),D4o=o(" (UniSpeechSat model)"),G4o=l(),C_=a("li"),nie=a("strong"),O4o=o("visual_bert"),V4o=o(" \u2014 "),yN=a("a"),X4o=o("VisualBertForPreTraining"),z4o=o(" (VisualBert model)"),W4o=l(),w_=a("li"),sie=a("strong"),Q4o=o("vit_mae"),H4o=o(" \u2014 "),LN=a("a"),U4o=o("ViTMAEForPreTraining"),J4o=o(" (ViTMAE model)"),Y4o=l(),A_=a("li"),lie=a("strong"),K4o=o("wav2vec2"),Z4o=o(" \u2014 "),xN=a("a"),eEo=o("Wav2Vec2ForPreTraining"),oEo=o(" (Wav2Vec2 model)"),rEo=l(),y_=a("li"),iie=a("strong"),tEo=o("wav2vec2-conformer"),aEo=o(" \u2014 "),$N=a("a"),nEo=o("Wav2Vec2ConformerForPreTraining"),sEo=o(" (Wav2Vec2-Conformer model)"),lEo=l(),L_=a("li"),die=a("strong"),iEo=o("xlm"),dEo=o(" \u2014 "),kN=a("a"),cEo=o("XLMWithLMHeadModel"),mEo=o(" (XLM model)"),fEo=l(),x_=a("li"),cie=a("strong"),gEo=o("xlm-roberta"),hEo=o(" \u2014 "),SN=a("a"),uEo=o("XLMRobertaForMaskedLM"),pEo=o(" (XLM-RoBERTa model)"),_Eo=l(),$_=a("li"),mie=a("strong"),bEo=o("xlm-roberta-xl"),vEo=o(" \u2014 "),RN=a("a"),FEo=o("XLMRobertaXLForMaskedLM"),TEo=o(" (XLM-RoBERTa-XL model)"),MEo=l(),k_=a("li"),fie=a("strong"),EEo=o("xlnet"),CEo=o(" \u2014 "),PN=a("a"),wEo=o("XLNetLMHeadModel"),AEo=o(" (XLNet model)"),yEo=l(),S_=a("p"),LEo=o("The model is set in evaluation mode by default using "),gie=a("code"),xEo=o("model.eval()"),$Eo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),kEo=o("model.train()"),SEo=l(),F(R_.$$.fragment),OIe=l(),$i=a("h2"),P_=a("a"),uie=a("span"),F(Vy.$$.fragment),REo=l(),pie=a("span"),PEo=o("AutoModelForCausalLM"),VIe=l(),$o=a("div"),F(Xy.$$.fragment),BEo=l(),ki=a("p"),IEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BN=a("a"),qEo=o("from_pretrained()"),NEo=o(" class method or the "),IN=a("a"),jEo=o("from_config()"),DEo=o(` class
method.`),GEo=l(),zy=a("p"),OEo=o("This class cannot be instantiated directly using "),_ie=a("code"),VEo=o("__init__()"),XEo=o(" (throws an error)."),zEo=l(),nt=a("div"),F(Wy.$$.fragment),WEo=l(),bie=a("p"),QEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HEo=l(),Si=a("p"),UEo=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),JEo=o("not"),YEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=a("a"),KEo=o("from_pretrained()"),ZEo=o(" to load the model weights."),eCo=l(),F(B_.$$.fragment),oCo=l(),Ke=a("div"),F(Qy.$$.fragment),rCo=l(),Fie=a("p"),tCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aCo=l(),$a=a("p"),nCo=o("The model class to instantiate is selected based on the "),Tie=a("code"),sCo=o("model_type"),lCo=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),iCo=o("pretrained_model_name_or_path"),dCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),cCo=o("pretrained_model_name_or_path"),mCo=o(":"),fCo=l(),z=a("ul"),I_=a("li"),Cie=a("strong"),gCo=o("bart"),hCo=o(" \u2014 "),NN=a("a"),uCo=o("BartForCausalLM"),pCo=o(" (BART model)"),_Co=l(),q_=a("li"),wie=a("strong"),bCo=o("bert"),vCo=o(" \u2014 "),jN=a("a"),FCo=o("BertLMHeadModel"),TCo=o(" (BERT model)"),MCo=l(),N_=a("li"),Aie=a("strong"),ECo=o("bert-generation"),CCo=o(" \u2014 "),DN=a("a"),wCo=o("BertGenerationDecoder"),ACo=o(" (Bert Generation model)"),yCo=l(),j_=a("li"),yie=a("strong"),LCo=o("big_bird"),xCo=o(" \u2014 "),GN=a("a"),$Co=o("BigBirdForCausalLM"),kCo=o(" (BigBird model)"),SCo=l(),D_=a("li"),Lie=a("strong"),RCo=o("bigbird_pegasus"),PCo=o(" \u2014 "),ON=a("a"),BCo=o("BigBirdPegasusForCausalLM"),ICo=o(" (BigBirdPegasus model)"),qCo=l(),G_=a("li"),xie=a("strong"),NCo=o("blenderbot"),jCo=o(" \u2014 "),VN=a("a"),DCo=o("BlenderbotForCausalLM"),GCo=o(" (Blenderbot model)"),OCo=l(),O_=a("li"),$ie=a("strong"),VCo=o("blenderbot-small"),XCo=o(" \u2014 "),XN=a("a"),zCo=o("BlenderbotSmallForCausalLM"),WCo=o(" (BlenderbotSmall model)"),QCo=l(),V_=a("li"),kie=a("strong"),HCo=o("camembert"),UCo=o(" \u2014 "),zN=a("a"),JCo=o("CamembertForCausalLM"),YCo=o(" (CamemBERT model)"),KCo=l(),X_=a("li"),Sie=a("strong"),ZCo=o("ctrl"),e5o=o(" \u2014 "),WN=a("a"),o5o=o("CTRLLMHeadModel"),r5o=o(" (CTRL model)"),t5o=l(),z_=a("li"),Rie=a("strong"),a5o=o("data2vec-text"),n5o=o(" \u2014 "),QN=a("a"),s5o=o("Data2VecTextForCausalLM"),l5o=o(" (Data2VecText model)"),i5o=l(),W_=a("li"),Pie=a("strong"),d5o=o("electra"),c5o=o(" \u2014 "),HN=a("a"),m5o=o("ElectraForCausalLM"),f5o=o(" (ELECTRA model)"),g5o=l(),Q_=a("li"),Bie=a("strong"),h5o=o("gpt2"),u5o=o(" \u2014 "),UN=a("a"),p5o=o("GPT2LMHeadModel"),_5o=o(" (OpenAI GPT-2 model)"),b5o=l(),H_=a("li"),Iie=a("strong"),v5o=o("gpt_neo"),F5o=o(" \u2014 "),JN=a("a"),T5o=o("GPTNeoForCausalLM"),M5o=o(" (GPT Neo model)"),E5o=l(),U_=a("li"),qie=a("strong"),C5o=o("gptj"),w5o=o(" \u2014 "),YN=a("a"),A5o=o("GPTJForCausalLM"),y5o=o(" (GPT-J model)"),L5o=l(),J_=a("li"),Nie=a("strong"),x5o=o("marian"),$5o=o(" \u2014 "),KN=a("a"),k5o=o("MarianForCausalLM"),S5o=o(" (Marian model)"),R5o=l(),Y_=a("li"),jie=a("strong"),P5o=o("mbart"),B5o=o(" \u2014 "),ZN=a("a"),I5o=o("MBartForCausalLM"),q5o=o(" (mBART model)"),N5o=l(),K_=a("li"),Die=a("strong"),j5o=o("megatron-bert"),D5o=o(" \u2014 "),ej=a("a"),G5o=o("MegatronBertForCausalLM"),O5o=o(" (MegatronBert model)"),V5o=l(),Z_=a("li"),Gie=a("strong"),X5o=o("openai-gpt"),z5o=o(" \u2014 "),oj=a("a"),W5o=o("OpenAIGPTLMHeadModel"),Q5o=o(" (OpenAI GPT model)"),H5o=l(),eb=a("li"),Oie=a("strong"),U5o=o("opt"),J5o=o(" \u2014 "),rj=a("a"),Y5o=o("OPTForCausalLM"),K5o=o(" (OPT model)"),Z5o=l(),ob=a("li"),Vie=a("strong"),e3o=o("pegasus"),o3o=o(" \u2014 "),tj=a("a"),r3o=o("PegasusForCausalLM"),t3o=o(" (Pegasus model)"),a3o=l(),rb=a("li"),Xie=a("strong"),n3o=o("plbart"),s3o=o(" \u2014 "),aj=a("a"),l3o=o("PLBartForCausalLM"),i3o=o(" (PLBart model)"),d3o=l(),tb=a("li"),zie=a("strong"),c3o=o("prophetnet"),m3o=o(" \u2014 "),nj=a("a"),f3o=o("ProphetNetForCausalLM"),g3o=o(" (ProphetNet model)"),h3o=l(),ab=a("li"),Wie=a("strong"),u3o=o("qdqbert"),p3o=o(" \u2014 "),sj=a("a"),_3o=o("QDQBertLMHeadModel"),b3o=o(" (QDQBert model)"),v3o=l(),nb=a("li"),Qie=a("strong"),F3o=o("reformer"),T3o=o(" \u2014 "),lj=a("a"),M3o=o("ReformerModelWithLMHead"),E3o=o(" (Reformer model)"),C3o=l(),sb=a("li"),Hie=a("strong"),w3o=o("rembert"),A3o=o(" \u2014 "),ij=a("a"),y3o=o("RemBertForCausalLM"),L3o=o(" (RemBERT model)"),x3o=l(),lb=a("li"),Uie=a("strong"),$3o=o("roberta"),k3o=o(" \u2014 "),dj=a("a"),S3o=o("RobertaForCausalLM"),R3o=o(" (RoBERTa model)"),P3o=l(),ib=a("li"),Jie=a("strong"),B3o=o("roformer"),I3o=o(" \u2014 "),cj=a("a"),q3o=o("RoFormerForCausalLM"),N3o=o(" (RoFormer model)"),j3o=l(),db=a("li"),Yie=a("strong"),D3o=o("speech_to_text_2"),G3o=o(" \u2014 "),mj=a("a"),O3o=o("Speech2Text2ForCausalLM"),V3o=o(" (Speech2Text2 model)"),X3o=l(),cb=a("li"),Kie=a("strong"),z3o=o("transfo-xl"),W3o=o(" \u2014 "),fj=a("a"),Q3o=o("TransfoXLLMHeadModel"),H3o=o(" (Transformer-XL model)"),U3o=l(),mb=a("li"),Zie=a("strong"),J3o=o("trocr"),Y3o=o(" \u2014 "),gj=a("a"),K3o=o("TrOCRForCausalLM"),Z3o=o(" (TrOCR model)"),ewo=l(),fb=a("li"),ede=a("strong"),owo=o("xglm"),rwo=o(" \u2014 "),hj=a("a"),two=o("XGLMForCausalLM"),awo=o(" (XGLM model)"),nwo=l(),gb=a("li"),ode=a("strong"),swo=o("xlm"),lwo=o(" \u2014 "),uj=a("a"),iwo=o("XLMWithLMHeadModel"),dwo=o(" (XLM model)"),cwo=l(),hb=a("li"),rde=a("strong"),mwo=o("xlm-prophetnet"),fwo=o(" \u2014 "),pj=a("a"),gwo=o("XLMProphetNetForCausalLM"),hwo=o(" (XLMProphetNet model)"),uwo=l(),ub=a("li"),tde=a("strong"),pwo=o("xlm-roberta"),_wo=o(" \u2014 "),_j=a("a"),bwo=o("XLMRobertaForCausalLM"),vwo=o(" (XLM-RoBERTa model)"),Fwo=l(),pb=a("li"),ade=a("strong"),Two=o("xlm-roberta-xl"),Mwo=o(" \u2014 "),bj=a("a"),Ewo=o("XLMRobertaXLForCausalLM"),Cwo=o(" (XLM-RoBERTa-XL model)"),wwo=l(),_b=a("li"),nde=a("strong"),Awo=o("xlnet"),ywo=o(" \u2014 "),vj=a("a"),Lwo=o("XLNetLMHeadModel"),xwo=o(" (XLNet model)"),$wo=l(),bb=a("p"),kwo=o("The model is set in evaluation mode by default using "),sde=a("code"),Swo=o("model.eval()"),Rwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=a("code"),Pwo=o("model.train()"),Bwo=l(),F(vb.$$.fragment),XIe=l(),Ri=a("h2"),Fb=a("a"),ide=a("span"),F(Hy.$$.fragment),Iwo=l(),dde=a("span"),qwo=o("AutoModelForMaskedLM"),zIe=l(),ko=a("div"),F(Uy.$$.fragment),Nwo=l(),Pi=a("p"),jwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fj=a("a"),Dwo=o("from_pretrained()"),Gwo=o(" class method or the "),Tj=a("a"),Owo=o("from_config()"),Vwo=o(` class
method.`),Xwo=l(),Jy=a("p"),zwo=o("This class cannot be instantiated directly using "),cde=a("code"),Wwo=o("__init__()"),Qwo=o(" (throws an error)."),Hwo=l(),st=a("div"),F(Yy.$$.fragment),Uwo=l(),mde=a("p"),Jwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ywo=l(),Bi=a("p"),Kwo=o(`Note:
Loading a model from its configuration file does `),fde=a("strong"),Zwo=o("not"),eAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),oAo=o("from_pretrained()"),rAo=o(" to load the model weights."),tAo=l(),F(Tb.$$.fragment),aAo=l(),Ze=a("div"),F(Ky.$$.fragment),nAo=l(),gde=a("p"),sAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lAo=l(),ka=a("p"),iAo=o("The model class to instantiate is selected based on the "),hde=a("code"),dAo=o("model_type"),cAo=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),mAo=o("pretrained_model_name_or_path"),fAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),gAo=o("pretrained_model_name_or_path"),hAo=o(":"),uAo=l(),W=a("ul"),Mb=a("li"),_de=a("strong"),pAo=o("albert"),_Ao=o(" \u2014 "),Ej=a("a"),bAo=o("AlbertForMaskedLM"),vAo=o(" (ALBERT model)"),FAo=l(),Eb=a("li"),bde=a("strong"),TAo=o("bart"),MAo=o(" \u2014 "),Cj=a("a"),EAo=o("BartForConditionalGeneration"),CAo=o(" (BART model)"),wAo=l(),Cb=a("li"),vde=a("strong"),AAo=o("bert"),yAo=o(" \u2014 "),wj=a("a"),LAo=o("BertForMaskedLM"),xAo=o(" (BERT model)"),$Ao=l(),wb=a("li"),Fde=a("strong"),kAo=o("big_bird"),SAo=o(" \u2014 "),Aj=a("a"),RAo=o("BigBirdForMaskedLM"),PAo=o(" (BigBird model)"),BAo=l(),Ab=a("li"),Tde=a("strong"),IAo=o("camembert"),qAo=o(" \u2014 "),yj=a("a"),NAo=o("CamembertForMaskedLM"),jAo=o(" (CamemBERT model)"),DAo=l(),yb=a("li"),Mde=a("strong"),GAo=o("convbert"),OAo=o(" \u2014 "),Lj=a("a"),VAo=o("ConvBertForMaskedLM"),XAo=o(" (ConvBERT model)"),zAo=l(),Lb=a("li"),Ede=a("strong"),WAo=o("data2vec-text"),QAo=o(" \u2014 "),xj=a("a"),HAo=o("Data2VecTextForMaskedLM"),UAo=o(" (Data2VecText model)"),JAo=l(),xb=a("li"),Cde=a("strong"),YAo=o("deberta"),KAo=o(" \u2014 "),$j=a("a"),ZAo=o("DebertaForMaskedLM"),e6o=o(" (DeBERTa model)"),o6o=l(),$b=a("li"),wde=a("strong"),r6o=o("deberta-v2"),t6o=o(" \u2014 "),kj=a("a"),a6o=o("DebertaV2ForMaskedLM"),n6o=o(" (DeBERTa-v2 model)"),s6o=l(),kb=a("li"),Ade=a("strong"),l6o=o("distilbert"),i6o=o(" \u2014 "),Sj=a("a"),d6o=o("DistilBertForMaskedLM"),c6o=o(" (DistilBERT model)"),m6o=l(),Sb=a("li"),yde=a("strong"),f6o=o("electra"),g6o=o(" \u2014 "),Rj=a("a"),h6o=o("ElectraForMaskedLM"),u6o=o(" (ELECTRA model)"),p6o=l(),Rb=a("li"),Lde=a("strong"),_6o=o("flaubert"),b6o=o(" \u2014 "),Pj=a("a"),v6o=o("FlaubertWithLMHeadModel"),F6o=o(" (FlauBERT model)"),T6o=l(),Pb=a("li"),xde=a("strong"),M6o=o("fnet"),E6o=o(" \u2014 "),Bj=a("a"),C6o=o("FNetForMaskedLM"),w6o=o(" (FNet model)"),A6o=l(),Bb=a("li"),$de=a("strong"),y6o=o("funnel"),L6o=o(" \u2014 "),Ij=a("a"),x6o=o("FunnelForMaskedLM"),$6o=o(" (Funnel Transformer model)"),k6o=l(),Ib=a("li"),kde=a("strong"),S6o=o("ibert"),R6o=o(" \u2014 "),qj=a("a"),P6o=o("IBertForMaskedLM"),B6o=o(" (I-BERT model)"),I6o=l(),qb=a("li"),Sde=a("strong"),q6o=o("layoutlm"),N6o=o(" \u2014 "),Nj=a("a"),j6o=o("LayoutLMForMaskedLM"),D6o=o(" (LayoutLM model)"),G6o=l(),Nb=a("li"),Rde=a("strong"),O6o=o("longformer"),V6o=o(" \u2014 "),jj=a("a"),X6o=o("LongformerForMaskedLM"),z6o=o(" (Longformer model)"),W6o=l(),jb=a("li"),Pde=a("strong"),Q6o=o("mbart"),H6o=o(" \u2014 "),Dj=a("a"),U6o=o("MBartForConditionalGeneration"),J6o=o(" (mBART model)"),Y6o=l(),Db=a("li"),Bde=a("strong"),K6o=o("megatron-bert"),Z6o=o(" \u2014 "),Gj=a("a"),e0o=o("MegatronBertForMaskedLM"),o0o=o(" (MegatronBert model)"),r0o=l(),Gb=a("li"),Ide=a("strong"),t0o=o("mobilebert"),a0o=o(" \u2014 "),Oj=a("a"),n0o=o("MobileBertForMaskedLM"),s0o=o(" (MobileBERT model)"),l0o=l(),Ob=a("li"),qde=a("strong"),i0o=o("mpnet"),d0o=o(" \u2014 "),Vj=a("a"),c0o=o("MPNetForMaskedLM"),m0o=o(" (MPNet model)"),f0o=l(),Vb=a("li"),Nde=a("strong"),g0o=o("nystromformer"),h0o=o(" \u2014 "),Xj=a("a"),u0o=o("NystromformerForMaskedLM"),p0o=o(" (Nystromformer model)"),_0o=l(),Xb=a("li"),jde=a("strong"),b0o=o("perceiver"),v0o=o(" \u2014 "),zj=a("a"),F0o=o("PerceiverForMaskedLM"),T0o=o(" (Perceiver model)"),M0o=l(),zb=a("li"),Dde=a("strong"),E0o=o("qdqbert"),C0o=o(" \u2014 "),Wj=a("a"),w0o=o("QDQBertForMaskedLM"),A0o=o(" (QDQBert model)"),y0o=l(),Wb=a("li"),Gde=a("strong"),L0o=o("reformer"),x0o=o(" \u2014 "),Qj=a("a"),$0o=o("ReformerForMaskedLM"),k0o=o(" (Reformer model)"),S0o=l(),Qb=a("li"),Ode=a("strong"),R0o=o("rembert"),P0o=o(" \u2014 "),Hj=a("a"),B0o=o("RemBertForMaskedLM"),I0o=o(" (RemBERT model)"),q0o=l(),Hb=a("li"),Vde=a("strong"),N0o=o("roberta"),j0o=o(" \u2014 "),Uj=a("a"),D0o=o("RobertaForMaskedLM"),G0o=o(" (RoBERTa model)"),O0o=l(),Ub=a("li"),Xde=a("strong"),V0o=o("roformer"),X0o=o(" \u2014 "),Jj=a("a"),z0o=o("RoFormerForMaskedLM"),W0o=o(" (RoFormer model)"),Q0o=l(),Jb=a("li"),zde=a("strong"),H0o=o("squeezebert"),U0o=o(" \u2014 "),Yj=a("a"),J0o=o("SqueezeBertForMaskedLM"),Y0o=o(" (SqueezeBERT model)"),K0o=l(),Yb=a("li"),Wde=a("strong"),Z0o=o("tapas"),eyo=o(" \u2014 "),Kj=a("a"),oyo=o("TapasForMaskedLM"),ryo=o(" (TAPAS model)"),tyo=l(),Kb=a("li"),Qde=a("strong"),ayo=o("wav2vec2"),nyo=o(" \u2014 "),Hde=a("code"),syo=o("Wav2Vec2ForMaskedLM"),lyo=o(" (Wav2Vec2 model)"),iyo=l(),Zb=a("li"),Ude=a("strong"),dyo=o("xlm"),cyo=o(" \u2014 "),Zj=a("a"),myo=o("XLMWithLMHeadModel"),fyo=o(" (XLM model)"),gyo=l(),e2=a("li"),Jde=a("strong"),hyo=o("xlm-roberta"),uyo=o(" \u2014 "),eD=a("a"),pyo=o("XLMRobertaForMaskedLM"),_yo=o(" (XLM-RoBERTa model)"),byo=l(),o2=a("li"),Yde=a("strong"),vyo=o("xlm-roberta-xl"),Fyo=o(" \u2014 "),oD=a("a"),Tyo=o("XLMRobertaXLForMaskedLM"),Myo=o(" (XLM-RoBERTa-XL model)"),Eyo=l(),r2=a("li"),Kde=a("strong"),Cyo=o("yoso"),wyo=o(" \u2014 "),rD=a("a"),Ayo=o("YosoForMaskedLM"),yyo=o(" (YOSO model)"),Lyo=l(),t2=a("p"),xyo=o("The model is set in evaluation mode by default using "),Zde=a("code"),$yo=o("model.eval()"),kyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),Syo=o("model.train()"),Ryo=l(),F(a2.$$.fragment),WIe=l(),Ii=a("h2"),n2=a("a"),oce=a("span"),F(Zy.$$.fragment),Pyo=l(),rce=a("span"),Byo=o("AutoModelForSeq2SeqLM"),QIe=l(),So=a("div"),F(eL.$$.fragment),Iyo=l(),qi=a("p"),qyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tD=a("a"),Nyo=o("from_pretrained()"),jyo=o(" class method or the "),aD=a("a"),Dyo=o("from_config()"),Gyo=o(` class
method.`),Oyo=l(),oL=a("p"),Vyo=o("This class cannot be instantiated directly using "),tce=a("code"),Xyo=o("__init__()"),zyo=o(" (throws an error)."),Wyo=l(),lt=a("div"),F(rL.$$.fragment),Qyo=l(),ace=a("p"),Hyo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Uyo=l(),Ni=a("p"),Jyo=o(`Note:
Loading a model from its configuration file does `),nce=a("strong"),Yyo=o("not"),Kyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=a("a"),Zyo=o("from_pretrained()"),eLo=o(" to load the model weights."),oLo=l(),F(s2.$$.fragment),rLo=l(),eo=a("div"),F(tL.$$.fragment),tLo=l(),sce=a("p"),aLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nLo=l(),Sa=a("p"),sLo=o("The model class to instantiate is selected based on the "),lce=a("code"),lLo=o("model_type"),iLo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),dLo=o("pretrained_model_name_or_path"),cLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),mLo=o("pretrained_model_name_or_path"),fLo=o(":"),gLo=l(),pe=a("ul"),l2=a("li"),cce=a("strong"),hLo=o("bart"),uLo=o(" \u2014 "),sD=a("a"),pLo=o("BartForConditionalGeneration"),_Lo=o(" (BART model)"),bLo=l(),i2=a("li"),mce=a("strong"),vLo=o("bigbird_pegasus"),FLo=o(" \u2014 "),lD=a("a"),TLo=o("BigBirdPegasusForConditionalGeneration"),MLo=o(" (BigBirdPegasus model)"),ELo=l(),d2=a("li"),fce=a("strong"),CLo=o("blenderbot"),wLo=o(" \u2014 "),iD=a("a"),ALo=o("BlenderbotForConditionalGeneration"),yLo=o(" (Blenderbot model)"),LLo=l(),c2=a("li"),gce=a("strong"),xLo=o("blenderbot-small"),$Lo=o(" \u2014 "),dD=a("a"),kLo=o("BlenderbotSmallForConditionalGeneration"),SLo=o(" (BlenderbotSmall model)"),RLo=l(),m2=a("li"),hce=a("strong"),PLo=o("encoder-decoder"),BLo=o(" \u2014 "),cD=a("a"),ILo=o("EncoderDecoderModel"),qLo=o(" (Encoder decoder model)"),NLo=l(),f2=a("li"),uce=a("strong"),jLo=o("fsmt"),DLo=o(" \u2014 "),mD=a("a"),GLo=o("FSMTForConditionalGeneration"),OLo=o(" (FairSeq Machine-Translation model)"),VLo=l(),g2=a("li"),pce=a("strong"),XLo=o("led"),zLo=o(" \u2014 "),fD=a("a"),WLo=o("LEDForConditionalGeneration"),QLo=o(" (LED model)"),HLo=l(),h2=a("li"),_ce=a("strong"),ULo=o("m2m_100"),JLo=o(" \u2014 "),gD=a("a"),YLo=o("M2M100ForConditionalGeneration"),KLo=o(" (M2M100 model)"),ZLo=l(),u2=a("li"),bce=a("strong"),e8o=o("marian"),o8o=o(" \u2014 "),hD=a("a"),r8o=o("MarianMTModel"),t8o=o(" (Marian model)"),a8o=l(),p2=a("li"),vce=a("strong"),n8o=o("mbart"),s8o=o(" \u2014 "),uD=a("a"),l8o=o("MBartForConditionalGeneration"),i8o=o(" (mBART model)"),d8o=l(),_2=a("li"),Fce=a("strong"),c8o=o("mt5"),m8o=o(" \u2014 "),pD=a("a"),f8o=o("MT5ForConditionalGeneration"),g8o=o(" (mT5 model)"),h8o=l(),b2=a("li"),Tce=a("strong"),u8o=o("pegasus"),p8o=o(" \u2014 "),_D=a("a"),_8o=o("PegasusForConditionalGeneration"),b8o=o(" (Pegasus model)"),v8o=l(),v2=a("li"),Mce=a("strong"),F8o=o("plbart"),T8o=o(" \u2014 "),bD=a("a"),M8o=o("PLBartForConditionalGeneration"),E8o=o(" (PLBart model)"),C8o=l(),F2=a("li"),Ece=a("strong"),w8o=o("prophetnet"),A8o=o(" \u2014 "),vD=a("a"),y8o=o("ProphetNetForConditionalGeneration"),L8o=o(" (ProphetNet model)"),x8o=l(),T2=a("li"),Cce=a("strong"),$8o=o("t5"),k8o=o(" \u2014 "),FD=a("a"),S8o=o("T5ForConditionalGeneration"),R8o=o(" (T5 model)"),P8o=l(),M2=a("li"),wce=a("strong"),B8o=o("xlm-prophetnet"),I8o=o(" \u2014 "),TD=a("a"),q8o=o("XLMProphetNetForConditionalGeneration"),N8o=o(" (XLMProphetNet model)"),j8o=l(),E2=a("p"),D8o=o("The model is set in evaluation mode by default using "),Ace=a("code"),G8o=o("model.eval()"),O8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=a("code"),V8o=o("model.train()"),X8o=l(),F(C2.$$.fragment),HIe=l(),ji=a("h2"),w2=a("a"),Lce=a("span"),F(aL.$$.fragment),z8o=l(),xce=a("span"),W8o=o("AutoModelForSequenceClassification"),UIe=l(),Ro=a("div"),F(nL.$$.fragment),Q8o=l(),Di=a("p"),H8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MD=a("a"),U8o=o("from_pretrained()"),J8o=o(" class method or the "),ED=a("a"),Y8o=o("from_config()"),K8o=o(` class
method.`),Z8o=l(),sL=a("p"),exo=o("This class cannot be instantiated directly using "),$ce=a("code"),oxo=o("__init__()"),rxo=o(" (throws an error)."),txo=l(),it=a("div"),F(lL.$$.fragment),axo=l(),kce=a("p"),nxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sxo=l(),Gi=a("p"),lxo=o(`Note:
Loading a model from its configuration file does `),Sce=a("strong"),ixo=o("not"),dxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=a("a"),cxo=o("from_pretrained()"),mxo=o(" to load the model weights."),fxo=l(),F(A2.$$.fragment),gxo=l(),oo=a("div"),F(iL.$$.fragment),hxo=l(),Rce=a("p"),uxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pxo=l(),Ra=a("p"),_xo=o("The model class to instantiate is selected based on the "),Pce=a("code"),bxo=o("model_type"),vxo=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),Fxo=o("pretrained_model_name_or_path"),Txo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),Mxo=o("pretrained_model_name_or_path"),Exo=o(":"),Cxo=l(),q=a("ul"),y2=a("li"),qce=a("strong"),wxo=o("albert"),Axo=o(" \u2014 "),wD=a("a"),yxo=o("AlbertForSequenceClassification"),Lxo=o(" (ALBERT model)"),xxo=l(),L2=a("li"),Nce=a("strong"),$xo=o("bart"),kxo=o(" \u2014 "),AD=a("a"),Sxo=o("BartForSequenceClassification"),Rxo=o(" (BART model)"),Pxo=l(),x2=a("li"),jce=a("strong"),Bxo=o("bert"),Ixo=o(" \u2014 "),yD=a("a"),qxo=o("BertForSequenceClassification"),Nxo=o(" (BERT model)"),jxo=l(),$2=a("li"),Dce=a("strong"),Dxo=o("big_bird"),Gxo=o(" \u2014 "),LD=a("a"),Oxo=o("BigBirdForSequenceClassification"),Vxo=o(" (BigBird model)"),Xxo=l(),k2=a("li"),Gce=a("strong"),zxo=o("bigbird_pegasus"),Wxo=o(" \u2014 "),xD=a("a"),Qxo=o("BigBirdPegasusForSequenceClassification"),Hxo=o(" (BigBirdPegasus model)"),Uxo=l(),S2=a("li"),Oce=a("strong"),Jxo=o("camembert"),Yxo=o(" \u2014 "),$D=a("a"),Kxo=o("CamembertForSequenceClassification"),Zxo=o(" (CamemBERT model)"),e9o=l(),R2=a("li"),Vce=a("strong"),o9o=o("canine"),r9o=o(" \u2014 "),kD=a("a"),t9o=o("CanineForSequenceClassification"),a9o=o(" (Canine model)"),n9o=l(),P2=a("li"),Xce=a("strong"),s9o=o("convbert"),l9o=o(" \u2014 "),SD=a("a"),i9o=o("ConvBertForSequenceClassification"),d9o=o(" (ConvBERT model)"),c9o=l(),B2=a("li"),zce=a("strong"),m9o=o("ctrl"),f9o=o(" \u2014 "),RD=a("a"),g9o=o("CTRLForSequenceClassification"),h9o=o(" (CTRL model)"),u9o=l(),I2=a("li"),Wce=a("strong"),p9o=o("data2vec-text"),_9o=o(" \u2014 "),PD=a("a"),b9o=o("Data2VecTextForSequenceClassification"),v9o=o(" (Data2VecText model)"),F9o=l(),q2=a("li"),Qce=a("strong"),T9o=o("deberta"),M9o=o(" \u2014 "),BD=a("a"),E9o=o("DebertaForSequenceClassification"),C9o=o(" (DeBERTa model)"),w9o=l(),N2=a("li"),Hce=a("strong"),A9o=o("deberta-v2"),y9o=o(" \u2014 "),ID=a("a"),L9o=o("DebertaV2ForSequenceClassification"),x9o=o(" (DeBERTa-v2 model)"),$9o=l(),j2=a("li"),Uce=a("strong"),k9o=o("distilbert"),S9o=o(" \u2014 "),qD=a("a"),R9o=o("DistilBertForSequenceClassification"),P9o=o(" (DistilBERT model)"),B9o=l(),D2=a("li"),Jce=a("strong"),I9o=o("electra"),q9o=o(" \u2014 "),ND=a("a"),N9o=o("ElectraForSequenceClassification"),j9o=o(" (ELECTRA model)"),D9o=l(),G2=a("li"),Yce=a("strong"),G9o=o("flaubert"),O9o=o(" \u2014 "),jD=a("a"),V9o=o("FlaubertForSequenceClassification"),X9o=o(" (FlauBERT model)"),z9o=l(),O2=a("li"),Kce=a("strong"),W9o=o("fnet"),Q9o=o(" \u2014 "),DD=a("a"),H9o=o("FNetForSequenceClassification"),U9o=o(" (FNet model)"),J9o=l(),V2=a("li"),Zce=a("strong"),Y9o=o("funnel"),K9o=o(" \u2014 "),GD=a("a"),Z9o=o("FunnelForSequenceClassification"),e7o=o(" (Funnel Transformer model)"),o7o=l(),X2=a("li"),eme=a("strong"),r7o=o("gpt2"),t7o=o(" \u2014 "),OD=a("a"),a7o=o("GPT2ForSequenceClassification"),n7o=o(" (OpenAI GPT-2 model)"),s7o=l(),z2=a("li"),ome=a("strong"),l7o=o("gpt_neo"),i7o=o(" \u2014 "),VD=a("a"),d7o=o("GPTNeoForSequenceClassification"),c7o=o(" (GPT Neo model)"),m7o=l(),W2=a("li"),rme=a("strong"),f7o=o("gptj"),g7o=o(" \u2014 "),XD=a("a"),h7o=o("GPTJForSequenceClassification"),u7o=o(" (GPT-J model)"),p7o=l(),Q2=a("li"),tme=a("strong"),_7o=o("ibert"),b7o=o(" \u2014 "),zD=a("a"),v7o=o("IBertForSequenceClassification"),F7o=o(" (I-BERT model)"),T7o=l(),H2=a("li"),ame=a("strong"),M7o=o("layoutlm"),E7o=o(" \u2014 "),WD=a("a"),C7o=o("LayoutLMForSequenceClassification"),w7o=o(" (LayoutLM model)"),A7o=l(),U2=a("li"),nme=a("strong"),y7o=o("layoutlmv2"),L7o=o(" \u2014 "),QD=a("a"),x7o=o("LayoutLMv2ForSequenceClassification"),$7o=o(" (LayoutLMv2 model)"),k7o=l(),J2=a("li"),sme=a("strong"),S7o=o("led"),R7o=o(" \u2014 "),HD=a("a"),P7o=o("LEDForSequenceClassification"),B7o=o(" (LED model)"),I7o=l(),Y2=a("li"),lme=a("strong"),q7o=o("longformer"),N7o=o(" \u2014 "),UD=a("a"),j7o=o("LongformerForSequenceClassification"),D7o=o(" (Longformer model)"),G7o=l(),K2=a("li"),ime=a("strong"),O7o=o("mbart"),V7o=o(" \u2014 "),JD=a("a"),X7o=o("MBartForSequenceClassification"),z7o=o(" (mBART model)"),W7o=l(),Z2=a("li"),dme=a("strong"),Q7o=o("megatron-bert"),H7o=o(" \u2014 "),YD=a("a"),U7o=o("MegatronBertForSequenceClassification"),J7o=o(" (MegatronBert model)"),Y7o=l(),ev=a("li"),cme=a("strong"),K7o=o("mobilebert"),Z7o=o(" \u2014 "),KD=a("a"),e$o=o("MobileBertForSequenceClassification"),o$o=o(" (MobileBERT model)"),r$o=l(),ov=a("li"),mme=a("strong"),t$o=o("mpnet"),a$o=o(" \u2014 "),ZD=a("a"),n$o=o("MPNetForSequenceClassification"),s$o=o(" (MPNet model)"),l$o=l(),rv=a("li"),fme=a("strong"),i$o=o("nystromformer"),d$o=o(" \u2014 "),eG=a("a"),c$o=o("NystromformerForSequenceClassification"),m$o=o(" (Nystromformer model)"),f$o=l(),tv=a("li"),gme=a("strong"),g$o=o("openai-gpt"),h$o=o(" \u2014 "),oG=a("a"),u$o=o("OpenAIGPTForSequenceClassification"),p$o=o(" (OpenAI GPT model)"),_$o=l(),av=a("li"),hme=a("strong"),b$o=o("perceiver"),v$o=o(" \u2014 "),rG=a("a"),F$o=o("PerceiverForSequenceClassification"),T$o=o(" (Perceiver model)"),M$o=l(),nv=a("li"),ume=a("strong"),E$o=o("plbart"),C$o=o(" \u2014 "),tG=a("a"),w$o=o("PLBartForSequenceClassification"),A$o=o(" (PLBart model)"),y$o=l(),sv=a("li"),pme=a("strong"),L$o=o("qdqbert"),x$o=o(" \u2014 "),aG=a("a"),$$o=o("QDQBertForSequenceClassification"),k$o=o(" (QDQBert model)"),S$o=l(),lv=a("li"),_me=a("strong"),R$o=o("reformer"),P$o=o(" \u2014 "),nG=a("a"),B$o=o("ReformerForSequenceClassification"),I$o=o(" (Reformer model)"),q$o=l(),iv=a("li"),bme=a("strong"),N$o=o("rembert"),j$o=o(" \u2014 "),sG=a("a"),D$o=o("RemBertForSequenceClassification"),G$o=o(" (RemBERT model)"),O$o=l(),dv=a("li"),vme=a("strong"),V$o=o("roberta"),X$o=o(" \u2014 "),lG=a("a"),z$o=o("RobertaForSequenceClassification"),W$o=o(" (RoBERTa model)"),Q$o=l(),cv=a("li"),Fme=a("strong"),H$o=o("roformer"),U$o=o(" \u2014 "),iG=a("a"),J$o=o("RoFormerForSequenceClassification"),Y$o=o(" (RoFormer model)"),K$o=l(),mv=a("li"),Tme=a("strong"),Z$o=o("squeezebert"),eko=o(" \u2014 "),dG=a("a"),oko=o("SqueezeBertForSequenceClassification"),rko=o(" (SqueezeBERT model)"),tko=l(),fv=a("li"),Mme=a("strong"),ako=o("tapas"),nko=o(" \u2014 "),cG=a("a"),sko=o("TapasForSequenceClassification"),lko=o(" (TAPAS model)"),iko=l(),gv=a("li"),Eme=a("strong"),dko=o("transfo-xl"),cko=o(" \u2014 "),mG=a("a"),mko=o("TransfoXLForSequenceClassification"),fko=o(" (Transformer-XL model)"),gko=l(),hv=a("li"),Cme=a("strong"),hko=o("xlm"),uko=o(" \u2014 "),fG=a("a"),pko=o("XLMForSequenceClassification"),_ko=o(" (XLM model)"),bko=l(),uv=a("li"),wme=a("strong"),vko=o("xlm-roberta"),Fko=o(" \u2014 "),gG=a("a"),Tko=o("XLMRobertaForSequenceClassification"),Mko=o(" (XLM-RoBERTa model)"),Eko=l(),pv=a("li"),Ame=a("strong"),Cko=o("xlm-roberta-xl"),wko=o(" \u2014 "),hG=a("a"),Ako=o("XLMRobertaXLForSequenceClassification"),yko=o(" (XLM-RoBERTa-XL model)"),Lko=l(),_v=a("li"),yme=a("strong"),xko=o("xlnet"),$ko=o(" \u2014 "),uG=a("a"),kko=o("XLNetForSequenceClassification"),Sko=o(" (XLNet model)"),Rko=l(),bv=a("li"),Lme=a("strong"),Pko=o("yoso"),Bko=o(" \u2014 "),pG=a("a"),Iko=o("YosoForSequenceClassification"),qko=o(" (YOSO model)"),Nko=l(),vv=a("p"),jko=o("The model is set in evaluation mode by default using "),xme=a("code"),Dko=o("model.eval()"),Gko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$me=a("code"),Oko=o("model.train()"),Vko=l(),F(Fv.$$.fragment),JIe=l(),Oi=a("h2"),Tv=a("a"),kme=a("span"),F(dL.$$.fragment),Xko=l(),Sme=a("span"),zko=o("AutoModelForMultipleChoice"),YIe=l(),Po=a("div"),F(cL.$$.fragment),Wko=l(),Vi=a("p"),Qko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_G=a("a"),Hko=o("from_pretrained()"),Uko=o(" class method or the "),bG=a("a"),Jko=o("from_config()"),Yko=o(` class
method.`),Kko=l(),mL=a("p"),Zko=o("This class cannot be instantiated directly using "),Rme=a("code"),eSo=o("__init__()"),oSo=o(" (throws an error)."),rSo=l(),dt=a("div"),F(fL.$$.fragment),tSo=l(),Pme=a("p"),aSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nSo=l(),Xi=a("p"),sSo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),lSo=o("not"),iSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=a("a"),dSo=o("from_pretrained()"),cSo=o(" to load the model weights."),mSo=l(),F(Mv.$$.fragment),fSo=l(),ro=a("div"),F(gL.$$.fragment),gSo=l(),Ime=a("p"),hSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uSo=l(),Pa=a("p"),pSo=o("The model class to instantiate is selected based on the "),qme=a("code"),_So=o("model_type"),bSo=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),vSo=o("pretrained_model_name_or_path"),FSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=a("code"),TSo=o("pretrained_model_name_or_path"),MSo=o(":"),ESo=l(),Y=a("ul"),Ev=a("li"),Dme=a("strong"),CSo=o("albert"),wSo=o(" \u2014 "),FG=a("a"),ASo=o("AlbertForMultipleChoice"),ySo=o(" (ALBERT model)"),LSo=l(),Cv=a("li"),Gme=a("strong"),xSo=o("bert"),$So=o(" \u2014 "),TG=a("a"),kSo=o("BertForMultipleChoice"),SSo=o(" (BERT model)"),RSo=l(),wv=a("li"),Ome=a("strong"),PSo=o("big_bird"),BSo=o(" \u2014 "),MG=a("a"),ISo=o("BigBirdForMultipleChoice"),qSo=o(" (BigBird model)"),NSo=l(),Av=a("li"),Vme=a("strong"),jSo=o("camembert"),DSo=o(" \u2014 "),EG=a("a"),GSo=o("CamembertForMultipleChoice"),OSo=o(" (CamemBERT model)"),VSo=l(),yv=a("li"),Xme=a("strong"),XSo=o("canine"),zSo=o(" \u2014 "),CG=a("a"),WSo=o("CanineForMultipleChoice"),QSo=o(" (Canine model)"),HSo=l(),Lv=a("li"),zme=a("strong"),USo=o("convbert"),JSo=o(" \u2014 "),wG=a("a"),YSo=o("ConvBertForMultipleChoice"),KSo=o(" (ConvBERT model)"),ZSo=l(),xv=a("li"),Wme=a("strong"),eRo=o("data2vec-text"),oRo=o(" \u2014 "),AG=a("a"),rRo=o("Data2VecTextForMultipleChoice"),tRo=o(" (Data2VecText model)"),aRo=l(),$v=a("li"),Qme=a("strong"),nRo=o("deberta-v2"),sRo=o(" \u2014 "),yG=a("a"),lRo=o("DebertaV2ForMultipleChoice"),iRo=o(" (DeBERTa-v2 model)"),dRo=l(),kv=a("li"),Hme=a("strong"),cRo=o("distilbert"),mRo=o(" \u2014 "),LG=a("a"),fRo=o("DistilBertForMultipleChoice"),gRo=o(" (DistilBERT model)"),hRo=l(),Sv=a("li"),Ume=a("strong"),uRo=o("electra"),pRo=o(" \u2014 "),xG=a("a"),_Ro=o("ElectraForMultipleChoice"),bRo=o(" (ELECTRA model)"),vRo=l(),Rv=a("li"),Jme=a("strong"),FRo=o("flaubert"),TRo=o(" \u2014 "),$G=a("a"),MRo=o("FlaubertForMultipleChoice"),ERo=o(" (FlauBERT model)"),CRo=l(),Pv=a("li"),Yme=a("strong"),wRo=o("fnet"),ARo=o(" \u2014 "),kG=a("a"),yRo=o("FNetForMultipleChoice"),LRo=o(" (FNet model)"),xRo=l(),Bv=a("li"),Kme=a("strong"),$Ro=o("funnel"),kRo=o(" \u2014 "),SG=a("a"),SRo=o("FunnelForMultipleChoice"),RRo=o(" (Funnel Transformer model)"),PRo=l(),Iv=a("li"),Zme=a("strong"),BRo=o("ibert"),IRo=o(" \u2014 "),RG=a("a"),qRo=o("IBertForMultipleChoice"),NRo=o(" (I-BERT model)"),jRo=l(),qv=a("li"),efe=a("strong"),DRo=o("longformer"),GRo=o(" \u2014 "),PG=a("a"),ORo=o("LongformerForMultipleChoice"),VRo=o(" (Longformer model)"),XRo=l(),Nv=a("li"),ofe=a("strong"),zRo=o("megatron-bert"),WRo=o(" \u2014 "),BG=a("a"),QRo=o("MegatronBertForMultipleChoice"),HRo=o(" (MegatronBert model)"),URo=l(),jv=a("li"),rfe=a("strong"),JRo=o("mobilebert"),YRo=o(" \u2014 "),IG=a("a"),KRo=o("MobileBertForMultipleChoice"),ZRo=o(" (MobileBERT model)"),ePo=l(),Dv=a("li"),tfe=a("strong"),oPo=o("mpnet"),rPo=o(" \u2014 "),qG=a("a"),tPo=o("MPNetForMultipleChoice"),aPo=o(" (MPNet model)"),nPo=l(),Gv=a("li"),afe=a("strong"),sPo=o("nystromformer"),lPo=o(" \u2014 "),NG=a("a"),iPo=o("NystromformerForMultipleChoice"),dPo=o(" (Nystromformer model)"),cPo=l(),Ov=a("li"),nfe=a("strong"),mPo=o("qdqbert"),fPo=o(" \u2014 "),jG=a("a"),gPo=o("QDQBertForMultipleChoice"),hPo=o(" (QDQBert model)"),uPo=l(),Vv=a("li"),sfe=a("strong"),pPo=o("rembert"),_Po=o(" \u2014 "),DG=a("a"),bPo=o("RemBertForMultipleChoice"),vPo=o(" (RemBERT model)"),FPo=l(),Xv=a("li"),lfe=a("strong"),TPo=o("roberta"),MPo=o(" \u2014 "),GG=a("a"),EPo=o("RobertaForMultipleChoice"),CPo=o(" (RoBERTa model)"),wPo=l(),zv=a("li"),ife=a("strong"),APo=o("roformer"),yPo=o(" \u2014 "),OG=a("a"),LPo=o("RoFormerForMultipleChoice"),xPo=o(" (RoFormer model)"),$Po=l(),Wv=a("li"),dfe=a("strong"),kPo=o("squeezebert"),SPo=o(" \u2014 "),VG=a("a"),RPo=o("SqueezeBertForMultipleChoice"),PPo=o(" (SqueezeBERT model)"),BPo=l(),Qv=a("li"),cfe=a("strong"),IPo=o("xlm"),qPo=o(" \u2014 "),XG=a("a"),NPo=o("XLMForMultipleChoice"),jPo=o(" (XLM model)"),DPo=l(),Hv=a("li"),mfe=a("strong"),GPo=o("xlm-roberta"),OPo=o(" \u2014 "),zG=a("a"),VPo=o("XLMRobertaForMultipleChoice"),XPo=o(" (XLM-RoBERTa model)"),zPo=l(),Uv=a("li"),ffe=a("strong"),WPo=o("xlm-roberta-xl"),QPo=o(" \u2014 "),WG=a("a"),HPo=o("XLMRobertaXLForMultipleChoice"),UPo=o(" (XLM-RoBERTa-XL model)"),JPo=l(),Jv=a("li"),gfe=a("strong"),YPo=o("xlnet"),KPo=o(" \u2014 "),QG=a("a"),ZPo=o("XLNetForMultipleChoice"),eBo=o(" (XLNet model)"),oBo=l(),Yv=a("li"),hfe=a("strong"),rBo=o("yoso"),tBo=o(" \u2014 "),HG=a("a"),aBo=o("YosoForMultipleChoice"),nBo=o(" (YOSO model)"),sBo=l(),Kv=a("p"),lBo=o("The model is set in evaluation mode by default using "),ufe=a("code"),iBo=o("model.eval()"),dBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=a("code"),cBo=o("model.train()"),mBo=l(),F(Zv.$$.fragment),KIe=l(),zi=a("h2"),eF=a("a"),_fe=a("span"),F(hL.$$.fragment),fBo=l(),bfe=a("span"),gBo=o("AutoModelForNextSentencePrediction"),ZIe=l(),Bo=a("div"),F(uL.$$.fragment),hBo=l(),Wi=a("p"),uBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UG=a("a"),pBo=o("from_pretrained()"),_Bo=o(" class method or the "),JG=a("a"),bBo=o("from_config()"),vBo=o(` class
method.`),FBo=l(),pL=a("p"),TBo=o("This class cannot be instantiated directly using "),vfe=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),CBo=l(),ct=a("div"),F(_L.$$.fragment),wBo=l(),Ffe=a("p"),ABo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yBo=l(),Qi=a("p"),LBo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),xBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),kBo=o("from_pretrained()"),SBo=o(" to load the model weights."),RBo=l(),F(oF.$$.fragment),PBo=l(),to=a("div"),F(bL.$$.fragment),BBo=l(),Mfe=a("p"),IBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qBo=l(),Ba=a("p"),NBo=o("The model class to instantiate is selected based on the "),Efe=a("code"),jBo=o("model_type"),DBo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),GBo=o("pretrained_model_name_or_path"),OBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(":"),zBo=l(),Yr=a("ul"),rF=a("li"),Afe=a("strong"),WBo=o("bert"),QBo=o(" \u2014 "),KG=a("a"),HBo=o("BertForNextSentencePrediction"),UBo=o(" (BERT model)"),JBo=l(),tF=a("li"),yfe=a("strong"),YBo=o("fnet"),KBo=o(" \u2014 "),ZG=a("a"),ZBo=o("FNetForNextSentencePrediction"),eIo=o(" (FNet model)"),oIo=l(),aF=a("li"),Lfe=a("strong"),rIo=o("megatron-bert"),tIo=o(" \u2014 "),eO=a("a"),aIo=o("MegatronBertForNextSentencePrediction"),nIo=o(" (MegatronBert model)"),sIo=l(),nF=a("li"),xfe=a("strong"),lIo=o("mobilebert"),iIo=o(" \u2014 "),oO=a("a"),dIo=o("MobileBertForNextSentencePrediction"),cIo=o(" (MobileBERT model)"),mIo=l(),sF=a("li"),$fe=a("strong"),fIo=o("qdqbert"),gIo=o(" \u2014 "),rO=a("a"),hIo=o("QDQBertForNextSentencePrediction"),uIo=o(" (QDQBert model)"),pIo=l(),lF=a("p"),_Io=o("The model is set in evaluation mode by default using "),kfe=a("code"),bIo=o("model.eval()"),vIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=a("code"),FIo=o("model.train()"),TIo=l(),F(iF.$$.fragment),eqe=l(),Hi=a("h2"),dF=a("a"),Rfe=a("span"),F(vL.$$.fragment),MIo=l(),Pfe=a("span"),EIo=o("AutoModelForTokenClassification"),oqe=l(),Io=a("div"),F(FL.$$.fragment),CIo=l(),Ui=a("p"),wIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tO=a("a"),AIo=o("from_pretrained()"),yIo=o(" class method or the "),aO=a("a"),LIo=o("from_config()"),xIo=o(` class
method.`),$Io=l(),TL=a("p"),kIo=o("This class cannot be instantiated directly using "),Bfe=a("code"),SIo=o("__init__()"),RIo=o(" (throws an error)."),PIo=l(),mt=a("div"),F(ML.$$.fragment),BIo=l(),Ife=a("p"),IIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qIo=l(),Ji=a("p"),NIo=o(`Note:
Loading a model from its configuration file does `),qfe=a("strong"),jIo=o("not"),DIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),GIo=o("from_pretrained()"),OIo=o(" to load the model weights."),VIo=l(),F(cF.$$.fragment),XIo=l(),ao=a("div"),F(EL.$$.fragment),zIo=l(),Nfe=a("p"),WIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QIo=l(),Ia=a("p"),HIo=o("The model class to instantiate is selected based on the "),jfe=a("code"),UIo=o("model_type"),JIo=o(` property of the config object (either
passed as an argument or loaded from `),Dfe=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=a("code"),ZIo=o("pretrained_model_name_or_path"),eqo=o(":"),oqo=l(),U=a("ul"),mF=a("li"),Ofe=a("strong"),rqo=o("albert"),tqo=o(" \u2014 "),sO=a("a"),aqo=o("AlbertForTokenClassification"),nqo=o(" (ALBERT model)"),sqo=l(),fF=a("li"),Vfe=a("strong"),lqo=o("bert"),iqo=o(" \u2014 "),lO=a("a"),dqo=o("BertForTokenClassification"),cqo=o(" (BERT model)"),mqo=l(),gF=a("li"),Xfe=a("strong"),fqo=o("big_bird"),gqo=o(" \u2014 "),iO=a("a"),hqo=o("BigBirdForTokenClassification"),uqo=o(" (BigBird model)"),pqo=l(),hF=a("li"),zfe=a("strong"),_qo=o("camembert"),bqo=o(" \u2014 "),dO=a("a"),vqo=o("CamembertForTokenClassification"),Fqo=o(" (CamemBERT model)"),Tqo=l(),uF=a("li"),Wfe=a("strong"),Mqo=o("canine"),Eqo=o(" \u2014 "),cO=a("a"),Cqo=o("CanineForTokenClassification"),wqo=o(" (Canine model)"),Aqo=l(),pF=a("li"),Qfe=a("strong"),yqo=o("convbert"),Lqo=o(" \u2014 "),mO=a("a"),xqo=o("ConvBertForTokenClassification"),$qo=o(" (ConvBERT model)"),kqo=l(),_F=a("li"),Hfe=a("strong"),Sqo=o("data2vec-text"),Rqo=o(" \u2014 "),fO=a("a"),Pqo=o("Data2VecTextForTokenClassification"),Bqo=o(" (Data2VecText model)"),Iqo=l(),bF=a("li"),Ufe=a("strong"),qqo=o("deberta"),Nqo=o(" \u2014 "),gO=a("a"),jqo=o("DebertaForTokenClassification"),Dqo=o(" (DeBERTa model)"),Gqo=l(),vF=a("li"),Jfe=a("strong"),Oqo=o("deberta-v2"),Vqo=o(" \u2014 "),hO=a("a"),Xqo=o("DebertaV2ForTokenClassification"),zqo=o(" (DeBERTa-v2 model)"),Wqo=l(),FF=a("li"),Yfe=a("strong"),Qqo=o("distilbert"),Hqo=o(" \u2014 "),uO=a("a"),Uqo=o("DistilBertForTokenClassification"),Jqo=o(" (DistilBERT model)"),Yqo=l(),TF=a("li"),Kfe=a("strong"),Kqo=o("electra"),Zqo=o(" \u2014 "),pO=a("a"),eNo=o("ElectraForTokenClassification"),oNo=o(" (ELECTRA model)"),rNo=l(),MF=a("li"),Zfe=a("strong"),tNo=o("flaubert"),aNo=o(" \u2014 "),_O=a("a"),nNo=o("FlaubertForTokenClassification"),sNo=o(" (FlauBERT model)"),lNo=l(),EF=a("li"),ege=a("strong"),iNo=o("fnet"),dNo=o(" \u2014 "),bO=a("a"),cNo=o("FNetForTokenClassification"),mNo=o(" (FNet model)"),fNo=l(),CF=a("li"),oge=a("strong"),gNo=o("funnel"),hNo=o(" \u2014 "),vO=a("a"),uNo=o("FunnelForTokenClassification"),pNo=o(" (Funnel Transformer model)"),_No=l(),wF=a("li"),rge=a("strong"),bNo=o("gpt2"),vNo=o(" \u2014 "),FO=a("a"),FNo=o("GPT2ForTokenClassification"),TNo=o(" (OpenAI GPT-2 model)"),MNo=l(),AF=a("li"),tge=a("strong"),ENo=o("ibert"),CNo=o(" \u2014 "),TO=a("a"),wNo=o("IBertForTokenClassification"),ANo=o(" (I-BERT model)"),yNo=l(),yF=a("li"),age=a("strong"),LNo=o("layoutlm"),xNo=o(" \u2014 "),MO=a("a"),$No=o("LayoutLMForTokenClassification"),kNo=o(" (LayoutLM model)"),SNo=l(),LF=a("li"),nge=a("strong"),RNo=o("layoutlmv2"),PNo=o(" \u2014 "),EO=a("a"),BNo=o("LayoutLMv2ForTokenClassification"),INo=o(" (LayoutLMv2 model)"),qNo=l(),xF=a("li"),sge=a("strong"),NNo=o("longformer"),jNo=o(" \u2014 "),CO=a("a"),DNo=o("LongformerForTokenClassification"),GNo=o(" (Longformer model)"),ONo=l(),$F=a("li"),lge=a("strong"),VNo=o("megatron-bert"),XNo=o(" \u2014 "),wO=a("a"),zNo=o("MegatronBertForTokenClassification"),WNo=o(" (MegatronBert model)"),QNo=l(),kF=a("li"),ige=a("strong"),HNo=o("mobilebert"),UNo=o(" \u2014 "),AO=a("a"),JNo=o("MobileBertForTokenClassification"),YNo=o(" (MobileBERT model)"),KNo=l(),SF=a("li"),dge=a("strong"),ZNo=o("mpnet"),ejo=o(" \u2014 "),yO=a("a"),ojo=o("MPNetForTokenClassification"),rjo=o(" (MPNet model)"),tjo=l(),RF=a("li"),cge=a("strong"),ajo=o("nystromformer"),njo=o(" \u2014 "),LO=a("a"),sjo=o("NystromformerForTokenClassification"),ljo=o(" (Nystromformer model)"),ijo=l(),PF=a("li"),mge=a("strong"),djo=o("qdqbert"),cjo=o(" \u2014 "),xO=a("a"),mjo=o("QDQBertForTokenClassification"),fjo=o(" (QDQBert model)"),gjo=l(),BF=a("li"),fge=a("strong"),hjo=o("rembert"),ujo=o(" \u2014 "),$O=a("a"),pjo=o("RemBertForTokenClassification"),_jo=o(" (RemBERT model)"),bjo=l(),IF=a("li"),gge=a("strong"),vjo=o("roberta"),Fjo=o(" \u2014 "),kO=a("a"),Tjo=o("RobertaForTokenClassification"),Mjo=o(" (RoBERTa model)"),Ejo=l(),qF=a("li"),hge=a("strong"),Cjo=o("roformer"),wjo=o(" \u2014 "),SO=a("a"),Ajo=o("RoFormerForTokenClassification"),yjo=o(" (RoFormer model)"),Ljo=l(),NF=a("li"),uge=a("strong"),xjo=o("squeezebert"),$jo=o(" \u2014 "),RO=a("a"),kjo=o("SqueezeBertForTokenClassification"),Sjo=o(" (SqueezeBERT model)"),Rjo=l(),jF=a("li"),pge=a("strong"),Pjo=o("xlm"),Bjo=o(" \u2014 "),PO=a("a"),Ijo=o("XLMForTokenClassification"),qjo=o(" (XLM model)"),Njo=l(),DF=a("li"),_ge=a("strong"),jjo=o("xlm-roberta"),Djo=o(" \u2014 "),BO=a("a"),Gjo=o("XLMRobertaForTokenClassification"),Ojo=o(" (XLM-RoBERTa model)"),Vjo=l(),GF=a("li"),bge=a("strong"),Xjo=o("xlm-roberta-xl"),zjo=o(" \u2014 "),IO=a("a"),Wjo=o("XLMRobertaXLForTokenClassification"),Qjo=o(" (XLM-RoBERTa-XL model)"),Hjo=l(),OF=a("li"),vge=a("strong"),Ujo=o("xlnet"),Jjo=o(" \u2014 "),qO=a("a"),Yjo=o("XLNetForTokenClassification"),Kjo=o(" (XLNet model)"),Zjo=l(),VF=a("li"),Fge=a("strong"),eDo=o("yoso"),oDo=o(" \u2014 "),NO=a("a"),rDo=o("YosoForTokenClassification"),tDo=o(" (YOSO model)"),aDo=l(),XF=a("p"),nDo=o("The model is set in evaluation mode by default using "),Tge=a("code"),sDo=o("model.eval()"),lDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),iDo=o("model.train()"),dDo=l(),F(zF.$$.fragment),rqe=l(),Yi=a("h2"),WF=a("a"),Ege=a("span"),F(CL.$$.fragment),cDo=l(),Cge=a("span"),mDo=o("AutoModelForQuestionAnswering"),tqe=l(),qo=a("div"),F(wL.$$.fragment),fDo=l(),Ki=a("p"),gDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jO=a("a"),hDo=o("from_pretrained()"),uDo=o(" class method or the "),DO=a("a"),pDo=o("from_config()"),_Do=o(` class
method.`),bDo=l(),AL=a("p"),vDo=o("This class cannot be instantiated directly using "),wge=a("code"),FDo=o("__init__()"),TDo=o(" (throws an error)."),MDo=l(),ft=a("div"),F(yL.$$.fragment),EDo=l(),Age=a("p"),CDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wDo=l(),Zi=a("p"),ADo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),yDo=o("not"),LDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),xDo=o("from_pretrained()"),$Do=o(" to load the model weights."),kDo=l(),F(QF.$$.fragment),SDo=l(),no=a("div"),F(LL.$$.fragment),RDo=l(),Lge=a("p"),PDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BDo=l(),qa=a("p"),IDo=o("The model class to instantiate is selected based on the "),xge=a("code"),qDo=o("model_type"),NDo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),jDo=o("pretrained_model_name_or_path"),DDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(":"),VDo=l(),V=a("ul"),HF=a("li"),Sge=a("strong"),XDo=o("albert"),zDo=o(" \u2014 "),OO=a("a"),WDo=o("AlbertForQuestionAnswering"),QDo=o(" (ALBERT model)"),HDo=l(),UF=a("li"),Rge=a("strong"),UDo=o("bart"),JDo=o(" \u2014 "),VO=a("a"),YDo=o("BartForQuestionAnswering"),KDo=o(" (BART model)"),ZDo=l(),JF=a("li"),Pge=a("strong"),eGo=o("bert"),oGo=o(" \u2014 "),XO=a("a"),rGo=o("BertForQuestionAnswering"),tGo=o(" (BERT model)"),aGo=l(),YF=a("li"),Bge=a("strong"),nGo=o("big_bird"),sGo=o(" \u2014 "),zO=a("a"),lGo=o("BigBirdForQuestionAnswering"),iGo=o(" (BigBird model)"),dGo=l(),KF=a("li"),Ige=a("strong"),cGo=o("bigbird_pegasus"),mGo=o(" \u2014 "),WO=a("a"),fGo=o("BigBirdPegasusForQuestionAnswering"),gGo=o(" (BigBirdPegasus model)"),hGo=l(),ZF=a("li"),qge=a("strong"),uGo=o("camembert"),pGo=o(" \u2014 "),QO=a("a"),_Go=o("CamembertForQuestionAnswering"),bGo=o(" (CamemBERT model)"),vGo=l(),e1=a("li"),Nge=a("strong"),FGo=o("canine"),TGo=o(" \u2014 "),HO=a("a"),MGo=o("CanineForQuestionAnswering"),EGo=o(" (Canine model)"),CGo=l(),o1=a("li"),jge=a("strong"),wGo=o("convbert"),AGo=o(" \u2014 "),UO=a("a"),yGo=o("ConvBertForQuestionAnswering"),LGo=o(" (ConvBERT model)"),xGo=l(),r1=a("li"),Dge=a("strong"),$Go=o("data2vec-text"),kGo=o(" \u2014 "),JO=a("a"),SGo=o("Data2VecTextForQuestionAnswering"),RGo=o(" (Data2VecText model)"),PGo=l(),t1=a("li"),Gge=a("strong"),BGo=o("deberta"),IGo=o(" \u2014 "),YO=a("a"),qGo=o("DebertaForQuestionAnswering"),NGo=o(" (DeBERTa model)"),jGo=l(),a1=a("li"),Oge=a("strong"),DGo=o("deberta-v2"),GGo=o(" \u2014 "),KO=a("a"),OGo=o("DebertaV2ForQuestionAnswering"),VGo=o(" (DeBERTa-v2 model)"),XGo=l(),n1=a("li"),Vge=a("strong"),zGo=o("distilbert"),WGo=o(" \u2014 "),ZO=a("a"),QGo=o("DistilBertForQuestionAnswering"),HGo=o(" (DistilBERT model)"),UGo=l(),s1=a("li"),Xge=a("strong"),JGo=o("electra"),YGo=o(" \u2014 "),eV=a("a"),KGo=o("ElectraForQuestionAnswering"),ZGo=o(" (ELECTRA model)"),eOo=l(),l1=a("li"),zge=a("strong"),oOo=o("flaubert"),rOo=o(" \u2014 "),oV=a("a"),tOo=o("FlaubertForQuestionAnsweringSimple"),aOo=o(" (FlauBERT model)"),nOo=l(),i1=a("li"),Wge=a("strong"),sOo=o("fnet"),lOo=o(" \u2014 "),rV=a("a"),iOo=o("FNetForQuestionAnswering"),dOo=o(" (FNet model)"),cOo=l(),d1=a("li"),Qge=a("strong"),mOo=o("funnel"),fOo=o(" \u2014 "),tV=a("a"),gOo=o("FunnelForQuestionAnswering"),hOo=o(" (Funnel Transformer model)"),uOo=l(),c1=a("li"),Hge=a("strong"),pOo=o("gptj"),_Oo=o(" \u2014 "),aV=a("a"),bOo=o("GPTJForQuestionAnswering"),vOo=o(" (GPT-J model)"),FOo=l(),m1=a("li"),Uge=a("strong"),TOo=o("ibert"),MOo=o(" \u2014 "),nV=a("a"),EOo=o("IBertForQuestionAnswering"),COo=o(" (I-BERT model)"),wOo=l(),f1=a("li"),Jge=a("strong"),AOo=o("layoutlmv2"),yOo=o(" \u2014 "),sV=a("a"),LOo=o("LayoutLMv2ForQuestionAnswering"),xOo=o(" (LayoutLMv2 model)"),$Oo=l(),g1=a("li"),Yge=a("strong"),kOo=o("led"),SOo=o(" \u2014 "),lV=a("a"),ROo=o("LEDForQuestionAnswering"),POo=o(" (LED model)"),BOo=l(),h1=a("li"),Kge=a("strong"),IOo=o("longformer"),qOo=o(" \u2014 "),iV=a("a"),NOo=o("LongformerForQuestionAnswering"),jOo=o(" (Longformer model)"),DOo=l(),u1=a("li"),Zge=a("strong"),GOo=o("lxmert"),OOo=o(" \u2014 "),dV=a("a"),VOo=o("LxmertForQuestionAnswering"),XOo=o(" (LXMERT model)"),zOo=l(),p1=a("li"),ehe=a("strong"),WOo=o("mbart"),QOo=o(" \u2014 "),cV=a("a"),HOo=o("MBartForQuestionAnswering"),UOo=o(" (mBART model)"),JOo=l(),_1=a("li"),ohe=a("strong"),YOo=o("megatron-bert"),KOo=o(" \u2014 "),mV=a("a"),ZOo=o("MegatronBertForQuestionAnswering"),eVo=o(" (MegatronBert model)"),oVo=l(),b1=a("li"),rhe=a("strong"),rVo=o("mobilebert"),tVo=o(" \u2014 "),fV=a("a"),aVo=o("MobileBertForQuestionAnswering"),nVo=o(" (MobileBERT model)"),sVo=l(),v1=a("li"),the=a("strong"),lVo=o("mpnet"),iVo=o(" \u2014 "),gV=a("a"),dVo=o("MPNetForQuestionAnswering"),cVo=o(" (MPNet model)"),mVo=l(),F1=a("li"),ahe=a("strong"),fVo=o("nystromformer"),gVo=o(" \u2014 "),hV=a("a"),hVo=o("NystromformerForQuestionAnswering"),uVo=o(" (Nystromformer model)"),pVo=l(),T1=a("li"),nhe=a("strong"),_Vo=o("qdqbert"),bVo=o(" \u2014 "),uV=a("a"),vVo=o("QDQBertForQuestionAnswering"),FVo=o(" (QDQBert model)"),TVo=l(),M1=a("li"),she=a("strong"),MVo=o("reformer"),EVo=o(" \u2014 "),pV=a("a"),CVo=o("ReformerForQuestionAnswering"),wVo=o(" (Reformer model)"),AVo=l(),E1=a("li"),lhe=a("strong"),yVo=o("rembert"),LVo=o(" \u2014 "),_V=a("a"),xVo=o("RemBertForQuestionAnswering"),$Vo=o(" (RemBERT model)"),kVo=l(),C1=a("li"),ihe=a("strong"),SVo=o("roberta"),RVo=o(" \u2014 "),bV=a("a"),PVo=o("RobertaForQuestionAnswering"),BVo=o(" (RoBERTa model)"),IVo=l(),w1=a("li"),dhe=a("strong"),qVo=o("roformer"),NVo=o(" \u2014 "),vV=a("a"),jVo=o("RoFormerForQuestionAnswering"),DVo=o(" (RoFormer model)"),GVo=l(),A1=a("li"),che=a("strong"),OVo=o("splinter"),VVo=o(" \u2014 "),FV=a("a"),XVo=o("SplinterForQuestionAnswering"),zVo=o(" (Splinter model)"),WVo=l(),y1=a("li"),mhe=a("strong"),QVo=o("squeezebert"),HVo=o(" \u2014 "),TV=a("a"),UVo=o("SqueezeBertForQuestionAnswering"),JVo=o(" (SqueezeBERT model)"),YVo=l(),L1=a("li"),fhe=a("strong"),KVo=o("xlm"),ZVo=o(" \u2014 "),MV=a("a"),eXo=o("XLMForQuestionAnsweringSimple"),oXo=o(" (XLM model)"),rXo=l(),x1=a("li"),ghe=a("strong"),tXo=o("xlm-roberta"),aXo=o(" \u2014 "),EV=a("a"),nXo=o("XLMRobertaForQuestionAnswering"),sXo=o(" (XLM-RoBERTa model)"),lXo=l(),$1=a("li"),hhe=a("strong"),iXo=o("xlm-roberta-xl"),dXo=o(" \u2014 "),CV=a("a"),cXo=o("XLMRobertaXLForQuestionAnswering"),mXo=o(" (XLM-RoBERTa-XL model)"),fXo=l(),k1=a("li"),uhe=a("strong"),gXo=o("xlnet"),hXo=o(" \u2014 "),wV=a("a"),uXo=o("XLNetForQuestionAnsweringSimple"),pXo=o(" (XLNet model)"),_Xo=l(),S1=a("li"),phe=a("strong"),bXo=o("yoso"),vXo=o(" \u2014 "),AV=a("a"),FXo=o("YosoForQuestionAnswering"),TXo=o(" (YOSO model)"),MXo=l(),R1=a("p"),EXo=o("The model is set in evaluation mode by default using "),_he=a("code"),CXo=o("model.eval()"),wXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),AXo=o("model.train()"),yXo=l(),F(P1.$$.fragment),aqe=l(),ed=a("h2"),B1=a("a"),vhe=a("span"),F(xL.$$.fragment),LXo=l(),Fhe=a("span"),xXo=o("AutoModelForTableQuestionAnswering"),nqe=l(),No=a("div"),F($L.$$.fragment),$Xo=l(),od=a("p"),kXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yV=a("a"),SXo=o("from_pretrained()"),RXo=o(" class method or the "),LV=a("a"),PXo=o("from_config()"),BXo=o(` class
method.`),IXo=l(),kL=a("p"),qXo=o("This class cannot be instantiated directly using "),The=a("code"),NXo=o("__init__()"),jXo=o(" (throws an error)."),DXo=l(),gt=a("div"),F(SL.$$.fragment),GXo=l(),Mhe=a("p"),OXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),VXo=l(),rd=a("p"),XXo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),zXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),QXo=o("from_pretrained()"),HXo=o(" to load the model weights."),UXo=l(),F(I1.$$.fragment),JXo=l(),so=a("div"),F(RL.$$.fragment),YXo=l(),Che=a("p"),KXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZXo=l(),Na=a("p"),ezo=o("The model class to instantiate is selected based on the "),whe=a("code"),ozo=o("model_type"),rzo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),nzo=o("pretrained_model_name_or_path"),szo=o(":"),lzo=l(),Lhe=a("ul"),q1=a("li"),xhe=a("strong"),izo=o("tapas"),dzo=o(" \u2014 "),$V=a("a"),czo=o("TapasForQuestionAnswering"),mzo=o(" (TAPAS model)"),fzo=l(),N1=a("p"),gzo=o("The model is set in evaluation mode by default using "),$he=a("code"),hzo=o("model.eval()"),uzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),pzo=o("model.train()"),_zo=l(),F(j1.$$.fragment),sqe=l(),td=a("h2"),D1=a("a"),She=a("span"),F(PL.$$.fragment),bzo=l(),Rhe=a("span"),vzo=o("AutoModelForImageClassification"),lqe=l(),jo=a("div"),F(BL.$$.fragment),Fzo=l(),ad=a("p"),Tzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kV=a("a"),Mzo=o("from_pretrained()"),Ezo=o(" class method or the "),SV=a("a"),Czo=o("from_config()"),wzo=o(` class
method.`),Azo=l(),IL=a("p"),yzo=o("This class cannot be instantiated directly using "),Phe=a("code"),Lzo=o("__init__()"),xzo=o(" (throws an error)."),$zo=l(),ht=a("div"),F(qL.$$.fragment),kzo=l(),Bhe=a("p"),Szo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rzo=l(),nd=a("p"),Pzo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),Bzo=o("not"),Izo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),qzo=o("from_pretrained()"),Nzo=o(" to load the model weights."),jzo=l(),F(G1.$$.fragment),Dzo=l(),lo=a("div"),F(NL.$$.fragment),Gzo=l(),qhe=a("p"),Ozo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vzo=l(),ja=a("p"),Xzo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),zzo=o("model_type"),Wzo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),Qzo=o("pretrained_model_name_or_path"),Hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(":"),Yzo=l(),Fe=a("ul"),O1=a("li"),Ghe=a("strong"),Kzo=o("beit"),Zzo=o(" \u2014 "),PV=a("a"),eWo=o("BeitForImageClassification"),oWo=o(" (BEiT model)"),rWo=l(),V1=a("li"),Ohe=a("strong"),tWo=o("convnext"),aWo=o(" \u2014 "),BV=a("a"),nWo=o("ConvNextForImageClassification"),sWo=o(" (ConvNext model)"),lWo=l(),X1=a("li"),Vhe=a("strong"),iWo=o("data2vec-vision"),dWo=o(" \u2014 "),IV=a("a"),cWo=o("Data2VecVisionForImageClassification"),mWo=o(" (Data2VecVision model)"),fWo=l(),Ps=a("li"),Xhe=a("strong"),gWo=o("deit"),hWo=o(" \u2014 "),qV=a("a"),uWo=o("DeiTForImageClassification"),pWo=o(" or "),NV=a("a"),_Wo=o("DeiTForImageClassificationWithTeacher"),bWo=o(" (DeiT model)"),vWo=l(),z1=a("li"),zhe=a("strong"),FWo=o("imagegpt"),TWo=o(" \u2014 "),jV=a("a"),MWo=o("ImageGPTForImageClassification"),EWo=o(" (ImageGPT model)"),CWo=l(),ut=a("li"),Whe=a("strong"),wWo=o("perceiver"),AWo=o(" \u2014 "),DV=a("a"),yWo=o("PerceiverForImageClassificationLearned"),LWo=o(" or "),GV=a("a"),xWo=o("PerceiverForImageClassificationFourier"),$Wo=o(" or "),OV=a("a"),kWo=o("PerceiverForImageClassificationConvProcessing"),SWo=o(" (Perceiver model)"),RWo=l(),W1=a("li"),Qhe=a("strong"),PWo=o("poolformer"),BWo=o(" \u2014 "),VV=a("a"),IWo=o("PoolFormerForImageClassification"),qWo=o(" (PoolFormer model)"),NWo=l(),Q1=a("li"),Hhe=a("strong"),jWo=o("regnet"),DWo=o(" \u2014 "),XV=a("a"),GWo=o("RegNetForImageClassification"),OWo=o(" (RegNet model)"),VWo=l(),H1=a("li"),Uhe=a("strong"),XWo=o("resnet"),zWo=o(" \u2014 "),zV=a("a"),WWo=o("ResNetForImageClassification"),QWo=o(" (ResNet model)"),HWo=l(),U1=a("li"),Jhe=a("strong"),UWo=o("segformer"),JWo=o(" \u2014 "),WV=a("a"),YWo=o("SegformerForImageClassification"),KWo=o(" (SegFormer model)"),ZWo=l(),J1=a("li"),Yhe=a("strong"),eQo=o("swin"),oQo=o(" \u2014 "),QV=a("a"),rQo=o("SwinForImageClassification"),tQo=o(" (Swin model)"),aQo=l(),Y1=a("li"),Khe=a("strong"),nQo=o("van"),sQo=o(" \u2014 "),HV=a("a"),lQo=o("VanForImageClassification"),iQo=o(" (VAN model)"),dQo=l(),K1=a("li"),Zhe=a("strong"),cQo=o("vit"),mQo=o(" \u2014 "),UV=a("a"),fQo=o("ViTForImageClassification"),gQo=o(" (ViT model)"),hQo=l(),Z1=a("p"),uQo=o("The model is set in evaluation mode by default using "),eue=a("code"),pQo=o("model.eval()"),_Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=a("code"),bQo=o("model.train()"),vQo=l(),F(eT.$$.fragment),iqe=l(),sd=a("h2"),oT=a("a"),rue=a("span"),F(jL.$$.fragment),FQo=l(),tue=a("span"),TQo=o("AutoModelForVision2Seq"),dqe=l(),Do=a("div"),F(DL.$$.fragment),MQo=l(),ld=a("p"),EQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JV=a("a"),CQo=o("from_pretrained()"),wQo=o(" class method or the "),YV=a("a"),AQo=o("from_config()"),yQo=o(` class
method.`),LQo=l(),GL=a("p"),xQo=o("This class cannot be instantiated directly using "),aue=a("code"),$Qo=o("__init__()"),kQo=o(" (throws an error)."),SQo=l(),pt=a("div"),F(OL.$$.fragment),RQo=l(),nue=a("p"),PQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BQo=l(),id=a("p"),IQo=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),qQo=o("not"),NQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),jQo=o("from_pretrained()"),DQo=o(" to load the model weights."),GQo=l(),F(rT.$$.fragment),OQo=l(),io=a("div"),F(VL.$$.fragment),VQo=l(),lue=a("p"),XQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zQo=l(),Da=a("p"),WQo=o("The model class to instantiate is selected based on the "),iue=a("code"),QQo=o("model_type"),HQo=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),UQo=o("pretrained_model_name_or_path"),JQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),YQo=o("pretrained_model_name_or_path"),KQo=o(":"),ZQo=l(),mue=a("ul"),tT=a("li"),fue=a("strong"),eHo=o("vision-encoder-decoder"),oHo=o(" \u2014 "),ZV=a("a"),rHo=o("VisionEncoderDecoderModel"),tHo=o(" (Vision Encoder decoder model)"),aHo=l(),aT=a("p"),nHo=o("The model is set in evaluation mode by default using "),gue=a("code"),sHo=o("model.eval()"),lHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=a("code"),iHo=o("model.train()"),dHo=l(),F(nT.$$.fragment),cqe=l(),dd=a("h2"),sT=a("a"),uue=a("span"),F(XL.$$.fragment),cHo=l(),pue=a("span"),mHo=o("AutoModelForAudioClassification"),mqe=l(),Go=a("div"),F(zL.$$.fragment),fHo=l(),cd=a("p"),gHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eX=a("a"),hHo=o("from_pretrained()"),uHo=o(" class method or the "),oX=a("a"),pHo=o("from_config()"),_Ho=o(` class
method.`),bHo=l(),WL=a("p"),vHo=o("This class cannot be instantiated directly using "),_ue=a("code"),FHo=o("__init__()"),THo=o(" (throws an error)."),MHo=l(),_t=a("div"),F(QL.$$.fragment),EHo=l(),bue=a("p"),CHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wHo=l(),md=a("p"),AHo=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),yHo=o("not"),LHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),xHo=o("from_pretrained()"),$Ho=o(" to load the model weights."),kHo=l(),F(lT.$$.fragment),SHo=l(),co=a("div"),F(HL.$$.fragment),RHo=l(),Fue=a("p"),PHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),BHo=l(),Ga=a("p"),IHo=o("The model class to instantiate is selected based on the "),Tue=a("code"),qHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),GHo=o("pretrained_model_name_or_path"),OHo=o(":"),VHo=l(),ke=a("ul"),iT=a("li"),Cue=a("strong"),XHo=o("data2vec-audio"),zHo=o(" \u2014 "),tX=a("a"),WHo=o("Data2VecAudioForSequenceClassification"),QHo=o(" (Data2VecAudio model)"),HHo=l(),dT=a("li"),wue=a("strong"),UHo=o("hubert"),JHo=o(" \u2014 "),aX=a("a"),YHo=o("HubertForSequenceClassification"),KHo=o(" (Hubert model)"),ZHo=l(),cT=a("li"),Aue=a("strong"),eUo=o("sew"),oUo=o(" \u2014 "),nX=a("a"),rUo=o("SEWForSequenceClassification"),tUo=o(" (SEW model)"),aUo=l(),mT=a("li"),yue=a("strong"),nUo=o("sew-d"),sUo=o(" \u2014 "),sX=a("a"),lUo=o("SEWDForSequenceClassification"),iUo=o(" (SEW-D model)"),dUo=l(),fT=a("li"),Lue=a("strong"),cUo=o("unispeech"),mUo=o(" \u2014 "),lX=a("a"),fUo=o("UniSpeechForSequenceClassification"),gUo=o(" (UniSpeech model)"),hUo=l(),gT=a("li"),xue=a("strong"),uUo=o("unispeech-sat"),pUo=o(" \u2014 "),iX=a("a"),_Uo=o("UniSpeechSatForSequenceClassification"),bUo=o(" (UniSpeechSat model)"),vUo=l(),hT=a("li"),$ue=a("strong"),FUo=o("wav2vec2"),TUo=o(" \u2014 "),dX=a("a"),MUo=o("Wav2Vec2ForSequenceClassification"),EUo=o(" (Wav2Vec2 model)"),CUo=l(),uT=a("li"),kue=a("strong"),wUo=o("wav2vec2-conformer"),AUo=o(" \u2014 "),cX=a("a"),yUo=o("Wav2Vec2ConformerForSequenceClassification"),LUo=o(" (Wav2Vec2-Conformer model)"),xUo=l(),pT=a("li"),Sue=a("strong"),$Uo=o("wavlm"),kUo=o(" \u2014 "),mX=a("a"),SUo=o("WavLMForSequenceClassification"),RUo=o(" (WavLM model)"),PUo=l(),_T=a("p"),BUo=o("The model is set in evaluation mode by default using "),Rue=a("code"),IUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),NUo=o("model.train()"),jUo=l(),F(bT.$$.fragment),fqe=l(),fd=a("h2"),vT=a("a"),Bue=a("span"),F(UL.$$.fragment),DUo=l(),Iue=a("span"),GUo=o("AutoModelForAudioFrameClassification"),gqe=l(),Oo=a("div"),F(JL.$$.fragment),OUo=l(),gd=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),fX=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),gX=a("a"),WUo=o("from_config()"),QUo=o(` class
method.`),HUo=l(),YL=a("p"),UUo=o("This class cannot be instantiated directly using "),que=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),bt=a("div"),F(KL.$$.fragment),ZUo=l(),Nue=a("p"),eJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oJo=l(),hd=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(FT.$$.fragment),iJo=l(),mo=a("div"),F(ZL.$$.fragment),dJo=l(),Due=a("p"),cJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mJo=l(),Oa=a("p"),fJo=o("The model class to instantiate is selected based on the "),Gue=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),uJo=o("pretrained_model_name_or_path"),pJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),_Jo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),Kr=a("ul"),TT=a("li"),Xue=a("strong"),FJo=o("data2vec-audio"),TJo=o(" \u2014 "),uX=a("a"),MJo=o("Data2VecAudioForAudioFrameClassification"),EJo=o(" (Data2VecAudio model)"),CJo=l(),MT=a("li"),zue=a("strong"),wJo=o("unispeech-sat"),AJo=o(" \u2014 "),pX=a("a"),yJo=o("UniSpeechSatForAudioFrameClassification"),LJo=o(" (UniSpeechSat model)"),xJo=l(),ET=a("li"),Wue=a("strong"),$Jo=o("wav2vec2"),kJo=o(" \u2014 "),_X=a("a"),SJo=o("Wav2Vec2ForAudioFrameClassification"),RJo=o(" (Wav2Vec2 model)"),PJo=l(),CT=a("li"),Que=a("strong"),BJo=o("wav2vec2-conformer"),IJo=o(" \u2014 "),bX=a("a"),qJo=o("Wav2Vec2ConformerForAudioFrameClassification"),NJo=o(" (Wav2Vec2-Conformer model)"),jJo=l(),wT=a("li"),Hue=a("strong"),DJo=o("wavlm"),GJo=o(" \u2014 "),vX=a("a"),OJo=o("WavLMForAudioFrameClassification"),VJo=o(" (WavLM model)"),XJo=l(),AT=a("p"),zJo=o("The model is set in evaluation mode by default using "),Uue=a("code"),WJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=a("code"),HJo=o("model.train()"),UJo=l(),F(yT.$$.fragment),hqe=l(),ud=a("h2"),LT=a("a"),Yue=a("span"),F(e8.$$.fragment),JJo=l(),Kue=a("span"),YJo=o("AutoModelForCTC"),uqe=l(),Vo=a("div"),F(o8.$$.fragment),KJo=l(),pd=a("p"),ZJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FX=a("a"),eYo=o("from_pretrained()"),oYo=o(" class method or the "),TX=a("a"),rYo=o("from_config()"),tYo=o(` class
method.`),aYo=l(),r8=a("p"),nYo=o("This class cannot be instantiated directly using "),Zue=a("code"),sYo=o("__init__()"),lYo=o(" (throws an error)."),iYo=l(),vt=a("div"),F(t8.$$.fragment),dYo=l(),epe=a("p"),cYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mYo=l(),_d=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),ope=a("strong"),gYo=o("not"),hYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),uYo=o("from_pretrained()"),pYo=o(" to load the model weights."),_Yo=l(),F(xT.$$.fragment),bYo=l(),fo=a("div"),F(a8.$$.fragment),vYo=l(),rpe=a("p"),FYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),TYo=l(),Va=a("p"),MYo=o("The model class to instantiate is selected based on the "),tpe=a("code"),EYo=o("model_type"),CYo=o(` property of the config object (either
passed as an argument or loaded from `),ape=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(":"),xYo=l(),Se=a("ul"),$T=a("li"),spe=a("strong"),$Yo=o("data2vec-audio"),kYo=o(" \u2014 "),EX=a("a"),SYo=o("Data2VecAudioForCTC"),RYo=o(" (Data2VecAudio model)"),PYo=l(),kT=a("li"),lpe=a("strong"),BYo=o("hubert"),IYo=o(" \u2014 "),CX=a("a"),qYo=o("HubertForCTC"),NYo=o(" (Hubert model)"),jYo=l(),ST=a("li"),ipe=a("strong"),DYo=o("sew"),GYo=o(" \u2014 "),wX=a("a"),OYo=o("SEWForCTC"),VYo=o(" (SEW model)"),XYo=l(),RT=a("li"),dpe=a("strong"),zYo=o("sew-d"),WYo=o(" \u2014 "),AX=a("a"),QYo=o("SEWDForCTC"),HYo=o(" (SEW-D model)"),UYo=l(),PT=a("li"),cpe=a("strong"),JYo=o("unispeech"),YYo=o(" \u2014 "),yX=a("a"),KYo=o("UniSpeechForCTC"),ZYo=o(" (UniSpeech model)"),eKo=l(),BT=a("li"),mpe=a("strong"),oKo=o("unispeech-sat"),rKo=o(" \u2014 "),LX=a("a"),tKo=o("UniSpeechSatForCTC"),aKo=o(" (UniSpeechSat model)"),nKo=l(),IT=a("li"),fpe=a("strong"),sKo=o("wav2vec2"),lKo=o(" \u2014 "),xX=a("a"),iKo=o("Wav2Vec2ForCTC"),dKo=o(" (Wav2Vec2 model)"),cKo=l(),qT=a("li"),gpe=a("strong"),mKo=o("wav2vec2-conformer"),fKo=o(" \u2014 "),$X=a("a"),gKo=o("Wav2Vec2ConformerForCTC"),hKo=o(" (Wav2Vec2-Conformer model)"),uKo=l(),NT=a("li"),hpe=a("strong"),pKo=o("wavlm"),_Ko=o(" \u2014 "),kX=a("a"),bKo=o("WavLMForCTC"),vKo=o(" (WavLM model)"),FKo=l(),jT=a("p"),TKo=o("The model is set in evaluation mode by default using "),upe=a("code"),MKo=o("model.eval()"),EKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),CKo=o("model.train()"),wKo=l(),F(DT.$$.fragment),pqe=l(),bd=a("h2"),GT=a("a"),_pe=a("span"),F(n8.$$.fragment),AKo=l(),bpe=a("span"),yKo=o("AutoModelForSpeechSeq2Seq"),_qe=l(),Xo=a("div"),F(s8.$$.fragment),LKo=l(),vd=a("p"),xKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SX=a("a"),$Ko=o("from_pretrained()"),kKo=o(" class method or the "),RX=a("a"),SKo=o("from_config()"),RKo=o(` class
method.`),PKo=l(),l8=a("p"),BKo=o("This class cannot be instantiated directly using "),vpe=a("code"),IKo=o("__init__()"),qKo=o(" (throws an error)."),NKo=l(),Ft=a("div"),F(i8.$$.fragment),jKo=l(),Fpe=a("p"),DKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GKo=l(),Fd=a("p"),OKo=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),VKo=o("not"),XKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),zKo=o("from_pretrained()"),WKo=o(" to load the model weights."),QKo=l(),F(OT.$$.fragment),HKo=l(),go=a("div"),F(d8.$$.fragment),UKo=l(),Mpe=a("p"),JKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YKo=l(),Xa=a("p"),KKo=o("The model class to instantiate is selected based on the "),Epe=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),c8=a("ul"),VT=a("li"),Ape=a("strong"),sZo=o("speech-encoder-decoder"),lZo=o(" \u2014 "),BX=a("a"),iZo=o("SpeechEncoderDecoderModel"),dZo=o(" (Speech Encoder decoder model)"),cZo=l(),XT=a("li"),ype=a("strong"),mZo=o("speech_to_text"),fZo=o(" \u2014 "),IX=a("a"),gZo=o("Speech2TextForConditionalGeneration"),hZo=o(" (Speech2Text model)"),uZo=l(),zT=a("p"),pZo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),_Zo=o("model.eval()"),bZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),vZo=o("model.train()"),FZo=l(),F(WT.$$.fragment),bqe=l(),Td=a("h2"),QT=a("a"),$pe=a("span"),F(m8.$$.fragment),TZo=l(),kpe=a("span"),MZo=o("AutoModelForAudioXVector"),vqe=l(),zo=a("div"),F(f8.$$.fragment),EZo=l(),Md=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qX=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),NX=a("a"),yZo=o("from_config()"),LZo=o(` class
method.`),xZo=l(),g8=a("p"),$Zo=o("This class cannot be instantiated directly using "),Spe=a("code"),kZo=o("__init__()"),SZo=o(" (throws an error)."),RZo=l(),Tt=a("div"),F(h8.$$.fragment),PZo=l(),Rpe=a("p"),BZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),IZo=l(),Ed=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),NZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),F(HT.$$.fragment),VZo=l(),ho=a("div"),F(u8.$$.fragment),XZo=l(),Bpe=a("p"),zZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),WZo=l(),za=a("p"),QZo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),HZo=o("model_type"),UZo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(":"),eer=l(),Zr=a("ul"),UT=a("li"),jpe=a("strong"),oer=o("data2vec-audio"),rer=o(" \u2014 "),DX=a("a"),ter=o("Data2VecAudioForXVector"),aer=o(" (Data2VecAudio model)"),ner=l(),JT=a("li"),Dpe=a("strong"),ser=o("unispeech-sat"),ler=o(" \u2014 "),GX=a("a"),ier=o("UniSpeechSatForXVector"),der=o(" (UniSpeechSat model)"),cer=l(),YT=a("li"),Gpe=a("strong"),mer=o("wav2vec2"),fer=o(" \u2014 "),OX=a("a"),ger=o("Wav2Vec2ForXVector"),her=o(" (Wav2Vec2 model)"),uer=l(),KT=a("li"),Ope=a("strong"),per=o("wav2vec2-conformer"),_er=o(" \u2014 "),VX=a("a"),ber=o("Wav2Vec2ConformerForXVector"),ver=o(" (Wav2Vec2-Conformer model)"),Fer=l(),ZT=a("li"),Vpe=a("strong"),Ter=o("wavlm"),Mer=o(" \u2014 "),XX=a("a"),Eer=o("WavLMForXVector"),Cer=o(" (WavLM model)"),wer=l(),eM=a("p"),Aer=o("The model is set in evaluation mode by default using "),Xpe=a("code"),yer=o("model.eval()"),Ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),xer=o("model.train()"),$er=l(),F(oM.$$.fragment),Fqe=l(),Cd=a("h2"),rM=a("a"),Wpe=a("span"),F(p8.$$.fragment),ker=l(),Qpe=a("span"),Ser=o("AutoModelForMaskedImageModeling"),Tqe=l(),Wo=a("div"),F(_8.$$.fragment),Rer=l(),wd=a("p"),Per=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zX=a("a"),Ber=o("from_pretrained()"),Ier=o(" class method or the "),WX=a("a"),qer=o("from_config()"),Ner=o(` class
method.`),jer=l(),b8=a("p"),Der=o("This class cannot be instantiated directly using "),Hpe=a("code"),Ger=o("__init__()"),Oer=o(" (throws an error)."),Ver=l(),Mt=a("div"),F(v8.$$.fragment),Xer=l(),Upe=a("p"),zer=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wer=l(),Ad=a("p"),Qer=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),Her=o("not"),Uer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Jer=o("from_pretrained()"),Yer=o(" to load the model weights."),Ker=l(),F(tM.$$.fragment),Zer=l(),uo=a("div"),F(F8.$$.fragment),eor=l(),Ype=a("p"),oor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ror=l(),Wa=a("p"),tor=o("The model class to instantiate is selected based on the "),Kpe=a("code"),aor=o("model_type"),nor=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),sor=o("pretrained_model_name_or_path"),lor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(":"),cor=l(),yd=a("ul"),aM=a("li"),o_e=a("strong"),mor=o("deit"),gor=o(" \u2014 "),HX=a("a"),hor=o("DeiTForMaskedImageModeling"),uor=o(" (DeiT model)"),por=l(),nM=a("li"),r_e=a("strong"),_or=o("swin"),bor=o(" \u2014 "),UX=a("a"),vor=o("SwinForMaskedImageModeling"),For=o(" (Swin model)"),Tor=l(),sM=a("li"),t_e=a("strong"),Mor=o("vit"),Eor=o(" \u2014 "),JX=a("a"),Cor=o("ViTForMaskedImageModeling"),wor=o(" (ViT model)"),Aor=l(),lM=a("p"),yor=o("The model is set in evaluation mode by default using "),a_e=a("code"),Lor=o("model.eval()"),xor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),$or=o("model.train()"),kor=l(),F(iM.$$.fragment),Mqe=l(),Ld=a("h2"),dM=a("a"),s_e=a("span"),F(T8.$$.fragment),Sor=l(),l_e=a("span"),Ror=o("AutoModelForObjectDetection"),Eqe=l(),Qo=a("div"),F(M8.$$.fragment),Por=l(),xd=a("p"),Bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YX=a("a"),Ior=o("from_pretrained()"),qor=o(" class method or the "),KX=a("a"),Nor=o("from_config()"),jor=o(` class
method.`),Dor=l(),E8=a("p"),Gor=o("This class cannot be instantiated directly using "),i_e=a("code"),Oor=o("__init__()"),Vor=o(" (throws an error)."),Xor=l(),Et=a("div"),F(C8.$$.fragment),zor=l(),d_e=a("p"),Wor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qor=l(),$d=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Yor=o("from_pretrained()"),Kor=o(" to load the model weights."),Zor=l(),F(cM.$$.fragment),err=l(),po=a("div"),F(w8.$$.fragment),orr=l(),m_e=a("p"),rrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),trr=l(),Qa=a("p"),arr=o("The model class to instantiate is selected based on the "),f_e=a("code"),nrr=o("model_type"),srr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(":"),mrr=l(),A8=a("ul"),mM=a("li"),u_e=a("strong"),frr=o("detr"),grr=o(" \u2014 "),ez=a("a"),hrr=o("DetrForObjectDetection"),urr=o(" (DETR model)"),prr=l(),fM=a("li"),p_e=a("strong"),_rr=o("yolos"),brr=o(" \u2014 "),oz=a("a"),vrr=o("YolosForObjectDetection"),Frr=o(" (YOLOS model)"),Trr=l(),gM=a("p"),Mrr=o("The model is set in evaluation mode by default using "),__e=a("code"),Err=o("model.eval()"),Crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=a("code"),wrr=o("model.train()"),Arr=l(),F(hM.$$.fragment),Cqe=l(),kd=a("h2"),uM=a("a"),v_e=a("span"),F(y8.$$.fragment),yrr=l(),F_e=a("span"),Lrr=o("AutoModelForImageSegmentation"),wqe=l(),Ho=a("div"),F(L8.$$.fragment),xrr=l(),Sd=a("p"),$rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rz=a("a"),krr=o("from_pretrained()"),Srr=o(" class method or the "),tz=a("a"),Rrr=o("from_config()"),Prr=o(` class
method.`),Brr=l(),x8=a("p"),Irr=o("This class cannot be instantiated directly using "),T_e=a("code"),qrr=o("__init__()"),Nrr=o(" (throws an error)."),jrr=l(),Ct=a("div"),F($8.$$.fragment),Drr=l(),M_e=a("p"),Grr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Orr=l(),Rd=a("p"),Vrr=o(`Note:
Loading a model from its configuration file does `),E_e=a("strong"),Xrr=o("not"),zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),Wrr=o("from_pretrained()"),Qrr=o(" to load the model weights."),Hrr=l(),F(pM.$$.fragment),Urr=l(),_o=a("div"),F(k8.$$.fragment),Jrr=l(),C_e=a("p"),Yrr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Krr=l(),Ha=a("p"),Zrr=o("The model class to instantiate is selected based on the "),w_e=a("code"),etr=o("model_type"),otr=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(":"),str=l(),L_e=a("ul"),_M=a("li"),x_e=a("strong"),ltr=o("detr"),itr=o(" \u2014 "),nz=a("a"),dtr=o("DetrForSegmentation"),ctr=o(" (DETR model)"),mtr=l(),bM=a("p"),ftr=o("The model is set in evaluation mode by default using "),$_e=a("code"),gtr=o("model.eval()"),htr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),utr=o("model.train()"),ptr=l(),F(vM.$$.fragment),Aqe=l(),Pd=a("h2"),FM=a("a"),S_e=a("span"),F(S8.$$.fragment),_tr=l(),R_e=a("span"),btr=o("AutoModelForSemanticSegmentation"),yqe=l(),Uo=a("div"),F(R8.$$.fragment),vtr=l(),Bd=a("p"),Ftr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sz=a("a"),Ttr=o("from_pretrained()"),Mtr=o(" class method or the "),lz=a("a"),Etr=o("from_config()"),Ctr=o(` class
method.`),wtr=l(),P8=a("p"),Atr=o("This class cannot be instantiated directly using "),P_e=a("code"),ytr=o("__init__()"),Ltr=o(" (throws an error)."),xtr=l(),wt=a("div"),F(B8.$$.fragment),$tr=l(),B_e=a("p"),ktr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Str=l(),Id=a("p"),Rtr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),Ptr=o("not"),Btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),Itr=o("from_pretrained()"),qtr=o(" to load the model weights."),Ntr=l(),F(TM.$$.fragment),jtr=l(),bo=a("div"),F(I8.$$.fragment),Dtr=l(),q_e=a("p"),Gtr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Otr=l(),Ua=a("p"),Vtr=o("The model class to instantiate is selected based on the "),N_e=a("code"),Xtr=o("model_type"),ztr=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),Wtr=o("pretrained_model_name_or_path"),Qtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(":"),Jtr=l(),Ja=a("ul"),MM=a("li"),G_e=a("strong"),Ytr=o("beit"),Ktr=o(" \u2014 "),dz=a("a"),Ztr=o("BeitForSemanticSegmentation"),ear=o(" (BEiT model)"),oar=l(),EM=a("li"),O_e=a("strong"),rar=o("data2vec-vision"),tar=o(" \u2014 "),cz=a("a"),aar=o("Data2VecVisionForSemanticSegmentation"),nar=o(" (Data2VecVision model)"),sar=l(),CM=a("li"),V_e=a("strong"),lar=o("dpt"),iar=o(" \u2014 "),mz=a("a"),dar=o("DPTForSemanticSegmentation"),car=o(" (DPT model)"),mar=l(),wM=a("li"),X_e=a("strong"),far=o("segformer"),gar=o(" \u2014 "),fz=a("a"),har=o("SegformerForSemanticSegmentation"),uar=o(" (SegFormer model)"),par=l(),AM=a("p"),_ar=o("The model is set in evaluation mode by default using "),z_e=a("code"),bar=o("model.eval()"),Far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),Tar=o("model.train()"),Mar=l(),F(yM.$$.fragment),Lqe=l(),qd=a("h2"),LM=a("a"),Q_e=a("span"),F(q8.$$.fragment),Ear=l(),H_e=a("span"),Car=o("AutoModelForInstanceSegmentation"),xqe=l(),Jo=a("div"),F(N8.$$.fragment),war=l(),Nd=a("p"),Aar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gz=a("a"),yar=o("from_pretrained()"),Lar=o(" class method or the "),hz=a("a"),xar=o("from_config()"),$ar=o(` class
method.`),kar=l(),j8=a("p"),Sar=o("This class cannot be instantiated directly using "),U_e=a("code"),Rar=o("__init__()"),Par=o(" (throws an error)."),Bar=l(),At=a("div"),F(D8.$$.fragment),Iar=l(),J_e=a("p"),qar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nar=l(),jd=a("p"),jar=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Dar=o("not"),Gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),Oar=o("from_pretrained()"),Var=o(" to load the model weights."),Xar=l(),F(xM.$$.fragment),zar=l(),vo=a("div"),F(G8.$$.fragment),War=l(),K_e=a("p"),Qar=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Har=l(),Ya=a("p"),Uar=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Jar=o("model_type"),Yar=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),Kar=o("pretrained_model_name_or_path"),Zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(":"),rnr=l(),rbe=a("ul"),$M=a("li"),tbe=a("strong"),tnr=o("maskformer"),anr=o(" \u2014 "),pz=a("a"),nnr=o("MaskFormerForInstanceSegmentation"),snr=o(" (MaskFormer model)"),lnr=l(),kM=a("p"),inr=o("The model is set in evaluation mode by default using "),abe=a("code"),dnr=o("model.eval()"),cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=a("code"),mnr=o("model.train()"),fnr=l(),F(SM.$$.fragment),$qe=l(),Dd=a("h2"),RM=a("a"),sbe=a("span"),F(O8.$$.fragment),gnr=l(),lbe=a("span"),hnr=o("TFAutoModel"),kqe=l(),Yo=a("div"),F(V8.$$.fragment),unr=l(),Gd=a("p"),pnr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_z=a("a"),_nr=o("from_pretrained()"),bnr=o(" class method or the "),bz=a("a"),vnr=o("from_config()"),Fnr=o(` class
method.`),Tnr=l(),X8=a("p"),Mnr=o("This class cannot be instantiated directly using "),ibe=a("code"),Enr=o("__init__()"),Cnr=o(" (throws an error)."),wnr=l(),yt=a("div"),F(z8.$$.fragment),Anr=l(),dbe=a("p"),ynr=o("Instantiates one of the base model classes of the library from a configuration."),Lnr=l(),Od=a("p"),xnr=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),$nr=o("not"),knr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Snr=o("from_pretrained()"),Rnr=o(" to load the model weights."),Pnr=l(),F(PM.$$.fragment),Bnr=l(),wr=a("div"),F(W8.$$.fragment),Inr=l(),mbe=a("p"),qnr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nnr=l(),Ka=a("p"),jnr=o("The model class to instantiate is selected based on the "),fbe=a("code"),Dnr=o("model_type"),Gnr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),Onr=o("pretrained_model_name_or_path"),Vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(":"),Wnr=l(),N=a("ul"),BM=a("li"),ube=a("strong"),Qnr=o("albert"),Hnr=o(" \u2014 "),Fz=a("a"),Unr=o("TFAlbertModel"),Jnr=o(" (ALBERT model)"),Ynr=l(),IM=a("li"),pbe=a("strong"),Knr=o("bart"),Znr=o(" \u2014 "),Tz=a("a"),esr=o("TFBartModel"),osr=o(" (BART model)"),rsr=l(),qM=a("li"),_be=a("strong"),tsr=o("bert"),asr=o(" \u2014 "),Mz=a("a"),nsr=o("TFBertModel"),ssr=o(" (BERT model)"),lsr=l(),NM=a("li"),bbe=a("strong"),isr=o("blenderbot"),dsr=o(" \u2014 "),Ez=a("a"),csr=o("TFBlenderbotModel"),msr=o(" (Blenderbot model)"),fsr=l(),jM=a("li"),vbe=a("strong"),gsr=o("blenderbot-small"),hsr=o(" \u2014 "),Cz=a("a"),usr=o("TFBlenderbotSmallModel"),psr=o(" (BlenderbotSmall model)"),_sr=l(),DM=a("li"),Fbe=a("strong"),bsr=o("camembert"),vsr=o(" \u2014 "),wz=a("a"),Fsr=o("TFCamembertModel"),Tsr=o(" (CamemBERT model)"),Msr=l(),GM=a("li"),Tbe=a("strong"),Esr=o("clip"),Csr=o(" \u2014 "),Az=a("a"),wsr=o("TFCLIPModel"),Asr=o(" (CLIP model)"),ysr=l(),OM=a("li"),Mbe=a("strong"),Lsr=o("convbert"),xsr=o(" \u2014 "),yz=a("a"),$sr=o("TFConvBertModel"),ksr=o(" (ConvBERT model)"),Ssr=l(),VM=a("li"),Ebe=a("strong"),Rsr=o("convnext"),Psr=o(" \u2014 "),Lz=a("a"),Bsr=o("TFConvNextModel"),Isr=o(" (ConvNext model)"),qsr=l(),XM=a("li"),Cbe=a("strong"),Nsr=o("ctrl"),jsr=o(" \u2014 "),xz=a("a"),Dsr=o("TFCTRLModel"),Gsr=o(" (CTRL model)"),Osr=l(),zM=a("li"),wbe=a("strong"),Vsr=o("data2vec-vision"),Xsr=o(" \u2014 "),$z=a("a"),zsr=o("TFData2VecVisionModel"),Wsr=o(" (Data2VecVision model)"),Qsr=l(),WM=a("li"),Abe=a("strong"),Hsr=o("deberta"),Usr=o(" \u2014 "),kz=a("a"),Jsr=o("TFDebertaModel"),Ysr=o(" (DeBERTa model)"),Ksr=l(),QM=a("li"),ybe=a("strong"),Zsr=o("deberta-v2"),elr=o(" \u2014 "),Sz=a("a"),olr=o("TFDebertaV2Model"),rlr=o(" (DeBERTa-v2 model)"),tlr=l(),HM=a("li"),Lbe=a("strong"),alr=o("distilbert"),nlr=o(" \u2014 "),Rz=a("a"),slr=o("TFDistilBertModel"),llr=o(" (DistilBERT model)"),ilr=l(),UM=a("li"),xbe=a("strong"),dlr=o("dpr"),clr=o(" \u2014 "),Pz=a("a"),mlr=o("TFDPRQuestionEncoder"),flr=o(" (DPR model)"),glr=l(),JM=a("li"),$be=a("strong"),hlr=o("electra"),ulr=o(" \u2014 "),Bz=a("a"),plr=o("TFElectraModel"),_lr=o(" (ELECTRA model)"),blr=l(),YM=a("li"),kbe=a("strong"),vlr=o("flaubert"),Flr=o(" \u2014 "),Iz=a("a"),Tlr=o("TFFlaubertModel"),Mlr=o(" (FlauBERT model)"),Elr=l(),Bs=a("li"),Sbe=a("strong"),Clr=o("funnel"),wlr=o(" \u2014 "),qz=a("a"),Alr=o("TFFunnelModel"),ylr=o(" or "),Nz=a("a"),Llr=o("TFFunnelBaseModel"),xlr=o(" (Funnel Transformer model)"),$lr=l(),KM=a("li"),Rbe=a("strong"),klr=o("gpt2"),Slr=o(" \u2014 "),jz=a("a"),Rlr=o("TFGPT2Model"),Plr=o(" (OpenAI GPT-2 model)"),Blr=l(),ZM=a("li"),Pbe=a("strong"),Ilr=o("gptj"),qlr=o(" \u2014 "),Dz=a("a"),Nlr=o("TFGPTJModel"),jlr=o(" (GPT-J model)"),Dlr=l(),e4=a("li"),Bbe=a("strong"),Glr=o("hubert"),Olr=o(" \u2014 "),Gz=a("a"),Vlr=o("TFHubertModel"),Xlr=o(" (Hubert model)"),zlr=l(),o4=a("li"),Ibe=a("strong"),Wlr=o("layoutlm"),Qlr=o(" \u2014 "),Oz=a("a"),Hlr=o("TFLayoutLMModel"),Ulr=o(" (LayoutLM model)"),Jlr=l(),r4=a("li"),qbe=a("strong"),Ylr=o("led"),Klr=o(" \u2014 "),Vz=a("a"),Zlr=o("TFLEDModel"),eir=o(" (LED model)"),oir=l(),t4=a("li"),Nbe=a("strong"),rir=o("longformer"),tir=o(" \u2014 "),Xz=a("a"),air=o("TFLongformerModel"),nir=o(" (Longformer model)"),sir=l(),a4=a("li"),jbe=a("strong"),lir=o("lxmert"),iir=o(" \u2014 "),zz=a("a"),dir=o("TFLxmertModel"),cir=o(" (LXMERT model)"),mir=l(),n4=a("li"),Dbe=a("strong"),fir=o("marian"),gir=o(" \u2014 "),Wz=a("a"),hir=o("TFMarianModel"),uir=o(" (Marian model)"),pir=l(),s4=a("li"),Gbe=a("strong"),_ir=o("mbart"),bir=o(" \u2014 "),Qz=a("a"),vir=o("TFMBartModel"),Fir=o(" (mBART model)"),Tir=l(),l4=a("li"),Obe=a("strong"),Mir=o("mobilebert"),Eir=o(" \u2014 "),Hz=a("a"),Cir=o("TFMobileBertModel"),wir=o(" (MobileBERT model)"),Air=l(),i4=a("li"),Vbe=a("strong"),yir=o("mpnet"),Lir=o(" \u2014 "),Uz=a("a"),xir=o("TFMPNetModel"),$ir=o(" (MPNet model)"),kir=l(),d4=a("li"),Xbe=a("strong"),Sir=o("mt5"),Rir=o(" \u2014 "),Jz=a("a"),Pir=o("TFMT5Model"),Bir=o(" (mT5 model)"),Iir=l(),c4=a("li"),zbe=a("strong"),qir=o("openai-gpt"),Nir=o(" \u2014 "),Yz=a("a"),jir=o("TFOpenAIGPTModel"),Dir=o(" (OpenAI GPT model)"),Gir=l(),m4=a("li"),Wbe=a("strong"),Oir=o("pegasus"),Vir=o(" \u2014 "),Kz=a("a"),Xir=o("TFPegasusModel"),zir=o(" (Pegasus model)"),Wir=l(),f4=a("li"),Qbe=a("strong"),Qir=o("rembert"),Hir=o(" \u2014 "),Zz=a("a"),Uir=o("TFRemBertModel"),Jir=o(" (RemBERT model)"),Yir=l(),g4=a("li"),Hbe=a("strong"),Kir=o("roberta"),Zir=o(" \u2014 "),eW=a("a"),edr=o("TFRobertaModel"),odr=o(" (RoBERTa model)"),rdr=l(),h4=a("li"),Ube=a("strong"),tdr=o("roformer"),adr=o(" \u2014 "),oW=a("a"),ndr=o("TFRoFormerModel"),sdr=o(" (RoFormer model)"),ldr=l(),u4=a("li"),Jbe=a("strong"),idr=o("speech_to_text"),ddr=o(" \u2014 "),rW=a("a"),cdr=o("TFSpeech2TextModel"),mdr=o(" (Speech2Text model)"),fdr=l(),p4=a("li"),Ybe=a("strong"),gdr=o("swin"),hdr=o(" \u2014 "),tW=a("a"),udr=o("TFSwinModel"),pdr=o(" (Swin model)"),_dr=l(),_4=a("li"),Kbe=a("strong"),bdr=o("t5"),vdr=o(" \u2014 "),aW=a("a"),Fdr=o("TFT5Model"),Tdr=o(" (T5 model)"),Mdr=l(),b4=a("li"),Zbe=a("strong"),Edr=o("tapas"),Cdr=o(" \u2014 "),nW=a("a"),wdr=o("TFTapasModel"),Adr=o(" (TAPAS model)"),ydr=l(),v4=a("li"),e2e=a("strong"),Ldr=o("transfo-xl"),xdr=o(" \u2014 "),sW=a("a"),$dr=o("TFTransfoXLModel"),kdr=o(" (Transformer-XL model)"),Sdr=l(),F4=a("li"),o2e=a("strong"),Rdr=o("vit"),Pdr=o(" \u2014 "),lW=a("a"),Bdr=o("TFViTModel"),Idr=o(" (ViT model)"),qdr=l(),T4=a("li"),r2e=a("strong"),Ndr=o("vit_mae"),jdr=o(" \u2014 "),iW=a("a"),Ddr=o("TFViTMAEModel"),Gdr=o(" (ViTMAE model)"),Odr=l(),M4=a("li"),t2e=a("strong"),Vdr=o("wav2vec2"),Xdr=o(" \u2014 "),dW=a("a"),zdr=o("TFWav2Vec2Model"),Wdr=o(" (Wav2Vec2 model)"),Qdr=l(),E4=a("li"),a2e=a("strong"),Hdr=o("xlm"),Udr=o(" \u2014 "),cW=a("a"),Jdr=o("TFXLMModel"),Ydr=o(" (XLM model)"),Kdr=l(),C4=a("li"),n2e=a("strong"),Zdr=o("xlm-roberta"),ecr=o(" \u2014 "),mW=a("a"),ocr=o("TFXLMRobertaModel"),rcr=o(" (XLM-RoBERTa model)"),tcr=l(),w4=a("li"),s2e=a("strong"),acr=o("xlnet"),ncr=o(" \u2014 "),fW=a("a"),scr=o("TFXLNetModel"),lcr=o(" (XLNet model)"),icr=l(),F(A4.$$.fragment),Sqe=l(),Vd=a("h2"),y4=a("a"),l2e=a("span"),F(Q8.$$.fragment),dcr=l(),i2e=a("span"),ccr=o("TFAutoModelForPreTraining"),Rqe=l(),Ko=a("div"),F(H8.$$.fragment),mcr=l(),Xd=a("p"),fcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gW=a("a"),gcr=o("from_pretrained()"),hcr=o(" class method or the "),hW=a("a"),ucr=o("from_config()"),pcr=o(` class
method.`),_cr=l(),U8=a("p"),bcr=o("This class cannot be instantiated directly using "),d2e=a("code"),vcr=o("__init__()"),Fcr=o(" (throws an error)."),Tcr=l(),Lt=a("div"),F(J8.$$.fragment),Mcr=l(),c2e=a("p"),Ecr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ccr=l(),zd=a("p"),wcr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),Acr=o("not"),ycr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),Lcr=o("from_pretrained()"),xcr=o(" to load the model weights."),$cr=l(),F(L4.$$.fragment),kcr=l(),Ar=a("div"),F(Y8.$$.fragment),Scr=l(),f2e=a("p"),Rcr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pcr=l(),Za=a("p"),Bcr=o("The model class to instantiate is selected based on the "),g2e=a("code"),Icr=o("model_type"),qcr=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),Ncr=o("pretrained_model_name_or_path"),jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(":"),Ocr=l(),se=a("ul"),x4=a("li"),p2e=a("strong"),Vcr=o("albert"),Xcr=o(" \u2014 "),pW=a("a"),zcr=o("TFAlbertForPreTraining"),Wcr=o(" (ALBERT model)"),Qcr=l(),$4=a("li"),_2e=a("strong"),Hcr=o("bart"),Ucr=o(" \u2014 "),_W=a("a"),Jcr=o("TFBartForConditionalGeneration"),Ycr=o(" (BART model)"),Kcr=l(),k4=a("li"),b2e=a("strong"),Zcr=o("bert"),emr=o(" \u2014 "),bW=a("a"),omr=o("TFBertForPreTraining"),rmr=o(" (BERT model)"),tmr=l(),S4=a("li"),v2e=a("strong"),amr=o("camembert"),nmr=o(" \u2014 "),vW=a("a"),smr=o("TFCamembertForMaskedLM"),lmr=o(" (CamemBERT model)"),imr=l(),R4=a("li"),F2e=a("strong"),dmr=o("ctrl"),cmr=o(" \u2014 "),FW=a("a"),mmr=o("TFCTRLLMHeadModel"),fmr=o(" (CTRL model)"),gmr=l(),P4=a("li"),T2e=a("strong"),hmr=o("distilbert"),umr=o(" \u2014 "),TW=a("a"),pmr=o("TFDistilBertForMaskedLM"),_mr=o(" (DistilBERT model)"),bmr=l(),B4=a("li"),M2e=a("strong"),vmr=o("electra"),Fmr=o(" \u2014 "),MW=a("a"),Tmr=o("TFElectraForPreTraining"),Mmr=o(" (ELECTRA model)"),Emr=l(),I4=a("li"),E2e=a("strong"),Cmr=o("flaubert"),wmr=o(" \u2014 "),EW=a("a"),Amr=o("TFFlaubertWithLMHeadModel"),ymr=o(" (FlauBERT model)"),Lmr=l(),q4=a("li"),C2e=a("strong"),xmr=o("funnel"),$mr=o(" \u2014 "),CW=a("a"),kmr=o("TFFunnelForPreTraining"),Smr=o(" (Funnel Transformer model)"),Rmr=l(),N4=a("li"),w2e=a("strong"),Pmr=o("gpt2"),Bmr=o(" \u2014 "),wW=a("a"),Imr=o("TFGPT2LMHeadModel"),qmr=o(" (OpenAI GPT-2 model)"),Nmr=l(),j4=a("li"),A2e=a("strong"),jmr=o("layoutlm"),Dmr=o(" \u2014 "),AW=a("a"),Gmr=o("TFLayoutLMForMaskedLM"),Omr=o(" (LayoutLM model)"),Vmr=l(),D4=a("li"),y2e=a("strong"),Xmr=o("lxmert"),zmr=o(" \u2014 "),yW=a("a"),Wmr=o("TFLxmertForPreTraining"),Qmr=o(" (LXMERT model)"),Hmr=l(),G4=a("li"),L2e=a("strong"),Umr=o("mobilebert"),Jmr=o(" \u2014 "),LW=a("a"),Ymr=o("TFMobileBertForPreTraining"),Kmr=o(" (MobileBERT model)"),Zmr=l(),O4=a("li"),x2e=a("strong"),efr=o("mpnet"),ofr=o(" \u2014 "),xW=a("a"),rfr=o("TFMPNetForMaskedLM"),tfr=o(" (MPNet model)"),afr=l(),V4=a("li"),$2e=a("strong"),nfr=o("openai-gpt"),sfr=o(" \u2014 "),$W=a("a"),lfr=o("TFOpenAIGPTLMHeadModel"),ifr=o(" (OpenAI GPT model)"),dfr=l(),X4=a("li"),k2e=a("strong"),cfr=o("roberta"),mfr=o(" \u2014 "),kW=a("a"),ffr=o("TFRobertaForMaskedLM"),gfr=o(" (RoBERTa model)"),hfr=l(),z4=a("li"),S2e=a("strong"),ufr=o("t5"),pfr=o(" \u2014 "),SW=a("a"),_fr=o("TFT5ForConditionalGeneration"),bfr=o(" (T5 model)"),vfr=l(),W4=a("li"),R2e=a("strong"),Ffr=o("tapas"),Tfr=o(" \u2014 "),RW=a("a"),Mfr=o("TFTapasForMaskedLM"),Efr=o(" (TAPAS model)"),Cfr=l(),Q4=a("li"),P2e=a("strong"),wfr=o("transfo-xl"),Afr=o(" \u2014 "),PW=a("a"),yfr=o("TFTransfoXLLMHeadModel"),Lfr=o(" (Transformer-XL model)"),xfr=l(),H4=a("li"),B2e=a("strong"),$fr=o("vit_mae"),kfr=o(" \u2014 "),BW=a("a"),Sfr=o("TFViTMAEForPreTraining"),Rfr=o(" (ViTMAE model)"),Pfr=l(),U4=a("li"),I2e=a("strong"),Bfr=o("xlm"),Ifr=o(" \u2014 "),IW=a("a"),qfr=o("TFXLMWithLMHeadModel"),Nfr=o(" (XLM model)"),jfr=l(),J4=a("li"),q2e=a("strong"),Dfr=o("xlm-roberta"),Gfr=o(" \u2014 "),qW=a("a"),Ofr=o("TFXLMRobertaForMaskedLM"),Vfr=o(" (XLM-RoBERTa model)"),Xfr=l(),Y4=a("li"),N2e=a("strong"),zfr=o("xlnet"),Wfr=o(" \u2014 "),NW=a("a"),Qfr=o("TFXLNetLMHeadModel"),Hfr=o(" (XLNet model)"),Ufr=l(),F(K4.$$.fragment),Pqe=l(),Wd=a("h2"),Z4=a("a"),j2e=a("span"),F(K8.$$.fragment),Jfr=l(),D2e=a("span"),Yfr=o("TFAutoModelForCausalLM"),Bqe=l(),Zo=a("div"),F(Z8.$$.fragment),Kfr=l(),Qd=a("p"),Zfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jW=a("a"),egr=o("from_pretrained()"),ogr=o(" class method or the "),DW=a("a"),rgr=o("from_config()"),tgr=o(` class
method.`),agr=l(),ex=a("p"),ngr=o("This class cannot be instantiated directly using "),G2e=a("code"),sgr=o("__init__()"),lgr=o(" (throws an error)."),igr=l(),xt=a("div"),F(ox.$$.fragment),dgr=l(),O2e=a("p"),cgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mgr=l(),Hd=a("p"),fgr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),ggr=o("not"),hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),ugr=o("from_pretrained()"),pgr=o(" to load the model weights."),_gr=l(),F(eE.$$.fragment),bgr=l(),yr=a("div"),F(rx.$$.fragment),vgr=l(),X2e=a("p"),Fgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tgr=l(),en=a("p"),Mgr=o("The model class to instantiate is selected based on the "),z2e=a("code"),Egr=o("model_type"),Cgr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),ygr=o("pretrained_model_name_or_path"),Lgr=o(":"),xgr=l(),Te=a("ul"),oE=a("li"),H2e=a("strong"),$gr=o("bert"),kgr=o(" \u2014 "),OW=a("a"),Sgr=o("TFBertLMHeadModel"),Rgr=o(" (BERT model)"),Pgr=l(),rE=a("li"),U2e=a("strong"),Bgr=o("camembert"),Igr=o(" \u2014 "),VW=a("a"),qgr=o("TFCamembertForCausalLM"),Ngr=o(" (CamemBERT model)"),jgr=l(),tE=a("li"),J2e=a("strong"),Dgr=o("ctrl"),Ggr=o(" \u2014 "),XW=a("a"),Ogr=o("TFCTRLLMHeadModel"),Vgr=o(" (CTRL model)"),Xgr=l(),aE=a("li"),Y2e=a("strong"),zgr=o("gpt2"),Wgr=o(" \u2014 "),zW=a("a"),Qgr=o("TFGPT2LMHeadModel"),Hgr=o(" (OpenAI GPT-2 model)"),Ugr=l(),nE=a("li"),K2e=a("strong"),Jgr=o("gptj"),Ygr=o(" \u2014 "),WW=a("a"),Kgr=o("TFGPTJForCausalLM"),Zgr=o(" (GPT-J model)"),ehr=l(),sE=a("li"),Z2e=a("strong"),ohr=o("openai-gpt"),rhr=o(" \u2014 "),QW=a("a"),thr=o("TFOpenAIGPTLMHeadModel"),ahr=o(" (OpenAI GPT model)"),nhr=l(),lE=a("li"),eve=a("strong"),shr=o("rembert"),lhr=o(" \u2014 "),HW=a("a"),ihr=o("TFRemBertForCausalLM"),dhr=o(" (RemBERT model)"),chr=l(),iE=a("li"),ove=a("strong"),mhr=o("roberta"),fhr=o(" \u2014 "),UW=a("a"),ghr=o("TFRobertaForCausalLM"),hhr=o(" (RoBERTa model)"),uhr=l(),dE=a("li"),rve=a("strong"),phr=o("roformer"),_hr=o(" \u2014 "),JW=a("a"),bhr=o("TFRoFormerForCausalLM"),vhr=o(" (RoFormer model)"),Fhr=l(),cE=a("li"),tve=a("strong"),Thr=o("transfo-xl"),Mhr=o(" \u2014 "),YW=a("a"),Ehr=o("TFTransfoXLLMHeadModel"),Chr=o(" (Transformer-XL model)"),whr=l(),mE=a("li"),ave=a("strong"),Ahr=o("xlm"),yhr=o(" \u2014 "),KW=a("a"),Lhr=o("TFXLMWithLMHeadModel"),xhr=o(" (XLM model)"),$hr=l(),fE=a("li"),nve=a("strong"),khr=o("xlnet"),Shr=o(" \u2014 "),ZW=a("a"),Rhr=o("TFXLNetLMHeadModel"),Phr=o(" (XLNet model)"),Bhr=l(),F(gE.$$.fragment),Iqe=l(),Ud=a("h2"),hE=a("a"),sve=a("span"),F(tx.$$.fragment),Ihr=l(),lve=a("span"),qhr=o("TFAutoModelForImageClassification"),qqe=l(),er=a("div"),F(ax.$$.fragment),Nhr=l(),Jd=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),oQ=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),nx=a("p"),zhr=o("This class cannot be instantiated directly using "),ive=a("code"),Whr=o("__init__()"),Qhr=o(" (throws an error)."),Hhr=l(),$t=a("div"),F(sx.$$.fragment),Uhr=l(),dve=a("p"),Jhr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yhr=l(),Yd=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),Zhr=o("not"),eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),our=o("from_pretrained()"),rur=o(" to load the model weights."),tur=l(),F(uE.$$.fragment),aur=l(),Lr=a("div"),F(lx.$$.fragment),nur=l(),mve=a("p"),sur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lur=l(),on=a("p"),iur=o("The model class to instantiate is selected based on the "),fve=a("code"),dur=o("model_type"),cur=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),mur=o("pretrained_model_name_or_path"),fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(":"),uur=l(),rn=a("ul"),pE=a("li"),uve=a("strong"),pur=o("convnext"),_ur=o(" \u2014 "),tQ=a("a"),bur=o("TFConvNextForImageClassification"),vur=o(" (ConvNext model)"),Fur=l(),_E=a("li"),pve=a("strong"),Tur=o("data2vec-vision"),Mur=o(" \u2014 "),aQ=a("a"),Eur=o("TFData2VecVisionForImageClassification"),Cur=o(" (Data2VecVision model)"),wur=l(),bE=a("li"),_ve=a("strong"),Aur=o("swin"),yur=o(" \u2014 "),nQ=a("a"),Lur=o("TFSwinForImageClassification"),xur=o(" (Swin model)"),$ur=l(),vE=a("li"),bve=a("strong"),kur=o("vit"),Sur=o(" \u2014 "),sQ=a("a"),Rur=o("TFViTForImageClassification"),Pur=o(" (ViT model)"),Bur=l(),F(FE.$$.fragment),Nqe=l(),Kd=a("h2"),TE=a("a"),vve=a("span"),F(ix.$$.fragment),Iur=l(),Fve=a("span"),qur=o("TFAutoModelForMaskedLM"),jqe=l(),or=a("div"),F(dx.$$.fragment),Nur=l(),Zd=a("p"),jur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lQ=a("a"),Dur=o("from_pretrained()"),Gur=o(" class method or the "),iQ=a("a"),Our=o("from_config()"),Vur=o(` class
method.`),Xur=l(),cx=a("p"),zur=o("This class cannot be instantiated directly using "),Tve=a("code"),Wur=o("__init__()"),Qur=o(" (throws an error)."),Hur=l(),kt=a("div"),F(mx.$$.fragment),Uur=l(),Mve=a("p"),Jur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yur=l(),ec=a("p"),Kur=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),Zur=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(ME.$$.fragment),apr=l(),xr=a("div"),F(fx.$$.fragment),npr=l(),Cve=a("p"),spr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lpr=l(),tn=a("p"),ipr=o("The model class to instantiate is selected based on the "),wve=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),mpr=o("pretrained_model_name_or_path"),fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),upr=l(),ie=a("ul"),EE=a("li"),Lve=a("strong"),ppr=o("albert"),_pr=o(" \u2014 "),cQ=a("a"),bpr=o("TFAlbertForMaskedLM"),vpr=o(" (ALBERT model)"),Fpr=l(),CE=a("li"),xve=a("strong"),Tpr=o("bert"),Mpr=o(" \u2014 "),mQ=a("a"),Epr=o("TFBertForMaskedLM"),Cpr=o(" (BERT model)"),wpr=l(),wE=a("li"),$ve=a("strong"),Apr=o("camembert"),ypr=o(" \u2014 "),fQ=a("a"),Lpr=o("TFCamembertForMaskedLM"),xpr=o(" (CamemBERT model)"),$pr=l(),AE=a("li"),kve=a("strong"),kpr=o("convbert"),Spr=o(" \u2014 "),gQ=a("a"),Rpr=o("TFConvBertForMaskedLM"),Ppr=o(" (ConvBERT model)"),Bpr=l(),yE=a("li"),Sve=a("strong"),Ipr=o("deberta"),qpr=o(" \u2014 "),hQ=a("a"),Npr=o("TFDebertaForMaskedLM"),jpr=o(" (DeBERTa model)"),Dpr=l(),LE=a("li"),Rve=a("strong"),Gpr=o("deberta-v2"),Opr=o(" \u2014 "),uQ=a("a"),Vpr=o("TFDebertaV2ForMaskedLM"),Xpr=o(" (DeBERTa-v2 model)"),zpr=l(),xE=a("li"),Pve=a("strong"),Wpr=o("distilbert"),Qpr=o(" \u2014 "),pQ=a("a"),Hpr=o("TFDistilBertForMaskedLM"),Upr=o(" (DistilBERT model)"),Jpr=l(),$E=a("li"),Bve=a("strong"),Ypr=o("electra"),Kpr=o(" \u2014 "),_Q=a("a"),Zpr=o("TFElectraForMaskedLM"),e_r=o(" (ELECTRA model)"),o_r=l(),kE=a("li"),Ive=a("strong"),r_r=o("flaubert"),t_r=o(" \u2014 "),bQ=a("a"),a_r=o("TFFlaubertWithLMHeadModel"),n_r=o(" (FlauBERT model)"),s_r=l(),SE=a("li"),qve=a("strong"),l_r=o("funnel"),i_r=o(" \u2014 "),vQ=a("a"),d_r=o("TFFunnelForMaskedLM"),c_r=o(" (Funnel Transformer model)"),m_r=l(),RE=a("li"),Nve=a("strong"),f_r=o("layoutlm"),g_r=o(" \u2014 "),FQ=a("a"),h_r=o("TFLayoutLMForMaskedLM"),u_r=o(" (LayoutLM model)"),p_r=l(),PE=a("li"),jve=a("strong"),__r=o("longformer"),b_r=o(" \u2014 "),TQ=a("a"),v_r=o("TFLongformerForMaskedLM"),F_r=o(" (Longformer model)"),T_r=l(),BE=a("li"),Dve=a("strong"),M_r=o("mobilebert"),E_r=o(" \u2014 "),MQ=a("a"),C_r=o("TFMobileBertForMaskedLM"),w_r=o(" (MobileBERT model)"),A_r=l(),IE=a("li"),Gve=a("strong"),y_r=o("mpnet"),L_r=o(" \u2014 "),EQ=a("a"),x_r=o("TFMPNetForMaskedLM"),$_r=o(" (MPNet model)"),k_r=l(),qE=a("li"),Ove=a("strong"),S_r=o("rembert"),R_r=o(" \u2014 "),CQ=a("a"),P_r=o("TFRemBertForMaskedLM"),B_r=o(" (RemBERT model)"),I_r=l(),NE=a("li"),Vve=a("strong"),q_r=o("roberta"),N_r=o(" \u2014 "),wQ=a("a"),j_r=o("TFRobertaForMaskedLM"),D_r=o(" (RoBERTa model)"),G_r=l(),jE=a("li"),Xve=a("strong"),O_r=o("roformer"),V_r=o(" \u2014 "),AQ=a("a"),X_r=o("TFRoFormerForMaskedLM"),z_r=o(" (RoFormer model)"),W_r=l(),DE=a("li"),zve=a("strong"),Q_r=o("tapas"),H_r=o(" \u2014 "),yQ=a("a"),U_r=o("TFTapasForMaskedLM"),J_r=o(" (TAPAS model)"),Y_r=l(),GE=a("li"),Wve=a("strong"),K_r=o("xlm"),Z_r=o(" \u2014 "),LQ=a("a"),ebr=o("TFXLMWithLMHeadModel"),obr=o(" (XLM model)"),rbr=l(),OE=a("li"),Qve=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),xQ=a("a"),nbr=o("TFXLMRobertaForMaskedLM"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),F(VE.$$.fragment),Dqe=l(),oc=a("h2"),XE=a("a"),Hve=a("span"),F(gx.$$.fragment),ibr=l(),Uve=a("span"),dbr=o("TFAutoModelForSeq2SeqLM"),Gqe=l(),rr=a("div"),F(hx.$$.fragment),cbr=l(),rc=a("p"),mbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Q=a("a"),fbr=o("from_pretrained()"),gbr=o(" class method or the "),kQ=a("a"),hbr=o("from_config()"),ubr=o(` class
method.`),pbr=l(),ux=a("p"),_br=o("This class cannot be instantiated directly using "),Jve=a("code"),bbr=o("__init__()"),vbr=o(" (throws an error)."),Fbr=l(),St=a("div"),F(px.$$.fragment),Tbr=l(),Yve=a("p"),Mbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ebr=l(),tc=a("p"),Cbr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),wbr=o("not"),Abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),ybr=o("from_pretrained()"),Lbr=o(" to load the model weights."),xbr=l(),F(zE.$$.fragment),$br=l(),$r=a("div"),F(_x.$$.fragment),kbr=l(),Zve=a("p"),Sbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rbr=l(),an=a("p"),Pbr=o("The model class to instantiate is selected based on the "),eFe=a("code"),Bbr=o("model_type"),Ibr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),qbr=o("pretrained_model_name_or_path"),Nbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(":"),Gbr=l(),ye=a("ul"),WE=a("li"),tFe=a("strong"),Obr=o("bart"),Vbr=o(" \u2014 "),RQ=a("a"),Xbr=o("TFBartForConditionalGeneration"),zbr=o(" (BART model)"),Wbr=l(),QE=a("li"),aFe=a("strong"),Qbr=o("blenderbot"),Hbr=o(" \u2014 "),PQ=a("a"),Ubr=o("TFBlenderbotForConditionalGeneration"),Jbr=o(" (Blenderbot model)"),Ybr=l(),HE=a("li"),nFe=a("strong"),Kbr=o("blenderbot-small"),Zbr=o(" \u2014 "),BQ=a("a"),e2r=o("TFBlenderbotSmallForConditionalGeneration"),o2r=o(" (BlenderbotSmall model)"),r2r=l(),UE=a("li"),sFe=a("strong"),t2r=o("encoder-decoder"),a2r=o(" \u2014 "),IQ=a("a"),n2r=o("TFEncoderDecoderModel"),s2r=o(" (Encoder decoder model)"),l2r=l(),JE=a("li"),lFe=a("strong"),i2r=o("led"),d2r=o(" \u2014 "),qQ=a("a"),c2r=o("TFLEDForConditionalGeneration"),m2r=o(" (LED model)"),f2r=l(),YE=a("li"),iFe=a("strong"),g2r=o("marian"),h2r=o(" \u2014 "),NQ=a("a"),u2r=o("TFMarianMTModel"),p2r=o(" (Marian model)"),_2r=l(),KE=a("li"),dFe=a("strong"),b2r=o("mbart"),v2r=o(" \u2014 "),jQ=a("a"),F2r=o("TFMBartForConditionalGeneration"),T2r=o(" (mBART model)"),M2r=l(),ZE=a("li"),cFe=a("strong"),E2r=o("mt5"),C2r=o(" \u2014 "),DQ=a("a"),w2r=o("TFMT5ForConditionalGeneration"),A2r=o(" (mT5 model)"),y2r=l(),eC=a("li"),mFe=a("strong"),L2r=o("pegasus"),x2r=o(" \u2014 "),GQ=a("a"),$2r=o("TFPegasusForConditionalGeneration"),k2r=o(" (Pegasus model)"),S2r=l(),oC=a("li"),fFe=a("strong"),R2r=o("t5"),P2r=o(" \u2014 "),OQ=a("a"),B2r=o("TFT5ForConditionalGeneration"),I2r=o(" (T5 model)"),q2r=l(),F(rC.$$.fragment),Oqe=l(),ac=a("h2"),tC=a("a"),gFe=a("span"),F(bx.$$.fragment),N2r=l(),hFe=a("span"),j2r=o("TFAutoModelForSequenceClassification"),Vqe=l(),tr=a("div"),F(vx.$$.fragment),D2r=l(),nc=a("p"),G2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VQ=a("a"),O2r=o("from_pretrained()"),V2r=o(" class method or the "),XQ=a("a"),X2r=o("from_config()"),z2r=o(` class
method.`),W2r=l(),Fx=a("p"),Q2r=o("This class cannot be instantiated directly using "),uFe=a("code"),H2r=o("__init__()"),U2r=o(" (throws an error)."),J2r=l(),Rt=a("div"),F(Tx.$$.fragment),Y2r=l(),pFe=a("p"),K2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z2r=l(),sc=a("p"),evr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),ovr=o("not"),rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),tvr=o("from_pretrained()"),avr=o(" to load the model weights."),nvr=l(),F(aC.$$.fragment),svr=l(),kr=a("div"),F(Mx.$$.fragment),lvr=l(),bFe=a("p"),ivr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dvr=l(),nn=a("p"),cvr=o("The model class to instantiate is selected based on the "),vFe=a("code"),mvr=o("model_type"),fvr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),gvr=o("pretrained_model_name_or_path"),hvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),uvr=o("pretrained_model_name_or_path"),pvr=o(":"),_vr=l(),ee=a("ul"),nC=a("li"),MFe=a("strong"),bvr=o("albert"),vvr=o(" \u2014 "),WQ=a("a"),Fvr=o("TFAlbertForSequenceClassification"),Tvr=o(" (ALBERT model)"),Mvr=l(),sC=a("li"),EFe=a("strong"),Evr=o("bert"),Cvr=o(" \u2014 "),QQ=a("a"),wvr=o("TFBertForSequenceClassification"),Avr=o(" (BERT model)"),yvr=l(),lC=a("li"),CFe=a("strong"),Lvr=o("camembert"),xvr=o(" \u2014 "),HQ=a("a"),$vr=o("TFCamembertForSequenceClassification"),kvr=o(" (CamemBERT model)"),Svr=l(),iC=a("li"),wFe=a("strong"),Rvr=o("convbert"),Pvr=o(" \u2014 "),UQ=a("a"),Bvr=o("TFConvBertForSequenceClassification"),Ivr=o(" (ConvBERT model)"),qvr=l(),dC=a("li"),AFe=a("strong"),Nvr=o("ctrl"),jvr=o(" \u2014 "),JQ=a("a"),Dvr=o("TFCTRLForSequenceClassification"),Gvr=o(" (CTRL model)"),Ovr=l(),cC=a("li"),yFe=a("strong"),Vvr=o("deberta"),Xvr=o(" \u2014 "),YQ=a("a"),zvr=o("TFDebertaForSequenceClassification"),Wvr=o(" (DeBERTa model)"),Qvr=l(),mC=a("li"),LFe=a("strong"),Hvr=o("deberta-v2"),Uvr=o(" \u2014 "),KQ=a("a"),Jvr=o("TFDebertaV2ForSequenceClassification"),Yvr=o(" (DeBERTa-v2 model)"),Kvr=l(),fC=a("li"),xFe=a("strong"),Zvr=o("distilbert"),eFr=o(" \u2014 "),ZQ=a("a"),oFr=o("TFDistilBertForSequenceClassification"),rFr=o(" (DistilBERT model)"),tFr=l(),gC=a("li"),$Fe=a("strong"),aFr=o("electra"),nFr=o(" \u2014 "),eH=a("a"),sFr=o("TFElectraForSequenceClassification"),lFr=o(" (ELECTRA model)"),iFr=l(),hC=a("li"),kFe=a("strong"),dFr=o("flaubert"),cFr=o(" \u2014 "),oH=a("a"),mFr=o("TFFlaubertForSequenceClassification"),fFr=o(" (FlauBERT model)"),gFr=l(),uC=a("li"),SFe=a("strong"),hFr=o("funnel"),uFr=o(" \u2014 "),rH=a("a"),pFr=o("TFFunnelForSequenceClassification"),_Fr=o(" (Funnel Transformer model)"),bFr=l(),pC=a("li"),RFe=a("strong"),vFr=o("gpt2"),FFr=o(" \u2014 "),tH=a("a"),TFr=o("TFGPT2ForSequenceClassification"),MFr=o(" (OpenAI GPT-2 model)"),EFr=l(),_C=a("li"),PFe=a("strong"),CFr=o("gptj"),wFr=o(" \u2014 "),aH=a("a"),AFr=o("TFGPTJForSequenceClassification"),yFr=o(" (GPT-J model)"),LFr=l(),bC=a("li"),BFe=a("strong"),xFr=o("layoutlm"),$Fr=o(" \u2014 "),nH=a("a"),kFr=o("TFLayoutLMForSequenceClassification"),SFr=o(" (LayoutLM model)"),RFr=l(),vC=a("li"),IFe=a("strong"),PFr=o("longformer"),BFr=o(" \u2014 "),sH=a("a"),IFr=o("TFLongformerForSequenceClassification"),qFr=o(" (Longformer model)"),NFr=l(),FC=a("li"),qFe=a("strong"),jFr=o("mobilebert"),DFr=o(" \u2014 "),lH=a("a"),GFr=o("TFMobileBertForSequenceClassification"),OFr=o(" (MobileBERT model)"),VFr=l(),TC=a("li"),NFe=a("strong"),XFr=o("mpnet"),zFr=o(" \u2014 "),iH=a("a"),WFr=o("TFMPNetForSequenceClassification"),QFr=o(" (MPNet model)"),HFr=l(),MC=a("li"),jFe=a("strong"),UFr=o("openai-gpt"),JFr=o(" \u2014 "),dH=a("a"),YFr=o("TFOpenAIGPTForSequenceClassification"),KFr=o(" (OpenAI GPT model)"),ZFr=l(),EC=a("li"),DFe=a("strong"),e1r=o("rembert"),o1r=o(" \u2014 "),cH=a("a"),r1r=o("TFRemBertForSequenceClassification"),t1r=o(" (RemBERT model)"),a1r=l(),CC=a("li"),GFe=a("strong"),n1r=o("roberta"),s1r=o(" \u2014 "),mH=a("a"),l1r=o("TFRobertaForSequenceClassification"),i1r=o(" (RoBERTa model)"),d1r=l(),wC=a("li"),OFe=a("strong"),c1r=o("roformer"),m1r=o(" \u2014 "),fH=a("a"),f1r=o("TFRoFormerForSequenceClassification"),g1r=o(" (RoFormer model)"),h1r=l(),AC=a("li"),VFe=a("strong"),u1r=o("tapas"),p1r=o(" \u2014 "),gH=a("a"),_1r=o("TFTapasForSequenceClassification"),b1r=o(" (TAPAS model)"),v1r=l(),yC=a("li"),XFe=a("strong"),F1r=o("transfo-xl"),T1r=o(" \u2014 "),hH=a("a"),M1r=o("TFTransfoXLForSequenceClassification"),E1r=o(" (Transformer-XL model)"),C1r=l(),LC=a("li"),zFe=a("strong"),w1r=o("xlm"),A1r=o(" \u2014 "),uH=a("a"),y1r=o("TFXLMForSequenceClassification"),L1r=o(" (XLM model)"),x1r=l(),xC=a("li"),WFe=a("strong"),$1r=o("xlm-roberta"),k1r=o(" \u2014 "),pH=a("a"),S1r=o("TFXLMRobertaForSequenceClassification"),R1r=o(" (XLM-RoBERTa model)"),P1r=l(),$C=a("li"),QFe=a("strong"),B1r=o("xlnet"),I1r=o(" \u2014 "),_H=a("a"),q1r=o("TFXLNetForSequenceClassification"),N1r=o(" (XLNet model)"),j1r=l(),F(kC.$$.fragment),Xqe=l(),lc=a("h2"),SC=a("a"),HFe=a("span"),F(Ex.$$.fragment),D1r=l(),UFe=a("span"),G1r=o("TFAutoModelForMultipleChoice"),zqe=l(),ar=a("div"),F(Cx.$$.fragment),O1r=l(),ic=a("p"),V1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=a("a"),X1r=o("from_pretrained()"),z1r=o(" class method or the "),vH=a("a"),W1r=o("from_config()"),Q1r=o(` class
method.`),H1r=l(),wx=a("p"),U1r=o("This class cannot be instantiated directly using "),JFe=a("code"),J1r=o("__init__()"),Y1r=o(" (throws an error)."),K1r=l(),Pt=a("div"),F(Ax.$$.fragment),Z1r=l(),YFe=a("p"),eTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oTr=l(),dc=a("p"),rTr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),tTr=o("not"),aTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),nTr=o("from_pretrained()"),sTr=o(" to load the model weights."),lTr=l(),F(RC.$$.fragment),iTr=l(),Sr=a("div"),F(yx.$$.fragment),dTr=l(),ZFe=a("p"),cTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mTr=l(),sn=a("p"),fTr=o("The model class to instantiate is selected based on the "),e1e=a("code"),gTr=o("model_type"),hTr=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),uTr=o("pretrained_model_name_or_path"),pTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),_Tr=o("pretrained_model_name_or_path"),bTr=o(":"),vTr=l(),he=a("ul"),PC=a("li"),t1e=a("strong"),FTr=o("albert"),TTr=o(" \u2014 "),TH=a("a"),MTr=o("TFAlbertForMultipleChoice"),ETr=o(" (ALBERT model)"),CTr=l(),BC=a("li"),a1e=a("strong"),wTr=o("bert"),ATr=o(" \u2014 "),MH=a("a"),yTr=o("TFBertForMultipleChoice"),LTr=o(" (BERT model)"),xTr=l(),IC=a("li"),n1e=a("strong"),$Tr=o("camembert"),kTr=o(" \u2014 "),EH=a("a"),STr=o("TFCamembertForMultipleChoice"),RTr=o(" (CamemBERT model)"),PTr=l(),qC=a("li"),s1e=a("strong"),BTr=o("convbert"),ITr=o(" \u2014 "),CH=a("a"),qTr=o("TFConvBertForMultipleChoice"),NTr=o(" (ConvBERT model)"),jTr=l(),NC=a("li"),l1e=a("strong"),DTr=o("distilbert"),GTr=o(" \u2014 "),wH=a("a"),OTr=o("TFDistilBertForMultipleChoice"),VTr=o(" (DistilBERT model)"),XTr=l(),jC=a("li"),i1e=a("strong"),zTr=o("electra"),WTr=o(" \u2014 "),AH=a("a"),QTr=o("TFElectraForMultipleChoice"),HTr=o(" (ELECTRA model)"),UTr=l(),DC=a("li"),d1e=a("strong"),JTr=o("flaubert"),YTr=o(" \u2014 "),yH=a("a"),KTr=o("TFFlaubertForMultipleChoice"),ZTr=o(" (FlauBERT model)"),eMr=l(),GC=a("li"),c1e=a("strong"),oMr=o("funnel"),rMr=o(" \u2014 "),LH=a("a"),tMr=o("TFFunnelForMultipleChoice"),aMr=o(" (Funnel Transformer model)"),nMr=l(),OC=a("li"),m1e=a("strong"),sMr=o("longformer"),lMr=o(" \u2014 "),xH=a("a"),iMr=o("TFLongformerForMultipleChoice"),dMr=o(" (Longformer model)"),cMr=l(),VC=a("li"),f1e=a("strong"),mMr=o("mobilebert"),fMr=o(" \u2014 "),$H=a("a"),gMr=o("TFMobileBertForMultipleChoice"),hMr=o(" (MobileBERT model)"),uMr=l(),XC=a("li"),g1e=a("strong"),pMr=o("mpnet"),_Mr=o(" \u2014 "),kH=a("a"),bMr=o("TFMPNetForMultipleChoice"),vMr=o(" (MPNet model)"),FMr=l(),zC=a("li"),h1e=a("strong"),TMr=o("rembert"),MMr=o(" \u2014 "),SH=a("a"),EMr=o("TFRemBertForMultipleChoice"),CMr=o(" (RemBERT model)"),wMr=l(),WC=a("li"),u1e=a("strong"),AMr=o("roberta"),yMr=o(" \u2014 "),RH=a("a"),LMr=o("TFRobertaForMultipleChoice"),xMr=o(" (RoBERTa model)"),$Mr=l(),QC=a("li"),p1e=a("strong"),kMr=o("roformer"),SMr=o(" \u2014 "),PH=a("a"),RMr=o("TFRoFormerForMultipleChoice"),PMr=o(" (RoFormer model)"),BMr=l(),HC=a("li"),_1e=a("strong"),IMr=o("xlm"),qMr=o(" \u2014 "),BH=a("a"),NMr=o("TFXLMForMultipleChoice"),jMr=o(" (XLM model)"),DMr=l(),UC=a("li"),b1e=a("strong"),GMr=o("xlm-roberta"),OMr=o(" \u2014 "),IH=a("a"),VMr=o("TFXLMRobertaForMultipleChoice"),XMr=o(" (XLM-RoBERTa model)"),zMr=l(),JC=a("li"),v1e=a("strong"),WMr=o("xlnet"),QMr=o(" \u2014 "),qH=a("a"),HMr=o("TFXLNetForMultipleChoice"),UMr=o(" (XLNet model)"),JMr=l(),F(YC.$$.fragment),Wqe=l(),cc=a("h2"),KC=a("a"),F1e=a("span"),F(Lx.$$.fragment),YMr=l(),T1e=a("span"),KMr=o("TFAutoModelForNextSentencePrediction"),Qqe=l(),nr=a("div"),F(xx.$$.fragment),ZMr=l(),mc=a("p"),e4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NH=a("a"),o4r=o("from_pretrained()"),r4r=o(" class method or the "),jH=a("a"),t4r=o("from_config()"),a4r=o(` class
method.`),n4r=l(),$x=a("p"),s4r=o("This class cannot be instantiated directly using "),M1e=a("code"),l4r=o("__init__()"),i4r=o(" (throws an error)."),d4r=l(),Bt=a("div"),F(kx.$$.fragment),c4r=l(),E1e=a("p"),m4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f4r=l(),fc=a("p"),g4r=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),h4r=o("not"),u4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),p4r=o("from_pretrained()"),_4r=o(" to load the model weights."),b4r=l(),F(ZC.$$.fragment),v4r=l(),Rr=a("div"),F(Sx.$$.fragment),F4r=l(),w1e=a("p"),T4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M4r=l(),ln=a("p"),E4r=o("The model class to instantiate is selected based on the "),A1e=a("code"),C4r=o("model_type"),w4r=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),A4r=o("pretrained_model_name_or_path"),y4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),L4r=o("pretrained_model_name_or_path"),x4r=o(":"),$4r=l(),Rx=a("ul"),e5=a("li"),x1e=a("strong"),k4r=o("bert"),S4r=o(" \u2014 "),GH=a("a"),R4r=o("TFBertForNextSentencePrediction"),P4r=o(" (BERT model)"),B4r=l(),o5=a("li"),$1e=a("strong"),I4r=o("mobilebert"),q4r=o(" \u2014 "),OH=a("a"),N4r=o("TFMobileBertForNextSentencePrediction"),j4r=o(" (MobileBERT model)"),D4r=l(),F(r5.$$.fragment),Hqe=l(),gc=a("h2"),t5=a("a"),k1e=a("span"),F(Px.$$.fragment),G4r=l(),S1e=a("span"),O4r=o("TFAutoModelForTableQuestionAnswering"),Uqe=l(),sr=a("div"),F(Bx.$$.fragment),V4r=l(),hc=a("p"),X4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VH=a("a"),z4r=o("from_pretrained()"),W4r=o(" class method or the "),XH=a("a"),Q4r=o("from_config()"),H4r=o(` class
method.`),U4r=l(),Ix=a("p"),J4r=o("This class cannot be instantiated directly using "),R1e=a("code"),Y4r=o("__init__()"),K4r=o(" (throws an error)."),Z4r=l(),It=a("div"),F(qx.$$.fragment),eEr=l(),P1e=a("p"),oEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rEr=l(),uc=a("p"),tEr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),aEr=o("not"),nEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),sEr=o("from_pretrained()"),lEr=o(" to load the model weights."),iEr=l(),F(a5.$$.fragment),dEr=l(),Pr=a("div"),F(Nx.$$.fragment),cEr=l(),I1e=a("p"),mEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fEr=l(),dn=a("p"),gEr=o("The model class to instantiate is selected based on the "),q1e=a("code"),hEr=o("model_type"),uEr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),pEr=o("pretrained_model_name_or_path"),_Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),bEr=o("pretrained_model_name_or_path"),vEr=o(":"),FEr=l(),D1e=a("ul"),n5=a("li"),G1e=a("strong"),TEr=o("tapas"),MEr=o(" \u2014 "),WH=a("a"),EEr=o("TFTapasForQuestionAnswering"),CEr=o(" (TAPAS model)"),wEr=l(),F(s5.$$.fragment),Jqe=l(),pc=a("h2"),l5=a("a"),O1e=a("span"),F(jx.$$.fragment),AEr=l(),V1e=a("span"),yEr=o("TFAutoModelForTokenClassification"),Yqe=l(),lr=a("div"),F(Dx.$$.fragment),LEr=l(),_c=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QH=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),HH=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),Gx=a("p"),BEr=o("This class cannot be instantiated directly using "),X1e=a("code"),IEr=o("__init__()"),qEr=o(" (throws an error)."),NEr=l(),qt=a("div"),F(Ox.$$.fragment),jEr=l(),z1e=a("p"),DEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GEr=l(),bc=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),zEr=o("from_pretrained()"),WEr=o(" to load the model weights."),QEr=l(),F(i5.$$.fragment),HEr=l(),Br=a("div"),F(Vx.$$.fragment),UEr=l(),Q1e=a("p"),JEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YEr=l(),cn=a("p"),KEr=o("The model class to instantiate is selected based on the "),H1e=a("code"),ZEr=o("model_type"),eCr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(":"),nCr=l(),de=a("ul"),d5=a("li"),Y1e=a("strong"),sCr=o("albert"),lCr=o(" \u2014 "),JH=a("a"),iCr=o("TFAlbertForTokenClassification"),dCr=o(" (ALBERT model)"),cCr=l(),c5=a("li"),K1e=a("strong"),mCr=o("bert"),fCr=o(" \u2014 "),YH=a("a"),gCr=o("TFBertForTokenClassification"),hCr=o(" (BERT model)"),uCr=l(),m5=a("li"),Z1e=a("strong"),pCr=o("camembert"),_Cr=o(" \u2014 "),KH=a("a"),bCr=o("TFCamembertForTokenClassification"),vCr=o(" (CamemBERT model)"),FCr=l(),f5=a("li"),eTe=a("strong"),TCr=o("convbert"),MCr=o(" \u2014 "),ZH=a("a"),ECr=o("TFConvBertForTokenClassification"),CCr=o(" (ConvBERT model)"),wCr=l(),g5=a("li"),oTe=a("strong"),ACr=o("deberta"),yCr=o(" \u2014 "),eU=a("a"),LCr=o("TFDebertaForTokenClassification"),xCr=o(" (DeBERTa model)"),$Cr=l(),h5=a("li"),rTe=a("strong"),kCr=o("deberta-v2"),SCr=o(" \u2014 "),oU=a("a"),RCr=o("TFDebertaV2ForTokenClassification"),PCr=o(" (DeBERTa-v2 model)"),BCr=l(),u5=a("li"),tTe=a("strong"),ICr=o("distilbert"),qCr=o(" \u2014 "),rU=a("a"),NCr=o("TFDistilBertForTokenClassification"),jCr=o(" (DistilBERT model)"),DCr=l(),p5=a("li"),aTe=a("strong"),GCr=o("electra"),OCr=o(" \u2014 "),tU=a("a"),VCr=o("TFElectraForTokenClassification"),XCr=o(" (ELECTRA model)"),zCr=l(),_5=a("li"),nTe=a("strong"),WCr=o("flaubert"),QCr=o(" \u2014 "),aU=a("a"),HCr=o("TFFlaubertForTokenClassification"),UCr=o(" (FlauBERT model)"),JCr=l(),b5=a("li"),sTe=a("strong"),YCr=o("funnel"),KCr=o(" \u2014 "),nU=a("a"),ZCr=o("TFFunnelForTokenClassification"),e5r=o(" (Funnel Transformer model)"),o5r=l(),v5=a("li"),lTe=a("strong"),r5r=o("layoutlm"),t5r=o(" \u2014 "),sU=a("a"),a5r=o("TFLayoutLMForTokenClassification"),n5r=o(" (LayoutLM model)"),s5r=l(),F5=a("li"),iTe=a("strong"),l5r=o("longformer"),i5r=o(" \u2014 "),lU=a("a"),d5r=o("TFLongformerForTokenClassification"),c5r=o(" (Longformer model)"),m5r=l(),T5=a("li"),dTe=a("strong"),f5r=o("mobilebert"),g5r=o(" \u2014 "),iU=a("a"),h5r=o("TFMobileBertForTokenClassification"),u5r=o(" (MobileBERT model)"),p5r=l(),M5=a("li"),cTe=a("strong"),_5r=o("mpnet"),b5r=o(" \u2014 "),dU=a("a"),v5r=o("TFMPNetForTokenClassification"),F5r=o(" (MPNet model)"),T5r=l(),E5=a("li"),mTe=a("strong"),M5r=o("rembert"),E5r=o(" \u2014 "),cU=a("a"),C5r=o("TFRemBertForTokenClassification"),w5r=o(" (RemBERT model)"),A5r=l(),C5=a("li"),fTe=a("strong"),y5r=o("roberta"),L5r=o(" \u2014 "),mU=a("a"),x5r=o("TFRobertaForTokenClassification"),$5r=o(" (RoBERTa model)"),k5r=l(),w5=a("li"),gTe=a("strong"),S5r=o("roformer"),R5r=o(" \u2014 "),fU=a("a"),P5r=o("TFRoFormerForTokenClassification"),B5r=o(" (RoFormer model)"),I5r=l(),A5=a("li"),hTe=a("strong"),q5r=o("xlm"),N5r=o(" \u2014 "),gU=a("a"),j5r=o("TFXLMForTokenClassification"),D5r=o(" (XLM model)"),G5r=l(),y5=a("li"),uTe=a("strong"),O5r=o("xlm-roberta"),V5r=o(" \u2014 "),hU=a("a"),X5r=o("TFXLMRobertaForTokenClassification"),z5r=o(" (XLM-RoBERTa model)"),W5r=l(),L5=a("li"),pTe=a("strong"),Q5r=o("xlnet"),H5r=o(" \u2014 "),uU=a("a"),U5r=o("TFXLNetForTokenClassification"),J5r=o(" (XLNet model)"),Y5r=l(),F(x5.$$.fragment),Kqe=l(),vc=a("h2"),$5=a("a"),_Te=a("span"),F(Xx.$$.fragment),K5r=l(),bTe=a("span"),Z5r=o("TFAutoModelForQuestionAnswering"),Zqe=l(),ir=a("div"),F(zx.$$.fragment),e3r=l(),Fc=a("p"),o3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pU=a("a"),r3r=o("from_pretrained()"),t3r=o(" class method or the "),_U=a("a"),a3r=o("from_config()"),n3r=o(` class
method.`),s3r=l(),Wx=a("p"),l3r=o("This class cannot be instantiated directly using "),vTe=a("code"),i3r=o("__init__()"),d3r=o(" (throws an error)."),c3r=l(),Nt=a("div"),F(Qx.$$.fragment),m3r=l(),FTe=a("p"),f3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g3r=l(),Tc=a("p"),h3r=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),u3r=o("not"),p3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),_3r=o("from_pretrained()"),b3r=o(" to load the model weights."),v3r=l(),F(k5.$$.fragment),F3r=l(),Ir=a("div"),F(Hx.$$.fragment),T3r=l(),MTe=a("p"),M3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E3r=l(),mn=a("p"),C3r=o("The model class to instantiate is selected based on the "),ETe=a("code"),w3r=o("model_type"),A3r=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),y3r=o("pretrained_model_name_or_path"),L3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),x3r=o("pretrained_model_name_or_path"),$3r=o(":"),k3r=l(),ce=a("ul"),S5=a("li"),ATe=a("strong"),S3r=o("albert"),R3r=o(" \u2014 "),vU=a("a"),P3r=o("TFAlbertForQuestionAnswering"),B3r=o(" (ALBERT model)"),I3r=l(),R5=a("li"),yTe=a("strong"),q3r=o("bert"),N3r=o(" \u2014 "),FU=a("a"),j3r=o("TFBertForQuestionAnswering"),D3r=o(" (BERT model)"),G3r=l(),P5=a("li"),LTe=a("strong"),O3r=o("camembert"),V3r=o(" \u2014 "),TU=a("a"),X3r=o("TFCamembertForQuestionAnswering"),z3r=o(" (CamemBERT model)"),W3r=l(),B5=a("li"),xTe=a("strong"),Q3r=o("convbert"),H3r=o(" \u2014 "),MU=a("a"),U3r=o("TFConvBertForQuestionAnswering"),J3r=o(" (ConvBERT model)"),Y3r=l(),I5=a("li"),$Te=a("strong"),K3r=o("deberta"),Z3r=o(" \u2014 "),EU=a("a"),ewr=o("TFDebertaForQuestionAnswering"),owr=o(" (DeBERTa model)"),rwr=l(),q5=a("li"),kTe=a("strong"),twr=o("deberta-v2"),awr=o(" \u2014 "),CU=a("a"),nwr=o("TFDebertaV2ForQuestionAnswering"),swr=o(" (DeBERTa-v2 model)"),lwr=l(),N5=a("li"),STe=a("strong"),iwr=o("distilbert"),dwr=o(" \u2014 "),wU=a("a"),cwr=o("TFDistilBertForQuestionAnswering"),mwr=o(" (DistilBERT model)"),fwr=l(),j5=a("li"),RTe=a("strong"),gwr=o("electra"),hwr=o(" \u2014 "),AU=a("a"),uwr=o("TFElectraForQuestionAnswering"),pwr=o(" (ELECTRA model)"),_wr=l(),D5=a("li"),PTe=a("strong"),bwr=o("flaubert"),vwr=o(" \u2014 "),yU=a("a"),Fwr=o("TFFlaubertForQuestionAnsweringSimple"),Twr=o(" (FlauBERT model)"),Mwr=l(),G5=a("li"),BTe=a("strong"),Ewr=o("funnel"),Cwr=o(" \u2014 "),LU=a("a"),wwr=o("TFFunnelForQuestionAnswering"),Awr=o(" (Funnel Transformer model)"),ywr=l(),O5=a("li"),ITe=a("strong"),Lwr=o("gptj"),xwr=o(" \u2014 "),xU=a("a"),$wr=o("TFGPTJForQuestionAnswering"),kwr=o(" (GPT-J model)"),Swr=l(),V5=a("li"),qTe=a("strong"),Rwr=o("longformer"),Pwr=o(" \u2014 "),$U=a("a"),Bwr=o("TFLongformerForQuestionAnswering"),Iwr=o(" (Longformer model)"),qwr=l(),X5=a("li"),NTe=a("strong"),Nwr=o("mobilebert"),jwr=o(" \u2014 "),kU=a("a"),Dwr=o("TFMobileBertForQuestionAnswering"),Gwr=o(" (MobileBERT model)"),Owr=l(),z5=a("li"),jTe=a("strong"),Vwr=o("mpnet"),Xwr=o(" \u2014 "),SU=a("a"),zwr=o("TFMPNetForQuestionAnswering"),Wwr=o(" (MPNet model)"),Qwr=l(),W5=a("li"),DTe=a("strong"),Hwr=o("rembert"),Uwr=o(" \u2014 "),RU=a("a"),Jwr=o("TFRemBertForQuestionAnswering"),Ywr=o(" (RemBERT model)"),Kwr=l(),Q5=a("li"),GTe=a("strong"),Zwr=o("roberta"),eAr=o(" \u2014 "),PU=a("a"),oAr=o("TFRobertaForQuestionAnswering"),rAr=o(" (RoBERTa model)"),tAr=l(),H5=a("li"),OTe=a("strong"),aAr=o("roformer"),nAr=o(" \u2014 "),BU=a("a"),sAr=o("TFRoFormerForQuestionAnswering"),lAr=o(" (RoFormer model)"),iAr=l(),U5=a("li"),VTe=a("strong"),dAr=o("xlm"),cAr=o(" \u2014 "),IU=a("a"),mAr=o("TFXLMForQuestionAnsweringSimple"),fAr=o(" (XLM model)"),gAr=l(),J5=a("li"),XTe=a("strong"),hAr=o("xlm-roberta"),uAr=o(" \u2014 "),qU=a("a"),pAr=o("TFXLMRobertaForQuestionAnswering"),_Ar=o(" (XLM-RoBERTa model)"),bAr=l(),Y5=a("li"),zTe=a("strong"),vAr=o("xlnet"),FAr=o(" \u2014 "),NU=a("a"),TAr=o("TFXLNetForQuestionAnsweringSimple"),MAr=o(" (XLNet model)"),EAr=l(),F(K5.$$.fragment),eNe=l(),Mc=a("h2"),Z5=a("a"),WTe=a("span"),F(Ux.$$.fragment),CAr=l(),QTe=a("span"),wAr=o("TFAutoModelForVision2Seq"),oNe=l(),dr=a("div"),F(Jx.$$.fragment),AAr=l(),Ec=a("p"),yAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jU=a("a"),LAr=o("from_pretrained()"),xAr=o(" class method or the "),DU=a("a"),$Ar=o("from_config()"),kAr=o(` class
method.`),SAr=l(),Yx=a("p"),RAr=o("This class cannot be instantiated directly using "),HTe=a("code"),PAr=o("__init__()"),BAr=o(" (throws an error)."),IAr=l(),jt=a("div"),F(Kx.$$.fragment),qAr=l(),UTe=a("p"),NAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jAr=l(),Cc=a("p"),DAr=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),GAr=o("not"),OAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),VAr=o("from_pretrained()"),XAr=o(" to load the model weights."),zAr=l(),F(e3.$$.fragment),WAr=l(),qr=a("div"),F(Zx.$$.fragment),QAr=l(),YTe=a("p"),HAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UAr=l(),fn=a("p"),JAr=o("The model class to instantiate is selected based on the "),KTe=a("code"),YAr=o("model_type"),KAr=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),ZAr=o("pretrained_model_name_or_path"),e6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),o6r=o("pretrained_model_name_or_path"),r6r=o(":"),t6r=l(),oMe=a("ul"),o3=a("li"),rMe=a("strong"),a6r=o("vision-encoder-decoder"),n6r=o(" \u2014 "),OU=a("a"),s6r=o("TFVisionEncoderDecoderModel"),l6r=o(" (Vision Encoder decoder model)"),i6r=l(),F(r3.$$.fragment),rNe=l(),wc=a("h2"),t3=a("a"),tMe=a("span"),F(e9.$$.fragment),d6r=l(),aMe=a("span"),c6r=o("TFAutoModelForSpeechSeq2Seq"),tNe=l(),cr=a("div"),F(o9.$$.fragment),m6r=l(),Ac=a("p"),f6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VU=a("a"),g6r=o("from_pretrained()"),h6r=o(" class method or the "),XU=a("a"),u6r=o("from_config()"),p6r=o(` class
method.`),_6r=l(),r9=a("p"),b6r=o("This class cannot be instantiated directly using "),nMe=a("code"),v6r=o("__init__()"),F6r=o(" (throws an error)."),T6r=l(),Dt=a("div"),F(t9.$$.fragment),M6r=l(),sMe=a("p"),E6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),C6r=l(),yc=a("p"),w6r=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),A6r=o("not"),y6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),L6r=o("from_pretrained()"),x6r=o(" to load the model weights."),$6r=l(),F(a3.$$.fragment),k6r=l(),Nr=a("div"),F(a9.$$.fragment),S6r=l(),iMe=a("p"),R6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),P6r=l(),gn=a("p"),B6r=o("The model class to instantiate is selected based on the "),dMe=a("code"),I6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),N6r=o("pretrained_model_name_or_path"),j6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(":"),O6r=l(),fMe=a("ul"),n3=a("li"),gMe=a("strong"),V6r=o("speech_to_text"),X6r=o(" \u2014 "),WU=a("a"),z6r=o("TFSpeech2TextForConditionalGeneration"),W6r=o(" (Speech2Text model)"),Q6r=l(),F(s3.$$.fragment),aNe=l(),Lc=a("h2"),l3=a("a"),hMe=a("span"),F(n9.$$.fragment),H6r=l(),uMe=a("span"),U6r=o("FlaxAutoModel"),nNe=l(),mr=a("div"),F(s9.$$.fragment),J6r=l(),xc=a("p"),Y6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QU=a("a"),K6r=o("from_pretrained()"),Z6r=o(" class method or the "),HU=a("a"),e0r=o("from_config()"),o0r=o(` class
method.`),r0r=l(),l9=a("p"),t0r=o("This class cannot be instantiated directly using "),pMe=a("code"),a0r=o("__init__()"),n0r=o(" (throws an error)."),s0r=l(),Gt=a("div"),F(i9.$$.fragment),l0r=l(),_Me=a("p"),i0r=o("Instantiates one of the base model classes of the library from a configuration."),d0r=l(),$c=a("p"),c0r=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),m0r=o("not"),f0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),g0r=o("from_pretrained()"),h0r=o(" to load the model weights."),u0r=l(),F(i3.$$.fragment),p0r=l(),jr=a("div"),F(d9.$$.fragment),_0r=l(),vMe=a("p"),b0r=o("Instantiate one of the base model classes of the library from a pretrained model."),v0r=l(),hn=a("p"),F0r=o("The model class to instantiate is selected based on the "),FMe=a("code"),T0r=o("model_type"),M0r=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),E0r=o("pretrained_model_name_or_path"),C0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),w0r=o("pretrained_model_name_or_path"),A0r=o(":"),y0r=l(),re=a("ul"),d3=a("li"),EMe=a("strong"),L0r=o("albert"),x0r=o(" \u2014 "),JU=a("a"),$0r=o("FlaxAlbertModel"),k0r=o(" (ALBERT model)"),S0r=l(),c3=a("li"),CMe=a("strong"),R0r=o("bart"),P0r=o(" \u2014 "),YU=a("a"),B0r=o("FlaxBartModel"),I0r=o(" (BART model)"),q0r=l(),m3=a("li"),wMe=a("strong"),N0r=o("beit"),j0r=o(" \u2014 "),KU=a("a"),D0r=o("FlaxBeitModel"),G0r=o(" (BEiT model)"),O0r=l(),f3=a("li"),AMe=a("strong"),V0r=o("bert"),X0r=o(" \u2014 "),ZU=a("a"),z0r=o("FlaxBertModel"),W0r=o(" (BERT model)"),Q0r=l(),g3=a("li"),yMe=a("strong"),H0r=o("big_bird"),U0r=o(" \u2014 "),eJ=a("a"),J0r=o("FlaxBigBirdModel"),Y0r=o(" (BigBird model)"),K0r=l(),h3=a("li"),LMe=a("strong"),Z0r=o("blenderbot"),eyr=o(" \u2014 "),oJ=a("a"),oyr=o("FlaxBlenderbotModel"),ryr=o(" (Blenderbot model)"),tyr=l(),u3=a("li"),xMe=a("strong"),ayr=o("blenderbot-small"),nyr=o(" \u2014 "),rJ=a("a"),syr=o("FlaxBlenderbotSmallModel"),lyr=o(" (BlenderbotSmall model)"),iyr=l(),p3=a("li"),$Me=a("strong"),dyr=o("clip"),cyr=o(" \u2014 "),tJ=a("a"),myr=o("FlaxCLIPModel"),fyr=o(" (CLIP model)"),gyr=l(),_3=a("li"),kMe=a("strong"),hyr=o("distilbert"),uyr=o(" \u2014 "),aJ=a("a"),pyr=o("FlaxDistilBertModel"),_yr=o(" (DistilBERT model)"),byr=l(),b3=a("li"),SMe=a("strong"),vyr=o("electra"),Fyr=o(" \u2014 "),nJ=a("a"),Tyr=o("FlaxElectraModel"),Myr=o(" (ELECTRA model)"),Eyr=l(),v3=a("li"),RMe=a("strong"),Cyr=o("gpt2"),wyr=o(" \u2014 "),sJ=a("a"),Ayr=o("FlaxGPT2Model"),yyr=o(" (OpenAI GPT-2 model)"),Lyr=l(),F3=a("li"),PMe=a("strong"),xyr=o("gpt_neo"),$yr=o(" \u2014 "),lJ=a("a"),kyr=o("FlaxGPTNeoModel"),Syr=o(" (GPT Neo model)"),Ryr=l(),T3=a("li"),BMe=a("strong"),Pyr=o("gptj"),Byr=o(" \u2014 "),iJ=a("a"),Iyr=o("FlaxGPTJModel"),qyr=o(" (GPT-J model)"),Nyr=l(),M3=a("li"),IMe=a("strong"),jyr=o("marian"),Dyr=o(" \u2014 "),dJ=a("a"),Gyr=o("FlaxMarianModel"),Oyr=o(" (Marian model)"),Vyr=l(),E3=a("li"),qMe=a("strong"),Xyr=o("mbart"),zyr=o(" \u2014 "),cJ=a("a"),Wyr=o("FlaxMBartModel"),Qyr=o(" (mBART model)"),Hyr=l(),C3=a("li"),NMe=a("strong"),Uyr=o("mt5"),Jyr=o(" \u2014 "),mJ=a("a"),Yyr=o("FlaxMT5Model"),Kyr=o(" (mT5 model)"),Zyr=l(),w3=a("li"),jMe=a("strong"),eLr=o("pegasus"),oLr=o(" \u2014 "),fJ=a("a"),rLr=o("FlaxPegasusModel"),tLr=o(" (Pegasus model)"),aLr=l(),A3=a("li"),DMe=a("strong"),nLr=o("roberta"),sLr=o(" \u2014 "),gJ=a("a"),lLr=o("FlaxRobertaModel"),iLr=o(" (RoBERTa model)"),dLr=l(),y3=a("li"),GMe=a("strong"),cLr=o("roformer"),mLr=o(" \u2014 "),hJ=a("a"),fLr=o("FlaxRoFormerModel"),gLr=o(" (RoFormer model)"),hLr=l(),L3=a("li"),OMe=a("strong"),uLr=o("t5"),pLr=o(" \u2014 "),uJ=a("a"),_Lr=o("FlaxT5Model"),bLr=o(" (T5 model)"),vLr=l(),x3=a("li"),VMe=a("strong"),FLr=o("vision-text-dual-encoder"),TLr=o(" \u2014 "),pJ=a("a"),MLr=o("FlaxVisionTextDualEncoderModel"),ELr=o(" (VisionTextDualEncoder model)"),CLr=l(),$3=a("li"),XMe=a("strong"),wLr=o("vit"),ALr=o(" \u2014 "),_J=a("a"),yLr=o("FlaxViTModel"),LLr=o(" (ViT model)"),xLr=l(),k3=a("li"),zMe=a("strong"),$Lr=o("wav2vec2"),kLr=o(" \u2014 "),bJ=a("a"),SLr=o("FlaxWav2Vec2Model"),RLr=o(" (Wav2Vec2 model)"),PLr=l(),S3=a("li"),WMe=a("strong"),BLr=o("xglm"),ILr=o(" \u2014 "),vJ=a("a"),qLr=o("FlaxXGLMModel"),NLr=o(" (XGLM model)"),jLr=l(),R3=a("li"),QMe=a("strong"),DLr=o("xlm-roberta"),GLr=o(" \u2014 "),FJ=a("a"),OLr=o("FlaxXLMRobertaModel"),VLr=o(" (XLM-RoBERTa model)"),XLr=l(),F(P3.$$.fragment),sNe=l(),kc=a("h2"),B3=a("a"),HMe=a("span"),F(c9.$$.fragment),zLr=l(),UMe=a("span"),WLr=o("FlaxAutoModelForCausalLM"),lNe=l(),fr=a("div"),F(m9.$$.fragment),QLr=l(),Sc=a("p"),HLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TJ=a("a"),ULr=o("from_pretrained()"),JLr=o(" class method or the "),MJ=a("a"),YLr=o("from_config()"),KLr=o(` class
method.`),ZLr=l(),f9=a("p"),e8r=o("This class cannot be instantiated directly using "),JMe=a("code"),o8r=o("__init__()"),r8r=o(" (throws an error)."),t8r=l(),Ot=a("div"),F(g9.$$.fragment),a8r=l(),YMe=a("p"),n8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s8r=l(),Rc=a("p"),l8r=o(`Note:
Loading a model from its configuration file does `),KMe=a("strong"),i8r=o("not"),d8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),c8r=o("from_pretrained()"),m8r=o(" to load the model weights."),f8r=l(),F(I3.$$.fragment),g8r=l(),Dr=a("div"),F(h9.$$.fragment),h8r=l(),ZMe=a("p"),u8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),p8r=l(),un=a("p"),_8r=o("The model class to instantiate is selected based on the "),e4e=a("code"),b8r=o("model_type"),v8r=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),F8r=o("pretrained_model_name_or_path"),T8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(":"),C8r=l(),Re=a("ul"),q3=a("li"),t4e=a("strong"),w8r=o("bart"),A8r=o(" \u2014 "),CJ=a("a"),y8r=o("FlaxBartForCausalLM"),L8r=o(" (BART model)"),x8r=l(),N3=a("li"),a4e=a("strong"),$8r=o("bert"),k8r=o(" \u2014 "),wJ=a("a"),S8r=o("FlaxBertForCausalLM"),R8r=o(" (BERT model)"),P8r=l(),j3=a("li"),n4e=a("strong"),B8r=o("big_bird"),I8r=o(" \u2014 "),AJ=a("a"),q8r=o("FlaxBigBirdForCausalLM"),N8r=o(" (BigBird model)"),j8r=l(),D3=a("li"),s4e=a("strong"),D8r=o("electra"),G8r=o(" \u2014 "),yJ=a("a"),O8r=o("FlaxElectraForCausalLM"),V8r=o(" (ELECTRA model)"),X8r=l(),G3=a("li"),l4e=a("strong"),z8r=o("gpt2"),W8r=o(" \u2014 "),LJ=a("a"),Q8r=o("FlaxGPT2LMHeadModel"),H8r=o(" (OpenAI GPT-2 model)"),U8r=l(),O3=a("li"),i4e=a("strong"),J8r=o("gpt_neo"),Y8r=o(" \u2014 "),xJ=a("a"),K8r=o("FlaxGPTNeoForCausalLM"),Z8r=o(" (GPT Neo model)"),exr=l(),V3=a("li"),d4e=a("strong"),oxr=o("gptj"),rxr=o(" \u2014 "),$J=a("a"),txr=o("FlaxGPTJForCausalLM"),axr=o(" (GPT-J model)"),nxr=l(),X3=a("li"),c4e=a("strong"),sxr=o("roberta"),lxr=o(" \u2014 "),kJ=a("a"),ixr=o("FlaxRobertaForCausalLM"),dxr=o(" (RoBERTa model)"),cxr=l(),z3=a("li"),m4e=a("strong"),mxr=o("xglm"),fxr=o(" \u2014 "),SJ=a("a"),gxr=o("FlaxXGLMForCausalLM"),hxr=o(" (XGLM model)"),uxr=l(),F(W3.$$.fragment),iNe=l(),Pc=a("h2"),Q3=a("a"),f4e=a("span"),F(u9.$$.fragment),pxr=l(),g4e=a("span"),_xr=o("FlaxAutoModelForPreTraining"),dNe=l(),gr=a("div"),F(p9.$$.fragment),bxr=l(),Bc=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),PJ=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),_9=a("p"),wxr=o("This class cannot be instantiated directly using "),h4e=a("code"),Axr=o("__init__()"),yxr=o(" (throws an error)."),Lxr=l(),Vt=a("div"),F(b9.$$.fragment),xxr=l(),u4e=a("p"),$xr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kxr=l(),Ic=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),Rxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),Bxr=o("from_pretrained()"),Ixr=o(" to load the model weights."),qxr=l(),F(H3.$$.fragment),Nxr=l(),Gr=a("div"),F(v9.$$.fragment),jxr=l(),_4e=a("p"),Dxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gxr=l(),pn=a("p"),Oxr=o("The model class to instantiate is selected based on the "),b4e=a("code"),Vxr=o("model_type"),Xxr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),zxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),Qxr=o("pretrained_model_name_or_path"),Hxr=o(":"),Uxr=l(),Me=a("ul"),U3=a("li"),T4e=a("strong"),Jxr=o("albert"),Yxr=o(" \u2014 "),IJ=a("a"),Kxr=o("FlaxAlbertForPreTraining"),Zxr=o(" (ALBERT model)"),e9r=l(),J3=a("li"),M4e=a("strong"),o9r=o("bart"),r9r=o(" \u2014 "),qJ=a("a"),t9r=o("FlaxBartForConditionalGeneration"),a9r=o(" (BART model)"),n9r=l(),Y3=a("li"),E4e=a("strong"),s9r=o("bert"),l9r=o(" \u2014 "),NJ=a("a"),i9r=o("FlaxBertForPreTraining"),d9r=o(" (BERT model)"),c9r=l(),K3=a("li"),C4e=a("strong"),m9r=o("big_bird"),f9r=o(" \u2014 "),jJ=a("a"),g9r=o("FlaxBigBirdForPreTraining"),h9r=o(" (BigBird model)"),u9r=l(),Z3=a("li"),w4e=a("strong"),p9r=o("electra"),_9r=o(" \u2014 "),DJ=a("a"),b9r=o("FlaxElectraForPreTraining"),v9r=o(" (ELECTRA model)"),F9r=l(),ew=a("li"),A4e=a("strong"),T9r=o("mbart"),M9r=o(" \u2014 "),GJ=a("a"),E9r=o("FlaxMBartForConditionalGeneration"),C9r=o(" (mBART model)"),w9r=l(),ow=a("li"),y4e=a("strong"),A9r=o("mt5"),y9r=o(" \u2014 "),OJ=a("a"),L9r=o("FlaxMT5ForConditionalGeneration"),x9r=o(" (mT5 model)"),$9r=l(),rw=a("li"),L4e=a("strong"),k9r=o("roberta"),S9r=o(" \u2014 "),VJ=a("a"),R9r=o("FlaxRobertaForMaskedLM"),P9r=o(" (RoBERTa model)"),B9r=l(),tw=a("li"),x4e=a("strong"),I9r=o("roformer"),q9r=o(" \u2014 "),XJ=a("a"),N9r=o("FlaxRoFormerForMaskedLM"),j9r=o(" (RoFormer model)"),D9r=l(),aw=a("li"),$4e=a("strong"),G9r=o("t5"),O9r=o(" \u2014 "),zJ=a("a"),V9r=o("FlaxT5ForConditionalGeneration"),X9r=o(" (T5 model)"),z9r=l(),nw=a("li"),k4e=a("strong"),W9r=o("wav2vec2"),Q9r=o(" \u2014 "),WJ=a("a"),H9r=o("FlaxWav2Vec2ForPreTraining"),U9r=o(" (Wav2Vec2 model)"),J9r=l(),sw=a("li"),S4e=a("strong"),Y9r=o("xlm-roberta"),K9r=o(" \u2014 "),QJ=a("a"),Z9r=o("FlaxXLMRobertaForMaskedLM"),e7r=o(" (XLM-RoBERTa model)"),o7r=l(),F(lw.$$.fragment),cNe=l(),qc=a("h2"),iw=a("a"),R4e=a("span"),F(F9.$$.fragment),r7r=l(),P4e=a("span"),t7r=o("FlaxAutoModelForMaskedLM"),mNe=l(),hr=a("div"),F(T9.$$.fragment),a7r=l(),Nc=a("p"),n7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HJ=a("a"),s7r=o("from_pretrained()"),l7r=o(" class method or the "),UJ=a("a"),i7r=o("from_config()"),d7r=o(` class
method.`),c7r=l(),M9=a("p"),m7r=o("This class cannot be instantiated directly using "),B4e=a("code"),f7r=o("__init__()"),g7r=o(" (throws an error)."),h7r=l(),Xt=a("div"),F(E9.$$.fragment),u7r=l(),I4e=a("p"),p7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_7r=l(),jc=a("p"),b7r=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),v7r=o("not"),F7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),T7r=o("from_pretrained()"),M7r=o(" to load the model weights."),E7r=l(),F(dw.$$.fragment),C7r=l(),Or=a("div"),F(C9.$$.fragment),w7r=l(),N4e=a("p"),A7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y7r=l(),_n=a("p"),L7r=o("The model class to instantiate is selected based on the "),j4e=a("code"),x7r=o("model_type"),$7r=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),k7r=o("pretrained_model_name_or_path"),S7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),R7r=o("pretrained_model_name_or_path"),P7r=o(":"),B7r=l(),Le=a("ul"),cw=a("li"),O4e=a("strong"),I7r=o("albert"),q7r=o(" \u2014 "),YJ=a("a"),N7r=o("FlaxAlbertForMaskedLM"),j7r=o(" (ALBERT model)"),D7r=l(),mw=a("li"),V4e=a("strong"),G7r=o("bart"),O7r=o(" \u2014 "),KJ=a("a"),V7r=o("FlaxBartForConditionalGeneration"),X7r=o(" (BART model)"),z7r=l(),fw=a("li"),X4e=a("strong"),W7r=o("bert"),Q7r=o(" \u2014 "),ZJ=a("a"),H7r=o("FlaxBertForMaskedLM"),U7r=o(" (BERT model)"),J7r=l(),gw=a("li"),z4e=a("strong"),Y7r=o("big_bird"),K7r=o(" \u2014 "),eY=a("a"),Z7r=o("FlaxBigBirdForMaskedLM"),e$r=o(" (BigBird model)"),o$r=l(),hw=a("li"),W4e=a("strong"),r$r=o("distilbert"),t$r=o(" \u2014 "),oY=a("a"),a$r=o("FlaxDistilBertForMaskedLM"),n$r=o(" (DistilBERT model)"),s$r=l(),uw=a("li"),Q4e=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),rY=a("a"),d$r=o("FlaxElectraForMaskedLM"),c$r=o(" (ELECTRA model)"),m$r=l(),pw=a("li"),H4e=a("strong"),f$r=o("mbart"),g$r=o(" \u2014 "),tY=a("a"),h$r=o("FlaxMBartForConditionalGeneration"),u$r=o(" (mBART model)"),p$r=l(),_w=a("li"),U4e=a("strong"),_$r=o("roberta"),b$r=o(" \u2014 "),aY=a("a"),v$r=o("FlaxRobertaForMaskedLM"),F$r=o(" (RoBERTa model)"),T$r=l(),bw=a("li"),J4e=a("strong"),M$r=o("roformer"),E$r=o(" \u2014 "),nY=a("a"),C$r=o("FlaxRoFormerForMaskedLM"),w$r=o(" (RoFormer model)"),A$r=l(),vw=a("li"),Y4e=a("strong"),y$r=o("xlm-roberta"),L$r=o(" \u2014 "),sY=a("a"),x$r=o("FlaxXLMRobertaForMaskedLM"),$$r=o(" (XLM-RoBERTa model)"),k$r=l(),F(Fw.$$.fragment),fNe=l(),Dc=a("h2"),Tw=a("a"),K4e=a("span"),F(w9.$$.fragment),S$r=l(),Z4e=a("span"),R$r=o("FlaxAutoModelForSeq2SeqLM"),gNe=l(),ur=a("div"),F(A9.$$.fragment),P$r=l(),Gc=a("p"),B$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lY=a("a"),I$r=o("from_pretrained()"),q$r=o(" class method or the "),iY=a("a"),N$r=o("from_config()"),j$r=o(` class
method.`),D$r=l(),y9=a("p"),G$r=o("This class cannot be instantiated directly using "),eEe=a("code"),O$r=o("__init__()"),V$r=o(" (throws an error)."),X$r=l(),zt=a("div"),F(L9.$$.fragment),z$r=l(),oEe=a("p"),W$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q$r=l(),Oc=a("p"),H$r=o(`Note:
Loading a model from its configuration file does `),rEe=a("strong"),U$r=o("not"),J$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),Y$r=o("from_pretrained()"),K$r=o(" to load the model weights."),Z$r=l(),F(Mw.$$.fragment),ekr=l(),Vr=a("div"),F(x9.$$.fragment),okr=l(),tEe=a("p"),rkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tkr=l(),bn=a("p"),akr=o("The model class to instantiate is selected based on the "),aEe=a("code"),nkr=o("model_type"),skr=o(` property of the config object (either
passed as an argument or loaded from `),nEe=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(":"),mkr=l(),Pe=a("ul"),Ew=a("li"),lEe=a("strong"),fkr=o("bart"),gkr=o(" \u2014 "),cY=a("a"),hkr=o("FlaxBartForConditionalGeneration"),ukr=o(" (BART model)"),pkr=l(),Cw=a("li"),iEe=a("strong"),_kr=o("blenderbot"),bkr=o(" \u2014 "),mY=a("a"),vkr=o("FlaxBlenderbotForConditionalGeneration"),Fkr=o(" (Blenderbot model)"),Tkr=l(),ww=a("li"),dEe=a("strong"),Mkr=o("blenderbot-small"),Ekr=o(" \u2014 "),fY=a("a"),Ckr=o("FlaxBlenderbotSmallForConditionalGeneration"),wkr=o(" (BlenderbotSmall model)"),Akr=l(),Aw=a("li"),cEe=a("strong"),ykr=o("encoder-decoder"),Lkr=o(" \u2014 "),gY=a("a"),xkr=o("FlaxEncoderDecoderModel"),$kr=o(" (Encoder decoder model)"),kkr=l(),yw=a("li"),mEe=a("strong"),Skr=o("marian"),Rkr=o(" \u2014 "),hY=a("a"),Pkr=o("FlaxMarianMTModel"),Bkr=o(" (Marian model)"),Ikr=l(),Lw=a("li"),fEe=a("strong"),qkr=o("mbart"),Nkr=o(" \u2014 "),uY=a("a"),jkr=o("FlaxMBartForConditionalGeneration"),Dkr=o(" (mBART model)"),Gkr=l(),xw=a("li"),gEe=a("strong"),Okr=o("mt5"),Vkr=o(" \u2014 "),pY=a("a"),Xkr=o("FlaxMT5ForConditionalGeneration"),zkr=o(" (mT5 model)"),Wkr=l(),$w=a("li"),hEe=a("strong"),Qkr=o("pegasus"),Hkr=o(" \u2014 "),_Y=a("a"),Ukr=o("FlaxPegasusForConditionalGeneration"),Jkr=o(" (Pegasus model)"),Ykr=l(),kw=a("li"),uEe=a("strong"),Kkr=o("t5"),Zkr=o(" \u2014 "),bY=a("a"),eSr=o("FlaxT5ForConditionalGeneration"),oSr=o(" (T5 model)"),rSr=l(),F(Sw.$$.fragment),hNe=l(),Vc=a("h2"),Rw=a("a"),pEe=a("span"),F($9.$$.fragment),tSr=l(),_Ee=a("span"),aSr=o("FlaxAutoModelForSequenceClassification"),uNe=l(),pr=a("div"),F(k9.$$.fragment),nSr=l(),Xc=a("p"),sSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vY=a("a"),lSr=o("from_pretrained()"),iSr=o(" class method or the "),FY=a("a"),dSr=o("from_config()"),cSr=o(` class
method.`),mSr=l(),S9=a("p"),fSr=o("This class cannot be instantiated directly using "),bEe=a("code"),gSr=o("__init__()"),hSr=o(" (throws an error)."),uSr=l(),Wt=a("div"),F(R9.$$.fragment),pSr=l(),vEe=a("p"),_Sr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bSr=l(),zc=a("p"),vSr=o(`Note:
Loading a model from its configuration file does `),FEe=a("strong"),FSr=o("not"),TSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),MSr=o("from_pretrained()"),ESr=o(" to load the model weights."),CSr=l(),F(Pw.$$.fragment),wSr=l(),Xr=a("div"),F(P9.$$.fragment),ASr=l(),TEe=a("p"),ySr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LSr=l(),vn=a("p"),xSr=o("The model class to instantiate is selected based on the "),MEe=a("code"),$Sr=o("model_type"),kSr=o(` property of the config object (either
passed as an argument or loaded from `),EEe=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=a("code"),PSr=o("pretrained_model_name_or_path"),BSr=o(":"),ISr=l(),xe=a("ul"),Bw=a("li"),wEe=a("strong"),qSr=o("albert"),NSr=o(" \u2014 "),MY=a("a"),jSr=o("FlaxAlbertForSequenceClassification"),DSr=o(" (ALBERT model)"),GSr=l(),Iw=a("li"),AEe=a("strong"),OSr=o("bart"),VSr=o(" \u2014 "),EY=a("a"),XSr=o("FlaxBartForSequenceClassification"),zSr=o(" (BART model)"),WSr=l(),qw=a("li"),yEe=a("strong"),QSr=o("bert"),HSr=o(" \u2014 "),CY=a("a"),USr=o("FlaxBertForSequenceClassification"),JSr=o(" (BERT model)"),YSr=l(),Nw=a("li"),LEe=a("strong"),KSr=o("big_bird"),ZSr=o(" \u2014 "),wY=a("a"),eRr=o("FlaxBigBirdForSequenceClassification"),oRr=o(" (BigBird model)"),rRr=l(),jw=a("li"),xEe=a("strong"),tRr=o("distilbert"),aRr=o(" \u2014 "),AY=a("a"),nRr=o("FlaxDistilBertForSequenceClassification"),sRr=o(" (DistilBERT model)"),lRr=l(),Dw=a("li"),$Ee=a("strong"),iRr=o("electra"),dRr=o(" \u2014 "),yY=a("a"),cRr=o("FlaxElectraForSequenceClassification"),mRr=o(" (ELECTRA model)"),fRr=l(),Gw=a("li"),kEe=a("strong"),gRr=o("mbart"),hRr=o(" \u2014 "),LY=a("a"),uRr=o("FlaxMBartForSequenceClassification"),pRr=o(" (mBART model)"),_Rr=l(),Ow=a("li"),SEe=a("strong"),bRr=o("roberta"),vRr=o(" \u2014 "),xY=a("a"),FRr=o("FlaxRobertaForSequenceClassification"),TRr=o(" (RoBERTa model)"),MRr=l(),Vw=a("li"),REe=a("strong"),ERr=o("roformer"),CRr=o(" \u2014 "),$Y=a("a"),wRr=o("FlaxRoFormerForSequenceClassification"),ARr=o(" (RoFormer model)"),yRr=l(),Xw=a("li"),PEe=a("strong"),LRr=o("xlm-roberta"),xRr=o(" \u2014 "),kY=a("a"),$Rr=o("FlaxXLMRobertaForSequenceClassification"),kRr=o(" (XLM-RoBERTa model)"),SRr=l(),F(zw.$$.fragment),pNe=l(),Wc=a("h2"),Ww=a("a"),BEe=a("span"),F(B9.$$.fragment),RRr=l(),IEe=a("span"),PRr=o("FlaxAutoModelForQuestionAnswering"),_Ne=l(),_r=a("div"),F(I9.$$.fragment),BRr=l(),Qc=a("p"),IRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SY=a("a"),qRr=o("from_pretrained()"),NRr=o(" class method or the "),RY=a("a"),jRr=o("from_config()"),DRr=o(` class
method.`),GRr=l(),q9=a("p"),ORr=o("This class cannot be instantiated directly using "),qEe=a("code"),VRr=o("__init__()"),XRr=o(" (throws an error)."),zRr=l(),Qt=a("div"),F(N9.$$.fragment),WRr=l(),NEe=a("p"),QRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HRr=l(),Hc=a("p"),URr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),JRr=o("not"),YRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),KRr=o("from_pretrained()"),ZRr=o(" to load the model weights."),ePr=l(),F(Qw.$$.fragment),oPr=l(),zr=a("div"),F(j9.$$.fragment),rPr=l(),DEe=a("p"),tPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aPr=l(),Fn=a("p"),nPr=o("The model class to instantiate is selected based on the "),GEe=a("code"),sPr=o("model_type"),lPr=o(` property of the config object (either
passed as an argument or loaded from `),OEe=a("code"),iPr=o("pretrained_model_name_or_path"),dPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=a("code"),cPr=o("pretrained_model_name_or_path"),mPr=o(":"),fPr=l(),$e=a("ul"),Hw=a("li"),XEe=a("strong"),gPr=o("albert"),hPr=o(" \u2014 "),BY=a("a"),uPr=o("FlaxAlbertForQuestionAnswering"),pPr=o(" (ALBERT model)"),_Pr=l(),Uw=a("li"),zEe=a("strong"),bPr=o("bart"),vPr=o(" \u2014 "),IY=a("a"),FPr=o("FlaxBartForQuestionAnswering"),TPr=o(" (BART model)"),MPr=l(),Jw=a("li"),WEe=a("strong"),EPr=o("bert"),CPr=o(" \u2014 "),qY=a("a"),wPr=o("FlaxBertForQuestionAnswering"),APr=o(" (BERT model)"),yPr=l(),Yw=a("li"),QEe=a("strong"),LPr=o("big_bird"),xPr=o(" \u2014 "),NY=a("a"),$Pr=o("FlaxBigBirdForQuestionAnswering"),kPr=o(" (BigBird model)"),SPr=l(),Kw=a("li"),HEe=a("strong"),RPr=o("distilbert"),PPr=o(" \u2014 "),jY=a("a"),BPr=o("FlaxDistilBertForQuestionAnswering"),IPr=o(" (DistilBERT model)"),qPr=l(),Zw=a("li"),UEe=a("strong"),NPr=o("electra"),jPr=o(" \u2014 "),DY=a("a"),DPr=o("FlaxElectraForQuestionAnswering"),GPr=o(" (ELECTRA model)"),OPr=l(),eA=a("li"),JEe=a("strong"),VPr=o("mbart"),XPr=o(" \u2014 "),GY=a("a"),zPr=o("FlaxMBartForQuestionAnswering"),WPr=o(" (mBART model)"),QPr=l(),oA=a("li"),YEe=a("strong"),HPr=o("roberta"),UPr=o(" \u2014 "),OY=a("a"),JPr=o("FlaxRobertaForQuestionAnswering"),YPr=o(" (RoBERTa model)"),KPr=l(),rA=a("li"),KEe=a("strong"),ZPr=o("roformer"),eBr=o(" \u2014 "),VY=a("a"),oBr=o("FlaxRoFormerForQuestionAnswering"),rBr=o(" (RoFormer model)"),tBr=l(),tA=a("li"),ZEe=a("strong"),aBr=o("xlm-roberta"),nBr=o(" \u2014 "),XY=a("a"),sBr=o("FlaxXLMRobertaForQuestionAnswering"),lBr=o(" (XLM-RoBERTa model)"),iBr=l(),F(aA.$$.fragment),bNe=l(),Uc=a("h2"),nA=a("a"),eCe=a("span"),F(D9.$$.fragment),dBr=l(),oCe=a("span"),cBr=o("FlaxAutoModelForTokenClassification"),vNe=l(),br=a("div"),F(G9.$$.fragment),mBr=l(),Jc=a("p"),fBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zY=a("a"),gBr=o("from_pretrained()"),hBr=o(" class method or the "),WY=a("a"),uBr=o("from_config()"),pBr=o(` class
method.`),_Br=l(),O9=a("p"),bBr=o("This class cannot be instantiated directly using "),rCe=a("code"),vBr=o("__init__()"),FBr=o(" (throws an error)."),TBr=l(),Ht=a("div"),F(V9.$$.fragment),MBr=l(),tCe=a("p"),EBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CBr=l(),Yc=a("p"),wBr=o(`Note:
Loading a model from its configuration file does `),aCe=a("strong"),ABr=o("not"),yBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),LBr=o("from_pretrained()"),xBr=o(" to load the model weights."),$Br=l(),F(sA.$$.fragment),kBr=l(),Wr=a("div"),F(X9.$$.fragment),SBr=l(),nCe=a("p"),RBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PBr=l(),Tn=a("p"),BBr=o("The model class to instantiate is selected based on the "),sCe=a("code"),IBr=o("model_type"),qBr=o(` property of the config object (either
passed as an argument or loaded from `),lCe=a("code"),NBr=o("pretrained_model_name_or_path"),jBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(":"),OBr=l(),De=a("ul"),lA=a("li"),dCe=a("strong"),VBr=o("albert"),XBr=o(" \u2014 "),HY=a("a"),zBr=o("FlaxAlbertForTokenClassification"),WBr=o(" (ALBERT model)"),QBr=l(),iA=a("li"),cCe=a("strong"),HBr=o("bert"),UBr=o(" \u2014 "),UY=a("a"),JBr=o("FlaxBertForTokenClassification"),YBr=o(" (BERT model)"),KBr=l(),dA=a("li"),mCe=a("strong"),ZBr=o("big_bird"),eIr=o(" \u2014 "),JY=a("a"),oIr=o("FlaxBigBirdForTokenClassification"),rIr=o(" (BigBird model)"),tIr=l(),cA=a("li"),fCe=a("strong"),aIr=o("distilbert"),nIr=o(" \u2014 "),YY=a("a"),sIr=o("FlaxDistilBertForTokenClassification"),lIr=o(" (DistilBERT model)"),iIr=l(),mA=a("li"),gCe=a("strong"),dIr=o("electra"),cIr=o(" \u2014 "),KY=a("a"),mIr=o("FlaxElectraForTokenClassification"),fIr=o(" (ELECTRA model)"),gIr=l(),fA=a("li"),hCe=a("strong"),hIr=o("roberta"),uIr=o(" \u2014 "),ZY=a("a"),pIr=o("FlaxRobertaForTokenClassification"),_Ir=o(" (RoBERTa model)"),bIr=l(),gA=a("li"),uCe=a("strong"),vIr=o("roformer"),FIr=o(" \u2014 "),eK=a("a"),TIr=o("FlaxRoFormerForTokenClassification"),MIr=o(" (RoFormer model)"),EIr=l(),hA=a("li"),pCe=a("strong"),CIr=o("xlm-roberta"),wIr=o(" \u2014 "),oK=a("a"),AIr=o("FlaxXLMRobertaForTokenClassification"),yIr=o(" (XLM-RoBERTa model)"),LIr=l(),F(uA.$$.fragment),FNe=l(),Kc=a("h2"),pA=a("a"),_Ce=a("span"),F(z9.$$.fragment),xIr=l(),bCe=a("span"),$Ir=o("FlaxAutoModelForMultipleChoice"),TNe=l(),vr=a("div"),F(W9.$$.fragment),kIr=l(),Zc=a("p"),SIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rK=a("a"),RIr=o("from_pretrained()"),PIr=o(" class method or the "),tK=a("a"),BIr=o("from_config()"),IIr=o(` class
method.`),qIr=l(),Q9=a("p"),NIr=o("This class cannot be instantiated directly using "),vCe=a("code"),jIr=o("__init__()"),DIr=o(" (throws an error)."),GIr=l(),Ut=a("div"),F(H9.$$.fragment),OIr=l(),FCe=a("p"),VIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XIr=l(),em=a("p"),zIr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),WIr=o("not"),QIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),HIr=o("from_pretrained()"),UIr=o(" to load the model weights."),JIr=l(),F(_A.$$.fragment),YIr=l(),Qr=a("div"),F(U9.$$.fragment),KIr=l(),MCe=a("p"),ZIr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eqr=l(),Mn=a("p"),oqr=o("The model class to instantiate is selected based on the "),ECe=a("code"),rqr=o("model_type"),tqr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),aqr=o("pretrained_model_name_or_path"),nqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),sqr=o("pretrained_model_name_or_path"),lqr=o(":"),iqr=l(),Ge=a("ul"),bA=a("li"),ACe=a("strong"),dqr=o("albert"),cqr=o(" \u2014 "),nK=a("a"),mqr=o("FlaxAlbertForMultipleChoice"),fqr=o(" (ALBERT model)"),gqr=l(),vA=a("li"),yCe=a("strong"),hqr=o("bert"),uqr=o(" \u2014 "),sK=a("a"),pqr=o("FlaxBertForMultipleChoice"),_qr=o(" (BERT model)"),bqr=l(),FA=a("li"),LCe=a("strong"),vqr=o("big_bird"),Fqr=o(" \u2014 "),lK=a("a"),Tqr=o("FlaxBigBirdForMultipleChoice"),Mqr=o(" (BigBird model)"),Eqr=l(),TA=a("li"),xCe=a("strong"),Cqr=o("distilbert"),wqr=o(" \u2014 "),iK=a("a"),Aqr=o("FlaxDistilBertForMultipleChoice"),yqr=o(" (DistilBERT model)"),Lqr=l(),MA=a("li"),$Ce=a("strong"),xqr=o("electra"),$qr=o(" \u2014 "),dK=a("a"),kqr=o("FlaxElectraForMultipleChoice"),Sqr=o(" (ELECTRA model)"),Rqr=l(),EA=a("li"),kCe=a("strong"),Pqr=o("roberta"),Bqr=o(" \u2014 "),cK=a("a"),Iqr=o("FlaxRobertaForMultipleChoice"),qqr=o(" (RoBERTa model)"),Nqr=l(),CA=a("li"),SCe=a("strong"),jqr=o("roformer"),Dqr=o(" \u2014 "),mK=a("a"),Gqr=o("FlaxRoFormerForMultipleChoice"),Oqr=o(" (RoFormer model)"),Vqr=l(),wA=a("li"),RCe=a("strong"),Xqr=o("xlm-roberta"),zqr=o(" \u2014 "),fK=a("a"),Wqr=o("FlaxXLMRobertaForMultipleChoice"),Qqr=o(" (XLM-RoBERTa model)"),Hqr=l(),F(AA.$$.fragment),MNe=l(),om=a("h2"),yA=a("a"),PCe=a("span"),F(J9.$$.fragment),Uqr=l(),BCe=a("span"),Jqr=o("FlaxAutoModelForNextSentencePrediction"),ENe=l(),Fr=a("div"),F(Y9.$$.fragment),Yqr=l(),rm=a("p"),Kqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gK=a("a"),Zqr=o("from_pretrained()"),eNr=o(" class method or the "),hK=a("a"),oNr=o("from_config()"),rNr=o(` class
method.`),tNr=l(),K9=a("p"),aNr=o("This class cannot be instantiated directly using "),ICe=a("code"),nNr=o("__init__()"),sNr=o(" (throws an error)."),lNr=l(),Jt=a("div"),F(Z9.$$.fragment),iNr=l(),qCe=a("p"),dNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cNr=l(),tm=a("p"),mNr=o(`Note:
Loading a model from its configuration file does `),NCe=a("strong"),fNr=o("not"),gNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),hNr=o("from_pretrained()"),uNr=o(" to load the model weights."),pNr=l(),F(LA.$$.fragment),_Nr=l(),Hr=a("div"),F(e7.$$.fragment),bNr=l(),jCe=a("p"),vNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FNr=l(),En=a("p"),TNr=o("The model class to instantiate is selected based on the "),DCe=a("code"),MNr=o("model_type"),ENr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),ANr=o("pretrained_model_name_or_path"),yNr=o(":"),LNr=l(),VCe=a("ul"),xA=a("li"),XCe=a("strong"),xNr=o("bert"),$Nr=o(" \u2014 "),pK=a("a"),kNr=o("FlaxBertForNextSentencePrediction"),SNr=o(" (BERT model)"),RNr=l(),F($A.$$.fragment),CNe=l(),am=a("h2"),kA=a("a"),zCe=a("span"),F(o7.$$.fragment),PNr=l(),WCe=a("span"),BNr=o("FlaxAutoModelForImageClassification"),wNe=l(),Tr=a("div"),F(r7.$$.fragment),INr=l(),nm=a("p"),qNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_K=a("a"),NNr=o("from_pretrained()"),jNr=o(" class method or the "),bK=a("a"),DNr=o("from_config()"),GNr=o(` class
method.`),ONr=l(),t7=a("p"),VNr=o("This class cannot be instantiated directly using "),QCe=a("code"),XNr=o("__init__()"),zNr=o(" (throws an error)."),WNr=l(),Yt=a("div"),F(a7.$$.fragment),QNr=l(),HCe=a("p"),HNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UNr=l(),sm=a("p"),JNr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),YNr=o("not"),KNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),ZNr=o("from_pretrained()"),ejr=o(" to load the model weights."),ojr=l(),F(SA.$$.fragment),rjr=l(),Ur=a("div"),F(n7.$$.fragment),tjr=l(),JCe=a("p"),ajr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),njr=l(),Cn=a("p"),sjr=o("The model class to instantiate is selected based on the "),YCe=a("code"),ljr=o("model_type"),ijr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),djr=o("pretrained_model_name_or_path"),cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),mjr=o("pretrained_model_name_or_path"),fjr=o(":"),gjr=l(),s7=a("ul"),RA=a("li"),e5e=a("strong"),hjr=o("beit"),ujr=o(" \u2014 "),FK=a("a"),pjr=o("FlaxBeitForImageClassification"),_jr=o(" (BEiT model)"),bjr=l(),PA=a("li"),o5e=a("strong"),vjr=o("vit"),Fjr=o(" \u2014 "),TK=a("a"),Tjr=o("FlaxViTForImageClassification"),Mjr=o(" (ViT model)"),Ejr=l(),F(BA.$$.fragment),ANe=l(),lm=a("h2"),IA=a("a"),r5e=a("span"),F(l7.$$.fragment),Cjr=l(),t5e=a("span"),wjr=o("FlaxAutoModelForVision2Seq"),yNe=l(),Mr=a("div"),F(i7.$$.fragment),Ajr=l(),im=a("p"),yjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MK=a("a"),Ljr=o("from_pretrained()"),xjr=o(" class method or the "),EK=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),d7=a("p"),Rjr=o("This class cannot be instantiated directly using "),a5e=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),Kt=a("div"),F(c7.$$.fragment),qjr=l(),n5e=a("p"),Njr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jjr=l(),dm=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(qA.$$.fragment),Wjr=l(),Jr=a("div"),F(m7.$$.fragment),Qjr=l(),l5e=a("p"),Hjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ujr=l(),wn=a("p"),Jjr=o("The model class to instantiate is selected based on the "),i5e=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),m5e=a("ul"),NA=a("li"),f5e=a("strong"),aDr=o("vision-encoder-decoder"),nDr=o(" \u2014 "),wK=a("a"),sDr=o("FlaxVisionEncoderDecoderModel"),lDr=o(" (Vision Encoder decoder model)"),iDr=l(),F(jA.$$.fragment),this.h()},l(m){const _=o8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var f7=s(u);f=n(f7,"A",{id:!0,class:!0,href:!0});var g5e=s(f);p=n(g5e,"SPAN",{});var h5e=s(p);T(d.$$.fragment,h5e),h5e.forEach(t),g5e.forEach(t),h=i(f7),Mo=n(f7,"SPAN",{});var u5e=s(Mo);ci=r(u5e,"Auto Classes"),u5e.forEach(t),f7.forEach(t),gm=i(m),rt=n(m,"P",{});var g7=s(rt);mi=r(g7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=n(g7,"CODE",{});var p5e=s(fi);ty=r(p5e,"from_pretrained()"),p5e.forEach(t),hm=r(g7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),g7.forEach(t),je=i(m),We=n(m,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var _5e=s(yn);ay=r(_5e,"AutoConfig"),_5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var b5e=s(xn);ny=r(b5e,"AutoModel"),b5e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var v5e=s($n);sy=r(v5e,"AutoTokenizer"),v5e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),um=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var h7=s(Ae);C$=r(h7,"will create a model that is an instance of "),pi=n(h7,"A",{href:!0});var F5e=s(pi);w$=r(F5e,"BertModel"),F5e.forEach(t),A$=r(h7,"."),h7.forEach(t),Eo=i(m),wa=n(m,"P",{});var u7=s(wa);y$=r(u7,"There is one class of "),pm=n(u7,"CODE",{});var T5e=s(pm);L$=r(T5e,"AutoModel"),T5e.forEach(t),IDe=r(u7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),u7.forEach(t),wIe=i(m),_i=n(m,"H2",{class:!0});var p7=s(_i);_m=n(p7,"A",{id:!0,class:!0,href:!0});var M5e=s(_m);bee=n(M5e,"SPAN",{});var E5e=s(bee);T(ly.$$.fragment,E5e),E5e.forEach(t),M5e.forEach(t),qDe=i(p7),vee=n(p7,"SPAN",{});var C5e=s(vee);NDe=r(C5e,"Extending the Auto Classes"),C5e.forEach(t),p7.forEach(t),AIe=i(m),kn=n(m,"P",{});var cm=s(kn);jDe=r(cm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fee=n(cm,"CODE",{});var w5e=s(Fee);DDe=r(w5e,"NewModel"),w5e.forEach(t),GDe=r(cm,", make sure you have a "),Tee=n(cm,"CODE",{});var A5e=s(Tee);ODe=r(A5e,"NewModelConfig"),A5e.forEach(t),VDe=r(cm,` then you can add those to the auto
classes like this:`),cm.forEach(t),yIe=i(m),T(iy.$$.fragment,m),LIe=i(m),x$=n(m,"P",{});var y5e=s(x$);XDe=r(y5e,"You will then be able to use the auto classes like you would usually do!"),y5e.forEach(t),xIe=i(m),T(bm.$$.fragment,m),$Ie=i(m),bi=n(m,"H2",{class:!0});var _7=s(bi);vm=n(_7,"A",{id:!0,class:!0,href:!0});var L5e=s(vm);Mee=n(L5e,"SPAN",{});var x5e=s(Mee);T(dy.$$.fragment,x5e),x5e.forEach(t),L5e.forEach(t),zDe=i(_7),Eee=n(_7,"SPAN",{});var $5e=s(Eee);WDe=r($5e,"AutoConfig"),$5e.forEach(t),_7.forEach(t),kIe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(cy.$$.fragment,et),QDe=i(et),my=n(et,"P",{});var b7=s(my);HDe=r(b7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$$=n(b7,"A",{href:!0});var k5e=s($$);UDe=r(k5e,"from_pretrained()"),k5e.forEach(t),JDe=r(b7," class method."),b7.forEach(t),YDe=i(et),fy=n(et,"P",{});var v7=s(fy);KDe=r(v7,"This class cannot be instantiated directly using "),Cee=n(v7,"CODE",{});var S5e=s(Cee);ZDe=r(S5e,"__init__()"),S5e.forEach(t),eGe=r(v7," (throws an error)."),v7.forEach(t),oGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(gy.$$.fragment,ot),rGe=i(ot),wee=n(ot,"P",{});var R5e=s(wee);tGe=r(R5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),R5e.forEach(t),aGe=i(ot),vi=n(ot,"P",{});var mm=s(vi);nGe=r(mm,"The configuration class to instantiate is selected based on the "),Aee=n(mm,"CODE",{});var P5e=s(Aee);sGe=r(P5e,"model_type"),P5e.forEach(t),lGe=r(mm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yee=n(mm,"CODE",{});var B5e=s(yee);iGe=r(B5e,"pretrained_model_name_or_path"),B5e.forEach(t),dGe=r(mm,":"),mm.forEach(t),cGe=i(ot),A=n(ot,"UL",{});var y=s(A);Fm=n(y,"LI",{});var DA=s(Fm);Lee=n(DA,"STRONG",{});var I5e=s(Lee);mGe=r(I5e,"albert"),I5e.forEach(t),fGe=r(DA," \u2014 "),k$=n(DA,"A",{href:!0});var q5e=s(k$);gGe=r(q5e,"AlbertConfig"),q5e.forEach(t),hGe=r(DA," (ALBERT model)"),DA.forEach(t),uGe=i(y),Tm=n(y,"LI",{});var GA=s(Tm);xee=n(GA,"STRONG",{});var N5e=s(xee);pGe=r(N5e,"bart"),N5e.forEach(t),_Ge=r(GA," \u2014 "),S$=n(GA,"A",{href:!0});var j5e=s(S$);bGe=r(j5e,"BartConfig"),j5e.forEach(t),vGe=r(GA," (BART model)"),GA.forEach(t),FGe=i(y),Mm=n(y,"LI",{});var OA=s(Mm);$ee=n(OA,"STRONG",{});var D5e=s($ee);TGe=r(D5e,"beit"),D5e.forEach(t),MGe=r(OA," \u2014 "),R$=n(OA,"A",{href:!0});var G5e=s(R$);EGe=r(G5e,"BeitConfig"),G5e.forEach(t),CGe=r(OA," (BEiT model)"),OA.forEach(t),wGe=i(y),Em=n(y,"LI",{});var VA=s(Em);kee=n(VA,"STRONG",{});var O5e=s(kee);AGe=r(O5e,"bert"),O5e.forEach(t),yGe=r(VA," \u2014 "),P$=n(VA,"A",{href:!0});var V5e=s(P$);LGe=r(V5e,"BertConfig"),V5e.forEach(t),xGe=r(VA," (BERT model)"),VA.forEach(t),$Ge=i(y),Cm=n(y,"LI",{});var XA=s(Cm);See=n(XA,"STRONG",{});var X5e=s(See);kGe=r(X5e,"bert-generation"),X5e.forEach(t),SGe=r(XA," \u2014 "),B$=n(XA,"A",{href:!0});var z5e=s(B$);RGe=r(z5e,"BertGenerationConfig"),z5e.forEach(t),PGe=r(XA," (Bert Generation model)"),XA.forEach(t),BGe=i(y),wm=n(y,"LI",{});var zA=s(wm);Ree=n(zA,"STRONG",{});var W5e=s(Ree);IGe=r(W5e,"big_bird"),W5e.forEach(t),qGe=r(zA," \u2014 "),I$=n(zA,"A",{href:!0});var Q5e=s(I$);NGe=r(Q5e,"BigBirdConfig"),Q5e.forEach(t),jGe=r(zA," (BigBird model)"),zA.forEach(t),DGe=i(y),Am=n(y,"LI",{});var WA=s(Am);Pee=n(WA,"STRONG",{});var H5e=s(Pee);GGe=r(H5e,"bigbird_pegasus"),H5e.forEach(t),OGe=r(WA," \u2014 "),q$=n(WA,"A",{href:!0});var U5e=s(q$);VGe=r(U5e,"BigBirdPegasusConfig"),U5e.forEach(t),XGe=r(WA," (BigBirdPegasus model)"),WA.forEach(t),zGe=i(y),ym=n(y,"LI",{});var QA=s(ym);Bee=n(QA,"STRONG",{});var J5e=s(Bee);WGe=r(J5e,"blenderbot"),J5e.forEach(t),QGe=r(QA," \u2014 "),N$=n(QA,"A",{href:!0});var Y5e=s(N$);HGe=r(Y5e,"BlenderbotConfig"),Y5e.forEach(t),UGe=r(QA," (Blenderbot model)"),QA.forEach(t),JGe=i(y),Lm=n(y,"LI",{});var HA=s(Lm);Iee=n(HA,"STRONG",{});var K5e=s(Iee);YGe=r(K5e,"blenderbot-small"),K5e.forEach(t),KGe=r(HA," \u2014 "),j$=n(HA,"A",{href:!0});var Z5e=s(j$);ZGe=r(Z5e,"BlenderbotSmallConfig"),Z5e.forEach(t),eOe=r(HA," (BlenderbotSmall model)"),HA.forEach(t),oOe=i(y),xm=n(y,"LI",{});var UA=s(xm);qee=n(UA,"STRONG",{});var e3e=s(qee);rOe=r(e3e,"camembert"),e3e.forEach(t),tOe=r(UA," \u2014 "),D$=n(UA,"A",{href:!0});var o3e=s(D$);aOe=r(o3e,"CamembertConfig"),o3e.forEach(t),nOe=r(UA," (CamemBERT model)"),UA.forEach(t),sOe=i(y),$m=n(y,"LI",{});var JA=s($m);Nee=n(JA,"STRONG",{});var r3e=s(Nee);lOe=r(r3e,"canine"),r3e.forEach(t),iOe=r(JA," \u2014 "),G$=n(JA,"A",{href:!0});var t3e=s(G$);dOe=r(t3e,"CanineConfig"),t3e.forEach(t),cOe=r(JA," (Canine model)"),JA.forEach(t),mOe=i(y),km=n(y,"LI",{});var YA=s(km);jee=n(YA,"STRONG",{});var a3e=s(jee);fOe=r(a3e,"clip"),a3e.forEach(t),gOe=r(YA," \u2014 "),O$=n(YA,"A",{href:!0});var n3e=s(O$);hOe=r(n3e,"CLIPConfig"),n3e.forEach(t),uOe=r(YA," (CLIP model)"),YA.forEach(t),pOe=i(y),Sm=n(y,"LI",{});var KA=s(Sm);Dee=n(KA,"STRONG",{});var s3e=s(Dee);_Oe=r(s3e,"convbert"),s3e.forEach(t),bOe=r(KA," \u2014 "),V$=n(KA,"A",{href:!0});var l3e=s(V$);vOe=r(l3e,"ConvBertConfig"),l3e.forEach(t),FOe=r(KA," (ConvBERT model)"),KA.forEach(t),TOe=i(y),Rm=n(y,"LI",{});var ZA=s(Rm);Gee=n(ZA,"STRONG",{});var i3e=s(Gee);MOe=r(i3e,"convnext"),i3e.forEach(t),EOe=r(ZA," \u2014 "),X$=n(ZA,"A",{href:!0});var d3e=s(X$);COe=r(d3e,"ConvNextConfig"),d3e.forEach(t),wOe=r(ZA," (ConvNext model)"),ZA.forEach(t),AOe=i(y),Pm=n(y,"LI",{});var e6=s(Pm);Oee=n(e6,"STRONG",{});var c3e=s(Oee);yOe=r(c3e,"ctrl"),c3e.forEach(t),LOe=r(e6," \u2014 "),z$=n(e6,"A",{href:!0});var m3e=s(z$);xOe=r(m3e,"CTRLConfig"),m3e.forEach(t),$Oe=r(e6," (CTRL model)"),e6.forEach(t),kOe=i(y),Bm=n(y,"LI",{});var o6=s(Bm);Vee=n(o6,"STRONG",{});var f3e=s(Vee);SOe=r(f3e,"data2vec-audio"),f3e.forEach(t),ROe=r(o6," \u2014 "),W$=n(o6,"A",{href:!0});var g3e=s(W$);POe=r(g3e,"Data2VecAudioConfig"),g3e.forEach(t),BOe=r(o6," (Data2VecAudio model)"),o6.forEach(t),IOe=i(y),Im=n(y,"LI",{});var r6=s(Im);Xee=n(r6,"STRONG",{});var h3e=s(Xee);qOe=r(h3e,"data2vec-text"),h3e.forEach(t),NOe=r(r6," \u2014 "),Q$=n(r6,"A",{href:!0});var u3e=s(Q$);jOe=r(u3e,"Data2VecTextConfig"),u3e.forEach(t),DOe=r(r6," (Data2VecText model)"),r6.forEach(t),GOe=i(y),qm=n(y,"LI",{});var t6=s(qm);zee=n(t6,"STRONG",{});var p3e=s(zee);OOe=r(p3e,"data2vec-vision"),p3e.forEach(t),VOe=r(t6," \u2014 "),H$=n(t6,"A",{href:!0});var _3e=s(H$);XOe=r(_3e,"Data2VecVisionConfig"),_3e.forEach(t),zOe=r(t6," (Data2VecVision model)"),t6.forEach(t),WOe=i(y),Nm=n(y,"LI",{});var a6=s(Nm);Wee=n(a6,"STRONG",{});var b3e=s(Wee);QOe=r(b3e,"deberta"),b3e.forEach(t),HOe=r(a6," \u2014 "),U$=n(a6,"A",{href:!0});var v3e=s(U$);UOe=r(v3e,"DebertaConfig"),v3e.forEach(t),JOe=r(a6," (DeBERTa model)"),a6.forEach(t),YOe=i(y),jm=n(y,"LI",{});var n6=s(jm);Qee=n(n6,"STRONG",{});var F3e=s(Qee);KOe=r(F3e,"deberta-v2"),F3e.forEach(t),ZOe=r(n6," \u2014 "),J$=n(n6,"A",{href:!0});var T3e=s(J$);eVe=r(T3e,"DebertaV2Config"),T3e.forEach(t),oVe=r(n6," (DeBERTa-v2 model)"),n6.forEach(t),rVe=i(y),Dm=n(y,"LI",{});var s6=s(Dm);Hee=n(s6,"STRONG",{});var M3e=s(Hee);tVe=r(M3e,"decision_transformer"),M3e.forEach(t),aVe=r(s6," \u2014 "),Y$=n(s6,"A",{href:!0});var E3e=s(Y$);nVe=r(E3e,"DecisionTransformerConfig"),E3e.forEach(t),sVe=r(s6," (Decision Transformer model)"),s6.forEach(t),lVe=i(y),Gm=n(y,"LI",{});var l6=s(Gm);Uee=n(l6,"STRONG",{});var C3e=s(Uee);iVe=r(C3e,"deit"),C3e.forEach(t),dVe=r(l6," \u2014 "),K$=n(l6,"A",{href:!0});var w3e=s(K$);cVe=r(w3e,"DeiTConfig"),w3e.forEach(t),mVe=r(l6," (DeiT model)"),l6.forEach(t),fVe=i(y),Om=n(y,"LI",{});var i6=s(Om);Jee=n(i6,"STRONG",{});var A3e=s(Jee);gVe=r(A3e,"detr"),A3e.forEach(t),hVe=r(i6," \u2014 "),Z$=n(i6,"A",{href:!0});var cDr=s(Z$);uVe=r(cDr,"DetrConfig"),cDr.forEach(t),pVe=r(i6," (DETR model)"),i6.forEach(t),_Ve=i(y),Vm=n(y,"LI",{});var y3e=s(Vm);Yee=n(y3e,"STRONG",{});var mDr=s(Yee);bVe=r(mDr,"distilbert"),mDr.forEach(t),vVe=r(y3e," \u2014 "),ek=n(y3e,"A",{href:!0});var fDr=s(ek);FVe=r(fDr,"DistilBertConfig"),fDr.forEach(t),TVe=r(y3e," (DistilBERT model)"),y3e.forEach(t),MVe=i(y),Xm=n(y,"LI",{});var L3e=s(Xm);Kee=n(L3e,"STRONG",{});var gDr=s(Kee);EVe=r(gDr,"dpr"),gDr.forEach(t),CVe=r(L3e," \u2014 "),ok=n(L3e,"A",{href:!0});var hDr=s(ok);wVe=r(hDr,"DPRConfig"),hDr.forEach(t),AVe=r(L3e," (DPR model)"),L3e.forEach(t),yVe=i(y),zm=n(y,"LI",{});var x3e=s(zm);Zee=n(x3e,"STRONG",{});var uDr=s(Zee);LVe=r(uDr,"dpt"),uDr.forEach(t),xVe=r(x3e," \u2014 "),rk=n(x3e,"A",{href:!0});var pDr=s(rk);$Ve=r(pDr,"DPTConfig"),pDr.forEach(t),kVe=r(x3e," (DPT model)"),x3e.forEach(t),SVe=i(y),Wm=n(y,"LI",{});var $3e=s(Wm);eoe=n($3e,"STRONG",{});var _Dr=s(eoe);RVe=r(_Dr,"electra"),_Dr.forEach(t),PVe=r($3e," \u2014 "),tk=n($3e,"A",{href:!0});var bDr=s(tk);BVe=r(bDr,"ElectraConfig"),bDr.forEach(t),IVe=r($3e," (ELECTRA model)"),$3e.forEach(t),qVe=i(y),Qm=n(y,"LI",{});var k3e=s(Qm);ooe=n(k3e,"STRONG",{});var vDr=s(ooe);NVe=r(vDr,"encoder-decoder"),vDr.forEach(t),jVe=r(k3e," \u2014 "),ak=n(k3e,"A",{href:!0});var FDr=s(ak);DVe=r(FDr,"EncoderDecoderConfig"),FDr.forEach(t),GVe=r(k3e," (Encoder decoder model)"),k3e.forEach(t),OVe=i(y),Hm=n(y,"LI",{});var S3e=s(Hm);roe=n(S3e,"STRONG",{});var TDr=s(roe);VVe=r(TDr,"flaubert"),TDr.forEach(t),XVe=r(S3e," \u2014 "),nk=n(S3e,"A",{href:!0});var MDr=s(nk);zVe=r(MDr,"FlaubertConfig"),MDr.forEach(t),WVe=r(S3e," (FlauBERT model)"),S3e.forEach(t),QVe=i(y),Um=n(y,"LI",{});var R3e=s(Um);toe=n(R3e,"STRONG",{});var EDr=s(toe);HVe=r(EDr,"flava"),EDr.forEach(t),UVe=r(R3e," \u2014 "),sk=n(R3e,"A",{href:!0});var CDr=s(sk);JVe=r(CDr,"FlavaConfig"),CDr.forEach(t),YVe=r(R3e," (Flava model)"),R3e.forEach(t),KVe=i(y),Jm=n(y,"LI",{});var P3e=s(Jm);aoe=n(P3e,"STRONG",{});var wDr=s(aoe);ZVe=r(wDr,"fnet"),wDr.forEach(t),eXe=r(P3e," \u2014 "),lk=n(P3e,"A",{href:!0});var ADr=s(lk);oXe=r(ADr,"FNetConfig"),ADr.forEach(t),rXe=r(P3e," (FNet model)"),P3e.forEach(t),tXe=i(y),Ym=n(y,"LI",{});var B3e=s(Ym);noe=n(B3e,"STRONG",{});var yDr=s(noe);aXe=r(yDr,"fsmt"),yDr.forEach(t),nXe=r(B3e," \u2014 "),ik=n(B3e,"A",{href:!0});var LDr=s(ik);sXe=r(LDr,"FSMTConfig"),LDr.forEach(t),lXe=r(B3e," (FairSeq Machine-Translation model)"),B3e.forEach(t),iXe=i(y),Km=n(y,"LI",{});var I3e=s(Km);soe=n(I3e,"STRONG",{});var xDr=s(soe);dXe=r(xDr,"funnel"),xDr.forEach(t),cXe=r(I3e," \u2014 "),dk=n(I3e,"A",{href:!0});var $Dr=s(dk);mXe=r($Dr,"FunnelConfig"),$Dr.forEach(t),fXe=r(I3e," (Funnel Transformer model)"),I3e.forEach(t),gXe=i(y),Zm=n(y,"LI",{});var q3e=s(Zm);loe=n(q3e,"STRONG",{});var kDr=s(loe);hXe=r(kDr,"glpn"),kDr.forEach(t),uXe=r(q3e," \u2014 "),ck=n(q3e,"A",{href:!0});var SDr=s(ck);pXe=r(SDr,"GLPNConfig"),SDr.forEach(t),_Xe=r(q3e," (GLPN model)"),q3e.forEach(t),bXe=i(y),ef=n(y,"LI",{});var N3e=s(ef);ioe=n(N3e,"STRONG",{});var RDr=s(ioe);vXe=r(RDr,"gpt2"),RDr.forEach(t),FXe=r(N3e," \u2014 "),mk=n(N3e,"A",{href:!0});var PDr=s(mk);TXe=r(PDr,"GPT2Config"),PDr.forEach(t),MXe=r(N3e," (OpenAI GPT-2 model)"),N3e.forEach(t),EXe=i(y),of=n(y,"LI",{});var j3e=s(of);doe=n(j3e,"STRONG",{});var BDr=s(doe);CXe=r(BDr,"gpt_neo"),BDr.forEach(t),wXe=r(j3e," \u2014 "),fk=n(j3e,"A",{href:!0});var IDr=s(fk);AXe=r(IDr,"GPTNeoConfig"),IDr.forEach(t),yXe=r(j3e," (GPT Neo model)"),j3e.forEach(t),LXe=i(y),rf=n(y,"LI",{});var D3e=s(rf);coe=n(D3e,"STRONG",{});var qDr=s(coe);xXe=r(qDr,"gptj"),qDr.forEach(t),$Xe=r(D3e," \u2014 "),gk=n(D3e,"A",{href:!0});var NDr=s(gk);kXe=r(NDr,"GPTJConfig"),NDr.forEach(t),SXe=r(D3e," (GPT-J model)"),D3e.forEach(t),RXe=i(y),tf=n(y,"LI",{});var G3e=s(tf);moe=n(G3e,"STRONG",{});var jDr=s(moe);PXe=r(jDr,"hubert"),jDr.forEach(t),BXe=r(G3e," \u2014 "),hk=n(G3e,"A",{href:!0});var DDr=s(hk);IXe=r(DDr,"HubertConfig"),DDr.forEach(t),qXe=r(G3e," (Hubert model)"),G3e.forEach(t),NXe=i(y),af=n(y,"LI",{});var O3e=s(af);foe=n(O3e,"STRONG",{});var GDr=s(foe);jXe=r(GDr,"ibert"),GDr.forEach(t),DXe=r(O3e," \u2014 "),uk=n(O3e,"A",{href:!0});var ODr=s(uk);GXe=r(ODr,"IBertConfig"),ODr.forEach(t),OXe=r(O3e," (I-BERT model)"),O3e.forEach(t),VXe=i(y),nf=n(y,"LI",{});var V3e=s(nf);goe=n(V3e,"STRONG",{});var VDr=s(goe);XXe=r(VDr,"imagegpt"),VDr.forEach(t),zXe=r(V3e," \u2014 "),pk=n(V3e,"A",{href:!0});var XDr=s(pk);WXe=r(XDr,"ImageGPTConfig"),XDr.forEach(t),QXe=r(V3e," (ImageGPT model)"),V3e.forEach(t),HXe=i(y),sf=n(y,"LI",{});var X3e=s(sf);hoe=n(X3e,"STRONG",{});var zDr=s(hoe);UXe=r(zDr,"layoutlm"),zDr.forEach(t),JXe=r(X3e," \u2014 "),_k=n(X3e,"A",{href:!0});var WDr=s(_k);YXe=r(WDr,"LayoutLMConfig"),WDr.forEach(t),KXe=r(X3e," (LayoutLM model)"),X3e.forEach(t),ZXe=i(y),lf=n(y,"LI",{});var z3e=s(lf);uoe=n(z3e,"STRONG",{});var QDr=s(uoe);eze=r(QDr,"layoutlmv2"),QDr.forEach(t),oze=r(z3e," \u2014 "),bk=n(z3e,"A",{href:!0});var HDr=s(bk);rze=r(HDr,"LayoutLMv2Config"),HDr.forEach(t),tze=r(z3e," (LayoutLMv2 model)"),z3e.forEach(t),aze=i(y),df=n(y,"LI",{});var W3e=s(df);poe=n(W3e,"STRONG",{});var UDr=s(poe);nze=r(UDr,"led"),UDr.forEach(t),sze=r(W3e," \u2014 "),vk=n(W3e,"A",{href:!0});var JDr=s(vk);lze=r(JDr,"LEDConfig"),JDr.forEach(t),ize=r(W3e," (LED model)"),W3e.forEach(t),dze=i(y),cf=n(y,"LI",{});var Q3e=s(cf);_oe=n(Q3e,"STRONG",{});var YDr=s(_oe);cze=r(YDr,"longformer"),YDr.forEach(t),mze=r(Q3e," \u2014 "),Fk=n(Q3e,"A",{href:!0});var KDr=s(Fk);fze=r(KDr,"LongformerConfig"),KDr.forEach(t),gze=r(Q3e," (Longformer model)"),Q3e.forEach(t),hze=i(y),mf=n(y,"LI",{});var H3e=s(mf);boe=n(H3e,"STRONG",{});var ZDr=s(boe);uze=r(ZDr,"luke"),ZDr.forEach(t),pze=r(H3e," \u2014 "),Tk=n(H3e,"A",{href:!0});var eGr=s(Tk);_ze=r(eGr,"LukeConfig"),eGr.forEach(t),bze=r(H3e," (LUKE model)"),H3e.forEach(t),vze=i(y),ff=n(y,"LI",{});var U3e=s(ff);voe=n(U3e,"STRONG",{});var oGr=s(voe);Fze=r(oGr,"lxmert"),oGr.forEach(t),Tze=r(U3e," \u2014 "),Mk=n(U3e,"A",{href:!0});var rGr=s(Mk);Mze=r(rGr,"LxmertConfig"),rGr.forEach(t),Eze=r(U3e," (LXMERT model)"),U3e.forEach(t),Cze=i(y),gf=n(y,"LI",{});var J3e=s(gf);Foe=n(J3e,"STRONG",{});var tGr=s(Foe);wze=r(tGr,"m2m_100"),tGr.forEach(t),Aze=r(J3e," \u2014 "),Ek=n(J3e,"A",{href:!0});var aGr=s(Ek);yze=r(aGr,"M2M100Config"),aGr.forEach(t),Lze=r(J3e," (M2M100 model)"),J3e.forEach(t),xze=i(y),hf=n(y,"LI",{});var Y3e=s(hf);Toe=n(Y3e,"STRONG",{});var nGr=s(Toe);$ze=r(nGr,"marian"),nGr.forEach(t),kze=r(Y3e," \u2014 "),Ck=n(Y3e,"A",{href:!0});var sGr=s(Ck);Sze=r(sGr,"MarianConfig"),sGr.forEach(t),Rze=r(Y3e," (Marian model)"),Y3e.forEach(t),Pze=i(y),uf=n(y,"LI",{});var K3e=s(uf);Moe=n(K3e,"STRONG",{});var lGr=s(Moe);Bze=r(lGr,"maskformer"),lGr.forEach(t),Ize=r(K3e," \u2014 "),wk=n(K3e,"A",{href:!0});var iGr=s(wk);qze=r(iGr,"MaskFormerConfig"),iGr.forEach(t),Nze=r(K3e," (MaskFormer model)"),K3e.forEach(t),jze=i(y),pf=n(y,"LI",{});var Z3e=s(pf);Eoe=n(Z3e,"STRONG",{});var dGr=s(Eoe);Dze=r(dGr,"mbart"),dGr.forEach(t),Gze=r(Z3e," \u2014 "),Ak=n(Z3e,"A",{href:!0});var cGr=s(Ak);Oze=r(cGr,"MBartConfig"),cGr.forEach(t),Vze=r(Z3e," (mBART model)"),Z3e.forEach(t),Xze=i(y),_f=n(y,"LI",{});var ewe=s(_f);Coe=n(ewe,"STRONG",{});var mGr=s(Coe);zze=r(mGr,"megatron-bert"),mGr.forEach(t),Wze=r(ewe," \u2014 "),yk=n(ewe,"A",{href:!0});var fGr=s(yk);Qze=r(fGr,"MegatronBertConfig"),fGr.forEach(t),Hze=r(ewe," (MegatronBert model)"),ewe.forEach(t),Uze=i(y),bf=n(y,"LI",{});var owe=s(bf);woe=n(owe,"STRONG",{});var gGr=s(woe);Jze=r(gGr,"mobilebert"),gGr.forEach(t),Yze=r(owe," \u2014 "),Lk=n(owe,"A",{href:!0});var hGr=s(Lk);Kze=r(hGr,"MobileBertConfig"),hGr.forEach(t),Zze=r(owe," (MobileBERT model)"),owe.forEach(t),eWe=i(y),vf=n(y,"LI",{});var rwe=s(vf);Aoe=n(rwe,"STRONG",{});var uGr=s(Aoe);oWe=r(uGr,"mpnet"),uGr.forEach(t),rWe=r(rwe," \u2014 "),xk=n(rwe,"A",{href:!0});var pGr=s(xk);tWe=r(pGr,"MPNetConfig"),pGr.forEach(t),aWe=r(rwe," (MPNet model)"),rwe.forEach(t),nWe=i(y),Ff=n(y,"LI",{});var twe=s(Ff);yoe=n(twe,"STRONG",{});var _Gr=s(yoe);sWe=r(_Gr,"mt5"),_Gr.forEach(t),lWe=r(twe," \u2014 "),$k=n(twe,"A",{href:!0});var bGr=s($k);iWe=r(bGr,"MT5Config"),bGr.forEach(t),dWe=r(twe," (mT5 model)"),twe.forEach(t),cWe=i(y),Tf=n(y,"LI",{});var awe=s(Tf);Loe=n(awe,"STRONG",{});var vGr=s(Loe);mWe=r(vGr,"nystromformer"),vGr.forEach(t),fWe=r(awe," \u2014 "),kk=n(awe,"A",{href:!0});var FGr=s(kk);gWe=r(FGr,"NystromformerConfig"),FGr.forEach(t),hWe=r(awe," (Nystromformer model)"),awe.forEach(t),uWe=i(y),Mf=n(y,"LI",{});var nwe=s(Mf);xoe=n(nwe,"STRONG",{});var TGr=s(xoe);pWe=r(TGr,"openai-gpt"),TGr.forEach(t),_We=r(nwe," \u2014 "),Sk=n(nwe,"A",{href:!0});var MGr=s(Sk);bWe=r(MGr,"OpenAIGPTConfig"),MGr.forEach(t),vWe=r(nwe," (OpenAI GPT model)"),nwe.forEach(t),FWe=i(y),Ef=n(y,"LI",{});var swe=s(Ef);$oe=n(swe,"STRONG",{});var EGr=s($oe);TWe=r(EGr,"opt"),EGr.forEach(t),MWe=r(swe," \u2014 "),Rk=n(swe,"A",{href:!0});var CGr=s(Rk);EWe=r(CGr,"OPTConfig"),CGr.forEach(t),CWe=r(swe," (OPT model)"),swe.forEach(t),wWe=i(y),Cf=n(y,"LI",{});var lwe=s(Cf);koe=n(lwe,"STRONG",{});var wGr=s(koe);AWe=r(wGr,"pegasus"),wGr.forEach(t),yWe=r(lwe," \u2014 "),Pk=n(lwe,"A",{href:!0});var AGr=s(Pk);LWe=r(AGr,"PegasusConfig"),AGr.forEach(t),xWe=r(lwe," (Pegasus model)"),lwe.forEach(t),$We=i(y),wf=n(y,"LI",{});var iwe=s(wf);Soe=n(iwe,"STRONG",{});var yGr=s(Soe);kWe=r(yGr,"perceiver"),yGr.forEach(t),SWe=r(iwe," \u2014 "),Bk=n(iwe,"A",{href:!0});var LGr=s(Bk);RWe=r(LGr,"PerceiverConfig"),LGr.forEach(t),PWe=r(iwe," (Perceiver model)"),iwe.forEach(t),BWe=i(y),Af=n(y,"LI",{});var dwe=s(Af);Roe=n(dwe,"STRONG",{});var xGr=s(Roe);IWe=r(xGr,"plbart"),xGr.forEach(t),qWe=r(dwe," \u2014 "),Ik=n(dwe,"A",{href:!0});var $Gr=s(Ik);NWe=r($Gr,"PLBartConfig"),$Gr.forEach(t),jWe=r(dwe," (PLBart model)"),dwe.forEach(t),DWe=i(y),yf=n(y,"LI",{});var cwe=s(yf);Poe=n(cwe,"STRONG",{});var kGr=s(Poe);GWe=r(kGr,"poolformer"),kGr.forEach(t),OWe=r(cwe," \u2014 "),qk=n(cwe,"A",{href:!0});var SGr=s(qk);VWe=r(SGr,"PoolFormerConfig"),SGr.forEach(t),XWe=r(cwe," (PoolFormer model)"),cwe.forEach(t),zWe=i(y),Lf=n(y,"LI",{});var mwe=s(Lf);Boe=n(mwe,"STRONG",{});var RGr=s(Boe);WWe=r(RGr,"prophetnet"),RGr.forEach(t),QWe=r(mwe," \u2014 "),Nk=n(mwe,"A",{href:!0});var PGr=s(Nk);HWe=r(PGr,"ProphetNetConfig"),PGr.forEach(t),UWe=r(mwe," (ProphetNet model)"),mwe.forEach(t),JWe=i(y),xf=n(y,"LI",{});var fwe=s(xf);Ioe=n(fwe,"STRONG",{});var BGr=s(Ioe);YWe=r(BGr,"qdqbert"),BGr.forEach(t),KWe=r(fwe," \u2014 "),jk=n(fwe,"A",{href:!0});var IGr=s(jk);ZWe=r(IGr,"QDQBertConfig"),IGr.forEach(t),eQe=r(fwe," (QDQBert model)"),fwe.forEach(t),oQe=i(y),$f=n(y,"LI",{});var gwe=s($f);qoe=n(gwe,"STRONG",{});var qGr=s(qoe);rQe=r(qGr,"rag"),qGr.forEach(t),tQe=r(gwe," \u2014 "),Dk=n(gwe,"A",{href:!0});var NGr=s(Dk);aQe=r(NGr,"RagConfig"),NGr.forEach(t),nQe=r(gwe," (RAG model)"),gwe.forEach(t),sQe=i(y),kf=n(y,"LI",{});var hwe=s(kf);Noe=n(hwe,"STRONG",{});var jGr=s(Noe);lQe=r(jGr,"realm"),jGr.forEach(t),iQe=r(hwe," \u2014 "),Gk=n(hwe,"A",{href:!0});var DGr=s(Gk);dQe=r(DGr,"RealmConfig"),DGr.forEach(t),cQe=r(hwe," (Realm model)"),hwe.forEach(t),mQe=i(y),Sf=n(y,"LI",{});var uwe=s(Sf);joe=n(uwe,"STRONG",{});var GGr=s(joe);fQe=r(GGr,"reformer"),GGr.forEach(t),gQe=r(uwe," \u2014 "),Ok=n(uwe,"A",{href:!0});var OGr=s(Ok);hQe=r(OGr,"ReformerConfig"),OGr.forEach(t),uQe=r(uwe," (Reformer model)"),uwe.forEach(t),pQe=i(y),Rf=n(y,"LI",{});var pwe=s(Rf);Doe=n(pwe,"STRONG",{});var VGr=s(Doe);_Qe=r(VGr,"regnet"),VGr.forEach(t),bQe=r(pwe," \u2014 "),Vk=n(pwe,"A",{href:!0});var XGr=s(Vk);vQe=r(XGr,"RegNetConfig"),XGr.forEach(t),FQe=r(pwe," (RegNet model)"),pwe.forEach(t),TQe=i(y),Pf=n(y,"LI",{});var _we=s(Pf);Goe=n(_we,"STRONG",{});var zGr=s(Goe);MQe=r(zGr,"rembert"),zGr.forEach(t),EQe=r(_we," \u2014 "),Xk=n(_we,"A",{href:!0});var WGr=s(Xk);CQe=r(WGr,"RemBertConfig"),WGr.forEach(t),wQe=r(_we," (RemBERT model)"),_we.forEach(t),AQe=i(y),Bf=n(y,"LI",{});var bwe=s(Bf);Ooe=n(bwe,"STRONG",{});var QGr=s(Ooe);yQe=r(QGr,"resnet"),QGr.forEach(t),LQe=r(bwe," \u2014 "),zk=n(bwe,"A",{href:!0});var HGr=s(zk);xQe=r(HGr,"ResNetConfig"),HGr.forEach(t),$Qe=r(bwe," (ResNet model)"),bwe.forEach(t),kQe=i(y),If=n(y,"LI",{});var vwe=s(If);Voe=n(vwe,"STRONG",{});var UGr=s(Voe);SQe=r(UGr,"retribert"),UGr.forEach(t),RQe=r(vwe," \u2014 "),Wk=n(vwe,"A",{href:!0});var JGr=s(Wk);PQe=r(JGr,"RetriBertConfig"),JGr.forEach(t),BQe=r(vwe," (RetriBERT model)"),vwe.forEach(t),IQe=i(y),qf=n(y,"LI",{});var Fwe=s(qf);Xoe=n(Fwe,"STRONG",{});var YGr=s(Xoe);qQe=r(YGr,"roberta"),YGr.forEach(t),NQe=r(Fwe," \u2014 "),Qk=n(Fwe,"A",{href:!0});var KGr=s(Qk);jQe=r(KGr,"RobertaConfig"),KGr.forEach(t),DQe=r(Fwe," (RoBERTa model)"),Fwe.forEach(t),GQe=i(y),Nf=n(y,"LI",{});var Twe=s(Nf);zoe=n(Twe,"STRONG",{});var ZGr=s(zoe);OQe=r(ZGr,"roformer"),ZGr.forEach(t),VQe=r(Twe," \u2014 "),Hk=n(Twe,"A",{href:!0});var eOr=s(Hk);XQe=r(eOr,"RoFormerConfig"),eOr.forEach(t),zQe=r(Twe," (RoFormer model)"),Twe.forEach(t),WQe=i(y),jf=n(y,"LI",{});var Mwe=s(jf);Woe=n(Mwe,"STRONG",{});var oOr=s(Woe);QQe=r(oOr,"segformer"),oOr.forEach(t),HQe=r(Mwe," \u2014 "),Uk=n(Mwe,"A",{href:!0});var rOr=s(Uk);UQe=r(rOr,"SegformerConfig"),rOr.forEach(t),JQe=r(Mwe," (SegFormer model)"),Mwe.forEach(t),YQe=i(y),Df=n(y,"LI",{});var Ewe=s(Df);Qoe=n(Ewe,"STRONG",{});var tOr=s(Qoe);KQe=r(tOr,"sew"),tOr.forEach(t),ZQe=r(Ewe," \u2014 "),Jk=n(Ewe,"A",{href:!0});var aOr=s(Jk);eHe=r(aOr,"SEWConfig"),aOr.forEach(t),oHe=r(Ewe," (SEW model)"),Ewe.forEach(t),rHe=i(y),Gf=n(y,"LI",{});var Cwe=s(Gf);Hoe=n(Cwe,"STRONG",{});var nOr=s(Hoe);tHe=r(nOr,"sew-d"),nOr.forEach(t),aHe=r(Cwe," \u2014 "),Yk=n(Cwe,"A",{href:!0});var sOr=s(Yk);nHe=r(sOr,"SEWDConfig"),sOr.forEach(t),sHe=r(Cwe," (SEW-D model)"),Cwe.forEach(t),lHe=i(y),Of=n(y,"LI",{});var wwe=s(Of);Uoe=n(wwe,"STRONG",{});var lOr=s(Uoe);iHe=r(lOr,"speech-encoder-decoder"),lOr.forEach(t),dHe=r(wwe," \u2014 "),Kk=n(wwe,"A",{href:!0});var iOr=s(Kk);cHe=r(iOr,"SpeechEncoderDecoderConfig"),iOr.forEach(t),mHe=r(wwe," (Speech Encoder decoder model)"),wwe.forEach(t),fHe=i(y),Vf=n(y,"LI",{});var Awe=s(Vf);Joe=n(Awe,"STRONG",{});var dOr=s(Joe);gHe=r(dOr,"speech_to_text"),dOr.forEach(t),hHe=r(Awe," \u2014 "),Zk=n(Awe,"A",{href:!0});var cOr=s(Zk);uHe=r(cOr,"Speech2TextConfig"),cOr.forEach(t),pHe=r(Awe," (Speech2Text model)"),Awe.forEach(t),_He=i(y),Xf=n(y,"LI",{});var ywe=s(Xf);Yoe=n(ywe,"STRONG",{});var mOr=s(Yoe);bHe=r(mOr,"speech_to_text_2"),mOr.forEach(t),vHe=r(ywe," \u2014 "),eS=n(ywe,"A",{href:!0});var fOr=s(eS);FHe=r(fOr,"Speech2Text2Config"),fOr.forEach(t),THe=r(ywe," (Speech2Text2 model)"),ywe.forEach(t),MHe=i(y),zf=n(y,"LI",{});var Lwe=s(zf);Koe=n(Lwe,"STRONG",{});var gOr=s(Koe);EHe=r(gOr,"splinter"),gOr.forEach(t),CHe=r(Lwe," \u2014 "),oS=n(Lwe,"A",{href:!0});var hOr=s(oS);wHe=r(hOr,"SplinterConfig"),hOr.forEach(t),AHe=r(Lwe," (Splinter model)"),Lwe.forEach(t),yHe=i(y),Wf=n(y,"LI",{});var xwe=s(Wf);Zoe=n(xwe,"STRONG",{});var uOr=s(Zoe);LHe=r(uOr,"squeezebert"),uOr.forEach(t),xHe=r(xwe," \u2014 "),rS=n(xwe,"A",{href:!0});var pOr=s(rS);$He=r(pOr,"SqueezeBertConfig"),pOr.forEach(t),kHe=r(xwe," (SqueezeBERT model)"),xwe.forEach(t),SHe=i(y),Qf=n(y,"LI",{});var $we=s(Qf);ere=n($we,"STRONG",{});var _Or=s(ere);RHe=r(_Or,"swin"),_Or.forEach(t),PHe=r($we," \u2014 "),tS=n($we,"A",{href:!0});var bOr=s(tS);BHe=r(bOr,"SwinConfig"),bOr.forEach(t),IHe=r($we," (Swin model)"),$we.forEach(t),qHe=i(y),Hf=n(y,"LI",{});var kwe=s(Hf);ore=n(kwe,"STRONG",{});var vOr=s(ore);NHe=r(vOr,"t5"),vOr.forEach(t),jHe=r(kwe," \u2014 "),aS=n(kwe,"A",{href:!0});var FOr=s(aS);DHe=r(FOr,"T5Config"),FOr.forEach(t),GHe=r(kwe," (T5 model)"),kwe.forEach(t),OHe=i(y),Uf=n(y,"LI",{});var Swe=s(Uf);rre=n(Swe,"STRONG",{});var TOr=s(rre);VHe=r(TOr,"tapas"),TOr.forEach(t),XHe=r(Swe," \u2014 "),nS=n(Swe,"A",{href:!0});var MOr=s(nS);zHe=r(MOr,"TapasConfig"),MOr.forEach(t),WHe=r(Swe," (TAPAS model)"),Swe.forEach(t),QHe=i(y),Jf=n(y,"LI",{});var Rwe=s(Jf);tre=n(Rwe,"STRONG",{});var EOr=s(tre);HHe=r(EOr,"transfo-xl"),EOr.forEach(t),UHe=r(Rwe," \u2014 "),sS=n(Rwe,"A",{href:!0});var COr=s(sS);JHe=r(COr,"TransfoXLConfig"),COr.forEach(t),YHe=r(Rwe," (Transformer-XL model)"),Rwe.forEach(t),KHe=i(y),Yf=n(y,"LI",{});var Pwe=s(Yf);are=n(Pwe,"STRONG",{});var wOr=s(are);ZHe=r(wOr,"trocr"),wOr.forEach(t),eUe=r(Pwe," \u2014 "),lS=n(Pwe,"A",{href:!0});var AOr=s(lS);oUe=r(AOr,"TrOCRConfig"),AOr.forEach(t),rUe=r(Pwe," (TrOCR model)"),Pwe.forEach(t),tUe=i(y),Kf=n(y,"LI",{});var Bwe=s(Kf);nre=n(Bwe,"STRONG",{});var yOr=s(nre);aUe=r(yOr,"unispeech"),yOr.forEach(t),nUe=r(Bwe," \u2014 "),iS=n(Bwe,"A",{href:!0});var LOr=s(iS);sUe=r(LOr,"UniSpeechConfig"),LOr.forEach(t),lUe=r(Bwe," (UniSpeech model)"),Bwe.forEach(t),iUe=i(y),Zf=n(y,"LI",{});var Iwe=s(Zf);sre=n(Iwe,"STRONG",{});var xOr=s(sre);dUe=r(xOr,"unispeech-sat"),xOr.forEach(t),cUe=r(Iwe," \u2014 "),dS=n(Iwe,"A",{href:!0});var $Or=s(dS);mUe=r($Or,"UniSpeechSatConfig"),$Or.forEach(t),fUe=r(Iwe," (UniSpeechSat model)"),Iwe.forEach(t),gUe=i(y),eg=n(y,"LI",{});var qwe=s(eg);lre=n(qwe,"STRONG",{});var kOr=s(lre);hUe=r(kOr,"van"),kOr.forEach(t),uUe=r(qwe," \u2014 "),cS=n(qwe,"A",{href:!0});var SOr=s(cS);pUe=r(SOr,"VanConfig"),SOr.forEach(t),_Ue=r(qwe," (VAN model)"),qwe.forEach(t),bUe=i(y),og=n(y,"LI",{});var Nwe=s(og);ire=n(Nwe,"STRONG",{});var ROr=s(ire);vUe=r(ROr,"vilt"),ROr.forEach(t),FUe=r(Nwe," \u2014 "),mS=n(Nwe,"A",{href:!0});var POr=s(mS);TUe=r(POr,"ViltConfig"),POr.forEach(t),MUe=r(Nwe," (ViLT model)"),Nwe.forEach(t),EUe=i(y),rg=n(y,"LI",{});var jwe=s(rg);dre=n(jwe,"STRONG",{});var BOr=s(dre);CUe=r(BOr,"vision-encoder-decoder"),BOr.forEach(t),wUe=r(jwe," \u2014 "),fS=n(jwe,"A",{href:!0});var IOr=s(fS);AUe=r(IOr,"VisionEncoderDecoderConfig"),IOr.forEach(t),yUe=r(jwe," (Vision Encoder decoder model)"),jwe.forEach(t),LUe=i(y),tg=n(y,"LI",{});var Dwe=s(tg);cre=n(Dwe,"STRONG",{});var qOr=s(cre);xUe=r(qOr,"vision-text-dual-encoder"),qOr.forEach(t),$Ue=r(Dwe," \u2014 "),gS=n(Dwe,"A",{href:!0});var NOr=s(gS);kUe=r(NOr,"VisionTextDualEncoderConfig"),NOr.forEach(t),SUe=r(Dwe," (VisionTextDualEncoder model)"),Dwe.forEach(t),RUe=i(y),ag=n(y,"LI",{});var Gwe=s(ag);mre=n(Gwe,"STRONG",{});var jOr=s(mre);PUe=r(jOr,"visual_bert"),jOr.forEach(t),BUe=r(Gwe," \u2014 "),hS=n(Gwe,"A",{href:!0});var DOr=s(hS);IUe=r(DOr,"VisualBertConfig"),DOr.forEach(t),qUe=r(Gwe," (VisualBert model)"),Gwe.forEach(t),NUe=i(y),ng=n(y,"LI",{});var Owe=s(ng);fre=n(Owe,"STRONG",{});var GOr=s(fre);jUe=r(GOr,"vit"),GOr.forEach(t),DUe=r(Owe," \u2014 "),uS=n(Owe,"A",{href:!0});var OOr=s(uS);GUe=r(OOr,"ViTConfig"),OOr.forEach(t),OUe=r(Owe," (ViT model)"),Owe.forEach(t),VUe=i(y),sg=n(y,"LI",{});var Vwe=s(sg);gre=n(Vwe,"STRONG",{});var VOr=s(gre);XUe=r(VOr,"vit_mae"),VOr.forEach(t),zUe=r(Vwe," \u2014 "),pS=n(Vwe,"A",{href:!0});var XOr=s(pS);WUe=r(XOr,"ViTMAEConfig"),XOr.forEach(t),QUe=r(Vwe," (ViTMAE model)"),Vwe.forEach(t),HUe=i(y),lg=n(y,"LI",{});var Xwe=s(lg);hre=n(Xwe,"STRONG",{});var zOr=s(hre);UUe=r(zOr,"wav2vec2"),zOr.forEach(t),JUe=r(Xwe," \u2014 "),_S=n(Xwe,"A",{href:!0});var WOr=s(_S);YUe=r(WOr,"Wav2Vec2Config"),WOr.forEach(t),KUe=r(Xwe," (Wav2Vec2 model)"),Xwe.forEach(t),ZUe=i(y),ig=n(y,"LI",{});var zwe=s(ig);ure=n(zwe,"STRONG",{});var QOr=s(ure);eJe=r(QOr,"wav2vec2-conformer"),QOr.forEach(t),oJe=r(zwe," \u2014 "),bS=n(zwe,"A",{href:!0});var HOr=s(bS);rJe=r(HOr,"Wav2Vec2ConformerConfig"),HOr.forEach(t),tJe=r(zwe," (Wav2Vec2-Conformer model)"),zwe.forEach(t),aJe=i(y),dg=n(y,"LI",{});var Wwe=s(dg);pre=n(Wwe,"STRONG",{});var UOr=s(pre);nJe=r(UOr,"wavlm"),UOr.forEach(t),sJe=r(Wwe," \u2014 "),vS=n(Wwe,"A",{href:!0});var JOr=s(vS);lJe=r(JOr,"WavLMConfig"),JOr.forEach(t),iJe=r(Wwe," (WavLM model)"),Wwe.forEach(t),dJe=i(y),cg=n(y,"LI",{});var Qwe=s(cg);_re=n(Qwe,"STRONG",{});var YOr=s(_re);cJe=r(YOr,"xglm"),YOr.forEach(t),mJe=r(Qwe," \u2014 "),FS=n(Qwe,"A",{href:!0});var KOr=s(FS);fJe=r(KOr,"XGLMConfig"),KOr.forEach(t),gJe=r(Qwe," (XGLM model)"),Qwe.forEach(t),hJe=i(y),mg=n(y,"LI",{});var Hwe=s(mg);bre=n(Hwe,"STRONG",{});var ZOr=s(bre);uJe=r(ZOr,"xlm"),ZOr.forEach(t),pJe=r(Hwe," \u2014 "),TS=n(Hwe,"A",{href:!0});var eVr=s(TS);_Je=r(eVr,"XLMConfig"),eVr.forEach(t),bJe=r(Hwe," (XLM model)"),Hwe.forEach(t),vJe=i(y),fg=n(y,"LI",{});var Uwe=s(fg);vre=n(Uwe,"STRONG",{});var oVr=s(vre);FJe=r(oVr,"xlm-prophetnet"),oVr.forEach(t),TJe=r(Uwe," \u2014 "),MS=n(Uwe,"A",{href:!0});var rVr=s(MS);MJe=r(rVr,"XLMProphetNetConfig"),rVr.forEach(t),EJe=r(Uwe," (XLMProphetNet model)"),Uwe.forEach(t),CJe=i(y),gg=n(y,"LI",{});var Jwe=s(gg);Fre=n(Jwe,"STRONG",{});var tVr=s(Fre);wJe=r(tVr,"xlm-roberta"),tVr.forEach(t),AJe=r(Jwe," \u2014 "),ES=n(Jwe,"A",{href:!0});var aVr=s(ES);yJe=r(aVr,"XLMRobertaConfig"),aVr.forEach(t),LJe=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),xJe=i(y),hg=n(y,"LI",{});var Ywe=s(hg);Tre=n(Ywe,"STRONG",{});var nVr=s(Tre);$Je=r(nVr,"xlm-roberta-xl"),nVr.forEach(t),kJe=r(Ywe," \u2014 "),CS=n(Ywe,"A",{href:!0});var sVr=s(CS);SJe=r(sVr,"XLMRobertaXLConfig"),sVr.forEach(t),RJe=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),PJe=i(y),ug=n(y,"LI",{});var Kwe=s(ug);Mre=n(Kwe,"STRONG",{});var lVr=s(Mre);BJe=r(lVr,"xlnet"),lVr.forEach(t),IJe=r(Kwe," \u2014 "),wS=n(Kwe,"A",{href:!0});var iVr=s(wS);qJe=r(iVr,"XLNetConfig"),iVr.forEach(t),NJe=r(Kwe," (XLNet model)"),Kwe.forEach(t),jJe=i(y),pg=n(y,"LI",{});var Zwe=s(pg);Ere=n(Zwe,"STRONG",{});var dVr=s(Ere);DJe=r(dVr,"yolos"),dVr.forEach(t),GJe=r(Zwe," \u2014 "),AS=n(Zwe,"A",{href:!0});var cVr=s(AS);OJe=r(cVr,"YolosConfig"),cVr.forEach(t),VJe=r(Zwe," (YOLOS model)"),Zwe.forEach(t),XJe=i(y),_g=n(y,"LI",{});var eAe=s(_g);Cre=n(eAe,"STRONG",{});var mVr=s(Cre);zJe=r(mVr,"yoso"),mVr.forEach(t),WJe=r(eAe," \u2014 "),yS=n(eAe,"A",{href:!0});var fVr=s(yS);QJe=r(fVr,"YosoConfig"),fVr.forEach(t),HJe=r(eAe," (YOSO model)"),eAe.forEach(t),y.forEach(t),UJe=i(ot),T(bg.$$.fragment,ot),ot.forEach(t),JJe=i(et),vg=n(et,"DIV",{class:!0});var xNe=s(vg);T(hy.$$.fragment,xNe),YJe=i(xNe),wre=n(xNe,"P",{});var gVr=s(wre);KJe=r(gVr,"Register a new configuration for this class."),gVr.forEach(t),xNe.forEach(t),et.forEach(t),SIe=i(m),Fi=n(m,"H2",{class:!0});var $Ne=s(Fi);Fg=n($Ne,"A",{id:!0,class:!0,href:!0});var hVr=s(Fg);Are=n(hVr,"SPAN",{});var uVr=s(Are);T(uy.$$.fragment,uVr),uVr.forEach(t),hVr.forEach(t),ZJe=i($Ne),yre=n($Ne,"SPAN",{});var pVr=s(yre);eYe=r(pVr,"AutoTokenizer"),pVr.forEach(t),$Ne.forEach(t),RIe=i(m),wo=n(m,"DIV",{class:!0});var Is=s(wo);T(py.$$.fragment,Is),oYe=i(Is),_y=n(Is,"P",{});var kNe=s(_y);rYe=r(kNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LS=n(kNe,"A",{href:!0});var _Vr=s(LS);tYe=r(_Vr,"AutoTokenizer.from_pretrained()"),_Vr.forEach(t),aYe=r(kNe," class method."),kNe.forEach(t),nYe=i(Is),by=n(Is,"P",{});var SNe=s(by);sYe=r(SNe,"This class cannot be instantiated directly using "),Lre=n(SNe,"CODE",{});var bVr=s(Lre);lYe=r(bVr,"__init__()"),bVr.forEach(t),iYe=r(SNe," (throws an error)."),SNe.forEach(t),dYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(vy.$$.fragment,qs),cYe=i(qs),xre=n(qs,"P",{});var vVr=s(xre);mYe=r(vVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),vVr.forEach(t),fYe=i(qs),Aa=n(qs,"P",{});var d6=s(Aa);gYe=r(d6,"The tokenizer class to instantiate is selected based on the "),$re=n(d6,"CODE",{});var FVr=s($re);hYe=r(FVr,"model_type"),FVr.forEach(t),uYe=r(d6,` property of the config object (either
passed as an argument or loaded from `),kre=n(d6,"CODE",{});var TVr=s(kre);pYe=r(TVr,"pretrained_model_name_or_path"),TVr.forEach(t),_Ye=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=n(d6,"CODE",{});var MVr=s(Sre);bYe=r(MVr,"pretrained_model_name_or_path"),MVr.forEach(t),vYe=r(d6,":"),d6.forEach(t),FYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var F7=s(Sn);Rre=n(F7,"STRONG",{});var EVr=s(Rre);TYe=r(EVr,"albert"),EVr.forEach(t),MYe=r(F7," \u2014 "),xS=n(F7,"A",{href:!0});var CVr=s(xS);EYe=r(CVr,"AlbertTokenizer"),CVr.forEach(t),CYe=r(F7," or "),$S=n(F7,"A",{href:!0});var wVr=s($S);wYe=r(wVr,"AlbertTokenizerFast"),wVr.forEach(t),AYe=r(F7," (ALBERT model)"),F7.forEach(t),yYe=i(S),Rn=n(S,"LI",{});var T7=s(Rn);Pre=n(T7,"STRONG",{});var AVr=s(Pre);LYe=r(AVr,"bart"),AVr.forEach(t),xYe=r(T7," \u2014 "),kS=n(T7,"A",{href:!0});var yVr=s(kS);$Ye=r(yVr,"BartTokenizer"),yVr.forEach(t),kYe=r(T7," or "),SS=n(T7,"A",{href:!0});var LVr=s(SS);SYe=r(LVr,"BartTokenizerFast"),LVr.forEach(t),RYe=r(T7," (BART model)"),T7.forEach(t),PYe=i(S),Pn=n(S,"LI",{});var M7=s(Pn);Bre=n(M7,"STRONG",{});var xVr=s(Bre);BYe=r(xVr,"barthez"),xVr.forEach(t),IYe=r(M7," \u2014 "),RS=n(M7,"A",{href:!0});var $Vr=s(RS);qYe=r($Vr,"BarthezTokenizer"),$Vr.forEach(t),NYe=r(M7," or "),PS=n(M7,"A",{href:!0});var kVr=s(PS);jYe=r(kVr,"BarthezTokenizerFast"),kVr.forEach(t),DYe=r(M7," (BARThez model)"),M7.forEach(t),GYe=i(S),Tg=n(S,"LI",{});var oAe=s(Tg);Ire=n(oAe,"STRONG",{});var SVr=s(Ire);OYe=r(SVr,"bartpho"),SVr.forEach(t),VYe=r(oAe," \u2014 "),BS=n(oAe,"A",{href:!0});var RVr=s(BS);XYe=r(RVr,"BartphoTokenizer"),RVr.forEach(t),zYe=r(oAe," (BARTpho model)"),oAe.forEach(t),WYe=i(S),Bn=n(S,"LI",{});var E7=s(Bn);qre=n(E7,"STRONG",{});var PVr=s(qre);QYe=r(PVr,"bert"),PVr.forEach(t),HYe=r(E7," \u2014 "),IS=n(E7,"A",{href:!0});var BVr=s(IS);UYe=r(BVr,"BertTokenizer"),BVr.forEach(t),JYe=r(E7," or "),qS=n(E7,"A",{href:!0});var IVr=s(qS);YYe=r(IVr,"BertTokenizerFast"),IVr.forEach(t),KYe=r(E7," (BERT model)"),E7.forEach(t),ZYe=i(S),Mg=n(S,"LI",{});var rAe=s(Mg);Nre=n(rAe,"STRONG",{});var qVr=s(Nre);eKe=r(qVr,"bert-generation"),qVr.forEach(t),oKe=r(rAe," \u2014 "),NS=n(rAe,"A",{href:!0});var NVr=s(NS);rKe=r(NVr,"BertGenerationTokenizer"),NVr.forEach(t),tKe=r(rAe," (Bert Generation model)"),rAe.forEach(t),aKe=i(S),Eg=n(S,"LI",{});var tAe=s(Eg);jre=n(tAe,"STRONG",{});var jVr=s(jre);nKe=r(jVr,"bert-japanese"),jVr.forEach(t),sKe=r(tAe," \u2014 "),jS=n(tAe,"A",{href:!0});var DVr=s(jS);lKe=r(DVr,"BertJapaneseTokenizer"),DVr.forEach(t),iKe=r(tAe," (BertJapanese model)"),tAe.forEach(t),dKe=i(S),Cg=n(S,"LI",{});var aAe=s(Cg);Dre=n(aAe,"STRONG",{});var GVr=s(Dre);cKe=r(GVr,"bertweet"),GVr.forEach(t),mKe=r(aAe," \u2014 "),DS=n(aAe,"A",{href:!0});var OVr=s(DS);fKe=r(OVr,"BertweetTokenizer"),OVr.forEach(t),gKe=r(aAe," (Bertweet model)"),aAe.forEach(t),hKe=i(S),In=n(S,"LI",{});var C7=s(In);Gre=n(C7,"STRONG",{});var VVr=s(Gre);uKe=r(VVr,"big_bird"),VVr.forEach(t),pKe=r(C7," \u2014 "),GS=n(C7,"A",{href:!0});var XVr=s(GS);_Ke=r(XVr,"BigBirdTokenizer"),XVr.forEach(t),bKe=r(C7," or "),OS=n(C7,"A",{href:!0});var zVr=s(OS);vKe=r(zVr,"BigBirdTokenizerFast"),zVr.forEach(t),FKe=r(C7," (BigBird model)"),C7.forEach(t),TKe=i(S),qn=n(S,"LI",{});var w7=s(qn);Ore=n(w7,"STRONG",{});var WVr=s(Ore);MKe=r(WVr,"bigbird_pegasus"),WVr.forEach(t),EKe=r(w7," \u2014 "),VS=n(w7,"A",{href:!0});var QVr=s(VS);CKe=r(QVr,"PegasusTokenizer"),QVr.forEach(t),wKe=r(w7," or "),XS=n(w7,"A",{href:!0});var HVr=s(XS);AKe=r(HVr,"PegasusTokenizerFast"),HVr.forEach(t),yKe=r(w7," (BigBirdPegasus model)"),w7.forEach(t),LKe=i(S),Nn=n(S,"LI",{});var A7=s(Nn);Vre=n(A7,"STRONG",{});var UVr=s(Vre);xKe=r(UVr,"blenderbot"),UVr.forEach(t),$Ke=r(A7," \u2014 "),zS=n(A7,"A",{href:!0});var JVr=s(zS);kKe=r(JVr,"BlenderbotTokenizer"),JVr.forEach(t),SKe=r(A7," or "),WS=n(A7,"A",{href:!0});var YVr=s(WS);RKe=r(YVr,"BlenderbotTokenizerFast"),YVr.forEach(t),PKe=r(A7," (Blenderbot model)"),A7.forEach(t),BKe=i(S),wg=n(S,"LI",{});var nAe=s(wg);Xre=n(nAe,"STRONG",{});var KVr=s(Xre);IKe=r(KVr,"blenderbot-small"),KVr.forEach(t),qKe=r(nAe," \u2014 "),QS=n(nAe,"A",{href:!0});var ZVr=s(QS);NKe=r(ZVr,"BlenderbotSmallTokenizer"),ZVr.forEach(t),jKe=r(nAe," (BlenderbotSmall model)"),nAe.forEach(t),DKe=i(S),Ag=n(S,"LI",{});var sAe=s(Ag);zre=n(sAe,"STRONG",{});var eXr=s(zre);GKe=r(eXr,"byt5"),eXr.forEach(t),OKe=r(sAe," \u2014 "),HS=n(sAe,"A",{href:!0});var oXr=s(HS);VKe=r(oXr,"ByT5Tokenizer"),oXr.forEach(t),XKe=r(sAe," (ByT5 model)"),sAe.forEach(t),zKe=i(S),jn=n(S,"LI",{});var y7=s(jn);Wre=n(y7,"STRONG",{});var rXr=s(Wre);WKe=r(rXr,"camembert"),rXr.forEach(t),QKe=r(y7," \u2014 "),US=n(y7,"A",{href:!0});var tXr=s(US);HKe=r(tXr,"CamembertTokenizer"),tXr.forEach(t),UKe=r(y7," or "),JS=n(y7,"A",{href:!0});var aXr=s(JS);JKe=r(aXr,"CamembertTokenizerFast"),aXr.forEach(t),YKe=r(y7," (CamemBERT model)"),y7.forEach(t),KKe=i(S),yg=n(S,"LI",{});var lAe=s(yg);Qre=n(lAe,"STRONG",{});var nXr=s(Qre);ZKe=r(nXr,"canine"),nXr.forEach(t),eZe=r(lAe," \u2014 "),YS=n(lAe,"A",{href:!0});var sXr=s(YS);oZe=r(sXr,"CanineTokenizer"),sXr.forEach(t),rZe=r(lAe," (Canine model)"),lAe.forEach(t),tZe=i(S),Dn=n(S,"LI",{});var L7=s(Dn);Hre=n(L7,"STRONG",{});var lXr=s(Hre);aZe=r(lXr,"clip"),lXr.forEach(t),nZe=r(L7," \u2014 "),KS=n(L7,"A",{href:!0});var iXr=s(KS);sZe=r(iXr,"CLIPTokenizer"),iXr.forEach(t),lZe=r(L7," or "),ZS=n(L7,"A",{href:!0});var dXr=s(ZS);iZe=r(dXr,"CLIPTokenizerFast"),dXr.forEach(t),dZe=r(L7," (CLIP model)"),L7.forEach(t),cZe=i(S),Gn=n(S,"LI",{});var x7=s(Gn);Ure=n(x7,"STRONG",{});var cXr=s(Ure);mZe=r(cXr,"convbert"),cXr.forEach(t),fZe=r(x7," \u2014 "),eR=n(x7,"A",{href:!0});var mXr=s(eR);gZe=r(mXr,"ConvBertTokenizer"),mXr.forEach(t),hZe=r(x7," or "),oR=n(x7,"A",{href:!0});var fXr=s(oR);uZe=r(fXr,"ConvBertTokenizerFast"),fXr.forEach(t),pZe=r(x7," (ConvBERT model)"),x7.forEach(t),_Ze=i(S),On=n(S,"LI",{});var $7=s(On);Jre=n($7,"STRONG",{});var gXr=s(Jre);bZe=r(gXr,"cpm"),gXr.forEach(t),vZe=r($7," \u2014 "),rR=n($7,"A",{href:!0});var hXr=s(rR);FZe=r(hXr,"CpmTokenizer"),hXr.forEach(t),TZe=r($7," or "),tR=n($7,"A",{href:!0});var uXr=s(tR);MZe=r(uXr,"CpmTokenizerFast"),uXr.forEach(t),EZe=r($7," (CPM model)"),$7.forEach(t),CZe=i(S),Lg=n(S,"LI",{});var iAe=s(Lg);Yre=n(iAe,"STRONG",{});var pXr=s(Yre);wZe=r(pXr,"ctrl"),pXr.forEach(t),AZe=r(iAe," \u2014 "),aR=n(iAe,"A",{href:!0});var _Xr=s(aR);yZe=r(_Xr,"CTRLTokenizer"),_Xr.forEach(t),LZe=r(iAe," (CTRL model)"),iAe.forEach(t),xZe=i(S),Vn=n(S,"LI",{});var k7=s(Vn);Kre=n(k7,"STRONG",{});var bXr=s(Kre);$Ze=r(bXr,"data2vec-text"),bXr.forEach(t),kZe=r(k7," \u2014 "),nR=n(k7,"A",{href:!0});var vXr=s(nR);SZe=r(vXr,"RobertaTokenizer"),vXr.forEach(t),RZe=r(k7," or "),sR=n(k7,"A",{href:!0});var FXr=s(sR);PZe=r(FXr,"RobertaTokenizerFast"),FXr.forEach(t),BZe=r(k7," (Data2VecText model)"),k7.forEach(t),IZe=i(S),Xn=n(S,"LI",{});var S7=s(Xn);Zre=n(S7,"STRONG",{});var TXr=s(Zre);qZe=r(TXr,"deberta"),TXr.forEach(t),NZe=r(S7," \u2014 "),lR=n(S7,"A",{href:!0});var MXr=s(lR);jZe=r(MXr,"DebertaTokenizer"),MXr.forEach(t),DZe=r(S7," or "),iR=n(S7,"A",{href:!0});var EXr=s(iR);GZe=r(EXr,"DebertaTokenizerFast"),EXr.forEach(t),OZe=r(S7," (DeBERTa model)"),S7.forEach(t),VZe=i(S),zn=n(S,"LI",{});var R7=s(zn);ete=n(R7,"STRONG",{});var CXr=s(ete);XZe=r(CXr,"deberta-v2"),CXr.forEach(t),zZe=r(R7," \u2014 "),dR=n(R7,"A",{href:!0});var wXr=s(dR);WZe=r(wXr,"DebertaV2Tokenizer"),wXr.forEach(t),QZe=r(R7," or "),cR=n(R7,"A",{href:!0});var AXr=s(cR);HZe=r(AXr,"DebertaV2TokenizerFast"),AXr.forEach(t),UZe=r(R7," (DeBERTa-v2 model)"),R7.forEach(t),JZe=i(S),Wn=n(S,"LI",{});var P7=s(Wn);ote=n(P7,"STRONG",{});var yXr=s(ote);YZe=r(yXr,"distilbert"),yXr.forEach(t),KZe=r(P7," \u2014 "),mR=n(P7,"A",{href:!0});var LXr=s(mR);ZZe=r(LXr,"DistilBertTokenizer"),LXr.forEach(t),eeo=r(P7," or "),fR=n(P7,"A",{href:!0});var xXr=s(fR);oeo=r(xXr,"DistilBertTokenizerFast"),xXr.forEach(t),reo=r(P7," (DistilBERT model)"),P7.forEach(t),teo=i(S),Qn=n(S,"LI",{});var B7=s(Qn);rte=n(B7,"STRONG",{});var $Xr=s(rte);aeo=r($Xr,"dpr"),$Xr.forEach(t),neo=r(B7," \u2014 "),gR=n(B7,"A",{href:!0});var kXr=s(gR);seo=r(kXr,"DPRQuestionEncoderTokenizer"),kXr.forEach(t),leo=r(B7," or "),hR=n(B7,"A",{href:!0});var SXr=s(hR);ieo=r(SXr,"DPRQuestionEncoderTokenizerFast"),SXr.forEach(t),deo=r(B7," (DPR model)"),B7.forEach(t),ceo=i(S),Hn=n(S,"LI",{});var I7=s(Hn);tte=n(I7,"STRONG",{});var RXr=s(tte);meo=r(RXr,"electra"),RXr.forEach(t),feo=r(I7," \u2014 "),uR=n(I7,"A",{href:!0});var PXr=s(uR);geo=r(PXr,"ElectraTokenizer"),PXr.forEach(t),heo=r(I7," or "),pR=n(I7,"A",{href:!0});var BXr=s(pR);ueo=r(BXr,"ElectraTokenizerFast"),BXr.forEach(t),peo=r(I7," (ELECTRA model)"),I7.forEach(t),_eo=i(S),xg=n(S,"LI",{});var dAe=s(xg);ate=n(dAe,"STRONG",{});var IXr=s(ate);beo=r(IXr,"flaubert"),IXr.forEach(t),veo=r(dAe," \u2014 "),_R=n(dAe,"A",{href:!0});var qXr=s(_R);Feo=r(qXr,"FlaubertTokenizer"),qXr.forEach(t),Teo=r(dAe," (FlauBERT model)"),dAe.forEach(t),Meo=i(S),Un=n(S,"LI",{});var q7=s(Un);nte=n(q7,"STRONG",{});var NXr=s(nte);Eeo=r(NXr,"fnet"),NXr.forEach(t),Ceo=r(q7," \u2014 "),bR=n(q7,"A",{href:!0});var jXr=s(bR);weo=r(jXr,"FNetTokenizer"),jXr.forEach(t),Aeo=r(q7," or "),vR=n(q7,"A",{href:!0});var DXr=s(vR);yeo=r(DXr,"FNetTokenizerFast"),DXr.forEach(t),Leo=r(q7," (FNet model)"),q7.forEach(t),xeo=i(S),$g=n(S,"LI",{});var cAe=s($g);ste=n(cAe,"STRONG",{});var GXr=s(ste);$eo=r(GXr,"fsmt"),GXr.forEach(t),keo=r(cAe," \u2014 "),FR=n(cAe,"A",{href:!0});var OXr=s(FR);Seo=r(OXr,"FSMTTokenizer"),OXr.forEach(t),Reo=r(cAe," (FairSeq Machine-Translation model)"),cAe.forEach(t),Peo=i(S),Jn=n(S,"LI",{});var N7=s(Jn);lte=n(N7,"STRONG",{});var VXr=s(lte);Beo=r(VXr,"funnel"),VXr.forEach(t),Ieo=r(N7," \u2014 "),TR=n(N7,"A",{href:!0});var XXr=s(TR);qeo=r(XXr,"FunnelTokenizer"),XXr.forEach(t),Neo=r(N7," or "),MR=n(N7,"A",{href:!0});var zXr=s(MR);jeo=r(zXr,"FunnelTokenizerFast"),zXr.forEach(t),Deo=r(N7," (Funnel Transformer model)"),N7.forEach(t),Geo=i(S),Yn=n(S,"LI",{});var j7=s(Yn);ite=n(j7,"STRONG",{});var WXr=s(ite);Oeo=r(WXr,"gpt2"),WXr.forEach(t),Veo=r(j7," \u2014 "),ER=n(j7,"A",{href:!0});var QXr=s(ER);Xeo=r(QXr,"GPT2Tokenizer"),QXr.forEach(t),zeo=r(j7," or "),CR=n(j7,"A",{href:!0});var HXr=s(CR);Weo=r(HXr,"GPT2TokenizerFast"),HXr.forEach(t),Qeo=r(j7," (OpenAI GPT-2 model)"),j7.forEach(t),Heo=i(S),Kn=n(S,"LI",{});var D7=s(Kn);dte=n(D7,"STRONG",{});var UXr=s(dte);Ueo=r(UXr,"gpt_neo"),UXr.forEach(t),Jeo=r(D7," \u2014 "),wR=n(D7,"A",{href:!0});var JXr=s(wR);Yeo=r(JXr,"GPT2Tokenizer"),JXr.forEach(t),Keo=r(D7," or "),AR=n(D7,"A",{href:!0});var YXr=s(AR);Zeo=r(YXr,"GPT2TokenizerFast"),YXr.forEach(t),eoo=r(D7," (GPT Neo model)"),D7.forEach(t),ooo=i(S),Zn=n(S,"LI",{});var G7=s(Zn);cte=n(G7,"STRONG",{});var KXr=s(cte);roo=r(KXr,"gptj"),KXr.forEach(t),too=r(G7," \u2014 "),yR=n(G7,"A",{href:!0});var ZXr=s(yR);aoo=r(ZXr,"GPT2Tokenizer"),ZXr.forEach(t),noo=r(G7," or "),LR=n(G7,"A",{href:!0});var ezr=s(LR);soo=r(ezr,"GPT2TokenizerFast"),ezr.forEach(t),loo=r(G7," (GPT-J model)"),G7.forEach(t),ioo=i(S),es=n(S,"LI",{});var O7=s(es);mte=n(O7,"STRONG",{});var ozr=s(mte);doo=r(ozr,"herbert"),ozr.forEach(t),coo=r(O7," \u2014 "),xR=n(O7,"A",{href:!0});var rzr=s(xR);moo=r(rzr,"HerbertTokenizer"),rzr.forEach(t),foo=r(O7," or "),$R=n(O7,"A",{href:!0});var tzr=s($R);goo=r(tzr,"HerbertTokenizerFast"),tzr.forEach(t),hoo=r(O7," (HerBERT model)"),O7.forEach(t),uoo=i(S),kg=n(S,"LI",{});var mAe=s(kg);fte=n(mAe,"STRONG",{});var azr=s(fte);poo=r(azr,"hubert"),azr.forEach(t),_oo=r(mAe," \u2014 "),kR=n(mAe,"A",{href:!0});var nzr=s(kR);boo=r(nzr,"Wav2Vec2CTCTokenizer"),nzr.forEach(t),voo=r(mAe," (Hubert model)"),mAe.forEach(t),Foo=i(S),os=n(S,"LI",{});var V7=s(os);gte=n(V7,"STRONG",{});var szr=s(gte);Too=r(szr,"ibert"),szr.forEach(t),Moo=r(V7," \u2014 "),SR=n(V7,"A",{href:!0});var lzr=s(SR);Eoo=r(lzr,"RobertaTokenizer"),lzr.forEach(t),Coo=r(V7," or "),RR=n(V7,"A",{href:!0});var izr=s(RR);woo=r(izr,"RobertaTokenizerFast"),izr.forEach(t),Aoo=r(V7," (I-BERT model)"),V7.forEach(t),yoo=i(S),rs=n(S,"LI",{});var X7=s(rs);hte=n(X7,"STRONG",{});var dzr=s(hte);Loo=r(dzr,"layoutlm"),dzr.forEach(t),xoo=r(X7," \u2014 "),PR=n(X7,"A",{href:!0});var czr=s(PR);$oo=r(czr,"LayoutLMTokenizer"),czr.forEach(t),koo=r(X7," or "),BR=n(X7,"A",{href:!0});var mzr=s(BR);Soo=r(mzr,"LayoutLMTokenizerFast"),mzr.forEach(t),Roo=r(X7," (LayoutLM model)"),X7.forEach(t),Poo=i(S),ts=n(S,"LI",{});var z7=s(ts);ute=n(z7,"STRONG",{});var fzr=s(ute);Boo=r(fzr,"layoutlmv2"),fzr.forEach(t),Ioo=r(z7," \u2014 "),IR=n(z7,"A",{href:!0});var gzr=s(IR);qoo=r(gzr,"LayoutLMv2Tokenizer"),gzr.forEach(t),Noo=r(z7," or "),qR=n(z7,"A",{href:!0});var hzr=s(qR);joo=r(hzr,"LayoutLMv2TokenizerFast"),hzr.forEach(t),Doo=r(z7," (LayoutLMv2 model)"),z7.forEach(t),Goo=i(S),as=n(S,"LI",{});var W7=s(as);pte=n(W7,"STRONG",{});var uzr=s(pte);Ooo=r(uzr,"layoutxlm"),uzr.forEach(t),Voo=r(W7," \u2014 "),NR=n(W7,"A",{href:!0});var pzr=s(NR);Xoo=r(pzr,"LayoutXLMTokenizer"),pzr.forEach(t),zoo=r(W7," or "),jR=n(W7,"A",{href:!0});var _zr=s(jR);Woo=r(_zr,"LayoutXLMTokenizerFast"),_zr.forEach(t),Qoo=r(W7," (LayoutXLM model)"),W7.forEach(t),Hoo=i(S),ns=n(S,"LI",{});var Q7=s(ns);_te=n(Q7,"STRONG",{});var bzr=s(_te);Uoo=r(bzr,"led"),bzr.forEach(t),Joo=r(Q7," \u2014 "),DR=n(Q7,"A",{href:!0});var vzr=s(DR);Yoo=r(vzr,"LEDTokenizer"),vzr.forEach(t),Koo=r(Q7," or "),GR=n(Q7,"A",{href:!0});var Fzr=s(GR);Zoo=r(Fzr,"LEDTokenizerFast"),Fzr.forEach(t),ero=r(Q7," (LED model)"),Q7.forEach(t),oro=i(S),ss=n(S,"LI",{});var H7=s(ss);bte=n(H7,"STRONG",{});var Tzr=s(bte);rro=r(Tzr,"longformer"),Tzr.forEach(t),tro=r(H7," \u2014 "),OR=n(H7,"A",{href:!0});var Mzr=s(OR);aro=r(Mzr,"LongformerTokenizer"),Mzr.forEach(t),nro=r(H7," or "),VR=n(H7,"A",{href:!0});var Ezr=s(VR);sro=r(Ezr,"LongformerTokenizerFast"),Ezr.forEach(t),lro=r(H7," (Longformer model)"),H7.forEach(t),iro=i(S),Sg=n(S,"LI",{});var fAe=s(Sg);vte=n(fAe,"STRONG",{});var Czr=s(vte);dro=r(Czr,"luke"),Czr.forEach(t),cro=r(fAe," \u2014 "),XR=n(fAe,"A",{href:!0});var wzr=s(XR);mro=r(wzr,"LukeTokenizer"),wzr.forEach(t),fro=r(fAe," (LUKE model)"),fAe.forEach(t),gro=i(S),ls=n(S,"LI",{});var U7=s(ls);Fte=n(U7,"STRONG",{});var Azr=s(Fte);hro=r(Azr,"lxmert"),Azr.forEach(t),uro=r(U7," \u2014 "),zR=n(U7,"A",{href:!0});var yzr=s(zR);pro=r(yzr,"LxmertTokenizer"),yzr.forEach(t),_ro=r(U7," or "),WR=n(U7,"A",{href:!0});var Lzr=s(WR);bro=r(Lzr,"LxmertTokenizerFast"),Lzr.forEach(t),vro=r(U7," (LXMERT model)"),U7.forEach(t),Fro=i(S),Rg=n(S,"LI",{});var gAe=s(Rg);Tte=n(gAe,"STRONG",{});var xzr=s(Tte);Tro=r(xzr,"m2m_100"),xzr.forEach(t),Mro=r(gAe," \u2014 "),QR=n(gAe,"A",{href:!0});var $zr=s(QR);Ero=r($zr,"M2M100Tokenizer"),$zr.forEach(t),Cro=r(gAe," (M2M100 model)"),gAe.forEach(t),wro=i(S),Pg=n(S,"LI",{});var hAe=s(Pg);Mte=n(hAe,"STRONG",{});var kzr=s(Mte);Aro=r(kzr,"marian"),kzr.forEach(t),yro=r(hAe," \u2014 "),HR=n(hAe,"A",{href:!0});var Szr=s(HR);Lro=r(Szr,"MarianTokenizer"),Szr.forEach(t),xro=r(hAe," (Marian model)"),hAe.forEach(t),$ro=i(S),is=n(S,"LI",{});var J7=s(is);Ete=n(J7,"STRONG",{});var Rzr=s(Ete);kro=r(Rzr,"mbart"),Rzr.forEach(t),Sro=r(J7," \u2014 "),UR=n(J7,"A",{href:!0});var Pzr=s(UR);Rro=r(Pzr,"MBartTokenizer"),Pzr.forEach(t),Pro=r(J7," or "),JR=n(J7,"A",{href:!0});var Bzr=s(JR);Bro=r(Bzr,"MBartTokenizerFast"),Bzr.forEach(t),Iro=r(J7," (mBART model)"),J7.forEach(t),qro=i(S),ds=n(S,"LI",{});var Y7=s(ds);Cte=n(Y7,"STRONG",{});var Izr=s(Cte);Nro=r(Izr,"mbart50"),Izr.forEach(t),jro=r(Y7," \u2014 "),YR=n(Y7,"A",{href:!0});var qzr=s(YR);Dro=r(qzr,"MBart50Tokenizer"),qzr.forEach(t),Gro=r(Y7," or "),KR=n(Y7,"A",{href:!0});var Nzr=s(KR);Oro=r(Nzr,"MBart50TokenizerFast"),Nzr.forEach(t),Vro=r(Y7," (mBART-50 model)"),Y7.forEach(t),Xro=i(S),cs=n(S,"LI",{});var K7=s(cs);wte=n(K7,"STRONG",{});var jzr=s(wte);zro=r(jzr,"megatron-bert"),jzr.forEach(t),Wro=r(K7," \u2014 "),ZR=n(K7,"A",{href:!0});var Dzr=s(ZR);Qro=r(Dzr,"BertTokenizer"),Dzr.forEach(t),Hro=r(K7," or "),eP=n(K7,"A",{href:!0});var Gzr=s(eP);Uro=r(Gzr,"BertTokenizerFast"),Gzr.forEach(t),Jro=r(K7," (MegatronBert model)"),K7.forEach(t),Yro=i(S),Bg=n(S,"LI",{});var uAe=s(Bg);Ate=n(uAe,"STRONG",{});var Ozr=s(Ate);Kro=r(Ozr,"mluke"),Ozr.forEach(t),Zro=r(uAe," \u2014 "),oP=n(uAe,"A",{href:!0});var Vzr=s(oP);eto=r(Vzr,"MLukeTokenizer"),Vzr.forEach(t),oto=r(uAe," (mLUKE model)"),uAe.forEach(t),rto=i(S),ms=n(S,"LI",{});var Z7=s(ms);yte=n(Z7,"STRONG",{});var Xzr=s(yte);tto=r(Xzr,"mobilebert"),Xzr.forEach(t),ato=r(Z7," \u2014 "),rP=n(Z7,"A",{href:!0});var zzr=s(rP);nto=r(zzr,"MobileBertTokenizer"),zzr.forEach(t),sto=r(Z7," or "),tP=n(Z7,"A",{href:!0});var Wzr=s(tP);lto=r(Wzr,"MobileBertTokenizerFast"),Wzr.forEach(t),ito=r(Z7," (MobileBERT model)"),Z7.forEach(t),dto=i(S),fs=n(S,"LI",{});var e$=s(fs);Lte=n(e$,"STRONG",{});var Qzr=s(Lte);cto=r(Qzr,"mpnet"),Qzr.forEach(t),mto=r(e$," \u2014 "),aP=n(e$,"A",{href:!0});var Hzr=s(aP);fto=r(Hzr,"MPNetTokenizer"),Hzr.forEach(t),gto=r(e$," or "),nP=n(e$,"A",{href:!0});var Uzr=s(nP);hto=r(Uzr,"MPNetTokenizerFast"),Uzr.forEach(t),uto=r(e$," (MPNet model)"),e$.forEach(t),pto=i(S),gs=n(S,"LI",{});var o$=s(gs);xte=n(o$,"STRONG",{});var Jzr=s(xte);_to=r(Jzr,"mt5"),Jzr.forEach(t),bto=r(o$," \u2014 "),sP=n(o$,"A",{href:!0});var Yzr=s(sP);vto=r(Yzr,"MT5Tokenizer"),Yzr.forEach(t),Fto=r(o$," or "),lP=n(o$,"A",{href:!0});var Kzr=s(lP);Tto=r(Kzr,"MT5TokenizerFast"),Kzr.forEach(t),Mto=r(o$," (mT5 model)"),o$.forEach(t),Eto=i(S),hs=n(S,"LI",{});var r$=s(hs);$te=n(r$,"STRONG",{});var Zzr=s($te);Cto=r(Zzr,"nystromformer"),Zzr.forEach(t),wto=r(r$," \u2014 "),iP=n(r$,"A",{href:!0});var eWr=s(iP);Ato=r(eWr,"AlbertTokenizer"),eWr.forEach(t),yto=r(r$," or "),dP=n(r$,"A",{href:!0});var oWr=s(dP);Lto=r(oWr,"AlbertTokenizerFast"),oWr.forEach(t),xto=r(r$," (Nystromformer model)"),r$.forEach(t),$to=i(S),us=n(S,"LI",{});var t$=s(us);kte=n(t$,"STRONG",{});var rWr=s(kte);kto=r(rWr,"openai-gpt"),rWr.forEach(t),Sto=r(t$," \u2014 "),cP=n(t$,"A",{href:!0});var tWr=s(cP);Rto=r(tWr,"OpenAIGPTTokenizer"),tWr.forEach(t),Pto=r(t$," or "),mP=n(t$,"A",{href:!0});var aWr=s(mP);Bto=r(aWr,"OpenAIGPTTokenizerFast"),aWr.forEach(t),Ito=r(t$," (OpenAI GPT model)"),t$.forEach(t),qto=i(S),Ig=n(S,"LI",{});var pAe=s(Ig);Ste=n(pAe,"STRONG",{});var nWr=s(Ste);Nto=r(nWr,"opt"),nWr.forEach(t),jto=r(pAe," \u2014 "),fP=n(pAe,"A",{href:!0});var sWr=s(fP);Dto=r(sWr,"GPT2Tokenizer"),sWr.forEach(t),Gto=r(pAe," (OPT model)"),pAe.forEach(t),Oto=i(S),ps=n(S,"LI",{});var a$=s(ps);Rte=n(a$,"STRONG",{});var lWr=s(Rte);Vto=r(lWr,"pegasus"),lWr.forEach(t),Xto=r(a$," \u2014 "),gP=n(a$,"A",{href:!0});var iWr=s(gP);zto=r(iWr,"PegasusTokenizer"),iWr.forEach(t),Wto=r(a$," or "),hP=n(a$,"A",{href:!0});var dWr=s(hP);Qto=r(dWr,"PegasusTokenizerFast"),dWr.forEach(t),Hto=r(a$," (Pegasus model)"),a$.forEach(t),Uto=i(S),qg=n(S,"LI",{});var _Ae=s(qg);Pte=n(_Ae,"STRONG",{});var cWr=s(Pte);Jto=r(cWr,"perceiver"),cWr.forEach(t),Yto=r(_Ae," \u2014 "),uP=n(_Ae,"A",{href:!0});var mWr=s(uP);Kto=r(mWr,"PerceiverTokenizer"),mWr.forEach(t),Zto=r(_Ae," (Perceiver model)"),_Ae.forEach(t),eao=i(S),Ng=n(S,"LI",{});var bAe=s(Ng);Bte=n(bAe,"STRONG",{});var fWr=s(Bte);oao=r(fWr,"phobert"),fWr.forEach(t),rao=r(bAe," \u2014 "),pP=n(bAe,"A",{href:!0});var gWr=s(pP);tao=r(gWr,"PhobertTokenizer"),gWr.forEach(t),aao=r(bAe," (PhoBERT model)"),bAe.forEach(t),nao=i(S),jg=n(S,"LI",{});var vAe=s(jg);Ite=n(vAe,"STRONG",{});var hWr=s(Ite);sao=r(hWr,"plbart"),hWr.forEach(t),lao=r(vAe," \u2014 "),_P=n(vAe,"A",{href:!0});var uWr=s(_P);iao=r(uWr,"PLBartTokenizer"),uWr.forEach(t),dao=r(vAe," (PLBart model)"),vAe.forEach(t),cao=i(S),Dg=n(S,"LI",{});var FAe=s(Dg);qte=n(FAe,"STRONG",{});var pWr=s(qte);mao=r(pWr,"prophetnet"),pWr.forEach(t),fao=r(FAe," \u2014 "),bP=n(FAe,"A",{href:!0});var _Wr=s(bP);gao=r(_Wr,"ProphetNetTokenizer"),_Wr.forEach(t),hao=r(FAe," (ProphetNet model)"),FAe.forEach(t),uao=i(S),_s=n(S,"LI",{});var n$=s(_s);Nte=n(n$,"STRONG",{});var bWr=s(Nte);pao=r(bWr,"qdqbert"),bWr.forEach(t),_ao=r(n$," \u2014 "),vP=n(n$,"A",{href:!0});var vWr=s(vP);bao=r(vWr,"BertTokenizer"),vWr.forEach(t),vao=r(n$," or "),FP=n(n$,"A",{href:!0});var FWr=s(FP);Fao=r(FWr,"BertTokenizerFast"),FWr.forEach(t),Tao=r(n$," (QDQBert model)"),n$.forEach(t),Mao=i(S),Gg=n(S,"LI",{});var TAe=s(Gg);jte=n(TAe,"STRONG",{});var TWr=s(jte);Eao=r(TWr,"rag"),TWr.forEach(t),Cao=r(TAe," \u2014 "),TP=n(TAe,"A",{href:!0});var MWr=s(TP);wao=r(MWr,"RagTokenizer"),MWr.forEach(t),Aao=r(TAe," (RAG model)"),TAe.forEach(t),yao=i(S),bs=n(S,"LI",{});var s$=s(bs);Dte=n(s$,"STRONG",{});var EWr=s(Dte);Lao=r(EWr,"realm"),EWr.forEach(t),xao=r(s$," \u2014 "),MP=n(s$,"A",{href:!0});var CWr=s(MP);$ao=r(CWr,"RealmTokenizer"),CWr.forEach(t),kao=r(s$," or "),EP=n(s$,"A",{href:!0});var wWr=s(EP);Sao=r(wWr,"RealmTokenizerFast"),wWr.forEach(t),Rao=r(s$," (Realm model)"),s$.forEach(t),Pao=i(S),vs=n(S,"LI",{});var l$=s(vs);Gte=n(l$,"STRONG",{});var AWr=s(Gte);Bao=r(AWr,"reformer"),AWr.forEach(t),Iao=r(l$," \u2014 "),CP=n(l$,"A",{href:!0});var yWr=s(CP);qao=r(yWr,"ReformerTokenizer"),yWr.forEach(t),Nao=r(l$," or "),wP=n(l$,"A",{href:!0});var LWr=s(wP);jao=r(LWr,"ReformerTokenizerFast"),LWr.forEach(t),Dao=r(l$," (Reformer model)"),l$.forEach(t),Gao=i(S),Fs=n(S,"LI",{});var i$=s(Fs);Ote=n(i$,"STRONG",{});var xWr=s(Ote);Oao=r(xWr,"rembert"),xWr.forEach(t),Vao=r(i$," \u2014 "),AP=n(i$,"A",{href:!0});var $Wr=s(AP);Xao=r($Wr,"RemBertTokenizer"),$Wr.forEach(t),zao=r(i$," or "),yP=n(i$,"A",{href:!0});var kWr=s(yP);Wao=r(kWr,"RemBertTokenizerFast"),kWr.forEach(t),Qao=r(i$," (RemBERT model)"),i$.forEach(t),Hao=i(S),Ts=n(S,"LI",{});var d$=s(Ts);Vte=n(d$,"STRONG",{});var SWr=s(Vte);Uao=r(SWr,"retribert"),SWr.forEach(t),Jao=r(d$," \u2014 "),LP=n(d$,"A",{href:!0});var RWr=s(LP);Yao=r(RWr,"RetriBertTokenizer"),RWr.forEach(t),Kao=r(d$," or "),xP=n(d$,"A",{href:!0});var PWr=s(xP);Zao=r(PWr,"RetriBertTokenizerFast"),PWr.forEach(t),eno=r(d$," (RetriBERT model)"),d$.forEach(t),ono=i(S),Ms=n(S,"LI",{});var c$=s(Ms);Xte=n(c$,"STRONG",{});var BWr=s(Xte);rno=r(BWr,"roberta"),BWr.forEach(t),tno=r(c$," \u2014 "),$P=n(c$,"A",{href:!0});var IWr=s($P);ano=r(IWr,"RobertaTokenizer"),IWr.forEach(t),nno=r(c$," or "),kP=n(c$,"A",{href:!0});var qWr=s(kP);sno=r(qWr,"RobertaTokenizerFast"),qWr.forEach(t),lno=r(c$," (RoBERTa model)"),c$.forEach(t),ino=i(S),Es=n(S,"LI",{});var m$=s(Es);zte=n(m$,"STRONG",{});var NWr=s(zte);dno=r(NWr,"roformer"),NWr.forEach(t),cno=r(m$," \u2014 "),SP=n(m$,"A",{href:!0});var jWr=s(SP);mno=r(jWr,"RoFormerTokenizer"),jWr.forEach(t),fno=r(m$," or "),RP=n(m$,"A",{href:!0});var DWr=s(RP);gno=r(DWr,"RoFormerTokenizerFast"),DWr.forEach(t),hno=r(m$," (RoFormer model)"),m$.forEach(t),uno=i(S),Og=n(S,"LI",{});var MAe=s(Og);Wte=n(MAe,"STRONG",{});var GWr=s(Wte);pno=r(GWr,"speech_to_text"),GWr.forEach(t),_no=r(MAe," \u2014 "),PP=n(MAe,"A",{href:!0});var OWr=s(PP);bno=r(OWr,"Speech2TextTokenizer"),OWr.forEach(t),vno=r(MAe," (Speech2Text model)"),MAe.forEach(t),Fno=i(S),Vg=n(S,"LI",{});var EAe=s(Vg);Qte=n(EAe,"STRONG",{});var VWr=s(Qte);Tno=r(VWr,"speech_to_text_2"),VWr.forEach(t),Mno=r(EAe," \u2014 "),BP=n(EAe,"A",{href:!0});var XWr=s(BP);Eno=r(XWr,"Speech2Text2Tokenizer"),XWr.forEach(t),Cno=r(EAe," (Speech2Text2 model)"),EAe.forEach(t),wno=i(S),Cs=n(S,"LI",{});var f$=s(Cs);Hte=n(f$,"STRONG",{});var zWr=s(Hte);Ano=r(zWr,"splinter"),zWr.forEach(t),yno=r(f$," \u2014 "),IP=n(f$,"A",{href:!0});var WWr=s(IP);Lno=r(WWr,"SplinterTokenizer"),WWr.forEach(t),xno=r(f$," or "),qP=n(f$,"A",{href:!0});var QWr=s(qP);$no=r(QWr,"SplinterTokenizerFast"),QWr.forEach(t),kno=r(f$," (Splinter model)"),f$.forEach(t),Sno=i(S),ws=n(S,"LI",{});var g$=s(ws);Ute=n(g$,"STRONG",{});var HWr=s(Ute);Rno=r(HWr,"squeezebert"),HWr.forEach(t),Pno=r(g$," \u2014 "),NP=n(g$,"A",{href:!0});var UWr=s(NP);Bno=r(UWr,"SqueezeBertTokenizer"),UWr.forEach(t),Ino=r(g$," or "),jP=n(g$,"A",{href:!0});var JWr=s(jP);qno=r(JWr,"SqueezeBertTokenizerFast"),JWr.forEach(t),Nno=r(g$," (SqueezeBERT model)"),g$.forEach(t),jno=i(S),As=n(S,"LI",{});var h$=s(As);Jte=n(h$,"STRONG",{});var YWr=s(Jte);Dno=r(YWr,"t5"),YWr.forEach(t),Gno=r(h$," \u2014 "),DP=n(h$,"A",{href:!0});var KWr=s(DP);Ono=r(KWr,"T5Tokenizer"),KWr.forEach(t),Vno=r(h$," or "),GP=n(h$,"A",{href:!0});var ZWr=s(GP);Xno=r(ZWr,"T5TokenizerFast"),ZWr.forEach(t),zno=r(h$," (T5 model)"),h$.forEach(t),Wno=i(S),Xg=n(S,"LI",{});var CAe=s(Xg);Yte=n(CAe,"STRONG",{});var eQr=s(Yte);Qno=r(eQr,"tapas"),eQr.forEach(t),Hno=r(CAe," \u2014 "),OP=n(CAe,"A",{href:!0});var oQr=s(OP);Uno=r(oQr,"TapasTokenizer"),oQr.forEach(t),Jno=r(CAe," (TAPAS model)"),CAe.forEach(t),Yno=i(S),zg=n(S,"LI",{});var wAe=s(zg);Kte=n(wAe,"STRONG",{});var rQr=s(Kte);Kno=r(rQr,"tapex"),rQr.forEach(t),Zno=r(wAe," \u2014 "),VP=n(wAe,"A",{href:!0});var tQr=s(VP);eso=r(tQr,"TapexTokenizer"),tQr.forEach(t),oso=r(wAe," (TAPEX model)"),wAe.forEach(t),rso=i(S),Wg=n(S,"LI",{});var AAe=s(Wg);Zte=n(AAe,"STRONG",{});var aQr=s(Zte);tso=r(aQr,"transfo-xl"),aQr.forEach(t),aso=r(AAe," \u2014 "),XP=n(AAe,"A",{href:!0});var nQr=s(XP);nso=r(nQr,"TransfoXLTokenizer"),nQr.forEach(t),sso=r(AAe," (Transformer-XL model)"),AAe.forEach(t),lso=i(S),ys=n(S,"LI",{});var u$=s(ys);eae=n(u$,"STRONG",{});var sQr=s(eae);iso=r(sQr,"visual_bert"),sQr.forEach(t),dso=r(u$," \u2014 "),zP=n(u$,"A",{href:!0});var lQr=s(zP);cso=r(lQr,"BertTokenizer"),lQr.forEach(t),mso=r(u$," or "),WP=n(u$,"A",{href:!0});var iQr=s(WP);fso=r(iQr,"BertTokenizerFast"),iQr.forEach(t),gso=r(u$," (VisualBert model)"),u$.forEach(t),hso=i(S),Qg=n(S,"LI",{});var yAe=s(Qg);oae=n(yAe,"STRONG",{});var dQr=s(oae);uso=r(dQr,"wav2vec2"),dQr.forEach(t),pso=r(yAe," \u2014 "),QP=n(yAe,"A",{href:!0});var cQr=s(QP);_so=r(cQr,"Wav2Vec2CTCTokenizer"),cQr.forEach(t),bso=r(yAe," (Wav2Vec2 model)"),yAe.forEach(t),vso=i(S),Hg=n(S,"LI",{});var LAe=s(Hg);rae=n(LAe,"STRONG",{});var mQr=s(rae);Fso=r(mQr,"wav2vec2-conformer"),mQr.forEach(t),Tso=r(LAe," \u2014 "),HP=n(LAe,"A",{href:!0});var fQr=s(HP);Mso=r(fQr,"Wav2Vec2CTCTokenizer"),fQr.forEach(t),Eso=r(LAe," (Wav2Vec2-Conformer model)"),LAe.forEach(t),Cso=i(S),Ug=n(S,"LI",{});var xAe=s(Ug);tae=n(xAe,"STRONG",{});var gQr=s(tae);wso=r(gQr,"wav2vec2_phoneme"),gQr.forEach(t),Aso=r(xAe," \u2014 "),UP=n(xAe,"A",{href:!0});var hQr=s(UP);yso=r(hQr,"Wav2Vec2PhonemeCTCTokenizer"),hQr.forEach(t),Lso=r(xAe," (Wav2Vec2Phoneme model)"),xAe.forEach(t),xso=i(S),Ls=n(S,"LI",{});var p$=s(Ls);aae=n(p$,"STRONG",{});var uQr=s(aae);$so=r(uQr,"xglm"),uQr.forEach(t),kso=r(p$," \u2014 "),JP=n(p$,"A",{href:!0});var pQr=s(JP);Sso=r(pQr,"XGLMTokenizer"),pQr.forEach(t),Rso=r(p$," or "),YP=n(p$,"A",{href:!0});var _Qr=s(YP);Pso=r(_Qr,"XGLMTokenizerFast"),_Qr.forEach(t),Bso=r(p$," (XGLM model)"),p$.forEach(t),Iso=i(S),Jg=n(S,"LI",{});var $Ae=s(Jg);nae=n($Ae,"STRONG",{});var bQr=s(nae);qso=r(bQr,"xlm"),bQr.forEach(t),Nso=r($Ae," \u2014 "),KP=n($Ae,"A",{href:!0});var vQr=s(KP);jso=r(vQr,"XLMTokenizer"),vQr.forEach(t),Dso=r($Ae," (XLM model)"),$Ae.forEach(t),Gso=i(S),Yg=n(S,"LI",{});var kAe=s(Yg);sae=n(kAe,"STRONG",{});var FQr=s(sae);Oso=r(FQr,"xlm-prophetnet"),FQr.forEach(t),Vso=r(kAe," \u2014 "),ZP=n(kAe,"A",{href:!0});var TQr=s(ZP);Xso=r(TQr,"XLMProphetNetTokenizer"),TQr.forEach(t),zso=r(kAe," (XLMProphetNet model)"),kAe.forEach(t),Wso=i(S),xs=n(S,"LI",{});var _$=s(xs);lae=n(_$,"STRONG",{});var MQr=s(lae);Qso=r(MQr,"xlm-roberta"),MQr.forEach(t),Hso=r(_$," \u2014 "),eB=n(_$,"A",{href:!0});var EQr=s(eB);Uso=r(EQr,"XLMRobertaTokenizer"),EQr.forEach(t),Jso=r(_$," or "),oB=n(_$,"A",{href:!0});var CQr=s(oB);Yso=r(CQr,"XLMRobertaTokenizerFast"),CQr.forEach(t),Kso=r(_$," (XLM-RoBERTa model)"),_$.forEach(t),Zso=i(S),$s=n(S,"LI",{});var b$=s($s);iae=n(b$,"STRONG",{});var wQr=s(iae);elo=r(wQr,"xlm-roberta-xl"),wQr.forEach(t),olo=r(b$," \u2014 "),rB=n(b$,"A",{href:!0});var AQr=s(rB);rlo=r(AQr,"RobertaTokenizer"),AQr.forEach(t),tlo=r(b$," or "),tB=n(b$,"A",{href:!0});var yQr=s(tB);alo=r(yQr,"RobertaTokenizerFast"),yQr.forEach(t),nlo=r(b$," (XLM-RoBERTa-XL model)"),b$.forEach(t),slo=i(S),ks=n(S,"LI",{});var v$=s(ks);dae=n(v$,"STRONG",{});var LQr=s(dae);llo=r(LQr,"xlnet"),LQr.forEach(t),ilo=r(v$," \u2014 "),aB=n(v$,"A",{href:!0});var xQr=s(aB);dlo=r(xQr,"XLNetTokenizer"),xQr.forEach(t),clo=r(v$," or "),nB=n(v$,"A",{href:!0});var $Qr=s(nB);mlo=r($Qr,"XLNetTokenizerFast"),$Qr.forEach(t),flo=r(v$," (XLNet model)"),v$.forEach(t),glo=i(S),Ss=n(S,"LI",{});var F$=s(Ss);cae=n(F$,"STRONG",{});var kQr=s(cae);hlo=r(kQr,"yoso"),kQr.forEach(t),ulo=r(F$," \u2014 "),sB=n(F$,"A",{href:!0});var SQr=s(sB);plo=r(SQr,"AlbertTokenizer"),SQr.forEach(t),_lo=r(F$," or "),lB=n(F$,"A",{href:!0});var RQr=s(lB);blo=r(RQr,"AlbertTokenizerFast"),RQr.forEach(t),vlo=r(F$," (YOSO model)"),F$.forEach(t),S.forEach(t),Flo=i(qs),T(Kg.$$.fragment,qs),qs.forEach(t),Tlo=i(Is),Zg=n(Is,"DIV",{class:!0});var RNe=s(Zg);T(Fy.$$.fragment,RNe),Mlo=i(RNe),mae=n(RNe,"P",{});var PQr=s(mae);Elo=r(PQr,"Register a new tokenizer in this mapping."),PQr.forEach(t),RNe.forEach(t),Is.forEach(t),PIe=i(m),Ti=n(m,"H2",{class:!0});var PNe=s(Ti);eh=n(PNe,"A",{id:!0,class:!0,href:!0});var BQr=s(eh);fae=n(BQr,"SPAN",{});var IQr=s(fae);T(Ty.$$.fragment,IQr),IQr.forEach(t),BQr.forEach(t),Clo=i(PNe),gae=n(PNe,"SPAN",{});var qQr=s(gae);wlo=r(qQr,"AutoFeatureExtractor"),qQr.forEach(t),PNe.forEach(t),BIe=i(m),Ao=n(m,"DIV",{class:!0});var Ns=s(Ao);T(My.$$.fragment,Ns),Alo=i(Ns),Ey=n(Ns,"P",{});var BNe=s(Ey);ylo=r(BNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iB=n(BNe,"A",{href:!0});var NQr=s(iB);Llo=r(NQr,"AutoFeatureExtractor.from_pretrained()"),NQr.forEach(t),xlo=r(BNe," class method."),BNe.forEach(t),$lo=i(Ns),Cy=n(Ns,"P",{});var INe=s(Cy);klo=r(INe,"This class cannot be instantiated directly using "),hae=n(INe,"CODE",{});var jQr=s(hae);Slo=r(jQr,"__init__()"),jQr.forEach(t),Rlo=r(INe," (throws an error)."),INe.forEach(t),Plo=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(wy.$$.fragment,Zt),Blo=i(Zt),uae=n(Zt,"P",{});var DQr=s(uae);Ilo=r(DQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DQr.forEach(t),qlo=i(Zt),ya=n(Zt,"P",{});var c6=s(ya);Nlo=r(c6,"The feature extractor class to instantiate is selected based on the "),pae=n(c6,"CODE",{});var GQr=s(pae);jlo=r(GQr,"model_type"),GQr.forEach(t),Dlo=r(c6,` property of the config object
(either passed as an argument or loaded from `),_ae=n(c6,"CODE",{});var OQr=s(_ae);Glo=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),Olo=r(c6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bae=n(c6,"CODE",{});var VQr=s(bae);Vlo=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),Xlo=r(c6,":"),c6.forEach(t),zlo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);oh=n(te,"LI",{});var SAe=s(oh);vae=n(SAe,"STRONG",{});var XQr=s(vae);Wlo=r(XQr,"beit"),XQr.forEach(t),Qlo=r(SAe," \u2014 "),dB=n(SAe,"A",{href:!0});var zQr=s(dB);Hlo=r(zQr,"BeitFeatureExtractor"),zQr.forEach(t),Ulo=r(SAe," (BEiT model)"),SAe.forEach(t),Jlo=i(te),rh=n(te,"LI",{});var RAe=s(rh);Fae=n(RAe,"STRONG",{});var WQr=s(Fae);Ylo=r(WQr,"clip"),WQr.forEach(t),Klo=r(RAe," \u2014 "),cB=n(RAe,"A",{href:!0});var QQr=s(cB);Zlo=r(QQr,"CLIPFeatureExtractor"),QQr.forEach(t),eio=r(RAe," (CLIP model)"),RAe.forEach(t),oio=i(te),th=n(te,"LI",{});var PAe=s(th);Tae=n(PAe,"STRONG",{});var HQr=s(Tae);rio=r(HQr,"convnext"),HQr.forEach(t),tio=r(PAe," \u2014 "),mB=n(PAe,"A",{href:!0});var UQr=s(mB);aio=r(UQr,"ConvNextFeatureExtractor"),UQr.forEach(t),nio=r(PAe," (ConvNext model)"),PAe.forEach(t),sio=i(te),ah=n(te,"LI",{});var BAe=s(ah);Mae=n(BAe,"STRONG",{});var JQr=s(Mae);lio=r(JQr,"data2vec-audio"),JQr.forEach(t),iio=r(BAe," \u2014 "),fB=n(BAe,"A",{href:!0});var YQr=s(fB);dio=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),cio=r(BAe," (Data2VecAudio model)"),BAe.forEach(t),mio=i(te),nh=n(te,"LI",{});var IAe=s(nh);Eae=n(IAe,"STRONG",{});var KQr=s(Eae);fio=r(KQr,"data2vec-vision"),KQr.forEach(t),gio=r(IAe," \u2014 "),gB=n(IAe,"A",{href:!0});var ZQr=s(gB);hio=r(ZQr,"BeitFeatureExtractor"),ZQr.forEach(t),uio=r(IAe," (Data2VecVision model)"),IAe.forEach(t),pio=i(te),sh=n(te,"LI",{});var qAe=s(sh);Cae=n(qAe,"STRONG",{});var eHr=s(Cae);_io=r(eHr,"deit"),eHr.forEach(t),bio=r(qAe," \u2014 "),hB=n(qAe,"A",{href:!0});var oHr=s(hB);vio=r(oHr,"DeiTFeatureExtractor"),oHr.forEach(t),Fio=r(qAe," (DeiT model)"),qAe.forEach(t),Tio=i(te),lh=n(te,"LI",{});var NAe=s(lh);wae=n(NAe,"STRONG",{});var rHr=s(wae);Mio=r(rHr,"detr"),rHr.forEach(t),Eio=r(NAe," \u2014 "),uB=n(NAe,"A",{href:!0});var tHr=s(uB);Cio=r(tHr,"DetrFeatureExtractor"),tHr.forEach(t),wio=r(NAe," (DETR model)"),NAe.forEach(t),Aio=i(te),ih=n(te,"LI",{});var jAe=s(ih);Aae=n(jAe,"STRONG",{});var aHr=s(Aae);yio=r(aHr,"dpt"),aHr.forEach(t),Lio=r(jAe," \u2014 "),pB=n(jAe,"A",{href:!0});var nHr=s(pB);xio=r(nHr,"DPTFeatureExtractor"),nHr.forEach(t),$io=r(jAe," (DPT model)"),jAe.forEach(t),kio=i(te),dh=n(te,"LI",{});var DAe=s(dh);yae=n(DAe,"STRONG",{});var sHr=s(yae);Sio=r(sHr,"flava"),sHr.forEach(t),Rio=r(DAe," \u2014 "),_B=n(DAe,"A",{href:!0});var lHr=s(_B);Pio=r(lHr,"FlavaFeatureExtractor"),lHr.forEach(t),Bio=r(DAe," (Flava model)"),DAe.forEach(t),Iio=i(te),ch=n(te,"LI",{});var GAe=s(ch);Lae=n(GAe,"STRONG",{});var iHr=s(Lae);qio=r(iHr,"glpn"),iHr.forEach(t),Nio=r(GAe," \u2014 "),bB=n(GAe,"A",{href:!0});var dHr=s(bB);jio=r(dHr,"GLPNFeatureExtractor"),dHr.forEach(t),Dio=r(GAe," (GLPN model)"),GAe.forEach(t),Gio=i(te),mh=n(te,"LI",{});var OAe=s(mh);xae=n(OAe,"STRONG",{});var cHr=s(xae);Oio=r(cHr,"hubert"),cHr.forEach(t),Vio=r(OAe," \u2014 "),vB=n(OAe,"A",{href:!0});var mHr=s(vB);Xio=r(mHr,"Wav2Vec2FeatureExtractor"),mHr.forEach(t),zio=r(OAe," (Hubert model)"),OAe.forEach(t),Wio=i(te),fh=n(te,"LI",{});var VAe=s(fh);$ae=n(VAe,"STRONG",{});var fHr=s($ae);Qio=r(fHr,"layoutlmv2"),fHr.forEach(t),Hio=r(VAe," \u2014 "),FB=n(VAe,"A",{href:!0});var gHr=s(FB);Uio=r(gHr,"LayoutLMv2FeatureExtractor"),gHr.forEach(t),Jio=r(VAe," (LayoutLMv2 model)"),VAe.forEach(t),Yio=i(te),gh=n(te,"LI",{});var XAe=s(gh);kae=n(XAe,"STRONG",{});var hHr=s(kae);Kio=r(hHr,"maskformer"),hHr.forEach(t),Zio=r(XAe," \u2014 "),TB=n(XAe,"A",{href:!0});var uHr=s(TB);edo=r(uHr,"MaskFormerFeatureExtractor"),uHr.forEach(t),odo=r(XAe," (MaskFormer model)"),XAe.forEach(t),rdo=i(te),hh=n(te,"LI",{});var zAe=s(hh);Sae=n(zAe,"STRONG",{});var pHr=s(Sae);tdo=r(pHr,"perceiver"),pHr.forEach(t),ado=r(zAe," \u2014 "),MB=n(zAe,"A",{href:!0});var _Hr=s(MB);ndo=r(_Hr,"PerceiverFeatureExtractor"),_Hr.forEach(t),sdo=r(zAe," (Perceiver model)"),zAe.forEach(t),ldo=i(te),uh=n(te,"LI",{});var WAe=s(uh);Rae=n(WAe,"STRONG",{});var bHr=s(Rae);ido=r(bHr,"poolformer"),bHr.forEach(t),ddo=r(WAe," \u2014 "),EB=n(WAe,"A",{href:!0});var vHr=s(EB);cdo=r(vHr,"PoolFormerFeatureExtractor"),vHr.forEach(t),mdo=r(WAe," (PoolFormer model)"),WAe.forEach(t),fdo=i(te),ph=n(te,"LI",{});var QAe=s(ph);Pae=n(QAe,"STRONG",{});var FHr=s(Pae);gdo=r(FHr,"regnet"),FHr.forEach(t),hdo=r(QAe," \u2014 "),CB=n(QAe,"A",{href:!0});var THr=s(CB);udo=r(THr,"ConvNextFeatureExtractor"),THr.forEach(t),pdo=r(QAe," (RegNet model)"),QAe.forEach(t),_do=i(te),_h=n(te,"LI",{});var HAe=s(_h);Bae=n(HAe,"STRONG",{});var MHr=s(Bae);bdo=r(MHr,"resnet"),MHr.forEach(t),vdo=r(HAe," \u2014 "),wB=n(HAe,"A",{href:!0});var EHr=s(wB);Fdo=r(EHr,"ConvNextFeatureExtractor"),EHr.forEach(t),Tdo=r(HAe," (ResNet model)"),HAe.forEach(t),Mdo=i(te),bh=n(te,"LI",{});var UAe=s(bh);Iae=n(UAe,"STRONG",{});var CHr=s(Iae);Edo=r(CHr,"segformer"),CHr.forEach(t),Cdo=r(UAe," \u2014 "),AB=n(UAe,"A",{href:!0});var wHr=s(AB);wdo=r(wHr,"SegformerFeatureExtractor"),wHr.forEach(t),Ado=r(UAe," (SegFormer model)"),UAe.forEach(t),ydo=i(te),vh=n(te,"LI",{});var JAe=s(vh);qae=n(JAe,"STRONG",{});var AHr=s(qae);Ldo=r(AHr,"speech_to_text"),AHr.forEach(t),xdo=r(JAe," \u2014 "),yB=n(JAe,"A",{href:!0});var yHr=s(yB);$do=r(yHr,"Speech2TextFeatureExtractor"),yHr.forEach(t),kdo=r(JAe," (Speech2Text model)"),JAe.forEach(t),Sdo=i(te),Fh=n(te,"LI",{});var YAe=s(Fh);Nae=n(YAe,"STRONG",{});var LHr=s(Nae);Rdo=r(LHr,"swin"),LHr.forEach(t),Pdo=r(YAe," \u2014 "),LB=n(YAe,"A",{href:!0});var xHr=s(LB);Bdo=r(xHr,"ViTFeatureExtractor"),xHr.forEach(t),Ido=r(YAe," (Swin model)"),YAe.forEach(t),qdo=i(te),Th=n(te,"LI",{});var KAe=s(Th);jae=n(KAe,"STRONG",{});var $Hr=s(jae);Ndo=r($Hr,"van"),$Hr.forEach(t),jdo=r(KAe," \u2014 "),xB=n(KAe,"A",{href:!0});var kHr=s(xB);Ddo=r(kHr,"ConvNextFeatureExtractor"),kHr.forEach(t),Gdo=r(KAe," (VAN model)"),KAe.forEach(t),Odo=i(te),Mh=n(te,"LI",{});var ZAe=s(Mh);Dae=n(ZAe,"STRONG",{});var SHr=s(Dae);Vdo=r(SHr,"vit"),SHr.forEach(t),Xdo=r(ZAe," \u2014 "),$B=n(ZAe,"A",{href:!0});var RHr=s($B);zdo=r(RHr,"ViTFeatureExtractor"),RHr.forEach(t),Wdo=r(ZAe," (ViT model)"),ZAe.forEach(t),Qdo=i(te),Eh=n(te,"LI",{});var e6e=s(Eh);Gae=n(e6e,"STRONG",{});var PHr=s(Gae);Hdo=r(PHr,"vit_mae"),PHr.forEach(t),Udo=r(e6e," \u2014 "),kB=n(e6e,"A",{href:!0});var BHr=s(kB);Jdo=r(BHr,"ViTFeatureExtractor"),BHr.forEach(t),Ydo=r(e6e," (ViTMAE model)"),e6e.forEach(t),Kdo=i(te),Ch=n(te,"LI",{});var o6e=s(Ch);Oae=n(o6e,"STRONG",{});var IHr=s(Oae);Zdo=r(IHr,"wav2vec2"),IHr.forEach(t),eco=r(o6e," \u2014 "),SB=n(o6e,"A",{href:!0});var qHr=s(SB);oco=r(qHr,"Wav2Vec2FeatureExtractor"),qHr.forEach(t),rco=r(o6e," (Wav2Vec2 model)"),o6e.forEach(t),tco=i(te),wh=n(te,"LI",{});var r6e=s(wh);Vae=n(r6e,"STRONG",{});var NHr=s(Vae);aco=r(NHr,"wav2vec2-conformer"),NHr.forEach(t),nco=r(r6e," \u2014 "),RB=n(r6e,"A",{href:!0});var jHr=s(RB);sco=r(jHr,"Wav2Vec2FeatureExtractor"),jHr.forEach(t),lco=r(r6e," (Wav2Vec2-Conformer model)"),r6e.forEach(t),ico=i(te),Ah=n(te,"LI",{});var t6e=s(Ah);Xae=n(t6e,"STRONG",{});var DHr=s(Xae);dco=r(DHr,"yolos"),DHr.forEach(t),cco=r(t6e," \u2014 "),PB=n(t6e,"A",{href:!0});var GHr=s(PB);mco=r(GHr,"YolosFeatureExtractor"),GHr.forEach(t),fco=r(t6e," (YOLOS model)"),t6e.forEach(t),te.forEach(t),gco=i(Zt),T(yh.$$.fragment,Zt),hco=i(Zt),T(Lh.$$.fragment,Zt),Zt.forEach(t),uco=i(Ns),xh=n(Ns,"DIV",{class:!0});var qNe=s(xh);T(Ay.$$.fragment,qNe),pco=i(qNe),zae=n(qNe,"P",{});var OHr=s(zae);_co=r(OHr,"Register a new feature extractor for this class."),OHr.forEach(t),qNe.forEach(t),Ns.forEach(t),IIe=i(m),Mi=n(m,"H2",{class:!0});var NNe=s(Mi);$h=n(NNe,"A",{id:!0,class:!0,href:!0});var VHr=s($h);Wae=n(VHr,"SPAN",{});var XHr=s(Wae);T(yy.$$.fragment,XHr),XHr.forEach(t),VHr.forEach(t),bco=i(NNe),Qae=n(NNe,"SPAN",{});var zHr=s(Qae);vco=r(zHr,"AutoProcessor"),zHr.forEach(t),NNe.forEach(t),qIe=i(m),yo=n(m,"DIV",{class:!0});var js=s(yo);T(Ly.$$.fragment,js),Fco=i(js),xy=n(js,"P",{});var jNe=s(xy);Tco=r(jNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=n(jNe,"A",{href:!0});var WHr=s(BB);Mco=r(WHr,"AutoProcessor.from_pretrained()"),WHr.forEach(t),Eco=r(jNe," class method."),jNe.forEach(t),Cco=i(js),$y=n(js,"P",{});var DNe=s($y);wco=r(DNe,"This class cannot be instantiated directly using "),Hae=n(DNe,"CODE",{});var QHr=s(Hae);Aco=r(QHr,"__init__()"),QHr.forEach(t),yco=r(DNe," (throws an error)."),DNe.forEach(t),Lco=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(ky.$$.fragment,ea),xco=i(ea),Uae=n(ea,"P",{});var HHr=s(Uae);$co=r(HHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),HHr.forEach(t),kco=i(ea),Ei=n(ea,"P",{});var AK=s(Ei);Sco=r(AK,"The processor class to instantiate is selected based on the "),Jae=n(AK,"CODE",{});var UHr=s(Jae);Rco=r(UHr,"model_type"),UHr.forEach(t),Pco=r(AK,` property of the config object (either
passed as an argument or loaded from `),Yae=n(AK,"CODE",{});var JHr=s(Yae);Bco=r(JHr,"pretrained_model_name_or_path"),JHr.forEach(t),Ico=r(AK," if possible):"),AK.forEach(t),qco=i(ea),ue=n(ea,"UL",{});var be=s(ue);kh=n(be,"LI",{});var a6e=s(kh);Kae=n(a6e,"STRONG",{});var YHr=s(Kae);Nco=r(YHr,"clip"),YHr.forEach(t),jco=r(a6e," \u2014 "),IB=n(a6e,"A",{href:!0});var KHr=s(IB);Dco=r(KHr,"CLIPProcessor"),KHr.forEach(t),Gco=r(a6e," (CLIP model)"),a6e.forEach(t),Oco=i(be),Sh=n(be,"LI",{});var n6e=s(Sh);Zae=n(n6e,"STRONG",{});var ZHr=s(Zae);Vco=r(ZHr,"flava"),ZHr.forEach(t),Xco=r(n6e," \u2014 "),ene=n(n6e,"CODE",{});var eUr=s(ene);zco=r(eUr,"FLAVAProcessor"),eUr.forEach(t),Wco=r(n6e," (Flava model)"),n6e.forEach(t),Qco=i(be),Rh=n(be,"LI",{});var s6e=s(Rh);one=n(s6e,"STRONG",{});var oUr=s(one);Hco=r(oUr,"layoutlmv2"),oUr.forEach(t),Uco=r(s6e," \u2014 "),qB=n(s6e,"A",{href:!0});var rUr=s(qB);Jco=r(rUr,"LayoutLMv2Processor"),rUr.forEach(t),Yco=r(s6e," (LayoutLMv2 model)"),s6e.forEach(t),Kco=i(be),Ph=n(be,"LI",{});var l6e=s(Ph);rne=n(l6e,"STRONG",{});var tUr=s(rne);Zco=r(tUr,"layoutxlm"),tUr.forEach(t),emo=r(l6e," \u2014 "),NB=n(l6e,"A",{href:!0});var aUr=s(NB);omo=r(aUr,"LayoutXLMProcessor"),aUr.forEach(t),rmo=r(l6e," (LayoutXLM model)"),l6e.forEach(t),tmo=i(be),Bh=n(be,"LI",{});var i6e=s(Bh);tne=n(i6e,"STRONG",{});var nUr=s(tne);amo=r(nUr,"sew"),nUr.forEach(t),nmo=r(i6e," \u2014 "),jB=n(i6e,"A",{href:!0});var sUr=s(jB);smo=r(sUr,"Wav2Vec2Processor"),sUr.forEach(t),lmo=r(i6e," (SEW model)"),i6e.forEach(t),imo=i(be),Ih=n(be,"LI",{});var d6e=s(Ih);ane=n(d6e,"STRONG",{});var lUr=s(ane);dmo=r(lUr,"sew-d"),lUr.forEach(t),cmo=r(d6e," \u2014 "),DB=n(d6e,"A",{href:!0});var iUr=s(DB);mmo=r(iUr,"Wav2Vec2Processor"),iUr.forEach(t),fmo=r(d6e," (SEW-D model)"),d6e.forEach(t),gmo=i(be),qh=n(be,"LI",{});var c6e=s(qh);nne=n(c6e,"STRONG",{});var dUr=s(nne);hmo=r(dUr,"speech_to_text"),dUr.forEach(t),umo=r(c6e," \u2014 "),GB=n(c6e,"A",{href:!0});var cUr=s(GB);pmo=r(cUr,"Speech2TextProcessor"),cUr.forEach(t),_mo=r(c6e," (Speech2Text model)"),c6e.forEach(t),bmo=i(be),Nh=n(be,"LI",{});var m6e=s(Nh);sne=n(m6e,"STRONG",{});var mUr=s(sne);vmo=r(mUr,"speech_to_text_2"),mUr.forEach(t),Fmo=r(m6e," \u2014 "),OB=n(m6e,"A",{href:!0});var fUr=s(OB);Tmo=r(fUr,"Speech2Text2Processor"),fUr.forEach(t),Mmo=r(m6e," (Speech2Text2 model)"),m6e.forEach(t),Emo=i(be),jh=n(be,"LI",{});var f6e=s(jh);lne=n(f6e,"STRONG",{});var gUr=s(lne);Cmo=r(gUr,"trocr"),gUr.forEach(t),wmo=r(f6e," \u2014 "),VB=n(f6e,"A",{href:!0});var hUr=s(VB);Amo=r(hUr,"TrOCRProcessor"),hUr.forEach(t),ymo=r(f6e," (TrOCR model)"),f6e.forEach(t),Lmo=i(be),Dh=n(be,"LI",{});var g6e=s(Dh);ine=n(g6e,"STRONG",{});var uUr=s(ine);xmo=r(uUr,"unispeech"),uUr.forEach(t),$mo=r(g6e," \u2014 "),XB=n(g6e,"A",{href:!0});var pUr=s(XB);kmo=r(pUr,"Wav2Vec2Processor"),pUr.forEach(t),Smo=r(g6e," (UniSpeech model)"),g6e.forEach(t),Rmo=i(be),Gh=n(be,"LI",{});var h6e=s(Gh);dne=n(h6e,"STRONG",{});var _Ur=s(dne);Pmo=r(_Ur,"unispeech-sat"),_Ur.forEach(t),Bmo=r(h6e," \u2014 "),zB=n(h6e,"A",{href:!0});var bUr=s(zB);Imo=r(bUr,"Wav2Vec2Processor"),bUr.forEach(t),qmo=r(h6e," (UniSpeechSat model)"),h6e.forEach(t),Nmo=i(be),Oh=n(be,"LI",{});var u6e=s(Oh);cne=n(u6e,"STRONG",{});var vUr=s(cne);jmo=r(vUr,"vilt"),vUr.forEach(t),Dmo=r(u6e," \u2014 "),WB=n(u6e,"A",{href:!0});var FUr=s(WB);Gmo=r(FUr,"ViltProcessor"),FUr.forEach(t),Omo=r(u6e," (ViLT model)"),u6e.forEach(t),Vmo=i(be),Vh=n(be,"LI",{});var p6e=s(Vh);mne=n(p6e,"STRONG",{});var TUr=s(mne);Xmo=r(TUr,"vision-text-dual-encoder"),TUr.forEach(t),zmo=r(p6e," \u2014 "),QB=n(p6e,"A",{href:!0});var MUr=s(QB);Wmo=r(MUr,"VisionTextDualEncoderProcessor"),MUr.forEach(t),Qmo=r(p6e," (VisionTextDualEncoder model)"),p6e.forEach(t),Hmo=i(be),Xh=n(be,"LI",{});var _6e=s(Xh);fne=n(_6e,"STRONG",{});var EUr=s(fne);Umo=r(EUr,"wav2vec2"),EUr.forEach(t),Jmo=r(_6e," \u2014 "),HB=n(_6e,"A",{href:!0});var CUr=s(HB);Ymo=r(CUr,"Wav2Vec2Processor"),CUr.forEach(t),Kmo=r(_6e," (Wav2Vec2 model)"),_6e.forEach(t),Zmo=i(be),zh=n(be,"LI",{});var b6e=s(zh);gne=n(b6e,"STRONG",{});var wUr=s(gne);efo=r(wUr,"wav2vec2-conformer"),wUr.forEach(t),ofo=r(b6e," \u2014 "),UB=n(b6e,"A",{href:!0});var AUr=s(UB);rfo=r(AUr,"Wav2Vec2Processor"),AUr.forEach(t),tfo=r(b6e," (Wav2Vec2-Conformer model)"),b6e.forEach(t),afo=i(be),Wh=n(be,"LI",{});var v6e=s(Wh);hne=n(v6e,"STRONG",{});var yUr=s(hne);nfo=r(yUr,"wavlm"),yUr.forEach(t),sfo=r(v6e," \u2014 "),JB=n(v6e,"A",{href:!0});var LUr=s(JB);lfo=r(LUr,"Wav2Vec2Processor"),LUr.forEach(t),ifo=r(v6e," (WavLM model)"),v6e.forEach(t),be.forEach(t),dfo=i(ea),T(Qh.$$.fragment,ea),cfo=i(ea),T(Hh.$$.fragment,ea),ea.forEach(t),mfo=i(js),Uh=n(js,"DIV",{class:!0});var GNe=s(Uh);T(Sy.$$.fragment,GNe),ffo=i(GNe),une=n(GNe,"P",{});var xUr=s(une);gfo=r(xUr,"Register a new processor for this class."),xUr.forEach(t),GNe.forEach(t),js.forEach(t),NIe=i(m),Ci=n(m,"H2",{class:!0});var ONe=s(Ci);Jh=n(ONe,"A",{id:!0,class:!0,href:!0});var $Ur=s(Jh);pne=n($Ur,"SPAN",{});var kUr=s(pne);T(Ry.$$.fragment,kUr),kUr.forEach(t),$Ur.forEach(t),hfo=i(ONe),_ne=n(ONe,"SPAN",{});var SUr=s(_ne);ufo=r(SUr,"AutoModel"),SUr.forEach(t),ONe.forEach(t),jIe=i(m),Lo=n(m,"DIV",{class:!0});var Ds=s(Lo);T(Py.$$.fragment,Ds),pfo=i(Ds),wi=n(Ds,"P",{});var yK=s(wi);_fo=r(yK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YB=n(yK,"A",{href:!0});var RUr=s(YB);bfo=r(RUr,"from_pretrained()"),RUr.forEach(t),vfo=r(yK," class method or the "),KB=n(yK,"A",{href:!0});var PUr=s(KB);Ffo=r(PUr,"from_config()"),PUr.forEach(t),Tfo=r(yK,` class
method.`),yK.forEach(t),Mfo=i(Ds),By=n(Ds,"P",{});var VNe=s(By);Efo=r(VNe,"This class cannot be instantiated directly using "),bne=n(VNe,"CODE",{});var BUr=s(bne);Cfo=r(BUr,"__init__()"),BUr.forEach(t),wfo=r(VNe," (throws an error)."),VNe.forEach(t),Afo=i(Ds),tt=n(Ds,"DIV",{class:!0});var m6=s(tt);T(Iy.$$.fragment,m6),yfo=i(m6),vne=n(m6,"P",{});var IUr=s(vne);Lfo=r(IUr,"Instantiates one of the base model classes of the library from a configuration."),IUr.forEach(t),xfo=i(m6),Ai=n(m6,"P",{});var LK=s(Ai);$fo=r(LK,`Note:
Loading a model from its configuration file does `),Fne=n(LK,"STRONG",{});var qUr=s(Fne);kfo=r(qUr,"not"),qUr.forEach(t),Sfo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZB=n(LK,"A",{href:!0});var NUr=s(ZB);Rfo=r(NUr,"from_pretrained()"),NUr.forEach(t),Pfo=r(LK," to load the model weights."),LK.forEach(t),Bfo=i(m6),T(Yh.$$.fragment,m6),m6.forEach(t),Ifo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(qy.$$.fragment,oa),qfo=i(oa),Tne=n(oa,"P",{});var jUr=s(Tne);Nfo=r(jUr,"Instantiate one of the base model classes of the library from a pretrained model."),jUr.forEach(t),jfo=i(oa),La=n(oa,"P",{});var f6=s(La);Dfo=r(f6,"The model class to instantiate is selected based on the "),Mne=n(f6,"CODE",{});var DUr=s(Mne);Gfo=r(DUr,"model_type"),DUr.forEach(t),Ofo=r(f6,` property of the config object (either
passed as an argument or loaded from `),Ene=n(f6,"CODE",{});var GUr=s(Ene);Vfo=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),Xfo=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cne=n(f6,"CODE",{});var OUr=s(Cne);zfo=r(OUr,"pretrained_model_name_or_path"),OUr.forEach(t),Wfo=r(f6,":"),f6.forEach(t),Qfo=i(oa),x=n(oa,"UL",{});var $=s(x);Kh=n($,"LI",{});var F6e=s(Kh);wne=n(F6e,"STRONG",{});var VUr=s(wne);Hfo=r(VUr,"albert"),VUr.forEach(t),Ufo=r(F6e," \u2014 "),eI=n(F6e,"A",{href:!0});var XUr=s(eI);Jfo=r(XUr,"AlbertModel"),XUr.forEach(t),Yfo=r(F6e," (ALBERT model)"),F6e.forEach(t),Kfo=i($),Zh=n($,"LI",{});var T6e=s(Zh);Ane=n(T6e,"STRONG",{});var zUr=s(Ane);Zfo=r(zUr,"bart"),zUr.forEach(t),ego=r(T6e," \u2014 "),oI=n(T6e,"A",{href:!0});var WUr=s(oI);ogo=r(WUr,"BartModel"),WUr.forEach(t),rgo=r(T6e," (BART model)"),T6e.forEach(t),tgo=i($),eu=n($,"LI",{});var M6e=s(eu);yne=n(M6e,"STRONG",{});var QUr=s(yne);ago=r(QUr,"beit"),QUr.forEach(t),ngo=r(M6e," \u2014 "),rI=n(M6e,"A",{href:!0});var HUr=s(rI);sgo=r(HUr,"BeitModel"),HUr.forEach(t),lgo=r(M6e," (BEiT model)"),M6e.forEach(t),igo=i($),ou=n($,"LI",{});var E6e=s(ou);Lne=n(E6e,"STRONG",{});var UUr=s(Lne);dgo=r(UUr,"bert"),UUr.forEach(t),cgo=r(E6e," \u2014 "),tI=n(E6e,"A",{href:!0});var JUr=s(tI);mgo=r(JUr,"BertModel"),JUr.forEach(t),fgo=r(E6e," (BERT model)"),E6e.forEach(t),ggo=i($),ru=n($,"LI",{});var C6e=s(ru);xne=n(C6e,"STRONG",{});var YUr=s(xne);hgo=r(YUr,"bert-generation"),YUr.forEach(t),ugo=r(C6e," \u2014 "),aI=n(C6e,"A",{href:!0});var KUr=s(aI);pgo=r(KUr,"BertGenerationEncoder"),KUr.forEach(t),_go=r(C6e," (Bert Generation model)"),C6e.forEach(t),bgo=i($),tu=n($,"LI",{});var w6e=s(tu);$ne=n(w6e,"STRONG",{});var ZUr=s($ne);vgo=r(ZUr,"big_bird"),ZUr.forEach(t),Fgo=r(w6e," \u2014 "),nI=n(w6e,"A",{href:!0});var eJr=s(nI);Tgo=r(eJr,"BigBirdModel"),eJr.forEach(t),Mgo=r(w6e," (BigBird model)"),w6e.forEach(t),Ego=i($),au=n($,"LI",{});var A6e=s(au);kne=n(A6e,"STRONG",{});var oJr=s(kne);Cgo=r(oJr,"bigbird_pegasus"),oJr.forEach(t),wgo=r(A6e," \u2014 "),sI=n(A6e,"A",{href:!0});var rJr=s(sI);Ago=r(rJr,"BigBirdPegasusModel"),rJr.forEach(t),ygo=r(A6e," (BigBirdPegasus model)"),A6e.forEach(t),Lgo=i($),nu=n($,"LI",{});var y6e=s(nu);Sne=n(y6e,"STRONG",{});var tJr=s(Sne);xgo=r(tJr,"blenderbot"),tJr.forEach(t),$go=r(y6e," \u2014 "),lI=n(y6e,"A",{href:!0});var aJr=s(lI);kgo=r(aJr,"BlenderbotModel"),aJr.forEach(t),Sgo=r(y6e," (Blenderbot model)"),y6e.forEach(t),Rgo=i($),su=n($,"LI",{});var L6e=s(su);Rne=n(L6e,"STRONG",{});var nJr=s(Rne);Pgo=r(nJr,"blenderbot-small"),nJr.forEach(t),Bgo=r(L6e," \u2014 "),iI=n(L6e,"A",{href:!0});var sJr=s(iI);Igo=r(sJr,"BlenderbotSmallModel"),sJr.forEach(t),qgo=r(L6e," (BlenderbotSmall model)"),L6e.forEach(t),Ngo=i($),lu=n($,"LI",{});var x6e=s(lu);Pne=n(x6e,"STRONG",{});var lJr=s(Pne);jgo=r(lJr,"camembert"),lJr.forEach(t),Dgo=r(x6e," \u2014 "),dI=n(x6e,"A",{href:!0});var iJr=s(dI);Ggo=r(iJr,"CamembertModel"),iJr.forEach(t),Ogo=r(x6e," (CamemBERT model)"),x6e.forEach(t),Vgo=i($),iu=n($,"LI",{});var $6e=s(iu);Bne=n($6e,"STRONG",{});var dJr=s(Bne);Xgo=r(dJr,"canine"),dJr.forEach(t),zgo=r($6e," \u2014 "),cI=n($6e,"A",{href:!0});var cJr=s(cI);Wgo=r(cJr,"CanineModel"),cJr.forEach(t),Qgo=r($6e," (Canine model)"),$6e.forEach(t),Hgo=i($),du=n($,"LI",{});var k6e=s(du);Ine=n(k6e,"STRONG",{});var mJr=s(Ine);Ugo=r(mJr,"clip"),mJr.forEach(t),Jgo=r(k6e," \u2014 "),mI=n(k6e,"A",{href:!0});var fJr=s(mI);Ygo=r(fJr,"CLIPModel"),fJr.forEach(t),Kgo=r(k6e," (CLIP model)"),k6e.forEach(t),Zgo=i($),cu=n($,"LI",{});var S6e=s(cu);qne=n(S6e,"STRONG",{});var gJr=s(qne);eho=r(gJr,"convbert"),gJr.forEach(t),oho=r(S6e," \u2014 "),fI=n(S6e,"A",{href:!0});var hJr=s(fI);rho=r(hJr,"ConvBertModel"),hJr.forEach(t),tho=r(S6e," (ConvBERT model)"),S6e.forEach(t),aho=i($),mu=n($,"LI",{});var R6e=s(mu);Nne=n(R6e,"STRONG",{});var uJr=s(Nne);nho=r(uJr,"convnext"),uJr.forEach(t),sho=r(R6e," \u2014 "),gI=n(R6e,"A",{href:!0});var pJr=s(gI);lho=r(pJr,"ConvNextModel"),pJr.forEach(t),iho=r(R6e," (ConvNext model)"),R6e.forEach(t),dho=i($),fu=n($,"LI",{});var P6e=s(fu);jne=n(P6e,"STRONG",{});var _Jr=s(jne);cho=r(_Jr,"ctrl"),_Jr.forEach(t),mho=r(P6e," \u2014 "),hI=n(P6e,"A",{href:!0});var bJr=s(hI);fho=r(bJr,"CTRLModel"),bJr.forEach(t),gho=r(P6e," (CTRL model)"),P6e.forEach(t),hho=i($),gu=n($,"LI",{});var B6e=s(gu);Dne=n(B6e,"STRONG",{});var vJr=s(Dne);uho=r(vJr,"data2vec-audio"),vJr.forEach(t),pho=r(B6e," \u2014 "),uI=n(B6e,"A",{href:!0});var FJr=s(uI);_ho=r(FJr,"Data2VecAudioModel"),FJr.forEach(t),bho=r(B6e," (Data2VecAudio model)"),B6e.forEach(t),vho=i($),hu=n($,"LI",{});var I6e=s(hu);Gne=n(I6e,"STRONG",{});var TJr=s(Gne);Fho=r(TJr,"data2vec-text"),TJr.forEach(t),Tho=r(I6e," \u2014 "),pI=n(I6e,"A",{href:!0});var MJr=s(pI);Mho=r(MJr,"Data2VecTextModel"),MJr.forEach(t),Eho=r(I6e," (Data2VecText model)"),I6e.forEach(t),Cho=i($),uu=n($,"LI",{});var q6e=s(uu);One=n(q6e,"STRONG",{});var EJr=s(One);who=r(EJr,"data2vec-vision"),EJr.forEach(t),Aho=r(q6e," \u2014 "),_I=n(q6e,"A",{href:!0});var CJr=s(_I);yho=r(CJr,"Data2VecVisionModel"),CJr.forEach(t),Lho=r(q6e," (Data2VecVision model)"),q6e.forEach(t),xho=i($),pu=n($,"LI",{});var N6e=s(pu);Vne=n(N6e,"STRONG",{});var wJr=s(Vne);$ho=r(wJr,"deberta"),wJr.forEach(t),kho=r(N6e," \u2014 "),bI=n(N6e,"A",{href:!0});var AJr=s(bI);Sho=r(AJr,"DebertaModel"),AJr.forEach(t),Rho=r(N6e," (DeBERTa model)"),N6e.forEach(t),Pho=i($),_u=n($,"LI",{});var j6e=s(_u);Xne=n(j6e,"STRONG",{});var yJr=s(Xne);Bho=r(yJr,"deberta-v2"),yJr.forEach(t),Iho=r(j6e," \u2014 "),vI=n(j6e,"A",{href:!0});var LJr=s(vI);qho=r(LJr,"DebertaV2Model"),LJr.forEach(t),Nho=r(j6e," (DeBERTa-v2 model)"),j6e.forEach(t),jho=i($),bu=n($,"LI",{});var D6e=s(bu);zne=n(D6e,"STRONG",{});var xJr=s(zne);Dho=r(xJr,"decision_transformer"),xJr.forEach(t),Gho=r(D6e," \u2014 "),FI=n(D6e,"A",{href:!0});var $Jr=s(FI);Oho=r($Jr,"DecisionTransformerModel"),$Jr.forEach(t),Vho=r(D6e," (Decision Transformer model)"),D6e.forEach(t),Xho=i($),vu=n($,"LI",{});var G6e=s(vu);Wne=n(G6e,"STRONG",{});var kJr=s(Wne);zho=r(kJr,"deit"),kJr.forEach(t),Who=r(G6e," \u2014 "),TI=n(G6e,"A",{href:!0});var SJr=s(TI);Qho=r(SJr,"DeiTModel"),SJr.forEach(t),Hho=r(G6e," (DeiT model)"),G6e.forEach(t),Uho=i($),Fu=n($,"LI",{});var O6e=s(Fu);Qne=n(O6e,"STRONG",{});var RJr=s(Qne);Jho=r(RJr,"detr"),RJr.forEach(t),Yho=r(O6e," \u2014 "),MI=n(O6e,"A",{href:!0});var PJr=s(MI);Kho=r(PJr,"DetrModel"),PJr.forEach(t),Zho=r(O6e," (DETR model)"),O6e.forEach(t),euo=i($),Tu=n($,"LI",{});var V6e=s(Tu);Hne=n(V6e,"STRONG",{});var BJr=s(Hne);ouo=r(BJr,"distilbert"),BJr.forEach(t),ruo=r(V6e," \u2014 "),EI=n(V6e,"A",{href:!0});var IJr=s(EI);tuo=r(IJr,"DistilBertModel"),IJr.forEach(t),auo=r(V6e," (DistilBERT model)"),V6e.forEach(t),nuo=i($),Mu=n($,"LI",{});var X6e=s(Mu);Une=n(X6e,"STRONG",{});var qJr=s(Une);suo=r(qJr,"dpr"),qJr.forEach(t),luo=r(X6e," \u2014 "),CI=n(X6e,"A",{href:!0});var NJr=s(CI);iuo=r(NJr,"DPRQuestionEncoder"),NJr.forEach(t),duo=r(X6e," (DPR model)"),X6e.forEach(t),cuo=i($),Eu=n($,"LI",{});var z6e=s(Eu);Jne=n(z6e,"STRONG",{});var jJr=s(Jne);muo=r(jJr,"dpt"),jJr.forEach(t),fuo=r(z6e," \u2014 "),wI=n(z6e,"A",{href:!0});var DJr=s(wI);guo=r(DJr,"DPTModel"),DJr.forEach(t),huo=r(z6e," (DPT model)"),z6e.forEach(t),uuo=i($),Cu=n($,"LI",{});var W6e=s(Cu);Yne=n(W6e,"STRONG",{});var GJr=s(Yne);puo=r(GJr,"electra"),GJr.forEach(t),_uo=r(W6e," \u2014 "),AI=n(W6e,"A",{href:!0});var OJr=s(AI);buo=r(OJr,"ElectraModel"),OJr.forEach(t),vuo=r(W6e," (ELECTRA model)"),W6e.forEach(t),Fuo=i($),wu=n($,"LI",{});var Q6e=s(wu);Kne=n(Q6e,"STRONG",{});var VJr=s(Kne);Tuo=r(VJr,"flaubert"),VJr.forEach(t),Muo=r(Q6e," \u2014 "),yI=n(Q6e,"A",{href:!0});var XJr=s(yI);Euo=r(XJr,"FlaubertModel"),XJr.forEach(t),Cuo=r(Q6e," (FlauBERT model)"),Q6e.forEach(t),wuo=i($),Au=n($,"LI",{});var H6e=s(Au);Zne=n(H6e,"STRONG",{});var zJr=s(Zne);Auo=r(zJr,"flava"),zJr.forEach(t),yuo=r(H6e," \u2014 "),LI=n(H6e,"A",{href:!0});var WJr=s(LI);Luo=r(WJr,"FlavaModel"),WJr.forEach(t),xuo=r(H6e," (Flava model)"),H6e.forEach(t),$uo=i($),yu=n($,"LI",{});var U6e=s(yu);ese=n(U6e,"STRONG",{});var QJr=s(ese);kuo=r(QJr,"fnet"),QJr.forEach(t),Suo=r(U6e," \u2014 "),xI=n(U6e,"A",{href:!0});var HJr=s(xI);Ruo=r(HJr,"FNetModel"),HJr.forEach(t),Puo=r(U6e," (FNet model)"),U6e.forEach(t),Buo=i($),Lu=n($,"LI",{});var J6e=s(Lu);ose=n(J6e,"STRONG",{});var UJr=s(ose);Iuo=r(UJr,"fsmt"),UJr.forEach(t),quo=r(J6e," \u2014 "),$I=n(J6e,"A",{href:!0});var JJr=s($I);Nuo=r(JJr,"FSMTModel"),JJr.forEach(t),juo=r(J6e," (FairSeq Machine-Translation model)"),J6e.forEach(t),Duo=i($),Rs=n($,"LI",{});var T$=s(Rs);rse=n(T$,"STRONG",{});var YJr=s(rse);Guo=r(YJr,"funnel"),YJr.forEach(t),Ouo=r(T$," \u2014 "),kI=n(T$,"A",{href:!0});var KJr=s(kI);Vuo=r(KJr,"FunnelModel"),KJr.forEach(t),Xuo=r(T$," or "),SI=n(T$,"A",{href:!0});var ZJr=s(SI);zuo=r(ZJr,"FunnelBaseModel"),ZJr.forEach(t),Wuo=r(T$," (Funnel Transformer model)"),T$.forEach(t),Quo=i($),xu=n($,"LI",{});var Y6e=s(xu);tse=n(Y6e,"STRONG",{});var eYr=s(tse);Huo=r(eYr,"glpn"),eYr.forEach(t),Uuo=r(Y6e," \u2014 "),RI=n(Y6e,"A",{href:!0});var oYr=s(RI);Juo=r(oYr,"GLPNModel"),oYr.forEach(t),Yuo=r(Y6e," (GLPN model)"),Y6e.forEach(t),Kuo=i($),$u=n($,"LI",{});var K6e=s($u);ase=n(K6e,"STRONG",{});var rYr=s(ase);Zuo=r(rYr,"gpt2"),rYr.forEach(t),epo=r(K6e," \u2014 "),PI=n(K6e,"A",{href:!0});var tYr=s(PI);opo=r(tYr,"GPT2Model"),tYr.forEach(t),rpo=r(K6e," (OpenAI GPT-2 model)"),K6e.forEach(t),tpo=i($),ku=n($,"LI",{});var Z6e=s(ku);nse=n(Z6e,"STRONG",{});var aYr=s(nse);apo=r(aYr,"gpt_neo"),aYr.forEach(t),npo=r(Z6e," \u2014 "),BI=n(Z6e,"A",{href:!0});var nYr=s(BI);spo=r(nYr,"GPTNeoModel"),nYr.forEach(t),lpo=r(Z6e," (GPT Neo model)"),Z6e.forEach(t),ipo=i($),Su=n($,"LI",{});var e0e=s(Su);sse=n(e0e,"STRONG",{});var sYr=s(sse);dpo=r(sYr,"gptj"),sYr.forEach(t),cpo=r(e0e," \u2014 "),II=n(e0e,"A",{href:!0});var lYr=s(II);mpo=r(lYr,"GPTJModel"),lYr.forEach(t),fpo=r(e0e," (GPT-J model)"),e0e.forEach(t),gpo=i($),Ru=n($,"LI",{});var o0e=s(Ru);lse=n(o0e,"STRONG",{});var iYr=s(lse);hpo=r(iYr,"hubert"),iYr.forEach(t),upo=r(o0e," \u2014 "),qI=n(o0e,"A",{href:!0});var dYr=s(qI);ppo=r(dYr,"HubertModel"),dYr.forEach(t),_po=r(o0e," (Hubert model)"),o0e.forEach(t),bpo=i($),Pu=n($,"LI",{});var r0e=s(Pu);ise=n(r0e,"STRONG",{});var cYr=s(ise);vpo=r(cYr,"ibert"),cYr.forEach(t),Fpo=r(r0e," \u2014 "),NI=n(r0e,"A",{href:!0});var mYr=s(NI);Tpo=r(mYr,"IBertModel"),mYr.forEach(t),Mpo=r(r0e," (I-BERT model)"),r0e.forEach(t),Epo=i($),Bu=n($,"LI",{});var t0e=s(Bu);dse=n(t0e,"STRONG",{});var fYr=s(dse);Cpo=r(fYr,"imagegpt"),fYr.forEach(t),wpo=r(t0e," \u2014 "),jI=n(t0e,"A",{href:!0});var gYr=s(jI);Apo=r(gYr,"ImageGPTModel"),gYr.forEach(t),ypo=r(t0e," (ImageGPT model)"),t0e.forEach(t),Lpo=i($),Iu=n($,"LI",{});var a0e=s(Iu);cse=n(a0e,"STRONG",{});var hYr=s(cse);xpo=r(hYr,"layoutlm"),hYr.forEach(t),$po=r(a0e," \u2014 "),DI=n(a0e,"A",{href:!0});var uYr=s(DI);kpo=r(uYr,"LayoutLMModel"),uYr.forEach(t),Spo=r(a0e," (LayoutLM model)"),a0e.forEach(t),Rpo=i($),qu=n($,"LI",{});var n0e=s(qu);mse=n(n0e,"STRONG",{});var pYr=s(mse);Ppo=r(pYr,"layoutlmv2"),pYr.forEach(t),Bpo=r(n0e," \u2014 "),GI=n(n0e,"A",{href:!0});var _Yr=s(GI);Ipo=r(_Yr,"LayoutLMv2Model"),_Yr.forEach(t),qpo=r(n0e," (LayoutLMv2 model)"),n0e.forEach(t),Npo=i($),Nu=n($,"LI",{});var s0e=s(Nu);fse=n(s0e,"STRONG",{});var bYr=s(fse);jpo=r(bYr,"led"),bYr.forEach(t),Dpo=r(s0e," \u2014 "),OI=n(s0e,"A",{href:!0});var vYr=s(OI);Gpo=r(vYr,"LEDModel"),vYr.forEach(t),Opo=r(s0e," (LED model)"),s0e.forEach(t),Vpo=i($),ju=n($,"LI",{});var l0e=s(ju);gse=n(l0e,"STRONG",{});var FYr=s(gse);Xpo=r(FYr,"longformer"),FYr.forEach(t),zpo=r(l0e," \u2014 "),VI=n(l0e,"A",{href:!0});var TYr=s(VI);Wpo=r(TYr,"LongformerModel"),TYr.forEach(t),Qpo=r(l0e," (Longformer model)"),l0e.forEach(t),Hpo=i($),Du=n($,"LI",{});var i0e=s(Du);hse=n(i0e,"STRONG",{});var MYr=s(hse);Upo=r(MYr,"luke"),MYr.forEach(t),Jpo=r(i0e," \u2014 "),XI=n(i0e,"A",{href:!0});var EYr=s(XI);Ypo=r(EYr,"LukeModel"),EYr.forEach(t),Kpo=r(i0e," (LUKE model)"),i0e.forEach(t),Zpo=i($),Gu=n($,"LI",{});var d0e=s(Gu);use=n(d0e,"STRONG",{});var CYr=s(use);e_o=r(CYr,"lxmert"),CYr.forEach(t),o_o=r(d0e," \u2014 "),zI=n(d0e,"A",{href:!0});var wYr=s(zI);r_o=r(wYr,"LxmertModel"),wYr.forEach(t),t_o=r(d0e," (LXMERT model)"),d0e.forEach(t),a_o=i($),Ou=n($,"LI",{});var c0e=s(Ou);pse=n(c0e,"STRONG",{});var AYr=s(pse);n_o=r(AYr,"m2m_100"),AYr.forEach(t),s_o=r(c0e," \u2014 "),WI=n(c0e,"A",{href:!0});var yYr=s(WI);l_o=r(yYr,"M2M100Model"),yYr.forEach(t),i_o=r(c0e," (M2M100 model)"),c0e.forEach(t),d_o=i($),Vu=n($,"LI",{});var m0e=s(Vu);_se=n(m0e,"STRONG",{});var LYr=s(_se);c_o=r(LYr,"marian"),LYr.forEach(t),m_o=r(m0e," \u2014 "),QI=n(m0e,"A",{href:!0});var xYr=s(QI);f_o=r(xYr,"MarianModel"),xYr.forEach(t),g_o=r(m0e," (Marian model)"),m0e.forEach(t),h_o=i($),Xu=n($,"LI",{});var f0e=s(Xu);bse=n(f0e,"STRONG",{});var $Yr=s(bse);u_o=r($Yr,"maskformer"),$Yr.forEach(t),p_o=r(f0e," \u2014 "),HI=n(f0e,"A",{href:!0});var kYr=s(HI);__o=r(kYr,"MaskFormerModel"),kYr.forEach(t),b_o=r(f0e," (MaskFormer model)"),f0e.forEach(t),v_o=i($),zu=n($,"LI",{});var g0e=s(zu);vse=n(g0e,"STRONG",{});var SYr=s(vse);F_o=r(SYr,"mbart"),SYr.forEach(t),T_o=r(g0e," \u2014 "),UI=n(g0e,"A",{href:!0});var RYr=s(UI);M_o=r(RYr,"MBartModel"),RYr.forEach(t),E_o=r(g0e," (mBART model)"),g0e.forEach(t),C_o=i($),Wu=n($,"LI",{});var h0e=s(Wu);Fse=n(h0e,"STRONG",{});var PYr=s(Fse);w_o=r(PYr,"megatron-bert"),PYr.forEach(t),A_o=r(h0e," \u2014 "),JI=n(h0e,"A",{href:!0});var BYr=s(JI);y_o=r(BYr,"MegatronBertModel"),BYr.forEach(t),L_o=r(h0e," (MegatronBert model)"),h0e.forEach(t),x_o=i($),Qu=n($,"LI",{});var u0e=s(Qu);Tse=n(u0e,"STRONG",{});var IYr=s(Tse);$_o=r(IYr,"mobilebert"),IYr.forEach(t),k_o=r(u0e," \u2014 "),YI=n(u0e,"A",{href:!0});var qYr=s(YI);S_o=r(qYr,"MobileBertModel"),qYr.forEach(t),R_o=r(u0e," (MobileBERT model)"),u0e.forEach(t),P_o=i($),Hu=n($,"LI",{});var p0e=s(Hu);Mse=n(p0e,"STRONG",{});var NYr=s(Mse);B_o=r(NYr,"mpnet"),NYr.forEach(t),I_o=r(p0e," \u2014 "),KI=n(p0e,"A",{href:!0});var jYr=s(KI);q_o=r(jYr,"MPNetModel"),jYr.forEach(t),N_o=r(p0e," (MPNet model)"),p0e.forEach(t),j_o=i($),Uu=n($,"LI",{});var _0e=s(Uu);Ese=n(_0e,"STRONG",{});var DYr=s(Ese);D_o=r(DYr,"mt5"),DYr.forEach(t),G_o=r(_0e," \u2014 "),ZI=n(_0e,"A",{href:!0});var GYr=s(ZI);O_o=r(GYr,"MT5Model"),GYr.forEach(t),V_o=r(_0e," (mT5 model)"),_0e.forEach(t),X_o=i($),Ju=n($,"LI",{});var b0e=s(Ju);Cse=n(b0e,"STRONG",{});var OYr=s(Cse);z_o=r(OYr,"nystromformer"),OYr.forEach(t),W_o=r(b0e," \u2014 "),eq=n(b0e,"A",{href:!0});var VYr=s(eq);Q_o=r(VYr,"NystromformerModel"),VYr.forEach(t),H_o=r(b0e," (Nystromformer model)"),b0e.forEach(t),U_o=i($),Yu=n($,"LI",{});var v0e=s(Yu);wse=n(v0e,"STRONG",{});var XYr=s(wse);J_o=r(XYr,"openai-gpt"),XYr.forEach(t),Y_o=r(v0e," \u2014 "),oq=n(v0e,"A",{href:!0});var zYr=s(oq);K_o=r(zYr,"OpenAIGPTModel"),zYr.forEach(t),Z_o=r(v0e," (OpenAI GPT model)"),v0e.forEach(t),ebo=i($),Ku=n($,"LI",{});var F0e=s(Ku);Ase=n(F0e,"STRONG",{});var WYr=s(Ase);obo=r(WYr,"opt"),WYr.forEach(t),rbo=r(F0e," \u2014 "),rq=n(F0e,"A",{href:!0});var QYr=s(rq);tbo=r(QYr,"OPTModel"),QYr.forEach(t),abo=r(F0e," (OPT model)"),F0e.forEach(t),nbo=i($),Zu=n($,"LI",{});var T0e=s(Zu);yse=n(T0e,"STRONG",{});var HYr=s(yse);sbo=r(HYr,"pegasus"),HYr.forEach(t),lbo=r(T0e," \u2014 "),tq=n(T0e,"A",{href:!0});var UYr=s(tq);ibo=r(UYr,"PegasusModel"),UYr.forEach(t),dbo=r(T0e," (Pegasus model)"),T0e.forEach(t),cbo=i($),ep=n($,"LI",{});var M0e=s(ep);Lse=n(M0e,"STRONG",{});var JYr=s(Lse);mbo=r(JYr,"perceiver"),JYr.forEach(t),fbo=r(M0e," \u2014 "),aq=n(M0e,"A",{href:!0});var YYr=s(aq);gbo=r(YYr,"PerceiverModel"),YYr.forEach(t),hbo=r(M0e," (Perceiver model)"),M0e.forEach(t),ubo=i($),op=n($,"LI",{});var E0e=s(op);xse=n(E0e,"STRONG",{});var KYr=s(xse);pbo=r(KYr,"plbart"),KYr.forEach(t),_bo=r(E0e," \u2014 "),nq=n(E0e,"A",{href:!0});var ZYr=s(nq);bbo=r(ZYr,"PLBartModel"),ZYr.forEach(t),vbo=r(E0e," (PLBart model)"),E0e.forEach(t),Fbo=i($),rp=n($,"LI",{});var C0e=s(rp);$se=n(C0e,"STRONG",{});var eKr=s($se);Tbo=r(eKr,"poolformer"),eKr.forEach(t),Mbo=r(C0e," \u2014 "),sq=n(C0e,"A",{href:!0});var oKr=s(sq);Ebo=r(oKr,"PoolFormerModel"),oKr.forEach(t),Cbo=r(C0e," (PoolFormer model)"),C0e.forEach(t),wbo=i($),tp=n($,"LI",{});var w0e=s(tp);kse=n(w0e,"STRONG",{});var rKr=s(kse);Abo=r(rKr,"prophetnet"),rKr.forEach(t),ybo=r(w0e," \u2014 "),lq=n(w0e,"A",{href:!0});var tKr=s(lq);Lbo=r(tKr,"ProphetNetModel"),tKr.forEach(t),xbo=r(w0e," (ProphetNet model)"),w0e.forEach(t),$bo=i($),ap=n($,"LI",{});var A0e=s(ap);Sse=n(A0e,"STRONG",{});var aKr=s(Sse);kbo=r(aKr,"qdqbert"),aKr.forEach(t),Sbo=r(A0e," \u2014 "),iq=n(A0e,"A",{href:!0});var nKr=s(iq);Rbo=r(nKr,"QDQBertModel"),nKr.forEach(t),Pbo=r(A0e," (QDQBert model)"),A0e.forEach(t),Bbo=i($),np=n($,"LI",{});var y0e=s(np);Rse=n(y0e,"STRONG",{});var sKr=s(Rse);Ibo=r(sKr,"reformer"),sKr.forEach(t),qbo=r(y0e," \u2014 "),dq=n(y0e,"A",{href:!0});var lKr=s(dq);Nbo=r(lKr,"ReformerModel"),lKr.forEach(t),jbo=r(y0e," (Reformer model)"),y0e.forEach(t),Dbo=i($),sp=n($,"LI",{});var L0e=s(sp);Pse=n(L0e,"STRONG",{});var iKr=s(Pse);Gbo=r(iKr,"regnet"),iKr.forEach(t),Obo=r(L0e," \u2014 "),cq=n(L0e,"A",{href:!0});var dKr=s(cq);Vbo=r(dKr,"RegNetModel"),dKr.forEach(t),Xbo=r(L0e," (RegNet model)"),L0e.forEach(t),zbo=i($),lp=n($,"LI",{});var x0e=s(lp);Bse=n(x0e,"STRONG",{});var cKr=s(Bse);Wbo=r(cKr,"rembert"),cKr.forEach(t),Qbo=r(x0e," \u2014 "),mq=n(x0e,"A",{href:!0});var mKr=s(mq);Hbo=r(mKr,"RemBertModel"),mKr.forEach(t),Ubo=r(x0e," (RemBERT model)"),x0e.forEach(t),Jbo=i($),ip=n($,"LI",{});var $0e=s(ip);Ise=n($0e,"STRONG",{});var fKr=s(Ise);Ybo=r(fKr,"resnet"),fKr.forEach(t),Kbo=r($0e," \u2014 "),fq=n($0e,"A",{href:!0});var gKr=s(fq);Zbo=r(gKr,"ResNetModel"),gKr.forEach(t),e2o=r($0e," (ResNet model)"),$0e.forEach(t),o2o=i($),dp=n($,"LI",{});var k0e=s(dp);qse=n(k0e,"STRONG",{});var hKr=s(qse);r2o=r(hKr,"retribert"),hKr.forEach(t),t2o=r(k0e," \u2014 "),gq=n(k0e,"A",{href:!0});var uKr=s(gq);a2o=r(uKr,"RetriBertModel"),uKr.forEach(t),n2o=r(k0e," (RetriBERT model)"),k0e.forEach(t),s2o=i($),cp=n($,"LI",{});var S0e=s(cp);Nse=n(S0e,"STRONG",{});var pKr=s(Nse);l2o=r(pKr,"roberta"),pKr.forEach(t),i2o=r(S0e," \u2014 "),hq=n(S0e,"A",{href:!0});var _Kr=s(hq);d2o=r(_Kr,"RobertaModel"),_Kr.forEach(t),c2o=r(S0e," (RoBERTa model)"),S0e.forEach(t),m2o=i($),mp=n($,"LI",{});var R0e=s(mp);jse=n(R0e,"STRONG",{});var bKr=s(jse);f2o=r(bKr,"roformer"),bKr.forEach(t),g2o=r(R0e," \u2014 "),uq=n(R0e,"A",{href:!0});var vKr=s(uq);h2o=r(vKr,"RoFormerModel"),vKr.forEach(t),u2o=r(R0e," (RoFormer model)"),R0e.forEach(t),p2o=i($),fp=n($,"LI",{});var P0e=s(fp);Dse=n(P0e,"STRONG",{});var FKr=s(Dse);_2o=r(FKr,"segformer"),FKr.forEach(t),b2o=r(P0e," \u2014 "),pq=n(P0e,"A",{href:!0});var TKr=s(pq);v2o=r(TKr,"SegformerModel"),TKr.forEach(t),F2o=r(P0e," (SegFormer model)"),P0e.forEach(t),T2o=i($),gp=n($,"LI",{});var B0e=s(gp);Gse=n(B0e,"STRONG",{});var MKr=s(Gse);M2o=r(MKr,"sew"),MKr.forEach(t),E2o=r(B0e," \u2014 "),_q=n(B0e,"A",{href:!0});var EKr=s(_q);C2o=r(EKr,"SEWModel"),EKr.forEach(t),w2o=r(B0e," (SEW model)"),B0e.forEach(t),A2o=i($),hp=n($,"LI",{});var I0e=s(hp);Ose=n(I0e,"STRONG",{});var CKr=s(Ose);y2o=r(CKr,"sew-d"),CKr.forEach(t),L2o=r(I0e," \u2014 "),bq=n(I0e,"A",{href:!0});var wKr=s(bq);x2o=r(wKr,"SEWDModel"),wKr.forEach(t),$2o=r(I0e," (SEW-D model)"),I0e.forEach(t),k2o=i($),up=n($,"LI",{});var q0e=s(up);Vse=n(q0e,"STRONG",{});var AKr=s(Vse);S2o=r(AKr,"speech_to_text"),AKr.forEach(t),R2o=r(q0e," \u2014 "),vq=n(q0e,"A",{href:!0});var yKr=s(vq);P2o=r(yKr,"Speech2TextModel"),yKr.forEach(t),B2o=r(q0e," (Speech2Text model)"),q0e.forEach(t),I2o=i($),pp=n($,"LI",{});var N0e=s(pp);Xse=n(N0e,"STRONG",{});var LKr=s(Xse);q2o=r(LKr,"splinter"),LKr.forEach(t),N2o=r(N0e," \u2014 "),Fq=n(N0e,"A",{href:!0});var xKr=s(Fq);j2o=r(xKr,"SplinterModel"),xKr.forEach(t),D2o=r(N0e," (Splinter model)"),N0e.forEach(t),G2o=i($),_p=n($,"LI",{});var j0e=s(_p);zse=n(j0e,"STRONG",{});var $Kr=s(zse);O2o=r($Kr,"squeezebert"),$Kr.forEach(t),V2o=r(j0e," \u2014 "),Tq=n(j0e,"A",{href:!0});var kKr=s(Tq);X2o=r(kKr,"SqueezeBertModel"),kKr.forEach(t),z2o=r(j0e," (SqueezeBERT model)"),j0e.forEach(t),W2o=i($),bp=n($,"LI",{});var D0e=s(bp);Wse=n(D0e,"STRONG",{});var SKr=s(Wse);Q2o=r(SKr,"swin"),SKr.forEach(t),H2o=r(D0e," \u2014 "),Mq=n(D0e,"A",{href:!0});var RKr=s(Mq);U2o=r(RKr,"SwinModel"),RKr.forEach(t),J2o=r(D0e," (Swin model)"),D0e.forEach(t),Y2o=i($),vp=n($,"LI",{});var G0e=s(vp);Qse=n(G0e,"STRONG",{});var PKr=s(Qse);K2o=r(PKr,"t5"),PKr.forEach(t),Z2o=r(G0e," \u2014 "),Eq=n(G0e,"A",{href:!0});var BKr=s(Eq);evo=r(BKr,"T5Model"),BKr.forEach(t),ovo=r(G0e," (T5 model)"),G0e.forEach(t),rvo=i($),Fp=n($,"LI",{});var O0e=s(Fp);Hse=n(O0e,"STRONG",{});var IKr=s(Hse);tvo=r(IKr,"tapas"),IKr.forEach(t),avo=r(O0e," \u2014 "),Cq=n(O0e,"A",{href:!0});var qKr=s(Cq);nvo=r(qKr,"TapasModel"),qKr.forEach(t),svo=r(O0e," (TAPAS model)"),O0e.forEach(t),lvo=i($),Tp=n($,"LI",{});var V0e=s(Tp);Use=n(V0e,"STRONG",{});var NKr=s(Use);ivo=r(NKr,"transfo-xl"),NKr.forEach(t),dvo=r(V0e," \u2014 "),wq=n(V0e,"A",{href:!0});var jKr=s(wq);cvo=r(jKr,"TransfoXLModel"),jKr.forEach(t),mvo=r(V0e," (Transformer-XL model)"),V0e.forEach(t),fvo=i($),Mp=n($,"LI",{});var X0e=s(Mp);Jse=n(X0e,"STRONG",{});var DKr=s(Jse);gvo=r(DKr,"unispeech"),DKr.forEach(t),hvo=r(X0e," \u2014 "),Aq=n(X0e,"A",{href:!0});var GKr=s(Aq);uvo=r(GKr,"UniSpeechModel"),GKr.forEach(t),pvo=r(X0e," (UniSpeech model)"),X0e.forEach(t),_vo=i($),Ep=n($,"LI",{});var z0e=s(Ep);Yse=n(z0e,"STRONG",{});var OKr=s(Yse);bvo=r(OKr,"unispeech-sat"),OKr.forEach(t),vvo=r(z0e," \u2014 "),yq=n(z0e,"A",{href:!0});var VKr=s(yq);Fvo=r(VKr,"UniSpeechSatModel"),VKr.forEach(t),Tvo=r(z0e," (UniSpeechSat model)"),z0e.forEach(t),Mvo=i($),Cp=n($,"LI",{});var W0e=s(Cp);Kse=n(W0e,"STRONG",{});var XKr=s(Kse);Evo=r(XKr,"van"),XKr.forEach(t),Cvo=r(W0e," \u2014 "),Lq=n(W0e,"A",{href:!0});var zKr=s(Lq);wvo=r(zKr,"VanModel"),zKr.forEach(t),Avo=r(W0e," (VAN model)"),W0e.forEach(t),yvo=i($),wp=n($,"LI",{});var Q0e=s(wp);Zse=n(Q0e,"STRONG",{});var WKr=s(Zse);Lvo=r(WKr,"vilt"),WKr.forEach(t),xvo=r(Q0e," \u2014 "),xq=n(Q0e,"A",{href:!0});var QKr=s(xq);$vo=r(QKr,"ViltModel"),QKr.forEach(t),kvo=r(Q0e," (ViLT model)"),Q0e.forEach(t),Svo=i($),Ap=n($,"LI",{});var H0e=s(Ap);ele=n(H0e,"STRONG",{});var HKr=s(ele);Rvo=r(HKr,"vision-text-dual-encoder"),HKr.forEach(t),Pvo=r(H0e," \u2014 "),$q=n(H0e,"A",{href:!0});var UKr=s($q);Bvo=r(UKr,"VisionTextDualEncoderModel"),UKr.forEach(t),Ivo=r(H0e," (VisionTextDualEncoder model)"),H0e.forEach(t),qvo=i($),yp=n($,"LI",{});var U0e=s(yp);ole=n(U0e,"STRONG",{});var JKr=s(ole);Nvo=r(JKr,"visual_bert"),JKr.forEach(t),jvo=r(U0e," \u2014 "),kq=n(U0e,"A",{href:!0});var YKr=s(kq);Dvo=r(YKr,"VisualBertModel"),YKr.forEach(t),Gvo=r(U0e," (VisualBert model)"),U0e.forEach(t),Ovo=i($),Lp=n($,"LI",{});var J0e=s(Lp);rle=n(J0e,"STRONG",{});var KKr=s(rle);Vvo=r(KKr,"vit"),KKr.forEach(t),Xvo=r(J0e," \u2014 "),Sq=n(J0e,"A",{href:!0});var ZKr=s(Sq);zvo=r(ZKr,"ViTModel"),ZKr.forEach(t),Wvo=r(J0e," (ViT model)"),J0e.forEach(t),Qvo=i($),xp=n($,"LI",{});var Y0e=s(xp);tle=n(Y0e,"STRONG",{});var eZr=s(tle);Hvo=r(eZr,"vit_mae"),eZr.forEach(t),Uvo=r(Y0e," \u2014 "),Rq=n(Y0e,"A",{href:!0});var oZr=s(Rq);Jvo=r(oZr,"ViTMAEModel"),oZr.forEach(t),Yvo=r(Y0e," (ViTMAE model)"),Y0e.forEach(t),Kvo=i($),$p=n($,"LI",{});var K0e=s($p);ale=n(K0e,"STRONG",{});var rZr=s(ale);Zvo=r(rZr,"wav2vec2"),rZr.forEach(t),eFo=r(K0e," \u2014 "),Pq=n(K0e,"A",{href:!0});var tZr=s(Pq);oFo=r(tZr,"Wav2Vec2Model"),tZr.forEach(t),rFo=r(K0e," (Wav2Vec2 model)"),K0e.forEach(t),tFo=i($),kp=n($,"LI",{});var Z0e=s(kp);nle=n(Z0e,"STRONG",{});var aZr=s(nle);aFo=r(aZr,"wav2vec2-conformer"),aZr.forEach(t),nFo=r(Z0e," \u2014 "),Bq=n(Z0e,"A",{href:!0});var nZr=s(Bq);sFo=r(nZr,"Wav2Vec2ConformerModel"),nZr.forEach(t),lFo=r(Z0e," (Wav2Vec2-Conformer model)"),Z0e.forEach(t),iFo=i($),Sp=n($,"LI",{});var eye=s(Sp);sle=n(eye,"STRONG",{});var sZr=s(sle);dFo=r(sZr,"wavlm"),sZr.forEach(t),cFo=r(eye," \u2014 "),Iq=n(eye,"A",{href:!0});var lZr=s(Iq);mFo=r(lZr,"WavLMModel"),lZr.forEach(t),fFo=r(eye," (WavLM model)"),eye.forEach(t),gFo=i($),Rp=n($,"LI",{});var oye=s(Rp);lle=n(oye,"STRONG",{});var iZr=s(lle);hFo=r(iZr,"xglm"),iZr.forEach(t),uFo=r(oye," \u2014 "),qq=n(oye,"A",{href:!0});var dZr=s(qq);pFo=r(dZr,"XGLMModel"),dZr.forEach(t),_Fo=r(oye," (XGLM model)"),oye.forEach(t),bFo=i($),Pp=n($,"LI",{});var rye=s(Pp);ile=n(rye,"STRONG",{});var cZr=s(ile);vFo=r(cZr,"xlm"),cZr.forEach(t),FFo=r(rye," \u2014 "),Nq=n(rye,"A",{href:!0});var mZr=s(Nq);TFo=r(mZr,"XLMModel"),mZr.forEach(t),MFo=r(rye," (XLM model)"),rye.forEach(t),EFo=i($),Bp=n($,"LI",{});var tye=s(Bp);dle=n(tye,"STRONG",{});var fZr=s(dle);CFo=r(fZr,"xlm-prophetnet"),fZr.forEach(t),wFo=r(tye," \u2014 "),jq=n(tye,"A",{href:!0});var gZr=s(jq);AFo=r(gZr,"XLMProphetNetModel"),gZr.forEach(t),yFo=r(tye," (XLMProphetNet model)"),tye.forEach(t),LFo=i($),Ip=n($,"LI",{});var aye=s(Ip);cle=n(aye,"STRONG",{});var hZr=s(cle);xFo=r(hZr,"xlm-roberta"),hZr.forEach(t),$Fo=r(aye," \u2014 "),Dq=n(aye,"A",{href:!0});var uZr=s(Dq);kFo=r(uZr,"XLMRobertaModel"),uZr.forEach(t),SFo=r(aye," (XLM-RoBERTa model)"),aye.forEach(t),RFo=i($),qp=n($,"LI",{});var nye=s(qp);mle=n(nye,"STRONG",{});var pZr=s(mle);PFo=r(pZr,"xlm-roberta-xl"),pZr.forEach(t),BFo=r(nye," \u2014 "),Gq=n(nye,"A",{href:!0});var _Zr=s(Gq);IFo=r(_Zr,"XLMRobertaXLModel"),_Zr.forEach(t),qFo=r(nye," (XLM-RoBERTa-XL model)"),nye.forEach(t),NFo=i($),Np=n($,"LI",{});var sye=s(Np);fle=n(sye,"STRONG",{});var bZr=s(fle);jFo=r(bZr,"xlnet"),bZr.forEach(t),DFo=r(sye," \u2014 "),Oq=n(sye,"A",{href:!0});var vZr=s(Oq);GFo=r(vZr,"XLNetModel"),vZr.forEach(t),OFo=r(sye," (XLNet model)"),sye.forEach(t),VFo=i($),jp=n($,"LI",{});var lye=s(jp);gle=n(lye,"STRONG",{});var FZr=s(gle);XFo=r(FZr,"yolos"),FZr.forEach(t),zFo=r(lye," \u2014 "),Vq=n(lye,"A",{href:!0});var TZr=s(Vq);WFo=r(TZr,"YolosModel"),TZr.forEach(t),QFo=r(lye," (YOLOS model)"),lye.forEach(t),HFo=i($),Dp=n($,"LI",{});var iye=s(Dp);hle=n(iye,"STRONG",{});var MZr=s(hle);UFo=r(MZr,"yoso"),MZr.forEach(t),JFo=r(iye," \u2014 "),Xq=n(iye,"A",{href:!0});var EZr=s(Xq);YFo=r(EZr,"YosoModel"),EZr.forEach(t),KFo=r(iye," (YOSO model)"),iye.forEach(t),$.forEach(t),ZFo=i(oa),Gp=n(oa,"P",{});var dye=s(Gp);e1o=r(dye,"The model is set in evaluation mode by default using "),ule=n(dye,"CODE",{});var CZr=s(ule);o1o=r(CZr,"model.eval()"),CZr.forEach(t),r1o=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ple=n(dye,"CODE",{});var wZr=s(ple);t1o=r(wZr,"model.train()"),wZr.forEach(t),dye.forEach(t),a1o=i(oa),T(Op.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),DIe=i(m),yi=n(m,"H2",{class:!0});var XNe=s(yi);Vp=n(XNe,"A",{id:!0,class:!0,href:!0});var AZr=s(Vp);_le=n(AZr,"SPAN",{});var yZr=s(_le);T(Ny.$$.fragment,yZr),yZr.forEach(t),AZr.forEach(t),n1o=i(XNe),ble=n(XNe,"SPAN",{});var LZr=s(ble);s1o=r(LZr,"AutoModelForPreTraining"),LZr.forEach(t),XNe.forEach(t),GIe=i(m),xo=n(m,"DIV",{class:!0});var Gs=s(xo);T(jy.$$.fragment,Gs),l1o=i(Gs),Li=n(Gs,"P",{});var xK=s(Li);i1o=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zq=n(xK,"A",{href:!0});var xZr=s(zq);d1o=r(xZr,"from_pretrained()"),xZr.forEach(t),c1o=r(xK," class method or the "),Wq=n(xK,"A",{href:!0});var $Zr=s(Wq);m1o=r($Zr,"from_config()"),$Zr.forEach(t),f1o=r(xK,` class
method.`),xK.forEach(t),g1o=i(Gs),Dy=n(Gs,"P",{});var zNe=s(Dy);h1o=r(zNe,"This class cannot be instantiated directly using "),vle=n(zNe,"CODE",{});var kZr=s(vle);u1o=r(kZr,"__init__()"),kZr.forEach(t),p1o=r(zNe," (throws an error)."),zNe.forEach(t),_1o=i(Gs),at=n(Gs,"DIV",{class:!0});var g6=s(at);T(Gy.$$.fragment,g6),b1o=i(g6),Fle=n(g6,"P",{});var SZr=s(Fle);v1o=r(SZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SZr.forEach(t),F1o=i(g6),xi=n(g6,"P",{});var $K=s(xi);T1o=r($K,`Note:
Loading a model from its configuration file does `),Tle=n($K,"STRONG",{});var RZr=s(Tle);M1o=r(RZr,"not"),RZr.forEach(t),E1o=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=n($K,"A",{href:!0});var PZr=s(Qq);C1o=r(PZr,"from_pretrained()"),PZr.forEach(t),w1o=r($K," to load the model weights."),$K.forEach(t),A1o=i(g6),T(Xp.$$.fragment,g6),g6.forEach(t),y1o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(Oy.$$.fragment,ra),L1o=i(ra),Mle=n(ra,"P",{});var BZr=s(Mle);x1o=r(BZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BZr.forEach(t),$1o=i(ra),xa=n(ra,"P",{});var h6=s(xa);k1o=r(h6,"The model class to instantiate is selected based on the "),Ele=n(h6,"CODE",{});var IZr=s(Ele);S1o=r(IZr,"model_type"),IZr.forEach(t),R1o=r(h6,` property of the config object (either
passed as an argument or loaded from `),Cle=n(h6,"CODE",{});var qZr=s(Cle);P1o=r(qZr,"pretrained_model_name_or_path"),qZr.forEach(t),B1o=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(h6,"CODE",{});var NZr=s(wle);I1o=r(NZr,"pretrained_model_name_or_path"),NZr.forEach(t),q1o=r(h6,":"),h6.forEach(t),N1o=i(ra),G=n(ra,"UL",{});var O=s(G);zp=n(O,"LI",{});var cye=s(zp);Ale=n(cye,"STRONG",{});var jZr=s(Ale);j1o=r(jZr,"albert"),jZr.forEach(t),D1o=r(cye," \u2014 "),Hq=n(cye,"A",{href:!0});var DZr=s(Hq);G1o=r(DZr,"AlbertForPreTraining"),DZr.forEach(t),O1o=r(cye," (ALBERT model)"),cye.forEach(t),V1o=i(O),Wp=n(O,"LI",{});var mye=s(Wp);yle=n(mye,"STRONG",{});var GZr=s(yle);X1o=r(GZr,"bart"),GZr.forEach(t),z1o=r(mye," \u2014 "),Uq=n(mye,"A",{href:!0});var OZr=s(Uq);W1o=r(OZr,"BartForConditionalGeneration"),OZr.forEach(t),Q1o=r(mye," (BART model)"),mye.forEach(t),H1o=i(O),Qp=n(O,"LI",{});var fye=s(Qp);Lle=n(fye,"STRONG",{});var VZr=s(Lle);U1o=r(VZr,"bert"),VZr.forEach(t),J1o=r(fye," \u2014 "),Jq=n(fye,"A",{href:!0});var XZr=s(Jq);Y1o=r(XZr,"BertForPreTraining"),XZr.forEach(t),K1o=r(fye," (BERT model)"),fye.forEach(t),Z1o=i(O),Hp=n(O,"LI",{});var gye=s(Hp);xle=n(gye,"STRONG",{});var zZr=s(xle);eTo=r(zZr,"big_bird"),zZr.forEach(t),oTo=r(gye," \u2014 "),Yq=n(gye,"A",{href:!0});var WZr=s(Yq);rTo=r(WZr,"BigBirdForPreTraining"),WZr.forEach(t),tTo=r(gye," (BigBird model)"),gye.forEach(t),aTo=i(O),Up=n(O,"LI",{});var hye=s(Up);$le=n(hye,"STRONG",{});var QZr=s($le);nTo=r(QZr,"camembert"),QZr.forEach(t),sTo=r(hye," \u2014 "),Kq=n(hye,"A",{href:!0});var HZr=s(Kq);lTo=r(HZr,"CamembertForMaskedLM"),HZr.forEach(t),iTo=r(hye," (CamemBERT model)"),hye.forEach(t),dTo=i(O),Jp=n(O,"LI",{});var uye=s(Jp);kle=n(uye,"STRONG",{});var UZr=s(kle);cTo=r(UZr,"ctrl"),UZr.forEach(t),mTo=r(uye," \u2014 "),Zq=n(uye,"A",{href:!0});var JZr=s(Zq);fTo=r(JZr,"CTRLLMHeadModel"),JZr.forEach(t),gTo=r(uye," (CTRL model)"),uye.forEach(t),hTo=i(O),Yp=n(O,"LI",{});var pye=s(Yp);Sle=n(pye,"STRONG",{});var YZr=s(Sle);uTo=r(YZr,"data2vec-text"),YZr.forEach(t),pTo=r(pye," \u2014 "),eN=n(pye,"A",{href:!0});var KZr=s(eN);_To=r(KZr,"Data2VecTextForMaskedLM"),KZr.forEach(t),bTo=r(pye," (Data2VecText model)"),pye.forEach(t),vTo=i(O),Kp=n(O,"LI",{});var _ye=s(Kp);Rle=n(_ye,"STRONG",{});var ZZr=s(Rle);FTo=r(ZZr,"deberta"),ZZr.forEach(t),TTo=r(_ye," \u2014 "),oN=n(_ye,"A",{href:!0});var eet=s(oN);MTo=r(eet,"DebertaForMaskedLM"),eet.forEach(t),ETo=r(_ye," (DeBERTa model)"),_ye.forEach(t),CTo=i(O),Zp=n(O,"LI",{});var bye=s(Zp);Ple=n(bye,"STRONG",{});var oet=s(Ple);wTo=r(oet,"deberta-v2"),oet.forEach(t),ATo=r(bye," \u2014 "),rN=n(bye,"A",{href:!0});var ret=s(rN);yTo=r(ret,"DebertaV2ForMaskedLM"),ret.forEach(t),LTo=r(bye," (DeBERTa-v2 model)"),bye.forEach(t),xTo=i(O),e_=n(O,"LI",{});var vye=s(e_);Ble=n(vye,"STRONG",{});var tet=s(Ble);$To=r(tet,"distilbert"),tet.forEach(t),kTo=r(vye," \u2014 "),tN=n(vye,"A",{href:!0});var aet=s(tN);STo=r(aet,"DistilBertForMaskedLM"),aet.forEach(t),RTo=r(vye," (DistilBERT model)"),vye.forEach(t),PTo=i(O),o_=n(O,"LI",{});var Fye=s(o_);Ile=n(Fye,"STRONG",{});var net=s(Ile);BTo=r(net,"electra"),net.forEach(t),ITo=r(Fye," \u2014 "),aN=n(Fye,"A",{href:!0});var set=s(aN);qTo=r(set,"ElectraForPreTraining"),set.forEach(t),NTo=r(Fye," (ELECTRA model)"),Fye.forEach(t),jTo=i(O),r_=n(O,"LI",{});var Tye=s(r_);qle=n(Tye,"STRONG",{});var iet=s(qle);DTo=r(iet,"flaubert"),iet.forEach(t),GTo=r(Tye," \u2014 "),nN=n(Tye,"A",{href:!0});var det=s(nN);OTo=r(det,"FlaubertWithLMHeadModel"),det.forEach(t),VTo=r(Tye," (FlauBERT model)"),Tye.forEach(t),XTo=i(O),t_=n(O,"LI",{});var Mye=s(t_);Nle=n(Mye,"STRONG",{});var cet=s(Nle);zTo=r(cet,"flava"),cet.forEach(t),WTo=r(Mye," \u2014 "),sN=n(Mye,"A",{href:!0});var met=s(sN);QTo=r(met,"FlavaForPreTraining"),met.forEach(t),HTo=r(Mye," (Flava model)"),Mye.forEach(t),UTo=i(O),a_=n(O,"LI",{});var Eye=s(a_);jle=n(Eye,"STRONG",{});var fet=s(jle);JTo=r(fet,"fnet"),fet.forEach(t),YTo=r(Eye," \u2014 "),lN=n(Eye,"A",{href:!0});var get=s(lN);KTo=r(get,"FNetForPreTraining"),get.forEach(t),ZTo=r(Eye," (FNet model)"),Eye.forEach(t),eMo=i(O),n_=n(O,"LI",{});var Cye=s(n_);Dle=n(Cye,"STRONG",{});var het=s(Dle);oMo=r(het,"fsmt"),het.forEach(t),rMo=r(Cye," \u2014 "),iN=n(Cye,"A",{href:!0});var uet=s(iN);tMo=r(uet,"FSMTForConditionalGeneration"),uet.forEach(t),aMo=r(Cye," (FairSeq Machine-Translation model)"),Cye.forEach(t),nMo=i(O),s_=n(O,"LI",{});var wye=s(s_);Gle=n(wye,"STRONG",{});var pet=s(Gle);sMo=r(pet,"funnel"),pet.forEach(t),lMo=r(wye," \u2014 "),dN=n(wye,"A",{href:!0});var _et=s(dN);iMo=r(_et,"FunnelForPreTraining"),_et.forEach(t),dMo=r(wye," (Funnel Transformer model)"),wye.forEach(t),cMo=i(O),l_=n(O,"LI",{});var Aye=s(l_);Ole=n(Aye,"STRONG",{});var bet=s(Ole);mMo=r(bet,"gpt2"),bet.forEach(t),fMo=r(Aye," \u2014 "),cN=n(Aye,"A",{href:!0});var vet=s(cN);gMo=r(vet,"GPT2LMHeadModel"),vet.forEach(t),hMo=r(Aye," (OpenAI GPT-2 model)"),Aye.forEach(t),uMo=i(O),i_=n(O,"LI",{});var yye=s(i_);Vle=n(yye,"STRONG",{});var Fet=s(Vle);pMo=r(Fet,"ibert"),Fet.forEach(t),_Mo=r(yye," \u2014 "),mN=n(yye,"A",{href:!0});var Tet=s(mN);bMo=r(Tet,"IBertForMaskedLM"),Tet.forEach(t),vMo=r(yye," (I-BERT model)"),yye.forEach(t),FMo=i(O),d_=n(O,"LI",{});var Lye=s(d_);Xle=n(Lye,"STRONG",{});var Met=s(Xle);TMo=r(Met,"layoutlm"),Met.forEach(t),MMo=r(Lye," \u2014 "),fN=n(Lye,"A",{href:!0});var Eet=s(fN);EMo=r(Eet,"LayoutLMForMaskedLM"),Eet.forEach(t),CMo=r(Lye," (LayoutLM model)"),Lye.forEach(t),wMo=i(O),c_=n(O,"LI",{});var xye=s(c_);zle=n(xye,"STRONG",{});var Cet=s(zle);AMo=r(Cet,"longformer"),Cet.forEach(t),yMo=r(xye," \u2014 "),gN=n(xye,"A",{href:!0});var wet=s(gN);LMo=r(wet,"LongformerForMaskedLM"),wet.forEach(t),xMo=r(xye," (Longformer model)"),xye.forEach(t),$Mo=i(O),m_=n(O,"LI",{});var $ye=s(m_);Wle=n($ye,"STRONG",{});var Aet=s(Wle);kMo=r(Aet,"lxmert"),Aet.forEach(t),SMo=r($ye," \u2014 "),hN=n($ye,"A",{href:!0});var yet=s(hN);RMo=r(yet,"LxmertForPreTraining"),yet.forEach(t),PMo=r($ye," (LXMERT model)"),$ye.forEach(t),BMo=i(O),f_=n(O,"LI",{});var kye=s(f_);Qle=n(kye,"STRONG",{});var Let=s(Qle);IMo=r(Let,"megatron-bert"),Let.forEach(t),qMo=r(kye," \u2014 "),uN=n(kye,"A",{href:!0});var xet=s(uN);NMo=r(xet,"MegatronBertForPreTraining"),xet.forEach(t),jMo=r(kye," (MegatronBert model)"),kye.forEach(t),DMo=i(O),g_=n(O,"LI",{});var Sye=s(g_);Hle=n(Sye,"STRONG",{});var $et=s(Hle);GMo=r($et,"mobilebert"),$et.forEach(t),OMo=r(Sye," \u2014 "),pN=n(Sye,"A",{href:!0});var ket=s(pN);VMo=r(ket,"MobileBertForPreTraining"),ket.forEach(t),XMo=r(Sye," (MobileBERT model)"),Sye.forEach(t),zMo=i(O),h_=n(O,"LI",{});var Rye=s(h_);Ule=n(Rye,"STRONG",{});var Set=s(Ule);WMo=r(Set,"mpnet"),Set.forEach(t),QMo=r(Rye," \u2014 "),_N=n(Rye,"A",{href:!0});var Ret=s(_N);HMo=r(Ret,"MPNetForMaskedLM"),Ret.forEach(t),UMo=r(Rye," (MPNet model)"),Rye.forEach(t),JMo=i(O),u_=n(O,"LI",{});var Pye=s(u_);Jle=n(Pye,"STRONG",{});var Pet=s(Jle);YMo=r(Pet,"openai-gpt"),Pet.forEach(t),KMo=r(Pye," \u2014 "),bN=n(Pye,"A",{href:!0});var Bet=s(bN);ZMo=r(Bet,"OpenAIGPTLMHeadModel"),Bet.forEach(t),e4o=r(Pye," (OpenAI GPT model)"),Pye.forEach(t),o4o=i(O),p_=n(O,"LI",{});var Bye=s(p_);Yle=n(Bye,"STRONG",{});var Iet=s(Yle);r4o=r(Iet,"retribert"),Iet.forEach(t),t4o=r(Bye," \u2014 "),vN=n(Bye,"A",{href:!0});var qet=s(vN);a4o=r(qet,"RetriBertModel"),qet.forEach(t),n4o=r(Bye," (RetriBERT model)"),Bye.forEach(t),s4o=i(O),__=n(O,"LI",{});var Iye=s(__);Kle=n(Iye,"STRONG",{});var Net=s(Kle);l4o=r(Net,"roberta"),Net.forEach(t),i4o=r(Iye," \u2014 "),FN=n(Iye,"A",{href:!0});var jet=s(FN);d4o=r(jet,"RobertaForMaskedLM"),jet.forEach(t),c4o=r(Iye," (RoBERTa model)"),Iye.forEach(t),m4o=i(O),b_=n(O,"LI",{});var qye=s(b_);Zle=n(qye,"STRONG",{});var Det=s(Zle);f4o=r(Det,"squeezebert"),Det.forEach(t),g4o=r(qye," \u2014 "),TN=n(qye,"A",{href:!0});var Get=s(TN);h4o=r(Get,"SqueezeBertForMaskedLM"),Get.forEach(t),u4o=r(qye," (SqueezeBERT model)"),qye.forEach(t),p4o=i(O),v_=n(O,"LI",{});var Nye=s(v_);eie=n(Nye,"STRONG",{});var Oet=s(eie);_4o=r(Oet,"t5"),Oet.forEach(t),b4o=r(Nye," \u2014 "),MN=n(Nye,"A",{href:!0});var Vet=s(MN);v4o=r(Vet,"T5ForConditionalGeneration"),Vet.forEach(t),F4o=r(Nye," (T5 model)"),Nye.forEach(t),T4o=i(O),F_=n(O,"LI",{});var jye=s(F_);oie=n(jye,"STRONG",{});var Xet=s(oie);M4o=r(Xet,"tapas"),Xet.forEach(t),E4o=r(jye," \u2014 "),EN=n(jye,"A",{href:!0});var zet=s(EN);C4o=r(zet,"TapasForMaskedLM"),zet.forEach(t),w4o=r(jye," (TAPAS model)"),jye.forEach(t),A4o=i(O),T_=n(O,"LI",{});var Dye=s(T_);rie=n(Dye,"STRONG",{});var Wet=s(rie);y4o=r(Wet,"transfo-xl"),Wet.forEach(t),L4o=r(Dye," \u2014 "),CN=n(Dye,"A",{href:!0});var Qet=s(CN);x4o=r(Qet,"TransfoXLLMHeadModel"),Qet.forEach(t),$4o=r(Dye," (Transformer-XL model)"),Dye.forEach(t),k4o=i(O),M_=n(O,"LI",{});var Gye=s(M_);tie=n(Gye,"STRONG",{});var Het=s(tie);S4o=r(Het,"unispeech"),Het.forEach(t),R4o=r(Gye," \u2014 "),wN=n(Gye,"A",{href:!0});var Uet=s(wN);P4o=r(Uet,"UniSpeechForPreTraining"),Uet.forEach(t),B4o=r(Gye," (UniSpeech model)"),Gye.forEach(t),I4o=i(O),E_=n(O,"LI",{});var Oye=s(E_);aie=n(Oye,"STRONG",{});var Jet=s(aie);q4o=r(Jet,"unispeech-sat"),Jet.forEach(t),N4o=r(Oye," \u2014 "),AN=n(Oye,"A",{href:!0});var Yet=s(AN);j4o=r(Yet,"UniSpeechSatForPreTraining"),Yet.forEach(t),D4o=r(Oye," (UniSpeechSat model)"),Oye.forEach(t),G4o=i(O),C_=n(O,"LI",{});var Vye=s(C_);nie=n(Vye,"STRONG",{});var Ket=s(nie);O4o=r(Ket,"visual_bert"),Ket.forEach(t),V4o=r(Vye," \u2014 "),yN=n(Vye,"A",{href:!0});var Zet=s(yN);X4o=r(Zet,"VisualBertForPreTraining"),Zet.forEach(t),z4o=r(Vye," (VisualBert model)"),Vye.forEach(t),W4o=i(O),w_=n(O,"LI",{});var Xye=s(w_);sie=n(Xye,"STRONG",{});var eot=s(sie);Q4o=r(eot,"vit_mae"),eot.forEach(t),H4o=r(Xye," \u2014 "),LN=n(Xye,"A",{href:!0});var oot=s(LN);U4o=r(oot,"ViTMAEForPreTraining"),oot.forEach(t),J4o=r(Xye," (ViTMAE model)"),Xye.forEach(t),Y4o=i(O),A_=n(O,"LI",{});var zye=s(A_);lie=n(zye,"STRONG",{});var rot=s(lie);K4o=r(rot,"wav2vec2"),rot.forEach(t),Z4o=r(zye," \u2014 "),xN=n(zye,"A",{href:!0});var tot=s(xN);eEo=r(tot,"Wav2Vec2ForPreTraining"),tot.forEach(t),oEo=r(zye," (Wav2Vec2 model)"),zye.forEach(t),rEo=i(O),y_=n(O,"LI",{});var Wye=s(y_);iie=n(Wye,"STRONG",{});var aot=s(iie);tEo=r(aot,"wav2vec2-conformer"),aot.forEach(t),aEo=r(Wye," \u2014 "),$N=n(Wye,"A",{href:!0});var not=s($N);nEo=r(not,"Wav2Vec2ConformerForPreTraining"),not.forEach(t),sEo=r(Wye," (Wav2Vec2-Conformer model)"),Wye.forEach(t),lEo=i(O),L_=n(O,"LI",{});var Qye=s(L_);die=n(Qye,"STRONG",{});var sot=s(die);iEo=r(sot,"xlm"),sot.forEach(t),dEo=r(Qye," \u2014 "),kN=n(Qye,"A",{href:!0});var lot=s(kN);cEo=r(lot,"XLMWithLMHeadModel"),lot.forEach(t),mEo=r(Qye," (XLM model)"),Qye.forEach(t),fEo=i(O),x_=n(O,"LI",{});var Hye=s(x_);cie=n(Hye,"STRONG",{});var iot=s(cie);gEo=r(iot,"xlm-roberta"),iot.forEach(t),hEo=r(Hye," \u2014 "),SN=n(Hye,"A",{href:!0});var dot=s(SN);uEo=r(dot,"XLMRobertaForMaskedLM"),dot.forEach(t),pEo=r(Hye," (XLM-RoBERTa model)"),Hye.forEach(t),_Eo=i(O),$_=n(O,"LI",{});var Uye=s($_);mie=n(Uye,"STRONG",{});var cot=s(mie);bEo=r(cot,"xlm-roberta-xl"),cot.forEach(t),vEo=r(Uye," \u2014 "),RN=n(Uye,"A",{href:!0});var mot=s(RN);FEo=r(mot,"XLMRobertaXLForMaskedLM"),mot.forEach(t),TEo=r(Uye," (XLM-RoBERTa-XL model)"),Uye.forEach(t),MEo=i(O),k_=n(O,"LI",{});var Jye=s(k_);fie=n(Jye,"STRONG",{});var fot=s(fie);EEo=r(fot,"xlnet"),fot.forEach(t),CEo=r(Jye," \u2014 "),PN=n(Jye,"A",{href:!0});var got=s(PN);wEo=r(got,"XLNetLMHeadModel"),got.forEach(t),AEo=r(Jye," (XLNet model)"),Jye.forEach(t),O.forEach(t),yEo=i(ra),S_=n(ra,"P",{});var Yye=s(S_);LEo=r(Yye,"The model is set in evaluation mode by default using "),gie=n(Yye,"CODE",{});var hot=s(gie);xEo=r(hot,"model.eval()"),hot.forEach(t),$Eo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(Yye,"CODE",{});var uot=s(hie);kEo=r(uot,"model.train()"),uot.forEach(t),Yye.forEach(t),SEo=i(ra),T(R_.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),OIe=i(m),$i=n(m,"H2",{class:!0});var WNe=s($i);P_=n(WNe,"A",{id:!0,class:!0,href:!0});var pot=s(P_);uie=n(pot,"SPAN",{});var _ot=s(uie);T(Vy.$$.fragment,_ot),_ot.forEach(t),pot.forEach(t),REo=i(WNe),pie=n(WNe,"SPAN",{});var bot=s(pie);PEo=r(bot,"AutoModelForCausalLM"),bot.forEach(t),WNe.forEach(t),VIe=i(m),$o=n(m,"DIV",{class:!0});var Os=s($o);T(Xy.$$.fragment,Os),BEo=i(Os),ki=n(Os,"P",{});var kK=s(ki);IEo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BN=n(kK,"A",{href:!0});var vot=s(BN);qEo=r(vot,"from_pretrained()"),vot.forEach(t),NEo=r(kK," class method or the "),IN=n(kK,"A",{href:!0});var Fot=s(IN);jEo=r(Fot,"from_config()"),Fot.forEach(t),DEo=r(kK,` class
method.`),kK.forEach(t),GEo=i(Os),zy=n(Os,"P",{});var QNe=s(zy);OEo=r(QNe,"This class cannot be instantiated directly using "),_ie=n(QNe,"CODE",{});var Tot=s(_ie);VEo=r(Tot,"__init__()"),Tot.forEach(t),XEo=r(QNe," (throws an error)."),QNe.forEach(t),zEo=i(Os),nt=n(Os,"DIV",{class:!0});var u6=s(nt);T(Wy.$$.fragment,u6),WEo=i(u6),bie=n(u6,"P",{});var Mot=s(bie);QEo=r(Mot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mot.forEach(t),HEo=i(u6),Si=n(u6,"P",{});var SK=s(Si);UEo=r(SK,`Note:
Loading a model from its configuration file does `),vie=n(SK,"STRONG",{});var Eot=s(vie);JEo=r(Eot,"not"),Eot.forEach(t),YEo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=n(SK,"A",{href:!0});var Cot=s(qN);KEo=r(Cot,"from_pretrained()"),Cot.forEach(t),ZEo=r(SK," to load the model weights."),SK.forEach(t),eCo=i(u6),T(B_.$$.fragment,u6),u6.forEach(t),oCo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(Qy.$$.fragment,ta),rCo=i(ta),Fie=n(ta,"P",{});var wot=s(Fie);tCo=r(wot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wot.forEach(t),aCo=i(ta),$a=n(ta,"P",{});var p6=s($a);nCo=r(p6,"The model class to instantiate is selected based on the "),Tie=n(p6,"CODE",{});var Aot=s(Tie);sCo=r(Aot,"model_type"),Aot.forEach(t),lCo=r(p6,` property of the config object (either
passed as an argument or loaded from `),Mie=n(p6,"CODE",{});var yot=s(Mie);iCo=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),dCo=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(p6,"CODE",{});var Lot=s(Eie);cCo=r(Lot,"pretrained_model_name_or_path"),Lot.forEach(t),mCo=r(p6,":"),p6.forEach(t),fCo=i(ta),z=n(ta,"UL",{});var Q=s(z);I_=n(Q,"LI",{});var Kye=s(I_);Cie=n(Kye,"STRONG",{});var xot=s(Cie);gCo=r(xot,"bart"),xot.forEach(t),hCo=r(Kye," \u2014 "),NN=n(Kye,"A",{href:!0});var $ot=s(NN);uCo=r($ot,"BartForCausalLM"),$ot.forEach(t),pCo=r(Kye," (BART model)"),Kye.forEach(t),_Co=i(Q),q_=n(Q,"LI",{});var Zye=s(q_);wie=n(Zye,"STRONG",{});var kot=s(wie);bCo=r(kot,"bert"),kot.forEach(t),vCo=r(Zye," \u2014 "),jN=n(Zye,"A",{href:!0});var Sot=s(jN);FCo=r(Sot,"BertLMHeadModel"),Sot.forEach(t),TCo=r(Zye," (BERT model)"),Zye.forEach(t),MCo=i(Q),N_=n(Q,"LI",{});var eLe=s(N_);Aie=n(eLe,"STRONG",{});var Rot=s(Aie);ECo=r(Rot,"bert-generation"),Rot.forEach(t),CCo=r(eLe," \u2014 "),DN=n(eLe,"A",{href:!0});var Pot=s(DN);wCo=r(Pot,"BertGenerationDecoder"),Pot.forEach(t),ACo=r(eLe," (Bert Generation model)"),eLe.forEach(t),yCo=i(Q),j_=n(Q,"LI",{});var oLe=s(j_);yie=n(oLe,"STRONG",{});var Bot=s(yie);LCo=r(Bot,"big_bird"),Bot.forEach(t),xCo=r(oLe," \u2014 "),GN=n(oLe,"A",{href:!0});var Iot=s(GN);$Co=r(Iot,"BigBirdForCausalLM"),Iot.forEach(t),kCo=r(oLe," (BigBird model)"),oLe.forEach(t),SCo=i(Q),D_=n(Q,"LI",{});var rLe=s(D_);Lie=n(rLe,"STRONG",{});var qot=s(Lie);RCo=r(qot,"bigbird_pegasus"),qot.forEach(t),PCo=r(rLe," \u2014 "),ON=n(rLe,"A",{href:!0});var Not=s(ON);BCo=r(Not,"BigBirdPegasusForCausalLM"),Not.forEach(t),ICo=r(rLe," (BigBirdPegasus model)"),rLe.forEach(t),qCo=i(Q),G_=n(Q,"LI",{});var tLe=s(G_);xie=n(tLe,"STRONG",{});var jot=s(xie);NCo=r(jot,"blenderbot"),jot.forEach(t),jCo=r(tLe," \u2014 "),VN=n(tLe,"A",{href:!0});var Dot=s(VN);DCo=r(Dot,"BlenderbotForCausalLM"),Dot.forEach(t),GCo=r(tLe," (Blenderbot model)"),tLe.forEach(t),OCo=i(Q),O_=n(Q,"LI",{});var aLe=s(O_);$ie=n(aLe,"STRONG",{});var Got=s($ie);VCo=r(Got,"blenderbot-small"),Got.forEach(t),XCo=r(aLe," \u2014 "),XN=n(aLe,"A",{href:!0});var Oot=s(XN);zCo=r(Oot,"BlenderbotSmallForCausalLM"),Oot.forEach(t),WCo=r(aLe," (BlenderbotSmall model)"),aLe.forEach(t),QCo=i(Q),V_=n(Q,"LI",{});var nLe=s(V_);kie=n(nLe,"STRONG",{});var Vot=s(kie);HCo=r(Vot,"camembert"),Vot.forEach(t),UCo=r(nLe," \u2014 "),zN=n(nLe,"A",{href:!0});var Xot=s(zN);JCo=r(Xot,"CamembertForCausalLM"),Xot.forEach(t),YCo=r(nLe," (CamemBERT model)"),nLe.forEach(t),KCo=i(Q),X_=n(Q,"LI",{});var sLe=s(X_);Sie=n(sLe,"STRONG",{});var zot=s(Sie);ZCo=r(zot,"ctrl"),zot.forEach(t),e5o=r(sLe," \u2014 "),WN=n(sLe,"A",{href:!0});var Wot=s(WN);o5o=r(Wot,"CTRLLMHeadModel"),Wot.forEach(t),r5o=r(sLe," (CTRL model)"),sLe.forEach(t),t5o=i(Q),z_=n(Q,"LI",{});var lLe=s(z_);Rie=n(lLe,"STRONG",{});var Qot=s(Rie);a5o=r(Qot,"data2vec-text"),Qot.forEach(t),n5o=r(lLe," \u2014 "),QN=n(lLe,"A",{href:!0});var Hot=s(QN);s5o=r(Hot,"Data2VecTextForCausalLM"),Hot.forEach(t),l5o=r(lLe," (Data2VecText model)"),lLe.forEach(t),i5o=i(Q),W_=n(Q,"LI",{});var iLe=s(W_);Pie=n(iLe,"STRONG",{});var Uot=s(Pie);d5o=r(Uot,"electra"),Uot.forEach(t),c5o=r(iLe," \u2014 "),HN=n(iLe,"A",{href:!0});var Jot=s(HN);m5o=r(Jot,"ElectraForCausalLM"),Jot.forEach(t),f5o=r(iLe," (ELECTRA model)"),iLe.forEach(t),g5o=i(Q),Q_=n(Q,"LI",{});var dLe=s(Q_);Bie=n(dLe,"STRONG",{});var Yot=s(Bie);h5o=r(Yot,"gpt2"),Yot.forEach(t),u5o=r(dLe," \u2014 "),UN=n(dLe,"A",{href:!0});var Kot=s(UN);p5o=r(Kot,"GPT2LMHeadModel"),Kot.forEach(t),_5o=r(dLe," (OpenAI GPT-2 model)"),dLe.forEach(t),b5o=i(Q),H_=n(Q,"LI",{});var cLe=s(H_);Iie=n(cLe,"STRONG",{});var Zot=s(Iie);v5o=r(Zot,"gpt_neo"),Zot.forEach(t),F5o=r(cLe," \u2014 "),JN=n(cLe,"A",{href:!0});var ert=s(JN);T5o=r(ert,"GPTNeoForCausalLM"),ert.forEach(t),M5o=r(cLe," (GPT Neo model)"),cLe.forEach(t),E5o=i(Q),U_=n(Q,"LI",{});var mLe=s(U_);qie=n(mLe,"STRONG",{});var ort=s(qie);C5o=r(ort,"gptj"),ort.forEach(t),w5o=r(mLe," \u2014 "),YN=n(mLe,"A",{href:!0});var rrt=s(YN);A5o=r(rrt,"GPTJForCausalLM"),rrt.forEach(t),y5o=r(mLe," (GPT-J model)"),mLe.forEach(t),L5o=i(Q),J_=n(Q,"LI",{});var fLe=s(J_);Nie=n(fLe,"STRONG",{});var trt=s(Nie);x5o=r(trt,"marian"),trt.forEach(t),$5o=r(fLe," \u2014 "),KN=n(fLe,"A",{href:!0});var art=s(KN);k5o=r(art,"MarianForCausalLM"),art.forEach(t),S5o=r(fLe," (Marian model)"),fLe.forEach(t),R5o=i(Q),Y_=n(Q,"LI",{});var gLe=s(Y_);jie=n(gLe,"STRONG",{});var nrt=s(jie);P5o=r(nrt,"mbart"),nrt.forEach(t),B5o=r(gLe," \u2014 "),ZN=n(gLe,"A",{href:!0});var srt=s(ZN);I5o=r(srt,"MBartForCausalLM"),srt.forEach(t),q5o=r(gLe," (mBART model)"),gLe.forEach(t),N5o=i(Q),K_=n(Q,"LI",{});var hLe=s(K_);Die=n(hLe,"STRONG",{});var lrt=s(Die);j5o=r(lrt,"megatron-bert"),lrt.forEach(t),D5o=r(hLe," \u2014 "),ej=n(hLe,"A",{href:!0});var irt=s(ej);G5o=r(irt,"MegatronBertForCausalLM"),irt.forEach(t),O5o=r(hLe," (MegatronBert model)"),hLe.forEach(t),V5o=i(Q),Z_=n(Q,"LI",{});var uLe=s(Z_);Gie=n(uLe,"STRONG",{});var drt=s(Gie);X5o=r(drt,"openai-gpt"),drt.forEach(t),z5o=r(uLe," \u2014 "),oj=n(uLe,"A",{href:!0});var crt=s(oj);W5o=r(crt,"OpenAIGPTLMHeadModel"),crt.forEach(t),Q5o=r(uLe," (OpenAI GPT model)"),uLe.forEach(t),H5o=i(Q),eb=n(Q,"LI",{});var pLe=s(eb);Oie=n(pLe,"STRONG",{});var mrt=s(Oie);U5o=r(mrt,"opt"),mrt.forEach(t),J5o=r(pLe," \u2014 "),rj=n(pLe,"A",{href:!0});var frt=s(rj);Y5o=r(frt,"OPTForCausalLM"),frt.forEach(t),K5o=r(pLe," (OPT model)"),pLe.forEach(t),Z5o=i(Q),ob=n(Q,"LI",{});var _Le=s(ob);Vie=n(_Le,"STRONG",{});var grt=s(Vie);e3o=r(grt,"pegasus"),grt.forEach(t),o3o=r(_Le," \u2014 "),tj=n(_Le,"A",{href:!0});var hrt=s(tj);r3o=r(hrt,"PegasusForCausalLM"),hrt.forEach(t),t3o=r(_Le," (Pegasus model)"),_Le.forEach(t),a3o=i(Q),rb=n(Q,"LI",{});var bLe=s(rb);Xie=n(bLe,"STRONG",{});var urt=s(Xie);n3o=r(urt,"plbart"),urt.forEach(t),s3o=r(bLe," \u2014 "),aj=n(bLe,"A",{href:!0});var prt=s(aj);l3o=r(prt,"PLBartForCausalLM"),prt.forEach(t),i3o=r(bLe," (PLBart model)"),bLe.forEach(t),d3o=i(Q),tb=n(Q,"LI",{});var vLe=s(tb);zie=n(vLe,"STRONG",{});var _rt=s(zie);c3o=r(_rt,"prophetnet"),_rt.forEach(t),m3o=r(vLe," \u2014 "),nj=n(vLe,"A",{href:!0});var brt=s(nj);f3o=r(brt,"ProphetNetForCausalLM"),brt.forEach(t),g3o=r(vLe," (ProphetNet model)"),vLe.forEach(t),h3o=i(Q),ab=n(Q,"LI",{});var FLe=s(ab);Wie=n(FLe,"STRONG",{});var vrt=s(Wie);u3o=r(vrt,"qdqbert"),vrt.forEach(t),p3o=r(FLe," \u2014 "),sj=n(FLe,"A",{href:!0});var Frt=s(sj);_3o=r(Frt,"QDQBertLMHeadModel"),Frt.forEach(t),b3o=r(FLe," (QDQBert model)"),FLe.forEach(t),v3o=i(Q),nb=n(Q,"LI",{});var TLe=s(nb);Qie=n(TLe,"STRONG",{});var Trt=s(Qie);F3o=r(Trt,"reformer"),Trt.forEach(t),T3o=r(TLe," \u2014 "),lj=n(TLe,"A",{href:!0});var Mrt=s(lj);M3o=r(Mrt,"ReformerModelWithLMHead"),Mrt.forEach(t),E3o=r(TLe," (Reformer model)"),TLe.forEach(t),C3o=i(Q),sb=n(Q,"LI",{});var MLe=s(sb);Hie=n(MLe,"STRONG",{});var Ert=s(Hie);w3o=r(Ert,"rembert"),Ert.forEach(t),A3o=r(MLe," \u2014 "),ij=n(MLe,"A",{href:!0});var Crt=s(ij);y3o=r(Crt,"RemBertForCausalLM"),Crt.forEach(t),L3o=r(MLe," (RemBERT model)"),MLe.forEach(t),x3o=i(Q),lb=n(Q,"LI",{});var ELe=s(lb);Uie=n(ELe,"STRONG",{});var wrt=s(Uie);$3o=r(wrt,"roberta"),wrt.forEach(t),k3o=r(ELe," \u2014 "),dj=n(ELe,"A",{href:!0});var Art=s(dj);S3o=r(Art,"RobertaForCausalLM"),Art.forEach(t),R3o=r(ELe," (RoBERTa model)"),ELe.forEach(t),P3o=i(Q),ib=n(Q,"LI",{});var CLe=s(ib);Jie=n(CLe,"STRONG",{});var yrt=s(Jie);B3o=r(yrt,"roformer"),yrt.forEach(t),I3o=r(CLe," \u2014 "),cj=n(CLe,"A",{href:!0});var Lrt=s(cj);q3o=r(Lrt,"RoFormerForCausalLM"),Lrt.forEach(t),N3o=r(CLe," (RoFormer model)"),CLe.forEach(t),j3o=i(Q),db=n(Q,"LI",{});var wLe=s(db);Yie=n(wLe,"STRONG",{});var xrt=s(Yie);D3o=r(xrt,"speech_to_text_2"),xrt.forEach(t),G3o=r(wLe," \u2014 "),mj=n(wLe,"A",{href:!0});var $rt=s(mj);O3o=r($rt,"Speech2Text2ForCausalLM"),$rt.forEach(t),V3o=r(wLe," (Speech2Text2 model)"),wLe.forEach(t),X3o=i(Q),cb=n(Q,"LI",{});var ALe=s(cb);Kie=n(ALe,"STRONG",{});var krt=s(Kie);z3o=r(krt,"transfo-xl"),krt.forEach(t),W3o=r(ALe," \u2014 "),fj=n(ALe,"A",{href:!0});var Srt=s(fj);Q3o=r(Srt,"TransfoXLLMHeadModel"),Srt.forEach(t),H3o=r(ALe," (Transformer-XL model)"),ALe.forEach(t),U3o=i(Q),mb=n(Q,"LI",{});var yLe=s(mb);Zie=n(yLe,"STRONG",{});var Rrt=s(Zie);J3o=r(Rrt,"trocr"),Rrt.forEach(t),Y3o=r(yLe," \u2014 "),gj=n(yLe,"A",{href:!0});var Prt=s(gj);K3o=r(Prt,"TrOCRForCausalLM"),Prt.forEach(t),Z3o=r(yLe," (TrOCR model)"),yLe.forEach(t),ewo=i(Q),fb=n(Q,"LI",{});var LLe=s(fb);ede=n(LLe,"STRONG",{});var Brt=s(ede);owo=r(Brt,"xglm"),Brt.forEach(t),rwo=r(LLe," \u2014 "),hj=n(LLe,"A",{href:!0});var Irt=s(hj);two=r(Irt,"XGLMForCausalLM"),Irt.forEach(t),awo=r(LLe," (XGLM model)"),LLe.forEach(t),nwo=i(Q),gb=n(Q,"LI",{});var xLe=s(gb);ode=n(xLe,"STRONG",{});var qrt=s(ode);swo=r(qrt,"xlm"),qrt.forEach(t),lwo=r(xLe," \u2014 "),uj=n(xLe,"A",{href:!0});var Nrt=s(uj);iwo=r(Nrt,"XLMWithLMHeadModel"),Nrt.forEach(t),dwo=r(xLe," (XLM model)"),xLe.forEach(t),cwo=i(Q),hb=n(Q,"LI",{});var $Le=s(hb);rde=n($Le,"STRONG",{});var jrt=s(rde);mwo=r(jrt,"xlm-prophetnet"),jrt.forEach(t),fwo=r($Le," \u2014 "),pj=n($Le,"A",{href:!0});var Drt=s(pj);gwo=r(Drt,"XLMProphetNetForCausalLM"),Drt.forEach(t),hwo=r($Le," (XLMProphetNet model)"),$Le.forEach(t),uwo=i(Q),ub=n(Q,"LI",{});var kLe=s(ub);tde=n(kLe,"STRONG",{});var Grt=s(tde);pwo=r(Grt,"xlm-roberta"),Grt.forEach(t),_wo=r(kLe," \u2014 "),_j=n(kLe,"A",{href:!0});var Ort=s(_j);bwo=r(Ort,"XLMRobertaForCausalLM"),Ort.forEach(t),vwo=r(kLe," (XLM-RoBERTa model)"),kLe.forEach(t),Fwo=i(Q),pb=n(Q,"LI",{});var SLe=s(pb);ade=n(SLe,"STRONG",{});var Vrt=s(ade);Two=r(Vrt,"xlm-roberta-xl"),Vrt.forEach(t),Mwo=r(SLe," \u2014 "),bj=n(SLe,"A",{href:!0});var Xrt=s(bj);Ewo=r(Xrt,"XLMRobertaXLForCausalLM"),Xrt.forEach(t),Cwo=r(SLe," (XLM-RoBERTa-XL model)"),SLe.forEach(t),wwo=i(Q),_b=n(Q,"LI",{});var RLe=s(_b);nde=n(RLe,"STRONG",{});var zrt=s(nde);Awo=r(zrt,"xlnet"),zrt.forEach(t),ywo=r(RLe," \u2014 "),vj=n(RLe,"A",{href:!0});var Wrt=s(vj);Lwo=r(Wrt,"XLNetLMHeadModel"),Wrt.forEach(t),xwo=r(RLe," (XLNet model)"),RLe.forEach(t),Q.forEach(t),$wo=i(ta),bb=n(ta,"P",{});var PLe=s(bb);kwo=r(PLe,"The model is set in evaluation mode by default using "),sde=n(PLe,"CODE",{});var Qrt=s(sde);Swo=r(Qrt,"model.eval()"),Qrt.forEach(t),Rwo=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=n(PLe,"CODE",{});var Hrt=s(lde);Pwo=r(Hrt,"model.train()"),Hrt.forEach(t),PLe.forEach(t),Bwo=i(ta),T(vb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),XIe=i(m),Ri=n(m,"H2",{class:!0});var HNe=s(Ri);Fb=n(HNe,"A",{id:!0,class:!0,href:!0});var Urt=s(Fb);ide=n(Urt,"SPAN",{});var Jrt=s(ide);T(Hy.$$.fragment,Jrt),Jrt.forEach(t),Urt.forEach(t),Iwo=i(HNe),dde=n(HNe,"SPAN",{});var Yrt=s(dde);qwo=r(Yrt,"AutoModelForMaskedLM"),Yrt.forEach(t),HNe.forEach(t),zIe=i(m),ko=n(m,"DIV",{class:!0});var Vs=s(ko);T(Uy.$$.fragment,Vs),Nwo=i(Vs),Pi=n(Vs,"P",{});var RK=s(Pi);jwo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fj=n(RK,"A",{href:!0});var Krt=s(Fj);Dwo=r(Krt,"from_pretrained()"),Krt.forEach(t),Gwo=r(RK," class method or the "),Tj=n(RK,"A",{href:!0});var Zrt=s(Tj);Owo=r(Zrt,"from_config()"),Zrt.forEach(t),Vwo=r(RK,` class
method.`),RK.forEach(t),Xwo=i(Vs),Jy=n(Vs,"P",{});var UNe=s(Jy);zwo=r(UNe,"This class cannot be instantiated directly using "),cde=n(UNe,"CODE",{});var ett=s(cde);Wwo=r(ett,"__init__()"),ett.forEach(t),Qwo=r(UNe," (throws an error)."),UNe.forEach(t),Hwo=i(Vs),st=n(Vs,"DIV",{class:!0});var _6=s(st);T(Yy.$$.fragment,_6),Uwo=i(_6),mde=n(_6,"P",{});var ott=s(mde);Jwo=r(ott,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ott.forEach(t),Ywo=i(_6),Bi=n(_6,"P",{});var PK=s(Bi);Kwo=r(PK,`Note:
Loading a model from its configuration file does `),fde=n(PK,"STRONG",{});var rtt=s(fde);Zwo=r(rtt,"not"),rtt.forEach(t),eAo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(PK,"A",{href:!0});var ttt=s(Mj);oAo=r(ttt,"from_pretrained()"),ttt.forEach(t),rAo=r(PK," to load the model weights."),PK.forEach(t),tAo=i(_6),T(Tb.$$.fragment,_6),_6.forEach(t),aAo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(Ky.$$.fragment,aa),nAo=i(aa),gde=n(aa,"P",{});var att=s(gde);sAo=r(att,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),att.forEach(t),lAo=i(aa),ka=n(aa,"P",{});var b6=s(ka);iAo=r(b6,"The model class to instantiate is selected based on the "),hde=n(b6,"CODE",{});var ntt=s(hde);dAo=r(ntt,"model_type"),ntt.forEach(t),cAo=r(b6,` property of the config object (either
passed as an argument or loaded from `),ude=n(b6,"CODE",{});var stt=s(ude);mAo=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),fAo=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(b6,"CODE",{});var ltt=s(pde);gAo=r(ltt,"pretrained_model_name_or_path"),ltt.forEach(t),hAo=r(b6,":"),b6.forEach(t),uAo=i(aa),W=n(aa,"UL",{});var H=s(W);Mb=n(H,"LI",{});var BLe=s(Mb);_de=n(BLe,"STRONG",{});var itt=s(_de);pAo=r(itt,"albert"),itt.forEach(t),_Ao=r(BLe," \u2014 "),Ej=n(BLe,"A",{href:!0});var dtt=s(Ej);bAo=r(dtt,"AlbertForMaskedLM"),dtt.forEach(t),vAo=r(BLe," (ALBERT model)"),BLe.forEach(t),FAo=i(H),Eb=n(H,"LI",{});var ILe=s(Eb);bde=n(ILe,"STRONG",{});var ctt=s(bde);TAo=r(ctt,"bart"),ctt.forEach(t),MAo=r(ILe," \u2014 "),Cj=n(ILe,"A",{href:!0});var mtt=s(Cj);EAo=r(mtt,"BartForConditionalGeneration"),mtt.forEach(t),CAo=r(ILe," (BART model)"),ILe.forEach(t),wAo=i(H),Cb=n(H,"LI",{});var qLe=s(Cb);vde=n(qLe,"STRONG",{});var ftt=s(vde);AAo=r(ftt,"bert"),ftt.forEach(t),yAo=r(qLe," \u2014 "),wj=n(qLe,"A",{href:!0});var gtt=s(wj);LAo=r(gtt,"BertForMaskedLM"),gtt.forEach(t),xAo=r(qLe," (BERT model)"),qLe.forEach(t),$Ao=i(H),wb=n(H,"LI",{});var NLe=s(wb);Fde=n(NLe,"STRONG",{});var htt=s(Fde);kAo=r(htt,"big_bird"),htt.forEach(t),SAo=r(NLe," \u2014 "),Aj=n(NLe,"A",{href:!0});var utt=s(Aj);RAo=r(utt,"BigBirdForMaskedLM"),utt.forEach(t),PAo=r(NLe," (BigBird model)"),NLe.forEach(t),BAo=i(H),Ab=n(H,"LI",{});var jLe=s(Ab);Tde=n(jLe,"STRONG",{});var ptt=s(Tde);IAo=r(ptt,"camembert"),ptt.forEach(t),qAo=r(jLe," \u2014 "),yj=n(jLe,"A",{href:!0});var _tt=s(yj);NAo=r(_tt,"CamembertForMaskedLM"),_tt.forEach(t),jAo=r(jLe," (CamemBERT model)"),jLe.forEach(t),DAo=i(H),yb=n(H,"LI",{});var DLe=s(yb);Mde=n(DLe,"STRONG",{});var btt=s(Mde);GAo=r(btt,"convbert"),btt.forEach(t),OAo=r(DLe," \u2014 "),Lj=n(DLe,"A",{href:!0});var vtt=s(Lj);VAo=r(vtt,"ConvBertForMaskedLM"),vtt.forEach(t),XAo=r(DLe," (ConvBERT model)"),DLe.forEach(t),zAo=i(H),Lb=n(H,"LI",{});var GLe=s(Lb);Ede=n(GLe,"STRONG",{});var Ftt=s(Ede);WAo=r(Ftt,"data2vec-text"),Ftt.forEach(t),QAo=r(GLe," \u2014 "),xj=n(GLe,"A",{href:!0});var Ttt=s(xj);HAo=r(Ttt,"Data2VecTextForMaskedLM"),Ttt.forEach(t),UAo=r(GLe," (Data2VecText model)"),GLe.forEach(t),JAo=i(H),xb=n(H,"LI",{});var OLe=s(xb);Cde=n(OLe,"STRONG",{});var Mtt=s(Cde);YAo=r(Mtt,"deberta"),Mtt.forEach(t),KAo=r(OLe," \u2014 "),$j=n(OLe,"A",{href:!0});var Ett=s($j);ZAo=r(Ett,"DebertaForMaskedLM"),Ett.forEach(t),e6o=r(OLe," (DeBERTa model)"),OLe.forEach(t),o6o=i(H),$b=n(H,"LI",{});var VLe=s($b);wde=n(VLe,"STRONG",{});var Ctt=s(wde);r6o=r(Ctt,"deberta-v2"),Ctt.forEach(t),t6o=r(VLe," \u2014 "),kj=n(VLe,"A",{href:!0});var wtt=s(kj);a6o=r(wtt,"DebertaV2ForMaskedLM"),wtt.forEach(t),n6o=r(VLe," (DeBERTa-v2 model)"),VLe.forEach(t),s6o=i(H),kb=n(H,"LI",{});var XLe=s(kb);Ade=n(XLe,"STRONG",{});var Att=s(Ade);l6o=r(Att,"distilbert"),Att.forEach(t),i6o=r(XLe," \u2014 "),Sj=n(XLe,"A",{href:!0});var ytt=s(Sj);d6o=r(ytt,"DistilBertForMaskedLM"),ytt.forEach(t),c6o=r(XLe," (DistilBERT model)"),XLe.forEach(t),m6o=i(H),Sb=n(H,"LI",{});var zLe=s(Sb);yde=n(zLe,"STRONG",{});var Ltt=s(yde);f6o=r(Ltt,"electra"),Ltt.forEach(t),g6o=r(zLe," \u2014 "),Rj=n(zLe,"A",{href:!0});var xtt=s(Rj);h6o=r(xtt,"ElectraForMaskedLM"),xtt.forEach(t),u6o=r(zLe," (ELECTRA model)"),zLe.forEach(t),p6o=i(H),Rb=n(H,"LI",{});var WLe=s(Rb);Lde=n(WLe,"STRONG",{});var $tt=s(Lde);_6o=r($tt,"flaubert"),$tt.forEach(t),b6o=r(WLe," \u2014 "),Pj=n(WLe,"A",{href:!0});var ktt=s(Pj);v6o=r(ktt,"FlaubertWithLMHeadModel"),ktt.forEach(t),F6o=r(WLe," (FlauBERT model)"),WLe.forEach(t),T6o=i(H),Pb=n(H,"LI",{});var QLe=s(Pb);xde=n(QLe,"STRONG",{});var Stt=s(xde);M6o=r(Stt,"fnet"),Stt.forEach(t),E6o=r(QLe," \u2014 "),Bj=n(QLe,"A",{href:!0});var Rtt=s(Bj);C6o=r(Rtt,"FNetForMaskedLM"),Rtt.forEach(t),w6o=r(QLe," (FNet model)"),QLe.forEach(t),A6o=i(H),Bb=n(H,"LI",{});var HLe=s(Bb);$de=n(HLe,"STRONG",{});var Ptt=s($de);y6o=r(Ptt,"funnel"),Ptt.forEach(t),L6o=r(HLe," \u2014 "),Ij=n(HLe,"A",{href:!0});var Btt=s(Ij);x6o=r(Btt,"FunnelForMaskedLM"),Btt.forEach(t),$6o=r(HLe," (Funnel Transformer model)"),HLe.forEach(t),k6o=i(H),Ib=n(H,"LI",{});var ULe=s(Ib);kde=n(ULe,"STRONG",{});var Itt=s(kde);S6o=r(Itt,"ibert"),Itt.forEach(t),R6o=r(ULe," \u2014 "),qj=n(ULe,"A",{href:!0});var qtt=s(qj);P6o=r(qtt,"IBertForMaskedLM"),qtt.forEach(t),B6o=r(ULe," (I-BERT model)"),ULe.forEach(t),I6o=i(H),qb=n(H,"LI",{});var JLe=s(qb);Sde=n(JLe,"STRONG",{});var Ntt=s(Sde);q6o=r(Ntt,"layoutlm"),Ntt.forEach(t),N6o=r(JLe," \u2014 "),Nj=n(JLe,"A",{href:!0});var jtt=s(Nj);j6o=r(jtt,"LayoutLMForMaskedLM"),jtt.forEach(t),D6o=r(JLe," (LayoutLM model)"),JLe.forEach(t),G6o=i(H),Nb=n(H,"LI",{});var YLe=s(Nb);Rde=n(YLe,"STRONG",{});var Dtt=s(Rde);O6o=r(Dtt,"longformer"),Dtt.forEach(t),V6o=r(YLe," \u2014 "),jj=n(YLe,"A",{href:!0});var Gtt=s(jj);X6o=r(Gtt,"LongformerForMaskedLM"),Gtt.forEach(t),z6o=r(YLe," (Longformer model)"),YLe.forEach(t),W6o=i(H),jb=n(H,"LI",{});var KLe=s(jb);Pde=n(KLe,"STRONG",{});var Ott=s(Pde);Q6o=r(Ott,"mbart"),Ott.forEach(t),H6o=r(KLe," \u2014 "),Dj=n(KLe,"A",{href:!0});var Vtt=s(Dj);U6o=r(Vtt,"MBartForConditionalGeneration"),Vtt.forEach(t),J6o=r(KLe," (mBART model)"),KLe.forEach(t),Y6o=i(H),Db=n(H,"LI",{});var ZLe=s(Db);Bde=n(ZLe,"STRONG",{});var Xtt=s(Bde);K6o=r(Xtt,"megatron-bert"),Xtt.forEach(t),Z6o=r(ZLe," \u2014 "),Gj=n(ZLe,"A",{href:!0});var ztt=s(Gj);e0o=r(ztt,"MegatronBertForMaskedLM"),ztt.forEach(t),o0o=r(ZLe," (MegatronBert model)"),ZLe.forEach(t),r0o=i(H),Gb=n(H,"LI",{});var e8e=s(Gb);Ide=n(e8e,"STRONG",{});var Wtt=s(Ide);t0o=r(Wtt,"mobilebert"),Wtt.forEach(t),a0o=r(e8e," \u2014 "),Oj=n(e8e,"A",{href:!0});var Qtt=s(Oj);n0o=r(Qtt,"MobileBertForMaskedLM"),Qtt.forEach(t),s0o=r(e8e," (MobileBERT model)"),e8e.forEach(t),l0o=i(H),Ob=n(H,"LI",{});var o8e=s(Ob);qde=n(o8e,"STRONG",{});var Htt=s(qde);i0o=r(Htt,"mpnet"),Htt.forEach(t),d0o=r(o8e," \u2014 "),Vj=n(o8e,"A",{href:!0});var Utt=s(Vj);c0o=r(Utt,"MPNetForMaskedLM"),Utt.forEach(t),m0o=r(o8e," (MPNet model)"),o8e.forEach(t),f0o=i(H),Vb=n(H,"LI",{});var r8e=s(Vb);Nde=n(r8e,"STRONG",{});var Jtt=s(Nde);g0o=r(Jtt,"nystromformer"),Jtt.forEach(t),h0o=r(r8e," \u2014 "),Xj=n(r8e,"A",{href:!0});var Ytt=s(Xj);u0o=r(Ytt,"NystromformerForMaskedLM"),Ytt.forEach(t),p0o=r(r8e," (Nystromformer model)"),r8e.forEach(t),_0o=i(H),Xb=n(H,"LI",{});var t8e=s(Xb);jde=n(t8e,"STRONG",{});var Ktt=s(jde);b0o=r(Ktt,"perceiver"),Ktt.forEach(t),v0o=r(t8e," \u2014 "),zj=n(t8e,"A",{href:!0});var Ztt=s(zj);F0o=r(Ztt,"PerceiverForMaskedLM"),Ztt.forEach(t),T0o=r(t8e," (Perceiver model)"),t8e.forEach(t),M0o=i(H),zb=n(H,"LI",{});var a8e=s(zb);Dde=n(a8e,"STRONG",{});var eat=s(Dde);E0o=r(eat,"qdqbert"),eat.forEach(t),C0o=r(a8e," \u2014 "),Wj=n(a8e,"A",{href:!0});var oat=s(Wj);w0o=r(oat,"QDQBertForMaskedLM"),oat.forEach(t),A0o=r(a8e," (QDQBert model)"),a8e.forEach(t),y0o=i(H),Wb=n(H,"LI",{});var n8e=s(Wb);Gde=n(n8e,"STRONG",{});var rat=s(Gde);L0o=r(rat,"reformer"),rat.forEach(t),x0o=r(n8e," \u2014 "),Qj=n(n8e,"A",{href:!0});var tat=s(Qj);$0o=r(tat,"ReformerForMaskedLM"),tat.forEach(t),k0o=r(n8e," (Reformer model)"),n8e.forEach(t),S0o=i(H),Qb=n(H,"LI",{});var s8e=s(Qb);Ode=n(s8e,"STRONG",{});var aat=s(Ode);R0o=r(aat,"rembert"),aat.forEach(t),P0o=r(s8e," \u2014 "),Hj=n(s8e,"A",{href:!0});var nat=s(Hj);B0o=r(nat,"RemBertForMaskedLM"),nat.forEach(t),I0o=r(s8e," (RemBERT model)"),s8e.forEach(t),q0o=i(H),Hb=n(H,"LI",{});var l8e=s(Hb);Vde=n(l8e,"STRONG",{});var sat=s(Vde);N0o=r(sat,"roberta"),sat.forEach(t),j0o=r(l8e," \u2014 "),Uj=n(l8e,"A",{href:!0});var lat=s(Uj);D0o=r(lat,"RobertaForMaskedLM"),lat.forEach(t),G0o=r(l8e," (RoBERTa model)"),l8e.forEach(t),O0o=i(H),Ub=n(H,"LI",{});var i8e=s(Ub);Xde=n(i8e,"STRONG",{});var iat=s(Xde);V0o=r(iat,"roformer"),iat.forEach(t),X0o=r(i8e," \u2014 "),Jj=n(i8e,"A",{href:!0});var dat=s(Jj);z0o=r(dat,"RoFormerForMaskedLM"),dat.forEach(t),W0o=r(i8e," (RoFormer model)"),i8e.forEach(t),Q0o=i(H),Jb=n(H,"LI",{});var d8e=s(Jb);zde=n(d8e,"STRONG",{});var cat=s(zde);H0o=r(cat,"squeezebert"),cat.forEach(t),U0o=r(d8e," \u2014 "),Yj=n(d8e,"A",{href:!0});var mat=s(Yj);J0o=r(mat,"SqueezeBertForMaskedLM"),mat.forEach(t),Y0o=r(d8e," (SqueezeBERT model)"),d8e.forEach(t),K0o=i(H),Yb=n(H,"LI",{});var c8e=s(Yb);Wde=n(c8e,"STRONG",{});var fat=s(Wde);Z0o=r(fat,"tapas"),fat.forEach(t),eyo=r(c8e," \u2014 "),Kj=n(c8e,"A",{href:!0});var gat=s(Kj);oyo=r(gat,"TapasForMaskedLM"),gat.forEach(t),ryo=r(c8e," (TAPAS model)"),c8e.forEach(t),tyo=i(H),Kb=n(H,"LI",{});var m8e=s(Kb);Qde=n(m8e,"STRONG",{});var hat=s(Qde);ayo=r(hat,"wav2vec2"),hat.forEach(t),nyo=r(m8e," \u2014 "),Hde=n(m8e,"CODE",{});var uat=s(Hde);syo=r(uat,"Wav2Vec2ForMaskedLM"),uat.forEach(t),lyo=r(m8e," (Wav2Vec2 model)"),m8e.forEach(t),iyo=i(H),Zb=n(H,"LI",{});var f8e=s(Zb);Ude=n(f8e,"STRONG",{});var pat=s(Ude);dyo=r(pat,"xlm"),pat.forEach(t),cyo=r(f8e," \u2014 "),Zj=n(f8e,"A",{href:!0});var _at=s(Zj);myo=r(_at,"XLMWithLMHeadModel"),_at.forEach(t),fyo=r(f8e," (XLM model)"),f8e.forEach(t),gyo=i(H),e2=n(H,"LI",{});var g8e=s(e2);Jde=n(g8e,"STRONG",{});var bat=s(Jde);hyo=r(bat,"xlm-roberta"),bat.forEach(t),uyo=r(g8e," \u2014 "),eD=n(g8e,"A",{href:!0});var vat=s(eD);pyo=r(vat,"XLMRobertaForMaskedLM"),vat.forEach(t),_yo=r(g8e," (XLM-RoBERTa model)"),g8e.forEach(t),byo=i(H),o2=n(H,"LI",{});var h8e=s(o2);Yde=n(h8e,"STRONG",{});var Fat=s(Yde);vyo=r(Fat,"xlm-roberta-xl"),Fat.forEach(t),Fyo=r(h8e," \u2014 "),oD=n(h8e,"A",{href:!0});var Tat=s(oD);Tyo=r(Tat,"XLMRobertaXLForMaskedLM"),Tat.forEach(t),Myo=r(h8e," (XLM-RoBERTa-XL model)"),h8e.forEach(t),Eyo=i(H),r2=n(H,"LI",{});var u8e=s(r2);Kde=n(u8e,"STRONG",{});var Mat=s(Kde);Cyo=r(Mat,"yoso"),Mat.forEach(t),wyo=r(u8e," \u2014 "),rD=n(u8e,"A",{href:!0});var Eat=s(rD);Ayo=r(Eat,"YosoForMaskedLM"),Eat.forEach(t),yyo=r(u8e," (YOSO model)"),u8e.forEach(t),H.forEach(t),Lyo=i(aa),t2=n(aa,"P",{});var p8e=s(t2);xyo=r(p8e,"The model is set in evaluation mode by default using "),Zde=n(p8e,"CODE",{});var Cat=s(Zde);$yo=r(Cat,"model.eval()"),Cat.forEach(t),kyo=r(p8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(p8e,"CODE",{});var wat=s(ece);Syo=r(wat,"model.train()"),wat.forEach(t),p8e.forEach(t),Ryo=i(aa),T(a2.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),WIe=i(m),Ii=n(m,"H2",{class:!0});var JNe=s(Ii);n2=n(JNe,"A",{id:!0,class:!0,href:!0});var Aat=s(n2);oce=n(Aat,"SPAN",{});var yat=s(oce);T(Zy.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),Pyo=i(JNe),rce=n(JNe,"SPAN",{});var Lat=s(rce);Byo=r(Lat,"AutoModelForSeq2SeqLM"),Lat.forEach(t),JNe.forEach(t),QIe=i(m),So=n(m,"DIV",{class:!0});var Xs=s(So);T(eL.$$.fragment,Xs),Iyo=i(Xs),qi=n(Xs,"P",{});var BK=s(qi);qyo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tD=n(BK,"A",{href:!0});var xat=s(tD);Nyo=r(xat,"from_pretrained()"),xat.forEach(t),jyo=r(BK," class method or the "),aD=n(BK,"A",{href:!0});var $at=s(aD);Dyo=r($at,"from_config()"),$at.forEach(t),Gyo=r(BK,` class
method.`),BK.forEach(t),Oyo=i(Xs),oL=n(Xs,"P",{});var YNe=s(oL);Vyo=r(YNe,"This class cannot be instantiated directly using "),tce=n(YNe,"CODE",{});var kat=s(tce);Xyo=r(kat,"__init__()"),kat.forEach(t),zyo=r(YNe," (throws an error)."),YNe.forEach(t),Wyo=i(Xs),lt=n(Xs,"DIV",{class:!0});var v6=s(lt);T(rL.$$.fragment,v6),Qyo=i(v6),ace=n(v6,"P",{});var Sat=s(ace);Hyo=r(Sat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sat.forEach(t),Uyo=i(v6),Ni=n(v6,"P",{});var IK=s(Ni);Jyo=r(IK,`Note:
Loading a model from its configuration file does `),nce=n(IK,"STRONG",{});var Rat=s(nce);Yyo=r(Rat,"not"),Rat.forEach(t),Kyo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=n(IK,"A",{href:!0});var Pat=s(nD);Zyo=r(Pat,"from_pretrained()"),Pat.forEach(t),eLo=r(IK," to load the model weights."),IK.forEach(t),oLo=i(v6),T(s2.$$.fragment,v6),v6.forEach(t),rLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(tL.$$.fragment,na),tLo=i(na),sce=n(na,"P",{});var Bat=s(sce);aLo=r(Bat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bat.forEach(t),nLo=i(na),Sa=n(na,"P",{});var F6=s(Sa);sLo=r(F6,"The model class to instantiate is selected based on the "),lce=n(F6,"CODE",{});var Iat=s(lce);lLo=r(Iat,"model_type"),Iat.forEach(t),iLo=r(F6,` property of the config object (either
passed as an argument or loaded from `),ice=n(F6,"CODE",{});var qat=s(ice);dLo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),cLo=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(F6,"CODE",{});var Nat=s(dce);mLo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),fLo=r(F6,":"),F6.forEach(t),gLo=i(na),pe=n(na,"UL",{});var ve=s(pe);l2=n(ve,"LI",{});var _8e=s(l2);cce=n(_8e,"STRONG",{});var jat=s(cce);hLo=r(jat,"bart"),jat.forEach(t),uLo=r(_8e," \u2014 "),sD=n(_8e,"A",{href:!0});var Dat=s(sD);pLo=r(Dat,"BartForConditionalGeneration"),Dat.forEach(t),_Lo=r(_8e," (BART model)"),_8e.forEach(t),bLo=i(ve),i2=n(ve,"LI",{});var b8e=s(i2);mce=n(b8e,"STRONG",{});var Gat=s(mce);vLo=r(Gat,"bigbird_pegasus"),Gat.forEach(t),FLo=r(b8e," \u2014 "),lD=n(b8e,"A",{href:!0});var Oat=s(lD);TLo=r(Oat,"BigBirdPegasusForConditionalGeneration"),Oat.forEach(t),MLo=r(b8e," (BigBirdPegasus model)"),b8e.forEach(t),ELo=i(ve),d2=n(ve,"LI",{});var v8e=s(d2);fce=n(v8e,"STRONG",{});var Vat=s(fce);CLo=r(Vat,"blenderbot"),Vat.forEach(t),wLo=r(v8e," \u2014 "),iD=n(v8e,"A",{href:!0});var Xat=s(iD);ALo=r(Xat,"BlenderbotForConditionalGeneration"),Xat.forEach(t),yLo=r(v8e," (Blenderbot model)"),v8e.forEach(t),LLo=i(ve),c2=n(ve,"LI",{});var F8e=s(c2);gce=n(F8e,"STRONG",{});var zat=s(gce);xLo=r(zat,"blenderbot-small"),zat.forEach(t),$Lo=r(F8e," \u2014 "),dD=n(F8e,"A",{href:!0});var Wat=s(dD);kLo=r(Wat,"BlenderbotSmallForConditionalGeneration"),Wat.forEach(t),SLo=r(F8e," (BlenderbotSmall model)"),F8e.forEach(t),RLo=i(ve),m2=n(ve,"LI",{});var T8e=s(m2);hce=n(T8e,"STRONG",{});var Qat=s(hce);PLo=r(Qat,"encoder-decoder"),Qat.forEach(t),BLo=r(T8e," \u2014 "),cD=n(T8e,"A",{href:!0});var Hat=s(cD);ILo=r(Hat,"EncoderDecoderModel"),Hat.forEach(t),qLo=r(T8e," (Encoder decoder model)"),T8e.forEach(t),NLo=i(ve),f2=n(ve,"LI",{});var M8e=s(f2);uce=n(M8e,"STRONG",{});var Uat=s(uce);jLo=r(Uat,"fsmt"),Uat.forEach(t),DLo=r(M8e," \u2014 "),mD=n(M8e,"A",{href:!0});var Jat=s(mD);GLo=r(Jat,"FSMTForConditionalGeneration"),Jat.forEach(t),OLo=r(M8e," (FairSeq Machine-Translation model)"),M8e.forEach(t),VLo=i(ve),g2=n(ve,"LI",{});var E8e=s(g2);pce=n(E8e,"STRONG",{});var Yat=s(pce);XLo=r(Yat,"led"),Yat.forEach(t),zLo=r(E8e," \u2014 "),fD=n(E8e,"A",{href:!0});var Kat=s(fD);WLo=r(Kat,"LEDForConditionalGeneration"),Kat.forEach(t),QLo=r(E8e," (LED model)"),E8e.forEach(t),HLo=i(ve),h2=n(ve,"LI",{});var C8e=s(h2);_ce=n(C8e,"STRONG",{});var Zat=s(_ce);ULo=r(Zat,"m2m_100"),Zat.forEach(t),JLo=r(C8e," \u2014 "),gD=n(C8e,"A",{href:!0});var ent=s(gD);YLo=r(ent,"M2M100ForConditionalGeneration"),ent.forEach(t),KLo=r(C8e," (M2M100 model)"),C8e.forEach(t),ZLo=i(ve),u2=n(ve,"LI",{});var w8e=s(u2);bce=n(w8e,"STRONG",{});var ont=s(bce);e8o=r(ont,"marian"),ont.forEach(t),o8o=r(w8e," \u2014 "),hD=n(w8e,"A",{href:!0});var rnt=s(hD);r8o=r(rnt,"MarianMTModel"),rnt.forEach(t),t8o=r(w8e," (Marian model)"),w8e.forEach(t),a8o=i(ve),p2=n(ve,"LI",{});var A8e=s(p2);vce=n(A8e,"STRONG",{});var tnt=s(vce);n8o=r(tnt,"mbart"),tnt.forEach(t),s8o=r(A8e," \u2014 "),uD=n(A8e,"A",{href:!0});var ant=s(uD);l8o=r(ant,"MBartForConditionalGeneration"),ant.forEach(t),i8o=r(A8e," (mBART model)"),A8e.forEach(t),d8o=i(ve),_2=n(ve,"LI",{});var y8e=s(_2);Fce=n(y8e,"STRONG",{});var nnt=s(Fce);c8o=r(nnt,"mt5"),nnt.forEach(t),m8o=r(y8e," \u2014 "),pD=n(y8e,"A",{href:!0});var snt=s(pD);f8o=r(snt,"MT5ForConditionalGeneration"),snt.forEach(t),g8o=r(y8e," (mT5 model)"),y8e.forEach(t),h8o=i(ve),b2=n(ve,"LI",{});var L8e=s(b2);Tce=n(L8e,"STRONG",{});var lnt=s(Tce);u8o=r(lnt,"pegasus"),lnt.forEach(t),p8o=r(L8e," \u2014 "),_D=n(L8e,"A",{href:!0});var int=s(_D);_8o=r(int,"PegasusForConditionalGeneration"),int.forEach(t),b8o=r(L8e," (Pegasus model)"),L8e.forEach(t),v8o=i(ve),v2=n(ve,"LI",{});var x8e=s(v2);Mce=n(x8e,"STRONG",{});var dnt=s(Mce);F8o=r(dnt,"plbart"),dnt.forEach(t),T8o=r(x8e," \u2014 "),bD=n(x8e,"A",{href:!0});var cnt=s(bD);M8o=r(cnt,"PLBartForConditionalGeneration"),cnt.forEach(t),E8o=r(x8e," (PLBart model)"),x8e.forEach(t),C8o=i(ve),F2=n(ve,"LI",{});var $8e=s(F2);Ece=n($8e,"STRONG",{});var mnt=s(Ece);w8o=r(mnt,"prophetnet"),mnt.forEach(t),A8o=r($8e," \u2014 "),vD=n($8e,"A",{href:!0});var fnt=s(vD);y8o=r(fnt,"ProphetNetForConditionalGeneration"),fnt.forEach(t),L8o=r($8e," (ProphetNet model)"),$8e.forEach(t),x8o=i(ve),T2=n(ve,"LI",{});var k8e=s(T2);Cce=n(k8e,"STRONG",{});var gnt=s(Cce);$8o=r(gnt,"t5"),gnt.forEach(t),k8o=r(k8e," \u2014 "),FD=n(k8e,"A",{href:!0});var hnt=s(FD);S8o=r(hnt,"T5ForConditionalGeneration"),hnt.forEach(t),R8o=r(k8e," (T5 model)"),k8e.forEach(t),P8o=i(ve),M2=n(ve,"LI",{});var S8e=s(M2);wce=n(S8e,"STRONG",{});var unt=s(wce);B8o=r(unt,"xlm-prophetnet"),unt.forEach(t),I8o=r(S8e," \u2014 "),TD=n(S8e,"A",{href:!0});var pnt=s(TD);q8o=r(pnt,"XLMProphetNetForConditionalGeneration"),pnt.forEach(t),N8o=r(S8e," (XLMProphetNet model)"),S8e.forEach(t),ve.forEach(t),j8o=i(na),E2=n(na,"P",{});var R8e=s(E2);D8o=r(R8e,"The model is set in evaluation mode by default using "),Ace=n(R8e,"CODE",{});var _nt=s(Ace);G8o=r(_nt,"model.eval()"),_nt.forEach(t),O8o=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=n(R8e,"CODE",{});var bnt=s(yce);V8o=r(bnt,"model.train()"),bnt.forEach(t),R8e.forEach(t),X8o=i(na),T(C2.$$.fragment,na),na.forEach(t),Xs.forEach(t),HIe=i(m),ji=n(m,"H2",{class:!0});var KNe=s(ji);w2=n(KNe,"A",{id:!0,class:!0,href:!0});var vnt=s(w2);Lce=n(vnt,"SPAN",{});var Fnt=s(Lce);T(aL.$$.fragment,Fnt),Fnt.forEach(t),vnt.forEach(t),z8o=i(KNe),xce=n(KNe,"SPAN",{});var Tnt=s(xce);W8o=r(Tnt,"AutoModelForSequenceClassification"),Tnt.forEach(t),KNe.forEach(t),UIe=i(m),Ro=n(m,"DIV",{class:!0});var zs=s(Ro);T(nL.$$.fragment,zs),Q8o=i(zs),Di=n(zs,"P",{});var qK=s(Di);H8o=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MD=n(qK,"A",{href:!0});var Mnt=s(MD);U8o=r(Mnt,"from_pretrained()"),Mnt.forEach(t),J8o=r(qK," class method or the "),ED=n(qK,"A",{href:!0});var Ent=s(ED);Y8o=r(Ent,"from_config()"),Ent.forEach(t),K8o=r(qK,` class
method.`),qK.forEach(t),Z8o=i(zs),sL=n(zs,"P",{});var ZNe=s(sL);exo=r(ZNe,"This class cannot be instantiated directly using "),$ce=n(ZNe,"CODE",{});var Cnt=s($ce);oxo=r(Cnt,"__init__()"),Cnt.forEach(t),rxo=r(ZNe," (throws an error)."),ZNe.forEach(t),txo=i(zs),it=n(zs,"DIV",{class:!0});var T6=s(it);T(lL.$$.fragment,T6),axo=i(T6),kce=n(T6,"P",{});var wnt=s(kce);nxo=r(wnt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wnt.forEach(t),sxo=i(T6),Gi=n(T6,"P",{});var NK=s(Gi);lxo=r(NK,`Note:
Loading a model from its configuration file does `),Sce=n(NK,"STRONG",{});var Ant=s(Sce);ixo=r(Ant,"not"),Ant.forEach(t),dxo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=n(NK,"A",{href:!0});var ynt=s(CD);cxo=r(ynt,"from_pretrained()"),ynt.forEach(t),mxo=r(NK," to load the model weights."),NK.forEach(t),fxo=i(T6),T(A2.$$.fragment,T6),T6.forEach(t),gxo=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(iL.$$.fragment,sa),hxo=i(sa),Rce=n(sa,"P",{});var Lnt=s(Rce);uxo=r(Lnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lnt.forEach(t),pxo=i(sa),Ra=n(sa,"P",{});var M6=s(Ra);_xo=r(M6,"The model class to instantiate is selected based on the "),Pce=n(M6,"CODE",{});var xnt=s(Pce);bxo=r(xnt,"model_type"),xnt.forEach(t),vxo=r(M6,` property of the config object (either
passed as an argument or loaded from `),Bce=n(M6,"CODE",{});var $nt=s(Bce);Fxo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),Txo=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(M6,"CODE",{});var knt=s(Ice);Mxo=r(knt,"pretrained_model_name_or_path"),knt.forEach(t),Exo=r(M6,":"),M6.forEach(t),Cxo=i(sa),q=n(sa,"UL",{});var j=s(q);y2=n(j,"LI",{});var P8e=s(y2);qce=n(P8e,"STRONG",{});var Snt=s(qce);wxo=r(Snt,"albert"),Snt.forEach(t),Axo=r(P8e," \u2014 "),wD=n(P8e,"A",{href:!0});var Rnt=s(wD);yxo=r(Rnt,"AlbertForSequenceClassification"),Rnt.forEach(t),Lxo=r(P8e," (ALBERT model)"),P8e.forEach(t),xxo=i(j),L2=n(j,"LI",{});var B8e=s(L2);Nce=n(B8e,"STRONG",{});var Pnt=s(Nce);$xo=r(Pnt,"bart"),Pnt.forEach(t),kxo=r(B8e," \u2014 "),AD=n(B8e,"A",{href:!0});var Bnt=s(AD);Sxo=r(Bnt,"BartForSequenceClassification"),Bnt.forEach(t),Rxo=r(B8e," (BART model)"),B8e.forEach(t),Pxo=i(j),x2=n(j,"LI",{});var I8e=s(x2);jce=n(I8e,"STRONG",{});var Int=s(jce);Bxo=r(Int,"bert"),Int.forEach(t),Ixo=r(I8e," \u2014 "),yD=n(I8e,"A",{href:!0});var qnt=s(yD);qxo=r(qnt,"BertForSequenceClassification"),qnt.forEach(t),Nxo=r(I8e," (BERT model)"),I8e.forEach(t),jxo=i(j),$2=n(j,"LI",{});var q8e=s($2);Dce=n(q8e,"STRONG",{});var Nnt=s(Dce);Dxo=r(Nnt,"big_bird"),Nnt.forEach(t),Gxo=r(q8e," \u2014 "),LD=n(q8e,"A",{href:!0});var jnt=s(LD);Oxo=r(jnt,"BigBirdForSequenceClassification"),jnt.forEach(t),Vxo=r(q8e," (BigBird model)"),q8e.forEach(t),Xxo=i(j),k2=n(j,"LI",{});var N8e=s(k2);Gce=n(N8e,"STRONG",{});var Dnt=s(Gce);zxo=r(Dnt,"bigbird_pegasus"),Dnt.forEach(t),Wxo=r(N8e," \u2014 "),xD=n(N8e,"A",{href:!0});var Gnt=s(xD);Qxo=r(Gnt,"BigBirdPegasusForSequenceClassification"),Gnt.forEach(t),Hxo=r(N8e," (BigBirdPegasus model)"),N8e.forEach(t),Uxo=i(j),S2=n(j,"LI",{});var j8e=s(S2);Oce=n(j8e,"STRONG",{});var Ont=s(Oce);Jxo=r(Ont,"camembert"),Ont.forEach(t),Yxo=r(j8e," \u2014 "),$D=n(j8e,"A",{href:!0});var Vnt=s($D);Kxo=r(Vnt,"CamembertForSequenceClassification"),Vnt.forEach(t),Zxo=r(j8e," (CamemBERT model)"),j8e.forEach(t),e9o=i(j),R2=n(j,"LI",{});var D8e=s(R2);Vce=n(D8e,"STRONG",{});var Xnt=s(Vce);o9o=r(Xnt,"canine"),Xnt.forEach(t),r9o=r(D8e," \u2014 "),kD=n(D8e,"A",{href:!0});var znt=s(kD);t9o=r(znt,"CanineForSequenceClassification"),znt.forEach(t),a9o=r(D8e," (Canine model)"),D8e.forEach(t),n9o=i(j),P2=n(j,"LI",{});var G8e=s(P2);Xce=n(G8e,"STRONG",{});var Wnt=s(Xce);s9o=r(Wnt,"convbert"),Wnt.forEach(t),l9o=r(G8e," \u2014 "),SD=n(G8e,"A",{href:!0});var Qnt=s(SD);i9o=r(Qnt,"ConvBertForSequenceClassification"),Qnt.forEach(t),d9o=r(G8e," (ConvBERT model)"),G8e.forEach(t),c9o=i(j),B2=n(j,"LI",{});var O8e=s(B2);zce=n(O8e,"STRONG",{});var Hnt=s(zce);m9o=r(Hnt,"ctrl"),Hnt.forEach(t),f9o=r(O8e," \u2014 "),RD=n(O8e,"A",{href:!0});var Unt=s(RD);g9o=r(Unt,"CTRLForSequenceClassification"),Unt.forEach(t),h9o=r(O8e," (CTRL model)"),O8e.forEach(t),u9o=i(j),I2=n(j,"LI",{});var V8e=s(I2);Wce=n(V8e,"STRONG",{});var Jnt=s(Wce);p9o=r(Jnt,"data2vec-text"),Jnt.forEach(t),_9o=r(V8e," \u2014 "),PD=n(V8e,"A",{href:!0});var Ynt=s(PD);b9o=r(Ynt,"Data2VecTextForSequenceClassification"),Ynt.forEach(t),v9o=r(V8e," (Data2VecText model)"),V8e.forEach(t),F9o=i(j),q2=n(j,"LI",{});var X8e=s(q2);Qce=n(X8e,"STRONG",{});var Knt=s(Qce);T9o=r(Knt,"deberta"),Knt.forEach(t),M9o=r(X8e," \u2014 "),BD=n(X8e,"A",{href:!0});var Znt=s(BD);E9o=r(Znt,"DebertaForSequenceClassification"),Znt.forEach(t),C9o=r(X8e," (DeBERTa model)"),X8e.forEach(t),w9o=i(j),N2=n(j,"LI",{});var z8e=s(N2);Hce=n(z8e,"STRONG",{});var est=s(Hce);A9o=r(est,"deberta-v2"),est.forEach(t),y9o=r(z8e," \u2014 "),ID=n(z8e,"A",{href:!0});var ost=s(ID);L9o=r(ost,"DebertaV2ForSequenceClassification"),ost.forEach(t),x9o=r(z8e," (DeBERTa-v2 model)"),z8e.forEach(t),$9o=i(j),j2=n(j,"LI",{});var W8e=s(j2);Uce=n(W8e,"STRONG",{});var rst=s(Uce);k9o=r(rst,"distilbert"),rst.forEach(t),S9o=r(W8e," \u2014 "),qD=n(W8e,"A",{href:!0});var tst=s(qD);R9o=r(tst,"DistilBertForSequenceClassification"),tst.forEach(t),P9o=r(W8e," (DistilBERT model)"),W8e.forEach(t),B9o=i(j),D2=n(j,"LI",{});var Q8e=s(D2);Jce=n(Q8e,"STRONG",{});var ast=s(Jce);I9o=r(ast,"electra"),ast.forEach(t),q9o=r(Q8e," \u2014 "),ND=n(Q8e,"A",{href:!0});var nst=s(ND);N9o=r(nst,"ElectraForSequenceClassification"),nst.forEach(t),j9o=r(Q8e," (ELECTRA model)"),Q8e.forEach(t),D9o=i(j),G2=n(j,"LI",{});var H8e=s(G2);Yce=n(H8e,"STRONG",{});var sst=s(Yce);G9o=r(sst,"flaubert"),sst.forEach(t),O9o=r(H8e," \u2014 "),jD=n(H8e,"A",{href:!0});var lst=s(jD);V9o=r(lst,"FlaubertForSequenceClassification"),lst.forEach(t),X9o=r(H8e," (FlauBERT model)"),H8e.forEach(t),z9o=i(j),O2=n(j,"LI",{});var U8e=s(O2);Kce=n(U8e,"STRONG",{});var ist=s(Kce);W9o=r(ist,"fnet"),ist.forEach(t),Q9o=r(U8e," \u2014 "),DD=n(U8e,"A",{href:!0});var dst=s(DD);H9o=r(dst,"FNetForSequenceClassification"),dst.forEach(t),U9o=r(U8e," (FNet model)"),U8e.forEach(t),J9o=i(j),V2=n(j,"LI",{});var J8e=s(V2);Zce=n(J8e,"STRONG",{});var cst=s(Zce);Y9o=r(cst,"funnel"),cst.forEach(t),K9o=r(J8e," \u2014 "),GD=n(J8e,"A",{href:!0});var mst=s(GD);Z9o=r(mst,"FunnelForSequenceClassification"),mst.forEach(t),e7o=r(J8e," (Funnel Transformer model)"),J8e.forEach(t),o7o=i(j),X2=n(j,"LI",{});var Y8e=s(X2);eme=n(Y8e,"STRONG",{});var fst=s(eme);r7o=r(fst,"gpt2"),fst.forEach(t),t7o=r(Y8e," \u2014 "),OD=n(Y8e,"A",{href:!0});var gst=s(OD);a7o=r(gst,"GPT2ForSequenceClassification"),gst.forEach(t),n7o=r(Y8e," (OpenAI GPT-2 model)"),Y8e.forEach(t),s7o=i(j),z2=n(j,"LI",{});var K8e=s(z2);ome=n(K8e,"STRONG",{});var hst=s(ome);l7o=r(hst,"gpt_neo"),hst.forEach(t),i7o=r(K8e," \u2014 "),VD=n(K8e,"A",{href:!0});var ust=s(VD);d7o=r(ust,"GPTNeoForSequenceClassification"),ust.forEach(t),c7o=r(K8e," (GPT Neo model)"),K8e.forEach(t),m7o=i(j),W2=n(j,"LI",{});var Z8e=s(W2);rme=n(Z8e,"STRONG",{});var pst=s(rme);f7o=r(pst,"gptj"),pst.forEach(t),g7o=r(Z8e," \u2014 "),XD=n(Z8e,"A",{href:!0});var _st=s(XD);h7o=r(_st,"GPTJForSequenceClassification"),_st.forEach(t),u7o=r(Z8e," (GPT-J model)"),Z8e.forEach(t),p7o=i(j),Q2=n(j,"LI",{});var exe=s(Q2);tme=n(exe,"STRONG",{});var bst=s(tme);_7o=r(bst,"ibert"),bst.forEach(t),b7o=r(exe," \u2014 "),zD=n(exe,"A",{href:!0});var vst=s(zD);v7o=r(vst,"IBertForSequenceClassification"),vst.forEach(t),F7o=r(exe," (I-BERT model)"),exe.forEach(t),T7o=i(j),H2=n(j,"LI",{});var oxe=s(H2);ame=n(oxe,"STRONG",{});var Fst=s(ame);M7o=r(Fst,"layoutlm"),Fst.forEach(t),E7o=r(oxe," \u2014 "),WD=n(oxe,"A",{href:!0});var Tst=s(WD);C7o=r(Tst,"LayoutLMForSequenceClassification"),Tst.forEach(t),w7o=r(oxe," (LayoutLM model)"),oxe.forEach(t),A7o=i(j),U2=n(j,"LI",{});var rxe=s(U2);nme=n(rxe,"STRONG",{});var Mst=s(nme);y7o=r(Mst,"layoutlmv2"),Mst.forEach(t),L7o=r(rxe," \u2014 "),QD=n(rxe,"A",{href:!0});var Est=s(QD);x7o=r(Est,"LayoutLMv2ForSequenceClassification"),Est.forEach(t),$7o=r(rxe," (LayoutLMv2 model)"),rxe.forEach(t),k7o=i(j),J2=n(j,"LI",{});var txe=s(J2);sme=n(txe,"STRONG",{});var Cst=s(sme);S7o=r(Cst,"led"),Cst.forEach(t),R7o=r(txe," \u2014 "),HD=n(txe,"A",{href:!0});var wst=s(HD);P7o=r(wst,"LEDForSequenceClassification"),wst.forEach(t),B7o=r(txe," (LED model)"),txe.forEach(t),I7o=i(j),Y2=n(j,"LI",{});var axe=s(Y2);lme=n(axe,"STRONG",{});var Ast=s(lme);q7o=r(Ast,"longformer"),Ast.forEach(t),N7o=r(axe," \u2014 "),UD=n(axe,"A",{href:!0});var yst=s(UD);j7o=r(yst,"LongformerForSequenceClassification"),yst.forEach(t),D7o=r(axe," (Longformer model)"),axe.forEach(t),G7o=i(j),K2=n(j,"LI",{});var nxe=s(K2);ime=n(nxe,"STRONG",{});var Lst=s(ime);O7o=r(Lst,"mbart"),Lst.forEach(t),V7o=r(nxe," \u2014 "),JD=n(nxe,"A",{href:!0});var xst=s(JD);X7o=r(xst,"MBartForSequenceClassification"),xst.forEach(t),z7o=r(nxe," (mBART model)"),nxe.forEach(t),W7o=i(j),Z2=n(j,"LI",{});var sxe=s(Z2);dme=n(sxe,"STRONG",{});var $st=s(dme);Q7o=r($st,"megatron-bert"),$st.forEach(t),H7o=r(sxe," \u2014 "),YD=n(sxe,"A",{href:!0});var kst=s(YD);U7o=r(kst,"MegatronBertForSequenceClassification"),kst.forEach(t),J7o=r(sxe," (MegatronBert model)"),sxe.forEach(t),Y7o=i(j),ev=n(j,"LI",{});var lxe=s(ev);cme=n(lxe,"STRONG",{});var Sst=s(cme);K7o=r(Sst,"mobilebert"),Sst.forEach(t),Z7o=r(lxe," \u2014 "),KD=n(lxe,"A",{href:!0});var Rst=s(KD);e$o=r(Rst,"MobileBertForSequenceClassification"),Rst.forEach(t),o$o=r(lxe," (MobileBERT model)"),lxe.forEach(t),r$o=i(j),ov=n(j,"LI",{});var ixe=s(ov);mme=n(ixe,"STRONG",{});var Pst=s(mme);t$o=r(Pst,"mpnet"),Pst.forEach(t),a$o=r(ixe," \u2014 "),ZD=n(ixe,"A",{href:!0});var Bst=s(ZD);n$o=r(Bst,"MPNetForSequenceClassification"),Bst.forEach(t),s$o=r(ixe," (MPNet model)"),ixe.forEach(t),l$o=i(j),rv=n(j,"LI",{});var dxe=s(rv);fme=n(dxe,"STRONG",{});var Ist=s(fme);i$o=r(Ist,"nystromformer"),Ist.forEach(t),d$o=r(dxe," \u2014 "),eG=n(dxe,"A",{href:!0});var qst=s(eG);c$o=r(qst,"NystromformerForSequenceClassification"),qst.forEach(t),m$o=r(dxe," (Nystromformer model)"),dxe.forEach(t),f$o=i(j),tv=n(j,"LI",{});var cxe=s(tv);gme=n(cxe,"STRONG",{});var Nst=s(gme);g$o=r(Nst,"openai-gpt"),Nst.forEach(t),h$o=r(cxe," \u2014 "),oG=n(cxe,"A",{href:!0});var jst=s(oG);u$o=r(jst,"OpenAIGPTForSequenceClassification"),jst.forEach(t),p$o=r(cxe," (OpenAI GPT model)"),cxe.forEach(t),_$o=i(j),av=n(j,"LI",{});var mxe=s(av);hme=n(mxe,"STRONG",{});var Dst=s(hme);b$o=r(Dst,"perceiver"),Dst.forEach(t),v$o=r(mxe," \u2014 "),rG=n(mxe,"A",{href:!0});var Gst=s(rG);F$o=r(Gst,"PerceiverForSequenceClassification"),Gst.forEach(t),T$o=r(mxe," (Perceiver model)"),mxe.forEach(t),M$o=i(j),nv=n(j,"LI",{});var fxe=s(nv);ume=n(fxe,"STRONG",{});var Ost=s(ume);E$o=r(Ost,"plbart"),Ost.forEach(t),C$o=r(fxe," \u2014 "),tG=n(fxe,"A",{href:!0});var Vst=s(tG);w$o=r(Vst,"PLBartForSequenceClassification"),Vst.forEach(t),A$o=r(fxe," (PLBart model)"),fxe.forEach(t),y$o=i(j),sv=n(j,"LI",{});var gxe=s(sv);pme=n(gxe,"STRONG",{});var Xst=s(pme);L$o=r(Xst,"qdqbert"),Xst.forEach(t),x$o=r(gxe," \u2014 "),aG=n(gxe,"A",{href:!0});var zst=s(aG);$$o=r(zst,"QDQBertForSequenceClassification"),zst.forEach(t),k$o=r(gxe," (QDQBert model)"),gxe.forEach(t),S$o=i(j),lv=n(j,"LI",{});var hxe=s(lv);_me=n(hxe,"STRONG",{});var Wst=s(_me);R$o=r(Wst,"reformer"),Wst.forEach(t),P$o=r(hxe," \u2014 "),nG=n(hxe,"A",{href:!0});var Qst=s(nG);B$o=r(Qst,"ReformerForSequenceClassification"),Qst.forEach(t),I$o=r(hxe," (Reformer model)"),hxe.forEach(t),q$o=i(j),iv=n(j,"LI",{});var uxe=s(iv);bme=n(uxe,"STRONG",{});var Hst=s(bme);N$o=r(Hst,"rembert"),Hst.forEach(t),j$o=r(uxe," \u2014 "),sG=n(uxe,"A",{href:!0});var Ust=s(sG);D$o=r(Ust,"RemBertForSequenceClassification"),Ust.forEach(t),G$o=r(uxe," (RemBERT model)"),uxe.forEach(t),O$o=i(j),dv=n(j,"LI",{});var pxe=s(dv);vme=n(pxe,"STRONG",{});var Jst=s(vme);V$o=r(Jst,"roberta"),Jst.forEach(t),X$o=r(pxe," \u2014 "),lG=n(pxe,"A",{href:!0});var Yst=s(lG);z$o=r(Yst,"RobertaForSequenceClassification"),Yst.forEach(t),W$o=r(pxe," (RoBERTa model)"),pxe.forEach(t),Q$o=i(j),cv=n(j,"LI",{});var _xe=s(cv);Fme=n(_xe,"STRONG",{});var Kst=s(Fme);H$o=r(Kst,"roformer"),Kst.forEach(t),U$o=r(_xe," \u2014 "),iG=n(_xe,"A",{href:!0});var Zst=s(iG);J$o=r(Zst,"RoFormerForSequenceClassification"),Zst.forEach(t),Y$o=r(_xe," (RoFormer model)"),_xe.forEach(t),K$o=i(j),mv=n(j,"LI",{});var bxe=s(mv);Tme=n(bxe,"STRONG",{});var elt=s(Tme);Z$o=r(elt,"squeezebert"),elt.forEach(t),eko=r(bxe," \u2014 "),dG=n(bxe,"A",{href:!0});var olt=s(dG);oko=r(olt,"SqueezeBertForSequenceClassification"),olt.forEach(t),rko=r(bxe," (SqueezeBERT model)"),bxe.forEach(t),tko=i(j),fv=n(j,"LI",{});var vxe=s(fv);Mme=n(vxe,"STRONG",{});var rlt=s(Mme);ako=r(rlt,"tapas"),rlt.forEach(t),nko=r(vxe," \u2014 "),cG=n(vxe,"A",{href:!0});var tlt=s(cG);sko=r(tlt,"TapasForSequenceClassification"),tlt.forEach(t),lko=r(vxe," (TAPAS model)"),vxe.forEach(t),iko=i(j),gv=n(j,"LI",{});var Fxe=s(gv);Eme=n(Fxe,"STRONG",{});var alt=s(Eme);dko=r(alt,"transfo-xl"),alt.forEach(t),cko=r(Fxe," \u2014 "),mG=n(Fxe,"A",{href:!0});var nlt=s(mG);mko=r(nlt,"TransfoXLForSequenceClassification"),nlt.forEach(t),fko=r(Fxe," (Transformer-XL model)"),Fxe.forEach(t),gko=i(j),hv=n(j,"LI",{});var Txe=s(hv);Cme=n(Txe,"STRONG",{});var slt=s(Cme);hko=r(slt,"xlm"),slt.forEach(t),uko=r(Txe," \u2014 "),fG=n(Txe,"A",{href:!0});var llt=s(fG);pko=r(llt,"XLMForSequenceClassification"),llt.forEach(t),_ko=r(Txe," (XLM model)"),Txe.forEach(t),bko=i(j),uv=n(j,"LI",{});var Mxe=s(uv);wme=n(Mxe,"STRONG",{});var ilt=s(wme);vko=r(ilt,"xlm-roberta"),ilt.forEach(t),Fko=r(Mxe," \u2014 "),gG=n(Mxe,"A",{href:!0});var dlt=s(gG);Tko=r(dlt,"XLMRobertaForSequenceClassification"),dlt.forEach(t),Mko=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),Eko=i(j),pv=n(j,"LI",{});var Exe=s(pv);Ame=n(Exe,"STRONG",{});var clt=s(Ame);Cko=r(clt,"xlm-roberta-xl"),clt.forEach(t),wko=r(Exe," \u2014 "),hG=n(Exe,"A",{href:!0});var mlt=s(hG);Ako=r(mlt,"XLMRobertaXLForSequenceClassification"),mlt.forEach(t),yko=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),Lko=i(j),_v=n(j,"LI",{});var Cxe=s(_v);yme=n(Cxe,"STRONG",{});var flt=s(yme);xko=r(flt,"xlnet"),flt.forEach(t),$ko=r(Cxe," \u2014 "),uG=n(Cxe,"A",{href:!0});var glt=s(uG);kko=r(glt,"XLNetForSequenceClassification"),glt.forEach(t),Sko=r(Cxe," (XLNet model)"),Cxe.forEach(t),Rko=i(j),bv=n(j,"LI",{});var wxe=s(bv);Lme=n(wxe,"STRONG",{});var hlt=s(Lme);Pko=r(hlt,"yoso"),hlt.forEach(t),Bko=r(wxe," \u2014 "),pG=n(wxe,"A",{href:!0});var ult=s(pG);Iko=r(ult,"YosoForSequenceClassification"),ult.forEach(t),qko=r(wxe," (YOSO model)"),wxe.forEach(t),j.forEach(t),Nko=i(sa),vv=n(sa,"P",{});var Axe=s(vv);jko=r(Axe,"The model is set in evaluation mode by default using "),xme=n(Axe,"CODE",{});var plt=s(xme);Dko=r(plt,"model.eval()"),plt.forEach(t),Gko=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$me=n(Axe,"CODE",{});var _lt=s($me);Oko=r(_lt,"model.train()"),_lt.forEach(t),Axe.forEach(t),Vko=i(sa),T(Fv.$$.fragment,sa),sa.forEach(t),zs.forEach(t),JIe=i(m),Oi=n(m,"H2",{class:!0});var eje=s(Oi);Tv=n(eje,"A",{id:!0,class:!0,href:!0});var blt=s(Tv);kme=n(blt,"SPAN",{});var vlt=s(kme);T(dL.$$.fragment,vlt),vlt.forEach(t),blt.forEach(t),Xko=i(eje),Sme=n(eje,"SPAN",{});var Flt=s(Sme);zko=r(Flt,"AutoModelForMultipleChoice"),Flt.forEach(t),eje.forEach(t),YIe=i(m),Po=n(m,"DIV",{class:!0});var Ws=s(Po);T(cL.$$.fragment,Ws),Wko=i(Ws),Vi=n(Ws,"P",{});var jK=s(Vi);Qko=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_G=n(jK,"A",{href:!0});var Tlt=s(_G);Hko=r(Tlt,"from_pretrained()"),Tlt.forEach(t),Uko=r(jK," class method or the "),bG=n(jK,"A",{href:!0});var Mlt=s(bG);Jko=r(Mlt,"from_config()"),Mlt.forEach(t),Yko=r(jK,` class
method.`),jK.forEach(t),Kko=i(Ws),mL=n(Ws,"P",{});var oje=s(mL);Zko=r(oje,"This class cannot be instantiated directly using "),Rme=n(oje,"CODE",{});var Elt=s(Rme);eSo=r(Elt,"__init__()"),Elt.forEach(t),oSo=r(oje," (throws an error)."),oje.forEach(t),rSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var E6=s(dt);T(fL.$$.fragment,E6),tSo=i(E6),Pme=n(E6,"P",{});var Clt=s(Pme);aSo=r(Clt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Clt.forEach(t),nSo=i(E6),Xi=n(E6,"P",{});var DK=s(Xi);sSo=r(DK,`Note:
Loading a model from its configuration file does `),Bme=n(DK,"STRONG",{});var wlt=s(Bme);lSo=r(wlt,"not"),wlt.forEach(t),iSo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=n(DK,"A",{href:!0});var Alt=s(vG);dSo=r(Alt,"from_pretrained()"),Alt.forEach(t),cSo=r(DK," to load the model weights."),DK.forEach(t),mSo=i(E6),T(Mv.$$.fragment,E6),E6.forEach(t),fSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(gL.$$.fragment,la),gSo=i(la),Ime=n(la,"P",{});var ylt=s(Ime);hSo=r(ylt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ylt.forEach(t),uSo=i(la),Pa=n(la,"P",{});var C6=s(Pa);pSo=r(C6,"The model class to instantiate is selected based on the "),qme=n(C6,"CODE",{});var Llt=s(qme);_So=r(Llt,"model_type"),Llt.forEach(t),bSo=r(C6,` property of the config object (either
passed as an argument or loaded from `),Nme=n(C6,"CODE",{});var xlt=s(Nme);vSo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),FSo=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=n(C6,"CODE",{});var $lt=s(jme);TSo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),MSo=r(C6,":"),C6.forEach(t),ESo=i(la),Y=n(la,"UL",{});var K=s(Y);Ev=n(K,"LI",{});var yxe=s(Ev);Dme=n(yxe,"STRONG",{});var klt=s(Dme);CSo=r(klt,"albert"),klt.forEach(t),wSo=r(yxe," \u2014 "),FG=n(yxe,"A",{href:!0});var Slt=s(FG);ASo=r(Slt,"AlbertForMultipleChoice"),Slt.forEach(t),ySo=r(yxe," (ALBERT model)"),yxe.forEach(t),LSo=i(K),Cv=n(K,"LI",{});var Lxe=s(Cv);Gme=n(Lxe,"STRONG",{});var Rlt=s(Gme);xSo=r(Rlt,"bert"),Rlt.forEach(t),$So=r(Lxe," \u2014 "),TG=n(Lxe,"A",{href:!0});var Plt=s(TG);kSo=r(Plt,"BertForMultipleChoice"),Plt.forEach(t),SSo=r(Lxe," (BERT model)"),Lxe.forEach(t),RSo=i(K),wv=n(K,"LI",{});var xxe=s(wv);Ome=n(xxe,"STRONG",{});var Blt=s(Ome);PSo=r(Blt,"big_bird"),Blt.forEach(t),BSo=r(xxe," \u2014 "),MG=n(xxe,"A",{href:!0});var Ilt=s(MG);ISo=r(Ilt,"BigBirdForMultipleChoice"),Ilt.forEach(t),qSo=r(xxe," (BigBird model)"),xxe.forEach(t),NSo=i(K),Av=n(K,"LI",{});var $xe=s(Av);Vme=n($xe,"STRONG",{});var qlt=s(Vme);jSo=r(qlt,"camembert"),qlt.forEach(t),DSo=r($xe," \u2014 "),EG=n($xe,"A",{href:!0});var Nlt=s(EG);GSo=r(Nlt,"CamembertForMultipleChoice"),Nlt.forEach(t),OSo=r($xe," (CamemBERT model)"),$xe.forEach(t),VSo=i(K),yv=n(K,"LI",{});var kxe=s(yv);Xme=n(kxe,"STRONG",{});var jlt=s(Xme);XSo=r(jlt,"canine"),jlt.forEach(t),zSo=r(kxe," \u2014 "),CG=n(kxe,"A",{href:!0});var Dlt=s(CG);WSo=r(Dlt,"CanineForMultipleChoice"),Dlt.forEach(t),QSo=r(kxe," (Canine model)"),kxe.forEach(t),HSo=i(K),Lv=n(K,"LI",{});var Sxe=s(Lv);zme=n(Sxe,"STRONG",{});var Glt=s(zme);USo=r(Glt,"convbert"),Glt.forEach(t),JSo=r(Sxe," \u2014 "),wG=n(Sxe,"A",{href:!0});var Olt=s(wG);YSo=r(Olt,"ConvBertForMultipleChoice"),Olt.forEach(t),KSo=r(Sxe," (ConvBERT model)"),Sxe.forEach(t),ZSo=i(K),xv=n(K,"LI",{});var Rxe=s(xv);Wme=n(Rxe,"STRONG",{});var Vlt=s(Wme);eRo=r(Vlt,"data2vec-text"),Vlt.forEach(t),oRo=r(Rxe," \u2014 "),AG=n(Rxe,"A",{href:!0});var Xlt=s(AG);rRo=r(Xlt,"Data2VecTextForMultipleChoice"),Xlt.forEach(t),tRo=r(Rxe," (Data2VecText model)"),Rxe.forEach(t),aRo=i(K),$v=n(K,"LI",{});var Pxe=s($v);Qme=n(Pxe,"STRONG",{});var zlt=s(Qme);nRo=r(zlt,"deberta-v2"),zlt.forEach(t),sRo=r(Pxe," \u2014 "),yG=n(Pxe,"A",{href:!0});var Wlt=s(yG);lRo=r(Wlt,"DebertaV2ForMultipleChoice"),Wlt.forEach(t),iRo=r(Pxe," (DeBERTa-v2 model)"),Pxe.forEach(t),dRo=i(K),kv=n(K,"LI",{});var Bxe=s(kv);Hme=n(Bxe,"STRONG",{});var Qlt=s(Hme);cRo=r(Qlt,"distilbert"),Qlt.forEach(t),mRo=r(Bxe," \u2014 "),LG=n(Bxe,"A",{href:!0});var Hlt=s(LG);fRo=r(Hlt,"DistilBertForMultipleChoice"),Hlt.forEach(t),gRo=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),hRo=i(K),Sv=n(K,"LI",{});var Ixe=s(Sv);Ume=n(Ixe,"STRONG",{});var Ult=s(Ume);uRo=r(Ult,"electra"),Ult.forEach(t),pRo=r(Ixe," \u2014 "),xG=n(Ixe,"A",{href:!0});var Jlt=s(xG);_Ro=r(Jlt,"ElectraForMultipleChoice"),Jlt.forEach(t),bRo=r(Ixe," (ELECTRA model)"),Ixe.forEach(t),vRo=i(K),Rv=n(K,"LI",{});var qxe=s(Rv);Jme=n(qxe,"STRONG",{});var Ylt=s(Jme);FRo=r(Ylt,"flaubert"),Ylt.forEach(t),TRo=r(qxe," \u2014 "),$G=n(qxe,"A",{href:!0});var Klt=s($G);MRo=r(Klt,"FlaubertForMultipleChoice"),Klt.forEach(t),ERo=r(qxe," (FlauBERT model)"),qxe.forEach(t),CRo=i(K),Pv=n(K,"LI",{});var Nxe=s(Pv);Yme=n(Nxe,"STRONG",{});var Zlt=s(Yme);wRo=r(Zlt,"fnet"),Zlt.forEach(t),ARo=r(Nxe," \u2014 "),kG=n(Nxe,"A",{href:!0});var eit=s(kG);yRo=r(eit,"FNetForMultipleChoice"),eit.forEach(t),LRo=r(Nxe," (FNet model)"),Nxe.forEach(t),xRo=i(K),Bv=n(K,"LI",{});var jxe=s(Bv);Kme=n(jxe,"STRONG",{});var oit=s(Kme);$Ro=r(oit,"funnel"),oit.forEach(t),kRo=r(jxe," \u2014 "),SG=n(jxe,"A",{href:!0});var rit=s(SG);SRo=r(rit,"FunnelForMultipleChoice"),rit.forEach(t),RRo=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),PRo=i(K),Iv=n(K,"LI",{});var Dxe=s(Iv);Zme=n(Dxe,"STRONG",{});var tit=s(Zme);BRo=r(tit,"ibert"),tit.forEach(t),IRo=r(Dxe," \u2014 "),RG=n(Dxe,"A",{href:!0});var ait=s(RG);qRo=r(ait,"IBertForMultipleChoice"),ait.forEach(t),NRo=r(Dxe," (I-BERT model)"),Dxe.forEach(t),jRo=i(K),qv=n(K,"LI",{});var Gxe=s(qv);efe=n(Gxe,"STRONG",{});var nit=s(efe);DRo=r(nit,"longformer"),nit.forEach(t),GRo=r(Gxe," \u2014 "),PG=n(Gxe,"A",{href:!0});var sit=s(PG);ORo=r(sit,"LongformerForMultipleChoice"),sit.forEach(t),VRo=r(Gxe," (Longformer model)"),Gxe.forEach(t),XRo=i(K),Nv=n(K,"LI",{});var Oxe=s(Nv);ofe=n(Oxe,"STRONG",{});var lit=s(ofe);zRo=r(lit,"megatron-bert"),lit.forEach(t),WRo=r(Oxe," \u2014 "),BG=n(Oxe,"A",{href:!0});var iit=s(BG);QRo=r(iit,"MegatronBertForMultipleChoice"),iit.forEach(t),HRo=r(Oxe," (MegatronBert model)"),Oxe.forEach(t),URo=i(K),jv=n(K,"LI",{});var Vxe=s(jv);rfe=n(Vxe,"STRONG",{});var dit=s(rfe);JRo=r(dit,"mobilebert"),dit.forEach(t),YRo=r(Vxe," \u2014 "),IG=n(Vxe,"A",{href:!0});var cit=s(IG);KRo=r(cit,"MobileBertForMultipleChoice"),cit.forEach(t),ZRo=r(Vxe," (MobileBERT model)"),Vxe.forEach(t),ePo=i(K),Dv=n(K,"LI",{});var Xxe=s(Dv);tfe=n(Xxe,"STRONG",{});var mit=s(tfe);oPo=r(mit,"mpnet"),mit.forEach(t),rPo=r(Xxe," \u2014 "),qG=n(Xxe,"A",{href:!0});var fit=s(qG);tPo=r(fit,"MPNetForMultipleChoice"),fit.forEach(t),aPo=r(Xxe," (MPNet model)"),Xxe.forEach(t),nPo=i(K),Gv=n(K,"LI",{});var zxe=s(Gv);afe=n(zxe,"STRONG",{});var git=s(afe);sPo=r(git,"nystromformer"),git.forEach(t),lPo=r(zxe," \u2014 "),NG=n(zxe,"A",{href:!0});var hit=s(NG);iPo=r(hit,"NystromformerForMultipleChoice"),hit.forEach(t),dPo=r(zxe," (Nystromformer model)"),zxe.forEach(t),cPo=i(K),Ov=n(K,"LI",{});var Wxe=s(Ov);nfe=n(Wxe,"STRONG",{});var uit=s(nfe);mPo=r(uit,"qdqbert"),uit.forEach(t),fPo=r(Wxe," \u2014 "),jG=n(Wxe,"A",{href:!0});var pit=s(jG);gPo=r(pit,"QDQBertForMultipleChoice"),pit.forEach(t),hPo=r(Wxe," (QDQBert model)"),Wxe.forEach(t),uPo=i(K),Vv=n(K,"LI",{});var Qxe=s(Vv);sfe=n(Qxe,"STRONG",{});var _it=s(sfe);pPo=r(_it,"rembert"),_it.forEach(t),_Po=r(Qxe," \u2014 "),DG=n(Qxe,"A",{href:!0});var bit=s(DG);bPo=r(bit,"RemBertForMultipleChoice"),bit.forEach(t),vPo=r(Qxe," (RemBERT model)"),Qxe.forEach(t),FPo=i(K),Xv=n(K,"LI",{});var Hxe=s(Xv);lfe=n(Hxe,"STRONG",{});var vit=s(lfe);TPo=r(vit,"roberta"),vit.forEach(t),MPo=r(Hxe," \u2014 "),GG=n(Hxe,"A",{href:!0});var Fit=s(GG);EPo=r(Fit,"RobertaForMultipleChoice"),Fit.forEach(t),CPo=r(Hxe," (RoBERTa model)"),Hxe.forEach(t),wPo=i(K),zv=n(K,"LI",{});var Uxe=s(zv);ife=n(Uxe,"STRONG",{});var Tit=s(ife);APo=r(Tit,"roformer"),Tit.forEach(t),yPo=r(Uxe," \u2014 "),OG=n(Uxe,"A",{href:!0});var Mit=s(OG);LPo=r(Mit,"RoFormerForMultipleChoice"),Mit.forEach(t),xPo=r(Uxe," (RoFormer model)"),Uxe.forEach(t),$Po=i(K),Wv=n(K,"LI",{});var Jxe=s(Wv);dfe=n(Jxe,"STRONG",{});var Eit=s(dfe);kPo=r(Eit,"squeezebert"),Eit.forEach(t),SPo=r(Jxe," \u2014 "),VG=n(Jxe,"A",{href:!0});var Cit=s(VG);RPo=r(Cit,"SqueezeBertForMultipleChoice"),Cit.forEach(t),PPo=r(Jxe," (SqueezeBERT model)"),Jxe.forEach(t),BPo=i(K),Qv=n(K,"LI",{});var Yxe=s(Qv);cfe=n(Yxe,"STRONG",{});var wit=s(cfe);IPo=r(wit,"xlm"),wit.forEach(t),qPo=r(Yxe," \u2014 "),XG=n(Yxe,"A",{href:!0});var Ait=s(XG);NPo=r(Ait,"XLMForMultipleChoice"),Ait.forEach(t),jPo=r(Yxe," (XLM model)"),Yxe.forEach(t),DPo=i(K),Hv=n(K,"LI",{});var Kxe=s(Hv);mfe=n(Kxe,"STRONG",{});var yit=s(mfe);GPo=r(yit,"xlm-roberta"),yit.forEach(t),OPo=r(Kxe," \u2014 "),zG=n(Kxe,"A",{href:!0});var Lit=s(zG);VPo=r(Lit,"XLMRobertaForMultipleChoice"),Lit.forEach(t),XPo=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),zPo=i(K),Uv=n(K,"LI",{});var Zxe=s(Uv);ffe=n(Zxe,"STRONG",{});var xit=s(ffe);WPo=r(xit,"xlm-roberta-xl"),xit.forEach(t),QPo=r(Zxe," \u2014 "),WG=n(Zxe,"A",{href:!0});var $it=s(WG);HPo=r($it,"XLMRobertaXLForMultipleChoice"),$it.forEach(t),UPo=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),JPo=i(K),Jv=n(K,"LI",{});var e9e=s(Jv);gfe=n(e9e,"STRONG",{});var kit=s(gfe);YPo=r(kit,"xlnet"),kit.forEach(t),KPo=r(e9e," \u2014 "),QG=n(e9e,"A",{href:!0});var Sit=s(QG);ZPo=r(Sit,"XLNetForMultipleChoice"),Sit.forEach(t),eBo=r(e9e," (XLNet model)"),e9e.forEach(t),oBo=i(K),Yv=n(K,"LI",{});var o9e=s(Yv);hfe=n(o9e,"STRONG",{});var Rit=s(hfe);rBo=r(Rit,"yoso"),Rit.forEach(t),tBo=r(o9e," \u2014 "),HG=n(o9e,"A",{href:!0});var Pit=s(HG);aBo=r(Pit,"YosoForMultipleChoice"),Pit.forEach(t),nBo=r(o9e," (YOSO model)"),o9e.forEach(t),K.forEach(t),sBo=i(la),Kv=n(la,"P",{});var r9e=s(Kv);lBo=r(r9e,"The model is set in evaluation mode by default using "),ufe=n(r9e,"CODE",{});var Bit=s(ufe);iBo=r(Bit,"model.eval()"),Bit.forEach(t),dBo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=n(r9e,"CODE",{});var Iit=s(pfe);cBo=r(Iit,"model.train()"),Iit.forEach(t),r9e.forEach(t),mBo=i(la),T(Zv.$$.fragment,la),la.forEach(t),Ws.forEach(t),KIe=i(m),zi=n(m,"H2",{class:!0});var rje=s(zi);eF=n(rje,"A",{id:!0,class:!0,href:!0});var qit=s(eF);_fe=n(qit,"SPAN",{});var Nit=s(_fe);T(hL.$$.fragment,Nit),Nit.forEach(t),qit.forEach(t),fBo=i(rje),bfe=n(rje,"SPAN",{});var jit=s(bfe);gBo=r(jit,"AutoModelForNextSentencePrediction"),jit.forEach(t),rje.forEach(t),ZIe=i(m),Bo=n(m,"DIV",{class:!0});var Qs=s(Bo);T(uL.$$.fragment,Qs),hBo=i(Qs),Wi=n(Qs,"P",{});var GK=s(Wi);uBo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UG=n(GK,"A",{href:!0});var Dit=s(UG);pBo=r(Dit,"from_pretrained()"),Dit.forEach(t),_Bo=r(GK," class method or the "),JG=n(GK,"A",{href:!0});var Git=s(JG);bBo=r(Git,"from_config()"),Git.forEach(t),vBo=r(GK,` class
method.`),GK.forEach(t),FBo=i(Qs),pL=n(Qs,"P",{});var tje=s(pL);TBo=r(tje,"This class cannot be instantiated directly using "),vfe=n(tje,"CODE",{});var Oit=s(vfe);MBo=r(Oit,"__init__()"),Oit.forEach(t),EBo=r(tje," (throws an error)."),tje.forEach(t),CBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var w6=s(ct);T(_L.$$.fragment,w6),wBo=i(w6),Ffe=n(w6,"P",{});var Vit=s(Ffe);ABo=r(Vit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vit.forEach(t),yBo=i(w6),Qi=n(w6,"P",{});var OK=s(Qi);LBo=r(OK,`Note:
Loading a model from its configuration file does `),Tfe=n(OK,"STRONG",{});var Xit=s(Tfe);xBo=r(Xit,"not"),Xit.forEach(t),$Bo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(OK,"A",{href:!0});var zit=s(YG);kBo=r(zit,"from_pretrained()"),zit.forEach(t),SBo=r(OK," to load the model weights."),OK.forEach(t),RBo=i(w6),T(oF.$$.fragment,w6),w6.forEach(t),PBo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(bL.$$.fragment,ia),BBo=i(ia),Mfe=n(ia,"P",{});var Wit=s(Mfe);IBo=r(Wit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wit.forEach(t),qBo=i(ia),Ba=n(ia,"P",{});var A6=s(Ba);NBo=r(A6,"The model class to instantiate is selected based on the "),Efe=n(A6,"CODE",{});var Qit=s(Efe);jBo=r(Qit,"model_type"),Qit.forEach(t),DBo=r(A6,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(A6,"CODE",{});var Hit=s(Cfe);GBo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),OBo=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(A6,"CODE",{});var Uit=s(wfe);VBo=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),XBo=r(A6,":"),A6.forEach(t),zBo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);rF=n(Hs,"LI",{});var t9e=s(rF);Afe=n(t9e,"STRONG",{});var Jit=s(Afe);WBo=r(Jit,"bert"),Jit.forEach(t),QBo=r(t9e," \u2014 "),KG=n(t9e,"A",{href:!0});var Yit=s(KG);HBo=r(Yit,"BertForNextSentencePrediction"),Yit.forEach(t),UBo=r(t9e," (BERT model)"),t9e.forEach(t),JBo=i(Hs),tF=n(Hs,"LI",{});var a9e=s(tF);yfe=n(a9e,"STRONG",{});var Kit=s(yfe);YBo=r(Kit,"fnet"),Kit.forEach(t),KBo=r(a9e," \u2014 "),ZG=n(a9e,"A",{href:!0});var Zit=s(ZG);ZBo=r(Zit,"FNetForNextSentencePrediction"),Zit.forEach(t),eIo=r(a9e," (FNet model)"),a9e.forEach(t),oIo=i(Hs),aF=n(Hs,"LI",{});var n9e=s(aF);Lfe=n(n9e,"STRONG",{});var edt=s(Lfe);rIo=r(edt,"megatron-bert"),edt.forEach(t),tIo=r(n9e," \u2014 "),eO=n(n9e,"A",{href:!0});var odt=s(eO);aIo=r(odt,"MegatronBertForNextSentencePrediction"),odt.forEach(t),nIo=r(n9e," (MegatronBert model)"),n9e.forEach(t),sIo=i(Hs),nF=n(Hs,"LI",{});var s9e=s(nF);xfe=n(s9e,"STRONG",{});var rdt=s(xfe);lIo=r(rdt,"mobilebert"),rdt.forEach(t),iIo=r(s9e," \u2014 "),oO=n(s9e,"A",{href:!0});var tdt=s(oO);dIo=r(tdt,"MobileBertForNextSentencePrediction"),tdt.forEach(t),cIo=r(s9e," (MobileBERT model)"),s9e.forEach(t),mIo=i(Hs),sF=n(Hs,"LI",{});var l9e=s(sF);$fe=n(l9e,"STRONG",{});var adt=s($fe);fIo=r(adt,"qdqbert"),adt.forEach(t),gIo=r(l9e," \u2014 "),rO=n(l9e,"A",{href:!0});var ndt=s(rO);hIo=r(ndt,"QDQBertForNextSentencePrediction"),ndt.forEach(t),uIo=r(l9e," (QDQBert model)"),l9e.forEach(t),Hs.forEach(t),pIo=i(ia),lF=n(ia,"P",{});var i9e=s(lF);_Io=r(i9e,"The model is set in evaluation mode by default using "),kfe=n(i9e,"CODE",{});var sdt=s(kfe);bIo=r(sdt,"model.eval()"),sdt.forEach(t),vIo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=n(i9e,"CODE",{});var ldt=s(Sfe);FIo=r(ldt,"model.train()"),ldt.forEach(t),i9e.forEach(t),TIo=i(ia),T(iF.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),eqe=i(m),Hi=n(m,"H2",{class:!0});var aje=s(Hi);dF=n(aje,"A",{id:!0,class:!0,href:!0});var idt=s(dF);Rfe=n(idt,"SPAN",{});var ddt=s(Rfe);T(vL.$$.fragment,ddt),ddt.forEach(t),idt.forEach(t),MIo=i(aje),Pfe=n(aje,"SPAN",{});var cdt=s(Pfe);EIo=r(cdt,"AutoModelForTokenClassification"),cdt.forEach(t),aje.forEach(t),oqe=i(m),Io=n(m,"DIV",{class:!0});var Us=s(Io);T(FL.$$.fragment,Us),CIo=i(Us),Ui=n(Us,"P",{});var VK=s(Ui);wIo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tO=n(VK,"A",{href:!0});var mdt=s(tO);AIo=r(mdt,"from_pretrained()"),mdt.forEach(t),yIo=r(VK," class method or the "),aO=n(VK,"A",{href:!0});var fdt=s(aO);LIo=r(fdt,"from_config()"),fdt.forEach(t),xIo=r(VK,` class
method.`),VK.forEach(t),$Io=i(Us),TL=n(Us,"P",{});var nje=s(TL);kIo=r(nje,"This class cannot be instantiated directly using "),Bfe=n(nje,"CODE",{});var gdt=s(Bfe);SIo=r(gdt,"__init__()"),gdt.forEach(t),RIo=r(nje," (throws an error)."),nje.forEach(t),PIo=i(Us),mt=n(Us,"DIV",{class:!0});var y6=s(mt);T(ML.$$.fragment,y6),BIo=i(y6),Ife=n(y6,"P",{});var hdt=s(Ife);IIo=r(hdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hdt.forEach(t),qIo=i(y6),Ji=n(y6,"P",{});var XK=s(Ji);NIo=r(XK,`Note:
Loading a model from its configuration file does `),qfe=n(XK,"STRONG",{});var udt=s(qfe);jIo=r(udt,"not"),udt.forEach(t),DIo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(XK,"A",{href:!0});var pdt=s(nO);GIo=r(pdt,"from_pretrained()"),pdt.forEach(t),OIo=r(XK," to load the model weights."),XK.forEach(t),VIo=i(y6),T(cF.$$.fragment,y6),y6.forEach(t),XIo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(EL.$$.fragment,da),zIo=i(da),Nfe=n(da,"P",{});var _dt=s(Nfe);WIo=r(_dt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_dt.forEach(t),QIo=i(da),Ia=n(da,"P",{});var L6=s(Ia);HIo=r(L6,"The model class to instantiate is selected based on the "),jfe=n(L6,"CODE",{});var bdt=s(jfe);UIo=r(bdt,"model_type"),bdt.forEach(t),JIo=r(L6,` property of the config object (either
passed as an argument or loaded from `),Dfe=n(L6,"CODE",{});var vdt=s(Dfe);YIo=r(vdt,"pretrained_model_name_or_path"),vdt.forEach(t),KIo=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=n(L6,"CODE",{});var Fdt=s(Gfe);ZIo=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),eqo=r(L6,":"),L6.forEach(t),oqo=i(da),U=n(da,"UL",{});var J=s(U);mF=n(J,"LI",{});var d9e=s(mF);Ofe=n(d9e,"STRONG",{});var Tdt=s(Ofe);rqo=r(Tdt,"albert"),Tdt.forEach(t),tqo=r(d9e," \u2014 "),sO=n(d9e,"A",{href:!0});var Mdt=s(sO);aqo=r(Mdt,"AlbertForTokenClassification"),Mdt.forEach(t),nqo=r(d9e," (ALBERT model)"),d9e.forEach(t),sqo=i(J),fF=n(J,"LI",{});var c9e=s(fF);Vfe=n(c9e,"STRONG",{});var Edt=s(Vfe);lqo=r(Edt,"bert"),Edt.forEach(t),iqo=r(c9e," \u2014 "),lO=n(c9e,"A",{href:!0});var Cdt=s(lO);dqo=r(Cdt,"BertForTokenClassification"),Cdt.forEach(t),cqo=r(c9e," (BERT model)"),c9e.forEach(t),mqo=i(J),gF=n(J,"LI",{});var m9e=s(gF);Xfe=n(m9e,"STRONG",{});var wdt=s(Xfe);fqo=r(wdt,"big_bird"),wdt.forEach(t),gqo=r(m9e," \u2014 "),iO=n(m9e,"A",{href:!0});var Adt=s(iO);hqo=r(Adt,"BigBirdForTokenClassification"),Adt.forEach(t),uqo=r(m9e," (BigBird model)"),m9e.forEach(t),pqo=i(J),hF=n(J,"LI",{});var f9e=s(hF);zfe=n(f9e,"STRONG",{});var ydt=s(zfe);_qo=r(ydt,"camembert"),ydt.forEach(t),bqo=r(f9e," \u2014 "),dO=n(f9e,"A",{href:!0});var Ldt=s(dO);vqo=r(Ldt,"CamembertForTokenClassification"),Ldt.forEach(t),Fqo=r(f9e," (CamemBERT model)"),f9e.forEach(t),Tqo=i(J),uF=n(J,"LI",{});var g9e=s(uF);Wfe=n(g9e,"STRONG",{});var xdt=s(Wfe);Mqo=r(xdt,"canine"),xdt.forEach(t),Eqo=r(g9e," \u2014 "),cO=n(g9e,"A",{href:!0});var $dt=s(cO);Cqo=r($dt,"CanineForTokenClassification"),$dt.forEach(t),wqo=r(g9e," (Canine model)"),g9e.forEach(t),Aqo=i(J),pF=n(J,"LI",{});var h9e=s(pF);Qfe=n(h9e,"STRONG",{});var kdt=s(Qfe);yqo=r(kdt,"convbert"),kdt.forEach(t),Lqo=r(h9e," \u2014 "),mO=n(h9e,"A",{href:!0});var Sdt=s(mO);xqo=r(Sdt,"ConvBertForTokenClassification"),Sdt.forEach(t),$qo=r(h9e," (ConvBERT model)"),h9e.forEach(t),kqo=i(J),_F=n(J,"LI",{});var u9e=s(_F);Hfe=n(u9e,"STRONG",{});var Rdt=s(Hfe);Sqo=r(Rdt,"data2vec-text"),Rdt.forEach(t),Rqo=r(u9e," \u2014 "),fO=n(u9e,"A",{href:!0});var Pdt=s(fO);Pqo=r(Pdt,"Data2VecTextForTokenClassification"),Pdt.forEach(t),Bqo=r(u9e," (Data2VecText model)"),u9e.forEach(t),Iqo=i(J),bF=n(J,"LI",{});var p9e=s(bF);Ufe=n(p9e,"STRONG",{});var Bdt=s(Ufe);qqo=r(Bdt,"deberta"),Bdt.forEach(t),Nqo=r(p9e," \u2014 "),gO=n(p9e,"A",{href:!0});var Idt=s(gO);jqo=r(Idt,"DebertaForTokenClassification"),Idt.forEach(t),Dqo=r(p9e," (DeBERTa model)"),p9e.forEach(t),Gqo=i(J),vF=n(J,"LI",{});var _9e=s(vF);Jfe=n(_9e,"STRONG",{});var qdt=s(Jfe);Oqo=r(qdt,"deberta-v2"),qdt.forEach(t),Vqo=r(_9e," \u2014 "),hO=n(_9e,"A",{href:!0});var Ndt=s(hO);Xqo=r(Ndt,"DebertaV2ForTokenClassification"),Ndt.forEach(t),zqo=r(_9e," (DeBERTa-v2 model)"),_9e.forEach(t),Wqo=i(J),FF=n(J,"LI",{});var b9e=s(FF);Yfe=n(b9e,"STRONG",{});var jdt=s(Yfe);Qqo=r(jdt,"distilbert"),jdt.forEach(t),Hqo=r(b9e," \u2014 "),uO=n(b9e,"A",{href:!0});var Ddt=s(uO);Uqo=r(Ddt,"DistilBertForTokenClassification"),Ddt.forEach(t),Jqo=r(b9e," (DistilBERT model)"),b9e.forEach(t),Yqo=i(J),TF=n(J,"LI",{});var v9e=s(TF);Kfe=n(v9e,"STRONG",{});var Gdt=s(Kfe);Kqo=r(Gdt,"electra"),Gdt.forEach(t),Zqo=r(v9e," \u2014 "),pO=n(v9e,"A",{href:!0});var Odt=s(pO);eNo=r(Odt,"ElectraForTokenClassification"),Odt.forEach(t),oNo=r(v9e," (ELECTRA model)"),v9e.forEach(t),rNo=i(J),MF=n(J,"LI",{});var F9e=s(MF);Zfe=n(F9e,"STRONG",{});var Vdt=s(Zfe);tNo=r(Vdt,"flaubert"),Vdt.forEach(t),aNo=r(F9e," \u2014 "),_O=n(F9e,"A",{href:!0});var Xdt=s(_O);nNo=r(Xdt,"FlaubertForTokenClassification"),Xdt.forEach(t),sNo=r(F9e," (FlauBERT model)"),F9e.forEach(t),lNo=i(J),EF=n(J,"LI",{});var T9e=s(EF);ege=n(T9e,"STRONG",{});var zdt=s(ege);iNo=r(zdt,"fnet"),zdt.forEach(t),dNo=r(T9e," \u2014 "),bO=n(T9e,"A",{href:!0});var Wdt=s(bO);cNo=r(Wdt,"FNetForTokenClassification"),Wdt.forEach(t),mNo=r(T9e," (FNet model)"),T9e.forEach(t),fNo=i(J),CF=n(J,"LI",{});var M9e=s(CF);oge=n(M9e,"STRONG",{});var Qdt=s(oge);gNo=r(Qdt,"funnel"),Qdt.forEach(t),hNo=r(M9e," \u2014 "),vO=n(M9e,"A",{href:!0});var Hdt=s(vO);uNo=r(Hdt,"FunnelForTokenClassification"),Hdt.forEach(t),pNo=r(M9e," (Funnel Transformer model)"),M9e.forEach(t),_No=i(J),wF=n(J,"LI",{});var E9e=s(wF);rge=n(E9e,"STRONG",{});var Udt=s(rge);bNo=r(Udt,"gpt2"),Udt.forEach(t),vNo=r(E9e," \u2014 "),FO=n(E9e,"A",{href:!0});var Jdt=s(FO);FNo=r(Jdt,"GPT2ForTokenClassification"),Jdt.forEach(t),TNo=r(E9e," (OpenAI GPT-2 model)"),E9e.forEach(t),MNo=i(J),AF=n(J,"LI",{});var C9e=s(AF);tge=n(C9e,"STRONG",{});var Ydt=s(tge);ENo=r(Ydt,"ibert"),Ydt.forEach(t),CNo=r(C9e," \u2014 "),TO=n(C9e,"A",{href:!0});var Kdt=s(TO);wNo=r(Kdt,"IBertForTokenClassification"),Kdt.forEach(t),ANo=r(C9e," (I-BERT model)"),C9e.forEach(t),yNo=i(J),yF=n(J,"LI",{});var w9e=s(yF);age=n(w9e,"STRONG",{});var Zdt=s(age);LNo=r(Zdt,"layoutlm"),Zdt.forEach(t),xNo=r(w9e," \u2014 "),MO=n(w9e,"A",{href:!0});var ect=s(MO);$No=r(ect,"LayoutLMForTokenClassification"),ect.forEach(t),kNo=r(w9e," (LayoutLM model)"),w9e.forEach(t),SNo=i(J),LF=n(J,"LI",{});var A9e=s(LF);nge=n(A9e,"STRONG",{});var oct=s(nge);RNo=r(oct,"layoutlmv2"),oct.forEach(t),PNo=r(A9e," \u2014 "),EO=n(A9e,"A",{href:!0});var rct=s(EO);BNo=r(rct,"LayoutLMv2ForTokenClassification"),rct.forEach(t),INo=r(A9e," (LayoutLMv2 model)"),A9e.forEach(t),qNo=i(J),xF=n(J,"LI",{});var y9e=s(xF);sge=n(y9e,"STRONG",{});var tct=s(sge);NNo=r(tct,"longformer"),tct.forEach(t),jNo=r(y9e," \u2014 "),CO=n(y9e,"A",{href:!0});var act=s(CO);DNo=r(act,"LongformerForTokenClassification"),act.forEach(t),GNo=r(y9e," (Longformer model)"),y9e.forEach(t),ONo=i(J),$F=n(J,"LI",{});var L9e=s($F);lge=n(L9e,"STRONG",{});var nct=s(lge);VNo=r(nct,"megatron-bert"),nct.forEach(t),XNo=r(L9e," \u2014 "),wO=n(L9e,"A",{href:!0});var sct=s(wO);zNo=r(sct,"MegatronBertForTokenClassification"),sct.forEach(t),WNo=r(L9e," (MegatronBert model)"),L9e.forEach(t),QNo=i(J),kF=n(J,"LI",{});var x9e=s(kF);ige=n(x9e,"STRONG",{});var lct=s(ige);HNo=r(lct,"mobilebert"),lct.forEach(t),UNo=r(x9e," \u2014 "),AO=n(x9e,"A",{href:!0});var ict=s(AO);JNo=r(ict,"MobileBertForTokenClassification"),ict.forEach(t),YNo=r(x9e," (MobileBERT model)"),x9e.forEach(t),KNo=i(J),SF=n(J,"LI",{});var $9e=s(SF);dge=n($9e,"STRONG",{});var dct=s(dge);ZNo=r(dct,"mpnet"),dct.forEach(t),ejo=r($9e," \u2014 "),yO=n($9e,"A",{href:!0});var cct=s(yO);ojo=r(cct,"MPNetForTokenClassification"),cct.forEach(t),rjo=r($9e," (MPNet model)"),$9e.forEach(t),tjo=i(J),RF=n(J,"LI",{});var k9e=s(RF);cge=n(k9e,"STRONG",{});var mct=s(cge);ajo=r(mct,"nystromformer"),mct.forEach(t),njo=r(k9e," \u2014 "),LO=n(k9e,"A",{href:!0});var fct=s(LO);sjo=r(fct,"NystromformerForTokenClassification"),fct.forEach(t),ljo=r(k9e," (Nystromformer model)"),k9e.forEach(t),ijo=i(J),PF=n(J,"LI",{});var S9e=s(PF);mge=n(S9e,"STRONG",{});var gct=s(mge);djo=r(gct,"qdqbert"),gct.forEach(t),cjo=r(S9e," \u2014 "),xO=n(S9e,"A",{href:!0});var hct=s(xO);mjo=r(hct,"QDQBertForTokenClassification"),hct.forEach(t),fjo=r(S9e," (QDQBert model)"),S9e.forEach(t),gjo=i(J),BF=n(J,"LI",{});var R9e=s(BF);fge=n(R9e,"STRONG",{});var uct=s(fge);hjo=r(uct,"rembert"),uct.forEach(t),ujo=r(R9e," \u2014 "),$O=n(R9e,"A",{href:!0});var pct=s($O);pjo=r(pct,"RemBertForTokenClassification"),pct.forEach(t),_jo=r(R9e," (RemBERT model)"),R9e.forEach(t),bjo=i(J),IF=n(J,"LI",{});var P9e=s(IF);gge=n(P9e,"STRONG",{});var _ct=s(gge);vjo=r(_ct,"roberta"),_ct.forEach(t),Fjo=r(P9e," \u2014 "),kO=n(P9e,"A",{href:!0});var bct=s(kO);Tjo=r(bct,"RobertaForTokenClassification"),bct.forEach(t),Mjo=r(P9e," (RoBERTa model)"),P9e.forEach(t),Ejo=i(J),qF=n(J,"LI",{});var B9e=s(qF);hge=n(B9e,"STRONG",{});var vct=s(hge);Cjo=r(vct,"roformer"),vct.forEach(t),wjo=r(B9e," \u2014 "),SO=n(B9e,"A",{href:!0});var Fct=s(SO);Ajo=r(Fct,"RoFormerForTokenClassification"),Fct.forEach(t),yjo=r(B9e," (RoFormer model)"),B9e.forEach(t),Ljo=i(J),NF=n(J,"LI",{});var I9e=s(NF);uge=n(I9e,"STRONG",{});var Tct=s(uge);xjo=r(Tct,"squeezebert"),Tct.forEach(t),$jo=r(I9e," \u2014 "),RO=n(I9e,"A",{href:!0});var Mct=s(RO);kjo=r(Mct,"SqueezeBertForTokenClassification"),Mct.forEach(t),Sjo=r(I9e," (SqueezeBERT model)"),I9e.forEach(t),Rjo=i(J),jF=n(J,"LI",{});var q9e=s(jF);pge=n(q9e,"STRONG",{});var Ect=s(pge);Pjo=r(Ect,"xlm"),Ect.forEach(t),Bjo=r(q9e," \u2014 "),PO=n(q9e,"A",{href:!0});var Cct=s(PO);Ijo=r(Cct,"XLMForTokenClassification"),Cct.forEach(t),qjo=r(q9e," (XLM model)"),q9e.forEach(t),Njo=i(J),DF=n(J,"LI",{});var N9e=s(DF);_ge=n(N9e,"STRONG",{});var wct=s(_ge);jjo=r(wct,"xlm-roberta"),wct.forEach(t),Djo=r(N9e," \u2014 "),BO=n(N9e,"A",{href:!0});var Act=s(BO);Gjo=r(Act,"XLMRobertaForTokenClassification"),Act.forEach(t),Ojo=r(N9e," (XLM-RoBERTa model)"),N9e.forEach(t),Vjo=i(J),GF=n(J,"LI",{});var j9e=s(GF);bge=n(j9e,"STRONG",{});var yct=s(bge);Xjo=r(yct,"xlm-roberta-xl"),yct.forEach(t),zjo=r(j9e," \u2014 "),IO=n(j9e,"A",{href:!0});var Lct=s(IO);Wjo=r(Lct,"XLMRobertaXLForTokenClassification"),Lct.forEach(t),Qjo=r(j9e," (XLM-RoBERTa-XL model)"),j9e.forEach(t),Hjo=i(J),OF=n(J,"LI",{});var D9e=s(OF);vge=n(D9e,"STRONG",{});var xct=s(vge);Ujo=r(xct,"xlnet"),xct.forEach(t),Jjo=r(D9e," \u2014 "),qO=n(D9e,"A",{href:!0});var $ct=s(qO);Yjo=r($ct,"XLNetForTokenClassification"),$ct.forEach(t),Kjo=r(D9e," (XLNet model)"),D9e.forEach(t),Zjo=i(J),VF=n(J,"LI",{});var G9e=s(VF);Fge=n(G9e,"STRONG",{});var kct=s(Fge);eDo=r(kct,"yoso"),kct.forEach(t),oDo=r(G9e," \u2014 "),NO=n(G9e,"A",{href:!0});var Sct=s(NO);rDo=r(Sct,"YosoForTokenClassification"),Sct.forEach(t),tDo=r(G9e," (YOSO model)"),G9e.forEach(t),J.forEach(t),aDo=i(da),XF=n(da,"P",{});var O9e=s(XF);nDo=r(O9e,"The model is set in evaluation mode by default using "),Tge=n(O9e,"CODE",{});var Rct=s(Tge);sDo=r(Rct,"model.eval()"),Rct.forEach(t),lDo=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(O9e,"CODE",{});var Pct=s(Mge);iDo=r(Pct,"model.train()"),Pct.forEach(t),O9e.forEach(t),dDo=i(da),T(zF.$$.fragment,da),da.forEach(t),Us.forEach(t),rqe=i(m),Yi=n(m,"H2",{class:!0});var sje=s(Yi);WF=n(sje,"A",{id:!0,class:!0,href:!0});var Bct=s(WF);Ege=n(Bct,"SPAN",{});var Ict=s(Ege);T(CL.$$.fragment,Ict),Ict.forEach(t),Bct.forEach(t),cDo=i(sje),Cge=n(sje,"SPAN",{});var qct=s(Cge);mDo=r(qct,"AutoModelForQuestionAnswering"),qct.forEach(t),sje.forEach(t),tqe=i(m),qo=n(m,"DIV",{class:!0});var Js=s(qo);T(wL.$$.fragment,Js),fDo=i(Js),Ki=n(Js,"P",{});var zK=s(Ki);gDo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jO=n(zK,"A",{href:!0});var Nct=s(jO);hDo=r(Nct,"from_pretrained()"),Nct.forEach(t),uDo=r(zK," class method or the "),DO=n(zK,"A",{href:!0});var jct=s(DO);pDo=r(jct,"from_config()"),jct.forEach(t),_Do=r(zK,` class
method.`),zK.forEach(t),bDo=i(Js),AL=n(Js,"P",{});var lje=s(AL);vDo=r(lje,"This class cannot be instantiated directly using "),wge=n(lje,"CODE",{});var Dct=s(wge);FDo=r(Dct,"__init__()"),Dct.forEach(t),TDo=r(lje," (throws an error)."),lje.forEach(t),MDo=i(Js),ft=n(Js,"DIV",{class:!0});var x6=s(ft);T(yL.$$.fragment,x6),EDo=i(x6),Age=n(x6,"P",{});var Gct=s(Age);CDo=r(Gct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gct.forEach(t),wDo=i(x6),Zi=n(x6,"P",{});var WK=s(Zi);ADo=r(WK,`Note:
Loading a model from its configuration file does `),yge=n(WK,"STRONG",{});var Oct=s(yge);yDo=r(Oct,"not"),Oct.forEach(t),LDo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(WK,"A",{href:!0});var Vct=s(GO);xDo=r(Vct,"from_pretrained()"),Vct.forEach(t),$Do=r(WK," to load the model weights."),WK.forEach(t),kDo=i(x6),T(QF.$$.fragment,x6),x6.forEach(t),SDo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(LL.$$.fragment,ca),RDo=i(ca),Lge=n(ca,"P",{});var Xct=s(Lge);PDo=r(Xct,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xct.forEach(t),BDo=i(ca),qa=n(ca,"P",{});var $6=s(qa);IDo=r($6,"The model class to instantiate is selected based on the "),xge=n($6,"CODE",{});var zct=s(xge);qDo=r(zct,"model_type"),zct.forEach(t),NDo=r($6,` property of the config object (either
passed as an argument or loaded from `),$ge=n($6,"CODE",{});var Wct=s($ge);jDo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),DDo=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n($6,"CODE",{});var Qct=s(kge);GDo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),ODo=r($6,":"),$6.forEach(t),VDo=i(ca),V=n(ca,"UL",{});var X=s(V);HF=n(X,"LI",{});var V9e=s(HF);Sge=n(V9e,"STRONG",{});var Hct=s(Sge);XDo=r(Hct,"albert"),Hct.forEach(t),zDo=r(V9e," \u2014 "),OO=n(V9e,"A",{href:!0});var Uct=s(OO);WDo=r(Uct,"AlbertForQuestionAnswering"),Uct.forEach(t),QDo=r(V9e," (ALBERT model)"),V9e.forEach(t),HDo=i(X),UF=n(X,"LI",{});var X9e=s(UF);Rge=n(X9e,"STRONG",{});var Jct=s(Rge);UDo=r(Jct,"bart"),Jct.forEach(t),JDo=r(X9e," \u2014 "),VO=n(X9e,"A",{href:!0});var Yct=s(VO);YDo=r(Yct,"BartForQuestionAnswering"),Yct.forEach(t),KDo=r(X9e," (BART model)"),X9e.forEach(t),ZDo=i(X),JF=n(X,"LI",{});var z9e=s(JF);Pge=n(z9e,"STRONG",{});var Kct=s(Pge);eGo=r(Kct,"bert"),Kct.forEach(t),oGo=r(z9e," \u2014 "),XO=n(z9e,"A",{href:!0});var Zct=s(XO);rGo=r(Zct,"BertForQuestionAnswering"),Zct.forEach(t),tGo=r(z9e," (BERT model)"),z9e.forEach(t),aGo=i(X),YF=n(X,"LI",{});var W9e=s(YF);Bge=n(W9e,"STRONG",{});var emt=s(Bge);nGo=r(emt,"big_bird"),emt.forEach(t),sGo=r(W9e," \u2014 "),zO=n(W9e,"A",{href:!0});var omt=s(zO);lGo=r(omt,"BigBirdForQuestionAnswering"),omt.forEach(t),iGo=r(W9e," (BigBird model)"),W9e.forEach(t),dGo=i(X),KF=n(X,"LI",{});var Q9e=s(KF);Ige=n(Q9e,"STRONG",{});var rmt=s(Ige);cGo=r(rmt,"bigbird_pegasus"),rmt.forEach(t),mGo=r(Q9e," \u2014 "),WO=n(Q9e,"A",{href:!0});var tmt=s(WO);fGo=r(tmt,"BigBirdPegasusForQuestionAnswering"),tmt.forEach(t),gGo=r(Q9e," (BigBirdPegasus model)"),Q9e.forEach(t),hGo=i(X),ZF=n(X,"LI",{});var H9e=s(ZF);qge=n(H9e,"STRONG",{});var amt=s(qge);uGo=r(amt,"camembert"),amt.forEach(t),pGo=r(H9e," \u2014 "),QO=n(H9e,"A",{href:!0});var nmt=s(QO);_Go=r(nmt,"CamembertForQuestionAnswering"),nmt.forEach(t),bGo=r(H9e," (CamemBERT model)"),H9e.forEach(t),vGo=i(X),e1=n(X,"LI",{});var U9e=s(e1);Nge=n(U9e,"STRONG",{});var smt=s(Nge);FGo=r(smt,"canine"),smt.forEach(t),TGo=r(U9e," \u2014 "),HO=n(U9e,"A",{href:!0});var lmt=s(HO);MGo=r(lmt,"CanineForQuestionAnswering"),lmt.forEach(t),EGo=r(U9e," (Canine model)"),U9e.forEach(t),CGo=i(X),o1=n(X,"LI",{});var J9e=s(o1);jge=n(J9e,"STRONG",{});var imt=s(jge);wGo=r(imt,"convbert"),imt.forEach(t),AGo=r(J9e," \u2014 "),UO=n(J9e,"A",{href:!0});var dmt=s(UO);yGo=r(dmt,"ConvBertForQuestionAnswering"),dmt.forEach(t),LGo=r(J9e," (ConvBERT model)"),J9e.forEach(t),xGo=i(X),r1=n(X,"LI",{});var Y9e=s(r1);Dge=n(Y9e,"STRONG",{});var cmt=s(Dge);$Go=r(cmt,"data2vec-text"),cmt.forEach(t),kGo=r(Y9e," \u2014 "),JO=n(Y9e,"A",{href:!0});var mmt=s(JO);SGo=r(mmt,"Data2VecTextForQuestionAnswering"),mmt.forEach(t),RGo=r(Y9e," (Data2VecText model)"),Y9e.forEach(t),PGo=i(X),t1=n(X,"LI",{});var K9e=s(t1);Gge=n(K9e,"STRONG",{});var fmt=s(Gge);BGo=r(fmt,"deberta"),fmt.forEach(t),IGo=r(K9e," \u2014 "),YO=n(K9e,"A",{href:!0});var gmt=s(YO);qGo=r(gmt,"DebertaForQuestionAnswering"),gmt.forEach(t),NGo=r(K9e," (DeBERTa model)"),K9e.forEach(t),jGo=i(X),a1=n(X,"LI",{});var Z9e=s(a1);Oge=n(Z9e,"STRONG",{});var hmt=s(Oge);DGo=r(hmt,"deberta-v2"),hmt.forEach(t),GGo=r(Z9e," \u2014 "),KO=n(Z9e,"A",{href:!0});var umt=s(KO);OGo=r(umt,"DebertaV2ForQuestionAnswering"),umt.forEach(t),VGo=r(Z9e," (DeBERTa-v2 model)"),Z9e.forEach(t),XGo=i(X),n1=n(X,"LI",{});var e7e=s(n1);Vge=n(e7e,"STRONG",{});var pmt=s(Vge);zGo=r(pmt,"distilbert"),pmt.forEach(t),WGo=r(e7e," \u2014 "),ZO=n(e7e,"A",{href:!0});var _mt=s(ZO);QGo=r(_mt,"DistilBertForQuestionAnswering"),_mt.forEach(t),HGo=r(e7e," (DistilBERT model)"),e7e.forEach(t),UGo=i(X),s1=n(X,"LI",{});var o7e=s(s1);Xge=n(o7e,"STRONG",{});var bmt=s(Xge);JGo=r(bmt,"electra"),bmt.forEach(t),YGo=r(o7e," \u2014 "),eV=n(o7e,"A",{href:!0});var vmt=s(eV);KGo=r(vmt,"ElectraForQuestionAnswering"),vmt.forEach(t),ZGo=r(o7e," (ELECTRA model)"),o7e.forEach(t),eOo=i(X),l1=n(X,"LI",{});var r7e=s(l1);zge=n(r7e,"STRONG",{});var Fmt=s(zge);oOo=r(Fmt,"flaubert"),Fmt.forEach(t),rOo=r(r7e," \u2014 "),oV=n(r7e,"A",{href:!0});var Tmt=s(oV);tOo=r(Tmt,"FlaubertForQuestionAnsweringSimple"),Tmt.forEach(t),aOo=r(r7e," (FlauBERT model)"),r7e.forEach(t),nOo=i(X),i1=n(X,"LI",{});var t7e=s(i1);Wge=n(t7e,"STRONG",{});var Mmt=s(Wge);sOo=r(Mmt,"fnet"),Mmt.forEach(t),lOo=r(t7e," \u2014 "),rV=n(t7e,"A",{href:!0});var Emt=s(rV);iOo=r(Emt,"FNetForQuestionAnswering"),Emt.forEach(t),dOo=r(t7e," (FNet model)"),t7e.forEach(t),cOo=i(X),d1=n(X,"LI",{});var a7e=s(d1);Qge=n(a7e,"STRONG",{});var Cmt=s(Qge);mOo=r(Cmt,"funnel"),Cmt.forEach(t),fOo=r(a7e," \u2014 "),tV=n(a7e,"A",{href:!0});var wmt=s(tV);gOo=r(wmt,"FunnelForQuestionAnswering"),wmt.forEach(t),hOo=r(a7e," (Funnel Transformer model)"),a7e.forEach(t),uOo=i(X),c1=n(X,"LI",{});var n7e=s(c1);Hge=n(n7e,"STRONG",{});var Amt=s(Hge);pOo=r(Amt,"gptj"),Amt.forEach(t),_Oo=r(n7e," \u2014 "),aV=n(n7e,"A",{href:!0});var ymt=s(aV);bOo=r(ymt,"GPTJForQuestionAnswering"),ymt.forEach(t),vOo=r(n7e," (GPT-J model)"),n7e.forEach(t),FOo=i(X),m1=n(X,"LI",{});var s7e=s(m1);Uge=n(s7e,"STRONG",{});var Lmt=s(Uge);TOo=r(Lmt,"ibert"),Lmt.forEach(t),MOo=r(s7e," \u2014 "),nV=n(s7e,"A",{href:!0});var xmt=s(nV);EOo=r(xmt,"IBertForQuestionAnswering"),xmt.forEach(t),COo=r(s7e," (I-BERT model)"),s7e.forEach(t),wOo=i(X),f1=n(X,"LI",{});var l7e=s(f1);Jge=n(l7e,"STRONG",{});var $mt=s(Jge);AOo=r($mt,"layoutlmv2"),$mt.forEach(t),yOo=r(l7e," \u2014 "),sV=n(l7e,"A",{href:!0});var kmt=s(sV);LOo=r(kmt,"LayoutLMv2ForQuestionAnswering"),kmt.forEach(t),xOo=r(l7e," (LayoutLMv2 model)"),l7e.forEach(t),$Oo=i(X),g1=n(X,"LI",{});var i7e=s(g1);Yge=n(i7e,"STRONG",{});var Smt=s(Yge);kOo=r(Smt,"led"),Smt.forEach(t),SOo=r(i7e," \u2014 "),lV=n(i7e,"A",{href:!0});var Rmt=s(lV);ROo=r(Rmt,"LEDForQuestionAnswering"),Rmt.forEach(t),POo=r(i7e," (LED model)"),i7e.forEach(t),BOo=i(X),h1=n(X,"LI",{});var d7e=s(h1);Kge=n(d7e,"STRONG",{});var Pmt=s(Kge);IOo=r(Pmt,"longformer"),Pmt.forEach(t),qOo=r(d7e," \u2014 "),iV=n(d7e,"A",{href:!0});var Bmt=s(iV);NOo=r(Bmt,"LongformerForQuestionAnswering"),Bmt.forEach(t),jOo=r(d7e," (Longformer model)"),d7e.forEach(t),DOo=i(X),u1=n(X,"LI",{});var c7e=s(u1);Zge=n(c7e,"STRONG",{});var Imt=s(Zge);GOo=r(Imt,"lxmert"),Imt.forEach(t),OOo=r(c7e," \u2014 "),dV=n(c7e,"A",{href:!0});var qmt=s(dV);VOo=r(qmt,"LxmertForQuestionAnswering"),qmt.forEach(t),XOo=r(c7e," (LXMERT model)"),c7e.forEach(t),zOo=i(X),p1=n(X,"LI",{});var m7e=s(p1);ehe=n(m7e,"STRONG",{});var Nmt=s(ehe);WOo=r(Nmt,"mbart"),Nmt.forEach(t),QOo=r(m7e," \u2014 "),cV=n(m7e,"A",{href:!0});var jmt=s(cV);HOo=r(jmt,"MBartForQuestionAnswering"),jmt.forEach(t),UOo=r(m7e," (mBART model)"),m7e.forEach(t),JOo=i(X),_1=n(X,"LI",{});var f7e=s(_1);ohe=n(f7e,"STRONG",{});var Dmt=s(ohe);YOo=r(Dmt,"megatron-bert"),Dmt.forEach(t),KOo=r(f7e," \u2014 "),mV=n(f7e,"A",{href:!0});var Gmt=s(mV);ZOo=r(Gmt,"MegatronBertForQuestionAnswering"),Gmt.forEach(t),eVo=r(f7e," (MegatronBert model)"),f7e.forEach(t),oVo=i(X),b1=n(X,"LI",{});var g7e=s(b1);rhe=n(g7e,"STRONG",{});var Omt=s(rhe);rVo=r(Omt,"mobilebert"),Omt.forEach(t),tVo=r(g7e," \u2014 "),fV=n(g7e,"A",{href:!0});var Vmt=s(fV);aVo=r(Vmt,"MobileBertForQuestionAnswering"),Vmt.forEach(t),nVo=r(g7e," (MobileBERT model)"),g7e.forEach(t),sVo=i(X),v1=n(X,"LI",{});var h7e=s(v1);the=n(h7e,"STRONG",{});var Xmt=s(the);lVo=r(Xmt,"mpnet"),Xmt.forEach(t),iVo=r(h7e," \u2014 "),gV=n(h7e,"A",{href:!0});var zmt=s(gV);dVo=r(zmt,"MPNetForQuestionAnswering"),zmt.forEach(t),cVo=r(h7e," (MPNet model)"),h7e.forEach(t),mVo=i(X),F1=n(X,"LI",{});var u7e=s(F1);ahe=n(u7e,"STRONG",{});var Wmt=s(ahe);fVo=r(Wmt,"nystromformer"),Wmt.forEach(t),gVo=r(u7e," \u2014 "),hV=n(u7e,"A",{href:!0});var Qmt=s(hV);hVo=r(Qmt,"NystromformerForQuestionAnswering"),Qmt.forEach(t),uVo=r(u7e," (Nystromformer model)"),u7e.forEach(t),pVo=i(X),T1=n(X,"LI",{});var p7e=s(T1);nhe=n(p7e,"STRONG",{});var Hmt=s(nhe);_Vo=r(Hmt,"qdqbert"),Hmt.forEach(t),bVo=r(p7e," \u2014 "),uV=n(p7e,"A",{href:!0});var Umt=s(uV);vVo=r(Umt,"QDQBertForQuestionAnswering"),Umt.forEach(t),FVo=r(p7e," (QDQBert model)"),p7e.forEach(t),TVo=i(X),M1=n(X,"LI",{});var _7e=s(M1);she=n(_7e,"STRONG",{});var Jmt=s(she);MVo=r(Jmt,"reformer"),Jmt.forEach(t),EVo=r(_7e," \u2014 "),pV=n(_7e,"A",{href:!0});var Ymt=s(pV);CVo=r(Ymt,"ReformerForQuestionAnswering"),Ymt.forEach(t),wVo=r(_7e," (Reformer model)"),_7e.forEach(t),AVo=i(X),E1=n(X,"LI",{});var b7e=s(E1);lhe=n(b7e,"STRONG",{});var Kmt=s(lhe);yVo=r(Kmt,"rembert"),Kmt.forEach(t),LVo=r(b7e," \u2014 "),_V=n(b7e,"A",{href:!0});var Zmt=s(_V);xVo=r(Zmt,"RemBertForQuestionAnswering"),Zmt.forEach(t),$Vo=r(b7e," (RemBERT model)"),b7e.forEach(t),kVo=i(X),C1=n(X,"LI",{});var v7e=s(C1);ihe=n(v7e,"STRONG",{});var eft=s(ihe);SVo=r(eft,"roberta"),eft.forEach(t),RVo=r(v7e," \u2014 "),bV=n(v7e,"A",{href:!0});var oft=s(bV);PVo=r(oft,"RobertaForQuestionAnswering"),oft.forEach(t),BVo=r(v7e," (RoBERTa model)"),v7e.forEach(t),IVo=i(X),w1=n(X,"LI",{});var F7e=s(w1);dhe=n(F7e,"STRONG",{});var rft=s(dhe);qVo=r(rft,"roformer"),rft.forEach(t),NVo=r(F7e," \u2014 "),vV=n(F7e,"A",{href:!0});var tft=s(vV);jVo=r(tft,"RoFormerForQuestionAnswering"),tft.forEach(t),DVo=r(F7e," (RoFormer model)"),F7e.forEach(t),GVo=i(X),A1=n(X,"LI",{});var T7e=s(A1);che=n(T7e,"STRONG",{});var aft=s(che);OVo=r(aft,"splinter"),aft.forEach(t),VVo=r(T7e," \u2014 "),FV=n(T7e,"A",{href:!0});var nft=s(FV);XVo=r(nft,"SplinterForQuestionAnswering"),nft.forEach(t),zVo=r(T7e," (Splinter model)"),T7e.forEach(t),WVo=i(X),y1=n(X,"LI",{});var M7e=s(y1);mhe=n(M7e,"STRONG",{});var sft=s(mhe);QVo=r(sft,"squeezebert"),sft.forEach(t),HVo=r(M7e," \u2014 "),TV=n(M7e,"A",{href:!0});var lft=s(TV);UVo=r(lft,"SqueezeBertForQuestionAnswering"),lft.forEach(t),JVo=r(M7e," (SqueezeBERT model)"),M7e.forEach(t),YVo=i(X),L1=n(X,"LI",{});var E7e=s(L1);fhe=n(E7e,"STRONG",{});var ift=s(fhe);KVo=r(ift,"xlm"),ift.forEach(t),ZVo=r(E7e," \u2014 "),MV=n(E7e,"A",{href:!0});var dft=s(MV);eXo=r(dft,"XLMForQuestionAnsweringSimple"),dft.forEach(t),oXo=r(E7e," (XLM model)"),E7e.forEach(t),rXo=i(X),x1=n(X,"LI",{});var C7e=s(x1);ghe=n(C7e,"STRONG",{});var cft=s(ghe);tXo=r(cft,"xlm-roberta"),cft.forEach(t),aXo=r(C7e," \u2014 "),EV=n(C7e,"A",{href:!0});var mft=s(EV);nXo=r(mft,"XLMRobertaForQuestionAnswering"),mft.forEach(t),sXo=r(C7e," (XLM-RoBERTa model)"),C7e.forEach(t),lXo=i(X),$1=n(X,"LI",{});var w7e=s($1);hhe=n(w7e,"STRONG",{});var fft=s(hhe);iXo=r(fft,"xlm-roberta-xl"),fft.forEach(t),dXo=r(w7e," \u2014 "),CV=n(w7e,"A",{href:!0});var gft=s(CV);cXo=r(gft,"XLMRobertaXLForQuestionAnswering"),gft.forEach(t),mXo=r(w7e," (XLM-RoBERTa-XL model)"),w7e.forEach(t),fXo=i(X),k1=n(X,"LI",{});var A7e=s(k1);uhe=n(A7e,"STRONG",{});var hft=s(uhe);gXo=r(hft,"xlnet"),hft.forEach(t),hXo=r(A7e," \u2014 "),wV=n(A7e,"A",{href:!0});var uft=s(wV);uXo=r(uft,"XLNetForQuestionAnsweringSimple"),uft.forEach(t),pXo=r(A7e," (XLNet model)"),A7e.forEach(t),_Xo=i(X),S1=n(X,"LI",{});var y7e=s(S1);phe=n(y7e,"STRONG",{});var pft=s(phe);bXo=r(pft,"yoso"),pft.forEach(t),vXo=r(y7e," \u2014 "),AV=n(y7e,"A",{href:!0});var _ft=s(AV);FXo=r(_ft,"YosoForQuestionAnswering"),_ft.forEach(t),TXo=r(y7e," (YOSO model)"),y7e.forEach(t),X.forEach(t),MXo=i(ca),R1=n(ca,"P",{});var L7e=s(R1);EXo=r(L7e,"The model is set in evaluation mode by default using "),_he=n(L7e,"CODE",{});var bft=s(_he);CXo=r(bft,"model.eval()"),bft.forEach(t),wXo=r(L7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(L7e,"CODE",{});var vft=s(bhe);AXo=r(vft,"model.train()"),vft.forEach(t),L7e.forEach(t),yXo=i(ca),T(P1.$$.fragment,ca),ca.forEach(t),Js.forEach(t),aqe=i(m),ed=n(m,"H2",{class:!0});var ije=s(ed);B1=n(ije,"A",{id:!0,class:!0,href:!0});var Fft=s(B1);vhe=n(Fft,"SPAN",{});var Tft=s(vhe);T(xL.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),LXo=i(ije),Fhe=n(ije,"SPAN",{});var Mft=s(Fhe);xXo=r(Mft,"AutoModelForTableQuestionAnswering"),Mft.forEach(t),ije.forEach(t),nqe=i(m),No=n(m,"DIV",{class:!0});var Ys=s(No);T($L.$$.fragment,Ys),$Xo=i(Ys),od=n(Ys,"P",{});var QK=s(od);kXo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yV=n(QK,"A",{href:!0});var Eft=s(yV);SXo=r(Eft,"from_pretrained()"),Eft.forEach(t),RXo=r(QK," class method or the "),LV=n(QK,"A",{href:!0});var Cft=s(LV);PXo=r(Cft,"from_config()"),Cft.forEach(t),BXo=r(QK,` class
method.`),QK.forEach(t),IXo=i(Ys),kL=n(Ys,"P",{});var dje=s(kL);qXo=r(dje,"This class cannot be instantiated directly using "),The=n(dje,"CODE",{});var wft=s(The);NXo=r(wft,"__init__()"),wft.forEach(t),jXo=r(dje," (throws an error)."),dje.forEach(t),DXo=i(Ys),gt=n(Ys,"DIV",{class:!0});var k6=s(gt);T(SL.$$.fragment,k6),GXo=i(k6),Mhe=n(k6,"P",{});var Aft=s(Mhe);OXo=r(Aft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Aft.forEach(t),VXo=i(k6),rd=n(k6,"P",{});var HK=s(rd);XXo=r(HK,`Note:
Loading a model from its configuration file does `),Ehe=n(HK,"STRONG",{});var yft=s(Ehe);zXo=r(yft,"not"),yft.forEach(t),WXo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(HK,"A",{href:!0});var Lft=s(xV);QXo=r(Lft,"from_pretrained()"),Lft.forEach(t),HXo=r(HK," to load the model weights."),HK.forEach(t),UXo=i(k6),T(I1.$$.fragment,k6),k6.forEach(t),JXo=i(Ys),so=n(Ys,"DIV",{class:!0});var ma=s(so);T(RL.$$.fragment,ma),YXo=i(ma),Che=n(ma,"P",{});var xft=s(Che);KXo=r(xft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xft.forEach(t),ZXo=i(ma),Na=n(ma,"P",{});var S6=s(Na);ezo=r(S6,"The model class to instantiate is selected based on the "),whe=n(S6,"CODE",{});var $ft=s(whe);ozo=r($ft,"model_type"),$ft.forEach(t),rzo=r(S6,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(S6,"CODE",{});var kft=s(Ahe);tzo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),azo=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(S6,"CODE",{});var Sft=s(yhe);nzo=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),szo=r(S6,":"),S6.forEach(t),lzo=i(ma),Lhe=n(ma,"UL",{});var Rft=s(Lhe);q1=n(Rft,"LI",{});var x7e=s(q1);xhe=n(x7e,"STRONG",{});var Pft=s(xhe);izo=r(Pft,"tapas"),Pft.forEach(t),dzo=r(x7e," \u2014 "),$V=n(x7e,"A",{href:!0});var Bft=s($V);czo=r(Bft,"TapasForQuestionAnswering"),Bft.forEach(t),mzo=r(x7e," (TAPAS model)"),x7e.forEach(t),Rft.forEach(t),fzo=i(ma),N1=n(ma,"P",{});var $7e=s(N1);gzo=r($7e,"The model is set in evaluation mode by default using "),$he=n($7e,"CODE",{});var Ift=s($he);hzo=r(Ift,"model.eval()"),Ift.forEach(t),uzo=r($7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n($7e,"CODE",{});var qft=s(khe);pzo=r(qft,"model.train()"),qft.forEach(t),$7e.forEach(t),_zo=i(ma),T(j1.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),sqe=i(m),td=n(m,"H2",{class:!0});var cje=s(td);D1=n(cje,"A",{id:!0,class:!0,href:!0});var Nft=s(D1);She=n(Nft,"SPAN",{});var jft=s(She);T(PL.$$.fragment,jft),jft.forEach(t),Nft.forEach(t),bzo=i(cje),Rhe=n(cje,"SPAN",{});var Dft=s(Rhe);vzo=r(Dft,"AutoModelForImageClassification"),Dft.forEach(t),cje.forEach(t),lqe=i(m),jo=n(m,"DIV",{class:!0});var Ks=s(jo);T(BL.$$.fragment,Ks),Fzo=i(Ks),ad=n(Ks,"P",{});var UK=s(ad);Tzo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kV=n(UK,"A",{href:!0});var Gft=s(kV);Mzo=r(Gft,"from_pretrained()"),Gft.forEach(t),Ezo=r(UK," class method or the "),SV=n(UK,"A",{href:!0});var Oft=s(SV);Czo=r(Oft,"from_config()"),Oft.forEach(t),wzo=r(UK,` class
method.`),UK.forEach(t),Azo=i(Ks),IL=n(Ks,"P",{});var mje=s(IL);yzo=r(mje,"This class cannot be instantiated directly using "),Phe=n(mje,"CODE",{});var Vft=s(Phe);Lzo=r(Vft,"__init__()"),Vft.forEach(t),xzo=r(mje," (throws an error)."),mje.forEach(t),$zo=i(Ks),ht=n(Ks,"DIV",{class:!0});var R6=s(ht);T(qL.$$.fragment,R6),kzo=i(R6),Bhe=n(R6,"P",{});var Xft=s(Bhe);Szo=r(Xft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xft.forEach(t),Rzo=i(R6),nd=n(R6,"P",{});var JK=s(nd);Pzo=r(JK,`Note:
Loading a model from its configuration file does `),Ihe=n(JK,"STRONG",{});var zft=s(Ihe);Bzo=r(zft,"not"),zft.forEach(t),Izo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(JK,"A",{href:!0});var Wft=s(RV);qzo=r(Wft,"from_pretrained()"),Wft.forEach(t),Nzo=r(JK," to load the model weights."),JK.forEach(t),jzo=i(R6),T(G1.$$.fragment,R6),R6.forEach(t),Dzo=i(Ks),lo=n(Ks,"DIV",{class:!0});var fa=s(lo);T(NL.$$.fragment,fa),Gzo=i(fa),qhe=n(fa,"P",{});var Qft=s(qhe);Ozo=r(Qft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qft.forEach(t),Vzo=i(fa),ja=n(fa,"P",{});var P6=s(ja);Xzo=r(P6,"The model class to instantiate is selected based on the "),Nhe=n(P6,"CODE",{});var Hft=s(Nhe);zzo=r(Hft,"model_type"),Hft.forEach(t),Wzo=r(P6,` property of the config object (either
passed as an argument or loaded from `),jhe=n(P6,"CODE",{});var Uft=s(jhe);Qzo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),Hzo=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(P6,"CODE",{});var Jft=s(Dhe);Uzo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),Jzo=r(P6,":"),P6.forEach(t),Yzo=i(fa),Fe=n(fa,"UL",{});var Ee=s(Fe);O1=n(Ee,"LI",{});var k7e=s(O1);Ghe=n(k7e,"STRONG",{});var Yft=s(Ghe);Kzo=r(Yft,"beit"),Yft.forEach(t),Zzo=r(k7e," \u2014 "),PV=n(k7e,"A",{href:!0});var Kft=s(PV);eWo=r(Kft,"BeitForImageClassification"),Kft.forEach(t),oWo=r(k7e," (BEiT model)"),k7e.forEach(t),rWo=i(Ee),V1=n(Ee,"LI",{});var S7e=s(V1);Ohe=n(S7e,"STRONG",{});var Zft=s(Ohe);tWo=r(Zft,"convnext"),Zft.forEach(t),aWo=r(S7e," \u2014 "),BV=n(S7e,"A",{href:!0});var egt=s(BV);nWo=r(egt,"ConvNextForImageClassification"),egt.forEach(t),sWo=r(S7e," (ConvNext model)"),S7e.forEach(t),lWo=i(Ee),X1=n(Ee,"LI",{});var R7e=s(X1);Vhe=n(R7e,"STRONG",{});var ogt=s(Vhe);iWo=r(ogt,"data2vec-vision"),ogt.forEach(t),dWo=r(R7e," \u2014 "),IV=n(R7e,"A",{href:!0});var rgt=s(IV);cWo=r(rgt,"Data2VecVisionForImageClassification"),rgt.forEach(t),mWo=r(R7e," (Data2VecVision model)"),R7e.forEach(t),fWo=i(Ee),Ps=n(Ee,"LI",{});var M$=s(Ps);Xhe=n(M$,"STRONG",{});var tgt=s(Xhe);gWo=r(tgt,"deit"),tgt.forEach(t),hWo=r(M$," \u2014 "),qV=n(M$,"A",{href:!0});var agt=s(qV);uWo=r(agt,"DeiTForImageClassification"),agt.forEach(t),pWo=r(M$," or "),NV=n(M$,"A",{href:!0});var ngt=s(NV);_Wo=r(ngt,"DeiTForImageClassificationWithTeacher"),ngt.forEach(t),bWo=r(M$," (DeiT model)"),M$.forEach(t),vWo=i(Ee),z1=n(Ee,"LI",{});var P7e=s(z1);zhe=n(P7e,"STRONG",{});var sgt=s(zhe);FWo=r(sgt,"imagegpt"),sgt.forEach(t),TWo=r(P7e," \u2014 "),jV=n(P7e,"A",{href:!0});var lgt=s(jV);MWo=r(lgt,"ImageGPTForImageClassification"),lgt.forEach(t),EWo=r(P7e," (ImageGPT model)"),P7e.forEach(t),CWo=i(Ee),ut=n(Ee,"LI",{});var fm=s(ut);Whe=n(fm,"STRONG",{});var igt=s(Whe);wWo=r(igt,"perceiver"),igt.forEach(t),AWo=r(fm," \u2014 "),DV=n(fm,"A",{href:!0});var dgt=s(DV);yWo=r(dgt,"PerceiverForImageClassificationLearned"),dgt.forEach(t),LWo=r(fm," or "),GV=n(fm,"A",{href:!0});var cgt=s(GV);xWo=r(cgt,"PerceiverForImageClassificationFourier"),cgt.forEach(t),$Wo=r(fm," or "),OV=n(fm,"A",{href:!0});var mgt=s(OV);kWo=r(mgt,"PerceiverForImageClassificationConvProcessing"),mgt.forEach(t),SWo=r(fm," (Perceiver model)"),fm.forEach(t),RWo=i(Ee),W1=n(Ee,"LI",{});var B7e=s(W1);Qhe=n(B7e,"STRONG",{});var fgt=s(Qhe);PWo=r(fgt,"poolformer"),fgt.forEach(t),BWo=r(B7e," \u2014 "),VV=n(B7e,"A",{href:!0});var ggt=s(VV);IWo=r(ggt,"PoolFormerForImageClassification"),ggt.forEach(t),qWo=r(B7e," (PoolFormer model)"),B7e.forEach(t),NWo=i(Ee),Q1=n(Ee,"LI",{});var I7e=s(Q1);Hhe=n(I7e,"STRONG",{});var hgt=s(Hhe);jWo=r(hgt,"regnet"),hgt.forEach(t),DWo=r(I7e," \u2014 "),XV=n(I7e,"A",{href:!0});var ugt=s(XV);GWo=r(ugt,"RegNetForImageClassification"),ugt.forEach(t),OWo=r(I7e," (RegNet model)"),I7e.forEach(t),VWo=i(Ee),H1=n(Ee,"LI",{});var q7e=s(H1);Uhe=n(q7e,"STRONG",{});var pgt=s(Uhe);XWo=r(pgt,"resnet"),pgt.forEach(t),zWo=r(q7e," \u2014 "),zV=n(q7e,"A",{href:!0});var _gt=s(zV);WWo=r(_gt,"ResNetForImageClassification"),_gt.forEach(t),QWo=r(q7e," (ResNet model)"),q7e.forEach(t),HWo=i(Ee),U1=n(Ee,"LI",{});var N7e=s(U1);Jhe=n(N7e,"STRONG",{});var bgt=s(Jhe);UWo=r(bgt,"segformer"),bgt.forEach(t),JWo=r(N7e," \u2014 "),WV=n(N7e,"A",{href:!0});var vgt=s(WV);YWo=r(vgt,"SegformerForImageClassification"),vgt.forEach(t),KWo=r(N7e," (SegFormer model)"),N7e.forEach(t),ZWo=i(Ee),J1=n(Ee,"LI",{});var j7e=s(J1);Yhe=n(j7e,"STRONG",{});var Fgt=s(Yhe);eQo=r(Fgt,"swin"),Fgt.forEach(t),oQo=r(j7e," \u2014 "),QV=n(j7e,"A",{href:!0});var Tgt=s(QV);rQo=r(Tgt,"SwinForImageClassification"),Tgt.forEach(t),tQo=r(j7e," (Swin model)"),j7e.forEach(t),aQo=i(Ee),Y1=n(Ee,"LI",{});var D7e=s(Y1);Khe=n(D7e,"STRONG",{});var Mgt=s(Khe);nQo=r(Mgt,"van"),Mgt.forEach(t),sQo=r(D7e," \u2014 "),HV=n(D7e,"A",{href:!0});var Egt=s(HV);lQo=r(Egt,"VanForImageClassification"),Egt.forEach(t),iQo=r(D7e," (VAN model)"),D7e.forEach(t),dQo=i(Ee),K1=n(Ee,"LI",{});var G7e=s(K1);Zhe=n(G7e,"STRONG",{});var Cgt=s(Zhe);cQo=r(Cgt,"vit"),Cgt.forEach(t),mQo=r(G7e," \u2014 "),UV=n(G7e,"A",{href:!0});var wgt=s(UV);fQo=r(wgt,"ViTForImageClassification"),wgt.forEach(t),gQo=r(G7e," (ViT model)"),G7e.forEach(t),Ee.forEach(t),hQo=i(fa),Z1=n(fa,"P",{});var O7e=s(Z1);uQo=r(O7e,"The model is set in evaluation mode by default using "),eue=n(O7e,"CODE",{});var Agt=s(eue);pQo=r(Agt,"model.eval()"),Agt.forEach(t),_Qo=r(O7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=n(O7e,"CODE",{});var ygt=s(oue);bQo=r(ygt,"model.train()"),ygt.forEach(t),O7e.forEach(t),vQo=i(fa),T(eT.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),iqe=i(m),sd=n(m,"H2",{class:!0});var fje=s(sd);oT=n(fje,"A",{id:!0,class:!0,href:!0});var Lgt=s(oT);rue=n(Lgt,"SPAN",{});var xgt=s(rue);T(jL.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),FQo=i(fje),tue=n(fje,"SPAN",{});var $gt=s(tue);TQo=r($gt,"AutoModelForVision2Seq"),$gt.forEach(t),fje.forEach(t),dqe=i(m),Do=n(m,"DIV",{class:!0});var Zs=s(Do);T(DL.$$.fragment,Zs),MQo=i(Zs),ld=n(Zs,"P",{});var YK=s(ld);EQo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JV=n(YK,"A",{href:!0});var kgt=s(JV);CQo=r(kgt,"from_pretrained()"),kgt.forEach(t),wQo=r(YK," class method or the "),YV=n(YK,"A",{href:!0});var Sgt=s(YV);AQo=r(Sgt,"from_config()"),Sgt.forEach(t),yQo=r(YK,` class
method.`),YK.forEach(t),LQo=i(Zs),GL=n(Zs,"P",{});var gje=s(GL);xQo=r(gje,"This class cannot be instantiated directly using "),aue=n(gje,"CODE",{});var Rgt=s(aue);$Qo=r(Rgt,"__init__()"),Rgt.forEach(t),kQo=r(gje," (throws an error)."),gje.forEach(t),SQo=i(Zs),pt=n(Zs,"DIV",{class:!0});var B6=s(pt);T(OL.$$.fragment,B6),RQo=i(B6),nue=n(B6,"P",{});var Pgt=s(nue);PQo=r(Pgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pgt.forEach(t),BQo=i(B6),id=n(B6,"P",{});var KK=s(id);IQo=r(KK,`Note:
Loading a model from its configuration file does `),sue=n(KK,"STRONG",{});var Bgt=s(sue);qQo=r(Bgt,"not"),Bgt.forEach(t),NQo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(KK,"A",{href:!0});var Igt=s(KV);jQo=r(Igt,"from_pretrained()"),Igt.forEach(t),DQo=r(KK," to load the model weights."),KK.forEach(t),GQo=i(B6),T(rT.$$.fragment,B6),B6.forEach(t),OQo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(VL.$$.fragment,ga),VQo=i(ga),lue=n(ga,"P",{});var qgt=s(lue);XQo=r(qgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qgt.forEach(t),zQo=i(ga),Da=n(ga,"P",{});var I6=s(Da);WQo=r(I6,"The model class to instantiate is selected based on the "),iue=n(I6,"CODE",{});var Ngt=s(iue);QQo=r(Ngt,"model_type"),Ngt.forEach(t),HQo=r(I6,` property of the config object (either
passed as an argument or loaded from `),due=n(I6,"CODE",{});var jgt=s(due);UQo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),JQo=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=n(I6,"CODE",{});var Dgt=s(cue);YQo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),KQo=r(I6,":"),I6.forEach(t),ZQo=i(ga),mue=n(ga,"UL",{});var Ggt=s(mue);tT=n(Ggt,"LI",{});var V7e=s(tT);fue=n(V7e,"STRONG",{});var Ogt=s(fue);eHo=r(Ogt,"vision-encoder-decoder"),Ogt.forEach(t),oHo=r(V7e," \u2014 "),ZV=n(V7e,"A",{href:!0});var Vgt=s(ZV);rHo=r(Vgt,"VisionEncoderDecoderModel"),Vgt.forEach(t),tHo=r(V7e," (Vision Encoder decoder model)"),V7e.forEach(t),Ggt.forEach(t),aHo=i(ga),aT=n(ga,"P",{});var X7e=s(aT);nHo=r(X7e,"The model is set in evaluation mode by default using "),gue=n(X7e,"CODE",{});var Xgt=s(gue);sHo=r(Xgt,"model.eval()"),Xgt.forEach(t),lHo=r(X7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=n(X7e,"CODE",{});var zgt=s(hue);iHo=r(zgt,"model.train()"),zgt.forEach(t),X7e.forEach(t),dHo=i(ga),T(nT.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),cqe=i(m),dd=n(m,"H2",{class:!0});var hje=s(dd);sT=n(hje,"A",{id:!0,class:!0,href:!0});var Wgt=s(sT);uue=n(Wgt,"SPAN",{});var Qgt=s(uue);T(XL.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),cHo=i(hje),pue=n(hje,"SPAN",{});var Hgt=s(pue);mHo=r(Hgt,"AutoModelForAudioClassification"),Hgt.forEach(t),hje.forEach(t),mqe=i(m),Go=n(m,"DIV",{class:!0});var el=s(Go);T(zL.$$.fragment,el),fHo=i(el),cd=n(el,"P",{});var ZK=s(cd);gHo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eX=n(ZK,"A",{href:!0});var Ugt=s(eX);hHo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),uHo=r(ZK," class method or the "),oX=n(ZK,"A",{href:!0});var Jgt=s(oX);pHo=r(Jgt,"from_config()"),Jgt.forEach(t),_Ho=r(ZK,` class
method.`),ZK.forEach(t),bHo=i(el),WL=n(el,"P",{});var uje=s(WL);vHo=r(uje,"This class cannot be instantiated directly using "),_ue=n(uje,"CODE",{});var Ygt=s(_ue);FHo=r(Ygt,"__init__()"),Ygt.forEach(t),THo=r(uje," (throws an error)."),uje.forEach(t),MHo=i(el),_t=n(el,"DIV",{class:!0});var q6=s(_t);T(QL.$$.fragment,q6),EHo=i(q6),bue=n(q6,"P",{});var Kgt=s(bue);CHo=r(Kgt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Kgt.forEach(t),wHo=i(q6),md=n(q6,"P",{});var eZ=s(md);AHo=r(eZ,`Note:
Loading a model from its configuration file does `),vue=n(eZ,"STRONG",{});var Zgt=s(vue);yHo=r(Zgt,"not"),Zgt.forEach(t),LHo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(eZ,"A",{href:!0});var eht=s(rX);xHo=r(eht,"from_pretrained()"),eht.forEach(t),$Ho=r(eZ," to load the model weights."),eZ.forEach(t),kHo=i(q6),T(lT.$$.fragment,q6),q6.forEach(t),SHo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(HL.$$.fragment,ha),RHo=i(ha),Fue=n(ha,"P",{});var oht=s(Fue);PHo=r(oht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oht.forEach(t),BHo=i(ha),Ga=n(ha,"P",{});var N6=s(Ga);IHo=r(N6,"The model class to instantiate is selected based on the "),Tue=n(N6,"CODE",{});var rht=s(Tue);qHo=r(rht,"model_type"),rht.forEach(t),NHo=r(N6,` property of the config object (either
passed as an argument or loaded from `),Mue=n(N6,"CODE",{});var tht=s(Mue);jHo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),DHo=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(N6,"CODE",{});var aht=s(Eue);GHo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),OHo=r(N6,":"),N6.forEach(t),VHo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);iT=n(Oe,"LI",{});var z7e=s(iT);Cue=n(z7e,"STRONG",{});var nht=s(Cue);XHo=r(nht,"data2vec-audio"),nht.forEach(t),zHo=r(z7e," \u2014 "),tX=n(z7e,"A",{href:!0});var sht=s(tX);WHo=r(sht,"Data2VecAudioForSequenceClassification"),sht.forEach(t),QHo=r(z7e," (Data2VecAudio model)"),z7e.forEach(t),HHo=i(Oe),dT=n(Oe,"LI",{});var W7e=s(dT);wue=n(W7e,"STRONG",{});var lht=s(wue);UHo=r(lht,"hubert"),lht.forEach(t),JHo=r(W7e," \u2014 "),aX=n(W7e,"A",{href:!0});var iht=s(aX);YHo=r(iht,"HubertForSequenceClassification"),iht.forEach(t),KHo=r(W7e," (Hubert model)"),W7e.forEach(t),ZHo=i(Oe),cT=n(Oe,"LI",{});var Q7e=s(cT);Aue=n(Q7e,"STRONG",{});var dht=s(Aue);eUo=r(dht,"sew"),dht.forEach(t),oUo=r(Q7e," \u2014 "),nX=n(Q7e,"A",{href:!0});var cht=s(nX);rUo=r(cht,"SEWForSequenceClassification"),cht.forEach(t),tUo=r(Q7e," (SEW model)"),Q7e.forEach(t),aUo=i(Oe),mT=n(Oe,"LI",{});var H7e=s(mT);yue=n(H7e,"STRONG",{});var mht=s(yue);nUo=r(mht,"sew-d"),mht.forEach(t),sUo=r(H7e," \u2014 "),sX=n(H7e,"A",{href:!0});var fht=s(sX);lUo=r(fht,"SEWDForSequenceClassification"),fht.forEach(t),iUo=r(H7e," (SEW-D model)"),H7e.forEach(t),dUo=i(Oe),fT=n(Oe,"LI",{});var U7e=s(fT);Lue=n(U7e,"STRONG",{});var ght=s(Lue);cUo=r(ght,"unispeech"),ght.forEach(t),mUo=r(U7e," \u2014 "),lX=n(U7e,"A",{href:!0});var hht=s(lX);fUo=r(hht,"UniSpeechForSequenceClassification"),hht.forEach(t),gUo=r(U7e," (UniSpeech model)"),U7e.forEach(t),hUo=i(Oe),gT=n(Oe,"LI",{});var J7e=s(gT);xue=n(J7e,"STRONG",{});var uht=s(xue);uUo=r(uht,"unispeech-sat"),uht.forEach(t),pUo=r(J7e," \u2014 "),iX=n(J7e,"A",{href:!0});var pht=s(iX);_Uo=r(pht,"UniSpeechSatForSequenceClassification"),pht.forEach(t),bUo=r(J7e," (UniSpeechSat model)"),J7e.forEach(t),vUo=i(Oe),hT=n(Oe,"LI",{});var Y7e=s(hT);$ue=n(Y7e,"STRONG",{});var _ht=s($ue);FUo=r(_ht,"wav2vec2"),_ht.forEach(t),TUo=r(Y7e," \u2014 "),dX=n(Y7e,"A",{href:!0});var bht=s(dX);MUo=r(bht,"Wav2Vec2ForSequenceClassification"),bht.forEach(t),EUo=r(Y7e," (Wav2Vec2 model)"),Y7e.forEach(t),CUo=i(Oe),uT=n(Oe,"LI",{});var K7e=s(uT);kue=n(K7e,"STRONG",{});var vht=s(kue);wUo=r(vht,"wav2vec2-conformer"),vht.forEach(t),AUo=r(K7e," \u2014 "),cX=n(K7e,"A",{href:!0});var Fht=s(cX);yUo=r(Fht,"Wav2Vec2ConformerForSequenceClassification"),Fht.forEach(t),LUo=r(K7e," (Wav2Vec2-Conformer model)"),K7e.forEach(t),xUo=i(Oe),pT=n(Oe,"LI",{});var Z7e=s(pT);Sue=n(Z7e,"STRONG",{});var Tht=s(Sue);$Uo=r(Tht,"wavlm"),Tht.forEach(t),kUo=r(Z7e," \u2014 "),mX=n(Z7e,"A",{href:!0});var Mht=s(mX);SUo=r(Mht,"WavLMForSequenceClassification"),Mht.forEach(t),RUo=r(Z7e," (WavLM model)"),Z7e.forEach(t),Oe.forEach(t),PUo=i(ha),_T=n(ha,"P",{});var e$e=s(_T);BUo=r(e$e,"The model is set in evaluation mode by default using "),Rue=n(e$e,"CODE",{});var Eht=s(Rue);IUo=r(Eht,"model.eval()"),Eht.forEach(t),qUo=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(e$e,"CODE",{});var Cht=s(Pue);NUo=r(Cht,"model.train()"),Cht.forEach(t),e$e.forEach(t),jUo=i(ha),T(bT.$$.fragment,ha),ha.forEach(t),el.forEach(t),fqe=i(m),fd=n(m,"H2",{class:!0});var pje=s(fd);vT=n(pje,"A",{id:!0,class:!0,href:!0});var wht=s(vT);Bue=n(wht,"SPAN",{});var Aht=s(Bue);T(UL.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),DUo=i(pje),Iue=n(pje,"SPAN",{});var yht=s(Iue);GUo=r(yht,"AutoModelForAudioFrameClassification"),yht.forEach(t),pje.forEach(t),gqe=i(m),Oo=n(m,"DIV",{class:!0});var ol=s(Oo);T(JL.$$.fragment,ol),OUo=i(ol),gd=n(ol,"P",{});var oZ=s(gd);VUo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),fX=n(oZ,"A",{href:!0});var Lht=s(fX);XUo=r(Lht,"from_pretrained()"),Lht.forEach(t),zUo=r(oZ," class method or the "),gX=n(oZ,"A",{href:!0});var xht=s(gX);WUo=r(xht,"from_config()"),xht.forEach(t),QUo=r(oZ,` class
method.`),oZ.forEach(t),HUo=i(ol),YL=n(ol,"P",{});var _je=s(YL);UUo=r(_je,"This class cannot be instantiated directly using "),que=n(_je,"CODE",{});var $ht=s(que);JUo=r($ht,"__init__()"),$ht.forEach(t),YUo=r(_je," (throws an error)."),_je.forEach(t),KUo=i(ol),bt=n(ol,"DIV",{class:!0});var j6=s(bt);T(KL.$$.fragment,j6),ZUo=i(j6),Nue=n(j6,"P",{});var kht=s(Nue);eJo=r(kht,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kht.forEach(t),oJo=i(j6),hd=n(j6,"P",{});var rZ=s(hd);rJo=r(rZ,`Note:
Loading a model from its configuration file does `),jue=n(rZ,"STRONG",{});var Sht=s(jue);tJo=r(Sht,"not"),Sht.forEach(t),aJo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(rZ,"A",{href:!0});var Rht=s(hX);nJo=r(Rht,"from_pretrained()"),Rht.forEach(t),sJo=r(rZ," to load the model weights."),rZ.forEach(t),lJo=i(j6),T(FT.$$.fragment,j6),j6.forEach(t),iJo=i(ol),mo=n(ol,"DIV",{class:!0});var ua=s(mo);T(ZL.$$.fragment,ua),dJo=i(ua),Due=n(ua,"P",{});var Pht=s(Due);cJo=r(Pht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Pht.forEach(t),mJo=i(ua),Oa=n(ua,"P",{});var D6=s(Oa);fJo=r(D6,"The model class to instantiate is selected based on the "),Gue=n(D6,"CODE",{});var Bht=s(Gue);gJo=r(Bht,"model_type"),Bht.forEach(t),hJo=r(D6,` property of the config object (either
passed as an argument or loaded from `),Oue=n(D6,"CODE",{});var Iht=s(Oue);uJo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),pJo=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(D6,"CODE",{});var qht=s(Vue);_Jo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),bJo=r(D6,":"),D6.forEach(t),vJo=i(ua),Kr=n(ua,"UL",{});var rl=s(Kr);TT=n(rl,"LI",{});var o$e=s(TT);Xue=n(o$e,"STRONG",{});var Nht=s(Xue);FJo=r(Nht,"data2vec-audio"),Nht.forEach(t),TJo=r(o$e," \u2014 "),uX=n(o$e,"A",{href:!0});var jht=s(uX);MJo=r(jht,"Data2VecAudioForAudioFrameClassification"),jht.forEach(t),EJo=r(o$e," (Data2VecAudio model)"),o$e.forEach(t),CJo=i(rl),MT=n(rl,"LI",{});var r$e=s(MT);zue=n(r$e,"STRONG",{});var Dht=s(zue);wJo=r(Dht,"unispeech-sat"),Dht.forEach(t),AJo=r(r$e," \u2014 "),pX=n(r$e,"A",{href:!0});var Ght=s(pX);yJo=r(Ght,"UniSpeechSatForAudioFrameClassification"),Ght.forEach(t),LJo=r(r$e," (UniSpeechSat model)"),r$e.forEach(t),xJo=i(rl),ET=n(rl,"LI",{});var t$e=s(ET);Wue=n(t$e,"STRONG",{});var Oht=s(Wue);$Jo=r(Oht,"wav2vec2"),Oht.forEach(t),kJo=r(t$e," \u2014 "),_X=n(t$e,"A",{href:!0});var Vht=s(_X);SJo=r(Vht,"Wav2Vec2ForAudioFrameClassification"),Vht.forEach(t),RJo=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),PJo=i(rl),CT=n(rl,"LI",{});var a$e=s(CT);Que=n(a$e,"STRONG",{});var Xht=s(Que);BJo=r(Xht,"wav2vec2-conformer"),Xht.forEach(t),IJo=r(a$e," \u2014 "),bX=n(a$e,"A",{href:!0});var zht=s(bX);qJo=r(zht,"Wav2Vec2ConformerForAudioFrameClassification"),zht.forEach(t),NJo=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),jJo=i(rl),wT=n(rl,"LI",{});var n$e=s(wT);Hue=n(n$e,"STRONG",{});var Wht=s(Hue);DJo=r(Wht,"wavlm"),Wht.forEach(t),GJo=r(n$e," \u2014 "),vX=n(n$e,"A",{href:!0});var Qht=s(vX);OJo=r(Qht,"WavLMForAudioFrameClassification"),Qht.forEach(t),VJo=r(n$e," (WavLM model)"),n$e.forEach(t),rl.forEach(t),XJo=i(ua),AT=n(ua,"P",{});var s$e=s(AT);zJo=r(s$e,"The model is set in evaluation mode by default using "),Uue=n(s$e,"CODE",{});var Hht=s(Uue);WJo=r(Hht,"model.eval()"),Hht.forEach(t),QJo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=n(s$e,"CODE",{});var Uht=s(Jue);HJo=r(Uht,"model.train()"),Uht.forEach(t),s$e.forEach(t),UJo=i(ua),T(yT.$$.fragment,ua),ua.forEach(t),ol.forEach(t),hqe=i(m),ud=n(m,"H2",{class:!0});var bje=s(ud);LT=n(bje,"A",{id:!0,class:!0,href:!0});var Jht=s(LT);Yue=n(Jht,"SPAN",{});var Yht=s(Yue);T(e8.$$.fragment,Yht),Yht.forEach(t),Jht.forEach(t),JJo=i(bje),Kue=n(bje,"SPAN",{});var Kht=s(Kue);YJo=r(Kht,"AutoModelForCTC"),Kht.forEach(t),bje.forEach(t),uqe=i(m),Vo=n(m,"DIV",{class:!0});var tl=s(Vo);T(o8.$$.fragment,tl),KJo=i(tl),pd=n(tl,"P",{});var tZ=s(pd);ZJo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FX=n(tZ,"A",{href:!0});var Zht=s(FX);eYo=r(Zht,"from_pretrained()"),Zht.forEach(t),oYo=r(tZ," class method or the "),TX=n(tZ,"A",{href:!0});var eut=s(TX);rYo=r(eut,"from_config()"),eut.forEach(t),tYo=r(tZ,` class
method.`),tZ.forEach(t),aYo=i(tl),r8=n(tl,"P",{});var vje=s(r8);nYo=r(vje,"This class cannot be instantiated directly using "),Zue=n(vje,"CODE",{});var out=s(Zue);sYo=r(out,"__init__()"),out.forEach(t),lYo=r(vje," (throws an error)."),vje.forEach(t),iYo=i(tl),vt=n(tl,"DIV",{class:!0});var G6=s(vt);T(t8.$$.fragment,G6),dYo=i(G6),epe=n(G6,"P",{});var rut=s(epe);cYo=r(rut,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rut.forEach(t),mYo=i(G6),_d=n(G6,"P",{});var aZ=s(_d);fYo=r(aZ,`Note:
Loading a model from its configuration file does `),ope=n(aZ,"STRONG",{});var tut=s(ope);gYo=r(tut,"not"),tut.forEach(t),hYo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(aZ,"A",{href:!0});var aut=s(MX);uYo=r(aut,"from_pretrained()"),aut.forEach(t),pYo=r(aZ," to load the model weights."),aZ.forEach(t),_Yo=i(G6),T(xT.$$.fragment,G6),G6.forEach(t),bYo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(a8.$$.fragment,pa),vYo=i(pa),rpe=n(pa,"P",{});var nut=s(rpe);FYo=r(nut,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),nut.forEach(t),TYo=i(pa),Va=n(pa,"P",{});var O6=s(Va);MYo=r(O6,"The model class to instantiate is selected based on the "),tpe=n(O6,"CODE",{});var sut=s(tpe);EYo=r(sut,"model_type"),sut.forEach(t),CYo=r(O6,` property of the config object (either
passed as an argument or loaded from `),ape=n(O6,"CODE",{});var lut=s(ape);wYo=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),AYo=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=n(O6,"CODE",{});var iut=s(npe);yYo=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),LYo=r(O6,":"),O6.forEach(t),xYo=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);$T=n(Ve,"LI",{});var l$e=s($T);spe=n(l$e,"STRONG",{});var dut=s(spe);$Yo=r(dut,"data2vec-audio"),dut.forEach(t),kYo=r(l$e," \u2014 "),EX=n(l$e,"A",{href:!0});var cut=s(EX);SYo=r(cut,"Data2VecAudioForCTC"),cut.forEach(t),RYo=r(l$e," (Data2VecAudio model)"),l$e.forEach(t),PYo=i(Ve),kT=n(Ve,"LI",{});var i$e=s(kT);lpe=n(i$e,"STRONG",{});var mut=s(lpe);BYo=r(mut,"hubert"),mut.forEach(t),IYo=r(i$e," \u2014 "),CX=n(i$e,"A",{href:!0});var fut=s(CX);qYo=r(fut,"HubertForCTC"),fut.forEach(t),NYo=r(i$e," (Hubert model)"),i$e.forEach(t),jYo=i(Ve),ST=n(Ve,"LI",{});var d$e=s(ST);ipe=n(d$e,"STRONG",{});var gut=s(ipe);DYo=r(gut,"sew"),gut.forEach(t),GYo=r(d$e," \u2014 "),wX=n(d$e,"A",{href:!0});var hut=s(wX);OYo=r(hut,"SEWForCTC"),hut.forEach(t),VYo=r(d$e," (SEW model)"),d$e.forEach(t),XYo=i(Ve),RT=n(Ve,"LI",{});var c$e=s(RT);dpe=n(c$e,"STRONG",{});var uut=s(dpe);zYo=r(uut,"sew-d"),uut.forEach(t),WYo=r(c$e," \u2014 "),AX=n(c$e,"A",{href:!0});var put=s(AX);QYo=r(put,"SEWDForCTC"),put.forEach(t),HYo=r(c$e," (SEW-D model)"),c$e.forEach(t),UYo=i(Ve),PT=n(Ve,"LI",{});var m$e=s(PT);cpe=n(m$e,"STRONG",{});var _ut=s(cpe);JYo=r(_ut,"unispeech"),_ut.forEach(t),YYo=r(m$e," \u2014 "),yX=n(m$e,"A",{href:!0});var but=s(yX);KYo=r(but,"UniSpeechForCTC"),but.forEach(t),ZYo=r(m$e," (UniSpeech model)"),m$e.forEach(t),eKo=i(Ve),BT=n(Ve,"LI",{});var f$e=s(BT);mpe=n(f$e,"STRONG",{});var vut=s(mpe);oKo=r(vut,"unispeech-sat"),vut.forEach(t),rKo=r(f$e," \u2014 "),LX=n(f$e,"A",{href:!0});var Fut=s(LX);tKo=r(Fut,"UniSpeechSatForCTC"),Fut.forEach(t),aKo=r(f$e," (UniSpeechSat model)"),f$e.forEach(t),nKo=i(Ve),IT=n(Ve,"LI",{});var g$e=s(IT);fpe=n(g$e,"STRONG",{});var Tut=s(fpe);sKo=r(Tut,"wav2vec2"),Tut.forEach(t),lKo=r(g$e," \u2014 "),xX=n(g$e,"A",{href:!0});var Mut=s(xX);iKo=r(Mut,"Wav2Vec2ForCTC"),Mut.forEach(t),dKo=r(g$e," (Wav2Vec2 model)"),g$e.forEach(t),cKo=i(Ve),qT=n(Ve,"LI",{});var h$e=s(qT);gpe=n(h$e,"STRONG",{});var Eut=s(gpe);mKo=r(Eut,"wav2vec2-conformer"),Eut.forEach(t),fKo=r(h$e," \u2014 "),$X=n(h$e,"A",{href:!0});var Cut=s($X);gKo=r(Cut,"Wav2Vec2ConformerForCTC"),Cut.forEach(t),hKo=r(h$e," (Wav2Vec2-Conformer model)"),h$e.forEach(t),uKo=i(Ve),NT=n(Ve,"LI",{});var u$e=s(NT);hpe=n(u$e,"STRONG",{});var wut=s(hpe);pKo=r(wut,"wavlm"),wut.forEach(t),_Ko=r(u$e," \u2014 "),kX=n(u$e,"A",{href:!0});var Aut=s(kX);bKo=r(Aut,"WavLMForCTC"),Aut.forEach(t),vKo=r(u$e," (WavLM model)"),u$e.forEach(t),Ve.forEach(t),FKo=i(pa),jT=n(pa,"P",{});var p$e=s(jT);TKo=r(p$e,"The model is set in evaluation mode by default using "),upe=n(p$e,"CODE",{});var yut=s(upe);MKo=r(yut,"model.eval()"),yut.forEach(t),EKo=r(p$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(p$e,"CODE",{});var Lut=s(ppe);CKo=r(Lut,"model.train()"),Lut.forEach(t),p$e.forEach(t),wKo=i(pa),T(DT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),pqe=i(m),bd=n(m,"H2",{class:!0});var Fje=s(bd);GT=n(Fje,"A",{id:!0,class:!0,href:!0});var xut=s(GT);_pe=n(xut,"SPAN",{});var $ut=s(_pe);T(n8.$$.fragment,$ut),$ut.forEach(t),xut.forEach(t),AKo=i(Fje),bpe=n(Fje,"SPAN",{});var kut=s(bpe);yKo=r(kut,"AutoModelForSpeechSeq2Seq"),kut.forEach(t),Fje.forEach(t),_qe=i(m),Xo=n(m,"DIV",{class:!0});var al=s(Xo);T(s8.$$.fragment,al),LKo=i(al),vd=n(al,"P",{});var nZ=s(vd);xKo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SX=n(nZ,"A",{href:!0});var Sut=s(SX);$Ko=r(Sut,"from_pretrained()"),Sut.forEach(t),kKo=r(nZ," class method or the "),RX=n(nZ,"A",{href:!0});var Rut=s(RX);SKo=r(Rut,"from_config()"),Rut.forEach(t),RKo=r(nZ,` class
method.`),nZ.forEach(t),PKo=i(al),l8=n(al,"P",{});var Tje=s(l8);BKo=r(Tje,"This class cannot be instantiated directly using "),vpe=n(Tje,"CODE",{});var Put=s(vpe);IKo=r(Put,"__init__()"),Put.forEach(t),qKo=r(Tje," (throws an error)."),Tje.forEach(t),NKo=i(al),Ft=n(al,"DIV",{class:!0});var V6=s(Ft);T(i8.$$.fragment,V6),jKo=i(V6),Fpe=n(V6,"P",{});var But=s(Fpe);DKo=r(But,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),But.forEach(t),GKo=i(V6),Fd=n(V6,"P",{});var sZ=s(Fd);OKo=r(sZ,`Note:
Loading a model from its configuration file does `),Tpe=n(sZ,"STRONG",{});var Iut=s(Tpe);VKo=r(Iut,"not"),Iut.forEach(t),XKo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(sZ,"A",{href:!0});var qut=s(PX);zKo=r(qut,"from_pretrained()"),qut.forEach(t),WKo=r(sZ," to load the model weights."),sZ.forEach(t),QKo=i(V6),T(OT.$$.fragment,V6),V6.forEach(t),HKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(d8.$$.fragment,_a),UKo=i(_a),Mpe=n(_a,"P",{});var Nut=s(Mpe);JKo=r(Nut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Nut.forEach(t),YKo=i(_a),Xa=n(_a,"P",{});var X6=s(Xa);KKo=r(X6,"The model class to instantiate is selected based on the "),Epe=n(X6,"CODE",{});var jut=s(Epe);ZKo=r(jut,"model_type"),jut.forEach(t),eZo=r(X6,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(X6,"CODE",{});var Dut=s(Cpe);oZo=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),rZo=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(X6,"CODE",{});var Gut=s(wpe);tZo=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),aZo=r(X6,":"),X6.forEach(t),nZo=i(_a),c8=n(_a,"UL",{});var Mje=s(c8);VT=n(Mje,"LI",{});var _$e=s(VT);Ape=n(_$e,"STRONG",{});var Out=s(Ape);sZo=r(Out,"speech-encoder-decoder"),Out.forEach(t),lZo=r(_$e," \u2014 "),BX=n(_$e,"A",{href:!0});var Vut=s(BX);iZo=r(Vut,"SpeechEncoderDecoderModel"),Vut.forEach(t),dZo=r(_$e," (Speech Encoder decoder model)"),_$e.forEach(t),cZo=i(Mje),XT=n(Mje,"LI",{});var b$e=s(XT);ype=n(b$e,"STRONG",{});var Xut=s(ype);mZo=r(Xut,"speech_to_text"),Xut.forEach(t),fZo=r(b$e," \u2014 "),IX=n(b$e,"A",{href:!0});var zut=s(IX);gZo=r(zut,"Speech2TextForConditionalGeneration"),zut.forEach(t),hZo=r(b$e," (Speech2Text model)"),b$e.forEach(t),Mje.forEach(t),uZo=i(_a),zT=n(_a,"P",{});var v$e=s(zT);pZo=r(v$e,"The model is set in evaluation mode by default using "),Lpe=n(v$e,"CODE",{});var Wut=s(Lpe);_Zo=r(Wut,"model.eval()"),Wut.forEach(t),bZo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(v$e,"CODE",{});var Qut=s(xpe);vZo=r(Qut,"model.train()"),Qut.forEach(t),v$e.forEach(t),FZo=i(_a),T(WT.$$.fragment,_a),_a.forEach(t),al.forEach(t),bqe=i(m),Td=n(m,"H2",{class:!0});var Eje=s(Td);QT=n(Eje,"A",{id:!0,class:!0,href:!0});var Hut=s(QT);$pe=n(Hut,"SPAN",{});var Uut=s($pe);T(m8.$$.fragment,Uut),Uut.forEach(t),Hut.forEach(t),TZo=i(Eje),kpe=n(Eje,"SPAN",{});var Jut=s(kpe);MZo=r(Jut,"AutoModelForAudioXVector"),Jut.forEach(t),Eje.forEach(t),vqe=i(m),zo=n(m,"DIV",{class:!0});var nl=s(zo);T(f8.$$.fragment,nl),EZo=i(nl),Md=n(nl,"P",{});var lZ=s(Md);CZo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qX=n(lZ,"A",{href:!0});var Yut=s(qX);wZo=r(Yut,"from_pretrained()"),Yut.forEach(t),AZo=r(lZ," class method or the "),NX=n(lZ,"A",{href:!0});var Kut=s(NX);yZo=r(Kut,"from_config()"),Kut.forEach(t),LZo=r(lZ,` class
method.`),lZ.forEach(t),xZo=i(nl),g8=n(nl,"P",{});var Cje=s(g8);$Zo=r(Cje,"This class cannot be instantiated directly using "),Spe=n(Cje,"CODE",{});var Zut=s(Spe);kZo=r(Zut,"__init__()"),Zut.forEach(t),SZo=r(Cje," (throws an error)."),Cje.forEach(t),RZo=i(nl),Tt=n(nl,"DIV",{class:!0});var z6=s(Tt);T(h8.$$.fragment,z6),PZo=i(z6),Rpe=n(z6,"P",{});var ept=s(Rpe);BZo=r(ept,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ept.forEach(t),IZo=i(z6),Ed=n(z6,"P",{});var iZ=s(Ed);qZo=r(iZ,`Note:
Loading a model from its configuration file does `),Ppe=n(iZ,"STRONG",{});var opt=s(Ppe);NZo=r(opt,"not"),opt.forEach(t),jZo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(iZ,"A",{href:!0});var rpt=s(jX);DZo=r(rpt,"from_pretrained()"),rpt.forEach(t),GZo=r(iZ," to load the model weights."),iZ.forEach(t),OZo=i(z6),T(HT.$$.fragment,z6),z6.forEach(t),VZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(u8.$$.fragment,ba),XZo=i(ba),Bpe=n(ba,"P",{});var tpt=s(Bpe);zZo=r(tpt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tpt.forEach(t),WZo=i(ba),za=n(ba,"P",{});var W6=s(za);QZo=r(W6,"The model class to instantiate is selected based on the "),Ipe=n(W6,"CODE",{});var apt=s(Ipe);HZo=r(apt,"model_type"),apt.forEach(t),UZo=r(W6,` property of the config object (either
passed as an argument or loaded from `),qpe=n(W6,"CODE",{});var npt=s(qpe);JZo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),YZo=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(W6,"CODE",{});var spt=s(Npe);KZo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),ZZo=r(W6,":"),W6.forEach(t),eer=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);UT=n(sl,"LI",{});var F$e=s(UT);jpe=n(F$e,"STRONG",{});var lpt=s(jpe);oer=r(lpt,"data2vec-audio"),lpt.forEach(t),rer=r(F$e," \u2014 "),DX=n(F$e,"A",{href:!0});var ipt=s(DX);ter=r(ipt,"Data2VecAudioForXVector"),ipt.forEach(t),aer=r(F$e," (Data2VecAudio model)"),F$e.forEach(t),ner=i(sl),JT=n(sl,"LI",{});var T$e=s(JT);Dpe=n(T$e,"STRONG",{});var dpt=s(Dpe);ser=r(dpt,"unispeech-sat"),dpt.forEach(t),ler=r(T$e," \u2014 "),GX=n(T$e,"A",{href:!0});var cpt=s(GX);ier=r(cpt,"UniSpeechSatForXVector"),cpt.forEach(t),der=r(T$e," (UniSpeechSat model)"),T$e.forEach(t),cer=i(sl),YT=n(sl,"LI",{});var M$e=s(YT);Gpe=n(M$e,"STRONG",{});var mpt=s(Gpe);mer=r(mpt,"wav2vec2"),mpt.forEach(t),fer=r(M$e," \u2014 "),OX=n(M$e,"A",{href:!0});var fpt=s(OX);ger=r(fpt,"Wav2Vec2ForXVector"),fpt.forEach(t),her=r(M$e," (Wav2Vec2 model)"),M$e.forEach(t),uer=i(sl),KT=n(sl,"LI",{});var E$e=s(KT);Ope=n(E$e,"STRONG",{});var gpt=s(Ope);per=r(gpt,"wav2vec2-conformer"),gpt.forEach(t),_er=r(E$e," \u2014 "),VX=n(E$e,"A",{href:!0});var hpt=s(VX);ber=r(hpt,"Wav2Vec2ConformerForXVector"),hpt.forEach(t),ver=r(E$e," (Wav2Vec2-Conformer model)"),E$e.forEach(t),Fer=i(sl),ZT=n(sl,"LI",{});var C$e=s(ZT);Vpe=n(C$e,"STRONG",{});var upt=s(Vpe);Ter=r(upt,"wavlm"),upt.forEach(t),Mer=r(C$e," \u2014 "),XX=n(C$e,"A",{href:!0});var ppt=s(XX);Eer=r(ppt,"WavLMForXVector"),ppt.forEach(t),Cer=r(C$e," (WavLM model)"),C$e.forEach(t),sl.forEach(t),wer=i(ba),eM=n(ba,"P",{});var w$e=s(eM);Aer=r(w$e,"The model is set in evaluation mode by default using "),Xpe=n(w$e,"CODE",{});var _pt=s(Xpe);yer=r(_pt,"model.eval()"),_pt.forEach(t),Ler=r(w$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(w$e,"CODE",{});var bpt=s(zpe);xer=r(bpt,"model.train()"),bpt.forEach(t),w$e.forEach(t),$er=i(ba),T(oM.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Fqe=i(m),Cd=n(m,"H2",{class:!0});var wje=s(Cd);rM=n(wje,"A",{id:!0,class:!0,href:!0});var vpt=s(rM);Wpe=n(vpt,"SPAN",{});var Fpt=s(Wpe);T(p8.$$.fragment,Fpt),Fpt.forEach(t),vpt.forEach(t),ker=i(wje),Qpe=n(wje,"SPAN",{});var Tpt=s(Qpe);Ser=r(Tpt,"AutoModelForMaskedImageModeling"),Tpt.forEach(t),wje.forEach(t),Tqe=i(m),Wo=n(m,"DIV",{class:!0});var ll=s(Wo);T(_8.$$.fragment,ll),Rer=i(ll),wd=n(ll,"P",{});var dZ=s(wd);Per=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zX=n(dZ,"A",{href:!0});var Mpt=s(zX);Ber=r(Mpt,"from_pretrained()"),Mpt.forEach(t),Ier=r(dZ," class method or the "),WX=n(dZ,"A",{href:!0});var Ept=s(WX);qer=r(Ept,"from_config()"),Ept.forEach(t),Ner=r(dZ,` class
method.`),dZ.forEach(t),jer=i(ll),b8=n(ll,"P",{});var Aje=s(b8);Der=r(Aje,"This class cannot be instantiated directly using "),Hpe=n(Aje,"CODE",{});var Cpt=s(Hpe);Ger=r(Cpt,"__init__()"),Cpt.forEach(t),Oer=r(Aje," (throws an error)."),Aje.forEach(t),Ver=i(ll),Mt=n(ll,"DIV",{class:!0});var Q6=s(Mt);T(v8.$$.fragment,Q6),Xer=i(Q6),Upe=n(Q6,"P",{});var wpt=s(Upe);zer=r(wpt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wpt.forEach(t),Wer=i(Q6),Ad=n(Q6,"P",{});var cZ=s(Ad);Qer=r(cZ,`Note:
Loading a model from its configuration file does `),Jpe=n(cZ,"STRONG",{});var Apt=s(Jpe);Her=r(Apt,"not"),Apt.forEach(t),Uer=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(cZ,"A",{href:!0});var ypt=s(QX);Jer=r(ypt,"from_pretrained()"),ypt.forEach(t),Yer=r(cZ," to load the model weights."),cZ.forEach(t),Ker=i(Q6),T(tM.$$.fragment,Q6),Q6.forEach(t),Zer=i(ll),uo=n(ll,"DIV",{class:!0});var va=s(uo);T(F8.$$.fragment,va),eor=i(va),Ype=n(va,"P",{});var Lpt=s(Ype);oor=r(Lpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lpt.forEach(t),ror=i(va),Wa=n(va,"P",{});var H6=s(Wa);tor=r(H6,"The model class to instantiate is selected based on the "),Kpe=n(H6,"CODE",{});var xpt=s(Kpe);aor=r(xpt,"model_type"),xpt.forEach(t),nor=r(H6,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(H6,"CODE",{});var $pt=s(Zpe);sor=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),lor=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(H6,"CODE",{});var kpt=s(e_e);ior=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),dor=r(H6,":"),H6.forEach(t),cor=i(va),yd=n(va,"UL",{});var mZ=s(yd);aM=n(mZ,"LI",{});var A$e=s(aM);o_e=n(A$e,"STRONG",{});var Spt=s(o_e);mor=r(Spt,"deit"),Spt.forEach(t),gor=r(A$e," \u2014 "),HX=n(A$e,"A",{href:!0});var Rpt=s(HX);hor=r(Rpt,"DeiTForMaskedImageModeling"),Rpt.forEach(t),uor=r(A$e," (DeiT model)"),A$e.forEach(t),por=i(mZ),nM=n(mZ,"LI",{});var y$e=s(nM);r_e=n(y$e,"STRONG",{});var Ppt=s(r_e);_or=r(Ppt,"swin"),Ppt.forEach(t),bor=r(y$e," \u2014 "),UX=n(y$e,"A",{href:!0});var Bpt=s(UX);vor=r(Bpt,"SwinForMaskedImageModeling"),Bpt.forEach(t),For=r(y$e," (Swin model)"),y$e.forEach(t),Tor=i(mZ),sM=n(mZ,"LI",{});var L$e=s(sM);t_e=n(L$e,"STRONG",{});var Ipt=s(t_e);Mor=r(Ipt,"vit"),Ipt.forEach(t),Eor=r(L$e," \u2014 "),JX=n(L$e,"A",{href:!0});var qpt=s(JX);Cor=r(qpt,"ViTForMaskedImageModeling"),qpt.forEach(t),wor=r(L$e," (ViT model)"),L$e.forEach(t),mZ.forEach(t),Aor=i(va),lM=n(va,"P",{});var x$e=s(lM);yor=r(x$e,"The model is set in evaluation mode by default using "),a_e=n(x$e,"CODE",{});var Npt=s(a_e);Lor=r(Npt,"model.eval()"),Npt.forEach(t),xor=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(x$e,"CODE",{});var jpt=s(n_e);$or=r(jpt,"model.train()"),jpt.forEach(t),x$e.forEach(t),kor=i(va),T(iM.$$.fragment,va),va.forEach(t),ll.forEach(t),Mqe=i(m),Ld=n(m,"H2",{class:!0});var yje=s(Ld);dM=n(yje,"A",{id:!0,class:!0,href:!0});var Dpt=s(dM);s_e=n(Dpt,"SPAN",{});var Gpt=s(s_e);T(T8.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),Sor=i(yje),l_e=n(yje,"SPAN",{});var Opt=s(l_e);Ror=r(Opt,"AutoModelForObjectDetection"),Opt.forEach(t),yje.forEach(t),Eqe=i(m),Qo=n(m,"DIV",{class:!0});var il=s(Qo);T(M8.$$.fragment,il),Por=i(il),xd=n(il,"P",{});var fZ=s(xd);Bor=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YX=n(fZ,"A",{href:!0});var Vpt=s(YX);Ior=r(Vpt,"from_pretrained()"),Vpt.forEach(t),qor=r(fZ," class method or the "),KX=n(fZ,"A",{href:!0});var Xpt=s(KX);Nor=r(Xpt,"from_config()"),Xpt.forEach(t),jor=r(fZ,` class
method.`),fZ.forEach(t),Dor=i(il),E8=n(il,"P",{});var Lje=s(E8);Gor=r(Lje,"This class cannot be instantiated directly using "),i_e=n(Lje,"CODE",{});var zpt=s(i_e);Oor=r(zpt,"__init__()"),zpt.forEach(t),Vor=r(Lje," (throws an error)."),Lje.forEach(t),Xor=i(il),Et=n(il,"DIV",{class:!0});var U6=s(Et);T(C8.$$.fragment,U6),zor=i(U6),d_e=n(U6,"P",{});var Wpt=s(d_e);Wor=r(Wpt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wpt.forEach(t),Qor=i(U6),$d=n(U6,"P",{});var gZ=s($d);Hor=r(gZ,`Note:
Loading a model from its configuration file does `),c_e=n(gZ,"STRONG",{});var Qpt=s(c_e);Uor=r(Qpt,"not"),Qpt.forEach(t),Jor=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(gZ,"A",{href:!0});var Hpt=s(ZX);Yor=r(Hpt,"from_pretrained()"),Hpt.forEach(t),Kor=r(gZ," to load the model weights."),gZ.forEach(t),Zor=i(U6),T(cM.$$.fragment,U6),U6.forEach(t),err=i(il),po=n(il,"DIV",{class:!0});var Fa=s(po);T(w8.$$.fragment,Fa),orr=i(Fa),m_e=n(Fa,"P",{});var Upt=s(m_e);rrr=r(Upt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Upt.forEach(t),trr=i(Fa),Qa=n(Fa,"P",{});var J6=s(Qa);arr=r(J6,"The model class to instantiate is selected based on the "),f_e=n(J6,"CODE",{});var Jpt=s(f_e);nrr=r(Jpt,"model_type"),Jpt.forEach(t),srr=r(J6,` property of the config object (either
passed as an argument or loaded from `),g_e=n(J6,"CODE",{});var Ypt=s(g_e);lrr=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),irr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(J6,"CODE",{});var Kpt=s(h_e);drr=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),crr=r(J6,":"),J6.forEach(t),mrr=i(Fa),A8=n(Fa,"UL",{});var xje=s(A8);mM=n(xje,"LI",{});var $$e=s(mM);u_e=n($$e,"STRONG",{});var Zpt=s(u_e);frr=r(Zpt,"detr"),Zpt.forEach(t),grr=r($$e," \u2014 "),ez=n($$e,"A",{href:!0});var e_t=s(ez);hrr=r(e_t,"DetrForObjectDetection"),e_t.forEach(t),urr=r($$e," (DETR model)"),$$e.forEach(t),prr=i(xje),fM=n(xje,"LI",{});var k$e=s(fM);p_e=n(k$e,"STRONG",{});var o_t=s(p_e);_rr=r(o_t,"yolos"),o_t.forEach(t),brr=r(k$e," \u2014 "),oz=n(k$e,"A",{href:!0});var r_t=s(oz);vrr=r(r_t,"YolosForObjectDetection"),r_t.forEach(t),Frr=r(k$e," (YOLOS model)"),k$e.forEach(t),xje.forEach(t),Trr=i(Fa),gM=n(Fa,"P",{});var S$e=s(gM);Mrr=r(S$e,"The model is set in evaluation mode by default using "),__e=n(S$e,"CODE",{});var t_t=s(__e);Err=r(t_t,"model.eval()"),t_t.forEach(t),Crr=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=n(S$e,"CODE",{});var a_t=s(b_e);wrr=r(a_t,"model.train()"),a_t.forEach(t),S$e.forEach(t),Arr=i(Fa),T(hM.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Cqe=i(m),kd=n(m,"H2",{class:!0});var $je=s(kd);uM=n($je,"A",{id:!0,class:!0,href:!0});var n_t=s(uM);v_e=n(n_t,"SPAN",{});var s_t=s(v_e);T(y8.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),yrr=i($je),F_e=n($je,"SPAN",{});var l_t=s(F_e);Lrr=r(l_t,"AutoModelForImageSegmentation"),l_t.forEach(t),$je.forEach(t),wqe=i(m),Ho=n(m,"DIV",{class:!0});var dl=s(Ho);T(L8.$$.fragment,dl),xrr=i(dl),Sd=n(dl,"P",{});var hZ=s(Sd);$rr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rz=n(hZ,"A",{href:!0});var i_t=s(rz);krr=r(i_t,"from_pretrained()"),i_t.forEach(t),Srr=r(hZ," class method or the "),tz=n(hZ,"A",{href:!0});var d_t=s(tz);Rrr=r(d_t,"from_config()"),d_t.forEach(t),Prr=r(hZ,` class
method.`),hZ.forEach(t),Brr=i(dl),x8=n(dl,"P",{});var kje=s(x8);Irr=r(kje,"This class cannot be instantiated directly using "),T_e=n(kje,"CODE",{});var c_t=s(T_e);qrr=r(c_t,"__init__()"),c_t.forEach(t),Nrr=r(kje," (throws an error)."),kje.forEach(t),jrr=i(dl),Ct=n(dl,"DIV",{class:!0});var Y6=s(Ct);T($8.$$.fragment,Y6),Drr=i(Y6),M_e=n(Y6,"P",{});var m_t=s(M_e);Grr=r(m_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),m_t.forEach(t),Orr=i(Y6),Rd=n(Y6,"P",{});var uZ=s(Rd);Vrr=r(uZ,`Note:
Loading a model from its configuration file does `),E_e=n(uZ,"STRONG",{});var f_t=s(E_e);Xrr=r(f_t,"not"),f_t.forEach(t),zrr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(uZ,"A",{href:!0});var g_t=s(az);Wrr=r(g_t,"from_pretrained()"),g_t.forEach(t),Qrr=r(uZ," to load the model weights."),uZ.forEach(t),Hrr=i(Y6),T(pM.$$.fragment,Y6),Y6.forEach(t),Urr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(k8.$$.fragment,Ta),Jrr=i(Ta),C_e=n(Ta,"P",{});var h_t=s(C_e);Yrr=r(h_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),h_t.forEach(t),Krr=i(Ta),Ha=n(Ta,"P",{});var K6=s(Ha);Zrr=r(K6,"The model class to instantiate is selected based on the "),w_e=n(K6,"CODE",{});var u_t=s(w_e);etr=r(u_t,"model_type"),u_t.forEach(t),otr=r(K6,` property of the config object (either
passed as an argument or loaded from `),A_e=n(K6,"CODE",{});var p_t=s(A_e);rtr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),ttr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(K6,"CODE",{});var __t=s(y_e);atr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),ntr=r(K6,":"),K6.forEach(t),str=i(Ta),L_e=n(Ta,"UL",{});var b_t=s(L_e);_M=n(b_t,"LI",{});var R$e=s(_M);x_e=n(R$e,"STRONG",{});var v_t=s(x_e);ltr=r(v_t,"detr"),v_t.forEach(t),itr=r(R$e," \u2014 "),nz=n(R$e,"A",{href:!0});var F_t=s(nz);dtr=r(F_t,"DetrForSegmentation"),F_t.forEach(t),ctr=r(R$e," (DETR model)"),R$e.forEach(t),b_t.forEach(t),mtr=i(Ta),bM=n(Ta,"P",{});var P$e=s(bM);ftr=r(P$e,"The model is set in evaluation mode by default using "),$_e=n(P$e,"CODE",{});var T_t=s($_e);gtr=r(T_t,"model.eval()"),T_t.forEach(t),htr=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(P$e,"CODE",{});var M_t=s(k_e);utr=r(M_t,"model.train()"),M_t.forEach(t),P$e.forEach(t),ptr=i(Ta),T(vM.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Aqe=i(m),Pd=n(m,"H2",{class:!0});var Sje=s(Pd);FM=n(Sje,"A",{id:!0,class:!0,href:!0});var E_t=s(FM);S_e=n(E_t,"SPAN",{});var C_t=s(S_e);T(S8.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),_tr=i(Sje),R_e=n(Sje,"SPAN",{});var w_t=s(R_e);btr=r(w_t,"AutoModelForSemanticSegmentation"),w_t.forEach(t),Sje.forEach(t),yqe=i(m),Uo=n(m,"DIV",{class:!0});var cl=s(Uo);T(R8.$$.fragment,cl),vtr=i(cl),Bd=n(cl,"P",{});var pZ=s(Bd);Ftr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sz=n(pZ,"A",{href:!0});var A_t=s(sz);Ttr=r(A_t,"from_pretrained()"),A_t.forEach(t),Mtr=r(pZ," class method or the "),lz=n(pZ,"A",{href:!0});var y_t=s(lz);Etr=r(y_t,"from_config()"),y_t.forEach(t),Ctr=r(pZ,` class
method.`),pZ.forEach(t),wtr=i(cl),P8=n(cl,"P",{});var Rje=s(P8);Atr=r(Rje,"This class cannot be instantiated directly using "),P_e=n(Rje,"CODE",{});var L_t=s(P_e);ytr=r(L_t,"__init__()"),L_t.forEach(t),Ltr=r(Rje," (throws an error)."),Rje.forEach(t),xtr=i(cl),wt=n(cl,"DIV",{class:!0});var Z6=s(wt);T(B8.$$.fragment,Z6),$tr=i(Z6),B_e=n(Z6,"P",{});var x_t=s(B_e);ktr=r(x_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),x_t.forEach(t),Str=i(Z6),Id=n(Z6,"P",{});var _Z=s(Id);Rtr=r(_Z,`Note:
Loading a model from its configuration file does `),I_e=n(_Z,"STRONG",{});var $_t=s(I_e);Ptr=r($_t,"not"),$_t.forEach(t),Btr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(_Z,"A",{href:!0});var k_t=s(iz);Itr=r(k_t,"from_pretrained()"),k_t.forEach(t),qtr=r(_Z," to load the model weights."),_Z.forEach(t),Ntr=i(Z6),T(TM.$$.fragment,Z6),Z6.forEach(t),jtr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(I8.$$.fragment,Ma),Dtr=i(Ma),q_e=n(Ma,"P",{});var S_t=s(q_e);Gtr=r(S_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),S_t.forEach(t),Otr=i(Ma),Ua=n(Ma,"P",{});var e0=s(Ua);Vtr=r(e0,"The model class to instantiate is selected based on the "),N_e=n(e0,"CODE",{});var R_t=s(N_e);Xtr=r(R_t,"model_type"),R_t.forEach(t),ztr=r(e0,` property of the config object (either
passed as an argument or loaded from `),j_e=n(e0,"CODE",{});var P_t=s(j_e);Wtr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),Qtr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(e0,"CODE",{});var B_t=s(D_e);Htr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),Utr=r(e0,":"),e0.forEach(t),Jtr=i(Ma),Ja=n(Ma,"UL",{});var o0=s(Ja);MM=n(o0,"LI",{});var B$e=s(MM);G_e=n(B$e,"STRONG",{});var I_t=s(G_e);Ytr=r(I_t,"beit"),I_t.forEach(t),Ktr=r(B$e," \u2014 "),dz=n(B$e,"A",{href:!0});var q_t=s(dz);Ztr=r(q_t,"BeitForSemanticSegmentation"),q_t.forEach(t),ear=r(B$e," (BEiT model)"),B$e.forEach(t),oar=i(o0),EM=n(o0,"LI",{});var I$e=s(EM);O_e=n(I$e,"STRONG",{});var N_t=s(O_e);rar=r(N_t,"data2vec-vision"),N_t.forEach(t),tar=r(I$e," \u2014 "),cz=n(I$e,"A",{href:!0});var j_t=s(cz);aar=r(j_t,"Data2VecVisionForSemanticSegmentation"),j_t.forEach(t),nar=r(I$e," (Data2VecVision model)"),I$e.forEach(t),sar=i(o0),CM=n(o0,"LI",{});var q$e=s(CM);V_e=n(q$e,"STRONG",{});var D_t=s(V_e);lar=r(D_t,"dpt"),D_t.forEach(t),iar=r(q$e," \u2014 "),mz=n(q$e,"A",{href:!0});var G_t=s(mz);dar=r(G_t,"DPTForSemanticSegmentation"),G_t.forEach(t),car=r(q$e," (DPT model)"),q$e.forEach(t),mar=i(o0),wM=n(o0,"LI",{});var N$e=s(wM);X_e=n(N$e,"STRONG",{});var O_t=s(X_e);far=r(O_t,"segformer"),O_t.forEach(t),gar=r(N$e," \u2014 "),fz=n(N$e,"A",{href:!0});var V_t=s(fz);har=r(V_t,"SegformerForSemanticSegmentation"),V_t.forEach(t),uar=r(N$e," (SegFormer model)"),N$e.forEach(t),o0.forEach(t),par=i(Ma),AM=n(Ma,"P",{});var j$e=s(AM);_ar=r(j$e,"The model is set in evaluation mode by default using "),z_e=n(j$e,"CODE",{});var X_t=s(z_e);bar=r(X_t,"model.eval()"),X_t.forEach(t),Far=r(j$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(j$e,"CODE",{});var z_t=s(W_e);Tar=r(z_t,"model.train()"),z_t.forEach(t),j$e.forEach(t),Mar=i(Ma),T(yM.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Lqe=i(m),qd=n(m,"H2",{class:!0});var Pje=s(qd);LM=n(Pje,"A",{id:!0,class:!0,href:!0});var W_t=s(LM);Q_e=n(W_t,"SPAN",{});var Q_t=s(Q_e);T(q8.$$.fragment,Q_t),Q_t.forEach(t),W_t.forEach(t),Ear=i(Pje),H_e=n(Pje,"SPAN",{});var H_t=s(H_e);Car=r(H_t,"AutoModelForInstanceSegmentation"),H_t.forEach(t),Pje.forEach(t),xqe=i(m),Jo=n(m,"DIV",{class:!0});var ml=s(Jo);T(N8.$$.fragment,ml),war=i(ml),Nd=n(ml,"P",{});var bZ=s(Nd);Aar=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gz=n(bZ,"A",{href:!0});var U_t=s(gz);yar=r(U_t,"from_pretrained()"),U_t.forEach(t),Lar=r(bZ," class method or the "),hz=n(bZ,"A",{href:!0});var J_t=s(hz);xar=r(J_t,"from_config()"),J_t.forEach(t),$ar=r(bZ,` class
method.`),bZ.forEach(t),kar=i(ml),j8=n(ml,"P",{});var Bje=s(j8);Sar=r(Bje,"This class cannot be instantiated directly using "),U_e=n(Bje,"CODE",{});var Y_t=s(U_e);Rar=r(Y_t,"__init__()"),Y_t.forEach(t),Par=r(Bje," (throws an error)."),Bje.forEach(t),Bar=i(ml),At=n(ml,"DIV",{class:!0});var r0=s(At);T(D8.$$.fragment,r0),Iar=i(r0),J_e=n(r0,"P",{});var K_t=s(J_e);qar=r(K_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),K_t.forEach(t),Nar=i(r0),jd=n(r0,"P",{});var vZ=s(jd);jar=r(vZ,`Note:
Loading a model from its configuration file does `),Y_e=n(vZ,"STRONG",{});var Z_t=s(Y_e);Dar=r(Z_t,"not"),Z_t.forEach(t),Gar=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(vZ,"A",{href:!0});var ebt=s(uz);Oar=r(ebt,"from_pretrained()"),ebt.forEach(t),Var=r(vZ," to load the model weights."),vZ.forEach(t),Xar=i(r0),T(xM.$$.fragment,r0),r0.forEach(t),zar=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(G8.$$.fragment,Ea),War=i(Ea),K_e=n(Ea,"P",{});var obt=s(K_e);Qar=r(obt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),obt.forEach(t),Har=i(Ea),Ya=n(Ea,"P",{});var t0=s(Ya);Uar=r(t0,"The model class to instantiate is selected based on the "),Z_e=n(t0,"CODE",{});var rbt=s(Z_e);Jar=r(rbt,"model_type"),rbt.forEach(t),Yar=r(t0,` property of the config object (either
passed as an argument or loaded from `),ebe=n(t0,"CODE",{});var tbt=s(ebe);Kar=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),Zar=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(t0,"CODE",{});var abt=s(obe);enr=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),onr=r(t0,":"),t0.forEach(t),rnr=i(Ea),rbe=n(Ea,"UL",{});var nbt=s(rbe);$M=n(nbt,"LI",{});var D$e=s($M);tbe=n(D$e,"STRONG",{});var sbt=s(tbe);tnr=r(sbt,"maskformer"),sbt.forEach(t),anr=r(D$e," \u2014 "),pz=n(D$e,"A",{href:!0});var lbt=s(pz);nnr=r(lbt,"MaskFormerForInstanceSegmentation"),lbt.forEach(t),snr=r(D$e," (MaskFormer model)"),D$e.forEach(t),nbt.forEach(t),lnr=i(Ea),kM=n(Ea,"P",{});var G$e=s(kM);inr=r(G$e,"The model is set in evaluation mode by default using "),abe=n(G$e,"CODE",{});var ibt=s(abe);dnr=r(ibt,"model.eval()"),ibt.forEach(t),cnr=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=n(G$e,"CODE",{});var dbt=s(nbe);mnr=r(dbt,"model.train()"),dbt.forEach(t),G$e.forEach(t),fnr=i(Ea),T(SM.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),$qe=i(m),Dd=n(m,"H2",{class:!0});var Ije=s(Dd);RM=n(Ije,"A",{id:!0,class:!0,href:!0});var cbt=s(RM);sbe=n(cbt,"SPAN",{});var mbt=s(sbe);T(O8.$$.fragment,mbt),mbt.forEach(t),cbt.forEach(t),gnr=i(Ije),lbe=n(Ije,"SPAN",{});var fbt=s(lbe);hnr=r(fbt,"TFAutoModel"),fbt.forEach(t),Ije.forEach(t),kqe=i(m),Yo=n(m,"DIV",{class:!0});var fl=s(Yo);T(V8.$$.fragment,fl),unr=i(fl),Gd=n(fl,"P",{});var FZ=s(Gd);pnr=r(FZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_z=n(FZ,"A",{href:!0});var gbt=s(_z);_nr=r(gbt,"from_pretrained()"),gbt.forEach(t),bnr=r(FZ," class method or the "),bz=n(FZ,"A",{href:!0});var hbt=s(bz);vnr=r(hbt,"from_config()"),hbt.forEach(t),Fnr=r(FZ,` class
method.`),FZ.forEach(t),Tnr=i(fl),X8=n(fl,"P",{});var qje=s(X8);Mnr=r(qje,"This class cannot be instantiated directly using "),ibe=n(qje,"CODE",{});var ubt=s(ibe);Enr=r(ubt,"__init__()"),ubt.forEach(t),Cnr=r(qje," (throws an error)."),qje.forEach(t),wnr=i(fl),yt=n(fl,"DIV",{class:!0});var a0=s(yt);T(z8.$$.fragment,a0),Anr=i(a0),dbe=n(a0,"P",{});var pbt=s(dbe);ynr=r(pbt,"Instantiates one of the base model classes of the library from a configuration."),pbt.forEach(t),Lnr=i(a0),Od=n(a0,"P",{});var TZ=s(Od);xnr=r(TZ,`Note:
Loading a model from its configuration file does `),cbe=n(TZ,"STRONG",{});var _bt=s(cbe);$nr=r(_bt,"not"),_bt.forEach(t),knr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(TZ,"A",{href:!0});var bbt=s(vz);Snr=r(bbt,"from_pretrained()"),bbt.forEach(t),Rnr=r(TZ," to load the model weights."),TZ.forEach(t),Pnr=i(a0),T(PM.$$.fragment,a0),a0.forEach(t),Bnr=i(fl),wr=n(fl,"DIV",{class:!0});var gl=s(wr);T(W8.$$.fragment,gl),Inr=i(gl),mbe=n(gl,"P",{});var vbt=s(mbe);qnr=r(vbt,"Instantiate one of the base model classes of the library from a pretrained model."),vbt.forEach(t),Nnr=i(gl),Ka=n(gl,"P",{});var n0=s(Ka);jnr=r(n0,"The model class to instantiate is selected based on the "),fbe=n(n0,"CODE",{});var Fbt=s(fbe);Dnr=r(Fbt,"model_type"),Fbt.forEach(t),Gnr=r(n0,` property of the config object (either
passed as an argument or loaded from `),gbe=n(n0,"CODE",{});var Tbt=s(gbe);Onr=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),Vnr=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(n0,"CODE",{});var Mbt=s(hbe);Xnr=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),znr=r(n0,":"),n0.forEach(t),Wnr=i(gl),N=n(gl,"UL",{});var D=s(N);BM=n(D,"LI",{});var O$e=s(BM);ube=n(O$e,"STRONG",{});var Ebt=s(ube);Qnr=r(Ebt,"albert"),Ebt.forEach(t),Hnr=r(O$e," \u2014 "),Fz=n(O$e,"A",{href:!0});var Cbt=s(Fz);Unr=r(Cbt,"TFAlbertModel"),Cbt.forEach(t),Jnr=r(O$e," (ALBERT model)"),O$e.forEach(t),Ynr=i(D),IM=n(D,"LI",{});var V$e=s(IM);pbe=n(V$e,"STRONG",{});var wbt=s(pbe);Knr=r(wbt,"bart"),wbt.forEach(t),Znr=r(V$e," \u2014 "),Tz=n(V$e,"A",{href:!0});var Abt=s(Tz);esr=r(Abt,"TFBartModel"),Abt.forEach(t),osr=r(V$e," (BART model)"),V$e.forEach(t),rsr=i(D),qM=n(D,"LI",{});var X$e=s(qM);_be=n(X$e,"STRONG",{});var ybt=s(_be);tsr=r(ybt,"bert"),ybt.forEach(t),asr=r(X$e," \u2014 "),Mz=n(X$e,"A",{href:!0});var Lbt=s(Mz);nsr=r(Lbt,"TFBertModel"),Lbt.forEach(t),ssr=r(X$e," (BERT model)"),X$e.forEach(t),lsr=i(D),NM=n(D,"LI",{});var z$e=s(NM);bbe=n(z$e,"STRONG",{});var xbt=s(bbe);isr=r(xbt,"blenderbot"),xbt.forEach(t),dsr=r(z$e," \u2014 "),Ez=n(z$e,"A",{href:!0});var $bt=s(Ez);csr=r($bt,"TFBlenderbotModel"),$bt.forEach(t),msr=r(z$e," (Blenderbot model)"),z$e.forEach(t),fsr=i(D),jM=n(D,"LI",{});var W$e=s(jM);vbe=n(W$e,"STRONG",{});var kbt=s(vbe);gsr=r(kbt,"blenderbot-small"),kbt.forEach(t),hsr=r(W$e," \u2014 "),Cz=n(W$e,"A",{href:!0});var Sbt=s(Cz);usr=r(Sbt,"TFBlenderbotSmallModel"),Sbt.forEach(t),psr=r(W$e," (BlenderbotSmall model)"),W$e.forEach(t),_sr=i(D),DM=n(D,"LI",{});var Q$e=s(DM);Fbe=n(Q$e,"STRONG",{});var Rbt=s(Fbe);bsr=r(Rbt,"camembert"),Rbt.forEach(t),vsr=r(Q$e," \u2014 "),wz=n(Q$e,"A",{href:!0});var Pbt=s(wz);Fsr=r(Pbt,"TFCamembertModel"),Pbt.forEach(t),Tsr=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),Msr=i(D),GM=n(D,"LI",{});var H$e=s(GM);Tbe=n(H$e,"STRONG",{});var Bbt=s(Tbe);Esr=r(Bbt,"clip"),Bbt.forEach(t),Csr=r(H$e," \u2014 "),Az=n(H$e,"A",{href:!0});var Ibt=s(Az);wsr=r(Ibt,"TFCLIPModel"),Ibt.forEach(t),Asr=r(H$e," (CLIP model)"),H$e.forEach(t),ysr=i(D),OM=n(D,"LI",{});var U$e=s(OM);Mbe=n(U$e,"STRONG",{});var qbt=s(Mbe);Lsr=r(qbt,"convbert"),qbt.forEach(t),xsr=r(U$e," \u2014 "),yz=n(U$e,"A",{href:!0});var Nbt=s(yz);$sr=r(Nbt,"TFConvBertModel"),Nbt.forEach(t),ksr=r(U$e," (ConvBERT model)"),U$e.forEach(t),Ssr=i(D),VM=n(D,"LI",{});var J$e=s(VM);Ebe=n(J$e,"STRONG",{});var jbt=s(Ebe);Rsr=r(jbt,"convnext"),jbt.forEach(t),Psr=r(J$e," \u2014 "),Lz=n(J$e,"A",{href:!0});var Dbt=s(Lz);Bsr=r(Dbt,"TFConvNextModel"),Dbt.forEach(t),Isr=r(J$e," (ConvNext model)"),J$e.forEach(t),qsr=i(D),XM=n(D,"LI",{});var Y$e=s(XM);Cbe=n(Y$e,"STRONG",{});var Gbt=s(Cbe);Nsr=r(Gbt,"ctrl"),Gbt.forEach(t),jsr=r(Y$e," \u2014 "),xz=n(Y$e,"A",{href:!0});var Obt=s(xz);Dsr=r(Obt,"TFCTRLModel"),Obt.forEach(t),Gsr=r(Y$e," (CTRL model)"),Y$e.forEach(t),Osr=i(D),zM=n(D,"LI",{});var K$e=s(zM);wbe=n(K$e,"STRONG",{});var Vbt=s(wbe);Vsr=r(Vbt,"data2vec-vision"),Vbt.forEach(t),Xsr=r(K$e," \u2014 "),$z=n(K$e,"A",{href:!0});var Xbt=s($z);zsr=r(Xbt,"TFData2VecVisionModel"),Xbt.forEach(t),Wsr=r(K$e," (Data2VecVision model)"),K$e.forEach(t),Qsr=i(D),WM=n(D,"LI",{});var Z$e=s(WM);Abe=n(Z$e,"STRONG",{});var zbt=s(Abe);Hsr=r(zbt,"deberta"),zbt.forEach(t),Usr=r(Z$e," \u2014 "),kz=n(Z$e,"A",{href:!0});var Wbt=s(kz);Jsr=r(Wbt,"TFDebertaModel"),Wbt.forEach(t),Ysr=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),Ksr=i(D),QM=n(D,"LI",{});var eke=s(QM);ybe=n(eke,"STRONG",{});var Qbt=s(ybe);Zsr=r(Qbt,"deberta-v2"),Qbt.forEach(t),elr=r(eke," \u2014 "),Sz=n(eke,"A",{href:!0});var Hbt=s(Sz);olr=r(Hbt,"TFDebertaV2Model"),Hbt.forEach(t),rlr=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),tlr=i(D),HM=n(D,"LI",{});var oke=s(HM);Lbe=n(oke,"STRONG",{});var Ubt=s(Lbe);alr=r(Ubt,"distilbert"),Ubt.forEach(t),nlr=r(oke," \u2014 "),Rz=n(oke,"A",{href:!0});var Jbt=s(Rz);slr=r(Jbt,"TFDistilBertModel"),Jbt.forEach(t),llr=r(oke," (DistilBERT model)"),oke.forEach(t),ilr=i(D),UM=n(D,"LI",{});var rke=s(UM);xbe=n(rke,"STRONG",{});var Ybt=s(xbe);dlr=r(Ybt,"dpr"),Ybt.forEach(t),clr=r(rke," \u2014 "),Pz=n(rke,"A",{href:!0});var Kbt=s(Pz);mlr=r(Kbt,"TFDPRQuestionEncoder"),Kbt.forEach(t),flr=r(rke," (DPR model)"),rke.forEach(t),glr=i(D),JM=n(D,"LI",{});var tke=s(JM);$be=n(tke,"STRONG",{});var Zbt=s($be);hlr=r(Zbt,"electra"),Zbt.forEach(t),ulr=r(tke," \u2014 "),Bz=n(tke,"A",{href:!0});var e2t=s(Bz);plr=r(e2t,"TFElectraModel"),e2t.forEach(t),_lr=r(tke," (ELECTRA model)"),tke.forEach(t),blr=i(D),YM=n(D,"LI",{});var ake=s(YM);kbe=n(ake,"STRONG",{});var o2t=s(kbe);vlr=r(o2t,"flaubert"),o2t.forEach(t),Flr=r(ake," \u2014 "),Iz=n(ake,"A",{href:!0});var r2t=s(Iz);Tlr=r(r2t,"TFFlaubertModel"),r2t.forEach(t),Mlr=r(ake," (FlauBERT model)"),ake.forEach(t),Elr=i(D),Bs=n(D,"LI",{});var E$=s(Bs);Sbe=n(E$,"STRONG",{});var t2t=s(Sbe);Clr=r(t2t,"funnel"),t2t.forEach(t),wlr=r(E$," \u2014 "),qz=n(E$,"A",{href:!0});var a2t=s(qz);Alr=r(a2t,"TFFunnelModel"),a2t.forEach(t),ylr=r(E$," or "),Nz=n(E$,"A",{href:!0});var n2t=s(Nz);Llr=r(n2t,"TFFunnelBaseModel"),n2t.forEach(t),xlr=r(E$," (Funnel Transformer model)"),E$.forEach(t),$lr=i(D),KM=n(D,"LI",{});var nke=s(KM);Rbe=n(nke,"STRONG",{});var s2t=s(Rbe);klr=r(s2t,"gpt2"),s2t.forEach(t),Slr=r(nke," \u2014 "),jz=n(nke,"A",{href:!0});var l2t=s(jz);Rlr=r(l2t,"TFGPT2Model"),l2t.forEach(t),Plr=r(nke," (OpenAI GPT-2 model)"),nke.forEach(t),Blr=i(D),ZM=n(D,"LI",{});var ske=s(ZM);Pbe=n(ske,"STRONG",{});var i2t=s(Pbe);Ilr=r(i2t,"gptj"),i2t.forEach(t),qlr=r(ske," \u2014 "),Dz=n(ske,"A",{href:!0});var d2t=s(Dz);Nlr=r(d2t,"TFGPTJModel"),d2t.forEach(t),jlr=r(ske," (GPT-J model)"),ske.forEach(t),Dlr=i(D),e4=n(D,"LI",{});var lke=s(e4);Bbe=n(lke,"STRONG",{});var c2t=s(Bbe);Glr=r(c2t,"hubert"),c2t.forEach(t),Olr=r(lke," \u2014 "),Gz=n(lke,"A",{href:!0});var m2t=s(Gz);Vlr=r(m2t,"TFHubertModel"),m2t.forEach(t),Xlr=r(lke," (Hubert model)"),lke.forEach(t),zlr=i(D),o4=n(D,"LI",{});var ike=s(o4);Ibe=n(ike,"STRONG",{});var f2t=s(Ibe);Wlr=r(f2t,"layoutlm"),f2t.forEach(t),Qlr=r(ike," \u2014 "),Oz=n(ike,"A",{href:!0});var g2t=s(Oz);Hlr=r(g2t,"TFLayoutLMModel"),g2t.forEach(t),Ulr=r(ike," (LayoutLM model)"),ike.forEach(t),Jlr=i(D),r4=n(D,"LI",{});var dke=s(r4);qbe=n(dke,"STRONG",{});var h2t=s(qbe);Ylr=r(h2t,"led"),h2t.forEach(t),Klr=r(dke," \u2014 "),Vz=n(dke,"A",{href:!0});var u2t=s(Vz);Zlr=r(u2t,"TFLEDModel"),u2t.forEach(t),eir=r(dke," (LED model)"),dke.forEach(t),oir=i(D),t4=n(D,"LI",{});var cke=s(t4);Nbe=n(cke,"STRONG",{});var p2t=s(Nbe);rir=r(p2t,"longformer"),p2t.forEach(t),tir=r(cke," \u2014 "),Xz=n(cke,"A",{href:!0});var _2t=s(Xz);air=r(_2t,"TFLongformerModel"),_2t.forEach(t),nir=r(cke," (Longformer model)"),cke.forEach(t),sir=i(D),a4=n(D,"LI",{});var mke=s(a4);jbe=n(mke,"STRONG",{});var b2t=s(jbe);lir=r(b2t,"lxmert"),b2t.forEach(t),iir=r(mke," \u2014 "),zz=n(mke,"A",{href:!0});var v2t=s(zz);dir=r(v2t,"TFLxmertModel"),v2t.forEach(t),cir=r(mke," (LXMERT model)"),mke.forEach(t),mir=i(D),n4=n(D,"LI",{});var fke=s(n4);Dbe=n(fke,"STRONG",{});var F2t=s(Dbe);fir=r(F2t,"marian"),F2t.forEach(t),gir=r(fke," \u2014 "),Wz=n(fke,"A",{href:!0});var T2t=s(Wz);hir=r(T2t,"TFMarianModel"),T2t.forEach(t),uir=r(fke," (Marian model)"),fke.forEach(t),pir=i(D),s4=n(D,"LI",{});var gke=s(s4);Gbe=n(gke,"STRONG",{});var M2t=s(Gbe);_ir=r(M2t,"mbart"),M2t.forEach(t),bir=r(gke," \u2014 "),Qz=n(gke,"A",{href:!0});var E2t=s(Qz);vir=r(E2t,"TFMBartModel"),E2t.forEach(t),Fir=r(gke," (mBART model)"),gke.forEach(t),Tir=i(D),l4=n(D,"LI",{});var hke=s(l4);Obe=n(hke,"STRONG",{});var C2t=s(Obe);Mir=r(C2t,"mobilebert"),C2t.forEach(t),Eir=r(hke," \u2014 "),Hz=n(hke,"A",{href:!0});var w2t=s(Hz);Cir=r(w2t,"TFMobileBertModel"),w2t.forEach(t),wir=r(hke," (MobileBERT model)"),hke.forEach(t),Air=i(D),i4=n(D,"LI",{});var uke=s(i4);Vbe=n(uke,"STRONG",{});var A2t=s(Vbe);yir=r(A2t,"mpnet"),A2t.forEach(t),Lir=r(uke," \u2014 "),Uz=n(uke,"A",{href:!0});var y2t=s(Uz);xir=r(y2t,"TFMPNetModel"),y2t.forEach(t),$ir=r(uke," (MPNet model)"),uke.forEach(t),kir=i(D),d4=n(D,"LI",{});var pke=s(d4);Xbe=n(pke,"STRONG",{});var L2t=s(Xbe);Sir=r(L2t,"mt5"),L2t.forEach(t),Rir=r(pke," \u2014 "),Jz=n(pke,"A",{href:!0});var x2t=s(Jz);Pir=r(x2t,"TFMT5Model"),x2t.forEach(t),Bir=r(pke," (mT5 model)"),pke.forEach(t),Iir=i(D),c4=n(D,"LI",{});var _ke=s(c4);zbe=n(_ke,"STRONG",{});var $2t=s(zbe);qir=r($2t,"openai-gpt"),$2t.forEach(t),Nir=r(_ke," \u2014 "),Yz=n(_ke,"A",{href:!0});var k2t=s(Yz);jir=r(k2t,"TFOpenAIGPTModel"),k2t.forEach(t),Dir=r(_ke," (OpenAI GPT model)"),_ke.forEach(t),Gir=i(D),m4=n(D,"LI",{});var bke=s(m4);Wbe=n(bke,"STRONG",{});var S2t=s(Wbe);Oir=r(S2t,"pegasus"),S2t.forEach(t),Vir=r(bke," \u2014 "),Kz=n(bke,"A",{href:!0});var R2t=s(Kz);Xir=r(R2t,"TFPegasusModel"),R2t.forEach(t),zir=r(bke," (Pegasus model)"),bke.forEach(t),Wir=i(D),f4=n(D,"LI",{});var vke=s(f4);Qbe=n(vke,"STRONG",{});var P2t=s(Qbe);Qir=r(P2t,"rembert"),P2t.forEach(t),Hir=r(vke," \u2014 "),Zz=n(vke,"A",{href:!0});var B2t=s(Zz);Uir=r(B2t,"TFRemBertModel"),B2t.forEach(t),Jir=r(vke," (RemBERT model)"),vke.forEach(t),Yir=i(D),g4=n(D,"LI",{});var Fke=s(g4);Hbe=n(Fke,"STRONG",{});var I2t=s(Hbe);Kir=r(I2t,"roberta"),I2t.forEach(t),Zir=r(Fke," \u2014 "),eW=n(Fke,"A",{href:!0});var q2t=s(eW);edr=r(q2t,"TFRobertaModel"),q2t.forEach(t),odr=r(Fke," (RoBERTa model)"),Fke.forEach(t),rdr=i(D),h4=n(D,"LI",{});var Tke=s(h4);Ube=n(Tke,"STRONG",{});var N2t=s(Ube);tdr=r(N2t,"roformer"),N2t.forEach(t),adr=r(Tke," \u2014 "),oW=n(Tke,"A",{href:!0});var j2t=s(oW);ndr=r(j2t,"TFRoFormerModel"),j2t.forEach(t),sdr=r(Tke," (RoFormer model)"),Tke.forEach(t),ldr=i(D),u4=n(D,"LI",{});var Mke=s(u4);Jbe=n(Mke,"STRONG",{});var D2t=s(Jbe);idr=r(D2t,"speech_to_text"),D2t.forEach(t),ddr=r(Mke," \u2014 "),rW=n(Mke,"A",{href:!0});var G2t=s(rW);cdr=r(G2t,"TFSpeech2TextModel"),G2t.forEach(t),mdr=r(Mke," (Speech2Text model)"),Mke.forEach(t),fdr=i(D),p4=n(D,"LI",{});var Eke=s(p4);Ybe=n(Eke,"STRONG",{});var O2t=s(Ybe);gdr=r(O2t,"swin"),O2t.forEach(t),hdr=r(Eke," \u2014 "),tW=n(Eke,"A",{href:!0});var V2t=s(tW);udr=r(V2t,"TFSwinModel"),V2t.forEach(t),pdr=r(Eke," (Swin model)"),Eke.forEach(t),_dr=i(D),_4=n(D,"LI",{});var Cke=s(_4);Kbe=n(Cke,"STRONG",{});var X2t=s(Kbe);bdr=r(X2t,"t5"),X2t.forEach(t),vdr=r(Cke," \u2014 "),aW=n(Cke,"A",{href:!0});var z2t=s(aW);Fdr=r(z2t,"TFT5Model"),z2t.forEach(t),Tdr=r(Cke," (T5 model)"),Cke.forEach(t),Mdr=i(D),b4=n(D,"LI",{});var wke=s(b4);Zbe=n(wke,"STRONG",{});var W2t=s(Zbe);Edr=r(W2t,"tapas"),W2t.forEach(t),Cdr=r(wke," \u2014 "),nW=n(wke,"A",{href:!0});var Q2t=s(nW);wdr=r(Q2t,"TFTapasModel"),Q2t.forEach(t),Adr=r(wke," (TAPAS model)"),wke.forEach(t),ydr=i(D),v4=n(D,"LI",{});var Ake=s(v4);e2e=n(Ake,"STRONG",{});var H2t=s(e2e);Ldr=r(H2t,"transfo-xl"),H2t.forEach(t),xdr=r(Ake," \u2014 "),sW=n(Ake,"A",{href:!0});var U2t=s(sW);$dr=r(U2t,"TFTransfoXLModel"),U2t.forEach(t),kdr=r(Ake," (Transformer-XL model)"),Ake.forEach(t),Sdr=i(D),F4=n(D,"LI",{});var yke=s(F4);o2e=n(yke,"STRONG",{});var J2t=s(o2e);Rdr=r(J2t,"vit"),J2t.forEach(t),Pdr=r(yke," \u2014 "),lW=n(yke,"A",{href:!0});var Y2t=s(lW);Bdr=r(Y2t,"TFViTModel"),Y2t.forEach(t),Idr=r(yke," (ViT model)"),yke.forEach(t),qdr=i(D),T4=n(D,"LI",{});var Lke=s(T4);r2e=n(Lke,"STRONG",{});var K2t=s(r2e);Ndr=r(K2t,"vit_mae"),K2t.forEach(t),jdr=r(Lke," \u2014 "),iW=n(Lke,"A",{href:!0});var Z2t=s(iW);Ddr=r(Z2t,"TFViTMAEModel"),Z2t.forEach(t),Gdr=r(Lke," (ViTMAE model)"),Lke.forEach(t),Odr=i(D),M4=n(D,"LI",{});var xke=s(M4);t2e=n(xke,"STRONG",{});var evt=s(t2e);Vdr=r(evt,"wav2vec2"),evt.forEach(t),Xdr=r(xke," \u2014 "),dW=n(xke,"A",{href:!0});var ovt=s(dW);zdr=r(ovt,"TFWav2Vec2Model"),ovt.forEach(t),Wdr=r(xke," (Wav2Vec2 model)"),xke.forEach(t),Qdr=i(D),E4=n(D,"LI",{});var $ke=s(E4);a2e=n($ke,"STRONG",{});var rvt=s(a2e);Hdr=r(rvt,"xlm"),rvt.forEach(t),Udr=r($ke," \u2014 "),cW=n($ke,"A",{href:!0});var tvt=s(cW);Jdr=r(tvt,"TFXLMModel"),tvt.forEach(t),Ydr=r($ke," (XLM model)"),$ke.forEach(t),Kdr=i(D),C4=n(D,"LI",{});var kke=s(C4);n2e=n(kke,"STRONG",{});var avt=s(n2e);Zdr=r(avt,"xlm-roberta"),avt.forEach(t),ecr=r(kke," \u2014 "),mW=n(kke,"A",{href:!0});var nvt=s(mW);ocr=r(nvt,"TFXLMRobertaModel"),nvt.forEach(t),rcr=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),tcr=i(D),w4=n(D,"LI",{});var Ske=s(w4);s2e=n(Ske,"STRONG",{});var svt=s(s2e);acr=r(svt,"xlnet"),svt.forEach(t),ncr=r(Ske," \u2014 "),fW=n(Ske,"A",{href:!0});var lvt=s(fW);scr=r(lvt,"TFXLNetModel"),lvt.forEach(t),lcr=r(Ske," (XLNet model)"),Ske.forEach(t),D.forEach(t),icr=i(gl),T(A4.$$.fragment,gl),gl.forEach(t),fl.forEach(t),Sqe=i(m),Vd=n(m,"H2",{class:!0});var Nje=s(Vd);y4=n(Nje,"A",{id:!0,class:!0,href:!0});var ivt=s(y4);l2e=n(ivt,"SPAN",{});var dvt=s(l2e);T(Q8.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),dcr=i(Nje),i2e=n(Nje,"SPAN",{});var cvt=s(i2e);ccr=r(cvt,"TFAutoModelForPreTraining"),cvt.forEach(t),Nje.forEach(t),Rqe=i(m),Ko=n(m,"DIV",{class:!0});var hl=s(Ko);T(H8.$$.fragment,hl),mcr=i(hl),Xd=n(hl,"P",{});var MZ=s(Xd);fcr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gW=n(MZ,"A",{href:!0});var mvt=s(gW);gcr=r(mvt,"from_pretrained()"),mvt.forEach(t),hcr=r(MZ," class method or the "),hW=n(MZ,"A",{href:!0});var fvt=s(hW);ucr=r(fvt,"from_config()"),fvt.forEach(t),pcr=r(MZ,` class
method.`),MZ.forEach(t),_cr=i(hl),U8=n(hl,"P",{});var jje=s(U8);bcr=r(jje,"This class cannot be instantiated directly using "),d2e=n(jje,"CODE",{});var gvt=s(d2e);vcr=r(gvt,"__init__()"),gvt.forEach(t),Fcr=r(jje," (throws an error)."),jje.forEach(t),Tcr=i(hl),Lt=n(hl,"DIV",{class:!0});var s0=s(Lt);T(J8.$$.fragment,s0),Mcr=i(s0),c2e=n(s0,"P",{});var hvt=s(c2e);Ecr=r(hvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hvt.forEach(t),Ccr=i(s0),zd=n(s0,"P",{});var EZ=s(zd);wcr=r(EZ,`Note:
Loading a model from its configuration file does `),m2e=n(EZ,"STRONG",{});var uvt=s(m2e);Acr=r(uvt,"not"),uvt.forEach(t),ycr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(EZ,"A",{href:!0});var pvt=s(uW);Lcr=r(pvt,"from_pretrained()"),pvt.forEach(t),xcr=r(EZ," to load the model weights."),EZ.forEach(t),$cr=i(s0),T(L4.$$.fragment,s0),s0.forEach(t),kcr=i(hl),Ar=n(hl,"DIV",{class:!0});var ul=s(Ar);T(Y8.$$.fragment,ul),Scr=i(ul),f2e=n(ul,"P",{});var _vt=s(f2e);Rcr=r(_vt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_vt.forEach(t),Pcr=i(ul),Za=n(ul,"P",{});var l0=s(Za);Bcr=r(l0,"The model class to instantiate is selected based on the "),g2e=n(l0,"CODE",{});var bvt=s(g2e);Icr=r(bvt,"model_type"),bvt.forEach(t),qcr=r(l0,` property of the config object (either
passed as an argument or loaded from `),h2e=n(l0,"CODE",{});var vvt=s(h2e);Ncr=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),jcr=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(l0,"CODE",{});var Fvt=s(u2e);Dcr=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),Gcr=r(l0,":"),l0.forEach(t),Ocr=i(ul),se=n(ul,"UL",{});var le=s(se);x4=n(le,"LI",{});var Rke=s(x4);p2e=n(Rke,"STRONG",{});var Tvt=s(p2e);Vcr=r(Tvt,"albert"),Tvt.forEach(t),Xcr=r(Rke," \u2014 "),pW=n(Rke,"A",{href:!0});var Mvt=s(pW);zcr=r(Mvt,"TFAlbertForPreTraining"),Mvt.forEach(t),Wcr=r(Rke," (ALBERT model)"),Rke.forEach(t),Qcr=i(le),$4=n(le,"LI",{});var Pke=s($4);_2e=n(Pke,"STRONG",{});var Evt=s(_2e);Hcr=r(Evt,"bart"),Evt.forEach(t),Ucr=r(Pke," \u2014 "),_W=n(Pke,"A",{href:!0});var Cvt=s(_W);Jcr=r(Cvt,"TFBartForConditionalGeneration"),Cvt.forEach(t),Ycr=r(Pke," (BART model)"),Pke.forEach(t),Kcr=i(le),k4=n(le,"LI",{});var Bke=s(k4);b2e=n(Bke,"STRONG",{});var wvt=s(b2e);Zcr=r(wvt,"bert"),wvt.forEach(t),emr=r(Bke," \u2014 "),bW=n(Bke,"A",{href:!0});var Avt=s(bW);omr=r(Avt,"TFBertForPreTraining"),Avt.forEach(t),rmr=r(Bke," (BERT model)"),Bke.forEach(t),tmr=i(le),S4=n(le,"LI",{});var Ike=s(S4);v2e=n(Ike,"STRONG",{});var yvt=s(v2e);amr=r(yvt,"camembert"),yvt.forEach(t),nmr=r(Ike," \u2014 "),vW=n(Ike,"A",{href:!0});var Lvt=s(vW);smr=r(Lvt,"TFCamembertForMaskedLM"),Lvt.forEach(t),lmr=r(Ike," (CamemBERT model)"),Ike.forEach(t),imr=i(le),R4=n(le,"LI",{});var qke=s(R4);F2e=n(qke,"STRONG",{});var xvt=s(F2e);dmr=r(xvt,"ctrl"),xvt.forEach(t),cmr=r(qke," \u2014 "),FW=n(qke,"A",{href:!0});var $vt=s(FW);mmr=r($vt,"TFCTRLLMHeadModel"),$vt.forEach(t),fmr=r(qke," (CTRL model)"),qke.forEach(t),gmr=i(le),P4=n(le,"LI",{});var Nke=s(P4);T2e=n(Nke,"STRONG",{});var kvt=s(T2e);hmr=r(kvt,"distilbert"),kvt.forEach(t),umr=r(Nke," \u2014 "),TW=n(Nke,"A",{href:!0});var Svt=s(TW);pmr=r(Svt,"TFDistilBertForMaskedLM"),Svt.forEach(t),_mr=r(Nke," (DistilBERT model)"),Nke.forEach(t),bmr=i(le),B4=n(le,"LI",{});var jke=s(B4);M2e=n(jke,"STRONG",{});var Rvt=s(M2e);vmr=r(Rvt,"electra"),Rvt.forEach(t),Fmr=r(jke," \u2014 "),MW=n(jke,"A",{href:!0});var Pvt=s(MW);Tmr=r(Pvt,"TFElectraForPreTraining"),Pvt.forEach(t),Mmr=r(jke," (ELECTRA model)"),jke.forEach(t),Emr=i(le),I4=n(le,"LI",{});var Dke=s(I4);E2e=n(Dke,"STRONG",{});var Bvt=s(E2e);Cmr=r(Bvt,"flaubert"),Bvt.forEach(t),wmr=r(Dke," \u2014 "),EW=n(Dke,"A",{href:!0});var Ivt=s(EW);Amr=r(Ivt,"TFFlaubertWithLMHeadModel"),Ivt.forEach(t),ymr=r(Dke," (FlauBERT model)"),Dke.forEach(t),Lmr=i(le),q4=n(le,"LI",{});var Gke=s(q4);C2e=n(Gke,"STRONG",{});var qvt=s(C2e);xmr=r(qvt,"funnel"),qvt.forEach(t),$mr=r(Gke," \u2014 "),CW=n(Gke,"A",{href:!0});var Nvt=s(CW);kmr=r(Nvt,"TFFunnelForPreTraining"),Nvt.forEach(t),Smr=r(Gke," (Funnel Transformer model)"),Gke.forEach(t),Rmr=i(le),N4=n(le,"LI",{});var Oke=s(N4);w2e=n(Oke,"STRONG",{});var jvt=s(w2e);Pmr=r(jvt,"gpt2"),jvt.forEach(t),Bmr=r(Oke," \u2014 "),wW=n(Oke,"A",{href:!0});var Dvt=s(wW);Imr=r(Dvt,"TFGPT2LMHeadModel"),Dvt.forEach(t),qmr=r(Oke," (OpenAI GPT-2 model)"),Oke.forEach(t),Nmr=i(le),j4=n(le,"LI",{});var Vke=s(j4);A2e=n(Vke,"STRONG",{});var Gvt=s(A2e);jmr=r(Gvt,"layoutlm"),Gvt.forEach(t),Dmr=r(Vke," \u2014 "),AW=n(Vke,"A",{href:!0});var Ovt=s(AW);Gmr=r(Ovt,"TFLayoutLMForMaskedLM"),Ovt.forEach(t),Omr=r(Vke," (LayoutLM model)"),Vke.forEach(t),Vmr=i(le),D4=n(le,"LI",{});var Xke=s(D4);y2e=n(Xke,"STRONG",{});var Vvt=s(y2e);Xmr=r(Vvt,"lxmert"),Vvt.forEach(t),zmr=r(Xke," \u2014 "),yW=n(Xke,"A",{href:!0});var Xvt=s(yW);Wmr=r(Xvt,"TFLxmertForPreTraining"),Xvt.forEach(t),Qmr=r(Xke," (LXMERT model)"),Xke.forEach(t),Hmr=i(le),G4=n(le,"LI",{});var zke=s(G4);L2e=n(zke,"STRONG",{});var zvt=s(L2e);Umr=r(zvt,"mobilebert"),zvt.forEach(t),Jmr=r(zke," \u2014 "),LW=n(zke,"A",{href:!0});var Wvt=s(LW);Ymr=r(Wvt,"TFMobileBertForPreTraining"),Wvt.forEach(t),Kmr=r(zke," (MobileBERT model)"),zke.forEach(t),Zmr=i(le),O4=n(le,"LI",{});var Wke=s(O4);x2e=n(Wke,"STRONG",{});var Qvt=s(x2e);efr=r(Qvt,"mpnet"),Qvt.forEach(t),ofr=r(Wke," \u2014 "),xW=n(Wke,"A",{href:!0});var Hvt=s(xW);rfr=r(Hvt,"TFMPNetForMaskedLM"),Hvt.forEach(t),tfr=r(Wke," (MPNet model)"),Wke.forEach(t),afr=i(le),V4=n(le,"LI",{});var Qke=s(V4);$2e=n(Qke,"STRONG",{});var Uvt=s($2e);nfr=r(Uvt,"openai-gpt"),Uvt.forEach(t),sfr=r(Qke," \u2014 "),$W=n(Qke,"A",{href:!0});var Jvt=s($W);lfr=r(Jvt,"TFOpenAIGPTLMHeadModel"),Jvt.forEach(t),ifr=r(Qke," (OpenAI GPT model)"),Qke.forEach(t),dfr=i(le),X4=n(le,"LI",{});var Hke=s(X4);k2e=n(Hke,"STRONG",{});var Yvt=s(k2e);cfr=r(Yvt,"roberta"),Yvt.forEach(t),mfr=r(Hke," \u2014 "),kW=n(Hke,"A",{href:!0});var Kvt=s(kW);ffr=r(Kvt,"TFRobertaForMaskedLM"),Kvt.forEach(t),gfr=r(Hke," (RoBERTa model)"),Hke.forEach(t),hfr=i(le),z4=n(le,"LI",{});var Uke=s(z4);S2e=n(Uke,"STRONG",{});var Zvt=s(S2e);ufr=r(Zvt,"t5"),Zvt.forEach(t),pfr=r(Uke," \u2014 "),SW=n(Uke,"A",{href:!0});var eFt=s(SW);_fr=r(eFt,"TFT5ForConditionalGeneration"),eFt.forEach(t),bfr=r(Uke," (T5 model)"),Uke.forEach(t),vfr=i(le),W4=n(le,"LI",{});var Jke=s(W4);R2e=n(Jke,"STRONG",{});var oFt=s(R2e);Ffr=r(oFt,"tapas"),oFt.forEach(t),Tfr=r(Jke," \u2014 "),RW=n(Jke,"A",{href:!0});var rFt=s(RW);Mfr=r(rFt,"TFTapasForMaskedLM"),rFt.forEach(t),Efr=r(Jke," (TAPAS model)"),Jke.forEach(t),Cfr=i(le),Q4=n(le,"LI",{});var Yke=s(Q4);P2e=n(Yke,"STRONG",{});var tFt=s(P2e);wfr=r(tFt,"transfo-xl"),tFt.forEach(t),Afr=r(Yke," \u2014 "),PW=n(Yke,"A",{href:!0});var aFt=s(PW);yfr=r(aFt,"TFTransfoXLLMHeadModel"),aFt.forEach(t),Lfr=r(Yke," (Transformer-XL model)"),Yke.forEach(t),xfr=i(le),H4=n(le,"LI",{});var Kke=s(H4);B2e=n(Kke,"STRONG",{});var nFt=s(B2e);$fr=r(nFt,"vit_mae"),nFt.forEach(t),kfr=r(Kke," \u2014 "),BW=n(Kke,"A",{href:!0});var sFt=s(BW);Sfr=r(sFt,"TFViTMAEForPreTraining"),sFt.forEach(t),Rfr=r(Kke," (ViTMAE model)"),Kke.forEach(t),Pfr=i(le),U4=n(le,"LI",{});var Zke=s(U4);I2e=n(Zke,"STRONG",{});var lFt=s(I2e);Bfr=r(lFt,"xlm"),lFt.forEach(t),Ifr=r(Zke," \u2014 "),IW=n(Zke,"A",{href:!0});var iFt=s(IW);qfr=r(iFt,"TFXLMWithLMHeadModel"),iFt.forEach(t),Nfr=r(Zke," (XLM model)"),Zke.forEach(t),jfr=i(le),J4=n(le,"LI",{});var eSe=s(J4);q2e=n(eSe,"STRONG",{});var dFt=s(q2e);Dfr=r(dFt,"xlm-roberta"),dFt.forEach(t),Gfr=r(eSe," \u2014 "),qW=n(eSe,"A",{href:!0});var cFt=s(qW);Ofr=r(cFt,"TFXLMRobertaForMaskedLM"),cFt.forEach(t),Vfr=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),Xfr=i(le),Y4=n(le,"LI",{});var oSe=s(Y4);N2e=n(oSe,"STRONG",{});var mFt=s(N2e);zfr=r(mFt,"xlnet"),mFt.forEach(t),Wfr=r(oSe," \u2014 "),NW=n(oSe,"A",{href:!0});var fFt=s(NW);Qfr=r(fFt,"TFXLNetLMHeadModel"),fFt.forEach(t),Hfr=r(oSe," (XLNet model)"),oSe.forEach(t),le.forEach(t),Ufr=i(ul),T(K4.$$.fragment,ul),ul.forEach(t),hl.forEach(t),Pqe=i(m),Wd=n(m,"H2",{class:!0});var Dje=s(Wd);Z4=n(Dje,"A",{id:!0,class:!0,href:!0});var gFt=s(Z4);j2e=n(gFt,"SPAN",{});var hFt=s(j2e);T(K8.$$.fragment,hFt),hFt.forEach(t),gFt.forEach(t),Jfr=i(Dje),D2e=n(Dje,"SPAN",{});var uFt=s(D2e);Yfr=r(uFt,"TFAutoModelForCausalLM"),uFt.forEach(t),Dje.forEach(t),Bqe=i(m),Zo=n(m,"DIV",{class:!0});var pl=s(Zo);T(Z8.$$.fragment,pl),Kfr=i(pl),Qd=n(pl,"P",{});var CZ=s(Qd);Zfr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jW=n(CZ,"A",{href:!0});var pFt=s(jW);egr=r(pFt,"from_pretrained()"),pFt.forEach(t),ogr=r(CZ," class method or the "),DW=n(CZ,"A",{href:!0});var _Ft=s(DW);rgr=r(_Ft,"from_config()"),_Ft.forEach(t),tgr=r(CZ,` class
method.`),CZ.forEach(t),agr=i(pl),ex=n(pl,"P",{});var Gje=s(ex);ngr=r(Gje,"This class cannot be instantiated directly using "),G2e=n(Gje,"CODE",{});var bFt=s(G2e);sgr=r(bFt,"__init__()"),bFt.forEach(t),lgr=r(Gje," (throws an error)."),Gje.forEach(t),igr=i(pl),xt=n(pl,"DIV",{class:!0});var i0=s(xt);T(ox.$$.fragment,i0),dgr=i(i0),O2e=n(i0,"P",{});var vFt=s(O2e);cgr=r(vFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vFt.forEach(t),mgr=i(i0),Hd=n(i0,"P",{});var wZ=s(Hd);fgr=r(wZ,`Note:
Loading a model from its configuration file does `),V2e=n(wZ,"STRONG",{});var FFt=s(V2e);ggr=r(FFt,"not"),FFt.forEach(t),hgr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(wZ,"A",{href:!0});var TFt=s(GW);ugr=r(TFt,"from_pretrained()"),TFt.forEach(t),pgr=r(wZ," to load the model weights."),wZ.forEach(t),_gr=i(i0),T(eE.$$.fragment,i0),i0.forEach(t),bgr=i(pl),yr=n(pl,"DIV",{class:!0});var _l=s(yr);T(rx.$$.fragment,_l),vgr=i(_l),X2e=n(_l,"P",{});var MFt=s(X2e);Fgr=r(MFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),MFt.forEach(t),Tgr=i(_l),en=n(_l,"P",{});var d0=s(en);Mgr=r(d0,"The model class to instantiate is selected based on the "),z2e=n(d0,"CODE",{});var EFt=s(z2e);Egr=r(EFt,"model_type"),EFt.forEach(t),Cgr=r(d0,` property of the config object (either
passed as an argument or loaded from `),W2e=n(d0,"CODE",{});var CFt=s(W2e);wgr=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),Agr=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(d0,"CODE",{});var wFt=s(Q2e);ygr=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),Lgr=r(d0,":"),d0.forEach(t),xgr=i(_l),Te=n(_l,"UL",{});var Ce=s(Te);oE=n(Ce,"LI",{});var rSe=s(oE);H2e=n(rSe,"STRONG",{});var AFt=s(H2e);$gr=r(AFt,"bert"),AFt.forEach(t),kgr=r(rSe," \u2014 "),OW=n(rSe,"A",{href:!0});var yFt=s(OW);Sgr=r(yFt,"TFBertLMHeadModel"),yFt.forEach(t),Rgr=r(rSe," (BERT model)"),rSe.forEach(t),Pgr=i(Ce),rE=n(Ce,"LI",{});var tSe=s(rE);U2e=n(tSe,"STRONG",{});var LFt=s(U2e);Bgr=r(LFt,"camembert"),LFt.forEach(t),Igr=r(tSe," \u2014 "),VW=n(tSe,"A",{href:!0});var xFt=s(VW);qgr=r(xFt,"TFCamembertForCausalLM"),xFt.forEach(t),Ngr=r(tSe," (CamemBERT model)"),tSe.forEach(t),jgr=i(Ce),tE=n(Ce,"LI",{});var aSe=s(tE);J2e=n(aSe,"STRONG",{});var $Ft=s(J2e);Dgr=r($Ft,"ctrl"),$Ft.forEach(t),Ggr=r(aSe," \u2014 "),XW=n(aSe,"A",{href:!0});var kFt=s(XW);Ogr=r(kFt,"TFCTRLLMHeadModel"),kFt.forEach(t),Vgr=r(aSe," (CTRL model)"),aSe.forEach(t),Xgr=i(Ce),aE=n(Ce,"LI",{});var nSe=s(aE);Y2e=n(nSe,"STRONG",{});var SFt=s(Y2e);zgr=r(SFt,"gpt2"),SFt.forEach(t),Wgr=r(nSe," \u2014 "),zW=n(nSe,"A",{href:!0});var RFt=s(zW);Qgr=r(RFt,"TFGPT2LMHeadModel"),RFt.forEach(t),Hgr=r(nSe," (OpenAI GPT-2 model)"),nSe.forEach(t),Ugr=i(Ce),nE=n(Ce,"LI",{});var sSe=s(nE);K2e=n(sSe,"STRONG",{});var PFt=s(K2e);Jgr=r(PFt,"gptj"),PFt.forEach(t),Ygr=r(sSe," \u2014 "),WW=n(sSe,"A",{href:!0});var BFt=s(WW);Kgr=r(BFt,"TFGPTJForCausalLM"),BFt.forEach(t),Zgr=r(sSe," (GPT-J model)"),sSe.forEach(t),ehr=i(Ce),sE=n(Ce,"LI",{});var lSe=s(sE);Z2e=n(lSe,"STRONG",{});var IFt=s(Z2e);ohr=r(IFt,"openai-gpt"),IFt.forEach(t),rhr=r(lSe," \u2014 "),QW=n(lSe,"A",{href:!0});var qFt=s(QW);thr=r(qFt,"TFOpenAIGPTLMHeadModel"),qFt.forEach(t),ahr=r(lSe," (OpenAI GPT model)"),lSe.forEach(t),nhr=i(Ce),lE=n(Ce,"LI",{});var iSe=s(lE);eve=n(iSe,"STRONG",{});var NFt=s(eve);shr=r(NFt,"rembert"),NFt.forEach(t),lhr=r(iSe," \u2014 "),HW=n(iSe,"A",{href:!0});var jFt=s(HW);ihr=r(jFt,"TFRemBertForCausalLM"),jFt.forEach(t),dhr=r(iSe," (RemBERT model)"),iSe.forEach(t),chr=i(Ce),iE=n(Ce,"LI",{});var dSe=s(iE);ove=n(dSe,"STRONG",{});var DFt=s(ove);mhr=r(DFt,"roberta"),DFt.forEach(t),fhr=r(dSe," \u2014 "),UW=n(dSe,"A",{href:!0});var GFt=s(UW);ghr=r(GFt,"TFRobertaForCausalLM"),GFt.forEach(t),hhr=r(dSe," (RoBERTa model)"),dSe.forEach(t),uhr=i(Ce),dE=n(Ce,"LI",{});var cSe=s(dE);rve=n(cSe,"STRONG",{});var OFt=s(rve);phr=r(OFt,"roformer"),OFt.forEach(t),_hr=r(cSe," \u2014 "),JW=n(cSe,"A",{href:!0});var VFt=s(JW);bhr=r(VFt,"TFRoFormerForCausalLM"),VFt.forEach(t),vhr=r(cSe," (RoFormer model)"),cSe.forEach(t),Fhr=i(Ce),cE=n(Ce,"LI",{});var mSe=s(cE);tve=n(mSe,"STRONG",{});var XFt=s(tve);Thr=r(XFt,"transfo-xl"),XFt.forEach(t),Mhr=r(mSe," \u2014 "),YW=n(mSe,"A",{href:!0});var zFt=s(YW);Ehr=r(zFt,"TFTransfoXLLMHeadModel"),zFt.forEach(t),Chr=r(mSe," (Transformer-XL model)"),mSe.forEach(t),whr=i(Ce),mE=n(Ce,"LI",{});var fSe=s(mE);ave=n(fSe,"STRONG",{});var WFt=s(ave);Ahr=r(WFt,"xlm"),WFt.forEach(t),yhr=r(fSe," \u2014 "),KW=n(fSe,"A",{href:!0});var QFt=s(KW);Lhr=r(QFt,"TFXLMWithLMHeadModel"),QFt.forEach(t),xhr=r(fSe," (XLM model)"),fSe.forEach(t),$hr=i(Ce),fE=n(Ce,"LI",{});var gSe=s(fE);nve=n(gSe,"STRONG",{});var HFt=s(nve);khr=r(HFt,"xlnet"),HFt.forEach(t),Shr=r(gSe," \u2014 "),ZW=n(gSe,"A",{href:!0});var UFt=s(ZW);Rhr=r(UFt,"TFXLNetLMHeadModel"),UFt.forEach(t),Phr=r(gSe," (XLNet model)"),gSe.forEach(t),Ce.forEach(t),Bhr=i(_l),T(gE.$$.fragment,_l),_l.forEach(t),pl.forEach(t),Iqe=i(m),Ud=n(m,"H2",{class:!0});var Oje=s(Ud);hE=n(Oje,"A",{id:!0,class:!0,href:!0});var JFt=s(hE);sve=n(JFt,"SPAN",{});var YFt=s(sve);T(tx.$$.fragment,YFt),YFt.forEach(t),JFt.forEach(t),Ihr=i(Oje),lve=n(Oje,"SPAN",{});var KFt=s(lve);qhr=r(KFt,"TFAutoModelForImageClassification"),KFt.forEach(t),Oje.forEach(t),qqe=i(m),er=n(m,"DIV",{class:!0});var bl=s(er);T(ax.$$.fragment,bl),Nhr=i(bl),Jd=n(bl,"P",{});var AZ=s(Jd);jhr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eQ=n(AZ,"A",{href:!0});var ZFt=s(eQ);Dhr=r(ZFt,"from_pretrained()"),ZFt.forEach(t),Ghr=r(AZ," class method or the "),oQ=n(AZ,"A",{href:!0});var e1t=s(oQ);Ohr=r(e1t,"from_config()"),e1t.forEach(t),Vhr=r(AZ,` class
method.`),AZ.forEach(t),Xhr=i(bl),nx=n(bl,"P",{});var Vje=s(nx);zhr=r(Vje,"This class cannot be instantiated directly using "),ive=n(Vje,"CODE",{});var o1t=s(ive);Whr=r(o1t,"__init__()"),o1t.forEach(t),Qhr=r(Vje," (throws an error)."),Vje.forEach(t),Hhr=i(bl),$t=n(bl,"DIV",{class:!0});var c0=s($t);T(sx.$$.fragment,c0),Uhr=i(c0),dve=n(c0,"P",{});var r1t=s(dve);Jhr=r(r1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),r1t.forEach(t),Yhr=i(c0),Yd=n(c0,"P",{});var yZ=s(Yd);Khr=r(yZ,`Note:
Loading a model from its configuration file does `),cve=n(yZ,"STRONG",{});var t1t=s(cve);Zhr=r(t1t,"not"),t1t.forEach(t),eur=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(yZ,"A",{href:!0});var a1t=s(rQ);our=r(a1t,"from_pretrained()"),a1t.forEach(t),rur=r(yZ," to load the model weights."),yZ.forEach(t),tur=i(c0),T(uE.$$.fragment,c0),c0.forEach(t),aur=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(lx.$$.fragment,vl),nur=i(vl),mve=n(vl,"P",{});var n1t=s(mve);sur=r(n1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),n1t.forEach(t),lur=i(vl),on=n(vl,"P",{});var m0=s(on);iur=r(m0,"The model class to instantiate is selected based on the "),fve=n(m0,"CODE",{});var s1t=s(fve);dur=r(s1t,"model_type"),s1t.forEach(t),cur=r(m0,` property of the config object (either
passed as an argument or loaded from `),gve=n(m0,"CODE",{});var l1t=s(gve);mur=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),fur=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(m0,"CODE",{});var i1t=s(hve);gur=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),hur=r(m0,":"),m0.forEach(t),uur=i(vl),rn=n(vl,"UL",{});var f0=s(rn);pE=n(f0,"LI",{});var hSe=s(pE);uve=n(hSe,"STRONG",{});var d1t=s(uve);pur=r(d1t,"convnext"),d1t.forEach(t),_ur=r(hSe," \u2014 "),tQ=n(hSe,"A",{href:!0});var c1t=s(tQ);bur=r(c1t,"TFConvNextForImageClassification"),c1t.forEach(t),vur=r(hSe," (ConvNext model)"),hSe.forEach(t),Fur=i(f0),_E=n(f0,"LI",{});var uSe=s(_E);pve=n(uSe,"STRONG",{});var m1t=s(pve);Tur=r(m1t,"data2vec-vision"),m1t.forEach(t),Mur=r(uSe," \u2014 "),aQ=n(uSe,"A",{href:!0});var f1t=s(aQ);Eur=r(f1t,"TFData2VecVisionForImageClassification"),f1t.forEach(t),Cur=r(uSe," (Data2VecVision model)"),uSe.forEach(t),wur=i(f0),bE=n(f0,"LI",{});var pSe=s(bE);_ve=n(pSe,"STRONG",{});var g1t=s(_ve);Aur=r(g1t,"swin"),g1t.forEach(t),yur=r(pSe," \u2014 "),nQ=n(pSe,"A",{href:!0});var h1t=s(nQ);Lur=r(h1t,"TFSwinForImageClassification"),h1t.forEach(t),xur=r(pSe," (Swin model)"),pSe.forEach(t),$ur=i(f0),vE=n(f0,"LI",{});var _Se=s(vE);bve=n(_Se,"STRONG",{});var u1t=s(bve);kur=r(u1t,"vit"),u1t.forEach(t),Sur=r(_Se," \u2014 "),sQ=n(_Se,"A",{href:!0});var p1t=s(sQ);Rur=r(p1t,"TFViTForImageClassification"),p1t.forEach(t),Pur=r(_Se," (ViT model)"),_Se.forEach(t),f0.forEach(t),Bur=i(vl),T(FE.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Nqe=i(m),Kd=n(m,"H2",{class:!0});var Xje=s(Kd);TE=n(Xje,"A",{id:!0,class:!0,href:!0});var _1t=s(TE);vve=n(_1t,"SPAN",{});var b1t=s(vve);T(ix.$$.fragment,b1t),b1t.forEach(t),_1t.forEach(t),Iur=i(Xje),Fve=n(Xje,"SPAN",{});var v1t=s(Fve);qur=r(v1t,"TFAutoModelForMaskedLM"),v1t.forEach(t),Xje.forEach(t),jqe=i(m),or=n(m,"DIV",{class:!0});var Fl=s(or);T(dx.$$.fragment,Fl),Nur=i(Fl),Zd=n(Fl,"P",{});var LZ=s(Zd);jur=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lQ=n(LZ,"A",{href:!0});var F1t=s(lQ);Dur=r(F1t,"from_pretrained()"),F1t.forEach(t),Gur=r(LZ," class method or the "),iQ=n(LZ,"A",{href:!0});var T1t=s(iQ);Our=r(T1t,"from_config()"),T1t.forEach(t),Vur=r(LZ,` class
method.`),LZ.forEach(t),Xur=i(Fl),cx=n(Fl,"P",{});var zje=s(cx);zur=r(zje,"This class cannot be instantiated directly using "),Tve=n(zje,"CODE",{});var M1t=s(Tve);Wur=r(M1t,"__init__()"),M1t.forEach(t),Qur=r(zje," (throws an error)."),zje.forEach(t),Hur=i(Fl),kt=n(Fl,"DIV",{class:!0});var g0=s(kt);T(mx.$$.fragment,g0),Uur=i(g0),Mve=n(g0,"P",{});var E1t=s(Mve);Jur=r(E1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E1t.forEach(t),Yur=i(g0),ec=n(g0,"P",{});var xZ=s(ec);Kur=r(xZ,`Note:
Loading a model from its configuration file does `),Eve=n(xZ,"STRONG",{});var C1t=s(Eve);Zur=r(C1t,"not"),C1t.forEach(t),epr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(xZ,"A",{href:!0});var w1t=s(dQ);opr=r(w1t,"from_pretrained()"),w1t.forEach(t),rpr=r(xZ," to load the model weights."),xZ.forEach(t),tpr=i(g0),T(ME.$$.fragment,g0),g0.forEach(t),apr=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(fx.$$.fragment,Tl),npr=i(Tl),Cve=n(Tl,"P",{});var A1t=s(Cve);spr=r(A1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),A1t.forEach(t),lpr=i(Tl),tn=n(Tl,"P",{});var h0=s(tn);ipr=r(h0,"The model class to instantiate is selected based on the "),wve=n(h0,"CODE",{});var y1t=s(wve);dpr=r(y1t,"model_type"),y1t.forEach(t),cpr=r(h0,` property of the config object (either
passed as an argument or loaded from `),Ave=n(h0,"CODE",{});var L1t=s(Ave);mpr=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),fpr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(h0,"CODE",{});var x1t=s(yve);gpr=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),hpr=r(h0,":"),h0.forEach(t),upr=i(Tl),ie=n(Tl,"UL",{});var me=s(ie);EE=n(me,"LI",{});var bSe=s(EE);Lve=n(bSe,"STRONG",{});var $1t=s(Lve);ppr=r($1t,"albert"),$1t.forEach(t),_pr=r(bSe," \u2014 "),cQ=n(bSe,"A",{href:!0});var k1t=s(cQ);bpr=r(k1t,"TFAlbertForMaskedLM"),k1t.forEach(t),vpr=r(bSe," (ALBERT model)"),bSe.forEach(t),Fpr=i(me),CE=n(me,"LI",{});var vSe=s(CE);xve=n(vSe,"STRONG",{});var S1t=s(xve);Tpr=r(S1t,"bert"),S1t.forEach(t),Mpr=r(vSe," \u2014 "),mQ=n(vSe,"A",{href:!0});var R1t=s(mQ);Epr=r(R1t,"TFBertForMaskedLM"),R1t.forEach(t),Cpr=r(vSe," (BERT model)"),vSe.forEach(t),wpr=i(me),wE=n(me,"LI",{});var FSe=s(wE);$ve=n(FSe,"STRONG",{});var P1t=s($ve);Apr=r(P1t,"camembert"),P1t.forEach(t),ypr=r(FSe," \u2014 "),fQ=n(FSe,"A",{href:!0});var B1t=s(fQ);Lpr=r(B1t,"TFCamembertForMaskedLM"),B1t.forEach(t),xpr=r(FSe," (CamemBERT model)"),FSe.forEach(t),$pr=i(me),AE=n(me,"LI",{});var TSe=s(AE);kve=n(TSe,"STRONG",{});var I1t=s(kve);kpr=r(I1t,"convbert"),I1t.forEach(t),Spr=r(TSe," \u2014 "),gQ=n(TSe,"A",{href:!0});var q1t=s(gQ);Rpr=r(q1t,"TFConvBertForMaskedLM"),q1t.forEach(t),Ppr=r(TSe," (ConvBERT model)"),TSe.forEach(t),Bpr=i(me),yE=n(me,"LI",{});var MSe=s(yE);Sve=n(MSe,"STRONG",{});var N1t=s(Sve);Ipr=r(N1t,"deberta"),N1t.forEach(t),qpr=r(MSe," \u2014 "),hQ=n(MSe,"A",{href:!0});var j1t=s(hQ);Npr=r(j1t,"TFDebertaForMaskedLM"),j1t.forEach(t),jpr=r(MSe," (DeBERTa model)"),MSe.forEach(t),Dpr=i(me),LE=n(me,"LI",{});var ESe=s(LE);Rve=n(ESe,"STRONG",{});var D1t=s(Rve);Gpr=r(D1t,"deberta-v2"),D1t.forEach(t),Opr=r(ESe," \u2014 "),uQ=n(ESe,"A",{href:!0});var G1t=s(uQ);Vpr=r(G1t,"TFDebertaV2ForMaskedLM"),G1t.forEach(t),Xpr=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),zpr=i(me),xE=n(me,"LI",{});var CSe=s(xE);Pve=n(CSe,"STRONG",{});var O1t=s(Pve);Wpr=r(O1t,"distilbert"),O1t.forEach(t),Qpr=r(CSe," \u2014 "),pQ=n(CSe,"A",{href:!0});var V1t=s(pQ);Hpr=r(V1t,"TFDistilBertForMaskedLM"),V1t.forEach(t),Upr=r(CSe," (DistilBERT model)"),CSe.forEach(t),Jpr=i(me),$E=n(me,"LI",{});var wSe=s($E);Bve=n(wSe,"STRONG",{});var X1t=s(Bve);Ypr=r(X1t,"electra"),X1t.forEach(t),Kpr=r(wSe," \u2014 "),_Q=n(wSe,"A",{href:!0});var z1t=s(_Q);Zpr=r(z1t,"TFElectraForMaskedLM"),z1t.forEach(t),e_r=r(wSe," (ELECTRA model)"),wSe.forEach(t),o_r=i(me),kE=n(me,"LI",{});var ASe=s(kE);Ive=n(ASe,"STRONG",{});var W1t=s(Ive);r_r=r(W1t,"flaubert"),W1t.forEach(t),t_r=r(ASe," \u2014 "),bQ=n(ASe,"A",{href:!0});var Q1t=s(bQ);a_r=r(Q1t,"TFFlaubertWithLMHeadModel"),Q1t.forEach(t),n_r=r(ASe," (FlauBERT model)"),ASe.forEach(t),s_r=i(me),SE=n(me,"LI",{});var ySe=s(SE);qve=n(ySe,"STRONG",{});var H1t=s(qve);l_r=r(H1t,"funnel"),H1t.forEach(t),i_r=r(ySe," \u2014 "),vQ=n(ySe,"A",{href:!0});var U1t=s(vQ);d_r=r(U1t,"TFFunnelForMaskedLM"),U1t.forEach(t),c_r=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),m_r=i(me),RE=n(me,"LI",{});var LSe=s(RE);Nve=n(LSe,"STRONG",{});var J1t=s(Nve);f_r=r(J1t,"layoutlm"),J1t.forEach(t),g_r=r(LSe," \u2014 "),FQ=n(LSe,"A",{href:!0});var Y1t=s(FQ);h_r=r(Y1t,"TFLayoutLMForMaskedLM"),Y1t.forEach(t),u_r=r(LSe," (LayoutLM model)"),LSe.forEach(t),p_r=i(me),PE=n(me,"LI",{});var xSe=s(PE);jve=n(xSe,"STRONG",{});var K1t=s(jve);__r=r(K1t,"longformer"),K1t.forEach(t),b_r=r(xSe," \u2014 "),TQ=n(xSe,"A",{href:!0});var Z1t=s(TQ);v_r=r(Z1t,"TFLongformerForMaskedLM"),Z1t.forEach(t),F_r=r(xSe," (Longformer model)"),xSe.forEach(t),T_r=i(me),BE=n(me,"LI",{});var $Se=s(BE);Dve=n($Se,"STRONG",{});var eTt=s(Dve);M_r=r(eTt,"mobilebert"),eTt.forEach(t),E_r=r($Se," \u2014 "),MQ=n($Se,"A",{href:!0});var oTt=s(MQ);C_r=r(oTt,"TFMobileBertForMaskedLM"),oTt.forEach(t),w_r=r($Se," (MobileBERT model)"),$Se.forEach(t),A_r=i(me),IE=n(me,"LI",{});var kSe=s(IE);Gve=n(kSe,"STRONG",{});var rTt=s(Gve);y_r=r(rTt,"mpnet"),rTt.forEach(t),L_r=r(kSe," \u2014 "),EQ=n(kSe,"A",{href:!0});var tTt=s(EQ);x_r=r(tTt,"TFMPNetForMaskedLM"),tTt.forEach(t),$_r=r(kSe," (MPNet model)"),kSe.forEach(t),k_r=i(me),qE=n(me,"LI",{});var SSe=s(qE);Ove=n(SSe,"STRONG",{});var aTt=s(Ove);S_r=r(aTt,"rembert"),aTt.forEach(t),R_r=r(SSe," \u2014 "),CQ=n(SSe,"A",{href:!0});var nTt=s(CQ);P_r=r(nTt,"TFRemBertForMaskedLM"),nTt.forEach(t),B_r=r(SSe," (RemBERT model)"),SSe.forEach(t),I_r=i(me),NE=n(me,"LI",{});var RSe=s(NE);Vve=n(RSe,"STRONG",{});var sTt=s(Vve);q_r=r(sTt,"roberta"),sTt.forEach(t),N_r=r(RSe," \u2014 "),wQ=n(RSe,"A",{href:!0});var lTt=s(wQ);j_r=r(lTt,"TFRobertaForMaskedLM"),lTt.forEach(t),D_r=r(RSe," (RoBERTa model)"),RSe.forEach(t),G_r=i(me),jE=n(me,"LI",{});var PSe=s(jE);Xve=n(PSe,"STRONG",{});var iTt=s(Xve);O_r=r(iTt,"roformer"),iTt.forEach(t),V_r=r(PSe," \u2014 "),AQ=n(PSe,"A",{href:!0});var dTt=s(AQ);X_r=r(dTt,"TFRoFormerForMaskedLM"),dTt.forEach(t),z_r=r(PSe," (RoFormer model)"),PSe.forEach(t),W_r=i(me),DE=n(me,"LI",{});var BSe=s(DE);zve=n(BSe,"STRONG",{});var cTt=s(zve);Q_r=r(cTt,"tapas"),cTt.forEach(t),H_r=r(BSe," \u2014 "),yQ=n(BSe,"A",{href:!0});var mTt=s(yQ);U_r=r(mTt,"TFTapasForMaskedLM"),mTt.forEach(t),J_r=r(BSe," (TAPAS model)"),BSe.forEach(t),Y_r=i(me),GE=n(me,"LI",{});var ISe=s(GE);Wve=n(ISe,"STRONG",{});var fTt=s(Wve);K_r=r(fTt,"xlm"),fTt.forEach(t),Z_r=r(ISe," \u2014 "),LQ=n(ISe,"A",{href:!0});var gTt=s(LQ);ebr=r(gTt,"TFXLMWithLMHeadModel"),gTt.forEach(t),obr=r(ISe," (XLM model)"),ISe.forEach(t),rbr=i(me),OE=n(me,"LI",{});var qSe=s(OE);Qve=n(qSe,"STRONG",{});var hTt=s(Qve);tbr=r(hTt,"xlm-roberta"),hTt.forEach(t),abr=r(qSe," \u2014 "),xQ=n(qSe,"A",{href:!0});var uTt=s(xQ);nbr=r(uTt,"TFXLMRobertaForMaskedLM"),uTt.forEach(t),sbr=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),me.forEach(t),lbr=i(Tl),T(VE.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Dqe=i(m),oc=n(m,"H2",{class:!0});var Wje=s(oc);XE=n(Wje,"A",{id:!0,class:!0,href:!0});var pTt=s(XE);Hve=n(pTt,"SPAN",{});var _Tt=s(Hve);T(gx.$$.fragment,_Tt),_Tt.forEach(t),pTt.forEach(t),ibr=i(Wje),Uve=n(Wje,"SPAN",{});var bTt=s(Uve);dbr=r(bTt,"TFAutoModelForSeq2SeqLM"),bTt.forEach(t),Wje.forEach(t),Gqe=i(m),rr=n(m,"DIV",{class:!0});var Ml=s(rr);T(hx.$$.fragment,Ml),cbr=i(Ml),rc=n(Ml,"P",{});var $Z=s(rc);mbr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Q=n($Z,"A",{href:!0});var vTt=s($Q);fbr=r(vTt,"from_pretrained()"),vTt.forEach(t),gbr=r($Z," class method or the "),kQ=n($Z,"A",{href:!0});var FTt=s(kQ);hbr=r(FTt,"from_config()"),FTt.forEach(t),ubr=r($Z,` class
method.`),$Z.forEach(t),pbr=i(Ml),ux=n(Ml,"P",{});var Qje=s(ux);_br=r(Qje,"This class cannot be instantiated directly using "),Jve=n(Qje,"CODE",{});var TTt=s(Jve);bbr=r(TTt,"__init__()"),TTt.forEach(t),vbr=r(Qje," (throws an error)."),Qje.forEach(t),Fbr=i(Ml),St=n(Ml,"DIV",{class:!0});var u0=s(St);T(px.$$.fragment,u0),Tbr=i(u0),Yve=n(u0,"P",{});var MTt=s(Yve);Mbr=r(MTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MTt.forEach(t),Ebr=i(u0),tc=n(u0,"P",{});var kZ=s(tc);Cbr=r(kZ,`Note:
Loading a model from its configuration file does `),Kve=n(kZ,"STRONG",{});var ETt=s(Kve);wbr=r(ETt,"not"),ETt.forEach(t),Abr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(kZ,"A",{href:!0});var CTt=s(SQ);ybr=r(CTt,"from_pretrained()"),CTt.forEach(t),Lbr=r(kZ," to load the model weights."),kZ.forEach(t),xbr=i(u0),T(zE.$$.fragment,u0),u0.forEach(t),$br=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(_x.$$.fragment,El),kbr=i(El),Zve=n(El,"P",{});var wTt=s(Zve);Sbr=r(wTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wTt.forEach(t),Rbr=i(El),an=n(El,"P",{});var p0=s(an);Pbr=r(p0,"The model class to instantiate is selected based on the "),eFe=n(p0,"CODE",{});var ATt=s(eFe);Bbr=r(ATt,"model_type"),ATt.forEach(t),Ibr=r(p0,` property of the config object (either
passed as an argument or loaded from `),oFe=n(p0,"CODE",{});var yTt=s(oFe);qbr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),Nbr=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(p0,"CODE",{});var LTt=s(rFe);jbr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),Dbr=r(p0,":"),p0.forEach(t),Gbr=i(El),ye=n(El,"UL",{});var Be=s(ye);WE=n(Be,"LI",{});var NSe=s(WE);tFe=n(NSe,"STRONG",{});var xTt=s(tFe);Obr=r(xTt,"bart"),xTt.forEach(t),Vbr=r(NSe," \u2014 "),RQ=n(NSe,"A",{href:!0});var $Tt=s(RQ);Xbr=r($Tt,"TFBartForConditionalGeneration"),$Tt.forEach(t),zbr=r(NSe," (BART model)"),NSe.forEach(t),Wbr=i(Be),QE=n(Be,"LI",{});var jSe=s(QE);aFe=n(jSe,"STRONG",{});var kTt=s(aFe);Qbr=r(kTt,"blenderbot"),kTt.forEach(t),Hbr=r(jSe," \u2014 "),PQ=n(jSe,"A",{href:!0});var STt=s(PQ);Ubr=r(STt,"TFBlenderbotForConditionalGeneration"),STt.forEach(t),Jbr=r(jSe," (Blenderbot model)"),jSe.forEach(t),Ybr=i(Be),HE=n(Be,"LI",{});var DSe=s(HE);nFe=n(DSe,"STRONG",{});var RTt=s(nFe);Kbr=r(RTt,"blenderbot-small"),RTt.forEach(t),Zbr=r(DSe," \u2014 "),BQ=n(DSe,"A",{href:!0});var PTt=s(BQ);e2r=r(PTt,"TFBlenderbotSmallForConditionalGeneration"),PTt.forEach(t),o2r=r(DSe," (BlenderbotSmall model)"),DSe.forEach(t),r2r=i(Be),UE=n(Be,"LI",{});var GSe=s(UE);sFe=n(GSe,"STRONG",{});var BTt=s(sFe);t2r=r(BTt,"encoder-decoder"),BTt.forEach(t),a2r=r(GSe," \u2014 "),IQ=n(GSe,"A",{href:!0});var ITt=s(IQ);n2r=r(ITt,"TFEncoderDecoderModel"),ITt.forEach(t),s2r=r(GSe," (Encoder decoder model)"),GSe.forEach(t),l2r=i(Be),JE=n(Be,"LI",{});var OSe=s(JE);lFe=n(OSe,"STRONG",{});var qTt=s(lFe);i2r=r(qTt,"led"),qTt.forEach(t),d2r=r(OSe," \u2014 "),qQ=n(OSe,"A",{href:!0});var NTt=s(qQ);c2r=r(NTt,"TFLEDForConditionalGeneration"),NTt.forEach(t),m2r=r(OSe," (LED model)"),OSe.forEach(t),f2r=i(Be),YE=n(Be,"LI",{});var VSe=s(YE);iFe=n(VSe,"STRONG",{});var jTt=s(iFe);g2r=r(jTt,"marian"),jTt.forEach(t),h2r=r(VSe," \u2014 "),NQ=n(VSe,"A",{href:!0});var DTt=s(NQ);u2r=r(DTt,"TFMarianMTModel"),DTt.forEach(t),p2r=r(VSe," (Marian model)"),VSe.forEach(t),_2r=i(Be),KE=n(Be,"LI",{});var XSe=s(KE);dFe=n(XSe,"STRONG",{});var GTt=s(dFe);b2r=r(GTt,"mbart"),GTt.forEach(t),v2r=r(XSe," \u2014 "),jQ=n(XSe,"A",{href:!0});var OTt=s(jQ);F2r=r(OTt,"TFMBartForConditionalGeneration"),OTt.forEach(t),T2r=r(XSe," (mBART model)"),XSe.forEach(t),M2r=i(Be),ZE=n(Be,"LI",{});var zSe=s(ZE);cFe=n(zSe,"STRONG",{});var VTt=s(cFe);E2r=r(VTt,"mt5"),VTt.forEach(t),C2r=r(zSe," \u2014 "),DQ=n(zSe,"A",{href:!0});var XTt=s(DQ);w2r=r(XTt,"TFMT5ForConditionalGeneration"),XTt.forEach(t),A2r=r(zSe," (mT5 model)"),zSe.forEach(t),y2r=i(Be),eC=n(Be,"LI",{});var WSe=s(eC);mFe=n(WSe,"STRONG",{});var zTt=s(mFe);L2r=r(zTt,"pegasus"),zTt.forEach(t),x2r=r(WSe," \u2014 "),GQ=n(WSe,"A",{href:!0});var WTt=s(GQ);$2r=r(WTt,"TFPegasusForConditionalGeneration"),WTt.forEach(t),k2r=r(WSe," (Pegasus model)"),WSe.forEach(t),S2r=i(Be),oC=n(Be,"LI",{});var QSe=s(oC);fFe=n(QSe,"STRONG",{});var QTt=s(fFe);R2r=r(QTt,"t5"),QTt.forEach(t),P2r=r(QSe," \u2014 "),OQ=n(QSe,"A",{href:!0});var HTt=s(OQ);B2r=r(HTt,"TFT5ForConditionalGeneration"),HTt.forEach(t),I2r=r(QSe," (T5 model)"),QSe.forEach(t),Be.forEach(t),q2r=i(El),T(rC.$$.fragment,El),El.forEach(t),Ml.forEach(t),Oqe=i(m),ac=n(m,"H2",{class:!0});var Hje=s(ac);tC=n(Hje,"A",{id:!0,class:!0,href:!0});var UTt=s(tC);gFe=n(UTt,"SPAN",{});var JTt=s(gFe);T(bx.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),N2r=i(Hje),hFe=n(Hje,"SPAN",{});var YTt=s(hFe);j2r=r(YTt,"TFAutoModelForSequenceClassification"),YTt.forEach(t),Hje.forEach(t),Vqe=i(m),tr=n(m,"DIV",{class:!0});var Cl=s(tr);T(vx.$$.fragment,Cl),D2r=i(Cl),nc=n(Cl,"P",{});var SZ=s(nc);G2r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VQ=n(SZ,"A",{href:!0});var KTt=s(VQ);O2r=r(KTt,"from_pretrained()"),KTt.forEach(t),V2r=r(SZ," class method or the "),XQ=n(SZ,"A",{href:!0});var ZTt=s(XQ);X2r=r(ZTt,"from_config()"),ZTt.forEach(t),z2r=r(SZ,` class
method.`),SZ.forEach(t),W2r=i(Cl),Fx=n(Cl,"P",{});var Uje=s(Fx);Q2r=r(Uje,"This class cannot be instantiated directly using "),uFe=n(Uje,"CODE",{});var eMt=s(uFe);H2r=r(eMt,"__init__()"),eMt.forEach(t),U2r=r(Uje," (throws an error)."),Uje.forEach(t),J2r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var _0=s(Rt);T(Tx.$$.fragment,_0),Y2r=i(_0),pFe=n(_0,"P",{});var oMt=s(pFe);K2r=r(oMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oMt.forEach(t),Z2r=i(_0),sc=n(_0,"P",{});var RZ=s(sc);evr=r(RZ,`Note:
Loading a model from its configuration file does `),_Fe=n(RZ,"STRONG",{});var rMt=s(_Fe);ovr=r(rMt,"not"),rMt.forEach(t),rvr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(RZ,"A",{href:!0});var tMt=s(zQ);tvr=r(tMt,"from_pretrained()"),tMt.forEach(t),avr=r(RZ," to load the model weights."),RZ.forEach(t),nvr=i(_0),T(aC.$$.fragment,_0),_0.forEach(t),svr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(Mx.$$.fragment,wl),lvr=i(wl),bFe=n(wl,"P",{});var aMt=s(bFe);ivr=r(aMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aMt.forEach(t),dvr=i(wl),nn=n(wl,"P",{});var b0=s(nn);cvr=r(b0,"The model class to instantiate is selected based on the "),vFe=n(b0,"CODE",{});var nMt=s(vFe);mvr=r(nMt,"model_type"),nMt.forEach(t),fvr=r(b0,` property of the config object (either
passed as an argument or loaded from `),FFe=n(b0,"CODE",{});var sMt=s(FFe);gvr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),hvr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(b0,"CODE",{});var lMt=s(TFe);uvr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),pvr=r(b0,":"),b0.forEach(t),_vr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);nC=n(ae,"LI",{});var HSe=s(nC);MFe=n(HSe,"STRONG",{});var iMt=s(MFe);bvr=r(iMt,"albert"),iMt.forEach(t),vvr=r(HSe," \u2014 "),WQ=n(HSe,"A",{href:!0});var dMt=s(WQ);Fvr=r(dMt,"TFAlbertForSequenceClassification"),dMt.forEach(t),Tvr=r(HSe," (ALBERT model)"),HSe.forEach(t),Mvr=i(ae),sC=n(ae,"LI",{});var USe=s(sC);EFe=n(USe,"STRONG",{});var cMt=s(EFe);Evr=r(cMt,"bert"),cMt.forEach(t),Cvr=r(USe," \u2014 "),QQ=n(USe,"A",{href:!0});var mMt=s(QQ);wvr=r(mMt,"TFBertForSequenceClassification"),mMt.forEach(t),Avr=r(USe," (BERT model)"),USe.forEach(t),yvr=i(ae),lC=n(ae,"LI",{});var JSe=s(lC);CFe=n(JSe,"STRONG",{});var fMt=s(CFe);Lvr=r(fMt,"camembert"),fMt.forEach(t),xvr=r(JSe," \u2014 "),HQ=n(JSe,"A",{href:!0});var gMt=s(HQ);$vr=r(gMt,"TFCamembertForSequenceClassification"),gMt.forEach(t),kvr=r(JSe," (CamemBERT model)"),JSe.forEach(t),Svr=i(ae),iC=n(ae,"LI",{});var YSe=s(iC);wFe=n(YSe,"STRONG",{});var hMt=s(wFe);Rvr=r(hMt,"convbert"),hMt.forEach(t),Pvr=r(YSe," \u2014 "),UQ=n(YSe,"A",{href:!0});var uMt=s(UQ);Bvr=r(uMt,"TFConvBertForSequenceClassification"),uMt.forEach(t),Ivr=r(YSe," (ConvBERT model)"),YSe.forEach(t),qvr=i(ae),dC=n(ae,"LI",{});var KSe=s(dC);AFe=n(KSe,"STRONG",{});var pMt=s(AFe);Nvr=r(pMt,"ctrl"),pMt.forEach(t),jvr=r(KSe," \u2014 "),JQ=n(KSe,"A",{href:!0});var _Mt=s(JQ);Dvr=r(_Mt,"TFCTRLForSequenceClassification"),_Mt.forEach(t),Gvr=r(KSe," (CTRL model)"),KSe.forEach(t),Ovr=i(ae),cC=n(ae,"LI",{});var ZSe=s(cC);yFe=n(ZSe,"STRONG",{});var bMt=s(yFe);Vvr=r(bMt,"deberta"),bMt.forEach(t),Xvr=r(ZSe," \u2014 "),YQ=n(ZSe,"A",{href:!0});var vMt=s(YQ);zvr=r(vMt,"TFDebertaForSequenceClassification"),vMt.forEach(t),Wvr=r(ZSe," (DeBERTa model)"),ZSe.forEach(t),Qvr=i(ae),mC=n(ae,"LI",{});var eRe=s(mC);LFe=n(eRe,"STRONG",{});var FMt=s(LFe);Hvr=r(FMt,"deberta-v2"),FMt.forEach(t),Uvr=r(eRe," \u2014 "),KQ=n(eRe,"A",{href:!0});var TMt=s(KQ);Jvr=r(TMt,"TFDebertaV2ForSequenceClassification"),TMt.forEach(t),Yvr=r(eRe," (DeBERTa-v2 model)"),eRe.forEach(t),Kvr=i(ae),fC=n(ae,"LI",{});var oRe=s(fC);xFe=n(oRe,"STRONG",{});var MMt=s(xFe);Zvr=r(MMt,"distilbert"),MMt.forEach(t),eFr=r(oRe," \u2014 "),ZQ=n(oRe,"A",{href:!0});var EMt=s(ZQ);oFr=r(EMt,"TFDistilBertForSequenceClassification"),EMt.forEach(t),rFr=r(oRe," (DistilBERT model)"),oRe.forEach(t),tFr=i(ae),gC=n(ae,"LI",{});var rRe=s(gC);$Fe=n(rRe,"STRONG",{});var CMt=s($Fe);aFr=r(CMt,"electra"),CMt.forEach(t),nFr=r(rRe," \u2014 "),eH=n(rRe,"A",{href:!0});var wMt=s(eH);sFr=r(wMt,"TFElectraForSequenceClassification"),wMt.forEach(t),lFr=r(rRe," (ELECTRA model)"),rRe.forEach(t),iFr=i(ae),hC=n(ae,"LI",{});var tRe=s(hC);kFe=n(tRe,"STRONG",{});var AMt=s(kFe);dFr=r(AMt,"flaubert"),AMt.forEach(t),cFr=r(tRe," \u2014 "),oH=n(tRe,"A",{href:!0});var yMt=s(oH);mFr=r(yMt,"TFFlaubertForSequenceClassification"),yMt.forEach(t),fFr=r(tRe," (FlauBERT model)"),tRe.forEach(t),gFr=i(ae),uC=n(ae,"LI",{});var aRe=s(uC);SFe=n(aRe,"STRONG",{});var LMt=s(SFe);hFr=r(LMt,"funnel"),LMt.forEach(t),uFr=r(aRe," \u2014 "),rH=n(aRe,"A",{href:!0});var xMt=s(rH);pFr=r(xMt,"TFFunnelForSequenceClassification"),xMt.forEach(t),_Fr=r(aRe," (Funnel Transformer model)"),aRe.forEach(t),bFr=i(ae),pC=n(ae,"LI",{});var nRe=s(pC);RFe=n(nRe,"STRONG",{});var $Mt=s(RFe);vFr=r($Mt,"gpt2"),$Mt.forEach(t),FFr=r(nRe," \u2014 "),tH=n(nRe,"A",{href:!0});var kMt=s(tH);TFr=r(kMt,"TFGPT2ForSequenceClassification"),kMt.forEach(t),MFr=r(nRe," (OpenAI GPT-2 model)"),nRe.forEach(t),EFr=i(ae),_C=n(ae,"LI",{});var sRe=s(_C);PFe=n(sRe,"STRONG",{});var SMt=s(PFe);CFr=r(SMt,"gptj"),SMt.forEach(t),wFr=r(sRe," \u2014 "),aH=n(sRe,"A",{href:!0});var RMt=s(aH);AFr=r(RMt,"TFGPTJForSequenceClassification"),RMt.forEach(t),yFr=r(sRe," (GPT-J model)"),sRe.forEach(t),LFr=i(ae),bC=n(ae,"LI",{});var lRe=s(bC);BFe=n(lRe,"STRONG",{});var PMt=s(BFe);xFr=r(PMt,"layoutlm"),PMt.forEach(t),$Fr=r(lRe," \u2014 "),nH=n(lRe,"A",{href:!0});var BMt=s(nH);kFr=r(BMt,"TFLayoutLMForSequenceClassification"),BMt.forEach(t),SFr=r(lRe," (LayoutLM model)"),lRe.forEach(t),RFr=i(ae),vC=n(ae,"LI",{});var iRe=s(vC);IFe=n(iRe,"STRONG",{});var IMt=s(IFe);PFr=r(IMt,"longformer"),IMt.forEach(t),BFr=r(iRe," \u2014 "),sH=n(iRe,"A",{href:!0});var qMt=s(sH);IFr=r(qMt,"TFLongformerForSequenceClassification"),qMt.forEach(t),qFr=r(iRe," (Longformer model)"),iRe.forEach(t),NFr=i(ae),FC=n(ae,"LI",{});var dRe=s(FC);qFe=n(dRe,"STRONG",{});var NMt=s(qFe);jFr=r(NMt,"mobilebert"),NMt.forEach(t),DFr=r(dRe," \u2014 "),lH=n(dRe,"A",{href:!0});var jMt=s(lH);GFr=r(jMt,"TFMobileBertForSequenceClassification"),jMt.forEach(t),OFr=r(dRe," (MobileBERT model)"),dRe.forEach(t),VFr=i(ae),TC=n(ae,"LI",{});var cRe=s(TC);NFe=n(cRe,"STRONG",{});var DMt=s(NFe);XFr=r(DMt,"mpnet"),DMt.forEach(t),zFr=r(cRe," \u2014 "),iH=n(cRe,"A",{href:!0});var GMt=s(iH);WFr=r(GMt,"TFMPNetForSequenceClassification"),GMt.forEach(t),QFr=r(cRe," (MPNet model)"),cRe.forEach(t),HFr=i(ae),MC=n(ae,"LI",{});var mRe=s(MC);jFe=n(mRe,"STRONG",{});var OMt=s(jFe);UFr=r(OMt,"openai-gpt"),OMt.forEach(t),JFr=r(mRe," \u2014 "),dH=n(mRe,"A",{href:!0});var VMt=s(dH);YFr=r(VMt,"TFOpenAIGPTForSequenceClassification"),VMt.forEach(t),KFr=r(mRe," (OpenAI GPT model)"),mRe.forEach(t),ZFr=i(ae),EC=n(ae,"LI",{});var fRe=s(EC);DFe=n(fRe,"STRONG",{});var XMt=s(DFe);e1r=r(XMt,"rembert"),XMt.forEach(t),o1r=r(fRe," \u2014 "),cH=n(fRe,"A",{href:!0});var zMt=s(cH);r1r=r(zMt,"TFRemBertForSequenceClassification"),zMt.forEach(t),t1r=r(fRe," (RemBERT model)"),fRe.forEach(t),a1r=i(ae),CC=n(ae,"LI",{});var gRe=s(CC);GFe=n(gRe,"STRONG",{});var WMt=s(GFe);n1r=r(WMt,"roberta"),WMt.forEach(t),s1r=r(gRe," \u2014 "),mH=n(gRe,"A",{href:!0});var QMt=s(mH);l1r=r(QMt,"TFRobertaForSequenceClassification"),QMt.forEach(t),i1r=r(gRe," (RoBERTa model)"),gRe.forEach(t),d1r=i(ae),wC=n(ae,"LI",{});var hRe=s(wC);OFe=n(hRe,"STRONG",{});var HMt=s(OFe);c1r=r(HMt,"roformer"),HMt.forEach(t),m1r=r(hRe," \u2014 "),fH=n(hRe,"A",{href:!0});var UMt=s(fH);f1r=r(UMt,"TFRoFormerForSequenceClassification"),UMt.forEach(t),g1r=r(hRe," (RoFormer model)"),hRe.forEach(t),h1r=i(ae),AC=n(ae,"LI",{});var uRe=s(AC);VFe=n(uRe,"STRONG",{});var JMt=s(VFe);u1r=r(JMt,"tapas"),JMt.forEach(t),p1r=r(uRe," \u2014 "),gH=n(uRe,"A",{href:!0});var YMt=s(gH);_1r=r(YMt,"TFTapasForSequenceClassification"),YMt.forEach(t),b1r=r(uRe," (TAPAS model)"),uRe.forEach(t),v1r=i(ae),yC=n(ae,"LI",{});var pRe=s(yC);XFe=n(pRe,"STRONG",{});var KMt=s(XFe);F1r=r(KMt,"transfo-xl"),KMt.forEach(t),T1r=r(pRe," \u2014 "),hH=n(pRe,"A",{href:!0});var ZMt=s(hH);M1r=r(ZMt,"TFTransfoXLForSequenceClassification"),ZMt.forEach(t),E1r=r(pRe," (Transformer-XL model)"),pRe.forEach(t),C1r=i(ae),LC=n(ae,"LI",{});var _Re=s(LC);zFe=n(_Re,"STRONG",{});var e4t=s(zFe);w1r=r(e4t,"xlm"),e4t.forEach(t),A1r=r(_Re," \u2014 "),uH=n(_Re,"A",{href:!0});var o4t=s(uH);y1r=r(o4t,"TFXLMForSequenceClassification"),o4t.forEach(t),L1r=r(_Re," (XLM model)"),_Re.forEach(t),x1r=i(ae),xC=n(ae,"LI",{});var bRe=s(xC);WFe=n(bRe,"STRONG",{});var r4t=s(WFe);$1r=r(r4t,"xlm-roberta"),r4t.forEach(t),k1r=r(bRe," \u2014 "),pH=n(bRe,"A",{href:!0});var t4t=s(pH);S1r=r(t4t,"TFXLMRobertaForSequenceClassification"),t4t.forEach(t),R1r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),P1r=i(ae),$C=n(ae,"LI",{});var vRe=s($C);QFe=n(vRe,"STRONG",{});var a4t=s(QFe);B1r=r(a4t,"xlnet"),a4t.forEach(t),I1r=r(vRe," \u2014 "),_H=n(vRe,"A",{href:!0});var n4t=s(_H);q1r=r(n4t,"TFXLNetForSequenceClassification"),n4t.forEach(t),N1r=r(vRe," (XLNet model)"),vRe.forEach(t),ae.forEach(t),j1r=i(wl),T(kC.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Xqe=i(m),lc=n(m,"H2",{class:!0});var Jje=s(lc);SC=n(Jje,"A",{id:!0,class:!0,href:!0});var s4t=s(SC);HFe=n(s4t,"SPAN",{});var l4t=s(HFe);T(Ex.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),D1r=i(Jje),UFe=n(Jje,"SPAN",{});var i4t=s(UFe);G1r=r(i4t,"TFAutoModelForMultipleChoice"),i4t.forEach(t),Jje.forEach(t),zqe=i(m),ar=n(m,"DIV",{class:!0});var Al=s(ar);T(Cx.$$.fragment,Al),O1r=i(Al),ic=n(Al,"P",{});var PZ=s(ic);V1r=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=n(PZ,"A",{href:!0});var d4t=s(bH);X1r=r(d4t,"from_pretrained()"),d4t.forEach(t),z1r=r(PZ," class method or the "),vH=n(PZ,"A",{href:!0});var c4t=s(vH);W1r=r(c4t,"from_config()"),c4t.forEach(t),Q1r=r(PZ,` class
method.`),PZ.forEach(t),H1r=i(Al),wx=n(Al,"P",{});var Yje=s(wx);U1r=r(Yje,"This class cannot be instantiated directly using "),JFe=n(Yje,"CODE",{});var m4t=s(JFe);J1r=r(m4t,"__init__()"),m4t.forEach(t),Y1r=r(Yje," (throws an error)."),Yje.forEach(t),K1r=i(Al),Pt=n(Al,"DIV",{class:!0});var v0=s(Pt);T(Ax.$$.fragment,v0),Z1r=i(v0),YFe=n(v0,"P",{});var f4t=s(YFe);eTr=r(f4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f4t.forEach(t),oTr=i(v0),dc=n(v0,"P",{});var BZ=s(dc);rTr=r(BZ,`Note:
Loading a model from its configuration file does `),KFe=n(BZ,"STRONG",{});var g4t=s(KFe);tTr=r(g4t,"not"),g4t.forEach(t),aTr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(BZ,"A",{href:!0});var h4t=s(FH);nTr=r(h4t,"from_pretrained()"),h4t.forEach(t),sTr=r(BZ," to load the model weights."),BZ.forEach(t),lTr=i(v0),T(RC.$$.fragment,v0),v0.forEach(t),iTr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(yx.$$.fragment,yl),dTr=i(yl),ZFe=n(yl,"P",{});var u4t=s(ZFe);cTr=r(u4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),u4t.forEach(t),mTr=i(yl),sn=n(yl,"P",{});var F0=s(sn);fTr=r(F0,"The model class to instantiate is selected based on the "),e1e=n(F0,"CODE",{});var p4t=s(e1e);gTr=r(p4t,"model_type"),p4t.forEach(t),hTr=r(F0,` property of the config object (either
passed as an argument or loaded from `),o1e=n(F0,"CODE",{});var _4t=s(o1e);uTr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),pTr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(F0,"CODE",{});var b4t=s(r1e);_Tr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),bTr=r(F0,":"),F0.forEach(t),vTr=i(yl),he=n(yl,"UL",{});var _e=s(he);PC=n(_e,"LI",{});var FRe=s(PC);t1e=n(FRe,"STRONG",{});var v4t=s(t1e);FTr=r(v4t,"albert"),v4t.forEach(t),TTr=r(FRe," \u2014 "),TH=n(FRe,"A",{href:!0});var F4t=s(TH);MTr=r(F4t,"TFAlbertForMultipleChoice"),F4t.forEach(t),ETr=r(FRe," (ALBERT model)"),FRe.forEach(t),CTr=i(_e),BC=n(_e,"LI",{});var TRe=s(BC);a1e=n(TRe,"STRONG",{});var T4t=s(a1e);wTr=r(T4t,"bert"),T4t.forEach(t),ATr=r(TRe," \u2014 "),MH=n(TRe,"A",{href:!0});var M4t=s(MH);yTr=r(M4t,"TFBertForMultipleChoice"),M4t.forEach(t),LTr=r(TRe," (BERT model)"),TRe.forEach(t),xTr=i(_e),IC=n(_e,"LI",{});var MRe=s(IC);n1e=n(MRe,"STRONG",{});var E4t=s(n1e);$Tr=r(E4t,"camembert"),E4t.forEach(t),kTr=r(MRe," \u2014 "),EH=n(MRe,"A",{href:!0});var C4t=s(EH);STr=r(C4t,"TFCamembertForMultipleChoice"),C4t.forEach(t),RTr=r(MRe," (CamemBERT model)"),MRe.forEach(t),PTr=i(_e),qC=n(_e,"LI",{});var ERe=s(qC);s1e=n(ERe,"STRONG",{});var w4t=s(s1e);BTr=r(w4t,"convbert"),w4t.forEach(t),ITr=r(ERe," \u2014 "),CH=n(ERe,"A",{href:!0});var A4t=s(CH);qTr=r(A4t,"TFConvBertForMultipleChoice"),A4t.forEach(t),NTr=r(ERe," (ConvBERT model)"),ERe.forEach(t),jTr=i(_e),NC=n(_e,"LI",{});var CRe=s(NC);l1e=n(CRe,"STRONG",{});var y4t=s(l1e);DTr=r(y4t,"distilbert"),y4t.forEach(t),GTr=r(CRe," \u2014 "),wH=n(CRe,"A",{href:!0});var L4t=s(wH);OTr=r(L4t,"TFDistilBertForMultipleChoice"),L4t.forEach(t),VTr=r(CRe," (DistilBERT model)"),CRe.forEach(t),XTr=i(_e),jC=n(_e,"LI",{});var wRe=s(jC);i1e=n(wRe,"STRONG",{});var x4t=s(i1e);zTr=r(x4t,"electra"),x4t.forEach(t),WTr=r(wRe," \u2014 "),AH=n(wRe,"A",{href:!0});var $4t=s(AH);QTr=r($4t,"TFElectraForMultipleChoice"),$4t.forEach(t),HTr=r(wRe," (ELECTRA model)"),wRe.forEach(t),UTr=i(_e),DC=n(_e,"LI",{});var ARe=s(DC);d1e=n(ARe,"STRONG",{});var k4t=s(d1e);JTr=r(k4t,"flaubert"),k4t.forEach(t),YTr=r(ARe," \u2014 "),yH=n(ARe,"A",{href:!0});var S4t=s(yH);KTr=r(S4t,"TFFlaubertForMultipleChoice"),S4t.forEach(t),ZTr=r(ARe," (FlauBERT model)"),ARe.forEach(t),eMr=i(_e),GC=n(_e,"LI",{});var yRe=s(GC);c1e=n(yRe,"STRONG",{});var R4t=s(c1e);oMr=r(R4t,"funnel"),R4t.forEach(t),rMr=r(yRe," \u2014 "),LH=n(yRe,"A",{href:!0});var P4t=s(LH);tMr=r(P4t,"TFFunnelForMultipleChoice"),P4t.forEach(t),aMr=r(yRe," (Funnel Transformer model)"),yRe.forEach(t),nMr=i(_e),OC=n(_e,"LI",{});var LRe=s(OC);m1e=n(LRe,"STRONG",{});var B4t=s(m1e);sMr=r(B4t,"longformer"),B4t.forEach(t),lMr=r(LRe," \u2014 "),xH=n(LRe,"A",{href:!0});var I4t=s(xH);iMr=r(I4t,"TFLongformerForMultipleChoice"),I4t.forEach(t),dMr=r(LRe," (Longformer model)"),LRe.forEach(t),cMr=i(_e),VC=n(_e,"LI",{});var xRe=s(VC);f1e=n(xRe,"STRONG",{});var q4t=s(f1e);mMr=r(q4t,"mobilebert"),q4t.forEach(t),fMr=r(xRe," \u2014 "),$H=n(xRe,"A",{href:!0});var N4t=s($H);gMr=r(N4t,"TFMobileBertForMultipleChoice"),N4t.forEach(t),hMr=r(xRe," (MobileBERT model)"),xRe.forEach(t),uMr=i(_e),XC=n(_e,"LI",{});var $Re=s(XC);g1e=n($Re,"STRONG",{});var j4t=s(g1e);pMr=r(j4t,"mpnet"),j4t.forEach(t),_Mr=r($Re," \u2014 "),kH=n($Re,"A",{href:!0});var D4t=s(kH);bMr=r(D4t,"TFMPNetForMultipleChoice"),D4t.forEach(t),vMr=r($Re," (MPNet model)"),$Re.forEach(t),FMr=i(_e),zC=n(_e,"LI",{});var kRe=s(zC);h1e=n(kRe,"STRONG",{});var G4t=s(h1e);TMr=r(G4t,"rembert"),G4t.forEach(t),MMr=r(kRe," \u2014 "),SH=n(kRe,"A",{href:!0});var O4t=s(SH);EMr=r(O4t,"TFRemBertForMultipleChoice"),O4t.forEach(t),CMr=r(kRe," (RemBERT model)"),kRe.forEach(t),wMr=i(_e),WC=n(_e,"LI",{});var SRe=s(WC);u1e=n(SRe,"STRONG",{});var V4t=s(u1e);AMr=r(V4t,"roberta"),V4t.forEach(t),yMr=r(SRe," \u2014 "),RH=n(SRe,"A",{href:!0});var X4t=s(RH);LMr=r(X4t,"TFRobertaForMultipleChoice"),X4t.forEach(t),xMr=r(SRe," (RoBERTa model)"),SRe.forEach(t),$Mr=i(_e),QC=n(_e,"LI",{});var RRe=s(QC);p1e=n(RRe,"STRONG",{});var z4t=s(p1e);kMr=r(z4t,"roformer"),z4t.forEach(t),SMr=r(RRe," \u2014 "),PH=n(RRe,"A",{href:!0});var W4t=s(PH);RMr=r(W4t,"TFRoFormerForMultipleChoice"),W4t.forEach(t),PMr=r(RRe," (RoFormer model)"),RRe.forEach(t),BMr=i(_e),HC=n(_e,"LI",{});var PRe=s(HC);_1e=n(PRe,"STRONG",{});var Q4t=s(_1e);IMr=r(Q4t,"xlm"),Q4t.forEach(t),qMr=r(PRe," \u2014 "),BH=n(PRe,"A",{href:!0});var H4t=s(BH);NMr=r(H4t,"TFXLMForMultipleChoice"),H4t.forEach(t),jMr=r(PRe," (XLM model)"),PRe.forEach(t),DMr=i(_e),UC=n(_e,"LI",{});var BRe=s(UC);b1e=n(BRe,"STRONG",{});var U4t=s(b1e);GMr=r(U4t,"xlm-roberta"),U4t.forEach(t),OMr=r(BRe," \u2014 "),IH=n(BRe,"A",{href:!0});var J4t=s(IH);VMr=r(J4t,"TFXLMRobertaForMultipleChoice"),J4t.forEach(t),XMr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),zMr=i(_e),JC=n(_e,"LI",{});var IRe=s(JC);v1e=n(IRe,"STRONG",{});var Y4t=s(v1e);WMr=r(Y4t,"xlnet"),Y4t.forEach(t),QMr=r(IRe," \u2014 "),qH=n(IRe,"A",{href:!0});var K4t=s(qH);HMr=r(K4t,"TFXLNetForMultipleChoice"),K4t.forEach(t),UMr=r(IRe," (XLNet model)"),IRe.forEach(t),_e.forEach(t),JMr=i(yl),T(YC.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Wqe=i(m),cc=n(m,"H2",{class:!0});var Kje=s(cc);KC=n(Kje,"A",{id:!0,class:!0,href:!0});var Z4t=s(KC);F1e=n(Z4t,"SPAN",{});var eEt=s(F1e);T(Lx.$$.fragment,eEt),eEt.forEach(t),Z4t.forEach(t),YMr=i(Kje),T1e=n(Kje,"SPAN",{});var oEt=s(T1e);KMr=r(oEt,"TFAutoModelForNextSentencePrediction"),oEt.forEach(t),Kje.forEach(t),Qqe=i(m),nr=n(m,"DIV",{class:!0});var Ll=s(nr);T(xx.$$.fragment,Ll),ZMr=i(Ll),mc=n(Ll,"P",{});var IZ=s(mc);e4r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NH=n(IZ,"A",{href:!0});var rEt=s(NH);o4r=r(rEt,"from_pretrained()"),rEt.forEach(t),r4r=r(IZ," class method or the "),jH=n(IZ,"A",{href:!0});var tEt=s(jH);t4r=r(tEt,"from_config()"),tEt.forEach(t),a4r=r(IZ,` class
method.`),IZ.forEach(t),n4r=i(Ll),$x=n(Ll,"P",{});var Zje=s($x);s4r=r(Zje,"This class cannot be instantiated directly using "),M1e=n(Zje,"CODE",{});var aEt=s(M1e);l4r=r(aEt,"__init__()"),aEt.forEach(t),i4r=r(Zje," (throws an error)."),Zje.forEach(t),d4r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var T0=s(Bt);T(kx.$$.fragment,T0),c4r=i(T0),E1e=n(T0,"P",{});var nEt=s(E1e);m4r=r(nEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nEt.forEach(t),f4r=i(T0),fc=n(T0,"P",{});var qZ=s(fc);g4r=r(qZ,`Note:
Loading a model from its configuration file does `),C1e=n(qZ,"STRONG",{});var sEt=s(C1e);h4r=r(sEt,"not"),sEt.forEach(t),u4r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(qZ,"A",{href:!0});var lEt=s(DH);p4r=r(lEt,"from_pretrained()"),lEt.forEach(t),_4r=r(qZ," to load the model weights."),qZ.forEach(t),b4r=i(T0),T(ZC.$$.fragment,T0),T0.forEach(t),v4r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(Sx.$$.fragment,xl),F4r=i(xl),w1e=n(xl,"P",{});var iEt=s(w1e);T4r=r(iEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iEt.forEach(t),M4r=i(xl),ln=n(xl,"P",{});var M0=s(ln);E4r=r(M0,"The model class to instantiate is selected based on the "),A1e=n(M0,"CODE",{});var dEt=s(A1e);C4r=r(dEt,"model_type"),dEt.forEach(t),w4r=r(M0,` property of the config object (either
passed as an argument or loaded from `),y1e=n(M0,"CODE",{});var cEt=s(y1e);A4r=r(cEt,"pretrained_model_name_or_path"),cEt.forEach(t),y4r=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(M0,"CODE",{});var mEt=s(L1e);L4r=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),x4r=r(M0,":"),M0.forEach(t),$4r=i(xl),Rx=n(xl,"UL",{});var eDe=s(Rx);e5=n(eDe,"LI",{});var qRe=s(e5);x1e=n(qRe,"STRONG",{});var fEt=s(x1e);k4r=r(fEt,"bert"),fEt.forEach(t),S4r=r(qRe," \u2014 "),GH=n(qRe,"A",{href:!0});var gEt=s(GH);R4r=r(gEt,"TFBertForNextSentencePrediction"),gEt.forEach(t),P4r=r(qRe," (BERT model)"),qRe.forEach(t),B4r=i(eDe),o5=n(eDe,"LI",{});var NRe=s(o5);$1e=n(NRe,"STRONG",{});var hEt=s($1e);I4r=r(hEt,"mobilebert"),hEt.forEach(t),q4r=r(NRe," \u2014 "),OH=n(NRe,"A",{href:!0});var uEt=s(OH);N4r=r(uEt,"TFMobileBertForNextSentencePrediction"),uEt.forEach(t),j4r=r(NRe," (MobileBERT model)"),NRe.forEach(t),eDe.forEach(t),D4r=i(xl),T(r5.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Hqe=i(m),gc=n(m,"H2",{class:!0});var oDe=s(gc);t5=n(oDe,"A",{id:!0,class:!0,href:!0});var pEt=s(t5);k1e=n(pEt,"SPAN",{});var _Et=s(k1e);T(Px.$$.fragment,_Et),_Et.forEach(t),pEt.forEach(t),G4r=i(oDe),S1e=n(oDe,"SPAN",{});var bEt=s(S1e);O4r=r(bEt,"TFAutoModelForTableQuestionAnswering"),bEt.forEach(t),oDe.forEach(t),Uqe=i(m),sr=n(m,"DIV",{class:!0});var $l=s(sr);T(Bx.$$.fragment,$l),V4r=i($l),hc=n($l,"P",{});var NZ=s(hc);X4r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VH=n(NZ,"A",{href:!0});var vEt=s(VH);z4r=r(vEt,"from_pretrained()"),vEt.forEach(t),W4r=r(NZ," class method or the "),XH=n(NZ,"A",{href:!0});var FEt=s(XH);Q4r=r(FEt,"from_config()"),FEt.forEach(t),H4r=r(NZ,` class
method.`),NZ.forEach(t),U4r=i($l),Ix=n($l,"P",{});var rDe=s(Ix);J4r=r(rDe,"This class cannot be instantiated directly using "),R1e=n(rDe,"CODE",{});var TEt=s(R1e);Y4r=r(TEt,"__init__()"),TEt.forEach(t),K4r=r(rDe," (throws an error)."),rDe.forEach(t),Z4r=i($l),It=n($l,"DIV",{class:!0});var E0=s(It);T(qx.$$.fragment,E0),eEr=i(E0),P1e=n(E0,"P",{});var MEt=s(P1e);oEr=r(MEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MEt.forEach(t),rEr=i(E0),uc=n(E0,"P",{});var jZ=s(uc);tEr=r(jZ,`Note:
Loading a model from its configuration file does `),B1e=n(jZ,"STRONG",{});var EEt=s(B1e);aEr=r(EEt,"not"),EEt.forEach(t),nEr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(jZ,"A",{href:!0});var CEt=s(zH);sEr=r(CEt,"from_pretrained()"),CEt.forEach(t),lEr=r(jZ," to load the model weights."),jZ.forEach(t),iEr=i(E0),T(a5.$$.fragment,E0),E0.forEach(t),dEr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(Nx.$$.fragment,kl),cEr=i(kl),I1e=n(kl,"P",{});var wEt=s(I1e);mEr=r(wEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wEt.forEach(t),fEr=i(kl),dn=n(kl,"P",{});var C0=s(dn);gEr=r(C0,"The model class to instantiate is selected based on the "),q1e=n(C0,"CODE",{});var AEt=s(q1e);hEr=r(AEt,"model_type"),AEt.forEach(t),uEr=r(C0,` property of the config object (either
passed as an argument or loaded from `),N1e=n(C0,"CODE",{});var yEt=s(N1e);pEr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),_Er=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(C0,"CODE",{});var LEt=s(j1e);bEr=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),vEr=r(C0,":"),C0.forEach(t),FEr=i(kl),D1e=n(kl,"UL",{});var xEt=s(D1e);n5=n(xEt,"LI",{});var jRe=s(n5);G1e=n(jRe,"STRONG",{});var $Et=s(G1e);TEr=r($Et,"tapas"),$Et.forEach(t),MEr=r(jRe," \u2014 "),WH=n(jRe,"A",{href:!0});var kEt=s(WH);EEr=r(kEt,"TFTapasForQuestionAnswering"),kEt.forEach(t),CEr=r(jRe," (TAPAS model)"),jRe.forEach(t),xEt.forEach(t),wEr=i(kl),T(s5.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Jqe=i(m),pc=n(m,"H2",{class:!0});var tDe=s(pc);l5=n(tDe,"A",{id:!0,class:!0,href:!0});var SEt=s(l5);O1e=n(SEt,"SPAN",{});var REt=s(O1e);T(jx.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),AEr=i(tDe),V1e=n(tDe,"SPAN",{});var PEt=s(V1e);yEr=r(PEt,"TFAutoModelForTokenClassification"),PEt.forEach(t),tDe.forEach(t),Yqe=i(m),lr=n(m,"DIV",{class:!0});var Sl=s(lr);T(Dx.$$.fragment,Sl),LEr=i(Sl),_c=n(Sl,"P",{});var DZ=s(_c);xEr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QH=n(DZ,"A",{href:!0});var BEt=s(QH);$Er=r(BEt,"from_pretrained()"),BEt.forEach(t),kEr=r(DZ," class method or the "),HH=n(DZ,"A",{href:!0});var IEt=s(HH);SEr=r(IEt,"from_config()"),IEt.forEach(t),REr=r(DZ,` class
method.`),DZ.forEach(t),PEr=i(Sl),Gx=n(Sl,"P",{});var aDe=s(Gx);BEr=r(aDe,"This class cannot be instantiated directly using "),X1e=n(aDe,"CODE",{});var qEt=s(X1e);IEr=r(qEt,"__init__()"),qEt.forEach(t),qEr=r(aDe," (throws an error)."),aDe.forEach(t),NEr=i(Sl),qt=n(Sl,"DIV",{class:!0});var w0=s(qt);T(Ox.$$.fragment,w0),jEr=i(w0),z1e=n(w0,"P",{});var NEt=s(z1e);DEr=r(NEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NEt.forEach(t),GEr=i(w0),bc=n(w0,"P",{});var GZ=s(bc);OEr=r(GZ,`Note:
Loading a model from its configuration file does `),W1e=n(GZ,"STRONG",{});var jEt=s(W1e);VEr=r(jEt,"not"),jEt.forEach(t),XEr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(GZ,"A",{href:!0});var DEt=s(UH);zEr=r(DEt,"from_pretrained()"),DEt.forEach(t),WEr=r(GZ," to load the model weights."),GZ.forEach(t),QEr=i(w0),T(i5.$$.fragment,w0),w0.forEach(t),HEr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(Vx.$$.fragment,Rl),UEr=i(Rl),Q1e=n(Rl,"P",{});var GEt=s(Q1e);JEr=r(GEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GEt.forEach(t),YEr=i(Rl),cn=n(Rl,"P",{});var A0=s(cn);KEr=r(A0,"The model class to instantiate is selected based on the "),H1e=n(A0,"CODE",{});var OEt=s(H1e);ZEr=r(OEt,"model_type"),OEt.forEach(t),eCr=r(A0,` property of the config object (either
passed as an argument or loaded from `),U1e=n(A0,"CODE",{});var VEt=s(U1e);oCr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),rCr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(A0,"CODE",{});var XEt=s(J1e);tCr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),aCr=r(A0,":"),A0.forEach(t),nCr=i(Rl),de=n(Rl,"UL",{});var fe=s(de);d5=n(fe,"LI",{});var DRe=s(d5);Y1e=n(DRe,"STRONG",{});var zEt=s(Y1e);sCr=r(zEt,"albert"),zEt.forEach(t),lCr=r(DRe," \u2014 "),JH=n(DRe,"A",{href:!0});var WEt=s(JH);iCr=r(WEt,"TFAlbertForTokenClassification"),WEt.forEach(t),dCr=r(DRe," (ALBERT model)"),DRe.forEach(t),cCr=i(fe),c5=n(fe,"LI",{});var GRe=s(c5);K1e=n(GRe,"STRONG",{});var QEt=s(K1e);mCr=r(QEt,"bert"),QEt.forEach(t),fCr=r(GRe," \u2014 "),YH=n(GRe,"A",{href:!0});var HEt=s(YH);gCr=r(HEt,"TFBertForTokenClassification"),HEt.forEach(t),hCr=r(GRe," (BERT model)"),GRe.forEach(t),uCr=i(fe),m5=n(fe,"LI",{});var ORe=s(m5);Z1e=n(ORe,"STRONG",{});var UEt=s(Z1e);pCr=r(UEt,"camembert"),UEt.forEach(t),_Cr=r(ORe," \u2014 "),KH=n(ORe,"A",{href:!0});var JEt=s(KH);bCr=r(JEt,"TFCamembertForTokenClassification"),JEt.forEach(t),vCr=r(ORe," (CamemBERT model)"),ORe.forEach(t),FCr=i(fe),f5=n(fe,"LI",{});var VRe=s(f5);eTe=n(VRe,"STRONG",{});var YEt=s(eTe);TCr=r(YEt,"convbert"),YEt.forEach(t),MCr=r(VRe," \u2014 "),ZH=n(VRe,"A",{href:!0});var KEt=s(ZH);ECr=r(KEt,"TFConvBertForTokenClassification"),KEt.forEach(t),CCr=r(VRe," (ConvBERT model)"),VRe.forEach(t),wCr=i(fe),g5=n(fe,"LI",{});var XRe=s(g5);oTe=n(XRe,"STRONG",{});var ZEt=s(oTe);ACr=r(ZEt,"deberta"),ZEt.forEach(t),yCr=r(XRe," \u2014 "),eU=n(XRe,"A",{href:!0});var eCt=s(eU);LCr=r(eCt,"TFDebertaForTokenClassification"),eCt.forEach(t),xCr=r(XRe," (DeBERTa model)"),XRe.forEach(t),$Cr=i(fe),h5=n(fe,"LI",{});var zRe=s(h5);rTe=n(zRe,"STRONG",{});var oCt=s(rTe);kCr=r(oCt,"deberta-v2"),oCt.forEach(t),SCr=r(zRe," \u2014 "),oU=n(zRe,"A",{href:!0});var rCt=s(oU);RCr=r(rCt,"TFDebertaV2ForTokenClassification"),rCt.forEach(t),PCr=r(zRe," (DeBERTa-v2 model)"),zRe.forEach(t),BCr=i(fe),u5=n(fe,"LI",{});var WRe=s(u5);tTe=n(WRe,"STRONG",{});var tCt=s(tTe);ICr=r(tCt,"distilbert"),tCt.forEach(t),qCr=r(WRe," \u2014 "),rU=n(WRe,"A",{href:!0});var aCt=s(rU);NCr=r(aCt,"TFDistilBertForTokenClassification"),aCt.forEach(t),jCr=r(WRe," (DistilBERT model)"),WRe.forEach(t),DCr=i(fe),p5=n(fe,"LI",{});var QRe=s(p5);aTe=n(QRe,"STRONG",{});var nCt=s(aTe);GCr=r(nCt,"electra"),nCt.forEach(t),OCr=r(QRe," \u2014 "),tU=n(QRe,"A",{href:!0});var sCt=s(tU);VCr=r(sCt,"TFElectraForTokenClassification"),sCt.forEach(t),XCr=r(QRe," (ELECTRA model)"),QRe.forEach(t),zCr=i(fe),_5=n(fe,"LI",{});var HRe=s(_5);nTe=n(HRe,"STRONG",{});var lCt=s(nTe);WCr=r(lCt,"flaubert"),lCt.forEach(t),QCr=r(HRe," \u2014 "),aU=n(HRe,"A",{href:!0});var iCt=s(aU);HCr=r(iCt,"TFFlaubertForTokenClassification"),iCt.forEach(t),UCr=r(HRe," (FlauBERT model)"),HRe.forEach(t),JCr=i(fe),b5=n(fe,"LI",{});var URe=s(b5);sTe=n(URe,"STRONG",{});var dCt=s(sTe);YCr=r(dCt,"funnel"),dCt.forEach(t),KCr=r(URe," \u2014 "),nU=n(URe,"A",{href:!0});var cCt=s(nU);ZCr=r(cCt,"TFFunnelForTokenClassification"),cCt.forEach(t),e5r=r(URe," (Funnel Transformer model)"),URe.forEach(t),o5r=i(fe),v5=n(fe,"LI",{});var JRe=s(v5);lTe=n(JRe,"STRONG",{});var mCt=s(lTe);r5r=r(mCt,"layoutlm"),mCt.forEach(t),t5r=r(JRe," \u2014 "),sU=n(JRe,"A",{href:!0});var fCt=s(sU);a5r=r(fCt,"TFLayoutLMForTokenClassification"),fCt.forEach(t),n5r=r(JRe," (LayoutLM model)"),JRe.forEach(t),s5r=i(fe),F5=n(fe,"LI",{});var YRe=s(F5);iTe=n(YRe,"STRONG",{});var gCt=s(iTe);l5r=r(gCt,"longformer"),gCt.forEach(t),i5r=r(YRe," \u2014 "),lU=n(YRe,"A",{href:!0});var hCt=s(lU);d5r=r(hCt,"TFLongformerForTokenClassification"),hCt.forEach(t),c5r=r(YRe," (Longformer model)"),YRe.forEach(t),m5r=i(fe),T5=n(fe,"LI",{});var KRe=s(T5);dTe=n(KRe,"STRONG",{});var uCt=s(dTe);f5r=r(uCt,"mobilebert"),uCt.forEach(t),g5r=r(KRe," \u2014 "),iU=n(KRe,"A",{href:!0});var pCt=s(iU);h5r=r(pCt,"TFMobileBertForTokenClassification"),pCt.forEach(t),u5r=r(KRe," (MobileBERT model)"),KRe.forEach(t),p5r=i(fe),M5=n(fe,"LI",{});var ZRe=s(M5);cTe=n(ZRe,"STRONG",{});var _Ct=s(cTe);_5r=r(_Ct,"mpnet"),_Ct.forEach(t),b5r=r(ZRe," \u2014 "),dU=n(ZRe,"A",{href:!0});var bCt=s(dU);v5r=r(bCt,"TFMPNetForTokenClassification"),bCt.forEach(t),F5r=r(ZRe," (MPNet model)"),ZRe.forEach(t),T5r=i(fe),E5=n(fe,"LI",{});var ePe=s(E5);mTe=n(ePe,"STRONG",{});var vCt=s(mTe);M5r=r(vCt,"rembert"),vCt.forEach(t),E5r=r(ePe," \u2014 "),cU=n(ePe,"A",{href:!0});var FCt=s(cU);C5r=r(FCt,"TFRemBertForTokenClassification"),FCt.forEach(t),w5r=r(ePe," (RemBERT model)"),ePe.forEach(t),A5r=i(fe),C5=n(fe,"LI",{});var oPe=s(C5);fTe=n(oPe,"STRONG",{});var TCt=s(fTe);y5r=r(TCt,"roberta"),TCt.forEach(t),L5r=r(oPe," \u2014 "),mU=n(oPe,"A",{href:!0});var MCt=s(mU);x5r=r(MCt,"TFRobertaForTokenClassification"),MCt.forEach(t),$5r=r(oPe," (RoBERTa model)"),oPe.forEach(t),k5r=i(fe),w5=n(fe,"LI",{});var rPe=s(w5);gTe=n(rPe,"STRONG",{});var ECt=s(gTe);S5r=r(ECt,"roformer"),ECt.forEach(t),R5r=r(rPe," \u2014 "),fU=n(rPe,"A",{href:!0});var CCt=s(fU);P5r=r(CCt,"TFRoFormerForTokenClassification"),CCt.forEach(t),B5r=r(rPe," (RoFormer model)"),rPe.forEach(t),I5r=i(fe),A5=n(fe,"LI",{});var tPe=s(A5);hTe=n(tPe,"STRONG",{});var wCt=s(hTe);q5r=r(wCt,"xlm"),wCt.forEach(t),N5r=r(tPe," \u2014 "),gU=n(tPe,"A",{href:!0});var ACt=s(gU);j5r=r(ACt,"TFXLMForTokenClassification"),ACt.forEach(t),D5r=r(tPe," (XLM model)"),tPe.forEach(t),G5r=i(fe),y5=n(fe,"LI",{});var aPe=s(y5);uTe=n(aPe,"STRONG",{});var yCt=s(uTe);O5r=r(yCt,"xlm-roberta"),yCt.forEach(t),V5r=r(aPe," \u2014 "),hU=n(aPe,"A",{href:!0});var LCt=s(hU);X5r=r(LCt,"TFXLMRobertaForTokenClassification"),LCt.forEach(t),z5r=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),W5r=i(fe),L5=n(fe,"LI",{});var nPe=s(L5);pTe=n(nPe,"STRONG",{});var xCt=s(pTe);Q5r=r(xCt,"xlnet"),xCt.forEach(t),H5r=r(nPe," \u2014 "),uU=n(nPe,"A",{href:!0});var $Ct=s(uU);U5r=r($Ct,"TFXLNetForTokenClassification"),$Ct.forEach(t),J5r=r(nPe," (XLNet model)"),nPe.forEach(t),fe.forEach(t),Y5r=i(Rl),T(x5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Kqe=i(m),vc=n(m,"H2",{class:!0});var nDe=s(vc);$5=n(nDe,"A",{id:!0,class:!0,href:!0});var kCt=s($5);_Te=n(kCt,"SPAN",{});var SCt=s(_Te);T(Xx.$$.fragment,SCt),SCt.forEach(t),kCt.forEach(t),K5r=i(nDe),bTe=n(nDe,"SPAN",{});var RCt=s(bTe);Z5r=r(RCt,"TFAutoModelForQuestionAnswering"),RCt.forEach(t),nDe.forEach(t),Zqe=i(m),ir=n(m,"DIV",{class:!0});var Pl=s(ir);T(zx.$$.fragment,Pl),e3r=i(Pl),Fc=n(Pl,"P",{});var OZ=s(Fc);o3r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pU=n(OZ,"A",{href:!0});var PCt=s(pU);r3r=r(PCt,"from_pretrained()"),PCt.forEach(t),t3r=r(OZ," class method or the "),_U=n(OZ,"A",{href:!0});var BCt=s(_U);a3r=r(BCt,"from_config()"),BCt.forEach(t),n3r=r(OZ,` class
method.`),OZ.forEach(t),s3r=i(Pl),Wx=n(Pl,"P",{});var sDe=s(Wx);l3r=r(sDe,"This class cannot be instantiated directly using "),vTe=n(sDe,"CODE",{});var ICt=s(vTe);i3r=r(ICt,"__init__()"),ICt.forEach(t),d3r=r(sDe," (throws an error)."),sDe.forEach(t),c3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var y0=s(Nt);T(Qx.$$.fragment,y0),m3r=i(y0),FTe=n(y0,"P",{});var qCt=s(FTe);f3r=r(qCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qCt.forEach(t),g3r=i(y0),Tc=n(y0,"P",{});var VZ=s(Tc);h3r=r(VZ,`Note:
Loading a model from its configuration file does `),TTe=n(VZ,"STRONG",{});var NCt=s(TTe);u3r=r(NCt,"not"),NCt.forEach(t),p3r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(VZ,"A",{href:!0});var jCt=s(bU);_3r=r(jCt,"from_pretrained()"),jCt.forEach(t),b3r=r(VZ," to load the model weights."),VZ.forEach(t),v3r=i(y0),T(k5.$$.fragment,y0),y0.forEach(t),F3r=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(Hx.$$.fragment,Bl),T3r=i(Bl),MTe=n(Bl,"P",{});var DCt=s(MTe);M3r=r(DCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DCt.forEach(t),E3r=i(Bl),mn=n(Bl,"P",{});var L0=s(mn);C3r=r(L0,"The model class to instantiate is selected based on the "),ETe=n(L0,"CODE",{});var GCt=s(ETe);w3r=r(GCt,"model_type"),GCt.forEach(t),A3r=r(L0,` property of the config object (either
passed as an argument or loaded from `),CTe=n(L0,"CODE",{});var OCt=s(CTe);y3r=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),L3r=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(L0,"CODE",{});var VCt=s(wTe);x3r=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),$3r=r(L0,":"),L0.forEach(t),k3r=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);S5=n(ge,"LI",{});var sPe=s(S5);ATe=n(sPe,"STRONG",{});var XCt=s(ATe);S3r=r(XCt,"albert"),XCt.forEach(t),R3r=r(sPe," \u2014 "),vU=n(sPe,"A",{href:!0});var zCt=s(vU);P3r=r(zCt,"TFAlbertForQuestionAnswering"),zCt.forEach(t),B3r=r(sPe," (ALBERT model)"),sPe.forEach(t),I3r=i(ge),R5=n(ge,"LI",{});var lPe=s(R5);yTe=n(lPe,"STRONG",{});var WCt=s(yTe);q3r=r(WCt,"bert"),WCt.forEach(t),N3r=r(lPe," \u2014 "),FU=n(lPe,"A",{href:!0});var QCt=s(FU);j3r=r(QCt,"TFBertForQuestionAnswering"),QCt.forEach(t),D3r=r(lPe," (BERT model)"),lPe.forEach(t),G3r=i(ge),P5=n(ge,"LI",{});var iPe=s(P5);LTe=n(iPe,"STRONG",{});var HCt=s(LTe);O3r=r(HCt,"camembert"),HCt.forEach(t),V3r=r(iPe," \u2014 "),TU=n(iPe,"A",{href:!0});var UCt=s(TU);X3r=r(UCt,"TFCamembertForQuestionAnswering"),UCt.forEach(t),z3r=r(iPe," (CamemBERT model)"),iPe.forEach(t),W3r=i(ge),B5=n(ge,"LI",{});var dPe=s(B5);xTe=n(dPe,"STRONG",{});var JCt=s(xTe);Q3r=r(JCt,"convbert"),JCt.forEach(t),H3r=r(dPe," \u2014 "),MU=n(dPe,"A",{href:!0});var YCt=s(MU);U3r=r(YCt,"TFConvBertForQuestionAnswering"),YCt.forEach(t),J3r=r(dPe," (ConvBERT model)"),dPe.forEach(t),Y3r=i(ge),I5=n(ge,"LI",{});var cPe=s(I5);$Te=n(cPe,"STRONG",{});var KCt=s($Te);K3r=r(KCt,"deberta"),KCt.forEach(t),Z3r=r(cPe," \u2014 "),EU=n(cPe,"A",{href:!0});var ZCt=s(EU);ewr=r(ZCt,"TFDebertaForQuestionAnswering"),ZCt.forEach(t),owr=r(cPe," (DeBERTa model)"),cPe.forEach(t),rwr=i(ge),q5=n(ge,"LI",{});var mPe=s(q5);kTe=n(mPe,"STRONG",{});var e5t=s(kTe);twr=r(e5t,"deberta-v2"),e5t.forEach(t),awr=r(mPe," \u2014 "),CU=n(mPe,"A",{href:!0});var o5t=s(CU);nwr=r(o5t,"TFDebertaV2ForQuestionAnswering"),o5t.forEach(t),swr=r(mPe," (DeBERTa-v2 model)"),mPe.forEach(t),lwr=i(ge),N5=n(ge,"LI",{});var fPe=s(N5);STe=n(fPe,"STRONG",{});var r5t=s(STe);iwr=r(r5t,"distilbert"),r5t.forEach(t),dwr=r(fPe," \u2014 "),wU=n(fPe,"A",{href:!0});var t5t=s(wU);cwr=r(t5t,"TFDistilBertForQuestionAnswering"),t5t.forEach(t),mwr=r(fPe," (DistilBERT model)"),fPe.forEach(t),fwr=i(ge),j5=n(ge,"LI",{});var gPe=s(j5);RTe=n(gPe,"STRONG",{});var a5t=s(RTe);gwr=r(a5t,"electra"),a5t.forEach(t),hwr=r(gPe," \u2014 "),AU=n(gPe,"A",{href:!0});var n5t=s(AU);uwr=r(n5t,"TFElectraForQuestionAnswering"),n5t.forEach(t),pwr=r(gPe," (ELECTRA model)"),gPe.forEach(t),_wr=i(ge),D5=n(ge,"LI",{});var hPe=s(D5);PTe=n(hPe,"STRONG",{});var s5t=s(PTe);bwr=r(s5t,"flaubert"),s5t.forEach(t),vwr=r(hPe," \u2014 "),yU=n(hPe,"A",{href:!0});var l5t=s(yU);Fwr=r(l5t,"TFFlaubertForQuestionAnsweringSimple"),l5t.forEach(t),Twr=r(hPe," (FlauBERT model)"),hPe.forEach(t),Mwr=i(ge),G5=n(ge,"LI",{});var uPe=s(G5);BTe=n(uPe,"STRONG",{});var i5t=s(BTe);Ewr=r(i5t,"funnel"),i5t.forEach(t),Cwr=r(uPe," \u2014 "),LU=n(uPe,"A",{href:!0});var d5t=s(LU);wwr=r(d5t,"TFFunnelForQuestionAnswering"),d5t.forEach(t),Awr=r(uPe," (Funnel Transformer model)"),uPe.forEach(t),ywr=i(ge),O5=n(ge,"LI",{});var pPe=s(O5);ITe=n(pPe,"STRONG",{});var c5t=s(ITe);Lwr=r(c5t,"gptj"),c5t.forEach(t),xwr=r(pPe," \u2014 "),xU=n(pPe,"A",{href:!0});var m5t=s(xU);$wr=r(m5t,"TFGPTJForQuestionAnswering"),m5t.forEach(t),kwr=r(pPe," (GPT-J model)"),pPe.forEach(t),Swr=i(ge),V5=n(ge,"LI",{});var _Pe=s(V5);qTe=n(_Pe,"STRONG",{});var f5t=s(qTe);Rwr=r(f5t,"longformer"),f5t.forEach(t),Pwr=r(_Pe," \u2014 "),$U=n(_Pe,"A",{href:!0});var g5t=s($U);Bwr=r(g5t,"TFLongformerForQuestionAnswering"),g5t.forEach(t),Iwr=r(_Pe," (Longformer model)"),_Pe.forEach(t),qwr=i(ge),X5=n(ge,"LI",{});var bPe=s(X5);NTe=n(bPe,"STRONG",{});var h5t=s(NTe);Nwr=r(h5t,"mobilebert"),h5t.forEach(t),jwr=r(bPe," \u2014 "),kU=n(bPe,"A",{href:!0});var u5t=s(kU);Dwr=r(u5t,"TFMobileBertForQuestionAnswering"),u5t.forEach(t),Gwr=r(bPe," (MobileBERT model)"),bPe.forEach(t),Owr=i(ge),z5=n(ge,"LI",{});var vPe=s(z5);jTe=n(vPe,"STRONG",{});var p5t=s(jTe);Vwr=r(p5t,"mpnet"),p5t.forEach(t),Xwr=r(vPe," \u2014 "),SU=n(vPe,"A",{href:!0});var _5t=s(SU);zwr=r(_5t,"TFMPNetForQuestionAnswering"),_5t.forEach(t),Wwr=r(vPe," (MPNet model)"),vPe.forEach(t),Qwr=i(ge),W5=n(ge,"LI",{});var FPe=s(W5);DTe=n(FPe,"STRONG",{});var b5t=s(DTe);Hwr=r(b5t,"rembert"),b5t.forEach(t),Uwr=r(FPe," \u2014 "),RU=n(FPe,"A",{href:!0});var v5t=s(RU);Jwr=r(v5t,"TFRemBertForQuestionAnswering"),v5t.forEach(t),Ywr=r(FPe," (RemBERT model)"),FPe.forEach(t),Kwr=i(ge),Q5=n(ge,"LI",{});var TPe=s(Q5);GTe=n(TPe,"STRONG",{});var F5t=s(GTe);Zwr=r(F5t,"roberta"),F5t.forEach(t),eAr=r(TPe," \u2014 "),PU=n(TPe,"A",{href:!0});var T5t=s(PU);oAr=r(T5t,"TFRobertaForQuestionAnswering"),T5t.forEach(t),rAr=r(TPe," (RoBERTa model)"),TPe.forEach(t),tAr=i(ge),H5=n(ge,"LI",{});var MPe=s(H5);OTe=n(MPe,"STRONG",{});var M5t=s(OTe);aAr=r(M5t,"roformer"),M5t.forEach(t),nAr=r(MPe," \u2014 "),BU=n(MPe,"A",{href:!0});var E5t=s(BU);sAr=r(E5t,"TFRoFormerForQuestionAnswering"),E5t.forEach(t),lAr=r(MPe," (RoFormer model)"),MPe.forEach(t),iAr=i(ge),U5=n(ge,"LI",{});var EPe=s(U5);VTe=n(EPe,"STRONG",{});var C5t=s(VTe);dAr=r(C5t,"xlm"),C5t.forEach(t),cAr=r(EPe," \u2014 "),IU=n(EPe,"A",{href:!0});var w5t=s(IU);mAr=r(w5t,"TFXLMForQuestionAnsweringSimple"),w5t.forEach(t),fAr=r(EPe," (XLM model)"),EPe.forEach(t),gAr=i(ge),J5=n(ge,"LI",{});var CPe=s(J5);XTe=n(CPe,"STRONG",{});var A5t=s(XTe);hAr=r(A5t,"xlm-roberta"),A5t.forEach(t),uAr=r(CPe," \u2014 "),qU=n(CPe,"A",{href:!0});var y5t=s(qU);pAr=r(y5t,"TFXLMRobertaForQuestionAnswering"),y5t.forEach(t),_Ar=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),bAr=i(ge),Y5=n(ge,"LI",{});var wPe=s(Y5);zTe=n(wPe,"STRONG",{});var L5t=s(zTe);vAr=r(L5t,"xlnet"),L5t.forEach(t),FAr=r(wPe," \u2014 "),NU=n(wPe,"A",{href:!0});var x5t=s(NU);TAr=r(x5t,"TFXLNetForQuestionAnsweringSimple"),x5t.forEach(t),MAr=r(wPe," (XLNet model)"),wPe.forEach(t),ge.forEach(t),EAr=i(Bl),T(K5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),eNe=i(m),Mc=n(m,"H2",{class:!0});var lDe=s(Mc);Z5=n(lDe,"A",{id:!0,class:!0,href:!0});var $5t=s(Z5);WTe=n($5t,"SPAN",{});var k5t=s(WTe);T(Ux.$$.fragment,k5t),k5t.forEach(t),$5t.forEach(t),CAr=i(lDe),QTe=n(lDe,"SPAN",{});var S5t=s(QTe);wAr=r(S5t,"TFAutoModelForVision2Seq"),S5t.forEach(t),lDe.forEach(t),oNe=i(m),dr=n(m,"DIV",{class:!0});var Il=s(dr);T(Jx.$$.fragment,Il),AAr=i(Il),Ec=n(Il,"P",{});var XZ=s(Ec);yAr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jU=n(XZ,"A",{href:!0});var R5t=s(jU);LAr=r(R5t,"from_pretrained()"),R5t.forEach(t),xAr=r(XZ," class method or the "),DU=n(XZ,"A",{href:!0});var P5t=s(DU);$Ar=r(P5t,"from_config()"),P5t.forEach(t),kAr=r(XZ,` class
method.`),XZ.forEach(t),SAr=i(Il),Yx=n(Il,"P",{});var iDe=s(Yx);RAr=r(iDe,"This class cannot be instantiated directly using "),HTe=n(iDe,"CODE",{});var B5t=s(HTe);PAr=r(B5t,"__init__()"),B5t.forEach(t),BAr=r(iDe," (throws an error)."),iDe.forEach(t),IAr=i(Il),jt=n(Il,"DIV",{class:!0});var x0=s(jt);T(Kx.$$.fragment,x0),qAr=i(x0),UTe=n(x0,"P",{});var I5t=s(UTe);NAr=r(I5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),I5t.forEach(t),jAr=i(x0),Cc=n(x0,"P",{});var zZ=s(Cc);DAr=r(zZ,`Note:
Loading a model from its configuration file does `),JTe=n(zZ,"STRONG",{});var q5t=s(JTe);GAr=r(q5t,"not"),q5t.forEach(t),OAr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(zZ,"A",{href:!0});var N5t=s(GU);VAr=r(N5t,"from_pretrained()"),N5t.forEach(t),XAr=r(zZ," to load the model weights."),zZ.forEach(t),zAr=i(x0),T(e3.$$.fragment,x0),x0.forEach(t),WAr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(Zx.$$.fragment,ql),QAr=i(ql),YTe=n(ql,"P",{});var j5t=s(YTe);HAr=r(j5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),j5t.forEach(t),UAr=i(ql),fn=n(ql,"P",{});var $0=s(fn);JAr=r($0,"The model class to instantiate is selected based on the "),KTe=n($0,"CODE",{});var D5t=s(KTe);YAr=r(D5t,"model_type"),D5t.forEach(t),KAr=r($0,` property of the config object (either
passed as an argument or loaded from `),ZTe=n($0,"CODE",{});var G5t=s(ZTe);ZAr=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),e6r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n($0,"CODE",{});var O5t=s(eMe);o6r=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),r6r=r($0,":"),$0.forEach(t),t6r=i(ql),oMe=n(ql,"UL",{});var V5t=s(oMe);o3=n(V5t,"LI",{});var APe=s(o3);rMe=n(APe,"STRONG",{});var X5t=s(rMe);a6r=r(X5t,"vision-encoder-decoder"),X5t.forEach(t),n6r=r(APe," \u2014 "),OU=n(APe,"A",{href:!0});var z5t=s(OU);s6r=r(z5t,"TFVisionEncoderDecoderModel"),z5t.forEach(t),l6r=r(APe," (Vision Encoder decoder model)"),APe.forEach(t),V5t.forEach(t),i6r=i(ql),T(r3.$$.fragment,ql),ql.forEach(t),Il.forEach(t),rNe=i(m),wc=n(m,"H2",{class:!0});var dDe=s(wc);t3=n(dDe,"A",{id:!0,class:!0,href:!0});var W5t=s(t3);tMe=n(W5t,"SPAN",{});var Q5t=s(tMe);T(e9.$$.fragment,Q5t),Q5t.forEach(t),W5t.forEach(t),d6r=i(dDe),aMe=n(dDe,"SPAN",{});var H5t=s(aMe);c6r=r(H5t,"TFAutoModelForSpeechSeq2Seq"),H5t.forEach(t),dDe.forEach(t),tNe=i(m),cr=n(m,"DIV",{class:!0});var Nl=s(cr);T(o9.$$.fragment,Nl),m6r=i(Nl),Ac=n(Nl,"P",{});var WZ=s(Ac);f6r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VU=n(WZ,"A",{href:!0});var U5t=s(VU);g6r=r(U5t,"from_pretrained()"),U5t.forEach(t),h6r=r(WZ," class method or the "),XU=n(WZ,"A",{href:!0});var J5t=s(XU);u6r=r(J5t,"from_config()"),J5t.forEach(t),p6r=r(WZ,` class
method.`),WZ.forEach(t),_6r=i(Nl),r9=n(Nl,"P",{});var cDe=s(r9);b6r=r(cDe,"This class cannot be instantiated directly using "),nMe=n(cDe,"CODE",{});var Y5t=s(nMe);v6r=r(Y5t,"__init__()"),Y5t.forEach(t),F6r=r(cDe," (throws an error)."),cDe.forEach(t),T6r=i(Nl),Dt=n(Nl,"DIV",{class:!0});var k0=s(Dt);T(t9.$$.fragment,k0),M6r=i(k0),sMe=n(k0,"P",{});var K5t=s(sMe);E6r=r(K5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),K5t.forEach(t),C6r=i(k0),yc=n(k0,"P",{});var QZ=s(yc);w6r=r(QZ,`Note:
Loading a model from its configuration file does `),lMe=n(QZ,"STRONG",{});var Z5t=s(lMe);A6r=r(Z5t,"not"),Z5t.forEach(t),y6r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(QZ,"A",{href:!0});var e3t=s(zU);L6r=r(e3t,"from_pretrained()"),e3t.forEach(t),x6r=r(QZ," to load the model weights."),QZ.forEach(t),$6r=i(k0),T(a3.$$.fragment,k0),k0.forEach(t),k6r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(a9.$$.fragment,jl),S6r=i(jl),iMe=n(jl,"P",{});var o3t=s(iMe);R6r=r(o3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),o3t.forEach(t),P6r=i(jl),gn=n(jl,"P",{});var S0=s(gn);B6r=r(S0,"The model class to instantiate is selected based on the "),dMe=n(S0,"CODE",{});var r3t=s(dMe);I6r=r(r3t,"model_type"),r3t.forEach(t),q6r=r(S0,` property of the config object (either
passed as an argument or loaded from `),cMe=n(S0,"CODE",{});var t3t=s(cMe);N6r=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),j6r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(S0,"CODE",{});var a3t=s(mMe);D6r=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),G6r=r(S0,":"),S0.forEach(t),O6r=i(jl),fMe=n(jl,"UL",{});var n3t=s(fMe);n3=n(n3t,"LI",{});var yPe=s(n3);gMe=n(yPe,"STRONG",{});var s3t=s(gMe);V6r=r(s3t,"speech_to_text"),s3t.forEach(t),X6r=r(yPe," \u2014 "),WU=n(yPe,"A",{href:!0});var l3t=s(WU);z6r=r(l3t,"TFSpeech2TextForConditionalGeneration"),l3t.forEach(t),W6r=r(yPe," (Speech2Text model)"),yPe.forEach(t),n3t.forEach(t),Q6r=i(jl),T(s3.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),aNe=i(m),Lc=n(m,"H2",{class:!0});var mDe=s(Lc);l3=n(mDe,"A",{id:!0,class:!0,href:!0});var i3t=s(l3);hMe=n(i3t,"SPAN",{});var d3t=s(hMe);T(n9.$$.fragment,d3t),d3t.forEach(t),i3t.forEach(t),H6r=i(mDe),uMe=n(mDe,"SPAN",{});var c3t=s(uMe);U6r=r(c3t,"FlaxAutoModel"),c3t.forEach(t),mDe.forEach(t),nNe=i(m),mr=n(m,"DIV",{class:!0});var Dl=s(mr);T(s9.$$.fragment,Dl),J6r=i(Dl),xc=n(Dl,"P",{});var HZ=s(xc);Y6r=r(HZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QU=n(HZ,"A",{href:!0});var m3t=s(QU);K6r=r(m3t,"from_pretrained()"),m3t.forEach(t),Z6r=r(HZ," class method or the "),HU=n(HZ,"A",{href:!0});var f3t=s(HU);e0r=r(f3t,"from_config()"),f3t.forEach(t),o0r=r(HZ,` class
method.`),HZ.forEach(t),r0r=i(Dl),l9=n(Dl,"P",{});var fDe=s(l9);t0r=r(fDe,"This class cannot be instantiated directly using "),pMe=n(fDe,"CODE",{});var g3t=s(pMe);a0r=r(g3t,"__init__()"),g3t.forEach(t),n0r=r(fDe," (throws an error)."),fDe.forEach(t),s0r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var R0=s(Gt);T(i9.$$.fragment,R0),l0r=i(R0),_Me=n(R0,"P",{});var h3t=s(_Me);i0r=r(h3t,"Instantiates one of the base model classes of the library from a configuration."),h3t.forEach(t),d0r=i(R0),$c=n(R0,"P",{});var UZ=s($c);c0r=r(UZ,`Note:
Loading a model from its configuration file does `),bMe=n(UZ,"STRONG",{});var u3t=s(bMe);m0r=r(u3t,"not"),u3t.forEach(t),f0r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(UZ,"A",{href:!0});var p3t=s(UU);g0r=r(p3t,"from_pretrained()"),p3t.forEach(t),h0r=r(UZ," to load the model weights."),UZ.forEach(t),u0r=i(R0),T(i3.$$.fragment,R0),R0.forEach(t),p0r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(d9.$$.fragment,Gl),_0r=i(Gl),vMe=n(Gl,"P",{});var _3t=s(vMe);b0r=r(_3t,"Instantiate one of the base model classes of the library from a pretrained model."),_3t.forEach(t),v0r=i(Gl),hn=n(Gl,"P",{});var P0=s(hn);F0r=r(P0,"The model class to instantiate is selected based on the "),FMe=n(P0,"CODE",{});var b3t=s(FMe);T0r=r(b3t,"model_type"),b3t.forEach(t),M0r=r(P0,` property of the config object (either
passed as an argument or loaded from `),TMe=n(P0,"CODE",{});var v3t=s(TMe);E0r=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),C0r=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(P0,"CODE",{});var F3t=s(MMe);w0r=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),A0r=r(P0,":"),P0.forEach(t),y0r=i(Gl),re=n(Gl,"UL",{});var ne=s(re);d3=n(ne,"LI",{});var LPe=s(d3);EMe=n(LPe,"STRONG",{});var T3t=s(EMe);L0r=r(T3t,"albert"),T3t.forEach(t),x0r=r(LPe," \u2014 "),JU=n(LPe,"A",{href:!0});var M3t=s(JU);$0r=r(M3t,"FlaxAlbertModel"),M3t.forEach(t),k0r=r(LPe," (ALBERT model)"),LPe.forEach(t),S0r=i(ne),c3=n(ne,"LI",{});var xPe=s(c3);CMe=n(xPe,"STRONG",{});var E3t=s(CMe);R0r=r(E3t,"bart"),E3t.forEach(t),P0r=r(xPe," \u2014 "),YU=n(xPe,"A",{href:!0});var C3t=s(YU);B0r=r(C3t,"FlaxBartModel"),C3t.forEach(t),I0r=r(xPe," (BART model)"),xPe.forEach(t),q0r=i(ne),m3=n(ne,"LI",{});var $Pe=s(m3);wMe=n($Pe,"STRONG",{});var w3t=s(wMe);N0r=r(w3t,"beit"),w3t.forEach(t),j0r=r($Pe," \u2014 "),KU=n($Pe,"A",{href:!0});var A3t=s(KU);D0r=r(A3t,"FlaxBeitModel"),A3t.forEach(t),G0r=r($Pe," (BEiT model)"),$Pe.forEach(t),O0r=i(ne),f3=n(ne,"LI",{});var kPe=s(f3);AMe=n(kPe,"STRONG",{});var y3t=s(AMe);V0r=r(y3t,"bert"),y3t.forEach(t),X0r=r(kPe," \u2014 "),ZU=n(kPe,"A",{href:!0});var L3t=s(ZU);z0r=r(L3t,"FlaxBertModel"),L3t.forEach(t),W0r=r(kPe," (BERT model)"),kPe.forEach(t),Q0r=i(ne),g3=n(ne,"LI",{});var SPe=s(g3);yMe=n(SPe,"STRONG",{});var x3t=s(yMe);H0r=r(x3t,"big_bird"),x3t.forEach(t),U0r=r(SPe," \u2014 "),eJ=n(SPe,"A",{href:!0});var $3t=s(eJ);J0r=r($3t,"FlaxBigBirdModel"),$3t.forEach(t),Y0r=r(SPe," (BigBird model)"),SPe.forEach(t),K0r=i(ne),h3=n(ne,"LI",{});var RPe=s(h3);LMe=n(RPe,"STRONG",{});var k3t=s(LMe);Z0r=r(k3t,"blenderbot"),k3t.forEach(t),eyr=r(RPe," \u2014 "),oJ=n(RPe,"A",{href:!0});var S3t=s(oJ);oyr=r(S3t,"FlaxBlenderbotModel"),S3t.forEach(t),ryr=r(RPe," (Blenderbot model)"),RPe.forEach(t),tyr=i(ne),u3=n(ne,"LI",{});var PPe=s(u3);xMe=n(PPe,"STRONG",{});var R3t=s(xMe);ayr=r(R3t,"blenderbot-small"),R3t.forEach(t),nyr=r(PPe," \u2014 "),rJ=n(PPe,"A",{href:!0});var P3t=s(rJ);syr=r(P3t,"FlaxBlenderbotSmallModel"),P3t.forEach(t),lyr=r(PPe," (BlenderbotSmall model)"),PPe.forEach(t),iyr=i(ne),p3=n(ne,"LI",{});var BPe=s(p3);$Me=n(BPe,"STRONG",{});var B3t=s($Me);dyr=r(B3t,"clip"),B3t.forEach(t),cyr=r(BPe," \u2014 "),tJ=n(BPe,"A",{href:!0});var I3t=s(tJ);myr=r(I3t,"FlaxCLIPModel"),I3t.forEach(t),fyr=r(BPe," (CLIP model)"),BPe.forEach(t),gyr=i(ne),_3=n(ne,"LI",{});var IPe=s(_3);kMe=n(IPe,"STRONG",{});var q3t=s(kMe);hyr=r(q3t,"distilbert"),q3t.forEach(t),uyr=r(IPe," \u2014 "),aJ=n(IPe,"A",{href:!0});var N3t=s(aJ);pyr=r(N3t,"FlaxDistilBertModel"),N3t.forEach(t),_yr=r(IPe," (DistilBERT model)"),IPe.forEach(t),byr=i(ne),b3=n(ne,"LI",{});var qPe=s(b3);SMe=n(qPe,"STRONG",{});var j3t=s(SMe);vyr=r(j3t,"electra"),j3t.forEach(t),Fyr=r(qPe," \u2014 "),nJ=n(qPe,"A",{href:!0});var D3t=s(nJ);Tyr=r(D3t,"FlaxElectraModel"),D3t.forEach(t),Myr=r(qPe," (ELECTRA model)"),qPe.forEach(t),Eyr=i(ne),v3=n(ne,"LI",{});var NPe=s(v3);RMe=n(NPe,"STRONG",{});var G3t=s(RMe);Cyr=r(G3t,"gpt2"),G3t.forEach(t),wyr=r(NPe," \u2014 "),sJ=n(NPe,"A",{href:!0});var O3t=s(sJ);Ayr=r(O3t,"FlaxGPT2Model"),O3t.forEach(t),yyr=r(NPe," (OpenAI GPT-2 model)"),NPe.forEach(t),Lyr=i(ne),F3=n(ne,"LI",{});var jPe=s(F3);PMe=n(jPe,"STRONG",{});var V3t=s(PMe);xyr=r(V3t,"gpt_neo"),V3t.forEach(t),$yr=r(jPe," \u2014 "),lJ=n(jPe,"A",{href:!0});var X3t=s(lJ);kyr=r(X3t,"FlaxGPTNeoModel"),X3t.forEach(t),Syr=r(jPe," (GPT Neo model)"),jPe.forEach(t),Ryr=i(ne),T3=n(ne,"LI",{});var DPe=s(T3);BMe=n(DPe,"STRONG",{});var z3t=s(BMe);Pyr=r(z3t,"gptj"),z3t.forEach(t),Byr=r(DPe," \u2014 "),iJ=n(DPe,"A",{href:!0});var W3t=s(iJ);Iyr=r(W3t,"FlaxGPTJModel"),W3t.forEach(t),qyr=r(DPe," (GPT-J model)"),DPe.forEach(t),Nyr=i(ne),M3=n(ne,"LI",{});var GPe=s(M3);IMe=n(GPe,"STRONG",{});var Q3t=s(IMe);jyr=r(Q3t,"marian"),Q3t.forEach(t),Dyr=r(GPe," \u2014 "),dJ=n(GPe,"A",{href:!0});var H3t=s(dJ);Gyr=r(H3t,"FlaxMarianModel"),H3t.forEach(t),Oyr=r(GPe," (Marian model)"),GPe.forEach(t),Vyr=i(ne),E3=n(ne,"LI",{});var OPe=s(E3);qMe=n(OPe,"STRONG",{});var U3t=s(qMe);Xyr=r(U3t,"mbart"),U3t.forEach(t),zyr=r(OPe," \u2014 "),cJ=n(OPe,"A",{href:!0});var J3t=s(cJ);Wyr=r(J3t,"FlaxMBartModel"),J3t.forEach(t),Qyr=r(OPe," (mBART model)"),OPe.forEach(t),Hyr=i(ne),C3=n(ne,"LI",{});var VPe=s(C3);NMe=n(VPe,"STRONG",{});var Y3t=s(NMe);Uyr=r(Y3t,"mt5"),Y3t.forEach(t),Jyr=r(VPe," \u2014 "),mJ=n(VPe,"A",{href:!0});var K3t=s(mJ);Yyr=r(K3t,"FlaxMT5Model"),K3t.forEach(t),Kyr=r(VPe," (mT5 model)"),VPe.forEach(t),Zyr=i(ne),w3=n(ne,"LI",{});var XPe=s(w3);jMe=n(XPe,"STRONG",{});var Z3t=s(jMe);eLr=r(Z3t,"pegasus"),Z3t.forEach(t),oLr=r(XPe," \u2014 "),fJ=n(XPe,"A",{href:!0});var ewt=s(fJ);rLr=r(ewt,"FlaxPegasusModel"),ewt.forEach(t),tLr=r(XPe," (Pegasus model)"),XPe.forEach(t),aLr=i(ne),A3=n(ne,"LI",{});var zPe=s(A3);DMe=n(zPe,"STRONG",{});var owt=s(DMe);nLr=r(owt,"roberta"),owt.forEach(t),sLr=r(zPe," \u2014 "),gJ=n(zPe,"A",{href:!0});var rwt=s(gJ);lLr=r(rwt,"FlaxRobertaModel"),rwt.forEach(t),iLr=r(zPe," (RoBERTa model)"),zPe.forEach(t),dLr=i(ne),y3=n(ne,"LI",{});var WPe=s(y3);GMe=n(WPe,"STRONG",{});var twt=s(GMe);cLr=r(twt,"roformer"),twt.forEach(t),mLr=r(WPe," \u2014 "),hJ=n(WPe,"A",{href:!0});var awt=s(hJ);fLr=r(awt,"FlaxRoFormerModel"),awt.forEach(t),gLr=r(WPe," (RoFormer model)"),WPe.forEach(t),hLr=i(ne),L3=n(ne,"LI",{});var QPe=s(L3);OMe=n(QPe,"STRONG",{});var nwt=s(OMe);uLr=r(nwt,"t5"),nwt.forEach(t),pLr=r(QPe," \u2014 "),uJ=n(QPe,"A",{href:!0});var swt=s(uJ);_Lr=r(swt,"FlaxT5Model"),swt.forEach(t),bLr=r(QPe," (T5 model)"),QPe.forEach(t),vLr=i(ne),x3=n(ne,"LI",{});var HPe=s(x3);VMe=n(HPe,"STRONG",{});var lwt=s(VMe);FLr=r(lwt,"vision-text-dual-encoder"),lwt.forEach(t),TLr=r(HPe," \u2014 "),pJ=n(HPe,"A",{href:!0});var iwt=s(pJ);MLr=r(iwt,"FlaxVisionTextDualEncoderModel"),iwt.forEach(t),ELr=r(HPe," (VisionTextDualEncoder model)"),HPe.forEach(t),CLr=i(ne),$3=n(ne,"LI",{});var UPe=s($3);XMe=n(UPe,"STRONG",{});var dwt=s(XMe);wLr=r(dwt,"vit"),dwt.forEach(t),ALr=r(UPe," \u2014 "),_J=n(UPe,"A",{href:!0});var cwt=s(_J);yLr=r(cwt,"FlaxViTModel"),cwt.forEach(t),LLr=r(UPe," (ViT model)"),UPe.forEach(t),xLr=i(ne),k3=n(ne,"LI",{});var JPe=s(k3);zMe=n(JPe,"STRONG",{});var mwt=s(zMe);$Lr=r(mwt,"wav2vec2"),mwt.forEach(t),kLr=r(JPe," \u2014 "),bJ=n(JPe,"A",{href:!0});var fwt=s(bJ);SLr=r(fwt,"FlaxWav2Vec2Model"),fwt.forEach(t),RLr=r(JPe," (Wav2Vec2 model)"),JPe.forEach(t),PLr=i(ne),S3=n(ne,"LI",{});var YPe=s(S3);WMe=n(YPe,"STRONG",{});var gwt=s(WMe);BLr=r(gwt,"xglm"),gwt.forEach(t),ILr=r(YPe," \u2014 "),vJ=n(YPe,"A",{href:!0});var hwt=s(vJ);qLr=r(hwt,"FlaxXGLMModel"),hwt.forEach(t),NLr=r(YPe," (XGLM model)"),YPe.forEach(t),jLr=i(ne),R3=n(ne,"LI",{});var KPe=s(R3);QMe=n(KPe,"STRONG",{});var uwt=s(QMe);DLr=r(uwt,"xlm-roberta"),uwt.forEach(t),GLr=r(KPe," \u2014 "),FJ=n(KPe,"A",{href:!0});var pwt=s(FJ);OLr=r(pwt,"FlaxXLMRobertaModel"),pwt.forEach(t),VLr=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),ne.forEach(t),XLr=i(Gl),T(P3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),sNe=i(m),kc=n(m,"H2",{class:!0});var gDe=s(kc);B3=n(gDe,"A",{id:!0,class:!0,href:!0});var _wt=s(B3);HMe=n(_wt,"SPAN",{});var bwt=s(HMe);T(c9.$$.fragment,bwt),bwt.forEach(t),_wt.forEach(t),zLr=i(gDe),UMe=n(gDe,"SPAN",{});var vwt=s(UMe);WLr=r(vwt,"FlaxAutoModelForCausalLM"),vwt.forEach(t),gDe.forEach(t),lNe=i(m),fr=n(m,"DIV",{class:!0});var Ol=s(fr);T(m9.$$.fragment,Ol),QLr=i(Ol),Sc=n(Ol,"P",{});var JZ=s(Sc);HLr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TJ=n(JZ,"A",{href:!0});var Fwt=s(TJ);ULr=r(Fwt,"from_pretrained()"),Fwt.forEach(t),JLr=r(JZ," class method or the "),MJ=n(JZ,"A",{href:!0});var Twt=s(MJ);YLr=r(Twt,"from_config()"),Twt.forEach(t),KLr=r(JZ,` class
method.`),JZ.forEach(t),ZLr=i(Ol),f9=n(Ol,"P",{});var hDe=s(f9);e8r=r(hDe,"This class cannot be instantiated directly using "),JMe=n(hDe,"CODE",{});var Mwt=s(JMe);o8r=r(Mwt,"__init__()"),Mwt.forEach(t),r8r=r(hDe," (throws an error)."),hDe.forEach(t),t8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var B0=s(Ot);T(g9.$$.fragment,B0),a8r=i(B0),YMe=n(B0,"P",{});var Ewt=s(YMe);n8r=r(Ewt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ewt.forEach(t),s8r=i(B0),Rc=n(B0,"P",{});var YZ=s(Rc);l8r=r(YZ,`Note:
Loading a model from its configuration file does `),KMe=n(YZ,"STRONG",{});var Cwt=s(KMe);i8r=r(Cwt,"not"),Cwt.forEach(t),d8r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(YZ,"A",{href:!0});var wwt=s(EJ);c8r=r(wwt,"from_pretrained()"),wwt.forEach(t),m8r=r(YZ," to load the model weights."),YZ.forEach(t),f8r=i(B0),T(I3.$$.fragment,B0),B0.forEach(t),g8r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(h9.$$.fragment,Vl),h8r=i(Vl),ZMe=n(Vl,"P",{});var Awt=s(ZMe);u8r=r(Awt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Awt.forEach(t),p8r=i(Vl),un=n(Vl,"P",{});var I0=s(un);_8r=r(I0,"The model class to instantiate is selected based on the "),e4e=n(I0,"CODE",{});var ywt=s(e4e);b8r=r(ywt,"model_type"),ywt.forEach(t),v8r=r(I0,` property of the config object (either
passed as an argument or loaded from `),o4e=n(I0,"CODE",{});var Lwt=s(o4e);F8r=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),T8r=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(I0,"CODE",{});var xwt=s(r4e);M8r=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),E8r=r(I0,":"),I0.forEach(t),C8r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);q3=n(Xe,"LI",{});var ZPe=s(q3);t4e=n(ZPe,"STRONG",{});var $wt=s(t4e);w8r=r($wt,"bart"),$wt.forEach(t),A8r=r(ZPe," \u2014 "),CJ=n(ZPe,"A",{href:!0});var kwt=s(CJ);y8r=r(kwt,"FlaxBartForCausalLM"),kwt.forEach(t),L8r=r(ZPe," (BART model)"),ZPe.forEach(t),x8r=i(Xe),N3=n(Xe,"LI",{});var eBe=s(N3);a4e=n(eBe,"STRONG",{});var Swt=s(a4e);$8r=r(Swt,"bert"),Swt.forEach(t),k8r=r(eBe," \u2014 "),wJ=n(eBe,"A",{href:!0});var Rwt=s(wJ);S8r=r(Rwt,"FlaxBertForCausalLM"),Rwt.forEach(t),R8r=r(eBe," (BERT model)"),eBe.forEach(t),P8r=i(Xe),j3=n(Xe,"LI",{});var oBe=s(j3);n4e=n(oBe,"STRONG",{});var Pwt=s(n4e);B8r=r(Pwt,"big_bird"),Pwt.forEach(t),I8r=r(oBe," \u2014 "),AJ=n(oBe,"A",{href:!0});var Bwt=s(AJ);q8r=r(Bwt,"FlaxBigBirdForCausalLM"),Bwt.forEach(t),N8r=r(oBe," (BigBird model)"),oBe.forEach(t),j8r=i(Xe),D3=n(Xe,"LI",{});var rBe=s(D3);s4e=n(rBe,"STRONG",{});var Iwt=s(s4e);D8r=r(Iwt,"electra"),Iwt.forEach(t),G8r=r(rBe," \u2014 "),yJ=n(rBe,"A",{href:!0});var qwt=s(yJ);O8r=r(qwt,"FlaxElectraForCausalLM"),qwt.forEach(t),V8r=r(rBe," (ELECTRA model)"),rBe.forEach(t),X8r=i(Xe),G3=n(Xe,"LI",{});var tBe=s(G3);l4e=n(tBe,"STRONG",{});var Nwt=s(l4e);z8r=r(Nwt,"gpt2"),Nwt.forEach(t),W8r=r(tBe," \u2014 "),LJ=n(tBe,"A",{href:!0});var jwt=s(LJ);Q8r=r(jwt,"FlaxGPT2LMHeadModel"),jwt.forEach(t),H8r=r(tBe," (OpenAI GPT-2 model)"),tBe.forEach(t),U8r=i(Xe),O3=n(Xe,"LI",{});var aBe=s(O3);i4e=n(aBe,"STRONG",{});var Dwt=s(i4e);J8r=r(Dwt,"gpt_neo"),Dwt.forEach(t),Y8r=r(aBe," \u2014 "),xJ=n(aBe,"A",{href:!0});var Gwt=s(xJ);K8r=r(Gwt,"FlaxGPTNeoForCausalLM"),Gwt.forEach(t),Z8r=r(aBe," (GPT Neo model)"),aBe.forEach(t),exr=i(Xe),V3=n(Xe,"LI",{});var nBe=s(V3);d4e=n(nBe,"STRONG",{});var Owt=s(d4e);oxr=r(Owt,"gptj"),Owt.forEach(t),rxr=r(nBe," \u2014 "),$J=n(nBe,"A",{href:!0});var Vwt=s($J);txr=r(Vwt,"FlaxGPTJForCausalLM"),Vwt.forEach(t),axr=r(nBe," (GPT-J model)"),nBe.forEach(t),nxr=i(Xe),X3=n(Xe,"LI",{});var sBe=s(X3);c4e=n(sBe,"STRONG",{});var Xwt=s(c4e);sxr=r(Xwt,"roberta"),Xwt.forEach(t),lxr=r(sBe," \u2014 "),kJ=n(sBe,"A",{href:!0});var zwt=s(kJ);ixr=r(zwt,"FlaxRobertaForCausalLM"),zwt.forEach(t),dxr=r(sBe," (RoBERTa model)"),sBe.forEach(t),cxr=i(Xe),z3=n(Xe,"LI",{});var lBe=s(z3);m4e=n(lBe,"STRONG",{});var Wwt=s(m4e);mxr=r(Wwt,"xglm"),Wwt.forEach(t),fxr=r(lBe," \u2014 "),SJ=n(lBe,"A",{href:!0});var Qwt=s(SJ);gxr=r(Qwt,"FlaxXGLMForCausalLM"),Qwt.forEach(t),hxr=r(lBe," (XGLM model)"),lBe.forEach(t),Xe.forEach(t),uxr=i(Vl),T(W3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),iNe=i(m),Pc=n(m,"H2",{class:!0});var uDe=s(Pc);Q3=n(uDe,"A",{id:!0,class:!0,href:!0});var Hwt=s(Q3);f4e=n(Hwt,"SPAN",{});var Uwt=s(f4e);T(u9.$$.fragment,Uwt),Uwt.forEach(t),Hwt.forEach(t),pxr=i(uDe),g4e=n(uDe,"SPAN",{});var Jwt=s(g4e);_xr=r(Jwt,"FlaxAutoModelForPreTraining"),Jwt.forEach(t),uDe.forEach(t),dNe=i(m),gr=n(m,"DIV",{class:!0});var Xl=s(gr);T(p9.$$.fragment,Xl),bxr=i(Xl),Bc=n(Xl,"P",{});var KZ=s(Bc);vxr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=n(KZ,"A",{href:!0});var Ywt=s(RJ);Fxr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),Txr=r(KZ," class method or the "),PJ=n(KZ,"A",{href:!0});var Kwt=s(PJ);Mxr=r(Kwt,"from_config()"),Kwt.forEach(t),Exr=r(KZ,` class
method.`),KZ.forEach(t),Cxr=i(Xl),_9=n(Xl,"P",{});var pDe=s(_9);wxr=r(pDe,"This class cannot be instantiated directly using "),h4e=n(pDe,"CODE",{});var Zwt=s(h4e);Axr=r(Zwt,"__init__()"),Zwt.forEach(t),yxr=r(pDe," (throws an error)."),pDe.forEach(t),Lxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var q0=s(Vt);T(b9.$$.fragment,q0),xxr=i(q0),u4e=n(q0,"P",{});var eAt=s(u4e);$xr=r(eAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eAt.forEach(t),kxr=i(q0),Ic=n(q0,"P",{});var ZZ=s(Ic);Sxr=r(ZZ,`Note:
Loading a model from its configuration file does `),p4e=n(ZZ,"STRONG",{});var oAt=s(p4e);Rxr=r(oAt,"not"),oAt.forEach(t),Pxr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(ZZ,"A",{href:!0});var rAt=s(BJ);Bxr=r(rAt,"from_pretrained()"),rAt.forEach(t),Ixr=r(ZZ," to load the model weights."),ZZ.forEach(t),qxr=i(q0),T(H3.$$.fragment,q0),q0.forEach(t),Nxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(v9.$$.fragment,zl),jxr=i(zl),_4e=n(zl,"P",{});var tAt=s(_4e);Dxr=r(tAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tAt.forEach(t),Gxr=i(zl),pn=n(zl,"P",{});var N0=s(pn);Oxr=r(N0,"The model class to instantiate is selected based on the "),b4e=n(N0,"CODE",{});var aAt=s(b4e);Vxr=r(aAt,"model_type"),aAt.forEach(t),Xxr=r(N0,` property of the config object (either
passed as an argument or loaded from `),v4e=n(N0,"CODE",{});var nAt=s(v4e);zxr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),Wxr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(N0,"CODE",{});var sAt=s(F4e);Qxr=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),Hxr=r(N0,":"),N0.forEach(t),Uxr=i(zl),Me=n(zl,"UL",{});var we=s(Me);U3=n(we,"LI",{});var iBe=s(U3);T4e=n(iBe,"STRONG",{});var lAt=s(T4e);Jxr=r(lAt,"albert"),lAt.forEach(t),Yxr=r(iBe," \u2014 "),IJ=n(iBe,"A",{href:!0});var iAt=s(IJ);Kxr=r(iAt,"FlaxAlbertForPreTraining"),iAt.forEach(t),Zxr=r(iBe," (ALBERT model)"),iBe.forEach(t),e9r=i(we),J3=n(we,"LI",{});var dBe=s(J3);M4e=n(dBe,"STRONG",{});var dAt=s(M4e);o9r=r(dAt,"bart"),dAt.forEach(t),r9r=r(dBe," \u2014 "),qJ=n(dBe,"A",{href:!0});var cAt=s(qJ);t9r=r(cAt,"FlaxBartForConditionalGeneration"),cAt.forEach(t),a9r=r(dBe," (BART model)"),dBe.forEach(t),n9r=i(we),Y3=n(we,"LI",{});var cBe=s(Y3);E4e=n(cBe,"STRONG",{});var mAt=s(E4e);s9r=r(mAt,"bert"),mAt.forEach(t),l9r=r(cBe," \u2014 "),NJ=n(cBe,"A",{href:!0});var fAt=s(NJ);i9r=r(fAt,"FlaxBertForPreTraining"),fAt.forEach(t),d9r=r(cBe," (BERT model)"),cBe.forEach(t),c9r=i(we),K3=n(we,"LI",{});var mBe=s(K3);C4e=n(mBe,"STRONG",{});var gAt=s(C4e);m9r=r(gAt,"big_bird"),gAt.forEach(t),f9r=r(mBe," \u2014 "),jJ=n(mBe,"A",{href:!0});var hAt=s(jJ);g9r=r(hAt,"FlaxBigBirdForPreTraining"),hAt.forEach(t),h9r=r(mBe," (BigBird model)"),mBe.forEach(t),u9r=i(we),Z3=n(we,"LI",{});var fBe=s(Z3);w4e=n(fBe,"STRONG",{});var uAt=s(w4e);p9r=r(uAt,"electra"),uAt.forEach(t),_9r=r(fBe," \u2014 "),DJ=n(fBe,"A",{href:!0});var pAt=s(DJ);b9r=r(pAt,"FlaxElectraForPreTraining"),pAt.forEach(t),v9r=r(fBe," (ELECTRA model)"),fBe.forEach(t),F9r=i(we),ew=n(we,"LI",{});var gBe=s(ew);A4e=n(gBe,"STRONG",{});var _At=s(A4e);T9r=r(_At,"mbart"),_At.forEach(t),M9r=r(gBe," \u2014 "),GJ=n(gBe,"A",{href:!0});var bAt=s(GJ);E9r=r(bAt,"FlaxMBartForConditionalGeneration"),bAt.forEach(t),C9r=r(gBe," (mBART model)"),gBe.forEach(t),w9r=i(we),ow=n(we,"LI",{});var hBe=s(ow);y4e=n(hBe,"STRONG",{});var vAt=s(y4e);A9r=r(vAt,"mt5"),vAt.forEach(t),y9r=r(hBe," \u2014 "),OJ=n(hBe,"A",{href:!0});var FAt=s(OJ);L9r=r(FAt,"FlaxMT5ForConditionalGeneration"),FAt.forEach(t),x9r=r(hBe," (mT5 model)"),hBe.forEach(t),$9r=i(we),rw=n(we,"LI",{});var uBe=s(rw);L4e=n(uBe,"STRONG",{});var TAt=s(L4e);k9r=r(TAt,"roberta"),TAt.forEach(t),S9r=r(uBe," \u2014 "),VJ=n(uBe,"A",{href:!0});var MAt=s(VJ);R9r=r(MAt,"FlaxRobertaForMaskedLM"),MAt.forEach(t),P9r=r(uBe," (RoBERTa model)"),uBe.forEach(t),B9r=i(we),tw=n(we,"LI",{});var pBe=s(tw);x4e=n(pBe,"STRONG",{});var EAt=s(x4e);I9r=r(EAt,"roformer"),EAt.forEach(t),q9r=r(pBe," \u2014 "),XJ=n(pBe,"A",{href:!0});var CAt=s(XJ);N9r=r(CAt,"FlaxRoFormerForMaskedLM"),CAt.forEach(t),j9r=r(pBe," (RoFormer model)"),pBe.forEach(t),D9r=i(we),aw=n(we,"LI",{});var _Be=s(aw);$4e=n(_Be,"STRONG",{});var wAt=s($4e);G9r=r(wAt,"t5"),wAt.forEach(t),O9r=r(_Be," \u2014 "),zJ=n(_Be,"A",{href:!0});var AAt=s(zJ);V9r=r(AAt,"FlaxT5ForConditionalGeneration"),AAt.forEach(t),X9r=r(_Be," (T5 model)"),_Be.forEach(t),z9r=i(we),nw=n(we,"LI",{});var bBe=s(nw);k4e=n(bBe,"STRONG",{});var yAt=s(k4e);W9r=r(yAt,"wav2vec2"),yAt.forEach(t),Q9r=r(bBe," \u2014 "),WJ=n(bBe,"A",{href:!0});var LAt=s(WJ);H9r=r(LAt,"FlaxWav2Vec2ForPreTraining"),LAt.forEach(t),U9r=r(bBe," (Wav2Vec2 model)"),bBe.forEach(t),J9r=i(we),sw=n(we,"LI",{});var vBe=s(sw);S4e=n(vBe,"STRONG",{});var xAt=s(S4e);Y9r=r(xAt,"xlm-roberta"),xAt.forEach(t),K9r=r(vBe," \u2014 "),QJ=n(vBe,"A",{href:!0});var $At=s(QJ);Z9r=r($At,"FlaxXLMRobertaForMaskedLM"),$At.forEach(t),e7r=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),we.forEach(t),o7r=i(zl),T(lw.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),cNe=i(m),qc=n(m,"H2",{class:!0});var _De=s(qc);iw=n(_De,"A",{id:!0,class:!0,href:!0});var kAt=s(iw);R4e=n(kAt,"SPAN",{});var SAt=s(R4e);T(F9.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),r7r=i(_De),P4e=n(_De,"SPAN",{});var RAt=s(P4e);t7r=r(RAt,"FlaxAutoModelForMaskedLM"),RAt.forEach(t),_De.forEach(t),mNe=i(m),hr=n(m,"DIV",{class:!0});var Wl=s(hr);T(T9.$$.fragment,Wl),a7r=i(Wl),Nc=n(Wl,"P",{});var eee=s(Nc);n7r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HJ=n(eee,"A",{href:!0});var PAt=s(HJ);s7r=r(PAt,"from_pretrained()"),PAt.forEach(t),l7r=r(eee," class method or the "),UJ=n(eee,"A",{href:!0});var BAt=s(UJ);i7r=r(BAt,"from_config()"),BAt.forEach(t),d7r=r(eee,` class
method.`),eee.forEach(t),c7r=i(Wl),M9=n(Wl,"P",{});var bDe=s(M9);m7r=r(bDe,"This class cannot be instantiated directly using "),B4e=n(bDe,"CODE",{});var IAt=s(B4e);f7r=r(IAt,"__init__()"),IAt.forEach(t),g7r=r(bDe," (throws an error)."),bDe.forEach(t),h7r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var j0=s(Xt);T(E9.$$.fragment,j0),u7r=i(j0),I4e=n(j0,"P",{});var qAt=s(I4e);p7r=r(qAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qAt.forEach(t),_7r=i(j0),jc=n(j0,"P",{});var oee=s(jc);b7r=r(oee,`Note:
Loading a model from its configuration file does `),q4e=n(oee,"STRONG",{});var NAt=s(q4e);v7r=r(NAt,"not"),NAt.forEach(t),F7r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(oee,"A",{href:!0});var jAt=s(JJ);T7r=r(jAt,"from_pretrained()"),jAt.forEach(t),M7r=r(oee," to load the model weights."),oee.forEach(t),E7r=i(j0),T(dw.$$.fragment,j0),j0.forEach(t),C7r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(C9.$$.fragment,Ql),w7r=i(Ql),N4e=n(Ql,"P",{});var DAt=s(N4e);A7r=r(DAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DAt.forEach(t),y7r=i(Ql),_n=n(Ql,"P",{});var D0=s(_n);L7r=r(D0,"The model class to instantiate is selected based on the "),j4e=n(D0,"CODE",{});var GAt=s(j4e);x7r=r(GAt,"model_type"),GAt.forEach(t),$7r=r(D0,` property of the config object (either
passed as an argument or loaded from `),D4e=n(D0,"CODE",{});var OAt=s(D4e);k7r=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),S7r=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(D0,"CODE",{});var VAt=s(G4e);R7r=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),P7r=r(D0,":"),D0.forEach(t),B7r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);cw=n(Ie,"LI",{});var FBe=s(cw);O4e=n(FBe,"STRONG",{});var XAt=s(O4e);I7r=r(XAt,"albert"),XAt.forEach(t),q7r=r(FBe," \u2014 "),YJ=n(FBe,"A",{href:!0});var zAt=s(YJ);N7r=r(zAt,"FlaxAlbertForMaskedLM"),zAt.forEach(t),j7r=r(FBe," (ALBERT model)"),FBe.forEach(t),D7r=i(Ie),mw=n(Ie,"LI",{});var TBe=s(mw);V4e=n(TBe,"STRONG",{});var WAt=s(V4e);G7r=r(WAt,"bart"),WAt.forEach(t),O7r=r(TBe," \u2014 "),KJ=n(TBe,"A",{href:!0});var QAt=s(KJ);V7r=r(QAt,"FlaxBartForConditionalGeneration"),QAt.forEach(t),X7r=r(TBe," (BART model)"),TBe.forEach(t),z7r=i(Ie),fw=n(Ie,"LI",{});var MBe=s(fw);X4e=n(MBe,"STRONG",{});var HAt=s(X4e);W7r=r(HAt,"bert"),HAt.forEach(t),Q7r=r(MBe," \u2014 "),ZJ=n(MBe,"A",{href:!0});var UAt=s(ZJ);H7r=r(UAt,"FlaxBertForMaskedLM"),UAt.forEach(t),U7r=r(MBe," (BERT model)"),MBe.forEach(t),J7r=i(Ie),gw=n(Ie,"LI",{});var EBe=s(gw);z4e=n(EBe,"STRONG",{});var JAt=s(z4e);Y7r=r(JAt,"big_bird"),JAt.forEach(t),K7r=r(EBe," \u2014 "),eY=n(EBe,"A",{href:!0});var YAt=s(eY);Z7r=r(YAt,"FlaxBigBirdForMaskedLM"),YAt.forEach(t),e$r=r(EBe," (BigBird model)"),EBe.forEach(t),o$r=i(Ie),hw=n(Ie,"LI",{});var CBe=s(hw);W4e=n(CBe,"STRONG",{});var KAt=s(W4e);r$r=r(KAt,"distilbert"),KAt.forEach(t),t$r=r(CBe," \u2014 "),oY=n(CBe,"A",{href:!0});var ZAt=s(oY);a$r=r(ZAt,"FlaxDistilBertForMaskedLM"),ZAt.forEach(t),n$r=r(CBe," (DistilBERT model)"),CBe.forEach(t),s$r=i(Ie),uw=n(Ie,"LI",{});var wBe=s(uw);Q4e=n(wBe,"STRONG",{});var e6t=s(Q4e);l$r=r(e6t,"electra"),e6t.forEach(t),i$r=r(wBe," \u2014 "),rY=n(wBe,"A",{href:!0});var o6t=s(rY);d$r=r(o6t,"FlaxElectraForMaskedLM"),o6t.forEach(t),c$r=r(wBe," (ELECTRA model)"),wBe.forEach(t),m$r=i(Ie),pw=n(Ie,"LI",{});var ABe=s(pw);H4e=n(ABe,"STRONG",{});var r6t=s(H4e);f$r=r(r6t,"mbart"),r6t.forEach(t),g$r=r(ABe," \u2014 "),tY=n(ABe,"A",{href:!0});var t6t=s(tY);h$r=r(t6t,"FlaxMBartForConditionalGeneration"),t6t.forEach(t),u$r=r(ABe," (mBART model)"),ABe.forEach(t),p$r=i(Ie),_w=n(Ie,"LI",{});var yBe=s(_w);U4e=n(yBe,"STRONG",{});var a6t=s(U4e);_$r=r(a6t,"roberta"),a6t.forEach(t),b$r=r(yBe," \u2014 "),aY=n(yBe,"A",{href:!0});var n6t=s(aY);v$r=r(n6t,"FlaxRobertaForMaskedLM"),n6t.forEach(t),F$r=r(yBe," (RoBERTa model)"),yBe.forEach(t),T$r=i(Ie),bw=n(Ie,"LI",{});var LBe=s(bw);J4e=n(LBe,"STRONG",{});var s6t=s(J4e);M$r=r(s6t,"roformer"),s6t.forEach(t),E$r=r(LBe," \u2014 "),nY=n(LBe,"A",{href:!0});var l6t=s(nY);C$r=r(l6t,"FlaxRoFormerForMaskedLM"),l6t.forEach(t),w$r=r(LBe," (RoFormer model)"),LBe.forEach(t),A$r=i(Ie),vw=n(Ie,"LI",{});var xBe=s(vw);Y4e=n(xBe,"STRONG",{});var i6t=s(Y4e);y$r=r(i6t,"xlm-roberta"),i6t.forEach(t),L$r=r(xBe," \u2014 "),sY=n(xBe,"A",{href:!0});var d6t=s(sY);x$r=r(d6t,"FlaxXLMRobertaForMaskedLM"),d6t.forEach(t),$$r=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),Ie.forEach(t),k$r=i(Ql),T(Fw.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),fNe=i(m),Dc=n(m,"H2",{class:!0});var vDe=s(Dc);Tw=n(vDe,"A",{id:!0,class:!0,href:!0});var c6t=s(Tw);K4e=n(c6t,"SPAN",{});var m6t=s(K4e);T(w9.$$.fragment,m6t),m6t.forEach(t),c6t.forEach(t),S$r=i(vDe),Z4e=n(vDe,"SPAN",{});var f6t=s(Z4e);R$r=r(f6t,"FlaxAutoModelForSeq2SeqLM"),f6t.forEach(t),vDe.forEach(t),gNe=i(m),ur=n(m,"DIV",{class:!0});var Hl=s(ur);T(A9.$$.fragment,Hl),P$r=i(Hl),Gc=n(Hl,"P",{});var ree=s(Gc);B$r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lY=n(ree,"A",{href:!0});var g6t=s(lY);I$r=r(g6t,"from_pretrained()"),g6t.forEach(t),q$r=r(ree," class method or the "),iY=n(ree,"A",{href:!0});var h6t=s(iY);N$r=r(h6t,"from_config()"),h6t.forEach(t),j$r=r(ree,` class
method.`),ree.forEach(t),D$r=i(Hl),y9=n(Hl,"P",{});var FDe=s(y9);G$r=r(FDe,"This class cannot be instantiated directly using "),eEe=n(FDe,"CODE",{});var u6t=s(eEe);O$r=r(u6t,"__init__()"),u6t.forEach(t),V$r=r(FDe," (throws an error)."),FDe.forEach(t),X$r=i(Hl),zt=n(Hl,"DIV",{class:!0});var G0=s(zt);T(L9.$$.fragment,G0),z$r=i(G0),oEe=n(G0,"P",{});var p6t=s(oEe);W$r=r(p6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p6t.forEach(t),Q$r=i(G0),Oc=n(G0,"P",{});var tee=s(Oc);H$r=r(tee,`Note:
Loading a model from its configuration file does `),rEe=n(tee,"STRONG",{});var _6t=s(rEe);U$r=r(_6t,"not"),_6t.forEach(t),J$r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(tee,"A",{href:!0});var b6t=s(dY);Y$r=r(b6t,"from_pretrained()"),b6t.forEach(t),K$r=r(tee," to load the model weights."),tee.forEach(t),Z$r=i(G0),T(Mw.$$.fragment,G0),G0.forEach(t),ekr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(x9.$$.fragment,Ul),okr=i(Ul),tEe=n(Ul,"P",{});var v6t=s(tEe);rkr=r(v6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v6t.forEach(t),tkr=i(Ul),bn=n(Ul,"P",{});var O0=s(bn);akr=r(O0,"The model class to instantiate is selected based on the "),aEe=n(O0,"CODE",{});var F6t=s(aEe);nkr=r(F6t,"model_type"),F6t.forEach(t),skr=r(O0,` property of the config object (either
passed as an argument or loaded from `),nEe=n(O0,"CODE",{});var T6t=s(nEe);lkr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),ikr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=n(O0,"CODE",{});var M6t=s(sEe);dkr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),ckr=r(O0,":"),O0.forEach(t),mkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);Ew=n(ze,"LI",{});var $Be=s(Ew);lEe=n($Be,"STRONG",{});var E6t=s(lEe);fkr=r(E6t,"bart"),E6t.forEach(t),gkr=r($Be," \u2014 "),cY=n($Be,"A",{href:!0});var C6t=s(cY);hkr=r(C6t,"FlaxBartForConditionalGeneration"),C6t.forEach(t),ukr=r($Be," (BART model)"),$Be.forEach(t),pkr=i(ze),Cw=n(ze,"LI",{});var kBe=s(Cw);iEe=n(kBe,"STRONG",{});var w6t=s(iEe);_kr=r(w6t,"blenderbot"),w6t.forEach(t),bkr=r(kBe," \u2014 "),mY=n(kBe,"A",{href:!0});var A6t=s(mY);vkr=r(A6t,"FlaxBlenderbotForConditionalGeneration"),A6t.forEach(t),Fkr=r(kBe," (Blenderbot model)"),kBe.forEach(t),Tkr=i(ze),ww=n(ze,"LI",{});var SBe=s(ww);dEe=n(SBe,"STRONG",{});var y6t=s(dEe);Mkr=r(y6t,"blenderbot-small"),y6t.forEach(t),Ekr=r(SBe," \u2014 "),fY=n(SBe,"A",{href:!0});var L6t=s(fY);Ckr=r(L6t,"FlaxBlenderbotSmallForConditionalGeneration"),L6t.forEach(t),wkr=r(SBe," (BlenderbotSmall model)"),SBe.forEach(t),Akr=i(ze),Aw=n(ze,"LI",{});var RBe=s(Aw);cEe=n(RBe,"STRONG",{});var x6t=s(cEe);ykr=r(x6t,"encoder-decoder"),x6t.forEach(t),Lkr=r(RBe," \u2014 "),gY=n(RBe,"A",{href:!0});var $6t=s(gY);xkr=r($6t,"FlaxEncoderDecoderModel"),$6t.forEach(t),$kr=r(RBe," (Encoder decoder model)"),RBe.forEach(t),kkr=i(ze),yw=n(ze,"LI",{});var PBe=s(yw);mEe=n(PBe,"STRONG",{});var k6t=s(mEe);Skr=r(k6t,"marian"),k6t.forEach(t),Rkr=r(PBe," \u2014 "),hY=n(PBe,"A",{href:!0});var S6t=s(hY);Pkr=r(S6t,"FlaxMarianMTModel"),S6t.forEach(t),Bkr=r(PBe," (Marian model)"),PBe.forEach(t),Ikr=i(ze),Lw=n(ze,"LI",{});var BBe=s(Lw);fEe=n(BBe,"STRONG",{});var R6t=s(fEe);qkr=r(R6t,"mbart"),R6t.forEach(t),Nkr=r(BBe," \u2014 "),uY=n(BBe,"A",{href:!0});var P6t=s(uY);jkr=r(P6t,"FlaxMBartForConditionalGeneration"),P6t.forEach(t),Dkr=r(BBe," (mBART model)"),BBe.forEach(t),Gkr=i(ze),xw=n(ze,"LI",{});var IBe=s(xw);gEe=n(IBe,"STRONG",{});var B6t=s(gEe);Okr=r(B6t,"mt5"),B6t.forEach(t),Vkr=r(IBe," \u2014 "),pY=n(IBe,"A",{href:!0});var I6t=s(pY);Xkr=r(I6t,"FlaxMT5ForConditionalGeneration"),I6t.forEach(t),zkr=r(IBe," (mT5 model)"),IBe.forEach(t),Wkr=i(ze),$w=n(ze,"LI",{});var qBe=s($w);hEe=n(qBe,"STRONG",{});var q6t=s(hEe);Qkr=r(q6t,"pegasus"),q6t.forEach(t),Hkr=r(qBe," \u2014 "),_Y=n(qBe,"A",{href:!0});var N6t=s(_Y);Ukr=r(N6t,"FlaxPegasusForConditionalGeneration"),N6t.forEach(t),Jkr=r(qBe," (Pegasus model)"),qBe.forEach(t),Ykr=i(ze),kw=n(ze,"LI",{});var NBe=s(kw);uEe=n(NBe,"STRONG",{});var j6t=s(uEe);Kkr=r(j6t,"t5"),j6t.forEach(t),Zkr=r(NBe," \u2014 "),bY=n(NBe,"A",{href:!0});var D6t=s(bY);eSr=r(D6t,"FlaxT5ForConditionalGeneration"),D6t.forEach(t),oSr=r(NBe," (T5 model)"),NBe.forEach(t),ze.forEach(t),rSr=i(Ul),T(Sw.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),hNe=i(m),Vc=n(m,"H2",{class:!0});var TDe=s(Vc);Rw=n(TDe,"A",{id:!0,class:!0,href:!0});var G6t=s(Rw);pEe=n(G6t,"SPAN",{});var O6t=s(pEe);T($9.$$.fragment,O6t),O6t.forEach(t),G6t.forEach(t),tSr=i(TDe),_Ee=n(TDe,"SPAN",{});var V6t=s(_Ee);aSr=r(V6t,"FlaxAutoModelForSequenceClassification"),V6t.forEach(t),TDe.forEach(t),uNe=i(m),pr=n(m,"DIV",{class:!0});var Jl=s(pr);T(k9.$$.fragment,Jl),nSr=i(Jl),Xc=n(Jl,"P",{});var aee=s(Xc);sSr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vY=n(aee,"A",{href:!0});var X6t=s(vY);lSr=r(X6t,"from_pretrained()"),X6t.forEach(t),iSr=r(aee," class method or the "),FY=n(aee,"A",{href:!0});var z6t=s(FY);dSr=r(z6t,"from_config()"),z6t.forEach(t),cSr=r(aee,` class
method.`),aee.forEach(t),mSr=i(Jl),S9=n(Jl,"P",{});var MDe=s(S9);fSr=r(MDe,"This class cannot be instantiated directly using "),bEe=n(MDe,"CODE",{});var W6t=s(bEe);gSr=r(W6t,"__init__()"),W6t.forEach(t),hSr=r(MDe," (throws an error)."),MDe.forEach(t),uSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var V0=s(Wt);T(R9.$$.fragment,V0),pSr=i(V0),vEe=n(V0,"P",{});var Q6t=s(vEe);_Sr=r(Q6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q6t.forEach(t),bSr=i(V0),zc=n(V0,"P",{});var nee=s(zc);vSr=r(nee,`Note:
Loading a model from its configuration file does `),FEe=n(nee,"STRONG",{});var H6t=s(FEe);FSr=r(H6t,"not"),H6t.forEach(t),TSr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(nee,"A",{href:!0});var U6t=s(TY);MSr=r(U6t,"from_pretrained()"),U6t.forEach(t),ESr=r(nee," to load the model weights."),nee.forEach(t),CSr=i(V0),T(Pw.$$.fragment,V0),V0.forEach(t),wSr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(P9.$$.fragment,Yl),ASr=i(Yl),TEe=n(Yl,"P",{});var J6t=s(TEe);ySr=r(J6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),J6t.forEach(t),LSr=i(Yl),vn=n(Yl,"P",{});var X0=s(vn);xSr=r(X0,"The model class to instantiate is selected based on the "),MEe=n(X0,"CODE",{});var Y6t=s(MEe);$Sr=r(Y6t,"model_type"),Y6t.forEach(t),kSr=r(X0,` property of the config object (either
passed as an argument or loaded from `),EEe=n(X0,"CODE",{});var K6t=s(EEe);SSr=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),RSr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=n(X0,"CODE",{});var Z6t=s(CEe);PSr=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),BSr=r(X0,":"),X0.forEach(t),ISr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);Bw=n(qe,"LI",{});var jBe=s(Bw);wEe=n(jBe,"STRONG",{});var e0t=s(wEe);qSr=r(e0t,"albert"),e0t.forEach(t),NSr=r(jBe," \u2014 "),MY=n(jBe,"A",{href:!0});var o0t=s(MY);jSr=r(o0t,"FlaxAlbertForSequenceClassification"),o0t.forEach(t),DSr=r(jBe," (ALBERT model)"),jBe.forEach(t),GSr=i(qe),Iw=n(qe,"LI",{});var DBe=s(Iw);AEe=n(DBe,"STRONG",{});var r0t=s(AEe);OSr=r(r0t,"bart"),r0t.forEach(t),VSr=r(DBe," \u2014 "),EY=n(DBe,"A",{href:!0});var t0t=s(EY);XSr=r(t0t,"FlaxBartForSequenceClassification"),t0t.forEach(t),zSr=r(DBe," (BART model)"),DBe.forEach(t),WSr=i(qe),qw=n(qe,"LI",{});var GBe=s(qw);yEe=n(GBe,"STRONG",{});var a0t=s(yEe);QSr=r(a0t,"bert"),a0t.forEach(t),HSr=r(GBe," \u2014 "),CY=n(GBe,"A",{href:!0});var n0t=s(CY);USr=r(n0t,"FlaxBertForSequenceClassification"),n0t.forEach(t),JSr=r(GBe," (BERT model)"),GBe.forEach(t),YSr=i(qe),Nw=n(qe,"LI",{});var OBe=s(Nw);LEe=n(OBe,"STRONG",{});var s0t=s(LEe);KSr=r(s0t,"big_bird"),s0t.forEach(t),ZSr=r(OBe," \u2014 "),wY=n(OBe,"A",{href:!0});var l0t=s(wY);eRr=r(l0t,"FlaxBigBirdForSequenceClassification"),l0t.forEach(t),oRr=r(OBe," (BigBird model)"),OBe.forEach(t),rRr=i(qe),jw=n(qe,"LI",{});var VBe=s(jw);xEe=n(VBe,"STRONG",{});var i0t=s(xEe);tRr=r(i0t,"distilbert"),i0t.forEach(t),aRr=r(VBe," \u2014 "),AY=n(VBe,"A",{href:!0});var d0t=s(AY);nRr=r(d0t,"FlaxDistilBertForSequenceClassification"),d0t.forEach(t),sRr=r(VBe," (DistilBERT model)"),VBe.forEach(t),lRr=i(qe),Dw=n(qe,"LI",{});var XBe=s(Dw);$Ee=n(XBe,"STRONG",{});var c0t=s($Ee);iRr=r(c0t,"electra"),c0t.forEach(t),dRr=r(XBe," \u2014 "),yY=n(XBe,"A",{href:!0});var m0t=s(yY);cRr=r(m0t,"FlaxElectraForSequenceClassification"),m0t.forEach(t),mRr=r(XBe," (ELECTRA model)"),XBe.forEach(t),fRr=i(qe),Gw=n(qe,"LI",{});var zBe=s(Gw);kEe=n(zBe,"STRONG",{});var f0t=s(kEe);gRr=r(f0t,"mbart"),f0t.forEach(t),hRr=r(zBe," \u2014 "),LY=n(zBe,"A",{href:!0});var g0t=s(LY);uRr=r(g0t,"FlaxMBartForSequenceClassification"),g0t.forEach(t),pRr=r(zBe," (mBART model)"),zBe.forEach(t),_Rr=i(qe),Ow=n(qe,"LI",{});var WBe=s(Ow);SEe=n(WBe,"STRONG",{});var h0t=s(SEe);bRr=r(h0t,"roberta"),h0t.forEach(t),vRr=r(WBe," \u2014 "),xY=n(WBe,"A",{href:!0});var u0t=s(xY);FRr=r(u0t,"FlaxRobertaForSequenceClassification"),u0t.forEach(t),TRr=r(WBe," (RoBERTa model)"),WBe.forEach(t),MRr=i(qe),Vw=n(qe,"LI",{});var QBe=s(Vw);REe=n(QBe,"STRONG",{});var p0t=s(REe);ERr=r(p0t,"roformer"),p0t.forEach(t),CRr=r(QBe," \u2014 "),$Y=n(QBe,"A",{href:!0});var _0t=s($Y);wRr=r(_0t,"FlaxRoFormerForSequenceClassification"),_0t.forEach(t),ARr=r(QBe," (RoFormer model)"),QBe.forEach(t),yRr=i(qe),Xw=n(qe,"LI",{});var HBe=s(Xw);PEe=n(HBe,"STRONG",{});var b0t=s(PEe);LRr=r(b0t,"xlm-roberta"),b0t.forEach(t),xRr=r(HBe," \u2014 "),kY=n(HBe,"A",{href:!0});var v0t=s(kY);$Rr=r(v0t,"FlaxXLMRobertaForSequenceClassification"),v0t.forEach(t),kRr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),qe.forEach(t),SRr=i(Yl),T(zw.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),pNe=i(m),Wc=n(m,"H2",{class:!0});var EDe=s(Wc);Ww=n(EDe,"A",{id:!0,class:!0,href:!0});var F0t=s(Ww);BEe=n(F0t,"SPAN",{});var T0t=s(BEe);T(B9.$$.fragment,T0t),T0t.forEach(t),F0t.forEach(t),RRr=i(EDe),IEe=n(EDe,"SPAN",{});var M0t=s(IEe);PRr=r(M0t,"FlaxAutoModelForQuestionAnswering"),M0t.forEach(t),EDe.forEach(t),_Ne=i(m),_r=n(m,"DIV",{class:!0});var Kl=s(_r);T(I9.$$.fragment,Kl),BRr=i(Kl),Qc=n(Kl,"P",{});var see=s(Qc);IRr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SY=n(see,"A",{href:!0});var E0t=s(SY);qRr=r(E0t,"from_pretrained()"),E0t.forEach(t),NRr=r(see," class method or the "),RY=n(see,"A",{href:!0});var C0t=s(RY);jRr=r(C0t,"from_config()"),C0t.forEach(t),DRr=r(see,` class
method.`),see.forEach(t),GRr=i(Kl),q9=n(Kl,"P",{});var CDe=s(q9);ORr=r(CDe,"This class cannot be instantiated directly using "),qEe=n(CDe,"CODE",{});var w0t=s(qEe);VRr=r(w0t,"__init__()"),w0t.forEach(t),XRr=r(CDe," (throws an error)."),CDe.forEach(t),zRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var z0=s(Qt);T(N9.$$.fragment,z0),WRr=i(z0),NEe=n(z0,"P",{});var A0t=s(NEe);QRr=r(A0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A0t.forEach(t),HRr=i(z0),Hc=n(z0,"P",{});var lee=s(Hc);URr=r(lee,`Note:
Loading a model from its configuration file does `),jEe=n(lee,"STRONG",{});var y0t=s(jEe);JRr=r(y0t,"not"),y0t.forEach(t),YRr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(lee,"A",{href:!0});var L0t=s(PY);KRr=r(L0t,"from_pretrained()"),L0t.forEach(t),ZRr=r(lee," to load the model weights."),lee.forEach(t),ePr=i(z0),T(Qw.$$.fragment,z0),z0.forEach(t),oPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(j9.$$.fragment,Zl),rPr=i(Zl),DEe=n(Zl,"P",{});var x0t=s(DEe);tPr=r(x0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x0t.forEach(t),aPr=i(Zl),Fn=n(Zl,"P",{});var W0=s(Fn);nPr=r(W0,"The model class to instantiate is selected based on the "),GEe=n(W0,"CODE",{});var $0t=s(GEe);sPr=r($0t,"model_type"),$0t.forEach(t),lPr=r(W0,` property of the config object (either
passed as an argument or loaded from `),OEe=n(W0,"CODE",{});var k0t=s(OEe);iPr=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),dPr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=n(W0,"CODE",{});var S0t=s(VEe);cPr=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),mPr=r(W0,":"),W0.forEach(t),fPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);Hw=n(Ne,"LI",{});var UBe=s(Hw);XEe=n(UBe,"STRONG",{});var R0t=s(XEe);gPr=r(R0t,"albert"),R0t.forEach(t),hPr=r(UBe," \u2014 "),BY=n(UBe,"A",{href:!0});var P0t=s(BY);uPr=r(P0t,"FlaxAlbertForQuestionAnswering"),P0t.forEach(t),pPr=r(UBe," (ALBERT model)"),UBe.forEach(t),_Pr=i(Ne),Uw=n(Ne,"LI",{});var JBe=s(Uw);zEe=n(JBe,"STRONG",{});var B0t=s(zEe);bPr=r(B0t,"bart"),B0t.forEach(t),vPr=r(JBe," \u2014 "),IY=n(JBe,"A",{href:!0});var I0t=s(IY);FPr=r(I0t,"FlaxBartForQuestionAnswering"),I0t.forEach(t),TPr=r(JBe," (BART model)"),JBe.forEach(t),MPr=i(Ne),Jw=n(Ne,"LI",{});var YBe=s(Jw);WEe=n(YBe,"STRONG",{});var q0t=s(WEe);EPr=r(q0t,"bert"),q0t.forEach(t),CPr=r(YBe," \u2014 "),qY=n(YBe,"A",{href:!0});var N0t=s(qY);wPr=r(N0t,"FlaxBertForQuestionAnswering"),N0t.forEach(t),APr=r(YBe," (BERT model)"),YBe.forEach(t),yPr=i(Ne),Yw=n(Ne,"LI",{});var KBe=s(Yw);QEe=n(KBe,"STRONG",{});var j0t=s(QEe);LPr=r(j0t,"big_bird"),j0t.forEach(t),xPr=r(KBe," \u2014 "),NY=n(KBe,"A",{href:!0});var D0t=s(NY);$Pr=r(D0t,"FlaxBigBirdForQuestionAnswering"),D0t.forEach(t),kPr=r(KBe," (BigBird model)"),KBe.forEach(t),SPr=i(Ne),Kw=n(Ne,"LI",{});var ZBe=s(Kw);HEe=n(ZBe,"STRONG",{});var G0t=s(HEe);RPr=r(G0t,"distilbert"),G0t.forEach(t),PPr=r(ZBe," \u2014 "),jY=n(ZBe,"A",{href:!0});var O0t=s(jY);BPr=r(O0t,"FlaxDistilBertForQuestionAnswering"),O0t.forEach(t),IPr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),qPr=i(Ne),Zw=n(Ne,"LI",{});var eIe=s(Zw);UEe=n(eIe,"STRONG",{});var V0t=s(UEe);NPr=r(V0t,"electra"),V0t.forEach(t),jPr=r(eIe," \u2014 "),DY=n(eIe,"A",{href:!0});var X0t=s(DY);DPr=r(X0t,"FlaxElectraForQuestionAnswering"),X0t.forEach(t),GPr=r(eIe," (ELECTRA model)"),eIe.forEach(t),OPr=i(Ne),eA=n(Ne,"LI",{});var oIe=s(eA);JEe=n(oIe,"STRONG",{});var z0t=s(JEe);VPr=r(z0t,"mbart"),z0t.forEach(t),XPr=r(oIe," \u2014 "),GY=n(oIe,"A",{href:!0});var W0t=s(GY);zPr=r(W0t,"FlaxMBartForQuestionAnswering"),W0t.forEach(t),WPr=r(oIe," (mBART model)"),oIe.forEach(t),QPr=i(Ne),oA=n(Ne,"LI",{});var rIe=s(oA);YEe=n(rIe,"STRONG",{});var Q0t=s(YEe);HPr=r(Q0t,"roberta"),Q0t.forEach(t),UPr=r(rIe," \u2014 "),OY=n(rIe,"A",{href:!0});var H0t=s(OY);JPr=r(H0t,"FlaxRobertaForQuestionAnswering"),H0t.forEach(t),YPr=r(rIe," (RoBERTa model)"),rIe.forEach(t),KPr=i(Ne),rA=n(Ne,"LI",{});var tIe=s(rA);KEe=n(tIe,"STRONG",{});var U0t=s(KEe);ZPr=r(U0t,"roformer"),U0t.forEach(t),eBr=r(tIe," \u2014 "),VY=n(tIe,"A",{href:!0});var J0t=s(VY);oBr=r(J0t,"FlaxRoFormerForQuestionAnswering"),J0t.forEach(t),rBr=r(tIe," (RoFormer model)"),tIe.forEach(t),tBr=i(Ne),tA=n(Ne,"LI",{});var aIe=s(tA);ZEe=n(aIe,"STRONG",{});var Y0t=s(ZEe);aBr=r(Y0t,"xlm-roberta"),Y0t.forEach(t),nBr=r(aIe," \u2014 "),XY=n(aIe,"A",{href:!0});var K0t=s(XY);sBr=r(K0t,"FlaxXLMRobertaForQuestionAnswering"),K0t.forEach(t),lBr=r(aIe," (XLM-RoBERTa model)"),aIe.forEach(t),Ne.forEach(t),iBr=i(Zl),T(aA.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),bNe=i(m),Uc=n(m,"H2",{class:!0});var wDe=s(Uc);nA=n(wDe,"A",{id:!0,class:!0,href:!0});var Z0t=s(nA);eCe=n(Z0t,"SPAN",{});var eyt=s(eCe);T(D9.$$.fragment,eyt),eyt.forEach(t),Z0t.forEach(t),dBr=i(wDe),oCe=n(wDe,"SPAN",{});var oyt=s(oCe);cBr=r(oyt,"FlaxAutoModelForTokenClassification"),oyt.forEach(t),wDe.forEach(t),vNe=i(m),br=n(m,"DIV",{class:!0});var ei=s(br);T(G9.$$.fragment,ei),mBr=i(ei),Jc=n(ei,"P",{});var iee=s(Jc);fBr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zY=n(iee,"A",{href:!0});var ryt=s(zY);gBr=r(ryt,"from_pretrained()"),ryt.forEach(t),hBr=r(iee," class method or the "),WY=n(iee,"A",{href:!0});var tyt=s(WY);uBr=r(tyt,"from_config()"),tyt.forEach(t),pBr=r(iee,` class
method.`),iee.forEach(t),_Br=i(ei),O9=n(ei,"P",{});var ADe=s(O9);bBr=r(ADe,"This class cannot be instantiated directly using "),rCe=n(ADe,"CODE",{});var ayt=s(rCe);vBr=r(ayt,"__init__()"),ayt.forEach(t),FBr=r(ADe," (throws an error)."),ADe.forEach(t),TBr=i(ei),Ht=n(ei,"DIV",{class:!0});var Q0=s(Ht);T(V9.$$.fragment,Q0),MBr=i(Q0),tCe=n(Q0,"P",{});var nyt=s(tCe);EBr=r(nyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nyt.forEach(t),CBr=i(Q0),Yc=n(Q0,"P",{});var dee=s(Yc);wBr=r(dee,`Note:
Loading a model from its configuration file does `),aCe=n(dee,"STRONG",{});var syt=s(aCe);ABr=r(syt,"not"),syt.forEach(t),yBr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(dee,"A",{href:!0});var lyt=s(QY);LBr=r(lyt,"from_pretrained()"),lyt.forEach(t),xBr=r(dee," to load the model weights."),dee.forEach(t),$Br=i(Q0),T(sA.$$.fragment,Q0),Q0.forEach(t),kBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(X9.$$.fragment,oi),SBr=i(oi),nCe=n(oi,"P",{});var iyt=s(nCe);RBr=r(iyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iyt.forEach(t),PBr=i(oi),Tn=n(oi,"P",{});var H0=s(Tn);BBr=r(H0,"The model class to instantiate is selected based on the "),sCe=n(H0,"CODE",{});var dyt=s(sCe);IBr=r(dyt,"model_type"),dyt.forEach(t),qBr=r(H0,` property of the config object (either
passed as an argument or loaded from `),lCe=n(H0,"CODE",{});var cyt=s(lCe);NBr=r(cyt,"pretrained_model_name_or_path"),cyt.forEach(t),jBr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=n(H0,"CODE",{});var myt=s(iCe);DBr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),GBr=r(H0,":"),H0.forEach(t),OBr=i(oi),De=n(oi,"UL",{});var Fo=s(De);lA=n(Fo,"LI",{});var nIe=s(lA);dCe=n(nIe,"STRONG",{});var fyt=s(dCe);VBr=r(fyt,"albert"),fyt.forEach(t),XBr=r(nIe," \u2014 "),HY=n(nIe,"A",{href:!0});var gyt=s(HY);zBr=r(gyt,"FlaxAlbertForTokenClassification"),gyt.forEach(t),WBr=r(nIe," (ALBERT model)"),nIe.forEach(t),QBr=i(Fo),iA=n(Fo,"LI",{});var sIe=s(iA);cCe=n(sIe,"STRONG",{});var hyt=s(cCe);HBr=r(hyt,"bert"),hyt.forEach(t),UBr=r(sIe," \u2014 "),UY=n(sIe,"A",{href:!0});var uyt=s(UY);JBr=r(uyt,"FlaxBertForTokenClassification"),uyt.forEach(t),YBr=r(sIe," (BERT model)"),sIe.forEach(t),KBr=i(Fo),dA=n(Fo,"LI",{});var lIe=s(dA);mCe=n(lIe,"STRONG",{});var pyt=s(mCe);ZBr=r(pyt,"big_bird"),pyt.forEach(t),eIr=r(lIe," \u2014 "),JY=n(lIe,"A",{href:!0});var _yt=s(JY);oIr=r(_yt,"FlaxBigBirdForTokenClassification"),_yt.forEach(t),rIr=r(lIe," (BigBird model)"),lIe.forEach(t),tIr=i(Fo),cA=n(Fo,"LI",{});var iIe=s(cA);fCe=n(iIe,"STRONG",{});var byt=s(fCe);aIr=r(byt,"distilbert"),byt.forEach(t),nIr=r(iIe," \u2014 "),YY=n(iIe,"A",{href:!0});var vyt=s(YY);sIr=r(vyt,"FlaxDistilBertForTokenClassification"),vyt.forEach(t),lIr=r(iIe," (DistilBERT model)"),iIe.forEach(t),iIr=i(Fo),mA=n(Fo,"LI",{});var dIe=s(mA);gCe=n(dIe,"STRONG",{});var Fyt=s(gCe);dIr=r(Fyt,"electra"),Fyt.forEach(t),cIr=r(dIe," \u2014 "),KY=n(dIe,"A",{href:!0});var Tyt=s(KY);mIr=r(Tyt,"FlaxElectraForTokenClassification"),Tyt.forEach(t),fIr=r(dIe," (ELECTRA model)"),dIe.forEach(t),gIr=i(Fo),fA=n(Fo,"LI",{});var cIe=s(fA);hCe=n(cIe,"STRONG",{});var Myt=s(hCe);hIr=r(Myt,"roberta"),Myt.forEach(t),uIr=r(cIe," \u2014 "),ZY=n(cIe,"A",{href:!0});var Eyt=s(ZY);pIr=r(Eyt,"FlaxRobertaForTokenClassification"),Eyt.forEach(t),_Ir=r(cIe," (RoBERTa model)"),cIe.forEach(t),bIr=i(Fo),gA=n(Fo,"LI",{});var mIe=s(gA);uCe=n(mIe,"STRONG",{});var Cyt=s(uCe);vIr=r(Cyt,"roformer"),Cyt.forEach(t),FIr=r(mIe," \u2014 "),eK=n(mIe,"A",{href:!0});var wyt=s(eK);TIr=r(wyt,"FlaxRoFormerForTokenClassification"),wyt.forEach(t),MIr=r(mIe," (RoFormer model)"),mIe.forEach(t),EIr=i(Fo),hA=n(Fo,"LI",{});var fIe=s(hA);pCe=n(fIe,"STRONG",{});var Ayt=s(pCe);CIr=r(Ayt,"xlm-roberta"),Ayt.forEach(t),wIr=r(fIe," \u2014 "),oK=n(fIe,"A",{href:!0});var yyt=s(oK);AIr=r(yyt,"FlaxXLMRobertaForTokenClassification"),yyt.forEach(t),yIr=r(fIe," (XLM-RoBERTa model)"),fIe.forEach(t),Fo.forEach(t),LIr=i(oi),T(uA.$$.fragment,oi),oi.forEach(t),ei.forEach(t),FNe=i(m),Kc=n(m,"H2",{class:!0});var yDe=s(Kc);pA=n(yDe,"A",{id:!0,class:!0,href:!0});var Lyt=s(pA);_Ce=n(Lyt,"SPAN",{});var xyt=s(_Ce);T(z9.$$.fragment,xyt),xyt.forEach(t),Lyt.forEach(t),xIr=i(yDe),bCe=n(yDe,"SPAN",{});var $yt=s(bCe);$Ir=r($yt,"FlaxAutoModelForMultipleChoice"),$yt.forEach(t),yDe.forEach(t),TNe=i(m),vr=n(m,"DIV",{class:!0});var ri=s(vr);T(W9.$$.fragment,ri),kIr=i(ri),Zc=n(ri,"P",{});var cee=s(Zc);SIr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rK=n(cee,"A",{href:!0});var kyt=s(rK);RIr=r(kyt,"from_pretrained()"),kyt.forEach(t),PIr=r(cee," class method or the "),tK=n(cee,"A",{href:!0});var Syt=s(tK);BIr=r(Syt,"from_config()"),Syt.forEach(t),IIr=r(cee,` class
method.`),cee.forEach(t),qIr=i(ri),Q9=n(ri,"P",{});var LDe=s(Q9);NIr=r(LDe,"This class cannot be instantiated directly using "),vCe=n(LDe,"CODE",{});var Ryt=s(vCe);jIr=r(Ryt,"__init__()"),Ryt.forEach(t),DIr=r(LDe," (throws an error)."),LDe.forEach(t),GIr=i(ri),Ut=n(ri,"DIV",{class:!0});var U0=s(Ut);T(H9.$$.fragment,U0),OIr=i(U0),FCe=n(U0,"P",{});var Pyt=s(FCe);VIr=r(Pyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pyt.forEach(t),XIr=i(U0),em=n(U0,"P",{});var mee=s(em);zIr=r(mee,`Note:
Loading a model from its configuration file does `),TCe=n(mee,"STRONG",{});var Byt=s(TCe);WIr=r(Byt,"not"),Byt.forEach(t),QIr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(mee,"A",{href:!0});var Iyt=s(aK);HIr=r(Iyt,"from_pretrained()"),Iyt.forEach(t),UIr=r(mee," to load the model weights."),mee.forEach(t),JIr=i(U0),T(_A.$$.fragment,U0),U0.forEach(t),YIr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(U9.$$.fragment,ti),KIr=i(ti),MCe=n(ti,"P",{});var qyt=s(MCe);ZIr=r(qyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qyt.forEach(t),eqr=i(ti),Mn=n(ti,"P",{});var J0=s(Mn);oqr=r(J0,"The model class to instantiate is selected based on the "),ECe=n(J0,"CODE",{});var Nyt=s(ECe);rqr=r(Nyt,"model_type"),Nyt.forEach(t),tqr=r(J0,` property of the config object (either
passed as an argument or loaded from `),CCe=n(J0,"CODE",{});var jyt=s(CCe);aqr=r(jyt,"pretrained_model_name_or_path"),jyt.forEach(t),nqr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(J0,"CODE",{});var Dyt=s(wCe);sqr=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),lqr=r(J0,":"),J0.forEach(t),iqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);bA=n(To,"LI",{});var gIe=s(bA);ACe=n(gIe,"STRONG",{});var Gyt=s(ACe);dqr=r(Gyt,"albert"),Gyt.forEach(t),cqr=r(gIe," \u2014 "),nK=n(gIe,"A",{href:!0});var Oyt=s(nK);mqr=r(Oyt,"FlaxAlbertForMultipleChoice"),Oyt.forEach(t),fqr=r(gIe," (ALBERT model)"),gIe.forEach(t),gqr=i(To),vA=n(To,"LI",{});var hIe=s(vA);yCe=n(hIe,"STRONG",{});var Vyt=s(yCe);hqr=r(Vyt,"bert"),Vyt.forEach(t),uqr=r(hIe," \u2014 "),sK=n(hIe,"A",{href:!0});var Xyt=s(sK);pqr=r(Xyt,"FlaxBertForMultipleChoice"),Xyt.forEach(t),_qr=r(hIe," (BERT model)"),hIe.forEach(t),bqr=i(To),FA=n(To,"LI",{});var uIe=s(FA);LCe=n(uIe,"STRONG",{});var zyt=s(LCe);vqr=r(zyt,"big_bird"),zyt.forEach(t),Fqr=r(uIe," \u2014 "),lK=n(uIe,"A",{href:!0});var Wyt=s(lK);Tqr=r(Wyt,"FlaxBigBirdForMultipleChoice"),Wyt.forEach(t),Mqr=r(uIe," (BigBird model)"),uIe.forEach(t),Eqr=i(To),TA=n(To,"LI",{});var pIe=s(TA);xCe=n(pIe,"STRONG",{});var Qyt=s(xCe);Cqr=r(Qyt,"distilbert"),Qyt.forEach(t),wqr=r(pIe," \u2014 "),iK=n(pIe,"A",{href:!0});var Hyt=s(iK);Aqr=r(Hyt,"FlaxDistilBertForMultipleChoice"),Hyt.forEach(t),yqr=r(pIe," (DistilBERT model)"),pIe.forEach(t),Lqr=i(To),MA=n(To,"LI",{});var _Ie=s(MA);$Ce=n(_Ie,"STRONG",{});var Uyt=s($Ce);xqr=r(Uyt,"electra"),Uyt.forEach(t),$qr=r(_Ie," \u2014 "),dK=n(_Ie,"A",{href:!0});var Jyt=s(dK);kqr=r(Jyt,"FlaxElectraForMultipleChoice"),Jyt.forEach(t),Sqr=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),Rqr=i(To),EA=n(To,"LI",{});var bIe=s(EA);kCe=n(bIe,"STRONG",{});var Yyt=s(kCe);Pqr=r(Yyt,"roberta"),Yyt.forEach(t),Bqr=r(bIe," \u2014 "),cK=n(bIe,"A",{href:!0});var Kyt=s(cK);Iqr=r(Kyt,"FlaxRobertaForMultipleChoice"),Kyt.forEach(t),qqr=r(bIe," (RoBERTa model)"),bIe.forEach(t),Nqr=i(To),CA=n(To,"LI",{});var vIe=s(CA);SCe=n(vIe,"STRONG",{});var Zyt=s(SCe);jqr=r(Zyt,"roformer"),Zyt.forEach(t),Dqr=r(vIe," \u2014 "),mK=n(vIe,"A",{href:!0});var eLt=s(mK);Gqr=r(eLt,"FlaxRoFormerForMultipleChoice"),eLt.forEach(t),Oqr=r(vIe," (RoFormer model)"),vIe.forEach(t),Vqr=i(To),wA=n(To,"LI",{});var FIe=s(wA);RCe=n(FIe,"STRONG",{});var oLt=s(RCe);Xqr=r(oLt,"xlm-roberta"),oLt.forEach(t),zqr=r(FIe," \u2014 "),fK=n(FIe,"A",{href:!0});var rLt=s(fK);Wqr=r(rLt,"FlaxXLMRobertaForMultipleChoice"),rLt.forEach(t),Qqr=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),To.forEach(t),Hqr=i(ti),T(AA.$$.fragment,ti),ti.forEach(t),ri.forEach(t),MNe=i(m),om=n(m,"H2",{class:!0});var xDe=s(om);yA=n(xDe,"A",{id:!0,class:!0,href:!0});var tLt=s(yA);PCe=n(tLt,"SPAN",{});var aLt=s(PCe);T(J9.$$.fragment,aLt),aLt.forEach(t),tLt.forEach(t),Uqr=i(xDe),BCe=n(xDe,"SPAN",{});var nLt=s(BCe);Jqr=r(nLt,"FlaxAutoModelForNextSentencePrediction"),nLt.forEach(t),xDe.forEach(t),ENe=i(m),Fr=n(m,"DIV",{class:!0});var ai=s(Fr);T(Y9.$$.fragment,ai),Yqr=i(ai),rm=n(ai,"P",{});var fee=s(rm);Kqr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gK=n(fee,"A",{href:!0});var sLt=s(gK);Zqr=r(sLt,"from_pretrained()"),sLt.forEach(t),eNr=r(fee," class method or the "),hK=n(fee,"A",{href:!0});var lLt=s(hK);oNr=r(lLt,"from_config()"),lLt.forEach(t),rNr=r(fee,` class
method.`),fee.forEach(t),tNr=i(ai),K9=n(ai,"P",{});var $De=s(K9);aNr=r($De,"This class cannot be instantiated directly using "),ICe=n($De,"CODE",{});var iLt=s(ICe);nNr=r(iLt,"__init__()"),iLt.forEach(t),sNr=r($De," (throws an error)."),$De.forEach(t),lNr=i(ai),Jt=n(ai,"DIV",{class:!0});var Y0=s(Jt);T(Z9.$$.fragment,Y0),iNr=i(Y0),qCe=n(Y0,"P",{});var dLt=s(qCe);dNr=r(dLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dLt.forEach(t),cNr=i(Y0),tm=n(Y0,"P",{});var gee=s(tm);mNr=r(gee,`Note:
Loading a model from its configuration file does `),NCe=n(gee,"STRONG",{});var cLt=s(NCe);fNr=r(cLt,"not"),cLt.forEach(t),gNr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(gee,"A",{href:!0});var mLt=s(uK);hNr=r(mLt,"from_pretrained()"),mLt.forEach(t),uNr=r(gee," to load the model weights."),gee.forEach(t),pNr=i(Y0),T(LA.$$.fragment,Y0),Y0.forEach(t),_Nr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(e7.$$.fragment,ni),bNr=i(ni),jCe=n(ni,"P",{});var fLt=s(jCe);vNr=r(fLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fLt.forEach(t),FNr=i(ni),En=n(ni,"P",{});var K0=s(En);TNr=r(K0,"The model class to instantiate is selected based on the "),DCe=n(K0,"CODE",{});var gLt=s(DCe);MNr=r(gLt,"model_type"),gLt.forEach(t),ENr=r(K0,` property of the config object (either
passed as an argument or loaded from `),GCe=n(K0,"CODE",{});var hLt=s(GCe);CNr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),wNr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(K0,"CODE",{});var uLt=s(OCe);ANr=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),yNr=r(K0,":"),K0.forEach(t),LNr=i(ni),VCe=n(ni,"UL",{});var pLt=s(VCe);xA=n(pLt,"LI",{});var TIe=s(xA);XCe=n(TIe,"STRONG",{});var _Lt=s(XCe);xNr=r(_Lt,"bert"),_Lt.forEach(t),$Nr=r(TIe," \u2014 "),pK=n(TIe,"A",{href:!0});var bLt=s(pK);kNr=r(bLt,"FlaxBertForNextSentencePrediction"),bLt.forEach(t),SNr=r(TIe," (BERT model)"),TIe.forEach(t),pLt.forEach(t),RNr=i(ni),T($A.$$.fragment,ni),ni.forEach(t),ai.forEach(t),CNe=i(m),am=n(m,"H2",{class:!0});var kDe=s(am);kA=n(kDe,"A",{id:!0,class:!0,href:!0});var vLt=s(kA);zCe=n(vLt,"SPAN",{});var FLt=s(zCe);T(o7.$$.fragment,FLt),FLt.forEach(t),vLt.forEach(t),PNr=i(kDe),WCe=n(kDe,"SPAN",{});var TLt=s(WCe);BNr=r(TLt,"FlaxAutoModelForImageClassification"),TLt.forEach(t),kDe.forEach(t),wNe=i(m),Tr=n(m,"DIV",{class:!0});var si=s(Tr);T(r7.$$.fragment,si),INr=i(si),nm=n(si,"P",{});var hee=s(nm);qNr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_K=n(hee,"A",{href:!0});var MLt=s(_K);NNr=r(MLt,"from_pretrained()"),MLt.forEach(t),jNr=r(hee," class method or the "),bK=n(hee,"A",{href:!0});var ELt=s(bK);DNr=r(ELt,"from_config()"),ELt.forEach(t),GNr=r(hee,` class
method.`),hee.forEach(t),ONr=i(si),t7=n(si,"P",{});var SDe=s(t7);VNr=r(SDe,"This class cannot be instantiated directly using "),QCe=n(SDe,"CODE",{});var CLt=s(QCe);XNr=r(CLt,"__init__()"),CLt.forEach(t),zNr=r(SDe," (throws an error)."),SDe.forEach(t),WNr=i(si),Yt=n(si,"DIV",{class:!0});var Z0=s(Yt);T(a7.$$.fragment,Z0),QNr=i(Z0),HCe=n(Z0,"P",{});var wLt=s(HCe);HNr=r(wLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wLt.forEach(t),UNr=i(Z0),sm=n(Z0,"P",{});var uee=s(sm);JNr=r(uee,`Note:
Loading a model from its configuration file does `),UCe=n(uee,"STRONG",{});var ALt=s(UCe);YNr=r(ALt,"not"),ALt.forEach(t),KNr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(uee,"A",{href:!0});var yLt=s(vK);ZNr=r(yLt,"from_pretrained()"),yLt.forEach(t),ejr=r(uee," to load the model weights."),uee.forEach(t),ojr=i(Z0),T(SA.$$.fragment,Z0),Z0.forEach(t),rjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(n7.$$.fragment,li),tjr=i(li),JCe=n(li,"P",{});var LLt=s(JCe);ajr=r(LLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LLt.forEach(t),njr=i(li),Cn=n(li,"P",{});var ey=s(Cn);sjr=r(ey,"The model class to instantiate is selected based on the "),YCe=n(ey,"CODE",{});var xLt=s(YCe);ljr=r(xLt,"model_type"),xLt.forEach(t),ijr=r(ey,` property of the config object (either
passed as an argument or loaded from `),KCe=n(ey,"CODE",{});var $Lt=s(KCe);djr=r($Lt,"pretrained_model_name_or_path"),$Lt.forEach(t),cjr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(ey,"CODE",{});var kLt=s(ZCe);mjr=r(kLt,"pretrained_model_name_or_path"),kLt.forEach(t),fjr=r(ey,":"),ey.forEach(t),gjr=i(li),s7=n(li,"UL",{});var RDe=s(s7);RA=n(RDe,"LI",{});var MIe=s(RA);e5e=n(MIe,"STRONG",{});var SLt=s(e5e);hjr=r(SLt,"beit"),SLt.forEach(t),ujr=r(MIe," \u2014 "),FK=n(MIe,"A",{href:!0});var RLt=s(FK);pjr=r(RLt,"FlaxBeitForImageClassification"),RLt.forEach(t),_jr=r(MIe," (BEiT model)"),MIe.forEach(t),bjr=i(RDe),PA=n(RDe,"LI",{});var EIe=s(PA);o5e=n(EIe,"STRONG",{});var PLt=s(o5e);vjr=r(PLt,"vit"),PLt.forEach(t),Fjr=r(EIe," \u2014 "),TK=n(EIe,"A",{href:!0});var BLt=s(TK);Tjr=r(BLt,"FlaxViTForImageClassification"),BLt.forEach(t),Mjr=r(EIe," (ViT model)"),EIe.forEach(t),RDe.forEach(t),Ejr=i(li),T(BA.$$.fragment,li),li.forEach(t),si.forEach(t),ANe=i(m),lm=n(m,"H2",{class:!0});var PDe=s(lm);IA=n(PDe,"A",{id:!0,class:!0,href:!0});var ILt=s(IA);r5e=n(ILt,"SPAN",{});var qLt=s(r5e);T(l7.$$.fragment,qLt),qLt.forEach(t),ILt.forEach(t),Cjr=i(PDe),t5e=n(PDe,"SPAN",{});var NLt=s(t5e);wjr=r(NLt,"FlaxAutoModelForVision2Seq"),NLt.forEach(t),PDe.forEach(t),yNe=i(m),Mr=n(m,"DIV",{class:!0});var ii=s(Mr);T(i7.$$.fragment,ii),Ajr=i(ii),im=n(ii,"P",{});var pee=s(im);yjr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MK=n(pee,"A",{href:!0});var jLt=s(MK);Ljr=r(jLt,"from_pretrained()"),jLt.forEach(t),xjr=r(pee," class method or the "),EK=n(pee,"A",{href:!0});var DLt=s(EK);$jr=r(DLt,"from_config()"),DLt.forEach(t),kjr=r(pee,` class
method.`),pee.forEach(t),Sjr=i(ii),d7=n(ii,"P",{});var BDe=s(d7);Rjr=r(BDe,"This class cannot be instantiated directly using "),a5e=n(BDe,"CODE",{});var GLt=s(a5e);Pjr=r(GLt,"__init__()"),GLt.forEach(t),Bjr=r(BDe," (throws an error)."),BDe.forEach(t),Ijr=i(ii),Kt=n(ii,"DIV",{class:!0});var oy=s(Kt);T(c7.$$.fragment,oy),qjr=i(oy),n5e=n(oy,"P",{});var OLt=s(n5e);Njr=r(OLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OLt.forEach(t),jjr=i(oy),dm=n(oy,"P",{});var _ee=s(dm);Djr=r(_ee,`Note:
Loading a model from its configuration file does `),s5e=n(_ee,"STRONG",{});var VLt=s(s5e);Gjr=r(VLt,"not"),VLt.forEach(t),Ojr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(_ee,"A",{href:!0});var XLt=s(CK);Vjr=r(XLt,"from_pretrained()"),XLt.forEach(t),Xjr=r(_ee," to load the model weights."),_ee.forEach(t),zjr=i(oy),T(qA.$$.fragment,oy),oy.forEach(t),Wjr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(m7.$$.fragment,di),Qjr=i(di),l5e=n(di,"P",{});var zLt=s(l5e);Hjr=r(zLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zLt.forEach(t),Ujr=i(di),wn=n(di,"P",{});var ry=s(wn);Jjr=r(ry,"The model class to instantiate is selected based on the "),i5e=n(ry,"CODE",{});var WLt=s(i5e);Yjr=r(WLt,"model_type"),WLt.forEach(t),Kjr=r(ry,` property of the config object (either
passed as an argument or loaded from `),d5e=n(ry,"CODE",{});var QLt=s(d5e);Zjr=r(QLt,"pretrained_model_name_or_path"),QLt.forEach(t),eDr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(ry,"CODE",{});var HLt=s(c5e);oDr=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),rDr=r(ry,":"),ry.forEach(t),tDr=i(di),m5e=n(di,"UL",{});var ULt=s(m5e);NA=n(ULt,"LI",{});var CIe=s(NA);f5e=n(CIe,"STRONG",{});var JLt=s(f5e);aDr=r(JLt,"vision-encoder-decoder"),JLt.forEach(t),nDr=r(CIe," \u2014 "),wK=n(CIe,"A",{href:!0});var YLt=s(wK);sDr=r(YLt,"FlaxVisionEncoderDecoderModel"),YLt.forEach(t),lDr=r(CIe," (Vision Encoder decoder model)"),CIe.forEach(t),ULt.forEach(t),iDr=i(di),T(jA.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(o9t)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(pi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(_m,"id","extending-the-auto-classes"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#extending-the-auto-classes"),c(_i,"class","relative group"),c(vm,"id","transformers.AutoConfig"),c(vm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vm,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c($$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(k$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(S$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(P$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Y$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(fk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(vk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ck,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c($k,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(kk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(oS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(nS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"id","transformers.AutoTokenizer"),c(Fg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(LS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c($S,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(SS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(RS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(PS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(BS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(IS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(qS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(NS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(DS,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(GS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(OS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(VS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(WS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(QS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(HS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(US,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(YS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(KS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(oR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(rR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(aR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(mR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_R,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(FR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ER,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(kR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(NR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(QR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(YR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(eP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(oP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(rP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(tP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(aP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(nP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(sP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(lP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(iP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(dP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(mP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(fP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(pP,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(bP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(vP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(TP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(MP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(CP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(wP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(AP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(yP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(LP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(xP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c($P,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(RP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(PP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(NP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(DP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(OP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(VP,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(QP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(KP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoFeatureExtractor"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(iB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(dB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(mB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(uB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(pB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(_B,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(bB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(vB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(TB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(MB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(EB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(CB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(LB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoProcessor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(BB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(IB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(qB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(NB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(jB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(OB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(VB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(XB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(QB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(HB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"id","transformers.AutoModel"),c(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(YB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(oI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(rI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(tI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(aI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(nI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(sI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(lI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(iI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(dI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(cI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(mI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(fI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(gI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(hI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(uI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(pI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(_I,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(bI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(vI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(FI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(TI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(MI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(EI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(CI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(wI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(AI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(yI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(LI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(xI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c($I,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(kI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(SI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(RI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(PI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(BI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(II,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(qI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(NI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(jI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(DI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(GI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(OI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(VI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(XI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(zI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(WI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(QI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(HI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(UI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(JI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(YI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(KI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(eq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(oq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(rq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(tq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(aq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(nq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(sq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(cq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(mq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(fq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(gq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(hq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(uq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(pq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(_q,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(bq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(vq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Cq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(wq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(yq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(xq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c($q,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(kq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Bq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(qq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(jq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"id","transformers.AutoModelForPreTraining"),c(Vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vp,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(zq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Uq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Jq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Yq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Kq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Zq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(nN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(lN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(uN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(pN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_N,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(FN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(TN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(EN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(AN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(yN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(LN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($N,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P_,"id","transformers.AutoModelForCausalLM"),c(P_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P_,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(BN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(jN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(DN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(ON,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(WN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(QN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(HN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(UN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(JN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(YN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(KN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(ZN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(ej,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(oj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(tj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(aj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(nj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(sj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(lj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ij,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(dj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(cj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(mj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(fj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(hj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(uj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_j,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(bj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(vj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fb,"id","transformers.AutoModelForMaskedLM"),c(Fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fb,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Fj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ej,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(Aj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(yj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(xj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c($j,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(kj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(qj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Nj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Gj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Vj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Xj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(zj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Wj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Qj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Hj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Uj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Jj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Yj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n2,"id","transformers.AutoModelForSeq2SeqLM"),c(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(tD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(iD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(dD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(cD,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(mD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(gD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(hD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(uD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(_D,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(bD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(vD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(FD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForSequenceClassification"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(MD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ED,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(AD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(yD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(LD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(xD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c($D,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(kD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(SD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(RD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(PD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(BD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ID,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(qD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ND,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(DD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(GD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(OD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(VD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(XD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(zD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(WD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(QD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(HD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(UD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(JD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(YD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(KD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(ZD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(eG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(oG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(rG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(tG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(aG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(nG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(sG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(lG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(iG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(dG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForMultipleChoice"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(_G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(TG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(MG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(EG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(CG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(wG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(AG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(yG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(LG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(xG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c($G,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(kG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(SG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(RG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(PG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(BG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(IG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(qG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(jG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(DG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(GG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(OG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(VG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(XG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(zG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(WG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(QG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(HG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForNextSentencePrediction"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(UG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(ZG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(eO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(oO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(rO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForTokenClassification"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(lO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(iO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(dO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(cO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(mO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(gO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(hO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(uO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_O,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(bO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(vO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(TO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(MO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(EO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(CO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($O,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForQuestionAnswering"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(jO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(cV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(fV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(gV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(hV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(uV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_V,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B1,"id","transformers.AutoModelForTableQuestionAnswering"),c(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(yV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D1,"id","transformers.AutoModelForImageClassification"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(BV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(NV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(GV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(OV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(VV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(XV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForVision2Seq"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(JV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForAudioClassification"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForAudioFrameClassification"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForAudioFrameClassification"),c(fd,"class","relative group"),c(fX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForCTC"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(FX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(CX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(wX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(AX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(xX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c($X,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(kX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(SX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(IX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForAudioXVector"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(OX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(XX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForMaskedImageModeling"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(UX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(JX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.AutoModelForObjectDetection"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(oz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.AutoModelForImageSegmentation"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.AutoModelForSemanticSegmentation"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(cz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(mz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(fz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LM,"id","transformers.AutoModelForInstanceSegmentation"),c(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LM,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModel"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(_z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(Az,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(yz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(xz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c($z,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Rz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Bz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(qz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(jz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Dz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(Oz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(zz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Wz,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Uz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Jz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(Yz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Zz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(eW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(oW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(tW,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(aW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(nW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(sW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(lW,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(iW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(dW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(cW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(mW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(fW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForPreTraining"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(gW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(_W,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(vW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(EW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(wW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(LW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(xW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($W,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(RW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(IW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(NW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.TFAutoModelForCausalLM"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(VW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(XW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(QW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(UW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(JW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(YW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(KW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForImageClassification"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(eQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(aQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(nQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(sQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.TFAutoModelForMaskedLM"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(lQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(BQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(IQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(NQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(jQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(DQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(GQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(OQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForSequenceClassification"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.TFAutoModelForMultipleChoice"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(MH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(EH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(CH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(AH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c($H,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(SH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(RH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(BH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(IH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(OH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.TFAutoModelForTokenClassification"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.TFAutoModelForQuestionAnswering"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(FU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(TU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(MU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(EU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(CU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(wU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(AU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(LU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(xU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c($U,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(kU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(SU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(RU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(PU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(BU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(IU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(NU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.TFAutoModelForVision2Seq"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(jU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.FlaxAutoModel"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(QU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(YU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(KU,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(oJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(tJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(aJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(nJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(sJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(lJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(iJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(dJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(cJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(fJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(gJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(hJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(uJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(pJ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(_J,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(bJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(vJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(FJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.FlaxAutoModelForCausalLM"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(wJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(AJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(LJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(xJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($J,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(kJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(SJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.FlaxAutoModelForPreTraining"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(qJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(DJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(GJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(XJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(zJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(WJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(QJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForMaskedLM"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(KJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(eY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(oY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(rY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(tY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(nY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(sY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(fY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(gY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(hY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(uY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(pY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_Y,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(bY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(IY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(qY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(NY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(jY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(DY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(GY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(OY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(VY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(XY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.FlaxAutoModelForTokenClassification"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(zY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(UY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(JY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(YY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(KY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ZY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(pA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(sK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(lK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(iK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(dK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(cK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(mK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(fK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(yA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(om,"class","relative group"),c(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kA,"id","transformers.FlaxAutoModelForImageClassification"),c(kA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kA,"href","#transformers.FlaxAutoModelForImageClassification"),c(am,"class","relative group"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IA,"id","transformers.FlaxAutoModelForVision2Seq"),c(IA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lm,"class","relative group"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,ci),b(m,gm,_),b(m,rt,_),e(rt,mi),e(rt,fi),e(fi,ty),e(rt,hm),b(m,je,_),b(m,We,_),e(We,gi),e(We,yn),e(yn,ay),e(We,Ln),e(We,xn),e(xn,ny),e(We,hi),e(We,$n),e($n,sy),e(We,ui),b(m,um,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,C$),e(Ae,pi),e(pi,w$),e(Ae,A$),b(m,Eo,_),b(m,wa,_),e(wa,y$),e(wa,pm),e(pm,L$),e(wa,IDe),b(m,wIe,_),b(m,_i,_),e(_i,_m),e(_m,bee),M(ly,bee,null),e(_i,qDe),e(_i,vee),e(vee,NDe),b(m,AIe,_),b(m,kn,_),e(kn,jDe),e(kn,Fee),e(Fee,DDe),e(kn,GDe),e(kn,Tee),e(Tee,ODe),e(kn,VDe),b(m,yIe,_),M(iy,m,_),b(m,LIe,_),b(m,x$,_),e(x$,XDe),b(m,xIe,_),M(bm,m,_),b(m,$Ie,_),b(m,bi,_),e(bi,vm),e(vm,Mee),M(dy,Mee,null),e(bi,zDe),e(bi,Eee),e(Eee,WDe),b(m,kIe,_),b(m,Co,_),M(cy,Co,null),e(Co,QDe),e(Co,my),e(my,HDe),e(my,$$),e($$,UDe),e(my,JDe),e(Co,YDe),e(Co,fy),e(fy,KDe),e(fy,Cee),e(Cee,ZDe),e(fy,eGe),e(Co,oGe),e(Co,Er),M(gy,Er,null),e(Er,rGe),e(Er,wee),e(wee,tGe),e(Er,aGe),e(Er,vi),e(vi,nGe),e(vi,Aee),e(Aee,sGe),e(vi,lGe),e(vi,yee),e(yee,iGe),e(vi,dGe),e(Er,cGe),e(Er,A),e(A,Fm),e(Fm,Lee),e(Lee,mGe),e(Fm,fGe),e(Fm,k$),e(k$,gGe),e(Fm,hGe),e(A,uGe),e(A,Tm),e(Tm,xee),e(xee,pGe),e(Tm,_Ge),e(Tm,S$),e(S$,bGe),e(Tm,vGe),e(A,FGe),e(A,Mm),e(Mm,$ee),e($ee,TGe),e(Mm,MGe),e(Mm,R$),e(R$,EGe),e(Mm,CGe),e(A,wGe),e(A,Em),e(Em,kee),e(kee,AGe),e(Em,yGe),e(Em,P$),e(P$,LGe),e(Em,xGe),e(A,$Ge),e(A,Cm),e(Cm,See),e(See,kGe),e(Cm,SGe),e(Cm,B$),e(B$,RGe),e(Cm,PGe),e(A,BGe),e(A,wm),e(wm,Ree),e(Ree,IGe),e(wm,qGe),e(wm,I$),e(I$,NGe),e(wm,jGe),e(A,DGe),e(A,Am),e(Am,Pee),e(Pee,GGe),e(Am,OGe),e(Am,q$),e(q$,VGe),e(Am,XGe),e(A,zGe),e(A,ym),e(ym,Bee),e(Bee,WGe),e(ym,QGe),e(ym,N$),e(N$,HGe),e(ym,UGe),e(A,JGe),e(A,Lm),e(Lm,Iee),e(Iee,YGe),e(Lm,KGe),e(Lm,j$),e(j$,ZGe),e(Lm,eOe),e(A,oOe),e(A,xm),e(xm,qee),e(qee,rOe),e(xm,tOe),e(xm,D$),e(D$,aOe),e(xm,nOe),e(A,sOe),e(A,$m),e($m,Nee),e(Nee,lOe),e($m,iOe),e($m,G$),e(G$,dOe),e($m,cOe),e(A,mOe),e(A,km),e(km,jee),e(jee,fOe),e(km,gOe),e(km,O$),e(O$,hOe),e(km,uOe),e(A,pOe),e(A,Sm),e(Sm,Dee),e(Dee,_Oe),e(Sm,bOe),e(Sm,V$),e(V$,vOe),e(Sm,FOe),e(A,TOe),e(A,Rm),e(Rm,Gee),e(Gee,MOe),e(Rm,EOe),e(Rm,X$),e(X$,COe),e(Rm,wOe),e(A,AOe),e(A,Pm),e(Pm,Oee),e(Oee,yOe),e(Pm,LOe),e(Pm,z$),e(z$,xOe),e(Pm,$Oe),e(A,kOe),e(A,Bm),e(Bm,Vee),e(Vee,SOe),e(Bm,ROe),e(Bm,W$),e(W$,POe),e(Bm,BOe),e(A,IOe),e(A,Im),e(Im,Xee),e(Xee,qOe),e(Im,NOe),e(Im,Q$),e(Q$,jOe),e(Im,DOe),e(A,GOe),e(A,qm),e(qm,zee),e(zee,OOe),e(qm,VOe),e(qm,H$),e(H$,XOe),e(qm,zOe),e(A,WOe),e(A,Nm),e(Nm,Wee),e(Wee,QOe),e(Nm,HOe),e(Nm,U$),e(U$,UOe),e(Nm,JOe),e(A,YOe),e(A,jm),e(jm,Qee),e(Qee,KOe),e(jm,ZOe),e(jm,J$),e(J$,eVe),e(jm,oVe),e(A,rVe),e(A,Dm),e(Dm,Hee),e(Hee,tVe),e(Dm,aVe),e(Dm,Y$),e(Y$,nVe),e(Dm,sVe),e(A,lVe),e(A,Gm),e(Gm,Uee),e(Uee,iVe),e(Gm,dVe),e(Gm,K$),e(K$,cVe),e(Gm,mVe),e(A,fVe),e(A,Om),e(Om,Jee),e(Jee,gVe),e(Om,hVe),e(Om,Z$),e(Z$,uVe),e(Om,pVe),e(A,_Ve),e(A,Vm),e(Vm,Yee),e(Yee,bVe),e(Vm,vVe),e(Vm,ek),e(ek,FVe),e(Vm,TVe),e(A,MVe),e(A,Xm),e(Xm,Kee),e(Kee,EVe),e(Xm,CVe),e(Xm,ok),e(ok,wVe),e(Xm,AVe),e(A,yVe),e(A,zm),e(zm,Zee),e(Zee,LVe),e(zm,xVe),e(zm,rk),e(rk,$Ve),e(zm,kVe),e(A,SVe),e(A,Wm),e(Wm,eoe),e(eoe,RVe),e(Wm,PVe),e(Wm,tk),e(tk,BVe),e(Wm,IVe),e(A,qVe),e(A,Qm),e(Qm,ooe),e(ooe,NVe),e(Qm,jVe),e(Qm,ak),e(ak,DVe),e(Qm,GVe),e(A,OVe),e(A,Hm),e(Hm,roe),e(roe,VVe),e(Hm,XVe),e(Hm,nk),e(nk,zVe),e(Hm,WVe),e(A,QVe),e(A,Um),e(Um,toe),e(toe,HVe),e(Um,UVe),e(Um,sk),e(sk,JVe),e(Um,YVe),e(A,KVe),e(A,Jm),e(Jm,aoe),e(aoe,ZVe),e(Jm,eXe),e(Jm,lk),e(lk,oXe),e(Jm,rXe),e(A,tXe),e(A,Ym),e(Ym,noe),e(noe,aXe),e(Ym,nXe),e(Ym,ik),e(ik,sXe),e(Ym,lXe),e(A,iXe),e(A,Km),e(Km,soe),e(soe,dXe),e(Km,cXe),e(Km,dk),e(dk,mXe),e(Km,fXe),e(A,gXe),e(A,Zm),e(Zm,loe),e(loe,hXe),e(Zm,uXe),e(Zm,ck),e(ck,pXe),e(Zm,_Xe),e(A,bXe),e(A,ef),e(ef,ioe),e(ioe,vXe),e(ef,FXe),e(ef,mk),e(mk,TXe),e(ef,MXe),e(A,EXe),e(A,of),e(of,doe),e(doe,CXe),e(of,wXe),e(of,fk),e(fk,AXe),e(of,yXe),e(A,LXe),e(A,rf),e(rf,coe),e(coe,xXe),e(rf,$Xe),e(rf,gk),e(gk,kXe),e(rf,SXe),e(A,RXe),e(A,tf),e(tf,moe),e(moe,PXe),e(tf,BXe),e(tf,hk),e(hk,IXe),e(tf,qXe),e(A,NXe),e(A,af),e(af,foe),e(foe,jXe),e(af,DXe),e(af,uk),e(uk,GXe),e(af,OXe),e(A,VXe),e(A,nf),e(nf,goe),e(goe,XXe),e(nf,zXe),e(nf,pk),e(pk,WXe),e(nf,QXe),e(A,HXe),e(A,sf),e(sf,hoe),e(hoe,UXe),e(sf,JXe),e(sf,_k),e(_k,YXe),e(sf,KXe),e(A,ZXe),e(A,lf),e(lf,uoe),e(uoe,eze),e(lf,oze),e(lf,bk),e(bk,rze),e(lf,tze),e(A,aze),e(A,df),e(df,poe),e(poe,nze),e(df,sze),e(df,vk),e(vk,lze),e(df,ize),e(A,dze),e(A,cf),e(cf,_oe),e(_oe,cze),e(cf,mze),e(cf,Fk),e(Fk,fze),e(cf,gze),e(A,hze),e(A,mf),e(mf,boe),e(boe,uze),e(mf,pze),e(mf,Tk),e(Tk,_ze),e(mf,bze),e(A,vze),e(A,ff),e(ff,voe),e(voe,Fze),e(ff,Tze),e(ff,Mk),e(Mk,Mze),e(ff,Eze),e(A,Cze),e(A,gf),e(gf,Foe),e(Foe,wze),e(gf,Aze),e(gf,Ek),e(Ek,yze),e(gf,Lze),e(A,xze),e(A,hf),e(hf,Toe),e(Toe,$ze),e(hf,kze),e(hf,Ck),e(Ck,Sze),e(hf,Rze),e(A,Pze),e(A,uf),e(uf,Moe),e(Moe,Bze),e(uf,Ize),e(uf,wk),e(wk,qze),e(uf,Nze),e(A,jze),e(A,pf),e(pf,Eoe),e(Eoe,Dze),e(pf,Gze),e(pf,Ak),e(Ak,Oze),e(pf,Vze),e(A,Xze),e(A,_f),e(_f,Coe),e(Coe,zze),e(_f,Wze),e(_f,yk),e(yk,Qze),e(_f,Hze),e(A,Uze),e(A,bf),e(bf,woe),e(woe,Jze),e(bf,Yze),e(bf,Lk),e(Lk,Kze),e(bf,Zze),e(A,eWe),e(A,vf),e(vf,Aoe),e(Aoe,oWe),e(vf,rWe),e(vf,xk),e(xk,tWe),e(vf,aWe),e(A,nWe),e(A,Ff),e(Ff,yoe),e(yoe,sWe),e(Ff,lWe),e(Ff,$k),e($k,iWe),e(Ff,dWe),e(A,cWe),e(A,Tf),e(Tf,Loe),e(Loe,mWe),e(Tf,fWe),e(Tf,kk),e(kk,gWe),e(Tf,hWe),e(A,uWe),e(A,Mf),e(Mf,xoe),e(xoe,pWe),e(Mf,_We),e(Mf,Sk),e(Sk,bWe),e(Mf,vWe),e(A,FWe),e(A,Ef),e(Ef,$oe),e($oe,TWe),e(Ef,MWe),e(Ef,Rk),e(Rk,EWe),e(Ef,CWe),e(A,wWe),e(A,Cf),e(Cf,koe),e(koe,AWe),e(Cf,yWe),e(Cf,Pk),e(Pk,LWe),e(Cf,xWe),e(A,$We),e(A,wf),e(wf,Soe),e(Soe,kWe),e(wf,SWe),e(wf,Bk),e(Bk,RWe),e(wf,PWe),e(A,BWe),e(A,Af),e(Af,Roe),e(Roe,IWe),e(Af,qWe),e(Af,Ik),e(Ik,NWe),e(Af,jWe),e(A,DWe),e(A,yf),e(yf,Poe),e(Poe,GWe),e(yf,OWe),e(yf,qk),e(qk,VWe),e(yf,XWe),e(A,zWe),e(A,Lf),e(Lf,Boe),e(Boe,WWe),e(Lf,QWe),e(Lf,Nk),e(Nk,HWe),e(Lf,UWe),e(A,JWe),e(A,xf),e(xf,Ioe),e(Ioe,YWe),e(xf,KWe),e(xf,jk),e(jk,ZWe),e(xf,eQe),e(A,oQe),e(A,$f),e($f,qoe),e(qoe,rQe),e($f,tQe),e($f,Dk),e(Dk,aQe),e($f,nQe),e(A,sQe),e(A,kf),e(kf,Noe),e(Noe,lQe),e(kf,iQe),e(kf,Gk),e(Gk,dQe),e(kf,cQe),e(A,mQe),e(A,Sf),e(Sf,joe),e(joe,fQe),e(Sf,gQe),e(Sf,Ok),e(Ok,hQe),e(Sf,uQe),e(A,pQe),e(A,Rf),e(Rf,Doe),e(Doe,_Qe),e(Rf,bQe),e(Rf,Vk),e(Vk,vQe),e(Rf,FQe),e(A,TQe),e(A,Pf),e(Pf,Goe),e(Goe,MQe),e(Pf,EQe),e(Pf,Xk),e(Xk,CQe),e(Pf,wQe),e(A,AQe),e(A,Bf),e(Bf,Ooe),e(Ooe,yQe),e(Bf,LQe),e(Bf,zk),e(zk,xQe),e(Bf,$Qe),e(A,kQe),e(A,If),e(If,Voe),e(Voe,SQe),e(If,RQe),e(If,Wk),e(Wk,PQe),e(If,BQe),e(A,IQe),e(A,qf),e(qf,Xoe),e(Xoe,qQe),e(qf,NQe),e(qf,Qk),e(Qk,jQe),e(qf,DQe),e(A,GQe),e(A,Nf),e(Nf,zoe),e(zoe,OQe),e(Nf,VQe),e(Nf,Hk),e(Hk,XQe),e(Nf,zQe),e(A,WQe),e(A,jf),e(jf,Woe),e(Woe,QQe),e(jf,HQe),e(jf,Uk),e(Uk,UQe),e(jf,JQe),e(A,YQe),e(A,Df),e(Df,Qoe),e(Qoe,KQe),e(Df,ZQe),e(Df,Jk),e(Jk,eHe),e(Df,oHe),e(A,rHe),e(A,Gf),e(Gf,Hoe),e(Hoe,tHe),e(Gf,aHe),e(Gf,Yk),e(Yk,nHe),e(Gf,sHe),e(A,lHe),e(A,Of),e(Of,Uoe),e(Uoe,iHe),e(Of,dHe),e(Of,Kk),e(Kk,cHe),e(Of,mHe),e(A,fHe),e(A,Vf),e(Vf,Joe),e(Joe,gHe),e(Vf,hHe),e(Vf,Zk),e(Zk,uHe),e(Vf,pHe),e(A,_He),e(A,Xf),e(Xf,Yoe),e(Yoe,bHe),e(Xf,vHe),e(Xf,eS),e(eS,FHe),e(Xf,THe),e(A,MHe),e(A,zf),e(zf,Koe),e(Koe,EHe),e(zf,CHe),e(zf,oS),e(oS,wHe),e(zf,AHe),e(A,yHe),e(A,Wf),e(Wf,Zoe),e(Zoe,LHe),e(Wf,xHe),e(Wf,rS),e(rS,$He),e(Wf,kHe),e(A,SHe),e(A,Qf),e(Qf,ere),e(ere,RHe),e(Qf,PHe),e(Qf,tS),e(tS,BHe),e(Qf,IHe),e(A,qHe),e(A,Hf),e(Hf,ore),e(ore,NHe),e(Hf,jHe),e(Hf,aS),e(aS,DHe),e(Hf,GHe),e(A,OHe),e(A,Uf),e(Uf,rre),e(rre,VHe),e(Uf,XHe),e(Uf,nS),e(nS,zHe),e(Uf,WHe),e(A,QHe),e(A,Jf),e(Jf,tre),e(tre,HHe),e(Jf,UHe),e(Jf,sS),e(sS,JHe),e(Jf,YHe),e(A,KHe),e(A,Yf),e(Yf,are),e(are,ZHe),e(Yf,eUe),e(Yf,lS),e(lS,oUe),e(Yf,rUe),e(A,tUe),e(A,Kf),e(Kf,nre),e(nre,aUe),e(Kf,nUe),e(Kf,iS),e(iS,sUe),e(Kf,lUe),e(A,iUe),e(A,Zf),e(Zf,sre),e(sre,dUe),e(Zf,cUe),e(Zf,dS),e(dS,mUe),e(Zf,fUe),e(A,gUe),e(A,eg),e(eg,lre),e(lre,hUe),e(eg,uUe),e(eg,cS),e(cS,pUe),e(eg,_Ue),e(A,bUe),e(A,og),e(og,ire),e(ire,vUe),e(og,FUe),e(og,mS),e(mS,TUe),e(og,MUe),e(A,EUe),e(A,rg),e(rg,dre),e(dre,CUe),e(rg,wUe),e(rg,fS),e(fS,AUe),e(rg,yUe),e(A,LUe),e(A,tg),e(tg,cre),e(cre,xUe),e(tg,$Ue),e(tg,gS),e(gS,kUe),e(tg,SUe),e(A,RUe),e(A,ag),e(ag,mre),e(mre,PUe),e(ag,BUe),e(ag,hS),e(hS,IUe),e(ag,qUe),e(A,NUe),e(A,ng),e(ng,fre),e(fre,jUe),e(ng,DUe),e(ng,uS),e(uS,GUe),e(ng,OUe),e(A,VUe),e(A,sg),e(sg,gre),e(gre,XUe),e(sg,zUe),e(sg,pS),e(pS,WUe),e(sg,QUe),e(A,HUe),e(A,lg),e(lg,hre),e(hre,UUe),e(lg,JUe),e(lg,_S),e(_S,YUe),e(lg,KUe),e(A,ZUe),e(A,ig),e(ig,ure),e(ure,eJe),e(ig,oJe),e(ig,bS),e(bS,rJe),e(ig,tJe),e(A,aJe),e(A,dg),e(dg,pre),e(pre,nJe),e(dg,sJe),e(dg,vS),e(vS,lJe),e(dg,iJe),e(A,dJe),e(A,cg),e(cg,_re),e(_re,cJe),e(cg,mJe),e(cg,FS),e(FS,fJe),e(cg,gJe),e(A,hJe),e(A,mg),e(mg,bre),e(bre,uJe),e(mg,pJe),e(mg,TS),e(TS,_Je),e(mg,bJe),e(A,vJe),e(A,fg),e(fg,vre),e(vre,FJe),e(fg,TJe),e(fg,MS),e(MS,MJe),e(fg,EJe),e(A,CJe),e(A,gg),e(gg,Fre),e(Fre,wJe),e(gg,AJe),e(gg,ES),e(ES,yJe),e(gg,LJe),e(A,xJe),e(A,hg),e(hg,Tre),e(Tre,$Je),e(hg,kJe),e(hg,CS),e(CS,SJe),e(hg,RJe),e(A,PJe),e(A,ug),e(ug,Mre),e(Mre,BJe),e(ug,IJe),e(ug,wS),e(wS,qJe),e(ug,NJe),e(A,jJe),e(A,pg),e(pg,Ere),e(Ere,DJe),e(pg,GJe),e(pg,AS),e(AS,OJe),e(pg,VJe),e(A,XJe),e(A,_g),e(_g,Cre),e(Cre,zJe),e(_g,WJe),e(_g,yS),e(yS,QJe),e(_g,HJe),e(Er,UJe),M(bg,Er,null),e(Co,JJe),e(Co,vg),M(hy,vg,null),e(vg,YJe),e(vg,wre),e(wre,KJe),b(m,SIe,_),b(m,Fi,_),e(Fi,Fg),e(Fg,Are),M(uy,Are,null),e(Fi,ZJe),e(Fi,yre),e(yre,eYe),b(m,RIe,_),b(m,wo,_),M(py,wo,null),e(wo,oYe),e(wo,_y),e(_y,rYe),e(_y,LS),e(LS,tYe),e(_y,aYe),e(wo,nYe),e(wo,by),e(by,sYe),e(by,Lre),e(Lre,lYe),e(by,iYe),e(wo,dYe),e(wo,Cr),M(vy,Cr,null),e(Cr,cYe),e(Cr,xre),e(xre,mYe),e(Cr,fYe),e(Cr,Aa),e(Aa,gYe),e(Aa,$re),e($re,hYe),e(Aa,uYe),e(Aa,kre),e(kre,pYe),e(Aa,_Ye),e(Aa,Sre),e(Sre,bYe),e(Aa,vYe),e(Cr,FYe),e(Cr,k),e(k,Sn),e(Sn,Rre),e(Rre,TYe),e(Sn,MYe),e(Sn,xS),e(xS,EYe),e(Sn,CYe),e(Sn,$S),e($S,wYe),e(Sn,AYe),e(k,yYe),e(k,Rn),e(Rn,Pre),e(Pre,LYe),e(Rn,xYe),e(Rn,kS),e(kS,$Ye),e(Rn,kYe),e(Rn,SS),e(SS,SYe),e(Rn,RYe),e(k,PYe),e(k,Pn),e(Pn,Bre),e(Bre,BYe),e(Pn,IYe),e(Pn,RS),e(RS,qYe),e(Pn,NYe),e(Pn,PS),e(PS,jYe),e(Pn,DYe),e(k,GYe),e(k,Tg),e(Tg,Ire),e(Ire,OYe),e(Tg,VYe),e(Tg,BS),e(BS,XYe),e(Tg,zYe),e(k,WYe),e(k,Bn),e(Bn,qre),e(qre,QYe),e(Bn,HYe),e(Bn,IS),e(IS,UYe),e(Bn,JYe),e(Bn,qS),e(qS,YYe),e(Bn,KYe),e(k,ZYe),e(k,Mg),e(Mg,Nre),e(Nre,eKe),e(Mg,oKe),e(Mg,NS),e(NS,rKe),e(Mg,tKe),e(k,aKe),e(k,Eg),e(Eg,jre),e(jre,nKe),e(Eg,sKe),e(Eg,jS),e(jS,lKe),e(Eg,iKe),e(k,dKe),e(k,Cg),e(Cg,Dre),e(Dre,cKe),e(Cg,mKe),e(Cg,DS),e(DS,fKe),e(Cg,gKe),e(k,hKe),e(k,In),e(In,Gre),e(Gre,uKe),e(In,pKe),e(In,GS),e(GS,_Ke),e(In,bKe),e(In,OS),e(OS,vKe),e(In,FKe),e(k,TKe),e(k,qn),e(qn,Ore),e(Ore,MKe),e(qn,EKe),e(qn,VS),e(VS,CKe),e(qn,wKe),e(qn,XS),e(XS,AKe),e(qn,yKe),e(k,LKe),e(k,Nn),e(Nn,Vre),e(Vre,xKe),e(Nn,$Ke),e(Nn,zS),e(zS,kKe),e(Nn,SKe),e(Nn,WS),e(WS,RKe),e(Nn,PKe),e(k,BKe),e(k,wg),e(wg,Xre),e(Xre,IKe),e(wg,qKe),e(wg,QS),e(QS,NKe),e(wg,jKe),e(k,DKe),e(k,Ag),e(Ag,zre),e(zre,GKe),e(Ag,OKe),e(Ag,HS),e(HS,VKe),e(Ag,XKe),e(k,zKe),e(k,jn),e(jn,Wre),e(Wre,WKe),e(jn,QKe),e(jn,US),e(US,HKe),e(jn,UKe),e(jn,JS),e(JS,JKe),e(jn,YKe),e(k,KKe),e(k,yg),e(yg,Qre),e(Qre,ZKe),e(yg,eZe),e(yg,YS),e(YS,oZe),e(yg,rZe),e(k,tZe),e(k,Dn),e(Dn,Hre),e(Hre,aZe),e(Dn,nZe),e(Dn,KS),e(KS,sZe),e(Dn,lZe),e(Dn,ZS),e(ZS,iZe),e(Dn,dZe),e(k,cZe),e(k,Gn),e(Gn,Ure),e(Ure,mZe),e(Gn,fZe),e(Gn,eR),e(eR,gZe),e(Gn,hZe),e(Gn,oR),e(oR,uZe),e(Gn,pZe),e(k,_Ze),e(k,On),e(On,Jre),e(Jre,bZe),e(On,vZe),e(On,rR),e(rR,FZe),e(On,TZe),e(On,tR),e(tR,MZe),e(On,EZe),e(k,CZe),e(k,Lg),e(Lg,Yre),e(Yre,wZe),e(Lg,AZe),e(Lg,aR),e(aR,yZe),e(Lg,LZe),e(k,xZe),e(k,Vn),e(Vn,Kre),e(Kre,$Ze),e(Vn,kZe),e(Vn,nR),e(nR,SZe),e(Vn,RZe),e(Vn,sR),e(sR,PZe),e(Vn,BZe),e(k,IZe),e(k,Xn),e(Xn,Zre),e(Zre,qZe),e(Xn,NZe),e(Xn,lR),e(lR,jZe),e(Xn,DZe),e(Xn,iR),e(iR,GZe),e(Xn,OZe),e(k,VZe),e(k,zn),e(zn,ete),e(ete,XZe),e(zn,zZe),e(zn,dR),e(dR,WZe),e(zn,QZe),e(zn,cR),e(cR,HZe),e(zn,UZe),e(k,JZe),e(k,Wn),e(Wn,ote),e(ote,YZe),e(Wn,KZe),e(Wn,mR),e(mR,ZZe),e(Wn,eeo),e(Wn,fR),e(fR,oeo),e(Wn,reo),e(k,teo),e(k,Qn),e(Qn,rte),e(rte,aeo),e(Qn,neo),e(Qn,gR),e(gR,seo),e(Qn,leo),e(Qn,hR),e(hR,ieo),e(Qn,deo),e(k,ceo),e(k,Hn),e(Hn,tte),e(tte,meo),e(Hn,feo),e(Hn,uR),e(uR,geo),e(Hn,heo),e(Hn,pR),e(pR,ueo),e(Hn,peo),e(k,_eo),e(k,xg),e(xg,ate),e(ate,beo),e(xg,veo),e(xg,_R),e(_R,Feo),e(xg,Teo),e(k,Meo),e(k,Un),e(Un,nte),e(nte,Eeo),e(Un,Ceo),e(Un,bR),e(bR,weo),e(Un,Aeo),e(Un,vR),e(vR,yeo),e(Un,Leo),e(k,xeo),e(k,$g),e($g,ste),e(ste,$eo),e($g,keo),e($g,FR),e(FR,Seo),e($g,Reo),e(k,Peo),e(k,Jn),e(Jn,lte),e(lte,Beo),e(Jn,Ieo),e(Jn,TR),e(TR,qeo),e(Jn,Neo),e(Jn,MR),e(MR,jeo),e(Jn,Deo),e(k,Geo),e(k,Yn),e(Yn,ite),e(ite,Oeo),e(Yn,Veo),e(Yn,ER),e(ER,Xeo),e(Yn,zeo),e(Yn,CR),e(CR,Weo),e(Yn,Qeo),e(k,Heo),e(k,Kn),e(Kn,dte),e(dte,Ueo),e(Kn,Jeo),e(Kn,wR),e(wR,Yeo),e(Kn,Keo),e(Kn,AR),e(AR,Zeo),e(Kn,eoo),e(k,ooo),e(k,Zn),e(Zn,cte),e(cte,roo),e(Zn,too),e(Zn,yR),e(yR,aoo),e(Zn,noo),e(Zn,LR),e(LR,soo),e(Zn,loo),e(k,ioo),e(k,es),e(es,mte),e(mte,doo),e(es,coo),e(es,xR),e(xR,moo),e(es,foo),e(es,$R),e($R,goo),e(es,hoo),e(k,uoo),e(k,kg),e(kg,fte),e(fte,poo),e(kg,_oo),e(kg,kR),e(kR,boo),e(kg,voo),e(k,Foo),e(k,os),e(os,gte),e(gte,Too),e(os,Moo),e(os,SR),e(SR,Eoo),e(os,Coo),e(os,RR),e(RR,woo),e(os,Aoo),e(k,yoo),e(k,rs),e(rs,hte),e(hte,Loo),e(rs,xoo),e(rs,PR),e(PR,$oo),e(rs,koo),e(rs,BR),e(BR,Soo),e(rs,Roo),e(k,Poo),e(k,ts),e(ts,ute),e(ute,Boo),e(ts,Ioo),e(ts,IR),e(IR,qoo),e(ts,Noo),e(ts,qR),e(qR,joo),e(ts,Doo),e(k,Goo),e(k,as),e(as,pte),e(pte,Ooo),e(as,Voo),e(as,NR),e(NR,Xoo),e(as,zoo),e(as,jR),e(jR,Woo),e(as,Qoo),e(k,Hoo),e(k,ns),e(ns,_te),e(_te,Uoo),e(ns,Joo),e(ns,DR),e(DR,Yoo),e(ns,Koo),e(ns,GR),e(GR,Zoo),e(ns,ero),e(k,oro),e(k,ss),e(ss,bte),e(bte,rro),e(ss,tro),e(ss,OR),e(OR,aro),e(ss,nro),e(ss,VR),e(VR,sro),e(ss,lro),e(k,iro),e(k,Sg),e(Sg,vte),e(vte,dro),e(Sg,cro),e(Sg,XR),e(XR,mro),e(Sg,fro),e(k,gro),e(k,ls),e(ls,Fte),e(Fte,hro),e(ls,uro),e(ls,zR),e(zR,pro),e(ls,_ro),e(ls,WR),e(WR,bro),e(ls,vro),e(k,Fro),e(k,Rg),e(Rg,Tte),e(Tte,Tro),e(Rg,Mro),e(Rg,QR),e(QR,Ero),e(Rg,Cro),e(k,wro),e(k,Pg),e(Pg,Mte),e(Mte,Aro),e(Pg,yro),e(Pg,HR),e(HR,Lro),e(Pg,xro),e(k,$ro),e(k,is),e(is,Ete),e(Ete,kro),e(is,Sro),e(is,UR),e(UR,Rro),e(is,Pro),e(is,JR),e(JR,Bro),e(is,Iro),e(k,qro),e(k,ds),e(ds,Cte),e(Cte,Nro),e(ds,jro),e(ds,YR),e(YR,Dro),e(ds,Gro),e(ds,KR),e(KR,Oro),e(ds,Vro),e(k,Xro),e(k,cs),e(cs,wte),e(wte,zro),e(cs,Wro),e(cs,ZR),e(ZR,Qro),e(cs,Hro),e(cs,eP),e(eP,Uro),e(cs,Jro),e(k,Yro),e(k,Bg),e(Bg,Ate),e(Ate,Kro),e(Bg,Zro),e(Bg,oP),e(oP,eto),e(Bg,oto),e(k,rto),e(k,ms),e(ms,yte),e(yte,tto),e(ms,ato),e(ms,rP),e(rP,nto),e(ms,sto),e(ms,tP),e(tP,lto),e(ms,ito),e(k,dto),e(k,fs),e(fs,Lte),e(Lte,cto),e(fs,mto),e(fs,aP),e(aP,fto),e(fs,gto),e(fs,nP),e(nP,hto),e(fs,uto),e(k,pto),e(k,gs),e(gs,xte),e(xte,_to),e(gs,bto),e(gs,sP),e(sP,vto),e(gs,Fto),e(gs,lP),e(lP,Tto),e(gs,Mto),e(k,Eto),e(k,hs),e(hs,$te),e($te,Cto),e(hs,wto),e(hs,iP),e(iP,Ato),e(hs,yto),e(hs,dP),e(dP,Lto),e(hs,xto),e(k,$to),e(k,us),e(us,kte),e(kte,kto),e(us,Sto),e(us,cP),e(cP,Rto),e(us,Pto),e(us,mP),e(mP,Bto),e(us,Ito),e(k,qto),e(k,Ig),e(Ig,Ste),e(Ste,Nto),e(Ig,jto),e(Ig,fP),e(fP,Dto),e(Ig,Gto),e(k,Oto),e(k,ps),e(ps,Rte),e(Rte,Vto),e(ps,Xto),e(ps,gP),e(gP,zto),e(ps,Wto),e(ps,hP),e(hP,Qto),e(ps,Hto),e(k,Uto),e(k,qg),e(qg,Pte),e(Pte,Jto),e(qg,Yto),e(qg,uP),e(uP,Kto),e(qg,Zto),e(k,eao),e(k,Ng),e(Ng,Bte),e(Bte,oao),e(Ng,rao),e(Ng,pP),e(pP,tao),e(Ng,aao),e(k,nao),e(k,jg),e(jg,Ite),e(Ite,sao),e(jg,lao),e(jg,_P),e(_P,iao),e(jg,dao),e(k,cao),e(k,Dg),e(Dg,qte),e(qte,mao),e(Dg,fao),e(Dg,bP),e(bP,gao),e(Dg,hao),e(k,uao),e(k,_s),e(_s,Nte),e(Nte,pao),e(_s,_ao),e(_s,vP),e(vP,bao),e(_s,vao),e(_s,FP),e(FP,Fao),e(_s,Tao),e(k,Mao),e(k,Gg),e(Gg,jte),e(jte,Eao),e(Gg,Cao),e(Gg,TP),e(TP,wao),e(Gg,Aao),e(k,yao),e(k,bs),e(bs,Dte),e(Dte,Lao),e(bs,xao),e(bs,MP),e(MP,$ao),e(bs,kao),e(bs,EP),e(EP,Sao),e(bs,Rao),e(k,Pao),e(k,vs),e(vs,Gte),e(Gte,Bao),e(vs,Iao),e(vs,CP),e(CP,qao),e(vs,Nao),e(vs,wP),e(wP,jao),e(vs,Dao),e(k,Gao),e(k,Fs),e(Fs,Ote),e(Ote,Oao),e(Fs,Vao),e(Fs,AP),e(AP,Xao),e(Fs,zao),e(Fs,yP),e(yP,Wao),e(Fs,Qao),e(k,Hao),e(k,Ts),e(Ts,Vte),e(Vte,Uao),e(Ts,Jao),e(Ts,LP),e(LP,Yao),e(Ts,Kao),e(Ts,xP),e(xP,Zao),e(Ts,eno),e(k,ono),e(k,Ms),e(Ms,Xte),e(Xte,rno),e(Ms,tno),e(Ms,$P),e($P,ano),e(Ms,nno),e(Ms,kP),e(kP,sno),e(Ms,lno),e(k,ino),e(k,Es),e(Es,zte),e(zte,dno),e(Es,cno),e(Es,SP),e(SP,mno),e(Es,fno),e(Es,RP),e(RP,gno),e(Es,hno),e(k,uno),e(k,Og),e(Og,Wte),e(Wte,pno),e(Og,_no),e(Og,PP),e(PP,bno),e(Og,vno),e(k,Fno),e(k,Vg),e(Vg,Qte),e(Qte,Tno),e(Vg,Mno),e(Vg,BP),e(BP,Eno),e(Vg,Cno),e(k,wno),e(k,Cs),e(Cs,Hte),e(Hte,Ano),e(Cs,yno),e(Cs,IP),e(IP,Lno),e(Cs,xno),e(Cs,qP),e(qP,$no),e(Cs,kno),e(k,Sno),e(k,ws),e(ws,Ute),e(Ute,Rno),e(ws,Pno),e(ws,NP),e(NP,Bno),e(ws,Ino),e(ws,jP),e(jP,qno),e(ws,Nno),e(k,jno),e(k,As),e(As,Jte),e(Jte,Dno),e(As,Gno),e(As,DP),e(DP,Ono),e(As,Vno),e(As,GP),e(GP,Xno),e(As,zno),e(k,Wno),e(k,Xg),e(Xg,Yte),e(Yte,Qno),e(Xg,Hno),e(Xg,OP),e(OP,Uno),e(Xg,Jno),e(k,Yno),e(k,zg),e(zg,Kte),e(Kte,Kno),e(zg,Zno),e(zg,VP),e(VP,eso),e(zg,oso),e(k,rso),e(k,Wg),e(Wg,Zte),e(Zte,tso),e(Wg,aso),e(Wg,XP),e(XP,nso),e(Wg,sso),e(k,lso),e(k,ys),e(ys,eae),e(eae,iso),e(ys,dso),e(ys,zP),e(zP,cso),e(ys,mso),e(ys,WP),e(WP,fso),e(ys,gso),e(k,hso),e(k,Qg),e(Qg,oae),e(oae,uso),e(Qg,pso),e(Qg,QP),e(QP,_so),e(Qg,bso),e(k,vso),e(k,Hg),e(Hg,rae),e(rae,Fso),e(Hg,Tso),e(Hg,HP),e(HP,Mso),e(Hg,Eso),e(k,Cso),e(k,Ug),e(Ug,tae),e(tae,wso),e(Ug,Aso),e(Ug,UP),e(UP,yso),e(Ug,Lso),e(k,xso),e(k,Ls),e(Ls,aae),e(aae,$so),e(Ls,kso),e(Ls,JP),e(JP,Sso),e(Ls,Rso),e(Ls,YP),e(YP,Pso),e(Ls,Bso),e(k,Iso),e(k,Jg),e(Jg,nae),e(nae,qso),e(Jg,Nso),e(Jg,KP),e(KP,jso),e(Jg,Dso),e(k,Gso),e(k,Yg),e(Yg,sae),e(sae,Oso),e(Yg,Vso),e(Yg,ZP),e(ZP,Xso),e(Yg,zso),e(k,Wso),e(k,xs),e(xs,lae),e(lae,Qso),e(xs,Hso),e(xs,eB),e(eB,Uso),e(xs,Jso),e(xs,oB),e(oB,Yso),e(xs,Kso),e(k,Zso),e(k,$s),e($s,iae),e(iae,elo),e($s,olo),e($s,rB),e(rB,rlo),e($s,tlo),e($s,tB),e(tB,alo),e($s,nlo),e(k,slo),e(k,ks),e(ks,dae),e(dae,llo),e(ks,ilo),e(ks,aB),e(aB,dlo),e(ks,clo),e(ks,nB),e(nB,mlo),e(ks,flo),e(k,glo),e(k,Ss),e(Ss,cae),e(cae,hlo),e(Ss,ulo),e(Ss,sB),e(sB,plo),e(Ss,_lo),e(Ss,lB),e(lB,blo),e(Ss,vlo),e(Cr,Flo),M(Kg,Cr,null),e(wo,Tlo),e(wo,Zg),M(Fy,Zg,null),e(Zg,Mlo),e(Zg,mae),e(mae,Elo),b(m,PIe,_),b(m,Ti,_),e(Ti,eh),e(eh,fae),M(Ty,fae,null),e(Ti,Clo),e(Ti,gae),e(gae,wlo),b(m,BIe,_),b(m,Ao,_),M(My,Ao,null),e(Ao,Alo),e(Ao,Ey),e(Ey,ylo),e(Ey,iB),e(iB,Llo),e(Ey,xlo),e(Ao,$lo),e(Ao,Cy),e(Cy,klo),e(Cy,hae),e(hae,Slo),e(Cy,Rlo),e(Ao,Plo),e(Ao,He),M(wy,He,null),e(He,Blo),e(He,uae),e(uae,Ilo),e(He,qlo),e(He,ya),e(ya,Nlo),e(ya,pae),e(pae,jlo),e(ya,Dlo),e(ya,_ae),e(_ae,Glo),e(ya,Olo),e(ya,bae),e(bae,Vlo),e(ya,Xlo),e(He,zlo),e(He,Z),e(Z,oh),e(oh,vae),e(vae,Wlo),e(oh,Qlo),e(oh,dB),e(dB,Hlo),e(oh,Ulo),e(Z,Jlo),e(Z,rh),e(rh,Fae),e(Fae,Ylo),e(rh,Klo),e(rh,cB),e(cB,Zlo),e(rh,eio),e(Z,oio),e(Z,th),e(th,Tae),e(Tae,rio),e(th,tio),e(th,mB),e(mB,aio),e(th,nio),e(Z,sio),e(Z,ah),e(ah,Mae),e(Mae,lio),e(ah,iio),e(ah,fB),e(fB,dio),e(ah,cio),e(Z,mio),e(Z,nh),e(nh,Eae),e(Eae,fio),e(nh,gio),e(nh,gB),e(gB,hio),e(nh,uio),e(Z,pio),e(Z,sh),e(sh,Cae),e(Cae,_io),e(sh,bio),e(sh,hB),e(hB,vio),e(sh,Fio),e(Z,Tio),e(Z,lh),e(lh,wae),e(wae,Mio),e(lh,Eio),e(lh,uB),e(uB,Cio),e(lh,wio),e(Z,Aio),e(Z,ih),e(ih,Aae),e(Aae,yio),e(ih,Lio),e(ih,pB),e(pB,xio),e(ih,$io),e(Z,kio),e(Z,dh),e(dh,yae),e(yae,Sio),e(dh,Rio),e(dh,_B),e(_B,Pio),e(dh,Bio),e(Z,Iio),e(Z,ch),e(ch,Lae),e(Lae,qio),e(ch,Nio),e(ch,bB),e(bB,jio),e(ch,Dio),e(Z,Gio),e(Z,mh),e(mh,xae),e(xae,Oio),e(mh,Vio),e(mh,vB),e(vB,Xio),e(mh,zio),e(Z,Wio),e(Z,fh),e(fh,$ae),e($ae,Qio),e(fh,Hio),e(fh,FB),e(FB,Uio),e(fh,Jio),e(Z,Yio),e(Z,gh),e(gh,kae),e(kae,Kio),e(gh,Zio),e(gh,TB),e(TB,edo),e(gh,odo),e(Z,rdo),e(Z,hh),e(hh,Sae),e(Sae,tdo),e(hh,ado),e(hh,MB),e(MB,ndo),e(hh,sdo),e(Z,ldo),e(Z,uh),e(uh,Rae),e(Rae,ido),e(uh,ddo),e(uh,EB),e(EB,cdo),e(uh,mdo),e(Z,fdo),e(Z,ph),e(ph,Pae),e(Pae,gdo),e(ph,hdo),e(ph,CB),e(CB,udo),e(ph,pdo),e(Z,_do),e(Z,_h),e(_h,Bae),e(Bae,bdo),e(_h,vdo),e(_h,wB),e(wB,Fdo),e(_h,Tdo),e(Z,Mdo),e(Z,bh),e(bh,Iae),e(Iae,Edo),e(bh,Cdo),e(bh,AB),e(AB,wdo),e(bh,Ado),e(Z,ydo),e(Z,vh),e(vh,qae),e(qae,Ldo),e(vh,xdo),e(vh,yB),e(yB,$do),e(vh,kdo),e(Z,Sdo),e(Z,Fh),e(Fh,Nae),e(Nae,Rdo),e(Fh,Pdo),e(Fh,LB),e(LB,Bdo),e(Fh,Ido),e(Z,qdo),e(Z,Th),e(Th,jae),e(jae,Ndo),e(Th,jdo),e(Th,xB),e(xB,Ddo),e(Th,Gdo),e(Z,Odo),e(Z,Mh),e(Mh,Dae),e(Dae,Vdo),e(Mh,Xdo),e(Mh,$B),e($B,zdo),e(Mh,Wdo),e(Z,Qdo),e(Z,Eh),e(Eh,Gae),e(Gae,Hdo),e(Eh,Udo),e(Eh,kB),e(kB,Jdo),e(Eh,Ydo),e(Z,Kdo),e(Z,Ch),e(Ch,Oae),e(Oae,Zdo),e(Ch,eco),e(Ch,SB),e(SB,oco),e(Ch,rco),e(Z,tco),e(Z,wh),e(wh,Vae),e(Vae,aco),e(wh,nco),e(wh,RB),e(RB,sco),e(wh,lco),e(Z,ico),e(Z,Ah),e(Ah,Xae),e(Xae,dco),e(Ah,cco),e(Ah,PB),e(PB,mco),e(Ah,fco),e(He,gco),M(yh,He,null),e(He,hco),M(Lh,He,null),e(Ao,uco),e(Ao,xh),M(Ay,xh,null),e(xh,pco),e(xh,zae),e(zae,_co),b(m,IIe,_),b(m,Mi,_),e(Mi,$h),e($h,Wae),M(yy,Wae,null),e(Mi,bco),e(Mi,Qae),e(Qae,vco),b(m,qIe,_),b(m,yo,_),M(Ly,yo,null),e(yo,Fco),e(yo,xy),e(xy,Tco),e(xy,BB),e(BB,Mco),e(xy,Eco),e(yo,Cco),e(yo,$y),e($y,wco),e($y,Hae),e(Hae,Aco),e($y,yco),e(yo,Lco),e(yo,Ue),M(ky,Ue,null),e(Ue,xco),e(Ue,Uae),e(Uae,$co),e(Ue,kco),e(Ue,Ei),e(Ei,Sco),e(Ei,Jae),e(Jae,Rco),e(Ei,Pco),e(Ei,Yae),e(Yae,Bco),e(Ei,Ico),e(Ue,qco),e(Ue,ue),e(ue,kh),e(kh,Kae),e(Kae,Nco),e(kh,jco),e(kh,IB),e(IB,Dco),e(kh,Gco),e(ue,Oco),e(ue,Sh),e(Sh,Zae),e(Zae,Vco),e(Sh,Xco),e(Sh,ene),e(ene,zco),e(Sh,Wco),e(ue,Qco),e(ue,Rh),e(Rh,one),e(one,Hco),e(Rh,Uco),e(Rh,qB),e(qB,Jco),e(Rh,Yco),e(ue,Kco),e(ue,Ph),e(Ph,rne),e(rne,Zco),e(Ph,emo),e(Ph,NB),e(NB,omo),e(Ph,rmo),e(ue,tmo),e(ue,Bh),e(Bh,tne),e(tne,amo),e(Bh,nmo),e(Bh,jB),e(jB,smo),e(Bh,lmo),e(ue,imo),e(ue,Ih),e(Ih,ane),e(ane,dmo),e(Ih,cmo),e(Ih,DB),e(DB,mmo),e(Ih,fmo),e(ue,gmo),e(ue,qh),e(qh,nne),e(nne,hmo),e(qh,umo),e(qh,GB),e(GB,pmo),e(qh,_mo),e(ue,bmo),e(ue,Nh),e(Nh,sne),e(sne,vmo),e(Nh,Fmo),e(Nh,OB),e(OB,Tmo),e(Nh,Mmo),e(ue,Emo),e(ue,jh),e(jh,lne),e(lne,Cmo),e(jh,wmo),e(jh,VB),e(VB,Amo),e(jh,ymo),e(ue,Lmo),e(ue,Dh),e(Dh,ine),e(ine,xmo),e(Dh,$mo),e(Dh,XB),e(XB,kmo),e(Dh,Smo),e(ue,Rmo),e(ue,Gh),e(Gh,dne),e(dne,Pmo),e(Gh,Bmo),e(Gh,zB),e(zB,Imo),e(Gh,qmo),e(ue,Nmo),e(ue,Oh),e(Oh,cne),e(cne,jmo),e(Oh,Dmo),e(Oh,WB),e(WB,Gmo),e(Oh,Omo),e(ue,Vmo),e(ue,Vh),e(Vh,mne),e(mne,Xmo),e(Vh,zmo),e(Vh,QB),e(QB,Wmo),e(Vh,Qmo),e(ue,Hmo),e(ue,Xh),e(Xh,fne),e(fne,Umo),e(Xh,Jmo),e(Xh,HB),e(HB,Ymo),e(Xh,Kmo),e(ue,Zmo),e(ue,zh),e(zh,gne),e(gne,efo),e(zh,ofo),e(zh,UB),e(UB,rfo),e(zh,tfo),e(ue,afo),e(ue,Wh),e(Wh,hne),e(hne,nfo),e(Wh,sfo),e(Wh,JB),e(JB,lfo),e(Wh,ifo),e(Ue,dfo),M(Qh,Ue,null),e(Ue,cfo),M(Hh,Ue,null),e(yo,mfo),e(yo,Uh),M(Sy,Uh,null),e(Uh,ffo),e(Uh,une),e(une,gfo),b(m,NIe,_),b(m,Ci,_),e(Ci,Jh),e(Jh,pne),M(Ry,pne,null),e(Ci,hfo),e(Ci,_ne),e(_ne,ufo),b(m,jIe,_),b(m,Lo,_),M(Py,Lo,null),e(Lo,pfo),e(Lo,wi),e(wi,_fo),e(wi,YB),e(YB,bfo),e(wi,vfo),e(wi,KB),e(KB,Ffo),e(wi,Tfo),e(Lo,Mfo),e(Lo,By),e(By,Efo),e(By,bne),e(bne,Cfo),e(By,wfo),e(Lo,Afo),e(Lo,tt),M(Iy,tt,null),e(tt,yfo),e(tt,vne),e(vne,Lfo),e(tt,xfo),e(tt,Ai),e(Ai,$fo),e(Ai,Fne),e(Fne,kfo),e(Ai,Sfo),e(Ai,ZB),e(ZB,Rfo),e(Ai,Pfo),e(tt,Bfo),M(Yh,tt,null),e(Lo,Ifo),e(Lo,Je),M(qy,Je,null),e(Je,qfo),e(Je,Tne),e(Tne,Nfo),e(Je,jfo),e(Je,La),e(La,Dfo),e(La,Mne),e(Mne,Gfo),e(La,Ofo),e(La,Ene),e(Ene,Vfo),e(La,Xfo),e(La,Cne),e(Cne,zfo),e(La,Wfo),e(Je,Qfo),e(Je,x),e(x,Kh),e(Kh,wne),e(wne,Hfo),e(Kh,Ufo),e(Kh,eI),e(eI,Jfo),e(Kh,Yfo),e(x,Kfo),e(x,Zh),e(Zh,Ane),e(Ane,Zfo),e(Zh,ego),e(Zh,oI),e(oI,ogo),e(Zh,rgo),e(x,tgo),e(x,eu),e(eu,yne),e(yne,ago),e(eu,ngo),e(eu,rI),e(rI,sgo),e(eu,lgo),e(x,igo),e(x,ou),e(ou,Lne),e(Lne,dgo),e(ou,cgo),e(ou,tI),e(tI,mgo),e(ou,fgo),e(x,ggo),e(x,ru),e(ru,xne),e(xne,hgo),e(ru,ugo),e(ru,aI),e(aI,pgo),e(ru,_go),e(x,bgo),e(x,tu),e(tu,$ne),e($ne,vgo),e(tu,Fgo),e(tu,nI),e(nI,Tgo),e(tu,Mgo),e(x,Ego),e(x,au),e(au,kne),e(kne,Cgo),e(au,wgo),e(au,sI),e(sI,Ago),e(au,ygo),e(x,Lgo),e(x,nu),e(nu,Sne),e(Sne,xgo),e(nu,$go),e(nu,lI),e(lI,kgo),e(nu,Sgo),e(x,Rgo),e(x,su),e(su,Rne),e(Rne,Pgo),e(su,Bgo),e(su,iI),e(iI,Igo),e(su,qgo),e(x,Ngo),e(x,lu),e(lu,Pne),e(Pne,jgo),e(lu,Dgo),e(lu,dI),e(dI,Ggo),e(lu,Ogo),e(x,Vgo),e(x,iu),e(iu,Bne),e(Bne,Xgo),e(iu,zgo),e(iu,cI),e(cI,Wgo),e(iu,Qgo),e(x,Hgo),e(x,du),e(du,Ine),e(Ine,Ugo),e(du,Jgo),e(du,mI),e(mI,Ygo),e(du,Kgo),e(x,Zgo),e(x,cu),e(cu,qne),e(qne,eho),e(cu,oho),e(cu,fI),e(fI,rho),e(cu,tho),e(x,aho),e(x,mu),e(mu,Nne),e(Nne,nho),e(mu,sho),e(mu,gI),e(gI,lho),e(mu,iho),e(x,dho),e(x,fu),e(fu,jne),e(jne,cho),e(fu,mho),e(fu,hI),e(hI,fho),e(fu,gho),e(x,hho),e(x,gu),e(gu,Dne),e(Dne,uho),e(gu,pho),e(gu,uI),e(uI,_ho),e(gu,bho),e(x,vho),e(x,hu),e(hu,Gne),e(Gne,Fho),e(hu,Tho),e(hu,pI),e(pI,Mho),e(hu,Eho),e(x,Cho),e(x,uu),e(uu,One),e(One,who),e(uu,Aho),e(uu,_I),e(_I,yho),e(uu,Lho),e(x,xho),e(x,pu),e(pu,Vne),e(Vne,$ho),e(pu,kho),e(pu,bI),e(bI,Sho),e(pu,Rho),e(x,Pho),e(x,_u),e(_u,Xne),e(Xne,Bho),e(_u,Iho),e(_u,vI),e(vI,qho),e(_u,Nho),e(x,jho),e(x,bu),e(bu,zne),e(zne,Dho),e(bu,Gho),e(bu,FI),e(FI,Oho),e(bu,Vho),e(x,Xho),e(x,vu),e(vu,Wne),e(Wne,zho),e(vu,Who),e(vu,TI),e(TI,Qho),e(vu,Hho),e(x,Uho),e(x,Fu),e(Fu,Qne),e(Qne,Jho),e(Fu,Yho),e(Fu,MI),e(MI,Kho),e(Fu,Zho),e(x,euo),e(x,Tu),e(Tu,Hne),e(Hne,ouo),e(Tu,ruo),e(Tu,EI),e(EI,tuo),e(Tu,auo),e(x,nuo),e(x,Mu),e(Mu,Une),e(Une,suo),e(Mu,luo),e(Mu,CI),e(CI,iuo),e(Mu,duo),e(x,cuo),e(x,Eu),e(Eu,Jne),e(Jne,muo),e(Eu,fuo),e(Eu,wI),e(wI,guo),e(Eu,huo),e(x,uuo),e(x,Cu),e(Cu,Yne),e(Yne,puo),e(Cu,_uo),e(Cu,AI),e(AI,buo),e(Cu,vuo),e(x,Fuo),e(x,wu),e(wu,Kne),e(Kne,Tuo),e(wu,Muo),e(wu,yI),e(yI,Euo),e(wu,Cuo),e(x,wuo),e(x,Au),e(Au,Zne),e(Zne,Auo),e(Au,yuo),e(Au,LI),e(LI,Luo),e(Au,xuo),e(x,$uo),e(x,yu),e(yu,ese),e(ese,kuo),e(yu,Suo),e(yu,xI),e(xI,Ruo),e(yu,Puo),e(x,Buo),e(x,Lu),e(Lu,ose),e(ose,Iuo),e(Lu,quo),e(Lu,$I),e($I,Nuo),e(Lu,juo),e(x,Duo),e(x,Rs),e(Rs,rse),e(rse,Guo),e(Rs,Ouo),e(Rs,kI),e(kI,Vuo),e(Rs,Xuo),e(Rs,SI),e(SI,zuo),e(Rs,Wuo),e(x,Quo),e(x,xu),e(xu,tse),e(tse,Huo),e(xu,Uuo),e(xu,RI),e(RI,Juo),e(xu,Yuo),e(x,Kuo),e(x,$u),e($u,ase),e(ase,Zuo),e($u,epo),e($u,PI),e(PI,opo),e($u,rpo),e(x,tpo),e(x,ku),e(ku,nse),e(nse,apo),e(ku,npo),e(ku,BI),e(BI,spo),e(ku,lpo),e(x,ipo),e(x,Su),e(Su,sse),e(sse,dpo),e(Su,cpo),e(Su,II),e(II,mpo),e(Su,fpo),e(x,gpo),e(x,Ru),e(Ru,lse),e(lse,hpo),e(Ru,upo),e(Ru,qI),e(qI,ppo),e(Ru,_po),e(x,bpo),e(x,Pu),e(Pu,ise),e(ise,vpo),e(Pu,Fpo),e(Pu,NI),e(NI,Tpo),e(Pu,Mpo),e(x,Epo),e(x,Bu),e(Bu,dse),e(dse,Cpo),e(Bu,wpo),e(Bu,jI),e(jI,Apo),e(Bu,ypo),e(x,Lpo),e(x,Iu),e(Iu,cse),e(cse,xpo),e(Iu,$po),e(Iu,DI),e(DI,kpo),e(Iu,Spo),e(x,Rpo),e(x,qu),e(qu,mse),e(mse,Ppo),e(qu,Bpo),e(qu,GI),e(GI,Ipo),e(qu,qpo),e(x,Npo),e(x,Nu),e(Nu,fse),e(fse,jpo),e(Nu,Dpo),e(Nu,OI),e(OI,Gpo),e(Nu,Opo),e(x,Vpo),e(x,ju),e(ju,gse),e(gse,Xpo),e(ju,zpo),e(ju,VI),e(VI,Wpo),e(ju,Qpo),e(x,Hpo),e(x,Du),e(Du,hse),e(hse,Upo),e(Du,Jpo),e(Du,XI),e(XI,Ypo),e(Du,Kpo),e(x,Zpo),e(x,Gu),e(Gu,use),e(use,e_o),e(Gu,o_o),e(Gu,zI),e(zI,r_o),e(Gu,t_o),e(x,a_o),e(x,Ou),e(Ou,pse),e(pse,n_o),e(Ou,s_o),e(Ou,WI),e(WI,l_o),e(Ou,i_o),e(x,d_o),e(x,Vu),e(Vu,_se),e(_se,c_o),e(Vu,m_o),e(Vu,QI),e(QI,f_o),e(Vu,g_o),e(x,h_o),e(x,Xu),e(Xu,bse),e(bse,u_o),e(Xu,p_o),e(Xu,HI),e(HI,__o),e(Xu,b_o),e(x,v_o),e(x,zu),e(zu,vse),e(vse,F_o),e(zu,T_o),e(zu,UI),e(UI,M_o),e(zu,E_o),e(x,C_o),e(x,Wu),e(Wu,Fse),e(Fse,w_o),e(Wu,A_o),e(Wu,JI),e(JI,y_o),e(Wu,L_o),e(x,x_o),e(x,Qu),e(Qu,Tse),e(Tse,$_o),e(Qu,k_o),e(Qu,YI),e(YI,S_o),e(Qu,R_o),e(x,P_o),e(x,Hu),e(Hu,Mse),e(Mse,B_o),e(Hu,I_o),e(Hu,KI),e(KI,q_o),e(Hu,N_o),e(x,j_o),e(x,Uu),e(Uu,Ese),e(Ese,D_o),e(Uu,G_o),e(Uu,ZI),e(ZI,O_o),e(Uu,V_o),e(x,X_o),e(x,Ju),e(Ju,Cse),e(Cse,z_o),e(Ju,W_o),e(Ju,eq),e(eq,Q_o),e(Ju,H_o),e(x,U_o),e(x,Yu),e(Yu,wse),e(wse,J_o),e(Yu,Y_o),e(Yu,oq),e(oq,K_o),e(Yu,Z_o),e(x,ebo),e(x,Ku),e(Ku,Ase),e(Ase,obo),e(Ku,rbo),e(Ku,rq),e(rq,tbo),e(Ku,abo),e(x,nbo),e(x,Zu),e(Zu,yse),e(yse,sbo),e(Zu,lbo),e(Zu,tq),e(tq,ibo),e(Zu,dbo),e(x,cbo),e(x,ep),e(ep,Lse),e(Lse,mbo),e(ep,fbo),e(ep,aq),e(aq,gbo),e(ep,hbo),e(x,ubo),e(x,op),e(op,xse),e(xse,pbo),e(op,_bo),e(op,nq),e(nq,bbo),e(op,vbo),e(x,Fbo),e(x,rp),e(rp,$se),e($se,Tbo),e(rp,Mbo),e(rp,sq),e(sq,Ebo),e(rp,Cbo),e(x,wbo),e(x,tp),e(tp,kse),e(kse,Abo),e(tp,ybo),e(tp,lq),e(lq,Lbo),e(tp,xbo),e(x,$bo),e(x,ap),e(ap,Sse),e(Sse,kbo),e(ap,Sbo),e(ap,iq),e(iq,Rbo),e(ap,Pbo),e(x,Bbo),e(x,np),e(np,Rse),e(Rse,Ibo),e(np,qbo),e(np,dq),e(dq,Nbo),e(np,jbo),e(x,Dbo),e(x,sp),e(sp,Pse),e(Pse,Gbo),e(sp,Obo),e(sp,cq),e(cq,Vbo),e(sp,Xbo),e(x,zbo),e(x,lp),e(lp,Bse),e(Bse,Wbo),e(lp,Qbo),e(lp,mq),e(mq,Hbo),e(lp,Ubo),e(x,Jbo),e(x,ip),e(ip,Ise),e(Ise,Ybo),e(ip,Kbo),e(ip,fq),e(fq,Zbo),e(ip,e2o),e(x,o2o),e(x,dp),e(dp,qse),e(qse,r2o),e(dp,t2o),e(dp,gq),e(gq,a2o),e(dp,n2o),e(x,s2o),e(x,cp),e(cp,Nse),e(Nse,l2o),e(cp,i2o),e(cp,hq),e(hq,d2o),e(cp,c2o),e(x,m2o),e(x,mp),e(mp,jse),e(jse,f2o),e(mp,g2o),e(mp,uq),e(uq,h2o),e(mp,u2o),e(x,p2o),e(x,fp),e(fp,Dse),e(Dse,_2o),e(fp,b2o),e(fp,pq),e(pq,v2o),e(fp,F2o),e(x,T2o),e(x,gp),e(gp,Gse),e(Gse,M2o),e(gp,E2o),e(gp,_q),e(_q,C2o),e(gp,w2o),e(x,A2o),e(x,hp),e(hp,Ose),e(Ose,y2o),e(hp,L2o),e(hp,bq),e(bq,x2o),e(hp,$2o),e(x,k2o),e(x,up),e(up,Vse),e(Vse,S2o),e(up,R2o),e(up,vq),e(vq,P2o),e(up,B2o),e(x,I2o),e(x,pp),e(pp,Xse),e(Xse,q2o),e(pp,N2o),e(pp,Fq),e(Fq,j2o),e(pp,D2o),e(x,G2o),e(x,_p),e(_p,zse),e(zse,O2o),e(_p,V2o),e(_p,Tq),e(Tq,X2o),e(_p,z2o),e(x,W2o),e(x,bp),e(bp,Wse),e(Wse,Q2o),e(bp,H2o),e(bp,Mq),e(Mq,U2o),e(bp,J2o),e(x,Y2o),e(x,vp),e(vp,Qse),e(Qse,K2o),e(vp,Z2o),e(vp,Eq),e(Eq,evo),e(vp,ovo),e(x,rvo),e(x,Fp),e(Fp,Hse),e(Hse,tvo),e(Fp,avo),e(Fp,Cq),e(Cq,nvo),e(Fp,svo),e(x,lvo),e(x,Tp),e(Tp,Use),e(Use,ivo),e(Tp,dvo),e(Tp,wq),e(wq,cvo),e(Tp,mvo),e(x,fvo),e(x,Mp),e(Mp,Jse),e(Jse,gvo),e(Mp,hvo),e(Mp,Aq),e(Aq,uvo),e(Mp,pvo),e(x,_vo),e(x,Ep),e(Ep,Yse),e(Yse,bvo),e(Ep,vvo),e(Ep,yq),e(yq,Fvo),e(Ep,Tvo),e(x,Mvo),e(x,Cp),e(Cp,Kse),e(Kse,Evo),e(Cp,Cvo),e(Cp,Lq),e(Lq,wvo),e(Cp,Avo),e(x,yvo),e(x,wp),e(wp,Zse),e(Zse,Lvo),e(wp,xvo),e(wp,xq),e(xq,$vo),e(wp,kvo),e(x,Svo),e(x,Ap),e(Ap,ele),e(ele,Rvo),e(Ap,Pvo),e(Ap,$q),e($q,Bvo),e(Ap,Ivo),e(x,qvo),e(x,yp),e(yp,ole),e(ole,Nvo),e(yp,jvo),e(yp,kq),e(kq,Dvo),e(yp,Gvo),e(x,Ovo),e(x,Lp),e(Lp,rle),e(rle,Vvo),e(Lp,Xvo),e(Lp,Sq),e(Sq,zvo),e(Lp,Wvo),e(x,Qvo),e(x,xp),e(xp,tle),e(tle,Hvo),e(xp,Uvo),e(xp,Rq),e(Rq,Jvo),e(xp,Yvo),e(x,Kvo),e(x,$p),e($p,ale),e(ale,Zvo),e($p,eFo),e($p,Pq),e(Pq,oFo),e($p,rFo),e(x,tFo),e(x,kp),e(kp,nle),e(nle,aFo),e(kp,nFo),e(kp,Bq),e(Bq,sFo),e(kp,lFo),e(x,iFo),e(x,Sp),e(Sp,sle),e(sle,dFo),e(Sp,cFo),e(Sp,Iq),e(Iq,mFo),e(Sp,fFo),e(x,gFo),e(x,Rp),e(Rp,lle),e(lle,hFo),e(Rp,uFo),e(Rp,qq),e(qq,pFo),e(Rp,_Fo),e(x,bFo),e(x,Pp),e(Pp,ile),e(ile,vFo),e(Pp,FFo),e(Pp,Nq),e(Nq,TFo),e(Pp,MFo),e(x,EFo),e(x,Bp),e(Bp,dle),e(dle,CFo),e(Bp,wFo),e(Bp,jq),e(jq,AFo),e(Bp,yFo),e(x,LFo),e(x,Ip),e(Ip,cle),e(cle,xFo),e(Ip,$Fo),e(Ip,Dq),e(Dq,kFo),e(Ip,SFo),e(x,RFo),e(x,qp),e(qp,mle),e(mle,PFo),e(qp,BFo),e(qp,Gq),e(Gq,IFo),e(qp,qFo),e(x,NFo),e(x,Np),e(Np,fle),e(fle,jFo),e(Np,DFo),e(Np,Oq),e(Oq,GFo),e(Np,OFo),e(x,VFo),e(x,jp),e(jp,gle),e(gle,XFo),e(jp,zFo),e(jp,Vq),e(Vq,WFo),e(jp,QFo),e(x,HFo),e(x,Dp),e(Dp,hle),e(hle,UFo),e(Dp,JFo),e(Dp,Xq),e(Xq,YFo),e(Dp,KFo),e(Je,ZFo),e(Je,Gp),e(Gp,e1o),e(Gp,ule),e(ule,o1o),e(Gp,r1o),e(Gp,ple),e(ple,t1o),e(Je,a1o),M(Op,Je,null),b(m,DIe,_),b(m,yi,_),e(yi,Vp),e(Vp,_le),M(Ny,_le,null),e(yi,n1o),e(yi,ble),e(ble,s1o),b(m,GIe,_),b(m,xo,_),M(jy,xo,null),e(xo,l1o),e(xo,Li),e(Li,i1o),e(Li,zq),e(zq,d1o),e(Li,c1o),e(Li,Wq),e(Wq,m1o),e(Li,f1o),e(xo,g1o),e(xo,Dy),e(Dy,h1o),e(Dy,vle),e(vle,u1o),e(Dy,p1o),e(xo,_1o),e(xo,at),M(Gy,at,null),e(at,b1o),e(at,Fle),e(Fle,v1o),e(at,F1o),e(at,xi),e(xi,T1o),e(xi,Tle),e(Tle,M1o),e(xi,E1o),e(xi,Qq),e(Qq,C1o),e(xi,w1o),e(at,A1o),M(Xp,at,null),e(xo,y1o),e(xo,Ye),M(Oy,Ye,null),e(Ye,L1o),e(Ye,Mle),e(Mle,x1o),e(Ye,$1o),e(Ye,xa),e(xa,k1o),e(xa,Ele),e(Ele,S1o),e(xa,R1o),e(xa,Cle),e(Cle,P1o),e(xa,B1o),e(xa,wle),e(wle,I1o),e(xa,q1o),e(Ye,N1o),e(Ye,G),e(G,zp),e(zp,Ale),e(Ale,j1o),e(zp,D1o),e(zp,Hq),e(Hq,G1o),e(zp,O1o),e(G,V1o),e(G,Wp),e(Wp,yle),e(yle,X1o),e(Wp,z1o),e(Wp,Uq),e(Uq,W1o),e(Wp,Q1o),e(G,H1o),e(G,Qp),e(Qp,Lle),e(Lle,U1o),e(Qp,J1o),e(Qp,Jq),e(Jq,Y1o),e(Qp,K1o),e(G,Z1o),e(G,Hp),e(Hp,xle),e(xle,eTo),e(Hp,oTo),e(Hp,Yq),e(Yq,rTo),e(Hp,tTo),e(G,aTo),e(G,Up),e(Up,$le),e($le,nTo),e(Up,sTo),e(Up,Kq),e(Kq,lTo),e(Up,iTo),e(G,dTo),e(G,Jp),e(Jp,kle),e(kle,cTo),e(Jp,mTo),e(Jp,Zq),e(Zq,fTo),e(Jp,gTo),e(G,hTo),e(G,Yp),e(Yp,Sle),e(Sle,uTo),e(Yp,pTo),e(Yp,eN),e(eN,_To),e(Yp,bTo),e(G,vTo),e(G,Kp),e(Kp,Rle),e(Rle,FTo),e(Kp,TTo),e(Kp,oN),e(oN,MTo),e(Kp,ETo),e(G,CTo),e(G,Zp),e(Zp,Ple),e(Ple,wTo),e(Zp,ATo),e(Zp,rN),e(rN,yTo),e(Zp,LTo),e(G,xTo),e(G,e_),e(e_,Ble),e(Ble,$To),e(e_,kTo),e(e_,tN),e(tN,STo),e(e_,RTo),e(G,PTo),e(G,o_),e(o_,Ile),e(Ile,BTo),e(o_,ITo),e(o_,aN),e(aN,qTo),e(o_,NTo),e(G,jTo),e(G,r_),e(r_,qle),e(qle,DTo),e(r_,GTo),e(r_,nN),e(nN,OTo),e(r_,VTo),e(G,XTo),e(G,t_),e(t_,Nle),e(Nle,zTo),e(t_,WTo),e(t_,sN),e(sN,QTo),e(t_,HTo),e(G,UTo),e(G,a_),e(a_,jle),e(jle,JTo),e(a_,YTo),e(a_,lN),e(lN,KTo),e(a_,ZTo),e(G,eMo),e(G,n_),e(n_,Dle),e(Dle,oMo),e(n_,rMo),e(n_,iN),e(iN,tMo),e(n_,aMo),e(G,nMo),e(G,s_),e(s_,Gle),e(Gle,sMo),e(s_,lMo),e(s_,dN),e(dN,iMo),e(s_,dMo),e(G,cMo),e(G,l_),e(l_,Ole),e(Ole,mMo),e(l_,fMo),e(l_,cN),e(cN,gMo),e(l_,hMo),e(G,uMo),e(G,i_),e(i_,Vle),e(Vle,pMo),e(i_,_Mo),e(i_,mN),e(mN,bMo),e(i_,vMo),e(G,FMo),e(G,d_),e(d_,Xle),e(Xle,TMo),e(d_,MMo),e(d_,fN),e(fN,EMo),e(d_,CMo),e(G,wMo),e(G,c_),e(c_,zle),e(zle,AMo),e(c_,yMo),e(c_,gN),e(gN,LMo),e(c_,xMo),e(G,$Mo),e(G,m_),e(m_,Wle),e(Wle,kMo),e(m_,SMo),e(m_,hN),e(hN,RMo),e(m_,PMo),e(G,BMo),e(G,f_),e(f_,Qle),e(Qle,IMo),e(f_,qMo),e(f_,uN),e(uN,NMo),e(f_,jMo),e(G,DMo),e(G,g_),e(g_,Hle),e(Hle,GMo),e(g_,OMo),e(g_,pN),e(pN,VMo),e(g_,XMo),e(G,zMo),e(G,h_),e(h_,Ule),e(Ule,WMo),e(h_,QMo),e(h_,_N),e(_N,HMo),e(h_,UMo),e(G,JMo),e(G,u_),e(u_,Jle),e(Jle,YMo),e(u_,KMo),e(u_,bN),e(bN,ZMo),e(u_,e4o),e(G,o4o),e(G,p_),e(p_,Yle),e(Yle,r4o),e(p_,t4o),e(p_,vN),e(vN,a4o),e(p_,n4o),e(G,s4o),e(G,__),e(__,Kle),e(Kle,l4o),e(__,i4o),e(__,FN),e(FN,d4o),e(__,c4o),e(G,m4o),e(G,b_),e(b_,Zle),e(Zle,f4o),e(b_,g4o),e(b_,TN),e(TN,h4o),e(b_,u4o),e(G,p4o),e(G,v_),e(v_,eie),e(eie,_4o),e(v_,b4o),e(v_,MN),e(MN,v4o),e(v_,F4o),e(G,T4o),e(G,F_),e(F_,oie),e(oie,M4o),e(F_,E4o),e(F_,EN),e(EN,C4o),e(F_,w4o),e(G,A4o),e(G,T_),e(T_,rie),e(rie,y4o),e(T_,L4o),e(T_,CN),e(CN,x4o),e(T_,$4o),e(G,k4o),e(G,M_),e(M_,tie),e(tie,S4o),e(M_,R4o),e(M_,wN),e(wN,P4o),e(M_,B4o),e(G,I4o),e(G,E_),e(E_,aie),e(aie,q4o),e(E_,N4o),e(E_,AN),e(AN,j4o),e(E_,D4o),e(G,G4o),e(G,C_),e(C_,nie),e(nie,O4o),e(C_,V4o),e(C_,yN),e(yN,X4o),e(C_,z4o),e(G,W4o),e(G,w_),e(w_,sie),e(sie,Q4o),e(w_,H4o),e(w_,LN),e(LN,U4o),e(w_,J4o),e(G,Y4o),e(G,A_),e(A_,lie),e(lie,K4o),e(A_,Z4o),e(A_,xN),e(xN,eEo),e(A_,oEo),e(G,rEo),e(G,y_),e(y_,iie),e(iie,tEo),e(y_,aEo),e(y_,$N),e($N,nEo),e(y_,sEo),e(G,lEo),e(G,L_),e(L_,die),e(die,iEo),e(L_,dEo),e(L_,kN),e(kN,cEo),e(L_,mEo),e(G,fEo),e(G,x_),e(x_,cie),e(cie,gEo),e(x_,hEo),e(x_,SN),e(SN,uEo),e(x_,pEo),e(G,_Eo),e(G,$_),e($_,mie),e(mie,bEo),e($_,vEo),e($_,RN),e(RN,FEo),e($_,TEo),e(G,MEo),e(G,k_),e(k_,fie),e(fie,EEo),e(k_,CEo),e(k_,PN),e(PN,wEo),e(k_,AEo),e(Ye,yEo),e(Ye,S_),e(S_,LEo),e(S_,gie),e(gie,xEo),e(S_,$Eo),e(S_,hie),e(hie,kEo),e(Ye,SEo),M(R_,Ye,null),b(m,OIe,_),b(m,$i,_),e($i,P_),e(P_,uie),M(Vy,uie,null),e($i,REo),e($i,pie),e(pie,PEo),b(m,VIe,_),b(m,$o,_),M(Xy,$o,null),e($o,BEo),e($o,ki),e(ki,IEo),e(ki,BN),e(BN,qEo),e(ki,NEo),e(ki,IN),e(IN,jEo),e(ki,DEo),e($o,GEo),e($o,zy),e(zy,OEo),e(zy,_ie),e(_ie,VEo),e(zy,XEo),e($o,zEo),e($o,nt),M(Wy,nt,null),e(nt,WEo),e(nt,bie),e(bie,QEo),e(nt,HEo),e(nt,Si),e(Si,UEo),e(Si,vie),e(vie,JEo),e(Si,YEo),e(Si,qN),e(qN,KEo),e(Si,ZEo),e(nt,eCo),M(B_,nt,null),e($o,oCo),e($o,Ke),M(Qy,Ke,null),e(Ke,rCo),e(Ke,Fie),e(Fie,tCo),e(Ke,aCo),e(Ke,$a),e($a,nCo),e($a,Tie),e(Tie,sCo),e($a,lCo),e($a,Mie),e(Mie,iCo),e($a,dCo),e($a,Eie),e(Eie,cCo),e($a,mCo),e(Ke,fCo),e(Ke,z),e(z,I_),e(I_,Cie),e(Cie,gCo),e(I_,hCo),e(I_,NN),e(NN,uCo),e(I_,pCo),e(z,_Co),e(z,q_),e(q_,wie),e(wie,bCo),e(q_,vCo),e(q_,jN),e(jN,FCo),e(q_,TCo),e(z,MCo),e(z,N_),e(N_,Aie),e(Aie,ECo),e(N_,CCo),e(N_,DN),e(DN,wCo),e(N_,ACo),e(z,yCo),e(z,j_),e(j_,yie),e(yie,LCo),e(j_,xCo),e(j_,GN),e(GN,$Co),e(j_,kCo),e(z,SCo),e(z,D_),e(D_,Lie),e(Lie,RCo),e(D_,PCo),e(D_,ON),e(ON,BCo),e(D_,ICo),e(z,qCo),e(z,G_),e(G_,xie),e(xie,NCo),e(G_,jCo),e(G_,VN),e(VN,DCo),e(G_,GCo),e(z,OCo),e(z,O_),e(O_,$ie),e($ie,VCo),e(O_,XCo),e(O_,XN),e(XN,zCo),e(O_,WCo),e(z,QCo),e(z,V_),e(V_,kie),e(kie,HCo),e(V_,UCo),e(V_,zN),e(zN,JCo),e(V_,YCo),e(z,KCo),e(z,X_),e(X_,Sie),e(Sie,ZCo),e(X_,e5o),e(X_,WN),e(WN,o5o),e(X_,r5o),e(z,t5o),e(z,z_),e(z_,Rie),e(Rie,a5o),e(z_,n5o),e(z_,QN),e(QN,s5o),e(z_,l5o),e(z,i5o),e(z,W_),e(W_,Pie),e(Pie,d5o),e(W_,c5o),e(W_,HN),e(HN,m5o),e(W_,f5o),e(z,g5o),e(z,Q_),e(Q_,Bie),e(Bie,h5o),e(Q_,u5o),e(Q_,UN),e(UN,p5o),e(Q_,_5o),e(z,b5o),e(z,H_),e(H_,Iie),e(Iie,v5o),e(H_,F5o),e(H_,JN),e(JN,T5o),e(H_,M5o),e(z,E5o),e(z,U_),e(U_,qie),e(qie,C5o),e(U_,w5o),e(U_,YN),e(YN,A5o),e(U_,y5o),e(z,L5o),e(z,J_),e(J_,Nie),e(Nie,x5o),e(J_,$5o),e(J_,KN),e(KN,k5o),e(J_,S5o),e(z,R5o),e(z,Y_),e(Y_,jie),e(jie,P5o),e(Y_,B5o),e(Y_,ZN),e(ZN,I5o),e(Y_,q5o),e(z,N5o),e(z,K_),e(K_,Die),e(Die,j5o),e(K_,D5o),e(K_,ej),e(ej,G5o),e(K_,O5o),e(z,V5o),e(z,Z_),e(Z_,Gie),e(Gie,X5o),e(Z_,z5o),e(Z_,oj),e(oj,W5o),e(Z_,Q5o),e(z,H5o),e(z,eb),e(eb,Oie),e(Oie,U5o),e(eb,J5o),e(eb,rj),e(rj,Y5o),e(eb,K5o),e(z,Z5o),e(z,ob),e(ob,Vie),e(Vie,e3o),e(ob,o3o),e(ob,tj),e(tj,r3o),e(ob,t3o),e(z,a3o),e(z,rb),e(rb,Xie),e(Xie,n3o),e(rb,s3o),e(rb,aj),e(aj,l3o),e(rb,i3o),e(z,d3o),e(z,tb),e(tb,zie),e(zie,c3o),e(tb,m3o),e(tb,nj),e(nj,f3o),e(tb,g3o),e(z,h3o),e(z,ab),e(ab,Wie),e(Wie,u3o),e(ab,p3o),e(ab,sj),e(sj,_3o),e(ab,b3o),e(z,v3o),e(z,nb),e(nb,Qie),e(Qie,F3o),e(nb,T3o),e(nb,lj),e(lj,M3o),e(nb,E3o),e(z,C3o),e(z,sb),e(sb,Hie),e(Hie,w3o),e(sb,A3o),e(sb,ij),e(ij,y3o),e(sb,L3o),e(z,x3o),e(z,lb),e(lb,Uie),e(Uie,$3o),e(lb,k3o),e(lb,dj),e(dj,S3o),e(lb,R3o),e(z,P3o),e(z,ib),e(ib,Jie),e(Jie,B3o),e(ib,I3o),e(ib,cj),e(cj,q3o),e(ib,N3o),e(z,j3o),e(z,db),e(db,Yie),e(Yie,D3o),e(db,G3o),e(db,mj),e(mj,O3o),e(db,V3o),e(z,X3o),e(z,cb),e(cb,Kie),e(Kie,z3o),e(cb,W3o),e(cb,fj),e(fj,Q3o),e(cb,H3o),e(z,U3o),e(z,mb),e(mb,Zie),e(Zie,J3o),e(mb,Y3o),e(mb,gj),e(gj,K3o),e(mb,Z3o),e(z,ewo),e(z,fb),e(fb,ede),e(ede,owo),e(fb,rwo),e(fb,hj),e(hj,two),e(fb,awo),e(z,nwo),e(z,gb),e(gb,ode),e(ode,swo),e(gb,lwo),e(gb,uj),e(uj,iwo),e(gb,dwo),e(z,cwo),e(z,hb),e(hb,rde),e(rde,mwo),e(hb,fwo),e(hb,pj),e(pj,gwo),e(hb,hwo),e(z,uwo),e(z,ub),e(ub,tde),e(tde,pwo),e(ub,_wo),e(ub,_j),e(_j,bwo),e(ub,vwo),e(z,Fwo),e(z,pb),e(pb,ade),e(ade,Two),e(pb,Mwo),e(pb,bj),e(bj,Ewo),e(pb,Cwo),e(z,wwo),e(z,_b),e(_b,nde),e(nde,Awo),e(_b,ywo),e(_b,vj),e(vj,Lwo),e(_b,xwo),e(Ke,$wo),e(Ke,bb),e(bb,kwo),e(bb,sde),e(sde,Swo),e(bb,Rwo),e(bb,lde),e(lde,Pwo),e(Ke,Bwo),M(vb,Ke,null),b(m,XIe,_),b(m,Ri,_),e(Ri,Fb),e(Fb,ide),M(Hy,ide,null),e(Ri,Iwo),e(Ri,dde),e(dde,qwo),b(m,zIe,_),b(m,ko,_),M(Uy,ko,null),e(ko,Nwo),e(ko,Pi),e(Pi,jwo),e(Pi,Fj),e(Fj,Dwo),e(Pi,Gwo),e(Pi,Tj),e(Tj,Owo),e(Pi,Vwo),e(ko,Xwo),e(ko,Jy),e(Jy,zwo),e(Jy,cde),e(cde,Wwo),e(Jy,Qwo),e(ko,Hwo),e(ko,st),M(Yy,st,null),e(st,Uwo),e(st,mde),e(mde,Jwo),e(st,Ywo),e(st,Bi),e(Bi,Kwo),e(Bi,fde),e(fde,Zwo),e(Bi,eAo),e(Bi,Mj),e(Mj,oAo),e(Bi,rAo),e(st,tAo),M(Tb,st,null),e(ko,aAo),e(ko,Ze),M(Ky,Ze,null),e(Ze,nAo),e(Ze,gde),e(gde,sAo),e(Ze,lAo),e(Ze,ka),e(ka,iAo),e(ka,hde),e(hde,dAo),e(ka,cAo),e(ka,ude),e(ude,mAo),e(ka,fAo),e(ka,pde),e(pde,gAo),e(ka,hAo),e(Ze,uAo),e(Ze,W),e(W,Mb),e(Mb,_de),e(_de,pAo),e(Mb,_Ao),e(Mb,Ej),e(Ej,bAo),e(Mb,vAo),e(W,FAo),e(W,Eb),e(Eb,bde),e(bde,TAo),e(Eb,MAo),e(Eb,Cj),e(Cj,EAo),e(Eb,CAo),e(W,wAo),e(W,Cb),e(Cb,vde),e(vde,AAo),e(Cb,yAo),e(Cb,wj),e(wj,LAo),e(Cb,xAo),e(W,$Ao),e(W,wb),e(wb,Fde),e(Fde,kAo),e(wb,SAo),e(wb,Aj),e(Aj,RAo),e(wb,PAo),e(W,BAo),e(W,Ab),e(Ab,Tde),e(Tde,IAo),e(Ab,qAo),e(Ab,yj),e(yj,NAo),e(Ab,jAo),e(W,DAo),e(W,yb),e(yb,Mde),e(Mde,GAo),e(yb,OAo),e(yb,Lj),e(Lj,VAo),e(yb,XAo),e(W,zAo),e(W,Lb),e(Lb,Ede),e(Ede,WAo),e(Lb,QAo),e(Lb,xj),e(xj,HAo),e(Lb,UAo),e(W,JAo),e(W,xb),e(xb,Cde),e(Cde,YAo),e(xb,KAo),e(xb,$j),e($j,ZAo),e(xb,e6o),e(W,o6o),e(W,$b),e($b,wde),e(wde,r6o),e($b,t6o),e($b,kj),e(kj,a6o),e($b,n6o),e(W,s6o),e(W,kb),e(kb,Ade),e(Ade,l6o),e(kb,i6o),e(kb,Sj),e(Sj,d6o),e(kb,c6o),e(W,m6o),e(W,Sb),e(Sb,yde),e(yde,f6o),e(Sb,g6o),e(Sb,Rj),e(Rj,h6o),e(Sb,u6o),e(W,p6o),e(W,Rb),e(Rb,Lde),e(Lde,_6o),e(Rb,b6o),e(Rb,Pj),e(Pj,v6o),e(Rb,F6o),e(W,T6o),e(W,Pb),e(Pb,xde),e(xde,M6o),e(Pb,E6o),e(Pb,Bj),e(Bj,C6o),e(Pb,w6o),e(W,A6o),e(W,Bb),e(Bb,$de),e($de,y6o),e(Bb,L6o),e(Bb,Ij),e(Ij,x6o),e(Bb,$6o),e(W,k6o),e(W,Ib),e(Ib,kde),e(kde,S6o),e(Ib,R6o),e(Ib,qj),e(qj,P6o),e(Ib,B6o),e(W,I6o),e(W,qb),e(qb,Sde),e(Sde,q6o),e(qb,N6o),e(qb,Nj),e(Nj,j6o),e(qb,D6o),e(W,G6o),e(W,Nb),e(Nb,Rde),e(Rde,O6o),e(Nb,V6o),e(Nb,jj),e(jj,X6o),e(Nb,z6o),e(W,W6o),e(W,jb),e(jb,Pde),e(Pde,Q6o),e(jb,H6o),e(jb,Dj),e(Dj,U6o),e(jb,J6o),e(W,Y6o),e(W,Db),e(Db,Bde),e(Bde,K6o),e(Db,Z6o),e(Db,Gj),e(Gj,e0o),e(Db,o0o),e(W,r0o),e(W,Gb),e(Gb,Ide),e(Ide,t0o),e(Gb,a0o),e(Gb,Oj),e(Oj,n0o),e(Gb,s0o),e(W,l0o),e(W,Ob),e(Ob,qde),e(qde,i0o),e(Ob,d0o),e(Ob,Vj),e(Vj,c0o),e(Ob,m0o),e(W,f0o),e(W,Vb),e(Vb,Nde),e(Nde,g0o),e(Vb,h0o),e(Vb,Xj),e(Xj,u0o),e(Vb,p0o),e(W,_0o),e(W,Xb),e(Xb,jde),e(jde,b0o),e(Xb,v0o),e(Xb,zj),e(zj,F0o),e(Xb,T0o),e(W,M0o),e(W,zb),e(zb,Dde),e(Dde,E0o),e(zb,C0o),e(zb,Wj),e(Wj,w0o),e(zb,A0o),e(W,y0o),e(W,Wb),e(Wb,Gde),e(Gde,L0o),e(Wb,x0o),e(Wb,Qj),e(Qj,$0o),e(Wb,k0o),e(W,S0o),e(W,Qb),e(Qb,Ode),e(Ode,R0o),e(Qb,P0o),e(Qb,Hj),e(Hj,B0o),e(Qb,I0o),e(W,q0o),e(W,Hb),e(Hb,Vde),e(Vde,N0o),e(Hb,j0o),e(Hb,Uj),e(Uj,D0o),e(Hb,G0o),e(W,O0o),e(W,Ub),e(Ub,Xde),e(Xde,V0o),e(Ub,X0o),e(Ub,Jj),e(Jj,z0o),e(Ub,W0o),e(W,Q0o),e(W,Jb),e(Jb,zde),e(zde,H0o),e(Jb,U0o),e(Jb,Yj),e(Yj,J0o),e(Jb,Y0o),e(W,K0o),e(W,Yb),e(Yb,Wde),e(Wde,Z0o),e(Yb,eyo),e(Yb,Kj),e(Kj,oyo),e(Yb,ryo),e(W,tyo),e(W,Kb),e(Kb,Qde),e(Qde,ayo),e(Kb,nyo),e(Kb,Hde),e(Hde,syo),e(Kb,lyo),e(W,iyo),e(W,Zb),e(Zb,Ude),e(Ude,dyo),e(Zb,cyo),e(Zb,Zj),e(Zj,myo),e(Zb,fyo),e(W,gyo),e(W,e2),e(e2,Jde),e(Jde,hyo),e(e2,uyo),e(e2,eD),e(eD,pyo),e(e2,_yo),e(W,byo),e(W,o2),e(o2,Yde),e(Yde,vyo),e(o2,Fyo),e(o2,oD),e(oD,Tyo),e(o2,Myo),e(W,Eyo),e(W,r2),e(r2,Kde),e(Kde,Cyo),e(r2,wyo),e(r2,rD),e(rD,Ayo),e(r2,yyo),e(Ze,Lyo),e(Ze,t2),e(t2,xyo),e(t2,Zde),e(Zde,$yo),e(t2,kyo),e(t2,ece),e(ece,Syo),e(Ze,Ryo),M(a2,Ze,null),b(m,WIe,_),b(m,Ii,_),e(Ii,n2),e(n2,oce),M(Zy,oce,null),e(Ii,Pyo),e(Ii,rce),e(rce,Byo),b(m,QIe,_),b(m,So,_),M(eL,So,null),e(So,Iyo),e(So,qi),e(qi,qyo),e(qi,tD),e(tD,Nyo),e(qi,jyo),e(qi,aD),e(aD,Dyo),e(qi,Gyo),e(So,Oyo),e(So,oL),e(oL,Vyo),e(oL,tce),e(tce,Xyo),e(oL,zyo),e(So,Wyo),e(So,lt),M(rL,lt,null),e(lt,Qyo),e(lt,ace),e(ace,Hyo),e(lt,Uyo),e(lt,Ni),e(Ni,Jyo),e(Ni,nce),e(nce,Yyo),e(Ni,Kyo),e(Ni,nD),e(nD,Zyo),e(Ni,eLo),e(lt,oLo),M(s2,lt,null),e(So,rLo),e(So,eo),M(tL,eo,null),e(eo,tLo),e(eo,sce),e(sce,aLo),e(eo,nLo),e(eo,Sa),e(Sa,sLo),e(Sa,lce),e(lce,lLo),e(Sa,iLo),e(Sa,ice),e(ice,dLo),e(Sa,cLo),e(Sa,dce),e(dce,mLo),e(Sa,fLo),e(eo,gLo),e(eo,pe),e(pe,l2),e(l2,cce),e(cce,hLo),e(l2,uLo),e(l2,sD),e(sD,pLo),e(l2,_Lo),e(pe,bLo),e(pe,i2),e(i2,mce),e(mce,vLo),e(i2,FLo),e(i2,lD),e(lD,TLo),e(i2,MLo),e(pe,ELo),e(pe,d2),e(d2,fce),e(fce,CLo),e(d2,wLo),e(d2,iD),e(iD,ALo),e(d2,yLo),e(pe,LLo),e(pe,c2),e(c2,gce),e(gce,xLo),e(c2,$Lo),e(c2,dD),e(dD,kLo),e(c2,SLo),e(pe,RLo),e(pe,m2),e(m2,hce),e(hce,PLo),e(m2,BLo),e(m2,cD),e(cD,ILo),e(m2,qLo),e(pe,NLo),e(pe,f2),e(f2,uce),e(uce,jLo),e(f2,DLo),e(f2,mD),e(mD,GLo),e(f2,OLo),e(pe,VLo),e(pe,g2),e(g2,pce),e(pce,XLo),e(g2,zLo),e(g2,fD),e(fD,WLo),e(g2,QLo),e(pe,HLo),e(pe,h2),e(h2,_ce),e(_ce,ULo),e(h2,JLo),e(h2,gD),e(gD,YLo),e(h2,KLo),e(pe,ZLo),e(pe,u2),e(u2,bce),e(bce,e8o),e(u2,o8o),e(u2,hD),e(hD,r8o),e(u2,t8o),e(pe,a8o),e(pe,p2),e(p2,vce),e(vce,n8o),e(p2,s8o),e(p2,uD),e(uD,l8o),e(p2,i8o),e(pe,d8o),e(pe,_2),e(_2,Fce),e(Fce,c8o),e(_2,m8o),e(_2,pD),e(pD,f8o),e(_2,g8o),e(pe,h8o),e(pe,b2),e(b2,Tce),e(Tce,u8o),e(b2,p8o),e(b2,_D),e(_D,_8o),e(b2,b8o),e(pe,v8o),e(pe,v2),e(v2,Mce),e(Mce,F8o),e(v2,T8o),e(v2,bD),e(bD,M8o),e(v2,E8o),e(pe,C8o),e(pe,F2),e(F2,Ece),e(Ece,w8o),e(F2,A8o),e(F2,vD),e(vD,y8o),e(F2,L8o),e(pe,x8o),e(pe,T2),e(T2,Cce),e(Cce,$8o),e(T2,k8o),e(T2,FD),e(FD,S8o),e(T2,R8o),e(pe,P8o),e(pe,M2),e(M2,wce),e(wce,B8o),e(M2,I8o),e(M2,TD),e(TD,q8o),e(M2,N8o),e(eo,j8o),e(eo,E2),e(E2,D8o),e(E2,Ace),e(Ace,G8o),e(E2,O8o),e(E2,yce),e(yce,V8o),e(eo,X8o),M(C2,eo,null),b(m,HIe,_),b(m,ji,_),e(ji,w2),e(w2,Lce),M(aL,Lce,null),e(ji,z8o),e(ji,xce),e(xce,W8o),b(m,UIe,_),b(m,Ro,_),M(nL,Ro,null),e(Ro,Q8o),e(Ro,Di),e(Di,H8o),e(Di,MD),e(MD,U8o),e(Di,J8o),e(Di,ED),e(ED,Y8o),e(Di,K8o),e(Ro,Z8o),e(Ro,sL),e(sL,exo),e(sL,$ce),e($ce,oxo),e(sL,rxo),e(Ro,txo),e(Ro,it),M(lL,it,null),e(it,axo),e(it,kce),e(kce,nxo),e(it,sxo),e(it,Gi),e(Gi,lxo),e(Gi,Sce),e(Sce,ixo),e(Gi,dxo),e(Gi,CD),e(CD,cxo),e(Gi,mxo),e(it,fxo),M(A2,it,null),e(Ro,gxo),e(Ro,oo),M(iL,oo,null),e(oo,hxo),e(oo,Rce),e(Rce,uxo),e(oo,pxo),e(oo,Ra),e(Ra,_xo),e(Ra,Pce),e(Pce,bxo),e(Ra,vxo),e(Ra,Bce),e(Bce,Fxo),e(Ra,Txo),e(Ra,Ice),e(Ice,Mxo),e(Ra,Exo),e(oo,Cxo),e(oo,q),e(q,y2),e(y2,qce),e(qce,wxo),e(y2,Axo),e(y2,wD),e(wD,yxo),e(y2,Lxo),e(q,xxo),e(q,L2),e(L2,Nce),e(Nce,$xo),e(L2,kxo),e(L2,AD),e(AD,Sxo),e(L2,Rxo),e(q,Pxo),e(q,x2),e(x2,jce),e(jce,Bxo),e(x2,Ixo),e(x2,yD),e(yD,qxo),e(x2,Nxo),e(q,jxo),e(q,$2),e($2,Dce),e(Dce,Dxo),e($2,Gxo),e($2,LD),e(LD,Oxo),e($2,Vxo),e(q,Xxo),e(q,k2),e(k2,Gce),e(Gce,zxo),e(k2,Wxo),e(k2,xD),e(xD,Qxo),e(k2,Hxo),e(q,Uxo),e(q,S2),e(S2,Oce),e(Oce,Jxo),e(S2,Yxo),e(S2,$D),e($D,Kxo),e(S2,Zxo),e(q,e9o),e(q,R2),e(R2,Vce),e(Vce,o9o),e(R2,r9o),e(R2,kD),e(kD,t9o),e(R2,a9o),e(q,n9o),e(q,P2),e(P2,Xce),e(Xce,s9o),e(P2,l9o),e(P2,SD),e(SD,i9o),e(P2,d9o),e(q,c9o),e(q,B2),e(B2,zce),e(zce,m9o),e(B2,f9o),e(B2,RD),e(RD,g9o),e(B2,h9o),e(q,u9o),e(q,I2),e(I2,Wce),e(Wce,p9o),e(I2,_9o),e(I2,PD),e(PD,b9o),e(I2,v9o),e(q,F9o),e(q,q2),e(q2,Qce),e(Qce,T9o),e(q2,M9o),e(q2,BD),e(BD,E9o),e(q2,C9o),e(q,w9o),e(q,N2),e(N2,Hce),e(Hce,A9o),e(N2,y9o),e(N2,ID),e(ID,L9o),e(N2,x9o),e(q,$9o),e(q,j2),e(j2,Uce),e(Uce,k9o),e(j2,S9o),e(j2,qD),e(qD,R9o),e(j2,P9o),e(q,B9o),e(q,D2),e(D2,Jce),e(Jce,I9o),e(D2,q9o),e(D2,ND),e(ND,N9o),e(D2,j9o),e(q,D9o),e(q,G2),e(G2,Yce),e(Yce,G9o),e(G2,O9o),e(G2,jD),e(jD,V9o),e(G2,X9o),e(q,z9o),e(q,O2),e(O2,Kce),e(Kce,W9o),e(O2,Q9o),e(O2,DD),e(DD,H9o),e(O2,U9o),e(q,J9o),e(q,V2),e(V2,Zce),e(Zce,Y9o),e(V2,K9o),e(V2,GD),e(GD,Z9o),e(V2,e7o),e(q,o7o),e(q,X2),e(X2,eme),e(eme,r7o),e(X2,t7o),e(X2,OD),e(OD,a7o),e(X2,n7o),e(q,s7o),e(q,z2),e(z2,ome),e(ome,l7o),e(z2,i7o),e(z2,VD),e(VD,d7o),e(z2,c7o),e(q,m7o),e(q,W2),e(W2,rme),e(rme,f7o),e(W2,g7o),e(W2,XD),e(XD,h7o),e(W2,u7o),e(q,p7o),e(q,Q2),e(Q2,tme),e(tme,_7o),e(Q2,b7o),e(Q2,zD),e(zD,v7o),e(Q2,F7o),e(q,T7o),e(q,H2),e(H2,ame),e(ame,M7o),e(H2,E7o),e(H2,WD),e(WD,C7o),e(H2,w7o),e(q,A7o),e(q,U2),e(U2,nme),e(nme,y7o),e(U2,L7o),e(U2,QD),e(QD,x7o),e(U2,$7o),e(q,k7o),e(q,J2),e(J2,sme),e(sme,S7o),e(J2,R7o),e(J2,HD),e(HD,P7o),e(J2,B7o),e(q,I7o),e(q,Y2),e(Y2,lme),e(lme,q7o),e(Y2,N7o),e(Y2,UD),e(UD,j7o),e(Y2,D7o),e(q,G7o),e(q,K2),e(K2,ime),e(ime,O7o),e(K2,V7o),e(K2,JD),e(JD,X7o),e(K2,z7o),e(q,W7o),e(q,Z2),e(Z2,dme),e(dme,Q7o),e(Z2,H7o),e(Z2,YD),e(YD,U7o),e(Z2,J7o),e(q,Y7o),e(q,ev),e(ev,cme),e(cme,K7o),e(ev,Z7o),e(ev,KD),e(KD,e$o),e(ev,o$o),e(q,r$o),e(q,ov),e(ov,mme),e(mme,t$o),e(ov,a$o),e(ov,ZD),e(ZD,n$o),e(ov,s$o),e(q,l$o),e(q,rv),e(rv,fme),e(fme,i$o),e(rv,d$o),e(rv,eG),e(eG,c$o),e(rv,m$o),e(q,f$o),e(q,tv),e(tv,gme),e(gme,g$o),e(tv,h$o),e(tv,oG),e(oG,u$o),e(tv,p$o),e(q,_$o),e(q,av),e(av,hme),e(hme,b$o),e(av,v$o),e(av,rG),e(rG,F$o),e(av,T$o),e(q,M$o),e(q,nv),e(nv,ume),e(ume,E$o),e(nv,C$o),e(nv,tG),e(tG,w$o),e(nv,A$o),e(q,y$o),e(q,sv),e(sv,pme),e(pme,L$o),e(sv,x$o),e(sv,aG),e(aG,$$o),e(sv,k$o),e(q,S$o),e(q,lv),e(lv,_me),e(_me,R$o),e(lv,P$o),e(lv,nG),e(nG,B$o),e(lv,I$o),e(q,q$o),e(q,iv),e(iv,bme),e(bme,N$o),e(iv,j$o),e(iv,sG),e(sG,D$o),e(iv,G$o),e(q,O$o),e(q,dv),e(dv,vme),e(vme,V$o),e(dv,X$o),e(dv,lG),e(lG,z$o),e(dv,W$o),e(q,Q$o),e(q,cv),e(cv,Fme),e(Fme,H$o),e(cv,U$o),e(cv,iG),e(iG,J$o),e(cv,Y$o),e(q,K$o),e(q,mv),e(mv,Tme),e(Tme,Z$o),e(mv,eko),e(mv,dG),e(dG,oko),e(mv,rko),e(q,tko),e(q,fv),e(fv,Mme),e(Mme,ako),e(fv,nko),e(fv,cG),e(cG,sko),e(fv,lko),e(q,iko),e(q,gv),e(gv,Eme),e(Eme,dko),e(gv,cko),e(gv,mG),e(mG,mko),e(gv,fko),e(q,gko),e(q,hv),e(hv,Cme),e(Cme,hko),e(hv,uko),e(hv,fG),e(fG,pko),e(hv,_ko),e(q,bko),e(q,uv),e(uv,wme),e(wme,vko),e(uv,Fko),e(uv,gG),e(gG,Tko),e(uv,Mko),e(q,Eko),e(q,pv),e(pv,Ame),e(Ame,Cko),e(pv,wko),e(pv,hG),e(hG,Ako),e(pv,yko),e(q,Lko),e(q,_v),e(_v,yme),e(yme,xko),e(_v,$ko),e(_v,uG),e(uG,kko),e(_v,Sko),e(q,Rko),e(q,bv),e(bv,Lme),e(Lme,Pko),e(bv,Bko),e(bv,pG),e(pG,Iko),e(bv,qko),e(oo,Nko),e(oo,vv),e(vv,jko),e(vv,xme),e(xme,Dko),e(vv,Gko),e(vv,$me),e($me,Oko),e(oo,Vko),M(Fv,oo,null),b(m,JIe,_),b(m,Oi,_),e(Oi,Tv),e(Tv,kme),M(dL,kme,null),e(Oi,Xko),e(Oi,Sme),e(Sme,zko),b(m,YIe,_),b(m,Po,_),M(cL,Po,null),e(Po,Wko),e(Po,Vi),e(Vi,Qko),e(Vi,_G),e(_G,Hko),e(Vi,Uko),e(Vi,bG),e(bG,Jko),e(Vi,Yko),e(Po,Kko),e(Po,mL),e(mL,Zko),e(mL,Rme),e(Rme,eSo),e(mL,oSo),e(Po,rSo),e(Po,dt),M(fL,dt,null),e(dt,tSo),e(dt,Pme),e(Pme,aSo),e(dt,nSo),e(dt,Xi),e(Xi,sSo),e(Xi,Bme),e(Bme,lSo),e(Xi,iSo),e(Xi,vG),e(vG,dSo),e(Xi,cSo),e(dt,mSo),M(Mv,dt,null),e(Po,fSo),e(Po,ro),M(gL,ro,null),e(ro,gSo),e(ro,Ime),e(Ime,hSo),e(ro,uSo),e(ro,Pa),e(Pa,pSo),e(Pa,qme),e(qme,_So),e(Pa,bSo),e(Pa,Nme),e(Nme,vSo),e(Pa,FSo),e(Pa,jme),e(jme,TSo),e(Pa,MSo),e(ro,ESo),e(ro,Y),e(Y,Ev),e(Ev,Dme),e(Dme,CSo),e(Ev,wSo),e(Ev,FG),e(FG,ASo),e(Ev,ySo),e(Y,LSo),e(Y,Cv),e(Cv,Gme),e(Gme,xSo),e(Cv,$So),e(Cv,TG),e(TG,kSo),e(Cv,SSo),e(Y,RSo),e(Y,wv),e(wv,Ome),e(Ome,PSo),e(wv,BSo),e(wv,MG),e(MG,ISo),e(wv,qSo),e(Y,NSo),e(Y,Av),e(Av,Vme),e(Vme,jSo),e(Av,DSo),e(Av,EG),e(EG,GSo),e(Av,OSo),e(Y,VSo),e(Y,yv),e(yv,Xme),e(Xme,XSo),e(yv,zSo),e(yv,CG),e(CG,WSo),e(yv,QSo),e(Y,HSo),e(Y,Lv),e(Lv,zme),e(zme,USo),e(Lv,JSo),e(Lv,wG),e(wG,YSo),e(Lv,KSo),e(Y,ZSo),e(Y,xv),e(xv,Wme),e(Wme,eRo),e(xv,oRo),e(xv,AG),e(AG,rRo),e(xv,tRo),e(Y,aRo),e(Y,$v),e($v,Qme),e(Qme,nRo),e($v,sRo),e($v,yG),e(yG,lRo),e($v,iRo),e(Y,dRo),e(Y,kv),e(kv,Hme),e(Hme,cRo),e(kv,mRo),e(kv,LG),e(LG,fRo),e(kv,gRo),e(Y,hRo),e(Y,Sv),e(Sv,Ume),e(Ume,uRo),e(Sv,pRo),e(Sv,xG),e(xG,_Ro),e(Sv,bRo),e(Y,vRo),e(Y,Rv),e(Rv,Jme),e(Jme,FRo),e(Rv,TRo),e(Rv,$G),e($G,MRo),e(Rv,ERo),e(Y,CRo),e(Y,Pv),e(Pv,Yme),e(Yme,wRo),e(Pv,ARo),e(Pv,kG),e(kG,yRo),e(Pv,LRo),e(Y,xRo),e(Y,Bv),e(Bv,Kme),e(Kme,$Ro),e(Bv,kRo),e(Bv,SG),e(SG,SRo),e(Bv,RRo),e(Y,PRo),e(Y,Iv),e(Iv,Zme),e(Zme,BRo),e(Iv,IRo),e(Iv,RG),e(RG,qRo),e(Iv,NRo),e(Y,jRo),e(Y,qv),e(qv,efe),e(efe,DRo),e(qv,GRo),e(qv,PG),e(PG,ORo),e(qv,VRo),e(Y,XRo),e(Y,Nv),e(Nv,ofe),e(ofe,zRo),e(Nv,WRo),e(Nv,BG),e(BG,QRo),e(Nv,HRo),e(Y,URo),e(Y,jv),e(jv,rfe),e(rfe,JRo),e(jv,YRo),e(jv,IG),e(IG,KRo),e(jv,ZRo),e(Y,ePo),e(Y,Dv),e(Dv,tfe),e(tfe,oPo),e(Dv,rPo),e(Dv,qG),e(qG,tPo),e(Dv,aPo),e(Y,nPo),e(Y,Gv),e(Gv,afe),e(afe,sPo),e(Gv,lPo),e(Gv,NG),e(NG,iPo),e(Gv,dPo),e(Y,cPo),e(Y,Ov),e(Ov,nfe),e(nfe,mPo),e(Ov,fPo),e(Ov,jG),e(jG,gPo),e(Ov,hPo),e(Y,uPo),e(Y,Vv),e(Vv,sfe),e(sfe,pPo),e(Vv,_Po),e(Vv,DG),e(DG,bPo),e(Vv,vPo),e(Y,FPo),e(Y,Xv),e(Xv,lfe),e(lfe,TPo),e(Xv,MPo),e(Xv,GG),e(GG,EPo),e(Xv,CPo),e(Y,wPo),e(Y,zv),e(zv,ife),e(ife,APo),e(zv,yPo),e(zv,OG),e(OG,LPo),e(zv,xPo),e(Y,$Po),e(Y,Wv),e(Wv,dfe),e(dfe,kPo),e(Wv,SPo),e(Wv,VG),e(VG,RPo),e(Wv,PPo),e(Y,BPo),e(Y,Qv),e(Qv,cfe),e(cfe,IPo),e(Qv,qPo),e(Qv,XG),e(XG,NPo),e(Qv,jPo),e(Y,DPo),e(Y,Hv),e(Hv,mfe),e(mfe,GPo),e(Hv,OPo),e(Hv,zG),e(zG,VPo),e(Hv,XPo),e(Y,zPo),e(Y,Uv),e(Uv,ffe),e(ffe,WPo),e(Uv,QPo),e(Uv,WG),e(WG,HPo),e(Uv,UPo),e(Y,JPo),e(Y,Jv),e(Jv,gfe),e(gfe,YPo),e(Jv,KPo),e(Jv,QG),e(QG,ZPo),e(Jv,eBo),e(Y,oBo),e(Y,Yv),e(Yv,hfe),e(hfe,rBo),e(Yv,tBo),e(Yv,HG),e(HG,aBo),e(Yv,nBo),e(ro,sBo),e(ro,Kv),e(Kv,lBo),e(Kv,ufe),e(ufe,iBo),e(Kv,dBo),e(Kv,pfe),e(pfe,cBo),e(ro,mBo),M(Zv,ro,null),b(m,KIe,_),b(m,zi,_),e(zi,eF),e(eF,_fe),M(hL,_fe,null),e(zi,fBo),e(zi,bfe),e(bfe,gBo),b(m,ZIe,_),b(m,Bo,_),M(uL,Bo,null),e(Bo,hBo),e(Bo,Wi),e(Wi,uBo),e(Wi,UG),e(UG,pBo),e(Wi,_Bo),e(Wi,JG),e(JG,bBo),e(Wi,vBo),e(Bo,FBo),e(Bo,pL),e(pL,TBo),e(pL,vfe),e(vfe,MBo),e(pL,EBo),e(Bo,CBo),e(Bo,ct),M(_L,ct,null),e(ct,wBo),e(ct,Ffe),e(Ffe,ABo),e(ct,yBo),e(ct,Qi),e(Qi,LBo),e(Qi,Tfe),e(Tfe,xBo),e(Qi,$Bo),e(Qi,YG),e(YG,kBo),e(Qi,SBo),e(ct,RBo),M(oF,ct,null),e(Bo,PBo),e(Bo,to),M(bL,to,null),e(to,BBo),e(to,Mfe),e(Mfe,IBo),e(to,qBo),e(to,Ba),e(Ba,NBo),e(Ba,Efe),e(Efe,jBo),e(Ba,DBo),e(Ba,Cfe),e(Cfe,GBo),e(Ba,OBo),e(Ba,wfe),e(wfe,VBo),e(Ba,XBo),e(to,zBo),e(to,Yr),e(Yr,rF),e(rF,Afe),e(Afe,WBo),e(rF,QBo),e(rF,KG),e(KG,HBo),e(rF,UBo),e(Yr,JBo),e(Yr,tF),e(tF,yfe),e(yfe,YBo),e(tF,KBo),e(tF,ZG),e(ZG,ZBo),e(tF,eIo),e(Yr,oIo),e(Yr,aF),e(aF,Lfe),e(Lfe,rIo),e(aF,tIo),e(aF,eO),e(eO,aIo),e(aF,nIo),e(Yr,sIo),e(Yr,nF),e(nF,xfe),e(xfe,lIo),e(nF,iIo),e(nF,oO),e(oO,dIo),e(nF,cIo),e(Yr,mIo),e(Yr,sF),e(sF,$fe),e($fe,fIo),e(sF,gIo),e(sF,rO),e(rO,hIo),e(sF,uIo),e(to,pIo),e(to,lF),e(lF,_Io),e(lF,kfe),e(kfe,bIo),e(lF,vIo),e(lF,Sfe),e(Sfe,FIo),e(to,TIo),M(iF,to,null),b(m,eqe,_),b(m,Hi,_),e(Hi,dF),e(dF,Rfe),M(vL,Rfe,null),e(Hi,MIo),e(Hi,Pfe),e(Pfe,EIo),b(m,oqe,_),b(m,Io,_),M(FL,Io,null),e(Io,CIo),e(Io,Ui),e(Ui,wIo),e(Ui,tO),e(tO,AIo),e(Ui,yIo),e(Ui,aO),e(aO,LIo),e(Ui,xIo),e(Io,$Io),e(Io,TL),e(TL,kIo),e(TL,Bfe),e(Bfe,SIo),e(TL,RIo),e(Io,PIo),e(Io,mt),M(ML,mt,null),e(mt,BIo),e(mt,Ife),e(Ife,IIo),e(mt,qIo),e(mt,Ji),e(Ji,NIo),e(Ji,qfe),e(qfe,jIo),e(Ji,DIo),e(Ji,nO),e(nO,GIo),e(Ji,OIo),e(mt,VIo),M(cF,mt,null),e(Io,XIo),e(Io,ao),M(EL,ao,null),e(ao,zIo),e(ao,Nfe),e(Nfe,WIo),e(ao,QIo),e(ao,Ia),e(Ia,HIo),e(Ia,jfe),e(jfe,UIo),e(Ia,JIo),e(Ia,Dfe),e(Dfe,YIo),e(Ia,KIo),e(Ia,Gfe),e(Gfe,ZIo),e(Ia,eqo),e(ao,oqo),e(ao,U),e(U,mF),e(mF,Ofe),e(Ofe,rqo),e(mF,tqo),e(mF,sO),e(sO,aqo),e(mF,nqo),e(U,sqo),e(U,fF),e(fF,Vfe),e(Vfe,lqo),e(fF,iqo),e(fF,lO),e(lO,dqo),e(fF,cqo),e(U,mqo),e(U,gF),e(gF,Xfe),e(Xfe,fqo),e(gF,gqo),e(gF,iO),e(iO,hqo),e(gF,uqo),e(U,pqo),e(U,hF),e(hF,zfe),e(zfe,_qo),e(hF,bqo),e(hF,dO),e(dO,vqo),e(hF,Fqo),e(U,Tqo),e(U,uF),e(uF,Wfe),e(Wfe,Mqo),e(uF,Eqo),e(uF,cO),e(cO,Cqo),e(uF,wqo),e(U,Aqo),e(U,pF),e(pF,Qfe),e(Qfe,yqo),e(pF,Lqo),e(pF,mO),e(mO,xqo),e(pF,$qo),e(U,kqo),e(U,_F),e(_F,Hfe),e(Hfe,Sqo),e(_F,Rqo),e(_F,fO),e(fO,Pqo),e(_F,Bqo),e(U,Iqo),e(U,bF),e(bF,Ufe),e(Ufe,qqo),e(bF,Nqo),e(bF,gO),e(gO,jqo),e(bF,Dqo),e(U,Gqo),e(U,vF),e(vF,Jfe),e(Jfe,Oqo),e(vF,Vqo),e(vF,hO),e(hO,Xqo),e(vF,zqo),e(U,Wqo),e(U,FF),e(FF,Yfe),e(Yfe,Qqo),e(FF,Hqo),e(FF,uO),e(uO,Uqo),e(FF,Jqo),e(U,Yqo),e(U,TF),e(TF,Kfe),e(Kfe,Kqo),e(TF,Zqo),e(TF,pO),e(pO,eNo),e(TF,oNo),e(U,rNo),e(U,MF),e(MF,Zfe),e(Zfe,tNo),e(MF,aNo),e(MF,_O),e(_O,nNo),e(MF,sNo),e(U,lNo),e(U,EF),e(EF,ege),e(ege,iNo),e(EF,dNo),e(EF,bO),e(bO,cNo),e(EF,mNo),e(U,fNo),e(U,CF),e(CF,oge),e(oge,gNo),e(CF,hNo),e(CF,vO),e(vO,uNo),e(CF,pNo),e(U,_No),e(U,wF),e(wF,rge),e(rge,bNo),e(wF,vNo),e(wF,FO),e(FO,FNo),e(wF,TNo),e(U,MNo),e(U,AF),e(AF,tge),e(tge,ENo),e(AF,CNo),e(AF,TO),e(TO,wNo),e(AF,ANo),e(U,yNo),e(U,yF),e(yF,age),e(age,LNo),e(yF,xNo),e(yF,MO),e(MO,$No),e(yF,kNo),e(U,SNo),e(U,LF),e(LF,nge),e(nge,RNo),e(LF,PNo),e(LF,EO),e(EO,BNo),e(LF,INo),e(U,qNo),e(U,xF),e(xF,sge),e(sge,NNo),e(xF,jNo),e(xF,CO),e(CO,DNo),e(xF,GNo),e(U,ONo),e(U,$F),e($F,lge),e(lge,VNo),e($F,XNo),e($F,wO),e(wO,zNo),e($F,WNo),e(U,QNo),e(U,kF),e(kF,ige),e(ige,HNo),e(kF,UNo),e(kF,AO),e(AO,JNo),e(kF,YNo),e(U,KNo),e(U,SF),e(SF,dge),e(dge,ZNo),e(SF,ejo),e(SF,yO),e(yO,ojo),e(SF,rjo),e(U,tjo),e(U,RF),e(RF,cge),e(cge,ajo),e(RF,njo),e(RF,LO),e(LO,sjo),e(RF,ljo),e(U,ijo),e(U,PF),e(PF,mge),e(mge,djo),e(PF,cjo),e(PF,xO),e(xO,mjo),e(PF,fjo),e(U,gjo),e(U,BF),e(BF,fge),e(fge,hjo),e(BF,ujo),e(BF,$O),e($O,pjo),e(BF,_jo),e(U,bjo),e(U,IF),e(IF,gge),e(gge,vjo),e(IF,Fjo),e(IF,kO),e(kO,Tjo),e(IF,Mjo),e(U,Ejo),e(U,qF),e(qF,hge),e(hge,Cjo),e(qF,wjo),e(qF,SO),e(SO,Ajo),e(qF,yjo),e(U,Ljo),e(U,NF),e(NF,uge),e(uge,xjo),e(NF,$jo),e(NF,RO),e(RO,kjo),e(NF,Sjo),e(U,Rjo),e(U,jF),e(jF,pge),e(pge,Pjo),e(jF,Bjo),e(jF,PO),e(PO,Ijo),e(jF,qjo),e(U,Njo),e(U,DF),e(DF,_ge),e(_ge,jjo),e(DF,Djo),e(DF,BO),e(BO,Gjo),e(DF,Ojo),e(U,Vjo),e(U,GF),e(GF,bge),e(bge,Xjo),e(GF,zjo),e(GF,IO),e(IO,Wjo),e(GF,Qjo),e(U,Hjo),e(U,OF),e(OF,vge),e(vge,Ujo),e(OF,Jjo),e(OF,qO),e(qO,Yjo),e(OF,Kjo),e(U,Zjo),e(U,VF),e(VF,Fge),e(Fge,eDo),e(VF,oDo),e(VF,NO),e(NO,rDo),e(VF,tDo),e(ao,aDo),e(ao,XF),e(XF,nDo),e(XF,Tge),e(Tge,sDo),e(XF,lDo),e(XF,Mge),e(Mge,iDo),e(ao,dDo),M(zF,ao,null),b(m,rqe,_),b(m,Yi,_),e(Yi,WF),e(WF,Ege),M(CL,Ege,null),e(Yi,cDo),e(Yi,Cge),e(Cge,mDo),b(m,tqe,_),b(m,qo,_),M(wL,qo,null),e(qo,fDo),e(qo,Ki),e(Ki,gDo),e(Ki,jO),e(jO,hDo),e(Ki,uDo),e(Ki,DO),e(DO,pDo),e(Ki,_Do),e(qo,bDo),e(qo,AL),e(AL,vDo),e(AL,wge),e(wge,FDo),e(AL,TDo),e(qo,MDo),e(qo,ft),M(yL,ft,null),e(ft,EDo),e(ft,Age),e(Age,CDo),e(ft,wDo),e(ft,Zi),e(Zi,ADo),e(Zi,yge),e(yge,yDo),e(Zi,LDo),e(Zi,GO),e(GO,xDo),e(Zi,$Do),e(ft,kDo),M(QF,ft,null),e(qo,SDo),e(qo,no),M(LL,no,null),e(no,RDo),e(no,Lge),e(Lge,PDo),e(no,BDo),e(no,qa),e(qa,IDo),e(qa,xge),e(xge,qDo),e(qa,NDo),e(qa,$ge),e($ge,jDo),e(qa,DDo),e(qa,kge),e(kge,GDo),e(qa,ODo),e(no,VDo),e(no,V),e(V,HF),e(HF,Sge),e(Sge,XDo),e(HF,zDo),e(HF,OO),e(OO,WDo),e(HF,QDo),e(V,HDo),e(V,UF),e(UF,Rge),e(Rge,UDo),e(UF,JDo),e(UF,VO),e(VO,YDo),e(UF,KDo),e(V,ZDo),e(V,JF),e(JF,Pge),e(Pge,eGo),e(JF,oGo),e(JF,XO),e(XO,rGo),e(JF,tGo),e(V,aGo),e(V,YF),e(YF,Bge),e(Bge,nGo),e(YF,sGo),e(YF,zO),e(zO,lGo),e(YF,iGo),e(V,dGo),e(V,KF),e(KF,Ige),e(Ige,cGo),e(KF,mGo),e(KF,WO),e(WO,fGo),e(KF,gGo),e(V,hGo),e(V,ZF),e(ZF,qge),e(qge,uGo),e(ZF,pGo),e(ZF,QO),e(QO,_Go),e(ZF,bGo),e(V,vGo),e(V,e1),e(e1,Nge),e(Nge,FGo),e(e1,TGo),e(e1,HO),e(HO,MGo),e(e1,EGo),e(V,CGo),e(V,o1),e(o1,jge),e(jge,wGo),e(o1,AGo),e(o1,UO),e(UO,yGo),e(o1,LGo),e(V,xGo),e(V,r1),e(r1,Dge),e(Dge,$Go),e(r1,kGo),e(r1,JO),e(JO,SGo),e(r1,RGo),e(V,PGo),e(V,t1),e(t1,Gge),e(Gge,BGo),e(t1,IGo),e(t1,YO),e(YO,qGo),e(t1,NGo),e(V,jGo),e(V,a1),e(a1,Oge),e(Oge,DGo),e(a1,GGo),e(a1,KO),e(KO,OGo),e(a1,VGo),e(V,XGo),e(V,n1),e(n1,Vge),e(Vge,zGo),e(n1,WGo),e(n1,ZO),e(ZO,QGo),e(n1,HGo),e(V,UGo),e(V,s1),e(s1,Xge),e(Xge,JGo),e(s1,YGo),e(s1,eV),e(eV,KGo),e(s1,ZGo),e(V,eOo),e(V,l1),e(l1,zge),e(zge,oOo),e(l1,rOo),e(l1,oV),e(oV,tOo),e(l1,aOo),e(V,nOo),e(V,i1),e(i1,Wge),e(Wge,sOo),e(i1,lOo),e(i1,rV),e(rV,iOo),e(i1,dOo),e(V,cOo),e(V,d1),e(d1,Qge),e(Qge,mOo),e(d1,fOo),e(d1,tV),e(tV,gOo),e(d1,hOo),e(V,uOo),e(V,c1),e(c1,Hge),e(Hge,pOo),e(c1,_Oo),e(c1,aV),e(aV,bOo),e(c1,vOo),e(V,FOo),e(V,m1),e(m1,Uge),e(Uge,TOo),e(m1,MOo),e(m1,nV),e(nV,EOo),e(m1,COo),e(V,wOo),e(V,f1),e(f1,Jge),e(Jge,AOo),e(f1,yOo),e(f1,sV),e(sV,LOo),e(f1,xOo),e(V,$Oo),e(V,g1),e(g1,Yge),e(Yge,kOo),e(g1,SOo),e(g1,lV),e(lV,ROo),e(g1,POo),e(V,BOo),e(V,h1),e(h1,Kge),e(Kge,IOo),e(h1,qOo),e(h1,iV),e(iV,NOo),e(h1,jOo),e(V,DOo),e(V,u1),e(u1,Zge),e(Zge,GOo),e(u1,OOo),e(u1,dV),e(dV,VOo),e(u1,XOo),e(V,zOo),e(V,p1),e(p1,ehe),e(ehe,WOo),e(p1,QOo),e(p1,cV),e(cV,HOo),e(p1,UOo),e(V,JOo),e(V,_1),e(_1,ohe),e(ohe,YOo),e(_1,KOo),e(_1,mV),e(mV,ZOo),e(_1,eVo),e(V,oVo),e(V,b1),e(b1,rhe),e(rhe,rVo),e(b1,tVo),e(b1,fV),e(fV,aVo),e(b1,nVo),e(V,sVo),e(V,v1),e(v1,the),e(the,lVo),e(v1,iVo),e(v1,gV),e(gV,dVo),e(v1,cVo),e(V,mVo),e(V,F1),e(F1,ahe),e(ahe,fVo),e(F1,gVo),e(F1,hV),e(hV,hVo),e(F1,uVo),e(V,pVo),e(V,T1),e(T1,nhe),e(nhe,_Vo),e(T1,bVo),e(T1,uV),e(uV,vVo),e(T1,FVo),e(V,TVo),e(V,M1),e(M1,she),e(she,MVo),e(M1,EVo),e(M1,pV),e(pV,CVo),e(M1,wVo),e(V,AVo),e(V,E1),e(E1,lhe),e(lhe,yVo),e(E1,LVo),e(E1,_V),e(_V,xVo),e(E1,$Vo),e(V,kVo),e(V,C1),e(C1,ihe),e(ihe,SVo),e(C1,RVo),e(C1,bV),e(bV,PVo),e(C1,BVo),e(V,IVo),e(V,w1),e(w1,dhe),e(dhe,qVo),e(w1,NVo),e(w1,vV),e(vV,jVo),e(w1,DVo),e(V,GVo),e(V,A1),e(A1,che),e(che,OVo),e(A1,VVo),e(A1,FV),e(FV,XVo),e(A1,zVo),e(V,WVo),e(V,y1),e(y1,mhe),e(mhe,QVo),e(y1,HVo),e(y1,TV),e(TV,UVo),e(y1,JVo),e(V,YVo),e(V,L1),e(L1,fhe),e(fhe,KVo),e(L1,ZVo),e(L1,MV),e(MV,eXo),e(L1,oXo),e(V,rXo),e(V,x1),e(x1,ghe),e(ghe,tXo),e(x1,aXo),e(x1,EV),e(EV,nXo),e(x1,sXo),e(V,lXo),e(V,$1),e($1,hhe),e(hhe,iXo),e($1,dXo),e($1,CV),e(CV,cXo),e($1,mXo),e(V,fXo),e(V,k1),e(k1,uhe),e(uhe,gXo),e(k1,hXo),e(k1,wV),e(wV,uXo),e(k1,pXo),e(V,_Xo),e(V,S1),e(S1,phe),e(phe,bXo),e(S1,vXo),e(S1,AV),e(AV,FXo),e(S1,TXo),e(no,MXo),e(no,R1),e(R1,EXo),e(R1,_he),e(_he,CXo),e(R1,wXo),e(R1,bhe),e(bhe,AXo),e(no,yXo),M(P1,no,null),b(m,aqe,_),b(m,ed,_),e(ed,B1),e(B1,vhe),M(xL,vhe,null),e(ed,LXo),e(ed,Fhe),e(Fhe,xXo),b(m,nqe,_),b(m,No,_),M($L,No,null),e(No,$Xo),e(No,od),e(od,kXo),e(od,yV),e(yV,SXo),e(od,RXo),e(od,LV),e(LV,PXo),e(od,BXo),e(No,IXo),e(No,kL),e(kL,qXo),e(kL,The),e(The,NXo),e(kL,jXo),e(No,DXo),e(No,gt),M(SL,gt,null),e(gt,GXo),e(gt,Mhe),e(Mhe,OXo),e(gt,VXo),e(gt,rd),e(rd,XXo),e(rd,Ehe),e(Ehe,zXo),e(rd,WXo),e(rd,xV),e(xV,QXo),e(rd,HXo),e(gt,UXo),M(I1,gt,null),e(No,JXo),e(No,so),M(RL,so,null),e(so,YXo),e(so,Che),e(Che,KXo),e(so,ZXo),e(so,Na),e(Na,ezo),e(Na,whe),e(whe,ozo),e(Na,rzo),e(Na,Ahe),e(Ahe,tzo),e(Na,azo),e(Na,yhe),e(yhe,nzo),e(Na,szo),e(so,lzo),e(so,Lhe),e(Lhe,q1),e(q1,xhe),e(xhe,izo),e(q1,dzo),e(q1,$V),e($V,czo),e(q1,mzo),e(so,fzo),e(so,N1),e(N1,gzo),e(N1,$he),e($he,hzo),e(N1,uzo),e(N1,khe),e(khe,pzo),e(so,_zo),M(j1,so,null),b(m,sqe,_),b(m,td,_),e(td,D1),e(D1,She),M(PL,She,null),e(td,bzo),e(td,Rhe),e(Rhe,vzo),b(m,lqe,_),b(m,jo,_),M(BL,jo,null),e(jo,Fzo),e(jo,ad),e(ad,Tzo),e(ad,kV),e(kV,Mzo),e(ad,Ezo),e(ad,SV),e(SV,Czo),e(ad,wzo),e(jo,Azo),e(jo,IL),e(IL,yzo),e(IL,Phe),e(Phe,Lzo),e(IL,xzo),e(jo,$zo),e(jo,ht),M(qL,ht,null),e(ht,kzo),e(ht,Bhe),e(Bhe,Szo),e(ht,Rzo),e(ht,nd),e(nd,Pzo),e(nd,Ihe),e(Ihe,Bzo),e(nd,Izo),e(nd,RV),e(RV,qzo),e(nd,Nzo),e(ht,jzo),M(G1,ht,null),e(jo,Dzo),e(jo,lo),M(NL,lo,null),e(lo,Gzo),e(lo,qhe),e(qhe,Ozo),e(lo,Vzo),e(lo,ja),e(ja,Xzo),e(ja,Nhe),e(Nhe,zzo),e(ja,Wzo),e(ja,jhe),e(jhe,Qzo),e(ja,Hzo),e(ja,Dhe),e(Dhe,Uzo),e(ja,Jzo),e(lo,Yzo),e(lo,Fe),e(Fe,O1),e(O1,Ghe),e(Ghe,Kzo),e(O1,Zzo),e(O1,PV),e(PV,eWo),e(O1,oWo),e(Fe,rWo),e(Fe,V1),e(V1,Ohe),e(Ohe,tWo),e(V1,aWo),e(V1,BV),e(BV,nWo),e(V1,sWo),e(Fe,lWo),e(Fe,X1),e(X1,Vhe),e(Vhe,iWo),e(X1,dWo),e(X1,IV),e(IV,cWo),e(X1,mWo),e(Fe,fWo),e(Fe,Ps),e(Ps,Xhe),e(Xhe,gWo),e(Ps,hWo),e(Ps,qV),e(qV,uWo),e(Ps,pWo),e(Ps,NV),e(NV,_Wo),e(Ps,bWo),e(Fe,vWo),e(Fe,z1),e(z1,zhe),e(zhe,FWo),e(z1,TWo),e(z1,jV),e(jV,MWo),e(z1,EWo),e(Fe,CWo),e(Fe,ut),e(ut,Whe),e(Whe,wWo),e(ut,AWo),e(ut,DV),e(DV,yWo),e(ut,LWo),e(ut,GV),e(GV,xWo),e(ut,$Wo),e(ut,OV),e(OV,kWo),e(ut,SWo),e(Fe,RWo),e(Fe,W1),e(W1,Qhe),e(Qhe,PWo),e(W1,BWo),e(W1,VV),e(VV,IWo),e(W1,qWo),e(Fe,NWo),e(Fe,Q1),e(Q1,Hhe),e(Hhe,jWo),e(Q1,DWo),e(Q1,XV),e(XV,GWo),e(Q1,OWo),e(Fe,VWo),e(Fe,H1),e(H1,Uhe),e(Uhe,XWo),e(H1,zWo),e(H1,zV),e(zV,WWo),e(H1,QWo),e(Fe,HWo),e(Fe,U1),e(U1,Jhe),e(Jhe,UWo),e(U1,JWo),e(U1,WV),e(WV,YWo),e(U1,KWo),e(Fe,ZWo),e(Fe,J1),e(J1,Yhe),e(Yhe,eQo),e(J1,oQo),e(J1,QV),e(QV,rQo),e(J1,tQo),e(Fe,aQo),e(Fe,Y1),e(Y1,Khe),e(Khe,nQo),e(Y1,sQo),e(Y1,HV),e(HV,lQo),e(Y1,iQo),e(Fe,dQo),e(Fe,K1),e(K1,Zhe),e(Zhe,cQo),e(K1,mQo),e(K1,UV),e(UV,fQo),e(K1,gQo),e(lo,hQo),e(lo,Z1),e(Z1,uQo),e(Z1,eue),e(eue,pQo),e(Z1,_Qo),e(Z1,oue),e(oue,bQo),e(lo,vQo),M(eT,lo,null),b(m,iqe,_),b(m,sd,_),e(sd,oT),e(oT,rue),M(jL,rue,null),e(sd,FQo),e(sd,tue),e(tue,TQo),b(m,dqe,_),b(m,Do,_),M(DL,Do,null),e(Do,MQo),e(Do,ld),e(ld,EQo),e(ld,JV),e(JV,CQo),e(ld,wQo),e(ld,YV),e(YV,AQo),e(ld,yQo),e(Do,LQo),e(Do,GL),e(GL,xQo),e(GL,aue),e(aue,$Qo),e(GL,kQo),e(Do,SQo),e(Do,pt),M(OL,pt,null),e(pt,RQo),e(pt,nue),e(nue,PQo),e(pt,BQo),e(pt,id),e(id,IQo),e(id,sue),e(sue,qQo),e(id,NQo),e(id,KV),e(KV,jQo),e(id,DQo),e(pt,GQo),M(rT,pt,null),e(Do,OQo),e(Do,io),M(VL,io,null),e(io,VQo),e(io,lue),e(lue,XQo),e(io,zQo),e(io,Da),e(Da,WQo),e(Da,iue),e(iue,QQo),e(Da,HQo),e(Da,due),e(due,UQo),e(Da,JQo),e(Da,cue),e(cue,YQo),e(Da,KQo),e(io,ZQo),e(io,mue),e(mue,tT),e(tT,fue),e(fue,eHo),e(tT,oHo),e(tT,ZV),e(ZV,rHo),e(tT,tHo),e(io,aHo),e(io,aT),e(aT,nHo),e(aT,gue),e(gue,sHo),e(aT,lHo),e(aT,hue),e(hue,iHo),e(io,dHo),M(nT,io,null),b(m,cqe,_),b(m,dd,_),e(dd,sT),e(sT,uue),M(XL,uue,null),e(dd,cHo),e(dd,pue),e(pue,mHo),b(m,mqe,_),b(m,Go,_),M(zL,Go,null),e(Go,fHo),e(Go,cd),e(cd,gHo),e(cd,eX),e(eX,hHo),e(cd,uHo),e(cd,oX),e(oX,pHo),e(cd,_Ho),e(Go,bHo),e(Go,WL),e(WL,vHo),e(WL,_ue),e(_ue,FHo),e(WL,THo),e(Go,MHo),e(Go,_t),M(QL,_t,null),e(_t,EHo),e(_t,bue),e(bue,CHo),e(_t,wHo),e(_t,md),e(md,AHo),e(md,vue),e(vue,yHo),e(md,LHo),e(md,rX),e(rX,xHo),e(md,$Ho),e(_t,kHo),M(lT,_t,null),e(Go,SHo),e(Go,co),M(HL,co,null),e(co,RHo),e(co,Fue),e(Fue,PHo),e(co,BHo),e(co,Ga),e(Ga,IHo),e(Ga,Tue),e(Tue,qHo),e(Ga,NHo),e(Ga,Mue),e(Mue,jHo),e(Ga,DHo),e(Ga,Eue),e(Eue,GHo),e(Ga,OHo),e(co,VHo),e(co,ke),e(ke,iT),e(iT,Cue),e(Cue,XHo),e(iT,zHo),e(iT,tX),e(tX,WHo),e(iT,QHo),e(ke,HHo),e(ke,dT),e(dT,wue),e(wue,UHo),e(dT,JHo),e(dT,aX),e(aX,YHo),e(dT,KHo),e(ke,ZHo),e(ke,cT),e(cT,Aue),e(Aue,eUo),e(cT,oUo),e(cT,nX),e(nX,rUo),e(cT,tUo),e(ke,aUo),e(ke,mT),e(mT,yue),e(yue,nUo),e(mT,sUo),e(mT,sX),e(sX,lUo),e(mT,iUo),e(ke,dUo),e(ke,fT),e(fT,Lue),e(Lue,cUo),e(fT,mUo),e(fT,lX),e(lX,fUo),e(fT,gUo),e(ke,hUo),e(ke,gT),e(gT,xue),e(xue,uUo),e(gT,pUo),e(gT,iX),e(iX,_Uo),e(gT,bUo),e(ke,vUo),e(ke,hT),e(hT,$ue),e($ue,FUo),e(hT,TUo),e(hT,dX),e(dX,MUo),e(hT,EUo),e(ke,CUo),e(ke,uT),e(uT,kue),e(kue,wUo),e(uT,AUo),e(uT,cX),e(cX,yUo),e(uT,LUo),e(ke,xUo),e(ke,pT),e(pT,Sue),e(Sue,$Uo),e(pT,kUo),e(pT,mX),e(mX,SUo),e(pT,RUo),e(co,PUo),e(co,_T),e(_T,BUo),e(_T,Rue),e(Rue,IUo),e(_T,qUo),e(_T,Pue),e(Pue,NUo),e(co,jUo),M(bT,co,null),b(m,fqe,_),b(m,fd,_),e(fd,vT),e(vT,Bue),M(UL,Bue,null),e(fd,DUo),e(fd,Iue),e(Iue,GUo),b(m,gqe,_),b(m,Oo,_),M(JL,Oo,null),e(Oo,OUo),e(Oo,gd),e(gd,VUo),e(gd,fX),e(fX,XUo),e(gd,zUo),e(gd,gX),e(gX,WUo),e(gd,QUo),e(Oo,HUo),e(Oo,YL),e(YL,UUo),e(YL,que),e(que,JUo),e(YL,YUo),e(Oo,KUo),e(Oo,bt),M(KL,bt,null),e(bt,ZUo),e(bt,Nue),e(Nue,eJo),e(bt,oJo),e(bt,hd),e(hd,rJo),e(hd,jue),e(jue,tJo),e(hd,aJo),e(hd,hX),e(hX,nJo),e(hd,sJo),e(bt,lJo),M(FT,bt,null),e(Oo,iJo),e(Oo,mo),M(ZL,mo,null),e(mo,dJo),e(mo,Due),e(Due,cJo),e(mo,mJo),e(mo,Oa),e(Oa,fJo),e(Oa,Gue),e(Gue,gJo),e(Oa,hJo),e(Oa,Oue),e(Oue,uJo),e(Oa,pJo),e(Oa,Vue),e(Vue,_Jo),e(Oa,bJo),e(mo,vJo),e(mo,Kr),e(Kr,TT),e(TT,Xue),e(Xue,FJo),e(TT,TJo),e(TT,uX),e(uX,MJo),e(TT,EJo),e(Kr,CJo),e(Kr,MT),e(MT,zue),e(zue,wJo),e(MT,AJo),e(MT,pX),e(pX,yJo),e(MT,LJo),e(Kr,xJo),e(Kr,ET),e(ET,Wue),e(Wue,$Jo),e(ET,kJo),e(ET,_X),e(_X,SJo),e(ET,RJo),e(Kr,PJo),e(Kr,CT),e(CT,Que),e(Que,BJo),e(CT,IJo),e(CT,bX),e(bX,qJo),e(CT,NJo),e(Kr,jJo),e(Kr,wT),e(wT,Hue),e(Hue,DJo),e(wT,GJo),e(wT,vX),e(vX,OJo),e(wT,VJo),e(mo,XJo),e(mo,AT),e(AT,zJo),e(AT,Uue),e(Uue,WJo),e(AT,QJo),e(AT,Jue),e(Jue,HJo),e(mo,UJo),M(yT,mo,null),b(m,hqe,_),b(m,ud,_),e(ud,LT),e(LT,Yue),M(e8,Yue,null),e(ud,JJo),e(ud,Kue),e(Kue,YJo),b(m,uqe,_),b(m,Vo,_),M(o8,Vo,null),e(Vo,KJo),e(Vo,pd),e(pd,ZJo),e(pd,FX),e(FX,eYo),e(pd,oYo),e(pd,TX),e(TX,rYo),e(pd,tYo),e(Vo,aYo),e(Vo,r8),e(r8,nYo),e(r8,Zue),e(Zue,sYo),e(r8,lYo),e(Vo,iYo),e(Vo,vt),M(t8,vt,null),e(vt,dYo),e(vt,epe),e(epe,cYo),e(vt,mYo),e(vt,_d),e(_d,fYo),e(_d,ope),e(ope,gYo),e(_d,hYo),e(_d,MX),e(MX,uYo),e(_d,pYo),e(vt,_Yo),M(xT,vt,null),e(Vo,bYo),e(Vo,fo),M(a8,fo,null),e(fo,vYo),e(fo,rpe),e(rpe,FYo),e(fo,TYo),e(fo,Va),e(Va,MYo),e(Va,tpe),e(tpe,EYo),e(Va,CYo),e(Va,ape),e(ape,wYo),e(Va,AYo),e(Va,npe),e(npe,yYo),e(Va,LYo),e(fo,xYo),e(fo,Se),e(Se,$T),e($T,spe),e(spe,$Yo),e($T,kYo),e($T,EX),e(EX,SYo),e($T,RYo),e(Se,PYo),e(Se,kT),e(kT,lpe),e(lpe,BYo),e(kT,IYo),e(kT,CX),e(CX,qYo),e(kT,NYo),e(Se,jYo),e(Se,ST),e(ST,ipe),e(ipe,DYo),e(ST,GYo),e(ST,wX),e(wX,OYo),e(ST,VYo),e(Se,XYo),e(Se,RT),e(RT,dpe),e(dpe,zYo),e(RT,WYo),e(RT,AX),e(AX,QYo),e(RT,HYo),e(Se,UYo),e(Se,PT),e(PT,cpe),e(cpe,JYo),e(PT,YYo),e(PT,yX),e(yX,KYo),e(PT,ZYo),e(Se,eKo),e(Se,BT),e(BT,mpe),e(mpe,oKo),e(BT,rKo),e(BT,LX),e(LX,tKo),e(BT,aKo),e(Se,nKo),e(Se,IT),e(IT,fpe),e(fpe,sKo),e(IT,lKo),e(IT,xX),e(xX,iKo),e(IT,dKo),e(Se,cKo),e(Se,qT),e(qT,gpe),e(gpe,mKo),e(qT,fKo),e(qT,$X),e($X,gKo),e(qT,hKo),e(Se,uKo),e(Se,NT),e(NT,hpe),e(hpe,pKo),e(NT,_Ko),e(NT,kX),e(kX,bKo),e(NT,vKo),e(fo,FKo),e(fo,jT),e(jT,TKo),e(jT,upe),e(upe,MKo),e(jT,EKo),e(jT,ppe),e(ppe,CKo),e(fo,wKo),M(DT,fo,null),b(m,pqe,_),b(m,bd,_),e(bd,GT),e(GT,_pe),M(n8,_pe,null),e(bd,AKo),e(bd,bpe),e(bpe,yKo),b(m,_qe,_),b(m,Xo,_),M(s8,Xo,null),e(Xo,LKo),e(Xo,vd),e(vd,xKo),e(vd,SX),e(SX,$Ko),e(vd,kKo),e(vd,RX),e(RX,SKo),e(vd,RKo),e(Xo,PKo),e(Xo,l8),e(l8,BKo),e(l8,vpe),e(vpe,IKo),e(l8,qKo),e(Xo,NKo),e(Xo,Ft),M(i8,Ft,null),e(Ft,jKo),e(Ft,Fpe),e(Fpe,DKo),e(Ft,GKo),e(Ft,Fd),e(Fd,OKo),e(Fd,Tpe),e(Tpe,VKo),e(Fd,XKo),e(Fd,PX),e(PX,zKo),e(Fd,WKo),e(Ft,QKo),M(OT,Ft,null),e(Xo,HKo),e(Xo,go),M(d8,go,null),e(go,UKo),e(go,Mpe),e(Mpe,JKo),e(go,YKo),e(go,Xa),e(Xa,KKo),e(Xa,Epe),e(Epe,ZKo),e(Xa,eZo),e(Xa,Cpe),e(Cpe,oZo),e(Xa,rZo),e(Xa,wpe),e(wpe,tZo),e(Xa,aZo),e(go,nZo),e(go,c8),e(c8,VT),e(VT,Ape),e(Ape,sZo),e(VT,lZo),e(VT,BX),e(BX,iZo),e(VT,dZo),e(c8,cZo),e(c8,XT),e(XT,ype),e(ype,mZo),e(XT,fZo),e(XT,IX),e(IX,gZo),e(XT,hZo),e(go,uZo),e(go,zT),e(zT,pZo),e(zT,Lpe),e(Lpe,_Zo),e(zT,bZo),e(zT,xpe),e(xpe,vZo),e(go,FZo),M(WT,go,null),b(m,bqe,_),b(m,Td,_),e(Td,QT),e(QT,$pe),M(m8,$pe,null),e(Td,TZo),e(Td,kpe),e(kpe,MZo),b(m,vqe,_),b(m,zo,_),M(f8,zo,null),e(zo,EZo),e(zo,Md),e(Md,CZo),e(Md,qX),e(qX,wZo),e(Md,AZo),e(Md,NX),e(NX,yZo),e(Md,LZo),e(zo,xZo),e(zo,g8),e(g8,$Zo),e(g8,Spe),e(Spe,kZo),e(g8,SZo),e(zo,RZo),e(zo,Tt),M(h8,Tt,null),e(Tt,PZo),e(Tt,Rpe),e(Rpe,BZo),e(Tt,IZo),e(Tt,Ed),e(Ed,qZo),e(Ed,Ppe),e(Ppe,NZo),e(Ed,jZo),e(Ed,jX),e(jX,DZo),e(Ed,GZo),e(Tt,OZo),M(HT,Tt,null),e(zo,VZo),e(zo,ho),M(u8,ho,null),e(ho,XZo),e(ho,Bpe),e(Bpe,zZo),e(ho,WZo),e(ho,za),e(za,QZo),e(za,Ipe),e(Ipe,HZo),e(za,UZo),e(za,qpe),e(qpe,JZo),e(za,YZo),e(za,Npe),e(Npe,KZo),e(za,ZZo),e(ho,eer),e(ho,Zr),e(Zr,UT),e(UT,jpe),e(jpe,oer),e(UT,rer),e(UT,DX),e(DX,ter),e(UT,aer),e(Zr,ner),e(Zr,JT),e(JT,Dpe),e(Dpe,ser),e(JT,ler),e(JT,GX),e(GX,ier),e(JT,der),e(Zr,cer),e(Zr,YT),e(YT,Gpe),e(Gpe,mer),e(YT,fer),e(YT,OX),e(OX,ger),e(YT,her),e(Zr,uer),e(Zr,KT),e(KT,Ope),e(Ope,per),e(KT,_er),e(KT,VX),e(VX,ber),e(KT,ver),e(Zr,Fer),e(Zr,ZT),e(ZT,Vpe),e(Vpe,Ter),e(ZT,Mer),e(ZT,XX),e(XX,Eer),e(ZT,Cer),e(ho,wer),e(ho,eM),e(eM,Aer),e(eM,Xpe),e(Xpe,yer),e(eM,Ler),e(eM,zpe),e(zpe,xer),e(ho,$er),M(oM,ho,null),b(m,Fqe,_),b(m,Cd,_),e(Cd,rM),e(rM,Wpe),M(p8,Wpe,null),e(Cd,ker),e(Cd,Qpe),e(Qpe,Ser),b(m,Tqe,_),b(m,Wo,_),M(_8,Wo,null),e(Wo,Rer),e(Wo,wd),e(wd,Per),e(wd,zX),e(zX,Ber),e(wd,Ier),e(wd,WX),e(WX,qer),e(wd,Ner),e(Wo,jer),e(Wo,b8),e(b8,Der),e(b8,Hpe),e(Hpe,Ger),e(b8,Oer),e(Wo,Ver),e(Wo,Mt),M(v8,Mt,null),e(Mt,Xer),e(Mt,Upe),e(Upe,zer),e(Mt,Wer),e(Mt,Ad),e(Ad,Qer),e(Ad,Jpe),e(Jpe,Her),e(Ad,Uer),e(Ad,QX),e(QX,Jer),e(Ad,Yer),e(Mt,Ker),M(tM,Mt,null),e(Wo,Zer),e(Wo,uo),M(F8,uo,null),e(uo,eor),e(uo,Ype),e(Ype,oor),e(uo,ror),e(uo,Wa),e(Wa,tor),e(Wa,Kpe),e(Kpe,aor),e(Wa,nor),e(Wa,Zpe),e(Zpe,sor),e(Wa,lor),e(Wa,e_e),e(e_e,ior),e(Wa,dor),e(uo,cor),e(uo,yd),e(yd,aM),e(aM,o_e),e(o_e,mor),e(aM,gor),e(aM,HX),e(HX,hor),e(aM,uor),e(yd,por),e(yd,nM),e(nM,r_e),e(r_e,_or),e(nM,bor),e(nM,UX),e(UX,vor),e(nM,For),e(yd,Tor),e(yd,sM),e(sM,t_e),e(t_e,Mor),e(sM,Eor),e(sM,JX),e(JX,Cor),e(sM,wor),e(uo,Aor),e(uo,lM),e(lM,yor),e(lM,a_e),e(a_e,Lor),e(lM,xor),e(lM,n_e),e(n_e,$or),e(uo,kor),M(iM,uo,null),b(m,Mqe,_),b(m,Ld,_),e(Ld,dM),e(dM,s_e),M(T8,s_e,null),e(Ld,Sor),e(Ld,l_e),e(l_e,Ror),b(m,Eqe,_),b(m,Qo,_),M(M8,Qo,null),e(Qo,Por),e(Qo,xd),e(xd,Bor),e(xd,YX),e(YX,Ior),e(xd,qor),e(xd,KX),e(KX,Nor),e(xd,jor),e(Qo,Dor),e(Qo,E8),e(E8,Gor),e(E8,i_e),e(i_e,Oor),e(E8,Vor),e(Qo,Xor),e(Qo,Et),M(C8,Et,null),e(Et,zor),e(Et,d_e),e(d_e,Wor),e(Et,Qor),e(Et,$d),e($d,Hor),e($d,c_e),e(c_e,Uor),e($d,Jor),e($d,ZX),e(ZX,Yor),e($d,Kor),e(Et,Zor),M(cM,Et,null),e(Qo,err),e(Qo,po),M(w8,po,null),e(po,orr),e(po,m_e),e(m_e,rrr),e(po,trr),e(po,Qa),e(Qa,arr),e(Qa,f_e),e(f_e,nrr),e(Qa,srr),e(Qa,g_e),e(g_e,lrr),e(Qa,irr),e(Qa,h_e),e(h_e,drr),e(Qa,crr),e(po,mrr),e(po,A8),e(A8,mM),e(mM,u_e),e(u_e,frr),e(mM,grr),e(mM,ez),e(ez,hrr),e(mM,urr),e(A8,prr),e(A8,fM),e(fM,p_e),e(p_e,_rr),e(fM,brr),e(fM,oz),e(oz,vrr),e(fM,Frr),e(po,Trr),e(po,gM),e(gM,Mrr),e(gM,__e),e(__e,Err),e(gM,Crr),e(gM,b_e),e(b_e,wrr),e(po,Arr),M(hM,po,null),b(m,Cqe,_),b(m,kd,_),e(kd,uM),e(uM,v_e),M(y8,v_e,null),e(kd,yrr),e(kd,F_e),e(F_e,Lrr),b(m,wqe,_),b(m,Ho,_),M(L8,Ho,null),e(Ho,xrr),e(Ho,Sd),e(Sd,$rr),e(Sd,rz),e(rz,krr),e(Sd,Srr),e(Sd,tz),e(tz,Rrr),e(Sd,Prr),e(Ho,Brr),e(Ho,x8),e(x8,Irr),e(x8,T_e),e(T_e,qrr),e(x8,Nrr),e(Ho,jrr),e(Ho,Ct),M($8,Ct,null),e(Ct,Drr),e(Ct,M_e),e(M_e,Grr),e(Ct,Orr),e(Ct,Rd),e(Rd,Vrr),e(Rd,E_e),e(E_e,Xrr),e(Rd,zrr),e(Rd,az),e(az,Wrr),e(Rd,Qrr),e(Ct,Hrr),M(pM,Ct,null),e(Ho,Urr),e(Ho,_o),M(k8,_o,null),e(_o,Jrr),e(_o,C_e),e(C_e,Yrr),e(_o,Krr),e(_o,Ha),e(Ha,Zrr),e(Ha,w_e),e(w_e,etr),e(Ha,otr),e(Ha,A_e),e(A_e,rtr),e(Ha,ttr),e(Ha,y_e),e(y_e,atr),e(Ha,ntr),e(_o,str),e(_o,L_e),e(L_e,_M),e(_M,x_e),e(x_e,ltr),e(_M,itr),e(_M,nz),e(nz,dtr),e(_M,ctr),e(_o,mtr),e(_o,bM),e(bM,ftr),e(bM,$_e),e($_e,gtr),e(bM,htr),e(bM,k_e),e(k_e,utr),e(_o,ptr),M(vM,_o,null),b(m,Aqe,_),b(m,Pd,_),e(Pd,FM),e(FM,S_e),M(S8,S_e,null),e(Pd,_tr),e(Pd,R_e),e(R_e,btr),b(m,yqe,_),b(m,Uo,_),M(R8,Uo,null),e(Uo,vtr),e(Uo,Bd),e(Bd,Ftr),e(Bd,sz),e(sz,Ttr),e(Bd,Mtr),e(Bd,lz),e(lz,Etr),e(Bd,Ctr),e(Uo,wtr),e(Uo,P8),e(P8,Atr),e(P8,P_e),e(P_e,ytr),e(P8,Ltr),e(Uo,xtr),e(Uo,wt),M(B8,wt,null),e(wt,$tr),e(wt,B_e),e(B_e,ktr),e(wt,Str),e(wt,Id),e(Id,Rtr),e(Id,I_e),e(I_e,Ptr),e(Id,Btr),e(Id,iz),e(iz,Itr),e(Id,qtr),e(wt,Ntr),M(TM,wt,null),e(Uo,jtr),e(Uo,bo),M(I8,bo,null),e(bo,Dtr),e(bo,q_e),e(q_e,Gtr),e(bo,Otr),e(bo,Ua),e(Ua,Vtr),e(Ua,N_e),e(N_e,Xtr),e(Ua,ztr),e(Ua,j_e),e(j_e,Wtr),e(Ua,Qtr),e(Ua,D_e),e(D_e,Htr),e(Ua,Utr),e(bo,Jtr),e(bo,Ja),e(Ja,MM),e(MM,G_e),e(G_e,Ytr),e(MM,Ktr),e(MM,dz),e(dz,Ztr),e(MM,ear),e(Ja,oar),e(Ja,EM),e(EM,O_e),e(O_e,rar),e(EM,tar),e(EM,cz),e(cz,aar),e(EM,nar),e(Ja,sar),e(Ja,CM),e(CM,V_e),e(V_e,lar),e(CM,iar),e(CM,mz),e(mz,dar),e(CM,car),e(Ja,mar),e(Ja,wM),e(wM,X_e),e(X_e,far),e(wM,gar),e(wM,fz),e(fz,har),e(wM,uar),e(bo,par),e(bo,AM),e(AM,_ar),e(AM,z_e),e(z_e,bar),e(AM,Far),e(AM,W_e),e(W_e,Tar),e(bo,Mar),M(yM,bo,null),b(m,Lqe,_),b(m,qd,_),e(qd,LM),e(LM,Q_e),M(q8,Q_e,null),e(qd,Ear),e(qd,H_e),e(H_e,Car),b(m,xqe,_),b(m,Jo,_),M(N8,Jo,null),e(Jo,war),e(Jo,Nd),e(Nd,Aar),e(Nd,gz),e(gz,yar),e(Nd,Lar),e(Nd,hz),e(hz,xar),e(Nd,$ar),e(Jo,kar),e(Jo,j8),e(j8,Sar),e(j8,U_e),e(U_e,Rar),e(j8,Par),e(Jo,Bar),e(Jo,At),M(D8,At,null),e(At,Iar),e(At,J_e),e(J_e,qar),e(At,Nar),e(At,jd),e(jd,jar),e(jd,Y_e),e(Y_e,Dar),e(jd,Gar),e(jd,uz),e(uz,Oar),e(jd,Var),e(At,Xar),M(xM,At,null),e(Jo,zar),e(Jo,vo),M(G8,vo,null),e(vo,War),e(vo,K_e),e(K_e,Qar),e(vo,Har),e(vo,Ya),e(Ya,Uar),e(Ya,Z_e),e(Z_e,Jar),e(Ya,Yar),e(Ya,ebe),e(ebe,Kar),e(Ya,Zar),e(Ya,obe),e(obe,enr),e(Ya,onr),e(vo,rnr),e(vo,rbe),e(rbe,$M),e($M,tbe),e(tbe,tnr),e($M,anr),e($M,pz),e(pz,nnr),e($M,snr),e(vo,lnr),e(vo,kM),e(kM,inr),e(kM,abe),e(abe,dnr),e(kM,cnr),e(kM,nbe),e(nbe,mnr),e(vo,fnr),M(SM,vo,null),b(m,$qe,_),b(m,Dd,_),e(Dd,RM),e(RM,sbe),M(O8,sbe,null),e(Dd,gnr),e(Dd,lbe),e(lbe,hnr),b(m,kqe,_),b(m,Yo,_),M(V8,Yo,null),e(Yo,unr),e(Yo,Gd),e(Gd,pnr),e(Gd,_z),e(_z,_nr),e(Gd,bnr),e(Gd,bz),e(bz,vnr),e(Gd,Fnr),e(Yo,Tnr),e(Yo,X8),e(X8,Mnr),e(X8,ibe),e(ibe,Enr),e(X8,Cnr),e(Yo,wnr),e(Yo,yt),M(z8,yt,null),e(yt,Anr),e(yt,dbe),e(dbe,ynr),e(yt,Lnr),e(yt,Od),e(Od,xnr),e(Od,cbe),e(cbe,$nr),e(Od,knr),e(Od,vz),e(vz,Snr),e(Od,Rnr),e(yt,Pnr),M(PM,yt,null),e(Yo,Bnr),e(Yo,wr),M(W8,wr,null),e(wr,Inr),e(wr,mbe),e(mbe,qnr),e(wr,Nnr),e(wr,Ka),e(Ka,jnr),e(Ka,fbe),e(fbe,Dnr),e(Ka,Gnr),e(Ka,gbe),e(gbe,Onr),e(Ka,Vnr),e(Ka,hbe),e(hbe,Xnr),e(Ka,znr),e(wr,Wnr),e(wr,N),e(N,BM),e(BM,ube),e(ube,Qnr),e(BM,Hnr),e(BM,Fz),e(Fz,Unr),e(BM,Jnr),e(N,Ynr),e(N,IM),e(IM,pbe),e(pbe,Knr),e(IM,Znr),e(IM,Tz),e(Tz,esr),e(IM,osr),e(N,rsr),e(N,qM),e(qM,_be),e(_be,tsr),e(qM,asr),e(qM,Mz),e(Mz,nsr),e(qM,ssr),e(N,lsr),e(N,NM),e(NM,bbe),e(bbe,isr),e(NM,dsr),e(NM,Ez),e(Ez,csr),e(NM,msr),e(N,fsr),e(N,jM),e(jM,vbe),e(vbe,gsr),e(jM,hsr),e(jM,Cz),e(Cz,usr),e(jM,psr),e(N,_sr),e(N,DM),e(DM,Fbe),e(Fbe,bsr),e(DM,vsr),e(DM,wz),e(wz,Fsr),e(DM,Tsr),e(N,Msr),e(N,GM),e(GM,Tbe),e(Tbe,Esr),e(GM,Csr),e(GM,Az),e(Az,wsr),e(GM,Asr),e(N,ysr),e(N,OM),e(OM,Mbe),e(Mbe,Lsr),e(OM,xsr),e(OM,yz),e(yz,$sr),e(OM,ksr),e(N,Ssr),e(N,VM),e(VM,Ebe),e(Ebe,Rsr),e(VM,Psr),e(VM,Lz),e(Lz,Bsr),e(VM,Isr),e(N,qsr),e(N,XM),e(XM,Cbe),e(Cbe,Nsr),e(XM,jsr),e(XM,xz),e(xz,Dsr),e(XM,Gsr),e(N,Osr),e(N,zM),e(zM,wbe),e(wbe,Vsr),e(zM,Xsr),e(zM,$z),e($z,zsr),e(zM,Wsr),e(N,Qsr),e(N,WM),e(WM,Abe),e(Abe,Hsr),e(WM,Usr),e(WM,kz),e(kz,Jsr),e(WM,Ysr),e(N,Ksr),e(N,QM),e(QM,ybe),e(ybe,Zsr),e(QM,elr),e(QM,Sz),e(Sz,olr),e(QM,rlr),e(N,tlr),e(N,HM),e(HM,Lbe),e(Lbe,alr),e(HM,nlr),e(HM,Rz),e(Rz,slr),e(HM,llr),e(N,ilr),e(N,UM),e(UM,xbe),e(xbe,dlr),e(UM,clr),e(UM,Pz),e(Pz,mlr),e(UM,flr),e(N,glr),e(N,JM),e(JM,$be),e($be,hlr),e(JM,ulr),e(JM,Bz),e(Bz,plr),e(JM,_lr),e(N,blr),e(N,YM),e(YM,kbe),e(kbe,vlr),e(YM,Flr),e(YM,Iz),e(Iz,Tlr),e(YM,Mlr),e(N,Elr),e(N,Bs),e(Bs,Sbe),e(Sbe,Clr),e(Bs,wlr),e(Bs,qz),e(qz,Alr),e(Bs,ylr),e(Bs,Nz),e(Nz,Llr),e(Bs,xlr),e(N,$lr),e(N,KM),e(KM,Rbe),e(Rbe,klr),e(KM,Slr),e(KM,jz),e(jz,Rlr),e(KM,Plr),e(N,Blr),e(N,ZM),e(ZM,Pbe),e(Pbe,Ilr),e(ZM,qlr),e(ZM,Dz),e(Dz,Nlr),e(ZM,jlr),e(N,Dlr),e(N,e4),e(e4,Bbe),e(Bbe,Glr),e(e4,Olr),e(e4,Gz),e(Gz,Vlr),e(e4,Xlr),e(N,zlr),e(N,o4),e(o4,Ibe),e(Ibe,Wlr),e(o4,Qlr),e(o4,Oz),e(Oz,Hlr),e(o4,Ulr),e(N,Jlr),e(N,r4),e(r4,qbe),e(qbe,Ylr),e(r4,Klr),e(r4,Vz),e(Vz,Zlr),e(r4,eir),e(N,oir),e(N,t4),e(t4,Nbe),e(Nbe,rir),e(t4,tir),e(t4,Xz),e(Xz,air),e(t4,nir),e(N,sir),e(N,a4),e(a4,jbe),e(jbe,lir),e(a4,iir),e(a4,zz),e(zz,dir),e(a4,cir),e(N,mir),e(N,n4),e(n4,Dbe),e(Dbe,fir),e(n4,gir),e(n4,Wz),e(Wz,hir),e(n4,uir),e(N,pir),e(N,s4),e(s4,Gbe),e(Gbe,_ir),e(s4,bir),e(s4,Qz),e(Qz,vir),e(s4,Fir),e(N,Tir),e(N,l4),e(l4,Obe),e(Obe,Mir),e(l4,Eir),e(l4,Hz),e(Hz,Cir),e(l4,wir),e(N,Air),e(N,i4),e(i4,Vbe),e(Vbe,yir),e(i4,Lir),e(i4,Uz),e(Uz,xir),e(i4,$ir),e(N,kir),e(N,d4),e(d4,Xbe),e(Xbe,Sir),e(d4,Rir),e(d4,Jz),e(Jz,Pir),e(d4,Bir),e(N,Iir),e(N,c4),e(c4,zbe),e(zbe,qir),e(c4,Nir),e(c4,Yz),e(Yz,jir),e(c4,Dir),e(N,Gir),e(N,m4),e(m4,Wbe),e(Wbe,Oir),e(m4,Vir),e(m4,Kz),e(Kz,Xir),e(m4,zir),e(N,Wir),e(N,f4),e(f4,Qbe),e(Qbe,Qir),e(f4,Hir),e(f4,Zz),e(Zz,Uir),e(f4,Jir),e(N,Yir),e(N,g4),e(g4,Hbe),e(Hbe,Kir),e(g4,Zir),e(g4,eW),e(eW,edr),e(g4,odr),e(N,rdr),e(N,h4),e(h4,Ube),e(Ube,tdr),e(h4,adr),e(h4,oW),e(oW,ndr),e(h4,sdr),e(N,ldr),e(N,u4),e(u4,Jbe),e(Jbe,idr),e(u4,ddr),e(u4,rW),e(rW,cdr),e(u4,mdr),e(N,fdr),e(N,p4),e(p4,Ybe),e(Ybe,gdr),e(p4,hdr),e(p4,tW),e(tW,udr),e(p4,pdr),e(N,_dr),e(N,_4),e(_4,Kbe),e(Kbe,bdr),e(_4,vdr),e(_4,aW),e(aW,Fdr),e(_4,Tdr),e(N,Mdr),e(N,b4),e(b4,Zbe),e(Zbe,Edr),e(b4,Cdr),e(b4,nW),e(nW,wdr),e(b4,Adr),e(N,ydr),e(N,v4),e(v4,e2e),e(e2e,Ldr),e(v4,xdr),e(v4,sW),e(sW,$dr),e(v4,kdr),e(N,Sdr),e(N,F4),e(F4,o2e),e(o2e,Rdr),e(F4,Pdr),e(F4,lW),e(lW,Bdr),e(F4,Idr),e(N,qdr),e(N,T4),e(T4,r2e),e(r2e,Ndr),e(T4,jdr),e(T4,iW),e(iW,Ddr),e(T4,Gdr),e(N,Odr),e(N,M4),e(M4,t2e),e(t2e,Vdr),e(M4,Xdr),e(M4,dW),e(dW,zdr),e(M4,Wdr),e(N,Qdr),e(N,E4),e(E4,a2e),e(a2e,Hdr),e(E4,Udr),e(E4,cW),e(cW,Jdr),e(E4,Ydr),e(N,Kdr),e(N,C4),e(C4,n2e),e(n2e,Zdr),e(C4,ecr),e(C4,mW),e(mW,ocr),e(C4,rcr),e(N,tcr),e(N,w4),e(w4,s2e),e(s2e,acr),e(w4,ncr),e(w4,fW),e(fW,scr),e(w4,lcr),e(wr,icr),M(A4,wr,null),b(m,Sqe,_),b(m,Vd,_),e(Vd,y4),e(y4,l2e),M(Q8,l2e,null),e(Vd,dcr),e(Vd,i2e),e(i2e,ccr),b(m,Rqe,_),b(m,Ko,_),M(H8,Ko,null),e(Ko,mcr),e(Ko,Xd),e(Xd,fcr),e(Xd,gW),e(gW,gcr),e(Xd,hcr),e(Xd,hW),e(hW,ucr),e(Xd,pcr),e(Ko,_cr),e(Ko,U8),e(U8,bcr),e(U8,d2e),e(d2e,vcr),e(U8,Fcr),e(Ko,Tcr),e(Ko,Lt),M(J8,Lt,null),e(Lt,Mcr),e(Lt,c2e),e(c2e,Ecr),e(Lt,Ccr),e(Lt,zd),e(zd,wcr),e(zd,m2e),e(m2e,Acr),e(zd,ycr),e(zd,uW),e(uW,Lcr),e(zd,xcr),e(Lt,$cr),M(L4,Lt,null),e(Ko,kcr),e(Ko,Ar),M(Y8,Ar,null),e(Ar,Scr),e(Ar,f2e),e(f2e,Rcr),e(Ar,Pcr),e(Ar,Za),e(Za,Bcr),e(Za,g2e),e(g2e,Icr),e(Za,qcr),e(Za,h2e),e(h2e,Ncr),e(Za,jcr),e(Za,u2e),e(u2e,Dcr),e(Za,Gcr),e(Ar,Ocr),e(Ar,se),e(se,x4),e(x4,p2e),e(p2e,Vcr),e(x4,Xcr),e(x4,pW),e(pW,zcr),e(x4,Wcr),e(se,Qcr),e(se,$4),e($4,_2e),e(_2e,Hcr),e($4,Ucr),e($4,_W),e(_W,Jcr),e($4,Ycr),e(se,Kcr),e(se,k4),e(k4,b2e),e(b2e,Zcr),e(k4,emr),e(k4,bW),e(bW,omr),e(k4,rmr),e(se,tmr),e(se,S4),e(S4,v2e),e(v2e,amr),e(S4,nmr),e(S4,vW),e(vW,smr),e(S4,lmr),e(se,imr),e(se,R4),e(R4,F2e),e(F2e,dmr),e(R4,cmr),e(R4,FW),e(FW,mmr),e(R4,fmr),e(se,gmr),e(se,P4),e(P4,T2e),e(T2e,hmr),e(P4,umr),e(P4,TW),e(TW,pmr),e(P4,_mr),e(se,bmr),e(se,B4),e(B4,M2e),e(M2e,vmr),e(B4,Fmr),e(B4,MW),e(MW,Tmr),e(B4,Mmr),e(se,Emr),e(se,I4),e(I4,E2e),e(E2e,Cmr),e(I4,wmr),e(I4,EW),e(EW,Amr),e(I4,ymr),e(se,Lmr),e(se,q4),e(q4,C2e),e(C2e,xmr),e(q4,$mr),e(q4,CW),e(CW,kmr),e(q4,Smr),e(se,Rmr),e(se,N4),e(N4,w2e),e(w2e,Pmr),e(N4,Bmr),e(N4,wW),e(wW,Imr),e(N4,qmr),e(se,Nmr),e(se,j4),e(j4,A2e),e(A2e,jmr),e(j4,Dmr),e(j4,AW),e(AW,Gmr),e(j4,Omr),e(se,Vmr),e(se,D4),e(D4,y2e),e(y2e,Xmr),e(D4,zmr),e(D4,yW),e(yW,Wmr),e(D4,Qmr),e(se,Hmr),e(se,G4),e(G4,L2e),e(L2e,Umr),e(G4,Jmr),e(G4,LW),e(LW,Ymr),e(G4,Kmr),e(se,Zmr),e(se,O4),e(O4,x2e),e(x2e,efr),e(O4,ofr),e(O4,xW),e(xW,rfr),e(O4,tfr),e(se,afr),e(se,V4),e(V4,$2e),e($2e,nfr),e(V4,sfr),e(V4,$W),e($W,lfr),e(V4,ifr),e(se,dfr),e(se,X4),e(X4,k2e),e(k2e,cfr),e(X4,mfr),e(X4,kW),e(kW,ffr),e(X4,gfr),e(se,hfr),e(se,z4),e(z4,S2e),e(S2e,ufr),e(z4,pfr),e(z4,SW),e(SW,_fr),e(z4,bfr),e(se,vfr),e(se,W4),e(W4,R2e),e(R2e,Ffr),e(W4,Tfr),e(W4,RW),e(RW,Mfr),e(W4,Efr),e(se,Cfr),e(se,Q4),e(Q4,P2e),e(P2e,wfr),e(Q4,Afr),e(Q4,PW),e(PW,yfr),e(Q4,Lfr),e(se,xfr),e(se,H4),e(H4,B2e),e(B2e,$fr),e(H4,kfr),e(H4,BW),e(BW,Sfr),e(H4,Rfr),e(se,Pfr),e(se,U4),e(U4,I2e),e(I2e,Bfr),e(U4,Ifr),e(U4,IW),e(IW,qfr),e(U4,Nfr),e(se,jfr),e(se,J4),e(J4,q2e),e(q2e,Dfr),e(J4,Gfr),e(J4,qW),e(qW,Ofr),e(J4,Vfr),e(se,Xfr),e(se,Y4),e(Y4,N2e),e(N2e,zfr),e(Y4,Wfr),e(Y4,NW),e(NW,Qfr),e(Y4,Hfr),e(Ar,Ufr),M(K4,Ar,null),b(m,Pqe,_),b(m,Wd,_),e(Wd,Z4),e(Z4,j2e),M(K8,j2e,null),e(Wd,Jfr),e(Wd,D2e),e(D2e,Yfr),b(m,Bqe,_),b(m,Zo,_),M(Z8,Zo,null),e(Zo,Kfr),e(Zo,Qd),e(Qd,Zfr),e(Qd,jW),e(jW,egr),e(Qd,ogr),e(Qd,DW),e(DW,rgr),e(Qd,tgr),e(Zo,agr),e(Zo,ex),e(ex,ngr),e(ex,G2e),e(G2e,sgr),e(ex,lgr),e(Zo,igr),e(Zo,xt),M(ox,xt,null),e(xt,dgr),e(xt,O2e),e(O2e,cgr),e(xt,mgr),e(xt,Hd),e(Hd,fgr),e(Hd,V2e),e(V2e,ggr),e(Hd,hgr),e(Hd,GW),e(GW,ugr),e(Hd,pgr),e(xt,_gr),M(eE,xt,null),e(Zo,bgr),e(Zo,yr),M(rx,yr,null),e(yr,vgr),e(yr,X2e),e(X2e,Fgr),e(yr,Tgr),e(yr,en),e(en,Mgr),e(en,z2e),e(z2e,Egr),e(en,Cgr),e(en,W2e),e(W2e,wgr),e(en,Agr),e(en,Q2e),e(Q2e,ygr),e(en,Lgr),e(yr,xgr),e(yr,Te),e(Te,oE),e(oE,H2e),e(H2e,$gr),e(oE,kgr),e(oE,OW),e(OW,Sgr),e(oE,Rgr),e(Te,Pgr),e(Te,rE),e(rE,U2e),e(U2e,Bgr),e(rE,Igr),e(rE,VW),e(VW,qgr),e(rE,Ngr),e(Te,jgr),e(Te,tE),e(tE,J2e),e(J2e,Dgr),e(tE,Ggr),e(tE,XW),e(XW,Ogr),e(tE,Vgr),e(Te,Xgr),e(Te,aE),e(aE,Y2e),e(Y2e,zgr),e(aE,Wgr),e(aE,zW),e(zW,Qgr),e(aE,Hgr),e(Te,Ugr),e(Te,nE),e(nE,K2e),e(K2e,Jgr),e(nE,Ygr),e(nE,WW),e(WW,Kgr),e(nE,Zgr),e(Te,ehr),e(Te,sE),e(sE,Z2e),e(Z2e,ohr),e(sE,rhr),e(sE,QW),e(QW,thr),e(sE,ahr),e(Te,nhr),e(Te,lE),e(lE,eve),e(eve,shr),e(lE,lhr),e(lE,HW),e(HW,ihr),e(lE,dhr),e(Te,chr),e(Te,iE),e(iE,ove),e(ove,mhr),e(iE,fhr),e(iE,UW),e(UW,ghr),e(iE,hhr),e(Te,uhr),e(Te,dE),e(dE,rve),e(rve,phr),e(dE,_hr),e(dE,JW),e(JW,bhr),e(dE,vhr),e(Te,Fhr),e(Te,cE),e(cE,tve),e(tve,Thr),e(cE,Mhr),e(cE,YW),e(YW,Ehr),e(cE,Chr),e(Te,whr),e(Te,mE),e(mE,ave),e(ave,Ahr),e(mE,yhr),e(mE,KW),e(KW,Lhr),e(mE,xhr),e(Te,$hr),e(Te,fE),e(fE,nve),e(nve,khr),e(fE,Shr),e(fE,ZW),e(ZW,Rhr),e(fE,Phr),e(yr,Bhr),M(gE,yr,null),b(m,Iqe,_),b(m,Ud,_),e(Ud,hE),e(hE,sve),M(tx,sve,null),e(Ud,Ihr),e(Ud,lve),e(lve,qhr),b(m,qqe,_),b(m,er,_),M(ax,er,null),e(er,Nhr),e(er,Jd),e(Jd,jhr),e(Jd,eQ),e(eQ,Dhr),e(Jd,Ghr),e(Jd,oQ),e(oQ,Ohr),e(Jd,Vhr),e(er,Xhr),e(er,nx),e(nx,zhr),e(nx,ive),e(ive,Whr),e(nx,Qhr),e(er,Hhr),e(er,$t),M(sx,$t,null),e($t,Uhr),e($t,dve),e(dve,Jhr),e($t,Yhr),e($t,Yd),e(Yd,Khr),e(Yd,cve),e(cve,Zhr),e(Yd,eur),e(Yd,rQ),e(rQ,our),e(Yd,rur),e($t,tur),M(uE,$t,null),e(er,aur),e(er,Lr),M(lx,Lr,null),e(Lr,nur),e(Lr,mve),e(mve,sur),e(Lr,lur),e(Lr,on),e(on,iur),e(on,fve),e(fve,dur),e(on,cur),e(on,gve),e(gve,mur),e(on,fur),e(on,hve),e(hve,gur),e(on,hur),e(Lr,uur),e(Lr,rn),e(rn,pE),e(pE,uve),e(uve,pur),e(pE,_ur),e(pE,tQ),e(tQ,bur),e(pE,vur),e(rn,Fur),e(rn,_E),e(_E,pve),e(pve,Tur),e(_E,Mur),e(_E,aQ),e(aQ,Eur),e(_E,Cur),e(rn,wur),e(rn,bE),e(bE,_ve),e(_ve,Aur),e(bE,yur),e(bE,nQ),e(nQ,Lur),e(bE,xur),e(rn,$ur),e(rn,vE),e(vE,bve),e(bve,kur),e(vE,Sur),e(vE,sQ),e(sQ,Rur),e(vE,Pur),e(Lr,Bur),M(FE,Lr,null),b(m,Nqe,_),b(m,Kd,_),e(Kd,TE),e(TE,vve),M(ix,vve,null),e(Kd,Iur),e(Kd,Fve),e(Fve,qur),b(m,jqe,_),b(m,or,_),M(dx,or,null),e(or,Nur),e(or,Zd),e(Zd,jur),e(Zd,lQ),e(lQ,Dur),e(Zd,Gur),e(Zd,iQ),e(iQ,Our),e(Zd,Vur),e(or,Xur),e(or,cx),e(cx,zur),e(cx,Tve),e(Tve,Wur),e(cx,Qur),e(or,Hur),e(or,kt),M(mx,kt,null),e(kt,Uur),e(kt,Mve),e(Mve,Jur),e(kt,Yur),e(kt,ec),e(ec,Kur),e(ec,Eve),e(Eve,Zur),e(ec,epr),e(ec,dQ),e(dQ,opr),e(ec,rpr),e(kt,tpr),M(ME,kt,null),e(or,apr),e(or,xr),M(fx,xr,null),e(xr,npr),e(xr,Cve),e(Cve,spr),e(xr,lpr),e(xr,tn),e(tn,ipr),e(tn,wve),e(wve,dpr),e(tn,cpr),e(tn,Ave),e(Ave,mpr),e(tn,fpr),e(tn,yve),e(yve,gpr),e(tn,hpr),e(xr,upr),e(xr,ie),e(ie,EE),e(EE,Lve),e(Lve,ppr),e(EE,_pr),e(EE,cQ),e(cQ,bpr),e(EE,vpr),e(ie,Fpr),e(ie,CE),e(CE,xve),e(xve,Tpr),e(CE,Mpr),e(CE,mQ),e(mQ,Epr),e(CE,Cpr),e(ie,wpr),e(ie,wE),e(wE,$ve),e($ve,Apr),e(wE,ypr),e(wE,fQ),e(fQ,Lpr),e(wE,xpr),e(ie,$pr),e(ie,AE),e(AE,kve),e(kve,kpr),e(AE,Spr),e(AE,gQ),e(gQ,Rpr),e(AE,Ppr),e(ie,Bpr),e(ie,yE),e(yE,Sve),e(Sve,Ipr),e(yE,qpr),e(yE,hQ),e(hQ,Npr),e(yE,jpr),e(ie,Dpr),e(ie,LE),e(LE,Rve),e(Rve,Gpr),e(LE,Opr),e(LE,uQ),e(uQ,Vpr),e(LE,Xpr),e(ie,zpr),e(ie,xE),e(xE,Pve),e(Pve,Wpr),e(xE,Qpr),e(xE,pQ),e(pQ,Hpr),e(xE,Upr),e(ie,Jpr),e(ie,$E),e($E,Bve),e(Bve,Ypr),e($E,Kpr),e($E,_Q),e(_Q,Zpr),e($E,e_r),e(ie,o_r),e(ie,kE),e(kE,Ive),e(Ive,r_r),e(kE,t_r),e(kE,bQ),e(bQ,a_r),e(kE,n_r),e(ie,s_r),e(ie,SE),e(SE,qve),e(qve,l_r),e(SE,i_r),e(SE,vQ),e(vQ,d_r),e(SE,c_r),e(ie,m_r),e(ie,RE),e(RE,Nve),e(Nve,f_r),e(RE,g_r),e(RE,FQ),e(FQ,h_r),e(RE,u_r),e(ie,p_r),e(ie,PE),e(PE,jve),e(jve,__r),e(PE,b_r),e(PE,TQ),e(TQ,v_r),e(PE,F_r),e(ie,T_r),e(ie,BE),e(BE,Dve),e(Dve,M_r),e(BE,E_r),e(BE,MQ),e(MQ,C_r),e(BE,w_r),e(ie,A_r),e(ie,IE),e(IE,Gve),e(Gve,y_r),e(IE,L_r),e(IE,EQ),e(EQ,x_r),e(IE,$_r),e(ie,k_r),e(ie,qE),e(qE,Ove),e(Ove,S_r),e(qE,R_r),e(qE,CQ),e(CQ,P_r),e(qE,B_r),e(ie,I_r),e(ie,NE),e(NE,Vve),e(Vve,q_r),e(NE,N_r),e(NE,wQ),e(wQ,j_r),e(NE,D_r),e(ie,G_r),e(ie,jE),e(jE,Xve),e(Xve,O_r),e(jE,V_r),e(jE,AQ),e(AQ,X_r),e(jE,z_r),e(ie,W_r),e(ie,DE),e(DE,zve),e(zve,Q_r),e(DE,H_r),e(DE,yQ),e(yQ,U_r),e(DE,J_r),e(ie,Y_r),e(ie,GE),e(GE,Wve),e(Wve,K_r),e(GE,Z_r),e(GE,LQ),e(LQ,ebr),e(GE,obr),e(ie,rbr),e(ie,OE),e(OE,Qve),e(Qve,tbr),e(OE,abr),e(OE,xQ),e(xQ,nbr),e(OE,sbr),e(xr,lbr),M(VE,xr,null),b(m,Dqe,_),b(m,oc,_),e(oc,XE),e(XE,Hve),M(gx,Hve,null),e(oc,ibr),e(oc,Uve),e(Uve,dbr),b(m,Gqe,_),b(m,rr,_),M(hx,rr,null),e(rr,cbr),e(rr,rc),e(rc,mbr),e(rc,$Q),e($Q,fbr),e(rc,gbr),e(rc,kQ),e(kQ,hbr),e(rc,ubr),e(rr,pbr),e(rr,ux),e(ux,_br),e(ux,Jve),e(Jve,bbr),e(ux,vbr),e(rr,Fbr),e(rr,St),M(px,St,null),e(St,Tbr),e(St,Yve),e(Yve,Mbr),e(St,Ebr),e(St,tc),e(tc,Cbr),e(tc,Kve),e(Kve,wbr),e(tc,Abr),e(tc,SQ),e(SQ,ybr),e(tc,Lbr),e(St,xbr),M(zE,St,null),e(rr,$br),e(rr,$r),M(_x,$r,null),e($r,kbr),e($r,Zve),e(Zve,Sbr),e($r,Rbr),e($r,an),e(an,Pbr),e(an,eFe),e(eFe,Bbr),e(an,Ibr),e(an,oFe),e(oFe,qbr),e(an,Nbr),e(an,rFe),e(rFe,jbr),e(an,Dbr),e($r,Gbr),e($r,ye),e(ye,WE),e(WE,tFe),e(tFe,Obr),e(WE,Vbr),e(WE,RQ),e(RQ,Xbr),e(WE,zbr),e(ye,Wbr),e(ye,QE),e(QE,aFe),e(aFe,Qbr),e(QE,Hbr),e(QE,PQ),e(PQ,Ubr),e(QE,Jbr),e(ye,Ybr),e(ye,HE),e(HE,nFe),e(nFe,Kbr),e(HE,Zbr),e(HE,BQ),e(BQ,e2r),e(HE,o2r),e(ye,r2r),e(ye,UE),e(UE,sFe),e(sFe,t2r),e(UE,a2r),e(UE,IQ),e(IQ,n2r),e(UE,s2r),e(ye,l2r),e(ye,JE),e(JE,lFe),e(lFe,i2r),e(JE,d2r),e(JE,qQ),e(qQ,c2r),e(JE,m2r),e(ye,f2r),e(ye,YE),e(YE,iFe),e(iFe,g2r),e(YE,h2r),e(YE,NQ),e(NQ,u2r),e(YE,p2r),e(ye,_2r),e(ye,KE),e(KE,dFe),e(dFe,b2r),e(KE,v2r),e(KE,jQ),e(jQ,F2r),e(KE,T2r),e(ye,M2r),e(ye,ZE),e(ZE,cFe),e(cFe,E2r),e(ZE,C2r),e(ZE,DQ),e(DQ,w2r),e(ZE,A2r),e(ye,y2r),e(ye,eC),e(eC,mFe),e(mFe,L2r),e(eC,x2r),e(eC,GQ),e(GQ,$2r),e(eC,k2r),e(ye,S2r),e(ye,oC),e(oC,fFe),e(fFe,R2r),e(oC,P2r),e(oC,OQ),e(OQ,B2r),e(oC,I2r),e($r,q2r),M(rC,$r,null),b(m,Oqe,_),b(m,ac,_),e(ac,tC),e(tC,gFe),M(bx,gFe,null),e(ac,N2r),e(ac,hFe),e(hFe,j2r),b(m,Vqe,_),b(m,tr,_),M(vx,tr,null),e(tr,D2r),e(tr,nc),e(nc,G2r),e(nc,VQ),e(VQ,O2r),e(nc,V2r),e(nc,XQ),e(XQ,X2r),e(nc,z2r),e(tr,W2r),e(tr,Fx),e(Fx,Q2r),e(Fx,uFe),e(uFe,H2r),e(Fx,U2r),e(tr,J2r),e(tr,Rt),M(Tx,Rt,null),e(Rt,Y2r),e(Rt,pFe),e(pFe,K2r),e(Rt,Z2r),e(Rt,sc),e(sc,evr),e(sc,_Fe),e(_Fe,ovr),e(sc,rvr),e(sc,zQ),e(zQ,tvr),e(sc,avr),e(Rt,nvr),M(aC,Rt,null),e(tr,svr),e(tr,kr),M(Mx,kr,null),e(kr,lvr),e(kr,bFe),e(bFe,ivr),e(kr,dvr),e(kr,nn),e(nn,cvr),e(nn,vFe),e(vFe,mvr),e(nn,fvr),e(nn,FFe),e(FFe,gvr),e(nn,hvr),e(nn,TFe),e(TFe,uvr),e(nn,pvr),e(kr,_vr),e(kr,ee),e(ee,nC),e(nC,MFe),e(MFe,bvr),e(nC,vvr),e(nC,WQ),e(WQ,Fvr),e(nC,Tvr),e(ee,Mvr),e(ee,sC),e(sC,EFe),e(EFe,Evr),e(sC,Cvr),e(sC,QQ),e(QQ,wvr),e(sC,Avr),e(ee,yvr),e(ee,lC),e(lC,CFe),e(CFe,Lvr),e(lC,xvr),e(lC,HQ),e(HQ,$vr),e(lC,kvr),e(ee,Svr),e(ee,iC),e(iC,wFe),e(wFe,Rvr),e(iC,Pvr),e(iC,UQ),e(UQ,Bvr),e(iC,Ivr),e(ee,qvr),e(ee,dC),e(dC,AFe),e(AFe,Nvr),e(dC,jvr),e(dC,JQ),e(JQ,Dvr),e(dC,Gvr),e(ee,Ovr),e(ee,cC),e(cC,yFe),e(yFe,Vvr),e(cC,Xvr),e(cC,YQ),e(YQ,zvr),e(cC,Wvr),e(ee,Qvr),e(ee,mC),e(mC,LFe),e(LFe,Hvr),e(mC,Uvr),e(mC,KQ),e(KQ,Jvr),e(mC,Yvr),e(ee,Kvr),e(ee,fC),e(fC,xFe),e(xFe,Zvr),e(fC,eFr),e(fC,ZQ),e(ZQ,oFr),e(fC,rFr),e(ee,tFr),e(ee,gC),e(gC,$Fe),e($Fe,aFr),e(gC,nFr),e(gC,eH),e(eH,sFr),e(gC,lFr),e(ee,iFr),e(ee,hC),e(hC,kFe),e(kFe,dFr),e(hC,cFr),e(hC,oH),e(oH,mFr),e(hC,fFr),e(ee,gFr),e(ee,uC),e(uC,SFe),e(SFe,hFr),e(uC,uFr),e(uC,rH),e(rH,pFr),e(uC,_Fr),e(ee,bFr),e(ee,pC),e(pC,RFe),e(RFe,vFr),e(pC,FFr),e(pC,tH),e(tH,TFr),e(pC,MFr),e(ee,EFr),e(ee,_C),e(_C,PFe),e(PFe,CFr),e(_C,wFr),e(_C,aH),e(aH,AFr),e(_C,yFr),e(ee,LFr),e(ee,bC),e(bC,BFe),e(BFe,xFr),e(bC,$Fr),e(bC,nH),e(nH,kFr),e(bC,SFr),e(ee,RFr),e(ee,vC),e(vC,IFe),e(IFe,PFr),e(vC,BFr),e(vC,sH),e(sH,IFr),e(vC,qFr),e(ee,NFr),e(ee,FC),e(FC,qFe),e(qFe,jFr),e(FC,DFr),e(FC,lH),e(lH,GFr),e(FC,OFr),e(ee,VFr),e(ee,TC),e(TC,NFe),e(NFe,XFr),e(TC,zFr),e(TC,iH),e(iH,WFr),e(TC,QFr),e(ee,HFr),e(ee,MC),e(MC,jFe),e(jFe,UFr),e(MC,JFr),e(MC,dH),e(dH,YFr),e(MC,KFr),e(ee,ZFr),e(ee,EC),e(EC,DFe),e(DFe,e1r),e(EC,o1r),e(EC,cH),e(cH,r1r),e(EC,t1r),e(ee,a1r),e(ee,CC),e(CC,GFe),e(GFe,n1r),e(CC,s1r),e(CC,mH),e(mH,l1r),e(CC,i1r),e(ee,d1r),e(ee,wC),e(wC,OFe),e(OFe,c1r),e(wC,m1r),e(wC,fH),e(fH,f1r),e(wC,g1r),e(ee,h1r),e(ee,AC),e(AC,VFe),e(VFe,u1r),e(AC,p1r),e(AC,gH),e(gH,_1r),e(AC,b1r),e(ee,v1r),e(ee,yC),e(yC,XFe),e(XFe,F1r),e(yC,T1r),e(yC,hH),e(hH,M1r),e(yC,E1r),e(ee,C1r),e(ee,LC),e(LC,zFe),e(zFe,w1r),e(LC,A1r),e(LC,uH),e(uH,y1r),e(LC,L1r),e(ee,x1r),e(ee,xC),e(xC,WFe),e(WFe,$1r),e(xC,k1r),e(xC,pH),e(pH,S1r),e(xC,R1r),e(ee,P1r),e(ee,$C),e($C,QFe),e(QFe,B1r),e($C,I1r),e($C,_H),e(_H,q1r),e($C,N1r),e(kr,j1r),M(kC,kr,null),b(m,Xqe,_),b(m,lc,_),e(lc,SC),e(SC,HFe),M(Ex,HFe,null),e(lc,D1r),e(lc,UFe),e(UFe,G1r),b(m,zqe,_),b(m,ar,_),M(Cx,ar,null),e(ar,O1r),e(ar,ic),e(ic,V1r),e(ic,bH),e(bH,X1r),e(ic,z1r),e(ic,vH),e(vH,W1r),e(ic,Q1r),e(ar,H1r),e(ar,wx),e(wx,U1r),e(wx,JFe),e(JFe,J1r),e(wx,Y1r),e(ar,K1r),e(ar,Pt),M(Ax,Pt,null),e(Pt,Z1r),e(Pt,YFe),e(YFe,eTr),e(Pt,oTr),e(Pt,dc),e(dc,rTr),e(dc,KFe),e(KFe,tTr),e(dc,aTr),e(dc,FH),e(FH,nTr),e(dc,sTr),e(Pt,lTr),M(RC,Pt,null),e(ar,iTr),e(ar,Sr),M(yx,Sr,null),e(Sr,dTr),e(Sr,ZFe),e(ZFe,cTr),e(Sr,mTr),e(Sr,sn),e(sn,fTr),e(sn,e1e),e(e1e,gTr),e(sn,hTr),e(sn,o1e),e(o1e,uTr),e(sn,pTr),e(sn,r1e),e(r1e,_Tr),e(sn,bTr),e(Sr,vTr),e(Sr,he),e(he,PC),e(PC,t1e),e(t1e,FTr),e(PC,TTr),e(PC,TH),e(TH,MTr),e(PC,ETr),e(he,CTr),e(he,BC),e(BC,a1e),e(a1e,wTr),e(BC,ATr),e(BC,MH),e(MH,yTr),e(BC,LTr),e(he,xTr),e(he,IC),e(IC,n1e),e(n1e,$Tr),e(IC,kTr),e(IC,EH),e(EH,STr),e(IC,RTr),e(he,PTr),e(he,qC),e(qC,s1e),e(s1e,BTr),e(qC,ITr),e(qC,CH),e(CH,qTr),e(qC,NTr),e(he,jTr),e(he,NC),e(NC,l1e),e(l1e,DTr),e(NC,GTr),e(NC,wH),e(wH,OTr),e(NC,VTr),e(he,XTr),e(he,jC),e(jC,i1e),e(i1e,zTr),e(jC,WTr),e(jC,AH),e(AH,QTr),e(jC,HTr),e(he,UTr),e(he,DC),e(DC,d1e),e(d1e,JTr),e(DC,YTr),e(DC,yH),e(yH,KTr),e(DC,ZTr),e(he,eMr),e(he,GC),e(GC,c1e),e(c1e,oMr),e(GC,rMr),e(GC,LH),e(LH,tMr),e(GC,aMr),e(he,nMr),e(he,OC),e(OC,m1e),e(m1e,sMr),e(OC,lMr),e(OC,xH),e(xH,iMr),e(OC,dMr),e(he,cMr),e(he,VC),e(VC,f1e),e(f1e,mMr),e(VC,fMr),e(VC,$H),e($H,gMr),e(VC,hMr),e(he,uMr),e(he,XC),e(XC,g1e),e(g1e,pMr),e(XC,_Mr),e(XC,kH),e(kH,bMr),e(XC,vMr),e(he,FMr),e(he,zC),e(zC,h1e),e(h1e,TMr),e(zC,MMr),e(zC,SH),e(SH,EMr),e(zC,CMr),e(he,wMr),e(he,WC),e(WC,u1e),e(u1e,AMr),e(WC,yMr),e(WC,RH),e(RH,LMr),e(WC,xMr),e(he,$Mr),e(he,QC),e(QC,p1e),e(p1e,kMr),e(QC,SMr),e(QC,PH),e(PH,RMr),e(QC,PMr),e(he,BMr),e(he,HC),e(HC,_1e),e(_1e,IMr),e(HC,qMr),e(HC,BH),e(BH,NMr),e(HC,jMr),e(he,DMr),e(he,UC),e(UC,b1e),e(b1e,GMr),e(UC,OMr),e(UC,IH),e(IH,VMr),e(UC,XMr),e(he,zMr),e(he,JC),e(JC,v1e),e(v1e,WMr),e(JC,QMr),e(JC,qH),e(qH,HMr),e(JC,UMr),e(Sr,JMr),M(YC,Sr,null),b(m,Wqe,_),b(m,cc,_),e(cc,KC),e(KC,F1e),M(Lx,F1e,null),e(cc,YMr),e(cc,T1e),e(T1e,KMr),b(m,Qqe,_),b(m,nr,_),M(xx,nr,null),e(nr,ZMr),e(nr,mc),e(mc,e4r),e(mc,NH),e(NH,o4r),e(mc,r4r),e(mc,jH),e(jH,t4r),e(mc,a4r),e(nr,n4r),e(nr,$x),e($x,s4r),e($x,M1e),e(M1e,l4r),e($x,i4r),e(nr,d4r),e(nr,Bt),M(kx,Bt,null),e(Bt,c4r),e(Bt,E1e),e(E1e,m4r),e(Bt,f4r),e(Bt,fc),e(fc,g4r),e(fc,C1e),e(C1e,h4r),e(fc,u4r),e(fc,DH),e(DH,p4r),e(fc,_4r),e(Bt,b4r),M(ZC,Bt,null),e(nr,v4r),e(nr,Rr),M(Sx,Rr,null),e(Rr,F4r),e(Rr,w1e),e(w1e,T4r),e(Rr,M4r),e(Rr,ln),e(ln,E4r),e(ln,A1e),e(A1e,C4r),e(ln,w4r),e(ln,y1e),e(y1e,A4r),e(ln,y4r),e(ln,L1e),e(L1e,L4r),e(ln,x4r),e(Rr,$4r),e(Rr,Rx),e(Rx,e5),e(e5,x1e),e(x1e,k4r),e(e5,S4r),e(e5,GH),e(GH,R4r),e(e5,P4r),e(Rx,B4r),e(Rx,o5),e(o5,$1e),e($1e,I4r),e(o5,q4r),e(o5,OH),e(OH,N4r),e(o5,j4r),e(Rr,D4r),M(r5,Rr,null),b(m,Hqe,_),b(m,gc,_),e(gc,t5),e(t5,k1e),M(Px,k1e,null),e(gc,G4r),e(gc,S1e),e(S1e,O4r),b(m,Uqe,_),b(m,sr,_),M(Bx,sr,null),e(sr,V4r),e(sr,hc),e(hc,X4r),e(hc,VH),e(VH,z4r),e(hc,W4r),e(hc,XH),e(XH,Q4r),e(hc,H4r),e(sr,U4r),e(sr,Ix),e(Ix,J4r),e(Ix,R1e),e(R1e,Y4r),e(Ix,K4r),e(sr,Z4r),e(sr,It),M(qx,It,null),e(It,eEr),e(It,P1e),e(P1e,oEr),e(It,rEr),e(It,uc),e(uc,tEr),e(uc,B1e),e(B1e,aEr),e(uc,nEr),e(uc,zH),e(zH,sEr),e(uc,lEr),e(It,iEr),M(a5,It,null),e(sr,dEr),e(sr,Pr),M(Nx,Pr,null),e(Pr,cEr),e(Pr,I1e),e(I1e,mEr),e(Pr,fEr),e(Pr,dn),e(dn,gEr),e(dn,q1e),e(q1e,hEr),e(dn,uEr),e(dn,N1e),e(N1e,pEr),e(dn,_Er),e(dn,j1e),e(j1e,bEr),e(dn,vEr),e(Pr,FEr),e(Pr,D1e),e(D1e,n5),e(n5,G1e),e(G1e,TEr),e(n5,MEr),e(n5,WH),e(WH,EEr),e(n5,CEr),e(Pr,wEr),M(s5,Pr,null),b(m,Jqe,_),b(m,pc,_),e(pc,l5),e(l5,O1e),M(jx,O1e,null),e(pc,AEr),e(pc,V1e),e(V1e,yEr),b(m,Yqe,_),b(m,lr,_),M(Dx,lr,null),e(lr,LEr),e(lr,_c),e(_c,xEr),e(_c,QH),e(QH,$Er),e(_c,kEr),e(_c,HH),e(HH,SEr),e(_c,REr),e(lr,PEr),e(lr,Gx),e(Gx,BEr),e(Gx,X1e),e(X1e,IEr),e(Gx,qEr),e(lr,NEr),e(lr,qt),M(Ox,qt,null),e(qt,jEr),e(qt,z1e),e(z1e,DEr),e(qt,GEr),e(qt,bc),e(bc,OEr),e(bc,W1e),e(W1e,VEr),e(bc,XEr),e(bc,UH),e(UH,zEr),e(bc,WEr),e(qt,QEr),M(i5,qt,null),e(lr,HEr),e(lr,Br),M(Vx,Br,null),e(Br,UEr),e(Br,Q1e),e(Q1e,JEr),e(Br,YEr),e(Br,cn),e(cn,KEr),e(cn,H1e),e(H1e,ZEr),e(cn,eCr),e(cn,U1e),e(U1e,oCr),e(cn,rCr),e(cn,J1e),e(J1e,tCr),e(cn,aCr),e(Br,nCr),e(Br,de),e(de,d5),e(d5,Y1e),e(Y1e,sCr),e(d5,lCr),e(d5,JH),e(JH,iCr),e(d5,dCr),e(de,cCr),e(de,c5),e(c5,K1e),e(K1e,mCr),e(c5,fCr),e(c5,YH),e(YH,gCr),e(c5,hCr),e(de,uCr),e(de,m5),e(m5,Z1e),e(Z1e,pCr),e(m5,_Cr),e(m5,KH),e(KH,bCr),e(m5,vCr),e(de,FCr),e(de,f5),e(f5,eTe),e(eTe,TCr),e(f5,MCr),e(f5,ZH),e(ZH,ECr),e(f5,CCr),e(de,wCr),e(de,g5),e(g5,oTe),e(oTe,ACr),e(g5,yCr),e(g5,eU),e(eU,LCr),e(g5,xCr),e(de,$Cr),e(de,h5),e(h5,rTe),e(rTe,kCr),e(h5,SCr),e(h5,oU),e(oU,RCr),e(h5,PCr),e(de,BCr),e(de,u5),e(u5,tTe),e(tTe,ICr),e(u5,qCr),e(u5,rU),e(rU,NCr),e(u5,jCr),e(de,DCr),e(de,p5),e(p5,aTe),e(aTe,GCr),e(p5,OCr),e(p5,tU),e(tU,VCr),e(p5,XCr),e(de,zCr),e(de,_5),e(_5,nTe),e(nTe,WCr),e(_5,QCr),e(_5,aU),e(aU,HCr),e(_5,UCr),e(de,JCr),e(de,b5),e(b5,sTe),e(sTe,YCr),e(b5,KCr),e(b5,nU),e(nU,ZCr),e(b5,e5r),e(de,o5r),e(de,v5),e(v5,lTe),e(lTe,r5r),e(v5,t5r),e(v5,sU),e(sU,a5r),e(v5,n5r),e(de,s5r),e(de,F5),e(F5,iTe),e(iTe,l5r),e(F5,i5r),e(F5,lU),e(lU,d5r),e(F5,c5r),e(de,m5r),e(de,T5),e(T5,dTe),e(dTe,f5r),e(T5,g5r),e(T5,iU),e(iU,h5r),e(T5,u5r),e(de,p5r),e(de,M5),e(M5,cTe),e(cTe,_5r),e(M5,b5r),e(M5,dU),e(dU,v5r),e(M5,F5r),e(de,T5r),e(de,E5),e(E5,mTe),e(mTe,M5r),e(E5,E5r),e(E5,cU),e(cU,C5r),e(E5,w5r),e(de,A5r),e(de,C5),e(C5,fTe),e(fTe,y5r),e(C5,L5r),e(C5,mU),e(mU,x5r),e(C5,$5r),e(de,k5r),e(de,w5),e(w5,gTe),e(gTe,S5r),e(w5,R5r),e(w5,fU),e(fU,P5r),e(w5,B5r),e(de,I5r),e(de,A5),e(A5,hTe),e(hTe,q5r),e(A5,N5r),e(A5,gU),e(gU,j5r),e(A5,D5r),e(de,G5r),e(de,y5),e(y5,uTe),e(uTe,O5r),e(y5,V5r),e(y5,hU),e(hU,X5r),e(y5,z5r),e(de,W5r),e(de,L5),e(L5,pTe),e(pTe,Q5r),e(L5,H5r),e(L5,uU),e(uU,U5r),e(L5,J5r),e(Br,Y5r),M(x5,Br,null),b(m,Kqe,_),b(m,vc,_),e(vc,$5),e($5,_Te),M(Xx,_Te,null),e(vc,K5r),e(vc,bTe),e(bTe,Z5r),b(m,Zqe,_),b(m,ir,_),M(zx,ir,null),e(ir,e3r),e(ir,Fc),e(Fc,o3r),e(Fc,pU),e(pU,r3r),e(Fc,t3r),e(Fc,_U),e(_U,a3r),e(Fc,n3r),e(ir,s3r),e(ir,Wx),e(Wx,l3r),e(Wx,vTe),e(vTe,i3r),e(Wx,d3r),e(ir,c3r),e(ir,Nt),M(Qx,Nt,null),e(Nt,m3r),e(Nt,FTe),e(FTe,f3r),e(Nt,g3r),e(Nt,Tc),e(Tc,h3r),e(Tc,TTe),e(TTe,u3r),e(Tc,p3r),e(Tc,bU),e(bU,_3r),e(Tc,b3r),e(Nt,v3r),M(k5,Nt,null),e(ir,F3r),e(ir,Ir),M(Hx,Ir,null),e(Ir,T3r),e(Ir,MTe),e(MTe,M3r),e(Ir,E3r),e(Ir,mn),e(mn,C3r),e(mn,ETe),e(ETe,w3r),e(mn,A3r),e(mn,CTe),e(CTe,y3r),e(mn,L3r),e(mn,wTe),e(wTe,x3r),e(mn,$3r),e(Ir,k3r),e(Ir,ce),e(ce,S5),e(S5,ATe),e(ATe,S3r),e(S5,R3r),e(S5,vU),e(vU,P3r),e(S5,B3r),e(ce,I3r),e(ce,R5),e(R5,yTe),e(yTe,q3r),e(R5,N3r),e(R5,FU),e(FU,j3r),e(R5,D3r),e(ce,G3r),e(ce,P5),e(P5,LTe),e(LTe,O3r),e(P5,V3r),e(P5,TU),e(TU,X3r),e(P5,z3r),e(ce,W3r),e(ce,B5),e(B5,xTe),e(xTe,Q3r),e(B5,H3r),e(B5,MU),e(MU,U3r),e(B5,J3r),e(ce,Y3r),e(ce,I5),e(I5,$Te),e($Te,K3r),e(I5,Z3r),e(I5,EU),e(EU,ewr),e(I5,owr),e(ce,rwr),e(ce,q5),e(q5,kTe),e(kTe,twr),e(q5,awr),e(q5,CU),e(CU,nwr),e(q5,swr),e(ce,lwr),e(ce,N5),e(N5,STe),e(STe,iwr),e(N5,dwr),e(N5,wU),e(wU,cwr),e(N5,mwr),e(ce,fwr),e(ce,j5),e(j5,RTe),e(RTe,gwr),e(j5,hwr),e(j5,AU),e(AU,uwr),e(j5,pwr),e(ce,_wr),e(ce,D5),e(D5,PTe),e(PTe,bwr),e(D5,vwr),e(D5,yU),e(yU,Fwr),e(D5,Twr),e(ce,Mwr),e(ce,G5),e(G5,BTe),e(BTe,Ewr),e(G5,Cwr),e(G5,LU),e(LU,wwr),e(G5,Awr),e(ce,ywr),e(ce,O5),e(O5,ITe),e(ITe,Lwr),e(O5,xwr),e(O5,xU),e(xU,$wr),e(O5,kwr),e(ce,Swr),e(ce,V5),e(V5,qTe),e(qTe,Rwr),e(V5,Pwr),e(V5,$U),e($U,Bwr),e(V5,Iwr),e(ce,qwr),e(ce,X5),e(X5,NTe),e(NTe,Nwr),e(X5,jwr),e(X5,kU),e(kU,Dwr),e(X5,Gwr),e(ce,Owr),e(ce,z5),e(z5,jTe),e(jTe,Vwr),e(z5,Xwr),e(z5,SU),e(SU,zwr),e(z5,Wwr),e(ce,Qwr),e(ce,W5),e(W5,DTe),e(DTe,Hwr),e(W5,Uwr),e(W5,RU),e(RU,Jwr),e(W5,Ywr),e(ce,Kwr),e(ce,Q5),e(Q5,GTe),e(GTe,Zwr),e(Q5,eAr),e(Q5,PU),e(PU,oAr),e(Q5,rAr),e(ce,tAr),e(ce,H5),e(H5,OTe),e(OTe,aAr),e(H5,nAr),e(H5,BU),e(BU,sAr),e(H5,lAr),e(ce,iAr),e(ce,U5),e(U5,VTe),e(VTe,dAr),e(U5,cAr),e(U5,IU),e(IU,mAr),e(U5,fAr),e(ce,gAr),e(ce,J5),e(J5,XTe),e(XTe,hAr),e(J5,uAr),e(J5,qU),e(qU,pAr),e(J5,_Ar),e(ce,bAr),e(ce,Y5),e(Y5,zTe),e(zTe,vAr),e(Y5,FAr),e(Y5,NU),e(NU,TAr),e(Y5,MAr),e(Ir,EAr),M(K5,Ir,null),b(m,eNe,_),b(m,Mc,_),e(Mc,Z5),e(Z5,WTe),M(Ux,WTe,null),e(Mc,CAr),e(Mc,QTe),e(QTe,wAr),b(m,oNe,_),b(m,dr,_),M(Jx,dr,null),e(dr,AAr),e(dr,Ec),e(Ec,yAr),e(Ec,jU),e(jU,LAr),e(Ec,xAr),e(Ec,DU),e(DU,$Ar),e(Ec,kAr),e(dr,SAr),e(dr,Yx),e(Yx,RAr),e(Yx,HTe),e(HTe,PAr),e(Yx,BAr),e(dr,IAr),e(dr,jt),M(Kx,jt,null),e(jt,qAr),e(jt,UTe),e(UTe,NAr),e(jt,jAr),e(jt,Cc),e(Cc,DAr),e(Cc,JTe),e(JTe,GAr),e(Cc,OAr),e(Cc,GU),e(GU,VAr),e(Cc,XAr),e(jt,zAr),M(e3,jt,null),e(dr,WAr),e(dr,qr),M(Zx,qr,null),e(qr,QAr),e(qr,YTe),e(YTe,HAr),e(qr,UAr),e(qr,fn),e(fn,JAr),e(fn,KTe),e(KTe,YAr),e(fn,KAr),e(fn,ZTe),e(ZTe,ZAr),e(fn,e6r),e(fn,eMe),e(eMe,o6r),e(fn,r6r),e(qr,t6r),e(qr,oMe),e(oMe,o3),e(o3,rMe),e(rMe,a6r),e(o3,n6r),e(o3,OU),e(OU,s6r),e(o3,l6r),e(qr,i6r),M(r3,qr,null),b(m,rNe,_),b(m,wc,_),e(wc,t3),e(t3,tMe),M(e9,tMe,null),e(wc,d6r),e(wc,aMe),e(aMe,c6r),b(m,tNe,_),b(m,cr,_),M(o9,cr,null),e(cr,m6r),e(cr,Ac),e(Ac,f6r),e(Ac,VU),e(VU,g6r),e(Ac,h6r),e(Ac,XU),e(XU,u6r),e(Ac,p6r),e(cr,_6r),e(cr,r9),e(r9,b6r),e(r9,nMe),e(nMe,v6r),e(r9,F6r),e(cr,T6r),e(cr,Dt),M(t9,Dt,null),e(Dt,M6r),e(Dt,sMe),e(sMe,E6r),e(Dt,C6r),e(Dt,yc),e(yc,w6r),e(yc,lMe),e(lMe,A6r),e(yc,y6r),e(yc,zU),e(zU,L6r),e(yc,x6r),e(Dt,$6r),M(a3,Dt,null),e(cr,k6r),e(cr,Nr),M(a9,Nr,null),e(Nr,S6r),e(Nr,iMe),e(iMe,R6r),e(Nr,P6r),e(Nr,gn),e(gn,B6r),e(gn,dMe),e(dMe,I6r),e(gn,q6r),e(gn,cMe),e(cMe,N6r),e(gn,j6r),e(gn,mMe),e(mMe,D6r),e(gn,G6r),e(Nr,O6r),e(Nr,fMe),e(fMe,n3),e(n3,gMe),e(gMe,V6r),e(n3,X6r),e(n3,WU),e(WU,z6r),e(n3,W6r),e(Nr,Q6r),M(s3,Nr,null),b(m,aNe,_),b(m,Lc,_),e(Lc,l3),e(l3,hMe),M(n9,hMe,null),e(Lc,H6r),e(Lc,uMe),e(uMe,U6r),b(m,nNe,_),b(m,mr,_),M(s9,mr,null),e(mr,J6r),e(mr,xc),e(xc,Y6r),e(xc,QU),e(QU,K6r),e(xc,Z6r),e(xc,HU),e(HU,e0r),e(xc,o0r),e(mr,r0r),e(mr,l9),e(l9,t0r),e(l9,pMe),e(pMe,a0r),e(l9,n0r),e(mr,s0r),e(mr,Gt),M(i9,Gt,null),e(Gt,l0r),e(Gt,_Me),e(_Me,i0r),e(Gt,d0r),e(Gt,$c),e($c,c0r),e($c,bMe),e(bMe,m0r),e($c,f0r),e($c,UU),e(UU,g0r),e($c,h0r),e(Gt,u0r),M(i3,Gt,null),e(mr,p0r),e(mr,jr),M(d9,jr,null),e(jr,_0r),e(jr,vMe),e(vMe,b0r),e(jr,v0r),e(jr,hn),e(hn,F0r),e(hn,FMe),e(FMe,T0r),e(hn,M0r),e(hn,TMe),e(TMe,E0r),e(hn,C0r),e(hn,MMe),e(MMe,w0r),e(hn,A0r),e(jr,y0r),e(jr,re),e(re,d3),e(d3,EMe),e(EMe,L0r),e(d3,x0r),e(d3,JU),e(JU,$0r),e(d3,k0r),e(re,S0r),e(re,c3),e(c3,CMe),e(CMe,R0r),e(c3,P0r),e(c3,YU),e(YU,B0r),e(c3,I0r),e(re,q0r),e(re,m3),e(m3,wMe),e(wMe,N0r),e(m3,j0r),e(m3,KU),e(KU,D0r),e(m3,G0r),e(re,O0r),e(re,f3),e(f3,AMe),e(AMe,V0r),e(f3,X0r),e(f3,ZU),e(ZU,z0r),e(f3,W0r),e(re,Q0r),e(re,g3),e(g3,yMe),e(yMe,H0r),e(g3,U0r),e(g3,eJ),e(eJ,J0r),e(g3,Y0r),e(re,K0r),e(re,h3),e(h3,LMe),e(LMe,Z0r),e(h3,eyr),e(h3,oJ),e(oJ,oyr),e(h3,ryr),e(re,tyr),e(re,u3),e(u3,xMe),e(xMe,ayr),e(u3,nyr),e(u3,rJ),e(rJ,syr),e(u3,lyr),e(re,iyr),e(re,p3),e(p3,$Me),e($Me,dyr),e(p3,cyr),e(p3,tJ),e(tJ,myr),e(p3,fyr),e(re,gyr),e(re,_3),e(_3,kMe),e(kMe,hyr),e(_3,uyr),e(_3,aJ),e(aJ,pyr),e(_3,_yr),e(re,byr),e(re,b3),e(b3,SMe),e(SMe,vyr),e(b3,Fyr),e(b3,nJ),e(nJ,Tyr),e(b3,Myr),e(re,Eyr),e(re,v3),e(v3,RMe),e(RMe,Cyr),e(v3,wyr),e(v3,sJ),e(sJ,Ayr),e(v3,yyr),e(re,Lyr),e(re,F3),e(F3,PMe),e(PMe,xyr),e(F3,$yr),e(F3,lJ),e(lJ,kyr),e(F3,Syr),e(re,Ryr),e(re,T3),e(T3,BMe),e(BMe,Pyr),e(T3,Byr),e(T3,iJ),e(iJ,Iyr),e(T3,qyr),e(re,Nyr),e(re,M3),e(M3,IMe),e(IMe,jyr),e(M3,Dyr),e(M3,dJ),e(dJ,Gyr),e(M3,Oyr),e(re,Vyr),e(re,E3),e(E3,qMe),e(qMe,Xyr),e(E3,zyr),e(E3,cJ),e(cJ,Wyr),e(E3,Qyr),e(re,Hyr),e(re,C3),e(C3,NMe),e(NMe,Uyr),e(C3,Jyr),e(C3,mJ),e(mJ,Yyr),e(C3,Kyr),e(re,Zyr),e(re,w3),e(w3,jMe),e(jMe,eLr),e(w3,oLr),e(w3,fJ),e(fJ,rLr),e(w3,tLr),e(re,aLr),e(re,A3),e(A3,DMe),e(DMe,nLr),e(A3,sLr),e(A3,gJ),e(gJ,lLr),e(A3,iLr),e(re,dLr),e(re,y3),e(y3,GMe),e(GMe,cLr),e(y3,mLr),e(y3,hJ),e(hJ,fLr),e(y3,gLr),e(re,hLr),e(re,L3),e(L3,OMe),e(OMe,uLr),e(L3,pLr),e(L3,uJ),e(uJ,_Lr),e(L3,bLr),e(re,vLr),e(re,x3),e(x3,VMe),e(VMe,FLr),e(x3,TLr),e(x3,pJ),e(pJ,MLr),e(x3,ELr),e(re,CLr),e(re,$3),e($3,XMe),e(XMe,wLr),e($3,ALr),e($3,_J),e(_J,yLr),e($3,LLr),e(re,xLr),e(re,k3),e(k3,zMe),e(zMe,$Lr),e(k3,kLr),e(k3,bJ),e(bJ,SLr),e(k3,RLr),e(re,PLr),e(re,S3),e(S3,WMe),e(WMe,BLr),e(S3,ILr),e(S3,vJ),e(vJ,qLr),e(S3,NLr),e(re,jLr),e(re,R3),e(R3,QMe),e(QMe,DLr),e(R3,GLr),e(R3,FJ),e(FJ,OLr),e(R3,VLr),e(jr,XLr),M(P3,jr,null),b(m,sNe,_),b(m,kc,_),e(kc,B3),e(B3,HMe),M(c9,HMe,null),e(kc,zLr),e(kc,UMe),e(UMe,WLr),b(m,lNe,_),b(m,fr,_),M(m9,fr,null),e(fr,QLr),e(fr,Sc),e(Sc,HLr),e(Sc,TJ),e(TJ,ULr),e(Sc,JLr),e(Sc,MJ),e(MJ,YLr),e(Sc,KLr),e(fr,ZLr),e(fr,f9),e(f9,e8r),e(f9,JMe),e(JMe,o8r),e(f9,r8r),e(fr,t8r),e(fr,Ot),M(g9,Ot,null),e(Ot,a8r),e(Ot,YMe),e(YMe,n8r),e(Ot,s8r),e(Ot,Rc),e(Rc,l8r),e(Rc,KMe),e(KMe,i8r),e(Rc,d8r),e(Rc,EJ),e(EJ,c8r),e(Rc,m8r),e(Ot,f8r),M(I3,Ot,null),e(fr,g8r),e(fr,Dr),M(h9,Dr,null),e(Dr,h8r),e(Dr,ZMe),e(ZMe,u8r),e(Dr,p8r),e(Dr,un),e(un,_8r),e(un,e4e),e(e4e,b8r),e(un,v8r),e(un,o4e),e(o4e,F8r),e(un,T8r),e(un,r4e),e(r4e,M8r),e(un,E8r),e(Dr,C8r),e(Dr,Re),e(Re,q3),e(q3,t4e),e(t4e,w8r),e(q3,A8r),e(q3,CJ),e(CJ,y8r),e(q3,L8r),e(Re,x8r),e(Re,N3),e(N3,a4e),e(a4e,$8r),e(N3,k8r),e(N3,wJ),e(wJ,S8r),e(N3,R8r),e(Re,P8r),e(Re,j3),e(j3,n4e),e(n4e,B8r),e(j3,I8r),e(j3,AJ),e(AJ,q8r),e(j3,N8r),e(Re,j8r),e(Re,D3),e(D3,s4e),e(s4e,D8r),e(D3,G8r),e(D3,yJ),e(yJ,O8r),e(D3,V8r),e(Re,X8r),e(Re,G3),e(G3,l4e),e(l4e,z8r),e(G3,W8r),e(G3,LJ),e(LJ,Q8r),e(G3,H8r),e(Re,U8r),e(Re,O3),e(O3,i4e),e(i4e,J8r),e(O3,Y8r),e(O3,xJ),e(xJ,K8r),e(O3,Z8r),e(Re,exr),e(Re,V3),e(V3,d4e),e(d4e,oxr),e(V3,rxr),e(V3,$J),e($J,txr),e(V3,axr),e(Re,nxr),e(Re,X3),e(X3,c4e),e(c4e,sxr),e(X3,lxr),e(X3,kJ),e(kJ,ixr),e(X3,dxr),e(Re,cxr),e(Re,z3),e(z3,m4e),e(m4e,mxr),e(z3,fxr),e(z3,SJ),e(SJ,gxr),e(z3,hxr),e(Dr,uxr),M(W3,Dr,null),b(m,iNe,_),b(m,Pc,_),e(Pc,Q3),e(Q3,f4e),M(u9,f4e,null),e(Pc,pxr),e(Pc,g4e),e(g4e,_xr),b(m,dNe,_),b(m,gr,_),M(p9,gr,null),e(gr,bxr),e(gr,Bc),e(Bc,vxr),e(Bc,RJ),e(RJ,Fxr),e(Bc,Txr),e(Bc,PJ),e(PJ,Mxr),e(Bc,Exr),e(gr,Cxr),e(gr,_9),e(_9,wxr),e(_9,h4e),e(h4e,Axr),e(_9,yxr),e(gr,Lxr),e(gr,Vt),M(b9,Vt,null),e(Vt,xxr),e(Vt,u4e),e(u4e,$xr),e(Vt,kxr),e(Vt,Ic),e(Ic,Sxr),e(Ic,p4e),e(p4e,Rxr),e(Ic,Pxr),e(Ic,BJ),e(BJ,Bxr),e(Ic,Ixr),e(Vt,qxr),M(H3,Vt,null),e(gr,Nxr),e(gr,Gr),M(v9,Gr,null),e(Gr,jxr),e(Gr,_4e),e(_4e,Dxr),e(Gr,Gxr),e(Gr,pn),e(pn,Oxr),e(pn,b4e),e(b4e,Vxr),e(pn,Xxr),e(pn,v4e),e(v4e,zxr),e(pn,Wxr),e(pn,F4e),e(F4e,Qxr),e(pn,Hxr),e(Gr,Uxr),e(Gr,Me),e(Me,U3),e(U3,T4e),e(T4e,Jxr),e(U3,Yxr),e(U3,IJ),e(IJ,Kxr),e(U3,Zxr),e(Me,e9r),e(Me,J3),e(J3,M4e),e(M4e,o9r),e(J3,r9r),e(J3,qJ),e(qJ,t9r),e(J3,a9r),e(Me,n9r),e(Me,Y3),e(Y3,E4e),e(E4e,s9r),e(Y3,l9r),e(Y3,NJ),e(NJ,i9r),e(Y3,d9r),e(Me,c9r),e(Me,K3),e(K3,C4e),e(C4e,m9r),e(K3,f9r),e(K3,jJ),e(jJ,g9r),e(K3,h9r),e(Me,u9r),e(Me,Z3),e(Z3,w4e),e(w4e,p9r),e(Z3,_9r),e(Z3,DJ),e(DJ,b9r),e(Z3,v9r),e(Me,F9r),e(Me,ew),e(ew,A4e),e(A4e,T9r),e(ew,M9r),e(ew,GJ),e(GJ,E9r),e(ew,C9r),e(Me,w9r),e(Me,ow),e(ow,y4e),e(y4e,A9r),e(ow,y9r),e(ow,OJ),e(OJ,L9r),e(ow,x9r),e(Me,$9r),e(Me,rw),e(rw,L4e),e(L4e,k9r),e(rw,S9r),e(rw,VJ),e(VJ,R9r),e(rw,P9r),e(Me,B9r),e(Me,tw),e(tw,x4e),e(x4e,I9r),e(tw,q9r),e(tw,XJ),e(XJ,N9r),e(tw,j9r),e(Me,D9r),e(Me,aw),e(aw,$4e),e($4e,G9r),e(aw,O9r),e(aw,zJ),e(zJ,V9r),e(aw,X9r),e(Me,z9r),e(Me,nw),e(nw,k4e),e(k4e,W9r),e(nw,Q9r),e(nw,WJ),e(WJ,H9r),e(nw,U9r),e(Me,J9r),e(Me,sw),e(sw,S4e),e(S4e,Y9r),e(sw,K9r),e(sw,QJ),e(QJ,Z9r),e(sw,e7r),e(Gr,o7r),M(lw,Gr,null),b(m,cNe,_),b(m,qc,_),e(qc,iw),e(iw,R4e),M(F9,R4e,null),e(qc,r7r),e(qc,P4e),e(P4e,t7r),b(m,mNe,_),b(m,hr,_),M(T9,hr,null),e(hr,a7r),e(hr,Nc),e(Nc,n7r),e(Nc,HJ),e(HJ,s7r),e(Nc,l7r),e(Nc,UJ),e(UJ,i7r),e(Nc,d7r),e(hr,c7r),e(hr,M9),e(M9,m7r),e(M9,B4e),e(B4e,f7r),e(M9,g7r),e(hr,h7r),e(hr,Xt),M(E9,Xt,null),e(Xt,u7r),e(Xt,I4e),e(I4e,p7r),e(Xt,_7r),e(Xt,jc),e(jc,b7r),e(jc,q4e),e(q4e,v7r),e(jc,F7r),e(jc,JJ),e(JJ,T7r),e(jc,M7r),e(Xt,E7r),M(dw,Xt,null),e(hr,C7r),e(hr,Or),M(C9,Or,null),e(Or,w7r),e(Or,N4e),e(N4e,A7r),e(Or,y7r),e(Or,_n),e(_n,L7r),e(_n,j4e),e(j4e,x7r),e(_n,$7r),e(_n,D4e),e(D4e,k7r),e(_n,S7r),e(_n,G4e),e(G4e,R7r),e(_n,P7r),e(Or,B7r),e(Or,Le),e(Le,cw),e(cw,O4e),e(O4e,I7r),e(cw,q7r),e(cw,YJ),e(YJ,N7r),e(cw,j7r),e(Le,D7r),e(Le,mw),e(mw,V4e),e(V4e,G7r),e(mw,O7r),e(mw,KJ),e(KJ,V7r),e(mw,X7r),e(Le,z7r),e(Le,fw),e(fw,X4e),e(X4e,W7r),e(fw,Q7r),e(fw,ZJ),e(ZJ,H7r),e(fw,U7r),e(Le,J7r),e(Le,gw),e(gw,z4e),e(z4e,Y7r),e(gw,K7r),e(gw,eY),e(eY,Z7r),e(gw,e$r),e(Le,o$r),e(Le,hw),e(hw,W4e),e(W4e,r$r),e(hw,t$r),e(hw,oY),e(oY,a$r),e(hw,n$r),e(Le,s$r),e(Le,uw),e(uw,Q4e),e(Q4e,l$r),e(uw,i$r),e(uw,rY),e(rY,d$r),e(uw,c$r),e(Le,m$r),e(Le,pw),e(pw,H4e),e(H4e,f$r),e(pw,g$r),e(pw,tY),e(tY,h$r),e(pw,u$r),e(Le,p$r),e(Le,_w),e(_w,U4e),e(U4e,_$r),e(_w,b$r),e(_w,aY),e(aY,v$r),e(_w,F$r),e(Le,T$r),e(Le,bw),e(bw,J4e),e(J4e,M$r),e(bw,E$r),e(bw,nY),e(nY,C$r),e(bw,w$r),e(Le,A$r),e(Le,vw),e(vw,Y4e),e(Y4e,y$r),e(vw,L$r),e(vw,sY),e(sY,x$r),e(vw,$$r),e(Or,k$r),M(Fw,Or,null),b(m,fNe,_),b(m,Dc,_),e(Dc,Tw),e(Tw,K4e),M(w9,K4e,null),e(Dc,S$r),e(Dc,Z4e),e(Z4e,R$r),b(m,gNe,_),b(m,ur,_),M(A9,ur,null),e(ur,P$r),e(ur,Gc),e(Gc,B$r),e(Gc,lY),e(lY,I$r),e(Gc,q$r),e(Gc,iY),e(iY,N$r),e(Gc,j$r),e(ur,D$r),e(ur,y9),e(y9,G$r),e(y9,eEe),e(eEe,O$r),e(y9,V$r),e(ur,X$r),e(ur,zt),M(L9,zt,null),e(zt,z$r),e(zt,oEe),e(oEe,W$r),e(zt,Q$r),e(zt,Oc),e(Oc,H$r),e(Oc,rEe),e(rEe,U$r),e(Oc,J$r),e(Oc,dY),e(dY,Y$r),e(Oc,K$r),e(zt,Z$r),M(Mw,zt,null),e(ur,ekr),e(ur,Vr),M(x9,Vr,null),e(Vr,okr),e(Vr,tEe),e(tEe,rkr),e(Vr,tkr),e(Vr,bn),e(bn,akr),e(bn,aEe),e(aEe,nkr),e(bn,skr),e(bn,nEe),e(nEe,lkr),e(bn,ikr),e(bn,sEe),e(sEe,dkr),e(bn,ckr),e(Vr,mkr),e(Vr,Pe),e(Pe,Ew),e(Ew,lEe),e(lEe,fkr),e(Ew,gkr),e(Ew,cY),e(cY,hkr),e(Ew,ukr),e(Pe,pkr),e(Pe,Cw),e(Cw,iEe),e(iEe,_kr),e(Cw,bkr),e(Cw,mY),e(mY,vkr),e(Cw,Fkr),e(Pe,Tkr),e(Pe,ww),e(ww,dEe),e(dEe,Mkr),e(ww,Ekr),e(ww,fY),e(fY,Ckr),e(ww,wkr),e(Pe,Akr),e(Pe,Aw),e(Aw,cEe),e(cEe,ykr),e(Aw,Lkr),e(Aw,gY),e(gY,xkr),e(Aw,$kr),e(Pe,kkr),e(Pe,yw),e(yw,mEe),e(mEe,Skr),e(yw,Rkr),e(yw,hY),e(hY,Pkr),e(yw,Bkr),e(Pe,Ikr),e(Pe,Lw),e(Lw,fEe),e(fEe,qkr),e(Lw,Nkr),e(Lw,uY),e(uY,jkr),e(Lw,Dkr),e(Pe,Gkr),e(Pe,xw),e(xw,gEe),e(gEe,Okr),e(xw,Vkr),e(xw,pY),e(pY,Xkr),e(xw,zkr),e(Pe,Wkr),e(Pe,$w),e($w,hEe),e(hEe,Qkr),e($w,Hkr),e($w,_Y),e(_Y,Ukr),e($w,Jkr),e(Pe,Ykr),e(Pe,kw),e(kw,uEe),e(uEe,Kkr),e(kw,Zkr),e(kw,bY),e(bY,eSr),e(kw,oSr),e(Vr,rSr),M(Sw,Vr,null),b(m,hNe,_),b(m,Vc,_),e(Vc,Rw),e(Rw,pEe),M($9,pEe,null),e(Vc,tSr),e(Vc,_Ee),e(_Ee,aSr),b(m,uNe,_),b(m,pr,_),M(k9,pr,null),e(pr,nSr),e(pr,Xc),e(Xc,sSr),e(Xc,vY),e(vY,lSr),e(Xc,iSr),e(Xc,FY),e(FY,dSr),e(Xc,cSr),e(pr,mSr),e(pr,S9),e(S9,fSr),e(S9,bEe),e(bEe,gSr),e(S9,hSr),e(pr,uSr),e(pr,Wt),M(R9,Wt,null),e(Wt,pSr),e(Wt,vEe),e(vEe,_Sr),e(Wt,bSr),e(Wt,zc),e(zc,vSr),e(zc,FEe),e(FEe,FSr),e(zc,TSr),e(zc,TY),e(TY,MSr),e(zc,ESr),e(Wt,CSr),M(Pw,Wt,null),e(pr,wSr),e(pr,Xr),M(P9,Xr,null),e(Xr,ASr),e(Xr,TEe),e(TEe,ySr),e(Xr,LSr),e(Xr,vn),e(vn,xSr),e(vn,MEe),e(MEe,$Sr),e(vn,kSr),e(vn,EEe),e(EEe,SSr),e(vn,RSr),e(vn,CEe),e(CEe,PSr),e(vn,BSr),e(Xr,ISr),e(Xr,xe),e(xe,Bw),e(Bw,wEe),e(wEe,qSr),e(Bw,NSr),e(Bw,MY),e(MY,jSr),e(Bw,DSr),e(xe,GSr),e(xe,Iw),e(Iw,AEe),e(AEe,OSr),e(Iw,VSr),e(Iw,EY),e(EY,XSr),e(Iw,zSr),e(xe,WSr),e(xe,qw),e(qw,yEe),e(yEe,QSr),e(qw,HSr),e(qw,CY),e(CY,USr),e(qw,JSr),e(xe,YSr),e(xe,Nw),e(Nw,LEe),e(LEe,KSr),e(Nw,ZSr),e(Nw,wY),e(wY,eRr),e(Nw,oRr),e(xe,rRr),e(xe,jw),e(jw,xEe),e(xEe,tRr),e(jw,aRr),e(jw,AY),e(AY,nRr),e(jw,sRr),e(xe,lRr),e(xe,Dw),e(Dw,$Ee),e($Ee,iRr),e(Dw,dRr),e(Dw,yY),e(yY,cRr),e(Dw,mRr),e(xe,fRr),e(xe,Gw),e(Gw,kEe),e(kEe,gRr),e(Gw,hRr),e(Gw,LY),e(LY,uRr),e(Gw,pRr),e(xe,_Rr),e(xe,Ow),e(Ow,SEe),e(SEe,bRr),e(Ow,vRr),e(Ow,xY),e(xY,FRr),e(Ow,TRr),e(xe,MRr),e(xe,Vw),e(Vw,REe),e(REe,ERr),e(Vw,CRr),e(Vw,$Y),e($Y,wRr),e(Vw,ARr),e(xe,yRr),e(xe,Xw),e(Xw,PEe),e(PEe,LRr),e(Xw,xRr),e(Xw,kY),e(kY,$Rr),e(Xw,kRr),e(Xr,SRr),M(zw,Xr,null),b(m,pNe,_),b(m,Wc,_),e(Wc,Ww),e(Ww,BEe),M(B9,BEe,null),e(Wc,RRr),e(Wc,IEe),e(IEe,PRr),b(m,_Ne,_),b(m,_r,_),M(I9,_r,null),e(_r,BRr),e(_r,Qc),e(Qc,IRr),e(Qc,SY),e(SY,qRr),e(Qc,NRr),e(Qc,RY),e(RY,jRr),e(Qc,DRr),e(_r,GRr),e(_r,q9),e(q9,ORr),e(q9,qEe),e(qEe,VRr),e(q9,XRr),e(_r,zRr),e(_r,Qt),M(N9,Qt,null),e(Qt,WRr),e(Qt,NEe),e(NEe,QRr),e(Qt,HRr),e(Qt,Hc),e(Hc,URr),e(Hc,jEe),e(jEe,JRr),e(Hc,YRr),e(Hc,PY),e(PY,KRr),e(Hc,ZRr),e(Qt,ePr),M(Qw,Qt,null),e(_r,oPr),e(_r,zr),M(j9,zr,null),e(zr,rPr),e(zr,DEe),e(DEe,tPr),e(zr,aPr),e(zr,Fn),e(Fn,nPr),e(Fn,GEe),e(GEe,sPr),e(Fn,lPr),e(Fn,OEe),e(OEe,iPr),e(Fn,dPr),e(Fn,VEe),e(VEe,cPr),e(Fn,mPr),e(zr,fPr),e(zr,$e),e($e,Hw),e(Hw,XEe),e(XEe,gPr),e(Hw,hPr),e(Hw,BY),e(BY,uPr),e(Hw,pPr),e($e,_Pr),e($e,Uw),e(Uw,zEe),e(zEe,bPr),e(Uw,vPr),e(Uw,IY),e(IY,FPr),e(Uw,TPr),e($e,MPr),e($e,Jw),e(Jw,WEe),e(WEe,EPr),e(Jw,CPr),e(Jw,qY),e(qY,wPr),e(Jw,APr),e($e,yPr),e($e,Yw),e(Yw,QEe),e(QEe,LPr),e(Yw,xPr),e(Yw,NY),e(NY,$Pr),e(Yw,kPr),e($e,SPr),e($e,Kw),e(Kw,HEe),e(HEe,RPr),e(Kw,PPr),e(Kw,jY),e(jY,BPr),e(Kw,IPr),e($e,qPr),e($e,Zw),e(Zw,UEe),e(UEe,NPr),e(Zw,jPr),e(Zw,DY),e(DY,DPr),e(Zw,GPr),e($e,OPr),e($e,eA),e(eA,JEe),e(JEe,VPr),e(eA,XPr),e(eA,GY),e(GY,zPr),e(eA,WPr),e($e,QPr),e($e,oA),e(oA,YEe),e(YEe,HPr),e(oA,UPr),e(oA,OY),e(OY,JPr),e(oA,YPr),e($e,KPr),e($e,rA),e(rA,KEe),e(KEe,ZPr),e(rA,eBr),e(rA,VY),e(VY,oBr),e(rA,rBr),e($e,tBr),e($e,tA),e(tA,ZEe),e(ZEe,aBr),e(tA,nBr),e(tA,XY),e(XY,sBr),e(tA,lBr),e(zr,iBr),M(aA,zr,null),b(m,bNe,_),b(m,Uc,_),e(Uc,nA),e(nA,eCe),M(D9,eCe,null),e(Uc,dBr),e(Uc,oCe),e(oCe,cBr),b(m,vNe,_),b(m,br,_),M(G9,br,null),e(br,mBr),e(br,Jc),e(Jc,fBr),e(Jc,zY),e(zY,gBr),e(Jc,hBr),e(Jc,WY),e(WY,uBr),e(Jc,pBr),e(br,_Br),e(br,O9),e(O9,bBr),e(O9,rCe),e(rCe,vBr),e(O9,FBr),e(br,TBr),e(br,Ht),M(V9,Ht,null),e(Ht,MBr),e(Ht,tCe),e(tCe,EBr),e(Ht,CBr),e(Ht,Yc),e(Yc,wBr),e(Yc,aCe),e(aCe,ABr),e(Yc,yBr),e(Yc,QY),e(QY,LBr),e(Yc,xBr),e(Ht,$Br),M(sA,Ht,null),e(br,kBr),e(br,Wr),M(X9,Wr,null),e(Wr,SBr),e(Wr,nCe),e(nCe,RBr),e(Wr,PBr),e(Wr,Tn),e(Tn,BBr),e(Tn,sCe),e(sCe,IBr),e(Tn,qBr),e(Tn,lCe),e(lCe,NBr),e(Tn,jBr),e(Tn,iCe),e(iCe,DBr),e(Tn,GBr),e(Wr,OBr),e(Wr,De),e(De,lA),e(lA,dCe),e(dCe,VBr),e(lA,XBr),e(lA,HY),e(HY,zBr),e(lA,WBr),e(De,QBr),e(De,iA),e(iA,cCe),e(cCe,HBr),e(iA,UBr),e(iA,UY),e(UY,JBr),e(iA,YBr),e(De,KBr),e(De,dA),e(dA,mCe),e(mCe,ZBr),e(dA,eIr),e(dA,JY),e(JY,oIr),e(dA,rIr),e(De,tIr),e(De,cA),e(cA,fCe),e(fCe,aIr),e(cA,nIr),e(cA,YY),e(YY,sIr),e(cA,lIr),e(De,iIr),e(De,mA),e(mA,gCe),e(gCe,dIr),e(mA,cIr),e(mA,KY),e(KY,mIr),e(mA,fIr),e(De,gIr),e(De,fA),e(fA,hCe),e(hCe,hIr),e(fA,uIr),e(fA,ZY),e(ZY,pIr),e(fA,_Ir),e(De,bIr),e(De,gA),e(gA,uCe),e(uCe,vIr),e(gA,FIr),e(gA,eK),e(eK,TIr),e(gA,MIr),e(De,EIr),e(De,hA),e(hA,pCe),e(pCe,CIr),e(hA,wIr),e(hA,oK),e(oK,AIr),e(hA,yIr),e(Wr,LIr),M(uA,Wr,null),b(m,FNe,_),b(m,Kc,_),e(Kc,pA),e(pA,_Ce),M(z9,_Ce,null),e(Kc,xIr),e(Kc,bCe),e(bCe,$Ir),b(m,TNe,_),b(m,vr,_),M(W9,vr,null),e(vr,kIr),e(vr,Zc),e(Zc,SIr),e(Zc,rK),e(rK,RIr),e(Zc,PIr),e(Zc,tK),e(tK,BIr),e(Zc,IIr),e(vr,qIr),e(vr,Q9),e(Q9,NIr),e(Q9,vCe),e(vCe,jIr),e(Q9,DIr),e(vr,GIr),e(vr,Ut),M(H9,Ut,null),e(Ut,OIr),e(Ut,FCe),e(FCe,VIr),e(Ut,XIr),e(Ut,em),e(em,zIr),e(em,TCe),e(TCe,WIr),e(em,QIr),e(em,aK),e(aK,HIr),e(em,UIr),e(Ut,JIr),M(_A,Ut,null),e(vr,YIr),e(vr,Qr),M(U9,Qr,null),e(Qr,KIr),e(Qr,MCe),e(MCe,ZIr),e(Qr,eqr),e(Qr,Mn),e(Mn,oqr),e(Mn,ECe),e(ECe,rqr),e(Mn,tqr),e(Mn,CCe),e(CCe,aqr),e(Mn,nqr),e(Mn,wCe),e(wCe,sqr),e(Mn,lqr),e(Qr,iqr),e(Qr,Ge),e(Ge,bA),e(bA,ACe),e(ACe,dqr),e(bA,cqr),e(bA,nK),e(nK,mqr),e(bA,fqr),e(Ge,gqr),e(Ge,vA),e(vA,yCe),e(yCe,hqr),e(vA,uqr),e(vA,sK),e(sK,pqr),e(vA,_qr),e(Ge,bqr),e(Ge,FA),e(FA,LCe),e(LCe,vqr),e(FA,Fqr),e(FA,lK),e(lK,Tqr),e(FA,Mqr),e(Ge,Eqr),e(Ge,TA),e(TA,xCe),e(xCe,Cqr),e(TA,wqr),e(TA,iK),e(iK,Aqr),e(TA,yqr),e(Ge,Lqr),e(Ge,MA),e(MA,$Ce),e($Ce,xqr),e(MA,$qr),e(MA,dK),e(dK,kqr),e(MA,Sqr),e(Ge,Rqr),e(Ge,EA),e(EA,kCe),e(kCe,Pqr),e(EA,Bqr),e(EA,cK),e(cK,Iqr),e(EA,qqr),e(Ge,Nqr),e(Ge,CA),e(CA,SCe),e(SCe,jqr),e(CA,Dqr),e(CA,mK),e(mK,Gqr),e(CA,Oqr),e(Ge,Vqr),e(Ge,wA),e(wA,RCe),e(RCe,Xqr),e(wA,zqr),e(wA,fK),e(fK,Wqr),e(wA,Qqr),e(Qr,Hqr),M(AA,Qr,null),b(m,MNe,_),b(m,om,_),e(om,yA),e(yA,PCe),M(J9,PCe,null),e(om,Uqr),e(om,BCe),e(BCe,Jqr),b(m,ENe,_),b(m,Fr,_),M(Y9,Fr,null),e(Fr,Yqr),e(Fr,rm),e(rm,Kqr),e(rm,gK),e(gK,Zqr),e(rm,eNr),e(rm,hK),e(hK,oNr),e(rm,rNr),e(Fr,tNr),e(Fr,K9),e(K9,aNr),e(K9,ICe),e(ICe,nNr),e(K9,sNr),e(Fr,lNr),e(Fr,Jt),M(Z9,Jt,null),e(Jt,iNr),e(Jt,qCe),e(qCe,dNr),e(Jt,cNr),e(Jt,tm),e(tm,mNr),e(tm,NCe),e(NCe,fNr),e(tm,gNr),e(tm,uK),e(uK,hNr),e(tm,uNr),e(Jt,pNr),M(LA,Jt,null),e(Fr,_Nr),e(Fr,Hr),M(e7,Hr,null),e(Hr,bNr),e(Hr,jCe),e(jCe,vNr),e(Hr,FNr),e(Hr,En),e(En,TNr),e(En,DCe),e(DCe,MNr),e(En,ENr),e(En,GCe),e(GCe,CNr),e(En,wNr),e(En,OCe),e(OCe,ANr),e(En,yNr),e(Hr,LNr),e(Hr,VCe),e(VCe,xA),e(xA,XCe),e(XCe,xNr),e(xA,$Nr),e(xA,pK),e(pK,kNr),e(xA,SNr),e(Hr,RNr),M($A,Hr,null),b(m,CNe,_),b(m,am,_),e(am,kA),e(kA,zCe),M(o7,zCe,null),e(am,PNr),e(am,WCe),e(WCe,BNr),b(m,wNe,_),b(m,Tr,_),M(r7,Tr,null),e(Tr,INr),e(Tr,nm),e(nm,qNr),e(nm,_K),e(_K,NNr),e(nm,jNr),e(nm,bK),e(bK,DNr),e(nm,GNr),e(Tr,ONr),e(Tr,t7),e(t7,VNr),e(t7,QCe),e(QCe,XNr),e(t7,zNr),e(Tr,WNr),e(Tr,Yt),M(a7,Yt,null),e(Yt,QNr),e(Yt,HCe),e(HCe,HNr),e(Yt,UNr),e(Yt,sm),e(sm,JNr),e(sm,UCe),e(UCe,YNr),e(sm,KNr),e(sm,vK),e(vK,ZNr),e(sm,ejr),e(Yt,ojr),M(SA,Yt,null),e(Tr,rjr),e(Tr,Ur),M(n7,Ur,null),e(Ur,tjr),e(Ur,JCe),e(JCe,ajr),e(Ur,njr),e(Ur,Cn),e(Cn,sjr),e(Cn,YCe),e(YCe,ljr),e(Cn,ijr),e(Cn,KCe),e(KCe,djr),e(Cn,cjr),e(Cn,ZCe),e(ZCe,mjr),e(Cn,fjr),e(Ur,gjr),e(Ur,s7),e(s7,RA),e(RA,e5e),e(e5e,hjr),e(RA,ujr),e(RA,FK),e(FK,pjr),e(RA,_jr),e(s7,bjr),e(s7,PA),e(PA,o5e),e(o5e,vjr),e(PA,Fjr),e(PA,TK),e(TK,Tjr),e(PA,Mjr),e(Ur,Ejr),M(BA,Ur,null),b(m,ANe,_),b(m,lm,_),e(lm,IA),e(IA,r5e),M(l7,r5e,null),e(lm,Cjr),e(lm,t5e),e(t5e,wjr),b(m,yNe,_),b(m,Mr,_),M(i7,Mr,null),e(Mr,Ajr),e(Mr,im),e(im,yjr),e(im,MK),e(MK,Ljr),e(im,xjr),e(im,EK),e(EK,$jr),e(im,kjr),e(Mr,Sjr),e(Mr,d7),e(d7,Rjr),e(d7,a5e),e(a5e,Pjr),e(d7,Bjr),e(Mr,Ijr),e(Mr,Kt),M(c7,Kt,null),e(Kt,qjr),e(Kt,n5e),e(n5e,Njr),e(Kt,jjr),e(Kt,dm),e(dm,Djr),e(dm,s5e),e(s5e,Gjr),e(dm,Ojr),e(dm,CK),e(CK,Vjr),e(dm,Xjr),e(Kt,zjr),M(qA,Kt,null),e(Mr,Wjr),e(Mr,Jr),M(m7,Jr,null),e(Jr,Qjr),e(Jr,l5e),e(l5e,Hjr),e(Jr,Ujr),e(Jr,wn),e(wn,Jjr),e(wn,i5e),e(i5e,Yjr),e(wn,Kjr),e(wn,d5e),e(d5e,Zjr),e(wn,eDr),e(wn,c5e),e(c5e,oDr),e(wn,rDr),e(Jr,tDr),e(Jr,m5e),e(m5e,NA),e(NA,f5e),e(f5e,aDr),e(NA,nDr),e(NA,wK),e(wK,sDr),e(NA,lDr),e(Jr,iDr),M(jA,Jr,null),LNe=!0},p(m,[_]){const f7={};_&2&&(f7.$$scope={dirty:_,ctx:m}),bm.$set(f7);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:m}),bg.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:m}),Kg.$set(h5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:m}),yh.$set(u5e);const g7={};_&2&&(g7.$$scope={dirty:_,ctx:m}),Lh.$set(g7);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:m}),Qh.$set(p5e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),Hh.$set(An);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:m}),Yh.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:m}),Op.$set(b5e);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:m}),Xp.$set(v5e);const h7={};_&2&&(h7.$$scope={dirty:_,ctx:m}),R_.$set(h7);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:m}),B_.$set(F5e);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:m}),vb.$set(u7);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:m}),Tb.$set(T5e);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:m}),a2.$set(p7);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:m}),s2.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:m}),C2.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:m}),A2.$set(C5e);const cm={};_&2&&(cm.$$scope={dirty:_,ctx:m}),Fv.$set(cm);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:m}),Mv.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:m}),Zv.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:m}),oF.$set(y5e);const _7={};_&2&&(_7.$$scope={dirty:_,ctx:m}),iF.$set(_7);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:m}),cF.$set(L5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:m}),zF.$set(x5e);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:m}),QF.$set($5e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),P1.$set(et);const b7={};_&2&&(b7.$$scope={dirty:_,ctx:m}),I1.$set(b7);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:m}),j1.$set(k5e);const v7={};_&2&&(v7.$$scope={dirty:_,ctx:m}),G1.$set(v7);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:m}),eT.$set(S5e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),rT.$set(ot);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:m}),nT.$set(R5e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),lT.$set(mm);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:m}),bT.$set(P5e);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:m}),FT.$set(B5e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),yT.$set(y);const DA={};_&2&&(DA.$$scope={dirty:_,ctx:m}),xT.$set(DA);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:m}),DT.$set(I5e);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:m}),OT.$set(q5e);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),WT.$set(GA);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:m}),HT.$set(N5e);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:m}),oM.$set(j5e);const OA={};_&2&&(OA.$$scope={dirty:_,ctx:m}),tM.$set(OA);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),iM.$set(D5e);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),cM.$set(G5e);const VA={};_&2&&(VA.$$scope={dirty:_,ctx:m}),hM.$set(VA);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),pM.$set(O5e);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),vM.$set(V5e);const XA={};_&2&&(XA.$$scope={dirty:_,ctx:m}),TM.$set(XA);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),yM.$set(X5e);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),xM.$set(z5e);const zA={};_&2&&(zA.$$scope={dirty:_,ctx:m}),SM.$set(zA);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),PM.$set(W5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),A4.$set(Q5e);const WA={};_&2&&(WA.$$scope={dirty:_,ctx:m}),L4.$set(WA);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),K4.$set(H5e);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),eE.$set(U5e);const QA={};_&2&&(QA.$$scope={dirty:_,ctx:m}),gE.$set(QA);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),uE.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),FE.$set(Y5e);const HA={};_&2&&(HA.$$scope={dirty:_,ctx:m}),ME.$set(HA);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),VE.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),zE.$set(Z5e);const UA={};_&2&&(UA.$$scope={dirty:_,ctx:m}),rC.$set(UA);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:m}),aC.$set(e3e);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:m}),kC.$set(o3e);const JA={};_&2&&(JA.$$scope={dirty:_,ctx:m}),RC.$set(JA);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:m}),YC.$set(r3e);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:m}),ZC.$set(t3e);const YA={};_&2&&(YA.$$scope={dirty:_,ctx:m}),r5.$set(YA);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:m}),a5.$set(a3e);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:m}),s5.$set(n3e);const KA={};_&2&&(KA.$$scope={dirty:_,ctx:m}),i5.$set(KA);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:m}),x5.$set(s3e);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:m}),k5.$set(l3e);const ZA={};_&2&&(ZA.$$scope={dirty:_,ctx:m}),K5.$set(ZA);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:m}),e3.$set(i3e);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:m}),r3.$set(d3e);const e6={};_&2&&(e6.$$scope={dirty:_,ctx:m}),a3.$set(e6);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:m}),s3.$set(c3e);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:m}),i3.$set(m3e);const o6={};_&2&&(o6.$$scope={dirty:_,ctx:m}),P3.$set(o6);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:m}),I3.$set(f3e);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:m}),W3.$set(g3e);const r6={};_&2&&(r6.$$scope={dirty:_,ctx:m}),H3.$set(r6);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:m}),lw.$set(h3e);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:m}),dw.$set(u3e);const t6={};_&2&&(t6.$$scope={dirty:_,ctx:m}),Fw.$set(t6);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:m}),Mw.$set(p3e);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:m}),Sw.$set(_3e);const a6={};_&2&&(a6.$$scope={dirty:_,ctx:m}),Pw.$set(a6);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:m}),zw.$set(b3e);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:m}),Qw.$set(v3e);const n6={};_&2&&(n6.$$scope={dirty:_,ctx:m}),aA.$set(n6);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:m}),sA.$set(F3e);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:m}),uA.$set(T3e);const s6={};_&2&&(s6.$$scope={dirty:_,ctx:m}),_A.$set(s6);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:m}),AA.$set(M3e);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:m}),LA.$set(E3e);const l6={};_&2&&(l6.$$scope={dirty:_,ctx:m}),$A.$set(l6);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:m}),SA.$set(C3e);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:m}),BA.$set(w3e);const i6={};_&2&&(i6.$$scope={dirty:_,ctx:m}),qA.$set(i6);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:m}),jA.$set(A3e)},i(m){LNe||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(ly.$$.fragment,m),E(iy.$$.fragment,m),E(bm.$$.fragment,m),E(dy.$$.fragment,m),E(cy.$$.fragment,m),E(gy.$$.fragment,m),E(bg.$$.fragment,m),E(hy.$$.fragment,m),E(uy.$$.fragment,m),E(py.$$.fragment,m),E(vy.$$.fragment,m),E(Kg.$$.fragment,m),E(Fy.$$.fragment,m),E(Ty.$$.fragment,m),E(My.$$.fragment,m),E(wy.$$.fragment,m),E(yh.$$.fragment,m),E(Lh.$$.fragment,m),E(Ay.$$.fragment,m),E(yy.$$.fragment,m),E(Ly.$$.fragment,m),E(ky.$$.fragment,m),E(Qh.$$.fragment,m),E(Hh.$$.fragment,m),E(Sy.$$.fragment,m),E(Ry.$$.fragment,m),E(Py.$$.fragment,m),E(Iy.$$.fragment,m),E(Yh.$$.fragment,m),E(qy.$$.fragment,m),E(Op.$$.fragment,m),E(Ny.$$.fragment,m),E(jy.$$.fragment,m),E(Gy.$$.fragment,m),E(Xp.$$.fragment,m),E(Oy.$$.fragment,m),E(R_.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Wy.$$.fragment,m),E(B_.$$.fragment,m),E(Qy.$$.fragment,m),E(vb.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(Tb.$$.fragment,m),E(Ky.$$.fragment,m),E(a2.$$.fragment,m),E(Zy.$$.fragment,m),E(eL.$$.fragment,m),E(rL.$$.fragment,m),E(s2.$$.fragment,m),E(tL.$$.fragment,m),E(C2.$$.fragment,m),E(aL.$$.fragment,m),E(nL.$$.fragment,m),E(lL.$$.fragment,m),E(A2.$$.fragment,m),E(iL.$$.fragment,m),E(Fv.$$.fragment,m),E(dL.$$.fragment,m),E(cL.$$.fragment,m),E(fL.$$.fragment,m),E(Mv.$$.fragment,m),E(gL.$$.fragment,m),E(Zv.$$.fragment,m),E(hL.$$.fragment,m),E(uL.$$.fragment,m),E(_L.$$.fragment,m),E(oF.$$.fragment,m),E(bL.$$.fragment,m),E(iF.$$.fragment,m),E(vL.$$.fragment,m),E(FL.$$.fragment,m),E(ML.$$.fragment,m),E(cF.$$.fragment,m),E(EL.$$.fragment,m),E(zF.$$.fragment,m),E(CL.$$.fragment,m),E(wL.$$.fragment,m),E(yL.$$.fragment,m),E(QF.$$.fragment,m),E(LL.$$.fragment,m),E(P1.$$.fragment,m),E(xL.$$.fragment,m),E($L.$$.fragment,m),E(SL.$$.fragment,m),E(I1.$$.fragment,m),E(RL.$$.fragment,m),E(j1.$$.fragment,m),E(PL.$$.fragment,m),E(BL.$$.fragment,m),E(qL.$$.fragment,m),E(G1.$$.fragment,m),E(NL.$$.fragment,m),E(eT.$$.fragment,m),E(jL.$$.fragment,m),E(DL.$$.fragment,m),E(OL.$$.fragment,m),E(rT.$$.fragment,m),E(VL.$$.fragment,m),E(nT.$$.fragment,m),E(XL.$$.fragment,m),E(zL.$$.fragment,m),E(QL.$$.fragment,m),E(lT.$$.fragment,m),E(HL.$$.fragment,m),E(bT.$$.fragment,m),E(UL.$$.fragment,m),E(JL.$$.fragment,m),E(KL.$$.fragment,m),E(FT.$$.fragment,m),E(ZL.$$.fragment,m),E(yT.$$.fragment,m),E(e8.$$.fragment,m),E(o8.$$.fragment,m),E(t8.$$.fragment,m),E(xT.$$.fragment,m),E(a8.$$.fragment,m),E(DT.$$.fragment,m),E(n8.$$.fragment,m),E(s8.$$.fragment,m),E(i8.$$.fragment,m),E(OT.$$.fragment,m),E(d8.$$.fragment,m),E(WT.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(h8.$$.fragment,m),E(HT.$$.fragment,m),E(u8.$$.fragment,m),E(oM.$$.fragment,m),E(p8.$$.fragment,m),E(_8.$$.fragment,m),E(v8.$$.fragment,m),E(tM.$$.fragment,m),E(F8.$$.fragment,m),E(iM.$$.fragment,m),E(T8.$$.fragment,m),E(M8.$$.fragment,m),E(C8.$$.fragment,m),E(cM.$$.fragment,m),E(w8.$$.fragment,m),E(hM.$$.fragment,m),E(y8.$$.fragment,m),E(L8.$$.fragment,m),E($8.$$.fragment,m),E(pM.$$.fragment,m),E(k8.$$.fragment,m),E(vM.$$.fragment,m),E(S8.$$.fragment,m),E(R8.$$.fragment,m),E(B8.$$.fragment,m),E(TM.$$.fragment,m),E(I8.$$.fragment,m),E(yM.$$.fragment,m),E(q8.$$.fragment,m),E(N8.$$.fragment,m),E(D8.$$.fragment,m),E(xM.$$.fragment,m),E(G8.$$.fragment,m),E(SM.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(PM.$$.fragment,m),E(W8.$$.fragment,m),E(A4.$$.fragment,m),E(Q8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(L4.$$.fragment,m),E(Y8.$$.fragment,m),E(K4.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(ox.$$.fragment,m),E(eE.$$.fragment,m),E(rx.$$.fragment,m),E(gE.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(uE.$$.fragment,m),E(lx.$$.fragment,m),E(FE.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(ME.$$.fragment,m),E(fx.$$.fragment,m),E(VE.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(px.$$.fragment,m),E(zE.$$.fragment,m),E(_x.$$.fragment,m),E(rC.$$.fragment,m),E(bx.$$.fragment,m),E(vx.$$.fragment,m),E(Tx.$$.fragment,m),E(aC.$$.fragment,m),E(Mx.$$.fragment,m),E(kC.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(RC.$$.fragment,m),E(yx.$$.fragment,m),E(YC.$$.fragment,m),E(Lx.$$.fragment,m),E(xx.$$.fragment,m),E(kx.$$.fragment,m),E(ZC.$$.fragment,m),E(Sx.$$.fragment,m),E(r5.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(qx.$$.fragment,m),E(a5.$$.fragment,m),E(Nx.$$.fragment,m),E(s5.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(i5.$$.fragment,m),E(Vx.$$.fragment,m),E(x5.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Qx.$$.fragment,m),E(k5.$$.fragment,m),E(Hx.$$.fragment,m),E(K5.$$.fragment,m),E(Ux.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(e3.$$.fragment,m),E(Zx.$$.fragment,m),E(r3.$$.fragment,m),E(e9.$$.fragment,m),E(o9.$$.fragment,m),E(t9.$$.fragment,m),E(a3.$$.fragment,m),E(a9.$$.fragment,m),E(s3.$$.fragment,m),E(n9.$$.fragment,m),E(s9.$$.fragment,m),E(i9.$$.fragment,m),E(i3.$$.fragment,m),E(d9.$$.fragment,m),E(P3.$$.fragment,m),E(c9.$$.fragment,m),E(m9.$$.fragment,m),E(g9.$$.fragment,m),E(I3.$$.fragment,m),E(h9.$$.fragment,m),E(W3.$$.fragment,m),E(u9.$$.fragment,m),E(p9.$$.fragment,m),E(b9.$$.fragment,m),E(H3.$$.fragment,m),E(v9.$$.fragment,m),E(lw.$$.fragment,m),E(F9.$$.fragment,m),E(T9.$$.fragment,m),E(E9.$$.fragment,m),E(dw.$$.fragment,m),E(C9.$$.fragment,m),E(Fw.$$.fragment,m),E(w9.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E(Mw.$$.fragment,m),E(x9.$$.fragment,m),E(Sw.$$.fragment,m),E($9.$$.fragment,m),E(k9.$$.fragment,m),E(R9.$$.fragment,m),E(Pw.$$.fragment,m),E(P9.$$.fragment,m),E(zw.$$.fragment,m),E(B9.$$.fragment,m),E(I9.$$.fragment,m),E(N9.$$.fragment,m),E(Qw.$$.fragment,m),E(j9.$$.fragment,m),E(aA.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(sA.$$.fragment,m),E(X9.$$.fragment,m),E(uA.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(H9.$$.fragment,m),E(_A.$$.fragment,m),E(U9.$$.fragment,m),E(AA.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(Z9.$$.fragment,m),E(LA.$$.fragment,m),E(e7.$$.fragment,m),E($A.$$.fragment,m),E(o7.$$.fragment,m),E(r7.$$.fragment,m),E(a7.$$.fragment,m),E(SA.$$.fragment,m),E(n7.$$.fragment,m),E(BA.$$.fragment,m),E(l7.$$.fragment,m),E(i7.$$.fragment,m),E(c7.$$.fragment,m),E(qA.$$.fragment,m),E(m7.$$.fragment,m),E(jA.$$.fragment,m),LNe=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(ly.$$.fragment,m),C(iy.$$.fragment,m),C(bm.$$.fragment,m),C(dy.$$.fragment,m),C(cy.$$.fragment,m),C(gy.$$.fragment,m),C(bg.$$.fragment,m),C(hy.$$.fragment,m),C(uy.$$.fragment,m),C(py.$$.fragment,m),C(vy.$$.fragment,m),C(Kg.$$.fragment,m),C(Fy.$$.fragment,m),C(Ty.$$.fragment,m),C(My.$$.fragment,m),C(wy.$$.fragment,m),C(yh.$$.fragment,m),C(Lh.$$.fragment,m),C(Ay.$$.fragment,m),C(yy.$$.fragment,m),C(Ly.$$.fragment,m),C(ky.$$.fragment,m),C(Qh.$$.fragment,m),C(Hh.$$.fragment,m),C(Sy.$$.fragment,m),C(Ry.$$.fragment,m),C(Py.$$.fragment,m),C(Iy.$$.fragment,m),C(Yh.$$.fragment,m),C(qy.$$.fragment,m),C(Op.$$.fragment,m),C(Ny.$$.fragment,m),C(jy.$$.fragment,m),C(Gy.$$.fragment,m),C(Xp.$$.fragment,m),C(Oy.$$.fragment,m),C(R_.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Wy.$$.fragment,m),C(B_.$$.fragment,m),C(Qy.$$.fragment,m),C(vb.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(Tb.$$.fragment,m),C(Ky.$$.fragment,m),C(a2.$$.fragment,m),C(Zy.$$.fragment,m),C(eL.$$.fragment,m),C(rL.$$.fragment,m),C(s2.$$.fragment,m),C(tL.$$.fragment,m),C(C2.$$.fragment,m),C(aL.$$.fragment,m),C(nL.$$.fragment,m),C(lL.$$.fragment,m),C(A2.$$.fragment,m),C(iL.$$.fragment,m),C(Fv.$$.fragment,m),C(dL.$$.fragment,m),C(cL.$$.fragment,m),C(fL.$$.fragment,m),C(Mv.$$.fragment,m),C(gL.$$.fragment,m),C(Zv.$$.fragment,m),C(hL.$$.fragment,m),C(uL.$$.fragment,m),C(_L.$$.fragment,m),C(oF.$$.fragment,m),C(bL.$$.fragment,m),C(iF.$$.fragment,m),C(vL.$$.fragment,m),C(FL.$$.fragment,m),C(ML.$$.fragment,m),C(cF.$$.fragment,m),C(EL.$$.fragment,m),C(zF.$$.fragment,m),C(CL.$$.fragment,m),C(wL.$$.fragment,m),C(yL.$$.fragment,m),C(QF.$$.fragment,m),C(LL.$$.fragment,m),C(P1.$$.fragment,m),C(xL.$$.fragment,m),C($L.$$.fragment,m),C(SL.$$.fragment,m),C(I1.$$.fragment,m),C(RL.$$.fragment,m),C(j1.$$.fragment,m),C(PL.$$.fragment,m),C(BL.$$.fragment,m),C(qL.$$.fragment,m),C(G1.$$.fragment,m),C(NL.$$.fragment,m),C(eT.$$.fragment,m),C(jL.$$.fragment,m),C(DL.$$.fragment,m),C(OL.$$.fragment,m),C(rT.$$.fragment,m),C(VL.$$.fragment,m),C(nT.$$.fragment,m),C(XL.$$.fragment,m),C(zL.$$.fragment,m),C(QL.$$.fragment,m),C(lT.$$.fragment,m),C(HL.$$.fragment,m),C(bT.$$.fragment,m),C(UL.$$.fragment,m),C(JL.$$.fragment,m),C(KL.$$.fragment,m),C(FT.$$.fragment,m),C(ZL.$$.fragment,m),C(yT.$$.fragment,m),C(e8.$$.fragment,m),C(o8.$$.fragment,m),C(t8.$$.fragment,m),C(xT.$$.fragment,m),C(a8.$$.fragment,m),C(DT.$$.fragment,m),C(n8.$$.fragment,m),C(s8.$$.fragment,m),C(i8.$$.fragment,m),C(OT.$$.fragment,m),C(d8.$$.fragment,m),C(WT.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(h8.$$.fragment,m),C(HT.$$.fragment,m),C(u8.$$.fragment,m),C(oM.$$.fragment,m),C(p8.$$.fragment,m),C(_8.$$.fragment,m),C(v8.$$.fragment,m),C(tM.$$.fragment,m),C(F8.$$.fragment,m),C(iM.$$.fragment,m),C(T8.$$.fragment,m),C(M8.$$.fragment,m),C(C8.$$.fragment,m),C(cM.$$.fragment,m),C(w8.$$.fragment,m),C(hM.$$.fragment,m),C(y8.$$.fragment,m),C(L8.$$.fragment,m),C($8.$$.fragment,m),C(pM.$$.fragment,m),C(k8.$$.fragment,m),C(vM.$$.fragment,m),C(S8.$$.fragment,m),C(R8.$$.fragment,m),C(B8.$$.fragment,m),C(TM.$$.fragment,m),C(I8.$$.fragment,m),C(yM.$$.fragment,m),C(q8.$$.fragment,m),C(N8.$$.fragment,m),C(D8.$$.fragment,m),C(xM.$$.fragment,m),C(G8.$$.fragment,m),C(SM.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(PM.$$.fragment,m),C(W8.$$.fragment,m),C(A4.$$.fragment,m),C(Q8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(L4.$$.fragment,m),C(Y8.$$.fragment,m),C(K4.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(ox.$$.fragment,m),C(eE.$$.fragment,m),C(rx.$$.fragment,m),C(gE.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(uE.$$.fragment,m),C(lx.$$.fragment,m),C(FE.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(ME.$$.fragment,m),C(fx.$$.fragment,m),C(VE.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(px.$$.fragment,m),C(zE.$$.fragment,m),C(_x.$$.fragment,m),C(rC.$$.fragment,m),C(bx.$$.fragment,m),C(vx.$$.fragment,m),C(Tx.$$.fragment,m),C(aC.$$.fragment,m),C(Mx.$$.fragment,m),C(kC.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(RC.$$.fragment,m),C(yx.$$.fragment,m),C(YC.$$.fragment,m),C(Lx.$$.fragment,m),C(xx.$$.fragment,m),C(kx.$$.fragment,m),C(ZC.$$.fragment,m),C(Sx.$$.fragment,m),C(r5.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(qx.$$.fragment,m),C(a5.$$.fragment,m),C(Nx.$$.fragment,m),C(s5.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(i5.$$.fragment,m),C(Vx.$$.fragment,m),C(x5.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Qx.$$.fragment,m),C(k5.$$.fragment,m),C(Hx.$$.fragment,m),C(K5.$$.fragment,m),C(Ux.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(e3.$$.fragment,m),C(Zx.$$.fragment,m),C(r3.$$.fragment,m),C(e9.$$.fragment,m),C(o9.$$.fragment,m),C(t9.$$.fragment,m),C(a3.$$.fragment,m),C(a9.$$.fragment,m),C(s3.$$.fragment,m),C(n9.$$.fragment,m),C(s9.$$.fragment,m),C(i9.$$.fragment,m),C(i3.$$.fragment,m),C(d9.$$.fragment,m),C(P3.$$.fragment,m),C(c9.$$.fragment,m),C(m9.$$.fragment,m),C(g9.$$.fragment,m),C(I3.$$.fragment,m),C(h9.$$.fragment,m),C(W3.$$.fragment,m),C(u9.$$.fragment,m),C(p9.$$.fragment,m),C(b9.$$.fragment,m),C(H3.$$.fragment,m),C(v9.$$.fragment,m),C(lw.$$.fragment,m),C(F9.$$.fragment,m),C(T9.$$.fragment,m),C(E9.$$.fragment,m),C(dw.$$.fragment,m),C(C9.$$.fragment,m),C(Fw.$$.fragment,m),C(w9.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C(Mw.$$.fragment,m),C(x9.$$.fragment,m),C(Sw.$$.fragment,m),C($9.$$.fragment,m),C(k9.$$.fragment,m),C(R9.$$.fragment,m),C(Pw.$$.fragment,m),C(P9.$$.fragment,m),C(zw.$$.fragment,m),C(B9.$$.fragment,m),C(I9.$$.fragment,m),C(N9.$$.fragment,m),C(Qw.$$.fragment,m),C(j9.$$.fragment,m),C(aA.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(sA.$$.fragment,m),C(X9.$$.fragment,m),C(uA.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(H9.$$.fragment,m),C(_A.$$.fragment,m),C(U9.$$.fragment,m),C(AA.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(Z9.$$.fragment,m),C(LA.$$.fragment,m),C(e7.$$.fragment,m),C($A.$$.fragment,m),C(o7.$$.fragment,m),C(r7.$$.fragment,m),C(a7.$$.fragment,m),C(SA.$$.fragment,m),C(n7.$$.fragment,m),C(BA.$$.fragment,m),C(l7.$$.fragment,m),C(i7.$$.fragment,m),C(c7.$$.fragment,m),C(qA.$$.fragment,m),C(m7.$$.fragment,m),C(jA.$$.fragment,m),LNe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(gm),m&&t(rt),m&&t(je),m&&t(We),m&&t(um),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(wIe),m&&t(_i),w(ly),m&&t(AIe),m&&t(kn),m&&t(yIe),w(iy,m),m&&t(LIe),m&&t(x$),m&&t(xIe),w(bm,m),m&&t($Ie),m&&t(bi),w(dy),m&&t(kIe),m&&t(Co),w(cy),w(gy),w(bg),w(hy),m&&t(SIe),m&&t(Fi),w(uy),m&&t(RIe),m&&t(wo),w(py),w(vy),w(Kg),w(Fy),m&&t(PIe),m&&t(Ti),w(Ty),m&&t(BIe),m&&t(Ao),w(My),w(wy),w(yh),w(Lh),w(Ay),m&&t(IIe),m&&t(Mi),w(yy),m&&t(qIe),m&&t(yo),w(Ly),w(ky),w(Qh),w(Hh),w(Sy),m&&t(NIe),m&&t(Ci),w(Ry),m&&t(jIe),m&&t(Lo),w(Py),w(Iy),w(Yh),w(qy),w(Op),m&&t(DIe),m&&t(yi),w(Ny),m&&t(GIe),m&&t(xo),w(jy),w(Gy),w(Xp),w(Oy),w(R_),m&&t(OIe),m&&t($i),w(Vy),m&&t(VIe),m&&t($o),w(Xy),w(Wy),w(B_),w(Qy),w(vb),m&&t(XIe),m&&t(Ri),w(Hy),m&&t(zIe),m&&t(ko),w(Uy),w(Yy),w(Tb),w(Ky),w(a2),m&&t(WIe),m&&t(Ii),w(Zy),m&&t(QIe),m&&t(So),w(eL),w(rL),w(s2),w(tL),w(C2),m&&t(HIe),m&&t(ji),w(aL),m&&t(UIe),m&&t(Ro),w(nL),w(lL),w(A2),w(iL),w(Fv),m&&t(JIe),m&&t(Oi),w(dL),m&&t(YIe),m&&t(Po),w(cL),w(fL),w(Mv),w(gL),w(Zv),m&&t(KIe),m&&t(zi),w(hL),m&&t(ZIe),m&&t(Bo),w(uL),w(_L),w(oF),w(bL),w(iF),m&&t(eqe),m&&t(Hi),w(vL),m&&t(oqe),m&&t(Io),w(FL),w(ML),w(cF),w(EL),w(zF),m&&t(rqe),m&&t(Yi),w(CL),m&&t(tqe),m&&t(qo),w(wL),w(yL),w(QF),w(LL),w(P1),m&&t(aqe),m&&t(ed),w(xL),m&&t(nqe),m&&t(No),w($L),w(SL),w(I1),w(RL),w(j1),m&&t(sqe),m&&t(td),w(PL),m&&t(lqe),m&&t(jo),w(BL),w(qL),w(G1),w(NL),w(eT),m&&t(iqe),m&&t(sd),w(jL),m&&t(dqe),m&&t(Do),w(DL),w(OL),w(rT),w(VL),w(nT),m&&t(cqe),m&&t(dd),w(XL),m&&t(mqe),m&&t(Go),w(zL),w(QL),w(lT),w(HL),w(bT),m&&t(fqe),m&&t(fd),w(UL),m&&t(gqe),m&&t(Oo),w(JL),w(KL),w(FT),w(ZL),w(yT),m&&t(hqe),m&&t(ud),w(e8),m&&t(uqe),m&&t(Vo),w(o8),w(t8),w(xT),w(a8),w(DT),m&&t(pqe),m&&t(bd),w(n8),m&&t(_qe),m&&t(Xo),w(s8),w(i8),w(OT),w(d8),w(WT),m&&t(bqe),m&&t(Td),w(m8),m&&t(vqe),m&&t(zo),w(f8),w(h8),w(HT),w(u8),w(oM),m&&t(Fqe),m&&t(Cd),w(p8),m&&t(Tqe),m&&t(Wo),w(_8),w(v8),w(tM),w(F8),w(iM),m&&t(Mqe),m&&t(Ld),w(T8),m&&t(Eqe),m&&t(Qo),w(M8),w(C8),w(cM),w(w8),w(hM),m&&t(Cqe),m&&t(kd),w(y8),m&&t(wqe),m&&t(Ho),w(L8),w($8),w(pM),w(k8),w(vM),m&&t(Aqe),m&&t(Pd),w(S8),m&&t(yqe),m&&t(Uo),w(R8),w(B8),w(TM),w(I8),w(yM),m&&t(Lqe),m&&t(qd),w(q8),m&&t(xqe),m&&t(Jo),w(N8),w(D8),w(xM),w(G8),w(SM),m&&t($qe),m&&t(Dd),w(O8),m&&t(kqe),m&&t(Yo),w(V8),w(z8),w(PM),w(W8),w(A4),m&&t(Sqe),m&&t(Vd),w(Q8),m&&t(Rqe),m&&t(Ko),w(H8),w(J8),w(L4),w(Y8),w(K4),m&&t(Pqe),m&&t(Wd),w(K8),m&&t(Bqe),m&&t(Zo),w(Z8),w(ox),w(eE),w(rx),w(gE),m&&t(Iqe),m&&t(Ud),w(tx),m&&t(qqe),m&&t(er),w(ax),w(sx),w(uE),w(lx),w(FE),m&&t(Nqe),m&&t(Kd),w(ix),m&&t(jqe),m&&t(or),w(dx),w(mx),w(ME),w(fx),w(VE),m&&t(Dqe),m&&t(oc),w(gx),m&&t(Gqe),m&&t(rr),w(hx),w(px),w(zE),w(_x),w(rC),m&&t(Oqe),m&&t(ac),w(bx),m&&t(Vqe),m&&t(tr),w(vx),w(Tx),w(aC),w(Mx),w(kC),m&&t(Xqe),m&&t(lc),w(Ex),m&&t(zqe),m&&t(ar),w(Cx),w(Ax),w(RC),w(yx),w(YC),m&&t(Wqe),m&&t(cc),w(Lx),m&&t(Qqe),m&&t(nr),w(xx),w(kx),w(ZC),w(Sx),w(r5),m&&t(Hqe),m&&t(gc),w(Px),m&&t(Uqe),m&&t(sr),w(Bx),w(qx),w(a5),w(Nx),w(s5),m&&t(Jqe),m&&t(pc),w(jx),m&&t(Yqe),m&&t(lr),w(Dx),w(Ox),w(i5),w(Vx),w(x5),m&&t(Kqe),m&&t(vc),w(Xx),m&&t(Zqe),m&&t(ir),w(zx),w(Qx),w(k5),w(Hx),w(K5),m&&t(eNe),m&&t(Mc),w(Ux),m&&t(oNe),m&&t(dr),w(Jx),w(Kx),w(e3),w(Zx),w(r3),m&&t(rNe),m&&t(wc),w(e9),m&&t(tNe),m&&t(cr),w(o9),w(t9),w(a3),w(a9),w(s3),m&&t(aNe),m&&t(Lc),w(n9),m&&t(nNe),m&&t(mr),w(s9),w(i9),w(i3),w(d9),w(P3),m&&t(sNe),m&&t(kc),w(c9),m&&t(lNe),m&&t(fr),w(m9),w(g9),w(I3),w(h9),w(W3),m&&t(iNe),m&&t(Pc),w(u9),m&&t(dNe),m&&t(gr),w(p9),w(b9),w(H3),w(v9),w(lw),m&&t(cNe),m&&t(qc),w(F9),m&&t(mNe),m&&t(hr),w(T9),w(E9),w(dw),w(C9),w(Fw),m&&t(fNe),m&&t(Dc),w(w9),m&&t(gNe),m&&t(ur),w(A9),w(L9),w(Mw),w(x9),w(Sw),m&&t(hNe),m&&t(Vc),w($9),m&&t(uNe),m&&t(pr),w(k9),w(R9),w(Pw),w(P9),w(zw),m&&t(pNe),m&&t(Wc),w(B9),m&&t(_Ne),m&&t(_r),w(I9),w(N9),w(Qw),w(j9),w(aA),m&&t(bNe),m&&t(Uc),w(D9),m&&t(vNe),m&&t(br),w(G9),w(V9),w(sA),w(X9),w(uA),m&&t(FNe),m&&t(Kc),w(z9),m&&t(TNe),m&&t(vr),w(W9),w(H9),w(_A),w(U9),w(AA),m&&t(MNe),m&&t(om),w(J9),m&&t(ENe),m&&t(Fr),w(Y9),w(Z9),w(LA),w(e7),w($A),m&&t(CNe),m&&t(am),w(o7),m&&t(wNe),m&&t(Tr),w(r7),w(a7),w(SA),w(n7),w(BA),m&&t(ANe),m&&t(lm),w(l7),m&&t(yNe),m&&t(Mr),w(i7),w(c7),w(qA),w(m7),w(jA)}}}const o9t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function r9t(L){return r8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class d9t extends KLt{constructor(g){super();ZLt(this,g,r9t,e9t,e8t,{})}}export{d9t as default,o9t as metadata};
